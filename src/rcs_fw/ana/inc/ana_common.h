/**********************************************************************************************
 *
 * INTEL CONFIDENTIAL
 *
 * Copyright (C) 2023 Intel Corporation
 *
 * This software and the related documents ("Material") are Intel copyrighted materials,
 * and your use of them is governed by the express license under which they were provided
 * to you ("License"). Unless the License provides otherwise, you may not use, modify,
 * copy, publish, distribute, disclose or transmit this software or the related documents
 * without Intel's prior written permission.
 * This software and the related documents are provided as is, with no express or implied
 * warranties, other than those that are expressly stated in the License.
 * No license under any patent, copyright, trade secret or other intellectual property
 * right is granted to or conferred upon you by disclosure or delivery of the Materials,
 * either expressly, by implication, inducement, estoppel or otherwise. Any license under
 * such intellectual property rights must be expressed and approved by Intel in writing.
 *
 *********************************************************************************************/
/* Get n right most bits from position p of the input x */
/* Refer to "C" programming language by Kernigham and Ritchie - Page 45 */
/*
 *
 GETBITS(&x,7,3) returns the bits narked as "XX"
Input
Variable x
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | II | II | II | XX
| XX | XX | XX | XX |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Output
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0  | 0
| 0  | XX | XX | XX |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

*/
#ifndef ANA_COMMON_H
#define ANA_COMMON_H
#include "stdint.h"
#include "stdbool.h" // IWYU pragma: keep
#include <xtensa/tie/xt_ioports.h>
#include <xtensa/core-macros.h>

uint32_t __attribute__ ((always_inline)) static ACI_CAL_GET_BITS (uint32_t x, uint32_t p, uint32_t n)
{
    return ((x >> (p + 1 - n)) & ~((uint32_t)~0 << n));
}

/*
 * This macro returns x with n bits that begin at position p set to the rightmost n bits of
 * y that begin at position q leaving the other bits unchanged
 * using getbits principle from above macro
 */
/*
 *
EXTRACTSETBITS(&x,12,7,5,&y)
Input
variable y
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | YY | YY | YY | YY
| YY | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
varirable x
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | RR | RR | RR | RR | RR | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Output
variable y
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | YY | YY | YY | YY
| YY | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
varirable x
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | YY | YY | YY | YY | YY | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
#define ACI_CAL_EXTRACTSETBITS(x, p, q, n, y)                                        \
    ((*x) = ((((*y) >> ((q) + 1 - (n)) & ~((uint32_t)~0 << (n))) << ((p) + 1 - (n))) \
             | ((~((~((uint32_t)~0 << (n))) << ((p) + 1 - (n)))) & (*x))))

/*
Input
Variable x
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | MM | MM | MM | MM | MM | MM | MM | MM | MM | MM | 14 | 13 | 12 | 11 | 10 | 09 | 08 | XX | XX | XX | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Output
Variable x
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 01 | 01 | 01 | 01 | 01 | 01 | 01 | 01 | 01 | 01 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | XX | XX | XX | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
#define ACI_CAL_SETBITS(x, p, n)                                                                             \
    (((~((uint32_t)~0 << (n))) << ((p) + 1 - (n))) | (*x)) /* Set p bits from position n of the input x to 1 \
                                                            */

/*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
| 31 | 30 | 29 | 28 | 27 | 26 | 25 | 24 | 23 | 22 | 21 | 20 | 19 | 18 | 17 | 16 | 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | XX | XX | XX | 04
| 03 | 02 | 01 | 00 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
#define CLEARBITS(x, p, n) (~((~(~0 << (n))) << ((p) + 1 - (n))) & (*x)) /* Clear p bits from position n of the input x to 1 */

uint32_t __attribute__ ((always_inline)) static GET_ADC_OUT_SAMPLE (uint32_t delay)
{
    bool sample_received = false;
    uint32_t output;
    while ((delay--) && (sample_received == false))
    {
        if (!CHECK_IPQ ())
        {
            output = READ_IPQ ();
            sample_received = true;
            break;
        }
    }
    if (sample_received == false)
    {
        // TODO:.log error
        output = 0xDEADBEAF;
    }
    return (output);
}
#define ANA_DEBUG_SIZE 20
typedef struct
{
    uint32_t slice_cal;
    uint32_t w0_w11;
    uint32_t sop_lut;
    uint32_t dither;
    uint32_t offset;
    uint32_t w0_w11_sample_processing;
    uint32_t sop_lut_sample_processing;
    uint32_t dither_sample_processing;
    uint32_t offset_sample_processing;
    uint32_t reserved[11];
} T_ANA_PROFILE;
typedef struct
{
    uint32_t address;
    uint32_t data;
} T_ANA_DEBUG;
typedef struct
{
    union {
        struct
        {
            uint32_t ramp_start;
            uint32_t ramp_end;
        } live;
        struct
        {
            uint32_t *p_adc_out;
            float *p_adc_in;
        } unit_test;
    };
    uint32_t num_points;
} T_ASC_SLICE_WGT_SAR_LUT_CAL_SG_INFO;
typedef struct
{
    uint32_t num_points;
} T_ASC_SLICE_DITHER_OFFSET_CAL_SG_INFO;
typedef struct
{
    uint32_t dc_gen_sample_generation_delay;
    uint32_t sequence_gen_write_delay;
    uint32_t firmware_wait_delay_for_adc_sample;
} T_ASC_SLICE_CAL_DELAY_INFO;
typedef struct
{
    T_ASC_SLICE_WGT_SAR_LUT_CAL_SG_INFO wgt_sar_lut_cal_sg_info[2][8];
    T_ASC_SLICE_DITHER_OFFSET_CAL_SG_INFO dither_offset_cal_sg_info[2];
    T_ASC_SLICE_CAL_DELAY_INFO delay_info;
    T_ANA_PROFILE ana_profile;
    T_ANA_DEBUG ana_debug[ANA_DEBUG_SIZE];
} T_ANA_EXT_INFO;
#if DO_PROFILE
#define SETUP_PROFILE \
    uint32_t t0;      \
    uint32_t t1;
#define START_PROFILE    t0 = xthal_get_ccount ();
#define END_PROFILE      t1 = xthal_get_ccount ();
#define STORE_PROFILE(x) ana_ext_info.ana_profile.x = t1 - t0;
#else
#define SETUP_PROFILE
#define START_PROFILE
#define END_PROFILE
#define STORE_PROFILE(x)
#endif
#define NUM_STEPS_IN_INPUT 8
#define ANA_HEAP_SIZE      54016
#endif
