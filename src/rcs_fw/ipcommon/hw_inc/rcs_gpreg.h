#ifndef _RCS_GPREG_H_
#define _RCS_GPREG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_GPREG_BASE        ( 0x0026c000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RCS_GPREG_RCS_CFG_OFFSET ( 0x00000004U )
#define RCS_GPREG_CORE0_CTRL_OFFSET ( 0x00000008U )
#define RCS_GPREG_CORE1_CTRL_OFFSET ( 0x0000000cU )
#define RCS_GPREG_CORE2_CTRL_OFFSET ( 0x00000010U )
#define RCS_GPREG_CORE3_CTRL_OFFSET ( 0x00000014U )
#define RCS_GPREG_CORE0_ALTRSTVEC_OFFSET ( 0x00000018U )
#define RCS_GPREG_CORE1_ALTRSTVEC_OFFSET ( 0x0000001cU )
#define RCS_GPREG_CORE2_ALTRSTVEC_OFFSET ( 0x00000020U )
#define RCS_GPREG_CORE3_ALTRSTVEC_OFFSET ( 0x00000024U )
#define RCS_GPREG_SOFT_RST_OFFSET ( 0x0000002cU )
#define RCS_GPREG_MAILBOX_MASK_OFFSET ( 0x00000034U )
#define RCS_GPREG_RCS_CLK_DISS_OFFSET ( 0x00000038U )
#define RCS_GPREG_RCS_SCRATCH_OFFSET ( 0x0000003cU )
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA0_OFFSET ( 0x00000040U )
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA1_OFFSET ( 0x00000044U )
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA2_OFFSET ( 0x00000048U )
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA3_OFFSET ( 0x0000004cU )
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA0_OFFSET ( 0x00000050U )
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA1_OFFSET ( 0x00000054U )
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA2_OFFSET ( 0x00000058U )
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA3_OFFSET ( 0x0000005cU )
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA0_OFFSET ( 0x00000060U )
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA1_OFFSET ( 0x00000064U )
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA2_OFFSET ( 0x00000068U )
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA3_OFFSET ( 0x0000006cU )
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA0_OFFSET ( 0x00000070U )
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA1_OFFSET ( 0x00000074U )
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA2_OFFSET ( 0x00000078U )
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA3_OFFSET ( 0x0000007cU )
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA0_OFFSET ( 0x00000080U )
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA1_OFFSET ( 0x00000084U )
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA2_OFFSET ( 0x00000088U )
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA3_OFFSET ( 0x0000008cU )
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA0_OFFSET ( 0x00000090U )
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA1_OFFSET ( 0x00000094U )
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA2_OFFSET ( 0x00000098U )
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA3_OFFSET ( 0x0000009cU )
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA0_OFFSET ( 0x000000a0U )
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA1_OFFSET ( 0x000000a4U )
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA2_OFFSET ( 0x000000a8U )
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA3_OFFSET ( 0x000000acU )
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA0_OFFSET ( 0x000000b0U )
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA1_OFFSET ( 0x000000b4U )
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA2_OFFSET ( 0x000000b8U )
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA3_OFFSET ( 0x000000bcU )
#define RCS_GPREG_RCS_TO_RCS_MB0_OFFSET ( 0x000000c0U )
#define RCS_GPREG_RCS_TO_RCS_MB1_OFFSET ( 0x000000c4U )
#define RCS_GPREG_RCS_TO_RCS_MB2_OFFSET ( 0x000000c8U )
#define RCS_GPREG_RCS_TO_RCS_MB3_OFFSET ( 0x000000ccU )
#define RCS_GPREG_RCS_TO_RCS_MB4_OFFSET ( 0x000000d0U )
#define RCS_GPREG_RCS_TO_RCS_MB5_OFFSET ( 0x000000d4U )
#define RCS_GPREG_RCS_TO_RCS_MB6_OFFSET ( 0x000000d8U )
#define RCS_GPREG_RCS_TO_RCS_MB7_OFFSET ( 0x000000dcU )
#define RCS_GPREG_RCS_TO_RCS_MB8_OFFSET ( 0x000000e0U )
#define RCS_GPREG_RCS_TO_RCS_MB9_OFFSET ( 0x000000e4U )
#define RCS_GPREG_RCS_TO_RCS_MB10_OFFSET ( 0x000000e8U )
#define RCS_GPREG_RCS_TO_RCS_MB11_OFFSET ( 0x000000ecU )
#define RCS_GPREG_EXT_IRQ_GRP_OFFSET ( 0x000000f0U )
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_OFFSET ( 0x000000f4U )
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_OFFSET ( 0x000000f8U )
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_OFFSET ( 0x000000fcU )
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_OFFSET ( 0x00000100U )
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_OFFSET ( 0x00000104U )
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_OFFSET ( 0x00000108U )
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_OFFSET ( 0x0000010cU )
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_OFFSET ( 0x00000110U )
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_OFFSET ( 0x00000114U )
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_OFFSET ( 0x00000118U )
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_OFFSET ( 0x0000011cU )
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_OFFSET ( 0x00000120U )
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_OFFSET ( 0x00000124U )
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_OFFSET ( 0x00000128U )
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_OFFSET ( 0x0000012cU )
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_OFFSET ( 0x00000130U )
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_OFFSET ( 0x00000134U )
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_OFFSET ( 0x00000138U )
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_OFFSET ( 0x0000013cU )
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_OFFSET ( 0x00000140U )
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_OFFSET ( 0x00000144U )
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_OFFSET ( 0x00000148U )
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_OFFSET ( 0x0000014cU )
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_OFFSET ( 0x00000150U )
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_OFFSET ( 0x00000154U )
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_OFFSET ( 0x00000158U )
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_OFFSET ( 0x0000015cU )
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_OFFSET ( 0x00000160U )
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_OFFSET ( 0x00000164U )
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_OFFSET ( 0x00000168U )
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_OFFSET ( 0x0000016cU )
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_OFFSET ( 0x00000170U )
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_OFFSET ( 0x00000174U )
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_OFFSET ( 0x00000178U )
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_OFFSET ( 0x0000017cU )
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_OFFSET ( 0x00000180U )
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_OFFSET ( 0x00000184U )
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_OFFSET ( 0x00000188U )
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_OFFSET ( 0x0000018cU )
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_OFFSET ( 0x00000190U )
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_OFFSET ( 0x00000194U )
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_OFFSET ( 0x00000198U )
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_OFFSET ( 0x0000019cU )
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_OFFSET ( 0x000001a0U )
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_OFFSET ( 0x000001a4U )
#define RCS_GPREG_MAILBOX_CLR_OFFSET ( 0x000001a8U )
#define RCS_GPREG_EDG_IRQ_STAT_0_OFFSET ( 0x000001b0U )
#define RCS_GPREG_EDG_IRQ_MASK_0_OFFSET ( 0x000001b4U )
#define RCS_GPREG_EDG_IRQ_INV_0_OFFSET ( 0x000001b8U )
#define RCS_GPREG_EDG_IRQ_NOMASK_0_OFFSET ( 0x000001bcU )
#define RCS_GPREG_EDG_IRQ_RAW_0_OFFSET ( 0x000001c0U )
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_OFFSET ( 0x000001c4U )
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_OFFSET ( 0x000001c8U )
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_OFFSET ( 0x000001ccU )
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_OFFSET ( 0x000001d0U )
#define RCS_GPREG_OSAZ_OFFSET ( 0x000001d4U )
#define RCS_GPREG_EDG_IRQ_STAT_1_OFFSET ( 0x000001d8U )
#define RCS_GPREG_EDG_IRQ_MASK_1_OFFSET ( 0x000001dcU )
#define RCS_GPREG_EDG_IRQ_INV_1_OFFSET ( 0x000001e0U )
#define RCS_GPREG_EDG_IRQ_NOMASK_1_OFFSET ( 0x000001e4U )
#define RCS_GPREG_EDG_IRQ_RAW_1_OFFSET ( 0x000001e8U )
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_OFFSET ( 0x000001ecU )
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_OFFSET ( 0x000001f0U )
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_OFFSET ( 0x000001f4U )
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_OFFSET ( 0x000001f8U )
#define RCS_GPREG_EDG_IRQ_STAT_2_OFFSET ( 0x00000200U )
#define RCS_GPREG_EDG_IRQ_MASK_2_OFFSET ( 0x00000204U )
#define RCS_GPREG_EDG_IRQ_INV_2_OFFSET ( 0x00000208U )
#define RCS_GPREG_EDG_IRQ_NOMASK_2_OFFSET ( 0x0000020cU )
#define RCS_GPREG_EDG_IRQ_RAW_2_OFFSET ( 0x00000210U )
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_OFFSET ( 0x00000214U )
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_OFFSET ( 0x00000218U )
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_OFFSET ( 0x0000021cU )
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_OFFSET ( 0x00000220U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RCS_GPREG_RCS_CFG_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_CFG_OFFSET ) ))
#define RCS_GPREG_CORE0_CTRL_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE0_CTRL_OFFSET ) ))
#define RCS_GPREG_CORE1_CTRL_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE1_CTRL_OFFSET ) ))
#define RCS_GPREG_CORE2_CTRL_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE2_CTRL_OFFSET ) ))
#define RCS_GPREG_CORE3_CTRL_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE3_CTRL_OFFSET ) ))
#define RCS_GPREG_CORE0_ALTRSTVEC_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE0_ALTRSTVEC_OFFSET ) ))
#define RCS_GPREG_CORE1_ALTRSTVEC_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE1_ALTRSTVEC_OFFSET ) ))
#define RCS_GPREG_CORE2_ALTRSTVEC_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE2_ALTRSTVEC_OFFSET ) ))
#define RCS_GPREG_CORE3_ALTRSTVEC_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_CORE3_ALTRSTVEC_OFFSET ) ))
#define RCS_GPREG_SOFT_RST_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SOFT_RST_OFFSET ) ))
#define RCS_GPREG_MAILBOX_MASK_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_MAILBOX_MASK_OFFSET ) ))
#define RCS_GPREG_RCS_CLK_DISS_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_CLK_DISS_OFFSET ) ))
#define RCS_GPREG_RCS_SCRATCH_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_SCRATCH_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB0_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB0_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB0_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB0_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB1_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB1_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB1_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB1_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB2_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB2_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB2_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB2_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB3_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB3_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB3_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB3_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB4_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB4_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB4_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB4_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB5_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB5_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB5_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB5_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB6_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB6_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB6_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB6_MBDATA3_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB7_MBDATA0_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB7_MBDATA1_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB7_MBDATA2_OFFSET ) ))
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_TO_RCS_MB7_MBDATA3_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB0_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB1_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB2_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB3_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB3_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB4_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB4_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB5_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB5_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB6_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB6_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB7_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB7_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB8_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB8_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB9_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB9_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB10_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB10_OFFSET ) ))
#define RCS_GPREG_RCS_TO_RCS_MB11_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RCS_TO_RCS_MB11_OFFSET ) ))
#define RCS_GPREG_EXT_IRQ_GRP_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EXT_IRQ_GRP_OFFSET ) ))
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_OFFSET ) ))
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_OFFSET ) ))
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_OFFSET ) ))
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_OFFSET ) ))
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_OFFSET ) ))
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_OFFSET ) ))
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_OFFSET ) ))
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_OFFSET ) ))
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_OFFSET ) ))
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_OFFSET ) ))
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_OFFSET ) ))
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_OFFSET ) ))
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_OFFSET ) ))
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_OFFSET ) ))
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_OFFSET ) ))
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_OFFSET ) ))
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_OFFSET ) ))
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_OFFSET ) ))
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_OFFSET ) ))
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_OFFSET ) ))
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_OFFSET ) ))
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_OFFSET ) ))
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_OFFSET ) ))
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_RPC_FAULTSERVERITYLVL_OFFSET ) ))
#define RCS_GPREG_MAILBOX_CLR_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_MAILBOX_CLR_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_STAT_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_STAT_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_MASK_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_MASK_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_INV_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_INV_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_NOMASK_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_NOMASK_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_RAW_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_RAW_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_HI_STAT_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_HI_MASK_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_TX_STAT_0_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_TX_MASK_0_OFFSET ) ))
#define RCS_GPREG_OSAZ_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_OSAZ_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_STAT_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_STAT_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_MASK_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_MASK_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_INV_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_INV_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_NOMASK_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_NOMASK_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_RAW_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_RAW_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_HI_STAT_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_HI_MASK_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_TX_STAT_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_TX_MASK_1_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_STAT_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_STAT_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_MASK_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_MASK_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_INV_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_INV_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_NOMASK_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_NOMASK_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_RAW_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_RAW_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_HI_STAT_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_HI_MASK_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_TX_STAT_2_OFFSET ) ))
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_ADR (( ( RCS_GPREG_BASE ) + ( RCS_GPREG_EDG_IRQ_TX_MASK_2_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RCS_GPREG_COM_REG_RCS_CONFIG register description at address offset 0x4
  *
  * Register default value:        0x00070202
  * Register full path in IP: rcs_gpreg_com/reg/rcs_config
  * RCS configuration
  */

typedef union {
  struct {
    uint32_t MUXSEL_I3CM_NSSP : 2;
    ///< Used to select whether GPIO pins are to be used by I3C, SSP or timer
    ///< control. See encoding below.  Note, if RCS has more then 1 SPI and/or
    ///< I3C, then each one will get 2 mux sel bits.  This field will have
    ///< 2 * NUM_OF_SPPDMA bits.  There can be at most 4 SPI/I3C.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LOGGER_STATUS_REG_CLR : 1;
    ///< set to 1 to clear status registers in softerr_ctrl_logger
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RCS_RSM_ZEROIZE : 1;
    ///< Enables initalization, zeroing, of all memories in RCS.  This bit
    ///< is set to 1 at reset so that all memories are zeroed.  This bit needs
    ///< to be set to 0 once the rcs_rsm_zeroize_busy bit goes to 0, indicating
    ///< the zeroing has completed.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t RCS_ROM_SD : 1;
    ///< 1: ROM shutdown; 0: default, power on
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t MINIMUM_GPIO_SET_WIDTH : 8;
    ///< When GPIO auto set feature is enabled, RCS streatches the GPIO pulse
    ///< width to be at least minimum_gpio_set_width+1 cycles of BFN clock
    ///< to avoid glitch
    ///< AccessType="RW" BitOffset="16" ResetValue="0x7"
    uint32_t SOFT_RST_LOCK : 8;
    ///< write 8'hFA to unlock soft_reset capability for debug purpose
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_rcs_cfg_reg_t;

#define RCS_GPREG_RCS_CFG_DEFAULT (0x00070202U)
#define RCS_GPREG_RCS_CFG_RD_MASK (0xffff0703U)
#define RCS_GPREG_RCS_CFG_WR_MASK (0xffff0703U)


///< Used to select whether GPIO pins are to be used by I3C, SSP or timer
///< control. See encoding below.  Note, if RCS has more then 1 SPI and/or
///< I3C, then each one will get 2 mux sel bits.  This field will have
///< 2 * NUM_OF_SPPDMA bits.  There can be at most 4 SPI/I3C.
#define RCS_GPREG_RCS_CFG_MUXSEL_I3CM_NSSP_BF_OFF ( 0)
#define RCS_GPREG_RCS_CFG_MUXSEL_I3CM_NSSP_BF_WID ( 2)
#define RCS_GPREG_RCS_CFG_MUXSEL_I3CM_NSSP_BF_MSK (0x00000003)
#define RCS_GPREG_RCS_CFG_MUXSEL_I3CM_NSSP_BF_DEF (0x00000002)

///< set to 1 to clear status registers in softerr_ctrl_logger
#define RCS_GPREG_RCS_CFG_LOGGER_STAT_CLR_BF_OFF ( 8)
#define RCS_GPREG_RCS_CFG_LOGGER_STAT_CLR_BF_WID ( 1)
#define RCS_GPREG_RCS_CFG_LOGGER_STAT_CLR_BF_MSK (0x00000100)
#define RCS_GPREG_RCS_CFG_LOGGER_STAT_CLR_BF_DEF (0x00000000)

///< Enables initalization, zeroing, of all memories in RCS.  This bit
///< is set to 1 at reset so that all memories are zeroed.  This bit needs
///< to be set to 0 once the rcs_rsm_zeroize_busy bit goes to 0, indicating
///< the zeroing has completed.
#define RCS_GPREG_RCS_CFG_RCS_RSM_ZEROIZE_BF_OFF ( 9)
#define RCS_GPREG_RCS_CFG_RCS_RSM_ZEROIZE_BF_WID ( 1)
#define RCS_GPREG_RCS_CFG_RCS_RSM_ZEROIZE_BF_MSK (0x00000200)
#define RCS_GPREG_RCS_CFG_RCS_RSM_ZEROIZE_BF_DEF (0x00000200)

///< 1: ROM shutdown; 0: default, power on
#define RCS_GPREG_RCS_CFG_RCS_ROM_SD_BF_OFF (10)
#define RCS_GPREG_RCS_CFG_RCS_ROM_SD_BF_WID ( 1)
#define RCS_GPREG_RCS_CFG_RCS_ROM_SD_BF_MSK (0x00000400)
#define RCS_GPREG_RCS_CFG_RCS_ROM_SD_BF_DEF (0x00000000)

///< When GPIO auto set feature is enabled, RCS streatches the GPIO pulse
///< width to be at least minimum_gpio_set_width+1 cycles of BFN clock
///< to avoid glitch
#define RCS_GPREG_RCS_CFG_MINIMUM_GPIO_SET_WIDTH_BF_OFF (16)
#define RCS_GPREG_RCS_CFG_MINIMUM_GPIO_SET_WIDTH_BF_WID ( 8)
#define RCS_GPREG_RCS_CFG_MINIMUM_GPIO_SET_WIDTH_BF_MSK (0x00FF0000)
#define RCS_GPREG_RCS_CFG_MINIMUM_GPIO_SET_WIDTH_BF_DEF (0x00070000)

///< write 8'hFA to unlock soft_reset capability for debug purpose
#define RCS_GPREG_RCS_CFG_SOFT_RST_LOCK_BF_OFF (24)
#define RCS_GPREG_RCS_CFG_SOFT_RST_LOCK_BF_WID ( 8)
#define RCS_GPREG_RCS_CFG_SOFT_RST_LOCK_BF_MSK (0xFF000000)
#define RCS_GPREG_RCS_CFG_SOFT_RST_LOCK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_CORE0_CONTROL register description at address offset 0x8
  *
  * Register default value:        0x00000001
  * Register full path in IP: rcs_gpreg_com/reg/core0_control
  * Core control
  */

typedef union {
  struct {
    uint32_t CORE_RUNSTALL_DEBUG : 1;
    ///< CORE RUNSTALL. In debug mode, core_runstall_debug=1 holds the core#0
    ///< in a wait state after reset is cleared; core starts running after
    ///< debug host write 0 to this bit; In production mode this bit has no
    ///< impact;
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CORE_RUNSTALL_PROD : 1;
    ///< CORE RUNSTALL. In production mode, core_runstall_prod=0 allows core#0
    ///< starts running afert core is out of reset;  Writing 1 to this bit
    ///< holds the core#0 in a wait state; In debug mode, this bit has no impact
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t CORE_STATVECTORSEC : 1;
    ///< CORE0 StatVectorSelect. Set to 1 will choose to boot from the location
    ///< speicfied by AltResetVector
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t OCDHALTONRESET : 1;
    ///< CORE0 OCDHaltOnReset_LX70. Set to 1 will choose to halt the core on
    ///< reset
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t SOFT_RESET_CORE0 : 1;
    ///< Writing 1 to assert soft reset for rcs core0/LX70. Writing 0 to de-assert
    ///< soft reset to core0 . clock gating: clkdisable_core0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_core0_ctrl_reg_t;

#define RCS_GPREG_CORE0_CTRL_DEFAULT (0x00000001U)
#define RCS_GPREG_CORE0_CTRL_RD_MASK (0x00001113U)
#define RCS_GPREG_CORE0_CTRL_WR_MASK (0x00001113U)


///< CORE RUNSTALL. In debug mode, core_runstall_debug=1 holds the core#0
///< in a wait state after reset is cleared; core starts running after
///< debug host write 0 to this bit; In production mode this bit has no
///< impact;
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_DBG_BF_OFF ( 0)
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_DBG_BF_WID ( 1)
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_DBG_BF_MSK (0x00000001)
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_DBG_BF_DEF (0x00000001)

///< CORE RUNSTALL. In production mode, core_runstall_prod=0 allows core#0
///< starts running afert core is out of reset;  Writing 1 to this bit
///< holds the core#0 in a wait state; In debug mode, this bit has no impact
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_PROD_BF_OFF ( 1)
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_PROD_BF_WID ( 1)
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_PROD_BF_MSK (0x00000002)
#define RCS_GPREG_CORE0_CTRL_CORE_RUNSTALL_PROD_BF_DEF (0x00000000)

///< CORE0 StatVectorSelect. Set to 1 will choose to boot from the location
///< speicfied by AltResetVector
#define RCS_GPREG_CORE0_CTRL_CORE_STATVECTORSEC_BF_OFF ( 4)
#define RCS_GPREG_CORE0_CTRL_CORE_STATVECTORSEC_BF_WID ( 1)
#define RCS_GPREG_CORE0_CTRL_CORE_STATVECTORSEC_BF_MSK (0x00000010)
#define RCS_GPREG_CORE0_CTRL_CORE_STATVECTORSEC_BF_DEF (0x00000000)

///< CORE0 OCDHaltOnReset_LX70. Set to 1 will choose to halt the core on
///< reset
#define RCS_GPREG_CORE0_CTRL_OCDHALTONRST_BF_OFF ( 8)
#define RCS_GPREG_CORE0_CTRL_OCDHALTONRST_BF_WID ( 1)
#define RCS_GPREG_CORE0_CTRL_OCDHALTONRST_BF_MSK (0x00000100)
#define RCS_GPREG_CORE0_CTRL_OCDHALTONRST_BF_DEF (0x00000000)

///< Writing 1 to assert soft reset for rcs core0/LX70. Writing 0 to de-assert
///< soft reset to core0 . clock gating: clkdisable_core0
#define RCS_GPREG_CORE0_CTRL_SOFT_RST_CORE0_BF_OFF (12)
#define RCS_GPREG_CORE0_CTRL_SOFT_RST_CORE0_BF_WID ( 1)
#define RCS_GPREG_CORE0_CTRL_SOFT_RST_CORE0_BF_MSK (0x00001000)
#define RCS_GPREG_CORE0_CTRL_SOFT_RST_CORE0_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_CORE1_CONTROL register description at address offset 0xc
  *
  * Register default value:        0x00000011
  * Register full path in IP: rcs_gpreg_com/reg/core1_control
  * Core control
  */

typedef union {
  struct {
    uint32_t CORE_RUNSTALL : 1;
    ///< CORE RUNSTALL. 1: Holds the CPU#1 (or CPU#2, #3) in a wait state after
    ///< reset is cleared to allow for pre-loading the TCMs; 0: Run
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CORE_STATVECTORSEC : 1;
    ///< CORE StatVectorSelect. Set to 1 will choose to boot from the location
    ///< speicfied by AltResetVector
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t OCDHALTONRESET : 1;
    ///< CORE OCDHaltOnReset. Set to 1 will choose to halt the core on reset
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_core1_ctrl_reg_t;

#define RCS_GPREG_CORE1_CTRL_DEFAULT (0x00000011U)
#define RCS_GPREG_CORE1_CTRL_RD_MASK (0x00000111U)
#define RCS_GPREG_CORE1_CTRL_WR_MASK (0x00000111U)


///< CORE RUNSTALL. 1: Holds the CPU#1 (or CPU#2, #3) in a wait state after
///< reset is cleared to allow for pre-loading the TCMs; 0: Run
#define RCS_GPREG_CORE1_CTRL_CORE_RUNSTALL_BF_OFF ( 0)
#define RCS_GPREG_CORE1_CTRL_CORE_RUNSTALL_BF_WID ( 1)
#define RCS_GPREG_CORE1_CTRL_CORE_RUNSTALL_BF_MSK (0x00000001)
#define RCS_GPREG_CORE1_CTRL_CORE_RUNSTALL_BF_DEF (0x00000001)

///< CORE StatVectorSelect. Set to 1 will choose to boot from the location
///< speicfied by AltResetVector
#define RCS_GPREG_CORE1_CTRL_CORE_STATVECTORSEC_BF_OFF ( 4)
#define RCS_GPREG_CORE1_CTRL_CORE_STATVECTORSEC_BF_WID ( 1)
#define RCS_GPREG_CORE1_CTRL_CORE_STATVECTORSEC_BF_MSK (0x00000010)
#define RCS_GPREG_CORE1_CTRL_CORE_STATVECTORSEC_BF_DEF (0x00000010)

///< CORE OCDHaltOnReset. Set to 1 will choose to halt the core on reset
#define RCS_GPREG_CORE1_CTRL_OCDHALTONRST_BF_OFF ( 8)
#define RCS_GPREG_CORE1_CTRL_OCDHALTONRST_BF_WID ( 1)
#define RCS_GPREG_CORE1_CTRL_OCDHALTONRST_BF_MSK (0x00000100)
#define RCS_GPREG_CORE1_CTRL_OCDHALTONRST_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_CORE2_CONTROL register description at address offset 0x10
  *
  * Register default value:        0x00000011
  * Register full path in IP: rcs_gpreg_com/reg/core2_control
  * Core control
  */

typedef union {
  struct {
    uint32_t CORE_RUNSTALL : 1;
    ///< CORE RUNSTALL. 1: Holds the CPU#1 (or CPU#2, #3) in a wait state after
    ///< reset is cleared to allow for pre-loading the TCMs; 0: Run
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CORE_STATVECTORSEC : 1;
    ///< CORE StatVectorSelect. Set to 1 will choose to boot from the location
    ///< speicfied by AltResetVector
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t OCDHALTONRESET : 1;
    ///< CORE OCDHaltOnReset. Set to 1 will choose to halt the core on reset
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_core2_ctrl_reg_t;

#define RCS_GPREG_CORE2_CTRL_DEFAULT (0x00000011U)
#define RCS_GPREG_CORE2_CTRL_RD_MASK (0x00000111U)
#define RCS_GPREG_CORE2_CTRL_WR_MASK (0x00000111U)


///< CORE RUNSTALL. 1: Holds the CPU#1 (or CPU#2, #3) in a wait state after
///< reset is cleared to allow for pre-loading the TCMs; 0: Run
#define RCS_GPREG_CORE2_CTRL_CORE_RUNSTALL_BF_OFF ( 0)
#define RCS_GPREG_CORE2_CTRL_CORE_RUNSTALL_BF_WID ( 1)
#define RCS_GPREG_CORE2_CTRL_CORE_RUNSTALL_BF_MSK (0x00000001)
#define RCS_GPREG_CORE2_CTRL_CORE_RUNSTALL_BF_DEF (0x00000001)

///< CORE StatVectorSelect. Set to 1 will choose to boot from the location
///< speicfied by AltResetVector
#define RCS_GPREG_CORE2_CTRL_CORE_STATVECTORSEC_BF_OFF ( 4)
#define RCS_GPREG_CORE2_CTRL_CORE_STATVECTORSEC_BF_WID ( 1)
#define RCS_GPREG_CORE2_CTRL_CORE_STATVECTORSEC_BF_MSK (0x00000010)
#define RCS_GPREG_CORE2_CTRL_CORE_STATVECTORSEC_BF_DEF (0x00000010)

///< CORE OCDHaltOnReset. Set to 1 will choose to halt the core on reset
#define RCS_GPREG_CORE2_CTRL_OCDHALTONRST_BF_OFF ( 8)
#define RCS_GPREG_CORE2_CTRL_OCDHALTONRST_BF_WID ( 1)
#define RCS_GPREG_CORE2_CTRL_OCDHALTONRST_BF_MSK (0x00000100)
#define RCS_GPREG_CORE2_CTRL_OCDHALTONRST_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_CORE3_CONTROL register description at address offset 0x14
  *
  * Register default value:        0x00000011
  * Register full path in IP: rcs_gpreg_com/reg/core3_control
  * Core control
  */

typedef union {
  struct {
    uint32_t CORE_RUNSTALL : 1;
    ///< CORE RUNSTALL. 1: Holds the CPU#1 (or CPU#2, #3) in a wait state after
    ///< reset is cleared to allow for pre-loading the TCMs; 0: Run
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CORE_STATVECTORSEC : 1;
    ///< CORE StatVectorSelect. Set to 1 will choose to boot from the location
    ///< speicfied by AltResetVector
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t OCDHALTONRESET : 1;
    ///< CORE OCDHaltOnReset. Set to 1 will choose to halt the core on reset
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_core3_ctrl_reg_t;

#define RCS_GPREG_CORE3_CTRL_DEFAULT (0x00000011U)
#define RCS_GPREG_CORE3_CTRL_RD_MASK (0x00000111U)
#define RCS_GPREG_CORE3_CTRL_WR_MASK (0x00000111U)


///< CORE RUNSTALL. 1: Holds the CPU#1 (or CPU#2, #3) in a wait state after
///< reset is cleared to allow for pre-loading the TCMs; 0: Run
#define RCS_GPREG_CORE3_CTRL_CORE_RUNSTALL_BF_OFF ( 0)
#define RCS_GPREG_CORE3_CTRL_CORE_RUNSTALL_BF_WID ( 1)
#define RCS_GPREG_CORE3_CTRL_CORE_RUNSTALL_BF_MSK (0x00000001)
#define RCS_GPREG_CORE3_CTRL_CORE_RUNSTALL_BF_DEF (0x00000001)

///< CORE StatVectorSelect. Set to 1 will choose to boot from the location
///< speicfied by AltResetVector
#define RCS_GPREG_CORE3_CTRL_CORE_STATVECTORSEC_BF_OFF ( 4)
#define RCS_GPREG_CORE3_CTRL_CORE_STATVECTORSEC_BF_WID ( 1)
#define RCS_GPREG_CORE3_CTRL_CORE_STATVECTORSEC_BF_MSK (0x00000010)
#define RCS_GPREG_CORE3_CTRL_CORE_STATVECTORSEC_BF_DEF (0x00000010)

///< CORE OCDHaltOnReset. Set to 1 will choose to halt the core on reset
#define RCS_GPREG_CORE3_CTRL_OCDHALTONRST_BF_OFF ( 8)
#define RCS_GPREG_CORE3_CTRL_OCDHALTONRST_BF_WID ( 1)
#define RCS_GPREG_CORE3_CTRL_OCDHALTONRST_BF_MSK (0x00000100)
#define RCS_GPREG_CORE3_CTRL_OCDHALTONRST_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_CORE0_ALTRESETVEC register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/core0_AltResetVec
  * CPU Core0 Alt Reset Vector
  */

typedef union {
  struct {
    uint32_t ALTRESETVEC : 32;
    ///< Holds the Alternative Reset Vector.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_core0_altrstvec_reg_t;

#define RCS_GPREG_CORE0_ALTRSTVEC_DEFAULT (0x00000000U)
#define RCS_GPREG_CORE0_ALTRSTVEC_RD_MASK (0xffffffffU)
#define RCS_GPREG_CORE0_ALTRSTVEC_WR_MASK (0xffffffffU)


///< Holds the Alternative Reset Vector.
#define RCS_GPREG_CORE0_ALTRSTVEC_BF_OFF ( 0)
#define RCS_GPREG_CORE0_ALTRSTVEC_BF_WID (32)
#define RCS_GPREG_CORE0_ALTRSTVEC_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_CORE0_ALTRSTVEC_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_CORE1_ALTRESETVEC register description at address offset 0x1c
  *
  * Register default value:        0x10000000
  * Register full path in IP: rcs_gpreg_com/reg/core1_AltResetVec
  * CPU Core1 Alt Reset Vector
  */

typedef union {
  struct {
    uint32_t ALTRESETVEC : 32;
    ///< Holds the Alternative Reset Vector.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000000"
  } ;
  uint32_t value;
} rcs_gpreg_core1_altrstvec_reg_t;

#define RCS_GPREG_CORE1_ALTRSTVEC_DEFAULT (0x10000000U)
#define RCS_GPREG_CORE1_ALTRSTVEC_RD_MASK (0xffffffffU)
#define RCS_GPREG_CORE1_ALTRSTVEC_WR_MASK (0xffffffffU)


///< Holds the Alternative Reset Vector.
#define RCS_GPREG_CORE1_ALTRSTVEC_BF_OFF ( 0)
#define RCS_GPREG_CORE1_ALTRSTVEC_BF_WID (32)
#define RCS_GPREG_CORE1_ALTRSTVEC_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_CORE1_ALTRSTVEC_BF_DEF (0x10000000)


/** @brief RCS_GPREG_COM_REG_CORE2_ALTRESETVEC register description at address offset 0x20
  *
  * Register default value:        0x10000000
  * Register full path in IP: rcs_gpreg_com/reg/core2_AltResetVec
  * CPU Core1 Alt Reset Vector
  */

typedef union {
  struct {
    uint32_t ALTRESETVEC : 32;
    ///< Holds the Alternative Reset Vector.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000000"
  } ;
  uint32_t value;
} rcs_gpreg_core2_altrstvec_reg_t;

#define RCS_GPREG_CORE2_ALTRSTVEC_DEFAULT (0x10000000U)
#define RCS_GPREG_CORE2_ALTRSTVEC_RD_MASK (0xffffffffU)
#define RCS_GPREG_CORE2_ALTRSTVEC_WR_MASK (0xffffffffU)


///< Holds the Alternative Reset Vector.
#define RCS_GPREG_CORE2_ALTRSTVEC_BF_OFF ( 0)
#define RCS_GPREG_CORE2_ALTRSTVEC_BF_WID (32)
#define RCS_GPREG_CORE2_ALTRSTVEC_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_CORE2_ALTRSTVEC_BF_DEF (0x10000000)


/** @brief RCS_GPREG_COM_REG_CORE3_ALTRESETVEC register description at address offset 0x24
  *
  * Register default value:        0x10000000
  * Register full path in IP: rcs_gpreg_com/reg/core3_AltResetVec
  * CPU Core1 Alt Reset Vector
  */

typedef union {
  struct {
    uint32_t ALTRESETVEC : 32;
    ///< Holds the Alternative Reset Vector.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000000"
  } ;
  uint32_t value;
} rcs_gpreg_core3_altrstvec_reg_t;

#define RCS_GPREG_CORE3_ALTRSTVEC_DEFAULT (0x10000000U)
#define RCS_GPREG_CORE3_ALTRSTVEC_RD_MASK (0xffffffffU)
#define RCS_GPREG_CORE3_ALTRSTVEC_WR_MASK (0xffffffffU)


///< Holds the Alternative Reset Vector.
#define RCS_GPREG_CORE3_ALTRSTVEC_BF_OFF ( 0)
#define RCS_GPREG_CORE3_ALTRSTVEC_BF_WID (32)
#define RCS_GPREG_CORE3_ALTRSTVEC_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_CORE3_ALTRSTVEC_BF_DEF (0x10000000)


/** @brief RCS_GPREG_COM_REG_SOFT_RESET register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/soft_reset
  * Soft reset bits for RCS modules
  */

typedef union {
  struct {
    uint32_t I3CM0_SFT_RST : 1;
    ///< Soft reset for rcs i3cm0. clock gating: clkdisable_i3cm0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FABRIC_SFT_RST : 1;
    ///< Soft reset for rcs Fabric, Not used for now
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t FABRIC_BFN_SFT_RST : 1;
    ///< Soft reset for NIC400 bfn clock domain. clock gating: clkdisable_fabric_bfn
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t SSP0_SFT_RST : 1;
    ///< Soft reset for rcs ssp0. clock gating:clkdisable_ssp0
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RESERVED_BIT : 1;
    ///< Not used any more. Soft reset for rcs core0/LX70 cpu is implemented
    ///< in core0_control. clock gating: clkdisable_core0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CORE1_CPU_SFT_RST : 1;
    ///< Soft reset for rcs core1/LX71 cpu. clock gating: clkdisable_core1
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CORE2_CPU_SFT_RST : 1;
    ///< Soft reset for rcs core2/LX72 cpu. clock_gating: clkdisable_core2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t DMAC_SFT_RST : 1;
    ///< Soft reset for rcs dmac. clock gating: clkdisable_dmac
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RSM0_SFT_RST : 1;
    ///< Soft reset for rcs axi2ed0 and mem_wrapper, it doesn't necessarily
    ///< zerorize rsm0, which depends on rcs_config.rcs_rsm_zeroize. clock
    ///< gating: clkdisable_rsm0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RSM1_SFT_RST : 1;
    ///< Soft reset for rcs axi2ed1 and mem_wrapper, it doesn't necessarily
    ///< zerorize rsm1,which depends on rcs_config.rcs_rsm_zeroize. clock gating:
    ///< clkdisable_rsm1
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t LOGGER_SFT_RST : 1;
    ///< Soft reset for rcs logger.clock gating: clkdisable_logger
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t FOVR_PHM0_SFT_RST : 1;
    ///< Soft reset for rcs fovr_phm0. clock gating: clkdisable_fovr_phm0
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t FOVR_PHM1_SFT_RST : 1;
    ///< Soft reset for rcs fovr_phm1. clock gating: clkdisable_fovr_phm1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CRUX_SFT_RST : 1;
    ///< Soft reset for rcs crux. clock gating: clkdisable_crux
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RCS_BFN_SFT_RST : 1;
    ///< Soft reset for timer bfn domain. clock gating: clkdisable_timer
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t ROM_SFT_RST : 1;
    ///< Soft reset for rcs rom. clock gating: clkdisable_rom
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t SCB_SFT_RST : 1;
    ///< Soft reset for rcs scb. clock gating: clkdisable_scb
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t SMON_SFT_RST : 1;
    ///< Soft reset for smon. clock gating: clkdisable_smon
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t CORE3_CPU_SFT_RST : 1;
    ///< Soft reset for rcs core3/KP1 cpu. clock gating: clkdisable_core3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_soft_rst_reg_t;

#define RCS_GPREG_SOFT_RST_DEFAULT (0x00000000U)
#define RCS_GPREG_SOFT_RST_RD_MASK (0x184fff17U)
#define RCS_GPREG_SOFT_RST_WR_MASK (0x184fff17U)


///< Soft reset for rcs i3cm0. clock gating: clkdisable_i3cm0
#define RCS_GPREG_SOFT_RST_I3CM0_SFT_RST_BF_OFF ( 0)
#define RCS_GPREG_SOFT_RST_I3CM0_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_I3CM0_SFT_RST_BF_MSK (0x00000001)
#define RCS_GPREG_SOFT_RST_I3CM0_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs Fabric, Not used for now
#define RCS_GPREG_SOFT_RST_FABRIC_SFT_RST_BF_OFF ( 1)
#define RCS_GPREG_SOFT_RST_FABRIC_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_FABRIC_SFT_RST_BF_MSK (0x00000002)
#define RCS_GPREG_SOFT_RST_FABRIC_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for NIC400 bfn clock domain. clock gating: clkdisable_fabric_bfn
#define RCS_GPREG_SOFT_RST_FABRIC_BFN_SFT_RST_BF_OFF ( 2)
#define RCS_GPREG_SOFT_RST_FABRIC_BFN_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_FABRIC_BFN_SFT_RST_BF_MSK (0x00000004)
#define RCS_GPREG_SOFT_RST_FABRIC_BFN_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs ssp0. clock gating:clkdisable_ssp0
#define RCS_GPREG_SOFT_RST_SSP0_SFT_RST_BF_OFF ( 4)
#define RCS_GPREG_SOFT_RST_SSP0_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_SSP0_SFT_RST_BF_MSK (0x00000010)
#define RCS_GPREG_SOFT_RST_SSP0_SFT_RST_BF_DEF (0x00000000)

///< Not used any more. Soft reset for rcs core0/LX70 cpu is implemented
///< in core0_control. clock gating: clkdisable_core0
#define RCS_GPREG_SOFT_RST_RESERVED_BIT_BF_OFF ( 8)
#define RCS_GPREG_SOFT_RST_RESERVED_BIT_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_RESERVED_BIT_BF_MSK (0x00000100)
#define RCS_GPREG_SOFT_RST_RESERVED_BIT_BF_DEF (0x00000000)

///< Soft reset for rcs core1/LX71 cpu. clock gating: clkdisable_core1
#define RCS_GPREG_SOFT_RST_CORE1_CPU_SFT_RST_BF_OFF ( 9)
#define RCS_GPREG_SOFT_RST_CORE1_CPU_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_CORE1_CPU_SFT_RST_BF_MSK (0x00000200)
#define RCS_GPREG_SOFT_RST_CORE1_CPU_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs core2/LX72 cpu. clock_gating: clkdisable_core2
#define RCS_GPREG_SOFT_RST_CORE2_CPU_SFT_RST_BF_OFF (10)
#define RCS_GPREG_SOFT_RST_CORE2_CPU_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_CORE2_CPU_SFT_RST_BF_MSK (0x00000400)
#define RCS_GPREG_SOFT_RST_CORE2_CPU_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs dmac. clock gating: clkdisable_dmac
#define RCS_GPREG_SOFT_RST_DMAC_SFT_RST_BF_OFF (11)
#define RCS_GPREG_SOFT_RST_DMAC_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_DMAC_SFT_RST_BF_MSK (0x00000800)
#define RCS_GPREG_SOFT_RST_DMAC_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs axi2ed0 and mem_wrapper, it doesn't necessarily
///< zerorize rsm0, which depends on rcs_config.rcs_rsm_zeroize. clock
///< gating: clkdisable_rsm0
#define RCS_GPREG_SOFT_RST_RSM0_SFT_RST_BF_OFF (12)
#define RCS_GPREG_SOFT_RST_RSM0_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_RSM0_SFT_RST_BF_MSK (0x00001000)
#define RCS_GPREG_SOFT_RST_RSM0_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs axi2ed1 and mem_wrapper, it doesn't necessarily
///< zerorize rsm1,which depends on rcs_config.rcs_rsm_zeroize. clock gating:
///< clkdisable_rsm1
#define RCS_GPREG_SOFT_RST_RSM1_SFT_RST_BF_OFF (13)
#define RCS_GPREG_SOFT_RST_RSM1_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_RSM1_SFT_RST_BF_MSK (0x00002000)
#define RCS_GPREG_SOFT_RST_RSM1_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs logger.clock gating: clkdisable_logger
#define RCS_GPREG_SOFT_RST_LOGGER_SFT_RST_BF_OFF (14)
#define RCS_GPREG_SOFT_RST_LOGGER_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_LOGGER_SFT_RST_BF_MSK (0x00004000)
#define RCS_GPREG_SOFT_RST_LOGGER_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs fovr_phm0. clock gating: clkdisable_fovr_phm0
#define RCS_GPREG_SOFT_RST_FOVR_PHM0_SFT_RST_BF_OFF (15)
#define RCS_GPREG_SOFT_RST_FOVR_PHM0_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_FOVR_PHM0_SFT_RST_BF_MSK (0x00008000)
#define RCS_GPREG_SOFT_RST_FOVR_PHM0_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs fovr_phm1. clock gating: clkdisable_fovr_phm1
#define RCS_GPREG_SOFT_RST_FOVR_PHM1_SFT_RST_BF_OFF (16)
#define RCS_GPREG_SOFT_RST_FOVR_PHM1_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_FOVR_PHM1_SFT_RST_BF_MSK (0x00010000)
#define RCS_GPREG_SOFT_RST_FOVR_PHM1_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs crux. clock gating: clkdisable_crux
#define RCS_GPREG_SOFT_RST_CRUX_SFT_RST_BF_OFF (17)
#define RCS_GPREG_SOFT_RST_CRUX_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_CRUX_SFT_RST_BF_MSK (0x00020000)
#define RCS_GPREG_SOFT_RST_CRUX_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for timer bfn domain. clock gating: clkdisable_timer
#define RCS_GPREG_SOFT_RST_RCS_BFN_SFT_RST_BF_OFF (18)
#define RCS_GPREG_SOFT_RST_RCS_BFN_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_RCS_BFN_SFT_RST_BF_MSK (0x00040000)
#define RCS_GPREG_SOFT_RST_RCS_BFN_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs rom. clock gating: clkdisable_rom
#define RCS_GPREG_SOFT_RST_ROM_SFT_RST_BF_OFF (19)
#define RCS_GPREG_SOFT_RST_ROM_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_ROM_SFT_RST_BF_MSK (0x00080000)
#define RCS_GPREG_SOFT_RST_ROM_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs scb. clock gating: clkdisable_scb
#define RCS_GPREG_SOFT_RST_SCB_SFT_RST_BF_OFF (22)
#define RCS_GPREG_SOFT_RST_SCB_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_SCB_SFT_RST_BF_MSK (0x00400000)
#define RCS_GPREG_SOFT_RST_SCB_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for smon. clock gating: clkdisable_smon
#define RCS_GPREG_SOFT_RST_SMON_SFT_RST_BF_OFF (27)
#define RCS_GPREG_SOFT_RST_SMON_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_SMON_SFT_RST_BF_MSK (0x08000000)
#define RCS_GPREG_SOFT_RST_SMON_SFT_RST_BF_DEF (0x00000000)

///< Soft reset for rcs core3/KP1 cpu. clock gating: clkdisable_core3
#define RCS_GPREG_SOFT_RST_CORE3_CPU_SFT_RST_BF_OFF (28)
#define RCS_GPREG_SOFT_RST_CORE3_CPU_SFT_RST_BF_WID ( 1)
#define RCS_GPREG_SOFT_RST_CORE3_CPU_SFT_RST_BF_MSK (0x10000000)
#define RCS_GPREG_SOFT_RST_CORE3_CPU_SFT_RST_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_MAILBOX_MASK register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/mailbox_mask
  * Mailbox Mask Registers
  */

typedef union {
  struct {
    uint32_t EXT_TO_RCS_MB_MASK : 8;
    ///< A mask value of 1 will disable interrupt generation to the interrupt
    ///< aggregator; bit0 masks ext_2_rcs[0][3:0], bit1 masks ext_2_rcs[1][3:0]...
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RCS_TO_RCS_MB_MASK : 12;
    ///< A mask value of 1 will disable interrupt generation to the interrupt
    ///< aggregator; bit 8 masks rcs_2_rcs mb#0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_mailbox_mask_reg_t;

#define RCS_GPREG_MAILBOX_MASK_DEFAULT (0x00000000U)
#define RCS_GPREG_MAILBOX_MASK_RD_MASK (0x000fffffU)
#define RCS_GPREG_MAILBOX_MASK_WR_MASK (0x000fffffU)


///< A mask value of 1 will disable interrupt generation to the interrupt
///< aggregator; bit0 masks ext_2_rcs[0][3:0], bit1 masks ext_2_rcs[1][3:0]...
#define RCS_GPREG_MAILBOX_MASK_EXT_TO_RCS_MB_MASK_BF_OFF ( 0)
#define RCS_GPREG_MAILBOX_MASK_EXT_TO_RCS_MB_MASK_BF_WID ( 8)
#define RCS_GPREG_MAILBOX_MASK_EXT_TO_RCS_MB_MASK_BF_MSK (0x000000FF)
#define RCS_GPREG_MAILBOX_MASK_EXT_TO_RCS_MB_MASK_BF_DEF (0x00000000)

///< A mask value of 1 will disable interrupt generation to the interrupt
///< aggregator; bit 8 masks rcs_2_rcs mb#0
#define RCS_GPREG_MAILBOX_MASK_RCS_TO_RCS_MB_MASK_BF_OFF ( 8)
#define RCS_GPREG_MAILBOX_MASK_RCS_TO_RCS_MB_MASK_BF_WID (12)
#define RCS_GPREG_MAILBOX_MASK_RCS_TO_RCS_MB_MASK_BF_MSK (0x000FFF00)
#define RCS_GPREG_MAILBOX_MASK_RCS_TO_RCS_MB_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_RCS_CLK_DISABLES register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/rcs_clk_disables
  * RCS Clock Disable
  */

typedef union {
  struct {
    uint32_t CLKDISABLE_I3CM0 : 1;
    ///< I3C #0 Clock Disable. Set to 1 to shut clocks off to block. This should
    ///< be done while block is idle.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CLKDISABLE_FABRIC_BFN : 1;
    ///< NIC400 BFN Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t CLKDISABLE_SSP0 : 1;
    ///< SSP #0 Clock Disable. Set to 1 to shut clocks off to block. This should
    ///< be done while block is idle.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t CLKDISABLE_CORE0 : 1;
    ///< CPU core0 Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CLKDISABLE_CORE1 : 1;
    ///< CPU core1 Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CLKDISABLE_CORE2 : 1;
    ///< CPU core2 Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CLKDISABLE_DMAC : 1;
    ///< RCS DMAC Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CLKDISABLE_RSM0 : 1;
    ///< RCS RSM0 Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CLKDISABLE_RSM1 : 1;
    ///< RCS RSM1 Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CLKDISABLE_LOGGER : 1;
    ///< RCS LOGGER Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CLKDISABLE_FOVR_PHM0 : 1;
    ///< RCS PHM/FOVR Clock Disable. Set to 1 to shut clocks off to block.
    ///< This should be done while block is idle.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CLKDISABLE_FOVR_PHM1 : 1;
    ///< RCS PHM/FOVR Clock Disable. Set to 1 to shut clocks off to block.
    ///< This should be done while block is idle.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CLKDISABLE_CRUX : 1;
    ///< RCS CRUX Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CLKDISABLE_TIMER : 1;
    ///< RCS TIMER Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CLKDISABLE_ROM : 1;
    ///< RCS ROM Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t CLKDISABLE_SCB : 1;
    ///< RCS scb Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t CLKDISABLE_SMON : 1;
    ///< RCS smon Clock Disable. Set to 1 to shut clocks off to block. This
    ///< should be done while block is idle.
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t CLKDISABLE_CORE3 : 1;
    ///< CPU core3(KP1) Clock Disable. Set to 1 to shut clocks off to block.
    ///< This should be done while block is idle.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t CLKDISABLE_DEBUG : 1;
    ///< debug mux (sync logic) Clock Disable. Set to 1 to shut clocks off
    ///< to block. This should be done while block is idle.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_rcs_clk_diss_reg_t;

#define RCS_GPREG_RCS_CLK_DISS_DEFAULT (0x00000000U)
#define RCS_GPREG_RCS_CLK_DISS_RD_MASK (0x384fff15U)
#define RCS_GPREG_RCS_CLK_DISS_WR_MASK (0x384fff15U)


///< I3C #0 Clock Disable. Set to 1 to shut clocks off to block. This should
///< be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_I3CM0_BF_OFF ( 0)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_I3CM0_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_I3CM0_BF_MSK (0x00000001)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_I3CM0_BF_DEF (0x00000000)

///< NIC400 BFN Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FABRIC_BFN_BF_OFF ( 2)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FABRIC_BFN_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FABRIC_BFN_BF_MSK (0x00000004)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FABRIC_BFN_BF_DEF (0x00000000)

///< SSP #0 Clock Disable. Set to 1 to shut clocks off to block. This should
///< be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SSP0_BF_OFF ( 4)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SSP0_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SSP0_BF_MSK (0x00000010)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SSP0_BF_DEF (0x00000000)

///< CPU core0 Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE0_BF_OFF ( 8)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE0_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE0_BF_MSK (0x00000100)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE0_BF_DEF (0x00000000)

///< CPU core1 Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE1_BF_OFF ( 9)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE1_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE1_BF_MSK (0x00000200)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE1_BF_DEF (0x00000000)

///< CPU core2 Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE2_BF_OFF (10)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE2_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE2_BF_MSK (0x00000400)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE2_BF_DEF (0x00000000)

///< RCS DMAC Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DMAC_BF_OFF (11)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DMAC_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DMAC_BF_MSK (0x00000800)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DMAC_BF_DEF (0x00000000)

///< RCS RSM0 Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM0_BF_OFF (12)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM0_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM0_BF_MSK (0x00001000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM0_BF_DEF (0x00000000)

///< RCS RSM1 Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM1_BF_OFF (13)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM1_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM1_BF_MSK (0x00002000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_RSM1_BF_DEF (0x00000000)

///< RCS LOGGER Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_LOGGER_BF_OFF (14)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_LOGGER_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_LOGGER_BF_MSK (0x00004000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_LOGGER_BF_DEF (0x00000000)

///< RCS PHM/FOVR Clock Disable. Set to 1 to shut clocks off to block.
///< This should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM0_BF_OFF (15)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM0_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM0_BF_MSK (0x00008000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM0_BF_DEF (0x00000000)

///< RCS PHM/FOVR Clock Disable. Set to 1 to shut clocks off to block.
///< This should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM1_BF_OFF (16)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM1_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM1_BF_MSK (0x00010000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_FOVR_PHM1_BF_DEF (0x00000000)

///< RCS CRUX Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CRUX_BF_OFF (17)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CRUX_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CRUX_BF_MSK (0x00020000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CRUX_BF_DEF (0x00000000)

///< RCS TIMER Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_TIMER_BF_OFF (18)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_TIMER_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_TIMER_BF_MSK (0x00040000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_TIMER_BF_DEF (0x00000000)

///< RCS ROM Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_ROM_BF_OFF (19)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_ROM_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_ROM_BF_MSK (0x00080000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_ROM_BF_DEF (0x00000000)

///< RCS scb Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SCB_BF_OFF (22)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SCB_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SCB_BF_MSK (0x00400000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SCB_BF_DEF (0x00000000)

///< RCS smon Clock Disable. Set to 1 to shut clocks off to block. This
///< should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SMON_BF_OFF (27)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SMON_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SMON_BF_MSK (0x08000000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_SMON_BF_DEF (0x00000000)

///< CPU core3(KP1) Clock Disable. Set to 1 to shut clocks off to block.
///< This should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE3_BF_OFF (28)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE3_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE3_BF_MSK (0x10000000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_CORE3_BF_DEF (0x00000000)

///< debug mux (sync logic) Clock Disable. Set to 1 to shut clocks off
///< to block. This should be done while block is idle.
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DBG_BF_OFF (29)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DBG_BF_WID ( 1)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DBG_BF_MSK (0x20000000)
#define RCS_GPREG_RCS_CLK_DISS_CLKDIS_DBG_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_RCS_SCRATCH register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/rcs_scratch
  * RCS scratch register
  */

typedef union {
  struct {
    uint32_t RCS_SCRATCH : 32;
    ///< scratch register bits count
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_rcs_scratch_reg_t;

#define RCS_GPREG_RCS_SCRATCH_DEFAULT (0x00000000U)
#define RCS_GPREG_RCS_SCRATCH_RD_MASK (0xffffffffU)
#define RCS_GPREG_RCS_SCRATCH_WR_MASK (0xffffffffU)


///< scratch register bits count
#define RCS_GPREG_RCS_SCRATCH_RCS_SCRATCH_BF_OFF ( 0)
#define RCS_GPREG_RCS_SCRATCH_RCS_SCRATCH_BF_WID (32)
#define RCS_GPREG_RCS_SCRATCH_RCS_SCRATCH_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_RCS_SCRATCH_RCS_SCRATCH_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_EXT_TO_RCS_MB_MBDATA[8][4] register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/ext_to_rcs_mb/mbdata
  * Mailbox Message Register
  */

typedef union {
  struct {
    uint32_t MAILBOX_DATA : 32;
    ///< Mailbox Message Dataword - Writing to this location will generate
    ///< the mailbox interrupt to the interrupt controller. Please note that
    ///< for ext_to_rcs mailbox, every 4 of them are forming one group. Only
    ///< writing to the last one of each group will generate the interrupt,
    ///< such as ext_to_rcs_mb[0][3], ext_to_rcs_mb[1][3], ... ,ext_to_rcs_mb[7][3]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t;

#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_DEFAULT (0x00000000U)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_RD_MASK (0xffffffffU)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_WR_MASK (0xffffffffU)


///< Mailbox Message Dataword - Writing to this location will generate
///< the mailbox interrupt to the interrupt controller. Please note that
///< for ext_to_rcs mailbox, every 4 of them are forming one group. Only
///< writing to the last one of each group will generate the interrupt,
///< such as ext_to_rcs_mb[0][3], ext_to_rcs_mb[1][3], ... ,ext_to_rcs_mb[7][3]
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_MAILBOX_DATA_BF_OFF ( 0)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_MAILBOX_DATA_BF_WID (32)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_MAILBOX_DATA_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_MAILBOX_DATA_BF_DEF (0x00000000)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_ARR_SZ0 (8)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_ARRAY_STRIDE0 (0x0010)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_ARR_SZ1 (4)
#define RCS_GPREG_EXT_TO_RCS_MB_MBDATA_ARRAY_STRIDE1 (0x0004)


/** @brief RCS_GPREG_COM_REG_RCS_TO_RCS_MB[12] register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/rcs_to_rcs_mb
  * Mailbox Message Register
  */

typedef union {
  struct {
    uint32_t MAILBOX_DATA : 32;
    ///< Mailbox Message Dataword - Writing to this location will generate
    ///< the mailbox interrupt to the interrupt controller. Please note that
    ///< for ext_to_rcs mailbox, every 4 of them are forming one group. Only
    ///< writing to the last one of each group will generate the interrupt,
    ///< such as ext_to_rcs_mb[0][3], ext_to_rcs_mb[1][3], ... ,ext_to_rcs_mb[7][3]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_rcs_to_rcs_mb_reg_t;

#define RCS_GPREG_RCS_TO_RCS_MB_DEFAULT (0x00000000U)
#define RCS_GPREG_RCS_TO_RCS_MB_RD_MASK (0xffffffffU)
#define RCS_GPREG_RCS_TO_RCS_MB_WR_MASK (0xffffffffU)


///< Mailbox Message Dataword - Writing to this location will generate
///< the mailbox interrupt to the interrupt controller. Please note that
///< for ext_to_rcs mailbox, every 4 of them are forming one group. Only
///< writing to the last one of each group will generate the interrupt,
///< such as ext_to_rcs_mb[0][3], ext_to_rcs_mb[1][3], ... ,ext_to_rcs_mb[7][3]
#define RCS_GPREG_RCS_TO_RCS_MB_MAILBOX_DATA_BF_OFF ( 0)
#define RCS_GPREG_RCS_TO_RCS_MB_MAILBOX_DATA_BF_WID (32)
#define RCS_GPREG_RCS_TO_RCS_MB_MAILBOX_DATA_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_RCS_TO_RCS_MB_MAILBOX_DATA_BF_DEF (0x00000000)
#define RCS_GPREG_RCS_TO_RCS_MB_ARR_SZ0 (12)
#define RCS_GPREG_RCS_TO_RCS_MB_ARRAY_STRIDE0 (0x0004)


/** @brief RCS_GPREG_COM_REG_EXT_IRQ_GRP register description at address offset 0xf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/ext_irq_grp
  * LVL_IRQ_STAT_EXT_GRP
  */

typedef union {
  struct {
    uint32_t LVL_IRQ_STAT : 18;
    ///< After combining all interrupts into 18 interrupts signals, they are
    ///< further combined into 1 interrupt before sending out of RCS. This
    ///< filed indicates which group triggered interrupt going to external
    ///< of RCS
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DEBUGMODE_LX70 : 1;
    ///< Indicates LX70 is in Debug Mode
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t XOCDMODE_LX70 : 1;
    ///< Indicates LX70 is in XOCD Mode
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t PWAITMODE_LX70 : 1;
    ///< Indicates LX70 is in PWait Mode
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t DEBUGMODE_LX71 : 1;
    ///< Indicates LX71 is in Debug Mode
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t XOCDMODE_LX71 : 1;
    ///< Indicates LX71 is in XOCD Mode
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t PWAITMODE_LX71 : 1;
    ///< Indicates LX71 is in PWait Mode
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t DEBUGMODE_LX72 : 1;
    ///< Indicates LX72 is in Debug Mode
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t XOCDMODE_LX72 : 1;
    ///< Indicates LX72 is in XOCD Mode
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t PWAITMODE_LX72 : 1;
    ///< Indicates LX72 is in PWait Mode
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t DEBUGMODE_KP1 : 1;
    ///< Indicates KP1 is in Debug Mode
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t XOCDMODE_KP1 : 1;
    ///< Indicates KP1 is in XOCD Mode
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t PWAITMODE_KP1 : 1;
    ///< Indicates KP1 is in PWait Mode
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t RCS_ROM_OP : 1;
    ///< Ready For Operation. This is a read only bit, for status
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t RCS_RSM_ZEROIZE_BUSY : 1;
    ///< Indicates that RCS memory zeroing is in progress.  Poll on this bit
    ///< and once it goes to 0 then clear the rcs_rsm_zeroize bit.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_ext_irq_grp_reg_t;

#define RCS_GPREG_EXT_IRQ_GRP_DEFAULT (0x00000000U)
#define RCS_GPREG_EXT_IRQ_GRP_RD_MASK (0xffffffffU)
#define RCS_GPREG_EXT_IRQ_GRP_WR_MASK (0x00000000U)


///< After combining all interrupts into 18 interrupts signals, they are
///< further combined into 1 interrupt before sending out of RCS. This
///< filed indicates which group triggered interrupt going to external
///< of RCS
#define RCS_GPREG_EXT_IRQ_GRP_LVL_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EXT_IRQ_GRP_LVL_IRQ_STAT_BF_WID (18)
#define RCS_GPREG_EXT_IRQ_GRP_LVL_IRQ_STAT_BF_MSK (0x0003FFFF)
#define RCS_GPREG_EXT_IRQ_GRP_LVL_IRQ_STAT_BF_DEF (0x00000000)

///< Indicates LX70 is in Debug Mode
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX70_BF_OFF (18)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX70_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX70_BF_MSK (0x00040000)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX70_BF_DEF (0x00000000)

///< Indicates LX70 is in XOCD Mode
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX70_BF_OFF (19)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX70_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX70_BF_MSK (0x00080000)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX70_BF_DEF (0x00000000)

///< Indicates LX70 is in PWait Mode
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX70_BF_OFF (20)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX70_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX70_BF_MSK (0x00100000)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX70_BF_DEF (0x00000000)

///< Indicates LX71 is in Debug Mode
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX71_BF_OFF (21)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX71_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX71_BF_MSK (0x00200000)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX71_BF_DEF (0x00000000)

///< Indicates LX71 is in XOCD Mode
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX71_BF_OFF (22)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX71_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX71_BF_MSK (0x00400000)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX71_BF_DEF (0x00000000)

///< Indicates LX71 is in PWait Mode
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX71_BF_OFF (23)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX71_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX71_BF_MSK (0x00800000)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX71_BF_DEF (0x00000000)

///< Indicates LX72 is in Debug Mode
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX72_BF_OFF (24)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX72_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX72_BF_MSK (0x01000000)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_LX72_BF_DEF (0x00000000)

///< Indicates LX72 is in XOCD Mode
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX72_BF_OFF (25)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX72_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX72_BF_MSK (0x02000000)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_LX72_BF_DEF (0x00000000)

///< Indicates LX72 is in PWait Mode
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX72_BF_OFF (26)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX72_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX72_BF_MSK (0x04000000)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_LX72_BF_DEF (0x00000000)

///< Indicates KP1 is in Debug Mode
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_KP1_BF_OFF (27)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_KP1_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_KP1_BF_MSK (0x08000000)
#define RCS_GPREG_EXT_IRQ_GRP_DBGMODE_KP1_BF_DEF (0x00000000)

///< Indicates KP1 is in XOCD Mode
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_KP1_BF_OFF (28)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_KP1_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_KP1_BF_MSK (0x10000000)
#define RCS_GPREG_EXT_IRQ_GRP_XOCDMODE_KP1_BF_DEF (0x00000000)

///< Indicates KP1 is in PWait Mode
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_KP1_BF_OFF (29)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_KP1_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_KP1_BF_MSK (0x20000000)
#define RCS_GPREG_EXT_IRQ_GRP_PWAITMODE_KP1_BF_DEF (0x00000000)

///< Ready For Operation. This is a read only bit, for status
#define RCS_GPREG_EXT_IRQ_GRP_RCS_ROM_OP_BF_OFF (30)
#define RCS_GPREG_EXT_IRQ_GRP_RCS_ROM_OP_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_RCS_ROM_OP_BF_MSK (0x40000000)
#define RCS_GPREG_EXT_IRQ_GRP_RCS_ROM_OP_BF_DEF (0x00000000)

///< Indicates that RCS memory zeroing is in progress.  Poll on this bit
///< and once it goes to 0 then clear the rcs_rsm_zeroize bit.
#define RCS_GPREG_EXT_IRQ_GRP_RCS_RSM_ZEROIZE_BUSY_BF_OFF (31)
#define RCS_GPREG_EXT_IRQ_GRP_RCS_RSM_ZEROIZE_BUSY_BF_WID ( 1)
#define RCS_GPREG_EXT_IRQ_GRP_RCS_RSM_ZEROIZE_BUSY_BF_MSK (0x80000000)
#define RCS_GPREG_EXT_IRQ_GRP_RCS_RSM_ZEROIZE_BUSY_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DOUBLEEXCEPTION_OUT_LX70 register description at address offset 0xf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DoubleException_out_LX70
  * DoubleException
  */

typedef union {
  struct {
    uint32_t DOUBLEEXCEPTION : 32;
    ///< DoubleException error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_doubleexception_out_lx70_reg_t;

#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_WR_MASK (0x00000000U)


///< DoubleException error count
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_DOUBLEEXCEPTION_BF_OFF ( 0)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_DOUBLEEXCEPTION_BF_WID (32)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_DOUBLEEXCEPTION_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_DOUBLEEXCEPTION_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_UNCORRECTABLE_LX70 register description at address offset 0xf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_uncorrectable_LX70
  * SyncIRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_UNCORRECTABLE : 32;
    ///< SyncIRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_uncorrectbl_lx70_reg_t;

#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_WR_MASK (0x00000000U)


///< SyncIRAM_uncorrectable count
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_SYNCIRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_SYNCIRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_SYNCIRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_SYNCIRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_CORRECTABLE_LX70 register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_correctable_LX70
  * SyncIRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_CORRECTABLE : 32;
    ///< SyncIRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_correctbl_lx70_reg_t;

#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_WR_MASK (0x00000000U)


///< SyncIRAM_correctable count
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_SYNCIRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_SYNCIRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_SYNCIRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_SYNCIRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_UNCORRECTABLE_LX70 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_uncorrectable_LX70
  * SyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_UNCORRECTABLE : 32;
    ///< SyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_uncorrectbl_lx70_reg_t;

#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_WR_MASK (0x00000000U)


///< SyncDRAM_uncorrectable count
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_SYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_SYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_SYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_SYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_CORRECTABLE_LX70 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_correctable_LX70
  * SyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_CORRECTABLE : 32;
    ///< SyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_correctbl_lx70_reg_t;

#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_WR_MASK (0x00000000U)


///< SyncDRAM_correctable count
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_SYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_SYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_SYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_SYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_CORRECTABLE_LX70 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_correctable_LX70
  * AsyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_CORRECTABLE : 32;
    ///< AsyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_correctbl_lx70_reg_t;

#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_WR_MASK (0x00000000U)


///< AsyncDRAM_correctable count
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_ASYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_ASYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_ASYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_ASYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_UNCORRECTABLE_LX70 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_uncorrectable_LX70
  * AsyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_UNCORRECTABLE : 32;
    ///< AsyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_uncorrectbl_lx70_reg_t;

#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_WR_MASK (0x00000000U)


///< AsyncDRAM_uncorrectable count
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_ASYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_ASYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_ASYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_ASYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_UNCORRECTABLE_ERROR_LX70 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_uncorrectable_error_LX70
  * IRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t IRAM_UNCORRECTABLE_ERROR : 32;
    ///< IRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_uncorrectbl_err_lx70_reg_t;

#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_WR_MASK (0x00000000U)


///< IRAM_uncorrectable_error count
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_IRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_IRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_IRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_IRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_CORRECTABLE_ERROR_LX70 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_correctable_error_LX70
  * IRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t IRAM_CORRECTABLE_ERROR : 32;
    ///< IRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_correctbl_err_lx70_reg_t;

#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_WR_MASK (0x00000000U)


///< IRAM_correctable_error count
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_IRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_IRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_IRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_IRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_UNCORRECTABLE_ERROR_LX70 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_uncorrectable_error_LX70
  * DRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t DRAM_UNCORRECTABLE_ERROR : 32;
    ///< DRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_uncorrectbl_err_lx70_reg_t;

#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_WR_MASK (0x00000000U)


///< DRAM_uncorrectable_error count
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_DRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_DRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_DRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_DRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_CORRECTABLE_ERROR_LX70 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_correctable_error_LX70
  * DRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t DRAM_CORRECTABLE_ERROR : 32;
    ///< DRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_correctbl_err_lx70_reg_t;

#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_WR_MASK (0x00000000U)


///< DRAM_correctable_error count
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_DRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_DRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_DRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_DRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DOUBLEEXCEPTION_OUT_LX71 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DoubleException_out_LX71
  * DoubleException
  */

typedef union {
  struct {
    uint32_t DOUBLEEXCEPTION : 32;
    ///< DoubleException error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_doubleexception_out_lx71_reg_t;

#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_WR_MASK (0x00000000U)


///< DoubleException error count
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_DOUBLEEXCEPTION_BF_OFF ( 0)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_DOUBLEEXCEPTION_BF_WID (32)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_DOUBLEEXCEPTION_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_DOUBLEEXCEPTION_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_UNCORRECTABLE_LX71 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_uncorrectable_LX71
  * SyncIRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_UNCORRECTABLE : 32;
    ///< SyncIRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_uncorrectbl_lx71_reg_t;

#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_WR_MASK (0x00000000U)


///< SyncIRAM_uncorrectable count
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_SYNCIRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_SYNCIRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_SYNCIRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_SYNCIRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_CORRECTABLE_LX71 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_correctable_LX71
  * SyncIRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_CORRECTABLE : 32;
    ///< SyncIRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_correctbl_lx71_reg_t;

#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_WR_MASK (0x00000000U)


///< SyncIRAM_correctable count
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_SYNCIRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_SYNCIRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_SYNCIRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_SYNCIRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_UNCORRECTABLE_LX71 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_uncorrectable_LX71
  * SyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_UNCORRECTABLE : 32;
    ///< SyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_uncorrectbl_lx71_reg_t;

#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_WR_MASK (0x00000000U)


///< SyncDRAM_uncorrectable count
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_SYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_SYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_SYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_SYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_CORRECTABLE_LX71 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_correctable_LX71
  * SyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_CORRECTABLE : 32;
    ///< SyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_correctbl_lx71_reg_t;

#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_WR_MASK (0x00000000U)


///< SyncDRAM_correctable count
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_SYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_SYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_SYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_SYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_CORRECTABLE_LX71 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_correctable_LX71
  * AsyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_CORRECTABLE : 32;
    ///< AsyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_correctbl_lx71_reg_t;

#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_WR_MASK (0x00000000U)


///< AsyncDRAM_correctable count
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_ASYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_ASYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_ASYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_ASYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_UNCORRECTABLE_LX71 register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_uncorrectable_LX71
  * AsyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_UNCORRECTABLE : 32;
    ///< AsyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_uncorrectbl_lx71_reg_t;

#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_WR_MASK (0x00000000U)


///< AsyncDRAM_uncorrectable count
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_ASYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_ASYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_ASYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_ASYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_UNCORRECTABLE_ERROR_LX71 register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_uncorrectable_error_LX71
  * IRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t IRAM_UNCORRECTABLE_ERROR : 32;
    ///< IRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_uncorrectbl_err_lx71_reg_t;

#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_WR_MASK (0x00000000U)


///< IRAM_uncorrectable_error count
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_IRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_IRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_IRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_IRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_CORRECTABLE_ERROR_LX71 register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_correctable_error_LX71
  * IRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t IRAM_CORRECTABLE_ERROR : 32;
    ///< IRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_correctbl_err_lx71_reg_t;

#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_WR_MASK (0x00000000U)


///< IRAM_correctable_error count
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_IRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_IRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_IRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_IRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_UNCORRECTABLE_ERROR_LX71 register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_uncorrectable_error_LX71
  * DRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t DRAM_UNCORRECTABLE_ERROR : 32;
    ///< DRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_uncorrectbl_err_lx71_reg_t;

#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_WR_MASK (0x00000000U)


///< DRAM_uncorrectable_error count
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_DRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_DRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_DRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_DRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_CORRECTABLE_ERROR_LX71 register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_correctable_error_LX71
  * DRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t DRAM_CORRECTABLE_ERROR : 32;
    ///< DRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_correctbl_err_lx71_reg_t;

#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_WR_MASK (0x00000000U)


///< DRAM_correctable_error count
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_DRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_DRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_DRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_DRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DOUBLEEXCEPTION_OUT_LX72 register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DoubleException_out_LX72
  * DoubleException
  */

typedef union {
  struct {
    uint32_t DOUBLEEXCEPTION : 32;
    ///< DoubleException error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_doubleexception_out_lx72_reg_t;

#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_WR_MASK (0x00000000U)


///< DoubleException error count
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_DOUBLEEXCEPTION_BF_OFF ( 0)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_DOUBLEEXCEPTION_BF_WID (32)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_DOUBLEEXCEPTION_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_DOUBLEEXCEPTION_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_UNCORRECTABLE_LX72 register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_uncorrectable_LX72
  * SyncIRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_UNCORRECTABLE : 32;
    ///< SyncIRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_uncorrectbl_lx72_reg_t;

#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_WR_MASK (0x00000000U)


///< SyncIRAM_uncorrectable count
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_SYNCIRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_SYNCIRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_SYNCIRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_SYNCIRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_CORRECTABLE_LX72 register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_correctable_LX72
  * SyncIRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_CORRECTABLE : 32;
    ///< SyncIRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_correctbl_lx72_reg_t;

#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_WR_MASK (0x00000000U)


///< SyncIRAM_correctable count
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_SYNCIRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_SYNCIRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_SYNCIRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_SYNCIRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_UNCORRECTABLE_LX72 register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_uncorrectable_LX72
  * SyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_UNCORRECTABLE : 32;
    ///< SyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_uncorrectbl_lx72_reg_t;

#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_WR_MASK (0x00000000U)


///< SyncDRAM_uncorrectable count
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_SYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_SYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_SYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_SYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_CORRECTABLE_LX72 register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_correctable_LX72
  * SyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_CORRECTABLE : 32;
    ///< SyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_correctbl_lx72_reg_t;

#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_WR_MASK (0x00000000U)


///< SyncDRAM_correctable count
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_SYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_SYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_SYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_SYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_CORRECTABLE_LX72 register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_correctable_LX72
  * AsyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_CORRECTABLE : 32;
    ///< AsyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_correctbl_lx72_reg_t;

#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_WR_MASK (0x00000000U)


///< AsyncDRAM_correctable count
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_ASYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_ASYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_ASYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_ASYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_UNCORRECTABLE_LX72 register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_uncorrectable_LX72
  * AsyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_UNCORRECTABLE : 32;
    ///< AsyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_uncorrectbl_lx72_reg_t;

#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_WR_MASK (0x00000000U)


///< AsyncDRAM_uncorrectable count
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_ASYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_ASYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_ASYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_ASYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_UNCORRECTABLE_ERROR_LX72 register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_uncorrectable_error_LX72
  * IRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t IRAM_UNCORRECTABLE_ERROR : 32;
    ///< IRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_uncorrectbl_err_lx72_reg_t;

#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_WR_MASK (0x00000000U)


///< IRAM_uncorrectable_error count
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_IRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_IRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_IRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_IRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_CORRECTABLE_ERROR_LX72 register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_correctable_error_LX72
  * IRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t IRAM_CORRECTABLE_ERROR : 32;
    ///< IRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_correctbl_err_lx72_reg_t;

#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_WR_MASK (0x00000000U)


///< IRAM_correctable_error count
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_IRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_IRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_IRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_IRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_UNCORRECTABLE_ERROR_LX72 register description at address offset 0x170
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_uncorrectable_error_LX72
  * DRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t DRAM_UNCORRECTABLE_ERROR : 32;
    ///< DRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_uncorrectbl_err_lx72_reg_t;

#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_WR_MASK (0x00000000U)


///< DRAM_uncorrectable_error count
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_DRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_DRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_DRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_DRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_CORRECTABLE_ERROR_LX72 register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_correctable_error_LX72
  * DRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t DRAM_CORRECTABLE_ERROR : 32;
    ///< DRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_correctbl_err_lx72_reg_t;

#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_WR_MASK (0x00000000U)


///< DRAM_correctable_error count
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_DRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_DRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_DRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_DRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DOUBLEEXCEPTION_OUT_KP1 register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DoubleException_out_KP1
  * DoubleException
  */

typedef union {
  struct {
    uint32_t DOUBLEEXCEPTION : 32;
    ///< DoubleException error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_doubleexception_out_kp1_reg_t;

#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_WR_MASK (0x00000000U)


///< DoubleException error count
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_DOUBLEEXCEPTION_BF_OFF ( 0)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_DOUBLEEXCEPTION_BF_WID (32)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_DOUBLEEXCEPTION_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_DOUBLEEXCEPTION_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_UNCORRECTABLE_KP1 register description at address offset 0x17c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_uncorrectable_KP1
  * SyncIRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_UNCORRECTABLE : 32;
    ///< SyncIRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_uncorrectbl_kp1_reg_t;

#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_WR_MASK (0x00000000U)


///< SyncIRAM_uncorrectable count
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_SYNCIRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_SYNCIRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_SYNCIRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_SYNCIRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCIRAM_CORRECTABLE_KP1 register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncIRAM_correctable_KP1
  * SyncIRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCIRAM_CORRECTABLE : 32;
    ///< SyncIRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_synciram_correctbl_kp1_reg_t;

#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_WR_MASK (0x00000000U)


///< SyncIRAM_correctable count
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_SYNCIRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_SYNCIRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_SYNCIRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_SYNCIRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_UNCORRECTABLE_KP1 register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_uncorrectable_KP1
  * SyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_UNCORRECTABLE : 32;
    ///< SyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_uncorrectbl_kp1_reg_t;

#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_WR_MASK (0x00000000U)


///< SyncDRAM_uncorrectable count
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_SYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_SYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_SYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_SYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_SYNCDRAM_CORRECTABLE_KP1 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/SyncDRAM_correctable_KP1
  * SyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t SYNCDRAM_CORRECTABLE : 32;
    ///< SyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_syncdram_correctbl_kp1_reg_t;

#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_WR_MASK (0x00000000U)


///< SyncDRAM_correctable count
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_SYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_SYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_SYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_SYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_CORRECTABLE_KP1 register description at address offset 0x18c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_correctable_KP1
  * AsyncDRAM_correctable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_CORRECTABLE : 32;
    ///< AsyncDRAM_correctable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_correctbl_kp1_reg_t;

#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_WR_MASK (0x00000000U)


///< AsyncDRAM_correctable count
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_ASYNCDRAM_CORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_ASYNCDRAM_CORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_ASYNCDRAM_CORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_ASYNCDRAM_CORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_ASYNCDRAM_UNCORRECTABLE_KP1 register description at address offset 0x190
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/AsyncDRAM_uncorrectable_KP1
  * AsyncDRAM_uncorrectable
  */

typedef union {
  struct {
    uint32_t ASYNCDRAM_UNCORRECTABLE : 32;
    ///< AsyncDRAM_uncorrectable count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_asyncdram_uncorrectbl_kp1_reg_t;

#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_WR_MASK (0x00000000U)


///< AsyncDRAM_uncorrectable count
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_ASYNCDRAM_UNCORRECTBL_BF_OFF ( 0)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_ASYNCDRAM_UNCORRECTBL_BF_WID (32)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_ASYNCDRAM_UNCORRECTBL_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_ASYNCDRAM_UNCORRECTBL_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_UNCORRECTABLE_ERROR_KP1 register description at address offset 0x194
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_uncorrectable_error_KP1
  * IRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t IRAM_UNCORRECTABLE_ERROR : 32;
    ///< IRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_uncorrectbl_err_kp1_reg_t;

#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_WR_MASK (0x00000000U)


///< IRAM_uncorrectable_error count
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_IRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_IRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_IRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_IRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_IRAM_CORRECTABLE_ERROR_KP1 register description at address offset 0x198
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/IRAM_correctable_error_KP1
  * IRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t IRAM_CORRECTABLE_ERROR : 32;
    ///< IRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_iram_correctbl_err_kp1_reg_t;

#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_WR_MASK (0x00000000U)


///< IRAM_correctable_error count
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_IRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_IRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_IRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_IRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_UNCORRECTABLE_ERROR_KP1 register description at address offset 0x19c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_uncorrectable_error_KP1
  * DRAM_uncorrectable_error
  */

typedef union {
  struct {
    uint32_t DRAM_UNCORRECTABLE_ERROR : 32;
    ///< DRAM_uncorrectable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_uncorrectbl_err_kp1_reg_t;

#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_WR_MASK (0x00000000U)


///< DRAM_uncorrectable_error count
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_DRAM_UNCORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_DRAM_UNCORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_DRAM_UNCORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_DRAM_UNCORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_DRAM_CORRECTABLE_ERROR_KP1 register description at address offset 0x1a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/DRAM_correctable_error_KP1
  * DRAM_correctable_error
  */

typedef union {
  struct {
    uint32_t DRAM_CORRECTABLE_ERROR : 32;
    ///< DRAM_correctable_error count
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_dram_correctbl_err_kp1_reg_t;

#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_DEFAULT (0x00000000U)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_RD_MASK (0xffffffffU)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_WR_MASK (0x00000000U)


///< DRAM_correctable_error count
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_DRAM_CORRECTBL_ERR_BF_OFF ( 0)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_DRAM_CORRECTBL_ERR_BF_WID (32)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_DRAM_CORRECTBL_ERR_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_DRAM_CORRECTBL_ERR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_RPC_FAULTSERVERITYLEVEL register description at address offset 0x1a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/RPC_FaultServerityLevel
  * RPC Fault Severity Level register
  */

typedef union {
  struct {
    uint32_t CORE0 : 8;
    ///< Fault Severity Level from core0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CORE1 : 8;
    ///< Fault Severity Level from core1
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t CORE2 : 8;
    ///< Fault Severity Level from core2
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t CORE3 : 8;
    ///< Fault Severity Level from core3
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_rpc_faultserveritylvl_reg_t;

#define RCS_GPREG_RPC_FAULTSERVERITYLVL_DEFAULT (0x00000000U)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_RD_MASK (0xffffffffU)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_WR_MASK (0x00000000U)


///< Fault Severity Level from core0
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE0_BF_OFF ( 0)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE0_BF_WID ( 8)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE0_BF_MSK (0x000000FF)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE0_BF_DEF (0x00000000)

///< Fault Severity Level from core1
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE1_BF_OFF ( 8)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE1_BF_WID ( 8)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE1_BF_MSK (0x0000FF00)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE1_BF_DEF (0x00000000)

///< Fault Severity Level from core2
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE2_BF_OFF (16)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE2_BF_WID ( 8)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE2_BF_MSK (0x00FF0000)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE2_BF_DEF (0x00000000)

///< Fault Severity Level from core3
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE3_BF_OFF (24)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE3_BF_WID ( 8)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE3_BF_MSK (0xFF000000)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_CORE3_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_MAILBOX_CLR register description at address offset 0x1a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/mailbox_clr
  * Mailbox Clear Registers
  */

typedef union {
  struct {
    uint32_t EXT_TO_RCS_MB_CLR : 8;
    ///< A write of 1 will clear the doorbell interrupt to the interrupt aggregator,
    ///< self cleared after 1 cycle; bit0 clears ext_2_rcs[0][3:0], bit1 clears
    ///< ext_2_rcs[1][3:0]...
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t RCS_TO_RCS_MB_CLR : 12;
    ///< A write of 1 will clear the doorbell interrupt to the interrupt aggregator,
    ///< self cleared after 1 cycle; bit 8 clears rcs_2_rcs mb#0
    ///< AccessType="RW/AC" BitOffset="8" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} rcs_gpreg_mailbox_clr_reg_t;

#define RCS_GPREG_MAILBOX_CLR_DEFAULT (0x00000000U)
#define RCS_GPREG_MAILBOX_CLR_RD_MASK (0x000fffffU)
#define RCS_GPREG_MAILBOX_CLR_WR_MASK (0x000fffffU)


///< A write of 1 will clear the doorbell interrupt to the interrupt aggregator,
///< self cleared after 1 cycle; bit0 clears ext_2_rcs[0][3:0], bit1 clears
///< ext_2_rcs[1][3:0]...
#define RCS_GPREG_MAILBOX_CLR_EXT_TO_RCS_MB_CLR_BF_OFF ( 0)
#define RCS_GPREG_MAILBOX_CLR_EXT_TO_RCS_MB_CLR_BF_WID ( 8)
#define RCS_GPREG_MAILBOX_CLR_EXT_TO_RCS_MB_CLR_BF_MSK (0x000000FF)
#define RCS_GPREG_MAILBOX_CLR_EXT_TO_RCS_MB_CLR_BF_DEF (0x00000000)

///< A write of 1 will clear the doorbell interrupt to the interrupt aggregator,
///< self cleared after 1 cycle; bit 8 clears rcs_2_rcs mb#0
#define RCS_GPREG_MAILBOX_CLR_RCS_TO_RCS_MB_CLR_BF_OFF ( 8)
#define RCS_GPREG_MAILBOX_CLR_RCS_TO_RCS_MB_CLR_BF_WID (12)
#define RCS_GPREG_MAILBOX_CLR_RCS_TO_RCS_MB_CLR_BF_MSK (0x000FFF00)
#define RCS_GPREG_MAILBOX_CLR_RCS_TO_RCS_MB_CLR_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_STAT_0 register description at address offset 0x1b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_stat_0
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_stat_0_reg_t;

#define RCS_GPREG_EDG_IRQ_STAT_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_STAT_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_STAT_0_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_STAT_0_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_STAT_0_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_STAT_0_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_STAT_0_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_MASK_0 register description at address offset 0x1b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_mask_0
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_mask_0_reg_t;

#define RCS_GPREG_EDG_IRQ_MASK_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_MASK_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_MASK_0_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_MASK_0_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_MASK_0_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_MASK_0_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_MASK_0_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_INV_0 register description at address offset 0x1b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_inv_0
  * EDG_IRQ_INV
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_INV : 32;
    ///< Edge IRQ invert register. 0:rising edge; 1:negedge
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_inv_0_reg_t;

#define RCS_GPREG_EDG_IRQ_INV_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_INV_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_INV_0_WR_MASK (0xffffffffU)


///< Edge IRQ invert register. 0:rising edge; 1:negedge
#define RCS_GPREG_EDG_IRQ_INV_0_EDG_IRQ_INV_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_INV_0_EDG_IRQ_INV_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_INV_0_EDG_IRQ_INV_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_INV_0_EDG_IRQ_INV_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_NOMASK_0 register description at address offset 0x1bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_nomask_0
  * EDG_IRQ_NOMASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_NOMASK : 32;
    ///< Edge IRQ nomask register
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_nomask_0_reg_t;

#define RCS_GPREG_EDG_IRQ_NOMASK_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_NOMASK_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_NOMASK_0_WR_MASK (0xffffffffU)


///< Edge IRQ nomask register
#define RCS_GPREG_EDG_IRQ_NOMASK_0_EDG_IRQ_NOMASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_NOMASK_0_EDG_IRQ_NOMASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_NOMASK_0_EDG_IRQ_NOMASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_NOMASK_0_EDG_IRQ_NOMASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_RAW_0 register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_raw_0
  * EDG_IRQ_RAW
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_RAW : 32;
    ///< Edge IRQ raw register
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_raw_0_reg_t;

#define RCS_GPREG_EDG_IRQ_RAW_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_RAW_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_RAW_0_WR_MASK (0x00000000U)


///< Edge IRQ raw register
#define RCS_GPREG_EDG_IRQ_RAW_0_EDG_IRQ_RAW_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_RAW_0_EDG_IRQ_RAW_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_RAW_0_EDG_IRQ_RAW_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_RAW_0_EDG_IRQ_RAW_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_HI_STAT_0 register description at address offset 0x1c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_hi_stat_0
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_hi_stat_0_reg_t;

#define RCS_GPREG_EDG_IRQ_HI_STAT_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_HI_MASK_0 register description at address offset 0x1c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_hi_mask_0
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_hi_mask_0_reg_t;

#define RCS_GPREG_EDG_IRQ_HI_MASK_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_TX_STAT_0 register description at address offset 0x1cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_tx_stat_0
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_tx_stat_0_reg_t;

#define RCS_GPREG_EDG_IRQ_TX_STAT_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_TX_MASK_0 register description at address offset 0x1d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_tx_mask_0
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_tx_mask_0_reg_t;

#define RCS_GPREG_EDG_IRQ_TX_MASK_0_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_OSAZ register description at address offset 0x1d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_osaz
  * OSAZ
  */

typedef union {
  struct {
    uint32_t OSAZ : 32;
    ///< OSAZ register
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_osaz_reg_t;

#define RCS_GPREG_OSAZ_DEFAULT (0x00000000U)
#define RCS_GPREG_OSAZ_RD_MASK (0xffffffffU)
#define RCS_GPREG_OSAZ_WR_MASK (0xffffffffU)


///< OSAZ register
#define RCS_GPREG_OSAZ_BF_OFF ( 0)
#define RCS_GPREG_OSAZ_BF_WID (32)
#define RCS_GPREG_OSAZ_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_OSAZ_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_STAT_1 register description at address offset 0x1d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_stat_1
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_stat_1_reg_t;

#define RCS_GPREG_EDG_IRQ_STAT_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_STAT_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_STAT_1_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_STAT_1_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_STAT_1_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_STAT_1_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_STAT_1_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_MASK_1 register description at address offset 0x1dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_mask_1
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_mask_1_reg_t;

#define RCS_GPREG_EDG_IRQ_MASK_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_MASK_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_MASK_1_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_MASK_1_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_MASK_1_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_MASK_1_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_MASK_1_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_INV_1 register description at address offset 0x1e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_inv_1
  * EDG_IRQ_INV
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_INV : 32;
    ///< Edge IRQ invert register. 0:rising edge; 1:negedge
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_inv_1_reg_t;

#define RCS_GPREG_EDG_IRQ_INV_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_INV_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_INV_1_WR_MASK (0xffffffffU)


///< Edge IRQ invert register. 0:rising edge; 1:negedge
#define RCS_GPREG_EDG_IRQ_INV_1_EDG_IRQ_INV_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_INV_1_EDG_IRQ_INV_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_INV_1_EDG_IRQ_INV_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_INV_1_EDG_IRQ_INV_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_NOMASK_1 register description at address offset 0x1e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_nomask_1
  * EDG_IRQ_NOMASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_NOMASK : 32;
    ///< Edge IRQ nomask register
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_nomask_1_reg_t;

#define RCS_GPREG_EDG_IRQ_NOMASK_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_NOMASK_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_NOMASK_1_WR_MASK (0xffffffffU)


///< Edge IRQ nomask register
#define RCS_GPREG_EDG_IRQ_NOMASK_1_EDG_IRQ_NOMASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_NOMASK_1_EDG_IRQ_NOMASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_NOMASK_1_EDG_IRQ_NOMASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_NOMASK_1_EDG_IRQ_NOMASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_RAW_1 register description at address offset 0x1e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_raw_1
  * EDG_IRQ_RAW
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_RAW : 32;
    ///< Edge IRQ raw register
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_raw_1_reg_t;

#define RCS_GPREG_EDG_IRQ_RAW_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_RAW_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_RAW_1_WR_MASK (0x00000000U)


///< Edge IRQ raw register
#define RCS_GPREG_EDG_IRQ_RAW_1_EDG_IRQ_RAW_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_RAW_1_EDG_IRQ_RAW_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_RAW_1_EDG_IRQ_RAW_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_RAW_1_EDG_IRQ_RAW_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_HI_STAT_1 register description at address offset 0x1ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_hi_stat_1
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_hi_stat_1_reg_t;

#define RCS_GPREG_EDG_IRQ_HI_STAT_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_HI_MASK_1 register description at address offset 0x1f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_hi_mask_1
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_hi_mask_1_reg_t;

#define RCS_GPREG_EDG_IRQ_HI_MASK_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_TX_STAT_1 register description at address offset 0x1f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_tx_stat_1
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_tx_stat_1_reg_t;

#define RCS_GPREG_EDG_IRQ_TX_STAT_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_TX_MASK_1 register description at address offset 0x1f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_tx_mask_1
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_tx_mask_1_reg_t;

#define RCS_GPREG_EDG_IRQ_TX_MASK_1_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_STAT_2 register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_stat_2
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_stat_2_reg_t;

#define RCS_GPREG_EDG_IRQ_STAT_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_STAT_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_STAT_2_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_STAT_2_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_STAT_2_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_STAT_2_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_STAT_2_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_MASK_2 register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_mask_2
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_mask_2_reg_t;

#define RCS_GPREG_EDG_IRQ_MASK_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_MASK_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_MASK_2_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_MASK_2_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_MASK_2_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_MASK_2_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_MASK_2_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_INV_2 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_inv_2
  * EDG_IRQ_INV
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_INV : 32;
    ///< Edge IRQ invert register. 0:rising edge; 1:negedge
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_inv_2_reg_t;

#define RCS_GPREG_EDG_IRQ_INV_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_INV_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_INV_2_WR_MASK (0xffffffffU)


///< Edge IRQ invert register. 0:rising edge; 1:negedge
#define RCS_GPREG_EDG_IRQ_INV_2_EDG_IRQ_INV_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_INV_2_EDG_IRQ_INV_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_INV_2_EDG_IRQ_INV_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_INV_2_EDG_IRQ_INV_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_NOMASK_2 register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_nomask_2
  * EDG_IRQ_NOMASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_NOMASK : 32;
    ///< Edge IRQ nomask register
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_nomask_2_reg_t;

#define RCS_GPREG_EDG_IRQ_NOMASK_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_NOMASK_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_NOMASK_2_WR_MASK (0xffffffffU)


///< Edge IRQ nomask register
#define RCS_GPREG_EDG_IRQ_NOMASK_2_EDG_IRQ_NOMASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_NOMASK_2_EDG_IRQ_NOMASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_NOMASK_2_EDG_IRQ_NOMASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_NOMASK_2_EDG_IRQ_NOMASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_RAW_2 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_raw_2
  * EDG_IRQ_RAW
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_RAW : 32;
    ///< Edge IRQ raw register
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_raw_2_reg_t;

#define RCS_GPREG_EDG_IRQ_RAW_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_RAW_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_RAW_2_WR_MASK (0x00000000U)


///< Edge IRQ raw register
#define RCS_GPREG_EDG_IRQ_RAW_2_EDG_IRQ_RAW_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_RAW_2_EDG_IRQ_RAW_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_RAW_2_EDG_IRQ_RAW_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_RAW_2_EDG_IRQ_RAW_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_HI_STAT_2 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_hi_stat_2
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_hi_stat_2_reg_t;

#define RCS_GPREG_EDG_IRQ_HI_STAT_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_HI_MASK_2 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_hi_mask_2
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_hi_mask_2_reg_t;

#define RCS_GPREG_EDG_IRQ_HI_MASK_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_EDG_IRQ_MASK_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_TX_STAT_2 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_tx_stat_2
  * EDG_IRQ_STAT
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_STAT : 32;
    ///< Edge IRQ status register. writing 1 to a bit clears it
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_tx_stat_2_reg_t;

#define RCS_GPREG_EDG_IRQ_TX_STAT_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_WR_MASK (0xffffffffU)


///< Edge IRQ status register. writing 1 to a bit clears it
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_EDG_IRQ_STAT_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_EDG_IRQ_STAT_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_EDG_IRQ_STAT_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_EDG_IRQ_STAT_BF_DEF (0x00000000)


/** @brief RCS_GPREG_COM_REG_GPREG_EDG_IRQ_TX_MASK_2 register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_gpreg_com/reg/gpreg_edg_irq_tx_mask_2
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t EDG_IRQ_MASK : 32;
    ///< Edge IRQ mask register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_gpreg_edg_irq_tx_mask_2_reg_t;

#define RCS_GPREG_EDG_IRQ_TX_MASK_2_DEFAULT (0x00000000U)
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_RD_MASK (0xffffffffU)
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_WR_MASK (0xffffffffU)


///< Edge IRQ mask register
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_EDG_IRQ_MASK_BF_OFF ( 0)
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_EDG_IRQ_MASK_BF_WID (32)
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_EDG_IRQ_MASK_BF_MSK (0xFFFFFFFF)
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_EDG_IRQ_MASK_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RCS_GPREG_RCS_CFG_REG ((rcs_gpreg_rcs_cfg_reg_t*) RCS_GPREG_RCS_CFG_ADR)
#define RCS_GPREG_CORE0_CTRL_REG ((rcs_gpreg_core0_ctrl_reg_t*) RCS_GPREG_CORE0_CTRL_ADR)
#define RCS_GPREG_CORE1_CTRL_REG ((rcs_gpreg_core1_ctrl_reg_t*) RCS_GPREG_CORE1_CTRL_ADR)
#define RCS_GPREG_CORE2_CTRL_REG ((rcs_gpreg_core2_ctrl_reg_t*) RCS_GPREG_CORE2_CTRL_ADR)
#define RCS_GPREG_CORE3_CTRL_REG ((rcs_gpreg_core3_ctrl_reg_t*) RCS_GPREG_CORE3_CTRL_ADR)
#define RCS_GPREG_CORE0_ALTRSTVEC_REG ((rcs_gpreg_core0_altrstvec_reg_t*) RCS_GPREG_CORE0_ALTRSTVEC_ADR)
#define RCS_GPREG_CORE1_ALTRSTVEC_REG ((rcs_gpreg_core1_altrstvec_reg_t*) RCS_GPREG_CORE1_ALTRSTVEC_ADR)
#define RCS_GPREG_CORE2_ALTRSTVEC_REG ((rcs_gpreg_core2_altrstvec_reg_t*) RCS_GPREG_CORE2_ALTRSTVEC_ADR)
#define RCS_GPREG_CORE3_ALTRSTVEC_REG ((rcs_gpreg_core3_altrstvec_reg_t*) RCS_GPREG_CORE3_ALTRSTVEC_ADR)
#define RCS_GPREG_SOFT_RST_REG ((rcs_gpreg_soft_rst_reg_t*) RCS_GPREG_SOFT_RST_ADR)
#define RCS_GPREG_MAILBOX_MASK_REG ((rcs_gpreg_mailbox_mask_reg_t*) RCS_GPREG_MAILBOX_MASK_ADR)
#define RCS_GPREG_RCS_CLK_DISS_REG ((rcs_gpreg_rcs_clk_diss_reg_t*) RCS_GPREG_RCS_CLK_DISS_ADR)
#define RCS_GPREG_RCS_SCRATCH_REG ((rcs_gpreg_rcs_scratch_reg_t*) RCS_GPREG_RCS_SCRATCH_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB0_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB0_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB0_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB0_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB0_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB1_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB1_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB1_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB1_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB1_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB2_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB2_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB2_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB2_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB2_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB3_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB3_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB3_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB3_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB3_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB4_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB4_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB4_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB4_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB4_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB5_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB5_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB5_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB5_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB5_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB6_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB6_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB6_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB6_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB6_MBDATA3_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA0_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB7_MBDATA0_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA1_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB7_MBDATA1_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA2_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB7_MBDATA2_ADR)
#define RCS_GPREG_EXT_TO_RCS_MB7_MBDATA3_REG ((rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t*) RCS_GPREG_EXT_TO_RCS_MB7_MBDATA3_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB0_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB0_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB1_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB1_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB2_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB2_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB3_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB3_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB4_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB4_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB5_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB5_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB6_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB6_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB7_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB7_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB8_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB8_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB9_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB9_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB10_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB10_ADR)
#define RCS_GPREG_RCS_TO_RCS_MB11_REG ((rcs_gpreg_rcs_to_rcs_mb_reg_t*) RCS_GPREG_RCS_TO_RCS_MB11_ADR)
#define RCS_GPREG_EXT_IRQ_GRP_REG ((rcs_gpreg_ext_irq_grp_reg_t*) RCS_GPREG_EXT_IRQ_GRP_ADR)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_REG ((rcs_gpreg_doubleexception_out_lx70_reg_t*) RCS_GPREG_DOUBLEEXCEPTION_OUT_LX70_ADR)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_REG ((rcs_gpreg_synciram_uncorrectbl_lx70_reg_t*) RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX70_ADR)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_REG ((rcs_gpreg_synciram_correctbl_lx70_reg_t*) RCS_GPREG_SYNCIRAM_CORRECTBL_LX70_ADR)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_REG ((rcs_gpreg_syncdram_uncorrectbl_lx70_reg_t*) RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX70_ADR)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_REG ((rcs_gpreg_syncdram_correctbl_lx70_reg_t*) RCS_GPREG_SYNCDRAM_CORRECTBL_LX70_ADR)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_REG ((rcs_gpreg_asyncdram_correctbl_lx70_reg_t*) RCS_GPREG_ASYNCDRAM_CORRECTBL_LX70_ADR)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_REG ((rcs_gpreg_asyncdram_uncorrectbl_lx70_reg_t*) RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX70_ADR)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_REG ((rcs_gpreg_iram_uncorrectbl_err_lx70_reg_t*) RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX70_ADR)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_REG ((rcs_gpreg_iram_correctbl_err_lx70_reg_t*) RCS_GPREG_IRAM_CORRECTBL_ERR_LX70_ADR)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_REG ((rcs_gpreg_dram_uncorrectbl_err_lx70_reg_t*) RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX70_ADR)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_REG ((rcs_gpreg_dram_correctbl_err_lx70_reg_t*) RCS_GPREG_DRAM_CORRECTBL_ERR_LX70_ADR)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_REG ((rcs_gpreg_doubleexception_out_lx71_reg_t*) RCS_GPREG_DOUBLEEXCEPTION_OUT_LX71_ADR)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_REG ((rcs_gpreg_synciram_uncorrectbl_lx71_reg_t*) RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX71_ADR)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_REG ((rcs_gpreg_synciram_correctbl_lx71_reg_t*) RCS_GPREG_SYNCIRAM_CORRECTBL_LX71_ADR)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_REG ((rcs_gpreg_syncdram_uncorrectbl_lx71_reg_t*) RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX71_ADR)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_REG ((rcs_gpreg_syncdram_correctbl_lx71_reg_t*) RCS_GPREG_SYNCDRAM_CORRECTBL_LX71_ADR)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_REG ((rcs_gpreg_asyncdram_correctbl_lx71_reg_t*) RCS_GPREG_ASYNCDRAM_CORRECTBL_LX71_ADR)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_REG ((rcs_gpreg_asyncdram_uncorrectbl_lx71_reg_t*) RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX71_ADR)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_REG ((rcs_gpreg_iram_uncorrectbl_err_lx71_reg_t*) RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX71_ADR)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_REG ((rcs_gpreg_iram_correctbl_err_lx71_reg_t*) RCS_GPREG_IRAM_CORRECTBL_ERR_LX71_ADR)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_REG ((rcs_gpreg_dram_uncorrectbl_err_lx71_reg_t*) RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX71_ADR)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_REG ((rcs_gpreg_dram_correctbl_err_lx71_reg_t*) RCS_GPREG_DRAM_CORRECTBL_ERR_LX71_ADR)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_REG ((rcs_gpreg_doubleexception_out_lx72_reg_t*) RCS_GPREG_DOUBLEEXCEPTION_OUT_LX72_ADR)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_REG ((rcs_gpreg_synciram_uncorrectbl_lx72_reg_t*) RCS_GPREG_SYNCIRAM_UNCORRECTBL_LX72_ADR)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_REG ((rcs_gpreg_synciram_correctbl_lx72_reg_t*) RCS_GPREG_SYNCIRAM_CORRECTBL_LX72_ADR)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_REG ((rcs_gpreg_syncdram_uncorrectbl_lx72_reg_t*) RCS_GPREG_SYNCDRAM_UNCORRECTBL_LX72_ADR)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_REG ((rcs_gpreg_syncdram_correctbl_lx72_reg_t*) RCS_GPREG_SYNCDRAM_CORRECTBL_LX72_ADR)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_REG ((rcs_gpreg_asyncdram_correctbl_lx72_reg_t*) RCS_GPREG_ASYNCDRAM_CORRECTBL_LX72_ADR)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_REG ((rcs_gpreg_asyncdram_uncorrectbl_lx72_reg_t*) RCS_GPREG_ASYNCDRAM_UNCORRECTBL_LX72_ADR)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_REG ((rcs_gpreg_iram_uncorrectbl_err_lx72_reg_t*) RCS_GPREG_IRAM_UNCORRECTBL_ERR_LX72_ADR)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_REG ((rcs_gpreg_iram_correctbl_err_lx72_reg_t*) RCS_GPREG_IRAM_CORRECTBL_ERR_LX72_ADR)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_REG ((rcs_gpreg_dram_uncorrectbl_err_lx72_reg_t*) RCS_GPREG_DRAM_UNCORRECTBL_ERR_LX72_ADR)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_REG ((rcs_gpreg_dram_correctbl_err_lx72_reg_t*) RCS_GPREG_DRAM_CORRECTBL_ERR_LX72_ADR)
#define RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_REG ((rcs_gpreg_doubleexception_out_kp1_reg_t*) RCS_GPREG_DOUBLEEXCEPTION_OUT_KP1_ADR)
#define RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_REG ((rcs_gpreg_synciram_uncorrectbl_kp1_reg_t*) RCS_GPREG_SYNCIRAM_UNCORRECTBL_KP1_ADR)
#define RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_REG ((rcs_gpreg_synciram_correctbl_kp1_reg_t*) RCS_GPREG_SYNCIRAM_CORRECTBL_KP1_ADR)
#define RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_REG ((rcs_gpreg_syncdram_uncorrectbl_kp1_reg_t*) RCS_GPREG_SYNCDRAM_UNCORRECTBL_KP1_ADR)
#define RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_REG ((rcs_gpreg_syncdram_correctbl_kp1_reg_t*) RCS_GPREG_SYNCDRAM_CORRECTBL_KP1_ADR)
#define RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_REG ((rcs_gpreg_asyncdram_correctbl_kp1_reg_t*) RCS_GPREG_ASYNCDRAM_CORRECTBL_KP1_ADR)
#define RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_REG ((rcs_gpreg_asyncdram_uncorrectbl_kp1_reg_t*) RCS_GPREG_ASYNCDRAM_UNCORRECTBL_KP1_ADR)
#define RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_REG ((rcs_gpreg_iram_uncorrectbl_err_kp1_reg_t*) RCS_GPREG_IRAM_UNCORRECTBL_ERR_KP1_ADR)
#define RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_REG ((rcs_gpreg_iram_correctbl_err_kp1_reg_t*) RCS_GPREG_IRAM_CORRECTBL_ERR_KP1_ADR)
#define RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_REG ((rcs_gpreg_dram_uncorrectbl_err_kp1_reg_t*) RCS_GPREG_DRAM_UNCORRECTBL_ERR_KP1_ADR)
#define RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_REG ((rcs_gpreg_dram_correctbl_err_kp1_reg_t*) RCS_GPREG_DRAM_CORRECTBL_ERR_KP1_ADR)
#define RCS_GPREG_RPC_FAULTSERVERITYLVL_REG ((rcs_gpreg_rpc_faultserveritylvl_reg_t*) RCS_GPREG_RPC_FAULTSERVERITYLVL_ADR)
#define RCS_GPREG_MAILBOX_CLR_REG ((rcs_gpreg_mailbox_clr_reg_t*) RCS_GPREG_MAILBOX_CLR_ADR)
#define RCS_GPREG_EDG_IRQ_STAT_0_REG ((rcs_gpreg_edg_irq_stat_0_reg_t*) RCS_GPREG_EDG_IRQ_STAT_0_ADR)
#define RCS_GPREG_EDG_IRQ_MASK_0_REG ((rcs_gpreg_edg_irq_mask_0_reg_t*) RCS_GPREG_EDG_IRQ_MASK_0_ADR)
#define RCS_GPREG_EDG_IRQ_INV_0_REG ((rcs_gpreg_edg_irq_inv_0_reg_t*) RCS_GPREG_EDG_IRQ_INV_0_ADR)
#define RCS_GPREG_EDG_IRQ_NOMASK_0_REG ((rcs_gpreg_edg_irq_nomask_0_reg_t*) RCS_GPREG_EDG_IRQ_NOMASK_0_ADR)
#define RCS_GPREG_EDG_IRQ_RAW_0_REG ((rcs_gpreg_edg_irq_raw_0_reg_t*) RCS_GPREG_EDG_IRQ_RAW_0_ADR)
#define RCS_GPREG_EDG_IRQ_HI_STAT_0_REG ((rcs_gpreg_edg_irq_hi_stat_0_reg_t*) RCS_GPREG_EDG_IRQ_HI_STAT_0_ADR)
#define RCS_GPREG_EDG_IRQ_HI_MASK_0_REG ((rcs_gpreg_edg_irq_hi_mask_0_reg_t*) RCS_GPREG_EDG_IRQ_HI_MASK_0_ADR)
#define RCS_GPREG_EDG_IRQ_TX_STAT_0_REG ((rcs_gpreg_edg_irq_tx_stat_0_reg_t*) RCS_GPREG_EDG_IRQ_TX_STAT_0_ADR)
#define RCS_GPREG_EDG_IRQ_TX_MASK_0_REG ((rcs_gpreg_edg_irq_tx_mask_0_reg_t*) RCS_GPREG_EDG_IRQ_TX_MASK_0_ADR)
#define RCS_GPREG_OSAZ_REG ((rcs_gpreg_osaz_reg_t*) RCS_GPREG_OSAZ_ADR)
#define RCS_GPREG_EDG_IRQ_STAT_1_REG ((rcs_gpreg_edg_irq_stat_1_reg_t*) RCS_GPREG_EDG_IRQ_STAT_1_ADR)
#define RCS_GPREG_EDG_IRQ_MASK_1_REG ((rcs_gpreg_edg_irq_mask_1_reg_t*) RCS_GPREG_EDG_IRQ_MASK_1_ADR)
#define RCS_GPREG_EDG_IRQ_INV_1_REG ((rcs_gpreg_edg_irq_inv_1_reg_t*) RCS_GPREG_EDG_IRQ_INV_1_ADR)
#define RCS_GPREG_EDG_IRQ_NOMASK_1_REG ((rcs_gpreg_edg_irq_nomask_1_reg_t*) RCS_GPREG_EDG_IRQ_NOMASK_1_ADR)
#define RCS_GPREG_EDG_IRQ_RAW_1_REG ((rcs_gpreg_edg_irq_raw_1_reg_t*) RCS_GPREG_EDG_IRQ_RAW_1_ADR)
#define RCS_GPREG_EDG_IRQ_HI_STAT_1_REG ((rcs_gpreg_edg_irq_hi_stat_1_reg_t*) RCS_GPREG_EDG_IRQ_HI_STAT_1_ADR)
#define RCS_GPREG_EDG_IRQ_HI_MASK_1_REG ((rcs_gpreg_edg_irq_hi_mask_1_reg_t*) RCS_GPREG_EDG_IRQ_HI_MASK_1_ADR)
#define RCS_GPREG_EDG_IRQ_TX_STAT_1_REG ((rcs_gpreg_edg_irq_tx_stat_1_reg_t*) RCS_GPREG_EDG_IRQ_TX_STAT_1_ADR)
#define RCS_GPREG_EDG_IRQ_TX_MASK_1_REG ((rcs_gpreg_edg_irq_tx_mask_1_reg_t*) RCS_GPREG_EDG_IRQ_TX_MASK_1_ADR)
#define RCS_GPREG_EDG_IRQ_STAT_2_REG ((rcs_gpreg_edg_irq_stat_2_reg_t*) RCS_GPREG_EDG_IRQ_STAT_2_ADR)
#define RCS_GPREG_EDG_IRQ_MASK_2_REG ((rcs_gpreg_edg_irq_mask_2_reg_t*) RCS_GPREG_EDG_IRQ_MASK_2_ADR)
#define RCS_GPREG_EDG_IRQ_INV_2_REG ((rcs_gpreg_edg_irq_inv_2_reg_t*) RCS_GPREG_EDG_IRQ_INV_2_ADR)
#define RCS_GPREG_EDG_IRQ_NOMASK_2_REG ((rcs_gpreg_edg_irq_nomask_2_reg_t*) RCS_GPREG_EDG_IRQ_NOMASK_2_ADR)
#define RCS_GPREG_EDG_IRQ_RAW_2_REG ((rcs_gpreg_edg_irq_raw_2_reg_t*) RCS_GPREG_EDG_IRQ_RAW_2_ADR)
#define RCS_GPREG_EDG_IRQ_HI_STAT_2_REG ((rcs_gpreg_edg_irq_hi_stat_2_reg_t*) RCS_GPREG_EDG_IRQ_HI_STAT_2_ADR)
#define RCS_GPREG_EDG_IRQ_HI_MASK_2_REG ((rcs_gpreg_edg_irq_hi_mask_2_reg_t*) RCS_GPREG_EDG_IRQ_HI_MASK_2_ADR)
#define RCS_GPREG_EDG_IRQ_TX_STAT_2_REG ((rcs_gpreg_edg_irq_tx_stat_2_reg_t*) RCS_GPREG_EDG_IRQ_TX_STAT_2_ADR)
#define RCS_GPREG_EDG_IRQ_TX_MASK_2_REG ((rcs_gpreg_edg_irq_tx_mask_2_reg_t*) RCS_GPREG_EDG_IRQ_TX_MASK_2_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x0 */
    rcs_gpreg_rcs_cfg_reg_t RCS_CFG;      /*< Address offset = 0x4 */
    rcs_gpreg_core0_ctrl_reg_t CORE0_CTRL;   /*< Address offset = 0x8 */
    rcs_gpreg_core1_ctrl_reg_t CORE1_CTRL;   /*< Address offset = 0xc */
    rcs_gpreg_core2_ctrl_reg_t CORE2_CTRL;   /*< Address offset = 0x10 */
    rcs_gpreg_core3_ctrl_reg_t CORE3_CTRL;   /*< Address offset = 0x14 */
    rcs_gpreg_core0_altrstvec_reg_t CORE0_ALTRSTVEC; /*< Address offset = 0x18 */
    rcs_gpreg_core1_altrstvec_reg_t CORE1_ALTRSTVEC; /*< Address offset = 0x1c */
    rcs_gpreg_core2_altrstvec_reg_t CORE2_ALTRSTVEC; /*< Address offset = 0x20 */
    rcs_gpreg_core3_altrstvec_reg_t CORE3_ALTRSTVEC; /*< Address offset = 0x24 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x28 */
    rcs_gpreg_soft_rst_reg_t SOFT_RST;      /*< Address offset = 0x2c */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0x30 */
    rcs_gpreg_mailbox_mask_reg_t MAILBOX_MASK;    /*< Address offset = 0x34 */
    rcs_gpreg_rcs_clk_diss_reg_t RCS_CLK_DISS; /*< Address offset = 0x38 */
    rcs_gpreg_rcs_scratch_reg_t RCS_SCRATCH;     /*< Address offset = 0x3c */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB0_MBDATA[4]; /*< Address offset = 0x40 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB1_MBDATA[4]; /*< Address offset = 0x50 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB2_MBDATA[4]; /*< Address offset = 0x60 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB3_MBDATA[4]; /*< Address offset = 0x70 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB4_MBDATA[4]; /*< Address offset = 0x80 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB5_MBDATA[4]; /*< Address offset = 0x90 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB6_MBDATA[4]; /*< Address offset = 0xa0 */
    rcs_gpreg_ext_to_rcs_mb_mbdata_reg_t EXT_TO_RCS_MB7_MBDATA[4]; /*< Address offset = 0xb0 */
    rcs_gpreg_rcs_to_rcs_mb_reg_t RCS_TO_RCS_MB[12]; /*< Address offset = 0xc0 */
    rcs_gpreg_ext_irq_grp_reg_t EXT_IRQ_GRP;     /*< Address offset = 0xf0 */
    rcs_gpreg_doubleexception_out_lx70_reg_t DOUBLEEXCEPTION_OUT_LX70; /*< Address offset = 0xf4 */
    rcs_gpreg_synciram_uncorrectbl_lx70_reg_t SYNCIRAM_UNCORRECTBL_LX70; /*< Address offset = 0xf8 */
    rcs_gpreg_synciram_correctbl_lx70_reg_t SYNCIRAM_CORRECTBL_LX70; /*< Address offset = 0xfc */
    rcs_gpreg_syncdram_uncorrectbl_lx70_reg_t SYNCDRAM_UNCORRECTBL_LX70; /*< Address offset = 0x100 */
    rcs_gpreg_syncdram_correctbl_lx70_reg_t SYNCDRAM_CORRECTBL_LX70; /*< Address offset = 0x104 */
    rcs_gpreg_asyncdram_correctbl_lx70_reg_t ASYNCDRAM_CORRECTBL_LX70; /*< Address offset = 0x108 */
    rcs_gpreg_asyncdram_uncorrectbl_lx70_reg_t ASYNCDRAM_UNCORRECTBL_LX70; /*< Address offset = 0x10c */
    rcs_gpreg_iram_uncorrectbl_err_lx70_reg_t IRAM_UNCORRECTBL_ERR_LX70; /*< Address offset = 0x110 */
    rcs_gpreg_iram_correctbl_err_lx70_reg_t IRAM_CORRECTBL_ERR_LX70; /*< Address offset = 0x114 */
    rcs_gpreg_dram_uncorrectbl_err_lx70_reg_t DRAM_UNCORRECTBL_ERR_LX70; /*< Address offset = 0x118 */
    rcs_gpreg_dram_correctbl_err_lx70_reg_t DRAM_CORRECTBL_ERR_LX70; /*< Address offset = 0x11c */
    rcs_gpreg_doubleexception_out_lx71_reg_t DOUBLEEXCEPTION_OUT_LX71; /*< Address offset = 0x120 */
    rcs_gpreg_synciram_uncorrectbl_lx71_reg_t SYNCIRAM_UNCORRECTBL_LX71; /*< Address offset = 0x124 */
    rcs_gpreg_synciram_correctbl_lx71_reg_t SYNCIRAM_CORRECTBL_LX71; /*< Address offset = 0x128 */
    rcs_gpreg_syncdram_uncorrectbl_lx71_reg_t SYNCDRAM_UNCORRECTBL_LX71; /*< Address offset = 0x12c */
    rcs_gpreg_syncdram_correctbl_lx71_reg_t SYNCDRAM_CORRECTBL_LX71; /*< Address offset = 0x130 */
    rcs_gpreg_asyncdram_correctbl_lx71_reg_t ASYNCDRAM_CORRECTBL_LX71; /*< Address offset = 0x134 */
    rcs_gpreg_asyncdram_uncorrectbl_lx71_reg_t ASYNCDRAM_UNCORRECTBL_LX71; /*< Address offset = 0x138 */
    rcs_gpreg_iram_uncorrectbl_err_lx71_reg_t IRAM_UNCORRECTBL_ERR_LX71; /*< Address offset = 0x13c */
    rcs_gpreg_iram_correctbl_err_lx71_reg_t IRAM_CORRECTBL_ERR_LX71; /*< Address offset = 0x140 */
    rcs_gpreg_dram_uncorrectbl_err_lx71_reg_t DRAM_UNCORRECTBL_ERR_LX71; /*< Address offset = 0x144 */
    rcs_gpreg_dram_correctbl_err_lx71_reg_t DRAM_CORRECTBL_ERR_LX71; /*< Address offset = 0x148 */
    rcs_gpreg_doubleexception_out_lx72_reg_t DOUBLEEXCEPTION_OUT_LX72; /*< Address offset = 0x14c */
    rcs_gpreg_synciram_uncorrectbl_lx72_reg_t SYNCIRAM_UNCORRECTBL_LX72; /*< Address offset = 0x150 */
    rcs_gpreg_synciram_correctbl_lx72_reg_t SYNCIRAM_CORRECTBL_LX72; /*< Address offset = 0x154 */
    rcs_gpreg_syncdram_uncorrectbl_lx72_reg_t SYNCDRAM_UNCORRECTBL_LX72; /*< Address offset = 0x158 */
    rcs_gpreg_syncdram_correctbl_lx72_reg_t SYNCDRAM_CORRECTBL_LX72; /*< Address offset = 0x15c */
    rcs_gpreg_asyncdram_correctbl_lx72_reg_t ASYNCDRAM_CORRECTBL_LX72; /*< Address offset = 0x160 */
    rcs_gpreg_asyncdram_uncorrectbl_lx72_reg_t ASYNCDRAM_UNCORRECTBL_LX72; /*< Address offset = 0x164 */
    rcs_gpreg_iram_uncorrectbl_err_lx72_reg_t IRAM_UNCORRECTBL_ERR_LX72; /*< Address offset = 0x168 */
    rcs_gpreg_iram_correctbl_err_lx72_reg_t IRAM_CORRECTBL_ERR_LX72; /*< Address offset = 0x16c */
    rcs_gpreg_dram_uncorrectbl_err_lx72_reg_t DRAM_UNCORRECTBL_ERR_LX72; /*< Address offset = 0x170 */
    rcs_gpreg_dram_correctbl_err_lx72_reg_t DRAM_CORRECTBL_ERR_LX72; /*< Address offset = 0x174 */
    rcs_gpreg_doubleexception_out_kp1_reg_t DOUBLEEXCEPTION_OUT_KP1; /*< Address offset = 0x178 */
    rcs_gpreg_synciram_uncorrectbl_kp1_reg_t SYNCIRAM_UNCORRECTBL_KP1; /*< Address offset = 0x17c */
    rcs_gpreg_synciram_correctbl_kp1_reg_t SYNCIRAM_CORRECTBL_KP1; /*< Address offset = 0x180 */
    rcs_gpreg_syncdram_uncorrectbl_kp1_reg_t SYNCDRAM_UNCORRECTBL_KP1; /*< Address offset = 0x184 */
    rcs_gpreg_syncdram_correctbl_kp1_reg_t SYNCDRAM_CORRECTBL_KP1; /*< Address offset = 0x188 */
    rcs_gpreg_asyncdram_correctbl_kp1_reg_t ASYNCDRAM_CORRECTBL_KP1; /*< Address offset = 0x18c */
    rcs_gpreg_asyncdram_uncorrectbl_kp1_reg_t ASYNCDRAM_UNCORRECTBL_KP1; /*< Address offset = 0x190 */
    rcs_gpreg_iram_uncorrectbl_err_kp1_reg_t IRAM_UNCORRECTBL_ERR_KP1; /*< Address offset = 0x194 */
    rcs_gpreg_iram_correctbl_err_kp1_reg_t IRAM_CORRECTBL_ERR_KP1; /*< Address offset = 0x198 */
    rcs_gpreg_dram_uncorrectbl_err_kp1_reg_t DRAM_UNCORRECTBL_ERR_KP1; /*< Address offset = 0x19c */
    rcs_gpreg_dram_correctbl_err_kp1_reg_t DRAM_CORRECTBL_ERR_KP1; /*< Address offset = 0x1a0 */
    rcs_gpreg_rpc_faultserveritylvl_reg_t RPC_FAULTSERVERITYLVL; /*< Address offset = 0x1a4 */
    rcs_gpreg_mailbox_clr_reg_t MAILBOX_CLR;     /*< Address offset = 0x1a8 */
    const uint8_t        reservedArea3 [4];   /*< Address offset = 0x1ac */
    rcs_gpreg_edg_irq_stat_0_reg_t GPREG_EDG_IRQ_STAT_0; /*< Address offset = 0x1b0 */
    rcs_gpreg_edg_irq_mask_0_reg_t GPREG_EDG_IRQ_MASK_0; /*< Address offset = 0x1b4 */
    rcs_gpreg_edg_irq_inv_0_reg_t GPREG_EDG_IRQ_INV_0; /*< Address offset = 0x1b8 */
    rcs_gpreg_edg_irq_nomask_0_reg_t GPREG_EDG_IRQ_NOMASK_0; /*< Address offset = 0x1bc */
    rcs_gpreg_edg_irq_raw_0_reg_t GPREG_EDG_IRQ_RAW_0; /*< Address offset = 0x1c0 */
    rcs_gpreg_edg_irq_hi_stat_0_reg_t GPREG_EDG_IRQ_HI_STAT_0; /*< Address offset = 0x1c4 */
    rcs_gpreg_edg_irq_hi_mask_0_reg_t GPREG_EDG_IRQ_HI_MASK_0; /*< Address offset = 0x1c8 */
    rcs_gpreg_edg_irq_tx_stat_0_reg_t GPREG_EDG_IRQ_TX_STAT_0; /*< Address offset = 0x1cc */
    rcs_gpreg_edg_irq_tx_mask_0_reg_t GPREG_EDG_IRQ_TX_MASK_0; /*< Address offset = 0x1d0 */
    rcs_gpreg_osaz_reg_t GPREG_OSAZ;      /*< Address offset = 0x1d4 */
    rcs_gpreg_edg_irq_stat_1_reg_t GPREG_EDG_IRQ_STAT_1; /*< Address offset = 0x1d8 */
    rcs_gpreg_edg_irq_mask_1_reg_t GPREG_EDG_IRQ_MASK_1; /*< Address offset = 0x1dc */
    rcs_gpreg_edg_irq_inv_1_reg_t GPREG_EDG_IRQ_INV_1; /*< Address offset = 0x1e0 */
    rcs_gpreg_edg_irq_nomask_1_reg_t GPREG_EDG_IRQ_NOMASK_1; /*< Address offset = 0x1e4 */
    rcs_gpreg_edg_irq_raw_1_reg_t GPREG_EDG_IRQ_RAW_1; /*< Address offset = 0x1e8 */
    rcs_gpreg_edg_irq_hi_stat_1_reg_t GPREG_EDG_IRQ_HI_STAT_1; /*< Address offset = 0x1ec */
    rcs_gpreg_edg_irq_hi_mask_1_reg_t GPREG_EDG_IRQ_HI_MASK_1; /*< Address offset = 0x1f0 */
    rcs_gpreg_edg_irq_tx_stat_1_reg_t GPREG_EDG_IRQ_TX_STAT_1; /*< Address offset = 0x1f4 */
    rcs_gpreg_edg_irq_tx_mask_1_reg_t GPREG_EDG_IRQ_TX_MASK_1; /*< Address offset = 0x1f8 */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0x1fc */
    rcs_gpreg_edg_irq_stat_2_reg_t GPREG_EDG_IRQ_STAT_2; /*< Address offset = 0x200 */
    rcs_gpreg_edg_irq_mask_2_reg_t GPREG_EDG_IRQ_MASK_2; /*< Address offset = 0x204 */
    rcs_gpreg_edg_irq_inv_2_reg_t GPREG_EDG_IRQ_INV_2; /*< Address offset = 0x208 */
    rcs_gpreg_edg_irq_nomask_2_reg_t GPREG_EDG_IRQ_NOMASK_2; /*< Address offset = 0x20c */
    rcs_gpreg_edg_irq_raw_2_reg_t GPREG_EDG_IRQ_RAW_2; /*< Address offset = 0x210 */
    rcs_gpreg_edg_irq_hi_stat_2_reg_t GPREG_EDG_IRQ_HI_STAT_2; /*< Address offset = 0x214 */
    rcs_gpreg_edg_irq_hi_mask_2_reg_t GPREG_EDG_IRQ_HI_MASK_2; /*< Address offset = 0x218 */
    rcs_gpreg_edg_irq_tx_stat_2_reg_t GPREG_EDG_IRQ_TX_STAT_2; /*< Address offset = 0x21c */
    rcs_gpreg_edg_irq_tx_mask_2_reg_t GPREG_EDG_IRQ_TX_MASK_2; /*< Address offset = 0x220 */
} rcs_gpreg_t;     // size: 0x0184

// AddressSpace struct pointer
//
#define RCS_GPREG        ((rcs_gpreg_t*) RCS_GPREG_BASE)

// ******************************************* /Address Space

#endif      // _RCS_GPREG_H_

