#ifndef _PHM_INT_H_
#define _PHM_INT_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_PHM0_INT_BASE     ( 0x00244300 )
#define RCS_PHM1_INT_BASE     ( 0x00264300 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PHM_INT_EDGE_IRQ_STAT_7_0_OFFSET ( 0x00000000U )
#define PHM_INT_EDGE_IRQ_STAT_15_8_OFFSET ( 0x00000004U )
#define PHM_INT_EDGE_IRQ_MASK_7_0_OFFSET ( 0x00000008U )
#define PHM_INT_EDGE_IRQ_MASK_15_8_OFFSET ( 0x0000000cU )
#define PHM_INT_EDGE_IRQ_INV_7_0_OFFSET ( 0x00000010U )
#define PHM_INT_EDGE_IRQ_INV_15_8_OFFSET ( 0x00000014U )
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_OFFSET ( 0x00000018U )
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_OFFSET ( 0x0000001cU )
#define PHM_INT_EDGE_IRQ_RAW_7_0_OFFSET ( 0x00000020U )
#define PHM_INT_EDGE_IRQ_RAW_15_8_OFFSET ( 0x00000024U )
#define PHM_INT_PHM_RD_FIFO_STAT_OFFSET ( 0x00000028U )
#define PHM_INT_PHM_RD_FIFO_INT_EN_OFFSET ( 0x0000002cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PHM_INT_EDGE_IRQ_STAT_7_0_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_STAT_7_0_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_STAT_15_8_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_STAT_15_8_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_MASK_7_0_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_MASK_7_0_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_MASK_15_8_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_MASK_15_8_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_INV_7_0_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_INV_7_0_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_INV_15_8_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_INV_15_8_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_NOMASK_7_0_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_NOMASK_15_8_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_RAW_7_0_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_RAW_7_0_OFFSET ) ))
#define PHM_INT_EDGE_IRQ_RAW_15_8_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_EDGE_IRQ_RAW_15_8_OFFSET ) ))
#define PHM_INT_PHM_RD_FIFO_STAT_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_PHM_RD_FIFO_STAT_OFFSET ) ))
#define PHM_INT_PHM_RD_FIFO_INT_EN_ADR(_BASE) (( ( _BASE ) + ( PHM_INT_PHM_RD_FIFO_INT_EN_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PHM_INT_COM_REG_EDGE_IRQ_STAT_7_0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_stat_7_0
  * Edge IRQ Status
  */

typedef union {
  struct {
    uint32_t ACCEL_00_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_01_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t ACCEL_02_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t ACCEL_03_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="12" ResetValue="0x0"
    uint32_t ACCEL_04_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="16" ResetValue="0x0"
    uint32_t ACCEL_05_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="20" ResetValue="0x0"
    uint32_t ACCEL_06_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="24" ResetValue="0x0"
    uint32_t ACCEL_07_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} phm_int_edge_irq_stat_7_0_reg_t;

#define PHM_INT_EDGE_IRQ_STAT_7_0_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_STAT_7_0_RD_MASK (0xffffffffU)
#define PHM_INT_EDGE_IRQ_STAT_7_0_WR_MASK (0xffffffffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_00_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_00_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_00_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_00_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_01_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_01_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_01_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_01_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_02_THRESH_BF_OFF ( 8)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_02_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_02_THRESH_BF_MSK (0x00000F00)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_02_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_03_THRESH_BF_OFF (12)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_03_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_03_THRESH_BF_MSK (0x0000F000)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_03_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_04_THRESH_BF_OFF (16)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_04_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_04_THRESH_BF_MSK (0x000F0000)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_04_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_05_THRESH_BF_OFF (20)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_05_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_05_THRESH_BF_MSK (0x00F00000)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_05_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_06_THRESH_BF_OFF (24)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_06_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_06_THRESH_BF_MSK (0x0F000000)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_06_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_07_THRESH_BF_OFF (28)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_07_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_07_THRESH_BF_MSK (0xF0000000)
#define PHM_INT_EDGE_IRQ_STAT_7_0_ACCEL_07_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_STAT_15_8 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_stat_15_8
  * Eedge IRQ Status HI
  */

typedef union {
  struct {
    uint32_t ACCEL_08_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_09_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_edge_irq_stat_15_8_reg_t;

#define PHM_INT_EDGE_IRQ_STAT_15_8_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_STAT_15_8_RD_MASK (0x000000ffU)
#define PHM_INT_EDGE_IRQ_STAT_15_8_WR_MASK (0x000000ffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_08_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_08_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_08_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_08_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_09_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_09_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_09_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_STAT_15_8_ACCEL_09_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_MASK_7_0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_mask_7_0
  * EDG_IRQ_MASK
  */

typedef union {
  struct {
    uint32_t ACCEL_00_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_01_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ACCEL_02_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t ACCEL_03_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t ACCEL_04_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t ACCEL_05_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t ACCEL_06_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t ACCEL_07_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} phm_int_edge_irq_mask_7_0_reg_t;

#define PHM_INT_EDGE_IRQ_MASK_7_0_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_MASK_7_0_RD_MASK (0xffffffffU)
#define PHM_INT_EDGE_IRQ_MASK_7_0_WR_MASK (0xffffffffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_00_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_00_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_00_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_00_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_01_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_01_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_01_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_01_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_02_THRESH_BF_OFF ( 8)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_02_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_02_THRESH_BF_MSK (0x00000F00)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_02_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_03_THRESH_BF_OFF (12)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_03_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_03_THRESH_BF_MSK (0x0000F000)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_03_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_04_THRESH_BF_OFF (16)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_04_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_04_THRESH_BF_MSK (0x000F0000)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_04_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_05_THRESH_BF_OFF (20)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_05_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_05_THRESH_BF_MSK (0x00F00000)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_05_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_06_THRESH_BF_OFF (24)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_06_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_06_THRESH_BF_MSK (0x0F000000)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_06_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_07_THRESH_BF_OFF (28)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_07_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_07_THRESH_BF_MSK (0xF0000000)
#define PHM_INT_EDGE_IRQ_MASK_7_0_ACCEL_07_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_MASK_15_8 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_mask_15_8
  * Edge IRQ MASK HI
  */

typedef union {
  struct {
    uint32_t ACCEL_08_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_09_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_edge_irq_mask_15_8_reg_t;

#define PHM_INT_EDGE_IRQ_MASK_15_8_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_MASK_15_8_RD_MASK (0x000000ffU)
#define PHM_INT_EDGE_IRQ_MASK_15_8_WR_MASK (0x000000ffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_08_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_08_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_08_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_08_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_09_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_09_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_09_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_MASK_15_8_ACCEL_09_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_INV_7_0 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_inv_7_0
  * Edge IRQ INV polarity
  */

typedef union {
  struct {
    uint32_t ACCEL_00_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_01_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ACCEL_02_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t ACCEL_03_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t ACCEL_04_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t ACCEL_05_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t ACCEL_06_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t ACCEL_07_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} phm_int_edge_irq_inv_7_0_reg_t;

#define PHM_INT_EDGE_IRQ_INV_7_0_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_INV_7_0_RD_MASK (0xffffffffU)
#define PHM_INT_EDGE_IRQ_INV_7_0_WR_MASK (0xffffffffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_00_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_00_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_00_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_00_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_01_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_01_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_01_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_01_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_02_THRESH_BF_OFF ( 8)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_02_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_02_THRESH_BF_MSK (0x00000F00)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_02_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_03_THRESH_BF_OFF (12)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_03_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_03_THRESH_BF_MSK (0x0000F000)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_03_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_04_THRESH_BF_OFF (16)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_04_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_04_THRESH_BF_MSK (0x000F0000)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_04_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_05_THRESH_BF_OFF (20)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_05_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_05_THRESH_BF_MSK (0x00F00000)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_05_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_06_THRESH_BF_OFF (24)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_06_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_06_THRESH_BF_MSK (0x0F000000)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_06_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_07_THRESH_BF_OFF (28)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_07_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_07_THRESH_BF_MSK (0xF0000000)
#define PHM_INT_EDGE_IRQ_INV_7_0_ACCEL_07_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_INV_15_8 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_inv_15_8
  * EDG_IRQ_INV_HI
  */

typedef union {
  struct {
    uint32_t ACCEL_08_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_09_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_edge_irq_inv_15_8_reg_t;

#define PHM_INT_EDGE_IRQ_INV_15_8_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_INV_15_8_RD_MASK (0x000000ffU)
#define PHM_INT_EDGE_IRQ_INV_15_8_WR_MASK (0x000000ffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_08_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_08_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_08_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_08_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_09_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_09_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_09_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_INV_15_8_ACCEL_09_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_NOMASK_7_0 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_nomask_7_0
  * EDG_IRQ_NOMASK
  */

typedef union {
  struct {
    uint32_t ACCEL_00_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_01_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t ACCEL_02_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t ACCEL_03_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="12" ResetValue="0x0"
    uint32_t ACCEL_04_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="16" ResetValue="0x0"
    uint32_t ACCEL_05_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="20" ResetValue="0x0"
    uint32_t ACCEL_06_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="24" ResetValue="0x0"
    uint32_t ACCEL_07_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} phm_int_edge_irq_nomask_7_0_reg_t;

#define PHM_INT_EDGE_IRQ_NOMASK_7_0_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_RD_MASK (0xffffffffU)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_WR_MASK (0xffffffffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_00_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_00_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_00_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_00_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_01_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_01_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_01_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_01_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_02_THRESH_BF_OFF ( 8)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_02_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_02_THRESH_BF_MSK (0x00000F00)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_02_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_03_THRESH_BF_OFF (12)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_03_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_03_THRESH_BF_MSK (0x0000F000)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_03_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_04_THRESH_BF_OFF (16)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_04_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_04_THRESH_BF_MSK (0x000F0000)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_04_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_05_THRESH_BF_OFF (20)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_05_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_05_THRESH_BF_MSK (0x00F00000)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_05_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_06_THRESH_BF_OFF (24)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_06_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_06_THRESH_BF_MSK (0x0F000000)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_06_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_07_THRESH_BF_OFF (28)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_07_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_07_THRESH_BF_MSK (0xF0000000)
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_ACCEL_07_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_NOMASK_15_8 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_nomask_15_8
  * EDG_IRQ_NOMASK_HI
  */

typedef union {
  struct {
    uint32_t ACCEL_08_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_09_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_edge_irq_nomask_15_8_reg_t;

#define PHM_INT_EDGE_IRQ_NOMASK_15_8_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_RD_MASK (0x000000ffU)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_WR_MASK (0x000000ffU)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_08_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_08_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_08_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_08_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_09_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_09_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_09_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_ACCEL_09_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_RAW_7_0 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_raw_7_0
  * EDG_IRQ_RAW
  */

typedef union {
  struct {
    uint32_t ACCEL_00_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_01_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ACCEL_02_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ACCEL_03_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ACCEL_04_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ACCEL_05_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ACCEL_06_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ACCEL_07_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} phm_int_edge_irq_raw_7_0_reg_t;

#define PHM_INT_EDGE_IRQ_RAW_7_0_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_RAW_7_0_RD_MASK (0xffffffffU)
#define PHM_INT_EDGE_IRQ_RAW_7_0_WR_MASK (0x00000000U)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_00_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_00_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_00_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_00_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_01_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_01_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_01_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_01_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_02_THRESH_BF_OFF ( 8)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_02_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_02_THRESH_BF_MSK (0x00000F00)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_02_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_03_THRESH_BF_OFF (12)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_03_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_03_THRESH_BF_MSK (0x0000F000)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_03_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_04_THRESH_BF_OFF (16)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_04_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_04_THRESH_BF_MSK (0x000F0000)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_04_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_05_THRESH_BF_OFF (20)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_05_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_05_THRESH_BF_MSK (0x00F00000)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_05_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_06_THRESH_BF_OFF (24)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_06_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_06_THRESH_BF_MSK (0x0F000000)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_06_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_07_THRESH_BF_OFF (28)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_07_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_07_THRESH_BF_MSK (0xF0000000)
#define PHM_INT_EDGE_IRQ_RAW_7_0_ACCEL_07_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_EDGE_IRQ_RAW_15_8 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/edge_irq_raw_15_8
  * EDG_IRQ_RAW_HI
  */

typedef union {
  struct {
    uint32_t ACCEL_08_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCEL_09_THRESH : 4;
    ///< Indicators for counters 3-0 reaching their respective thresholds
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_edge_irq_raw_15_8_reg_t;

#define PHM_INT_EDGE_IRQ_RAW_15_8_DEFAULT (0x00000000U)
#define PHM_INT_EDGE_IRQ_RAW_15_8_RD_MASK (0x000000ffU)
#define PHM_INT_EDGE_IRQ_RAW_15_8_WR_MASK (0x00000000U)


///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_08_THRESH_BF_OFF ( 0)
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_08_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_08_THRESH_BF_MSK (0x0000000F)
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_08_THRESH_BF_DEF (0x00000000)

///< Indicators for counters 3-0 reaching their respective thresholds
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_09_THRESH_BF_OFF ( 4)
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_09_THRESH_BF_WID ( 4)
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_09_THRESH_BF_MSK (0x000000F0)
#define PHM_INT_EDGE_IRQ_RAW_15_8_ACCEL_09_THRESH_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_PHM_RD_FIFO_STAT register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/phm_rd_fifo_stat
  * PHM Read FIFO Status
  */

typedef union {
  struct {
    uint32_t FIFO_NOT_EMPTY : 10;
    ///< Indicators the corresponding fifo is not empty
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WM_REACHED : 10;
    ///< Indicators for water mark being reached for the corresponding fifo
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t FIFO_FULL : 10;
    ///< Indicators for FIFO is full for the corresponding fifo
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_phm_rd_fifo_stat_reg_t;

#define PHM_INT_PHM_RD_FIFO_STAT_DEFAULT (0x00000000U)
#define PHM_INT_PHM_RD_FIFO_STAT_RD_MASK (0x3fffffffU)
#define PHM_INT_PHM_RD_FIFO_STAT_WR_MASK (0x00000000U)


///< Indicators the corresponding fifo is not empty
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_NOT_EMPTY_BF_OFF ( 0)
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_NOT_EMPTY_BF_WID (10)
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_NOT_EMPTY_BF_MSK (0x000003FF)
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_NOT_EMPTY_BF_DEF (0x00000000)

///< Indicators for water mark being reached for the corresponding fifo
#define PHM_INT_PHM_RD_FIFO_STAT_WM_REACHED_BF_OFF (10)
#define PHM_INT_PHM_RD_FIFO_STAT_WM_REACHED_BF_WID (10)
#define PHM_INT_PHM_RD_FIFO_STAT_WM_REACHED_BF_MSK (0x000FFC00)
#define PHM_INT_PHM_RD_FIFO_STAT_WM_REACHED_BF_DEF (0x00000000)

///< Indicators for FIFO is full for the corresponding fifo
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_FULL_BF_OFF (20)
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_FULL_BF_WID (10)
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_FULL_BF_MSK (0x3FF00000)
#define PHM_INT_PHM_RD_FIFO_STAT_FIFO_FULL_BF_DEF (0x00000000)


/** @brief PHM_INT_COM_REG_PHM_RD_FIFO_INT_EN register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: phm_int_com/reg/phm_rd_fifo_int_en
  * PHM Read FIFO Interrupt Enable
  */

typedef union {
  struct {
    uint32_t FIFO_NOT_EMPTY_EN : 10;
    ///< Enable interrupt when the corresponding fifo is not empty
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WM_REACHED_EN : 10;
    ///< Enable interrupt when water mark being reached for the corresponding
    ///< fifo
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t FIFO_FULL_EN : 10;
    ///< enable interrupt when FIFO is full for the corresponding fifo
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} phm_int_phm_rd_fifo_int_en_reg_t;

#define PHM_INT_PHM_RD_FIFO_INT_EN_DEFAULT (0x00000000U)
#define PHM_INT_PHM_RD_FIFO_INT_EN_RD_MASK (0x3fffffffU)
#define PHM_INT_PHM_RD_FIFO_INT_EN_WR_MASK (0x3fffffffU)


///< Enable interrupt when the corresponding fifo is not empty
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_NOT_EMPTY_EN_BF_OFF ( 0)
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_NOT_EMPTY_EN_BF_WID (10)
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_NOT_EMPTY_EN_BF_MSK (0x000003FF)
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_NOT_EMPTY_EN_BF_DEF (0x00000000)

///< Enable interrupt when water mark being reached for the corresponding
///< fifo
#define PHM_INT_PHM_RD_FIFO_INT_EN_WM_REACHED_EN_BF_OFF (10)
#define PHM_INT_PHM_RD_FIFO_INT_EN_WM_REACHED_EN_BF_WID (10)
#define PHM_INT_PHM_RD_FIFO_INT_EN_WM_REACHED_EN_BF_MSK (0x000FFC00)
#define PHM_INT_PHM_RD_FIFO_INT_EN_WM_REACHED_EN_BF_DEF (0x00000000)

///< enable interrupt when FIFO is full for the corresponding fifo
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_FULL_EN_BF_OFF (20)
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_FULL_EN_BF_WID (10)
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_FULL_EN_BF_MSK (0x3FF00000)
#define PHM_INT_PHM_RD_FIFO_INT_EN_FIFO_FULL_EN_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PHM_INT_EDGE_IRQ_STAT_7_0_REG(_BASE) ((phm_int_edge_irq_stat_7_0_reg_t*) PHM_INT_EDGE_IRQ_STAT_7_0_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_STAT_15_8_REG(_BASE) ((phm_int_edge_irq_stat_15_8_reg_t*) PHM_INT_EDGE_IRQ_STAT_15_8_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_MASK_7_0_REG(_BASE) ((phm_int_edge_irq_mask_7_0_reg_t*) PHM_INT_EDGE_IRQ_MASK_7_0_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_MASK_15_8_REG(_BASE) ((phm_int_edge_irq_mask_15_8_reg_t*) PHM_INT_EDGE_IRQ_MASK_15_8_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_INV_7_0_REG(_BASE) ((phm_int_edge_irq_inv_7_0_reg_t*) PHM_INT_EDGE_IRQ_INV_7_0_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_INV_15_8_REG(_BASE) ((phm_int_edge_irq_inv_15_8_reg_t*) PHM_INT_EDGE_IRQ_INV_15_8_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_NOMASK_7_0_REG(_BASE) ((phm_int_edge_irq_nomask_7_0_reg_t*) PHM_INT_EDGE_IRQ_NOMASK_7_0_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_NOMASK_15_8_REG(_BASE) ((phm_int_edge_irq_nomask_15_8_reg_t*) PHM_INT_EDGE_IRQ_NOMASK_15_8_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_RAW_7_0_REG(_BASE) ((phm_int_edge_irq_raw_7_0_reg_t*) PHM_INT_EDGE_IRQ_RAW_7_0_ADR(_BASE))
#define PHM_INT_EDGE_IRQ_RAW_15_8_REG(_BASE) ((phm_int_edge_irq_raw_15_8_reg_t*) PHM_INT_EDGE_IRQ_RAW_15_8_ADR(_BASE))
#define PHM_INT_PHM_RD_FIFO_STAT_REG(_BASE) ((phm_int_phm_rd_fifo_stat_reg_t*) PHM_INT_PHM_RD_FIFO_STAT_ADR(_BASE))
#define PHM_INT_PHM_RD_FIFO_INT_EN_REG(_BASE) ((phm_int_phm_rd_fifo_int_en_reg_t*) PHM_INT_PHM_RD_FIFO_INT_EN_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    phm_int_edge_irq_stat_7_0_reg_t EDGE_IRQ_STAT_7_0; /*< Address offset = 0x0 */
    phm_int_edge_irq_stat_15_8_reg_t EDGE_IRQ_STAT_15_8; /*< Address offset = 0x4 */
    phm_int_edge_irq_mask_7_0_reg_t EDGE_IRQ_MASK_7_0; /*< Address offset = 0x8 */
    phm_int_edge_irq_mask_15_8_reg_t EDGE_IRQ_MASK_15_8; /*< Address offset = 0xc */
    phm_int_edge_irq_inv_7_0_reg_t EDGE_IRQ_INV_7_0; /*< Address offset = 0x10 */
    phm_int_edge_irq_inv_15_8_reg_t EDGE_IRQ_INV_15_8; /*< Address offset = 0x14 */
    phm_int_edge_irq_nomask_7_0_reg_t EDGE_IRQ_NOMASK_7_0; /*< Address offset = 0x18 */
    phm_int_edge_irq_nomask_15_8_reg_t EDGE_IRQ_NOMASK_15_8; /*< Address offset = 0x1c */
    phm_int_edge_irq_raw_7_0_reg_t EDGE_IRQ_RAW_7_0; /*< Address offset = 0x20 */
    phm_int_edge_irq_raw_15_8_reg_t EDGE_IRQ_RAW_15_8; /*< Address offset = 0x24 */
    phm_int_phm_rd_fifo_stat_reg_t PHM_RD_FIFO_STAT; /*< Address offset = 0x28 */
    phm_int_phm_rd_fifo_int_en_reg_t PHM_RD_FIFO_INT_EN; /*< Address offset = 0x2c */
} phm_int_t;     // size: 0x0030

// AddressSpace struct pointer
//
#define RCS_PHM0_INT     ((phm_int_t*) RCS_PHM0_INT_BASE)
#define RCS_PHM1_INT     ((phm_int_t*) RCS_PHM1_INT_BASE)

// ******************************************* /Address Space

#endif      // _PHM_INT_H_

