#ifndef _JESD_PHY_CSR_H_
#define _JESD_PHY_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_CSR_BASE  ( 0x06710000 )
#define DLNK_JESD1_PHY_CSR_BASE  ( 0x06f10000 )
#define DLNK_JESD2_PHY_CSR_BASE  ( 0x07710000 )
#define DLNK_JESD3_PHY_CSR_BASE  ( 0x07f10000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define JESD_PHY_CSR_PHY_LANE0_TX_PLL_FORCE_PWR_UP_OFFSET ( 0x00000000U )
#define JESD_PHY_CSR_PHY_LANE0_TX_PSTATE_OFFSET ( 0x00000004U )
#define JESD_PHY_CSR_PHY_LANE0_TX_FREQ_RATE_OFFSET ( 0x00000008U )
#define JESD_PHY_CSR_PHY_LANE0_TX_RATE_DIV_OFFSET ( 0x0000000cU )
#define JESD_PHY_CSR_PHY_LANE0_TX_MOD_OFFSET ( 0x00000010U )
#define JESD_PHY_CSR_PHY_LANE0_TX_DATA_CLK_DIV_RATE_OFFSET ( 0x00000014U )
#define JESD_PHY_CSR_PHY_LANE0_TX_ELEC_IDLE_OFFSET ( 0x00000018U )
#define JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CM_OFFSET ( 0x00000020U )
#define JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CP_OFFSET ( 0x00000024U )
#define JESD_PHY_CSR_PHY_LANE0_RX_PSTATE_OFFSET ( 0x00000040U )
#define JESD_PHY_CSR_PHY_LANE0_RX_FREQ_RATE_OFFSET ( 0x00000044U )
#define JESD_PHY_CSR_PHY_LANE0_RX_MODE_SEL_OFFSET ( 0x00000048U )
#define JESD_PHY_CSR_PHY_LANE0_RX_MOD_OFFSET ( 0x0000004cU )
#define JESD_PHY_CSR_PHY_LANE0_RX_OVR_SMPL_OFFSET ( 0x00000050U )
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_PRECAL_SEL_OFFSET ( 0x00000054U )
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_STATIC_EN_OFFSET ( 0x00000058U )
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADPAT_START_OFFSET ( 0x0000005cU )
#define JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_START_OFFSET ( 0x00000060U )
#define JESD_PHY_CSR_PHY_LANE0_TX_PLL_RDY_OFFSET ( 0x00000080U )
#define JESD_PHY_CSR_PHY_LANE0_TX_CFG_STS_OFFSET ( 0x00000084U )
#define JESD_PHY_CSR_PHY_LANE0_RX_CFG_STS_OFFSET ( 0x000000c0U )
#define JESD_PHY_CSR_PHY_LANE0_RX_CDR_LK2_DATA_OFFSET ( 0x000000c4U )
#define JESD_PHY_CSR_PHY_LANE0_RX_SIG_DETECT_OFFSET ( 0x000000c8U )
#define JESD_PHY_CSR_PHY_LANE0_RX_CDR_FREQ_LK_STS_OFFSET ( 0x000000ccU )
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADAPT_STS_OFFSET ( 0x000000d0U )
#define JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_STS_OFFSET ( 0x000000d4U )
#define JESD_PHY_CSR_PHY_LANE0_RX_TERM_HIZ_EN_OFFSET ( 0x000000d8U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_INPROGRESS_OFFSET ( 0x00000100U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_TRAINING_OFFSET ( 0x00000104U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXDETECTRX_REQ_OFFSET ( 0x00000108U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_RXDET_EN_OFFSET ( 0x0000010cU )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ( 0x00000110U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_SRIS_EN_OFFSET ( 0x00000114U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_LFPS_EN_OFFSET ( 0x00000118U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXBEACON_EN_OFFSET ( 0x0000011cU )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ( 0x00000120U )
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_STS_OFFSET ( 0x00000124U )
#define JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_IN_OFFSET ( 0x00000130U )
#define JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_IN_OFFSET ( 0x00000134U )
#define JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_OUT_OFFSET ( 0x00000138U )
#define JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_OUT_OFFSET ( 0x0000013cU )
#define JESD_PHY_CSR_PHY_LANE1_TX_PLL_FORCE_PWR_UP_OFFSET ( 0x00001000U )
#define JESD_PHY_CSR_PHY_LANE1_TX_PSTATE_OFFSET ( 0x00001004U )
#define JESD_PHY_CSR_PHY_LANE1_TX_FREQ_RATE_OFFSET ( 0x00001008U )
#define JESD_PHY_CSR_PHY_LANE1_TX_RATE_DIV_OFFSET ( 0x0000100cU )
#define JESD_PHY_CSR_PHY_LANE1_TX_MOD_OFFSET ( 0x00001010U )
#define JESD_PHY_CSR_PHY_LANE1_TX_DATA_CLK_DIV_RATE_OFFSET ( 0x00001014U )
#define JESD_PHY_CSR_PHY_LANE1_TX_ELEC_IDLE_OFFSET ( 0x00001018U )
#define JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CM_OFFSET ( 0x00001020U )
#define JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CP_OFFSET ( 0x00001024U )
#define JESD_PHY_CSR_PHY_LANE1_RX_PSTATE_OFFSET ( 0x00001040U )
#define JESD_PHY_CSR_PHY_LANE1_RX_FREQ_RATE_OFFSET ( 0x00001044U )
#define JESD_PHY_CSR_PHY_LANE1_RX_MODE_SEL_OFFSET ( 0x00001048U )
#define JESD_PHY_CSR_PHY_LANE1_RX_MOD_OFFSET ( 0x0000104cU )
#define JESD_PHY_CSR_PHY_LANE1_RX_OVR_SMPL_OFFSET ( 0x00001050U )
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_PRECAL_SEL_OFFSET ( 0x00001054U )
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_STATIC_EN_OFFSET ( 0x00001058U )
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADPAT_START_OFFSET ( 0x0000105cU )
#define JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_START_OFFSET ( 0x00001060U )
#define JESD_PHY_CSR_PHY_LANE1_TX_PLL_RDY_OFFSET ( 0x00001080U )
#define JESD_PHY_CSR_PHY_LANE1_TX_CFG_STS_OFFSET ( 0x00001084U )
#define JESD_PHY_CSR_PHY_LANE1_RX_CFG_STS_OFFSET ( 0x000010c0U )
#define JESD_PHY_CSR_PHY_LANE1_RX_CDR_LK2_DATA_OFFSET ( 0x000010c4U )
#define JESD_PHY_CSR_PHY_LANE1_RX_SIG_DETECT_OFFSET ( 0x000010c8U )
#define JESD_PHY_CSR_PHY_LANE1_RX_CDR_FREQ_LK_STS_OFFSET ( 0x000010ccU )
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADAPT_STS_OFFSET ( 0x000010d0U )
#define JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_STS_OFFSET ( 0x000010d4U )
#define JESD_PHY_CSR_PHY_LANE1_RX_TERM_HIZ_EN_OFFSET ( 0x000010d8U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_INPROGRESS_OFFSET ( 0x00001100U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_TRAINING_OFFSET ( 0x00001104U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXDETECTRX_REQ_OFFSET ( 0x00001108U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_RXDET_EN_OFFSET ( 0x0000110cU )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ( 0x00001110U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_SRIS_EN_OFFSET ( 0x00001114U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_LFPS_EN_OFFSET ( 0x00001118U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXBEACON_EN_OFFSET ( 0x0000111cU )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ( 0x00001120U )
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_STS_OFFSET ( 0x00001124U )
#define JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_IN_OFFSET ( 0x00001130U )
#define JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_IN_OFFSET ( 0x00001134U )
#define JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_OUT_OFFSET ( 0x00001138U )
#define JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_OUT_OFFSET ( 0x0000113cU )
#define JESD_PHY_CSR_PHY_LANE2_TX_PLL_FORCE_PWR_UP_OFFSET ( 0x00002000U )
#define JESD_PHY_CSR_PHY_LANE2_TX_PSTATE_OFFSET ( 0x00002004U )
#define JESD_PHY_CSR_PHY_LANE2_TX_FREQ_RATE_OFFSET ( 0x00002008U )
#define JESD_PHY_CSR_PHY_LANE2_TX_RATE_DIV_OFFSET ( 0x0000200cU )
#define JESD_PHY_CSR_PHY_LANE2_TX_MOD_OFFSET ( 0x00002010U )
#define JESD_PHY_CSR_PHY_LANE2_TX_DATA_CLK_DIV_RATE_OFFSET ( 0x00002014U )
#define JESD_PHY_CSR_PHY_LANE2_TX_ELEC_IDLE_OFFSET ( 0x00002018U )
#define JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CM_OFFSET ( 0x00002020U )
#define JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CP_OFFSET ( 0x00002024U )
#define JESD_PHY_CSR_PHY_LANE2_RX_PSTATE_OFFSET ( 0x00002040U )
#define JESD_PHY_CSR_PHY_LANE2_RX_FREQ_RATE_OFFSET ( 0x00002044U )
#define JESD_PHY_CSR_PHY_LANE2_RX_MODE_SEL_OFFSET ( 0x00002048U )
#define JESD_PHY_CSR_PHY_LANE2_RX_MOD_OFFSET ( 0x0000204cU )
#define JESD_PHY_CSR_PHY_LANE2_RX_OVR_SMPL_OFFSET ( 0x00002050U )
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_PRECAL_SEL_OFFSET ( 0x00002054U )
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_STATIC_EN_OFFSET ( 0x00002058U )
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADPAT_START_OFFSET ( 0x0000205cU )
#define JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_START_OFFSET ( 0x00002060U )
#define JESD_PHY_CSR_PHY_LANE2_TX_PLL_RDY_OFFSET ( 0x00002080U )
#define JESD_PHY_CSR_PHY_LANE2_TX_CFG_STS_OFFSET ( 0x00002084U )
#define JESD_PHY_CSR_PHY_LANE2_RX_CFG_STS_OFFSET ( 0x000020c0U )
#define JESD_PHY_CSR_PHY_LANE2_RX_CDR_LK2_DATA_OFFSET ( 0x000020c4U )
#define JESD_PHY_CSR_PHY_LANE2_RX_SIG_DETECT_OFFSET ( 0x000020c8U )
#define JESD_PHY_CSR_PHY_LANE2_RX_CDR_FREQ_LK_STS_OFFSET ( 0x000020ccU )
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADAPT_STS_OFFSET ( 0x000020d0U )
#define JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_STS_OFFSET ( 0x000020d4U )
#define JESD_PHY_CSR_PHY_LANE2_RX_TERM_HIZ_EN_OFFSET ( 0x000020d8U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_INPROGRESS_OFFSET ( 0x00002100U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_TRAINING_OFFSET ( 0x00002104U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXDETECTRX_REQ_OFFSET ( 0x00002108U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_RXDET_EN_OFFSET ( 0x0000210cU )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ( 0x00002110U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_SRIS_EN_OFFSET ( 0x00002114U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_LFPS_EN_OFFSET ( 0x00002118U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXBEACON_EN_OFFSET ( 0x0000211cU )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ( 0x00002120U )
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_STS_OFFSET ( 0x00002124U )
#define JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_IN_OFFSET ( 0x00002130U )
#define JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_IN_OFFSET ( 0x00002134U )
#define JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_OUT_OFFSET ( 0x00002138U )
#define JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_OUT_OFFSET ( 0x0000213cU )
#define JESD_PHY_CSR_PHY_LANE3_TX_PLL_FORCE_PWR_UP_OFFSET ( 0x00003000U )
#define JESD_PHY_CSR_PHY_LANE3_TX_PSTATE_OFFSET ( 0x00003004U )
#define JESD_PHY_CSR_PHY_LANE3_TX_FREQ_RATE_OFFSET ( 0x00003008U )
#define JESD_PHY_CSR_PHY_LANE3_TX_RATE_DIV_OFFSET ( 0x0000300cU )
#define JESD_PHY_CSR_PHY_LANE3_TX_MOD_OFFSET ( 0x00003010U )
#define JESD_PHY_CSR_PHY_LANE3_TX_DATA_CLK_DIV_RATE_OFFSET ( 0x00003014U )
#define JESD_PHY_CSR_PHY_LANE3_TX_ELEC_IDLE_OFFSET ( 0x00003018U )
#define JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CM_OFFSET ( 0x00003020U )
#define JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CP_OFFSET ( 0x00003024U )
#define JESD_PHY_CSR_PHY_LANE3_RX_PSTATE_OFFSET ( 0x00003040U )
#define JESD_PHY_CSR_PHY_LANE3_RX_FREQ_RATE_OFFSET ( 0x00003044U )
#define JESD_PHY_CSR_PHY_LANE3_RX_MODE_SEL_OFFSET ( 0x00003048U )
#define JESD_PHY_CSR_PHY_LANE3_RX_MOD_OFFSET ( 0x0000304cU )
#define JESD_PHY_CSR_PHY_LANE3_RX_OVR_SMPL_OFFSET ( 0x00003050U )
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_PRECAL_SEL_OFFSET ( 0x00003054U )
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_STATIC_EN_OFFSET ( 0x00003058U )
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADPAT_START_OFFSET ( 0x0000305cU )
#define JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_START_OFFSET ( 0x00003060U )
#define JESD_PHY_CSR_PHY_LANE3_TX_PLL_RDY_OFFSET ( 0x00003080U )
#define JESD_PHY_CSR_PHY_LANE3_TX_CFG_STS_OFFSET ( 0x00003084U )
#define JESD_PHY_CSR_PHY_LANE3_RX_CFG_STS_OFFSET ( 0x000030c0U )
#define JESD_PHY_CSR_PHY_LANE3_RX_CDR_LK2_DATA_OFFSET ( 0x000030c4U )
#define JESD_PHY_CSR_PHY_LANE3_RX_SIG_DETECT_OFFSET ( 0x000030c8U )
#define JESD_PHY_CSR_PHY_LANE3_RX_CDR_FREQ_LK_STS_OFFSET ( 0x000030ccU )
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADAPT_STS_OFFSET ( 0x000030d0U )
#define JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_STS_OFFSET ( 0x000030d4U )
#define JESD_PHY_CSR_PHY_LANE3_RX_TERM_HIZ_EN_OFFSET ( 0x000030d8U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_INPROGRESS_OFFSET ( 0x00003100U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_TRAINING_OFFSET ( 0x00003104U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXDETECTRX_REQ_OFFSET ( 0x00003108U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_RXDET_EN_OFFSET ( 0x0000310cU )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ( 0x00003110U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_SRIS_EN_OFFSET ( 0x00003114U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_LFPS_EN_OFFSET ( 0x00003118U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXBEACON_EN_OFFSET ( 0x0000311cU )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ( 0x00003120U )
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_STS_OFFSET ( 0x00003124U )
#define JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_IN_OFFSET ( 0x00003130U )
#define JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_IN_OFFSET ( 0x00003134U )
#define JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_OUT_OFFSET ( 0x00003138U )
#define JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_OUT_OFFSET ( 0x0000313cU )
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_OFFSET ( 0x00004000U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_OFFSET ( 0x00004004U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_OFFSET ( 0x00004008U )
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_OFFSET ( 0x00004010U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_OFFSET ( 0x00004014U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_OFFSET ( 0x00004018U )
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_OFFSET ( 0x00004020U )
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_OFFSET ( 0x00004024U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_OFFSET ( 0x00004028U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_OFFSET ( 0x0000402cU )
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_OFFSET ( 0x00004030U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_OFFSET ( 0x00004034U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_OFFSET ( 0x00004040U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_OFFSET ( 0x00004044U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_OFFSET ( 0x00004048U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_OFFSET ( 0x00004050U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_OFFSET ( 0x00004054U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_OFFSET ( 0x00004058U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_OFFSET ( 0x0000405cU )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_OFFSET ( 0x00004060U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_OFFSET ( 0x00004064U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_OFFSET ( 0x00004068U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_OFFSET ( 0x0000406cU )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_OFFSET ( 0x00004070U )
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_OFFSET ( 0x00004074U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define JESD_PHY_CSR_PHY_LANE0_TX_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_RATE_DIV_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_ELEC_IDLE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CM_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CM_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_MODE_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_OVR_SMPL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_EQ_PRECAL_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_EQ_STATIC_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADPAT_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_PLL_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_TX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_TX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_CDR_LK2_DATA_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_SIG_DETECT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADAPT_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_RX_TERM_HIZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_RX_TERM_HIZ_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_INPROGRESS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_INPROGRESS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_TRAINING_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_TRAINING_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXDETECTRX_REQ_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_RXDET_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_SRIS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_SRIS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_LFPS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_LFPS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXBEACON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXBEACON_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PIPEPCS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_RATE_DIV_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_ELEC_IDLE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CM_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CM_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_MODE_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_OVR_SMPL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_EQ_PRECAL_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_EQ_STATIC_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADPAT_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_PLL_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_TX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_TX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_CDR_LK2_DATA_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_SIG_DETECT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADAPT_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_RX_TERM_HIZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_RX_TERM_HIZ_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_INPROGRESS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_INPROGRESS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_TRAINING_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_TRAINING_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXDETECTRX_REQ_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_RXDET_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_SRIS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_SRIS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_LFPS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_LFPS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXBEACON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXBEACON_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PIPEPCS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_RATE_DIV_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_ELEC_IDLE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CM_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CM_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_MODE_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_OVR_SMPL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_EQ_PRECAL_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_EQ_STATIC_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADPAT_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_PLL_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_TX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_TX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_CDR_LK2_DATA_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_SIG_DETECT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADAPT_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_RX_TERM_HIZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_RX_TERM_HIZ_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_INPROGRESS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_INPROGRESS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_TRAINING_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_TRAINING_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXDETECTRX_REQ_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_RXDET_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_SRIS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_SRIS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_LFPS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_LFPS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXBEACON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXBEACON_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PIPEPCS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_RATE_DIV_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_ELEC_IDLE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CM_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CM_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_PSTATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_FREQ_RATE_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_MODE_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_MOD_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_MOD_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_OVR_SMPL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_EQ_PRECAL_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_EQ_STATIC_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADPAT_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_START_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_PLL_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_TX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_TX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_CFG_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_CDR_LK2_DATA_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_SIG_DETECT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADAPT_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_RX_TERM_HIZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_RX_TERM_HIZ_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_INPROGRESS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_INPROGRESS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_TRAINING_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_TRAINING_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXDETECTRX_REQ_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_RXDET_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_TXCMNMODE_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_SRIS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_SRIS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_LFPS_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_LFPS_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXBEACON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXBEACON_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_RXEIOSDETECTSTAT_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PIPEPCS_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_OFFSET ) ))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_PLL_FORCE_PWR_UP[4] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_PLL_FORCE_PWR_UP
  * TX PLL powerup force enable.
  */

typedef union {
  struct {
    uint32_t LN_FORCE_RATE_REQ : 2;
    ///< Indicates which of the four frequency from programmed configuration
    ///< bank to select. Only used when ln_force_pwr_up is set.
    ///< 0 - Freq A configuration bank.
    ///< 1 - Freq B configuration bank.
    ///< 2 - Freq C configuration bank.
    ///< 3 - Freq D configuration bank.
    ///< 4 - Freq E configuration bank.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LN_FORCE_PWR_UP : 1;
    ///< TX PLL powerup force enable. Under normal operation TXPLL block is
    ///< powered up/down as needed by internal circuits.
    ///< If asserted, TXPLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force TXPLL powerup.
    ///< 1: Force TXPLL block powerup
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_RD_MASK (0x00000013U)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_WR_MASK (0x00000013U)


///< Indicates which of the four frequency from programmed configuration
///< bank to select. Only used when ln_force_pwr_up is set.
///< 0 - Freq A configuration bank.
///< 1 - Freq B configuration bank.
///< 2 - Freq C configuration bank.
///< 3 - Freq D configuration bank.
///< 4 - Freq E configuration bank.
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_MSK (0x00000003)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_DEF (0x00000000)

///< TX PLL powerup force enable. Under normal operation TXPLL block is
///< powered up/down as needed by internal circuits.
///< If asserted, TXPLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force TXPLL powerup.
///< 1: Force TXPLL block powerup
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_OFF ( 4)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_MSK (0x00000010)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_FORCE_PWR_UP_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_PSTATE[4] register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_PSTATE
  * TX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< TX lane power down state control.
    ///< 3'd0: TXPD                                               3'd1: Reserved
    ///< 3'd2: TXP3                                               3'd3: TXP2
    ///< 3'd4: TXP1                                               3'd5: TXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_pstate_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_WR_MASK (0x00000007U)


///< TX lane power down state control.
///< 3'd0: TXPD                                               3'd1: Reserved
///< 3'd2: TXP3                                               3'd3: TXP2
///< 3'd4: TXP1                                               3'd5: TXP0
///< Other: Reserved
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_LN_PSTATE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_PSTATE_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_FREQ_RATE[4] register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_FREQ_RATE
  * TX frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< TX frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_freq_rate_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_WR_MASK (0x00000007U)


///< TX frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_FREQ_RATE_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_RATE_DIV[4] register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_RATE_DIV
  * TX datapath divider setting
  */

typedef union {
  struct {
    uint32_t LN_RATE_DIV : 4;
    ///< TX datapath divider setting.
    ///< 3'b000: Divide by 1
    ///< 3'b001: Divide by 2
    ///< 3'b010: Divide by 4
    ///< 3'b011: Divide by 8
    ///< 3'b100: Divide by 16
    ///< Others: Illegal
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_rate_div_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_RD_MASK (0x0000000fU)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_WR_MASK (0x0000000fU)


///< TX datapath divider setting.
///< 3'b000: Divide by 1
///< 3'b001: Divide by 2
///< 3'b010: Divide by 4
///< 3'b011: Divide by 8
///< 3'b100: Divide by 16
///< Others: Illegal
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_LN_RATE_DIV_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_LN_RATE_DIV_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_LN_RATE_DIV_BF_MSK (0x0000000F)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_LN_RATE_DIV_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_RATE_DIV_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_MODULATION[4] register description at address offset 0x10
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_MODULATION
  * TX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< TX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for TX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding for PAM4
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding for PAM4
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_mod_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_MOD_DEFAULT (0x00000006U)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_RD_MASK (0x000000ffU)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_WR_MASK (0x000000ffU)


///< TX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_WIDTH_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_WIDTH_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_WIDTH_BF_MSK (0x0000000F)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for TX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_MOD_BF_OFF ( 4)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_MOD_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_MOD_BF_MSK (0x00000030)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding for PAM4
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding for PAM4
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_MOD_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_DATA_CLK_DIV_RATE[4] register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_DATA_CLK_DIV_RATE
  * Transmit input word clock speed indicator
  */

typedef union {
  struct {
    uint32_t LN_CLK_DIV_RATE : 3;
    ///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
    ///< is faster than the expected clock frequency.             Example:
    ///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
    ///< frequency is 250 MHz.            This value must be set so that the
    ///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
    ///< 3'd0: Transmit every cycle
    ///< 3'd1: Transmit every 2 cycles
    ///< 3'd2: Transmit every 4 cycles
    ///< 3'd3: Transmit every 8 cycles
    ///< 3'd4: Transmit every 16 cycles            Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_WR_MASK (0x00000007U)


///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
///< is faster than the expected clock frequency.             Example:
///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
///< frequency is 250 MHz.            This value must be set so that the
///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
///< 3'd0: Transmit every cycle
///< 3'd1: Transmit every 2 cycles
///< 3'd2: Transmit every 4 cycles
///< 3'd3: Transmit every 8 cycles
///< 3'd4: Transmit every 16 cycles            Other: Reserved
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_WID ( 3)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_MSK (0x00000007)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_DATA_CLK_DIV_RATE_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_ELEC_IDLE[4] register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_ELEC_IDLE
  * Tx Electrical idle
  */

typedef union {
  struct {
    uint32_t LN_ELEC_IDLE : 1;
    ///< Tx Electrical idle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_elec_idle_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_WR_MASK (0x00000001U)


///< Tx Electrical idle
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_LN_ELEC_IDLE_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_LN_ELEC_IDLE_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_LN_ELEC_IDLE_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_LN_ELEC_IDLE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_ELEC_IDLE_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_FFE_COEFF_CM[4] register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_FFE_COEFF_CM
  * Tx FFE COEFF CM
  */

typedef union {
  struct {
    uint32_t CM1 : 7;
    ///< Tx FFE COefficient CM1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CM2 : 7;
    ///< Tx FFE COefficient CM2
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CM3 : 5;
    ///< Tx FFE COefficient CM3
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_RD_MASK (0x0007ffffU)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_WR_MASK (0x0007ffffU)


///< Tx FFE COefficient CM1
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM1_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM1_BF_WID ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM1_BF_MSK (0x0000007F)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM1_BF_DEF (0x00000000)

///< Tx FFE COefficient CM2
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM2_BF_OFF ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM2_BF_WID ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM2_BF_MSK (0x00003F80)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM2_BF_DEF (0x00000000)

///< Tx FFE COefficient CM3
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM3_BF_OFF (14)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM3_BF_WID ( 5)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM3_BF_MSK (0x0007C000)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_CM3_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CM_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_FFE_COEFF_CP[4] register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_FFE_COEFF_CP
  * Tx FFE COEFF CP
  */

typedef union {
  struct {
    uint32_t C0 : 7;
    ///< Tx FFE COefficient C0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CP1 : 7;
    ///< Tx FFE COefficient CP1
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_RD_MASK (0x00003fffU)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_WR_MASK (0x00003fffU)


///< Tx FFE COefficient C0
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_C0_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_C0_BF_WID ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_C0_BF_MSK (0x0000007F)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_C0_BF_DEF (0x00000000)

///< Tx FFE COefficient CP1
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_CP1_BF_OFF ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_CP1_BF_WID ( 7)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_CP1_BF_MSK (0x00003F80)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_CP1_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_FFE_COEFF_CP_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_PSTATE[4] register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_PSTATE
  * RX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< RX lane power down state control.
    ///< 3'd0: RXPD                                               3'd1: Reserved
    ///< 3'd2: RXP3                                               3'd3: RXP2
    ///< 3'd4: RXP1                                               3'd5: RXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_pstate_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_WR_MASK (0x00000007U)


///< RX lane power down state control.
///< 3'd0: RXPD                                               3'd1: Reserved
///< 3'd2: RXP3                                               3'd3: RXP2
///< 3'd4: RXP1                                               3'd5: RXP0
///< Other: Reserved
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_LN_PSTATE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_PSTATE_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_FREQ_RATE[4] register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_FREQ_RATE
  * RX DCO frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< RX DCO frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_freq_rate_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_WR_MASK (0x00000007U)


///< RX DCO frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_FREQ_RATE_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_MODE_SEL[4] register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_MODE_SEL
  * RX mode select
  */

typedef union {
  struct {
    uint32_t LN_MODE_SEL : 4;
    ///< TBD.  This will be a LUT index to for rx rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_mode_sel_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_RD_MASK (0x0000000fU)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_WR_MASK (0x0000000fU)


///< TBD.  This will be a LUT index to for rx rate
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_LN_MODE_SEL_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_LN_MODE_SEL_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_LN_MODE_SEL_BF_MSK (0x0000000F)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_LN_MODE_SEL_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_MODE_SEL_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_MODULATION[4] register description at address offset 0x4c
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_MODULATION
  * RX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< RX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for RX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding on RX Datapath for PAM4. Not implemented
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_mod_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_MOD_DEFAULT (0x00000006U)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_RD_MASK (0x000000ffU)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_WR_MASK (0x000000ffU)


///< RX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_WIDTH_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_WIDTH_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_WIDTH_BF_MSK (0x0000000F)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for RX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_MOD_BF_OFF ( 4)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_MOD_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_MOD_BF_MSK (0x00000030)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding on RX Datapath for PAM4. Not implemented
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_MOD_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_OVR_SMPL[4] register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_OVR_SMPL
  * Rx Oversample Control
  */

typedef union {
  struct {
    uint32_t LN_OVR_SMPL_EN : 1;
    ///< Enables the Differential Manchester Encoding (DME) mode of the receiver
    ///< that can be used for Ethernet link training hardware outside the UXPHY.
    ///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
    ///< and it will blindly sample the incoming data at the configured data
    ///< rate.            Feature can also be used for low data rate application
    ///< where oversampling is desired.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA : 1;
    ///< The UXPHY will automatically switch between LTR and LTD.
    ///< This override allows hardware outside the UXPHY to control whether
    ///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
    ///< must be asserted                                                1'b0:
    ///< CDR lock to reference
    ///< 1'b1: CDR lock to data
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA_EN : 1;
    ///< Controls whether the receiver is in LTR or LTD via the internal PHY
    ///< hardware or from the PHY pin interface
    ///< 1'b0: CDR locks to data/reference via internal logic
    ///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_WR_MASK (0x00000007U)


///< Enables the Differential Manchester Encoding (DME) mode of the receiver
///< that can be used for Ethernet link training hardware outside the UXPHY.
///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
///< and it will blindly sample the incoming data at the configured data
///< rate.            Feature can also be used for low data rate application
///< where oversampling is desired.
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_OVR_SMPL_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_OVR_SMPL_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_OVR_SMPL_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_OVR_SMPL_EN_BF_DEF (0x00000000)

///< The UXPHY will automatically switch between LTR and LTD.
///< This override allows hardware outside the UXPHY to control whether
///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
///< must be asserted                                                1'b0:
///< CDR lock to reference
///< 1'b1: CDR lock to data
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_BF_DEF (0x00000000)

///< Controls whether the receiver is in LTR or LTD via the internal PHY
///< hardware or from the PHY pin interface
///< 1'b0: CDR locks to data/reference via internal logic
///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_OFF ( 2)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_MSK (0x00000004)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_OVR_SMPL_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_EQ_PRECAL_SEL[4] register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_EQ_PRECAL_SEL
  * Initial RX eq setting control
  */

typedef union {
  struct {
    uint32_t LN_PRECAL_CODE_SEL : 3;
    ///< Initial RX eq setting control. Selects between 8 possible equalization
    ///< settings to be used prior to RX equalization being run.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_WR_MASK (0x00000007U)


///< Initial RX eq setting control. Selects between 8 possible equalization
///< settings to be used prior to RX equalization being run.
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_WID ( 3)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_MSK (0x00000007)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_PRECAL_SEL_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_EQ_STATIC_EN[4] register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_EQ_STATIC_EN
  * RX equalization static setting control
  */

typedef union {
  struct {
    uint32_t LN_EQ_STATIC_EN : 1;
    ///< RX equalization static setting control. Should be asserted in PCIe
    ///< Gen1/2, deasserted otherwise
    ///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
    ///< or via RX equalization run
    ///< 1 - Use static equalization settings set in memory
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_WR_MASK (0x00000001U)


///< RX equalization static setting control. Should be asserted in PCIe
///< Gen1/2, deasserted otherwise
///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
///< or via RX equalization run
///< 1 - Use static equalization settings set in memory
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_STATIC_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_EQ_ADPAT_START[4] register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_EQ_ADPAT_START
  * RX equalization start indicator
  */

typedef union {
  struct {
    uint32_t LN_APADT_START : 1;
    ///< RX equalization start indicator. When asserted, PHY will perform RX
    ///< equalization.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_WR_MASK (0x00000001U)


///< RX equalization start indicator. When asserted, PHY will perform RX
///< equalization.
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_LN_APADT_START_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_LN_APADT_START_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_LN_APADT_START_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_LN_APADT_START_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADPAT_START_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_EYE_MEAS_START[4] register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_EYE_MEAS_START
  * RX Eye diagram start indicator.
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_START : 1;
    ///< RX Eye diagram start indicator. When asserted, PHY will perform an
    ///< eye diagram.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_WR_MASK (0x00000001U)


///< RX Eye diagram start indicator. When asserted, PHY will perform an
///< eye diagram.
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_LN_EYE_MEAS_START_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_LN_EYE_MEAS_START_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_LN_EYE_MEAS_START_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_LN_EYE_MEAS_START_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_START_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_PLL_RDY[4] register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_PLL_RDY
  * TX PLL Ready Status
  */

typedef union {
  struct {
    uint32_t LN_PLL_READY : 1;
    ///< TX PLL ready signal, indicating TX PLL is fully powered up.
    ///< 1'b0: TX PLL is not ready.
    ///< 1'b1: TX PLL is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t LN_PLL_LOCK_STATUS : 1;
    ///< TXPLL lock status indicating that the TX PLL is locked to its reference
    ///< clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_RD_MASK (0x00000003U)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_WR_MASK (0x00000000U)


///< TX PLL ready signal, indicating TX PLL is fully powered up.
///< 1'b0: TX PLL is not ready.
///< 1'b1: TX PLL is ready.
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_READY_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_READY_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_READY_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_READY_BF_DEF (0x00000000)

///< TXPLL lock status indicating that the TX PLL is locked to its reference
///< clock.
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_LOCK_STAT_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_LOCK_STAT_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_LOCK_STAT_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_LN_PLL_LOCK_STAT_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_PLL_RDY_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_TX_CFG_STS[4] register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/TX_CFG_STS
  * Transmit lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Transmit lane state transition status. Indicates when the PMA has
    ///< completed a requested state transition.
    ///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_WR_MASK (0x00000000U)


///< Transmit lane state transition status. Indicates when the PMA has
///< completed a requested state transition.
///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
///< has completed its state change
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_TX_CFG_STS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_CFG_STS[4] register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_CFG_STS
  * Receive lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Receive lane state transition status. Indicates when the PMA has completed
    ///< a requested state transition.
    ///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_WR_MASK (0x00000000U)


///< Receive lane state transition status. Indicates when the PMA has completed
///< a requested state transition.
///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
///< has completed its state change
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_CFG_STS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_CDR_LK2_DATA[4] register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_CDR_LK2_DATA
  * RX CDR data lock indicator
  */

typedef union {
  struct {
    uint32_t LN_CDR_LK2_DATA : 1;
    ///< RX CDR data lock indicator
    ///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
    ///< is valid
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_WR_MASK (0x00000000U)


///< RX CDR data lock indicator
///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
///< is valid
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_LK2_DATA_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_SIG_DETECT[4] register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_SIG_DETECT
  * Receiver signal detect indicator
  */

typedef union {
  struct {
    uint32_t LN_SIG_DETECT : 1;
    ///< Receiver signal detect indicator.
    ///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
    ///< detected on xia_rx_n_l0/xia_rx_p_l0
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_sig_detect_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_WR_MASK (0x00000000U)


///< Receiver signal detect indicator.
///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
///< detected on xia_rx_n_l0/xia_rx_p_l0
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_LN_SIG_DETECT_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_LN_SIG_DETECT_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_LN_SIG_DETECT_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_LN_SIG_DETECT_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_SIG_DETECT_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_CDR_FREQ_LK_STS[4] register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_CDR_FREQ_LK_STS
  * CDR lock Status
  */

typedef union {
  struct {
    uint32_t CDR_LOCK : 1;
    ///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
    ///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
    ///< within the PPM threshold programmed in memory       If deasserted
    ///< when expected to be asserted, indicates a fault condition.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_WR_MASK (0x00000000U)


///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
///< within the PPM threshold programmed in memory       If deasserted
///< when expected to be asserted, indicates a fault condition.
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_CDR_LOCK_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_CDR_LOCK_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_CDR_LOCK_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_CDR_LOCK_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_CDR_FREQ_LK_STS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_EQ_ADAPT_STS[4] register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_EQ_ADAPT_STS
  * RX Equalisation Adapt Status
  */

typedef union {
  struct {
    uint32_t LN_EQ_MEAS_VAL : 14;
    ///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EQ_ADAPT_DONE : 1;
    ///< RX equalization done indicator. When asserted, indicates requested
    ///< RX equalization routine is complete.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_RD_MASK (0x00013fffU)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_WR_MASK (0x00000000U)


///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
///< is set.
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_WID (14)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_DEF (0x00000000)

///< RX equalization done indicator. When asserted, indicates requested
///< RX equalization routine is complete.
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_OFF (16)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_MSK (0x00010000)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_EQ_ADAPT_STS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_EYE_MEAS_STS[4] register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_EYE_MEAS_STS
  * RX Eye Measurement Status
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_VAL : 14;
    ///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EYE_MEAS_ERR : 1;
    ///< RX eye error indicator. If asserted, indicates requested eye diagram
    ///< measurement had an error.Valid only if ln_eye_meas_done is set.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t LN_EYE_MEAS_DONE : 1;
    ///< RX eye done indicator. When asserted, indicates requested eye diagram
    ///< measurement is complete.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_RD_MASK (0x00033fffU)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_WR_MASK (0x00000000U)


///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
///< is set.
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_WID (14)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_DEF (0x00000000)

///< RX eye error indicator. If asserted, indicates requested eye diagram
///< measurement had an error.Valid only if ln_eye_meas_done is set.
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_OFF (16)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_MSK (0x00010000)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_DEF (0x00000000)

///< RX eye done indicator. When asserted, indicates requested eye diagram
///< measurement is complete.
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_OFF (17)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_MSK (0x00020000)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_EYE_MEAS_STS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_RX_TERM_HIZ_EN[4] register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/RX_TERM_HIZ_EN
  * RX HIGH Z termination enable
  */

typedef union {
  struct {
    uint32_t HIZ_EN : 1;
    ///< Enables highZ termination on RX lane when set to 1t.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_WR_MASK (0x00000001U)


///< Enables highZ termination on RX lane when set to 1t.
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_HIZ_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_HIZ_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_HIZ_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_HIZ_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_RX_TERM_HIZ_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_EQ_INPROGRESS[4] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_EQ_INPROGRESS
  * PIPE PCS Equalization control
  */

typedef union {
  struct {
    uint32_t EQ_IN_PROG : 1;
    ///< 1'b1- Equalization training in progress.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_WR_MASK (0x00000001U)


///< 1'b1- Equalization training in progress.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_EQ_IN_PROG_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_EQ_IN_PROG_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_EQ_IN_PROG_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_EQ_IN_PROG_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_INPROGRESS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_EQ_TRAINING[4] register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_EQ_TRAINING
  * PIPE PCS Equalization Training control
  */

typedef union {
  struct {
    uint32_t EQ_TRAIN : 1;
    ///< 1'b1- Equalization training.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_WR_MASK (0x00000001U)


///< 1'b1- Equalization training.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_EQ_TRAIN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_EQ_TRAIN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_EQ_TRAIN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_EQ_TRAIN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_EQ_TRAINING_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_TXDETECTRX_REQ[4] register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_TXDETECTRX_REQ
  * PIPE PCS Reciever detect request control
  */

typedef union {
  struct {
    uint32_t DET_RX_REQ : 1;
    ///< Receiver detect request. When asserted, PHY will perform receiver
    ///< detect.            Completion indication is captured inPIPE PCS STS
    ///< register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_WR_MASK (0x00000001U)


///< Receiver detect request. When asserted, PHY will perform receiver
///< detect.            Completion indication is captured inPIPE PCS STS
///< register.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_DET_RX_REQ_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_DET_RX_REQ_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_DET_RX_REQ_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_DET_RX_REQ_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXDETECTRX_REQ_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_L1SS_RXDET_EN[4] register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_L1SS_RXDET_EN
  * PIPE PCS RX squelch control
  */

typedef union {
  struct {
    uint32_t L1SS_RXDET_EN : 1;
    ///< Assertion of this signal keeps the RX squelch signal detect circuit
    ///< enabled in L1 substate.
    ///< 1'b0 - RX squelch signal detect disabled, L1.1 substate.
    ///< 1'b1 - RX squelch signal detect enabled, L1.0 substate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_WR_MASK (0x00000001U)


///< Assertion of this signal keeps the RX squelch signal detect circuit
///< enabled in L1 substate.
///< 1'b0 - RX squelch signal detect disabled, L1.1 substate.
///< 1'b1 - RX squelch signal detect enabled, L1.0 substate.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_L1SS_RXDET_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_L1SS_RXDET_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_L1SS_RXDET_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_L1SS_RXDET_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_RXDET_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN[4] register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_L1SS_TXCMNMODE_EN
  * PIPE PCS TX Common mode control
  */

typedef union {
  struct {
    uint32_t L1SS_TXCMNMODE_EN : 1;
    ///< Asserting this signal maintains the TX common mode in L1 substate.
    ///< 1'b0 - TX common mode disabled, L1.2 substate.
    ///< 1'b1 - TX common mode is maintained, L1.1 substate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_WR_MASK (0x00000001U)


///< Asserting this signal maintains the TX common mode in L1 substate.
///< 1'b0 - TX common mode disabled, L1.2 substate.
///< 1'b1 - TX common mode is maintained, L1.1 substate.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_L1SS_TXCMNMODE_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_L1SS_TXCMNMODE_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_L1SS_TXCMNMODE_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_L1SS_TXCMNMODE_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_L1SS_TXCMNMODE_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_SRIS_EN[4] register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_SRIS_EN
  * PIPE PCS SSC mode control
  */

typedef union {
  struct {
    uint32_t SRIS_EN : 1;
    ///< Indicates whether currently operating in separate reference clock
    ///< and independent SSC mode for PCIe.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_WR_MASK (0x00000001U)


///< Indicates whether currently operating in separate reference clock
///< and independent SSC mode for PCIe.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_SRIS_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_SRIS_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_SRIS_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_SRIS_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_SRIS_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_LFPS_EN[4] register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_LFPS_EN
  * PIPE PCS LFPS mode control
  */

typedef union {
  struct {
    uint32_t LFPS_EN : 1;
    ///< PIPE PCS LFPS mode control.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_WR_MASK (0x00000001U)


///< PIPE PCS LFPS mode control.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_LFPS_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_LFPS_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_LFPS_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_LFPS_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_LFPS_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_TXBEACON_EN[4] register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_TXBEACON_EN
  * PIPE PCS TX Beacon Enable control
  */

typedef union {
  struct {
    uint32_t TX_BEACON_EN : 1;
    ///< Transmit beacon enable
    ///< 1'b0: Beacon disabled
    ///< 1'b1: Beacon enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_WR_MASK (0x00000001U)


///< Transmit beacon enable
///< 1'b0: Beacon disabled
///< 1'b1: Beacon enabled
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_TX_BEACON_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_TX_BEACON_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_TX_BEACON_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_TX_BEACON_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_TXBEACON_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN[4] register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_RXEIOSDETECTSTAT_EN
  * PIPE PCS EIOS Detect Status
  */

typedef union {
  struct {
    uint32_t EIOS_EN : 1;
    ///< PCS EIOS Detect Status pin from the PCS Layer. Only used in PCIe mode
    ///< 1'b0: No EIOS detected. CDR should remain in whatever state it is
    ///< in                                                1'b1: EOIS detected.
    ///< CDR should lock to reference
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_WR_MASK (0x00000001U)


///< PCS EIOS Detect Status pin from the PCS Layer. Only used in PCIe mode
///< 1'b0: No EIOS detected. CDR should remain in whatever state it is
///< in                                                1'b1: EOIS detected.
///< CDR should lock to reference
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_EIOS_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_EIOS_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_EIOS_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_EIOS_EN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_RXEIOSDETECTSTAT_EN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PIPEPCS_STS[4] register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PIPEPCS_STS
  * PIPE PCS Status
  */

typedef union {
  struct {
    uint32_t TXDETEXTRX_ACK : 1;
    ///< Receiver detect acknowledge indicator. When asserted, indicates that
    ///< requested receiver detect operation has completed.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t TXDETEXTRX_STAT : 1;
    ///< Receiver detect status. Valid when o_pipepcs_txdetectrx_ack_l0_a is
    ///< asserted                                                 1'b0: Receiver
    ///< not detected                                                 1'b1:
    ///< Receiver detected
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t LFPS_SIGDETECT : 1;
    ///< Indicates whether LFPS is detected when in USB mode.
    ///< 1'b0 - LFPS not detected.
    ///< 1'b1 - LFPS detected
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pipepcs_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_RD_MASK (0x00000007U)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_WR_MASK (0x00000000U)


///< Receiver detect acknowledge indicator. When asserted, indicates that
///< requested receiver detect operation has completed.
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_ACK_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_ACK_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_ACK_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_ACK_BF_DEF (0x00000000)

///< Receiver detect status. Valid when o_pipepcs_txdetectrx_ack_l0_a is
///< asserted                                                 1'b0: Receiver
///< not detected                                                 1'b1:
///< Receiver detected
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_STAT_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_STAT_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_STAT_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_TXDETEXTRX_STAT_BF_DEF (0x00000000)

///< Indicates whether LFPS is detected when in USB mode.
///< 1'b0 - LFPS not detected.
///< 1'b1 - LFPS detected
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_LFPS_SIGDETECT_BF_OFF ( 2)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_LFPS_SIGDETECT_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_LFPS_SIGDETECT_BF_MSK (0x00000004)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_LFPS_SIGDETECT_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PIPEPCS_STS_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PMA_LN_SPARE_IN[4] register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PMA_LN_SPARE_IN
  * PMA SPARE Input control
  */

typedef union {
  struct {
    uint32_t SPR_IN : 10;
    ///< Drives the PMA per lane spare input pins of the Serdes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_WR_MASK (0x000003ffU)


///< Drives the PMA per lane spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_SPR_IN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_SPR_IN_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_SPR_IN_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_SPR_IN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_IN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PCS_LN_SPARE_IN[4] register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PCS_LN_SPARE_IN
  * PCS SPARE Input control
  */

typedef union {
  struct {
    uint32_t SPR_IN : 12;
    ///< Drives the PCS per lane spare input pins of the Serdes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_RD_MASK (0x00000fffU)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_WR_MASK (0x00000fffU)


///< Drives the PCS per lane spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_SPR_IN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_SPR_IN_BF_WID (12)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_SPR_IN_BF_MSK (0x00000FFF)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_SPR_IN_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_IN_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PMA_LN_SPARE_OUT[4] register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PMA_LN_SPARE_OUT
  * PMA SPARE Output capture
  */

typedef union {
  struct {
    uint32_t SPR_OUT : 10;
    ///< Captures the PMA per lane spare output pins of the Serdes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_WR_MASK (0x00000000U)


///< Captures the PMA per lane spare output pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_SPR_OUT_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_SPR_OUT_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_SPR_OUT_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_SPR_OUT_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PMA_LN_SPARE_OUT_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE0_PCS_LN_SPARE_OUT[4] register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE0/PCS_LN_SPARE_OUT
  * PCS SPARE Output capture
  */

typedef union {
  struct {
    uint32_t SPR_OUT : 12;
    ///< Captures the PCS per lane spare output pins of the Serdes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t;

#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_RD_MASK (0x00000fffU)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_WR_MASK (0x00000000U)


///< Captures the PCS per lane spare output pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_SPR_OUT_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_SPR_OUT_BF_WID (12)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_SPR_OUT_BF_MSK (0x00000FFF)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_SPR_OUT_BF_DEF (0x00000000)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_ARR_SZ0 (4)
#define JESD_PHY_CSR_PHY_LANE_PCS_LN_SPARE_OUT_ARRAY_STRIDE0 (0x1000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_CMN_FORCE_PWRUP register description at address offset 0x4000
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/CMN_FORCE_PWRUP
  * PHY Common Force Powerup
  */

typedef union {
  struct {
    uint32_t FORCE_PWR_UP : 1;
    ///< Under normal operation cmn block is powered up/down as needed by internal
    ///< circuits.                                                  If asserted,
    ///< CMN will power up unconditionally, allows common block functionality
    ///< (refclk, etc.) to be used independently of rest of PHY
    ///< 0: Do not force cmn powerup.
    ///< 1: Force cmn block powerup.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_force_pwrup_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_WR_MASK (0x00000001U)


///< Under normal operation cmn block is powered up/down as needed by internal
///< circuits.                                                  If asserted,
///< CMN will power up unconditionally, allows common block functionality
///< (refclk, etc.) to be used independently of rest of PHY
///< 0: Do not force cmn powerup.
///< 1: Force cmn block powerup.
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_CMN_PLLA_FORCE_PWRUP register description at address offset 0x4004
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/CMN_PLLA_FORCE_PWRUP
  * Common PLL powerup force enable
  */

typedef union {
  struct {
    uint32_t PLL_FORCE_PWR_UP : 1;
    ///< common PLL powerup force enable. Under normal operation CMN PLL block
    ///< is powered up/down as needed by internal circuits.             If
    ///< asserted, CMN PLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force CMN PLL powerup.
    ///< 1: Force CMN PLL block powerup.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_FORCE_RATE_FREQ : 1;
    ///< Indicates which of the two programmed frequency CMN PLL will be forced
    ///< powered up to. This is applicable only if pll_force_pwr_up is set.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_plla_force_pwrup_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_RD_MASK (0x00000003U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_WR_MASK (0x00000003U)


///< common PLL powerup force enable. Under normal operation CMN PLL block
///< is powered up/down as needed by internal circuits.             If
///< asserted, CMN PLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force CMN PLL powerup.
///< 1: Force CMN PLL block powerup.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_DEF (0x00000000)

///< Indicates which of the two programmed frequency CMN PLL will be forced
///< powered up to. This is applicable only if pll_force_pwr_up is set.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_CMN_PLLB_FORCE_PWRUP register description at address offset 0x4008
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/CMN_PLLB_FORCE_PWRUP
  * Common PLL powerup force enable
  */

typedef union {
  struct {
    uint32_t PLL_FORCE_PWR_UP : 1;
    ///< common PLL powerup force enable. Under normal operation CMN PLL block
    ///< is powered up/down as needed by internal circuits.             If
    ///< asserted, CMN PLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force CMN PLL powerup.
    ///< 1: Force CMN PLL block powerup.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_FORCE_RATE_FREQ : 1;
    ///< Indicates which of the two programmed frequency CMN PLL will be forced
    ///< powered up to. This is applicable only if pll_force_pwr_up is set.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pllb_force_pwrup_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_RD_MASK (0x00000003U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_WR_MASK (0x00000003U)


///< common PLL powerup force enable. Under normal operation CMN PLL block
///< is powered up/down as needed by internal circuits.             If
///< asserted, CMN PLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force CMN PLL powerup.
///< 1: Force CMN PLL block powerup.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_DEF (0x00000000)

///< Indicates which of the two programmed frequency CMN PLL will be forced
///< powered up to. This is applicable only if pll_force_pwr_up is set.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_CMN_RDY register description at address offset 0x4010
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/CMN_RDY
  * PHy Common Ready Status
  */

typedef union {
  struct {
    uint32_t CMN_RDY_STS : 1;
    ///< Common block ready status.            Indicates common block is fully
    ///< powered up                                                1'b0: Common
    ///< lane is not ready                                               1'b1:
    ///< Common lane is ready
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_rdy_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_RD_MASK (0x00000001U)
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_WR_MASK (0x00000000U)


///< Common block ready status.            Indicates common block is fully
///< powered up                                                1'b0: Common
///< lane is not ready                                               1'b1:
///< Common lane is ready
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_CMN_RDY_STS_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_CMN_RDY_STS_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_CMN_RDY_STS_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_CMN_RDY_STS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_CMN_PLLA_RDY register description at address offset 0x4014
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/CMN_PLLA_RDY
  * Common PLL Ready Status
  */

typedef union {
  struct {
    uint32_t PLL_READY : 1;
    ///< Common PLL ready signal, indicating PLL is fully powered up.
    ///< 1'b0: CMN RDY is not ready.
    ///< 1'b1: CMN RDY is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_LOCK_STATUS : 1;
    ///< Common PLL lock status indicating that the  signal,PLL is locked to
    ///< its reference clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_plla_rdy_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_RD_MASK (0x00000003U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_WR_MASK (0x00000000U)


///< Common PLL ready signal, indicating PLL is fully powered up.
///< 1'b0: CMN RDY is not ready.
///< 1'b1: CMN RDY is ready.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_READY_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_READY_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_READY_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_READY_BF_DEF (0x00000000)

///< Common PLL lock status indicating that the  signal,PLL is locked to
///< its reference clock.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_LOCK_STAT_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_LOCK_STAT_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_LOCK_STAT_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_PLL_LOCK_STAT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_CMN_PLLB_RDY register description at address offset 0x4018
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/CMN_PLLB_RDY
  * Common PLL Ready Status
  */

typedef union {
  struct {
    uint32_t PLL_READY : 1;
    ///< Common PLL ready signal, indicating PLL is fully powered up.
    ///< 1'b0: CMN RDY is not ready.
    ///< 1'b1: CMN RDY is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_LOCK_STATUS : 1;
    ///< Common PLL lock status indicating that the  signal,PLL is locked to
    ///< its reference clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pllb_rdy_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_RD_MASK (0x00000003U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_WR_MASK (0x00000000U)


///< Common PLL ready signal, indicating PLL is fully powered up.
///< 1'b0: CMN RDY is not ready.
///< 1'b1: CMN RDY is ready.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_READY_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_READY_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_READY_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_READY_BF_DEF (0x00000000)

///< Common PLL lock status indicating that the  signal,PLL is locked to
///< its reference clock.
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_LOCK_STAT_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_LOCK_STAT_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_LOCK_STAT_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_PLL_LOCK_STAT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_UCSS_SPARE_IN register description at address offset 0x4020
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/UCSS_SPARE_IN
  * UCSS SPARE Input control
  */

typedef union {
  struct {
    uint32_t SPR_IN : 32;
    ///< Drives the UCSS per lane spare input pins of the Serdes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_ucss_spare_in_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_RD_MASK (0xffffffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_WR_MASK (0xffffffffU)


///< Drives the UCSS per lane spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_SPR_IN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_SPR_IN_BF_WID (32)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_SPR_IN_BF_MSK (0xFFFFFFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_SPR_IN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_UCSS_SPARE_OUT register description at address offset 0x4024
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/UCSS_SPARE_OUT
  * UCSS SPARE Output capture
  */

typedef union {
  struct {
    uint32_t SPR_OUT : 32;
    ///< Captures the UCSS per lane spare output pins of the Serdes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_ucss_spare_out_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_RD_MASK (0xffffffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_WR_MASK (0x00000000U)


///< Captures the UCSS per lane spare output pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_SPR_OUT_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_SPR_OUT_BF_WID (32)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_SPR_OUT_BF_MSK (0xFFFFFFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_SPR_OUT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PMA_SPARE_CMN_IN register description at address offset 0x4028
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PMA_SPARE_CMN_IN
  * PMA Common Spare Input control
  */

typedef union {
  struct {
    uint32_t SPR_IN : 16;
    ///< Drives  the PMA common spare input pins of the Serdes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pma_spare_cmn_in_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_RD_MASK (0x0000ffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_WR_MASK (0x0000ffffU)


///< Drives  the PMA common spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_SPR_IN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_SPR_IN_BF_WID (16)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_SPR_IN_BF_MSK (0x0000FFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_SPR_IN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PMA_SPARE_CMN_OUT register description at address offset 0x402c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PMA_SPARE_CMN_OUT
  * PMA Common Spare Output Capture
  */

typedef union {
  struct {
    uint32_t SPR_OUT : 16;
    ///< Drives  the PMA common spare input pins of the Serdes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pma_spare_cmn_out_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_RD_MASK (0x0000ffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_WR_MASK (0x00000000U)


///< Drives  the PMA common spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_SPR_OUT_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_SPR_OUT_BF_WID (16)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_SPR_OUT_BF_MSK (0x0000FFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_SPR_OUT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PCS_SPARE_CMN_IN register description at address offset 0x4030
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PCS_SPARE_CMN_IN
  * PCS Common Spare Input control
  */

typedef union {
  struct {
    uint32_t SPR_IN : 8;
    ///< Drives  the PCS common spare input pins of the Serdes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pcs_spare_cmn_in_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_RD_MASK (0x000000ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_WR_MASK (0x000000ffU)


///< Drives  the PCS common spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_SPR_IN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_SPR_IN_BF_WID ( 8)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_SPR_IN_BF_MSK (0x000000FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_SPR_IN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PCS_SPARE_CMN_OUT register description at address offset 0x4034
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PCS_SPARE_CMN_OUT
  * PCS Common Spare Output Capture
  */

typedef union {
  struct {
    uint32_t SPR_OUT : 8;
    ///< Drives  the PMA common spare input pins of the Serdes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pcs_spare_cmn_out_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_RD_MASK (0x000000ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_WR_MASK (0x00000000U)


///< Drives  the PMA common spare input pins of the Serdes.
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_SPR_OUT_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_SPR_OUT_BF_WID ( 8)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_SPR_OUT_BF_MSK (0x000000FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_SPR_OUT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_RX_LANE_MUX_SEL register description at address offset 0x4040
  *
  * Register default value:        0x000000E4
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_RX_LANE_MUX_SEL
  * PHY RX Lane Mux select register
  */

typedef union {
  struct {
    uint32_t LOGICAL_LN0_MAP : 2;
    ///< This field defines the RX PHY lame number that is mapped to JESD IP
    ///< lane 0 inputs. This map applies to data and clock inputs of JESD lane
    ///< 0.                   Default mapping is RX PHY lane 0 mapped to JESD
    ///< IP lane 0 input.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LOGICAL_LN1_MAP : 2;
    ///< This field defines the RX PHY lame number that is mapped to JESD IP
    ///< lane 1 inputs. This map applies to data and clock inputs of JESD lane
    ///< 1.                   Default mapping is RX PHY lane 1 mapped to JESD
    ///< IP lane 1 input.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t LOGICAL_LN2_MAP : 2;
    ///< This field defines the RX PHY lame number that is mapped to JESD IP
    ///< lane 2 inputs. This map applies to data and clock inputs of JESD lane
    ///< 2.                   Default mapping is RX PHY lane 2 mapped to JESD
    ///< IP lane 2 input.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t LOGICAL_LN3_MAP : 2;
    ///< This field defines the RX PHY lame number that is mapped to JESD IP
    ///< lane 3 inputs. This map applies to data and clock inputs of JESD lane
    ///< 3.                   Default mapping is RX PHY lane 3 mapped to JESD
    ///< IP lane 3 input.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_rx_lane_mux_sel_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_DEFAULT (0x000000e4U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_RD_MASK (0x000000ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_WR_MASK (0x000000ffU)


///< This field defines the RX PHY lame number that is mapped to JESD IP
///< lane 0 inputs. This map applies to data and clock inputs of JESD lane
///< 0.                   Default mapping is RX PHY lane 0 mapped to JESD
///< IP lane 0 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN0_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN0_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN0_BF_MSK (0x00000003)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN0_BF_DEF (0x00000000)

///< This field defines the RX PHY lame number that is mapped to JESD IP
///< lane 1 inputs. This map applies to data and clock inputs of JESD lane
///< 1.                   Default mapping is RX PHY lane 1 mapped to JESD
///< IP lane 1 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN1_BF_OFF ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN1_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN1_BF_MSK (0x0000000C)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN1_BF_DEF (0x00000004)

///< This field defines the RX PHY lame number that is mapped to JESD IP
///< lane 2 inputs. This map applies to data and clock inputs of JESD lane
///< 2.                   Default mapping is RX PHY lane 2 mapped to JESD
///< IP lane 2 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN2_BF_OFF ( 4)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN2_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN2_BF_MSK (0x00000030)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN2_BF_DEF (0x00000020)

///< This field defines the RX PHY lame number that is mapped to JESD IP
///< lane 3 inputs. This map applies to data and clock inputs of JESD lane
///< 3.                   Default mapping is RX PHY lane 3 mapped to JESD
///< IP lane 3 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN3_BF_OFF ( 6)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN3_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN3_BF_MSK (0x000000C0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_LOGICAL_LN3_BF_DEF (0x000000C0)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_TX_LANE_MUX_SEL register description at address offset 0x4044
  *
  * Register default value:        0x000000E4
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_TX_LANE_MUX_SEL
  * PHY TX Lane Mux select register
  */

typedef union {
  struct {
    uint32_t LOGICAL_LN0_MAP : 2;
    ///< This field defines the JESD IP lane number that is mapped to TX physical
    ///< lane 0 inputs. This map applies to data inputs of PHY lane 0.
    ///< The clock routed to JESD IP lane programmed in this filed will be
    ///< from TX lane 0.                   Default mapping is JESD IP lane
    ///< 0 is mapped to TX phy lane 0 input.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LOGICAL_LN1_MAP : 2;
    ///< This field defines the JESD IP lane number that is mapped to TX physical
    ///< lane 1 inputs. This map applies to data inputs of PHY lane 1.
    ///< The clock routed to JESD IP lane programmed in this filed will be
    ///< from TX lane 1.                   Default mapping is JESD IP lane
    ///< 1 is mapped to TX phy lane 1 input.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t LOGICAL_LN2_MAP : 2;
    ///< This field defines the JESD IP lane number that is mapped to TX physical
    ///< lane 2 inputs. This map applies to data inputs of PHY lane 2.
    ///< The clock routed to JESD IP lane programmed in this filed will be
    ///< from TX lane 2.                   Default mapping is JESD IP lane
    ///< 2 is mapped to TX phy lane 2 input.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t LOGICAL_LN3_MAP : 2;
    ///< This field defines the JESD IP lane number that is mapped to TX physical
    ///< lane 3 inputs. This map applies to data inputs of PHY lane 3.
    ///< The clock routed to JESD IP lane programmed in this filed will be
    ///< from TX lane 3.                   Default mapping is JESD IP lane
    ///< 3 is mapped to TX phy lane 3 input.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_tx_lane_mux_sel_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_DEFAULT (0x000000e4U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_RD_MASK (0x000000ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_WR_MASK (0x000000ffU)


///< This field defines the JESD IP lane number that is mapped to TX physical
///< lane 0 inputs. This map applies to data inputs of PHY lane 0.
///< The clock routed to JESD IP lane programmed in this filed will be
///< from TX lane 0.                   Default mapping is JESD IP lane
///< 0 is mapped to TX phy lane 0 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN0_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN0_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN0_BF_MSK (0x00000003)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN0_BF_DEF (0x00000000)

///< This field defines the JESD IP lane number that is mapped to TX physical
///< lane 1 inputs. This map applies to data inputs of PHY lane 1.
///< The clock routed to JESD IP lane programmed in this filed will be
///< from TX lane 1.                   Default mapping is JESD IP lane
///< 1 is mapped to TX phy lane 1 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN1_BF_OFF ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN1_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN1_BF_MSK (0x0000000C)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN1_BF_DEF (0x00000004)

///< This field defines the JESD IP lane number that is mapped to TX physical
///< lane 2 inputs. This map applies to data inputs of PHY lane 2.
///< The clock routed to JESD IP lane programmed in this filed will be
///< from TX lane 2.                   Default mapping is JESD IP lane
///< 2 is mapped to TX phy lane 2 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN2_BF_OFF ( 4)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN2_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN2_BF_MSK (0x00000030)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN2_BF_DEF (0x00000020)

///< This field defines the JESD IP lane number that is mapped to TX physical
///< lane 3 inputs. This map applies to data inputs of PHY lane 3.
///< The clock routed to JESD IP lane programmed in this filed will be
///< from TX lane 3.                   Default mapping is JESD IP lane
///< 3 is mapped to TX phy lane 3 input.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN3_BF_OFF ( 6)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN3_BF_WID ( 2)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN3_BF_MSK (0x000000C0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_LOGICAL_LN3_BF_DEF (0x000000C0)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PMA_REF_HIGHZ_TERM_EN register description at address offset 0x4048
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PMA_REF_HIGHZ_TERM_EN
  * PMA reference clock pad termination control
  */

typedef union {
  struct {
    uint32_t REF0_TERM_EN : 1;
    ///< Reference clock0 pad (xioa_ck_ref0_p/n) termination control .
    ///< 1'b0: Termination enable        1'b1: Termination disabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REF1_TERM_EN : 1;
    ///< Reference clock1 pad (xioa_ck_ref1_p/n) termination control .
    ///< 1'b0: Termination enable        1'b1: Termination disabled
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pma_ref_highz_term_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_RD_MASK (0x00000003U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_WR_MASK (0x00000003U)


///< Reference clock0 pad (xioa_ck_ref0_p/n) termination control .
///< 1'b0: Termination enable        1'b1: Termination disabled
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF0_TERM_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF0_TERM_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF0_TERM_EN_BF_MSK (0x00000001)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF0_TERM_EN_BF_DEF (0x00000000)

///< Reference clock1 pad (xioa_ck_ref1_p/n) termination control .
///< 1'b0: Termination enable        1'b1: Termination disabled
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF1_TERM_EN_BF_OFF ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF1_TERM_EN_BF_WID ( 1)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF1_TERM_EN_BF_MSK (0x00000002)
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REF1_TERM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_IRQ_INTR_MAP register description at address offset 0x4050
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_IRQ_INTR_MAP
  * PHY IRQ interrupt map
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_MAP : 4;
    ///< When set to 1 the IRA interrupts from PHY are mapped to JESD high
    ///< priority interrupt.       bit 0 - UCSS interrupt request to SoC high
    ///< priority interrupt enable.        bit 1 - UCSS CPI interrupt 0 high
    ///< priority interrupt enable.        bit 2 - UCSS CPI interrupt 1 high
    ///< priority interrupt enable.        bit 3 - UCSS CPI interrupt 2 high
    ///< priority interrupt enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_LOW_MAP : 4;
    ///< When set to 1 the IRA interrupts from PHY are mapped to JESD low priority
    ///< interrupt.       bit 0 - UCSS interrupt request to SoC low priority
    ///< interrupt enable.        bit 1 - UCSS CPI interrupt 0 low priority
    ///< interrupt enable.        bit 2 - UCSS CPI interrupt 1 low priority
    ///< interrupt enable.        bit 3 - UCSS CPI interrupt 2 low priority
    ///< interrupt enable.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ALARM_MAP : 4;
    ///< When set to 1 the IRA interrupts from PHY are mapped to JESD alarm.
    ///< bit 0 - UCSS interrupt request to SoC alarm enable.        bit 1 -
    ///< UCSS CPI interrupt 0 alarm enable.        bit 2 - UCSS CPI interrupt
    ///< 1 alarm enable.        bit 3 - UCSS CPI interrupt 2 alarm enable.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_irq_intr_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_RD_MASK (0x00000fffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_WR_MASK (0x00000fffU)


///< When set to 1 the IRA interrupts from PHY are mapped to JESD high
///< priority interrupt.       bit 0 - UCSS interrupt request to SoC high
///< priority interrupt enable.        bit 1 - UCSS CPI interrupt 0 high
///< priority interrupt enable.        bit 2 - UCSS CPI interrupt 1 high
///< priority interrupt enable.        bit 3 - UCSS CPI interrupt 2 high
///< priority interrupt enable.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_HIGH_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_HIGH_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_HIGH_BF_MSK (0x0000000F)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_HIGH_BF_DEF (0x00000000)

///< When set to 1 the IRA interrupts from PHY are mapped to JESD low priority
///< interrupt.       bit 0 - UCSS interrupt request to SoC low priority
///< interrupt enable.        bit 1 - UCSS CPI interrupt 0 low priority
///< interrupt enable.        bit 2 - UCSS CPI interrupt 1 low priority
///< interrupt enable.        bit 3 - UCSS CPI interrupt 2 low priority
///< interrupt enable.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_LOW_BF_OFF ( 4)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_LOW_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_LOW_BF_MSK (0x000000F0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_LOW_BF_DEF (0x00000000)

///< When set to 1 the IRA interrupts from PHY are mapped to JESD alarm.
///< bit 0 - UCSS interrupt request to SoC alarm enable.        bit 1 -
///< UCSS CPI interrupt 0 alarm enable.        bit 2 - UCSS CPI interrupt
///< 1 alarm enable.        bit 3 - UCSS CPI interrupt 2 alarm enable.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_ALARM_BF_OFF ( 8)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_ALARM_BF_WID ( 4)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_ALARM_BF_MSK (0x00000F00)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_ALARM_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PCS_EVENT_HIGH_INTR_EN register description at address offset 0x4054
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PCS_EVENT_HIGH_INTR_EN
  * PCS IRQ event High interrupt map
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_MAP : 32;
    ///< When set to 1 the IRA interrupts from PCS are mapped to JESD high
    ///< priority interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pcs_event_high_intr_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_RD_MASK (0xffffffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_WR_MASK (0xffffffffU)


///< When set to 1 the IRA interrupts from PCS are mapped to JESD high
///< priority interrupt.
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_INTR_HIGH_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_INTR_HIGH_BF_WID (32)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_INTR_HIGH_BF_MSK (0xFFFFFFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_INTR_HIGH_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PCS_EVENT_LOW_INTR_EN register description at address offset 0x4058
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PCS_EVENT_LOW_INTR_EN
  * PCS IRQ event Low interrupt map
  */

typedef union {
  struct {
    uint32_t LOW_HIGH_MAP : 32;
    ///< When set to 1 the IRA interrupts from PCS are mapped to JESD low priority
    ///< interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pcs_event_low_intr_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_RD_MASK (0xffffffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_WR_MASK (0xffffffffU)


///< When set to 1 the IRA interrupts from PCS are mapped to JESD low priority
///< interrupt.
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_LOW_HIGH_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_LOW_HIGH_BF_WID (32)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_LOW_HIGH_BF_MSK (0xFFFFFFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_LOW_HIGH_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PCS_EVENT_ALARM_EN register description at address offset 0x405c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PCS_EVENT_ALARM_EN
  * PCS IRQ event Alarm map
  */

typedef union {
  struct {
    uint32_t ALARM_MAP : 32;
    ///< When set to 1 the IRA interrupts from PCS are mapped to JESD alarm
    ///< interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_pcs_event_alarm_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_RD_MASK (0xffffffffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_WR_MASK (0xffffffffU)


///< When set to 1 the IRA interrupts from PCS are mapped to JESD alarm
///< interrupt.
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_ALARM_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_ALARM_BF_WID (32)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_ALARM_BF_MSK (0xFFFFFFFF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_ALARM_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_ERR_STS register description at address offset 0x4060
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_ERR_STS
  * PHY Error status register
  */

typedef union {
  struct {
    uint32_t ERR_STS : 10;
    ///< Status register PHY errors detected.            The register value
    ///< is sticky once set and only cleared upon writing to corresponding
    ///< Error clear register.             This register is set if the corresponding
    ///< error is detected irrespective of the value of the Alarm/Interrupt
    ///< generation enable.            The mapping of individual bits is shown
    ///< below.         [0]  - Common PLLA LOCK Loss.        [1]  - Common
    ///< PLLB LOCK Loss.         [2]  -  TX Lane 0 PLL LOCK Loss.        [3]
    ///< -  TX Lane 1 PLL LOCK Loss.        [4]  -  TX Lane 2 PLL LOCK Loss.
    ///< [5]  -  TX Lane 3 PLL LOCK Loss.         [6]  -  RX Lane 0 CDR LOCK
    ///< Loss.        [7]  -  RX Lane 1 CDR LOCK Loss.        [8]  -  RX Lane
    ///< 2 CDR LOCK Loss.        [9]  -  RX Lane 3 CDR LOCK Loss.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_err_sts_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_WR_MASK (0x00000000U)


///< Status register PHY errors detected.            The register value
///< is sticky once set and only cleared upon writing to corresponding
///< Error clear register.             This register is set if the corresponding
///< error is detected irrespective of the value of the Alarm/Interrupt
///< generation enable.            The mapping of individual bits is shown
///< below.         [0]  - Common PLLA LOCK Loss.        [1]  - Common
///< PLLB LOCK Loss.         [2]  -  TX Lane 0 PLL LOCK Loss.        [3]
///< -  TX Lane 1 PLL LOCK Loss.        [4]  -  TX Lane 2 PLL LOCK Loss.
///< [5]  -  TX Lane 3 PLL LOCK Loss.         [6]  -  RX Lane 0 CDR LOCK
///< Loss.        [7]  -  RX Lane 1 CDR LOCK Loss.        [8]  -  RX Lane
///< 2 CDR LOCK Loss.        [9]  -  RX Lane 3 CDR LOCK Loss.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_ERR_STS_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_ERR_STS_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_ERR_STS_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_ERR_STS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_ERR_INTR_HIGH_EN register description at address offset 0x4064
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_ERR_INTR_HIGH_EN
  * High Priority Interrupt Enable register for phy errors
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_EN : 10;
    ///< This register contains corresponding high priority Interrupt enable
    ///< bits for the error conditions detected in phy error Status register.
    ///< Each bit of this register enable High priority Interrupt for corresponding
    ///< error in the status register.             The mapping of bits is same
    ///< as phy error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_err_intr_high_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_WR_MASK (0x000003ffU)


///< This register contains corresponding high priority Interrupt enable
///< bits for the error conditions detected in phy error Status register.
///< Each bit of this register enable High priority Interrupt for corresponding
///< error in the status register.             The mapping of bits is same
///< as phy error Status register.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_INTR_HIGH_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_INTR_HIGH_EN_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_INTR_HIGH_EN_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_INTR_HIGH_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_ERR_INTR_LOW_EN register description at address offset 0x4068
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_ERR_INTR_LOW_EN
  * Low Priority Enable register for phy errors
  */

typedef union {
  struct {
    uint32_t INTR_LOW_EN : 10;
    ///< This register contains corresponding Low priority Interrupt enable
    ///< bits for all the error conditions detected in phy error Status register.
    ///< Each bit of this register enable Low priority Interrupt for corresponding
    ///< error in the status register.             The mapping of bits is same
    ///< as phy error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_err_intr_low_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_WR_MASK (0x000003ffU)


///< This register contains corresponding Low priority Interrupt enable
///< bits for all the error conditions detected in phy error Status register.
///< Each bit of this register enable Low priority Interrupt for corresponding
///< error in the status register.             The mapping of bits is same
///< as phy error Status register.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_INTR_LOW_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_INTR_LOW_EN_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_INTR_LOW_EN_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_INTR_LOW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_ERR_ALM_EN register description at address offset 0x406c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_ERR_ALM_EN
  * PHY Error Alarm enable
  */

typedef union {
  struct {
    uint32_t ALM_EN : 10;
    ///< This register contains corresponding enable bits for  the error conditions
    ///< detected phy error Status register.             Each bit of this register
    ///< enable alarm for corresponding error in the status register.
    ///< The mapping of bits is same as phy error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_err_alm_en_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_WR_MASK (0x000003ffU)


///< This register contains corresponding enable bits for  the error conditions
///< detected phy error Status register.             Each bit of this register
///< enable alarm for corresponding error in the status register.
///< The mapping of bits is same as phy error Status register.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_ALM_EN_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_ALM_EN_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_ALM_EN_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_ALM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_ERR_CLR register description at address offset 0x4070
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_ERR_CLR
  * Clear register for phy errors
  */

typedef union {
  struct {
    uint32_t ERR_CLR : 10;
    ///< This register contains clear bits for all the error conditions detected
    ///< in phy error Status register.             Each bit of this register
    ///< when written clears the corresponding bit in the error status status
    ///< register.            The clear operation is done for only one cycle
    ///< and subsequent error bits can set the status registers.
    ///< The mapping of bits is same as phy error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_err_clr_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_WR_MASK (0x000003ffU)


///< This register contains clear bits for all the error conditions detected
///< in phy error Status register.             Each bit of this register
///< when written clears the corresponding bit in the error status status
///< register.            The clear operation is done for only one cycle
///< and subsequent error bits can set the status registers.
///< The mapping of bits is same as phy error Status register.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_ERR_CLR_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_ERR_CLR_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_ERR_CLR_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_ERR_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_PHY_REG_MAP_LANE_CMN_PHY_ERR_FRC register description at address offset 0x4074
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/PHY_REG_MAP_LANE_CMN/PHY_ERR_FRC
  * Force register for phy errors
  */

typedef union {
  struct {
    uint32_t ERR_FRC : 10;
    ///< This register contains forcr bits for all the error conditions detected
    ///< in phy error Status register.             Each bit of this register
    ///< when written force the corresponding bit in the error status register
    ///< to 1 irrespective of the error condition (active value of the error)
    ///< until written back to 0.                         The mapping of bits
    ///< is same as phy error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_phy_csr_phy_lane_cmn_phy_err_frc_reg_t;

#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_DEFAULT (0x00000000U)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_RD_MASK (0x000003ffU)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_WR_MASK (0x000003ffU)


///< This register contains forcr bits for all the error conditions detected
///< in phy error Status register.             Each bit of this register
///< when written force the corresponding bit in the error status register
///< to 1 irrespective of the error condition (active value of the error)
///< until written back to 0.                         The mapping of bits
///< is same as phy error Status register.
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_ERR_FRC_BF_OFF ( 0)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_ERR_FRC_BF_WID (10)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_ERR_FRC_BF_MSK (0x000003FF)
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_ERR_FRC_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define JESD_PHY_CSR_PHY_LANE0_TX_PLL_FORCE_PWR_UP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_RATE_DIV_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_rate_div_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_RATE_DIV_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_DATA_CLK_DIV_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_ELEC_IDLE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_elec_idle_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_ELEC_IDLE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CM_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CM_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_FFE_COEFF_CP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_MODE_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mode_sel_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_MODE_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_OVR_SMPL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_OVR_SMPL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_PRECAL_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_EQ_PRECAL_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_STATIC_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_EQ_STATIC_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADPAT_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADPAT_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_PLL_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_PLL_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_TX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE0_TX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_CDR_LK2_DATA_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_CDR_LK2_DATA_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_SIG_DETECT_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_sig_detect_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_SIG_DETECT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_CDR_FREQ_LK_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADAPT_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_EQ_ADAPT_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_EYE_MEAS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_RX_TERM_HIZ_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_RX_TERM_HIZ_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_INPROGRESS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_INPROGRESS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_TRAINING_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_EQ_TRAINING_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXDETECTRX_REQ_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_RXDET_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_SRIS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_SRIS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_LFPS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_LFPS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXBEACON_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_TXBEACON_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PIPEPCS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sts_reg_t*) JESD_PHY_CSR_PHY_LANE0_PIPEPCS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE0_PMA_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE0_PCS_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_PLL_FORCE_PWR_UP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_RATE_DIV_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_rate_div_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_RATE_DIV_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_DATA_CLK_DIV_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_ELEC_IDLE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_elec_idle_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_ELEC_IDLE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CM_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CM_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_FFE_COEFF_CP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_MODE_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mode_sel_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_MODE_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_OVR_SMPL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_OVR_SMPL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_PRECAL_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_EQ_PRECAL_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_STATIC_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_EQ_STATIC_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADPAT_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADPAT_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_PLL_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_PLL_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_TX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE1_TX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_CDR_LK2_DATA_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_CDR_LK2_DATA_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_SIG_DETECT_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_sig_detect_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_SIG_DETECT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_CDR_FREQ_LK_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADAPT_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_EQ_ADAPT_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_EYE_MEAS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_RX_TERM_HIZ_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_RX_TERM_HIZ_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_INPROGRESS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_INPROGRESS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_TRAINING_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_EQ_TRAINING_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXDETECTRX_REQ_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_RXDET_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_TXCMNMODE_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_SRIS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_SRIS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_LFPS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_LFPS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXBEACON_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_TXBEACON_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_RXEIOSDETECTSTAT_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PIPEPCS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sts_reg_t*) JESD_PHY_CSR_PHY_LANE1_PIPEPCS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE1_PMA_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE1_PCS_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_PLL_FORCE_PWR_UP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_RATE_DIV_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_rate_div_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_RATE_DIV_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_DATA_CLK_DIV_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_ELEC_IDLE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_elec_idle_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_ELEC_IDLE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CM_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CM_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_FFE_COEFF_CP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_MODE_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mode_sel_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_MODE_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_OVR_SMPL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_OVR_SMPL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_PRECAL_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_EQ_PRECAL_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_STATIC_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_EQ_STATIC_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADPAT_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADPAT_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_PLL_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_PLL_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_TX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE2_TX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_CDR_LK2_DATA_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_CDR_LK2_DATA_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_SIG_DETECT_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_sig_detect_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_SIG_DETECT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_CDR_FREQ_LK_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADAPT_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_EQ_ADAPT_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_EYE_MEAS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_RX_TERM_HIZ_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_RX_TERM_HIZ_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_INPROGRESS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_INPROGRESS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_TRAINING_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_EQ_TRAINING_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXDETECTRX_REQ_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_RXDET_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_TXCMNMODE_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_SRIS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_SRIS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_LFPS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_LFPS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXBEACON_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_TXBEACON_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_RXEIOSDETECTSTAT_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PIPEPCS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sts_reg_t*) JESD_PHY_CSR_PHY_LANE2_PIPEPCS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE2_PMA_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE2_PCS_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_PLL_FORCE_PWR_UP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_RATE_DIV_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_rate_div_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_RATE_DIV_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_DATA_CLK_DIV_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_ELEC_IDLE_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_elec_idle_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_ELEC_IDLE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CM_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CM_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CP_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_FFE_COEFF_CP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_PSTATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_pstate_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_PSTATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_FREQ_RATE_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_freq_rate_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_FREQ_RATE_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_MODE_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mode_sel_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_MODE_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_MOD_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_mod_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_MOD_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_OVR_SMPL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_OVR_SMPL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_PRECAL_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_EQ_PRECAL_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_STATIC_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_EQ_STATIC_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADPAT_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADPAT_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_START_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_START_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_PLL_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_PLL_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_TX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE3_TX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_CFG_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_CFG_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_CDR_LK2_DATA_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_CDR_LK2_DATA_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_SIG_DETECT_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_sig_detect_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_SIG_DETECT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_CDR_FREQ_LK_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADAPT_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_EQ_ADAPT_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_EYE_MEAS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_RX_TERM_HIZ_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_RX_TERM_HIZ_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_INPROGRESS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_INPROGRESS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_TRAINING_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_EQ_TRAINING_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXDETECTRX_REQ_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXDETECTRX_REQ_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_RXDET_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_RXDET_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_TXCMNMODE_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_L1SS_TXCMNMODE_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_SRIS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_SRIS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_LFPS_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_LFPS_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXBEACON_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_TXBEACON_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_RXEIOSDETECTSTAT_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_RXEIOSDETECTSTAT_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PIPEPCS_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_pipepcs_sts_reg_t*) JESD_PHY_CSR_PHY_LANE3_PIPEPCS_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE3_PMA_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE3_PCS_LN_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_force_pwrup_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_FORCE_PWRUP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_plla_force_pwrup_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PLLA_FORCE_PWRUP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pllb_force_pwrup_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PLLB_FORCE_PWRUP_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_plla_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PLLA_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pllb_rdy_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PLLB_RDY_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_ucss_spare_in_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_ucss_spare_out_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_UCSS_SPARE_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pma_spare_cmn_in_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pma_spare_cmn_out_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PMA_SPARE_CMN_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pcs_spare_cmn_in_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_IN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pcs_spare_cmn_out_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PCS_SPARE_CMN_OUT_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_rx_lane_mux_sel_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_tx_lane_mux_sel_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pma_ref_highz_term_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_irq_intr_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_IRQ_INTR_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pcs_event_high_intr_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pcs_event_low_intr_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_pcs_event_alarm_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PCS_EVENT_ALARM_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_err_sts_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_STS_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_err_intr_high_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_err_intr_low_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_err_alm_en_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_ALM_EN_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_err_clr_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_CLR_ADR(_BASE))
#define JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_REG(_BASE) ((jesd_phy_csr_phy_lane_cmn_phy_err_frc_reg_t*) JESD_PHY_CSR_PHY_LANE_CMN_PHY_ERR_FRC_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t PHY_LANE0_TX_PLL_FORCE_PWR_UP; /*< Address offset = 0x0 */
    jesd_phy_csr_phy_lane_tx_pstate_reg_t PHY_LANE0_TX_PSTATE; /*< Address offset = 0x4 */
    jesd_phy_csr_phy_lane_tx_freq_rate_reg_t PHY_LANE0_TX_FREQ_RATE; /*< Address offset = 0x8 */
    jesd_phy_csr_phy_lane_tx_rate_div_reg_t PHY_LANE0_TX_RATE_DIV; /*< Address offset = 0xc */
    jesd_phy_csr_phy_lane_tx_mod_reg_t PHY_LANE0_TX_MOD; /*< Address offset = 0x10 */
    jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t PHY_LANE0_TX_DATA_CLK_DIV_RATE; /*< Address offset = 0x14 */
    jesd_phy_csr_phy_lane_tx_elec_idle_reg_t PHY_LANE0_TX_ELEC_IDLE; /*< Address offset = 0x18 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x1c */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t PHY_LANE0_TX_FFE_COEFF_CM; /*< Address offset = 0x20 */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t PHY_LANE0_TX_FFE_COEFF_CP; /*< Address offset = 0x24 */
    const uint8_t        reservedArea1 [24];  /*< Address offset = 0x28 */
    jesd_phy_csr_phy_lane_rx_pstate_reg_t PHY_LANE0_RX_PSTATE; /*< Address offset = 0x40 */
    jesd_phy_csr_phy_lane_rx_freq_rate_reg_t PHY_LANE0_RX_FREQ_RATE; /*< Address offset = 0x44 */
    jesd_phy_csr_phy_lane_rx_mode_sel_reg_t PHY_LANE0_RX_MODE_SEL; /*< Address offset = 0x48 */
    jesd_phy_csr_phy_lane_rx_mod_reg_t PHY_LANE0_RX_MOD; /*< Address offset = 0x4c */
    jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t PHY_LANE0_RX_OVR_SMPL; /*< Address offset = 0x50 */
    jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t PHY_LANE0_RX_EQ_PRECAL_SEL; /*< Address offset = 0x54 */
    jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t PHY_LANE0_RX_EQ_STATIC_EN; /*< Address offset = 0x58 */
    jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t PHY_LANE0_RX_EQ_ADPAT_START; /*< Address offset = 0x5c */
    jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t PHY_LANE0_RX_EYE_MEAS_START; /*< Address offset = 0x60 */
    const uint8_t        reservedArea2 [28];  /*< Address offset = 0x64 */
    jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t PHY_LANE0_TX_PLL_RDY; /*< Address offset = 0x80 */
    jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t PHY_LANE0_TX_CFG_STS; /*< Address offset = 0x84 */
    const uint8_t        reservedArea3 [56];  /*< Address offset = 0x88 */
    jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t PHY_LANE0_RX_CFG_STS; /*< Address offset = 0xc0 */
    jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t PHY_LANE0_RX_CDR_LK2_DATA; /*< Address offset = 0xc4 */
    jesd_phy_csr_phy_lane_rx_sig_detect_reg_t PHY_LANE0_RX_SIG_DETECT; /*< Address offset = 0xc8 */
    jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t PHY_LANE0_RX_CDR_FREQ_LK_STS; /*< Address offset = 0xcc */
    jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t PHY_LANE0_RX_EQ_ADAPT_STS; /*< Address offset = 0xd0 */
    jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t PHY_LANE0_RX_EYE_MEAS_STS; /*< Address offset = 0xd4 */
    jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t PHY_LANE0_RX_TERM_HIZ_EN; /*< Address offset = 0xd8 */
    const uint8_t        reservedArea4 [36];  /*< Address offset = 0xdc */
    jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t PHY_LANE0_PIPEPCS_EQ_INPROGRESS; /*< Address offset = 0x100 */
    jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t PHY_LANE0_PIPEPCS_EQ_TRAINING; /*< Address offset = 0x104 */
    jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t PHY_LANE0_PIPEPCS_TXDETECTRX_REQ; /*< Address offset = 0x108 */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t PHY_LANE0_PIPEPCS_L1SS_RXDET_EN; /*< Address offset = 0x10c */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t PHY_LANE0_PIPEPCS_L1SS_TXCMNMODE_EN; /*< Address offset = 0x110 */
    jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t PHY_LANE0_PIPEPCS_SRIS_EN; /*< Address offset = 0x114 */
    jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t PHY_LANE0_PIPEPCS_LFPS_EN; /*< Address offset = 0x118 */
    jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t PHY_LANE0_PIPEPCS_TXBEACON_EN; /*< Address offset = 0x11c */
    jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t PHY_LANE0_PIPEPCS_RXEIOSDETECTSTAT_EN; /*< Address offset = 0x120 */
    jesd_phy_csr_phy_lane_pipepcs_sts_reg_t PHY_LANE0_PIPEPCS_STS; /*< Address offset = 0x124 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0x128 */
    jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t PHY_LANE0_PMA_LN_SPARE_IN; /*< Address offset = 0x130 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t PHY_LANE0_PCS_LN_SPARE_IN; /*< Address offset = 0x134 */
    jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t PHY_LANE0_PMA_LN_SPARE_OUT; /*< Address offset = 0x138 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t PHY_LANE0_PCS_LN_SPARE_OUT; /*< Address offset = 0x13c */
    const uint8_t        reservedArea6 [3776]; /*< Address offset = 0x140 */
    jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t PHY_LANE1_TX_PLL_FORCE_PWR_UP; /*< Address offset = 0x1000 */
    jesd_phy_csr_phy_lane_tx_pstate_reg_t PHY_LANE1_TX_PSTATE; /*< Address offset = 0x1004 */
    jesd_phy_csr_phy_lane_tx_freq_rate_reg_t PHY_LANE1_TX_FREQ_RATE; /*< Address offset = 0x1008 */
    jesd_phy_csr_phy_lane_tx_rate_div_reg_t PHY_LANE1_TX_RATE_DIV; /*< Address offset = 0x100c */
    jesd_phy_csr_phy_lane_tx_mod_reg_t PHY_LANE1_TX_MOD; /*< Address offset = 0x1010 */
    jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t PHY_LANE1_TX_DATA_CLK_DIV_RATE; /*< Address offset = 0x1014 */
    jesd_phy_csr_phy_lane_tx_elec_idle_reg_t PHY_LANE1_TX_ELEC_IDLE; /*< Address offset = 0x1018 */
    const uint8_t        reservedArea7 [4];   /*< Address offset = 0x101c */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t PHY_LANE1_TX_FFE_COEFF_CM; /*< Address offset = 0x1020 */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t PHY_LANE1_TX_FFE_COEFF_CP; /*< Address offset = 0x1024 */
    const uint8_t        reservedArea8 [24];  /*< Address offset = 0x1028 */
    jesd_phy_csr_phy_lane_rx_pstate_reg_t PHY_LANE1_RX_PSTATE; /*< Address offset = 0x1040 */
    jesd_phy_csr_phy_lane_rx_freq_rate_reg_t PHY_LANE1_RX_FREQ_RATE; /*< Address offset = 0x1044 */
    jesd_phy_csr_phy_lane_rx_mode_sel_reg_t PHY_LANE1_RX_MODE_SEL; /*< Address offset = 0x1048 */
    jesd_phy_csr_phy_lane_rx_mod_reg_t PHY_LANE1_RX_MOD; /*< Address offset = 0x104c */
    jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t PHY_LANE1_RX_OVR_SMPL; /*< Address offset = 0x1050 */
    jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t PHY_LANE1_RX_EQ_PRECAL_SEL; /*< Address offset = 0x1054 */
    jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t PHY_LANE1_RX_EQ_STATIC_EN; /*< Address offset = 0x1058 */
    jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t PHY_LANE1_RX_EQ_ADPAT_START; /*< Address offset = 0x105c */
    jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t PHY_LANE1_RX_EYE_MEAS_START; /*< Address offset = 0x1060 */
    const uint8_t        reservedArea9 [28];  /*< Address offset = 0x1064 */
    jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t PHY_LANE1_TX_PLL_RDY; /*< Address offset = 0x1080 */
    jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t PHY_LANE1_TX_CFG_STS; /*< Address offset = 0x1084 */
    const uint8_t        reservedArea10 [56]; /*< Address offset = 0x1088 */
    jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t PHY_LANE1_RX_CFG_STS; /*< Address offset = 0x10c0 */
    jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t PHY_LANE1_RX_CDR_LK2_DATA; /*< Address offset = 0x10c4 */
    jesd_phy_csr_phy_lane_rx_sig_detect_reg_t PHY_LANE1_RX_SIG_DETECT; /*< Address offset = 0x10c8 */
    jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t PHY_LANE1_RX_CDR_FREQ_LK_STS; /*< Address offset = 0x10cc */
    jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t PHY_LANE1_RX_EQ_ADAPT_STS; /*< Address offset = 0x10d0 */
    jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t PHY_LANE1_RX_EYE_MEAS_STS; /*< Address offset = 0x10d4 */
    jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t PHY_LANE1_RX_TERM_HIZ_EN; /*< Address offset = 0x10d8 */
    const uint8_t        reservedArea11 [36]; /*< Address offset = 0x10dc */
    jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t PHY_LANE1_PIPEPCS_EQ_INPROGRESS; /*< Address offset = 0x1100 */
    jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t PHY_LANE1_PIPEPCS_EQ_TRAINING; /*< Address offset = 0x1104 */
    jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t PHY_LANE1_PIPEPCS_TXDETECTRX_REQ; /*< Address offset = 0x1108 */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t PHY_LANE1_PIPEPCS_L1SS_RXDET_EN; /*< Address offset = 0x110c */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t PHY_LANE1_PIPEPCS_L1SS_TXCMNMODE_EN; /*< Address offset = 0x1110 */
    jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t PHY_LANE1_PIPEPCS_SRIS_EN; /*< Address offset = 0x1114 */
    jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t PHY_LANE1_PIPEPCS_LFPS_EN; /*< Address offset = 0x1118 */
    jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t PHY_LANE1_PIPEPCS_TXBEACON_EN; /*< Address offset = 0x111c */
    jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t PHY_LANE1_PIPEPCS_RXEIOSDETECTSTAT_EN; /*< Address offset = 0x1120 */
    jesd_phy_csr_phy_lane_pipepcs_sts_reg_t PHY_LANE1_PIPEPCS_STS; /*< Address offset = 0x1124 */
    const uint8_t        reservedArea12 [8];  /*< Address offset = 0x1128 */
    jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t PHY_LANE1_PMA_LN_SPARE_IN; /*< Address offset = 0x1130 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t PHY_LANE1_PCS_LN_SPARE_IN; /*< Address offset = 0x1134 */
    jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t PHY_LANE1_PMA_LN_SPARE_OUT; /*< Address offset = 0x1138 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t PHY_LANE1_PCS_LN_SPARE_OUT; /*< Address offset = 0x113c */
    const uint8_t        reservedArea13 [3776]; /*< Address offset = 0x1140 */
    jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t PHY_LANE2_TX_PLL_FORCE_PWR_UP; /*< Address offset = 0x2000 */
    jesd_phy_csr_phy_lane_tx_pstate_reg_t PHY_LANE2_TX_PSTATE; /*< Address offset = 0x2004 */
    jesd_phy_csr_phy_lane_tx_freq_rate_reg_t PHY_LANE2_TX_FREQ_RATE; /*< Address offset = 0x2008 */
    jesd_phy_csr_phy_lane_tx_rate_div_reg_t PHY_LANE2_TX_RATE_DIV; /*< Address offset = 0x200c */
    jesd_phy_csr_phy_lane_tx_mod_reg_t PHY_LANE2_TX_MOD; /*< Address offset = 0x2010 */
    jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t PHY_LANE2_TX_DATA_CLK_DIV_RATE; /*< Address offset = 0x2014 */
    jesd_phy_csr_phy_lane_tx_elec_idle_reg_t PHY_LANE2_TX_ELEC_IDLE; /*< Address offset = 0x2018 */
    const uint8_t        reservedArea14 [4];  /*< Address offset = 0x201c */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t PHY_LANE2_TX_FFE_COEFF_CM; /*< Address offset = 0x2020 */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t PHY_LANE2_TX_FFE_COEFF_CP; /*< Address offset = 0x2024 */
    const uint8_t        reservedArea15 [24]; /*< Address offset = 0x2028 */
    jesd_phy_csr_phy_lane_rx_pstate_reg_t PHY_LANE2_RX_PSTATE; /*< Address offset = 0x2040 */
    jesd_phy_csr_phy_lane_rx_freq_rate_reg_t PHY_LANE2_RX_FREQ_RATE; /*< Address offset = 0x2044 */
    jesd_phy_csr_phy_lane_rx_mode_sel_reg_t PHY_LANE2_RX_MODE_SEL; /*< Address offset = 0x2048 */
    jesd_phy_csr_phy_lane_rx_mod_reg_t PHY_LANE2_RX_MOD; /*< Address offset = 0x204c */
    jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t PHY_LANE2_RX_OVR_SMPL; /*< Address offset = 0x2050 */
    jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t PHY_LANE2_RX_EQ_PRECAL_SEL; /*< Address offset = 0x2054 */
    jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t PHY_LANE2_RX_EQ_STATIC_EN; /*< Address offset = 0x2058 */
    jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t PHY_LANE2_RX_EQ_ADPAT_START; /*< Address offset = 0x205c */
    jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t PHY_LANE2_RX_EYE_MEAS_START; /*< Address offset = 0x2060 */
    const uint8_t        reservedArea16 [28]; /*< Address offset = 0x2064 */
    jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t PHY_LANE2_TX_PLL_RDY; /*< Address offset = 0x2080 */
    jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t PHY_LANE2_TX_CFG_STS; /*< Address offset = 0x2084 */
    const uint8_t        reservedArea17 [56]; /*< Address offset = 0x2088 */
    jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t PHY_LANE2_RX_CFG_STS; /*< Address offset = 0x20c0 */
    jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t PHY_LANE2_RX_CDR_LK2_DATA; /*< Address offset = 0x20c4 */
    jesd_phy_csr_phy_lane_rx_sig_detect_reg_t PHY_LANE2_RX_SIG_DETECT; /*< Address offset = 0x20c8 */
    jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t PHY_LANE2_RX_CDR_FREQ_LK_STS; /*< Address offset = 0x20cc */
    jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t PHY_LANE2_RX_EQ_ADAPT_STS; /*< Address offset = 0x20d0 */
    jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t PHY_LANE2_RX_EYE_MEAS_STS; /*< Address offset = 0x20d4 */
    jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t PHY_LANE2_RX_TERM_HIZ_EN; /*< Address offset = 0x20d8 */
    const uint8_t        reservedArea18 [36]; /*< Address offset = 0x20dc */
    jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t PHY_LANE2_PIPEPCS_EQ_INPROGRESS; /*< Address offset = 0x2100 */
    jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t PHY_LANE2_PIPEPCS_EQ_TRAINING; /*< Address offset = 0x2104 */
    jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t PHY_LANE2_PIPEPCS_TXDETECTRX_REQ; /*< Address offset = 0x2108 */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t PHY_LANE2_PIPEPCS_L1SS_RXDET_EN; /*< Address offset = 0x210c */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t PHY_LANE2_PIPEPCS_L1SS_TXCMNMODE_EN; /*< Address offset = 0x2110 */
    jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t PHY_LANE2_PIPEPCS_SRIS_EN; /*< Address offset = 0x2114 */
    jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t PHY_LANE2_PIPEPCS_LFPS_EN; /*< Address offset = 0x2118 */
    jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t PHY_LANE2_PIPEPCS_TXBEACON_EN; /*< Address offset = 0x211c */
    jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t PHY_LANE2_PIPEPCS_RXEIOSDETECTSTAT_EN; /*< Address offset = 0x2120 */
    jesd_phy_csr_phy_lane_pipepcs_sts_reg_t PHY_LANE2_PIPEPCS_STS; /*< Address offset = 0x2124 */
    const uint8_t        reservedArea19 [8];  /*< Address offset = 0x2128 */
    jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t PHY_LANE2_PMA_LN_SPARE_IN; /*< Address offset = 0x2130 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t PHY_LANE2_PCS_LN_SPARE_IN; /*< Address offset = 0x2134 */
    jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t PHY_LANE2_PMA_LN_SPARE_OUT; /*< Address offset = 0x2138 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t PHY_LANE2_PCS_LN_SPARE_OUT; /*< Address offset = 0x213c */
    const uint8_t        reservedArea20 [3776]; /*< Address offset = 0x2140 */
    jesd_phy_csr_phy_lane_tx_pll_force_pwr_up_reg_t PHY_LANE3_TX_PLL_FORCE_PWR_UP; /*< Address offset = 0x3000 */
    jesd_phy_csr_phy_lane_tx_pstate_reg_t PHY_LANE3_TX_PSTATE; /*< Address offset = 0x3004 */
    jesd_phy_csr_phy_lane_tx_freq_rate_reg_t PHY_LANE3_TX_FREQ_RATE; /*< Address offset = 0x3008 */
    jesd_phy_csr_phy_lane_tx_rate_div_reg_t PHY_LANE3_TX_RATE_DIV; /*< Address offset = 0x300c */
    jesd_phy_csr_phy_lane_tx_mod_reg_t PHY_LANE3_TX_MOD; /*< Address offset = 0x3010 */
    jesd_phy_csr_phy_lane_tx_data_clk_div_rate_reg_t PHY_LANE3_TX_DATA_CLK_DIV_RATE; /*< Address offset = 0x3014 */
    jesd_phy_csr_phy_lane_tx_elec_idle_reg_t PHY_LANE3_TX_ELEC_IDLE; /*< Address offset = 0x3018 */
    const uint8_t        reservedArea21 [4];  /*< Address offset = 0x301c */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cm_reg_t PHY_LANE3_TX_FFE_COEFF_CM; /*< Address offset = 0x3020 */
    jesd_phy_csr_phy_lane_tx_ffe_coeff_cp_reg_t PHY_LANE3_TX_FFE_COEFF_CP; /*< Address offset = 0x3024 */
    const uint8_t        reservedArea22 [24]; /*< Address offset = 0x3028 */
    jesd_phy_csr_phy_lane_rx_pstate_reg_t PHY_LANE3_RX_PSTATE; /*< Address offset = 0x3040 */
    jesd_phy_csr_phy_lane_rx_freq_rate_reg_t PHY_LANE3_RX_FREQ_RATE; /*< Address offset = 0x3044 */
    jesd_phy_csr_phy_lane_rx_mode_sel_reg_t PHY_LANE3_RX_MODE_SEL; /*< Address offset = 0x3048 */
    jesd_phy_csr_phy_lane_rx_mod_reg_t PHY_LANE3_RX_MOD; /*< Address offset = 0x304c */
    jesd_phy_csr_phy_lane_rx_ovr_smpl_reg_t PHY_LANE3_RX_OVR_SMPL; /*< Address offset = 0x3050 */
    jesd_phy_csr_phy_lane_rx_eq_precal_sel_reg_t PHY_LANE3_RX_EQ_PRECAL_SEL; /*< Address offset = 0x3054 */
    jesd_phy_csr_phy_lane_rx_eq_static_en_reg_t PHY_LANE3_RX_EQ_STATIC_EN; /*< Address offset = 0x3058 */
    jesd_phy_csr_phy_lane_rx_eq_adpat_start_reg_t PHY_LANE3_RX_EQ_ADPAT_START; /*< Address offset = 0x305c */
    jesd_phy_csr_phy_lane_rx_eye_meas_start_reg_t PHY_LANE3_RX_EYE_MEAS_START; /*< Address offset = 0x3060 */
    const uint8_t        reservedArea23 [28]; /*< Address offset = 0x3064 */
    jesd_phy_csr_phy_lane_tx_pll_rdy_reg_t PHY_LANE3_TX_PLL_RDY; /*< Address offset = 0x3080 */
    jesd_phy_csr_phy_lane_tx_cfg_sts_reg_t PHY_LANE3_TX_CFG_STS; /*< Address offset = 0x3084 */
    const uint8_t        reservedArea24 [56]; /*< Address offset = 0x3088 */
    jesd_phy_csr_phy_lane_rx_cfg_sts_reg_t PHY_LANE3_RX_CFG_STS; /*< Address offset = 0x30c0 */
    jesd_phy_csr_phy_lane_rx_cdr_lk2_data_reg_t PHY_LANE3_RX_CDR_LK2_DATA; /*< Address offset = 0x30c4 */
    jesd_phy_csr_phy_lane_rx_sig_detect_reg_t PHY_LANE3_RX_SIG_DETECT; /*< Address offset = 0x30c8 */
    jesd_phy_csr_phy_lane_rx_cdr_freq_lk_sts_reg_t PHY_LANE3_RX_CDR_FREQ_LK_STS; /*< Address offset = 0x30cc */
    jesd_phy_csr_phy_lane_rx_eq_adapt_sts_reg_t PHY_LANE3_RX_EQ_ADAPT_STS; /*< Address offset = 0x30d0 */
    jesd_phy_csr_phy_lane_rx_eye_meas_sts_reg_t PHY_LANE3_RX_EYE_MEAS_STS; /*< Address offset = 0x30d4 */
    jesd_phy_csr_phy_lane_rx_term_hiz_en_reg_t PHY_LANE3_RX_TERM_HIZ_EN; /*< Address offset = 0x30d8 */
    const uint8_t        reservedArea25 [36]; /*< Address offset = 0x30dc */
    jesd_phy_csr_phy_lane_pipepcs_eq_inprogress_reg_t PHY_LANE3_PIPEPCS_EQ_INPROGRESS; /*< Address offset = 0x3100 */
    jesd_phy_csr_phy_lane_pipepcs_eq_training_reg_t PHY_LANE3_PIPEPCS_EQ_TRAINING; /*< Address offset = 0x3104 */
    jesd_phy_csr_phy_lane_pipepcs_txdetectrx_req_reg_t PHY_LANE3_PIPEPCS_TXDETECTRX_REQ; /*< Address offset = 0x3108 */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_rxdet_en_reg_t PHY_LANE3_PIPEPCS_L1SS_RXDET_EN; /*< Address offset = 0x310c */
    jesd_phy_csr_phy_lane_pipepcs_l1ss_txcmnmode_en_reg_t PHY_LANE3_PIPEPCS_L1SS_TXCMNMODE_EN; /*< Address offset = 0x3110 */
    jesd_phy_csr_phy_lane_pipepcs_sris_en_reg_t PHY_LANE3_PIPEPCS_SRIS_EN; /*< Address offset = 0x3114 */
    jesd_phy_csr_phy_lane_pipepcs_lfps_en_reg_t PHY_LANE3_PIPEPCS_LFPS_EN; /*< Address offset = 0x3118 */
    jesd_phy_csr_phy_lane_pipepcs_txbeacon_en_reg_t PHY_LANE3_PIPEPCS_TXBEACON_EN; /*< Address offset = 0x311c */
    jesd_phy_csr_phy_lane_pipepcs_rxeiosdetectstat_en_reg_t PHY_LANE3_PIPEPCS_RXEIOSDETECTSTAT_EN; /*< Address offset = 0x3120 */
    jesd_phy_csr_phy_lane_pipepcs_sts_reg_t PHY_LANE3_PIPEPCS_STS; /*< Address offset = 0x3124 */
    const uint8_t        reservedArea26 [8];  /*< Address offset = 0x3128 */
    jesd_phy_csr_phy_lane_pma_ln_spare_in_reg_t PHY_LANE3_PMA_LN_SPARE_IN; /*< Address offset = 0x3130 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_in_reg_t PHY_LANE3_PCS_LN_SPARE_IN; /*< Address offset = 0x3134 */
    jesd_phy_csr_phy_lane_pma_ln_spare_out_reg_t PHY_LANE3_PMA_LN_SPARE_OUT; /*< Address offset = 0x3138 */
    jesd_phy_csr_phy_lane_pcs_ln_spare_out_reg_t PHY_LANE3_PCS_LN_SPARE_OUT; /*< Address offset = 0x313c */
    const uint8_t        reservedArea27 [3776]; /*< Address offset = 0x3140 */
    jesd_phy_csr_phy_lane_cmn_force_pwrup_reg_t PHY_LANE_CMN_FORCE_PWRUP; /*< Address offset = 0x4000 */
    jesd_phy_csr_phy_lane_cmn_plla_force_pwrup_reg_t PHY_LANE_CMN_PLLA_FORCE_PWRUP; /*< Address offset = 0x4004 */
    jesd_phy_csr_phy_lane_cmn_pllb_force_pwrup_reg_t PHY_LANE_CMN_PLLB_FORCE_PWRUP; /*< Address offset = 0x4008 */
    const uint8_t        reservedArea28 [4];  /*< Address offset = 0x400c */
    jesd_phy_csr_phy_lane_cmn_rdy_reg_t PHY_LANE_CMN_RDY; /*< Address offset = 0x4010 */
    jesd_phy_csr_phy_lane_cmn_plla_rdy_reg_t PHY_LANE_CMN_PLLA_RDY; /*< Address offset = 0x4014 */
    jesd_phy_csr_phy_lane_cmn_pllb_rdy_reg_t PHY_LANE_CMN_PLLB_RDY; /*< Address offset = 0x4018 */
    const uint8_t        reservedArea29 [4];  /*< Address offset = 0x401c */
    jesd_phy_csr_phy_lane_cmn_ucss_spare_in_reg_t PHY_LANE_CMN_UCSS_SPARE_IN; /*< Address offset = 0x4020 */
    jesd_phy_csr_phy_lane_cmn_ucss_spare_out_reg_t PHY_LANE_CMN_UCSS_SPARE_OUT; /*< Address offset = 0x4024 */
    jesd_phy_csr_phy_lane_cmn_pma_spare_cmn_in_reg_t PHY_LANE_CMN_PMA_SPARE_CMN_IN; /*< Address offset = 0x4028 */
    jesd_phy_csr_phy_lane_cmn_pma_spare_cmn_out_reg_t PHY_LANE_CMN_PMA_SPARE_CMN_OUT; /*< Address offset = 0x402c */
    jesd_phy_csr_phy_lane_cmn_pcs_spare_cmn_in_reg_t PHY_LANE_CMN_PCS_SPARE_CMN_IN; /*< Address offset = 0x4030 */
    jesd_phy_csr_phy_lane_cmn_pcs_spare_cmn_out_reg_t PHY_LANE_CMN_PCS_SPARE_CMN_OUT; /*< Address offset = 0x4034 */
    const uint8_t        reservedArea30 [8];  /*< Address offset = 0x4038 */
    jesd_phy_csr_phy_lane_cmn_phy_rx_lane_mux_sel_reg_t PHY_LANE_CMN_PHY_RX_LANE_MUX_SEL; /*< Address offset = 0x4040 */
    jesd_phy_csr_phy_lane_cmn_phy_tx_lane_mux_sel_reg_t PHY_LANE_CMN_PHY_TX_LANE_MUX_SEL; /*< Address offset = 0x4044 */
    jesd_phy_csr_phy_lane_cmn_pma_ref_highz_term_en_reg_t PHY_LANE_CMN_PMA_REF_HIGHZ_TERM_EN; /*< Address offset = 0x4048 */
    const uint8_t        reservedArea31 [4];  /*< Address offset = 0x404c */
    jesd_phy_csr_phy_lane_cmn_phy_irq_intr_reg_t PHY_LANE_CMN_PHY_IRQ_INTR_MAP; /*< Address offset = 0x4050 */
    jesd_phy_csr_phy_lane_cmn_pcs_event_high_intr_en_reg_t PHY_LANE_CMN_PCS_EVENT_HIGH_INTR_EN; /*< Address offset = 0x4054 */
    jesd_phy_csr_phy_lane_cmn_pcs_event_low_intr_en_reg_t PHY_LANE_CMN_PCS_EVENT_LOW_INTR_EN; /*< Address offset = 0x4058 */
    jesd_phy_csr_phy_lane_cmn_pcs_event_alarm_en_reg_t PHY_LANE_CMN_PCS_EVENT_ALARM_EN; /*< Address offset = 0x405c */
    jesd_phy_csr_phy_lane_cmn_phy_err_sts_reg_t PHY_LANE_CMN_PHY_ERR_STS; /*< Address offset = 0x4060 */
    jesd_phy_csr_phy_lane_cmn_phy_err_intr_high_en_reg_t PHY_LANE_CMN_PHY_ERR_INTR_HIGH_EN; /*< Address offset = 0x4064 */
    jesd_phy_csr_phy_lane_cmn_phy_err_intr_low_en_reg_t PHY_LANE_CMN_PHY_ERR_INTR_LOW_EN; /*< Address offset = 0x4068 */
    jesd_phy_csr_phy_lane_cmn_phy_err_alm_en_reg_t PHY_LANE_CMN_PHY_ERR_ALM_EN; /*< Address offset = 0x406c */
    jesd_phy_csr_phy_lane_cmn_phy_err_clr_reg_t PHY_LANE_CMN_PHY_ERR_CLR; /*< Address offset = 0x4070 */
    jesd_phy_csr_phy_lane_cmn_phy_err_frc_reg_t PHY_LANE_CMN_PHY_ERR_FRC; /*< Address offset = 0x4074 */
} jesd_phy_csr_t;     // size: 0x02f4

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_CSR  ((jesd_phy_csr_t*) DLNK_JESD0_PHY_CSR_BASE)
#define DLNK_JESD1_PHY_CSR  ((jesd_phy_csr_t*) DLNK_JESD1_PHY_CSR_BASE)
#define DLNK_JESD2_PHY_CSR  ((jesd_phy_csr_t*) DLNK_JESD2_PHY_CSR_BASE)
#define DLNK_JESD3_PHY_CSR  ((jesd_phy_csr_t*) DLNK_JESD3_PHY_CSR_BASE)

// ******************************************* /Address Space

#endif      // _JESD_PHY_CSR_H_

