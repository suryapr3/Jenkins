#ifndef _RXM_H_
#define _RXM_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define FB_ANT0_RXM0_BASE     ( 0x0502c000 )
#define FB_ANT0_RXM1_BASE     ( 0x0506c000 )
#define FB_ANT1_RXM0_BASE     ( 0x050ac000 )
#define FB_ANT1_RXM1_BASE     ( 0x050ec000 )
#define TRX_ANT0_RXM0_BASE    ( 0x05129400 )
#define TRX_ANT0_RXM1_BASE    ( 0x05139400 )
#define TRX_ANT1_RXM0_BASE    ( 0x05149400 )
#define TRX_ANT1_RXM1_BASE    ( 0x05159400 )
#define TRX_ANT2_RXM0_BASE    ( 0x05169400 )
#define TRX_ANT2_RXM1_BASE    ( 0x05179400 )
#define TRX_ANT3_RXM0_BASE    ( 0x05189400 )
#define TRX_ANT3_RXM1_BASE    ( 0x05199400 )
#define TRX_ANT4_RXM0_BASE    ( 0x051a9400 )
#define TRX_ANT4_RXM1_BASE    ( 0x051b9400 )
#define TRX_ANT5_RXM0_BASE    ( 0x051c9400 )
#define TRX_ANT5_RXM1_BASE    ( 0x051d9400 )
#define TRX_ANT6_RXM0_BASE    ( 0x051e9400 )
#define TRX_ANT6_RXM1_BASE    ( 0x051f9400 )
#define TRX_ANT7_RXM0_BASE    ( 0x05209400 )
#define TRX_ANT7_RXM1_BASE    ( 0x05219400 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RXM_SCRATCH_OFFSET       ( 0x00000000U )
#define RXM_PTI_OFFSET           ( 0x00000004U )
#define RXM_PEAK_INTERVAL_1_OFFSET ( 0x00000008U )
#define RXM_APWR_INTERVAL_1_OFFSET ( 0x0000000cU )
#define RXM_SEL_PS_SRC_OFFSET ( 0x00000010U )
#define RXM_EN_OFFSET        ( 0x00000014U )
#define RXM_PVAL_MEAS_OUT_OFFSET ( 0x00000018U )
#define RXM_APWR_MEAS_OUT_OFFSET ( 0x0000001cU )
#define RXM_PTI_ALARM_CNT_OFFSET ( 0x00000020U )
#define RXM_PEAK_DBG_OFFSET    ( 0x00000024U )
#define RXM_APWR_DBG_OFFSET    ( 0x00000028U )
#define RXM_APB_BRDG_STAT_OFFSET ( 0x00000044U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RXM_SCRATCH_ADR(_BASE)          (( ( _BASE ) + ( RXM_SCRATCH_OFFSET ) ))
#define RXM_PTI_ADR(_BASE)              (( ( _BASE ) + ( RXM_PTI_OFFSET ) ))
#define RXM_PEAK_INTERVAL_1_ADR(_BASE)  (( ( _BASE ) + ( RXM_PEAK_INTERVAL_1_OFFSET ) ))
#define RXM_APWR_INTERVAL_1_ADR(_BASE)  (( ( _BASE ) + ( RXM_APWR_INTERVAL_1_OFFSET ) ))
#define RXM_SEL_PS_SRC_ADR(_BASE)    (( ( _BASE ) + ( RXM_SEL_PS_SRC_OFFSET ) ))
#define RXM_EN_ADR(_BASE)           (( ( _BASE ) + ( RXM_EN_OFFSET ) ))
#define RXM_PVAL_MEAS_OUT_ADR(_BASE)    (( ( _BASE ) + ( RXM_PVAL_MEAS_OUT_OFFSET ) ))
#define RXM_APWR_MEAS_OUT_ADR(_BASE)    (( ( _BASE ) + ( RXM_APWR_MEAS_OUT_OFFSET ) ))
#define RXM_PTI_ALARM_CNT_ADR(_BASE)    (( ( _BASE ) + ( RXM_PTI_ALARM_CNT_OFFSET ) ))
#define RXM_PEAK_DBG_ADR(_BASE)       (( ( _BASE ) + ( RXM_PEAK_DBG_OFFSET ) ))
#define RXM_APWR_DBG_ADR(_BASE)       (( ( _BASE ) + ( RXM_APWR_DBG_OFFSET ) ))
#define RXM_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( RXM_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RXM_REG_RXM_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_SCRATCH
  * RXM Scratch
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch register. Values have no affect on RXM operation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rxm_scratch_reg_t;

#define RXM_SCRATCH_DEFAULT (0x00000000U)
#define RXM_SCRATCH_RD_MASK (0xffffffffU)
#define RXM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch register. Values have no affect on RXM operation.
#define RXM_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define RXM_SCRATCH_SCRATCHPAD_BF_WID (32)
#define RXM_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define RXM_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_PTI register description at address offset 0x4
  *
  * Register default value:        0x00000FFF
  * Register full path in IP: rxm/reg/RXM_PTI
  * Peak Threshold Indicator - PTI
  */

typedef union {
  struct {
    uint32_t PTI_VALUE : 12;
    ///< Peak Threshold Indicator Value Field PTI ouput is asserted if any
    ///< input sample exceeds the PTI Limit programmed by the user.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFF"
    uint32_t PTI_RATE : 4;
    ///< Peak Threshold Indicator Rate Reduction to RCS, JESD or External GPIO.
    ///< Reduction Rate depends on the  core clock rate and the destination.
    ///< Valid Selections are listed below. 0   == PTI Rate Reduced to 4 Clock
    ///< cycles 1   == PTI Rate Reduced to 6 Clock Cycles 2   == PTI Rate Reduced
    ///< to 8 Clock Cycles 3   == PTI Rate Reduced to 9 Clock Cycles 4   ==
    ///< PTI Rate Reduced to 12 Clock Cycles 5   == PTI Rate Reduced to 16
    ///< Clock Cycles 6   == PTI Rate Reduced to 18 Clock Cycles 7   == PTI
    ///< Rate Reduced to 24 Clock Cycles 8   == PTI Rate Reduced by 32 Clock
    ///< Cycles 9   == PTI Rate Reduced by 48 Clock Cycles 10 == PTI Rate Reduced
    ///< by 64 Clock Cycles X == PTI Rate Reduced to 8 Clock cycles (For value
    ///< > nine)
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rxm_pti_reg_t;

#define RXM_PTI_DEFAULT (0x00000fffU)
#define RXM_PTI_RD_MASK (0x0000ffffU)
#define RXM_PTI_WR_MASK (0x0000ffffU)


///< Peak Threshold Indicator Value Field PTI ouput is asserted if any
///< input sample exceeds the PTI Limit programmed by the user.
#define RXM_PTI_VAL_BF_OFF ( 0)
#define RXM_PTI_VAL_BF_WID (12)
#define RXM_PTI_VAL_BF_MSK (0x00000FFF)
#define RXM_PTI_VAL_BF_DEF (0x00000FFF)

///< Peak Threshold Indicator Rate Reduction to RCS, JESD or External GPIO.
///< Reduction Rate depends on the  core clock rate and the destination.
///< Valid Selections are listed below. 0   == PTI Rate Reduced to 4 Clock
///< cycles 1   == PTI Rate Reduced to 6 Clock Cycles 2   == PTI Rate Reduced
///< to 8 Clock Cycles 3   == PTI Rate Reduced to 9 Clock Cycles 4   ==
///< PTI Rate Reduced to 12 Clock Cycles 5   == PTI Rate Reduced to 16
///< Clock Cycles 6   == PTI Rate Reduced to 18 Clock Cycles 7   == PTI
///< Rate Reduced to 24 Clock Cycles 8   == PTI Rate Reduced by 32 Clock
///< Cycles 9   == PTI Rate Reduced by 48 Clock Cycles 10 == PTI Rate Reduced
///< by 64 Clock Cycles X == PTI Rate Reduced to 8 Clock cycles (For value
///< > nine)
#define RXM_PTI_RATE_BF_OFF (12)
#define RXM_PTI_RATE_BF_WID ( 4)
#define RXM_PTI_RATE_BF_MSK (0x0000F000)
#define RXM_PTI_RATE_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_PEAK_INTERVAL_1 register description at address offset 0x8
  *
  * Register default value:        0x00000020
  * Register full path in IP: rxm/reg/RXM_PEAK_INTERVAL_1
  * PVAL Sample Window
  */

typedef union {
  struct {
    uint32_t N1_PVAL : 15;
    ///< User Selects the mesurement interval or window for Peak Value Measurement.</br>
    ///< Value range from 32 to 32,767 clock cycles or blocks </br> Note: </br>
    ///< For 983.04MHZ clock the minimum sample window is 32.</br> For 1.475GHz
    ///< clock the minimum sample window is 48.</br> The maximum sample window
    ///< size is 32,767 for eithere clock rate.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} rxm_peak_interval_1_reg_t;

#define RXM_PEAK_INTERVAL_1_DEFAULT (0x00000020U)
#define RXM_PEAK_INTERVAL_1_RD_MASK (0x00007fffU)
#define RXM_PEAK_INTERVAL_1_WR_MASK (0x00007fffU)


///< User Selects the mesurement interval or window for Peak Value Measurement.</br>
///< Value range from 32 to 32,767 clock cycles or blocks </br> Note: </br>
///< For 983.04MHZ clock the minimum sample window is 32.</br> For 1.475GHz
///< clock the minimum sample window is 48.</br> The maximum sample window
///< size is 32,767 for eithere clock rate.
#define RXM_PEAK_INTERVAL_1_N1_PVAL_BF_OFF ( 0)
#define RXM_PEAK_INTERVAL_1_N1_PVAL_BF_WID (15)
#define RXM_PEAK_INTERVAL_1_N1_PVAL_BF_MSK (0x00007FFF)
#define RXM_PEAK_INTERVAL_1_N1_PVAL_BF_DEF (0x00000020)


/** @brief RXM_REG_RXM_APWR_INTERVAL_1 register description at address offset 0xc
  *
  * Register default value:        0x00000006
  * Register full path in IP: rxm/reg/RXM_APWR_INTERVAL_1
  * Avg_Power Sample Window
  */

typedef union {
  struct {
    uint32_t N1_APWR : 4;
    ///< User Selects the mesurement interval or window for Avg. Power Measurement.</br>
    ///< 0    Selects          64 Samples</br> 1    Selects        128 Samples</br>
    ///< 2    Selects        256 Samples</br> 3    Selects        512 Samples</br>
    ///< 4    Selects     1,024 Samples</br> 5    Selects     2,048 Samples</br>
    ///< 6    Selects     4,096 Samples</br> 7    Selects     8,192 Samples</br>
    ///< 8    Selects   16,384 Samples</br> 9    Selects   32,768 Samples</br>
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} rxm_apwr_interval_1_reg_t;

#define RXM_APWR_INTERVAL_1_DEFAULT (0x00000006U)
#define RXM_APWR_INTERVAL_1_RD_MASK (0x0000000fU)
#define RXM_APWR_INTERVAL_1_WR_MASK (0x0000000fU)


///< User Selects the mesurement interval or window for Avg. Power Measurement.</br>
///< 0    Selects          64 Samples</br> 1    Selects        128 Samples</br>
///< 2    Selects        256 Samples</br> 3    Selects        512 Samples</br>
///< 4    Selects     1,024 Samples</br> 5    Selects     2,048 Samples</br>
///< 6    Selects     4,096 Samples</br> 7    Selects     8,192 Samples</br>
///< 8    Selects   16,384 Samples</br> 9    Selects   32,768 Samples</br>
#define RXM_APWR_INTERVAL_1_N1_APWR_BF_OFF ( 0)
#define RXM_APWR_INTERVAL_1_N1_APWR_BF_WID ( 4)
#define RXM_APWR_INTERVAL_1_N1_APWR_BF_MSK (0x0000000F)
#define RXM_APWR_INTERVAL_1_N1_APWR_BF_DEF (0x00000006)


/** @brief RXM_REG_RXM_SELECT_PS_SRC register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_SELECT_PS_SRC
  * Peak /PowerSample Measurement Selector Register
  */

typedef union {
  struct {
    uint32_t SEL_PS : 1;
    ///< 0 == Selects Average Power Measurement</br> == Selects Peak Value
    ///< Measurement
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rxm_sel_ps_src_reg_t;

#define RXM_SEL_PS_SRC_DEFAULT (0x00000000U)
#define RXM_SEL_PS_SRC_RD_MASK (0x00000001U)
#define RXM_SEL_PS_SRC_WR_MASK (0x00000001U)


///< 0 == Selects Average Power Measurement</br> == Selects Peak Value
///< Measurement
#define RXM_SEL_PS_SRC_SEL_PS_BF_OFF ( 0)
#define RXM_SEL_PS_SRC_SEL_PS_BF_WID ( 1)
#define RXM_SEL_PS_SRC_SEL_PS_BF_MSK (0x00000001)
#define RXM_SEL_PS_SRC_SEL_PS_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_ENABLE register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_ENABLE
  * RXM Enable Register
  */

typedef union {
  struct {
    uint32_t EN_UNIT : 1;
    ///< Enable Measurement Unit. Must be enable to enable any RXM function.
    ///< Note: Set bit 16 to  a 1 to mask a write to this bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EN_N1_PVAL : 1;
    ///< Enable Peak Value N1 Measurement Note: Set bit 17  to a one to mask
    ///< a write to this bit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t EN_N1_APWR : 1;
    ///< Enable Average Power N1 Measurment Note: Set bit 18  to a one to mask
    ///< a write to this bit.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t EN_T1_PTI : 1;
    ///< Enable Saturation ALARM for PTI Note: Set bit 19 to a one to mask
    ///< a write to this bit.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TDD_INIT_STATE : 1;
    ///< When asserted (i.e.1) and TDD is not active (i.e. uplink ==0),</br>
    ///< clears all non-agc related in progress mesaurements and</br> returns
    ///< to Initial State until TDD Active.</br> Else, hold state until TDD
    ///< active (i.e. uplink ==1).</br> Only effects TDD mode where the uplink
    ///< signal is switching between an active and disable state. Note: Set
    ///< bit 20 to a one to mask a write to this bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rxm_en_reg_t;

#define RXM_EN_DEFAULT (0x00000000U)
#define RXM_EN_RD_MASK (0x0000001fU)
#define RXM_EN_WR_MASK (0xffff001fU)


///< Enable Measurement Unit. Must be enable to enable any RXM function.
///< Note: Set bit 16 to  a 1 to mask a write to this bit.
#define RXM_EN_UNIT_BF_OFF ( 0)
#define RXM_EN_UNIT_BF_WID ( 1)
#define RXM_EN_UNIT_BF_MSK (0x00000001)
#define RXM_EN_UNIT_BF_DEF (0x00000000)

///< Enable Peak Value N1 Measurement Note: Set bit 17  to a one to mask
///< a write to this bit.
#define RXM_EN_N1_PVAL_BF_OFF ( 1)
#define RXM_EN_N1_PVAL_BF_WID ( 1)
#define RXM_EN_N1_PVAL_BF_MSK (0x00000002)
#define RXM_EN_N1_PVAL_BF_DEF (0x00000000)

///< Enable Average Power N1 Measurment Note: Set bit 18  to a one to mask
///< a write to this bit.
#define RXM_EN_N1_APWR_BF_OFF ( 2)
#define RXM_EN_N1_APWR_BF_WID ( 1)
#define RXM_EN_N1_APWR_BF_MSK (0x00000004)
#define RXM_EN_N1_APWR_BF_DEF (0x00000000)

///< Enable Saturation ALARM for PTI Note: Set bit 19 to a one to mask
///< a write to this bit.
#define RXM_EN_T1_PTI_BF_OFF ( 3)
#define RXM_EN_T1_PTI_BF_WID ( 1)
#define RXM_EN_T1_PTI_BF_MSK (0x00000008)
#define RXM_EN_T1_PTI_BF_DEF (0x00000000)

///< When asserted (i.e.1) and TDD is not active (i.e. uplink ==0),</br>
///< clears all non-agc related in progress mesaurements and</br> returns
///< to Initial State until TDD Active.</br> Else, hold state until TDD
///< active (i.e. uplink ==1).</br> Only effects TDD mode where the uplink
///< signal is switching between an active and disable state. Note: Set
///< bit 20 to a one to mask a write to this bit.
#define RXM_EN_TDD_INIT_STATE_BF_OFF ( 4)
#define RXM_EN_TDD_INIT_STATE_BF_WID ( 1)
#define RXM_EN_TDD_INIT_STATE_BF_MSK (0x00000010)
#define RXM_EN_TDD_INIT_STATE_BF_DEF (0x00000000)
#define RXM_EN_MASK_BF_OFF (16)
#define RXM_EN_MASK_BF_WID (16)
#define RXM_EN_MASK_BF_MSK (0xFFFF0000)


/** @brief RXM_REG_RXM_PVAL_MEAS_OUT register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_PVAL_MEAS_OUT
  * Peak Value Measurment
  */

typedef union {
  struct {
    uint32_t PEAK_VALUE : 12;
    ///< Peak Value Measured
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t PK_VAL_VALID_N1 : 1;
    ///< Peak Value Valid
    ///< AccessType="RO/C/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} rxm_pval_meas_out_reg_t;

#define RXM_PVAL_MEAS_OUT_DEFAULT (0x00000000U)
#define RXM_PVAL_MEAS_OUT_RD_MASK (0x01000fffU)
#define RXM_PVAL_MEAS_OUT_WR_MASK (0x00000000U)


///< Peak Value Measured
#define RXM_PVAL_MEAS_OUT_PEAK_VAL_BF_OFF ( 0)
#define RXM_PVAL_MEAS_OUT_PEAK_VAL_BF_WID (12)
#define RXM_PVAL_MEAS_OUT_PEAK_VAL_BF_MSK (0x00000FFF)
#define RXM_PVAL_MEAS_OUT_PEAK_VAL_BF_DEF (0x00000000)

///< Peak Value Valid
#define RXM_PVAL_MEAS_OUT_PK_VAL_VALID_N1_BF_OFF (24)
#define RXM_PVAL_MEAS_OUT_PK_VAL_VALID_N1_BF_WID ( 1)
#define RXM_PVAL_MEAS_OUT_PK_VAL_VALID_N1_BF_MSK (0x01000000)
#define RXM_PVAL_MEAS_OUT_PK_VAL_VALID_N1_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_APWR_MEAS_OUT register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_APWR_MEAS_OUT
  * Average Power
  */

typedef union {
  struct {
    uint32_t AVERAGE_POWER : 24;
    ///< Average Power n2
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t AVG_PWR_VALID : 1;
    ///< Average Power n2 Valid
    ///< AccessType="RO/C/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
    uint32_t PTI1 : 1;
    ///< Saturation Alarm PTI1 - Based on Absolute Value Note: See PTI_ALARM_CNT
    ///< register for the number of times the alarm was asserted.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} rxm_apwr_meas_out_reg_t;

#define RXM_APWR_MEAS_OUT_DEFAULT (0x00000000U)
#define RXM_APWR_MEAS_OUT_RD_MASK (0x11ffffffU)
#define RXM_APWR_MEAS_OUT_WR_MASK (0x00000000U)


///< Average Power n2
#define RXM_APWR_MEAS_OUT_AVERAGE_PWR_BF_OFF ( 0)
#define RXM_APWR_MEAS_OUT_AVERAGE_PWR_BF_WID (24)
#define RXM_APWR_MEAS_OUT_AVERAGE_PWR_BF_MSK (0x00FFFFFF)
#define RXM_APWR_MEAS_OUT_AVERAGE_PWR_BF_DEF (0x00000000)

///< Average Power n2 Valid
#define RXM_APWR_MEAS_OUT_AVG_PWR_VALID_BF_OFF (24)
#define RXM_APWR_MEAS_OUT_AVG_PWR_VALID_BF_WID ( 1)
#define RXM_APWR_MEAS_OUT_AVG_PWR_VALID_BF_MSK (0x01000000)
#define RXM_APWR_MEAS_OUT_AVG_PWR_VALID_BF_DEF (0x00000000)

///< Saturation Alarm PTI1 - Based on Absolute Value Note: See PTI_ALARM_CNT
///< register for the number of times the alarm was asserted.
#define RXM_APWR_MEAS_OUT_PTI1_BF_OFF (28)
#define RXM_APWR_MEAS_OUT_PTI1_BF_WID ( 1)
#define RXM_APWR_MEAS_OUT_PTI1_BF_MSK (0x10000000)
#define RXM_APWR_MEAS_OUT_PTI1_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_PTI_ALARM_CNT register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_PTI_ALARM_CNT
  * PTI Saturation Alarm Counter Register
  */

typedef union {
  struct {
    uint32_t PTI_ALARM_COUNT : 32;
    ///< Number of times PTI has been asserted
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rxm_pti_alarm_cnt_reg_t;

#define RXM_PTI_ALARM_CNT_DEFAULT (0x00000000U)
#define RXM_PTI_ALARM_CNT_RD_MASK (0xffffffffU)
#define RXM_PTI_ALARM_CNT_WR_MASK (0x00000000U)


///< Number of times PTI has been asserted
#define RXM_PTI_ALARM_CNT_PTI_ALARM_CNT_BF_OFF ( 0)
#define RXM_PTI_ALARM_CNT_PTI_ALARM_CNT_BF_WID (32)
#define RXM_PTI_ALARM_CNT_PTI_ALARM_CNT_BF_MSK (0xFFFFFFFF)
#define RXM_PTI_ALARM_CNT_PTI_ALARM_CNT_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_PEAK_DEBUG register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_PEAK_DEBUG
  * Debug Peak Status
  */

typedef union {
  struct {
    uint32_t RXM_PK_CNT_N1 : 15;
    ///< Peak Value Counter N1
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXM_PK_ST_N1 : 1;
    ///< Peak State Counter N1
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXM_MEAS_LINK_STAT : 1;
    ///< TDD Meas Link Status 1== Active
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RXM_PS_LINK_STAT : 1;
    ///< TDD PS Link Status 1== Active
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} rxm_peak_dbg_reg_t;

#define RXM_PEAK_DBG_DEFAULT (0x00000000U)
#define RXM_PEAK_DBG_RD_MASK (0x0003ffffU)
#define RXM_PEAK_DBG_WR_MASK (0x00000000U)


///< Peak Value Counter N1
#define RXM_PEAK_DBG_RXM_PK_CNT_N1_BF_OFF ( 0)
#define RXM_PEAK_DBG_RXM_PK_CNT_N1_BF_WID (15)
#define RXM_PEAK_DBG_RXM_PK_CNT_N1_BF_MSK (0x00007FFF)
#define RXM_PEAK_DBG_RXM_PK_CNT_N1_BF_DEF (0x00000000)

///< Peak State Counter N1
#define RXM_PEAK_DBG_RXM_PK_ST_N1_BF_OFF (15)
#define RXM_PEAK_DBG_RXM_PK_ST_N1_BF_WID ( 1)
#define RXM_PEAK_DBG_RXM_PK_ST_N1_BF_MSK (0x00008000)
#define RXM_PEAK_DBG_RXM_PK_ST_N1_BF_DEF (0x00000000)

///< TDD Meas Link Status 1== Active
#define RXM_PEAK_DBG_RXM_MEAS_LINK_STAT_BF_OFF (16)
#define RXM_PEAK_DBG_RXM_MEAS_LINK_STAT_BF_WID ( 1)
#define RXM_PEAK_DBG_RXM_MEAS_LINK_STAT_BF_MSK (0x00010000)
#define RXM_PEAK_DBG_RXM_MEAS_LINK_STAT_BF_DEF (0x00000000)

///< TDD PS Link Status 1== Active
#define RXM_PEAK_DBG_RXM_PS_LINK_STAT_BF_OFF (17)
#define RXM_PEAK_DBG_RXM_PS_LINK_STAT_BF_WID ( 1)
#define RXM_PEAK_DBG_RXM_PS_LINK_STAT_BF_MSK (0x00020000)
#define RXM_PEAK_DBG_RXM_PS_LINK_STAT_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_APWR_DEBUG register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: rxm/reg/RXM_APWR_DEBUG
  * Debug Avg_Power Status
  */

typedef union {
  struct {
    uint32_t RXM_AP_CNT_N1 : 14;
    ///< Avg. Power Counter N1
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t RXM_AP_ST_N1 : 1;
    ///< Avg. Power State Counter N1
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RXM_AP_PS_LINK_STAT : 1;
    ///< TDD PS Link Status 1== Active
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RXM_AP_MEAS_LINK_STAT : 1;
    ///< TDD Meas Link Status 1== Active
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} rxm_apwr_dbg_reg_t;

#define RXM_APWR_DBG_DEFAULT (0x00000000U)
#define RXM_APWR_DBG_RD_MASK (0x0003bfffU)
#define RXM_APWR_DBG_WR_MASK (0x00000000U)


///< Avg. Power Counter N1
#define RXM_APWR_DBG_RXM_AP_CNT_N1_BF_OFF ( 0)
#define RXM_APWR_DBG_RXM_AP_CNT_N1_BF_WID (14)
#define RXM_APWR_DBG_RXM_AP_CNT_N1_BF_MSK (0x00003FFF)
#define RXM_APWR_DBG_RXM_AP_CNT_N1_BF_DEF (0x00000000)

///< Avg. Power State Counter N1
#define RXM_APWR_DBG_RXM_AP_ST_N1_BF_OFF (15)
#define RXM_APWR_DBG_RXM_AP_ST_N1_BF_WID ( 1)
#define RXM_APWR_DBG_RXM_AP_ST_N1_BF_MSK (0x00008000)
#define RXM_APWR_DBG_RXM_AP_ST_N1_BF_DEF (0x00000000)

///< TDD PS Link Status 1== Active
#define RXM_APWR_DBG_RXM_AP_PS_LINK_STAT_BF_OFF (16)
#define RXM_APWR_DBG_RXM_AP_PS_LINK_STAT_BF_WID ( 1)
#define RXM_APWR_DBG_RXM_AP_PS_LINK_STAT_BF_MSK (0x00010000)
#define RXM_APWR_DBG_RXM_AP_PS_LINK_STAT_BF_DEF (0x00000000)

///< TDD Meas Link Status 1== Active
#define RXM_APWR_DBG_RXM_AP_MEAS_LINK_STAT_BF_OFF (17)
#define RXM_APWR_DBG_RXM_AP_MEAS_LINK_STAT_BF_WID ( 1)
#define RXM_APWR_DBG_RXM_AP_MEAS_LINK_STAT_BF_MSK (0x00020000)
#define RXM_APWR_DBG_RXM_AP_MEAS_LINK_STAT_BF_DEF (0x00000000)


/** @brief RXM_REG_RXM_APB_BRIDGE_STATUS register description at address offset 0x44
  *
  * Register default value:        0x00010000
  * Register full path in IP: rxm/reg/RXM_APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} rxm_apb_brdg_stat_reg_t;

#define RXM_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define RXM_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define RXM_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define RXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define RXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define RXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define RXM_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define RXM_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define RXM_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define RXM_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define RXM_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define RXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define RXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define RXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define RXM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define RXM_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define RXM_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define RXM_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define RXM_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define RXM_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define RXM_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define RXM_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define RXM_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define RXM_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define RXM_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define RXM_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define RXM_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RXM_SCRATCH_REG(_BASE) ((rxm_scratch_reg_t*) RXM_SCRATCH_ADR(_BASE))
#define RXM_PTI_REG(_BASE) ((rxm_pti_reg_t*) RXM_PTI_ADR(_BASE))
#define RXM_PEAK_INTERVAL_1_REG(_BASE) ((rxm_peak_interval_1_reg_t*) RXM_PEAK_INTERVAL_1_ADR(_BASE))
#define RXM_APWR_INTERVAL_1_REG(_BASE) ((rxm_apwr_interval_1_reg_t*) RXM_APWR_INTERVAL_1_ADR(_BASE))
#define RXM_SEL_PS_SRC_REG(_BASE) ((rxm_sel_ps_src_reg_t*) RXM_SEL_PS_SRC_ADR(_BASE))
#define RXM_EN_REG(_BASE) ((rxm_en_reg_t*) RXM_EN_ADR(_BASE))
#define RXM_PVAL_MEAS_OUT_REG(_BASE) ((rxm_pval_meas_out_reg_t*) RXM_PVAL_MEAS_OUT_ADR(_BASE))
#define RXM_APWR_MEAS_OUT_REG(_BASE) ((rxm_apwr_meas_out_reg_t*) RXM_APWR_MEAS_OUT_ADR(_BASE))
#define RXM_PTI_ALARM_CNT_REG(_BASE) ((rxm_pti_alarm_cnt_reg_t*) RXM_PTI_ALARM_CNT_ADR(_BASE))
#define RXM_PEAK_DBG_REG(_BASE) ((rxm_peak_dbg_reg_t*) RXM_PEAK_DBG_ADR(_BASE))
#define RXM_APWR_DBG_REG(_BASE) ((rxm_apwr_dbg_reg_t*) RXM_APWR_DBG_ADR(_BASE))
#define RXM_APB_BRDG_STAT_REG(_BASE) ((rxm_apb_brdg_stat_reg_t*) RXM_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rxm_scratch_reg_t RXM_SCRATCH;     /*< Address offset = 0x0 */
    rxm_pti_reg_t RXM_PTI;         /*< Address offset = 0x4 */
    rxm_peak_interval_1_reg_t RXM_PEAK_INTERVAL_1; /*< Address offset = 0x8 */
    rxm_apwr_interval_1_reg_t RXM_APWR_INTERVAL_1; /*< Address offset = 0xc */
    rxm_sel_ps_src_reg_t RXM_SEL_PS_SRC; /*< Address offset = 0x10 */
    rxm_en_reg_t RXM_EN;      /*< Address offset = 0x14 */
    rxm_pval_meas_out_reg_t RXM_PVAL_MEAS_OUT; /*< Address offset = 0x18 */
    rxm_apwr_meas_out_reg_t RXM_APWR_MEAS_OUT; /*< Address offset = 0x1c */
    rxm_pti_alarm_cnt_reg_t RXM_PTI_ALARM_CNT; /*< Address offset = 0x20 */
    rxm_peak_dbg_reg_t RXM_PEAK_DBG;  /*< Address offset = 0x24 */
    rxm_apwr_dbg_reg_t RXM_APWR_DBG;  /*< Address offset = 0x28 */
    const uint8_t        reservedArea0 [24];  /*< Address offset = 0x2c */
    rxm_apb_brdg_stat_reg_t RXM_APB_BRDG_STAT; /*< Address offset = 0x44 */
} rxm_t;     // size: 0x0030

// AddressSpace struct pointer
//
#define FB_ANT0_RXM0     ((rxm_t*) FB_ANT0_RXM0_BASE)
#define FB_ANT0_RXM1     ((rxm_t*) FB_ANT0_RXM1_BASE)
#define FB_ANT1_RXM0     ((rxm_t*) FB_ANT1_RXM0_BASE)
#define FB_ANT1_RXM1     ((rxm_t*) FB_ANT1_RXM1_BASE)
#define TRX_ANT0_RXM0    ((rxm_t*) TRX_ANT0_RXM0_BASE)
#define TRX_ANT0_RXM1    ((rxm_t*) TRX_ANT0_RXM1_BASE)
#define TRX_ANT1_RXM0    ((rxm_t*) TRX_ANT1_RXM0_BASE)
#define TRX_ANT1_RXM1    ((rxm_t*) TRX_ANT1_RXM1_BASE)
#define TRX_ANT2_RXM0    ((rxm_t*) TRX_ANT2_RXM0_BASE)
#define TRX_ANT2_RXM1    ((rxm_t*) TRX_ANT2_RXM1_BASE)
#define TRX_ANT3_RXM0    ((rxm_t*) TRX_ANT3_RXM0_BASE)
#define TRX_ANT3_RXM1    ((rxm_t*) TRX_ANT3_RXM1_BASE)
#define TRX_ANT4_RXM0    ((rxm_t*) TRX_ANT4_RXM0_BASE)
#define TRX_ANT4_RXM1    ((rxm_t*) TRX_ANT4_RXM1_BASE)
#define TRX_ANT5_RXM0    ((rxm_t*) TRX_ANT5_RXM0_BASE)
#define TRX_ANT5_RXM1    ((rxm_t*) TRX_ANT5_RXM1_BASE)
#define TRX_ANT6_RXM0    ((rxm_t*) TRX_ANT6_RXM0_BASE)
#define TRX_ANT6_RXM1    ((rxm_t*) TRX_ANT6_RXM1_BASE)
#define TRX_ANT7_RXM0    ((rxm_t*) TRX_ANT7_RXM0_BASE)
#define TRX_ANT7_RXM1    ((rxm_t*) TRX_ANT7_RXM1_BASE)

// ******************************************* /Address Space

#endif      // _RXM_H_

