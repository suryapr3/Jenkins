#ifndef _FUSE_CLIENT_ECM_H_
#define _FUSE_CLIENT_ECM_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_FUSE_CLIENT_ECM_BASE  ( 0x01f82000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define FUSE_CLIENT_ECM_ID_ECM_ID_0_OFFSET ( 0x00000000U )
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_OFFSET ( 0x00000010U )
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_OFFSET ( 0x00000014U )
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_OFFSET ( 0x00000018U )
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_OFFSET ( 0x0000001cU )
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_OFFSET ( 0x00000020U )
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_OFFSET ( 0x00000030U )
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_OFFSET ( 0x00000034U )
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_OFFSET ( 0x00000038U )
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OFFSET ( 0x00000040U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_OFFSET ( 0x00000050U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_OFFSET ( 0x00000054U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_OFFSET ( 0x00000058U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_OFFSET ( 0x0000005cU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_OFFSET ( 0x00000060U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_OFFSET ( 0x00000064U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_OFFSET ( 0x00000068U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_OFFSET ( 0x0000006cU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_OFFSET ( 0x00000070U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_OFFSET ( 0x00000074U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_OFFSET ( 0x00000078U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_OFFSET ( 0x0000007cU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_OFFSET ( 0x00000080U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_OFFSET ( 0x00000084U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_OFFSET ( 0x00000088U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_OFFSET ( 0x0000008cU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_OFFSET ( 0x00000090U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_OFFSET ( 0x00000094U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_OFFSET ( 0x00000098U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_OFFSET ( 0x0000009cU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_OFFSET ( 0x000000a0U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_OFFSET ( 0x000000a4U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_OFFSET ( 0x000000a8U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_OFFSET ( 0x000000acU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_OFFSET ( 0x000000b0U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_OFFSET ( 0x000000b4U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_OFFSET ( 0x000000b8U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_OFFSET ( 0x000000bcU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_OFFSET ( 0x000000c0U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_OFFSET ( 0x000000c4U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_OFFSET ( 0x000000c8U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_OFFSET ( 0x000000ccU )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_OFFSET ( 0x000000d0U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_OFFSET ( 0x000000d4U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_OFFSET ( 0x000000d8U )
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_OFFSET ( 0x000000dcU )
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OFFSET ( 0x00000100U )
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OFFSET ( 0x00000104U )
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OFFSET ( 0x00000108U )
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OFFSET ( 0x0000010cU )
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OFFSET ( 0x00000110U )
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OFFSET ( 0x00000114U )
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_OFFSET ( 0x00000180U )
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_OFFSET ( 0x00000184U )
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_OFFSET ( 0x00000188U )
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_OFFSET ( 0x0000018cU )
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_OFFSET ( 0x00000190U )
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_OFFSET ( 0x00000194U )
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_OFFSET ( 0x000001b0U )
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_OFFSET ( 0x000001b4U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_ID_ECM_ID_0_OFFSET ) ))
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_OFFSET ) ))
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_OFFSET ) ))
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_OFFSET ) ))
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_OFFSET ) ))
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_LOCK_ECM_LOCK_OFFSET ) ))
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_OFFSET ) ))
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_OFFSET ) ))
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_OFFSET ) ))
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_OFFSET ) ))
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_OFFSET ) ))
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OFFSET ) ))
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OFFSET ) ))
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OFFSET ) ))
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OFFSET ) ))
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OFFSET ) ))
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OFFSET ) ))
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_OFFSET ) ))
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_OFFSET ) ))
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_OFFSET ) ))
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_OFFSET ) ))
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_OFFSET ) ))
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_OFFSET ) ))
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_OFFSET ) ))
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_ADR (( ( SYSCON_FUSE_CLIENT_ECM_BASE ) + ( FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief FUSE_CLIENT_ECM_REG_ECM_ID_REGS_ECM_ID_0 register description at address offset 0x0
  *
  * Register default value:        0x0000EEEE
  * Register full path in IP: fuse_client_ecm/reg/ECM_ID_regs/ecm_id_0
  * ECM_ID::reg_0_S
  */

typedef union {
  struct {
    uint32_t ECM_ID : 16;
    ///< ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0xEEEE"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_ecm_id_ecm_id_0_reg_t;

#define FUSE_CLIENT_ECM_ID_ECM_ID_0_DEFAULT (0x0000eeeeU)
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_RD_MASK (0x0000ffffU)
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_WR_MASK (0x00000000U)


///< ID
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_ECM_ID_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_ECM_ID_BF_WID (16)
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_ECM_ID_BF_MSK (0x0000FFFF)
#define FUSE_CLIENT_ECM_ID_ECM_ID_0_ECM_ID_BF_DEF (0x0000EEEE)


/** @brief FUSE_CLIENT_ECM_REG_ECM_INTEL_TST_REGS_ECM_INTEL_TEST_OEM_SPARE_0 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_INTEL_TST_regs/ecm_intel_test_oem_spare_0
  * ECM_INTEL_TST::reg_0_S
  */

typedef union {
  struct {
    uint32_t INTEL_TEST_OEM_SPARE_0 : 32;
    ///< Lock Reg
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_0_reg_t;

#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_WR_MASK (0x00000000U)


///< Lock Reg
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_INTEL_TEST_OEM_SPARE_0_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_INTEL_TEST_OEM_SPARE_0_BF_WID (32)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_INTEL_TEST_OEM_SPARE_0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_INTEL_TEST_OEM_SPARE_0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_INTEL_TST_REGS_ECM_INTEL_TEST_OEM_SPARE_1 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_INTEL_TST_regs/ecm_intel_test_oem_spare_1
  * ECM_INTEL_TST::reg_1_S
  */

typedef union {
  struct {
    uint32_t INTEL_TEST_OEM_SPARE_1 : 32;
    ///< Lock Reg
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_1_reg_t;

#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_WR_MASK (0x00000000U)


///< Lock Reg
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_INTEL_TEST_OEM_SPARE_1_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_INTEL_TEST_OEM_SPARE_1_BF_WID (32)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_INTEL_TEST_OEM_SPARE_1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_INTEL_TEST_OEM_SPARE_1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_INTEL_TST_REGS_ECM_INTEL_TEST_OEM_SPARE_2 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_INTEL_TST_regs/ecm_intel_test_oem_spare_2
  * ECM_INTEL_TST::reg_2_S
  */

typedef union {
  struct {
    uint32_t INTEL_TEST_OEM_SPARE_2 : 32;
    ///< Lock Reg
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_2_reg_t;

#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_WR_MASK (0x00000000U)


///< Lock Reg
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_INTEL_TEST_OEM_SPARE_2_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_INTEL_TEST_OEM_SPARE_2_BF_WID (32)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_INTEL_TEST_OEM_SPARE_2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_INTEL_TEST_OEM_SPARE_2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_INTEL_TST_REGS_ECM_INTEL_TEST_OEM_SPARE_3 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_INTEL_TST_regs/ecm_intel_test_oem_spare_3
  * ECM_INTEL_TST::reg_3_S
  */

typedef union {
  struct {
    uint32_t INTEL_TEST_OEM_SPARE_3 : 32;
    ///< Lock Reg
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_3_reg_t;

#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_WR_MASK (0x00000000U)


///< Lock Reg
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_INTEL_TEST_OEM_SPARE_3_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_INTEL_TEST_OEM_SPARE_3_BF_WID (32)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_INTEL_TEST_OEM_SPARE_3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_INTEL_TEST_OEM_SPARE_3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_LOCK_REGS_ECM_FUSE_LOCK_REG register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_LOCK_regs/ecm_fuse_lock_reg
  * Write Lock Signals
  */

typedef union {
  struct {
    uint32_t FF_EN : 1;
    ///< Lock Reg - Fuse Force           Locked by: Internal.ff_en; Lock Value:
    ///< 0           Locked by: external.oem_unlock (Policy 5); Lock Value:
    ///< 0
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x0"
    uint32_t SPARE_WE : 1;
    ///< Lock Reg - Locked when value = 0
    ///< AccessType="RW/L" BitOffset="1" ResetValue="0x0"
    uint32_t MAJ_DIS : 1;
    ///< Lock Reg - Locked when value = 1
    ///< AccessType="RW/L" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t DBG_EN : 1;
    ///< Majority Funciton Debug Enable           Locked by: Internal.ff_en;
    ///< Lock Value: 0           Locked by: external.oem_unlock (Policy 5);
    ///< Lock Value: 0
    ///< AccessType="RW/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_lock_ecm_lock_reg_t;

#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_RD_MASK (0x80000007U)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_WR_MASK (0x80000007U)


///< Lock Reg - Fuse Force           Locked by: Internal.ff_en; Lock Value:
///< 0           Locked by: external.oem_unlock (Policy 5); Lock Value:
///< 0
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_FF_EN_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_FF_EN_BF_WID ( 1)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_FF_EN_BF_MSK (0x00000001)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_FF_EN_BF_DEF (0x00000000)

///< Lock Reg - Locked when value = 0
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_SPARE_WE_BF_OFF ( 1)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_SPARE_WE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_SPARE_WE_BF_MSK (0x00000002)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_SPARE_WE_BF_DEF (0x00000000)

///< Lock Reg - Locked when value = 1
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_MAJ_DIS_BF_OFF ( 2)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_MAJ_DIS_BF_WID ( 1)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_MAJ_DIS_BF_MSK (0x00000004)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_MAJ_DIS_BF_DEF (0x00000000)

///< Majority Funciton Debug Enable           Locked by: Internal.ff_en;
///< Lock Value: 0           Locked by: external.oem_unlock (Policy 5);
///< Lock Value: 0
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_DBG_EN_BF_OFF (31)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_DBG_EN_BF_WID ( 1)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_DBG_EN_BF_MSK (0x80000000)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_DBG_EN_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_ACCESS_REGS_ECM_ACCESS_REG_0 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_ACCESS_regs/ecm_access_reg_0
  * ECM_ACCESS::reg_0_S
  */

typedef union {
  struct {
    uint32_t SBB_MEAS_HASH_ALGO : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_ecm_access_ecm_access_0_reg_t;

#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_RD_MASK (0x0000000fU)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_WR_MASK (0x0000000fU)


///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_SBB_MEAS_HASH_ALGO_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_SBB_MEAS_HASH_ALGO_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_SBB_MEAS_HASH_ALGO_BF_MSK (0x0000000F)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_SBB_MEAS_HASH_ALGO_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_ACCESS_REGS_ECM_ACCESS_REG_1 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_ACCESS_regs/ecm_access_reg_1
  * ECM_ACCESS::reg_1_S
  */

typedef union {
  struct {
    uint32_t SBB_MEAS_REG_ACCESS_01 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_02 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_03 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_04 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_05 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_06 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="20" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_07 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="24" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_08 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_access_ecm_access_1_reg_t;

#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_WR_MASK (0xffffffffU)


///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_01_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_01_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_01_BF_MSK (0x0000000F)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_01_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_02_BF_OFF ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_02_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_02_BF_MSK (0x000000F0)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_02_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_03_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_03_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_03_BF_MSK (0x00000F00)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_03_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_04_BF_OFF (12)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_04_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_04_BF_MSK (0x0000F000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_04_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_05_BF_OFF (16)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_05_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_05_BF_MSK (0x000F0000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_05_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_06_BF_OFF (20)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_06_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_06_BF_MSK (0x00F00000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_06_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_07_BF_OFF (24)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_07_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_07_BF_MSK (0x0F000000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_07_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_08_BF_OFF (28)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_08_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_08_BF_MSK (0xF0000000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_SBB_MEAS_ACCESS_08_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_ACCESS_REGS_ECM_ACCESS_REG_2 register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_ACCESS_regs/ecm_access_reg_2
  * ECM_ACCESS::reg_2_S
  */

typedef union {
  struct {
    uint32_t SBB_MEAS_REG_ACCESS_09 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_10 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_11 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_12 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_13 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_14 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="20" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_15 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="24" ResetValue="0x0"
    uint32_t SBB_MEAS_REG_ACCESS_16 : 4;
    ///< Access           Locked by: external.ff_rev (product of three fuse
    ///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_access_ecm_access_2_reg_t;

#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_WR_MASK (0xffffffffU)


///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_09_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_09_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_09_BF_MSK (0x0000000F)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_09_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_10_BF_OFF ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_10_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_10_BF_MSK (0x000000F0)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_10_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_11_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_11_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_11_BF_MSK (0x00000F00)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_11_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_12_BF_OFF (12)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_12_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_12_BF_MSK (0x0000F000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_12_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_13_BF_OFF (16)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_13_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_13_BF_MSK (0x000F0000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_13_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_14_BF_OFF (20)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_14_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_14_BF_MSK (0x00F00000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_14_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_15_BF_OFF (24)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_15_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_15_BF_MSK (0x0F000000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_15_BF_DEF (0x00000000)

///< Access           Locked by: external.ff_rev (product of three fuse
///< bits FFREVK (13), FFKRO (14) and FFKRORS(15)); Lock value: 0
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_16_BF_OFF (28)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_16_BF_WID ( 4)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_16_BF_MSK (0xF0000000)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_SBB_MEAS_ACCESS_16_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OVRIDE_REGS_ECM_OVRIDE_REG_0 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OVRIDE_regs/ecm_ovride_reg_0
  * ECM_ACC::reg_0_S
  */

typedef union {
  struct {
    uint32_t OEM_KAK0_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_KAK1_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="1" ResetValue="0x0"
    uint32_t OEM_KAK2_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="2" ResetValue="0x0"
    uint32_t SB_KEK0_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="3" ResetValue="0x0"
    uint32_t SB_KEK1_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t SB_KEK2_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="5" ResetValue="0x0"
    uint32_t SRK0_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="6" ResetValue="0x0"
    uint32_t SRK1_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="7" ResetValue="0x0"
    uint32_t SRK2_REVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t JCD0 : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="9" ResetValue="0x0"
    uint32_t JCD1 : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="10" ResetValue="0x0"
    uint32_t JDO : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="11" ResetValue="0x0"
    uint32_t JDORS : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t FFKRO : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="13" ResetValue="0x0"
    uint32_t FFKRORS : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="14" ResetValue="0x0"
    uint32_t ZPEK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="15" ResetValue="0x0"
    uint32_t SBE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t FIPSTE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="17" ResetValue="0x0"
    uint32_t BSD : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="18" ResetValue="0x0"
    uint32_t FFREVK : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="19" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t SPI_DISABLE_OEM_FUSE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="24" ResetValue="0x0"
    uint32_t SPI_AXI_SECURE_MODE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="25" ResetValue="0x0"
    uint32_t PCIE_OEM_DISABLE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="26" ResetValue="0x0"
    uint32_t PCIE_APP_SRIS_MODE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="27" ResetValue="0x0"
    uint32_t PCIE_DIS_IDE_POR_SELFTEST : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t PCIE_AXI_SECURE_MODE : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="29" ResetValue="0x0"
    uint32_t PLL_24G0 : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="30" ResetValue="0x0"
    uint32_t PLL_24G1 : 1;
    ///< Override
    ///< AccessType="RW/1S/V/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_ovride_ecm_ovride_0_reg_t;

#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_RD_MASK (0xff0fffffU)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_WR_MASK (0xff0fffffU)


///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK0_REVK_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK0_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK0_REVK_BF_MSK (0x00000001)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK0_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK1_REVK_BF_OFF ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK1_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK1_REVK_BF_MSK (0x00000002)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK1_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK2_REVK_BF_OFF ( 2)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK2_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK2_REVK_BF_MSK (0x00000004)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_OEM_KAK2_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK0_REVK_BF_OFF ( 3)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK0_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK0_REVK_BF_MSK (0x00000008)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK0_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK1_REVK_BF_OFF ( 4)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK1_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK1_REVK_BF_MSK (0x00000010)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK1_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK2_REVK_BF_OFF ( 5)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK2_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK2_REVK_BF_MSK (0x00000020)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SB_KEK2_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK0_REVK_BF_OFF ( 6)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK0_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK0_REVK_BF_MSK (0x00000040)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK0_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK1_REVK_BF_OFF ( 7)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK1_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK1_REVK_BF_MSK (0x00000080)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK1_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK2_REVK_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK2_REVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK2_REVK_BF_MSK (0x00000100)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SRK2_REVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD0_BF_OFF ( 9)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD0_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD0_BF_MSK (0x00000200)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD0_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD1_BF_OFF (10)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD1_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD1_BF_MSK (0x00000400)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JCD1_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDO_BF_OFF (11)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDO_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDO_BF_MSK (0x00000800)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDO_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDORS_BF_OFF (12)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDORS_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDORS_BF_MSK (0x00001000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_JDORS_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRO_BF_OFF (13)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRO_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRO_BF_MSK (0x00002000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRO_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRORS_BF_OFF (14)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRORS_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRORS_BF_MSK (0x00004000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFKRORS_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_ZPEK_BF_OFF (15)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_ZPEK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_ZPEK_BF_MSK (0x00008000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_ZPEK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SBE_BF_OFF (16)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SBE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SBE_BF_MSK (0x00010000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SBE_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FIPSTE_BF_OFF (17)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FIPSTE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FIPSTE_BF_MSK (0x00020000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FIPSTE_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_BSD_BF_OFF (18)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_BSD_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_BSD_BF_MSK (0x00040000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_BSD_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFREVK_BF_OFF (19)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFREVK_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFREVK_BF_MSK (0x00080000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_FFREVK_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_DIS_OEM_FUSE_BF_OFF (24)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_DIS_OEM_FUSE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_DIS_OEM_FUSE_BF_MSK (0x01000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_DIS_OEM_FUSE_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_AXI_SECURE_MODE_BF_OFF (25)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_AXI_SECURE_MODE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_AXI_SECURE_MODE_BF_MSK (0x02000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_SPI_AXI_SECURE_MODE_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_OEM_DIS_BF_OFF (26)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_OEM_DIS_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_OEM_DIS_BF_MSK (0x04000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_OEM_DIS_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_APP_SRIS_MODE_BF_OFF (27)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_APP_SRIS_MODE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_APP_SRIS_MODE_BF_MSK (0x08000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_APP_SRIS_MODE_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_DIS_IDE_POR_SELFTEST_BF_OFF (28)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_DIS_IDE_POR_SELFTEST_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_DIS_IDE_POR_SELFTEST_BF_MSK (0x10000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_DIS_IDE_POR_SELFTEST_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_AXI_SECURE_MODE_BF_OFF (29)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_AXI_SECURE_MODE_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_AXI_SECURE_MODE_BF_MSK (0x20000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PCIE_AXI_SECURE_MODE_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G0_BF_OFF (30)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G0_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G0_BF_MSK (0x40000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G0_BF_DEF (0x00000000)

///< Override
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G1_BF_OFF (31)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G1_BF_WID ( 1)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G1_BF_MSK (0x80000000)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_PLL_24G1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_00 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_00
  * ECM_RB_ENTR::reg_00_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_00_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_01 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_01
  * ECM_RB_ENTR::reg_01_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_01_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_02 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_02
  * ECM_RB_ENTR::reg_02_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_02_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_03 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_03
  * ECM_RB_ENTR::reg_03_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_03_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_10 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_10
  * ECM_RB_ENTR::reg_10_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_10_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_11 register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_11
  * ECM_RB_ENTR::reg_11_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_11_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_12 register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_12
  * ECM_RB_ENTR::reg_12_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_12_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_13 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_13
  * ECM_RB_ENTR::reg_13_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_13_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_20 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_20
  * ECM_RB_ENTR::reg_20_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_20_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_21 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_21
  * ECM_RB_ENTR::reg_21_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_21_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_22 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_22
  * ECM_RB_ENTR::reg_22_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_22_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_23 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_23
  * ECM_RB_ENTR::reg_23_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_23_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_30 register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_30
  * ECM_RB_ENTR::reg_30_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_30_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_31 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_31
  * ECM_RB_ENTR::reg_31_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_31_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_32 register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_32
  * ECM_RB_ENTR::reg_32_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_32_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_33 register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_33
  * ECM_RB_ENTR::reg_33_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_33_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_40 register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_40
  * ECM_RB_ENTR::reg_40_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_40_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_41 register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_41
  * ECM_RB_ENTR::reg_41_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_41_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_42 register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_42
  * ECM_RB_ENTR::reg_42_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_42_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_43 register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_43
  * ECM_RB_ENTR::reg_43_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_43_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_50 register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_50
  * ECM_RB_ENTR::reg_50_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_50_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_51 register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_51
  * ECM_RB_ENTR::reg_51_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_51_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_52 register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_52
  * ECM_RB_ENTR::reg_52_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_52_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_53 register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_53
  * ECM_RB_ENTR::reg_53_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_53_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_60 register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_60
  * ECM_RB_ENTR::reg_60_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_60_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_61 register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_61
  * ECM_RB_ENTR::reg_61_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_61_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_62 register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_62
  * ECM_RB_ENTR::reg_62_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_62_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_63 register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_63
  * ECM_RB_ENTR::reg_63_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_63_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_70 register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_70
  * ECM_RB_ENTR::reg_70_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_70_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_71 register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_71
  * ECM_RB_ENTR::reg_71_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_71_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_72 register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_72
  * ECM_RB_ENTR::reg_72_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_72_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_73 register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_73
  * ECM_RB_ENTR::reg_73_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_73_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_80 register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_80
  * ECM_RB_ENTR::reg_80_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_80_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_81 register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_81
  * ECM_RB_ENTR::reg_81_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_81_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_82 register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_82
  * ECM_RB_ENTR::reg_82_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_82_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_RB_ENTR_REGS_ECM_RB_ENTR_REG_83 register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_RB_ENTR_regs/ecm_rb_entr_reg_83
  * ECM_RB_ENTR::reg_83_S
  */

typedef union {
  struct {
    uint32_t RB_ENTR : 32;
    ///< Revoke
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_rb_entr_ecm_rb_entr_83_reg_t;

#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_WR_MASK (0xffffffffU)


///< Revoke
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_RB_ENTR_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_RB_ENTR_BF_WID (32)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_RB_ENTR_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_RB_ENTR_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_SPARE_MAJ_REGS_ECM_SPARE_MAJ_REG_0 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_SPARE_MAJ_regs/ecm_spare_maj_reg_0
  * ECM_SPARE_MAJ::reg_0_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_MAJ0_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ1_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ2_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ3_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_spare_maj_ecm_spare_maj_0_reg_t;

#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_WR_MASK (0xffffffffU)


///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ0_R0_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ0_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ0_R0_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ0_R0_BF_DEF (0x00000000)

///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ1_R0_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ1_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ1_R0_BF_MSK (0x0000FF00)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ1_R0_BF_DEF (0x00000000)

///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ2_R0_BF_OFF (16)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ2_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ2_R0_BF_MSK (0x00FF0000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ2_R0_BF_DEF (0x00000000)

///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ3_R0_BF_OFF (24)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ3_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ3_R0_BF_MSK (0xFF000000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_OEM_SPARE_MAJ3_R0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_SPARE_MAJ_REGS_ECM_SPARE_MAJ_REG_1 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_SPARE_MAJ_regs/ecm_spare_maj_reg_1
  * ECM_SPARE_MAJ::reg_1_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_MAJ1_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ2_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ3_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ0_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_spare_maj_ecm_spare_maj_1_reg_t;

#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_WR_MASK (0xffffffffU)


///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ1_R1_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ1_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ1_R1_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ1_R1_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ2_R1_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ2_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ2_R1_BF_MSK (0x0000FF00)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ2_R1_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ3_R1_BF_OFF (16)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ3_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ3_R1_BF_MSK (0x00FF0000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ3_R1_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ0_R1_BF_OFF (24)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ0_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ0_R1_BF_MSK (0xFF000000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_OEM_SPARE_MAJ0_R1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_SPARE_MAJ_REGS_ECM_SPARE_MAJ_REG_2 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_SPARE_MAJ_regs/ecm_spare_maj_reg_2
  * ECM_SPARE_MAJ::reg_2_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_MAJ2_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ3_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ0_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ1_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_spare_maj_ecm_spare_maj_2_reg_t;

#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_WR_MASK (0xffffffffU)


///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ2_R2_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ2_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ2_R2_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ2_R2_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ3_R2_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ3_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ3_R2_BF_MSK (0x0000FF00)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ3_R2_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ0_R2_BF_OFF (16)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ0_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ0_R2_BF_MSK (0x00FF0000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ0_R2_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ1_R2_BF_OFF (24)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ1_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ1_R2_BF_MSK (0xFF000000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_OEM_SPARE_MAJ1_R2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_SPARE_MAJ_REGS_ECM_SPARE_MAJ_REG_3 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_SPARE_MAJ_regs/ecm_spare_maj_reg_3
  * ECM_SPARE_MAJ::reg_3_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_MAJ4_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ5_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ6_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ7_R0 : 8;
    ///< Majority
    ///< AccessType="RW/V/L" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_spare_maj_ecm_spare_maj_3_reg_t;

#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_WR_MASK (0xffffffffU)


///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ4_R0_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ4_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ4_R0_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ4_R0_BF_DEF (0x00000000)

///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ5_R0_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ5_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ5_R0_BF_MSK (0x0000FF00)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ5_R0_BF_DEF (0x00000000)

///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ6_R0_BF_OFF (16)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ6_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ6_R0_BF_MSK (0x00FF0000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ6_R0_BF_DEF (0x00000000)

///< Majority
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ7_R0_BF_OFF (24)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ7_R0_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ7_R0_BF_MSK (0xFF000000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_OEM_SPARE_MAJ7_R0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_SPARE_MAJ_REGS_ECM_SPARE_MAJ_REG_4 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_SPARE_MAJ_regs/ecm_spare_maj_reg_4
  * ECM_SPARE_MAJ::reg_4_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_MAJ5_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ6_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ7_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ4_R1 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_spare_maj_ecm_spare_maj_4_reg_t;

#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_WR_MASK (0xffffffffU)


///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ5_R1_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ5_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ5_R1_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ5_R1_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ6_R1_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ6_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ6_R1_BF_MSK (0x0000FF00)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ6_R1_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ7_R1_BF_OFF (16)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ7_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ7_R1_BF_MSK (0x00FF0000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ7_R1_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ4_R1_BF_OFF (24)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ4_R1_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ4_R1_BF_MSK (0xFF000000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_OEM_SPARE_MAJ4_R1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_SPARE_MAJ_REGS_ECM_SPARE_MAJ_REG_5 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_SPARE_MAJ_regs/ecm_spare_maj_reg_5
  * ECM_SPARE_MAJ::reg_5_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_MAJ6_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ7_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ4_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="16" ResetValue="0x0"
    uint32_t OEM_SPARE_MAJ5_R2 : 8;
    ///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
    ///< value: 1
    ///< AccessType="RW/V/L" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_spare_maj_ecm_spare_maj_5_reg_t;

#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_WR_MASK (0xffffffffU)


///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ6_R2_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ6_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ6_R2_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ6_R2_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ7_R2_BF_OFF ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ7_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ7_R2_BF_MSK (0x0000FF00)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ7_R2_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ4_R2_BF_OFF (16)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ4_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ4_R2_BF_MSK (0x00FF0000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ4_R2_BF_DEF (0x00000000)

///< Majority           Locked by: external.SPARE_WE AND MAJ_DIS; Lock
///< value: 1
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ5_R2_BF_OFF (24)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ5_R2_BF_WID ( 8)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ5_R2_BF_MSK (0xFF000000)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_OEM_SPARE_MAJ5_R2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OEM_SPARE_REGS_ECM_OEM_SPARE_REG_0 register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OEM_SPARE_regs/ecm_oem_spare_reg_0
  * ECM_SPARE_MAJ::reg_0_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_0 : 32;
    ///< OEM spare
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_oem_spare_ecm_oem_spare_0_reg_t;

#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_WR_MASK (0xffffffffU)


///< OEM spare
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_OEM_SPARE_0_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_OEM_SPARE_0_BF_WID (32)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_OEM_SPARE_0_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_OEM_SPARE_0_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OEM_SPARE_REGS_ECM_OEM_SPARE_REG_1 register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OEM_SPARE_regs/ecm_oem_spare_reg_1
  * ECM_SPARE_MAJ::reg_1_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_1 : 32;
    ///< OEM spare
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_oem_spare_ecm_oem_spare_1_reg_t;

#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_WR_MASK (0xffffffffU)


///< OEM spare
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_OEM_SPARE_1_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_OEM_SPARE_1_BF_WID (32)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_OEM_SPARE_1_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_OEM_SPARE_1_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OEM_SPARE_REGS_ECM_OEM_SPARE_REG_2 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OEM_SPARE_regs/ecm_oem_spare_reg_2
  * ECM_SPARE_MAJ::reg_2_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_2 : 32;
    ///< OEM spare
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_oem_spare_ecm_oem_spare_2_reg_t;

#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_WR_MASK (0xffffffffU)


///< OEM spare
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_OEM_SPARE_2_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_OEM_SPARE_2_BF_WID (32)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_OEM_SPARE_2_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_OEM_SPARE_2_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OEM_SPARE_REGS_ECM_OEM_SPARE_REG_3 register description at address offset 0x18c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OEM_SPARE_regs/ecm_oem_spare_reg_3
  * ECM_SPARE_MAJ::reg_3_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_3 : 32;
    ///< OEM spare
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_oem_spare_ecm_oem_spare_3_reg_t;

#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_WR_MASK (0xffffffffU)


///< OEM spare
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_OEM_SPARE_3_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_OEM_SPARE_3_BF_WID (32)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_OEM_SPARE_3_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_OEM_SPARE_3_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OEM_SPARE_REGS_ECM_OEM_SPARE_REG_4 register description at address offset 0x190
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OEM_SPARE_regs/ecm_oem_spare_reg_4
  * ECM_SPARE_MAJ::reg_4_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_4 : 32;
    ///< OEM spare
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_oem_spare_ecm_oem_spare_4_reg_t;

#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_WR_MASK (0xffffffffU)


///< OEM spare
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_OEM_SPARE_4_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_OEM_SPARE_4_BF_WID (32)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_OEM_SPARE_4_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_OEM_SPARE_4_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_OEM_SPARE_REGS_ECM_OEM_SPARE_REG_5 register description at address offset 0x194
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_OEM_SPARE_regs/ecm_oem_spare_reg_5
  * ECM_SPARE_MAJ::reg_5_S
  */

typedef union {
  struct {
    uint32_t OEM_SPARE_5 : 32;
    ///< OEM spare
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_oem_spare_ecm_oem_spare_5_reg_t;

#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_WR_MASK (0xffffffffU)


///< OEM spare
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_OEM_SPARE_5_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_OEM_SPARE_5_BF_WID (32)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_OEM_SPARE_5_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_OEM_SPARE_5_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_MAJ_DEBUG_REGS_ECM_MAJFUNC_DEBUG_SEL register description at address offset 0x1b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_MAJ_DEBUG_regs/ecm_majfunc_debug_sel
  * ECM_MAJ_DEBUG::reg_0_S
  */

typedef union {
  struct {
    uint32_t MAJFUNC_DEBUG_SEL : 8;
    ///< Majority Debug Select
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} fuse_client_ecm_maj_dbg_ecm_majfunc_dbg_sel_reg_t;

#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_RD_MASK (0x000000ffU)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_WR_MASK (0x000000ffU)


///< Majority Debug Select
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_MAJFUNC_DBG_SEL_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_MAJFUNC_DBG_SEL_BF_WID ( 8)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_MAJFUNC_DBG_SEL_BF_MSK (0x000000FF)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_MAJFUNC_DBG_SEL_BF_DEF (0x00000000)


/** @brief FUSE_CLIENT_ECM_REG_ECM_MAJ_DEBUG_REGS_ECM_MAJFUNC_DEBUG_VAL register description at address offset 0x1b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: fuse_client_ecm/reg/ECM_MAJ_DEBUG_regs/ecm_majfunc_debug_val
  * ECM_MAJ_DEBUG::reg_1_S
  */

typedef union {
  struct {
    uint32_t MAJFUNC_DEBUG_VALUE : 32;
    ///< Majority Debug Value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} fuse_client_ecm_maj_dbg_ecm_majfunc_dbg_val_reg_t;

#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_DEFAULT (0x00000000U)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_RD_MASK (0xffffffffU)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_WR_MASK (0x00000000U)


///< Majority Debug Value
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_MAJFUNC_DBG_VAL_BF_OFF ( 0)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_MAJFUNC_DBG_VAL_BF_WID (32)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_MAJFUNC_DBG_VAL_BF_MSK (0xFFFFFFFF)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_MAJFUNC_DBG_VAL_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define FUSE_CLIENT_ECM_ID_ECM_ID_0_REG ((fuse_client_ecm_id_ecm_id_0_reg_t*) FUSE_CLIENT_ECM_ID_ECM_ID_0_ADR)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_REG ((fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_0_reg_t*) FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0_ADR)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_REG ((fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_1_reg_t*) FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1_ADR)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_REG ((fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_2_reg_t*) FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2_ADR)
#define FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_REG ((fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_3_reg_t*) FUSE_CLIENT_ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3_ADR)
#define FUSE_CLIENT_ECM_LOCK_ECM_LOCK_REG ((fuse_client_ecm_lock_ecm_lock_reg_t*) FUSE_CLIENT_ECM_LOCK_ECM_LOCK_ADR)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_REG ((fuse_client_ecm_access_ecm_access_0_reg_t*) FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_0_ADR)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_REG ((fuse_client_ecm_access_ecm_access_1_reg_t*) FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_1_ADR)
#define FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_REG ((fuse_client_ecm_access_ecm_access_2_reg_t*) FUSE_CLIENT_ECM_ACCESS_ECM_ACCESS_2_ADR)
#define FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_REG ((fuse_client_ecm_ovride_ecm_ovride_0_reg_t*) FUSE_CLIENT_ECM_OVRIDE_ECM_OVRIDE_0_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_00_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_00_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_01_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_01_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_02_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_02_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_03_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_03_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_10_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_10_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_11_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_11_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_12_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_12_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_13_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_13_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_20_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_20_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_21_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_21_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_22_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_22_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_23_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_23_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_30_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_30_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_31_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_31_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_32_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_32_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_33_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_33_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_40_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_40_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_41_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_41_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_42_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_42_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_43_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_43_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_50_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_50_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_51_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_51_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_52_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_52_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_53_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_53_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_60_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_60_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_61_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_61_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_62_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_62_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_63_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_63_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_70_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_70_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_71_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_71_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_72_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_72_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_73_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_73_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_80_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_80_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_81_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_81_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_82_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_82_ADR)
#define FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_REG ((fuse_client_ecm_rb_entr_ecm_rb_entr_83_reg_t*) FUSE_CLIENT_ECM_RB_ENTR_ECM_RB_ENTR_83_ADR)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_REG ((fuse_client_ecm_spare_maj_ecm_spare_maj_0_reg_t*) FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_0_ADR)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_REG ((fuse_client_ecm_spare_maj_ecm_spare_maj_1_reg_t*) FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_1_ADR)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_REG ((fuse_client_ecm_spare_maj_ecm_spare_maj_2_reg_t*) FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_2_ADR)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_REG ((fuse_client_ecm_spare_maj_ecm_spare_maj_3_reg_t*) FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_3_ADR)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_REG ((fuse_client_ecm_spare_maj_ecm_spare_maj_4_reg_t*) FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_4_ADR)
#define FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_REG ((fuse_client_ecm_spare_maj_ecm_spare_maj_5_reg_t*) FUSE_CLIENT_ECM_SPARE_MAJ_ECM_SPARE_MAJ_5_ADR)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_REG ((fuse_client_ecm_oem_spare_ecm_oem_spare_0_reg_t*) FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_0_ADR)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_REG ((fuse_client_ecm_oem_spare_ecm_oem_spare_1_reg_t*) FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_1_ADR)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_REG ((fuse_client_ecm_oem_spare_ecm_oem_spare_2_reg_t*) FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_2_ADR)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_REG ((fuse_client_ecm_oem_spare_ecm_oem_spare_3_reg_t*) FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_3_ADR)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_REG ((fuse_client_ecm_oem_spare_ecm_oem_spare_4_reg_t*) FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_4_ADR)
#define FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_REG ((fuse_client_ecm_oem_spare_ecm_oem_spare_5_reg_t*) FUSE_CLIENT_ECM_OEM_SPARE_ECM_OEM_SPARE_5_ADR)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_REG ((fuse_client_ecm_maj_dbg_ecm_majfunc_dbg_sel_reg_t*) FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL_ADR)
#define FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_REG ((fuse_client_ecm_maj_dbg_ecm_majfunc_dbg_val_reg_t*) FUSE_CLIENT_ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    fuse_client_ecm_id_ecm_id_0_reg_t ECM_ID_ECM_ID_0; /*< Address offset = 0x0 */
    const uint8_t        reservedArea0 [12];  /*< Address offset = 0x4 */
    fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_0_reg_t ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_0; /*< Address offset = 0x10 */
    fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_1_reg_t ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_1; /*< Address offset = 0x14 */
    fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_2_reg_t ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_2; /*< Address offset = 0x18 */
    fuse_client_ecm_intel_tst_ecm_intel_test_oem_spare_3_reg_t ECM_INTEL_TST_ECM_INTEL_TEST_OEM_SPARE_3; /*< Address offset = 0x1c */
    fuse_client_ecm_lock_ecm_lock_reg_t ECM_LOCK_ECM_LOCK; /*< Address offset = 0x20 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x24 */
    fuse_client_ecm_access_ecm_access_0_reg_t ECM_ACCESS_ECM_ACCESS_0; /*< Address offset = 0x30 */
    fuse_client_ecm_access_ecm_access_1_reg_t ECM_ACCESS_ECM_ACCESS_1; /*< Address offset = 0x34 */
    fuse_client_ecm_access_ecm_access_2_reg_t ECM_ACCESS_ECM_ACCESS_2; /*< Address offset = 0x38 */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0x3c */
    fuse_client_ecm_ovride_ecm_ovride_0_reg_t ECM_OVRIDE_ECM_OVRIDE_0; /*< Address offset = 0x40 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x44 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_00_reg_t ECM_RB_ENTR_ECM_RB_ENTR_00; /*< Address offset = 0x50 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_01_reg_t ECM_RB_ENTR_ECM_RB_ENTR_01; /*< Address offset = 0x54 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_02_reg_t ECM_RB_ENTR_ECM_RB_ENTR_02; /*< Address offset = 0x58 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_03_reg_t ECM_RB_ENTR_ECM_RB_ENTR_03; /*< Address offset = 0x5c */
    fuse_client_ecm_rb_entr_ecm_rb_entr_10_reg_t ECM_RB_ENTR_ECM_RB_ENTR_10; /*< Address offset = 0x60 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_11_reg_t ECM_RB_ENTR_ECM_RB_ENTR_11; /*< Address offset = 0x64 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_12_reg_t ECM_RB_ENTR_ECM_RB_ENTR_12; /*< Address offset = 0x68 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_13_reg_t ECM_RB_ENTR_ECM_RB_ENTR_13; /*< Address offset = 0x6c */
    fuse_client_ecm_rb_entr_ecm_rb_entr_20_reg_t ECM_RB_ENTR_ECM_RB_ENTR_20; /*< Address offset = 0x70 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_21_reg_t ECM_RB_ENTR_ECM_RB_ENTR_21; /*< Address offset = 0x74 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_22_reg_t ECM_RB_ENTR_ECM_RB_ENTR_22; /*< Address offset = 0x78 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_23_reg_t ECM_RB_ENTR_ECM_RB_ENTR_23; /*< Address offset = 0x7c */
    fuse_client_ecm_rb_entr_ecm_rb_entr_30_reg_t ECM_RB_ENTR_ECM_RB_ENTR_30; /*< Address offset = 0x80 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_31_reg_t ECM_RB_ENTR_ECM_RB_ENTR_31; /*< Address offset = 0x84 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_32_reg_t ECM_RB_ENTR_ECM_RB_ENTR_32; /*< Address offset = 0x88 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_33_reg_t ECM_RB_ENTR_ECM_RB_ENTR_33; /*< Address offset = 0x8c */
    fuse_client_ecm_rb_entr_ecm_rb_entr_40_reg_t ECM_RB_ENTR_ECM_RB_ENTR_40; /*< Address offset = 0x90 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_41_reg_t ECM_RB_ENTR_ECM_RB_ENTR_41; /*< Address offset = 0x94 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_42_reg_t ECM_RB_ENTR_ECM_RB_ENTR_42; /*< Address offset = 0x98 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_43_reg_t ECM_RB_ENTR_ECM_RB_ENTR_43; /*< Address offset = 0x9c */
    fuse_client_ecm_rb_entr_ecm_rb_entr_50_reg_t ECM_RB_ENTR_ECM_RB_ENTR_50; /*< Address offset = 0xa0 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_51_reg_t ECM_RB_ENTR_ECM_RB_ENTR_51; /*< Address offset = 0xa4 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_52_reg_t ECM_RB_ENTR_ECM_RB_ENTR_52; /*< Address offset = 0xa8 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_53_reg_t ECM_RB_ENTR_ECM_RB_ENTR_53; /*< Address offset = 0xac */
    fuse_client_ecm_rb_entr_ecm_rb_entr_60_reg_t ECM_RB_ENTR_ECM_RB_ENTR_60; /*< Address offset = 0xb0 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_61_reg_t ECM_RB_ENTR_ECM_RB_ENTR_61; /*< Address offset = 0xb4 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_62_reg_t ECM_RB_ENTR_ECM_RB_ENTR_62; /*< Address offset = 0xb8 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_63_reg_t ECM_RB_ENTR_ECM_RB_ENTR_63; /*< Address offset = 0xbc */
    fuse_client_ecm_rb_entr_ecm_rb_entr_70_reg_t ECM_RB_ENTR_ECM_RB_ENTR_70; /*< Address offset = 0xc0 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_71_reg_t ECM_RB_ENTR_ECM_RB_ENTR_71; /*< Address offset = 0xc4 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_72_reg_t ECM_RB_ENTR_ECM_RB_ENTR_72; /*< Address offset = 0xc8 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_73_reg_t ECM_RB_ENTR_ECM_RB_ENTR_73; /*< Address offset = 0xcc */
    fuse_client_ecm_rb_entr_ecm_rb_entr_80_reg_t ECM_RB_ENTR_ECM_RB_ENTR_80; /*< Address offset = 0xd0 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_81_reg_t ECM_RB_ENTR_ECM_RB_ENTR_81; /*< Address offset = 0xd4 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_82_reg_t ECM_RB_ENTR_ECM_RB_ENTR_82; /*< Address offset = 0xd8 */
    fuse_client_ecm_rb_entr_ecm_rb_entr_83_reg_t ECM_RB_ENTR_ECM_RB_ENTR_83; /*< Address offset = 0xdc */
    const uint8_t        reservedArea4 [32];  /*< Address offset = 0xe0 */
    fuse_client_ecm_spare_maj_ecm_spare_maj_0_reg_t ECM_SPARE_MAJ_ECM_SPARE_MAJ_0; /*< Address offset = 0x100 */
    fuse_client_ecm_spare_maj_ecm_spare_maj_1_reg_t ECM_SPARE_MAJ_ECM_SPARE_MAJ_1; /*< Address offset = 0x104 */
    fuse_client_ecm_spare_maj_ecm_spare_maj_2_reg_t ECM_SPARE_MAJ_ECM_SPARE_MAJ_2; /*< Address offset = 0x108 */
    fuse_client_ecm_spare_maj_ecm_spare_maj_3_reg_t ECM_SPARE_MAJ_ECM_SPARE_MAJ_3; /*< Address offset = 0x10c */
    fuse_client_ecm_spare_maj_ecm_spare_maj_4_reg_t ECM_SPARE_MAJ_ECM_SPARE_MAJ_4; /*< Address offset = 0x110 */
    fuse_client_ecm_spare_maj_ecm_spare_maj_5_reg_t ECM_SPARE_MAJ_ECM_SPARE_MAJ_5; /*< Address offset = 0x114 */
    const uint8_t        reservedArea5 [104]; /*< Address offset = 0x118 */
    fuse_client_ecm_oem_spare_ecm_oem_spare_0_reg_t ECM_OEM_SPARE_ECM_OEM_SPARE_0; /*< Address offset = 0x180 */
    fuse_client_ecm_oem_spare_ecm_oem_spare_1_reg_t ECM_OEM_SPARE_ECM_OEM_SPARE_1; /*< Address offset = 0x184 */
    fuse_client_ecm_oem_spare_ecm_oem_spare_2_reg_t ECM_OEM_SPARE_ECM_OEM_SPARE_2; /*< Address offset = 0x188 */
    fuse_client_ecm_oem_spare_ecm_oem_spare_3_reg_t ECM_OEM_SPARE_ECM_OEM_SPARE_3; /*< Address offset = 0x18c */
    fuse_client_ecm_oem_spare_ecm_oem_spare_4_reg_t ECM_OEM_SPARE_ECM_OEM_SPARE_4; /*< Address offset = 0x190 */
    fuse_client_ecm_oem_spare_ecm_oem_spare_5_reg_t ECM_OEM_SPARE_ECM_OEM_SPARE_5; /*< Address offset = 0x194 */
    const uint8_t        reservedArea6 [24];  /*< Address offset = 0x198 */
    fuse_client_ecm_maj_dbg_ecm_majfunc_dbg_sel_reg_t ECM_MAJ_DBG_ECM_MAJFUNC_DBG_SEL; /*< Address offset = 0x1b0 */
    fuse_client_ecm_maj_dbg_ecm_majfunc_dbg_val_reg_t ECM_MAJ_DBG_ECM_MAJFUNC_DBG_VAL; /*< Address offset = 0x1b4 */
} fuse_client_ecm_t;     // size: 0x00f0

// AddressSpace struct pointer
//
#define SYSCON_FUSE_CLIENT_ECM  ((fuse_client_ecm_t*) SYSCON_FUSE_CLIENT_ECM_BASE)

// ******************************************* /Address Space

#endif      // _FUSE_CLIENT_ECM_H_

