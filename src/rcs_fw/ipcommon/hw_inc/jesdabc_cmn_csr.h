#ifndef _JESDABC_CMN_CSR_H_
#define _JESDABC_CMN_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define DLNK_JESDABC0_CMN_CSR_BASE  0x06707000
#define DLNK_JESDABC1_CMN_CSR_BASE  0x06f07000
#define DLNK_JESDABC2_CMN_CSR_BASE  0x07707000
#define DLNK_JESDABC3_CMN_CSR_BASE  0x07f07000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define JESDABC_CMN_CSR_MEM_SCRATCH_OFFSET ( 0x00000000U )
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_OFFSET ( 0x00000004U )
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_OFFSET ( 0x00000010U )
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_OFFSET ( 0x00000020U )
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_OFFSET ( 0x00000024U )
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_OFFSET ( 0x00000028U )
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_OFFSET ( 0x0000002cU )
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_OFFSET ( 0x00000030U )
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_OFFSET ( 0x00000034U )
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_OFFSET ( 0x00000038U )
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_OFFSET ( 0x0000003cU )
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_OFFSET ( 0x00000040U )
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_OFFSET ( 0x00000044U )
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_OFFSET ( 0x00000048U )
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_OFFSET ( 0x0000004cU )
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_OFFSET ( 0x00000050U )
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_OFFSET ( 0x00000060U )
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_OFFSET ( 0x00000064U )
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_OFFSET ( 0x00000068U )
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_OFFSET ( 0x0000006cU )
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_OFFSET ( 0x00000080U )
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_OFFSET ( 0x00000090U )
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_OFFSET ( 0x00000094U )
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_OFFSET ( 0x00000098U )
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_OFFSET ( 0x0000009cU )
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_OFFSET ( 0x000000a0U )
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_OFFSET ( 0x000000a4U )
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_OFFSET ( 0x000000a8U )
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_OFFSET ( 0x000000acU )
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_OFFSET ( 0x000000b0U )
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_OFFSET ( 0x000000b4U )
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_OFFSET ( 0x000000b8U )
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_OFFSET ( 0x000000bcU )
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_OFFSET ( 0x000000c0U )
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_OFFSET ( 0x000000c4U )
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_OFFSET ( 0x000000c8U )
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_OFFSET ( 0x000000ccU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define JESDABC_CMN_CSR_MEM_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_SCRATCH_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_JESD_MODE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_JESD_MODE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_OFFSET ) ))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_scratch_reg_t;

#define JESDABC_CMN_CSR_MEM_SCRATCH_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_SCRATCH_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESDABC_CMN_CSR_MEM_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESDABC_CMN_CSR_MEM_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESDABC_CMN_CSR_MEM_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_apb_bridge_status_reg_t;

#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_DEFAULT (0x00010000U)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_WID (20)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_MSK (0x000FFFFF)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_DEF (0x00010000)

///< Module Revision Number
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_OFF (20)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_WID ( 8)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_MSK (0x0FF00000)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_OFF (28)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_OFF (29)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_MSK (0x20000000)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_OFF (30)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_MSK (0x40000000)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_OFF (31)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_MSK (0x80000000)
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_JESD_MODE register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_JESD_MODE
  * JESD MODE register
  */

typedef union {
  struct {
    uint32_t JESD_MODE : 1;
    ///< JESD IP Protocol mode.
    ///< t        1'b0 : JESD 204C.
    ///< t           1'b1 : JESD 204D.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_jesd_mode_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_WR_MASK (0x00000001U)


///< JESD IP Protocol mode.
///< t        1'b0 : JESD 204C.
///< t           1'b1 : JESD 204D.
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_JESD_MODE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_JESD_MODE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_JESD_MODE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_JESD_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_IP_CLK_CTRL register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_IP_CLK_CTRL
  * TX/RX IP CLOCK CONTROL register
  */

typedef union {
  struct {
    uint32_t DEV_CLK_MUX_SEL : 2;
    ///< Device clock source mux select.         2'b00 : Device clock = clk_1g.
    ///< 2'b01 : Device clock = clk_1p5g.        2'b10 : Device clock = Serdes
    ///< Common PLL A post divider clock.
    ///< t                      2'b11 : Device clock = Serdes Common PLL B
    ///< post divider clock..
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SMPL_CLK_DIV : 2;
    ///< The clock divider value for IP sample clock.
    ///< t                      2'b00 : Sample clock = Device clock.
    ///< t                      2'b01 : Sample clock = Device clock/2.
    ///< t                     2'b10 : Sample clock = Device clock/4.
    ///< t                      2'b11 : Sample clock = Device clock/8.
    ///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
    ///< outputs by dev_clk_mux_sel.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CHAR_CLK_DIV : 2;
    ///< The clock divider value for IP character clock/RSFEC Clock.
    ///< t                                   2'b00 : Character clock = Device
    ///< clock/2.
    ///< t                      2'b01 : Character clock = Device clock/4.
    ///< t                     2'b10 : Character clock = Device clock/8.
    ///< t                      2'b11 : Character clock = Reserved.
    ///< 2'b00 : RSFEC clock     = Device clock.
    ///< t                      2'b01 : RSFEC clock     = Device clock/2.
    ///< t                     2'b10 : RSFEC clock     = Reserved.
    ///< t                      2'b11 : RSFEC clock     = Reserved.
    ///< RSFEC Clock Frequency should always be 2x Character clock frequency.
    ///< RSFEC clock is used only in JESD 204D mode.            The divide
    ///< ratio 8 for character clock is applicable only in 204C mode.
    ///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
    ///< outputs by dev_clk_mux_sel.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CLK_GEN_MODE : 1;
    ///< The mode of character, sample and RSFEC clocks from repective sources
    ///< is controlled by this bit as below.
    ///< t                                    1'b0 : All generated clocks will
    ///< be off after the reset de-assertion.              The clock generation
    ///< will start only when the clk_gen_enable register is set and input
    ///< sysref pulse is seen.                     In summary sysref pulse
    ///< will start the clocks with posedge alignment.        1'b1 : All generated
    ///< clocks will be off after the reset de-assertion.              The
    ///< clock generation will start once this bit is programmed.
    ///< However the first sysref pulse after the clk_gen_enable register is
    ///< set will re-start the clocks with posedge alignment.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_ip_clk_ctrl_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_RD_MASK (0x0000007fU)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_WR_MASK (0x0000007fU)


///< Device clock source mux select.         2'b00 : Device clock = clk_1g.
///< 2'b01 : Device clock = clk_1p5g.        2'b10 : Device clock = Serdes
///< Common PLL A post divider clock.
///< t                      2'b11 : Device clock = Serdes Common PLL B
///< post divider clock..
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_WID ( 2)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_MSK (0x00000003)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_DEF (0x00000000)

///< The clock divider value for IP sample clock.
///< t                      2'b00 : Sample clock = Device clock.
///< t                      2'b01 : Sample clock = Device clock/2.
///< t                     2'b10 : Sample clock = Device clock/4.
///< t                      2'b11 : Sample clock = Device clock/8.
///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
///< outputs by dev_clk_mux_sel.
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_OFF ( 2)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_WID ( 2)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_MSK (0x0000000C)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_DEF (0x00000000)

///< The clock divider value for IP character clock/RSFEC Clock.
///< t                                   2'b00 : Character clock = Device
///< clock/2.
///< t                      2'b01 : Character clock = Device clock/4.
///< t                     2'b10 : Character clock = Device clock/8.
///< t                      2'b11 : Character clock = Reserved.
///< 2'b00 : RSFEC clock     = Device clock.
///< t                      2'b01 : RSFEC clock     = Device clock/2.
///< t                     2'b10 : RSFEC clock     = Reserved.
///< t                      2'b11 : RSFEC clock     = Reserved.
///< RSFEC Clock Frequency should always be 2x Character clock frequency.
///< RSFEC clock is used only in JESD 204D mode.            The divide
///< ratio 8 for character clock is applicable only in 204C mode.
///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
///< outputs by dev_clk_mux_sel.
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_OFF ( 4)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_WID ( 2)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_MSK (0x00000030)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_DEF (0x00000000)

///< The mode of character, sample and RSFEC clocks from repective sources
///< is controlled by this bit as below.
///< t                                    1'b0 : All generated clocks will
///< be off after the reset de-assertion.              The clock generation
///< will start only when the clk_gen_enable register is set and input
///< sysref pulse is seen.                     In summary sysref pulse
///< will start the clocks with posedge alignment.        1'b1 : All generated
///< clocks will be off after the reset de-assertion.              The
///< clock generation will start once this bit is programmed.
///< However the first sysref pulse after the clk_gen_enable register is
///< set will re-start the clocks with posedge alignment.
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CLK_GEN_MODE_BF_OFF ( 6)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CLK_GEN_MODE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CLK_GEN_MODE_BF_MSK (0x00000040)
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_CLK_GEN_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_SYSREF_TSAD register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_SYSREF_TSAD
  * SYSREF TSAD COUNT register
  */

typedef union {
  struct {
    uint32_t SYSREF_TSAD : 16;
    ///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
    ///< sysref edge.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_sysref_tsad_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_RD_MASK (0x0000ffffU)
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_WR_MASK (0x0000ffffU)


///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
///< sysref edge.
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_SYSREF_TSAD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_SYSREF_TSAD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_SYSREF_TSAD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_SYSREF_TSAD_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_SYNC_POINT_CTRL register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_SYNC_POINT_CTRL
  * SYNC POINT CONTROL register
  */

typedef union {
  struct {
    uint32_t TSP_PERIOD : 16;
    ///< Sync pointer counter period value.Defined in the multiples of LCM
    ///< of clk_1g and clk_1p5g.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SPH_HIGH : 16;
    ///< The counter value at which sync point pulse is generated. This value
    ///< should be less than Sync point counter period.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_sync_point_ctrl_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_WR_MASK (0xffffffffU)


///< Sync pointer counter period value.Defined in the multiples of LCM
///< of clk_1g and clk_1p5g.
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_TSP_PERIOD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_TSP_PERIOD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_TSP_PERIOD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_TSP_PERIOD_BF_DEF (0x00000000)

///< The counter value at which sync point pulse is generated. This value
///< should be less than Sync point counter period.
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_SPH_HIGH_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_SPH_HIGH_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_SPH_HIGH_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_SPH_HIGH_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_IP_SYSREF_CFG register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_IP_SYSREF_CFG
  * IP SYSREF CONFIGURATION register
  */

typedef union {
  struct {
    uint32_t IP_SYSREF_CFG : 1;
    ///< This bit determines the IP sysref generation.       1'b0 : Single
    ///< sysref Pulse will be generated to IP by first input sysref pulse
    ///< after ip_sysref_enable register is set. All subsequent input sysref
    ///< pulses to JESDABC will be ignored.       1'b1 : Multiple sysref pulses
    ///< will be generated to IP when ip_sysref_enable register is set. Note
    ///< that sysref pulses to IP are generated as long as there are input
    ///< sysref pulses to JESDABC.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_ip_sysref_cfg_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_WR_MASK (0x00000001U)


///< This bit determines the IP sysref generation.       1'b0 : Single
///< sysref Pulse will be generated to IP by first input sysref pulse
///< after ip_sysref_enable register is set. All subsequent input sysref
///< pulses to JESDABC will be ignored.       1'b1 : Multiple sysref pulses
///< will be generated to IP when ip_sysref_enable register is set. Note
///< that sysref pulses to IP are generated as long as there are input
///< sysref pulses to JESDABC.
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_CLK_1P5G_DIV_ENABLE register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_CLK_1P5G_DIV_ENABLE
  * CLK 1p5G DIVIDE ENABLE register
  */

typedef union {
  struct {
    uint32_t CLK_1P5G_DIV_ENABLE : 1;
    ///< Enables the clock 1p5G division when set to 1. Used to synchronize
    ///< the divided clock edges with sysref.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_clk_1p5g_div_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_WR_MASK (0x00000001U)


///< Enables the clock 1p5G division when set to 1. Used to synchronize
///< the divided clock edges with sysref.
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_CLK_GEN_ENABLE register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_CLK_GEN_ENABLE
  * CLK GENERATE ENABLE register
  */

typedef union {
  struct {
    uint32_t CLK_GEN_ENABLE : 1;
    ///< Enables the clock division required for JESD IP sample and character
    ///< clock when set to 1. Used to synchronize the divided clock edges with
    ///< sysref
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_clk_gen_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_WR_MASK (0x00000001U)


///< Enables the clock division required for JESD IP sample and character
///< clock when set to 1. Used to synchronize the divided clock edges with
///< sysref
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_IP_SYSREF_ENABLE register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_IP_SYSREF_ENABLE
  * IP SYSREF ENABLE register
  */

typedef union {
  struct {
    uint32_t SYSREF_ENABLE : 1;
    ///< Used to gate the sysref signal to JESD IP. This register need to set
    ///< to 1 to generate sysref pulse to JESD IP.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_ip_sysref_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_WR_MASK (0x00000001U)


///< Used to gate the sysref signal to JESD IP. This register need to set
///< to 1 to generate sysref pulse to JESD IP.
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_SYNC_POINT_CNT_ENABLE register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_SYNC_POINT_CNT_ENABLE
  * SYNC POINT COUNT ENABLE register
  */

typedef union {
  struct {
    uint32_t SYNC_POINT_CNT_ENABLE : 1;
    ///< Enables the sync point counter and sync pulse generation when set
    ///< to 1. Used to synchronize the sync point counter with sysref.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_sync_point_cnt_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_WR_MASK (0x00000001U)


///< Enables the sync point counter and sync pulse generation when set
///< to 1. Used to synchronize the sync point counter with sysref.
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_FRAC_CLK_GEN_EN register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_FRAC_CLK_GEN_EN
  * Fractional clock genration enable register
  */

typedef union {
  struct {
    uint32_t FRAC_CLK_GEN : 1;
    ///< Enables Fractional period clock generation if set to 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_frac_clk_gen_en_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_WR_MASK (0x00000001U)


///< Enables Fractional period clock generation if set to 1.
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_FRAC_CLK_PERIOD_CTL register description at address offset 0x44
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_FRAC_CLK_PERIOD_CTL
  * Fractional Clock divider Control register
  */

typedef union {
  struct {
    uint32_t CLK_REP_P0 : 16;
    ///< Determines number of Repititions of one clock gating control cycle
    ///< ( active followed by inactive ) in the Phase 0 in one gated clock
    ///< period.
    ///< t The value of this filed should be >= 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CLK_REP_P1 : 16;
    ///< Determines number of Repititions of one clock gating control cycle
    ///< ( active followed by inactive ) in the Phase 1 in one LCM clock period.
    ///< t The value of this filed should be >= 0.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_frac_clk_period_ctl_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_DEFAULT (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_WR_MASK (0xffffffffU)


///< Determines number of Repititions of one clock gating control cycle
///< ( active followed by inactive ) in the Phase 0 in one gated clock
///< period.
///< t The value of this filed should be >= 1.
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_DEF (0x00000001)

///< Determines number of Repititions of one clock gating control cycle
///< ( active followed by inactive ) in the Phase 1 in one LCM clock period.
///< t The value of this filed should be >= 0.
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_FRAC_CLK_GATE_CTL_P0 register description at address offset 0x48
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_FRAC_CLK_GATE_CTL_P0
  * Fractional Clock Phase 0 pulse gating control register
  */

typedef union {
  struct {
    uint32_t NH0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 1 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t NL0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 0 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_frac_clk_gate_ctl_p0_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_DEFAULT (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_WR_MASK (0xffffffffU)


///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 1 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NH0_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NH0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NH0_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NH0_BF_DEF (0x00000001)

///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 0 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NL0_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NL0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NL0_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_NL0_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_FRAC_CLK_GATE_CTL_P1 register description at address offset 0x4c
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_FRAC_CLK_GATE_CTL_P1
  * Fractional Clock Phase 1 pulse gating control register
  */

typedef union {
  struct {
    uint32_t NH0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 0 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t NL0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 0 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_frac_clk_gate_ctl_p1_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_DEFAULT (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_WR_MASK (0xffffffffU)


///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 0 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NH0_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NH0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NH0_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NH0_BF_DEF (0x00000001)

///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 0 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NL0_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NL0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NL0_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_NL0_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_NUM_VALID_STR register description at address offset 0x50
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_NUM_VALID_STR
  * JESD TX NUM VALID STREAM
  */

typedef union {
  struct {
    uint32_t TX_NUM_VALID_STR : 16;
    ///< JESD TX number of valid stream with , one hot encoded           ex
    ///< 16'h0001 = one  valid stream               16'h0003    = two valid
    ///< stream
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_num_valid_str_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_DEFAULT (0x0000ffffU)
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_RD_MASK (0x0000ffffU)
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_WR_MASK (0x0000ffffU)


///< JESD TX number of valid stream with , one hot encoded           ex
///< 16'h0001 = one  valid stream               16'h0003    = two valid
///< stream
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_TX_NUM_VALID_STR_BF_DEF (0x0000FFFF)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_BFN_SYSREF_SEL register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_BFN_SYSREF_SEL
  * SYSREF input select Signal for BFN clock syncpoint Logic
  */

typedef union {
  struct {
    uint32_t SYSREF_SEL : 1;
    ///< Selects the SYSREF signal timed wrt 1G or 1p5G clock frequency to
    ///< BFN syncpoint depending upon BFN clock frequency.       1'b0:  Selects
    ///< SYSREF Signal timed wrt to 1G.       1'b1:  Selects SYSREF Signal
    ///< timed wrt to 1p5G.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_bfn_sysref_sel_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_WR_MASK (0x00000001U)


///< Selects the SYSREF signal timed wrt 1G or 1p5G clock frequency to
///< BFN syncpoint depending upon BFN clock frequency.       1'b0:  Selects
///< SYSREF Signal timed wrt to 1G.       1'b1:  Selects SYSREF Signal
///< timed wrt to 1p5G.
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_SYSREF_SEL_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_SYSREF_SEL_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_SYSREF_SEL_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_SYSREF_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_BFN_SYSREF_TSAD register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_BFN_SYSREF_TSAD
  * SYSREF TSAD COUNT register
  */

typedef union {
  struct {
    uint32_t SYSREF_TSAD : 16;
    ///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
    ///< sysref edge.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_bfn_sysref_tsad_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_RD_MASK (0x0000ffffU)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_WR_MASK (0x0000ffffU)


///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
///< sysref edge.
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_BFN_SYNC_POINT_CTRL register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_BFN_SYNC_POINT_CTRL
  * SYNC POINT CONTROL register
  */

typedef union {
  struct {
    uint32_t TSP_PERIOD : 16;
    ///< Sync pointer counter period value.Defined in the multiples of LCM
    ///< of clk_1g and clk_1p5g.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SPH_HIGH : 16;
    ///< The counter value at which sync point pulse is generated. This value
    ///< should be less than Sync point counter period.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_bfn_sync_point_ctrl_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_WR_MASK (0xffffffffU)


///< Sync pointer counter period value.Defined in the multiples of LCM
///< of clk_1g and clk_1p5g.
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_DEF (0x00000000)

///< The counter value at which sync point pulse is generated. This value
///< should be less than Sync point counter period.
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_TX_BFN_SYNC_POINT_CNT_ENABLE register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/TX_BFN_SYNC_POINT_CNT_ENABLE
  * SYNC POINT COUNT ENABLE register
  */

typedef union {
  struct {
    uint32_t SYNC_POINT_CNT_ENABLE : 1;
    ///< Enables the sync point counter and sync pulse generation when set
    ///< to 1. Used to synchronize the sync point counter with sysref.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_tx_bfn_sync_point_cnt_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_WR_MASK (0x00000001U)


///< Enables the sync point counter and sync pulse generation when set
///< to 1. Used to synchronize the sync point counter with sysref.
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_JESD_MODE register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_JESD_MODE
  * JESD MODE register
  */

typedef union {
  struct {
    uint32_t JESD_MODE : 1;
    ///< JESD IP Protocol mode.
    ///< t        1'b0 : JESD 204C.
    ///< t           1'b1 : JESD 204D.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_jesd_mode_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_WR_MASK (0x00000001U)


///< JESD IP Protocol mode.
///< t        1'b0 : JESD 204C.
///< t           1'b1 : JESD 204D.
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_JESD_MODE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_JESD_MODE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_JESD_MODE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_JESD_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_IP_CLK_CTRL register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_IP_CLK_CTRL
  * TX/RX IP CLOCK CONTROL register
  */

typedef union {
  struct {
    uint32_t DEV_CLK_MUX_SEL : 2;
    ///< Device clock source mux select.         2'b00 : Device clock = clk_1g.
    ///< 2'b01 : Device clock = clk_1p5g.        2'b10 : Device clock = Serdes
    ///< Common PLL A post divider clock.
    ///< t                      2'b11 : Device clock = Serdes Common PLL B
    ///< post divider clock..
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SMPL_CLK_DIV : 2;
    ///< The clock divider value for IP sample clock.
    ///< t                      2'b00 : Sample clock = Device clock.
    ///< t                      2'b01 : Sample clock = Device clock/2.
    ///< t                     2'b10 : Sample clock = Device clock/4.
    ///< t                      2'b11 : Sample clock = Device clock/8.
    ///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
    ///< outputs by dev_clk_mux_sel.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CHAR_CLK_DIV : 2;
    ///< The clock divider value for IP character clock/RSFEC Clock.
    ///< t                                   2'b00 : Character clock = Device
    ///< clock/2.
    ///< t                      2'b01 : Character clock = Device clock/4.
    ///< t                     2'b10 : Character clock = Device clock/8.
    ///< t                      2'b11 : Character clock = Reserved.
    ///< 2'b00 : RSFEC clock     = Device clock.
    ///< t                      2'b01 : RSFEC clock     = Device clock/2.
    ///< t                     2'b10 : RSFEC clock     = Reserved.
    ///< t                      2'b11 : RSFEC clock     = Reserved.
    ///< RSFEC Clock Frequency should always be 2x Character clock frequency.
    ///< RSFEC clock is used only in JESD 204D mode.            The divide
    ///< ratio 8 for character clock is applicable only in 204C mode.
    ///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
    ///< outputs by dev_clk_mux_sel.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CLK_GEN_MODE : 1;
    ///< The mode of character, sample and RSFEC clocks from repective sources
    ///< is controlled by this bit as below.
    ///< t                                    1'b0 : All generated clocks will
    ///< be off after the reset de-assertion.              The clock generation
    ///< will start only when the clk_gen_enable register is set and input
    ///< sysref pulse is seen.                     In summary sysref pulse
    ///< will start the clocks with posedge alignment.        1'b1 : All generated
    ///< clocks will be off after the reset de-assertion.              The
    ///< clock generation will start once this bit is programmed.
    ///< However the first sysref pulse after the clk_gen_enable register is
    ///< set will re-start the clocks with posedge alignment.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_ip_clk_ctrl_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_RD_MASK (0x0000007fU)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_WR_MASK (0x0000007fU)


///< Device clock source mux select.         2'b00 : Device clock = clk_1g.
///< 2'b01 : Device clock = clk_1p5g.        2'b10 : Device clock = Serdes
///< Common PLL A post divider clock.
///< t                      2'b11 : Device clock = Serdes Common PLL B
///< post divider clock..
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_WID ( 2)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_MSK (0x00000003)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_DEV_CLK_MUX_SEL_BF_DEF (0x00000000)

///< The clock divider value for IP sample clock.
///< t                      2'b00 : Sample clock = Device clock.
///< t                      2'b01 : Sample clock = Device clock/2.
///< t                     2'b10 : Sample clock = Device clock/4.
///< t                      2'b11 : Sample clock = Device clock/8.
///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
///< outputs by dev_clk_mux_sel.
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_OFF ( 2)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_WID ( 2)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_MSK (0x0000000C)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_SMPL_CLK_DIV_BF_DEF (0x00000000)

///< The clock divider value for IP character clock/RSFEC Clock.
///< t                                   2'b00 : Character clock = Device
///< clock/2.
///< t                      2'b01 : Character clock = Device clock/4.
///< t                     2'b10 : Character clock = Device clock/8.
///< t                      2'b11 : Character clock = Reserved.
///< 2'b00 : RSFEC clock     = Device clock.
///< t                      2'b01 : RSFEC clock     = Device clock/2.
///< t                     2'b10 : RSFEC clock     = Reserved.
///< t                      2'b11 : RSFEC clock     = Reserved.
///< RSFEC Clock Frequency should always be 2x Character clock frequency.
///< RSFEC clock is used only in JESD 204D mode.            The divide
///< ratio 8 for character clock is applicable only in 204C mode.
///< Device clock is selcted from clk_1g/clk_1p5g/serdes post PLL divider
///< outputs by dev_clk_mux_sel.
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_OFF ( 4)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_WID ( 2)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_MSK (0x00000030)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CHAR_CLK_DIV_BF_DEF (0x00000000)

///< The mode of character, sample and RSFEC clocks from repective sources
///< is controlled by this bit as below.
///< t                                    1'b0 : All generated clocks will
///< be off after the reset de-assertion.              The clock generation
///< will start only when the clk_gen_enable register is set and input
///< sysref pulse is seen.                     In summary sysref pulse
///< will start the clocks with posedge alignment.        1'b1 : All generated
///< clocks will be off after the reset de-assertion.              The
///< clock generation will start once this bit is programmed.
///< However the first sysref pulse after the clk_gen_enable register is
///< set will re-start the clocks with posedge alignment.
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CLK_GEN_MODE_BF_OFF ( 6)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CLK_GEN_MODE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CLK_GEN_MODE_BF_MSK (0x00000040)
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_CLK_GEN_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_SYSREF_TSAD register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_SYSREF_TSAD
  * SYSREF TSAD COUNT register
  */

typedef union {
  struct {
    uint32_t SYSREF_TSAD : 16;
    ///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
    ///< sysref edge.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_sysref_tsad_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_RD_MASK (0x0000ffffU)
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_WR_MASK (0x0000ffffU)


///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
///< sysref edge.
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_SYSREF_TSAD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_SYSREF_TSAD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_SYSREF_TSAD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_SYSREF_TSAD_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_SYNC_POINT_CTRL register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_SYNC_POINT_CTRL
  * SYNC POINT CONTROL register
  */

typedef union {
  struct {
    uint32_t TSP_PERIOD : 16;
    ///< Sync pointer counter period value.Defined in the multiples of LCM
    ///< of clk_1g and clk_1p5g.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SPH_HIGH : 16;
    ///< The counter value at which sync point pulse is generated. This value
    ///< should be less than Sync point counter period.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_sync_point_ctrl_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_WR_MASK (0xffffffffU)


///< Sync pointer counter period value.Defined in the multiples of LCM
///< of clk_1g and clk_1p5g.
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_TSP_PERIOD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_TSP_PERIOD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_TSP_PERIOD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_TSP_PERIOD_BF_DEF (0x00000000)

///< The counter value at which sync point pulse is generated. This value
///< should be less than Sync point counter period.
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_SPH_HIGH_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_SPH_HIGH_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_SPH_HIGH_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_SPH_HIGH_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_IP_SYSREF_CFG register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_IP_SYSREF_CFG
  * IP SYSREF CONFIGURATION register
  */

typedef union {
  struct {
    uint32_t IP_SYSREF_CFG : 1;
    ///< This bit determines the IP sysref generation.       1'b0 : Single
    ///< sysref Pulse will be generated to IP by first input sysref pulse
    ///< after ip_sysref_enable register is set. All subsequent input sysref
    ///< pulses to JESDABC will be ignored.       1'b1 : Multiple sysref pulses
    ///< will be generated to IP when ip_sysref_enable register is set. Note
    ///< that sysref pulses to IP are generated as long as there are input
    ///< sysref pulses to JESDABC.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_ip_sysref_cfg_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_WR_MASK (0x00000001U)


///< This bit determines the IP sysref generation.       1'b0 : Single
///< sysref Pulse will be generated to IP by first input sysref pulse
///< after ip_sysref_enable register is set. All subsequent input sysref
///< pulses to JESDABC will be ignored.       1'b1 : Multiple sysref pulses
///< will be generated to IP when ip_sysref_enable register is set. Note
///< that sysref pulses to IP are generated as long as there are input
///< sysref pulses to JESDABC.
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_IP_SYSREF_CFG_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_CLK_1P5G_DIV_ENABLE register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_CLK_1P5G_DIV_ENABLE
  * CLK 1p5G DIVIDE ENABLE register
  */

typedef union {
  struct {
    uint32_t CLK_1P5G_DIV_ENABLE : 1;
    ///< Enables the clock 1p5G division when set to 1. Used to synchronize
    ///< the divided clock edges with sysref.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_clk_1p5g_div_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_WR_MASK (0x00000001U)


///< Enables the clock 1p5G division when set to 1. Used to synchronize
///< the divided clock edges with sysref.
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_CLK_1P5G_DIV_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_CLK_GEN_ENABLE register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_CLK_GEN_ENABLE
  * CLK GENERATE ENABLE register
  */

typedef union {
  struct {
    uint32_t CLK_GEN_ENABLE : 1;
    ///< Enables the clock division required for JESD IP sample and character
    ///< clock when set to 1. Used to synchronize the divided clock edges with
    ///< sysref
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_clk_gen_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_WR_MASK (0x00000001U)


///< Enables the clock division required for JESD IP sample and character
///< clock when set to 1. Used to synchronize the divided clock edges with
///< sysref
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_CLK_GEN_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_IP_SYSREF_ENABLE register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_IP_SYSREF_ENABLE
  * IP SYSREF ENABLE register
  */

typedef union {
  struct {
    uint32_t SYSREF_ENABLE : 1;
    ///< Used to gate the sysref signal to JESD IP. This register need to set
    ///< to 1 to generate sysref pulse to JESD IP.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_ip_sysref_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_WR_MASK (0x00000001U)


///< Used to gate the sysref signal to JESD IP. This register need to set
///< to 1 to generate sysref pulse to JESD IP.
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_SYSREF_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_SYNC_POINT_CNT_ENABLE register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_SYNC_POINT_CNT_ENABLE
  * SYNC POINT COUNT ENABLE register
  */

typedef union {
  struct {
    uint32_t SYNC_POINT_CNT_ENABLE : 1;
    ///< Enables the sync point counter and sync pulse generation when set
    ///< to 1. Used to synchronize the sync point counter with sysref.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_sync_point_cnt_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_WR_MASK (0x00000001U)


///< Enables the sync point counter and sync pulse generation when set
///< to 1. Used to synchronize the sync point counter with sysref.
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_FRAC_CLK_GEN_EN register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_FRAC_CLK_GEN_EN
  * Fractional clock genration enable register
  */

typedef union {
  struct {
    uint32_t FRAC_CLK_GEN : 1;
    ///< Enables Fractional period clock generation if set to 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_frac_clk_gen_en_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_WR_MASK (0x00000001U)


///< Enables Fractional period clock generation if set to 1.
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_FRAC_CLK_GEN_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_FRAC_CLK_PERIOD_CTL register description at address offset 0xb4
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_FRAC_CLK_PERIOD_CTL
  * Fractional Clock divider Control register
  */

typedef union {
  struct {
    uint32_t CLK_REP_P0 : 16;
    ///< Determines number of Repititions of one clock gating control cycle
    ///< ( active followed by inactive ) in the Phase 0 in one gated clock
    ///< period.
    ///< t The value of this filed should be >= 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CLK_REP_P1 : 16;
    ///< Determines number of Repititions of one clock gating control cycle
    ///< ( active followed by inactive ) in the Phase 1 in one LCM clock period.
    ///< t The value of this filed should be >= 0.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_frac_clk_period_ctl_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_DEFAULT (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_WR_MASK (0xffffffffU)


///< Determines number of Repititions of one clock gating control cycle
///< ( active followed by inactive ) in the Phase 0 in one gated clock
///< period.
///< t The value of this filed should be >= 1.
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P0_BF_DEF (0x00000001)

///< Determines number of Repititions of one clock gating control cycle
///< ( active followed by inactive ) in the Phase 1 in one LCM clock period.
///< t The value of this filed should be >= 0.
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_CLK_REP_P1_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_FRAC_CLK_GATE_CTL_P0 register description at address offset 0xb8
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_FRAC_CLK_GATE_CTL_P0
  * Fractional Clock Phase 0 pulse gating control register
  */

typedef union {
  struct {
    uint32_t NH0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 1 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t NL0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 0 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_frac_clk_gate_ctl_p0_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_DEFAULT (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_WR_MASK (0xffffffffU)


///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 1 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NH0_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NH0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NH0_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NH0_BF_DEF (0x00000001)

///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 0 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NL0_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NL0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NL0_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_NL0_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_FRAC_CLK_GATE_CTL_P1 register description at address offset 0xbc
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_FRAC_CLK_GATE_CTL_P1
  * Fractional Clock Phase 1 pulse gating control register
  */

typedef union {
  struct {
    uint32_t NH0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 0 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t NL0 : 16;
    ///< Determines number of 1G clock cycle for clock gate active high state.
    ///< t These values should be  >= 0 and multiples of the highest interger
    ///< divider ratio of sample and character clocks (1,2,4)
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_frac_clk_gate_ctl_p1_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_DEFAULT (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_WR_MASK (0xffffffffU)


///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 0 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NH0_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NH0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NH0_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NH0_BF_DEF (0x00000001)

///< Determines number of 1G clock cycle for clock gate active high state.
///< t These values should be  >= 0 and multiples of the highest interger
///< divider ratio of sample and character clocks (1,2,4)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NL0_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NL0_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NL0_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_NL0_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_BFN_SYSREF_SEL register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_BFN_SYSREF_SEL
  * SYSREF input select Signal for BFN clock syncpoint Logic
  */

typedef union {
  struct {
    uint32_t SYSREF_SEL : 1;
    ///< Selects the SYSREF signal timed wrt 1G or 1p5G clock frequency to
    ///< BFN syncpoint depending upon BFN clock frequency.       1'b0:  Selects
    ///< SYSREF Signal timed wrt to 1G.       1'b1:  Selects SYSREF Signal
    ///< timed wrt to 1p5G.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_bfn_sysref_sel_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_WR_MASK (0x00000001U)


///< Selects the SYSREF signal timed wrt 1G or 1p5G clock frequency to
///< BFN syncpoint depending upon BFN clock frequency.       1'b0:  Selects
///< SYSREF Signal timed wrt to 1G.       1'b1:  Selects SYSREF Signal
///< timed wrt to 1p5G.
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_SYSREF_SEL_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_SYSREF_SEL_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_SYSREF_SEL_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_SYSREF_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_BFN_SYSREF_TSAD register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_BFN_SYSREF_TSAD
  * SYSREF TSAD COUNT register
  */

typedef union {
  struct {
    uint32_t SYSREF_TSAD : 16;
    ///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
    ///< sysref edge.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_bfn_sysref_tsad_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_RD_MASK (0x0000ffffU)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_WR_MASK (0x0000ffffU)


///< Sysref Delay counter. Used to delay sysref pulse generation by delaying
///< sysref edge.
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_SYSREF_TSAD_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_BFN_SYNC_POINT_CTRL register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_BFN_SYNC_POINT_CTRL
  * SYNC POINT CONTROL register
  */

typedef union {
  struct {
    uint32_t TSP_PERIOD : 16;
    ///< Sync pointer counter period value.Defined in the multiples of LCM
    ///< of clk_1g and clk_1p5g.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SPH_HIGH : 16;
    ///< The counter value at which sync point pulse is generated. This value
    ///< should be less than Sync point counter period.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_bfn_sync_point_ctrl_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_RD_MASK (0xffffffffU)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_WR_MASK (0xffffffffU)


///< Sync pointer counter period value.Defined in the multiples of LCM
///< of clk_1g and clk_1p5g.
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_MSK (0x0000FFFF)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_TSP_PERIOD_BF_DEF (0x00000000)

///< The counter value at which sync point pulse is generated. This value
///< should be less than Sync point counter period.
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_OFF (16)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_WID (16)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_MSK (0xFFFF0000)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_SPH_HIGH_BF_DEF (0x00000000)


/** @brief JESDABC_CMN_CSR_MEM_JESDABC_CMN_CSR_RX_BFN_SYNC_POINT_CNT_ENABLE register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_cmn_csr_MEM/jesdabc_cmn_csr/RX_BFN_SYNC_POINT_CNT_ENABLE
  * SYNC POINT COUNT ENABLE register
  */

typedef union {
  struct {
    uint32_t SYNC_POINT_CNT_ENABLE : 1;
    ///< Enables the sync point counter and sync pulse generation when set
    ///< to 1. Used to synchronize the sync point counter with sysref.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_cmn_csr_mem_rx_bfn_sync_point_cnt_enable_reg_t;

#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_DEFAULT (0x00000000U)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_RD_MASK (0x00000001U)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_WR_MASK (0x00000001U)


///< Enables the sync point counter and sync pulse generation when set
///< to 1. Used to synchronize the sync point counter with sysref.
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_OFF ( 0)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_WID ( 1)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_MSK (0x00000001)
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_SYNC_POINT_CNT_ENABLE_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define JESDABC_CMN_CSR_MEM_SCRATCH_REG(_BASE) ((jesdabc_cmn_csr_mem_scratch_reg_t*) JESDABC_CMN_CSR_MEM_SCRATCH_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_REG(_BASE) ((jesdabc_cmn_csr_mem_apb_bridge_status_reg_t*) JESDABC_CMN_CSR_MEM_APB_BRIDGE_STATUS_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_JESD_MODE_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_jesd_mode_reg_t*) JESDABC_CMN_CSR_MEM_TX_JESD_MODE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_ip_clk_ctrl_reg_t*) JESDABC_CMN_CSR_MEM_TX_IP_CLK_CTRL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_sysref_tsad_reg_t*) JESDABC_CMN_CSR_MEM_TX_SYSREF_TSAD_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_sync_point_ctrl_reg_t*) JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CTRL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_ip_sysref_cfg_reg_t*) JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_CFG_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_clk_1p5g_div_enable_reg_t*) JESDABC_CMN_CSR_MEM_TX_CLK_1P5G_DIV_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_clk_gen_enable_reg_t*) JESDABC_CMN_CSR_MEM_TX_CLK_GEN_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_ip_sysref_enable_reg_t*) JESDABC_CMN_CSR_MEM_TX_IP_SYSREF_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_sync_point_cnt_enable_reg_t*) JESDABC_CMN_CSR_MEM_TX_SYNC_POINT_CNT_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_frac_clk_gen_en_reg_t*) JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GEN_EN_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_frac_clk_period_ctl_reg_t*) JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_PERIOD_CTL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_frac_clk_gate_ctl_p0_reg_t*) JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P0_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_frac_clk_gate_ctl_p1_reg_t*) JESDABC_CMN_CSR_MEM_TX_FRAC_CLK_GATE_CTL_P1_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_num_valid_str_reg_t*) JESDABC_CMN_CSR_MEM_TX_NUM_VALID_STR_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_bfn_sysref_sel_reg_t*) JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_SEL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_bfn_sysref_tsad_reg_t*) JESDABC_CMN_CSR_MEM_TX_BFN_SYSREF_TSAD_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_bfn_sync_point_ctrl_reg_t*) JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CTRL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_tx_bfn_sync_point_cnt_enable_reg_t*) JESDABC_CMN_CSR_MEM_TX_BFN_SYNC_POINT_CNT_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_JESD_MODE_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_jesd_mode_reg_t*) JESDABC_CMN_CSR_MEM_RX_JESD_MODE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_ip_clk_ctrl_reg_t*) JESDABC_CMN_CSR_MEM_RX_IP_CLK_CTRL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_sysref_tsad_reg_t*) JESDABC_CMN_CSR_MEM_RX_SYSREF_TSAD_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_sync_point_ctrl_reg_t*) JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CTRL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_ip_sysref_cfg_reg_t*) JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_CFG_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_clk_1p5g_div_enable_reg_t*) JESDABC_CMN_CSR_MEM_RX_CLK_1P5G_DIV_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_clk_gen_enable_reg_t*) JESDABC_CMN_CSR_MEM_RX_CLK_GEN_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_ip_sysref_enable_reg_t*) JESDABC_CMN_CSR_MEM_RX_IP_SYSREF_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_sync_point_cnt_enable_reg_t*) JESDABC_CMN_CSR_MEM_RX_SYNC_POINT_CNT_ENABLE_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_frac_clk_gen_en_reg_t*) JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GEN_EN_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_frac_clk_period_ctl_reg_t*) JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_PERIOD_CTL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_frac_clk_gate_ctl_p0_reg_t*) JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P0_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_frac_clk_gate_ctl_p1_reg_t*) JESDABC_CMN_CSR_MEM_RX_FRAC_CLK_GATE_CTL_P1_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_bfn_sysref_sel_reg_t*) JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_SEL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_bfn_sysref_tsad_reg_t*) JESDABC_CMN_CSR_MEM_RX_BFN_SYSREF_TSAD_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_bfn_sync_point_ctrl_reg_t*) JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CTRL_ADR(_BASE))
#define JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_REG(_BASE) ((jesdabc_cmn_csr_mem_rx_bfn_sync_point_cnt_enable_reg_t*) JESDABC_CMN_CSR_MEM_RX_BFN_SYNC_POINT_CNT_ENABLE_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    jesdabc_cmn_csr_mem_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesdabc_cmn_csr_mem_apb_bridge_status_reg_t APB_BRIDGE_STATUS; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesdabc_cmn_csr_mem_tx_jesd_mode_reg_t TX_JESD_MODE; /*< Address offset = 0x10 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x14 */
    jesdabc_cmn_csr_mem_tx_ip_clk_ctrl_reg_t TX_IP_CLK_CTRL; /*< Address offset = 0x20 */
    jesdabc_cmn_csr_mem_tx_sysref_tsad_reg_t TX_SYSREF_TSAD; /*< Address offset = 0x24 */
    jesdabc_cmn_csr_mem_tx_sync_point_ctrl_reg_t TX_SYNC_POINT_CTRL; /*< Address offset = 0x28 */
    jesdabc_cmn_csr_mem_tx_ip_sysref_cfg_reg_t TX_IP_SYSREF_CFG; /*< Address offset = 0x2c */
    jesdabc_cmn_csr_mem_tx_clk_1p5g_div_enable_reg_t TX_CLK_1P5G_DIV_ENABLE; /*< Address offset = 0x30 */
    jesdabc_cmn_csr_mem_tx_clk_gen_enable_reg_t TX_CLK_GEN_ENABLE; /*< Address offset = 0x34 */
    jesdabc_cmn_csr_mem_tx_ip_sysref_enable_reg_t TX_IP_SYSREF_ENABLE; /*< Address offset = 0x38 */
    jesdabc_cmn_csr_mem_tx_sync_point_cnt_enable_reg_t TX_SYNC_POINT_CNT_ENABLE; /*< Address offset = 0x3c */
    jesdabc_cmn_csr_mem_tx_frac_clk_gen_en_reg_t TX_FRAC_CLK_GEN_EN; /*< Address offset = 0x40 */
    jesdabc_cmn_csr_mem_tx_frac_clk_period_ctl_reg_t TX_FRAC_CLK_PERIOD_CTL; /*< Address offset = 0x44 */
    jesdabc_cmn_csr_mem_tx_frac_clk_gate_ctl_p0_reg_t TX_FRAC_CLK_GATE_CTL_P0; /*< Address offset = 0x48 */
    jesdabc_cmn_csr_mem_tx_frac_clk_gate_ctl_p1_reg_t TX_FRAC_CLK_GATE_CTL_P1; /*< Address offset = 0x4c */
    jesdabc_cmn_csr_mem_tx_num_valid_str_reg_t TX_NUM_VALID_STR; /*< Address offset = 0x50 */
    const uint8_t        reservedArea2 [12];  /*< Address offset = 0x54 */
    jesdabc_cmn_csr_mem_tx_bfn_sysref_sel_reg_t TX_BFN_SYSREF_SEL; /*< Address offset = 0x60 */
    jesdabc_cmn_csr_mem_tx_bfn_sysref_tsad_reg_t TX_BFN_SYSREF_TSAD; /*< Address offset = 0x64 */
    jesdabc_cmn_csr_mem_tx_bfn_sync_point_ctrl_reg_t TX_BFN_SYNC_POINT_CTRL; /*< Address offset = 0x68 */
    jesdabc_cmn_csr_mem_tx_bfn_sync_point_cnt_enable_reg_t TX_BFN_SYNC_POINT_CNT_ENABLE; /*< Address offset = 0x6c */
    const uint8_t        reservedArea3 [16];  /*< Address offset = 0x70 */
    jesdabc_cmn_csr_mem_rx_jesd_mode_reg_t RX_JESD_MODE; /*< Address offset = 0x80 */
    const uint8_t        reservedArea4 [12];  /*< Address offset = 0x84 */
    jesdabc_cmn_csr_mem_rx_ip_clk_ctrl_reg_t RX_IP_CLK_CTRL; /*< Address offset = 0x90 */
    jesdabc_cmn_csr_mem_rx_sysref_tsad_reg_t RX_SYSREF_TSAD; /*< Address offset = 0x94 */
    jesdabc_cmn_csr_mem_rx_sync_point_ctrl_reg_t RX_SYNC_POINT_CTRL; /*< Address offset = 0x98 */
    jesdabc_cmn_csr_mem_rx_ip_sysref_cfg_reg_t RX_IP_SYSREF_CFG; /*< Address offset = 0x9c */
    jesdabc_cmn_csr_mem_rx_clk_1p5g_div_enable_reg_t RX_CLK_1P5G_DIV_ENABLE; /*< Address offset = 0xa0 */
    jesdabc_cmn_csr_mem_rx_clk_gen_enable_reg_t RX_CLK_GEN_ENABLE; /*< Address offset = 0xa4 */
    jesdabc_cmn_csr_mem_rx_ip_sysref_enable_reg_t RX_IP_SYSREF_ENABLE; /*< Address offset = 0xa8 */
    jesdabc_cmn_csr_mem_rx_sync_point_cnt_enable_reg_t RX_SYNC_POINT_CNT_ENABLE; /*< Address offset = 0xac */
    jesdabc_cmn_csr_mem_rx_frac_clk_gen_en_reg_t RX_FRAC_CLK_GEN_EN; /*< Address offset = 0xb0 */
    jesdabc_cmn_csr_mem_rx_frac_clk_period_ctl_reg_t RX_FRAC_CLK_PERIOD_CTL; /*< Address offset = 0xb4 */
    jesdabc_cmn_csr_mem_rx_frac_clk_gate_ctl_p0_reg_t RX_FRAC_CLK_GATE_CTL_P0; /*< Address offset = 0xb8 */
    jesdabc_cmn_csr_mem_rx_frac_clk_gate_ctl_p1_reg_t RX_FRAC_CLK_GATE_CTL_P1; /*< Address offset = 0xbc */
    jesdabc_cmn_csr_mem_rx_bfn_sysref_sel_reg_t RX_BFN_SYSREF_SEL; /*< Address offset = 0xc0 */
    jesdabc_cmn_csr_mem_rx_bfn_sysref_tsad_reg_t RX_BFN_SYSREF_TSAD; /*< Address offset = 0xc4 */
    jesdabc_cmn_csr_mem_rx_bfn_sync_point_ctrl_reg_t RX_BFN_SYNC_POINT_CTRL; /*< Address offset = 0xc8 */
    jesdabc_cmn_csr_mem_rx_bfn_sync_point_cnt_enable_reg_t RX_BFN_SYNC_POINT_CNT_ENABLE; /*< Address offset = 0xcc */
} jesdabc_cmn_csr_t;     // size: 0x0094

// AddressSpace struct pointer
//
#define DLNK_JESDABC0_CMN_CSR ((jesdabc_cmn_csr_t*) DLNK_JESDABC0_CMN_CSR_BASE)
#define DLNK_JESDABC1_CMN_CSR ((jesdabc_cmn_csr_t*) DLNK_JESDABC1_CMN_CSR_BASE)
#define DLNK_JESDABC2_CMN_CSR ((jesdabc_cmn_csr_t*) DLNK_JESDABC2_CMN_CSR_BASE)
#define DLNK_JESDABC3_CMN_CSR ((jesdabc_cmn_csr_t*) DLNK_JESDABC3_CMN_CSR_BASE)

// ******************************************* /Address Space

#endif      // _JESDABC_CMN_CSR_H_

