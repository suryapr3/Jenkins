#ifndef _CSS600_APBAP_HWC_H_
#define _CSS600_APBAP_HWC_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE  0x01f10000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_OFFSET ( 0x00000000U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_OFFSET ( 0x00000004U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_OFFSET ( 0x00000008U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_OFFSET ( 0x0000000cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_OFFSET ( 0x00000010U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_OFFSET ( 0x00000014U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_OFFSET ( 0x00000018U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_OFFSET ( 0x0000001cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_OFFSET ( 0x00000020U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_OFFSET ( 0x00000024U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_OFFSET ( 0x00000028U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_OFFSET ( 0x0000002cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_OFFSET ( 0x00000030U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_OFFSET ( 0x00000034U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_OFFSET ( 0x00000038U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_OFFSET ( 0x0000003cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_OFFSET ( 0x00000040U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_OFFSET ( 0x00000044U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_OFFSET ( 0x00000048U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_OFFSET ( 0x0000004cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_OFFSET ( 0x00000050U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_OFFSET ( 0x00000054U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_OFFSET ( 0x00000058U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_OFFSET ( 0x0000005cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_OFFSET ( 0x00000060U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_OFFSET ( 0x00000064U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_OFFSET ( 0x00000068U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_OFFSET ( 0x0000006cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_OFFSET ( 0x00000070U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_OFFSET ( 0x00000074U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_OFFSET ( 0x00000078U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_OFFSET ( 0x0000007cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_OFFSET ( 0x00000080U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_OFFSET ( 0x00000084U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_OFFSET ( 0x00000088U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_OFFSET ( 0x0000008cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_OFFSET ( 0x00000090U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_OFFSET ( 0x00000094U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_OFFSET ( 0x00000098U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_OFFSET ( 0x0000009cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_OFFSET ( 0x000000a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_OFFSET ( 0x000000a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_OFFSET ( 0x000000a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_OFFSET ( 0x000000acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_OFFSET ( 0x000000b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_OFFSET ( 0x000000b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_OFFSET ( 0x000000b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_OFFSET ( 0x000000bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_OFFSET ( 0x000000c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_OFFSET ( 0x000000c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_OFFSET ( 0x000000c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_OFFSET ( 0x000000ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_OFFSET ( 0x000000d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_OFFSET ( 0x000000d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_OFFSET ( 0x000000d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_OFFSET ( 0x000000dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_OFFSET ( 0x000000e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_OFFSET ( 0x000000e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_OFFSET ( 0x000000e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_OFFSET ( 0x000000ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_OFFSET ( 0x000000f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_OFFSET ( 0x000000f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_OFFSET ( 0x000000f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_OFFSET ( 0x000000fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_OFFSET ( 0x00000100U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_OFFSET ( 0x00000104U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_OFFSET ( 0x00000108U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_OFFSET ( 0x0000010cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_OFFSET ( 0x00000110U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_OFFSET ( 0x00000114U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_OFFSET ( 0x00000118U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_OFFSET ( 0x0000011cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_OFFSET ( 0x00000120U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_OFFSET ( 0x00000124U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_OFFSET ( 0x00000128U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_OFFSET ( 0x0000012cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_OFFSET ( 0x00000130U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_OFFSET ( 0x00000134U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_OFFSET ( 0x00000138U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_OFFSET ( 0x0000013cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_OFFSET ( 0x00000140U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_OFFSET ( 0x00000144U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_OFFSET ( 0x00000148U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_OFFSET ( 0x0000014cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_OFFSET ( 0x00000150U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_OFFSET ( 0x00000154U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_OFFSET ( 0x00000158U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_OFFSET ( 0x0000015cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_OFFSET ( 0x00000160U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_OFFSET ( 0x00000164U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_OFFSET ( 0x00000168U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_OFFSET ( 0x0000016cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_OFFSET ( 0x00000170U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_OFFSET ( 0x00000174U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_OFFSET ( 0x00000178U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_OFFSET ( 0x0000017cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_OFFSET ( 0x00000180U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_OFFSET ( 0x00000184U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_OFFSET ( 0x00000188U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_OFFSET ( 0x0000018cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_OFFSET ( 0x00000190U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_OFFSET ( 0x00000194U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_OFFSET ( 0x00000198U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_OFFSET ( 0x0000019cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_OFFSET ( 0x000001a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_OFFSET ( 0x000001a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_OFFSET ( 0x000001a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_OFFSET ( 0x000001acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_OFFSET ( 0x000001b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_OFFSET ( 0x000001b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_OFFSET ( 0x000001b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_OFFSET ( 0x000001bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_OFFSET ( 0x000001c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_OFFSET ( 0x000001c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_OFFSET ( 0x000001c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_OFFSET ( 0x000001ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_OFFSET ( 0x000001d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_OFFSET ( 0x000001d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_OFFSET ( 0x000001d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_OFFSET ( 0x000001dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_OFFSET ( 0x000001e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_OFFSET ( 0x000001e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_OFFSET ( 0x000001e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_OFFSET ( 0x000001ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_OFFSET ( 0x000001f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_OFFSET ( 0x000001f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_OFFSET ( 0x000001f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_OFFSET ( 0x000001fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_OFFSET ( 0x00000200U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_OFFSET ( 0x00000204U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_OFFSET ( 0x00000208U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_OFFSET ( 0x0000020cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_OFFSET ( 0x00000210U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_OFFSET ( 0x00000214U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_OFFSET ( 0x00000218U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_OFFSET ( 0x0000021cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_OFFSET ( 0x00000220U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_OFFSET ( 0x00000224U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_OFFSET ( 0x00000228U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_OFFSET ( 0x0000022cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_OFFSET ( 0x00000230U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_OFFSET ( 0x00000234U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_OFFSET ( 0x00000238U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_OFFSET ( 0x0000023cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_OFFSET ( 0x00000240U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_OFFSET ( 0x00000244U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_OFFSET ( 0x00000248U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_OFFSET ( 0x0000024cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_OFFSET ( 0x00000250U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_OFFSET ( 0x00000254U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_OFFSET ( 0x00000258U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_OFFSET ( 0x0000025cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_OFFSET ( 0x00000260U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_OFFSET ( 0x00000264U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_OFFSET ( 0x00000268U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_OFFSET ( 0x0000026cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_OFFSET ( 0x00000270U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_OFFSET ( 0x00000274U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_OFFSET ( 0x00000278U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_OFFSET ( 0x0000027cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_OFFSET ( 0x00000280U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_OFFSET ( 0x00000284U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_OFFSET ( 0x00000288U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_OFFSET ( 0x0000028cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_OFFSET ( 0x00000290U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_OFFSET ( 0x00000294U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_OFFSET ( 0x00000298U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_OFFSET ( 0x0000029cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_OFFSET ( 0x000002a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_OFFSET ( 0x000002a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_OFFSET ( 0x000002a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_OFFSET ( 0x000002acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_OFFSET ( 0x000002b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_OFFSET ( 0x000002b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_OFFSET ( 0x000002b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_OFFSET ( 0x000002bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_OFFSET ( 0x000002c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_OFFSET ( 0x000002c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_OFFSET ( 0x000002c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_OFFSET ( 0x000002ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_OFFSET ( 0x000002d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_OFFSET ( 0x000002d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_OFFSET ( 0x000002d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_OFFSET ( 0x000002dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_OFFSET ( 0x000002e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_OFFSET ( 0x000002e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_OFFSET ( 0x000002e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_OFFSET ( 0x000002ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_OFFSET ( 0x000002f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_OFFSET ( 0x000002f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_OFFSET ( 0x000002f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_OFFSET ( 0x000002fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_OFFSET ( 0x00000300U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_OFFSET ( 0x00000304U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_OFFSET ( 0x00000308U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_OFFSET ( 0x0000030cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_OFFSET ( 0x00000310U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_OFFSET ( 0x00000314U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_OFFSET ( 0x00000318U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_OFFSET ( 0x0000031cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_OFFSET ( 0x00000320U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_OFFSET ( 0x00000324U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_OFFSET ( 0x00000328U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_OFFSET ( 0x0000032cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_OFFSET ( 0x00000330U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_OFFSET ( 0x00000334U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_OFFSET ( 0x00000338U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_OFFSET ( 0x0000033cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_OFFSET ( 0x00000340U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_OFFSET ( 0x00000344U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_OFFSET ( 0x00000348U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_OFFSET ( 0x0000034cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_OFFSET ( 0x00000350U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_OFFSET ( 0x00000354U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_OFFSET ( 0x00000358U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_OFFSET ( 0x0000035cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_OFFSET ( 0x00000360U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_OFFSET ( 0x00000364U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_OFFSET ( 0x00000368U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_OFFSET ( 0x0000036cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_OFFSET ( 0x00000370U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_OFFSET ( 0x00000374U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_OFFSET ( 0x00000378U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_OFFSET ( 0x0000037cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_OFFSET ( 0x00000380U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_OFFSET ( 0x00000384U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_OFFSET ( 0x00000388U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_OFFSET ( 0x0000038cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_OFFSET ( 0x00000390U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_OFFSET ( 0x00000394U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_OFFSET ( 0x00000398U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_OFFSET ( 0x0000039cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_OFFSET ( 0x000003a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_OFFSET ( 0x000003a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_OFFSET ( 0x000003a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_OFFSET ( 0x000003acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_OFFSET ( 0x000003b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_OFFSET ( 0x000003b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_OFFSET ( 0x000003b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_OFFSET ( 0x000003bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_OFFSET ( 0x000003c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_OFFSET ( 0x000003c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_OFFSET ( 0x000003c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_OFFSET ( 0x000003ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_OFFSET ( 0x000003d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_OFFSET ( 0x000003d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_OFFSET ( 0x000003d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_OFFSET ( 0x000003dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_OFFSET ( 0x000003e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_OFFSET ( 0x000003e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_OFFSET ( 0x000003e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_OFFSET ( 0x000003ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_OFFSET ( 0x000003f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_OFFSET ( 0x000003f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_OFFSET ( 0x000003f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_OFFSET ( 0x000003fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_OFFSET ( 0x00000d00U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_OFFSET ( 0x00000d04U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_OFFSET ( 0x00000d0cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_OFFSET ( 0x00000d10U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_OFFSET ( 0x00000d14U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_OFFSET ( 0x00000d18U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_OFFSET ( 0x00000d1cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_OFFSET ( 0x00000d24U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_OFFSET ( 0x00000df4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_OFFSET ( 0x00000df8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_OFFSET ( 0x00000dfcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_OFFSET ( 0x00000efcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_OFFSET ( 0x00000f00U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_OFFSET ( 0x00000fa0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_OFFSET ( 0x00000fa4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_OFFSET ( 0x00000fb8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_OFFSET ( 0x00000fbcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_OFFSET ( 0x00000fccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_OFFSET ( 0x00000fd0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_OFFSET ( 0x00000fd4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_OFFSET ( 0x00000fd8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_OFFSET ( 0x00000fdcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_OFFSET ( 0x00000fe0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_OFFSET ( 0x00000fe4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_OFFSET ( 0x00000fe8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_OFFSET ( 0x00000fecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_OFFSET ( 0x00000ff0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_OFFSET ( 0x00000ff4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_OFFSET ( 0x00000ff8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_OFFSET ( 0x00000ffcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_OFFSET ( 0x00001000U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_OFFSET ( 0x00001004U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_OFFSET ( 0x00001008U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_OFFSET ( 0x0000100cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_OFFSET ( 0x00001010U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_OFFSET ( 0x00001014U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_OFFSET ( 0x00001018U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_OFFSET ( 0x0000101cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_OFFSET ( 0x00001020U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_OFFSET ( 0x00001024U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_OFFSET ( 0x00001028U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_OFFSET ( 0x0000102cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_OFFSET ( 0x00001030U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_OFFSET ( 0x00001034U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_OFFSET ( 0x00001038U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_OFFSET ( 0x0000103cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_OFFSET ( 0x00001040U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_OFFSET ( 0x00001044U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_OFFSET ( 0x00001048U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_OFFSET ( 0x0000104cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_OFFSET ( 0x00001050U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_OFFSET ( 0x00001054U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_OFFSET ( 0x00001058U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_OFFSET ( 0x0000105cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_OFFSET ( 0x00001060U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_OFFSET ( 0x00001064U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_OFFSET ( 0x00001068U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_OFFSET ( 0x0000106cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_OFFSET ( 0x00001070U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_OFFSET ( 0x00001074U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_OFFSET ( 0x00001078U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_OFFSET ( 0x0000107cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_OFFSET ( 0x00001080U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_OFFSET ( 0x00001084U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_OFFSET ( 0x00001088U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_OFFSET ( 0x0000108cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_OFFSET ( 0x00001090U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_OFFSET ( 0x00001094U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_OFFSET ( 0x00001098U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_OFFSET ( 0x0000109cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_OFFSET ( 0x000010a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_OFFSET ( 0x000010a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_OFFSET ( 0x000010a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_OFFSET ( 0x000010acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_OFFSET ( 0x000010b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_OFFSET ( 0x000010b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_OFFSET ( 0x000010b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_OFFSET ( 0x000010bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_OFFSET ( 0x000010c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_OFFSET ( 0x000010c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_OFFSET ( 0x000010c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_OFFSET ( 0x000010ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_OFFSET ( 0x000010d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_OFFSET ( 0x000010d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_OFFSET ( 0x000010d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_OFFSET ( 0x000010dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_OFFSET ( 0x000010e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_OFFSET ( 0x000010e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_OFFSET ( 0x000010e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_OFFSET ( 0x000010ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_OFFSET ( 0x000010f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_OFFSET ( 0x000010f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_OFFSET ( 0x000010f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_OFFSET ( 0x000010fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_OFFSET ( 0x00001100U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_OFFSET ( 0x00001104U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_OFFSET ( 0x00001108U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_OFFSET ( 0x0000110cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_OFFSET ( 0x00001110U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_OFFSET ( 0x00001114U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_OFFSET ( 0x00001118U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_OFFSET ( 0x0000111cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_OFFSET ( 0x00001120U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_OFFSET ( 0x00001124U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_OFFSET ( 0x00001128U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_OFFSET ( 0x0000112cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_OFFSET ( 0x00001130U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_OFFSET ( 0x00001134U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_OFFSET ( 0x00001138U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_OFFSET ( 0x0000113cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_OFFSET ( 0x00001140U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_OFFSET ( 0x00001144U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_OFFSET ( 0x00001148U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_OFFSET ( 0x0000114cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_OFFSET ( 0x00001150U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_OFFSET ( 0x00001154U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_OFFSET ( 0x00001158U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_OFFSET ( 0x0000115cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_OFFSET ( 0x00001160U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_OFFSET ( 0x00001164U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_OFFSET ( 0x00001168U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_OFFSET ( 0x0000116cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_OFFSET ( 0x00001170U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_OFFSET ( 0x00001174U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_OFFSET ( 0x00001178U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_OFFSET ( 0x0000117cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_OFFSET ( 0x00001180U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_OFFSET ( 0x00001184U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_OFFSET ( 0x00001188U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_OFFSET ( 0x0000118cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_OFFSET ( 0x00001190U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_OFFSET ( 0x00001194U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_OFFSET ( 0x00001198U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_OFFSET ( 0x0000119cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_OFFSET ( 0x000011a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_OFFSET ( 0x000011a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_OFFSET ( 0x000011a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_OFFSET ( 0x000011acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_OFFSET ( 0x000011b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_OFFSET ( 0x000011b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_OFFSET ( 0x000011b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_OFFSET ( 0x000011bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_OFFSET ( 0x000011c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_OFFSET ( 0x000011c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_OFFSET ( 0x000011c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_OFFSET ( 0x000011ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_OFFSET ( 0x000011d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_OFFSET ( 0x000011d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_OFFSET ( 0x000011d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_OFFSET ( 0x000011dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_OFFSET ( 0x000011e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_OFFSET ( 0x000011e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_OFFSET ( 0x000011e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_OFFSET ( 0x000011ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_OFFSET ( 0x000011f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_OFFSET ( 0x000011f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_OFFSET ( 0x000011f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_OFFSET ( 0x000011fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_OFFSET ( 0x00001200U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_OFFSET ( 0x00001204U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_OFFSET ( 0x00001208U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_OFFSET ( 0x0000120cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_OFFSET ( 0x00001210U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_OFFSET ( 0x00001214U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_OFFSET ( 0x00001218U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_OFFSET ( 0x0000121cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_OFFSET ( 0x00001220U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_OFFSET ( 0x00001224U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_OFFSET ( 0x00001228U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_OFFSET ( 0x0000122cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_OFFSET ( 0x00001230U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_OFFSET ( 0x00001234U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_OFFSET ( 0x00001238U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_OFFSET ( 0x0000123cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_OFFSET ( 0x00001240U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_OFFSET ( 0x00001244U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_OFFSET ( 0x00001248U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_OFFSET ( 0x0000124cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_OFFSET ( 0x00001250U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_OFFSET ( 0x00001254U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_OFFSET ( 0x00001258U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_OFFSET ( 0x0000125cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_OFFSET ( 0x00001260U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_OFFSET ( 0x00001264U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_OFFSET ( 0x00001268U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_OFFSET ( 0x0000126cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_OFFSET ( 0x00001270U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_OFFSET ( 0x00001274U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_OFFSET ( 0x00001278U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_OFFSET ( 0x0000127cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_OFFSET ( 0x00001280U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_OFFSET ( 0x00001284U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_OFFSET ( 0x00001288U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_OFFSET ( 0x0000128cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_OFFSET ( 0x00001290U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_OFFSET ( 0x00001294U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_OFFSET ( 0x00001298U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_OFFSET ( 0x0000129cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_OFFSET ( 0x000012a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_OFFSET ( 0x000012a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_OFFSET ( 0x000012a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_OFFSET ( 0x000012acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_OFFSET ( 0x000012b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_OFFSET ( 0x000012b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_OFFSET ( 0x000012b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_OFFSET ( 0x000012bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_OFFSET ( 0x000012c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_OFFSET ( 0x000012c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_OFFSET ( 0x000012c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_OFFSET ( 0x000012ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_OFFSET ( 0x000012d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_OFFSET ( 0x000012d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_OFFSET ( 0x000012d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_OFFSET ( 0x000012dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_OFFSET ( 0x000012e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_OFFSET ( 0x000012e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_OFFSET ( 0x000012e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_OFFSET ( 0x000012ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_OFFSET ( 0x000012f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_OFFSET ( 0x000012f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_OFFSET ( 0x000012f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_OFFSET ( 0x000012fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_OFFSET ( 0x00001300U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_OFFSET ( 0x00001304U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_OFFSET ( 0x00001308U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_OFFSET ( 0x0000130cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_OFFSET ( 0x00001310U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_OFFSET ( 0x00001314U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_OFFSET ( 0x00001318U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_OFFSET ( 0x0000131cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_OFFSET ( 0x00001320U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_OFFSET ( 0x00001324U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_OFFSET ( 0x00001328U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_OFFSET ( 0x0000132cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_OFFSET ( 0x00001330U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_OFFSET ( 0x00001334U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_OFFSET ( 0x00001338U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_OFFSET ( 0x0000133cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_OFFSET ( 0x00001340U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_OFFSET ( 0x00001344U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_OFFSET ( 0x00001348U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_OFFSET ( 0x0000134cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_OFFSET ( 0x00001350U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_OFFSET ( 0x00001354U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_OFFSET ( 0x00001358U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_OFFSET ( 0x0000135cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_OFFSET ( 0x00001360U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_OFFSET ( 0x00001364U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_OFFSET ( 0x00001368U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_OFFSET ( 0x0000136cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_OFFSET ( 0x00001370U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_OFFSET ( 0x00001374U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_OFFSET ( 0x00001378U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_OFFSET ( 0x0000137cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_OFFSET ( 0x00001380U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_OFFSET ( 0x00001384U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_OFFSET ( 0x00001388U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_OFFSET ( 0x0000138cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_OFFSET ( 0x00001390U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_OFFSET ( 0x00001394U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_OFFSET ( 0x00001398U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_OFFSET ( 0x0000139cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_OFFSET ( 0x000013a0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_OFFSET ( 0x000013a4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_OFFSET ( 0x000013a8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_OFFSET ( 0x000013acU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_OFFSET ( 0x000013b0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_OFFSET ( 0x000013b4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_OFFSET ( 0x000013b8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_OFFSET ( 0x000013bcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_OFFSET ( 0x000013c0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_OFFSET ( 0x000013c4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_OFFSET ( 0x000013c8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_OFFSET ( 0x000013ccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_OFFSET ( 0x000013d0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_OFFSET ( 0x000013d4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_OFFSET ( 0x000013d8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_OFFSET ( 0x000013dcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_OFFSET ( 0x000013e0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_OFFSET ( 0x000013e4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_OFFSET ( 0x000013e8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_OFFSET ( 0x000013ecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_OFFSET ( 0x000013f0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_OFFSET ( 0x000013f4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_OFFSET ( 0x000013f8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_OFFSET ( 0x000013fcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_OFFSET ( 0x00001d00U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_OFFSET ( 0x00001d04U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_OFFSET ( 0x00001d0cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_OFFSET ( 0x00001d10U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_OFFSET ( 0x00001d14U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_OFFSET ( 0x00001d18U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_OFFSET ( 0x00001d1cU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_OFFSET ( 0x00001d24U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_OFFSET ( 0x00001df4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_OFFSET ( 0x00001df8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_OFFSET ( 0x00001dfcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_OFFSET ( 0x00001efcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_OFFSET ( 0x00001f00U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_OFFSET ( 0x00001fa0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_OFFSET ( 0x00001fa4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_OFFSET ( 0x00001fb8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_OFFSET ( 0x00001fbcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_OFFSET ( 0x00001fccU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_OFFSET ( 0x00001fd0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_OFFSET ( 0x00001fd4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_OFFSET ( 0x00001fd8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_OFFSET ( 0x00001fdcU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_OFFSET ( 0x00001fe0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_OFFSET ( 0x00001fe4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_OFFSET ( 0x00001fe8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_OFFSET ( 0x00001fecU )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_OFFSET ( 0x00001ff0U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_OFFSET ( 0x00001ff4U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_OFFSET ( 0x00001ff8U )
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_OFFSET ( 0x00001ffcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_OFFSET ) ))
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_ADR (( ( SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE ) + ( CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR0
  * Direct Access Register 0
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x0). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x0). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR1
  * Direct Access Register 1
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR2 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR2
  * Direct Access Register 2
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR3 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR3
  * Direct Access Register 3
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR4 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR4
  * Direct Access Register 4
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar4_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR5 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR5
  * Direct Access Register 5
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar5_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR6 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR6
  * Direct Access Register 6
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar6_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR7 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR7
  * Direct Access Register 7
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar7_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR8 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR8
  * Direct Access Register 8
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar8_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR9 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR9
  * Direct Access Register 9
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar9_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR10 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR10
  * Direct Access Register 10
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar10_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR11 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR11
  * Direct Access Register 11
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar11_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR12 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR12
  * Direct Access Register 12
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar12_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR13 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR13
  * Direct Access Register 13
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar13_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR14 register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR14
  * Direct Access Register 14
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar14_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR15 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR15
  * Direct Access Register 15
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar15_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR16 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR16
  * Direct Access Register 16
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x40). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar16_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x40). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR17 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR17
  * Direct Access Register 17
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x44). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar17_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x44). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR18 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR18
  * Direct Access Register 18
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x48). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar18_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x48). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR19 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR19
  * Direct Access Register 19
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar19_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR20 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR20
  * Direct Access Register 20
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x50). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar20_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x50). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR21 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR21
  * Direct Access Register 21
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x54). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar21_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x54). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR22 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR22
  * Direct Access Register 22
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x58). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar22_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x58). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR23 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR23
  * Direct Access Register 23
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x5C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar23_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x5C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR24 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR24
  * Direct Access Register 24
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x60). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar24_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x60). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR25 register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR25
  * Direct Access Register 25
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x64). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar25_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x64). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR26 register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR26
  * Direct Access Register 26
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x68). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar26_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x68). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR27 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR27
  * Direct Access Register 27
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x6C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar27_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x6C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR28 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR28
  * Direct Access Register 28
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x70). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar28_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x70). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR29 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR29
  * Direct Access Register 29
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x74). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar29_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x74). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR30 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR30
  * Direct Access Register 30
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x78). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar30_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x78). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR31 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR31
  * Direct Access Register 31
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x7C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar31_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x7C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR32 register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR32
  * Direct Access Register 32
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x80). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar32_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x80). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR33 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR33
  * Direct Access Register 33
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x84). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar33_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x84). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR34 register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR34
  * Direct Access Register 34
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x88). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar34_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x88). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR35 register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR35
  * Direct Access Register 35
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar35_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR36 register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR36
  * Direct Access Register 36
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x90). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar36_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x90). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR37 register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR37
  * Direct Access Register 37
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x94). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar37_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x94). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR38 register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR38
  * Direct Access Register 38
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x98). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar38_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x98). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR39 register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR39
  * Direct Access Register 39
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x9C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar39_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x9C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR40 register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR40
  * Direct Access Register 40
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar40_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR41 register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR41
  * Direct Access Register 41
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar41_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR42 register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR42
  * Direct Access Register 42
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar42_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR43 register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR43
  * Direct Access Register 43
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xAC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar43_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xAC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR44 register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR44
  * Direct Access Register 44
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar44_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR45 register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR45
  * Direct Access Register 45
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar45_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR46 register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR46
  * Direct Access Register 46
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar46_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR47 register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR47
  * Direct Access Register 47
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xBC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar47_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xBC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR48 register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR48
  * Direct Access Register 48
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar48_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR49 register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR49
  * Direct Access Register 49
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar49_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR50 register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR50
  * Direct Access Register 50
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar50_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR51 register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR51
  * Direct Access Register 51
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xCC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar51_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xCC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR52 register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR52
  * Direct Access Register 52
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar52_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR53 register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR53
  * Direct Access Register 53
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar53_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR54 register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR54
  * Direct Access Register 54
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar54_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR55 register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR55
  * Direct Access Register 55
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xDC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar55_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xDC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR56 register description at address offset 0xe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR56
  * Direct Access Register 56
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar56_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR57 register description at address offset 0xe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR57
  * Direct Access Register 57
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar57_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR58 register description at address offset 0xe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR58
  * Direct Access Register 58
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar58_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR59 register description at address offset 0xec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR59
  * Direct Access Register 59
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xEC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar59_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xEC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR60 register description at address offset 0xf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR60
  * Direct Access Register 60
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar60_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR61 register description at address offset 0xf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR61
  * Direct Access Register 61
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar61_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR62 register description at address offset 0xf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR62
  * Direct Access Register 62
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar62_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR63 register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR63
  * Direct Access Register 63
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xFC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar63_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xFC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR64 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR64
  * Direct Access Register 64
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x100). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar64_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x100). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR65 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR65
  * Direct Access Register 65
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x104). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar65_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x104). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR66 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR66
  * Direct Access Register 66
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x108). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar66_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x108). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR67 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR67
  * Direct Access Register 67
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar67_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR68 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR68
  * Direct Access Register 68
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x110). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar68_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x110). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR69 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR69
  * Direct Access Register 69
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x114). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar69_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x114). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR70 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR70
  * Direct Access Register 70
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x118). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar70_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x118). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR71 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR71
  * Direct Access Register 71
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x11C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar71_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x11C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR72 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR72
  * Direct Access Register 72
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x120). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar72_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x120). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR73 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR73
  * Direct Access Register 73
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x124). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar73_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x124). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR74 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR74
  * Direct Access Register 74
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x128). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar74_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x128). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR75 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR75
  * Direct Access Register 75
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x12C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar75_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x12C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR76 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR76
  * Direct Access Register 76
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x130). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar76_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x130). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR77 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR77
  * Direct Access Register 77
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x134). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar77_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x134). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR78 register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR78
  * Direct Access Register 78
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x138). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar78_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x138). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR79 register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR79
  * Direct Access Register 79
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x13C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar79_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x13C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR80 register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR80
  * Direct Access Register 80
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x140). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar80_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x140). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR81 register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR81
  * Direct Access Register 81
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x144). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar81_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x144). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR82 register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR82
  * Direct Access Register 82
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x148). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar82_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x148). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR83 register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR83
  * Direct Access Register 83
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar83_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR84 register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR84
  * Direct Access Register 84
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x150). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar84_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x150). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR85 register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR85
  * Direct Access Register 85
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x154). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar85_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x154). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR86 register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR86
  * Direct Access Register 86
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x158). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar86_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x158). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR87 register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR87
  * Direct Access Register 87
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x15C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar87_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x15C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR88 register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR88
  * Direct Access Register 88
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x160). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar88_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x160). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR89 register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR89
  * Direct Access Register 89
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x164). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar89_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x164). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR90 register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR90
  * Direct Access Register 90
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x168). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar90_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x168). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR91 register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR91
  * Direct Access Register 91
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x16C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar91_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x16C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR92 register description at address offset 0x170
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR92
  * Direct Access Register 92
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x170). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar92_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x170). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR93 register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR93
  * Direct Access Register 93
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x174). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar93_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x174). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR94 register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR94
  * Direct Access Register 94
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x178). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar94_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x178). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR95 register description at address offset 0x17c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR95
  * Direct Access Register 95
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x17C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar95_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x17C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR96 register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR96
  * Direct Access Register 96
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x180). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar96_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x180). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR97 register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR97
  * Direct Access Register 97
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x184). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar97_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x184). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR98 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR98
  * Direct Access Register 98
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x188). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar98_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x188). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR99 register description at address offset 0x18c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR99
  * Direct Access Register 99
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar99_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR100 register description at address offset 0x190
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR100
  * Direct Access Register 100
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x190). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar100_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x190). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR101 register description at address offset 0x194
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR101
  * Direct Access Register 101
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x194). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar101_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x194). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR102 register description at address offset 0x198
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR102
  * Direct Access Register 102
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x198). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar102_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x198). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR103 register description at address offset 0x19c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR103
  * Direct Access Register 103
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x19C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar103_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x19C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR104 register description at address offset 0x1a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR104
  * Direct Access Register 104
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar104_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR105 register description at address offset 0x1a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR105
  * Direct Access Register 105
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar105_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR106 register description at address offset 0x1a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR106
  * Direct Access Register 106
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar106_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR107 register description at address offset 0x1ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR107
  * Direct Access Register 107
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1AC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar107_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1AC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR108 register description at address offset 0x1b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR108
  * Direct Access Register 108
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar108_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR109 register description at address offset 0x1b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR109
  * Direct Access Register 109
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar109_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR110 register description at address offset 0x1b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR110
  * Direct Access Register 110
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar110_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR111 register description at address offset 0x1bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR111
  * Direct Access Register 111
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1BC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar111_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1BC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR112 register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR112
  * Direct Access Register 112
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar112_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR113 register description at address offset 0x1c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR113
  * Direct Access Register 113
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar113_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR114 register description at address offset 0x1c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR114
  * Direct Access Register 114
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar114_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR115 register description at address offset 0x1cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR115
  * Direct Access Register 115
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1CC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar115_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1CC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR116 register description at address offset 0x1d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR116
  * Direct Access Register 116
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar116_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR117 register description at address offset 0x1d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR117
  * Direct Access Register 117
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar117_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR118 register description at address offset 0x1d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR118
  * Direct Access Register 118
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar118_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR119 register description at address offset 0x1dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR119
  * Direct Access Register 119
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1DC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar119_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1DC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR120 register description at address offset 0x1e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR120
  * Direct Access Register 120
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar120_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR121 register description at address offset 0x1e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR121
  * Direct Access Register 121
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar121_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR122 register description at address offset 0x1e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR122
  * Direct Access Register 122
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar122_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR123 register description at address offset 0x1ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR123
  * Direct Access Register 123
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1EC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar123_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1EC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR124 register description at address offset 0x1f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR124
  * Direct Access Register 124
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar124_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR125 register description at address offset 0x1f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR125
  * Direct Access Register 125
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar125_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR126 register description at address offset 0x1f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR126
  * Direct Access Register 126
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar126_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR127 register description at address offset 0x1fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR127
  * Direct Access Register 127
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1FC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar127_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1FC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR128 register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR128
  * Direct Access Register 128
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x200). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar128_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x200). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR129 register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR129
  * Direct Access Register 129
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x204). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar129_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x204). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR130 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR130
  * Direct Access Register 130
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x208). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar130_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x208). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR131 register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR131
  * Direct Access Register 131
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar131_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR132 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR132
  * Direct Access Register 132
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x210). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar132_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x210). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR133 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR133
  * Direct Access Register 133
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x214). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar133_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x214). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR134 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR134
  * Direct Access Register 134
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x218). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar134_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x218). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR135 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR135
  * Direct Access Register 135
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x21C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar135_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x21C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR136 register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR136
  * Direct Access Register 136
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x220). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar136_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x220). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR137 register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR137
  * Direct Access Register 137
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x224). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar137_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x224). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR138 register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR138
  * Direct Access Register 138
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x228). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar138_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x228). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR139 register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR139
  * Direct Access Register 139
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x22C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar139_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x22C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR140 register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR140
  * Direct Access Register 140
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x230). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar140_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x230). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR141 register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR141
  * Direct Access Register 141
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x234). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar141_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x234). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR142 register description at address offset 0x238
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR142
  * Direct Access Register 142
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x238). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar142_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x238). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR143 register description at address offset 0x23c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR143
  * Direct Access Register 143
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x23C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar143_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x23C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR144 register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR144
  * Direct Access Register 144
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x240). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar144_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x240). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR145 register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR145
  * Direct Access Register 145
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x244). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar145_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x244). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR146 register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR146
  * Direct Access Register 146
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x248). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar146_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x248). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR147 register description at address offset 0x24c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR147
  * Direct Access Register 147
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar147_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR148 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR148
  * Direct Access Register 148
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x250). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar148_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x250). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR149 register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR149
  * Direct Access Register 149
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x254). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar149_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x254). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR150 register description at address offset 0x258
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR150
  * Direct Access Register 150
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x258). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar150_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x258). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR151 register description at address offset 0x25c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR151
  * Direct Access Register 151
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x25C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar151_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x25C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR152 register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR152
  * Direct Access Register 152
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x260). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar152_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x260). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR153 register description at address offset 0x264
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR153
  * Direct Access Register 153
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x264). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar153_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x264). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR154 register description at address offset 0x268
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR154
  * Direct Access Register 154
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x268). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar154_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x268). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR155 register description at address offset 0x26c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR155
  * Direct Access Register 155
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x26C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar155_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x26C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR156 register description at address offset 0x270
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR156
  * Direct Access Register 156
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x270). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar156_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x270). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR157 register description at address offset 0x274
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR157
  * Direct Access Register 157
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x274). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar157_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x274). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR158 register description at address offset 0x278
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR158
  * Direct Access Register 158
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x278). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar158_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x278). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR159 register description at address offset 0x27c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR159
  * Direct Access Register 159
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x27C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar159_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x27C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR160 register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR160
  * Direct Access Register 160
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x280). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar160_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x280). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR161 register description at address offset 0x284
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR161
  * Direct Access Register 161
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x284). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar161_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x284). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR162 register description at address offset 0x288
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR162
  * Direct Access Register 162
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x288). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar162_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x288). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR163 register description at address offset 0x28c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR163
  * Direct Access Register 163
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar163_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR164 register description at address offset 0x290
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR164
  * Direct Access Register 164
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x290). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar164_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x290). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR165 register description at address offset 0x294
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR165
  * Direct Access Register 165
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x294). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar165_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x294). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR166 register description at address offset 0x298
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR166
  * Direct Access Register 166
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x298). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar166_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x298). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR167 register description at address offset 0x29c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR167
  * Direct Access Register 167
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x29C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar167_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x29C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR168 register description at address offset 0x2a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR168
  * Direct Access Register 168
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar168_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR169 register description at address offset 0x2a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR169
  * Direct Access Register 169
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar169_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR170 register description at address offset 0x2a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR170
  * Direct Access Register 170
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar170_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR171 register description at address offset 0x2ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR171
  * Direct Access Register 171
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2AC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar171_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2AC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR172 register description at address offset 0x2b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR172
  * Direct Access Register 172
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar172_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR173 register description at address offset 0x2b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR173
  * Direct Access Register 173
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar173_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR174 register description at address offset 0x2b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR174
  * Direct Access Register 174
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar174_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR175 register description at address offset 0x2bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR175
  * Direct Access Register 175
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2BC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar175_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2BC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR176 register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR176
  * Direct Access Register 176
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar176_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR177 register description at address offset 0x2c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR177
  * Direct Access Register 177
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar177_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR178 register description at address offset 0x2c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR178
  * Direct Access Register 178
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar178_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR179 register description at address offset 0x2cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR179
  * Direct Access Register 179
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2CC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar179_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2CC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR180 register description at address offset 0x2d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR180
  * Direct Access Register 180
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar180_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR181 register description at address offset 0x2d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR181
  * Direct Access Register 181
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar181_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR182 register description at address offset 0x2d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR182
  * Direct Access Register 182
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar182_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR183 register description at address offset 0x2dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR183
  * Direct Access Register 183
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2DC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar183_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2DC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR184 register description at address offset 0x2e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR184
  * Direct Access Register 184
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar184_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR185 register description at address offset 0x2e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR185
  * Direct Access Register 185
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar185_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR186 register description at address offset 0x2e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR186
  * Direct Access Register 186
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar186_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR187 register description at address offset 0x2ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR187
  * Direct Access Register 187
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2EC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar187_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2EC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR188 register description at address offset 0x2f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR188
  * Direct Access Register 188
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar188_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR189 register description at address offset 0x2f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR189
  * Direct Access Register 189
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar189_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR190 register description at address offset 0x2f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR190
  * Direct Access Register 190
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar190_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR191 register description at address offset 0x2fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR191
  * Direct Access Register 191
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2FC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar191_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2FC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR192 register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR192
  * Direct Access Register 192
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x300). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar192_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x300). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR193 register description at address offset 0x304
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR193
  * Direct Access Register 193
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x304). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar193_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x304). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR194 register description at address offset 0x308
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR194
  * Direct Access Register 194
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x308). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar194_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x308). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR195 register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR195
  * Direct Access Register 195
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar195_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR196 register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR196
  * Direct Access Register 196
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x310). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar196_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x310). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR197 register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR197
  * Direct Access Register 197
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x314). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar197_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x314). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR198 register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR198
  * Direct Access Register 198
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x318). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar198_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x318). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR199 register description at address offset 0x31c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR199
  * Direct Access Register 199
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x31C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar199_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x31C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR200 register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR200
  * Direct Access Register 200
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x320). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar200_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x320). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR201 register description at address offset 0x324
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR201
  * Direct Access Register 201
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x324). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar201_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x324). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR202 register description at address offset 0x328
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR202
  * Direct Access Register 202
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x328). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar202_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x328). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR203 register description at address offset 0x32c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR203
  * Direct Access Register 203
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x32C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar203_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x32C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR204 register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR204
  * Direct Access Register 204
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x330). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar204_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x330). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR205 register description at address offset 0x334
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR205
  * Direct Access Register 205
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x334). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar205_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x334). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR206 register description at address offset 0x338
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR206
  * Direct Access Register 206
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x338). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar206_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x338). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR207 register description at address offset 0x33c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR207
  * Direct Access Register 207
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x33C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar207_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x33C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR208 register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR208
  * Direct Access Register 208
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x340). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar208_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x340). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR209 register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR209
  * Direct Access Register 209
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x344). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar209_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x344). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR210 register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR210
  * Direct Access Register 210
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x348). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar210_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x348). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR211 register description at address offset 0x34c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR211
  * Direct Access Register 211
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar211_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR212 register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR212
  * Direct Access Register 212
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x350). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar212_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x350). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR213 register description at address offset 0x354
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR213
  * Direct Access Register 213
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x354). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar213_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x354). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR214 register description at address offset 0x358
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR214
  * Direct Access Register 214
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x358). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar214_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x358). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR215 register description at address offset 0x35c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR215
  * Direct Access Register 215
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x35C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar215_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x35C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR216 register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR216
  * Direct Access Register 216
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x360). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar216_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x360). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR217 register description at address offset 0x364
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR217
  * Direct Access Register 217
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x364). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar217_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x364). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR218 register description at address offset 0x368
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR218
  * Direct Access Register 218
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x368). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar218_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x368). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR219 register description at address offset 0x36c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR219
  * Direct Access Register 219
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x36C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar219_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x36C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR220 register description at address offset 0x370
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR220
  * Direct Access Register 220
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x370). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar220_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x370). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR221 register description at address offset 0x374
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR221
  * Direct Access Register 221
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x374). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar221_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x374). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR222 register description at address offset 0x378
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR222
  * Direct Access Register 222
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x378). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar222_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x378). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR223 register description at address offset 0x37c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR223
  * Direct Access Register 223
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x37C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar223_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x37C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR224 register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR224
  * Direct Access Register 224
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x380). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar224_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x380). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR225 register description at address offset 0x384
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR225
  * Direct Access Register 225
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x384). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar225_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x384). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR226 register description at address offset 0x388
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR226
  * Direct Access Register 226
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x388). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar226_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x388). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR227 register description at address offset 0x38c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR227
  * Direct Access Register 227
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar227_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR228 register description at address offset 0x390
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR228
  * Direct Access Register 228
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x390). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar228_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x390). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR229 register description at address offset 0x394
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR229
  * Direct Access Register 229
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x394). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar229_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x394). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR230 register description at address offset 0x398
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR230
  * Direct Access Register 230
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x398). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar230_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x398). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR231 register description at address offset 0x39c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR231
  * Direct Access Register 231
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x39C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar231_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x39C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR232 register description at address offset 0x3a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR232
  * Direct Access Register 232
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar232_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR233 register description at address offset 0x3a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR233
  * Direct Access Register 233
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar233_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR234 register description at address offset 0x3a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR234
  * Direct Access Register 234
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar234_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR235 register description at address offset 0x3ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR235
  * Direct Access Register 235
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3AC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar235_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3AC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR236 register description at address offset 0x3b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR236
  * Direct Access Register 236
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar236_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR237 register description at address offset 0x3b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR237
  * Direct Access Register 237
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar237_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR238 register description at address offset 0x3b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR238
  * Direct Access Register 238
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar238_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR239 register description at address offset 0x3bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR239
  * Direct Access Register 239
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3BC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar239_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3BC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR240 register description at address offset 0x3c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR240
  * Direct Access Register 240
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar240_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR241 register description at address offset 0x3c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR241
  * Direct Access Register 241
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar241_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR242 register description at address offset 0x3c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR242
  * Direct Access Register 242
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar242_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR243 register description at address offset 0x3cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR243
  * Direct Access Register 243
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3CC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar243_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3CC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR244 register description at address offset 0x3d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR244
  * Direct Access Register 244
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar244_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR245 register description at address offset 0x3d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR245
  * Direct Access Register 245
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar245_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR246 register description at address offset 0x3d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR246
  * Direct Access Register 246
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar246_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR247 register description at address offset 0x3dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR247
  * Direct Access Register 247
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3DC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar247_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3DC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR248 register description at address offset 0x3e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR248
  * Direct Access Register 248
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar248_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR249 register description at address offset 0x3e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR249
  * Direct Access Register 249
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar249_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR250 register description at address offset 0x3e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR250
  * Direct Access Register 250
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar250_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR251 register description at address offset 0x3ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR251
  * Direct Access Register 251
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3EC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar251_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3EC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR252 register description at address offset 0x3f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR252
  * Direct Access Register 252
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar252_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR253 register description at address offset 0x3f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR253
  * Direct Access Register 253
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar253_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR254 register description at address offset 0x3f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR254
  * Direct Access Register 254
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar254_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DAR255 register description at address offset 0x3fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DAR255
  * Direct Access Register 255
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3FC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_dar255_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3FC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CSW register description at address offset 0xd00
  *
  * Register default value:        0x30000002
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CSW
  * Control Status Word register
  */

typedef union {
  struct {
    uint32_t SIZE : 3;
    ///< Size of the data access to perform. The APB-AP supports only word
    ///< accesses and this field is fixed at 0x2. The reset value is 0x2.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x2"
    uint32_t RES0_0 : 1;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t ADDRINC : 2;
    ///< Auto address increment mode on RW data access. Only increments if
    ///< the current transaction completes without an error response and the
    ///< transaction is not aborted. Reset to 0b0.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DEVICEEN : 1;
    ///< Indicates the status of the ap_en port. The bit is set when ap_en
    ///< is HIGH, but otherwise is clear. If this bit is clear, no APB transfers
    ///< are carried out, that is, both Secure and Non-secure accesses are
    ///< blocked.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t TRINPROG : 1;
    ///< Transfer in progress. This field indicates whether a transfer is in
    ///< progress on the APB master interface.
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t MODE : 4;
    ///< Specifies the mode of operation. Reset to 0x0. All other values are
    ///< reserved.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t TYPE : 4;
    ///< This field is reserved. Reads return 0x0 and writes are ignored.
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t ERRNPASS : 1;
    ///< Errors are not passed upstream:
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t ERRSTOP : 1;
    ///< Stop on error. Reset to 0.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RES0_1 : 5;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t SDEVICEEN : 1;
    ///< Indicates the status of the ap_en and ap_secure_en ports. It is set
    ///< when both ap_en and ap_secure_en are HIGH, but otherwise is clear.
    ///< If this bit is clear, Secure APB transfers are not permitted. Non-secure
    ///< memory accesses and internal register accesses that do not initiate
    ///< memory accesses are permitted regardless of the status of this bit.
    ///< AccessType="RO" BitOffset="23" ResetValue="0x0"
    uint32_t RES0_2 : 4;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PROT : 3;
    ///< Drives APB master interface pprot_m[2:0] which specifies the APB4
    ///< protection encoding. The reset value is 0x3 (Data, Non-secure, Privileged).
    ///< Together with the Access Port Enable interface signals, CSW.Prot[1]
    ///< determines whether a secure access is allowed on the master interface.
    ///< Accesses are permitted as follows: access_permitted = (ap_en && ap_secure_en)
    ///< || (ap_en && CSW.Prot[1]).
    ///< AccessType="RW" BitOffset="28" ResetValue="0x3"
    uint32_t RES0_3 : 1;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_csw_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_DEFAULT (0x30000002U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_WR_MASK (0xff7f0038U)


///< Size of the data access to perform. The APB-AP supports only word
///< accesses and this field is fixed at 0x2. The reset value is 0x2.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SIZE_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SIZE_BF_WID ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SIZE_BF_MSK (0x00000007)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SIZE_BF_DEF (0x00000002)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_0_BF_OFF ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_0_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_0_BF_MSK (0x00000008)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_0_BF_DEF (0x00000000)

///< Auto address increment mode on RW data access. Only increments if
///< the current transaction completes without an error response and the
///< transaction is not aborted. Reset to 0b0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ADDRINC_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ADDRINC_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ADDRINC_BF_MSK (0x00000030)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ADDRINC_BF_DEF (0x00000000)

///< Indicates the status of the ap_en port. The bit is set when ap_en
///< is HIGH, but otherwise is clear. If this bit is clear, no APB transfers
///< are carried out, that is, both Secure and Non-secure accesses are
///< blocked.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_DEVICEEN_BF_OFF ( 6)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_DEVICEEN_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_DEVICEEN_BF_MSK (0x00000040)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_DEVICEEN_BF_DEF (0x00000000)

///< Transfer in progress. This field indicates whether a transfer is in
///< progress on the APB master interface.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TRINPROG_BF_OFF ( 7)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TRINPROG_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TRINPROG_BF_MSK (0x00000080)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TRINPROG_BF_DEF (0x00000000)

///< Specifies the mode of operation. Reset to 0x0. All other values are
///< reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_MODE_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_MODE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_MODE_BF_MSK (0x00000F00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_MODE_BF_DEF (0x00000000)

///< This field is reserved. Reads return 0x0 and writes are ignored.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TYPE_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TYPE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TYPE_BF_MSK (0x0000F000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_TYPE_BF_DEF (0x00000000)

///< Errors are not passed upstream:
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRNPASS_BF_OFF (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRNPASS_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRNPASS_BF_MSK (0x00010000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRNPASS_BF_DEF (0x00000000)

///< Stop on error. Reset to 0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRSTOP_BF_OFF (17)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRSTOP_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRSTOP_BF_MSK (0x00020000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ERRSTOP_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_1_BF_OFF (18)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_1_BF_WID ( 5)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_1_BF_MSK (0x007C0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_1_BF_DEF (0x00000000)

///< Indicates the status of the ap_en and ap_secure_en ports. It is set
///< when both ap_en and ap_secure_en are HIGH, but otherwise is clear.
///< If this bit is clear, Secure APB transfers are not permitted. Non-secure
///< memory accesses and internal register accesses that do not initiate
///< memory accesses are permitted regardless of the status of this bit.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SDEVICEEN_BF_OFF (23)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SDEVICEEN_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SDEVICEEN_BF_MSK (0x00800000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_SDEVICEEN_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_2_BF_OFF (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_2_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_2_BF_MSK (0x0F000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_2_BF_DEF (0x00000000)

///< Drives APB master interface pprot_m[2:0] which specifies the APB4
///< protection encoding. The reset value is 0x3 (Data, Non-secure, Privileged).
///< Together with the Access Port Enable interface signals, CSW.Prot[1]
///< determines whether a secure access is allowed on the master interface.
///< Accesses are permitted as follows: access_permitted = (ap_en && ap_secure_en)
///< || (ap_en && CSW.Prot[1]).
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_PROT_BF_OFF (28)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_PROT_BF_WID ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_PROT_BF_MSK (0x70000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_PROT_BF_DEF (0x30000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_3_BF_OFF (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_3_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_3_BF_MSK (0x80000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_RES0_3_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_TAR register description at address offset 0xd04
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/TAR
  * Transfer Address Register
  */

typedef union {
  struct {
    uint32_t ADDRESS : 32;
    ///< Address of the current transfer. When a memory access is initiated
    ///< by accessing the DRW register, the TAR value directly gives the 32-bit
    ///< transfer address. When a memory access is initiated by accessing Banked
    ///< Data registers, the TAR only provides the upper bits [31:4] and the
    ///< remaining address bits [3:0] come from the offset of Banked Data register
    ///< being accessed. When a memory access is initiated by accessing Direct
    ///< Access Registers, the TAR provides the upper bits [31:10] and the
    ///< remaining address bits [9:0] come from the offset of the DAR being
    ///< accessed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_tar_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_WR_MASK (0xffffffffU)


///< Address of the current transfer. When a memory access is initiated
///< by accessing the DRW register, the TAR value directly gives the 32-bit
///< transfer address. When a memory access is initiated by accessing Banked
///< Data registers, the TAR only provides the upper bits [31:4] and the
///< remaining address bits [3:0] come from the offset of Banked Data register
///< being accessed. When a memory access is initiated by accessing Direct
///< Access Registers, the TAR provides the upper bits [31:10] and the
///< remaining address bits [9:0] come from the offset of the DAR being
///< accessed.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DRW register description at address offset 0xd0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DRW
  * Data Read/Write register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Current transfer data value. In read mode, the register contains the
    ///< data value that was read from the current transfer, and in write mode
    ///< the register contains the data value to write for the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_drw_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_WR_MASK (0xffffffffU)


///< Current transfer data value. In read mode, the register contains the
///< data value that was read from the current transfer, and in write mode
///< the register contains the data value to write for the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_BD0 register description at address offset 0xd10
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/BD0
  * Banked Data register 0
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x0). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_bd0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x0). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_BD1 register description at address offset 0xd14
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/BD1
  * Banked Data register 1
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x4). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_bd1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x4). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_BD2 register description at address offset 0xd18
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/BD2
  * Banked Data register 2
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x8). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_bd2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x8). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_BD3 register description at address offset 0xd1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/BD3
  * Banked Data register 3
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0xC). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_bd3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0xC). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_TRR register description at address offset 0xd24
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/TRR
  * Transfer Response Register
  */

typedef union {
  struct {
    uint32_t ERR : 1;
    ///< Logged error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_trr_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_WR_MASK (0xffffffffU)


///< Logged error.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_ERR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_ERR_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_ERR_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_ERR_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_RES0_0_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_RES0_0_BF_WID (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CFG register description at address offset 0xdf4
  *
  * Register default value:        0x000101A0
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CFG
  * Configuration register
  */

typedef union {
  struct {
    uint32_t RES0_0 : 4;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t DARSIZE : 4;
    ///< Size of DAR register space. Returns 0xA indicating that 1KB (256 registers,
    ///< each 32-bit wide) of DAR is implemented.
    ///< AccessType="RO" BitOffset="4" ResetValue="0xA"
    uint32_t ERR : 4;
    ///< Indicates the type of error handling that is implemented:
    ///< AccessType="RO" BitOffset="8" ResetValue="0x1"
    uint32_t RES0_1 : 4;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t TARINC : 4;
    ///< TAR incrementer size. Returns 0x1 indicating a TAR incrementer size
    ///< of 10-bits.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x1"
    uint32_t RES0_2 : 12;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_cfg_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_DEFAULT (0x000101a0U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_WR_MASK (0x00000000U)


///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_0_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_0_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_0_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_0_BF_DEF (0x00000000)

///< Size of DAR register space. Returns 0xA indicating that 1KB (256 registers,
///< each 32-bit wide) of DAR is implemented.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_DARSIZE_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_DARSIZE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_DARSIZE_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_DARSIZE_BF_DEF (0x000000A0)

///< Indicates the type of error handling that is implemented:
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_ERR_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_ERR_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_ERR_BF_MSK (0x00000F00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_ERR_BF_DEF (0x00000100)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_1_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_1_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_1_BF_MSK (0x0000F000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_1_BF_DEF (0x00000000)

///< TAR incrementer size. Returns 0x1 indicating a TAR incrementer size
///< of 10-bits.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_TARINC_BF_OFF (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_TARINC_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_TARINC_BF_MSK (0x000F0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_TARINC_BF_DEF (0x00010000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_2_BF_OFF (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_2_BF_WID (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_2_BF_MSK (0xFFF00000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_RES0_2_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_BASE register description at address offset 0xdf8
  *
  * Register default value:        0xFFFFF003
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/BASE
  * Debug Base Address register
  */

typedef union {
  struct {
    uint32_t ENTRYPRESENT : 1;
    ///< This field indicates whether a debug component is present for this
    ///< AP. It returns the tie-off value of the input signal baseaddr_valid.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t FORMAT : 1;
    ///< Base address register format. Returns the value 0b1 indicating the
    ///< ADIv5 format, which is unchanged in ADIv6.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x1"
    uint32_t RES0_0 : 10;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t BASEADDR : 20;
    ///< Base address of a ROM table. It points to the start of the debug register
    ///< space or a ROM table address. Bits[11:0] of the address are 0x000
    ///< because the address is aligned to 4KB boundary. This field is valid
    ///< only if BASE.EntryPresent bit is set to 1, in which case it returns
    ///< the tie-off value of the input signal baseaddr[31:12], otherwise,
    ///< it reads as 0x0.
    ///< AccessType="RO" BitOffset="12" ResetValue="0xFFFFF"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_base_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_DEFAULT (0xfffff003U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_WR_MASK (0x00000000U)


///< This field indicates whether a debug component is present for this
///< AP. It returns the tie-off value of the input signal baseaddr_valid.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_ENTRYPRESENT_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_ENTRYPRESENT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_ENTRYPRESENT_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_ENTRYPRESENT_BF_DEF (0x00000001)

///< Base address register format. Returns the value 0b1 indicating the
///< ADIv5 format, which is unchanged in ADIv6.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_FORMAT_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_FORMAT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_FORMAT_BF_MSK (0x00000002)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_FORMAT_BF_DEF (0x00000002)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_RES0_0_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_RES0_0_BF_WID (10)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_RES0_0_BF_MSK (0x00000FFC)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_RES0_0_BF_DEF (0x00000000)

///< Base address of a ROM table. It points to the start of the debug register
///< space or a ROM table address. Bits[11:0] of the address are 0x000
///< because the address is aligned to 4KB boundary. This field is valid
///< only if BASE.EntryPresent bit is set to 1, in which case it returns
///< the tie-off value of the input signal baseaddr[31:12], otherwise,
///< it reads as 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_BASEADDR_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_BASEADDR_BF_WID (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_BASEADDR_BF_MSK (0xFFFFF000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_BASEADDR_BF_DEF (0xFFFFF000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_IDR register description at address offset 0xdfc
  *
  * Register default value:        0x34770006
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/IDR
  * Identification Register
  */

typedef union {
  struct {
    uint32_t TYPE : 4;
    ///< Returns 0x6, indicating that this is an APB4 Access Port
    ///< AccessType="RO" BitOffset="0" ResetValue="0x6"
    uint32_t VARIANT : 4;
    ///< Returns 0x0, indicating no variation from base type specified by IDR.Type
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 5;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t CLASS : 4;
    ///< Returns 0x8, indicating that this is a Memory Access Port
    ///< AccessType="RO" BitOffset="13" ResetValue="0x8"
    uint32_t JEDEC_CODE : 7;
    ///< The JEP106 identification code. Returns 0x3B, indicating Arm as the
    ///< designer.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x3B"
    uint32_t JEDEC_BANK : 4;
    ///< The JEP106 continuation code. Returns 0x4, indicating Arm as the designer.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x4"
    uint32_t REVISION : 4;
    ///< Revision. An incremental value starting at 0x0 for the first design
    ///< of a component. See the Component list in Chapter 1 for information
    ///< on the RTL revision of the component.
    ///< AccessType="RO" BitOffset="28" ResetValue="0x3"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_idr_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_DEFAULT (0x34770006U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_WR_MASK (0x00000000U)


///< Returns 0x6, indicating that this is an APB4 Access Port
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_TYPE_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_TYPE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_TYPE_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_TYPE_BF_DEF (0x00000006)

///< Returns 0x0, indicating no variation from base type specified by IDR.Type
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_VARIANT_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_VARIANT_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_VARIANT_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_VARIANT_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_RES0_0_BF_WID ( 5)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_RES0_0_BF_MSK (0x00001F00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_RES0_0_BF_DEF (0x00000000)

///< Returns 0x8, indicating that this is a Memory Access Port
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_CLASS_BF_OFF (13)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_CLASS_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_CLASS_BF_MSK (0x0001E000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_CLASS_BF_DEF (0x00010000)

///< The JEP106 identification code. Returns 0x3B, indicating Arm as the
///< designer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_CODE_BF_OFF (17)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_CODE_BF_WID ( 7)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_CODE_BF_MSK (0x00FE0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_CODE_BF_DEF (0x00760000)

///< The JEP106 continuation code. Returns 0x4, indicating Arm as the designer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_BANK_BF_OFF (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_BANK_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_BANK_BF_MSK (0x0F000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_JEDEC_BANK_BF_DEF (0x04000000)

///< Revision. An incremental value starting at 0x0 for the first design
///< of a component. See the Component list in Chapter 1 for information
///< on the RTL revision of the component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_REVISION_BF_OFF (28)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_REVISION_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_REVISION_BF_MSK (0xF0000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_REVISION_BF_DEF (0x30000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITSTATUS register description at address offset 0xefc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/ITSTATUS
  * Integration Test Status register
  */

typedef union {
  struct {
    uint32_t DPABORT : 1;
    ///< When in Integration testing mode (ITCTRL.IME=0b1): Behaves as a sticky
    ///< bit and latches to 1 on a rising edge of dp_abort. Cleared on a read
    ///< from this register. If dp_abort rises in the same cycle as a read
    ///< of the ITSTATUS register is received, the read takes priority and
    ///< the register is cleared. When in normal functional operation mode
    ///< (ITCTRL.IME=0b0): Read as 0, writes ignored.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_itstatus_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_WR_MASK (0xfffffffeU)


///< When in Integration testing mode (ITCTRL.IME=0b1): Behaves as a sticky
///< bit and latches to 1 on a rising edge of dp_abort. Cleared on a read
///< from this register. If dp_abort rises in the same cycle as a read
///< of the ITSTATUS register is received, the read takes priority and
///< the register is cleared. When in normal functional operation mode
///< (ITCTRL.IME=0b0): Read as 0, writes ignored.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_DPABORT_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_DPABORT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_DPABORT_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_DPABORT_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_RES0_0_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_RES0_0_BF_WID (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITCTRL register description at address offset 0xf00
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/ITCTRL
  * Integration Mode Control Register
  */

typedef union {
  struct {
    uint32_t IME : 1;
    ///< Integration Mode Enable. When set, the component enters integration
    ///< mode, enabling topology detection or integration testing to be performed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_itctrl_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_WR_MASK (0xffffffffU)


///< Integration Mode Enable. When set, the component enters integration
///< mode, enabling topology detection or integration testing to be performed.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_IME_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_IME_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_IME_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_IME_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_RES0_0_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_RES0_0_BF_WID (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CLAIMSET register description at address offset 0xfa0
  *
  * Register default value:        0x00000003
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CLAIMSET
  * Claim Tag Set Register
  */

typedef union {
  struct {
    uint32_t SET : 2;
    ///< A bit-programmable register bank that sets the claim tag value. A
    ///< read returns a logic 1 for all implemented locations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RAZWI_0 : 30;
    ///< RAZ/WI
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_claimset_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_DEFAULT (0x00000003U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_WR_MASK (0xffffffffU)


///< A bit-programmable register bank that sets the claim tag value. A
///< read returns a logic 1 for all implemented locations.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_SET_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_SET_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_SET_BF_MSK (0x00000003)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_SET_BF_DEF (0x00000003)

///< RAZ/WI
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_RAZWI_0_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_RAZWI_0_BF_WID (30)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_RAZWI_0_BF_MSK (0xFFFFFFFC)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_RAZWI_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CLAIMCLR register description at address offset 0xfa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CLAIMCLR
  * Claim Tag Clear Register
  */

typedef union {
  struct {
    uint32_t CLR : 2;
    ///< A bit-programmable register bank that clears the claim tag value.
    ///< It is zero at reset. It is used by software agents to signal to each
    ///< other ownership of the hardware. It has no direct effect on the hardware
    ///< itself.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RAZWI_0 : 30;
    ///< RAZ/WI
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_claimclr_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_WR_MASK (0xffffffffU)


///< A bit-programmable register bank that clears the claim tag value.
///< It is zero at reset. It is used by software agents to signal to each
///< other ownership of the hardware. It has no direct effect on the hardware
///< itself.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_CLR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_CLR_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_CLR_BF_MSK (0x00000003)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_CLR_BF_DEF (0x00000000)

///< RAZ/WI
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_RAZWI_0_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_RAZWI_0_BF_WID (30)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_RAZWI_0_BF_MSK (0xFFFFFFFC)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_RAZWI_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_AUTHSTATUS register description at address offset 0xfb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/AUTHSTATUS
  * Authentication Status Register
  */

typedef union {
  struct {
    uint32_t NSID : 2;
    ///< Non-secure invasive debug.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t NSNID : 2;
    ///< Non-secure non-invasive debug.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SID : 2;
    ///< Secure invasive debug.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t SNID : 2;
    ///< Secure non-invasive debug.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t HID : 2;
    ///< Hypervisor invasive debug.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t HNID : 2;
    ///< Hypervisor non-invasive debug.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t RES0_0 : 20;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_authstatus_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_WR_MASK (0x00000000U)


///< Non-secure invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSID_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSID_BF_MSK (0x00000003)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSID_BF_DEF (0x00000000)

///< Non-secure non-invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSNID_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSNID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSNID_BF_MSK (0x0000000C)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_NSNID_BF_DEF (0x00000000)

///< Secure invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SID_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SID_BF_MSK (0x00000030)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SID_BF_DEF (0x00000000)

///< Secure non-invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SNID_BF_OFF ( 6)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SNID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SNID_BF_MSK (0x000000C0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_SNID_BF_DEF (0x00000000)

///< Hypervisor invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HID_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HID_BF_MSK (0x00000300)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HID_BF_DEF (0x00000000)

///< Hypervisor non-invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HNID_BF_OFF (10)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HNID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HNID_BF_MSK (0x00000C00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_HNID_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_RES0_0_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_RES0_0_BF_WID (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_RES0_0_BF_MSK (0xFFFFF000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVARCH register description at address offset 0xfbc
  *
  * Register default value:        0x47700A17
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DEVARCH
  * Device Architecture Register
  */

typedef union {
  struct {
    uint32_t ARCHID : 16;
    ///< Architecture ID. Returns 0x0a17, identifying APv2 MEM-AP architecture
    ///< v0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xA17"
    uint32_t REVISION : 4;
    ///< Architecture revision. Returns the revision of the architecture that
    ///< the ARCHID field specifies.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t PRESENT : 1;
    ///< Returns 1, indicating that the DEVARCH register is present.
    ///< AccessType="RO" BitOffset="20" ResetValue="0x1"
    uint32_t ARCHITECT : 11;
    ///< Returns 0x23b, denoting Arm as architect of the component.
    ///< AccessType="RO" BitOffset="21" ResetValue="0x23B"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_devarch_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_DEFAULT (0x47700a17U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_WR_MASK (0x00000000U)


///< Architecture ID. Returns 0x0a17, identifying APv2 MEM-AP architecture
///< v0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHID_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHID_BF_WID (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHID_BF_MSK (0x0000FFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHID_BF_DEF (0x00000A17)

///< Architecture revision. Returns the revision of the architecture that
///< the ARCHID field specifies.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_REVISION_BF_OFF (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_REVISION_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_REVISION_BF_MSK (0x000F0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_REVISION_BF_DEF (0x00000000)

///< Returns 1, indicating that the DEVARCH register is present.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_PRESENT_BF_OFF (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_PRESENT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_PRESENT_BF_MSK (0x00100000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_PRESENT_BF_DEF (0x00100000)

///< Returns 0x23b, denoting Arm as architect of the component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHITECT_BF_OFF (21)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHITECT_BF_WID (11)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHITECT_BF_MSK (0xFFE00000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ARCHITECT_BF_DEF (0x47600000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVTYPE register description at address offset 0xfcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/DEVTYPE
  * Device Type Identifier Register
  */

typedef union {
  struct {
    uint32_t MAJOR : 4;
    ///< Major classification. Returns 0x0, Miscellaneous.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SUB : 4;
    ///< Minor classification. Returns 0x0, Other/undefined.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_devtype_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_WR_MASK (0x00000000U)


///< Major classification. Returns 0x0, Miscellaneous.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_MAJOR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_MAJOR_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_MAJOR_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_MAJOR_BF_DEF (0x00000000)

///< Minor classification. Returns 0x0, Other/undefined.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_SUB_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_SUB_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_SUB_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_SUB_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR4 register description at address offset 0xfd0
  *
  * Register default value:        0x00000004
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR4
  * Peripheral Identification Register 4
  */

typedef union {
  struct {
    uint32_t DES_2 : 4;
    ///< JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0,
    ///< they indicate the designer of the component and not the implementer,
    ///< except where the two are the same.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x4"
    uint32_t SIZE : 4;
    ///< Indicates the memory size that is used by this component. Returns
    ///< 0 indicating that the component uses an UNKNOWN number of 4KB blocks.
    ///< Using the SIZE field to indicate the size of the component is deprecated.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr4_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_DEFAULT (0x00000004U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_WR_MASK (0x00000000U)


///< JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0,
///< they indicate the designer of the component and not the implementer,
///< except where the two are the same.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_DES_2_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_DES_2_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_DES_2_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_DES_2_BF_DEF (0x00000004)

///< Indicates the memory size that is used by this component. Returns
///< 0 indicating that the component uses an UNKNOWN number of 4KB blocks.
///< Using the SIZE field to indicate the size of the component is deprecated.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_SIZE_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_SIZE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_SIZE_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_SIZE_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR5 register description at address offset 0xfd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR5
  * Peripheral Identification Register 5
  */

typedef union {
  struct {
    uint32_t PIDR5 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr5_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR6 register description at address offset 0xfd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR6
  * Peripheral Identification Register 6
  */

typedef union {
  struct {
    uint32_t PIDR6 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr6_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR7 register description at address offset 0xfdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR7
  * Peripheral Identification Register 7
  */

typedef union {
  struct {
    uint32_t PIDR7 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr7_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR0 register description at address offset 0xfe0
  *
  * Register default value:        0x000000E2
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR0
  * Peripheral Identification Register 0
  */

typedef union {
  struct {
    uint32_t PART_0 : 8;
    ///< Part number, bits[7:0]. Taken together with PIDR1.PART_1 it indicates
    ///< the component. The Part Number is selected by the designer of the
    ///< component.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xE2"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_DEFAULT (0x000000e2U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_WR_MASK (0x00000000U)


///< Part number, bits[7:0]. Taken together with PIDR1.PART_1 it indicates
///< the component. The Part Number is selected by the designer of the
///< component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_PART_0_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_PART_0_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_PART_0_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_PART_0_BF_DEF (0x000000E2)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR1 register description at address offset 0xfe4
  *
  * Register default value:        0x000000B9
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR1
  * Peripheral Identification Register 1
  */

typedef union {
  struct {
    uint32_t PART_1 : 4;
    ///< Part number, bits[11:8]. Taken together with PIDR0.PART_0 it indicates
    ///< the component. The Part Number is selected by the designer of the
    ///< component.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x9"
    uint32_t DES_0 : 4;
    ///< JEP106 identification code, bits[3:0]. Together, with PIDR4.DES_2
    ///< and PIDR2.DES_1, they indicate the designer of the component and not
    ///< the implementer, except where the two are the same.
    ///< AccessType="RO" BitOffset="4" ResetValue="0xB"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_DEFAULT (0x000000b9U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_WR_MASK (0x00000000U)


///< Part number, bits[11:8]. Taken together with PIDR0.PART_0 it indicates
///< the component. The Part Number is selected by the designer of the
///< component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_PART_1_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_PART_1_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_PART_1_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_PART_1_BF_DEF (0x00000009)

///< JEP106 identification code, bits[3:0]. Together, with PIDR4.DES_2
///< and PIDR2.DES_1, they indicate the designer of the component and not
///< the implementer, except where the two are the same.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_DES_0_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_DES_0_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_DES_0_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_DES_0_BF_DEF (0x000000B0)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR2 register description at address offset 0xfe8
  *
  * Register default value:        0x0000003B
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR2
  * Peripheral Identification Register 2
  */

typedef union {
  struct {
    uint32_t DES_1 : 3;
    ///< JEP106 identification code, bits[6:4]. Together, with PIDR4.DES_2
    ///< and PIDR1.DES_0, they indicate the designer of the component and not
    ///< the implementer, except where the two are the same.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x3"
    uint32_t JEDEC : 1;
    ///< 1 - Always set. Indicates that a JEDEC assigned value is used.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x1"
    uint32_t REVISION : 4;
    ///< Revision. It is an incremental value starting at 0x0 for the first
    ///< design of a component. See the Component list in Chapter 1 for information
    ///< on the RTL revision of the component.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x3"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_DEFAULT (0x0000003bU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_WR_MASK (0x00000000U)


///< JEP106 identification code, bits[6:4]. Together, with PIDR4.DES_2
///< and PIDR1.DES_0, they indicate the designer of the component and not
///< the implementer, except where the two are the same.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_DES_1_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_DES_1_BF_WID ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_DES_1_BF_MSK (0x00000007)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_DES_1_BF_DEF (0x00000003)

///< 1 - Always set. Indicates that a JEDEC assigned value is used.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_JEDEC_BF_OFF ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_JEDEC_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_JEDEC_BF_MSK (0x00000008)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_JEDEC_BF_DEF (0x00000008)

///< Revision. It is an incremental value starting at 0x0 for the first
///< design of a component. See the Component list in Chapter 1 for information
///< on the RTL revision of the component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_REVISION_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_REVISION_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_REVISION_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_REVISION_BF_DEF (0x00000030)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR3 register description at address offset 0xfec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/PIDR3
  * Peripheral Identification Register 3
  */

typedef union {
  struct {
    uint32_t CMOD : 4;
    ///< Customer Modified. Where the component is reusable IP, this value
    ///< indicates if the customer has modified the behavior of the component.
    ///< In most cases this field is 0x0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t REVAND : 4;
    ///< This field indicates minor errata fixes specific to this design, for
    ///< example metal fixes after implementation. In most cases this field
    ///< is 0x0.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_pidr3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_WR_MASK (0x00000000U)


///< Customer Modified. Where the component is reusable IP, this value
///< indicates if the customer has modified the behavior of the component.
///< In most cases this field is 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_CMOD_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_CMOD_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_CMOD_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_CMOD_BF_DEF (0x00000000)

///< This field indicates minor errata fixes specific to this design, for
///< example metal fixes after implementation. In most cases this field
///< is 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_REVAND_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_REVAND_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_REVAND_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_REVAND_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR0 register description at address offset 0xff0
  *
  * Register default value:        0x0000000D
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CIDR0
  * Component Identification Register 0
  */

typedef union {
  struct {
    uint32_t PRMBL_0 : 8;
    ///< Preamble. Returns 0x0D.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xD"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_cidr0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_DEFAULT (0x0000000dU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_WR_MASK (0x00000000U)


///< Preamble. Returns 0x0D.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_PRMBL_0_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_PRMBL_0_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_PRMBL_0_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_PRMBL_0_BF_DEF (0x0000000D)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR1 register description at address offset 0xff4
  *
  * Register default value:        0x00000090
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CIDR1
  * Component Identification Register 1
  */

typedef union {
  struct {
    uint32_t PRMBL_1 : 4;
    ///< Preamble. Returns 0x0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t CLASS : 4;
    ///< Component class. Returns 0x9, indicating this is a CoreSight component.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x9"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_cidr1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_DEFAULT (0x00000090U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_WR_MASK (0x00000000U)


///< Preamble. Returns 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_PRMBL_1_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_PRMBL_1_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_PRMBL_1_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_PRMBL_1_BF_DEF (0x00000000)

///< Component class. Returns 0x9, indicating this is a CoreSight component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_CLASS_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_CLASS_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_CLASS_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_CLASS_BF_DEF (0x00000090)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR2 register description at address offset 0xff8
  *
  * Register default value:        0x00000005
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CIDR2
  * Component Identification Register 2
  */

typedef union {
  struct {
    uint32_t PRMBL_2 : 8;
    ///< Preamble. Returns 0x05.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x5"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_cidr2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_DEFAULT (0x00000005U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_WR_MASK (0x00000000U)


///< Preamble. Returns 0x05.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_PRMBL_2_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_PRMBL_2_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_PRMBL_2_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_PRMBL_2_BF_DEF (0x00000005)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR3 register description at address offset 0xffc
  *
  * Register default value:        0x000000B1
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_0/CIDR3
  * Component Identification Register 3
  */

typedef union {
  struct {
    uint32_t PRMBL_3 : 8;
    ///< Preamble. Returns 0xB1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xB1"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_0_cidr3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_DEFAULT (0x000000b1U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_WR_MASK (0x00000000U)


///< Preamble. Returns 0xB1.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_PRMBL_3_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_PRMBL_3_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_PRMBL_3_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_PRMBL_3_BF_DEF (0x000000B1)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR0 register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR0
  * Direct Access Register 0
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x0). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x0). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR1 register description at address offset 0x1004
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR1
  * Direct Access Register 1
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR2 register description at address offset 0x1008
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR2
  * Direct Access Register 2
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR3 register description at address offset 0x100c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR3
  * Direct Access Register 3
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC). In read mode, the
    ///< register contains the data value that was read from memory, and in
    ///< write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC). In read mode, the
///< register contains the data value that was read from memory, and in
///< write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR4 register description at address offset 0x1010
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR4
  * Direct Access Register 4
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar4_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR5 register description at address offset 0x1014
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR5
  * Direct Access Register 5
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar5_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR6 register description at address offset 0x1018
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR6
  * Direct Access Register 6
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar6_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR7 register description at address offset 0x101c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR7
  * Direct Access Register 7
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar7_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR8 register description at address offset 0x1020
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR8
  * Direct Access Register 8
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar8_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR9 register description at address offset 0x1024
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR9
  * Direct Access Register 9
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar9_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR10 register description at address offset 0x1028
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR10
  * Direct Access Register 10
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar10_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR11 register description at address offset 0x102c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR11
  * Direct Access Register 11
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar11_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR12 register description at address offset 0x1030
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR12
  * Direct Access Register 12
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar12_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR13 register description at address offset 0x1034
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR13
  * Direct Access Register 13
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar13_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR14 register description at address offset 0x1038
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR14
  * Direct Access Register 14
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar14_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR15 register description at address offset 0x103c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR15
  * Direct Access Register 15
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar15_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR16 register description at address offset 0x1040
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR16
  * Direct Access Register 16
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x40). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar16_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x40). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR17 register description at address offset 0x1044
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR17
  * Direct Access Register 17
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x44). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar17_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x44). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR18 register description at address offset 0x1048
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR18
  * Direct Access Register 18
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x48). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar18_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x48). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR19 register description at address offset 0x104c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR19
  * Direct Access Register 19
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar19_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x4C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR20 register description at address offset 0x1050
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR20
  * Direct Access Register 20
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x50). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar20_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x50). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR21 register description at address offset 0x1054
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR21
  * Direct Access Register 21
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x54). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar21_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x54). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR22 register description at address offset 0x1058
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR22
  * Direct Access Register 22
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x58). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar22_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x58). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR23 register description at address offset 0x105c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR23
  * Direct Access Register 23
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x5C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar23_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x5C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR24 register description at address offset 0x1060
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR24
  * Direct Access Register 24
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x60). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar24_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x60). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR25 register description at address offset 0x1064
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR25
  * Direct Access Register 25
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x64). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar25_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x64). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR26 register description at address offset 0x1068
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR26
  * Direct Access Register 26
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x68). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar26_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x68). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR27 register description at address offset 0x106c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR27
  * Direct Access Register 27
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x6C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar27_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x6C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR28 register description at address offset 0x1070
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR28
  * Direct Access Register 28
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x70). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar28_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x70). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR29 register description at address offset 0x1074
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR29
  * Direct Access Register 29
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x74). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar29_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x74). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR30 register description at address offset 0x1078
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR30
  * Direct Access Register 30
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x78). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar30_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x78). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR31 register description at address offset 0x107c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR31
  * Direct Access Register 31
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x7C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar31_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x7C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR32 register description at address offset 0x1080
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR32
  * Direct Access Register 32
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x80). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar32_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x80). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR33 register description at address offset 0x1084
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR33
  * Direct Access Register 33
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x84). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar33_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x84). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR34 register description at address offset 0x1088
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR34
  * Direct Access Register 34
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x88). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar34_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x88). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR35 register description at address offset 0x108c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR35
  * Direct Access Register 35
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar35_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x8C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR36 register description at address offset 0x1090
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR36
  * Direct Access Register 36
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x90). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar36_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x90). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR37 register description at address offset 0x1094
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR37
  * Direct Access Register 37
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x94). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar37_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x94). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR38 register description at address offset 0x1098
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR38
  * Direct Access Register 38
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x98). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar38_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x98). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR39 register description at address offset 0x109c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR39
  * Direct Access Register 39
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x9C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar39_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x9C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR40 register description at address offset 0x10a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR40
  * Direct Access Register 40
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar40_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR41 register description at address offset 0x10a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR41
  * Direct Access Register 41
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar41_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR42 register description at address offset 0x10a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR42
  * Direct Access Register 42
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar42_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xA8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR43 register description at address offset 0x10ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR43
  * Direct Access Register 43
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xAC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar43_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xAC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR44 register description at address offset 0x10b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR44
  * Direct Access Register 44
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar44_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR45 register description at address offset 0x10b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR45
  * Direct Access Register 45
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar45_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR46 register description at address offset 0x10b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR46
  * Direct Access Register 46
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar46_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xB8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR47 register description at address offset 0x10bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR47
  * Direct Access Register 47
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xBC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar47_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xBC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR48 register description at address offset 0x10c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR48
  * Direct Access Register 48
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar48_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR49 register description at address offset 0x10c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR49
  * Direct Access Register 49
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar49_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR50 register description at address offset 0x10c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR50
  * Direct Access Register 50
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar50_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xC8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR51 register description at address offset 0x10cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR51
  * Direct Access Register 51
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xCC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar51_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xCC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR52 register description at address offset 0x10d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR52
  * Direct Access Register 52
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar52_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR53 register description at address offset 0x10d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR53
  * Direct Access Register 53
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar53_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR54 register description at address offset 0x10d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR54
  * Direct Access Register 54
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar54_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xD8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR55 register description at address offset 0x10dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR55
  * Direct Access Register 55
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xDC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar55_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xDC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR56 register description at address offset 0x10e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR56
  * Direct Access Register 56
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar56_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR57 register description at address offset 0x10e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR57
  * Direct Access Register 57
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar57_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR58 register description at address offset 0x10e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR58
  * Direct Access Register 58
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar58_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xE8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR59 register description at address offset 0x10ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR59
  * Direct Access Register 59
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xEC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar59_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xEC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR60 register description at address offset 0x10f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR60
  * Direct Access Register 60
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar60_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR61 register description at address offset 0x10f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR61
  * Direct Access Register 61
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar61_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR62 register description at address offset 0x10f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR62
  * Direct Access Register 62
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar62_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xF8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR63 register description at address offset 0x10fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR63
  * Direct Access Register 63
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xFC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar63_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0xFC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR64 register description at address offset 0x1100
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR64
  * Direct Access Register 64
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x100). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar64_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x100). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR65 register description at address offset 0x1104
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR65
  * Direct Access Register 65
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x104). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar65_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x104). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR66 register description at address offset 0x1108
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR66
  * Direct Access Register 66
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x108). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar66_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x108). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR67 register description at address offset 0x110c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR67
  * Direct Access Register 67
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar67_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x10C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR68 register description at address offset 0x1110
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR68
  * Direct Access Register 68
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x110). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar68_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x110). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR69 register description at address offset 0x1114
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR69
  * Direct Access Register 69
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x114). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar69_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x114). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR70 register description at address offset 0x1118
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR70
  * Direct Access Register 70
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x118). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar70_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x118). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR71 register description at address offset 0x111c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR71
  * Direct Access Register 71
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x11C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar71_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x11C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR72 register description at address offset 0x1120
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR72
  * Direct Access Register 72
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x120). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar72_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x120). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR73 register description at address offset 0x1124
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR73
  * Direct Access Register 73
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x124). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar73_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x124). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR74 register description at address offset 0x1128
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR74
  * Direct Access Register 74
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x128). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar74_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x128). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR75 register description at address offset 0x112c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR75
  * Direct Access Register 75
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x12C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar75_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x12C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR76 register description at address offset 0x1130
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR76
  * Direct Access Register 76
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x130). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar76_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x130). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR77 register description at address offset 0x1134
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR77
  * Direct Access Register 77
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x134). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar77_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x134). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR78 register description at address offset 0x1138
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR78
  * Direct Access Register 78
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x138). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar78_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x138). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR79 register description at address offset 0x113c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR79
  * Direct Access Register 79
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x13C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar79_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x13C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR80 register description at address offset 0x1140
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR80
  * Direct Access Register 80
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x140). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar80_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x140). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR81 register description at address offset 0x1144
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR81
  * Direct Access Register 81
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x144). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar81_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x144). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR82 register description at address offset 0x1148
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR82
  * Direct Access Register 82
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x148). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar82_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x148). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR83 register description at address offset 0x114c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR83
  * Direct Access Register 83
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar83_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x14C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR84 register description at address offset 0x1150
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR84
  * Direct Access Register 84
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x150). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar84_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x150). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR85 register description at address offset 0x1154
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR85
  * Direct Access Register 85
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x154). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar85_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x154). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR86 register description at address offset 0x1158
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR86
  * Direct Access Register 86
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x158). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar86_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x158). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR87 register description at address offset 0x115c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR87
  * Direct Access Register 87
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x15C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar87_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x15C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR88 register description at address offset 0x1160
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR88
  * Direct Access Register 88
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x160). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar88_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x160). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR89 register description at address offset 0x1164
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR89
  * Direct Access Register 89
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x164). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar89_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x164). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR90 register description at address offset 0x1168
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR90
  * Direct Access Register 90
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x168). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar90_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x168). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR91 register description at address offset 0x116c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR91
  * Direct Access Register 91
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x16C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar91_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x16C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR92 register description at address offset 0x1170
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR92
  * Direct Access Register 92
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x170). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar92_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x170). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR93 register description at address offset 0x1174
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR93
  * Direct Access Register 93
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x174). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar93_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x174). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR94 register description at address offset 0x1178
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR94
  * Direct Access Register 94
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x178). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar94_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x178). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR95 register description at address offset 0x117c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR95
  * Direct Access Register 95
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x17C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar95_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x17C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR96 register description at address offset 0x1180
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR96
  * Direct Access Register 96
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x180). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar96_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x180). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR97 register description at address offset 0x1184
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR97
  * Direct Access Register 97
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x184). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar97_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x184). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR98 register description at address offset 0x1188
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR98
  * Direct Access Register 98
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x188). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar98_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x188). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR99 register description at address offset 0x118c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR99
  * Direct Access Register 99
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar99_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x18C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR100 register description at address offset 0x1190
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR100
  * Direct Access Register 100
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x190). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar100_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x190). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR101 register description at address offset 0x1194
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR101
  * Direct Access Register 101
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x194). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar101_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x194). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR102 register description at address offset 0x1198
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR102
  * Direct Access Register 102
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x198). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar102_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x198). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR103 register description at address offset 0x119c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR103
  * Direct Access Register 103
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x19C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar103_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x19C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR104 register description at address offset 0x11a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR104
  * Direct Access Register 104
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar104_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR105 register description at address offset 0x11a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR105
  * Direct Access Register 105
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar105_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR106 register description at address offset 0x11a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR106
  * Direct Access Register 106
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar106_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1A8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR107 register description at address offset 0x11ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR107
  * Direct Access Register 107
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1AC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar107_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1AC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR108 register description at address offset 0x11b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR108
  * Direct Access Register 108
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar108_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR109 register description at address offset 0x11b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR109
  * Direct Access Register 109
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar109_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR110 register description at address offset 0x11b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR110
  * Direct Access Register 110
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar110_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1B8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR111 register description at address offset 0x11bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR111
  * Direct Access Register 111
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1BC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar111_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1BC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR112 register description at address offset 0x11c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR112
  * Direct Access Register 112
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar112_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR113 register description at address offset 0x11c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR113
  * Direct Access Register 113
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar113_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR114 register description at address offset 0x11c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR114
  * Direct Access Register 114
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar114_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1C8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR115 register description at address offset 0x11cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR115
  * Direct Access Register 115
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1CC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar115_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1CC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR116 register description at address offset 0x11d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR116
  * Direct Access Register 116
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar116_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR117 register description at address offset 0x11d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR117
  * Direct Access Register 117
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar117_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR118 register description at address offset 0x11d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR118
  * Direct Access Register 118
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar118_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1D8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR119 register description at address offset 0x11dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR119
  * Direct Access Register 119
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1DC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar119_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1DC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR120 register description at address offset 0x11e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR120
  * Direct Access Register 120
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar120_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR121 register description at address offset 0x11e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR121
  * Direct Access Register 121
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar121_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR122 register description at address offset 0x11e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR122
  * Direct Access Register 122
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar122_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1E8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR123 register description at address offset 0x11ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR123
  * Direct Access Register 123
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1EC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar123_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1EC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR124 register description at address offset 0x11f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR124
  * Direct Access Register 124
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar124_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR125 register description at address offset 0x11f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR125
  * Direct Access Register 125
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar125_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR126 register description at address offset 0x11f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR126
  * Direct Access Register 126
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar126_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1F8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR127 register description at address offset 0x11fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR127
  * Direct Access Register 127
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1FC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar127_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x1FC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR128 register description at address offset 0x1200
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR128
  * Direct Access Register 128
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x200). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar128_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x200). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR129 register description at address offset 0x1204
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR129
  * Direct Access Register 129
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x204). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar129_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x204). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR130 register description at address offset 0x1208
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR130
  * Direct Access Register 130
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x208). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar130_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x208). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR131 register description at address offset 0x120c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR131
  * Direct Access Register 131
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar131_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x20C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR132 register description at address offset 0x1210
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR132
  * Direct Access Register 132
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x210). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar132_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x210). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR133 register description at address offset 0x1214
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR133
  * Direct Access Register 133
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x214). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar133_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x214). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR134 register description at address offset 0x1218
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR134
  * Direct Access Register 134
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x218). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar134_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x218). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR135 register description at address offset 0x121c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR135
  * Direct Access Register 135
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x21C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar135_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x21C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR136 register description at address offset 0x1220
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR136
  * Direct Access Register 136
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x220). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar136_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x220). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR137 register description at address offset 0x1224
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR137
  * Direct Access Register 137
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x224). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar137_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x224). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR138 register description at address offset 0x1228
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR138
  * Direct Access Register 138
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x228). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar138_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x228). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR139 register description at address offset 0x122c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR139
  * Direct Access Register 139
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x22C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar139_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x22C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR140 register description at address offset 0x1230
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR140
  * Direct Access Register 140
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x230). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar140_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x230). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR141 register description at address offset 0x1234
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR141
  * Direct Access Register 141
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x234). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar141_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x234). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR142 register description at address offset 0x1238
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR142
  * Direct Access Register 142
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x238). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar142_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x238). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR143 register description at address offset 0x123c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR143
  * Direct Access Register 143
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x23C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar143_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x23C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR144 register description at address offset 0x1240
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR144
  * Direct Access Register 144
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x240). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar144_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x240). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR145 register description at address offset 0x1244
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR145
  * Direct Access Register 145
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x244). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar145_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x244). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR146 register description at address offset 0x1248
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR146
  * Direct Access Register 146
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x248). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar146_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x248). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR147 register description at address offset 0x124c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR147
  * Direct Access Register 147
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar147_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x24C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR148 register description at address offset 0x1250
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR148
  * Direct Access Register 148
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x250). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar148_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x250). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR149 register description at address offset 0x1254
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR149
  * Direct Access Register 149
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x254). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar149_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x254). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR150 register description at address offset 0x1258
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR150
  * Direct Access Register 150
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x258). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar150_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x258). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR151 register description at address offset 0x125c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR151
  * Direct Access Register 151
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x25C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar151_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x25C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR152 register description at address offset 0x1260
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR152
  * Direct Access Register 152
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x260). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar152_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x260). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR153 register description at address offset 0x1264
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR153
  * Direct Access Register 153
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x264). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar153_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x264). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR154 register description at address offset 0x1268
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR154
  * Direct Access Register 154
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x268). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar154_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x268). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR155 register description at address offset 0x126c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR155
  * Direct Access Register 155
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x26C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar155_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x26C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR156 register description at address offset 0x1270
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR156
  * Direct Access Register 156
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x270). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar156_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x270). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR157 register description at address offset 0x1274
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR157
  * Direct Access Register 157
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x274). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar157_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x274). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR158 register description at address offset 0x1278
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR158
  * Direct Access Register 158
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x278). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar158_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x278). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR159 register description at address offset 0x127c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR159
  * Direct Access Register 159
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x27C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar159_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x27C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR160 register description at address offset 0x1280
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR160
  * Direct Access Register 160
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x280). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar160_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x280). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR161 register description at address offset 0x1284
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR161
  * Direct Access Register 161
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x284). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar161_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x284). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR162 register description at address offset 0x1288
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR162
  * Direct Access Register 162
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x288). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar162_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x288). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR163 register description at address offset 0x128c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR163
  * Direct Access Register 163
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar163_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x28C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR164 register description at address offset 0x1290
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR164
  * Direct Access Register 164
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x290). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar164_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x290). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR165 register description at address offset 0x1294
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR165
  * Direct Access Register 165
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x294). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar165_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x294). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR166 register description at address offset 0x1298
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR166
  * Direct Access Register 166
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x298). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar166_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x298). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR167 register description at address offset 0x129c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR167
  * Direct Access Register 167
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x29C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar167_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x29C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR168 register description at address offset 0x12a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR168
  * Direct Access Register 168
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar168_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR169 register description at address offset 0x12a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR169
  * Direct Access Register 169
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar169_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR170 register description at address offset 0x12a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR170
  * Direct Access Register 170
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar170_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2A8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR171 register description at address offset 0x12ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR171
  * Direct Access Register 171
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2AC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar171_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2AC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR172 register description at address offset 0x12b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR172
  * Direct Access Register 172
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar172_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR173 register description at address offset 0x12b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR173
  * Direct Access Register 173
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar173_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR174 register description at address offset 0x12b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR174
  * Direct Access Register 174
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar174_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2B8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR175 register description at address offset 0x12bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR175
  * Direct Access Register 175
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2BC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar175_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2BC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR176 register description at address offset 0x12c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR176
  * Direct Access Register 176
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar176_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR177 register description at address offset 0x12c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR177
  * Direct Access Register 177
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar177_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR178 register description at address offset 0x12c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR178
  * Direct Access Register 178
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar178_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2C8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR179 register description at address offset 0x12cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR179
  * Direct Access Register 179
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2CC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar179_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2CC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR180 register description at address offset 0x12d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR180
  * Direct Access Register 180
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar180_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR181 register description at address offset 0x12d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR181
  * Direct Access Register 181
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar181_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR182 register description at address offset 0x12d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR182
  * Direct Access Register 182
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar182_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2D8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR183 register description at address offset 0x12dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR183
  * Direct Access Register 183
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2DC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar183_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2DC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR184 register description at address offset 0x12e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR184
  * Direct Access Register 184
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar184_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR185 register description at address offset 0x12e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR185
  * Direct Access Register 185
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar185_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR186 register description at address offset 0x12e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR186
  * Direct Access Register 186
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar186_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2E8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR187 register description at address offset 0x12ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR187
  * Direct Access Register 187
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2EC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar187_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2EC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR188 register description at address offset 0x12f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR188
  * Direct Access Register 188
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar188_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR189 register description at address offset 0x12f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR189
  * Direct Access Register 189
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar189_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR190 register description at address offset 0x12f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR190
  * Direct Access Register 190
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar190_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2F8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR191 register description at address offset 0x12fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR191
  * Direct Access Register 191
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2FC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar191_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x2FC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR192 register description at address offset 0x1300
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR192
  * Direct Access Register 192
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x300). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar192_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x300). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR193 register description at address offset 0x1304
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR193
  * Direct Access Register 193
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x304). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar193_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x304). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR194 register description at address offset 0x1308
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR194
  * Direct Access Register 194
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x308). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar194_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x308). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR195 register description at address offset 0x130c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR195
  * Direct Access Register 195
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar195_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x30C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR196 register description at address offset 0x1310
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR196
  * Direct Access Register 196
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x310). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar196_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x310). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR197 register description at address offset 0x1314
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR197
  * Direct Access Register 197
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x314). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar197_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x314). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR198 register description at address offset 0x1318
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR198
  * Direct Access Register 198
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x318). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar198_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x318). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR199 register description at address offset 0x131c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR199
  * Direct Access Register 199
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x31C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar199_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x31C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR200 register description at address offset 0x1320
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR200
  * Direct Access Register 200
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x320). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar200_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x320). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR201 register description at address offset 0x1324
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR201
  * Direct Access Register 201
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x324). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar201_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x324). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR202 register description at address offset 0x1328
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR202
  * Direct Access Register 202
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x328). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar202_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x328). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR203 register description at address offset 0x132c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR203
  * Direct Access Register 203
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x32C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar203_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x32C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR204 register description at address offset 0x1330
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR204
  * Direct Access Register 204
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x330). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar204_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x330). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR205 register description at address offset 0x1334
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR205
  * Direct Access Register 205
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x334). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar205_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x334). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR206 register description at address offset 0x1338
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR206
  * Direct Access Register 206
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x338). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar206_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x338). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR207 register description at address offset 0x133c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR207
  * Direct Access Register 207
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x33C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar207_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x33C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR208 register description at address offset 0x1340
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR208
  * Direct Access Register 208
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x340). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar208_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x340). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR209 register description at address offset 0x1344
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR209
  * Direct Access Register 209
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x344). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar209_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x344). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR210 register description at address offset 0x1348
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR210
  * Direct Access Register 210
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x348). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar210_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x348). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR211 register description at address offset 0x134c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR211
  * Direct Access Register 211
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar211_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x34C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR212 register description at address offset 0x1350
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR212
  * Direct Access Register 212
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x350). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar212_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x350). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR213 register description at address offset 0x1354
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR213
  * Direct Access Register 213
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x354). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar213_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x354). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR214 register description at address offset 0x1358
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR214
  * Direct Access Register 214
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x358). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar214_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x358). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR215 register description at address offset 0x135c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR215
  * Direct Access Register 215
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x35C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar215_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x35C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR216 register description at address offset 0x1360
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR216
  * Direct Access Register 216
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x360). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar216_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x360). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR217 register description at address offset 0x1364
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR217
  * Direct Access Register 217
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x364). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar217_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x364). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR218 register description at address offset 0x1368
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR218
  * Direct Access Register 218
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x368). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar218_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x368). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR219 register description at address offset 0x136c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR219
  * Direct Access Register 219
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x36C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar219_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x36C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR220 register description at address offset 0x1370
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR220
  * Direct Access Register 220
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x370). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar220_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x370). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR221 register description at address offset 0x1374
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR221
  * Direct Access Register 221
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x374). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar221_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x374). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR222 register description at address offset 0x1378
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR222
  * Direct Access Register 222
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x378). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar222_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x378). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR223 register description at address offset 0x137c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR223
  * Direct Access Register 223
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x37C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar223_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x37C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR224 register description at address offset 0x1380
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR224
  * Direct Access Register 224
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x380). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar224_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x380). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR225 register description at address offset 0x1384
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR225
  * Direct Access Register 225
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x384). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar225_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x384). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR226 register description at address offset 0x1388
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR226
  * Direct Access Register 226
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x388). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar226_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x388). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR227 register description at address offset 0x138c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR227
  * Direct Access Register 227
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar227_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x38C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR228 register description at address offset 0x1390
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR228
  * Direct Access Register 228
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x390). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar228_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x390). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR229 register description at address offset 0x1394
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR229
  * Direct Access Register 229
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x394). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar229_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x394). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR230 register description at address offset 0x1398
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR230
  * Direct Access Register 230
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x398). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar230_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x398). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR231 register description at address offset 0x139c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR231
  * Direct Access Register 231
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x39C). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar231_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x39C). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR232 register description at address offset 0x13a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR232
  * Direct Access Register 232
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar232_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR233 register description at address offset 0x13a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR233
  * Direct Access Register 233
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar233_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR234 register description at address offset 0x13a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR234
  * Direct Access Register 234
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar234_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3A8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR235 register description at address offset 0x13ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR235
  * Direct Access Register 235
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3AC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar235_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3AC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR236 register description at address offset 0x13b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR236
  * Direct Access Register 236
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar236_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR237 register description at address offset 0x13b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR237
  * Direct Access Register 237
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar237_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR238 register description at address offset 0x13b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR238
  * Direct Access Register 238
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar238_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3B8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR239 register description at address offset 0x13bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR239
  * Direct Access Register 239
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3BC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar239_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3BC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR240 register description at address offset 0x13c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR240
  * Direct Access Register 240
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar240_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR241 register description at address offset 0x13c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR241
  * Direct Access Register 241
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar241_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR242 register description at address offset 0x13c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR242
  * Direct Access Register 242
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar242_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3C8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR243 register description at address offset 0x13cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR243
  * Direct Access Register 243
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3CC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar243_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3CC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR244 register description at address offset 0x13d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR244
  * Direct Access Register 244
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar244_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR245 register description at address offset 0x13d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR245
  * Direct Access Register 245
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar245_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR246 register description at address offset 0x13d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR246
  * Direct Access Register 246
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar246_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3D8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR247 register description at address offset 0x13dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR247
  * Direct Access Register 247
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3DC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar247_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3DC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR248 register description at address offset 0x13e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR248
  * Direct Access Register 248
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar248_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR249 register description at address offset 0x13e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR249
  * Direct Access Register 249
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar249_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR250 register description at address offset 0x13e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR250
  * Direct Access Register 250
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar250_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3E8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR251 register description at address offset 0x13ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR251
  * Direct Access Register 251
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3EC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar251_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3EC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR252 register description at address offset 0x13f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR252
  * Direct Access Register 252
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F0). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar252_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F0). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR253 register description at address offset 0x13f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR253
  * Direct Access Register 253
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F4). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar253_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F4). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR254 register description at address offset 0x13f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR254
  * Direct Access Register 254
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F8). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar254_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3F8). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DAR255 register description at address offset 0x13fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DAR255
  * Direct Access Register 255
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3FC). In read mode,
    ///< the register contains the data value that was read from memory, and
    ///< in write mode the register contains the data value to write to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_dar255_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFC00) + 0x3FC). In read mode,
///< the register contains the data value that was read from memory, and
///< in write mode the register contains the data value to write to memory.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CSW register description at address offset 0x1d00
  *
  * Register default value:        0x30000002
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CSW
  * Control Status Word register
  */

typedef union {
  struct {
    uint32_t SIZE : 3;
    ///< Size of the data access to perform. The APB-AP supports only word
    ///< accesses and this field is fixed at 0x2. The reset value is 0x2.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x2"
    uint32_t RES0_0 : 1;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t ADDRINC : 2;
    ///< Auto address increment mode on RW data access. Only increments if
    ///< the current transaction completes without an error response and the
    ///< transaction is not aborted. Reset to 0b0.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DEVICEEN : 1;
    ///< Indicates the status of the ap_en port. The bit is set when ap_en
    ///< is HIGH, but otherwise is clear. If this bit is clear, no APB transfers
    ///< are carried out, that is, both Secure and Non-secure accesses are
    ///< blocked.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t TRINPROG : 1;
    ///< Transfer in progress. This field indicates whether a transfer is in
    ///< progress on the APB master interface.
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t MODE : 4;
    ///< Specifies the mode of operation. Reset to 0x0. All other values are
    ///< reserved.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t TYPE : 4;
    ///< This field is reserved. Reads return 0x0 and writes are ignored.
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t ERRNPASS : 1;
    ///< Errors are not passed upstream:
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t ERRSTOP : 1;
    ///< Stop on error. Reset to 0.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t RES0_1 : 5;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t SDEVICEEN : 1;
    ///< Indicates the status of the ap_en and ap_secure_en ports. It is set
    ///< when both ap_en and ap_secure_en are HIGH, but otherwise is clear.
    ///< If this bit is clear, Secure APB transfers are not permitted. Non-secure
    ///< memory accesses and internal register accesses that do not initiate
    ///< memory accesses are permitted regardless of the status of this bit.
    ///< AccessType="RO" BitOffset="23" ResetValue="0x0"
    uint32_t RES0_2 : 4;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PROT : 3;
    ///< Drives APB master interface pprot_m[2:0] which specifies the APB4
    ///< protection encoding. The reset value is 0x3 (Data, Non-secure, Privileged).
    ///< Together with the Access Port Enable interface signals, CSW.Prot[1]
    ///< determines whether a secure access is allowed on the master interface.
    ///< Accesses are permitted as follows: access_permitted = (ap_en && ap_secure_en)
    ///< || (ap_en && CSW.Prot[1]).
    ///< AccessType="RW" BitOffset="28" ResetValue="0x3"
    uint32_t RES0_3 : 1;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_csw_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_DEFAULT (0x30000002U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_WR_MASK (0xff7f0038U)


///< Size of the data access to perform. The APB-AP supports only word
///< accesses and this field is fixed at 0x2. The reset value is 0x2.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SIZE_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SIZE_BF_WID ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SIZE_BF_MSK (0x00000007)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SIZE_BF_DEF (0x00000002)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_0_BF_OFF ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_0_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_0_BF_MSK (0x00000008)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_0_BF_DEF (0x00000000)

///< Auto address increment mode on RW data access. Only increments if
///< the current transaction completes without an error response and the
///< transaction is not aborted. Reset to 0b0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ADDRINC_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ADDRINC_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ADDRINC_BF_MSK (0x00000030)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ADDRINC_BF_DEF (0x00000000)

///< Indicates the status of the ap_en port. The bit is set when ap_en
///< is HIGH, but otherwise is clear. If this bit is clear, no APB transfers
///< are carried out, that is, both Secure and Non-secure accesses are
///< blocked.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_DEVICEEN_BF_OFF ( 6)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_DEVICEEN_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_DEVICEEN_BF_MSK (0x00000040)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_DEVICEEN_BF_DEF (0x00000000)

///< Transfer in progress. This field indicates whether a transfer is in
///< progress on the APB master interface.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TRINPROG_BF_OFF ( 7)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TRINPROG_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TRINPROG_BF_MSK (0x00000080)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TRINPROG_BF_DEF (0x00000000)

///< Specifies the mode of operation. Reset to 0x0. All other values are
///< reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_MODE_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_MODE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_MODE_BF_MSK (0x00000F00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_MODE_BF_DEF (0x00000000)

///< This field is reserved. Reads return 0x0 and writes are ignored.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TYPE_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TYPE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TYPE_BF_MSK (0x0000F000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_TYPE_BF_DEF (0x00000000)

///< Errors are not passed upstream:
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRNPASS_BF_OFF (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRNPASS_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRNPASS_BF_MSK (0x00010000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRNPASS_BF_DEF (0x00000000)

///< Stop on error. Reset to 0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRSTOP_BF_OFF (17)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRSTOP_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRSTOP_BF_MSK (0x00020000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ERRSTOP_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_1_BF_OFF (18)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_1_BF_WID ( 5)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_1_BF_MSK (0x007C0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_1_BF_DEF (0x00000000)

///< Indicates the status of the ap_en and ap_secure_en ports. It is set
///< when both ap_en and ap_secure_en are HIGH, but otherwise is clear.
///< If this bit is clear, Secure APB transfers are not permitted. Non-secure
///< memory accesses and internal register accesses that do not initiate
///< memory accesses are permitted regardless of the status of this bit.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SDEVICEEN_BF_OFF (23)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SDEVICEEN_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SDEVICEEN_BF_MSK (0x00800000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_SDEVICEEN_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_2_BF_OFF (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_2_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_2_BF_MSK (0x0F000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_2_BF_DEF (0x00000000)

///< Drives APB master interface pprot_m[2:0] which specifies the APB4
///< protection encoding. The reset value is 0x3 (Data, Non-secure, Privileged).
///< Together with the Access Port Enable interface signals, CSW.Prot[1]
///< determines whether a secure access is allowed on the master interface.
///< Accesses are permitted as follows: access_permitted = (ap_en && ap_secure_en)
///< || (ap_en && CSW.Prot[1]).
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_PROT_BF_OFF (28)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_PROT_BF_WID ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_PROT_BF_MSK (0x70000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_PROT_BF_DEF (0x30000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_3_BF_OFF (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_3_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_3_BF_MSK (0x80000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_RES0_3_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_TAR register description at address offset 0x1d04
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/TAR
  * Transfer Address Register
  */

typedef union {
  struct {
    uint32_t ADDRESS : 32;
    ///< Address of the current transfer. When a memory access is initiated
    ///< by accessing the DRW register, the TAR value directly gives the 32-bit
    ///< transfer address. When a memory access is initiated by accessing Banked
    ///< Data registers, the TAR only provides the upper bits [31:4] and the
    ///< remaining address bits [3:0] come from the offset of Banked Data register
    ///< being accessed. When a memory access is initiated by accessing Direct
    ///< Access Registers, the TAR provides the upper bits [31:10] and the
    ///< remaining address bits [9:0] come from the offset of the DAR being
    ///< accessed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_tar_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_WR_MASK (0xffffffffU)


///< Address of the current transfer. When a memory access is initiated
///< by accessing the DRW register, the TAR value directly gives the 32-bit
///< transfer address. When a memory access is initiated by accessing Banked
///< Data registers, the TAR only provides the upper bits [31:4] and the
///< remaining address bits [3:0] come from the offset of Banked Data register
///< being accessed. When a memory access is initiated by accessing Direct
///< Access Registers, the TAR provides the upper bits [31:10] and the
///< remaining address bits [9:0] come from the offset of the DAR being
///< accessed.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DRW register description at address offset 0x1d0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DRW
  * Data Read/Write register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Current transfer data value. In read mode, the register contains the
    ///< data value that was read from the current transfer, and in write mode
    ///< the register contains the data value to write for the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_drw_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_WR_MASK (0xffffffffU)


///< Current transfer data value. In read mode, the register contains the
///< data value that was read from the current transfer, and in write mode
///< the register contains the data value to write for the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_BD0 register description at address offset 0x1d10
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/BD0
  * Banked Data register 0
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x0). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_bd0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x0). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_BD1 register description at address offset 0x1d14
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/BD1
  * Banked Data register 1
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x4). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_bd1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x4). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_BD2 register description at address offset 0x1d18
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/BD2
  * Banked Data register 2
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x8). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_bd2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0x8). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_BD3 register description at address offset 0x1d1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/BD3
  * Banked Data register 3
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0xC). In read mode, the
    ///< register contains the data value that was read from the current transfer,
    ///< and in write mode the register contains the data value to write for
    ///< the current transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_bd3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_WR_MASK (0xffffffffU)


///< Maps to memory address ((TAR & 0xFFFFFFF0) + 0xC). In read mode, the
///< register contains the data value that was read from the current transfer,
///< and in write mode the register contains the data value to write for
///< the current transfer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_DATA_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_DATA_BF_WID (32)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_DATA_BF_MSK (0xFFFFFFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_DATA_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_TRR register description at address offset 0x1d24
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/TRR
  * Transfer Response Register
  */

typedef union {
  struct {
    uint32_t ERR : 1;
    ///< Logged error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_trr_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_WR_MASK (0xffffffffU)


///< Logged error.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_ERR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_ERR_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_ERR_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_ERR_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_RES0_0_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_RES0_0_BF_WID (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CFG register description at address offset 0x1df4
  *
  * Register default value:        0x000101A0
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CFG
  * Configuration register
  */

typedef union {
  struct {
    uint32_t RES0_0 : 4;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t DARSIZE : 4;
    ///< Size of DAR register space. Returns 0xA indicating that 1KB (256 registers,
    ///< each 32-bit wide) of DAR is implemented.
    ///< AccessType="RO" BitOffset="4" ResetValue="0xA"
    uint32_t ERR : 4;
    ///< Indicates the type of error handling that is implemented:
    ///< AccessType="RO" BitOffset="8" ResetValue="0x1"
    uint32_t RES0_1 : 4;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t TARINC : 4;
    ///< TAR incrementer size. Returns 0x1 indicating a TAR incrementer size
    ///< of 10-bits.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x1"
    uint32_t RES0_2 : 12;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_cfg_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_DEFAULT (0x000101a0U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_WR_MASK (0x00000000U)


///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_0_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_0_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_0_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_0_BF_DEF (0x00000000)

///< Size of DAR register space. Returns 0xA indicating that 1KB (256 registers,
///< each 32-bit wide) of DAR is implemented.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_DARSIZE_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_DARSIZE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_DARSIZE_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_DARSIZE_BF_DEF (0x000000A0)

///< Indicates the type of error handling that is implemented:
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_ERR_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_ERR_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_ERR_BF_MSK (0x00000F00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_ERR_BF_DEF (0x00000100)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_1_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_1_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_1_BF_MSK (0x0000F000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_1_BF_DEF (0x00000000)

///< TAR incrementer size. Returns 0x1 indicating a TAR incrementer size
///< of 10-bits.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_TARINC_BF_OFF (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_TARINC_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_TARINC_BF_MSK (0x000F0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_TARINC_BF_DEF (0x00010000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_2_BF_OFF (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_2_BF_WID (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_2_BF_MSK (0xFFF00000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_RES0_2_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_BASE register description at address offset 0x1df8
  *
  * Register default value:        0xFFFFF003
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/BASE
  * Debug Base Address register
  */

typedef union {
  struct {
    uint32_t ENTRYPRESENT : 1;
    ///< This field indicates whether a debug component is present for this
    ///< AP. It returns the tie-off value of the input signal baseaddr_valid.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t FORMAT : 1;
    ///< Base address register format. Returns the value 0b1 indicating the
    ///< ADIv5 format, which is unchanged in ADIv6.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x1"
    uint32_t RES0_0 : 10;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t BASEADDR : 20;
    ///< Base address of a ROM table. It points to the start of the debug register
    ///< space or a ROM table address. Bits[11:0] of the address are 0x000
    ///< because the address is aligned to 4KB boundary. This field is valid
    ///< only if BASE.EntryPresent bit is set to 1, in which case it returns
    ///< the tie-off value of the input signal baseaddr[31:12], otherwise,
    ///< it reads as 0x0.
    ///< AccessType="RO" BitOffset="12" ResetValue="0xFFFFF"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_base_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_DEFAULT (0xfffff003U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_WR_MASK (0x00000000U)


///< This field indicates whether a debug component is present for this
///< AP. It returns the tie-off value of the input signal baseaddr_valid.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_ENTRYPRESENT_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_ENTRYPRESENT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_ENTRYPRESENT_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_ENTRYPRESENT_BF_DEF (0x00000001)

///< Base address register format. Returns the value 0b1 indicating the
///< ADIv5 format, which is unchanged in ADIv6.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_FORMAT_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_FORMAT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_FORMAT_BF_MSK (0x00000002)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_FORMAT_BF_DEF (0x00000002)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_RES0_0_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_RES0_0_BF_WID (10)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_RES0_0_BF_MSK (0x00000FFC)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_RES0_0_BF_DEF (0x00000000)

///< Base address of a ROM table. It points to the start of the debug register
///< space or a ROM table address. Bits[11:0] of the address are 0x000
///< because the address is aligned to 4KB boundary. This field is valid
///< only if BASE.EntryPresent bit is set to 1, in which case it returns
///< the tie-off value of the input signal baseaddr[31:12], otherwise,
///< it reads as 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_BASEADDR_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_BASEADDR_BF_WID (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_BASEADDR_BF_MSK (0xFFFFF000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_BASEADDR_BF_DEF (0xFFFFF000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_IDR register description at address offset 0x1dfc
  *
  * Register default value:        0x34770006
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/IDR
  * Identification Register
  */

typedef union {
  struct {
    uint32_t TYPE : 4;
    ///< Returns 0x6, indicating that this is an APB4 Access Port
    ///< AccessType="RO" BitOffset="0" ResetValue="0x6"
    uint32_t VARIANT : 4;
    ///< Returns 0x0, indicating no variation from base type specified by IDR.Type
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 5;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t CLASS : 4;
    ///< Returns 0x8, indicating that this is a Memory Access Port
    ///< AccessType="RO" BitOffset="13" ResetValue="0x8"
    uint32_t JEDEC_CODE : 7;
    ///< The JEP106 identification code. Returns 0x3B, indicating Arm as the
    ///< designer.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x3B"
    uint32_t JEDEC_BANK : 4;
    ///< The JEP106 continuation code. Returns 0x4, indicating Arm as the designer.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x4"
    uint32_t REVISION : 4;
    ///< Revision. An incremental value starting at 0x0 for the first design
    ///< of a component. See the Component list in Chapter 1 for information
    ///< on the RTL revision of the component.
    ///< AccessType="RO" BitOffset="28" ResetValue="0x3"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_idr_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_DEFAULT (0x34770006U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_WR_MASK (0x00000000U)


///< Returns 0x6, indicating that this is an APB4 Access Port
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_TYPE_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_TYPE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_TYPE_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_TYPE_BF_DEF (0x00000006)

///< Returns 0x0, indicating no variation from base type specified by IDR.Type
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_VARIANT_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_VARIANT_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_VARIANT_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_VARIANT_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_RES0_0_BF_WID ( 5)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_RES0_0_BF_MSK (0x00001F00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_RES0_0_BF_DEF (0x00000000)

///< Returns 0x8, indicating that this is a Memory Access Port
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_CLASS_BF_OFF (13)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_CLASS_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_CLASS_BF_MSK (0x0001E000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_CLASS_BF_DEF (0x00010000)

///< The JEP106 identification code. Returns 0x3B, indicating Arm as the
///< designer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_CODE_BF_OFF (17)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_CODE_BF_WID ( 7)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_CODE_BF_MSK (0x00FE0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_CODE_BF_DEF (0x00760000)

///< The JEP106 continuation code. Returns 0x4, indicating Arm as the designer.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_BANK_BF_OFF (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_BANK_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_BANK_BF_MSK (0x0F000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_JEDEC_BANK_BF_DEF (0x04000000)

///< Revision. An incremental value starting at 0x0 for the first design
///< of a component. See the Component list in Chapter 1 for information
///< on the RTL revision of the component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_REVISION_BF_OFF (28)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_REVISION_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_REVISION_BF_MSK (0xF0000000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_REVISION_BF_DEF (0x30000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_ITSTATUS register description at address offset 0x1efc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/ITSTATUS
  * Integration Test Status register
  */

typedef union {
  struct {
    uint32_t DPABORT : 1;
    ///< When in Integration testing mode (ITCTRL.IME=0b1): Behaves as a sticky
    ///< bit and latches to 1 on a rising edge of dp_abort. Cleared on a read
    ///< from this register. If dp_abort rises in the same cycle as a read
    ///< of the ITSTATUS register is received, the read takes priority and
    ///< the register is cleared. When in normal functional operation mode
    ///< (ITCTRL.IME=0b0): Read as 0, writes ignored.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_itstatus_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_WR_MASK (0xfffffffeU)


///< When in Integration testing mode (ITCTRL.IME=0b1): Behaves as a sticky
///< bit and latches to 1 on a rising edge of dp_abort. Cleared on a read
///< from this register. If dp_abort rises in the same cycle as a read
///< of the ITSTATUS register is received, the read takes priority and
///< the register is cleared. When in normal functional operation mode
///< (ITCTRL.IME=0b0): Read as 0, writes ignored.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_DPABORT_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_DPABORT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_DPABORT_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_DPABORT_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_RES0_0_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_RES0_0_BF_WID (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_ITCTRL register description at address offset 0x1f00
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/ITCTRL
  * Integration Mode Control Register
  */

typedef union {
  struct {
    uint32_t IME : 1;
    ///< Integration Mode Enable. When set, the component enters integration
    ///< mode, enabling topology detection or integration testing to be performed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_itctrl_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_WR_MASK (0xffffffffU)


///< Integration Mode Enable. When set, the component enters integration
///< mode, enabling topology detection or integration testing to be performed.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_IME_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_IME_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_IME_BF_MSK (0x00000001)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_IME_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_RES0_0_BF_OFF ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_RES0_0_BF_WID (31)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CLAIMSET register description at address offset 0x1fa0
  *
  * Register default value:        0x00000003
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CLAIMSET
  * Claim Tag Set Register
  */

typedef union {
  struct {
    uint32_t SET : 2;
    ///< A bit-programmable register bank that sets the claim tag value. A
    ///< read returns a logic 1 for all implemented locations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t RAZWI_0 : 30;
    ///< RAZ/WI
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_claimset_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_DEFAULT (0x00000003U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_WR_MASK (0xffffffffU)


///< A bit-programmable register bank that sets the claim tag value. A
///< read returns a logic 1 for all implemented locations.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_SET_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_SET_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_SET_BF_MSK (0x00000003)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_SET_BF_DEF (0x00000003)

///< RAZ/WI
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_RAZWI_0_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_RAZWI_0_BF_WID (30)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_RAZWI_0_BF_MSK (0xFFFFFFFC)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_RAZWI_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CLAIMCLR register description at address offset 0x1fa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CLAIMCLR
  * Claim Tag Clear Register
  */

typedef union {
  struct {
    uint32_t CLR : 2;
    ///< A bit-programmable register bank that clears the claim tag value.
    ///< It is zero at reset. It is used by software agents to signal to each
    ///< other ownership of the hardware. It has no direct effect on the hardware
    ///< itself.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RAZWI_0 : 30;
    ///< RAZ/WI
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_claimclr_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_WR_MASK (0xffffffffU)


///< A bit-programmable register bank that clears the claim tag value.
///< It is zero at reset. It is used by software agents to signal to each
///< other ownership of the hardware. It has no direct effect on the hardware
///< itself.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_CLR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_CLR_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_CLR_BF_MSK (0x00000003)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_CLR_BF_DEF (0x00000000)

///< RAZ/WI
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_RAZWI_0_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_RAZWI_0_BF_WID (30)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_RAZWI_0_BF_MSK (0xFFFFFFFC)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_RAZWI_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_AUTHSTATUS register description at address offset 0x1fb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/AUTHSTATUS
  * Authentication Status Register
  */

typedef union {
  struct {
    uint32_t NSID : 2;
    ///< Non-secure invasive debug.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t NSNID : 2;
    ///< Non-secure non-invasive debug.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SID : 2;
    ///< Secure invasive debug.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t SNID : 2;
    ///< Secure non-invasive debug.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t HID : 2;
    ///< Hypervisor invasive debug.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t HNID : 2;
    ///< Hypervisor non-invasive debug.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t RES0_0 : 20;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_authstatus_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_WR_MASK (0x00000000U)


///< Non-secure invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSID_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSID_BF_MSK (0x00000003)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSID_BF_DEF (0x00000000)

///< Non-secure non-invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSNID_BF_OFF ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSNID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSNID_BF_MSK (0x0000000C)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_NSNID_BF_DEF (0x00000000)

///< Secure invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SID_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SID_BF_MSK (0x00000030)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SID_BF_DEF (0x00000000)

///< Secure non-invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SNID_BF_OFF ( 6)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SNID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SNID_BF_MSK (0x000000C0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_SNID_BF_DEF (0x00000000)

///< Hypervisor invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HID_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HID_BF_MSK (0x00000300)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HID_BF_DEF (0x00000000)

///< Hypervisor non-invasive debug.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HNID_BF_OFF (10)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HNID_BF_WID ( 2)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HNID_BF_MSK (0x00000C00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_HNID_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_RES0_0_BF_OFF (12)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_RES0_0_BF_WID (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_RES0_0_BF_MSK (0xFFFFF000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DEVARCH register description at address offset 0x1fbc
  *
  * Register default value:        0x47700A17
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DEVARCH
  * Device Architecture Register
  */

typedef union {
  struct {
    uint32_t ARCHID : 16;
    ///< Architecture ID. Returns 0x0a17, identifying APv2 MEM-AP architecture
    ///< v0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xA17"
    uint32_t REVISION : 4;
    ///< Architecture revision. Returns the revision of the architecture that
    ///< the ARCHID field specifies.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t PRESENT : 1;
    ///< Returns 1, indicating that the DEVARCH register is present.
    ///< AccessType="RO" BitOffset="20" ResetValue="0x1"
    uint32_t ARCHITECT : 11;
    ///< Returns 0x23b, denoting Arm as architect of the component.
    ///< AccessType="RO" BitOffset="21" ResetValue="0x23B"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_devarch_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_DEFAULT (0x47700a17U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_WR_MASK (0x00000000U)


///< Architecture ID. Returns 0x0a17, identifying APv2 MEM-AP architecture
///< v0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHID_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHID_BF_WID (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHID_BF_MSK (0x0000FFFF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHID_BF_DEF (0x00000A17)

///< Architecture revision. Returns the revision of the architecture that
///< the ARCHID field specifies.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_REVISION_BF_OFF (16)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_REVISION_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_REVISION_BF_MSK (0x000F0000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_REVISION_BF_DEF (0x00000000)

///< Returns 1, indicating that the DEVARCH register is present.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_PRESENT_BF_OFF (20)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_PRESENT_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_PRESENT_BF_MSK (0x00100000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_PRESENT_BF_DEF (0x00100000)

///< Returns 0x23b, denoting Arm as architect of the component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHITECT_BF_OFF (21)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHITECT_BF_WID (11)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHITECT_BF_MSK (0xFFE00000)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ARCHITECT_BF_DEF (0x47600000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_DEVTYPE register description at address offset 0x1fcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/DEVTYPE
  * Device Type Identifier Register
  */

typedef union {
  struct {
    uint32_t MAJOR : 4;
    ///< Major classification. Returns 0x0, Miscellaneous.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SUB : 4;
    ///< Minor classification. Returns 0x0, Other/undefined.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_devtype_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_WR_MASK (0x00000000U)


///< Major classification. Returns 0x0, Miscellaneous.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_MAJOR_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_MAJOR_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_MAJOR_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_MAJOR_BF_DEF (0x00000000)

///< Minor classification. Returns 0x0, Other/undefined.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_SUB_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_SUB_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_SUB_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_SUB_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR4 register description at address offset 0x1fd0
  *
  * Register default value:        0x00000004
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR4
  * Peripheral Identification Register 4
  */

typedef union {
  struct {
    uint32_t DES_2 : 4;
    ///< JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0,
    ///< they indicate the designer of the component and not the implementer,
    ///< except where the two are the same.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x4"
    uint32_t SIZE : 4;
    ///< Indicates the memory size that is used by this component. Returns
    ///< 0 indicating that the component uses an UNKNOWN number of 4KB blocks.
    ///< Using the SIZE field to indicate the size of the component is deprecated.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr4_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_DEFAULT (0x00000004U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_WR_MASK (0x00000000U)


///< JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0,
///< they indicate the designer of the component and not the implementer,
///< except where the two are the same.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_DES_2_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_DES_2_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_DES_2_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_DES_2_BF_DEF (0x00000004)

///< Indicates the memory size that is used by this component. Returns
///< 0 indicating that the component uses an UNKNOWN number of 4KB blocks.
///< Using the SIZE field to indicate the size of the component is deprecated.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_SIZE_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_SIZE_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_SIZE_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_SIZE_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR5 register description at address offset 0x1fd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR5
  * Peripheral Identification Register 5
  */

typedef union {
  struct {
    uint32_t PIDR5 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr5_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR6 register description at address offset 0x1fd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR6
  * Peripheral Identification Register 6
  */

typedef union {
  struct {
    uint32_t PIDR6 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr6_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR7 register description at address offset 0x1fdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR7
  * Peripheral Identification Register 7
  */

typedef union {
  struct {
    uint32_t PIDR7 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr7_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR0 register description at address offset 0x1fe0
  *
  * Register default value:        0x000000E2
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR0
  * Peripheral Identification Register 0
  */

typedef union {
  struct {
    uint32_t PART_0 : 8;
    ///< Part number, bits[7:0]. Taken together with PIDR1.PART_1 it indicates
    ///< the component. The Part Number is selected by the designer of the
    ///< component.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xE2"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_DEFAULT (0x000000e2U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_WR_MASK (0x00000000U)


///< Part number, bits[7:0]. Taken together with PIDR1.PART_1 it indicates
///< the component. The Part Number is selected by the designer of the
///< component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_PART_0_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_PART_0_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_PART_0_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_PART_0_BF_DEF (0x000000E2)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR1 register description at address offset 0x1fe4
  *
  * Register default value:        0x000000B9
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR1
  * Peripheral Identification Register 1
  */

typedef union {
  struct {
    uint32_t PART_1 : 4;
    ///< Part number, bits[11:8]. Taken together with PIDR0.PART_0 it indicates
    ///< the component. The Part Number is selected by the designer of the
    ///< component.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x9"
    uint32_t DES_0 : 4;
    ///< JEP106 identification code, bits[3:0]. Together, with PIDR4.DES_2
    ///< and PIDR2.DES_1, they indicate the designer of the component and not
    ///< the implementer, except where the two are the same.
    ///< AccessType="RO" BitOffset="4" ResetValue="0xB"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_DEFAULT (0x000000b9U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_WR_MASK (0x00000000U)


///< Part number, bits[11:8]. Taken together with PIDR0.PART_0 it indicates
///< the component. The Part Number is selected by the designer of the
///< component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_PART_1_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_PART_1_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_PART_1_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_PART_1_BF_DEF (0x00000009)

///< JEP106 identification code, bits[3:0]. Together, with PIDR4.DES_2
///< and PIDR2.DES_1, they indicate the designer of the component and not
///< the implementer, except where the two are the same.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_DES_0_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_DES_0_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_DES_0_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_DES_0_BF_DEF (0x000000B0)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR2 register description at address offset 0x1fe8
  *
  * Register default value:        0x0000003B
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR2
  * Peripheral Identification Register 2
  */

typedef union {
  struct {
    uint32_t DES_1 : 3;
    ///< JEP106 identification code, bits[6:4]. Together, with PIDR4.DES_2
    ///< and PIDR1.DES_0, they indicate the designer of the component and not
    ///< the implementer, except where the two are the same.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x3"
    uint32_t JEDEC : 1;
    ///< 1 - Always set. Indicates that a JEDEC assigned value is used.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x1"
    uint32_t REVISION : 4;
    ///< Revision. It is an incremental value starting at 0x0 for the first
    ///< design of a component. See the Component list in Chapter 1 for information
    ///< on the RTL revision of the component.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x3"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_DEFAULT (0x0000003bU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_WR_MASK (0x00000000U)


///< JEP106 identification code, bits[6:4]. Together, with PIDR4.DES_2
///< and PIDR1.DES_0, they indicate the designer of the component and not
///< the implementer, except where the two are the same.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_DES_1_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_DES_1_BF_WID ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_DES_1_BF_MSK (0x00000007)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_DES_1_BF_DEF (0x00000003)

///< 1 - Always set. Indicates that a JEDEC assigned value is used.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_JEDEC_BF_OFF ( 3)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_JEDEC_BF_WID ( 1)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_JEDEC_BF_MSK (0x00000008)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_JEDEC_BF_DEF (0x00000008)

///< Revision. It is an incremental value starting at 0x0 for the first
///< design of a component. See the Component list in Chapter 1 for information
///< on the RTL revision of the component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_REVISION_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_REVISION_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_REVISION_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_REVISION_BF_DEF (0x00000030)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_PIDR3 register description at address offset 0x1fec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/PIDR3
  * Peripheral Identification Register 3
  */

typedef union {
  struct {
    uint32_t CMOD : 4;
    ///< Customer Modified. Where the component is reusable IP, this value
    ///< indicates if the customer has modified the behavior of the component.
    ///< In most cases this field is 0x0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t REVAND : 4;
    ///< This field indicates minor errata fixes specific to this design, for
    ///< example metal fixes after implementation. In most cases this field
    ///< is 0x0.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_pidr3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_DEFAULT (0x00000000U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_WR_MASK (0x00000000U)


///< Customer Modified. Where the component is reusable IP, this value
///< indicates if the customer has modified the behavior of the component.
///< In most cases this field is 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_CMOD_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_CMOD_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_CMOD_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_CMOD_BF_DEF (0x00000000)

///< This field indicates minor errata fixes specific to this design, for
///< example metal fixes after implementation. In most cases this field
///< is 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_REVAND_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_REVAND_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_REVAND_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_REVAND_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CIDR0 register description at address offset 0x1ff0
  *
  * Register default value:        0x0000000D
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CIDR0
  * Component Identification Register 0
  */

typedef union {
  struct {
    uint32_t PRMBL_0 : 8;
    ///< Preamble. Returns 0x0D.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xD"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_cidr0_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_DEFAULT (0x0000000dU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_WR_MASK (0x00000000U)


///< Preamble. Returns 0x0D.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_PRMBL_0_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_PRMBL_0_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_PRMBL_0_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_PRMBL_0_BF_DEF (0x0000000D)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CIDR1 register description at address offset 0x1ff4
  *
  * Register default value:        0x00000090
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CIDR1
  * Component Identification Register 1
  */

typedef union {
  struct {
    uint32_t PRMBL_1 : 4;
    ///< Preamble. Returns 0x0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t CLASS : 4;
    ///< Component class. Returns 0x9, indicating this is a CoreSight component.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x9"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_cidr1_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_DEFAULT (0x00000090U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_WR_MASK (0x00000000U)


///< Preamble. Returns 0x0.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_PRMBL_1_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_PRMBL_1_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_PRMBL_1_BF_MSK (0x0000000F)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_PRMBL_1_BF_DEF (0x00000000)

///< Component class. Returns 0x9, indicating this is a CoreSight component.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_CLASS_BF_OFF ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_CLASS_BF_WID ( 4)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_CLASS_BF_MSK (0x000000F0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_CLASS_BF_DEF (0x00000090)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CIDR2 register description at address offset 0x1ff8
  *
  * Register default value:        0x00000005
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CIDR2
  * Component Identification Register 2
  */

typedef union {
  struct {
    uint32_t PRMBL_2 : 8;
    ///< Preamble. Returns 0x05.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x5"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_cidr2_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_DEFAULT (0x00000005U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_WR_MASK (0x00000000U)


///< Preamble. Returns 0x05.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_PRMBL_2_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_PRMBL_2_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_PRMBL_2_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_PRMBL_2_BF_DEF (0x00000005)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_APBAP_HWC_APB4_SLAVE_0_MM_ADDRESSBLOCK_1_CIDR3 register description at address offset 0x1ffc
  *
  * Register default value:        0x000000B1
  * Register full path in IP: css600_apbap_hwc/APB4_Slave_0_MM/addressBlock_1/CIDR3
  * Component Identification Register 3
  */

typedef union {
  struct {
    uint32_t PRMBL_3 : 8;
    ///< Preamble. Returns 0xB1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xB1"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_apbap_hwc_addressblock_1_cidr3_reg_t;

#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_DEFAULT (0x000000b1U)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_RD_MASK (0xffffffffU)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_WR_MASK (0x00000000U)


///< Preamble. Returns 0xB1.
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_PRMBL_3_BF_OFF ( 0)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_PRMBL_3_BF_WID ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_PRMBL_3_BF_MSK (0x000000FF)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_PRMBL_3_BF_DEF (0x000000B1)

///< Reserved bit or field with SBZP behavior
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_RES0_0_BF_OFF ( 8)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_RES0_0_BF_WID (24)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_RES0_0_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_REG ((css600_apbap_hwc_addressblock_0_dar0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_REG ((css600_apbap_hwc_addressblock_0_dar1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_REG ((css600_apbap_hwc_addressblock_0_dar2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_REG ((css600_apbap_hwc_addressblock_0_dar3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_REG ((css600_apbap_hwc_addressblock_0_dar4_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR4_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_REG ((css600_apbap_hwc_addressblock_0_dar5_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR5_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_REG ((css600_apbap_hwc_addressblock_0_dar6_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR6_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_REG ((css600_apbap_hwc_addressblock_0_dar7_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR7_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_REG ((css600_apbap_hwc_addressblock_0_dar8_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR8_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_REG ((css600_apbap_hwc_addressblock_0_dar9_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR9_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_REG ((css600_apbap_hwc_addressblock_0_dar10_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR10_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_REG ((css600_apbap_hwc_addressblock_0_dar11_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR11_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_REG ((css600_apbap_hwc_addressblock_0_dar12_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR12_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_REG ((css600_apbap_hwc_addressblock_0_dar13_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR13_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_REG ((css600_apbap_hwc_addressblock_0_dar14_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR14_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_REG ((css600_apbap_hwc_addressblock_0_dar15_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR15_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_REG ((css600_apbap_hwc_addressblock_0_dar16_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR16_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_REG ((css600_apbap_hwc_addressblock_0_dar17_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR17_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_REG ((css600_apbap_hwc_addressblock_0_dar18_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR18_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_REG ((css600_apbap_hwc_addressblock_0_dar19_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR19_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_REG ((css600_apbap_hwc_addressblock_0_dar20_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR20_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_REG ((css600_apbap_hwc_addressblock_0_dar21_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR21_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_REG ((css600_apbap_hwc_addressblock_0_dar22_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR22_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_REG ((css600_apbap_hwc_addressblock_0_dar23_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR23_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_REG ((css600_apbap_hwc_addressblock_0_dar24_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR24_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_REG ((css600_apbap_hwc_addressblock_0_dar25_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR25_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_REG ((css600_apbap_hwc_addressblock_0_dar26_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR26_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_REG ((css600_apbap_hwc_addressblock_0_dar27_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR27_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_REG ((css600_apbap_hwc_addressblock_0_dar28_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR28_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_REG ((css600_apbap_hwc_addressblock_0_dar29_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR29_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_REG ((css600_apbap_hwc_addressblock_0_dar30_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR30_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_REG ((css600_apbap_hwc_addressblock_0_dar31_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR31_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_REG ((css600_apbap_hwc_addressblock_0_dar32_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR32_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_REG ((css600_apbap_hwc_addressblock_0_dar33_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR33_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_REG ((css600_apbap_hwc_addressblock_0_dar34_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR34_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_REG ((css600_apbap_hwc_addressblock_0_dar35_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR35_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_REG ((css600_apbap_hwc_addressblock_0_dar36_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR36_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_REG ((css600_apbap_hwc_addressblock_0_dar37_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR37_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_REG ((css600_apbap_hwc_addressblock_0_dar38_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR38_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_REG ((css600_apbap_hwc_addressblock_0_dar39_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR39_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_REG ((css600_apbap_hwc_addressblock_0_dar40_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR40_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_REG ((css600_apbap_hwc_addressblock_0_dar41_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR41_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_REG ((css600_apbap_hwc_addressblock_0_dar42_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR42_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_REG ((css600_apbap_hwc_addressblock_0_dar43_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR43_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_REG ((css600_apbap_hwc_addressblock_0_dar44_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR44_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_REG ((css600_apbap_hwc_addressblock_0_dar45_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR45_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_REG ((css600_apbap_hwc_addressblock_0_dar46_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR46_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_REG ((css600_apbap_hwc_addressblock_0_dar47_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR47_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_REG ((css600_apbap_hwc_addressblock_0_dar48_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR48_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_REG ((css600_apbap_hwc_addressblock_0_dar49_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR49_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_REG ((css600_apbap_hwc_addressblock_0_dar50_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR50_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_REG ((css600_apbap_hwc_addressblock_0_dar51_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR51_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_REG ((css600_apbap_hwc_addressblock_0_dar52_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR52_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_REG ((css600_apbap_hwc_addressblock_0_dar53_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR53_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_REG ((css600_apbap_hwc_addressblock_0_dar54_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR54_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_REG ((css600_apbap_hwc_addressblock_0_dar55_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR55_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_REG ((css600_apbap_hwc_addressblock_0_dar56_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR56_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_REG ((css600_apbap_hwc_addressblock_0_dar57_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR57_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_REG ((css600_apbap_hwc_addressblock_0_dar58_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR58_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_REG ((css600_apbap_hwc_addressblock_0_dar59_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR59_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_REG ((css600_apbap_hwc_addressblock_0_dar60_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR60_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_REG ((css600_apbap_hwc_addressblock_0_dar61_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR61_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_REG ((css600_apbap_hwc_addressblock_0_dar62_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR62_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_REG ((css600_apbap_hwc_addressblock_0_dar63_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR63_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_REG ((css600_apbap_hwc_addressblock_0_dar64_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR64_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_REG ((css600_apbap_hwc_addressblock_0_dar65_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR65_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_REG ((css600_apbap_hwc_addressblock_0_dar66_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR66_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_REG ((css600_apbap_hwc_addressblock_0_dar67_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR67_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_REG ((css600_apbap_hwc_addressblock_0_dar68_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR68_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_REG ((css600_apbap_hwc_addressblock_0_dar69_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR69_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_REG ((css600_apbap_hwc_addressblock_0_dar70_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR70_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_REG ((css600_apbap_hwc_addressblock_0_dar71_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR71_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_REG ((css600_apbap_hwc_addressblock_0_dar72_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR72_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_REG ((css600_apbap_hwc_addressblock_0_dar73_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR73_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_REG ((css600_apbap_hwc_addressblock_0_dar74_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR74_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_REG ((css600_apbap_hwc_addressblock_0_dar75_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR75_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_REG ((css600_apbap_hwc_addressblock_0_dar76_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR76_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_REG ((css600_apbap_hwc_addressblock_0_dar77_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR77_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_REG ((css600_apbap_hwc_addressblock_0_dar78_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR78_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_REG ((css600_apbap_hwc_addressblock_0_dar79_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR79_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_REG ((css600_apbap_hwc_addressblock_0_dar80_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR80_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_REG ((css600_apbap_hwc_addressblock_0_dar81_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR81_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_REG ((css600_apbap_hwc_addressblock_0_dar82_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR82_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_REG ((css600_apbap_hwc_addressblock_0_dar83_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR83_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_REG ((css600_apbap_hwc_addressblock_0_dar84_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR84_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_REG ((css600_apbap_hwc_addressblock_0_dar85_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR85_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_REG ((css600_apbap_hwc_addressblock_0_dar86_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR86_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_REG ((css600_apbap_hwc_addressblock_0_dar87_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR87_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_REG ((css600_apbap_hwc_addressblock_0_dar88_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR88_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_REG ((css600_apbap_hwc_addressblock_0_dar89_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR89_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_REG ((css600_apbap_hwc_addressblock_0_dar90_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR90_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_REG ((css600_apbap_hwc_addressblock_0_dar91_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR91_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_REG ((css600_apbap_hwc_addressblock_0_dar92_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR92_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_REG ((css600_apbap_hwc_addressblock_0_dar93_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR93_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_REG ((css600_apbap_hwc_addressblock_0_dar94_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR94_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_REG ((css600_apbap_hwc_addressblock_0_dar95_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR95_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_REG ((css600_apbap_hwc_addressblock_0_dar96_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR96_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_REG ((css600_apbap_hwc_addressblock_0_dar97_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR97_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_REG ((css600_apbap_hwc_addressblock_0_dar98_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR98_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_REG ((css600_apbap_hwc_addressblock_0_dar99_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR99_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_REG ((css600_apbap_hwc_addressblock_0_dar100_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR100_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_REG ((css600_apbap_hwc_addressblock_0_dar101_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR101_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_REG ((css600_apbap_hwc_addressblock_0_dar102_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR102_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_REG ((css600_apbap_hwc_addressblock_0_dar103_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR103_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_REG ((css600_apbap_hwc_addressblock_0_dar104_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR104_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_REG ((css600_apbap_hwc_addressblock_0_dar105_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR105_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_REG ((css600_apbap_hwc_addressblock_0_dar106_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR106_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_REG ((css600_apbap_hwc_addressblock_0_dar107_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR107_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_REG ((css600_apbap_hwc_addressblock_0_dar108_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR108_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_REG ((css600_apbap_hwc_addressblock_0_dar109_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR109_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_REG ((css600_apbap_hwc_addressblock_0_dar110_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR110_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_REG ((css600_apbap_hwc_addressblock_0_dar111_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR111_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_REG ((css600_apbap_hwc_addressblock_0_dar112_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR112_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_REG ((css600_apbap_hwc_addressblock_0_dar113_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR113_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_REG ((css600_apbap_hwc_addressblock_0_dar114_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR114_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_REG ((css600_apbap_hwc_addressblock_0_dar115_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR115_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_REG ((css600_apbap_hwc_addressblock_0_dar116_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR116_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_REG ((css600_apbap_hwc_addressblock_0_dar117_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR117_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_REG ((css600_apbap_hwc_addressblock_0_dar118_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR118_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_REG ((css600_apbap_hwc_addressblock_0_dar119_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR119_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_REG ((css600_apbap_hwc_addressblock_0_dar120_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR120_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_REG ((css600_apbap_hwc_addressblock_0_dar121_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR121_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_REG ((css600_apbap_hwc_addressblock_0_dar122_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR122_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_REG ((css600_apbap_hwc_addressblock_0_dar123_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR123_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_REG ((css600_apbap_hwc_addressblock_0_dar124_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR124_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_REG ((css600_apbap_hwc_addressblock_0_dar125_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR125_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_REG ((css600_apbap_hwc_addressblock_0_dar126_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR126_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_REG ((css600_apbap_hwc_addressblock_0_dar127_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR127_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_REG ((css600_apbap_hwc_addressblock_0_dar128_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR128_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_REG ((css600_apbap_hwc_addressblock_0_dar129_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR129_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_REG ((css600_apbap_hwc_addressblock_0_dar130_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR130_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_REG ((css600_apbap_hwc_addressblock_0_dar131_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR131_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_REG ((css600_apbap_hwc_addressblock_0_dar132_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR132_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_REG ((css600_apbap_hwc_addressblock_0_dar133_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR133_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_REG ((css600_apbap_hwc_addressblock_0_dar134_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR134_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_REG ((css600_apbap_hwc_addressblock_0_dar135_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR135_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_REG ((css600_apbap_hwc_addressblock_0_dar136_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR136_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_REG ((css600_apbap_hwc_addressblock_0_dar137_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR137_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_REG ((css600_apbap_hwc_addressblock_0_dar138_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR138_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_REG ((css600_apbap_hwc_addressblock_0_dar139_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR139_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_REG ((css600_apbap_hwc_addressblock_0_dar140_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR140_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_REG ((css600_apbap_hwc_addressblock_0_dar141_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR141_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_REG ((css600_apbap_hwc_addressblock_0_dar142_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR142_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_REG ((css600_apbap_hwc_addressblock_0_dar143_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR143_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_REG ((css600_apbap_hwc_addressblock_0_dar144_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR144_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_REG ((css600_apbap_hwc_addressblock_0_dar145_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR145_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_REG ((css600_apbap_hwc_addressblock_0_dar146_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR146_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_REG ((css600_apbap_hwc_addressblock_0_dar147_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR147_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_REG ((css600_apbap_hwc_addressblock_0_dar148_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR148_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_REG ((css600_apbap_hwc_addressblock_0_dar149_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR149_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_REG ((css600_apbap_hwc_addressblock_0_dar150_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR150_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_REG ((css600_apbap_hwc_addressblock_0_dar151_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR151_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_REG ((css600_apbap_hwc_addressblock_0_dar152_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR152_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_REG ((css600_apbap_hwc_addressblock_0_dar153_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR153_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_REG ((css600_apbap_hwc_addressblock_0_dar154_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR154_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_REG ((css600_apbap_hwc_addressblock_0_dar155_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR155_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_REG ((css600_apbap_hwc_addressblock_0_dar156_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR156_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_REG ((css600_apbap_hwc_addressblock_0_dar157_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR157_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_REG ((css600_apbap_hwc_addressblock_0_dar158_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR158_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_REG ((css600_apbap_hwc_addressblock_0_dar159_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR159_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_REG ((css600_apbap_hwc_addressblock_0_dar160_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR160_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_REG ((css600_apbap_hwc_addressblock_0_dar161_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR161_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_REG ((css600_apbap_hwc_addressblock_0_dar162_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR162_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_REG ((css600_apbap_hwc_addressblock_0_dar163_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR163_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_REG ((css600_apbap_hwc_addressblock_0_dar164_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR164_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_REG ((css600_apbap_hwc_addressblock_0_dar165_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR165_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_REG ((css600_apbap_hwc_addressblock_0_dar166_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR166_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_REG ((css600_apbap_hwc_addressblock_0_dar167_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR167_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_REG ((css600_apbap_hwc_addressblock_0_dar168_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR168_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_REG ((css600_apbap_hwc_addressblock_0_dar169_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR169_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_REG ((css600_apbap_hwc_addressblock_0_dar170_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR170_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_REG ((css600_apbap_hwc_addressblock_0_dar171_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR171_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_REG ((css600_apbap_hwc_addressblock_0_dar172_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR172_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_REG ((css600_apbap_hwc_addressblock_0_dar173_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR173_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_REG ((css600_apbap_hwc_addressblock_0_dar174_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR174_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_REG ((css600_apbap_hwc_addressblock_0_dar175_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR175_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_REG ((css600_apbap_hwc_addressblock_0_dar176_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR176_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_REG ((css600_apbap_hwc_addressblock_0_dar177_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR177_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_REG ((css600_apbap_hwc_addressblock_0_dar178_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR178_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_REG ((css600_apbap_hwc_addressblock_0_dar179_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR179_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_REG ((css600_apbap_hwc_addressblock_0_dar180_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR180_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_REG ((css600_apbap_hwc_addressblock_0_dar181_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR181_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_REG ((css600_apbap_hwc_addressblock_0_dar182_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR182_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_REG ((css600_apbap_hwc_addressblock_0_dar183_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR183_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_REG ((css600_apbap_hwc_addressblock_0_dar184_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR184_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_REG ((css600_apbap_hwc_addressblock_0_dar185_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR185_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_REG ((css600_apbap_hwc_addressblock_0_dar186_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR186_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_REG ((css600_apbap_hwc_addressblock_0_dar187_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR187_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_REG ((css600_apbap_hwc_addressblock_0_dar188_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR188_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_REG ((css600_apbap_hwc_addressblock_0_dar189_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR189_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_REG ((css600_apbap_hwc_addressblock_0_dar190_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR190_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_REG ((css600_apbap_hwc_addressblock_0_dar191_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR191_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_REG ((css600_apbap_hwc_addressblock_0_dar192_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR192_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_REG ((css600_apbap_hwc_addressblock_0_dar193_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR193_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_REG ((css600_apbap_hwc_addressblock_0_dar194_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR194_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_REG ((css600_apbap_hwc_addressblock_0_dar195_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR195_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_REG ((css600_apbap_hwc_addressblock_0_dar196_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR196_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_REG ((css600_apbap_hwc_addressblock_0_dar197_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR197_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_REG ((css600_apbap_hwc_addressblock_0_dar198_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR198_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_REG ((css600_apbap_hwc_addressblock_0_dar199_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR199_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_REG ((css600_apbap_hwc_addressblock_0_dar200_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR200_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_REG ((css600_apbap_hwc_addressblock_0_dar201_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR201_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_REG ((css600_apbap_hwc_addressblock_0_dar202_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR202_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_REG ((css600_apbap_hwc_addressblock_0_dar203_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR203_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_REG ((css600_apbap_hwc_addressblock_0_dar204_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR204_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_REG ((css600_apbap_hwc_addressblock_0_dar205_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR205_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_REG ((css600_apbap_hwc_addressblock_0_dar206_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR206_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_REG ((css600_apbap_hwc_addressblock_0_dar207_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR207_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_REG ((css600_apbap_hwc_addressblock_0_dar208_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR208_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_REG ((css600_apbap_hwc_addressblock_0_dar209_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR209_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_REG ((css600_apbap_hwc_addressblock_0_dar210_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR210_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_REG ((css600_apbap_hwc_addressblock_0_dar211_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR211_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_REG ((css600_apbap_hwc_addressblock_0_dar212_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR212_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_REG ((css600_apbap_hwc_addressblock_0_dar213_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR213_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_REG ((css600_apbap_hwc_addressblock_0_dar214_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR214_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_REG ((css600_apbap_hwc_addressblock_0_dar215_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR215_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_REG ((css600_apbap_hwc_addressblock_0_dar216_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR216_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_REG ((css600_apbap_hwc_addressblock_0_dar217_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR217_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_REG ((css600_apbap_hwc_addressblock_0_dar218_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR218_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_REG ((css600_apbap_hwc_addressblock_0_dar219_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR219_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_REG ((css600_apbap_hwc_addressblock_0_dar220_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR220_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_REG ((css600_apbap_hwc_addressblock_0_dar221_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR221_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_REG ((css600_apbap_hwc_addressblock_0_dar222_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR222_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_REG ((css600_apbap_hwc_addressblock_0_dar223_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR223_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_REG ((css600_apbap_hwc_addressblock_0_dar224_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR224_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_REG ((css600_apbap_hwc_addressblock_0_dar225_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR225_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_REG ((css600_apbap_hwc_addressblock_0_dar226_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR226_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_REG ((css600_apbap_hwc_addressblock_0_dar227_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR227_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_REG ((css600_apbap_hwc_addressblock_0_dar228_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR228_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_REG ((css600_apbap_hwc_addressblock_0_dar229_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR229_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_REG ((css600_apbap_hwc_addressblock_0_dar230_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR230_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_REG ((css600_apbap_hwc_addressblock_0_dar231_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR231_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_REG ((css600_apbap_hwc_addressblock_0_dar232_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR232_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_REG ((css600_apbap_hwc_addressblock_0_dar233_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR233_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_REG ((css600_apbap_hwc_addressblock_0_dar234_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR234_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_REG ((css600_apbap_hwc_addressblock_0_dar235_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR235_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_REG ((css600_apbap_hwc_addressblock_0_dar236_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR236_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_REG ((css600_apbap_hwc_addressblock_0_dar237_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR237_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_REG ((css600_apbap_hwc_addressblock_0_dar238_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR238_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_REG ((css600_apbap_hwc_addressblock_0_dar239_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR239_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_REG ((css600_apbap_hwc_addressblock_0_dar240_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR240_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_REG ((css600_apbap_hwc_addressblock_0_dar241_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR241_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_REG ((css600_apbap_hwc_addressblock_0_dar242_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR242_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_REG ((css600_apbap_hwc_addressblock_0_dar243_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR243_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_REG ((css600_apbap_hwc_addressblock_0_dar244_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR244_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_REG ((css600_apbap_hwc_addressblock_0_dar245_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR245_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_REG ((css600_apbap_hwc_addressblock_0_dar246_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR246_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_REG ((css600_apbap_hwc_addressblock_0_dar247_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR247_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_REG ((css600_apbap_hwc_addressblock_0_dar248_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR248_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_REG ((css600_apbap_hwc_addressblock_0_dar249_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR249_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_REG ((css600_apbap_hwc_addressblock_0_dar250_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR250_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_REG ((css600_apbap_hwc_addressblock_0_dar251_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR251_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_REG ((css600_apbap_hwc_addressblock_0_dar252_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR252_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_REG ((css600_apbap_hwc_addressblock_0_dar253_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR253_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_REG ((css600_apbap_hwc_addressblock_0_dar254_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR254_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_REG ((css600_apbap_hwc_addressblock_0_dar255_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DAR255_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_REG ((css600_apbap_hwc_addressblock_0_csw_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CSW_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_REG ((css600_apbap_hwc_addressblock_0_tar_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_TAR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_REG ((css600_apbap_hwc_addressblock_0_drw_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DRW_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_REG ((css600_apbap_hwc_addressblock_0_bd0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_REG ((css600_apbap_hwc_addressblock_0_bd1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_REG ((css600_apbap_hwc_addressblock_0_bd2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_REG ((css600_apbap_hwc_addressblock_0_bd3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_BD3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_REG ((css600_apbap_hwc_addressblock_0_trr_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_TRR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_REG ((css600_apbap_hwc_addressblock_0_cfg_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CFG_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_REG ((css600_apbap_hwc_addressblock_0_base_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_BASE_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_REG ((css600_apbap_hwc_addressblock_0_idr_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_IDR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_REG ((css600_apbap_hwc_addressblock_0_itstatus_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITSTATUS_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_REG ((css600_apbap_hwc_addressblock_0_itctrl_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_ITCTRL_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_REG ((css600_apbap_hwc_addressblock_0_claimset_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMSET_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_REG ((css600_apbap_hwc_addressblock_0_claimclr_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CLAIMCLR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_REG ((css600_apbap_hwc_addressblock_0_authstatus_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_AUTHSTATUS_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_REG ((css600_apbap_hwc_addressblock_0_devarch_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVARCH_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_REG ((css600_apbap_hwc_addressblock_0_devtype_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_DEVTYPE_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_REG ((css600_apbap_hwc_addressblock_0_pidr4_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR4_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_REG ((css600_apbap_hwc_addressblock_0_pidr5_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR5_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_REG ((css600_apbap_hwc_addressblock_0_pidr6_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR6_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_REG ((css600_apbap_hwc_addressblock_0_pidr7_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR7_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_REG ((css600_apbap_hwc_addressblock_0_pidr0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_REG ((css600_apbap_hwc_addressblock_0_pidr1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_REG ((css600_apbap_hwc_addressblock_0_pidr2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_REG ((css600_apbap_hwc_addressblock_0_pidr3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_PIDR3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_REG ((css600_apbap_hwc_addressblock_0_cidr0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_REG ((css600_apbap_hwc_addressblock_0_cidr1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_REG ((css600_apbap_hwc_addressblock_0_cidr2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_REG ((css600_apbap_hwc_addressblock_0_cidr3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_0_CIDR3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_REG ((css600_apbap_hwc_addressblock_1_dar0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_REG ((css600_apbap_hwc_addressblock_1_dar1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_REG ((css600_apbap_hwc_addressblock_1_dar2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_REG ((css600_apbap_hwc_addressblock_1_dar3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_REG ((css600_apbap_hwc_addressblock_1_dar4_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR4_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_REG ((css600_apbap_hwc_addressblock_1_dar5_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR5_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_REG ((css600_apbap_hwc_addressblock_1_dar6_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR6_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_REG ((css600_apbap_hwc_addressblock_1_dar7_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR7_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_REG ((css600_apbap_hwc_addressblock_1_dar8_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR8_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_REG ((css600_apbap_hwc_addressblock_1_dar9_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR9_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_REG ((css600_apbap_hwc_addressblock_1_dar10_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR10_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_REG ((css600_apbap_hwc_addressblock_1_dar11_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR11_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_REG ((css600_apbap_hwc_addressblock_1_dar12_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR12_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_REG ((css600_apbap_hwc_addressblock_1_dar13_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR13_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_REG ((css600_apbap_hwc_addressblock_1_dar14_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR14_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_REG ((css600_apbap_hwc_addressblock_1_dar15_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR15_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_REG ((css600_apbap_hwc_addressblock_1_dar16_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR16_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_REG ((css600_apbap_hwc_addressblock_1_dar17_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR17_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_REG ((css600_apbap_hwc_addressblock_1_dar18_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR18_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_REG ((css600_apbap_hwc_addressblock_1_dar19_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR19_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_REG ((css600_apbap_hwc_addressblock_1_dar20_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR20_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_REG ((css600_apbap_hwc_addressblock_1_dar21_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR21_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_REG ((css600_apbap_hwc_addressblock_1_dar22_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR22_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_REG ((css600_apbap_hwc_addressblock_1_dar23_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR23_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_REG ((css600_apbap_hwc_addressblock_1_dar24_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR24_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_REG ((css600_apbap_hwc_addressblock_1_dar25_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR25_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_REG ((css600_apbap_hwc_addressblock_1_dar26_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR26_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_REG ((css600_apbap_hwc_addressblock_1_dar27_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR27_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_REG ((css600_apbap_hwc_addressblock_1_dar28_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR28_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_REG ((css600_apbap_hwc_addressblock_1_dar29_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR29_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_REG ((css600_apbap_hwc_addressblock_1_dar30_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR30_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_REG ((css600_apbap_hwc_addressblock_1_dar31_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR31_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_REG ((css600_apbap_hwc_addressblock_1_dar32_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR32_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_REG ((css600_apbap_hwc_addressblock_1_dar33_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR33_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_REG ((css600_apbap_hwc_addressblock_1_dar34_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR34_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_REG ((css600_apbap_hwc_addressblock_1_dar35_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR35_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_REG ((css600_apbap_hwc_addressblock_1_dar36_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR36_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_REG ((css600_apbap_hwc_addressblock_1_dar37_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR37_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_REG ((css600_apbap_hwc_addressblock_1_dar38_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR38_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_REG ((css600_apbap_hwc_addressblock_1_dar39_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR39_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_REG ((css600_apbap_hwc_addressblock_1_dar40_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR40_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_REG ((css600_apbap_hwc_addressblock_1_dar41_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR41_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_REG ((css600_apbap_hwc_addressblock_1_dar42_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR42_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_REG ((css600_apbap_hwc_addressblock_1_dar43_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR43_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_REG ((css600_apbap_hwc_addressblock_1_dar44_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR44_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_REG ((css600_apbap_hwc_addressblock_1_dar45_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR45_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_REG ((css600_apbap_hwc_addressblock_1_dar46_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR46_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_REG ((css600_apbap_hwc_addressblock_1_dar47_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR47_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_REG ((css600_apbap_hwc_addressblock_1_dar48_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR48_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_REG ((css600_apbap_hwc_addressblock_1_dar49_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR49_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_REG ((css600_apbap_hwc_addressblock_1_dar50_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR50_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_REG ((css600_apbap_hwc_addressblock_1_dar51_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR51_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_REG ((css600_apbap_hwc_addressblock_1_dar52_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR52_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_REG ((css600_apbap_hwc_addressblock_1_dar53_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR53_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_REG ((css600_apbap_hwc_addressblock_1_dar54_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR54_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_REG ((css600_apbap_hwc_addressblock_1_dar55_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR55_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_REG ((css600_apbap_hwc_addressblock_1_dar56_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR56_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_REG ((css600_apbap_hwc_addressblock_1_dar57_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR57_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_REG ((css600_apbap_hwc_addressblock_1_dar58_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR58_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_REG ((css600_apbap_hwc_addressblock_1_dar59_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR59_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_REG ((css600_apbap_hwc_addressblock_1_dar60_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR60_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_REG ((css600_apbap_hwc_addressblock_1_dar61_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR61_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_REG ((css600_apbap_hwc_addressblock_1_dar62_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR62_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_REG ((css600_apbap_hwc_addressblock_1_dar63_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR63_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_REG ((css600_apbap_hwc_addressblock_1_dar64_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR64_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_REG ((css600_apbap_hwc_addressblock_1_dar65_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR65_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_REG ((css600_apbap_hwc_addressblock_1_dar66_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR66_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_REG ((css600_apbap_hwc_addressblock_1_dar67_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR67_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_REG ((css600_apbap_hwc_addressblock_1_dar68_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR68_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_REG ((css600_apbap_hwc_addressblock_1_dar69_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR69_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_REG ((css600_apbap_hwc_addressblock_1_dar70_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR70_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_REG ((css600_apbap_hwc_addressblock_1_dar71_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR71_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_REG ((css600_apbap_hwc_addressblock_1_dar72_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR72_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_REG ((css600_apbap_hwc_addressblock_1_dar73_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR73_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_REG ((css600_apbap_hwc_addressblock_1_dar74_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR74_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_REG ((css600_apbap_hwc_addressblock_1_dar75_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR75_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_REG ((css600_apbap_hwc_addressblock_1_dar76_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR76_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_REG ((css600_apbap_hwc_addressblock_1_dar77_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR77_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_REG ((css600_apbap_hwc_addressblock_1_dar78_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR78_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_REG ((css600_apbap_hwc_addressblock_1_dar79_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR79_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_REG ((css600_apbap_hwc_addressblock_1_dar80_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR80_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_REG ((css600_apbap_hwc_addressblock_1_dar81_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR81_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_REG ((css600_apbap_hwc_addressblock_1_dar82_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR82_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_REG ((css600_apbap_hwc_addressblock_1_dar83_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR83_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_REG ((css600_apbap_hwc_addressblock_1_dar84_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR84_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_REG ((css600_apbap_hwc_addressblock_1_dar85_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR85_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_REG ((css600_apbap_hwc_addressblock_1_dar86_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR86_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_REG ((css600_apbap_hwc_addressblock_1_dar87_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR87_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_REG ((css600_apbap_hwc_addressblock_1_dar88_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR88_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_REG ((css600_apbap_hwc_addressblock_1_dar89_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR89_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_REG ((css600_apbap_hwc_addressblock_1_dar90_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR90_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_REG ((css600_apbap_hwc_addressblock_1_dar91_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR91_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_REG ((css600_apbap_hwc_addressblock_1_dar92_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR92_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_REG ((css600_apbap_hwc_addressblock_1_dar93_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR93_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_REG ((css600_apbap_hwc_addressblock_1_dar94_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR94_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_REG ((css600_apbap_hwc_addressblock_1_dar95_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR95_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_REG ((css600_apbap_hwc_addressblock_1_dar96_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR96_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_REG ((css600_apbap_hwc_addressblock_1_dar97_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR97_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_REG ((css600_apbap_hwc_addressblock_1_dar98_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR98_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_REG ((css600_apbap_hwc_addressblock_1_dar99_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR99_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_REG ((css600_apbap_hwc_addressblock_1_dar100_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR100_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_REG ((css600_apbap_hwc_addressblock_1_dar101_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR101_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_REG ((css600_apbap_hwc_addressblock_1_dar102_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR102_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_REG ((css600_apbap_hwc_addressblock_1_dar103_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR103_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_REG ((css600_apbap_hwc_addressblock_1_dar104_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR104_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_REG ((css600_apbap_hwc_addressblock_1_dar105_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR105_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_REG ((css600_apbap_hwc_addressblock_1_dar106_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR106_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_REG ((css600_apbap_hwc_addressblock_1_dar107_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR107_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_REG ((css600_apbap_hwc_addressblock_1_dar108_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR108_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_REG ((css600_apbap_hwc_addressblock_1_dar109_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR109_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_REG ((css600_apbap_hwc_addressblock_1_dar110_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR110_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_REG ((css600_apbap_hwc_addressblock_1_dar111_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR111_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_REG ((css600_apbap_hwc_addressblock_1_dar112_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR112_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_REG ((css600_apbap_hwc_addressblock_1_dar113_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR113_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_REG ((css600_apbap_hwc_addressblock_1_dar114_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR114_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_REG ((css600_apbap_hwc_addressblock_1_dar115_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR115_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_REG ((css600_apbap_hwc_addressblock_1_dar116_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR116_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_REG ((css600_apbap_hwc_addressblock_1_dar117_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR117_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_REG ((css600_apbap_hwc_addressblock_1_dar118_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR118_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_REG ((css600_apbap_hwc_addressblock_1_dar119_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR119_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_REG ((css600_apbap_hwc_addressblock_1_dar120_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR120_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_REG ((css600_apbap_hwc_addressblock_1_dar121_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR121_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_REG ((css600_apbap_hwc_addressblock_1_dar122_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR122_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_REG ((css600_apbap_hwc_addressblock_1_dar123_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR123_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_REG ((css600_apbap_hwc_addressblock_1_dar124_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR124_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_REG ((css600_apbap_hwc_addressblock_1_dar125_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR125_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_REG ((css600_apbap_hwc_addressblock_1_dar126_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR126_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_REG ((css600_apbap_hwc_addressblock_1_dar127_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR127_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_REG ((css600_apbap_hwc_addressblock_1_dar128_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR128_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_REG ((css600_apbap_hwc_addressblock_1_dar129_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR129_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_REG ((css600_apbap_hwc_addressblock_1_dar130_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR130_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_REG ((css600_apbap_hwc_addressblock_1_dar131_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR131_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_REG ((css600_apbap_hwc_addressblock_1_dar132_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR132_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_REG ((css600_apbap_hwc_addressblock_1_dar133_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR133_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_REG ((css600_apbap_hwc_addressblock_1_dar134_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR134_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_REG ((css600_apbap_hwc_addressblock_1_dar135_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR135_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_REG ((css600_apbap_hwc_addressblock_1_dar136_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR136_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_REG ((css600_apbap_hwc_addressblock_1_dar137_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR137_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_REG ((css600_apbap_hwc_addressblock_1_dar138_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR138_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_REG ((css600_apbap_hwc_addressblock_1_dar139_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR139_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_REG ((css600_apbap_hwc_addressblock_1_dar140_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR140_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_REG ((css600_apbap_hwc_addressblock_1_dar141_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR141_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_REG ((css600_apbap_hwc_addressblock_1_dar142_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR142_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_REG ((css600_apbap_hwc_addressblock_1_dar143_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR143_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_REG ((css600_apbap_hwc_addressblock_1_dar144_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR144_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_REG ((css600_apbap_hwc_addressblock_1_dar145_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR145_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_REG ((css600_apbap_hwc_addressblock_1_dar146_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR146_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_REG ((css600_apbap_hwc_addressblock_1_dar147_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR147_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_REG ((css600_apbap_hwc_addressblock_1_dar148_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR148_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_REG ((css600_apbap_hwc_addressblock_1_dar149_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR149_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_REG ((css600_apbap_hwc_addressblock_1_dar150_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR150_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_REG ((css600_apbap_hwc_addressblock_1_dar151_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR151_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_REG ((css600_apbap_hwc_addressblock_1_dar152_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR152_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_REG ((css600_apbap_hwc_addressblock_1_dar153_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR153_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_REG ((css600_apbap_hwc_addressblock_1_dar154_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR154_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_REG ((css600_apbap_hwc_addressblock_1_dar155_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR155_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_REG ((css600_apbap_hwc_addressblock_1_dar156_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR156_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_REG ((css600_apbap_hwc_addressblock_1_dar157_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR157_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_REG ((css600_apbap_hwc_addressblock_1_dar158_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR158_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_REG ((css600_apbap_hwc_addressblock_1_dar159_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR159_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_REG ((css600_apbap_hwc_addressblock_1_dar160_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR160_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_REG ((css600_apbap_hwc_addressblock_1_dar161_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR161_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_REG ((css600_apbap_hwc_addressblock_1_dar162_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR162_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_REG ((css600_apbap_hwc_addressblock_1_dar163_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR163_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_REG ((css600_apbap_hwc_addressblock_1_dar164_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR164_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_REG ((css600_apbap_hwc_addressblock_1_dar165_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR165_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_REG ((css600_apbap_hwc_addressblock_1_dar166_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR166_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_REG ((css600_apbap_hwc_addressblock_1_dar167_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR167_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_REG ((css600_apbap_hwc_addressblock_1_dar168_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR168_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_REG ((css600_apbap_hwc_addressblock_1_dar169_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR169_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_REG ((css600_apbap_hwc_addressblock_1_dar170_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR170_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_REG ((css600_apbap_hwc_addressblock_1_dar171_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR171_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_REG ((css600_apbap_hwc_addressblock_1_dar172_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR172_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_REG ((css600_apbap_hwc_addressblock_1_dar173_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR173_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_REG ((css600_apbap_hwc_addressblock_1_dar174_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR174_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_REG ((css600_apbap_hwc_addressblock_1_dar175_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR175_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_REG ((css600_apbap_hwc_addressblock_1_dar176_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR176_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_REG ((css600_apbap_hwc_addressblock_1_dar177_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR177_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_REG ((css600_apbap_hwc_addressblock_1_dar178_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR178_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_REG ((css600_apbap_hwc_addressblock_1_dar179_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR179_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_REG ((css600_apbap_hwc_addressblock_1_dar180_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR180_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_REG ((css600_apbap_hwc_addressblock_1_dar181_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR181_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_REG ((css600_apbap_hwc_addressblock_1_dar182_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR182_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_REG ((css600_apbap_hwc_addressblock_1_dar183_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR183_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_REG ((css600_apbap_hwc_addressblock_1_dar184_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR184_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_REG ((css600_apbap_hwc_addressblock_1_dar185_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR185_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_REG ((css600_apbap_hwc_addressblock_1_dar186_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR186_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_REG ((css600_apbap_hwc_addressblock_1_dar187_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR187_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_REG ((css600_apbap_hwc_addressblock_1_dar188_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR188_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_REG ((css600_apbap_hwc_addressblock_1_dar189_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR189_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_REG ((css600_apbap_hwc_addressblock_1_dar190_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR190_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_REG ((css600_apbap_hwc_addressblock_1_dar191_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR191_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_REG ((css600_apbap_hwc_addressblock_1_dar192_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR192_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_REG ((css600_apbap_hwc_addressblock_1_dar193_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR193_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_REG ((css600_apbap_hwc_addressblock_1_dar194_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR194_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_REG ((css600_apbap_hwc_addressblock_1_dar195_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR195_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_REG ((css600_apbap_hwc_addressblock_1_dar196_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR196_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_REG ((css600_apbap_hwc_addressblock_1_dar197_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR197_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_REG ((css600_apbap_hwc_addressblock_1_dar198_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR198_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_REG ((css600_apbap_hwc_addressblock_1_dar199_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR199_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_REG ((css600_apbap_hwc_addressblock_1_dar200_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR200_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_REG ((css600_apbap_hwc_addressblock_1_dar201_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR201_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_REG ((css600_apbap_hwc_addressblock_1_dar202_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR202_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_REG ((css600_apbap_hwc_addressblock_1_dar203_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR203_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_REG ((css600_apbap_hwc_addressblock_1_dar204_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR204_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_REG ((css600_apbap_hwc_addressblock_1_dar205_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR205_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_REG ((css600_apbap_hwc_addressblock_1_dar206_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR206_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_REG ((css600_apbap_hwc_addressblock_1_dar207_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR207_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_REG ((css600_apbap_hwc_addressblock_1_dar208_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR208_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_REG ((css600_apbap_hwc_addressblock_1_dar209_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR209_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_REG ((css600_apbap_hwc_addressblock_1_dar210_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR210_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_REG ((css600_apbap_hwc_addressblock_1_dar211_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR211_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_REG ((css600_apbap_hwc_addressblock_1_dar212_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR212_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_REG ((css600_apbap_hwc_addressblock_1_dar213_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR213_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_REG ((css600_apbap_hwc_addressblock_1_dar214_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR214_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_REG ((css600_apbap_hwc_addressblock_1_dar215_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR215_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_REG ((css600_apbap_hwc_addressblock_1_dar216_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR216_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_REG ((css600_apbap_hwc_addressblock_1_dar217_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR217_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_REG ((css600_apbap_hwc_addressblock_1_dar218_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR218_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_REG ((css600_apbap_hwc_addressblock_1_dar219_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR219_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_REG ((css600_apbap_hwc_addressblock_1_dar220_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR220_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_REG ((css600_apbap_hwc_addressblock_1_dar221_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR221_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_REG ((css600_apbap_hwc_addressblock_1_dar222_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR222_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_REG ((css600_apbap_hwc_addressblock_1_dar223_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR223_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_REG ((css600_apbap_hwc_addressblock_1_dar224_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR224_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_REG ((css600_apbap_hwc_addressblock_1_dar225_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR225_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_REG ((css600_apbap_hwc_addressblock_1_dar226_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR226_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_REG ((css600_apbap_hwc_addressblock_1_dar227_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR227_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_REG ((css600_apbap_hwc_addressblock_1_dar228_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR228_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_REG ((css600_apbap_hwc_addressblock_1_dar229_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR229_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_REG ((css600_apbap_hwc_addressblock_1_dar230_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR230_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_REG ((css600_apbap_hwc_addressblock_1_dar231_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR231_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_REG ((css600_apbap_hwc_addressblock_1_dar232_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR232_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_REG ((css600_apbap_hwc_addressblock_1_dar233_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR233_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_REG ((css600_apbap_hwc_addressblock_1_dar234_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR234_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_REG ((css600_apbap_hwc_addressblock_1_dar235_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR235_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_REG ((css600_apbap_hwc_addressblock_1_dar236_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR236_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_REG ((css600_apbap_hwc_addressblock_1_dar237_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR237_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_REG ((css600_apbap_hwc_addressblock_1_dar238_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR238_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_REG ((css600_apbap_hwc_addressblock_1_dar239_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR239_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_REG ((css600_apbap_hwc_addressblock_1_dar240_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR240_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_REG ((css600_apbap_hwc_addressblock_1_dar241_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR241_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_REG ((css600_apbap_hwc_addressblock_1_dar242_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR242_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_REG ((css600_apbap_hwc_addressblock_1_dar243_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR243_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_REG ((css600_apbap_hwc_addressblock_1_dar244_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR244_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_REG ((css600_apbap_hwc_addressblock_1_dar245_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR245_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_REG ((css600_apbap_hwc_addressblock_1_dar246_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR246_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_REG ((css600_apbap_hwc_addressblock_1_dar247_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR247_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_REG ((css600_apbap_hwc_addressblock_1_dar248_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR248_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_REG ((css600_apbap_hwc_addressblock_1_dar249_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR249_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_REG ((css600_apbap_hwc_addressblock_1_dar250_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR250_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_REG ((css600_apbap_hwc_addressblock_1_dar251_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR251_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_REG ((css600_apbap_hwc_addressblock_1_dar252_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR252_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_REG ((css600_apbap_hwc_addressblock_1_dar253_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR253_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_REG ((css600_apbap_hwc_addressblock_1_dar254_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR254_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_REG ((css600_apbap_hwc_addressblock_1_dar255_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DAR255_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_REG ((css600_apbap_hwc_addressblock_1_csw_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CSW_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_REG ((css600_apbap_hwc_addressblock_1_tar_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_TAR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_REG ((css600_apbap_hwc_addressblock_1_drw_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DRW_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_REG ((css600_apbap_hwc_addressblock_1_bd0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_REG ((css600_apbap_hwc_addressblock_1_bd1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_REG ((css600_apbap_hwc_addressblock_1_bd2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_REG ((css600_apbap_hwc_addressblock_1_bd3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_BD3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_REG ((css600_apbap_hwc_addressblock_1_trr_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_TRR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_REG ((css600_apbap_hwc_addressblock_1_cfg_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CFG_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_REG ((css600_apbap_hwc_addressblock_1_base_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_BASE_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_REG ((css600_apbap_hwc_addressblock_1_idr_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_IDR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_REG ((css600_apbap_hwc_addressblock_1_itstatus_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITSTATUS_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_REG ((css600_apbap_hwc_addressblock_1_itctrl_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_ITCTRL_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_REG ((css600_apbap_hwc_addressblock_1_claimset_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMSET_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_REG ((css600_apbap_hwc_addressblock_1_claimclr_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CLAIMCLR_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_REG ((css600_apbap_hwc_addressblock_1_authstatus_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_AUTHSTATUS_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_REG ((css600_apbap_hwc_addressblock_1_devarch_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVARCH_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_REG ((css600_apbap_hwc_addressblock_1_devtype_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_DEVTYPE_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_REG ((css600_apbap_hwc_addressblock_1_pidr4_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR4_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_REG ((css600_apbap_hwc_addressblock_1_pidr5_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR5_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_REG ((css600_apbap_hwc_addressblock_1_pidr6_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR6_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_REG ((css600_apbap_hwc_addressblock_1_pidr7_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR7_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_REG ((css600_apbap_hwc_addressblock_1_pidr0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_REG ((css600_apbap_hwc_addressblock_1_pidr1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_REG ((css600_apbap_hwc_addressblock_1_pidr2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_REG ((css600_apbap_hwc_addressblock_1_pidr3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_PIDR3_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_REG ((css600_apbap_hwc_addressblock_1_cidr0_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR0_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_REG ((css600_apbap_hwc_addressblock_1_cidr1_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR1_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_REG ((css600_apbap_hwc_addressblock_1_cidr2_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR2_ADR)
#define CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_REG ((css600_apbap_hwc_addressblock_1_cidr3_reg_t*) CSS600_APBAP_HWC_ADDRESSBLOCK_1_CIDR3_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    css600_apbap_hwc_addressblock_0_dar0_reg_t ADDRESSBLOCK_0_DAR0; /*< Address offset = 0x0 */
    css600_apbap_hwc_addressblock_0_dar1_reg_t ADDRESSBLOCK_0_DAR1; /*< Address offset = 0x4 */
    css600_apbap_hwc_addressblock_0_dar2_reg_t ADDRESSBLOCK_0_DAR2; /*< Address offset = 0x8 */
    css600_apbap_hwc_addressblock_0_dar3_reg_t ADDRESSBLOCK_0_DAR3; /*< Address offset = 0xc */
    css600_apbap_hwc_addressblock_0_dar4_reg_t ADDRESSBLOCK_0_DAR4; /*< Address offset = 0x10 */
    css600_apbap_hwc_addressblock_0_dar5_reg_t ADDRESSBLOCK_0_DAR5; /*< Address offset = 0x14 */
    css600_apbap_hwc_addressblock_0_dar6_reg_t ADDRESSBLOCK_0_DAR6; /*< Address offset = 0x18 */
    css600_apbap_hwc_addressblock_0_dar7_reg_t ADDRESSBLOCK_0_DAR7; /*< Address offset = 0x1c */
    css600_apbap_hwc_addressblock_0_dar8_reg_t ADDRESSBLOCK_0_DAR8; /*< Address offset = 0x20 */
    css600_apbap_hwc_addressblock_0_dar9_reg_t ADDRESSBLOCK_0_DAR9; /*< Address offset = 0x24 */
    css600_apbap_hwc_addressblock_0_dar10_reg_t ADDRESSBLOCK_0_DAR10; /*< Address offset = 0x28 */
    css600_apbap_hwc_addressblock_0_dar11_reg_t ADDRESSBLOCK_0_DAR11; /*< Address offset = 0x2c */
    css600_apbap_hwc_addressblock_0_dar12_reg_t ADDRESSBLOCK_0_DAR12; /*< Address offset = 0x30 */
    css600_apbap_hwc_addressblock_0_dar13_reg_t ADDRESSBLOCK_0_DAR13; /*< Address offset = 0x34 */
    css600_apbap_hwc_addressblock_0_dar14_reg_t ADDRESSBLOCK_0_DAR14; /*< Address offset = 0x38 */
    css600_apbap_hwc_addressblock_0_dar15_reg_t ADDRESSBLOCK_0_DAR15; /*< Address offset = 0x3c */
    css600_apbap_hwc_addressblock_0_dar16_reg_t ADDRESSBLOCK_0_DAR16; /*< Address offset = 0x40 */
    css600_apbap_hwc_addressblock_0_dar17_reg_t ADDRESSBLOCK_0_DAR17; /*< Address offset = 0x44 */
    css600_apbap_hwc_addressblock_0_dar18_reg_t ADDRESSBLOCK_0_DAR18; /*< Address offset = 0x48 */
    css600_apbap_hwc_addressblock_0_dar19_reg_t ADDRESSBLOCK_0_DAR19; /*< Address offset = 0x4c */
    css600_apbap_hwc_addressblock_0_dar20_reg_t ADDRESSBLOCK_0_DAR20; /*< Address offset = 0x50 */
    css600_apbap_hwc_addressblock_0_dar21_reg_t ADDRESSBLOCK_0_DAR21; /*< Address offset = 0x54 */
    css600_apbap_hwc_addressblock_0_dar22_reg_t ADDRESSBLOCK_0_DAR22; /*< Address offset = 0x58 */
    css600_apbap_hwc_addressblock_0_dar23_reg_t ADDRESSBLOCK_0_DAR23; /*< Address offset = 0x5c */
    css600_apbap_hwc_addressblock_0_dar24_reg_t ADDRESSBLOCK_0_DAR24; /*< Address offset = 0x60 */
    css600_apbap_hwc_addressblock_0_dar25_reg_t ADDRESSBLOCK_0_DAR25; /*< Address offset = 0x64 */
    css600_apbap_hwc_addressblock_0_dar26_reg_t ADDRESSBLOCK_0_DAR26; /*< Address offset = 0x68 */
    css600_apbap_hwc_addressblock_0_dar27_reg_t ADDRESSBLOCK_0_DAR27; /*< Address offset = 0x6c */
    css600_apbap_hwc_addressblock_0_dar28_reg_t ADDRESSBLOCK_0_DAR28; /*< Address offset = 0x70 */
    css600_apbap_hwc_addressblock_0_dar29_reg_t ADDRESSBLOCK_0_DAR29; /*< Address offset = 0x74 */
    css600_apbap_hwc_addressblock_0_dar30_reg_t ADDRESSBLOCK_0_DAR30; /*< Address offset = 0x78 */
    css600_apbap_hwc_addressblock_0_dar31_reg_t ADDRESSBLOCK_0_DAR31; /*< Address offset = 0x7c */
    css600_apbap_hwc_addressblock_0_dar32_reg_t ADDRESSBLOCK_0_DAR32; /*< Address offset = 0x80 */
    css600_apbap_hwc_addressblock_0_dar33_reg_t ADDRESSBLOCK_0_DAR33; /*< Address offset = 0x84 */
    css600_apbap_hwc_addressblock_0_dar34_reg_t ADDRESSBLOCK_0_DAR34; /*< Address offset = 0x88 */
    css600_apbap_hwc_addressblock_0_dar35_reg_t ADDRESSBLOCK_0_DAR35; /*< Address offset = 0x8c */
    css600_apbap_hwc_addressblock_0_dar36_reg_t ADDRESSBLOCK_0_DAR36; /*< Address offset = 0x90 */
    css600_apbap_hwc_addressblock_0_dar37_reg_t ADDRESSBLOCK_0_DAR37; /*< Address offset = 0x94 */
    css600_apbap_hwc_addressblock_0_dar38_reg_t ADDRESSBLOCK_0_DAR38; /*< Address offset = 0x98 */
    css600_apbap_hwc_addressblock_0_dar39_reg_t ADDRESSBLOCK_0_DAR39; /*< Address offset = 0x9c */
    css600_apbap_hwc_addressblock_0_dar40_reg_t ADDRESSBLOCK_0_DAR40; /*< Address offset = 0xa0 */
    css600_apbap_hwc_addressblock_0_dar41_reg_t ADDRESSBLOCK_0_DAR41; /*< Address offset = 0xa4 */
    css600_apbap_hwc_addressblock_0_dar42_reg_t ADDRESSBLOCK_0_DAR42; /*< Address offset = 0xa8 */
    css600_apbap_hwc_addressblock_0_dar43_reg_t ADDRESSBLOCK_0_DAR43; /*< Address offset = 0xac */
    css600_apbap_hwc_addressblock_0_dar44_reg_t ADDRESSBLOCK_0_DAR44; /*< Address offset = 0xb0 */
    css600_apbap_hwc_addressblock_0_dar45_reg_t ADDRESSBLOCK_0_DAR45; /*< Address offset = 0xb4 */
    css600_apbap_hwc_addressblock_0_dar46_reg_t ADDRESSBLOCK_0_DAR46; /*< Address offset = 0xb8 */
    css600_apbap_hwc_addressblock_0_dar47_reg_t ADDRESSBLOCK_0_DAR47; /*< Address offset = 0xbc */
    css600_apbap_hwc_addressblock_0_dar48_reg_t ADDRESSBLOCK_0_DAR48; /*< Address offset = 0xc0 */
    css600_apbap_hwc_addressblock_0_dar49_reg_t ADDRESSBLOCK_0_DAR49; /*< Address offset = 0xc4 */
    css600_apbap_hwc_addressblock_0_dar50_reg_t ADDRESSBLOCK_0_DAR50; /*< Address offset = 0xc8 */
    css600_apbap_hwc_addressblock_0_dar51_reg_t ADDRESSBLOCK_0_DAR51; /*< Address offset = 0xcc */
    css600_apbap_hwc_addressblock_0_dar52_reg_t ADDRESSBLOCK_0_DAR52; /*< Address offset = 0xd0 */
    css600_apbap_hwc_addressblock_0_dar53_reg_t ADDRESSBLOCK_0_DAR53; /*< Address offset = 0xd4 */
    css600_apbap_hwc_addressblock_0_dar54_reg_t ADDRESSBLOCK_0_DAR54; /*< Address offset = 0xd8 */
    css600_apbap_hwc_addressblock_0_dar55_reg_t ADDRESSBLOCK_0_DAR55; /*< Address offset = 0xdc */
    css600_apbap_hwc_addressblock_0_dar56_reg_t ADDRESSBLOCK_0_DAR56; /*< Address offset = 0xe0 */
    css600_apbap_hwc_addressblock_0_dar57_reg_t ADDRESSBLOCK_0_DAR57; /*< Address offset = 0xe4 */
    css600_apbap_hwc_addressblock_0_dar58_reg_t ADDRESSBLOCK_0_DAR58; /*< Address offset = 0xe8 */
    css600_apbap_hwc_addressblock_0_dar59_reg_t ADDRESSBLOCK_0_DAR59; /*< Address offset = 0xec */
    css600_apbap_hwc_addressblock_0_dar60_reg_t ADDRESSBLOCK_0_DAR60; /*< Address offset = 0xf0 */
    css600_apbap_hwc_addressblock_0_dar61_reg_t ADDRESSBLOCK_0_DAR61; /*< Address offset = 0xf4 */
    css600_apbap_hwc_addressblock_0_dar62_reg_t ADDRESSBLOCK_0_DAR62; /*< Address offset = 0xf8 */
    css600_apbap_hwc_addressblock_0_dar63_reg_t ADDRESSBLOCK_0_DAR63; /*< Address offset = 0xfc */
    css600_apbap_hwc_addressblock_0_dar64_reg_t ADDRESSBLOCK_0_DAR64; /*< Address offset = 0x100 */
    css600_apbap_hwc_addressblock_0_dar65_reg_t ADDRESSBLOCK_0_DAR65; /*< Address offset = 0x104 */
    css600_apbap_hwc_addressblock_0_dar66_reg_t ADDRESSBLOCK_0_DAR66; /*< Address offset = 0x108 */
    css600_apbap_hwc_addressblock_0_dar67_reg_t ADDRESSBLOCK_0_DAR67; /*< Address offset = 0x10c */
    css600_apbap_hwc_addressblock_0_dar68_reg_t ADDRESSBLOCK_0_DAR68; /*< Address offset = 0x110 */
    css600_apbap_hwc_addressblock_0_dar69_reg_t ADDRESSBLOCK_0_DAR69; /*< Address offset = 0x114 */
    css600_apbap_hwc_addressblock_0_dar70_reg_t ADDRESSBLOCK_0_DAR70; /*< Address offset = 0x118 */
    css600_apbap_hwc_addressblock_0_dar71_reg_t ADDRESSBLOCK_0_DAR71; /*< Address offset = 0x11c */
    css600_apbap_hwc_addressblock_0_dar72_reg_t ADDRESSBLOCK_0_DAR72; /*< Address offset = 0x120 */
    css600_apbap_hwc_addressblock_0_dar73_reg_t ADDRESSBLOCK_0_DAR73; /*< Address offset = 0x124 */
    css600_apbap_hwc_addressblock_0_dar74_reg_t ADDRESSBLOCK_0_DAR74; /*< Address offset = 0x128 */
    css600_apbap_hwc_addressblock_0_dar75_reg_t ADDRESSBLOCK_0_DAR75; /*< Address offset = 0x12c */
    css600_apbap_hwc_addressblock_0_dar76_reg_t ADDRESSBLOCK_0_DAR76; /*< Address offset = 0x130 */
    css600_apbap_hwc_addressblock_0_dar77_reg_t ADDRESSBLOCK_0_DAR77; /*< Address offset = 0x134 */
    css600_apbap_hwc_addressblock_0_dar78_reg_t ADDRESSBLOCK_0_DAR78; /*< Address offset = 0x138 */
    css600_apbap_hwc_addressblock_0_dar79_reg_t ADDRESSBLOCK_0_DAR79; /*< Address offset = 0x13c */
    css600_apbap_hwc_addressblock_0_dar80_reg_t ADDRESSBLOCK_0_DAR80; /*< Address offset = 0x140 */
    css600_apbap_hwc_addressblock_0_dar81_reg_t ADDRESSBLOCK_0_DAR81; /*< Address offset = 0x144 */
    css600_apbap_hwc_addressblock_0_dar82_reg_t ADDRESSBLOCK_0_DAR82; /*< Address offset = 0x148 */
    css600_apbap_hwc_addressblock_0_dar83_reg_t ADDRESSBLOCK_0_DAR83; /*< Address offset = 0x14c */
    css600_apbap_hwc_addressblock_0_dar84_reg_t ADDRESSBLOCK_0_DAR84; /*< Address offset = 0x150 */
    css600_apbap_hwc_addressblock_0_dar85_reg_t ADDRESSBLOCK_0_DAR85; /*< Address offset = 0x154 */
    css600_apbap_hwc_addressblock_0_dar86_reg_t ADDRESSBLOCK_0_DAR86; /*< Address offset = 0x158 */
    css600_apbap_hwc_addressblock_0_dar87_reg_t ADDRESSBLOCK_0_DAR87; /*< Address offset = 0x15c */
    css600_apbap_hwc_addressblock_0_dar88_reg_t ADDRESSBLOCK_0_DAR88; /*< Address offset = 0x160 */
    css600_apbap_hwc_addressblock_0_dar89_reg_t ADDRESSBLOCK_0_DAR89; /*< Address offset = 0x164 */
    css600_apbap_hwc_addressblock_0_dar90_reg_t ADDRESSBLOCK_0_DAR90; /*< Address offset = 0x168 */
    css600_apbap_hwc_addressblock_0_dar91_reg_t ADDRESSBLOCK_0_DAR91; /*< Address offset = 0x16c */
    css600_apbap_hwc_addressblock_0_dar92_reg_t ADDRESSBLOCK_0_DAR92; /*< Address offset = 0x170 */
    css600_apbap_hwc_addressblock_0_dar93_reg_t ADDRESSBLOCK_0_DAR93; /*< Address offset = 0x174 */
    css600_apbap_hwc_addressblock_0_dar94_reg_t ADDRESSBLOCK_0_DAR94; /*< Address offset = 0x178 */
    css600_apbap_hwc_addressblock_0_dar95_reg_t ADDRESSBLOCK_0_DAR95; /*< Address offset = 0x17c */
    css600_apbap_hwc_addressblock_0_dar96_reg_t ADDRESSBLOCK_0_DAR96; /*< Address offset = 0x180 */
    css600_apbap_hwc_addressblock_0_dar97_reg_t ADDRESSBLOCK_0_DAR97; /*< Address offset = 0x184 */
    css600_apbap_hwc_addressblock_0_dar98_reg_t ADDRESSBLOCK_0_DAR98; /*< Address offset = 0x188 */
    css600_apbap_hwc_addressblock_0_dar99_reg_t ADDRESSBLOCK_0_DAR99; /*< Address offset = 0x18c */
    css600_apbap_hwc_addressblock_0_dar100_reg_t ADDRESSBLOCK_0_DAR100; /*< Address offset = 0x190 */
    css600_apbap_hwc_addressblock_0_dar101_reg_t ADDRESSBLOCK_0_DAR101; /*< Address offset = 0x194 */
    css600_apbap_hwc_addressblock_0_dar102_reg_t ADDRESSBLOCK_0_DAR102; /*< Address offset = 0x198 */
    css600_apbap_hwc_addressblock_0_dar103_reg_t ADDRESSBLOCK_0_DAR103; /*< Address offset = 0x19c */
    css600_apbap_hwc_addressblock_0_dar104_reg_t ADDRESSBLOCK_0_DAR104; /*< Address offset = 0x1a0 */
    css600_apbap_hwc_addressblock_0_dar105_reg_t ADDRESSBLOCK_0_DAR105; /*< Address offset = 0x1a4 */
    css600_apbap_hwc_addressblock_0_dar106_reg_t ADDRESSBLOCK_0_DAR106; /*< Address offset = 0x1a8 */
    css600_apbap_hwc_addressblock_0_dar107_reg_t ADDRESSBLOCK_0_DAR107; /*< Address offset = 0x1ac */
    css600_apbap_hwc_addressblock_0_dar108_reg_t ADDRESSBLOCK_0_DAR108; /*< Address offset = 0x1b0 */
    css600_apbap_hwc_addressblock_0_dar109_reg_t ADDRESSBLOCK_0_DAR109; /*< Address offset = 0x1b4 */
    css600_apbap_hwc_addressblock_0_dar110_reg_t ADDRESSBLOCK_0_DAR110; /*< Address offset = 0x1b8 */
    css600_apbap_hwc_addressblock_0_dar111_reg_t ADDRESSBLOCK_0_DAR111; /*< Address offset = 0x1bc */
    css600_apbap_hwc_addressblock_0_dar112_reg_t ADDRESSBLOCK_0_DAR112; /*< Address offset = 0x1c0 */
    css600_apbap_hwc_addressblock_0_dar113_reg_t ADDRESSBLOCK_0_DAR113; /*< Address offset = 0x1c4 */
    css600_apbap_hwc_addressblock_0_dar114_reg_t ADDRESSBLOCK_0_DAR114; /*< Address offset = 0x1c8 */
    css600_apbap_hwc_addressblock_0_dar115_reg_t ADDRESSBLOCK_0_DAR115; /*< Address offset = 0x1cc */
    css600_apbap_hwc_addressblock_0_dar116_reg_t ADDRESSBLOCK_0_DAR116; /*< Address offset = 0x1d0 */
    css600_apbap_hwc_addressblock_0_dar117_reg_t ADDRESSBLOCK_0_DAR117; /*< Address offset = 0x1d4 */
    css600_apbap_hwc_addressblock_0_dar118_reg_t ADDRESSBLOCK_0_DAR118; /*< Address offset = 0x1d8 */
    css600_apbap_hwc_addressblock_0_dar119_reg_t ADDRESSBLOCK_0_DAR119; /*< Address offset = 0x1dc */
    css600_apbap_hwc_addressblock_0_dar120_reg_t ADDRESSBLOCK_0_DAR120; /*< Address offset = 0x1e0 */
    css600_apbap_hwc_addressblock_0_dar121_reg_t ADDRESSBLOCK_0_DAR121; /*< Address offset = 0x1e4 */
    css600_apbap_hwc_addressblock_0_dar122_reg_t ADDRESSBLOCK_0_DAR122; /*< Address offset = 0x1e8 */
    css600_apbap_hwc_addressblock_0_dar123_reg_t ADDRESSBLOCK_0_DAR123; /*< Address offset = 0x1ec */
    css600_apbap_hwc_addressblock_0_dar124_reg_t ADDRESSBLOCK_0_DAR124; /*< Address offset = 0x1f0 */
    css600_apbap_hwc_addressblock_0_dar125_reg_t ADDRESSBLOCK_0_DAR125; /*< Address offset = 0x1f4 */
    css600_apbap_hwc_addressblock_0_dar126_reg_t ADDRESSBLOCK_0_DAR126; /*< Address offset = 0x1f8 */
    css600_apbap_hwc_addressblock_0_dar127_reg_t ADDRESSBLOCK_0_DAR127; /*< Address offset = 0x1fc */
    css600_apbap_hwc_addressblock_0_dar128_reg_t ADDRESSBLOCK_0_DAR128; /*< Address offset = 0x200 */
    css600_apbap_hwc_addressblock_0_dar129_reg_t ADDRESSBLOCK_0_DAR129; /*< Address offset = 0x204 */
    css600_apbap_hwc_addressblock_0_dar130_reg_t ADDRESSBLOCK_0_DAR130; /*< Address offset = 0x208 */
    css600_apbap_hwc_addressblock_0_dar131_reg_t ADDRESSBLOCK_0_DAR131; /*< Address offset = 0x20c */
    css600_apbap_hwc_addressblock_0_dar132_reg_t ADDRESSBLOCK_0_DAR132; /*< Address offset = 0x210 */
    css600_apbap_hwc_addressblock_0_dar133_reg_t ADDRESSBLOCK_0_DAR133; /*< Address offset = 0x214 */
    css600_apbap_hwc_addressblock_0_dar134_reg_t ADDRESSBLOCK_0_DAR134; /*< Address offset = 0x218 */
    css600_apbap_hwc_addressblock_0_dar135_reg_t ADDRESSBLOCK_0_DAR135; /*< Address offset = 0x21c */
    css600_apbap_hwc_addressblock_0_dar136_reg_t ADDRESSBLOCK_0_DAR136; /*< Address offset = 0x220 */
    css600_apbap_hwc_addressblock_0_dar137_reg_t ADDRESSBLOCK_0_DAR137; /*< Address offset = 0x224 */
    css600_apbap_hwc_addressblock_0_dar138_reg_t ADDRESSBLOCK_0_DAR138; /*< Address offset = 0x228 */
    css600_apbap_hwc_addressblock_0_dar139_reg_t ADDRESSBLOCK_0_DAR139; /*< Address offset = 0x22c */
    css600_apbap_hwc_addressblock_0_dar140_reg_t ADDRESSBLOCK_0_DAR140; /*< Address offset = 0x230 */
    css600_apbap_hwc_addressblock_0_dar141_reg_t ADDRESSBLOCK_0_DAR141; /*< Address offset = 0x234 */
    css600_apbap_hwc_addressblock_0_dar142_reg_t ADDRESSBLOCK_0_DAR142; /*< Address offset = 0x238 */
    css600_apbap_hwc_addressblock_0_dar143_reg_t ADDRESSBLOCK_0_DAR143; /*< Address offset = 0x23c */
    css600_apbap_hwc_addressblock_0_dar144_reg_t ADDRESSBLOCK_0_DAR144; /*< Address offset = 0x240 */
    css600_apbap_hwc_addressblock_0_dar145_reg_t ADDRESSBLOCK_0_DAR145; /*< Address offset = 0x244 */
    css600_apbap_hwc_addressblock_0_dar146_reg_t ADDRESSBLOCK_0_DAR146; /*< Address offset = 0x248 */
    css600_apbap_hwc_addressblock_0_dar147_reg_t ADDRESSBLOCK_0_DAR147; /*< Address offset = 0x24c */
    css600_apbap_hwc_addressblock_0_dar148_reg_t ADDRESSBLOCK_0_DAR148; /*< Address offset = 0x250 */
    css600_apbap_hwc_addressblock_0_dar149_reg_t ADDRESSBLOCK_0_DAR149; /*< Address offset = 0x254 */
    css600_apbap_hwc_addressblock_0_dar150_reg_t ADDRESSBLOCK_0_DAR150; /*< Address offset = 0x258 */
    css600_apbap_hwc_addressblock_0_dar151_reg_t ADDRESSBLOCK_0_DAR151; /*< Address offset = 0x25c */
    css600_apbap_hwc_addressblock_0_dar152_reg_t ADDRESSBLOCK_0_DAR152; /*< Address offset = 0x260 */
    css600_apbap_hwc_addressblock_0_dar153_reg_t ADDRESSBLOCK_0_DAR153; /*< Address offset = 0x264 */
    css600_apbap_hwc_addressblock_0_dar154_reg_t ADDRESSBLOCK_0_DAR154; /*< Address offset = 0x268 */
    css600_apbap_hwc_addressblock_0_dar155_reg_t ADDRESSBLOCK_0_DAR155; /*< Address offset = 0x26c */
    css600_apbap_hwc_addressblock_0_dar156_reg_t ADDRESSBLOCK_0_DAR156; /*< Address offset = 0x270 */
    css600_apbap_hwc_addressblock_0_dar157_reg_t ADDRESSBLOCK_0_DAR157; /*< Address offset = 0x274 */
    css600_apbap_hwc_addressblock_0_dar158_reg_t ADDRESSBLOCK_0_DAR158; /*< Address offset = 0x278 */
    css600_apbap_hwc_addressblock_0_dar159_reg_t ADDRESSBLOCK_0_DAR159; /*< Address offset = 0x27c */
    css600_apbap_hwc_addressblock_0_dar160_reg_t ADDRESSBLOCK_0_DAR160; /*< Address offset = 0x280 */
    css600_apbap_hwc_addressblock_0_dar161_reg_t ADDRESSBLOCK_0_DAR161; /*< Address offset = 0x284 */
    css600_apbap_hwc_addressblock_0_dar162_reg_t ADDRESSBLOCK_0_DAR162; /*< Address offset = 0x288 */
    css600_apbap_hwc_addressblock_0_dar163_reg_t ADDRESSBLOCK_0_DAR163; /*< Address offset = 0x28c */
    css600_apbap_hwc_addressblock_0_dar164_reg_t ADDRESSBLOCK_0_DAR164; /*< Address offset = 0x290 */
    css600_apbap_hwc_addressblock_0_dar165_reg_t ADDRESSBLOCK_0_DAR165; /*< Address offset = 0x294 */
    css600_apbap_hwc_addressblock_0_dar166_reg_t ADDRESSBLOCK_0_DAR166; /*< Address offset = 0x298 */
    css600_apbap_hwc_addressblock_0_dar167_reg_t ADDRESSBLOCK_0_DAR167; /*< Address offset = 0x29c */
    css600_apbap_hwc_addressblock_0_dar168_reg_t ADDRESSBLOCK_0_DAR168; /*< Address offset = 0x2a0 */
    css600_apbap_hwc_addressblock_0_dar169_reg_t ADDRESSBLOCK_0_DAR169; /*< Address offset = 0x2a4 */
    css600_apbap_hwc_addressblock_0_dar170_reg_t ADDRESSBLOCK_0_DAR170; /*< Address offset = 0x2a8 */
    css600_apbap_hwc_addressblock_0_dar171_reg_t ADDRESSBLOCK_0_DAR171; /*< Address offset = 0x2ac */
    css600_apbap_hwc_addressblock_0_dar172_reg_t ADDRESSBLOCK_0_DAR172; /*< Address offset = 0x2b0 */
    css600_apbap_hwc_addressblock_0_dar173_reg_t ADDRESSBLOCK_0_DAR173; /*< Address offset = 0x2b4 */
    css600_apbap_hwc_addressblock_0_dar174_reg_t ADDRESSBLOCK_0_DAR174; /*< Address offset = 0x2b8 */
    css600_apbap_hwc_addressblock_0_dar175_reg_t ADDRESSBLOCK_0_DAR175; /*< Address offset = 0x2bc */
    css600_apbap_hwc_addressblock_0_dar176_reg_t ADDRESSBLOCK_0_DAR176; /*< Address offset = 0x2c0 */
    css600_apbap_hwc_addressblock_0_dar177_reg_t ADDRESSBLOCK_0_DAR177; /*< Address offset = 0x2c4 */
    css600_apbap_hwc_addressblock_0_dar178_reg_t ADDRESSBLOCK_0_DAR178; /*< Address offset = 0x2c8 */
    css600_apbap_hwc_addressblock_0_dar179_reg_t ADDRESSBLOCK_0_DAR179; /*< Address offset = 0x2cc */
    css600_apbap_hwc_addressblock_0_dar180_reg_t ADDRESSBLOCK_0_DAR180; /*< Address offset = 0x2d0 */
    css600_apbap_hwc_addressblock_0_dar181_reg_t ADDRESSBLOCK_0_DAR181; /*< Address offset = 0x2d4 */
    css600_apbap_hwc_addressblock_0_dar182_reg_t ADDRESSBLOCK_0_DAR182; /*< Address offset = 0x2d8 */
    css600_apbap_hwc_addressblock_0_dar183_reg_t ADDRESSBLOCK_0_DAR183; /*< Address offset = 0x2dc */
    css600_apbap_hwc_addressblock_0_dar184_reg_t ADDRESSBLOCK_0_DAR184; /*< Address offset = 0x2e0 */
    css600_apbap_hwc_addressblock_0_dar185_reg_t ADDRESSBLOCK_0_DAR185; /*< Address offset = 0x2e4 */
    css600_apbap_hwc_addressblock_0_dar186_reg_t ADDRESSBLOCK_0_DAR186; /*< Address offset = 0x2e8 */
    css600_apbap_hwc_addressblock_0_dar187_reg_t ADDRESSBLOCK_0_DAR187; /*< Address offset = 0x2ec */
    css600_apbap_hwc_addressblock_0_dar188_reg_t ADDRESSBLOCK_0_DAR188; /*< Address offset = 0x2f0 */
    css600_apbap_hwc_addressblock_0_dar189_reg_t ADDRESSBLOCK_0_DAR189; /*< Address offset = 0x2f4 */
    css600_apbap_hwc_addressblock_0_dar190_reg_t ADDRESSBLOCK_0_DAR190; /*< Address offset = 0x2f8 */
    css600_apbap_hwc_addressblock_0_dar191_reg_t ADDRESSBLOCK_0_DAR191; /*< Address offset = 0x2fc */
    css600_apbap_hwc_addressblock_0_dar192_reg_t ADDRESSBLOCK_0_DAR192; /*< Address offset = 0x300 */
    css600_apbap_hwc_addressblock_0_dar193_reg_t ADDRESSBLOCK_0_DAR193; /*< Address offset = 0x304 */
    css600_apbap_hwc_addressblock_0_dar194_reg_t ADDRESSBLOCK_0_DAR194; /*< Address offset = 0x308 */
    css600_apbap_hwc_addressblock_0_dar195_reg_t ADDRESSBLOCK_0_DAR195; /*< Address offset = 0x30c */
    css600_apbap_hwc_addressblock_0_dar196_reg_t ADDRESSBLOCK_0_DAR196; /*< Address offset = 0x310 */
    css600_apbap_hwc_addressblock_0_dar197_reg_t ADDRESSBLOCK_0_DAR197; /*< Address offset = 0x314 */
    css600_apbap_hwc_addressblock_0_dar198_reg_t ADDRESSBLOCK_0_DAR198; /*< Address offset = 0x318 */
    css600_apbap_hwc_addressblock_0_dar199_reg_t ADDRESSBLOCK_0_DAR199; /*< Address offset = 0x31c */
    css600_apbap_hwc_addressblock_0_dar200_reg_t ADDRESSBLOCK_0_DAR200; /*< Address offset = 0x320 */
    css600_apbap_hwc_addressblock_0_dar201_reg_t ADDRESSBLOCK_0_DAR201; /*< Address offset = 0x324 */
    css600_apbap_hwc_addressblock_0_dar202_reg_t ADDRESSBLOCK_0_DAR202; /*< Address offset = 0x328 */
    css600_apbap_hwc_addressblock_0_dar203_reg_t ADDRESSBLOCK_0_DAR203; /*< Address offset = 0x32c */
    css600_apbap_hwc_addressblock_0_dar204_reg_t ADDRESSBLOCK_0_DAR204; /*< Address offset = 0x330 */
    css600_apbap_hwc_addressblock_0_dar205_reg_t ADDRESSBLOCK_0_DAR205; /*< Address offset = 0x334 */
    css600_apbap_hwc_addressblock_0_dar206_reg_t ADDRESSBLOCK_0_DAR206; /*< Address offset = 0x338 */
    css600_apbap_hwc_addressblock_0_dar207_reg_t ADDRESSBLOCK_0_DAR207; /*< Address offset = 0x33c */
    css600_apbap_hwc_addressblock_0_dar208_reg_t ADDRESSBLOCK_0_DAR208; /*< Address offset = 0x340 */
    css600_apbap_hwc_addressblock_0_dar209_reg_t ADDRESSBLOCK_0_DAR209; /*< Address offset = 0x344 */
    css600_apbap_hwc_addressblock_0_dar210_reg_t ADDRESSBLOCK_0_DAR210; /*< Address offset = 0x348 */
    css600_apbap_hwc_addressblock_0_dar211_reg_t ADDRESSBLOCK_0_DAR211; /*< Address offset = 0x34c */
    css600_apbap_hwc_addressblock_0_dar212_reg_t ADDRESSBLOCK_0_DAR212; /*< Address offset = 0x350 */
    css600_apbap_hwc_addressblock_0_dar213_reg_t ADDRESSBLOCK_0_DAR213; /*< Address offset = 0x354 */
    css600_apbap_hwc_addressblock_0_dar214_reg_t ADDRESSBLOCK_0_DAR214; /*< Address offset = 0x358 */
    css600_apbap_hwc_addressblock_0_dar215_reg_t ADDRESSBLOCK_0_DAR215; /*< Address offset = 0x35c */
    css600_apbap_hwc_addressblock_0_dar216_reg_t ADDRESSBLOCK_0_DAR216; /*< Address offset = 0x360 */
    css600_apbap_hwc_addressblock_0_dar217_reg_t ADDRESSBLOCK_0_DAR217; /*< Address offset = 0x364 */
    css600_apbap_hwc_addressblock_0_dar218_reg_t ADDRESSBLOCK_0_DAR218; /*< Address offset = 0x368 */
    css600_apbap_hwc_addressblock_0_dar219_reg_t ADDRESSBLOCK_0_DAR219; /*< Address offset = 0x36c */
    css600_apbap_hwc_addressblock_0_dar220_reg_t ADDRESSBLOCK_0_DAR220; /*< Address offset = 0x370 */
    css600_apbap_hwc_addressblock_0_dar221_reg_t ADDRESSBLOCK_0_DAR221; /*< Address offset = 0x374 */
    css600_apbap_hwc_addressblock_0_dar222_reg_t ADDRESSBLOCK_0_DAR222; /*< Address offset = 0x378 */
    css600_apbap_hwc_addressblock_0_dar223_reg_t ADDRESSBLOCK_0_DAR223; /*< Address offset = 0x37c */
    css600_apbap_hwc_addressblock_0_dar224_reg_t ADDRESSBLOCK_0_DAR224; /*< Address offset = 0x380 */
    css600_apbap_hwc_addressblock_0_dar225_reg_t ADDRESSBLOCK_0_DAR225; /*< Address offset = 0x384 */
    css600_apbap_hwc_addressblock_0_dar226_reg_t ADDRESSBLOCK_0_DAR226; /*< Address offset = 0x388 */
    css600_apbap_hwc_addressblock_0_dar227_reg_t ADDRESSBLOCK_0_DAR227; /*< Address offset = 0x38c */
    css600_apbap_hwc_addressblock_0_dar228_reg_t ADDRESSBLOCK_0_DAR228; /*< Address offset = 0x390 */
    css600_apbap_hwc_addressblock_0_dar229_reg_t ADDRESSBLOCK_0_DAR229; /*< Address offset = 0x394 */
    css600_apbap_hwc_addressblock_0_dar230_reg_t ADDRESSBLOCK_0_DAR230; /*< Address offset = 0x398 */
    css600_apbap_hwc_addressblock_0_dar231_reg_t ADDRESSBLOCK_0_DAR231; /*< Address offset = 0x39c */
    css600_apbap_hwc_addressblock_0_dar232_reg_t ADDRESSBLOCK_0_DAR232; /*< Address offset = 0x3a0 */
    css600_apbap_hwc_addressblock_0_dar233_reg_t ADDRESSBLOCK_0_DAR233; /*< Address offset = 0x3a4 */
    css600_apbap_hwc_addressblock_0_dar234_reg_t ADDRESSBLOCK_0_DAR234; /*< Address offset = 0x3a8 */
    css600_apbap_hwc_addressblock_0_dar235_reg_t ADDRESSBLOCK_0_DAR235; /*< Address offset = 0x3ac */
    css600_apbap_hwc_addressblock_0_dar236_reg_t ADDRESSBLOCK_0_DAR236; /*< Address offset = 0x3b0 */
    css600_apbap_hwc_addressblock_0_dar237_reg_t ADDRESSBLOCK_0_DAR237; /*< Address offset = 0x3b4 */
    css600_apbap_hwc_addressblock_0_dar238_reg_t ADDRESSBLOCK_0_DAR238; /*< Address offset = 0x3b8 */
    css600_apbap_hwc_addressblock_0_dar239_reg_t ADDRESSBLOCK_0_DAR239; /*< Address offset = 0x3bc */
    css600_apbap_hwc_addressblock_0_dar240_reg_t ADDRESSBLOCK_0_DAR240; /*< Address offset = 0x3c0 */
    css600_apbap_hwc_addressblock_0_dar241_reg_t ADDRESSBLOCK_0_DAR241; /*< Address offset = 0x3c4 */
    css600_apbap_hwc_addressblock_0_dar242_reg_t ADDRESSBLOCK_0_DAR242; /*< Address offset = 0x3c8 */
    css600_apbap_hwc_addressblock_0_dar243_reg_t ADDRESSBLOCK_0_DAR243; /*< Address offset = 0x3cc */
    css600_apbap_hwc_addressblock_0_dar244_reg_t ADDRESSBLOCK_0_DAR244; /*< Address offset = 0x3d0 */
    css600_apbap_hwc_addressblock_0_dar245_reg_t ADDRESSBLOCK_0_DAR245; /*< Address offset = 0x3d4 */
    css600_apbap_hwc_addressblock_0_dar246_reg_t ADDRESSBLOCK_0_DAR246; /*< Address offset = 0x3d8 */
    css600_apbap_hwc_addressblock_0_dar247_reg_t ADDRESSBLOCK_0_DAR247; /*< Address offset = 0x3dc */
    css600_apbap_hwc_addressblock_0_dar248_reg_t ADDRESSBLOCK_0_DAR248; /*< Address offset = 0x3e0 */
    css600_apbap_hwc_addressblock_0_dar249_reg_t ADDRESSBLOCK_0_DAR249; /*< Address offset = 0x3e4 */
    css600_apbap_hwc_addressblock_0_dar250_reg_t ADDRESSBLOCK_0_DAR250; /*< Address offset = 0x3e8 */
    css600_apbap_hwc_addressblock_0_dar251_reg_t ADDRESSBLOCK_0_DAR251; /*< Address offset = 0x3ec */
    css600_apbap_hwc_addressblock_0_dar252_reg_t ADDRESSBLOCK_0_DAR252; /*< Address offset = 0x3f0 */
    css600_apbap_hwc_addressblock_0_dar253_reg_t ADDRESSBLOCK_0_DAR253; /*< Address offset = 0x3f4 */
    css600_apbap_hwc_addressblock_0_dar254_reg_t ADDRESSBLOCK_0_DAR254; /*< Address offset = 0x3f8 */
    css600_apbap_hwc_addressblock_0_dar255_reg_t ADDRESSBLOCK_0_DAR255; /*< Address offset = 0x3fc */
    const uint8_t        reservedArea0 [2304]; /*< Address offset = 0x400 */
    css600_apbap_hwc_addressblock_0_csw_reg_t ADDRESSBLOCK_0_CSW; /*< Address offset = 0xd00 */
    css600_apbap_hwc_addressblock_0_tar_reg_t ADDRESSBLOCK_0_TAR; /*< Address offset = 0xd04 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0xd08 */
    css600_apbap_hwc_addressblock_0_drw_reg_t ADDRESSBLOCK_0_DRW; /*< Address offset = 0xd0c */
    css600_apbap_hwc_addressblock_0_bd0_reg_t ADDRESSBLOCK_0_BD0; /*< Address offset = 0xd10 */
    css600_apbap_hwc_addressblock_0_bd1_reg_t ADDRESSBLOCK_0_BD1; /*< Address offset = 0xd14 */
    css600_apbap_hwc_addressblock_0_bd2_reg_t ADDRESSBLOCK_0_BD2; /*< Address offset = 0xd18 */
    css600_apbap_hwc_addressblock_0_bd3_reg_t ADDRESSBLOCK_0_BD3; /*< Address offset = 0xd1c */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0xd20 */
    css600_apbap_hwc_addressblock_0_trr_reg_t ADDRESSBLOCK_0_TRR; /*< Address offset = 0xd24 */
    const uint8_t        reservedArea3 [204]; /*< Address offset = 0xd28 */
    css600_apbap_hwc_addressblock_0_cfg_reg_t ADDRESSBLOCK_0_CFG; /*< Address offset = 0xdf4 */
    css600_apbap_hwc_addressblock_0_base_reg_t ADDRESSBLOCK_0_BASE; /*< Address offset = 0xdf8 */
    css600_apbap_hwc_addressblock_0_idr_reg_t ADDRESSBLOCK_0_IDR; /*< Address offset = 0xdfc */
    const uint8_t        reservedArea4 [252]; /*< Address offset = 0xe00 */
    css600_apbap_hwc_addressblock_0_itstatus_reg_t ADDRESSBLOCK_0_ITSTATUS; /*< Address offset = 0xefc */
    css600_apbap_hwc_addressblock_0_itctrl_reg_t ADDRESSBLOCK_0_ITCTRL; /*< Address offset = 0xf00 */
    const uint8_t        reservedArea5 [156]; /*< Address offset = 0xf04 */
    css600_apbap_hwc_addressblock_0_claimset_reg_t ADDRESSBLOCK_0_CLAIMSET; /*< Address offset = 0xfa0 */
    css600_apbap_hwc_addressblock_0_claimclr_reg_t ADDRESSBLOCK_0_CLAIMCLR; /*< Address offset = 0xfa4 */
    const uint8_t        reservedArea6 [16];  /*< Address offset = 0xfa8 */
    css600_apbap_hwc_addressblock_0_authstatus_reg_t ADDRESSBLOCK_0_AUTHSTATUS; /*< Address offset = 0xfb8 */
    css600_apbap_hwc_addressblock_0_devarch_reg_t ADDRESSBLOCK_0_DEVARCH; /*< Address offset = 0xfbc */
    const uint8_t        reservedArea7 [12];  /*< Address offset = 0xfc0 */
    css600_apbap_hwc_addressblock_0_devtype_reg_t ADDRESSBLOCK_0_DEVTYPE; /*< Address offset = 0xfcc */
    css600_apbap_hwc_addressblock_0_pidr4_reg_t ADDRESSBLOCK_0_PIDR4; /*< Address offset = 0xfd0 */
    css600_apbap_hwc_addressblock_0_pidr5_reg_t ADDRESSBLOCK_0_PIDR5; /*< Address offset = 0xfd4 */
    css600_apbap_hwc_addressblock_0_pidr6_reg_t ADDRESSBLOCK_0_PIDR6; /*< Address offset = 0xfd8 */
    css600_apbap_hwc_addressblock_0_pidr7_reg_t ADDRESSBLOCK_0_PIDR7; /*< Address offset = 0xfdc */
    css600_apbap_hwc_addressblock_0_pidr0_reg_t ADDRESSBLOCK_0_PIDR0; /*< Address offset = 0xfe0 */
    css600_apbap_hwc_addressblock_0_pidr1_reg_t ADDRESSBLOCK_0_PIDR1; /*< Address offset = 0xfe4 */
    css600_apbap_hwc_addressblock_0_pidr2_reg_t ADDRESSBLOCK_0_PIDR2; /*< Address offset = 0xfe8 */
    css600_apbap_hwc_addressblock_0_pidr3_reg_t ADDRESSBLOCK_0_PIDR3; /*< Address offset = 0xfec */
    css600_apbap_hwc_addressblock_0_cidr0_reg_t ADDRESSBLOCK_0_CIDR0; /*< Address offset = 0xff0 */
    css600_apbap_hwc_addressblock_0_cidr1_reg_t ADDRESSBLOCK_0_CIDR1; /*< Address offset = 0xff4 */
    css600_apbap_hwc_addressblock_0_cidr2_reg_t ADDRESSBLOCK_0_CIDR2; /*< Address offset = 0xff8 */
    css600_apbap_hwc_addressblock_0_cidr3_reg_t ADDRESSBLOCK_0_CIDR3; /*< Address offset = 0xffc */
    css600_apbap_hwc_addressblock_1_dar0_reg_t ADDRESSBLOCK_1_DAR0; /*< Address offset = 0x1000 */
    css600_apbap_hwc_addressblock_1_dar1_reg_t ADDRESSBLOCK_1_DAR1; /*< Address offset = 0x1004 */
    css600_apbap_hwc_addressblock_1_dar2_reg_t ADDRESSBLOCK_1_DAR2; /*< Address offset = 0x1008 */
    css600_apbap_hwc_addressblock_1_dar3_reg_t ADDRESSBLOCK_1_DAR3; /*< Address offset = 0x100c */
    css600_apbap_hwc_addressblock_1_dar4_reg_t ADDRESSBLOCK_1_DAR4; /*< Address offset = 0x1010 */
    css600_apbap_hwc_addressblock_1_dar5_reg_t ADDRESSBLOCK_1_DAR5; /*< Address offset = 0x1014 */
    css600_apbap_hwc_addressblock_1_dar6_reg_t ADDRESSBLOCK_1_DAR6; /*< Address offset = 0x1018 */
    css600_apbap_hwc_addressblock_1_dar7_reg_t ADDRESSBLOCK_1_DAR7; /*< Address offset = 0x101c */
    css600_apbap_hwc_addressblock_1_dar8_reg_t ADDRESSBLOCK_1_DAR8; /*< Address offset = 0x1020 */
    css600_apbap_hwc_addressblock_1_dar9_reg_t ADDRESSBLOCK_1_DAR9; /*< Address offset = 0x1024 */
    css600_apbap_hwc_addressblock_1_dar10_reg_t ADDRESSBLOCK_1_DAR10; /*< Address offset = 0x1028 */
    css600_apbap_hwc_addressblock_1_dar11_reg_t ADDRESSBLOCK_1_DAR11; /*< Address offset = 0x102c */
    css600_apbap_hwc_addressblock_1_dar12_reg_t ADDRESSBLOCK_1_DAR12; /*< Address offset = 0x1030 */
    css600_apbap_hwc_addressblock_1_dar13_reg_t ADDRESSBLOCK_1_DAR13; /*< Address offset = 0x1034 */
    css600_apbap_hwc_addressblock_1_dar14_reg_t ADDRESSBLOCK_1_DAR14; /*< Address offset = 0x1038 */
    css600_apbap_hwc_addressblock_1_dar15_reg_t ADDRESSBLOCK_1_DAR15; /*< Address offset = 0x103c */
    css600_apbap_hwc_addressblock_1_dar16_reg_t ADDRESSBLOCK_1_DAR16; /*< Address offset = 0x1040 */
    css600_apbap_hwc_addressblock_1_dar17_reg_t ADDRESSBLOCK_1_DAR17; /*< Address offset = 0x1044 */
    css600_apbap_hwc_addressblock_1_dar18_reg_t ADDRESSBLOCK_1_DAR18; /*< Address offset = 0x1048 */
    css600_apbap_hwc_addressblock_1_dar19_reg_t ADDRESSBLOCK_1_DAR19; /*< Address offset = 0x104c */
    css600_apbap_hwc_addressblock_1_dar20_reg_t ADDRESSBLOCK_1_DAR20; /*< Address offset = 0x1050 */
    css600_apbap_hwc_addressblock_1_dar21_reg_t ADDRESSBLOCK_1_DAR21; /*< Address offset = 0x1054 */
    css600_apbap_hwc_addressblock_1_dar22_reg_t ADDRESSBLOCK_1_DAR22; /*< Address offset = 0x1058 */
    css600_apbap_hwc_addressblock_1_dar23_reg_t ADDRESSBLOCK_1_DAR23; /*< Address offset = 0x105c */
    css600_apbap_hwc_addressblock_1_dar24_reg_t ADDRESSBLOCK_1_DAR24; /*< Address offset = 0x1060 */
    css600_apbap_hwc_addressblock_1_dar25_reg_t ADDRESSBLOCK_1_DAR25; /*< Address offset = 0x1064 */
    css600_apbap_hwc_addressblock_1_dar26_reg_t ADDRESSBLOCK_1_DAR26; /*< Address offset = 0x1068 */
    css600_apbap_hwc_addressblock_1_dar27_reg_t ADDRESSBLOCK_1_DAR27; /*< Address offset = 0x106c */
    css600_apbap_hwc_addressblock_1_dar28_reg_t ADDRESSBLOCK_1_DAR28; /*< Address offset = 0x1070 */
    css600_apbap_hwc_addressblock_1_dar29_reg_t ADDRESSBLOCK_1_DAR29; /*< Address offset = 0x1074 */
    css600_apbap_hwc_addressblock_1_dar30_reg_t ADDRESSBLOCK_1_DAR30; /*< Address offset = 0x1078 */
    css600_apbap_hwc_addressblock_1_dar31_reg_t ADDRESSBLOCK_1_DAR31; /*< Address offset = 0x107c */
    css600_apbap_hwc_addressblock_1_dar32_reg_t ADDRESSBLOCK_1_DAR32; /*< Address offset = 0x1080 */
    css600_apbap_hwc_addressblock_1_dar33_reg_t ADDRESSBLOCK_1_DAR33; /*< Address offset = 0x1084 */
    css600_apbap_hwc_addressblock_1_dar34_reg_t ADDRESSBLOCK_1_DAR34; /*< Address offset = 0x1088 */
    css600_apbap_hwc_addressblock_1_dar35_reg_t ADDRESSBLOCK_1_DAR35; /*< Address offset = 0x108c */
    css600_apbap_hwc_addressblock_1_dar36_reg_t ADDRESSBLOCK_1_DAR36; /*< Address offset = 0x1090 */
    css600_apbap_hwc_addressblock_1_dar37_reg_t ADDRESSBLOCK_1_DAR37; /*< Address offset = 0x1094 */
    css600_apbap_hwc_addressblock_1_dar38_reg_t ADDRESSBLOCK_1_DAR38; /*< Address offset = 0x1098 */
    css600_apbap_hwc_addressblock_1_dar39_reg_t ADDRESSBLOCK_1_DAR39; /*< Address offset = 0x109c */
    css600_apbap_hwc_addressblock_1_dar40_reg_t ADDRESSBLOCK_1_DAR40; /*< Address offset = 0x10a0 */
    css600_apbap_hwc_addressblock_1_dar41_reg_t ADDRESSBLOCK_1_DAR41; /*< Address offset = 0x10a4 */
    css600_apbap_hwc_addressblock_1_dar42_reg_t ADDRESSBLOCK_1_DAR42; /*< Address offset = 0x10a8 */
    css600_apbap_hwc_addressblock_1_dar43_reg_t ADDRESSBLOCK_1_DAR43; /*< Address offset = 0x10ac */
    css600_apbap_hwc_addressblock_1_dar44_reg_t ADDRESSBLOCK_1_DAR44; /*< Address offset = 0x10b0 */
    css600_apbap_hwc_addressblock_1_dar45_reg_t ADDRESSBLOCK_1_DAR45; /*< Address offset = 0x10b4 */
    css600_apbap_hwc_addressblock_1_dar46_reg_t ADDRESSBLOCK_1_DAR46; /*< Address offset = 0x10b8 */
    css600_apbap_hwc_addressblock_1_dar47_reg_t ADDRESSBLOCK_1_DAR47; /*< Address offset = 0x10bc */
    css600_apbap_hwc_addressblock_1_dar48_reg_t ADDRESSBLOCK_1_DAR48; /*< Address offset = 0x10c0 */
    css600_apbap_hwc_addressblock_1_dar49_reg_t ADDRESSBLOCK_1_DAR49; /*< Address offset = 0x10c4 */
    css600_apbap_hwc_addressblock_1_dar50_reg_t ADDRESSBLOCK_1_DAR50; /*< Address offset = 0x10c8 */
    css600_apbap_hwc_addressblock_1_dar51_reg_t ADDRESSBLOCK_1_DAR51; /*< Address offset = 0x10cc */
    css600_apbap_hwc_addressblock_1_dar52_reg_t ADDRESSBLOCK_1_DAR52; /*< Address offset = 0x10d0 */
    css600_apbap_hwc_addressblock_1_dar53_reg_t ADDRESSBLOCK_1_DAR53; /*< Address offset = 0x10d4 */
    css600_apbap_hwc_addressblock_1_dar54_reg_t ADDRESSBLOCK_1_DAR54; /*< Address offset = 0x10d8 */
    css600_apbap_hwc_addressblock_1_dar55_reg_t ADDRESSBLOCK_1_DAR55; /*< Address offset = 0x10dc */
    css600_apbap_hwc_addressblock_1_dar56_reg_t ADDRESSBLOCK_1_DAR56; /*< Address offset = 0x10e0 */
    css600_apbap_hwc_addressblock_1_dar57_reg_t ADDRESSBLOCK_1_DAR57; /*< Address offset = 0x10e4 */
    css600_apbap_hwc_addressblock_1_dar58_reg_t ADDRESSBLOCK_1_DAR58; /*< Address offset = 0x10e8 */
    css600_apbap_hwc_addressblock_1_dar59_reg_t ADDRESSBLOCK_1_DAR59; /*< Address offset = 0x10ec */
    css600_apbap_hwc_addressblock_1_dar60_reg_t ADDRESSBLOCK_1_DAR60; /*< Address offset = 0x10f0 */
    css600_apbap_hwc_addressblock_1_dar61_reg_t ADDRESSBLOCK_1_DAR61; /*< Address offset = 0x10f4 */
    css600_apbap_hwc_addressblock_1_dar62_reg_t ADDRESSBLOCK_1_DAR62; /*< Address offset = 0x10f8 */
    css600_apbap_hwc_addressblock_1_dar63_reg_t ADDRESSBLOCK_1_DAR63; /*< Address offset = 0x10fc */
    css600_apbap_hwc_addressblock_1_dar64_reg_t ADDRESSBLOCK_1_DAR64; /*< Address offset = 0x1100 */
    css600_apbap_hwc_addressblock_1_dar65_reg_t ADDRESSBLOCK_1_DAR65; /*< Address offset = 0x1104 */
    css600_apbap_hwc_addressblock_1_dar66_reg_t ADDRESSBLOCK_1_DAR66; /*< Address offset = 0x1108 */
    css600_apbap_hwc_addressblock_1_dar67_reg_t ADDRESSBLOCK_1_DAR67; /*< Address offset = 0x110c */
    css600_apbap_hwc_addressblock_1_dar68_reg_t ADDRESSBLOCK_1_DAR68; /*< Address offset = 0x1110 */
    css600_apbap_hwc_addressblock_1_dar69_reg_t ADDRESSBLOCK_1_DAR69; /*< Address offset = 0x1114 */
    css600_apbap_hwc_addressblock_1_dar70_reg_t ADDRESSBLOCK_1_DAR70; /*< Address offset = 0x1118 */
    css600_apbap_hwc_addressblock_1_dar71_reg_t ADDRESSBLOCK_1_DAR71; /*< Address offset = 0x111c */
    css600_apbap_hwc_addressblock_1_dar72_reg_t ADDRESSBLOCK_1_DAR72; /*< Address offset = 0x1120 */
    css600_apbap_hwc_addressblock_1_dar73_reg_t ADDRESSBLOCK_1_DAR73; /*< Address offset = 0x1124 */
    css600_apbap_hwc_addressblock_1_dar74_reg_t ADDRESSBLOCK_1_DAR74; /*< Address offset = 0x1128 */
    css600_apbap_hwc_addressblock_1_dar75_reg_t ADDRESSBLOCK_1_DAR75; /*< Address offset = 0x112c */
    css600_apbap_hwc_addressblock_1_dar76_reg_t ADDRESSBLOCK_1_DAR76; /*< Address offset = 0x1130 */
    css600_apbap_hwc_addressblock_1_dar77_reg_t ADDRESSBLOCK_1_DAR77; /*< Address offset = 0x1134 */
    css600_apbap_hwc_addressblock_1_dar78_reg_t ADDRESSBLOCK_1_DAR78; /*< Address offset = 0x1138 */
    css600_apbap_hwc_addressblock_1_dar79_reg_t ADDRESSBLOCK_1_DAR79; /*< Address offset = 0x113c */
    css600_apbap_hwc_addressblock_1_dar80_reg_t ADDRESSBLOCK_1_DAR80; /*< Address offset = 0x1140 */
    css600_apbap_hwc_addressblock_1_dar81_reg_t ADDRESSBLOCK_1_DAR81; /*< Address offset = 0x1144 */
    css600_apbap_hwc_addressblock_1_dar82_reg_t ADDRESSBLOCK_1_DAR82; /*< Address offset = 0x1148 */
    css600_apbap_hwc_addressblock_1_dar83_reg_t ADDRESSBLOCK_1_DAR83; /*< Address offset = 0x114c */
    css600_apbap_hwc_addressblock_1_dar84_reg_t ADDRESSBLOCK_1_DAR84; /*< Address offset = 0x1150 */
    css600_apbap_hwc_addressblock_1_dar85_reg_t ADDRESSBLOCK_1_DAR85; /*< Address offset = 0x1154 */
    css600_apbap_hwc_addressblock_1_dar86_reg_t ADDRESSBLOCK_1_DAR86; /*< Address offset = 0x1158 */
    css600_apbap_hwc_addressblock_1_dar87_reg_t ADDRESSBLOCK_1_DAR87; /*< Address offset = 0x115c */
    css600_apbap_hwc_addressblock_1_dar88_reg_t ADDRESSBLOCK_1_DAR88; /*< Address offset = 0x1160 */
    css600_apbap_hwc_addressblock_1_dar89_reg_t ADDRESSBLOCK_1_DAR89; /*< Address offset = 0x1164 */
    css600_apbap_hwc_addressblock_1_dar90_reg_t ADDRESSBLOCK_1_DAR90; /*< Address offset = 0x1168 */
    css600_apbap_hwc_addressblock_1_dar91_reg_t ADDRESSBLOCK_1_DAR91; /*< Address offset = 0x116c */
    css600_apbap_hwc_addressblock_1_dar92_reg_t ADDRESSBLOCK_1_DAR92; /*< Address offset = 0x1170 */
    css600_apbap_hwc_addressblock_1_dar93_reg_t ADDRESSBLOCK_1_DAR93; /*< Address offset = 0x1174 */
    css600_apbap_hwc_addressblock_1_dar94_reg_t ADDRESSBLOCK_1_DAR94; /*< Address offset = 0x1178 */
    css600_apbap_hwc_addressblock_1_dar95_reg_t ADDRESSBLOCK_1_DAR95; /*< Address offset = 0x117c */
    css600_apbap_hwc_addressblock_1_dar96_reg_t ADDRESSBLOCK_1_DAR96; /*< Address offset = 0x1180 */
    css600_apbap_hwc_addressblock_1_dar97_reg_t ADDRESSBLOCK_1_DAR97; /*< Address offset = 0x1184 */
    css600_apbap_hwc_addressblock_1_dar98_reg_t ADDRESSBLOCK_1_DAR98; /*< Address offset = 0x1188 */
    css600_apbap_hwc_addressblock_1_dar99_reg_t ADDRESSBLOCK_1_DAR99; /*< Address offset = 0x118c */
    css600_apbap_hwc_addressblock_1_dar100_reg_t ADDRESSBLOCK_1_DAR100; /*< Address offset = 0x1190 */
    css600_apbap_hwc_addressblock_1_dar101_reg_t ADDRESSBLOCK_1_DAR101; /*< Address offset = 0x1194 */
    css600_apbap_hwc_addressblock_1_dar102_reg_t ADDRESSBLOCK_1_DAR102; /*< Address offset = 0x1198 */
    css600_apbap_hwc_addressblock_1_dar103_reg_t ADDRESSBLOCK_1_DAR103; /*< Address offset = 0x119c */
    css600_apbap_hwc_addressblock_1_dar104_reg_t ADDRESSBLOCK_1_DAR104; /*< Address offset = 0x11a0 */
    css600_apbap_hwc_addressblock_1_dar105_reg_t ADDRESSBLOCK_1_DAR105; /*< Address offset = 0x11a4 */
    css600_apbap_hwc_addressblock_1_dar106_reg_t ADDRESSBLOCK_1_DAR106; /*< Address offset = 0x11a8 */
    css600_apbap_hwc_addressblock_1_dar107_reg_t ADDRESSBLOCK_1_DAR107; /*< Address offset = 0x11ac */
    css600_apbap_hwc_addressblock_1_dar108_reg_t ADDRESSBLOCK_1_DAR108; /*< Address offset = 0x11b0 */
    css600_apbap_hwc_addressblock_1_dar109_reg_t ADDRESSBLOCK_1_DAR109; /*< Address offset = 0x11b4 */
    css600_apbap_hwc_addressblock_1_dar110_reg_t ADDRESSBLOCK_1_DAR110; /*< Address offset = 0x11b8 */
    css600_apbap_hwc_addressblock_1_dar111_reg_t ADDRESSBLOCK_1_DAR111; /*< Address offset = 0x11bc */
    css600_apbap_hwc_addressblock_1_dar112_reg_t ADDRESSBLOCK_1_DAR112; /*< Address offset = 0x11c0 */
    css600_apbap_hwc_addressblock_1_dar113_reg_t ADDRESSBLOCK_1_DAR113; /*< Address offset = 0x11c4 */
    css600_apbap_hwc_addressblock_1_dar114_reg_t ADDRESSBLOCK_1_DAR114; /*< Address offset = 0x11c8 */
    css600_apbap_hwc_addressblock_1_dar115_reg_t ADDRESSBLOCK_1_DAR115; /*< Address offset = 0x11cc */
    css600_apbap_hwc_addressblock_1_dar116_reg_t ADDRESSBLOCK_1_DAR116; /*< Address offset = 0x11d0 */
    css600_apbap_hwc_addressblock_1_dar117_reg_t ADDRESSBLOCK_1_DAR117; /*< Address offset = 0x11d4 */
    css600_apbap_hwc_addressblock_1_dar118_reg_t ADDRESSBLOCK_1_DAR118; /*< Address offset = 0x11d8 */
    css600_apbap_hwc_addressblock_1_dar119_reg_t ADDRESSBLOCK_1_DAR119; /*< Address offset = 0x11dc */
    css600_apbap_hwc_addressblock_1_dar120_reg_t ADDRESSBLOCK_1_DAR120; /*< Address offset = 0x11e0 */
    css600_apbap_hwc_addressblock_1_dar121_reg_t ADDRESSBLOCK_1_DAR121; /*< Address offset = 0x11e4 */
    css600_apbap_hwc_addressblock_1_dar122_reg_t ADDRESSBLOCK_1_DAR122; /*< Address offset = 0x11e8 */
    css600_apbap_hwc_addressblock_1_dar123_reg_t ADDRESSBLOCK_1_DAR123; /*< Address offset = 0x11ec */
    css600_apbap_hwc_addressblock_1_dar124_reg_t ADDRESSBLOCK_1_DAR124; /*< Address offset = 0x11f0 */
    css600_apbap_hwc_addressblock_1_dar125_reg_t ADDRESSBLOCK_1_DAR125; /*< Address offset = 0x11f4 */
    css600_apbap_hwc_addressblock_1_dar126_reg_t ADDRESSBLOCK_1_DAR126; /*< Address offset = 0x11f8 */
    css600_apbap_hwc_addressblock_1_dar127_reg_t ADDRESSBLOCK_1_DAR127; /*< Address offset = 0x11fc */
    css600_apbap_hwc_addressblock_1_dar128_reg_t ADDRESSBLOCK_1_DAR128; /*< Address offset = 0x1200 */
    css600_apbap_hwc_addressblock_1_dar129_reg_t ADDRESSBLOCK_1_DAR129; /*< Address offset = 0x1204 */
    css600_apbap_hwc_addressblock_1_dar130_reg_t ADDRESSBLOCK_1_DAR130; /*< Address offset = 0x1208 */
    css600_apbap_hwc_addressblock_1_dar131_reg_t ADDRESSBLOCK_1_DAR131; /*< Address offset = 0x120c */
    css600_apbap_hwc_addressblock_1_dar132_reg_t ADDRESSBLOCK_1_DAR132; /*< Address offset = 0x1210 */
    css600_apbap_hwc_addressblock_1_dar133_reg_t ADDRESSBLOCK_1_DAR133; /*< Address offset = 0x1214 */
    css600_apbap_hwc_addressblock_1_dar134_reg_t ADDRESSBLOCK_1_DAR134; /*< Address offset = 0x1218 */
    css600_apbap_hwc_addressblock_1_dar135_reg_t ADDRESSBLOCK_1_DAR135; /*< Address offset = 0x121c */
    css600_apbap_hwc_addressblock_1_dar136_reg_t ADDRESSBLOCK_1_DAR136; /*< Address offset = 0x1220 */
    css600_apbap_hwc_addressblock_1_dar137_reg_t ADDRESSBLOCK_1_DAR137; /*< Address offset = 0x1224 */
    css600_apbap_hwc_addressblock_1_dar138_reg_t ADDRESSBLOCK_1_DAR138; /*< Address offset = 0x1228 */
    css600_apbap_hwc_addressblock_1_dar139_reg_t ADDRESSBLOCK_1_DAR139; /*< Address offset = 0x122c */
    css600_apbap_hwc_addressblock_1_dar140_reg_t ADDRESSBLOCK_1_DAR140; /*< Address offset = 0x1230 */
    css600_apbap_hwc_addressblock_1_dar141_reg_t ADDRESSBLOCK_1_DAR141; /*< Address offset = 0x1234 */
    css600_apbap_hwc_addressblock_1_dar142_reg_t ADDRESSBLOCK_1_DAR142; /*< Address offset = 0x1238 */
    css600_apbap_hwc_addressblock_1_dar143_reg_t ADDRESSBLOCK_1_DAR143; /*< Address offset = 0x123c */
    css600_apbap_hwc_addressblock_1_dar144_reg_t ADDRESSBLOCK_1_DAR144; /*< Address offset = 0x1240 */
    css600_apbap_hwc_addressblock_1_dar145_reg_t ADDRESSBLOCK_1_DAR145; /*< Address offset = 0x1244 */
    css600_apbap_hwc_addressblock_1_dar146_reg_t ADDRESSBLOCK_1_DAR146; /*< Address offset = 0x1248 */
    css600_apbap_hwc_addressblock_1_dar147_reg_t ADDRESSBLOCK_1_DAR147; /*< Address offset = 0x124c */
    css600_apbap_hwc_addressblock_1_dar148_reg_t ADDRESSBLOCK_1_DAR148; /*< Address offset = 0x1250 */
    css600_apbap_hwc_addressblock_1_dar149_reg_t ADDRESSBLOCK_1_DAR149; /*< Address offset = 0x1254 */
    css600_apbap_hwc_addressblock_1_dar150_reg_t ADDRESSBLOCK_1_DAR150; /*< Address offset = 0x1258 */
    css600_apbap_hwc_addressblock_1_dar151_reg_t ADDRESSBLOCK_1_DAR151; /*< Address offset = 0x125c */
    css600_apbap_hwc_addressblock_1_dar152_reg_t ADDRESSBLOCK_1_DAR152; /*< Address offset = 0x1260 */
    css600_apbap_hwc_addressblock_1_dar153_reg_t ADDRESSBLOCK_1_DAR153; /*< Address offset = 0x1264 */
    css600_apbap_hwc_addressblock_1_dar154_reg_t ADDRESSBLOCK_1_DAR154; /*< Address offset = 0x1268 */
    css600_apbap_hwc_addressblock_1_dar155_reg_t ADDRESSBLOCK_1_DAR155; /*< Address offset = 0x126c */
    css600_apbap_hwc_addressblock_1_dar156_reg_t ADDRESSBLOCK_1_DAR156; /*< Address offset = 0x1270 */
    css600_apbap_hwc_addressblock_1_dar157_reg_t ADDRESSBLOCK_1_DAR157; /*< Address offset = 0x1274 */
    css600_apbap_hwc_addressblock_1_dar158_reg_t ADDRESSBLOCK_1_DAR158; /*< Address offset = 0x1278 */
    css600_apbap_hwc_addressblock_1_dar159_reg_t ADDRESSBLOCK_1_DAR159; /*< Address offset = 0x127c */
    css600_apbap_hwc_addressblock_1_dar160_reg_t ADDRESSBLOCK_1_DAR160; /*< Address offset = 0x1280 */
    css600_apbap_hwc_addressblock_1_dar161_reg_t ADDRESSBLOCK_1_DAR161; /*< Address offset = 0x1284 */
    css600_apbap_hwc_addressblock_1_dar162_reg_t ADDRESSBLOCK_1_DAR162; /*< Address offset = 0x1288 */
    css600_apbap_hwc_addressblock_1_dar163_reg_t ADDRESSBLOCK_1_DAR163; /*< Address offset = 0x128c */
    css600_apbap_hwc_addressblock_1_dar164_reg_t ADDRESSBLOCK_1_DAR164; /*< Address offset = 0x1290 */
    css600_apbap_hwc_addressblock_1_dar165_reg_t ADDRESSBLOCK_1_DAR165; /*< Address offset = 0x1294 */
    css600_apbap_hwc_addressblock_1_dar166_reg_t ADDRESSBLOCK_1_DAR166; /*< Address offset = 0x1298 */
    css600_apbap_hwc_addressblock_1_dar167_reg_t ADDRESSBLOCK_1_DAR167; /*< Address offset = 0x129c */
    css600_apbap_hwc_addressblock_1_dar168_reg_t ADDRESSBLOCK_1_DAR168; /*< Address offset = 0x12a0 */
    css600_apbap_hwc_addressblock_1_dar169_reg_t ADDRESSBLOCK_1_DAR169; /*< Address offset = 0x12a4 */
    css600_apbap_hwc_addressblock_1_dar170_reg_t ADDRESSBLOCK_1_DAR170; /*< Address offset = 0x12a8 */
    css600_apbap_hwc_addressblock_1_dar171_reg_t ADDRESSBLOCK_1_DAR171; /*< Address offset = 0x12ac */
    css600_apbap_hwc_addressblock_1_dar172_reg_t ADDRESSBLOCK_1_DAR172; /*< Address offset = 0x12b0 */
    css600_apbap_hwc_addressblock_1_dar173_reg_t ADDRESSBLOCK_1_DAR173; /*< Address offset = 0x12b4 */
    css600_apbap_hwc_addressblock_1_dar174_reg_t ADDRESSBLOCK_1_DAR174; /*< Address offset = 0x12b8 */
    css600_apbap_hwc_addressblock_1_dar175_reg_t ADDRESSBLOCK_1_DAR175; /*< Address offset = 0x12bc */
    css600_apbap_hwc_addressblock_1_dar176_reg_t ADDRESSBLOCK_1_DAR176; /*< Address offset = 0x12c0 */
    css600_apbap_hwc_addressblock_1_dar177_reg_t ADDRESSBLOCK_1_DAR177; /*< Address offset = 0x12c4 */
    css600_apbap_hwc_addressblock_1_dar178_reg_t ADDRESSBLOCK_1_DAR178; /*< Address offset = 0x12c8 */
    css600_apbap_hwc_addressblock_1_dar179_reg_t ADDRESSBLOCK_1_DAR179; /*< Address offset = 0x12cc */
    css600_apbap_hwc_addressblock_1_dar180_reg_t ADDRESSBLOCK_1_DAR180; /*< Address offset = 0x12d0 */
    css600_apbap_hwc_addressblock_1_dar181_reg_t ADDRESSBLOCK_1_DAR181; /*< Address offset = 0x12d4 */
    css600_apbap_hwc_addressblock_1_dar182_reg_t ADDRESSBLOCK_1_DAR182; /*< Address offset = 0x12d8 */
    css600_apbap_hwc_addressblock_1_dar183_reg_t ADDRESSBLOCK_1_DAR183; /*< Address offset = 0x12dc */
    css600_apbap_hwc_addressblock_1_dar184_reg_t ADDRESSBLOCK_1_DAR184; /*< Address offset = 0x12e0 */
    css600_apbap_hwc_addressblock_1_dar185_reg_t ADDRESSBLOCK_1_DAR185; /*< Address offset = 0x12e4 */
    css600_apbap_hwc_addressblock_1_dar186_reg_t ADDRESSBLOCK_1_DAR186; /*< Address offset = 0x12e8 */
    css600_apbap_hwc_addressblock_1_dar187_reg_t ADDRESSBLOCK_1_DAR187; /*< Address offset = 0x12ec */
    css600_apbap_hwc_addressblock_1_dar188_reg_t ADDRESSBLOCK_1_DAR188; /*< Address offset = 0x12f0 */
    css600_apbap_hwc_addressblock_1_dar189_reg_t ADDRESSBLOCK_1_DAR189; /*< Address offset = 0x12f4 */
    css600_apbap_hwc_addressblock_1_dar190_reg_t ADDRESSBLOCK_1_DAR190; /*< Address offset = 0x12f8 */
    css600_apbap_hwc_addressblock_1_dar191_reg_t ADDRESSBLOCK_1_DAR191; /*< Address offset = 0x12fc */
    css600_apbap_hwc_addressblock_1_dar192_reg_t ADDRESSBLOCK_1_DAR192; /*< Address offset = 0x1300 */
    css600_apbap_hwc_addressblock_1_dar193_reg_t ADDRESSBLOCK_1_DAR193; /*< Address offset = 0x1304 */
    css600_apbap_hwc_addressblock_1_dar194_reg_t ADDRESSBLOCK_1_DAR194; /*< Address offset = 0x1308 */
    css600_apbap_hwc_addressblock_1_dar195_reg_t ADDRESSBLOCK_1_DAR195; /*< Address offset = 0x130c */
    css600_apbap_hwc_addressblock_1_dar196_reg_t ADDRESSBLOCK_1_DAR196; /*< Address offset = 0x1310 */
    css600_apbap_hwc_addressblock_1_dar197_reg_t ADDRESSBLOCK_1_DAR197; /*< Address offset = 0x1314 */
    css600_apbap_hwc_addressblock_1_dar198_reg_t ADDRESSBLOCK_1_DAR198; /*< Address offset = 0x1318 */
    css600_apbap_hwc_addressblock_1_dar199_reg_t ADDRESSBLOCK_1_DAR199; /*< Address offset = 0x131c */
    css600_apbap_hwc_addressblock_1_dar200_reg_t ADDRESSBLOCK_1_DAR200; /*< Address offset = 0x1320 */
    css600_apbap_hwc_addressblock_1_dar201_reg_t ADDRESSBLOCK_1_DAR201; /*< Address offset = 0x1324 */
    css600_apbap_hwc_addressblock_1_dar202_reg_t ADDRESSBLOCK_1_DAR202; /*< Address offset = 0x1328 */
    css600_apbap_hwc_addressblock_1_dar203_reg_t ADDRESSBLOCK_1_DAR203; /*< Address offset = 0x132c */
    css600_apbap_hwc_addressblock_1_dar204_reg_t ADDRESSBLOCK_1_DAR204; /*< Address offset = 0x1330 */
    css600_apbap_hwc_addressblock_1_dar205_reg_t ADDRESSBLOCK_1_DAR205; /*< Address offset = 0x1334 */
    css600_apbap_hwc_addressblock_1_dar206_reg_t ADDRESSBLOCK_1_DAR206; /*< Address offset = 0x1338 */
    css600_apbap_hwc_addressblock_1_dar207_reg_t ADDRESSBLOCK_1_DAR207; /*< Address offset = 0x133c */
    css600_apbap_hwc_addressblock_1_dar208_reg_t ADDRESSBLOCK_1_DAR208; /*< Address offset = 0x1340 */
    css600_apbap_hwc_addressblock_1_dar209_reg_t ADDRESSBLOCK_1_DAR209; /*< Address offset = 0x1344 */
    css600_apbap_hwc_addressblock_1_dar210_reg_t ADDRESSBLOCK_1_DAR210; /*< Address offset = 0x1348 */
    css600_apbap_hwc_addressblock_1_dar211_reg_t ADDRESSBLOCK_1_DAR211; /*< Address offset = 0x134c */
    css600_apbap_hwc_addressblock_1_dar212_reg_t ADDRESSBLOCK_1_DAR212; /*< Address offset = 0x1350 */
    css600_apbap_hwc_addressblock_1_dar213_reg_t ADDRESSBLOCK_1_DAR213; /*< Address offset = 0x1354 */
    css600_apbap_hwc_addressblock_1_dar214_reg_t ADDRESSBLOCK_1_DAR214; /*< Address offset = 0x1358 */
    css600_apbap_hwc_addressblock_1_dar215_reg_t ADDRESSBLOCK_1_DAR215; /*< Address offset = 0x135c */
    css600_apbap_hwc_addressblock_1_dar216_reg_t ADDRESSBLOCK_1_DAR216; /*< Address offset = 0x1360 */
    css600_apbap_hwc_addressblock_1_dar217_reg_t ADDRESSBLOCK_1_DAR217; /*< Address offset = 0x1364 */
    css600_apbap_hwc_addressblock_1_dar218_reg_t ADDRESSBLOCK_1_DAR218; /*< Address offset = 0x1368 */
    css600_apbap_hwc_addressblock_1_dar219_reg_t ADDRESSBLOCK_1_DAR219; /*< Address offset = 0x136c */
    css600_apbap_hwc_addressblock_1_dar220_reg_t ADDRESSBLOCK_1_DAR220; /*< Address offset = 0x1370 */
    css600_apbap_hwc_addressblock_1_dar221_reg_t ADDRESSBLOCK_1_DAR221; /*< Address offset = 0x1374 */
    css600_apbap_hwc_addressblock_1_dar222_reg_t ADDRESSBLOCK_1_DAR222; /*< Address offset = 0x1378 */
    css600_apbap_hwc_addressblock_1_dar223_reg_t ADDRESSBLOCK_1_DAR223; /*< Address offset = 0x137c */
    css600_apbap_hwc_addressblock_1_dar224_reg_t ADDRESSBLOCK_1_DAR224; /*< Address offset = 0x1380 */
    css600_apbap_hwc_addressblock_1_dar225_reg_t ADDRESSBLOCK_1_DAR225; /*< Address offset = 0x1384 */
    css600_apbap_hwc_addressblock_1_dar226_reg_t ADDRESSBLOCK_1_DAR226; /*< Address offset = 0x1388 */
    css600_apbap_hwc_addressblock_1_dar227_reg_t ADDRESSBLOCK_1_DAR227; /*< Address offset = 0x138c */
    css600_apbap_hwc_addressblock_1_dar228_reg_t ADDRESSBLOCK_1_DAR228; /*< Address offset = 0x1390 */
    css600_apbap_hwc_addressblock_1_dar229_reg_t ADDRESSBLOCK_1_DAR229; /*< Address offset = 0x1394 */
    css600_apbap_hwc_addressblock_1_dar230_reg_t ADDRESSBLOCK_1_DAR230; /*< Address offset = 0x1398 */
    css600_apbap_hwc_addressblock_1_dar231_reg_t ADDRESSBLOCK_1_DAR231; /*< Address offset = 0x139c */
    css600_apbap_hwc_addressblock_1_dar232_reg_t ADDRESSBLOCK_1_DAR232; /*< Address offset = 0x13a0 */
    css600_apbap_hwc_addressblock_1_dar233_reg_t ADDRESSBLOCK_1_DAR233; /*< Address offset = 0x13a4 */
    css600_apbap_hwc_addressblock_1_dar234_reg_t ADDRESSBLOCK_1_DAR234; /*< Address offset = 0x13a8 */
    css600_apbap_hwc_addressblock_1_dar235_reg_t ADDRESSBLOCK_1_DAR235; /*< Address offset = 0x13ac */
    css600_apbap_hwc_addressblock_1_dar236_reg_t ADDRESSBLOCK_1_DAR236; /*< Address offset = 0x13b0 */
    css600_apbap_hwc_addressblock_1_dar237_reg_t ADDRESSBLOCK_1_DAR237; /*< Address offset = 0x13b4 */
    css600_apbap_hwc_addressblock_1_dar238_reg_t ADDRESSBLOCK_1_DAR238; /*< Address offset = 0x13b8 */
    css600_apbap_hwc_addressblock_1_dar239_reg_t ADDRESSBLOCK_1_DAR239; /*< Address offset = 0x13bc */
    css600_apbap_hwc_addressblock_1_dar240_reg_t ADDRESSBLOCK_1_DAR240; /*< Address offset = 0x13c0 */
    css600_apbap_hwc_addressblock_1_dar241_reg_t ADDRESSBLOCK_1_DAR241; /*< Address offset = 0x13c4 */
    css600_apbap_hwc_addressblock_1_dar242_reg_t ADDRESSBLOCK_1_DAR242; /*< Address offset = 0x13c8 */
    css600_apbap_hwc_addressblock_1_dar243_reg_t ADDRESSBLOCK_1_DAR243; /*< Address offset = 0x13cc */
    css600_apbap_hwc_addressblock_1_dar244_reg_t ADDRESSBLOCK_1_DAR244; /*< Address offset = 0x13d0 */
    css600_apbap_hwc_addressblock_1_dar245_reg_t ADDRESSBLOCK_1_DAR245; /*< Address offset = 0x13d4 */
    css600_apbap_hwc_addressblock_1_dar246_reg_t ADDRESSBLOCK_1_DAR246; /*< Address offset = 0x13d8 */
    css600_apbap_hwc_addressblock_1_dar247_reg_t ADDRESSBLOCK_1_DAR247; /*< Address offset = 0x13dc */
    css600_apbap_hwc_addressblock_1_dar248_reg_t ADDRESSBLOCK_1_DAR248; /*< Address offset = 0x13e0 */
    css600_apbap_hwc_addressblock_1_dar249_reg_t ADDRESSBLOCK_1_DAR249; /*< Address offset = 0x13e4 */
    css600_apbap_hwc_addressblock_1_dar250_reg_t ADDRESSBLOCK_1_DAR250; /*< Address offset = 0x13e8 */
    css600_apbap_hwc_addressblock_1_dar251_reg_t ADDRESSBLOCK_1_DAR251; /*< Address offset = 0x13ec */
    css600_apbap_hwc_addressblock_1_dar252_reg_t ADDRESSBLOCK_1_DAR252; /*< Address offset = 0x13f0 */
    css600_apbap_hwc_addressblock_1_dar253_reg_t ADDRESSBLOCK_1_DAR253; /*< Address offset = 0x13f4 */
    css600_apbap_hwc_addressblock_1_dar254_reg_t ADDRESSBLOCK_1_DAR254; /*< Address offset = 0x13f8 */
    css600_apbap_hwc_addressblock_1_dar255_reg_t ADDRESSBLOCK_1_DAR255; /*< Address offset = 0x13fc */
    const uint8_t        reservedArea8 [2304]; /*< Address offset = 0x1400 */
    css600_apbap_hwc_addressblock_1_csw_reg_t ADDRESSBLOCK_1_CSW; /*< Address offset = 0x1d00 */
    css600_apbap_hwc_addressblock_1_tar_reg_t ADDRESSBLOCK_1_TAR; /*< Address offset = 0x1d04 */
    const uint8_t        reservedArea9 [4];   /*< Address offset = 0x1d08 */
    css600_apbap_hwc_addressblock_1_drw_reg_t ADDRESSBLOCK_1_DRW; /*< Address offset = 0x1d0c */
    css600_apbap_hwc_addressblock_1_bd0_reg_t ADDRESSBLOCK_1_BD0; /*< Address offset = 0x1d10 */
    css600_apbap_hwc_addressblock_1_bd1_reg_t ADDRESSBLOCK_1_BD1; /*< Address offset = 0x1d14 */
    css600_apbap_hwc_addressblock_1_bd2_reg_t ADDRESSBLOCK_1_BD2; /*< Address offset = 0x1d18 */
    css600_apbap_hwc_addressblock_1_bd3_reg_t ADDRESSBLOCK_1_BD3; /*< Address offset = 0x1d1c */
    const uint8_t        reservedArea10 [4];  /*< Address offset = 0x1d20 */
    css600_apbap_hwc_addressblock_1_trr_reg_t ADDRESSBLOCK_1_TRR; /*< Address offset = 0x1d24 */
    const uint8_t        reservedArea11 [204]; /*< Address offset = 0x1d28 */
    css600_apbap_hwc_addressblock_1_cfg_reg_t ADDRESSBLOCK_1_CFG; /*< Address offset = 0x1df4 */
    css600_apbap_hwc_addressblock_1_base_reg_t ADDRESSBLOCK_1_BASE; /*< Address offset = 0x1df8 */
    css600_apbap_hwc_addressblock_1_idr_reg_t ADDRESSBLOCK_1_IDR; /*< Address offset = 0x1dfc */
    const uint8_t        reservedArea12 [252]; /*< Address offset = 0x1e00 */
    css600_apbap_hwc_addressblock_1_itstatus_reg_t ADDRESSBLOCK_1_ITSTATUS; /*< Address offset = 0x1efc */
    css600_apbap_hwc_addressblock_1_itctrl_reg_t ADDRESSBLOCK_1_ITCTRL; /*< Address offset = 0x1f00 */
    const uint8_t        reservedArea13 [156]; /*< Address offset = 0x1f04 */
    css600_apbap_hwc_addressblock_1_claimset_reg_t ADDRESSBLOCK_1_CLAIMSET; /*< Address offset = 0x1fa0 */
    css600_apbap_hwc_addressblock_1_claimclr_reg_t ADDRESSBLOCK_1_CLAIMCLR; /*< Address offset = 0x1fa4 */
    const uint8_t        reservedArea14 [16]; /*< Address offset = 0x1fa8 */
    css600_apbap_hwc_addressblock_1_authstatus_reg_t ADDRESSBLOCK_1_AUTHSTATUS; /*< Address offset = 0x1fb8 */
    css600_apbap_hwc_addressblock_1_devarch_reg_t ADDRESSBLOCK_1_DEVARCH; /*< Address offset = 0x1fbc */
    const uint8_t        reservedArea15 [12]; /*< Address offset = 0x1fc0 */
    css600_apbap_hwc_addressblock_1_devtype_reg_t ADDRESSBLOCK_1_DEVTYPE; /*< Address offset = 0x1fcc */
    css600_apbap_hwc_addressblock_1_pidr4_reg_t ADDRESSBLOCK_1_PIDR4; /*< Address offset = 0x1fd0 */
    css600_apbap_hwc_addressblock_1_pidr5_reg_t ADDRESSBLOCK_1_PIDR5; /*< Address offset = 0x1fd4 */
    css600_apbap_hwc_addressblock_1_pidr6_reg_t ADDRESSBLOCK_1_PIDR6; /*< Address offset = 0x1fd8 */
    css600_apbap_hwc_addressblock_1_pidr7_reg_t ADDRESSBLOCK_1_PIDR7; /*< Address offset = 0x1fdc */
    css600_apbap_hwc_addressblock_1_pidr0_reg_t ADDRESSBLOCK_1_PIDR0; /*< Address offset = 0x1fe0 */
    css600_apbap_hwc_addressblock_1_pidr1_reg_t ADDRESSBLOCK_1_PIDR1; /*< Address offset = 0x1fe4 */
    css600_apbap_hwc_addressblock_1_pidr2_reg_t ADDRESSBLOCK_1_PIDR2; /*< Address offset = 0x1fe8 */
    css600_apbap_hwc_addressblock_1_pidr3_reg_t ADDRESSBLOCK_1_PIDR3; /*< Address offset = 0x1fec */
    css600_apbap_hwc_addressblock_1_cidr0_reg_t ADDRESSBLOCK_1_CIDR0; /*< Address offset = 0x1ff0 */
    css600_apbap_hwc_addressblock_1_cidr1_reg_t ADDRESSBLOCK_1_CIDR1; /*< Address offset = 0x1ff4 */
    css600_apbap_hwc_addressblock_1_cidr2_reg_t ADDRESSBLOCK_1_CIDR2; /*< Address offset = 0x1ff8 */
    css600_apbap_hwc_addressblock_1_cidr3_reg_t ADDRESSBLOCK_1_CIDR3; /*< Address offset = 0x1ffc */
} css600_apbap_hwc_t;     // size: 0x08f0

// AddressSpace struct pointer
//
#define SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM ((css600_apbap_hwc_t*) SYSCON_CS_SOC_APBAP_APB4_SLAVE_0_MM_BASE)

// ******************************************* /Address Space

#endif      // _CSS600_APBAP_HWC_H_

