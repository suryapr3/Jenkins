#ifndef _RCS_SMON_H_
#define _RCS_SMON_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_SMON_ORION_MAIN_KP1_BASE  ( 0x01b02f00 )
#define RCS_SMON_CORES_DMA_BASE       ( 0x01b02f40 )
#define RCS_SMON_RSM_ROM_PHM_BASE     ( 0x01b02f80 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RCS_SMON_READ_ID_CMP_OFFSET ( 0x00000000U )
#define RCS_SMON_WRITE_ID_CMP_OFFSET ( 0x00000004U )
#define RCS_SMON_SMON00_OFFSET ( 0x00000008U )
#define RCS_SMON_SMON01_OFFSET ( 0x0000000cU )
#define RCS_SMON_SMON02_OFFSET ( 0x00000010U )
#define RCS_SMON_SMON03_OFFSET ( 0x00000014U )
#define RCS_SMON_SMON04_OFFSET ( 0x00000018U )
#define RCS_SMON_SMON05_OFFSET ( 0x0000001cU )
#define RCS_SMON_SMON06_OFFSET ( 0x00000020U )
#define RCS_SMON_SMON07_OFFSET ( 0x00000024U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RCS_SMON_READ_ID_CMP_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_READ_ID_CMP_OFFSET ) ))
#define RCS_SMON_WRITE_ID_CMP_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_WRITE_ID_CMP_OFFSET ) ))
#define RCS_SMON_SMON00_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON00_OFFSET ) ))
#define RCS_SMON_SMON01_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON01_OFFSET ) ))
#define RCS_SMON_SMON02_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON02_OFFSET ) ))
#define RCS_SMON_SMON03_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON03_OFFSET ) ))
#define RCS_SMON_SMON04_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON04_OFFSET ) ))
#define RCS_SMON_SMON05_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON05_OFFSET ) ))
#define RCS_SMON_SMON06_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON06_OFFSET ) ))
#define RCS_SMON_SMON07_ADR(_BASE) (( ( _BASE ) + ( RCS_SMON_SMON07_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RCS_AXI_SMON_COM_REG_AXI_READ_ID_COMPARE register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/AXI_Read_ID_Compare
  * ID used for comparison
  */

typedef union {
  struct {
    uint32_t SMON_ID_COMPARE : 16;
    ///< ID value to compare to
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SMON_ID_MASK : 16;
    ///< MASK value to use when comparing ID value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_read_id_cmp_reg_t;

#define RCS_SMON_READ_ID_CMP_DEFAULT (0x00000000U)
#define RCS_SMON_READ_ID_CMP_RD_MASK (0xffffffffU)
#define RCS_SMON_READ_ID_CMP_WR_MASK (0xffffffffU)


///< ID value to compare to
#define RCS_SMON_READ_ID_CMP_SMON_ID_CMP_BF_OFF ( 0)
#define RCS_SMON_READ_ID_CMP_SMON_ID_CMP_BF_WID (16)
#define RCS_SMON_READ_ID_CMP_SMON_ID_CMP_BF_MSK (0x0000FFFF)
#define RCS_SMON_READ_ID_CMP_SMON_ID_CMP_BF_DEF (0x00000000)

///< MASK value to use when comparing ID value
#define RCS_SMON_READ_ID_CMP_SMON_ID_MASK_BF_OFF (16)
#define RCS_SMON_READ_ID_CMP_SMON_ID_MASK_BF_WID (16)
#define RCS_SMON_READ_ID_CMP_SMON_ID_MASK_BF_MSK (0xFFFF0000)
#define RCS_SMON_READ_ID_CMP_SMON_ID_MASK_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_AXI_WRITE_ID_COMPARE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/AXI_Write_ID_Compare
  * ID used for comparison
  */

typedef union {
  struct {
    uint32_t SMON_ID_COMPARE : 16;
    ///< ID value to compare to
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SMON_ID_MASK : 16;
    ///< MASK value to use when comparing ID value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_write_id_cmp_reg_t;

#define RCS_SMON_WRITE_ID_CMP_DEFAULT (0x00000000U)
#define RCS_SMON_WRITE_ID_CMP_RD_MASK (0xffffffffU)
#define RCS_SMON_WRITE_ID_CMP_WR_MASK (0xffffffffU)


///< ID value to compare to
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_CMP_BF_OFF ( 0)
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_CMP_BF_WID (16)
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_CMP_BF_MSK (0x0000FFFF)
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_CMP_BF_DEF (0x00000000)

///< MASK value to use when comparing ID value
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_MASK_BF_OFF (16)
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_MASK_BF_WID (16)
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_MASK_BF_MSK (0xFFFF0000)
#define RCS_SMON_WRITE_ID_CMP_SMON_ID_MASK_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON00 register description at address offset 0x8
  *
  * Register default value:        0x40000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON00
  * AW_smon CONTROL0 register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSVD0 : 3;
    ///< reserved
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function    mode00 = 3'h0   desc =  free running function. Trigger
    ///< to accumulate the value into the engine SMON_COUNT when an event is
    ///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
    ///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
    ///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
    ///< to update max value when an event is valid and larger than the current
    ///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
    ///< =  Timestamp First Mode. Capture the timer value on the first occurance
    ///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
    ///< desc =  Timestamp Mode. Capture the timer value on every occurance
    ///< of an event.  ;  ;
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
    ///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function    mode00 = 3'h0   desc =  free running function. Trigger
    ///< to accumulate the value into the engine SMON_COUNT when an event is
    ///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
    ///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
    ///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
    ///< to update max value when an event is valid and larger than the current
    ///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
    ///< =  Timestamp First Mode. Capture the timer value on the first occurance
    ///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
    ///< desc =  Timestamp Mode. Capture the timer value on every occurance
    ///< of an event.  ;  ;
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
    ///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode    mode00 = 4'h0   desc =  Independant Mode. SMON0_COUNT
    ///< & SMON1_COUNT operate independantly as their function is configured.
    ///< ;  ;    mode01 = 4'h1   desc =  Average Latency Mode. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT accumulates
    ///< occurances and SMON1_COUNT accumulates timer values. For multiple
    ///< stop for a single start, accumulate  start_to_stop1,  start_to_stop1stop2
    ///< ... ;  ;    mode02 = 4'h2   desc =  MinMax Latency Mode,. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
    ///< minimum timer value and SMON1_COUNT maintains the maximum timer value
    ///< ;  ;    mode03 = 4'h3   desc =  Average Mode.   SMON0 trigger increments
    ///< SMON0_COUNT and the value is accumulated in SMON1_COUNT. SMON1 events
    ///< are disabled. ;  ;    mode04 = 4'h4   desc =  Average Lantecy Mode
    ///< 2. same as mode01, but only accumulate the first start_to_stop1 if
    ///< there are multiple stop for each start ;  ;    mode05 = 4'h5   desc
    ///< =  Average Latency Mode 3. same as mode01, but accumualte the incremental
    ///< start_to_stop1, stop1_to_stop2... if there are multiple stop for each
    ///< start ;  ;
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RSVD1 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale    mode00 = 5'h00   desc =  increment timer every
    ///< 1 clock ;  ;    mode01 = 5'h01   desc =  increment timer every
    ///< 2 clocks ;  ;    mode02 = 5'h02   desc =  increment timer every
    ///< 4 clocks ;  ;    mode03 = 5'h03   desc =  increment timer every
    ///< 8 clocks ;  ;    mode04 = 5'h04   desc =  increment timer every
    ///< 16 clocks ;  ;    mode05 = 5'h05   desc =  increment timer every
    ///< 32 clocks ;  ;    mode06 = 5'h06   desc =  increment timer every
    ///< 64 clocks ;  ;    mode07 = 5'h07   desc =  increment timer every
    ///< 128 clocks ;  ;    mode08 = 5'h08   desc =  increment timer every
    ///< 256 clocks ;  ;    mode09 = 5'h09   desc =  increment timer every
    ///< 512 clocks ;  ;    mode10 = 5'h0a   desc =  increment timer every
    ///< 1024 clocks ;  ;    mode11 = 5'h0b   desc =  increment timer every
    ///< 2048 clocks ;  ;    mode12 = 5'h0c   desc =  increment timer every
    ///< 4096 clocks ;  ;    mode13 = 5'h0d   desc =  increment timer every
    ///< 8192 clocks ;  ;    mode14 = 5'h0e   desc =  increment timer every
    ///< 16384 clocks ;  ;    mode15 = 5'h0f   desc =  increment timer every
    ///< 32768 clocks ;  ;    mode16 = 5'h10   desc =  increment timer every
    ///< 65536 clocks ;  ;    mode17 = 5'h11   desc =  increment timer every
    ///< 131072 clocks ;  ;    mode18 = 5'h12   desc =  increment timer every
    ///< 262144 clocks ;  ;    mode19 = 5'h13   desc =  increment timer every
    ///< 524288 clocks ;  ;
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RSVD2 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} rcs_smon_smon00_reg_t;

#define RCS_SMON_SMON00_DEFAULT (0x40000000U)
#define RCS_SMON_SMON00_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON00_WR_MASK (0x3fffffffU)


///< enable the SMON counters
#define RCS_SMON_SMON00_SMON_EN_BF_OFF ( 0)
#define RCS_SMON_SMON00_SMON_EN_BF_WID ( 1)
#define RCS_SMON_SMON00_SMON_EN_BF_MSK (0x00000001)
#define RCS_SMON_SMON00_SMON_EN_BF_DEF (0x00000000)

///< reserved
#define RCS_SMON_SMON00_RSVD0_BF_OFF ( 1)
#define RCS_SMON_SMON00_RSVD0_BF_WID ( 3)
#define RCS_SMON_SMON00_RSVD0_BF_MSK (0x0000000E)
#define RCS_SMON_SMON00_RSVD0_BF_DEF (0x00000000)

///< SMON0 function    mode00 = 3'h0   desc =  free running function. Trigger
///< to accumulate the value into the engine SMON_COUNT when an event is
///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
///< to update max value when an event is valid and larger than the current
///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
///< =  Timestamp First Mode. Capture the timer value on the first occurance
///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
///< desc =  Timestamp Mode. Capture the timer value on every occurance
///< of an event.  ;  ;
#define RCS_SMON_SMON00_SMON0_FUNCTION_BF_OFF ( 4)
#define RCS_SMON_SMON00_SMON0_FUNCTION_BF_WID ( 3)
#define RCS_SMON_SMON00_SMON0_FUNCTION_BF_MSK (0x00000070)
#define RCS_SMON_SMON00_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
#define RCS_SMON_SMON00_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define RCS_SMON_SMON00_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define RCS_SMON_SMON00_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define RCS_SMON_SMON00_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function    mode00 = 3'h0   desc =  free running function. Trigger
///< to accumulate the value into the engine SMON_COUNT when an event is
///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
///< to update max value when an event is valid and larger than the current
///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
///< =  Timestamp First Mode. Capture the timer value on the first occurance
///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
///< desc =  Timestamp Mode. Capture the timer value on every occurance
///< of an event.  ;  ;
#define RCS_SMON_SMON00_SMON1_FUNCTION_BF_OFF ( 8)
#define RCS_SMON_SMON00_SMON1_FUNCTION_BF_WID ( 3)
#define RCS_SMON_SMON00_SMON1_FUNCTION_BF_MSK (0x00000700)
#define RCS_SMON_SMON00_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
#define RCS_SMON_SMON00_SMON1_FUNCTION_CMP_BF_OFF (11)
#define RCS_SMON_SMON00_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define RCS_SMON_SMON00_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define RCS_SMON_SMON00_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode    mode00 = 4'h0   desc =  Independant Mode. SMON0_COUNT
///< & SMON1_COUNT operate independantly as their function is configured.
///< ;  ;    mode01 = 4'h1   desc =  Average Latency Mode. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT accumulates
///< occurances and SMON1_COUNT accumulates timer values. For multiple
///< stop for a single start, accumulate  start_to_stop1,  start_to_stop1stop2
///< ... ;  ;    mode02 = 4'h2   desc =  MinMax Latency Mode,. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
///< minimum timer value and SMON1_COUNT maintains the maximum timer value
///< ;  ;    mode03 = 4'h3   desc =  Average Mode.   SMON0 trigger increments
///< SMON0_COUNT and the value is accumulated in SMON1_COUNT. SMON1 events
///< are disabled. ;  ;    mode04 = 4'h4   desc =  Average Lantecy Mode
///< 2. same as mode01, but only accumulate the first start_to_stop1 if
///< there are multiple stop for each start ;  ;    mode05 = 4'h5   desc
///< =  Average Latency Mode 3. same as mode01, but accumualte the incremental
///< start_to_stop1, stop1_to_stop2... if there are multiple stop for each
///< start ;  ;
#define RCS_SMON_SMON00_SMON_MODE_BF_OFF (12)
#define RCS_SMON_SMON00_SMON_MODE_BF_WID ( 4)
#define RCS_SMON_SMON00_SMON_MODE_BF_MSK (0x0000F000)
#define RCS_SMON_SMON00_SMON_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define RCS_SMON_SMON00_STOPCNTEROVFL_BF_OFF (16)
#define RCS_SMON_SMON00_STOPCNTEROVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_STOPCNTEROVFL_BF_MSK (0x00010000)
#define RCS_SMON_SMON00_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define RCS_SMON_SMON00_INTCNTEROVFL_BF_OFF (17)
#define RCS_SMON_SMON00_INTCNTEROVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_INTCNTEROVFL_BF_MSK (0x00020000)
#define RCS_SMON_SMON00_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define RCS_SMON_SMON00_STATCNTER0OVFL_BF_OFF (18)
#define RCS_SMON_SMON00_STATCNTER0OVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_STATCNTER0OVFL_BF_MSK (0x00040000)
#define RCS_SMON_SMON00_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define RCS_SMON_SMON00_STATCNTER1OVFL_BF_OFF (19)
#define RCS_SMON_SMON00_STATCNTER1OVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_STATCNTER1OVFL_BF_MSK (0x00080000)
#define RCS_SMON_SMON00_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define RCS_SMON_SMON00_STOPTIMEROVFL_BF_OFF (20)
#define RCS_SMON_SMON00_STOPTIMEROVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_STOPTIMEROVFL_BF_MSK (0x00100000)
#define RCS_SMON_SMON00_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define RCS_SMON_SMON00_INTTIMEROVFL_BF_OFF (21)
#define RCS_SMON_SMON00_INTTIMEROVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_INTTIMEROVFL_BF_MSK (0x00200000)
#define RCS_SMON_SMON00_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define RCS_SMON_SMON00_STATTIMEROVFL_BF_OFF (22)
#define RCS_SMON_SMON00_STATTIMEROVFL_BF_WID ( 1)
#define RCS_SMON_SMON00_STATTIMEROVFL_BF_MSK (0x00400000)
#define RCS_SMON_SMON00_STATTIMEROVFL_BF_DEF (0x00000000)

///< reserved
#define RCS_SMON_SMON00_RSVD1_BF_OFF (23)
#define RCS_SMON_SMON00_RSVD1_BF_WID ( 1)
#define RCS_SMON_SMON00_RSVD1_BF_MSK (0x00800000)
#define RCS_SMON_SMON00_RSVD1_BF_DEF (0x00000000)

///< timer prescale    mode00 = 5'h00   desc =  increment timer every
///< 1 clock ;  ;    mode01 = 5'h01   desc =  increment timer every
///< 2 clocks ;  ;    mode02 = 5'h02   desc =  increment timer every
///< 4 clocks ;  ;    mode03 = 5'h03   desc =  increment timer every
///< 8 clocks ;  ;    mode04 = 5'h04   desc =  increment timer every
///< 16 clocks ;  ;    mode05 = 5'h05   desc =  increment timer every
///< 32 clocks ;  ;    mode06 = 5'h06   desc =  increment timer every
///< 64 clocks ;  ;    mode07 = 5'h07   desc =  increment timer every
///< 128 clocks ;  ;    mode08 = 5'h08   desc =  increment timer every
///< 256 clocks ;  ;    mode09 = 5'h09   desc =  increment timer every
///< 512 clocks ;  ;    mode10 = 5'h0a   desc =  increment timer every
///< 1024 clocks ;  ;    mode11 = 5'h0b   desc =  increment timer every
///< 2048 clocks ;  ;    mode12 = 5'h0c   desc =  increment timer every
///< 4096 clocks ;  ;    mode13 = 5'h0d   desc =  increment timer every
///< 8192 clocks ;  ;    mode14 = 5'h0e   desc =  increment timer every
///< 16384 clocks ;  ;    mode15 = 5'h0f   desc =  increment timer every
///< 32768 clocks ;  ;    mode16 = 5'h10   desc =  increment timer every
///< 65536 clocks ;  ;    mode17 = 5'h11   desc =  increment timer every
///< 131072 clocks ;  ;    mode18 = 5'h12   desc =  increment timer every
///< 262144 clocks ;  ;    mode19 = 5'h13   desc =  increment timer every
///< 524288 clocks ;  ;
#define RCS_SMON_SMON00_TIMER_PRESCALE_BF_OFF (24)
#define RCS_SMON_SMON00_TIMER_PRESCALE_BF_WID ( 5)
#define RCS_SMON_SMON00_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define RCS_SMON_SMON00_TIMER_PRESCALE_BF_DEF (0x00000000)

///< reserved
#define RCS_SMON_SMON00_RSVD2_BF_OFF (29)
#define RCS_SMON_SMON00_RSVD2_BF_WID ( 1)
#define RCS_SMON_SMON00_RSVD2_BF_MSK (0x20000000)
#define RCS_SMON_SMON00_RSVD2_BF_DEF (0x00000000)

///< version
#define RCS_SMON_SMON00_VER_BF_OFF (30)
#define RCS_SMON_SMON00_VER_BF_WID ( 2)
#define RCS_SMON_SMON00_VER_BF_MSK (0xC0000000)
#define RCS_SMON_SMON00_VER_BF_DEF (0x40000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON01 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON01
  * AW_smon CONTROL1 register
  */

typedef union {
  struct {
    uint32_t COUNTER_EVENT_SELECT0 : 4;
    ///< Select AXI Event for Counter0 engine.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t COUNTER_AXI_IFC_SELECT0 : 4;
    ///< Select AXI interface for Counter0 engine. Consult table in RCS MAS
    ///< titled  NIC400 interfaces serviced by ser2mon_axi instances
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t COUNTER_EVENT_SELECT1 : 4;
    ///< Select AXI Event for Counter0 engine.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t COUNTER_AXI_IFC_SELECT1 : 4;
    ///< Select AXI interface for Counter1 engine. Consult table in RCS MAS
    ///< titled  NIC400 interfaces serviced by ser2mon_axi instances
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RSVD : 16;
    ///< reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon01_reg_t;

#define RCS_SMON_SMON01_DEFAULT (0x00000000U)
#define RCS_SMON_SMON01_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON01_WR_MASK (0xffffffffU)


///< Select AXI Event for Counter0 engine.
#define RCS_SMON_SMON01_CNTER_EVENT_SEL0_BF_OFF ( 0)
#define RCS_SMON_SMON01_CNTER_EVENT_SEL0_BF_WID ( 4)
#define RCS_SMON_SMON01_CNTER_EVENT_SEL0_BF_MSK (0x0000000F)
#define RCS_SMON_SMON01_CNTER_EVENT_SEL0_BF_DEF (0x00000000)

///< Select AXI interface for Counter0 engine. Consult table in RCS MAS
///< titled  NIC400 interfaces serviced by ser2mon_axi instances
#define RCS_SMON_SMON01_CNTER_IFC_SEL0_BF_OFF ( 4)
#define RCS_SMON_SMON01_CNTER_IFC_SEL0_BF_WID ( 4)
#define RCS_SMON_SMON01_CNTER_IFC_SEL0_BF_MSK (0x000000F0)
#define RCS_SMON_SMON01_CNTER_IFC_SEL0_BF_DEF (0x00000000)

///< Select AXI Event for Counter0 engine.
#define RCS_SMON_SMON01_CNTER_EVENT_SEL1_BF_OFF ( 8)
#define RCS_SMON_SMON01_CNTER_EVENT_SEL1_BF_WID ( 4)
#define RCS_SMON_SMON01_CNTER_EVENT_SEL1_BF_MSK (0x00000F00)
#define RCS_SMON_SMON01_CNTER_EVENT_SEL1_BF_DEF (0x00000000)

///< Select AXI interface for Counter1 engine. Consult table in RCS MAS
///< titled  NIC400 interfaces serviced by ser2mon_axi instances
#define RCS_SMON_SMON01_CNTER_IFC_SEL1_BF_OFF (12)
#define RCS_SMON_SMON01_CNTER_IFC_SEL1_BF_WID ( 4)
#define RCS_SMON_SMON01_CNTER_IFC_SEL1_BF_MSK (0x0000F000)
#define RCS_SMON_SMON01_CNTER_IFC_SEL1_BF_DEF (0x00000000)

///< reserved
#define RCS_SMON_SMON01_RSVD_BF_OFF (16)
#define RCS_SMON_SMON01_RSVD_BF_WID (16)
#define RCS_SMON_SMON01_RSVD_BF_MSK (0xFFFF0000)
#define RCS_SMON_SMON01_RSVD_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON02 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON02
  * AW_smon SMON0_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon02_reg_t;

#define RCS_SMON_SMON02_DEFAULT (0x00000000U)
#define RCS_SMON_SMON02_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON02_WR_MASK (0xffffffffU)


///< Comparison value.
#define RCS_SMON_SMON02_CMP0_BF_OFF ( 0)
#define RCS_SMON_SMON02_CMP0_BF_WID (32)
#define RCS_SMON_SMON02_CMP0_BF_MSK (0xFFFFFFFF)
#define RCS_SMON_SMON02_CMP0_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON03 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON03
  * AW_smon SMON1_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon03_reg_t;

#define RCS_SMON_SMON03_DEFAULT (0x00000000U)
#define RCS_SMON_SMON03_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON03_WR_MASK (0xffffffffU)


///< Comparison value.
#define RCS_SMON_SMON03_CMP1_BF_OFF ( 0)
#define RCS_SMON_SMON03_CMP1_BF_WID (32)
#define RCS_SMON_SMON03_CMP1_BF_MSK (0xFFFFFFFF)
#define RCS_SMON_SMON03_CMP1_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON04 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON04
  * AW_smon SMON0_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon04_reg_t;

#define RCS_SMON_SMON04_DEFAULT (0x00000000U)
#define RCS_SMON_SMON04_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON04_WR_MASK (0xffffffffU)


///< counter0
#define RCS_SMON_SMON04_CNTER0_BF_OFF ( 0)
#define RCS_SMON_SMON04_CNTER0_BF_WID (32)
#define RCS_SMON_SMON04_CNTER0_BF_MSK (0xFFFFFFFF)
#define RCS_SMON_SMON04_CNTER0_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON05 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON05
  * AW_smon SMON1_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon05_reg_t;

#define RCS_SMON_SMON05_DEFAULT (0x00000000U)
#define RCS_SMON_SMON05_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON05_WR_MASK (0xffffffffU)


///< counter1
#define RCS_SMON_SMON05_CNTER1_BF_OFF ( 0)
#define RCS_SMON_SMON05_CNTER1_BF_WID (32)
#define RCS_SMON_SMON05_CNTER1_BF_MSK (0xFFFFFFFF)
#define RCS_SMON_SMON05_CNTER1_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON06 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON06
  * AW_smon TIMER register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon06_reg_t;

#define RCS_SMON_SMON06_DEFAULT (0x00000000U)
#define RCS_SMON_SMON06_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON06_WR_MASK (0xffffffffU)


///< timer
#define RCS_SMON_SMON06_TIMER_BF_OFF ( 0)
#define RCS_SMON_SMON06_TIMER_BF_WID (32)
#define RCS_SMON_SMON06_TIMER_BF_MSK (0xFFFFFFFF)
#define RCS_SMON_SMON06_TIMER_BF_DEF (0x00000000)


/** @brief RCS_AXI_SMON_COM_REG_SMON_SMON07 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_axi_smon_com/reg/smon/SMON07
  * AW_smon TIMERMAXVAL register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_smon_smon07_reg_t;

#define RCS_SMON_SMON07_DEFAULT (0x00000000U)
#define RCS_SMON_SMON07_RD_MASK (0xffffffffU)
#define RCS_SMON_SMON07_WR_MASK (0xffffffffU)


///< maxvalue
#define RCS_SMON_SMON07_MAXVAL_BF_OFF ( 0)
#define RCS_SMON_SMON07_MAXVAL_BF_WID (32)
#define RCS_SMON_SMON07_MAXVAL_BF_MSK (0xFFFFFFFF)
#define RCS_SMON_SMON07_MAXVAL_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RCS_SMON_READ_ID_CMP_REG(_BASE) ((rcs_smon_read_id_cmp_reg_t*) RCS_SMON_READ_ID_CMP_ADR(_BASE))
#define RCS_SMON_WRITE_ID_CMP_REG(_BASE) ((rcs_smon_write_id_cmp_reg_t*) RCS_SMON_WRITE_ID_CMP_ADR(_BASE))
#define RCS_SMON_SMON00_REG(_BASE) ((rcs_smon_smon00_reg_t*) RCS_SMON_SMON00_ADR(_BASE))
#define RCS_SMON_SMON01_REG(_BASE) ((rcs_smon_smon01_reg_t*) RCS_SMON_SMON01_ADR(_BASE))
#define RCS_SMON_SMON02_REG(_BASE) ((rcs_smon_smon02_reg_t*) RCS_SMON_SMON02_ADR(_BASE))
#define RCS_SMON_SMON03_REG(_BASE) ((rcs_smon_smon03_reg_t*) RCS_SMON_SMON03_ADR(_BASE))
#define RCS_SMON_SMON04_REG(_BASE) ((rcs_smon_smon04_reg_t*) RCS_SMON_SMON04_ADR(_BASE))
#define RCS_SMON_SMON05_REG(_BASE) ((rcs_smon_smon05_reg_t*) RCS_SMON_SMON05_ADR(_BASE))
#define RCS_SMON_SMON06_REG(_BASE) ((rcs_smon_smon06_reg_t*) RCS_SMON_SMON06_ADR(_BASE))
#define RCS_SMON_SMON07_REG(_BASE) ((rcs_smon_smon07_reg_t*) RCS_SMON_SMON07_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rcs_smon_read_id_cmp_reg_t READ_ID_CMP; /*< Address offset = 0x0 */
    rcs_smon_write_id_cmp_reg_t WRITE_ID_CMP; /*< Address offset = 0x4 */
    rcs_smon_smon00_reg_t SMON00;     /*< Address offset = 0x8 */
    rcs_smon_smon01_reg_t SMON01;     /*< Address offset = 0xc */
    rcs_smon_smon02_reg_t SMON02;     /*< Address offset = 0x10 */
    rcs_smon_smon03_reg_t SMON03;     /*< Address offset = 0x14 */
    rcs_smon_smon04_reg_t SMON04;     /*< Address offset = 0x18 */
    rcs_smon_smon05_reg_t SMON05;     /*< Address offset = 0x1c */
    rcs_smon_smon06_reg_t SMON06;     /*< Address offset = 0x20 */
    rcs_smon_smon07_reg_t SMON07;     /*< Address offset = 0x24 */
} rcs_smon_t;     // size: 0x0028

// AddressSpace struct pointer
//
#define RCS_SMON_ORION_MAIN_KP1  ((rcs_smon_t*) RCS_SMON_ORION_MAIN_KP1_BASE)
#define RCS_SMON_CORES_DMA       ((rcs_smon_t*) RCS_SMON_CORES_DMA_BASE)
#define RCS_SMON_RSM_ROM_PHM     ((rcs_smon_t*) RCS_SMON_RSM_ROM_PHM_BASE)

// ******************************************* /Address Space

#endif      // _RCS_SMON_H_

