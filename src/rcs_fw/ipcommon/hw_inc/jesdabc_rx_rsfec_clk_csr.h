#ifndef _JESDABC_RX_RSFEC_CLK_CSR_H_
#define _JESDABC_RX_RSFEC_CLK_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define DLNK_JESDABC0_RX_RSFEC_CLK_CSR_BASE  0x0670f000
#define DLNK_JESDABC1_RX_RSFEC_CLK_CSR_BASE  0x06f0f000
#define DLNK_JESDABC2_RX_RSFEC_CLK_CSR_BASE  0x0770f000
#define DLNK_JESDABC3_RX_RSFEC_CLK_CSR_BASE  0x07f0f000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_OFFSET ( 0x00000000U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_OFFSET ( 0x00000004U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_OFFSET ( 0x00000010U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_OFFSET ( 0x00000014U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_OFFSET ( 0x00000018U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_OFFSET ( 0x0000001cU )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_OFFSET ( 0x00000020U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_OFFSET ( 0x00000024U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_OFFSET ( 0x00000028U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_OFFSET ( 0x0000002cU )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_OFFSET ( 0x00000030U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN0_OFFSET ( 0x00000080U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN1_OFFSET ( 0x00000084U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN2_OFFSET ( 0x00000088U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN3_OFFSET ( 0x0000008cU )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR0_OFFSET ( 0x000000c0U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR1_OFFSET ( 0x000000c4U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR2_OFFSET ( 0x000000c8U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR3_OFFSET ( 0x000000ccU )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH0_OFFSET ( 0x00000100U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH1_OFFSET ( 0x00000104U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM0_OFFSET ( 0x00000108U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM1_OFFSET ( 0x0000010cU )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER0_OFFSET ( 0x00000110U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER1_OFFSET ( 0x00000114U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX0_OFFSET ( 0x00000120U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX1_OFFSET ( 0x00000124U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX2_OFFSET ( 0x00000128U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX3_OFFSET ( 0x0000012cU )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA0_OFFSET ( 0x00000140U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA1_OFFSET ( 0x00000144U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA2_OFFSET ( 0x00000148U )
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA3_OFFSET ( 0x0000014cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN2_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN3_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR2_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR3_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX2_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX3_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA0_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA1_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA2_OFFSET ) ))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA3_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_scratch_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_RD_MASK (0xffffffffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_apb_bridge_status_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_DEFAULT (0x00010000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_RD_MASK (0xffffffffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_WID (20)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_MSK (0x000FFFFF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_DEF (0x00010000)

///< Module Revision Number
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_OFF (20)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_MSK (0x0FF00000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_OFF (28)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_WID ( 1)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_OFF (29)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_WID ( 1)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_MSK (0x20000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_OFF (30)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_WID ( 1)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_MSK (0x40000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_OFF (31)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_WID ( 1)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_MSK (0x80000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ALM_STS register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ALM_STS
  * Status register for RX Alarms for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_ALM_STS : 8;
    ///< Status register for RX Alarms for windowed Counter Threshold errors
    ///< detected in RX RSFEC clock domain.       The register value is sticky
    ///< once set and only cleared upon writing to corresponding Alarm clear
    ///< register.        This register is set if the corresponding erro is
    ///< detected irrespective of the value of the Alram generation enable.
    ///< The mapping of indivbsual bits is shown below.        [1:0]   - RX
    ///< Lane 0 Alarm Status.                [0]  - Rx FEC Delay  Buffer Single
    ///< Bit ECC Error.               [1]  - Rx FEC Delay  Buffer Double Bit
    ///< ECC Error.        [3:2]   - RX Lane 1 Alarm Status. Error bit mapping
    ///< same as Lane 0.       [5:4]   - RX Lane 2 Alarm Status. Error bit
    ///< mapping same as Lane 0.       [7:6]   - RX Lane 3 Alarm Status. Error
    ///< bit mapping same as Lane 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_sts_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_WR_MASK (0x000000ffU)


///< Status register for RX Alarms for windowed Counter Threshold errors
///< detected in RX RSFEC clock domain.       The register value is sticky
///< once set and only cleared upon writing to corresponding Alarm clear
///< register.        This register is set if the corresponding erro is
///< detected irrespective of the value of the Alram generation enable.
///< The mapping of indivbsual bits is shown below.        [1:0]   - RX
///< Lane 0 Alarm Status.                [0]  - Rx FEC Delay  Buffer Single
///< Bit ECC Error.               [1]  - Rx FEC Delay  Buffer Double Bit
///< ECC Error.        [3:2]   - RX Lane 1 Alarm Status. Error bit mapping
///< same as Lane 0.       [5:4]   - RX Lane 2 Alarm Status. Error bit
///< mapping same as Lane 0.       [7:6]   - RX Lane 3 Alarm Status. Error
///< bit mapping same as Lane 0.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_WNDW_ALM_STS_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_WNDW_ALM_STS_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_WNDW_ALM_STS_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_WNDW_ALM_STS_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ALM_EN register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ALM_EN
  * Enable register for RX Alarms for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_ALM_EN : 8;
    ///< This register contains corresponding enable bits for all the Alarm
    ///< conditions detected in RX RSFEC clock windowed counter threshold alarm
    ///< Status register.        Each bit of this register enable alarm for
    ///< corresponding error in the status register.        The mapping of
    ///< bits is same as RX RSFEC clock windowed counter threshold alarm Status
    ///< register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_en_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_WR_MASK (0x000000ffU)


///< This register contains corresponding enable bits for all the Alarm
///< conditions detected in RX RSFEC clock windowed counter threshold alarm
///< Status register.        Each bit of this register enable alarm for
///< corresponding error in the status register.        The mapping of
///< bits is same as RX RSFEC clock windowed counter threshold alarm Status
///< register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_WNDW_ALM_EN_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_WNDW_ALM_EN_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_WNDW_ALM_EN_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_WNDW_ALM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ALM_CLR register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ALM_CLR
  * Clear register for RX Alarms for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_ALM_CLR : 8;
    ///< This register contains clear bits for all the Alarm conditions detected
    ///< in RX RSFEC clock windowed counter threshold alarm Status register.
    ///< Each bit of this register when written clears the corresponding bit
    ///< in the error status status register.       The clear operation is
    ///< done for only one cycle and subsequent error bits can set the status
    ///< registers.        The mapping of bits is same as RX RSFEC clock windowed
    ///< counter threshold alarm Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_clr_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_WR_MASK (0x000000ffU)


///< This register contains clear bits for all the Alarm conditions detected
///< in RX RSFEC clock windowed counter threshold alarm Status register.
///< Each bit of this register when written clears the corresponding bit
///< in the error status status register.       The clear operation is
///< done for only one cycle and subsequent error bits can set the status
///< registers.        The mapping of bits is same as RX RSFEC clock windowed
///< counter threshold alarm Status register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_WNDW_ALM_CLR_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_WNDW_ALM_CLR_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_WNDW_ALM_CLR_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_WNDW_ALM_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ALM_FRC register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ALM_FRC
  * Force register for RX Alarms for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_ALM_FRC : 8;
    ///< This register contains forcr bits for all the Alarm conditions detected
    ///< in RX RSFEC clock windowed counter threshold alarm Status register.
    ///< Each bit of this register when written force the corresponding bit
    ///< in the error status register to 1 irrespective of the error condition
    ///< (active value of the error) until written back to 0.
    ///< The mapping of bits is same as RX RSFEC clock windowed counter threshold
    ///< alarm Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_frc_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_WR_MASK (0x000000ffU)


///< This register contains forcr bits for all the Alarm conditions detected
///< in RX RSFEC clock windowed counter threshold alarm Status register.
///< Each bit of this register when written force the corresponding bit
///< in the error status register to 1 irrespective of the error condition
///< (active value of the error) until written back to 0.
///< The mapping of bits is same as RX RSFEC clock windowed counter threshold
///< alarm Status register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_WNDW_ALM_FRC_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_WNDW_ALM_FRC_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_WNDW_ALM_FRC_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_WNDW_ALM_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_INTR_STS register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_INTR_STS
  * Status register for RX Interrupts for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_STS : 8;
    ///< Status register for RX Interrupts for windowed Counter Threshold errors
    ///< detected in RX RSFEC clock domain.       The register value is sticky
    ///< once set and only cleared upon writing to corresponding Interrupt
    ///< clear register.        This register is set if the corresponding erro
    ///< is detected irrespective of the value of the Alram generation enable.
    ///< The mapping of indivbsual bits is shown below.        [1:0]   - RX
    ///< Lane 0 Interrupt Status.                [0]  - Rx FEC Delay  Buffer
    ///< Single Bit ECC Error.               [1]  - Rx FEC Delay  Buffer Double
    ///< Bit ECC Error.        [3:2]   - RX Lane 1 Interrupt Status. Error
    ///< bit mapping same as Lane 0.       [5:4]   - RX Lane 2 Interrupt Status.
    ///< Error bit mapping same as Lane 0.       [7:6]   - RX Lane 3 Interrupt
    ///< Status. Error bit mapping same as Lane 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_sts_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_WR_MASK (0x000000ffU)


///< Status register for RX Interrupts for windowed Counter Threshold errors
///< detected in RX RSFEC clock domain.       The register value is sticky
///< once set and only cleared upon writing to corresponding Interrupt
///< clear register.        This register is set if the corresponding erro
///< is detected irrespective of the value of the Alram generation enable.
///< The mapping of indivbsual bits is shown below.        [1:0]   - RX
///< Lane 0 Interrupt Status.                [0]  - Rx FEC Delay  Buffer
///< Single Bit ECC Error.               [1]  - Rx FEC Delay  Buffer Double
///< Bit ECC Error.        [3:2]   - RX Lane 1 Interrupt Status. Error
///< bit mapping same as Lane 0.       [5:4]   - RX Lane 2 Interrupt Status.
///< Error bit mapping same as Lane 0.       [7:6]   - RX Lane 3 Interrupt
///< Status. Error bit mapping same as Lane 0.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_WNDW_INTR_STS_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_WNDW_INTR_STS_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_WNDW_INTR_STS_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_WNDW_INTR_STS_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_INTR_HIGH_EN
  * High Priority Enable register for RX Interrupts for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_HIGH_EN : 8;
    ///< This register contains corresponding High Priority Interrupt enable
    ///< bits for all the Interrupt conditions detected in RX RSFEC clock windowed
    ///< counter threshold Interrupt Status register.        Each bit of this
    ///< register enable High Priority Interrupt for corresponding error in
    ///< the status register.        The mapping of bits is same as RX RSFEC
    ///< clock windowed counter threshold Interrupt Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_high_en_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_WR_MASK (0x000000ffU)


///< This register contains corresponding High Priority Interrupt enable
///< bits for all the Interrupt conditions detected in RX RSFEC clock windowed
///< counter threshold Interrupt Status register.        Each bit of this
///< register enable High Priority Interrupt for corresponding error in
///< the status register.        The mapping of bits is same as RX RSFEC
///< clock windowed counter threshold Interrupt Status register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_WNDW_INTR_HIGH_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_INTR_LOW_EN register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_INTR_LOW_EN
  * Low Priority Enable register for RX Interrupts for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_LOW_EN : 8;
    ///< This register contains corresponding Low Priority Interrupt enable
    ///< bits for all the Interrupt conditions detected in RX RSFEC clock windowed
    ///< counter threshold Interrupt Status register.        Each bit of this
    ///< register enable Low Priority Interrupt for corresponding error in
    ///< the status register.        The mapping of bits is same as RX RSFEC
    ///< clock windowed counter threshold Interrupt Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_low_en_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_WR_MASK (0x000000ffU)


///< This register contains corresponding Low Priority Interrupt enable
///< bits for all the Interrupt conditions detected in RX RSFEC clock windowed
///< counter threshold Interrupt Status register.        Each bit of this
///< register enable Low Priority Interrupt for corresponding error in
///< the status register.        The mapping of bits is same as RX RSFEC
///< clock windowed counter threshold Interrupt Status register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_WNDW_INTR_LOW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_INTR_CLR register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_INTR_CLR
  * Clear register for RX Interrupts for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_CLR : 8;
    ///< This register contains clear bits for all the Interrupt conditions
    ///< detected in RX RSFEC clock windowed counter threshold Interrupt Status
    ///< register.        Each bit of this register when written clears the
    ///< corresponding bit in the error status status register.       The clear
    ///< operation is done for only one cycle and subsequent error bits can
    ///< set the status registers.        The mapping of bits is same as RX
    ///< RSFEC clock windowed counter threshold Interrupt Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_clr_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_WR_MASK (0x000000ffU)


///< This register contains clear bits for all the Interrupt conditions
///< detected in RX RSFEC clock windowed counter threshold Interrupt Status
///< register.        Each bit of this register when written clears the
///< corresponding bit in the error status status register.       The clear
///< operation is done for only one cycle and subsequent error bits can
///< set the status registers.        The mapping of bits is same as RX
///< RSFEC clock windowed counter threshold Interrupt Status register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_WNDW_INTR_CLR_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_WNDW_INTR_CLR_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_WNDW_INTR_CLR_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_WNDW_INTR_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_INTR_FRC register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_INTR_FRC
  * Force register for RX Interrupts for windowed Counter Threshold errors detected in RX RSFEC clock domain
  */

typedef union {
  struct {
    uint32_t WNDW_INTR_FRC : 8;
    ///< This register contains forcr bits for all the Interrupt conditions
    ///< detected in RX RSFEC clock windowed counter threshold Interrupt Status
    ///< register.        Each bit of this register when written force the
    ///< corresponding bit in the error status register to 1 irrespective of
    ///< the error condition (active value of the error) until written back
    ///< to 0.               The mapping of bits is same as RX RSFEC clock
    ///< windowed counter threshold Interrupt Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_frc_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_WR_MASK (0x000000ffU)


///< This register contains forcr bits for all the Interrupt conditions
///< detected in RX RSFEC clock windowed counter threshold Interrupt Status
///< register.        Each bit of this register when written force the
///< corresponding bit in the error status register to 1 irrespective of
///< the error condition (active value of the error) until written back
///< to 0.               The mapping of bits is same as RX RSFEC clock
///< windowed counter threshold Interrupt Status register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_WNDW_INTR_FRC_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_WNDW_INTR_FRC_BF_WID ( 8)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_WNDW_INTR_FRC_BF_MSK (0x000000FF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_WNDW_INTR_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_CNT_EN[4] register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_CNT_EN
  * Enable Register for Per Lane Error window Counters.
  */

typedef union {
  struct {
    uint32_t LN_WNDW_CNT_EN : 2;
    ///< Enable register for Per Lane Error window counters for windowed Counter
    ///< Threshold errors detected in RX RSFEC clock domain.            Each
    ///< bit will enable counters which will generate error signals once counters
    ///< reach programmable threshold.        The mapping of indivbsual bits
    ///< is shown below.        [1:0]   - RX Lane 0 Error Window Counter Enable.
    ///< [0]  - Rx Deskew Buffer Single Bit ECC Error window counter Enable.
    ///< [1]  - Rx Deskew Buffer Double Bit ECC Error window counter Enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_en_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_RD_MASK (0x00000003U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_WR_MASK (0x00000003U)


///< Enable register for Per Lane Error window counters for windowed Counter
///< Threshold errors detected in RX RSFEC clock domain.            Each
///< bit will enable counters which will generate error signals once counters
///< reach programmable threshold.        The mapping of indivbsual bits
///< is shown below.        [1:0]   - RX Lane 0 Error Window Counter Enable.
///< [0]  - Rx Deskew Buffer Single Bit ECC Error window counter Enable.
///< [1]  - Rx Deskew Buffer Double Bit ECC Error window counter Enable.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_LN_WNDW_CNT_EN_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_LN_WNDW_CNT_EN_BF_WID ( 2)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_LN_WNDW_CNT_EN_BF_MSK (0x00000003)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_LN_WNDW_CNT_EN_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_ARRAY_INST0 (4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR[4] register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_CNT_CLR
  * Clear Register for Per Lane Error window Counters.
  */

typedef union {
  struct {
    uint32_t LN_WNDW_CNT_CLR : 2;
    ///< Clear register for Per Lane Error window counters for windowed Counter
    ///< Threshold errors detected in RX RSFEC clock domain.            Each
    ///< bit will clear all the counters corresponding per lane window based
    ///< error.         The mapping of bits is same as Per Lane error counter
    ///< enable register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_clr_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_RD_MASK (0x00000003U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_WR_MASK (0x00000003U)


///< Clear register for Per Lane Error window counters for windowed Counter
///< Threshold errors detected in RX RSFEC clock domain.            Each
///< bit will clear all the counters corresponding per lane window based
///< error.         The mapping of bits is same as Per Lane error counter
///< enable register.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_LN_WNDW_CNT_CLR_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_LN_WNDW_CNT_CLR_BF_WID ( 2)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_LN_WNDW_CNT_CLR_BF_MSK (0x00000003)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_LN_WNDW_CNT_CLR_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_ARRAY_INST0 (4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_THRSH[2] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_THRSH
  * Error Threshold Value for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 19;
    ///< Error count Threshold value. Error is generated the current accumulated
    ///< count from alll enabled sub windows matches or exceeds this value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_thrsh_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_RD_MASK (0x0007ffffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_WR_MASK (0x0007ffffU)


///< Error count Threshold value. Error is generated the current accumulated
///< count from alll enabled sub windows matches or exceeds this value.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_WID (19)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_MSK (0x0007FFFF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_ARRAY_INST0 (2)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM[2] register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM
  * Error sub window count for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t WNDW_CNT : 3;
    ///< Each window based error implements 8 16-bit error windows to calculate
    ///< sliding window error count.             This register selects number
    ///< of sub windows enabled for aparticular error type.       3'd0 - Single
    ///< sub window.       3'd1 - 2 sub windows.       3'd2 - 3 sub windows.
    ///< 3'd3 - 4 sub windows.       3'd4 - 5 sub windows.       3'd5 - 6 sub
    ///< windows.       3'd6 - 7 sub windows.       3'd7 - 8 sub windows.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_num_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_RD_MASK (0x00000007U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_WR_MASK (0x00000007U)


///< Each window based error implements 8 16-bit error windows to calculate
///< sliding window error count.             This register selects number
///< of sub windows enabled for aparticular error type.       3'd0 - Single
///< sub window.       3'd1 - 2 sub windows.       3'd2 - 3 sub windows.
///< 3'd3 - 4 sub windows.       3'd4 - 5 sub windows.       3'd5 - 6 sub
///< windows.       3'd6 - 7 sub windows.       3'd7 - 8 sub windows.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_WID ( 3)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_MSK (0x00000007)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_ARRAY_INST0 (2)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER[2] register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER
  * Error sub window Timer Value for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t ERR_TIMER : 16;
    ///< Timer count value for sub error windows. When timer reaches this value
    ///< all sub windows will be updated with previous error window value i.e
    ///< window count slides.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_timer_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_RD_MASK (0x0000ffffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_WR_MASK (0x0000ffffU)


///< Timer count value for sub error windows. When timer reaches this value
///< all sub windows will be updated with previous error window value i.e
///< window count slides.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_WID (16)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_MSK (0x0000FFFF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_ARRAY_INST0 (2)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX[4] register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_CNT_IDX
  * Per Lane Error window Counters Read Index.
  */

typedef union {
  struct {
    uint32_t CNTR_TYPE : 4;
    ///< Selects the counter type for the selected error type.       4'd0 -
    ///< Sub Window 0 Error Counter.       4'd1 - Sub Window 1 Error Counter.
    ///< 4'd2 - Sub Window 2 Error Counter.       4'd3 - Sub Window 3 Error
    ///< Counter.       4'd4 - Sub Window 4 Error Counter.       4'd5 - Sub
    ///< Window 5 Error Counter.       4'd6 - Sub Window 6 Error Counter.
    ///< 4'd7 - Sub Window 7 Error Counter.       4'd8 - Sub Window Timer value.
    ///< 4'd9 - Cumulative Error count.       4'd10-15 - Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_TYPE : 4;
    ///< Selects the error type.             4'd0 - Rx FEC Delay Buffer Single
    ///< Bit ECC Error counters.             4'd1 - Rx FEC Delay Buffer Double
    ///< Bit ECC Error counters.             4'd6-15 - Reserved.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_idx_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_RD_MASK (0x000000ffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_WR_MASK (0x000000ffU)


///< Selects the counter type for the selected error type.       4'd0 -
///< Sub Window 0 Error Counter.       4'd1 - Sub Window 1 Error Counter.
///< 4'd2 - Sub Window 2 Error Counter.       4'd3 - Sub Window 3 Error
///< Counter.       4'd4 - Sub Window 4 Error Counter.       4'd5 - Sub
///< Window 5 Error Counter.       4'd6 - Sub Window 6 Error Counter.
///< 4'd7 - Sub Window 7 Error Counter.       4'd8 - Sub Window Timer value.
///< 4'd9 - Cumulative Error count.       4'd10-15 - Reserved.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_WID ( 4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_MSK (0x0000000F)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_DEF (0x00000000)

///< Selects the error type.             4'd0 - Rx FEC Delay Buffer Single
///< Bit ECC Error counters.             4'd1 - Rx FEC Delay Buffer Double
///< Bit ECC Error counters.             4'd6-15 - Reserved.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_OFF ( 4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_WID ( 4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_MSK (0x000000F0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_ARRAY_INST0 (4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_RX_RSFEC_CLK_CSR_MEM_JESDABC_RX_RSFEC_CLK_CSR_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA[4] register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_rsfec_clk_csr_MEM/jesdabc_rx_rsfec_clk_csr/RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA
  * Per Lane Error window Counters Read Data
  */

typedef union {
  struct {
    uint32_t READ_DATA : 19;
    ///< Read Data corresponding to the counter selected by read index.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_rdata_reg_t;

#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_DEFAULT (0x00000000U)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_RD_MASK (0x0007ffffU)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_WR_MASK (0x0007ffffU)


///< Read Data corresponding to the counter selected by read index.
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_OFF ( 0)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_WID (19)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_MSK (0x0007FFFF)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_DEF (0x00000000)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_ARRAY_INST0 (4)
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_scratch_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_SCRATCH_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_apb_bridge_status_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_APB_BRIDGE_STATUS_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_sts_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_STS_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_EN_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_clr_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_CLR_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_frc_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ALM_FRC_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_sts_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_STS_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_high_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_HIGH_EN_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_low_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_LOW_EN_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_clr_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_CLR_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_frc_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_INTR_FRC_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN2_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN2_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN3_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_en_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_EN3_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_clr_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_clr_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR2_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_clr_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR2_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR3_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_clr_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_CLR3_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_thrsh_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_thrsh_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_THRSH1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_num_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_num_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_timer_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_timer_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_idx_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_idx_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX2_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_idx_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX2_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX3_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_idx_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_IDX3_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA0_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_rdata_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA0_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA1_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_rdata_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA1_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA2_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_rdata_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA2_ADR(_BASE))
#define JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA3_REG(_BASE) ((jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_rdata_reg_t*) JESDABC_RX_RSFEC_CLK_CSR_MEM_RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA3_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    jesdabc_rx_rsfec_clk_csr_mem_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesdabc_rx_rsfec_clk_csr_mem_apb_bridge_status_reg_t APB_BRIDGE_STATUS; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_sts_reg_t RX_RSFEC_CLK_WNDW_ALM_STS; /*< Address offset = 0x10 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_en_reg_t RX_RSFEC_CLK_WNDW_ALM_EN; /*< Address offset = 0x14 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_clr_reg_t RX_RSFEC_CLK_WNDW_ALM_CLR; /*< Address offset = 0x18 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_alm_frc_reg_t RX_RSFEC_CLK_WNDW_ALM_FRC; /*< Address offset = 0x1c */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_sts_reg_t RX_RSFEC_CLK_WNDW_INTR_STS; /*< Address offset = 0x20 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_high_en_reg_t RX_RSFEC_CLK_WNDW_INTR_HIGH_EN; /*< Address offset = 0x24 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_low_en_reg_t RX_RSFEC_CLK_WNDW_INTR_LOW_EN; /*< Address offset = 0x28 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_clr_reg_t RX_RSFEC_CLK_WNDW_INTR_CLR; /*< Address offset = 0x2c */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_intr_frc_reg_t RX_RSFEC_CLK_WNDW_INTR_FRC; /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [76];  /*< Address offset = 0x34 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_en_reg_t RX_RSFEC_CLK_WNDW_ERR_CNT_EN[4]; /*< Address offset = 0x80 */
    const uint8_t        reservedArea2 [48];  /*< Address offset = 0x90 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_clr_reg_t RX_RSFEC_CLK_WNDW_ERR_CNT_CLR[4]; /*< Address offset = 0xc0 */
    const uint8_t        reservedArea3 [48];  /*< Address offset = 0xd0 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_thrsh_reg_t RX_RSFEC_CLK_WNDW_ERR_THRSH[2]; /*< Address offset = 0x100 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_num_reg_t RX_RSFEC_CLK_WNDW_ERR_WNDW_NUM[2]; /*< Address offset = 0x108 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_wndw_timer_reg_t RX_RSFEC_CLK_WNDW_ERR_WNDW_TIMER[2]; /*< Address offset = 0x110 */
    const uint8_t        reservedArea4 [8];   /*< Address offset = 0x118 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_idx_reg_t RX_RSFEC_CLK_WNDW_ERR_CNT_IDX[4]; /*< Address offset = 0x120 */
    const uint8_t        reservedArea5 [16];  /*< Address offset = 0x130 */
    jesdabc_rx_rsfec_clk_csr_mem_rx_rsfec_clk_wndw_err_cnt_rdata_reg_t RX_RSFEC_CLK_WNDW_ERR_CNT_RDATA[4]; /*< Address offset = 0x140 */
} jesdabc_rx_rsfec_clk_csr_t;     // size: 0x0048

// AddressSpace struct pointer
//
#define DLNK_JESDABC0_RX_RSFEC_CLK_CSR ((jesdabc_rx_rsfec_clk_csr_t*) DLNK_JESDABC0_RX_RSFEC_CLK_CSR_BASE)
#define DLNK_JESDABC1_RX_RSFEC_CLK_CSR ((jesdabc_rx_rsfec_clk_csr_t*) DLNK_JESDABC1_RX_RSFEC_CLK_CSR_BASE)
#define DLNK_JESDABC2_RX_RSFEC_CLK_CSR ((jesdabc_rx_rsfec_clk_csr_t*) DLNK_JESDABC2_RX_RSFEC_CLK_CSR_BASE)
#define DLNK_JESDABC3_RX_RSFEC_CLK_CSR ((jesdabc_rx_rsfec_clk_csr_t*) DLNK_JESDABC3_RX_RSFEC_CLK_CSR_BASE)

// ******************************************* /Address Space

#endif      // _JESDABC_RX_RSFEC_CLK_CSR_H_

