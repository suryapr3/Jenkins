#ifndef _CMNANA_POSTDIV_MSG_H_
#define _CMNANA_POSTDIV_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_CMNANA_POSTDIV_BASE  ( 0x06020880 )
#define DLNK_JESD1_PHY_PMA0_CMNANA_POSTDIV_BASE  ( 0x06820880 )
#define DLNK_JESD2_PHY_PMA0_CMNANA_POSTDIV_BASE  ( 0x07020880 )
#define DLNK_JESD3_PHY_PMA0_CMNANA_POSTDIV_BASE  ( 0x07820880 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_OFFSET ( 0x00000000U )
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_OFFSET ( 0x00000004U )
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_OFFSET ( 0x00000008U )
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_OFFSET ( 0x0000000cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_ADR(_BASE) (( ( _BASE ) + ( CMNANA_POSTDIV_MSG_CMNREG_CTRL0_OFFSET ) ))
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_ADR(_BASE) (( ( _BASE ) + ( CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_OFFSET ) ))
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_ADR(_BASE) (( ( _BASE ) + ( CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_OFFSET ) ))
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_ADR(_BASE) (( ( _BASE ) + ( CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief CMNANA_POSTDIV_REGS_MSG_CMNANA_POSTDIV_REGS_CMNREG_CTRL0 register description at address offset 0x0
  *
  * Register default value:        0x00001008
  * Register full path in IP: CMNANA_POSTDIV_regs_MSG/CMNANA_POSTDIV_regs/cmnreg_ctrl0
  * cmnreg_ctrl0
  */

typedef union {
  struct {
    uint32_t REGCMNPLLA_POSTDIV_SWF_AMP_STG1_BYP_EN : 1;
    ///< bypass the regulator by pulling up opamp_stg1 to vcc2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REGCMNPLLA_POSTDIV_SWF_AMP_STG2_BYP_EN : 1;
    ///< bypass the regulator by pulling up opamp_stg2 to vcc2
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t REGCMNPLLA_POSTDIV_SWF_BLEED_TUNE : 3;
    ///< bleeder current for stabiity control
    ///< AccessType="RW" BitOffset="2" ResetValue="0x2"
    uint32_t REGCMNPLLA_POSTDIVSWF_DCMON_SEL : 3;
    ///< dcmon select bits,
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t REGCMNPLLA_POSTDIVSWF_PD_B : 1;
    ///< en input for bias, two opamps and driver
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t REGCMNPLLB_POSTDIV_SWF_AMP_STG1_BYP_EN : 1;
    ///< bypass the regulator by pulling up opamp_stg1 to vcc2
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t REGCMNPLLB_POSTDIV_SWF_AMP_STG2_BYP_EN : 1;
    ///< bypass the regulator by pulling up opamp_stg2 to vcc2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t REGCMNPLLB_POSTDIV_SWF_BLEED_TUNE : 3;
    ///< bleeder current for stabiity control
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t REGCMNPLLB_POSTDIVSWF_DCMON_SEL : 3;
    ///< dcmon select bits,
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t REGCMNPLLB_POSTDIVSWF_PD_B : 1;
    ///< en input for bias, two opamps and driver
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} cmnana_postdiv_msg_cmnreg_ctrl0_reg_t;

#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_DEFAULT (0x00001008U)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_RD_MASK (0x0003ffffU)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_WR_MASK (0x0003ffffU)


///< bypass the regulator by pulling up opamp_stg1 to vcc2
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_OFF ( 0)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_MSK (0x00000001)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_DEF (0x00000000)

///< bypass the regulator by pulling up opamp_stg2 to vcc2
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_OFF ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_MSK (0x00000002)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_DEF (0x00000000)

///< bleeder current for stabiity control
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_BLEED_TUNE_BF_OFF ( 2)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_BLEED_TUNE_BF_WID ( 3)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_BLEED_TUNE_BF_MSK (0x0000001C)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIV_SWF_BLEED_TUNE_BF_DEF (0x00000008)

///< dcmon select bits,
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_DCMON_SEL_BF_OFF ( 5)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_DCMON_SEL_BF_WID ( 3)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_DCMON_SEL_BF_MSK (0x000000E0)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_DCMON_SEL_BF_DEF (0x00000000)

///< en input for bias, two opamps and driver
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_PD_B_BF_OFF ( 8)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_PD_B_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_PD_B_BF_MSK (0x00000100)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLA_POSTDIVSWF_PD_B_BF_DEF (0x00000000)

///< bypass the regulator by pulling up opamp_stg1 to vcc2
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_OFF ( 9)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_MSK (0x00000200)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG1_BYP_EN_BF_DEF (0x00000000)

///< bypass the regulator by pulling up opamp_stg2 to vcc2
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_OFF (10)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_MSK (0x00000400)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_AMP_STG2_BYP_EN_BF_DEF (0x00000000)

///< bleeder current for stabiity control
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_BLEED_TUNE_BF_OFF (11)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_BLEED_TUNE_BF_WID ( 3)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_BLEED_TUNE_BF_MSK (0x00003800)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIV_SWF_BLEED_TUNE_BF_DEF (0x00001000)

///< dcmon select bits,
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_DCMON_SEL_BF_OFF (14)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_DCMON_SEL_BF_WID ( 3)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_DCMON_SEL_BF_MSK (0x0001C000)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_DCMON_SEL_BF_DEF (0x00000000)

///< en input for bias, two opamps and driver
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_PD_B_BF_OFF (17)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_PD_B_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_PD_B_BF_MSK (0x00020000)
#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REGCMNPLLB_POSTDIVSWF_PD_B_BF_DEF (0x00000000)


/** @brief CMNANA_POSTDIV_REGS_MSG_CMNANA_POSTDIV_REGS_CMNPLLADIV_CTRL0 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: CMNANA_POSTDIV_regs_MSG/CMNANA_POSTDIV_regs/cmnplladiv_ctrl0
  * cmnplladiv_ctrl0
  */

typedef union {
  struct {
    uint32_t CMNPLLA_ADIVSWF_DIVRATIO : 9;
    ///< Divide ratio
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNPLLA_ADIVSWF_DIVIDE_BY_0P5_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CMNPLLA_ADIVSWF_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CMNPLLA_ADIVUC_DIVRATIO : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CMNPLLA_ADIVUC_DIVIDE_BY_0P5_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CMNPLLA_ADIVUC_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} cmnana_postdiv_msg_cmnplladiv_ctrl0_reg_t;

#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_DEFAULT (0x00000000U)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_RD_MASK (0x07ff07ffU)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_WR_MASK (0x07ff07ffU)


///< Divide ratio
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVRATIO_BF_OFF ( 0)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVRATIO_BF_WID ( 9)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVRATIO_BF_MSK (0x000001FF)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVRATIO_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVIDE_BY_0P5_EN_BF_OFF ( 9)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVIDE_BY_0P5_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVIDE_BY_0P5_EN_BF_MSK (0x00000200)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_DIVIDE_BY_0P5_EN_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_RST_B_BF_OFF (10)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_RST_B_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_RST_B_BF_MSK (0x00000400)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVSWF_RST_B_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVRATIO_BF_OFF (16)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVRATIO_BF_WID ( 9)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVRATIO_BF_MSK (0x01FF0000)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVRATIO_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVIDE_BY_0P5_EN_BF_OFF (25)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVIDE_BY_0P5_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVIDE_BY_0P5_EN_BF_MSK (0x02000000)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_DIVIDE_BY_0P5_EN_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_RST_B_BF_OFF (26)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_RST_B_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_RST_B_BF_MSK (0x04000000)
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_CMNPLLA_ADIVUC_RST_B_BF_DEF (0x00000000)


/** @brief CMNANA_POSTDIV_REGS_MSG_CMNANA_POSTDIV_REGS_CMNPLLBDIV_CTRL0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: CMNANA_POSTDIV_regs_MSG/CMNANA_POSTDIV_regs/cmnpllbdiv_ctrl0
  * cmnpllbdiv_ctrl0
  */

typedef union {
  struct {
    uint32_t CMNPLLB_ADIVSWF_DIVRATIO : 9;
    ///< Divide ratio
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNPLLB_ADIVSWF_DIVIDE_BY_0P5_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CMNPLLB_ADIVSWF_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CMNPLLB_ADIVUC_DIVRATIO : 9;
    ///< ---
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CMNPLLB_ADIVUC_DIVIDE_BY_0P5_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CMNPLLB_ADIVUC_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} cmnana_postdiv_msg_cmnpllbdiv_ctrl0_reg_t;

#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_DEFAULT (0x00000000U)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_RD_MASK (0x07ff07ffU)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_WR_MASK (0x07ff07ffU)


///< Divide ratio
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVRATIO_BF_OFF ( 0)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVRATIO_BF_WID ( 9)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVRATIO_BF_MSK (0x000001FF)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVRATIO_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVIDE_BY_0P5_EN_BF_OFF ( 9)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVIDE_BY_0P5_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVIDE_BY_0P5_EN_BF_MSK (0x00000200)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_DIVIDE_BY_0P5_EN_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_RST_B_BF_OFF (10)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_RST_B_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_RST_B_BF_MSK (0x00000400)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVSWF_RST_B_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVRATIO_BF_OFF (16)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVRATIO_BF_WID ( 9)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVRATIO_BF_MSK (0x01FF0000)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVRATIO_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVIDE_BY_0P5_EN_BF_OFF (25)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVIDE_BY_0P5_EN_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVIDE_BY_0P5_EN_BF_MSK (0x02000000)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_DIVIDE_BY_0P5_EN_BF_DEF (0x00000000)

#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_RST_B_BF_OFF (26)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_RST_B_BF_WID ( 1)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_RST_B_BF_MSK (0x04000000)
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_CMNPLLB_ADIVUC_RST_B_BF_DEF (0x00000000)


/** @brief CMNANA_POSTDIV_REGS_MSG_CMNANA_POSTDIV_REGS_CMNPOSTDIV_SPARE0 register description at address offset 0xc
  *
  * Register default value:        0x00000080
  * Register full path in IP: CMNANA_POSTDIV_regs_MSG/CMNANA_POSTDIV_regs/cmnpostdiv_spare0
  * cmnpostdiv_spare0
  */

typedef union {
  struct {
    uint32_t CMN_POSTDIV_SPARE : 8;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} cmnana_postdiv_msg_cmnpostdiv_spare0_reg_t;

#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_DEFAULT (0x00000080U)
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_RD_MASK (0x000000ffU)
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_WR_MASK (0x000000ffU)


#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_CMN_POSTDIV_SPARE_BF_OFF ( 0)
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_CMN_POSTDIV_SPARE_BF_WID ( 8)
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_CMN_POSTDIV_SPARE_BF_MSK (0x000000FF)
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_CMN_POSTDIV_SPARE_BF_DEF (0x00000080)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define CMNANA_POSTDIV_MSG_CMNREG_CTRL0_REG(_BASE) ((cmnana_postdiv_msg_cmnreg_ctrl0_reg_t*) CMNANA_POSTDIV_MSG_CMNREG_CTRL0_ADR(_BASE))
#define CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_REG(_BASE) ((cmnana_postdiv_msg_cmnplladiv_ctrl0_reg_t*) CMNANA_POSTDIV_MSG_CMNPLLADIV_CTRL0_ADR(_BASE))
#define CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_REG(_BASE) ((cmnana_postdiv_msg_cmnpllbdiv_ctrl0_reg_t*) CMNANA_POSTDIV_MSG_CMNPLLBDIV_CTRL0_ADR(_BASE))
#define CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_REG(_BASE) ((cmnana_postdiv_msg_cmnpostdiv_spare0_reg_t*) CMNANA_POSTDIV_MSG_CMNPOSTDIV_SPARE0_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    cmnana_postdiv_msg_cmnreg_ctrl0_reg_t CMNREG_CTRL0; /*< Address offset = 0x0 */
    cmnana_postdiv_msg_cmnplladiv_ctrl0_reg_t CMNPLLADIV_CTRL0; /*< Address offset = 0x4 */
    cmnana_postdiv_msg_cmnpllbdiv_ctrl0_reg_t CMNPLLBDIV_CTRL0; /*< Address offset = 0x8 */
    cmnana_postdiv_msg_cmnpostdiv_spare0_reg_t CMNPOSTDIV_SPARE0; /*< Address offset = 0xc */
} cmnana_postdiv_msg_t;     // size: 0x0010

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_CMNANA_POSTDIV  ((cmnana_postdiv_msg_t*) DLNK_JESD0_PHY_PMA0_CMNANA_POSTDIV_BASE)
#define DLNK_JESD1_PHY_PMA0_CMNANA_POSTDIV  ((cmnana_postdiv_msg_t*) DLNK_JESD1_PHY_PMA0_CMNANA_POSTDIV_BASE)
#define DLNK_JESD2_PHY_PMA0_CMNANA_POSTDIV  ((cmnana_postdiv_msg_t*) DLNK_JESD2_PHY_PMA0_CMNANA_POSTDIV_BASE)
#define DLNK_JESD3_PHY_PMA0_CMNANA_POSTDIV  ((cmnana_postdiv_msg_t*) DLNK_JESD3_PHY_PMA0_CMNANA_POSTDIV_BASE)

// ******************************************* /Address Space

#endif      // _CMNANA_POSTDIV_MSG_H_

