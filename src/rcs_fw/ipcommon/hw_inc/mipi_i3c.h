#ifndef _MIPI_I3C_H_
#define _MIPI_I3C_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_I3CM0_MIPI_BASE   ( 0x00258000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define MIPI_I3C_DEVICE_CTRL_OFFSET  ( 0x00000000U )
#define MIPI_I3C_DEVICE_ADDR_OFFSET  ( 0x00000004U )
#define MIPI_I3C_HW_CAPABILITY_OFFSET ( 0x00000008U )
#define MIPI_I3C_CMD_QUE_PORT_XXX_OFFSET ( 0x0000000cU )
#define MIPI_I3C_RSP_QUE_PORT_OFFSET ( 0x00000010U )
#define MIPI_I3C_RX_TX_DATA_PORT_OFFSET ( 0x00000014U )
#define MIPI_I3C_IBI_DATA_STAT_OFFSET ( 0x00000018U )
#define MIPI_I3C_QUE_THLD_CTRL_OFFSET ( 0x0000001cU )
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_OFFSET ( 0x00000020U )
#define MIPI_I3C_IBI_QUE_CTRL_OFFSET ( 0x00000024U )
#define MIPI_I3C_RST_CTRL_OFFSET   ( 0x00000034U )
#define MIPI_I3C_SLV_EVENT_STAT_OFFSET ( 0x00000038U )
#define MIPI_I3C_INTR_STAT_OFFSET  ( 0x0000003cU )
#define MIPI_I3C_INTR_STAT_EN_OFFSET ( 0x00000040U )
#define MIPI_I3C_INTR_SIGNAL_EN_OFFSET ( 0x00000044U )
#define MIPI_I3C_INTR_FORCE_OFFSET   ( 0x00000048U )
#define MIPI_I3C_QUE_STAT_LVL_OFFSET ( 0x0000004cU )
#define MIPI_I3C_DATA_BUFF_STAT_LVL_OFFSET ( 0x00000050U )
#define MIPI_I3C_PRESENT_STATE_OFFSET ( 0x00000054U )
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_OFFSET ( 0x0000005cU )
#define MIPI_I3C_DEV_CHAR_TBL_PTR_OFFSET ( 0x00000060U )
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_OFFSET ( 0x0000006cU )
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_OFFSET ( 0x000000b0U )
#define MIPI_I3C_SCL_I3C_OD_TIMING_OFFSET ( 0x000000b4U )
#define MIPI_I3C_SCL_I3C_PP_TIMING_OFFSET ( 0x000000b8U )
#define MIPI_I3C_SCL_I2C_FM_TIMING_OFFSET ( 0x000000bcU )
#define MIPI_I3C_SCL_I2C_FMP_TIMING_OFFSET ( 0x000000c0U )
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_OFFSET ( 0x000000c8U )
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_OFFSET ( 0x000000ccU )
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_OFFSET ( 0x000000d0U )
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_OFFSET ( 0x000000d4U )
#define MIPI_I3C_VER_ID_OFFSET   ( 0x000000e0U )
#define MIPI_I3C_VER_TYPE_OFFSET ( 0x000000e4U )
#define MIPI_I3C_QUE_SIZE_CAPABILITY_OFFSET ( 0x000000e8U )
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_OFFSET ( 0x00000200U )
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_OFFSET ( 0x00000204U )
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_OFFSET ( 0x00000208U )
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_OFFSET ( 0x0000020cU )
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_OFFSET ( 0x00000210U )
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_OFFSET ( 0x00000214U )
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_OFFSET ( 0x00000218U )
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_OFFSET ( 0x0000021cU )
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_OFFSET ( 0x00000220U )
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_OFFSET ( 0x00000224U )
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_OFFSET ( 0x00000228U )
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_OFFSET ( 0x0000022cU )
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_OFFSET ( 0x00000230U )
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_OFFSET ( 0x00000234U )
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_OFFSET ( 0x00000238U )
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_OFFSET ( 0x0000023cU )
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_OFFSET ( 0x00000240U )
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_OFFSET ( 0x00000244U )
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_OFFSET ( 0x00000248U )
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_OFFSET ( 0x0000024cU )
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_OFFSET ( 0x00000250U )
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_OFFSET ( 0x00000254U )
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_OFFSET ( 0x00000258U )
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_OFFSET ( 0x0000025cU )
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_OFFSET ( 0x00000260U )
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_OFFSET ( 0x00000264U )
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_OFFSET ( 0x00000268U )
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_OFFSET ( 0x0000026cU )
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_OFFSET ( 0x00000270U )
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_OFFSET ( 0x00000274U )
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_OFFSET ( 0x00000278U )
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_OFFSET ( 0x0000027cU )
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_OFFSET ( 0x00000280U )
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_OFFSET ( 0x00000284U )
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_OFFSET ( 0x00000288U )
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_OFFSET ( 0x0000028cU )
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_OFFSET ( 0x00000290U )
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_OFFSET ( 0x00000294U )
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_OFFSET ( 0x00000298U )
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_OFFSET ( 0x0000029cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define MIPI_I3C_DEVICE_CTRL_ADR     (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEVICE_CTRL_OFFSET ) ))
#define MIPI_I3C_DEVICE_ADDR_ADR     (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEVICE_ADDR_OFFSET ) ))
#define MIPI_I3C_HW_CAPABILITY_ADR   (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_HW_CAPABILITY_OFFSET ) ))
#define MIPI_I3C_CMD_QUE_PORT_XXX_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_CMD_QUE_PORT_XXX_OFFSET ) ))
#define MIPI_I3C_RSP_QUE_PORT_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_RSP_QUE_PORT_OFFSET ) ))
#define MIPI_I3C_RX_TX_DATA_PORT_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_RX_TX_DATA_PORT_OFFSET ) ))
#define MIPI_I3C_IBI_DATA_STAT_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_IBI_DATA_STAT_OFFSET ) ))
#define MIPI_I3C_QUE_THLD_CTRL_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_QUE_THLD_CTRL_OFFSET ) ))
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DATA_BUFF_THLD_CTRL_OFFSET ) ))
#define MIPI_I3C_IBI_QUE_CTRL_ADR  (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_IBI_QUE_CTRL_OFFSET ) ))
#define MIPI_I3C_RST_CTRL_ADR      (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_RST_CTRL_OFFSET ) ))
#define MIPI_I3C_SLV_EVENT_STAT_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SLV_EVENT_STAT_OFFSET ) ))
#define MIPI_I3C_INTR_STAT_ADR     (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_INTR_STAT_OFFSET ) ))
#define MIPI_I3C_INTR_STAT_EN_ADR  (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_INTR_STAT_EN_OFFSET ) ))
#define MIPI_I3C_INTR_SIGNAL_EN_ADR  (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_INTR_SIGNAL_EN_OFFSET ) ))
#define MIPI_I3C_INTR_FORCE_ADR      (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_INTR_FORCE_OFFSET ) ))
#define MIPI_I3C_QUE_STAT_LVL_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_QUE_STAT_LVL_OFFSET ) ))
#define MIPI_I3C_DATA_BUFF_STAT_LVL_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DATA_BUFF_STAT_LVL_OFFSET ) ))
#define MIPI_I3C_PRESENT_STATE_ADR   (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_PRESENT_STATE_OFFSET ) ))
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEVICE_ADDR_TBL_PTR_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL_PTR_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL_PTR_OFFSET ) ))
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_VENDOR_SPECIFIC_PTR_OFFSET ) ))
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEVICE_CTRL_EXTENDED_OFFSET ) ))
#define MIPI_I3C_SCL_I3C_OD_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SCL_I3C_OD_TIMING_OFFSET ) ))
#define MIPI_I3C_SCL_I3C_PP_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SCL_I3C_PP_TIMING_OFFSET ) ))
#define MIPI_I3C_SCL_I2C_FM_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SCL_I2C_FM_TIMING_OFFSET ) ))
#define MIPI_I3C_SCL_I2C_FMP_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SCL_I2C_FMP_TIMING_OFFSET ) ))
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SCL_EXT_LCNT_TIMING_OFFSET ) ))
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_OFFSET ) ))
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_SDA_HOLD_DLY_TIMING_OFFSET ) ))
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_BUS_FREE_AVAIL_TIMING_OFFSET ) ))
#define MIPI_I3C_VER_ID_ADR      (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_VER_ID_OFFSET ) ))
#define MIPI_I3C_VER_TYPE_ADR    (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_VER_TYPE_OFFSET ) ))
#define MIPI_I3C_QUE_SIZE_CAPABILITY_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_QUE_SIZE_CAPABILITY_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL1_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL1_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL1_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL1_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL2_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL2_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL2_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL2_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL3_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL3_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL3_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL3_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL4_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL4_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL4_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL4_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL5_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL5_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL5_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL5_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL6_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL6_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL6_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL6_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL7_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL7_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL7_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL7_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL8_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL8_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL8_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_CHAR_TBL8_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC1_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC2_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC3_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC4_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC5_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC6_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC7_OFFSET ) ))
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_ADR (( ( RCS_I3CM0_MIPI_BASE ) + ( MIPI_I3C_DEV_ADDR_TBL_LOC8_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief MIPI_I3C_REG_DEVICE_CTRL register description at address offset 0x0
  *
  * Register default value:        0x00000101
  * Register full path in IP: mipi_i3c/reg/DEVICE_CTRL
  * Device Control Register
  */

typedef union {
  struct {
    uint32_t IBA_INCLUDE : 1;
    ///< I3C Broadcast Address include. This bit is used in master mode of
    ///< operation. This bit is used to include I3C broadcast address (0x7E)
    ///< for private transfer. Note: If I3C broadcast address is not included
    ///< for the private transfers, In-band Interrupts (IBI) driven from Slaves
    ///< may not win address arbitration. Hence, the IBIs will get delayed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t I2C_SLAVE_PRESENT : 1;
    ///< I2C Slave Present This bit is used in master mode of operation. This
    ///< Bit indicates whether any Legacy I2C Devices are present in the system.
    ///< In HDR mode, this field is used to select TSL over TSP in mixed bus
    ///< configuration.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t HOT_JOIN_CTRL : 1;
    ///< Hot-Join Ack/Nack Control This bit is used in master mode of operation.
    ///< This bit acts as global control to ACK/NACK the Hot-Join Request from
    ///< the devices. The DWC_mipi_i3c Master will ACK/NACK the Hot-Join request
    ///< from other devices connected on the I3C Bus, based on programming
    ///< of this bit. - 0: ACK the Hot-join request. - 1: NACK and send broadcast
    ///< CCC to disable Hot-join.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t DMA_ENABLE : 1;
    ///< DMA Handshake Interface Enable. This bit is used to enable or disable
    ///< the DMA Handshaking interface and is applicable to both Master and
    ///< Slave mode of operation. - 1: Enables the DMA handshake control to
    ///< interact with external DMA. - 0: The DMA handshake control has no
    ///< significance.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t ABORT : 1;
    ///< DWC_mipi_i3c Abort. This bit is used in master mode of operation.
    ///< This bit allows the controller to relinquish the I3C Bus before completing
    ///< the issued transfer. In response to an ABORT request, the controller
    ///< issues the STOP condition after the complete data byte is transferred
    ///< or received. This bit is auto-cleared once the transfer is aborted
    ///< and controller issues a 'Transfer Abort' interrupt.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t RESUME : 1;
    ///< DWC_mipi_i3c Resume. This bit is used to resume the Controller after
    ///< it goes to Halt state. In the master mode of operation the controller
    ///< goes to the halt state (as indicated in PRESENT_STATE Register) due
    ///< to any type of error in the transfer (the type of error is indicated
    ///< by ERR_STATUS field in the RESPONSE_QUEUE_PORT register). After the
    ///< controller has gone to halt state, the application has to write 1'b1
    ///< to this bit to resume the controller. This bit is auto-cleared once
    ///< the controller resumes the transfers by initiating the next command.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t ENABLE : 1;
    ///< Controls whether or not DWC_mipi_i3c is enabled. - 1: Enables the
    ///< DWC_mipi_i3c controller. - 0: Disables the DWC_mipi_i3c controller.
    ///< In Master mode of operation, software can Disable DWC_mipi_i3c while
    ///< it is active. However, the controller may not get Disabled immediately
    ///< and will be 'Disabled' after commands in the Command queue (if any)
    ///< are executed leading to a STOP condition on the bus and Master FSM
    ///< is in IDLE state (as indicated by PRESENT_STATE Register).
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_device_ctrl_reg_t;

#define MIPI_I3C_DEVICE_CTRL_DEFAULT (0x00000101U)
#define MIPI_I3C_DEVICE_CTRL_RD_MASK (0xf0000181U)
#define MIPI_I3C_DEVICE_CTRL_WR_MASK (0xf0000181U)


///< I3C Broadcast Address include. This bit is used in master mode of
///< operation. This bit is used to include I3C broadcast address (0x7E)
///< for private transfer. Note: If I3C broadcast address is not included
///< for the private transfers, In-band Interrupts (IBI) driven from Slaves
///< may not win address arbitration. Hence, the IBIs will get delayed.
#define MIPI_I3C_DEVICE_CTRL_IBA_INCLUDE_BF_OFF ( 0)
#define MIPI_I3C_DEVICE_CTRL_IBA_INCLUDE_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_IBA_INCLUDE_BF_MSK (0x00000001)
#define MIPI_I3C_DEVICE_CTRL_IBA_INCLUDE_BF_DEF (0x00000001)

///< I2C Slave Present This bit is used in master mode of operation. This
///< Bit indicates whether any Legacy I2C Devices are present in the system.
///< In HDR mode, this field is used to select TSL over TSP in mixed bus
///< configuration.
#define MIPI_I3C_DEVICE_CTRL_I2C_SLAVE_PRESENT_BF_OFF ( 7)
#define MIPI_I3C_DEVICE_CTRL_I2C_SLAVE_PRESENT_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_I2C_SLAVE_PRESENT_BF_MSK (0x00000080)
#define MIPI_I3C_DEVICE_CTRL_I2C_SLAVE_PRESENT_BF_DEF (0x00000000)

///< Hot-Join Ack/Nack Control This bit is used in master mode of operation.
///< This bit acts as global control to ACK/NACK the Hot-Join Request from
///< the devices. The DWC_mipi_i3c Master will ACK/NACK the Hot-Join request
///< from other devices connected on the I3C Bus, based on programming
///< of this bit. - 0: ACK the Hot-join request. - 1: NACK and send broadcast
///< CCC to disable Hot-join.
#define MIPI_I3C_DEVICE_CTRL_HOT_JOIN_CTRL_BF_OFF ( 8)
#define MIPI_I3C_DEVICE_CTRL_HOT_JOIN_CTRL_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_HOT_JOIN_CTRL_BF_MSK (0x00000100)
#define MIPI_I3C_DEVICE_CTRL_HOT_JOIN_CTRL_BF_DEF (0x00000100)

///< DMA Handshake Interface Enable. This bit is used to enable or disable
///< the DMA Handshaking interface and is applicable to both Master and
///< Slave mode of operation. - 1: Enables the DMA handshake control to
///< interact with external DMA. - 0: The DMA handshake control has no
///< significance.
#define MIPI_I3C_DEVICE_CTRL_DMA_EN_BF_OFF (28)
#define MIPI_I3C_DEVICE_CTRL_DMA_EN_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_DMA_EN_BF_MSK (0x10000000)
#define MIPI_I3C_DEVICE_CTRL_DMA_EN_BF_DEF (0x00000000)

///< DWC_mipi_i3c Abort. This bit is used in master mode of operation.
///< This bit allows the controller to relinquish the I3C Bus before completing
///< the issued transfer. In response to an ABORT request, the controller
///< issues the STOP condition after the complete data byte is transferred
///< or received. This bit is auto-cleared once the transfer is aborted
///< and controller issues a 'Transfer Abort' interrupt.
#define MIPI_I3C_DEVICE_CTRL_ABORT_BF_OFF (29)
#define MIPI_I3C_DEVICE_CTRL_ABORT_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_ABORT_BF_MSK (0x20000000)
#define MIPI_I3C_DEVICE_CTRL_ABORT_BF_DEF (0x00000000)

///< DWC_mipi_i3c Resume. This bit is used to resume the Controller after
///< it goes to Halt state. In the master mode of operation the controller
///< goes to the halt state (as indicated in PRESENT_STATE Register) due
///< to any type of error in the transfer (the type of error is indicated
///< by ERR_STATUS field in the RESPONSE_QUEUE_PORT register). After the
///< controller has gone to halt state, the application has to write 1'b1
///< to this bit to resume the controller. This bit is auto-cleared once
///< the controller resumes the transfers by initiating the next command.
#define MIPI_I3C_DEVICE_CTRL_RESUME_BF_OFF (30)
#define MIPI_I3C_DEVICE_CTRL_RESUME_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_RESUME_BF_MSK (0x40000000)
#define MIPI_I3C_DEVICE_CTRL_RESUME_BF_DEF (0x00000000)

///< Controls whether or not DWC_mipi_i3c is enabled. - 1: Enables the
///< DWC_mipi_i3c controller. - 0: Disables the DWC_mipi_i3c controller.
///< In Master mode of operation, software can Disable DWC_mipi_i3c while
///< it is active. However, the controller may not get Disabled immediately
///< and will be 'Disabled' after commands in the Command queue (if any)
///< are executed leading to a STOP condition on the bus and Master FSM
///< is in IDLE state (as indicated by PRESENT_STATE Register).
#define MIPI_I3C_DEVICE_CTRL_EN_BF_OFF (31)
#define MIPI_I3C_DEVICE_CTRL_EN_BF_WID ( 1)
#define MIPI_I3C_DEVICE_CTRL_EN_BF_MSK (0x80000000)
#define MIPI_I3C_DEVICE_CTRL_EN_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEVICE_ADDR register description at address offset 0x4
  *
  * Register default value:        0x80000000
  * Register full path in IP: mipi_i3c/reg/DEVICE_ADDR
  * Device Address Register
  */

typedef union {
  struct {
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t DYNAMIC_ADDR : 7;
    ///< Device Dynamic Address. This field is used to program the Device Dynamic
    ///< Address. The Controller uses this address for I3C transfers. - In
    ///< Main Master mode, the user/application has to program the Dynamic
    ///< Address through the Slave interface as it self-assigns its Dynamic
    ///< Address. - In all other modes, the Main Master assigns this address
    ///< during ENTDAA or SETDASA mechanism.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t DYNAMIC_ADDR_VALID : 1;
    ///< Dynamic Address Valid This bit is used to control whether the DYNAMIC_ADDR
    ///< is valid or not. - In I3C Main Master mode, the user sets this bit
    ///< to 1 as it self-assigns its dynamic address. - In all other operation
    ///< modes, the Controller sets this bit to 1 when Main Master assigns
    ///< the Dynamic address during ENTDAA or SETDASA mechanism.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x1"
  } ;
  uint32_t value;
} mipi_i3c_device_addr_reg_t;

#define MIPI_I3C_DEVICE_ADDR_DEFAULT (0x80000000U)
#define MIPI_I3C_DEVICE_ADDR_RD_MASK (0x807f0000U)
#define MIPI_I3C_DEVICE_ADDR_WR_MASK (0x807f0000U)


///< Device Dynamic Address. This field is used to program the Device Dynamic
///< Address. The Controller uses this address for I3C transfers. - In
///< Main Master mode, the user/application has to program the Dynamic
///< Address through the Slave interface as it self-assigns its Dynamic
///< Address. - In all other modes, the Main Master assigns this address
///< during ENTDAA or SETDASA mechanism.
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_BF_MSK (0x007F0000)
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< Dynamic Address Valid This bit is used to control whether the DYNAMIC_ADDR
///< is valid or not. - In I3C Main Master mode, the user sets this bit
///< to 1 as it self-assigns its dynamic address. - In all other operation
///< modes, the Controller sets this bit to 1 when Main Master assigns
///< the Dynamic address during ENTDAA or SETDASA mechanism.
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_VALID_BF_OFF (31)
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_VALID_BF_WID ( 1)
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_VALID_BF_MSK (0x80000000)
#define MIPI_I3C_DEVICE_ADDR_DYNAMIC_ADDR_VALID_BF_DEF (0x80000000)


/** @brief MIPI_I3C_REG_HW_CAPABILITY register description at address offset 0x8
  *
  * Register default value:        0x00034081
  * Register full path in IP: mipi_i3c/reg/HW_CAPABILITY
  * Hardware Capability register
  */

typedef union {
  struct {
    uint32_t DEVICE_ROLE_CONFIG : 3;
    ///< Reflects the IC_DEVICE_ROLE Configurable Parameter. Specifies the
    ///< configured role of DWC_mipi_i3c controller - 1 : Master Only - 2 :
    ///< Programmable Master-Slave - 3 : Secondary Master - 4 : Slave Only
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t HDR_DDR_EN : 1;
    ///< Reflects the IC_SPEED_HDR_DDR Configurable Parameter. Specifies the
    ///< Controllers capability to perform HDR-DDR transfers. - 0 : HDR-DDR
    ///< not supported - 1 : HDR-DDR supported
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t HDR_TS_EN : 1;
    ///< Reflects the IC_SPEED_HDR_TS Configurable Parameter. Specifies the
    ///< Controllers capability to perform HDR-TS transfers. - 0 : HDR-TS not
    ///< supported - 1 : HDR-TS supported
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t CLOCK_PERIOD : 6;
    ///< Reflects the IC_CLK_PERIOD Configurable Parameter
    ///< AccessType="RO" BitOffset="5" ResetValue="0x4"
    uint32_t HDR_TX_CLOCK_PERIOD : 6;
    ///< Reflects the IC_HDR_TX_CLK_PERIOD Configurable Parameter.
    ///< AccessType="RO" BitOffset="11" ResetValue="0x28"
    uint32_t DMA_EN : 1;
    ///< Reflects the IC_HAS_DMA Configurable Parameter. Specifies whether
    ///< controller is configured to have DMA handshaking interface.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x1"
    uint32_t SLV_HJ_CAP : 1;
    ///< Reflects the IC_SLV_HJ Configurable Parameter. Specifies slave's capability
    ///< to initiate Hot-join request.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
    uint32_t SLV_IBI_CAP : 1;
    ///< Reflects the IC_SLV_IBI Configurable Parameter. Specifies slave's
    ///< capability to initiate slave interrupt requests.
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_hw_capability_reg_t;

#define MIPI_I3C_HW_CAPABILITY_DEFAULT (0x00034081U)
#define MIPI_I3C_HW_CAPABILITY_RD_MASK (0x000fffffU)
#define MIPI_I3C_HW_CAPABILITY_WR_MASK (0x00000000U)


///< Reflects the IC_DEVICE_ROLE Configurable Parameter. Specifies the
///< configured role of DWC_mipi_i3c controller - 1 : Master Only - 2 :
///< Programmable Master-Slave - 3 : Secondary Master - 4 : Slave Only
#define MIPI_I3C_HW_CAPABILITY_DEVICE_ROLE_CFG_BF_OFF ( 0)
#define MIPI_I3C_HW_CAPABILITY_DEVICE_ROLE_CFG_BF_WID ( 3)
#define MIPI_I3C_HW_CAPABILITY_DEVICE_ROLE_CFG_BF_MSK (0x00000007)
#define MIPI_I3C_HW_CAPABILITY_DEVICE_ROLE_CFG_BF_DEF (0x00000001)

///< Reflects the IC_SPEED_HDR_DDR Configurable Parameter. Specifies the
///< Controllers capability to perform HDR-DDR transfers. - 0 : HDR-DDR
///< not supported - 1 : HDR-DDR supported
#define MIPI_I3C_HW_CAPABILITY_HDR_DDR_EN_BF_OFF ( 3)
#define MIPI_I3C_HW_CAPABILITY_HDR_DDR_EN_BF_WID ( 1)
#define MIPI_I3C_HW_CAPABILITY_HDR_DDR_EN_BF_MSK (0x00000008)
#define MIPI_I3C_HW_CAPABILITY_HDR_DDR_EN_BF_DEF (0x00000000)

///< Reflects the IC_SPEED_HDR_TS Configurable Parameter. Specifies the
///< Controllers capability to perform HDR-TS transfers. - 0 : HDR-TS not
///< supported - 1 : HDR-TS supported
#define MIPI_I3C_HW_CAPABILITY_HDR_TS_EN_BF_OFF ( 4)
#define MIPI_I3C_HW_CAPABILITY_HDR_TS_EN_BF_WID ( 1)
#define MIPI_I3C_HW_CAPABILITY_HDR_TS_EN_BF_MSK (0x00000010)
#define MIPI_I3C_HW_CAPABILITY_HDR_TS_EN_BF_DEF (0x00000000)

///< Reflects the IC_CLK_PERIOD Configurable Parameter
#define MIPI_I3C_HW_CAPABILITY_CLK_PERIOD_BF_OFF ( 5)
#define MIPI_I3C_HW_CAPABILITY_CLK_PERIOD_BF_WID ( 6)
#define MIPI_I3C_HW_CAPABILITY_CLK_PERIOD_BF_MSK (0x000007E0)
#define MIPI_I3C_HW_CAPABILITY_CLK_PERIOD_BF_DEF (0x00000080)

///< Reflects the IC_HDR_TX_CLK_PERIOD Configurable Parameter.
#define MIPI_I3C_HW_CAPABILITY_HDR_TX_CLK_PERIOD_BF_OFF (11)
#define MIPI_I3C_HW_CAPABILITY_HDR_TX_CLK_PERIOD_BF_WID ( 6)
#define MIPI_I3C_HW_CAPABILITY_HDR_TX_CLK_PERIOD_BF_MSK (0x0001F800)
#define MIPI_I3C_HW_CAPABILITY_HDR_TX_CLK_PERIOD_BF_DEF (0x00014000)

///< Reflects the IC_HAS_DMA Configurable Parameter. Specifies whether
///< controller is configured to have DMA handshaking interface.
#define MIPI_I3C_HW_CAPABILITY_DMA_EN_BF_OFF (17)
#define MIPI_I3C_HW_CAPABILITY_DMA_EN_BF_WID ( 1)
#define MIPI_I3C_HW_CAPABILITY_DMA_EN_BF_MSK (0x00020000)
#define MIPI_I3C_HW_CAPABILITY_DMA_EN_BF_DEF (0x00020000)

///< Reflects the IC_SLV_HJ Configurable Parameter. Specifies slave's capability
///< to initiate Hot-join request.
#define MIPI_I3C_HW_CAPABILITY_SLV_HJ_CAP_BF_OFF (18)
#define MIPI_I3C_HW_CAPABILITY_SLV_HJ_CAP_BF_WID ( 1)
#define MIPI_I3C_HW_CAPABILITY_SLV_HJ_CAP_BF_MSK (0x00040000)
#define MIPI_I3C_HW_CAPABILITY_SLV_HJ_CAP_BF_DEF (0x00000000)

///< Reflects the IC_SLV_IBI Configurable Parameter. Specifies slave's
///< capability to initiate slave interrupt requests.
#define MIPI_I3C_HW_CAPABILITY_SLV_IBI_CAP_BF_OFF (19)
#define MIPI_I3C_HW_CAPABILITY_SLV_IBI_CAP_BF_WID ( 1)
#define MIPI_I3C_HW_CAPABILITY_SLV_IBI_CAP_BF_MSK (0x00080000)
#define MIPI_I3C_HW_CAPABILITY_SLV_IBI_CAP_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_COMMAND_QUEUE_PORT_XXX register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/COMMAND_QUEUE_PORT_XXX
  * COMMAND_QUEUE_PORT_XXX
  */

typedef union {
  struct {
    uint32_t CMD_ATTR : 3;
    ///< Command Attribute. Defines the Command Type and its Bit-Field Format.
    ///< 0: Transfer Command   1: Transfer Argument   2: Short Data Argument
    ///< 3: Address Assignment Command   4-7: Reserved   Values:   0x0 (TRANSFER_CMD):
    ///< Transfer Command   0x1 (TRANSFER_ARG): Transfer Argument   0x2 (SHORT_DATA_ARG):
    ///< Short Data Argument   0x3 (ADDR_ASSGN_CMD): Address Assignment
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t CMD_REGS : 29;
    ///< The defintion of thes registers are defined in the mipi standard and
    ///< are CMD dependent.
    ///< AccessType="WO" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_cmd_que_port_xxx_reg_t;

#define MIPI_I3C_CMD_QUE_PORT_XXX_DEFAULT (0x00000000U)
#define MIPI_I3C_CMD_QUE_PORT_XXX_RD_MASK (0x00000000U)
#define MIPI_I3C_CMD_QUE_PORT_XXX_WR_MASK (0xffffffffU)


///< Command Attribute. Defines the Command Type and its Bit-Field Format.
///< 0: Transfer Command   1: Transfer Argument   2: Short Data Argument
///< 3: Address Assignment Command   4-7: Reserved   Values:   0x0 (TRANSFER_CMD):
///< Transfer Command   0x1 (TRANSFER_ARG): Transfer Argument   0x2 (SHORT_DATA_ARG):
///< Short Data Argument   0x3 (ADDR_ASSGN_CMD): Address Assignment
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_ATTR_BF_OFF ( 0)
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_ATTR_BF_WID ( 3)
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_ATTR_BF_MSK (0x00000007)
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_ATTR_BF_DEF (0x00000000)

///< The defintion of thes registers are defined in the mipi standard and
///< are CMD dependent.
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_BF_OFF ( 3)
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_BF_WID (29)
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_BF_MSK (0xFFFFFFF8)
#define MIPI_I3C_CMD_QUE_PORT_XXX_CMD_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_RESPONSE_QUEUE_PORT register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/RESPONSE_QUEUE_PORT
  * RESPONSE_QUEUE_PORT
  */

typedef union {
  struct {
    uint32_t RESPONSE : 32;
    ///< 32 bit Response
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_rsp_que_port_reg_t;

#define MIPI_I3C_RSP_QUE_PORT_DEFAULT (0x00000000U)
#define MIPI_I3C_RSP_QUE_PORT_RD_MASK (0xffffffffU)
#define MIPI_I3C_RSP_QUE_PORT_WR_MASK (0x00000000U)


///< 32 bit Response
#define MIPI_I3C_RSP_QUE_PORT_RSP_BF_OFF ( 0)
#define MIPI_I3C_RSP_QUE_PORT_RSP_BF_WID (32)
#define MIPI_I3C_RSP_QUE_PORT_RSP_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_RSP_QUE_PORT_RSP_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_RX_TX_DATA_PORT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/RX_TX_DATA_PORT
  * TX_RX_DATA_PORT
  */

typedef union {
  struct {
    uint32_t RX_TX_DATA_PORT : 32;
    ///< </br>  The Receive data port is mapped to the Rx-Data Buffer. The
    ///< Receive data is always packed in 4-byte aligned and stored in the
    ///< Rx-Data Buffer. If the command length is not aligned to the 4-bytes,
    ///< then there will be unused bytes in the end location of the transfer
    ///< bytes. </br>  </br>  The Transmit Data port is mapped to the Tx-Data
    ///< Buffer. The transmit data should always be packed in 4-byte aligned
    ///< and written to the Transmit data port register. If the Command length
    ///< is not aligned to the 4-bytes, then there will be unused bytes in
    ///< the end location of the transfer bytes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_rx_tx_data_port_reg_t;

#define MIPI_I3C_RX_TX_DATA_PORT_DEFAULT (0x00000000U)
#define MIPI_I3C_RX_TX_DATA_PORT_RD_MASK (0xffffffffU)
#define MIPI_I3C_RX_TX_DATA_PORT_WR_MASK (0xffffffffU)


///< </br>  The Receive data port is mapped to the Rx-Data Buffer. The
///< Receive data is always packed in 4-byte aligned and stored in the
///< Rx-Data Buffer. If the command length is not aligned to the 4-bytes,
///< then there will be unused bytes in the end location of the transfer
///< bytes. </br>  </br>  The Transmit Data port is mapped to the Tx-Data
///< Buffer. The transmit data should always be packed in 4-byte aligned
///< and written to the Transmit data port register. If the Command length
///< is not aligned to the 4-bytes, then there will be unused bytes in
///< the end location of the transfer bytes.
#define MIPI_I3C_RX_TX_DATA_PORT_RX_TX_DATA_PORT_BF_OFF ( 0)
#define MIPI_I3C_RX_TX_DATA_PORT_RX_TX_DATA_PORT_BF_WID (32)
#define MIPI_I3C_RX_TX_DATA_PORT_RX_TX_DATA_PORT_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_RX_TX_DATA_PORT_RX_TX_DATA_PORT_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_IBI_DATA_STATUS register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/IBI_DATA_STATUS
  * IBI_DATA_STATUS
  */

typedef union {
  struct {
    uint32_t IBI_DATA_STATUS : 32;
    ///< </br>  -------------------------------------------------------------------
    ///< </br>  DATA: </br>  This register is mapped to the IBI Queue.The IBI
    ///< Data is always packed in 4-byte aligned and put to the IBI Queue.
    ///< If the incoming data is not aligned to the 4-bytes, then there will
    ///< be unused bytes in the end location of the IBI transfer. </br>  -------------------------------------------------------------------
    ///< </br>  STATUS: </br> This register when read from, reads the data
    ///< from the IBI Queue. Reset value of this register is not available
    ///< as it is internally mapped to a queue. </br> IBI_STS[31:28] - IBI
    ///< Received Status. </br> Defines the master response for IBI received.
    ///< </br> - 4'b0xxx: Responded with ACK </br> - 4'b1xxx: Responded with
    ///< NACK </br> - Others : RESERVED </br> IBI_ID[15:8] - IBI Identifier.
    ///< </br> The byte received after START which includes the address and
    ///< the R/W bit. </br>  - Device address and R/W bit in case of Slave
    ///< Interrupt or Master Request. </br>  - Hot-Join ID and R/W bit in case
    ///< of Hot-Join IBI. </br> DATA_LENGTH: In-Band Interrupt data length.
    ///< </br>  - This field represents the length of data received along with
    ///< the IBI, in bytes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_ibi_data_stat_reg_t;

#define MIPI_I3C_IBI_DATA_STAT_DEFAULT (0x00000000U)
#define MIPI_I3C_IBI_DATA_STAT_RD_MASK (0xffffffffU)
#define MIPI_I3C_IBI_DATA_STAT_WR_MASK (0x00000000U)


///< </br>  -------------------------------------------------------------------
///< </br>  DATA: </br>  This register is mapped to the IBI Queue.The IBI
///< Data is always packed in 4-byte aligned and put to the IBI Queue.
///< If the incoming data is not aligned to the 4-bytes, then there will
///< be unused bytes in the end location of the IBI transfer. </br>  -------------------------------------------------------------------
///< </br>  STATUS: </br> This register when read from, reads the data
///< from the IBI Queue. Reset value of this register is not available
///< as it is internally mapped to a queue. </br> IBI_STS[31:28] - IBI
///< Received Status. </br> Defines the master response for IBI received.
///< </br> - 4'b0xxx: Responded with ACK </br> - 4'b1xxx: Responded with
///< NACK </br> - Others : RESERVED </br> IBI_ID[15:8] - IBI Identifier.
///< </br> The byte received after START which includes the address and
///< the R/W bit. </br>  - Device address and R/W bit in case of Slave
///< Interrupt or Master Request. </br>  - Hot-Join ID and R/W bit in case
///< of Hot-Join IBI. </br> DATA_LENGTH: In-Band Interrupt data length.
///< </br>  - This field represents the length of data received along with
///< the IBI, in bytes.
#define MIPI_I3C_IBI_DATA_STAT_IBI_DATA_STAT_BF_OFF ( 0)
#define MIPI_I3C_IBI_DATA_STAT_IBI_DATA_STAT_BF_WID (32)
#define MIPI_I3C_IBI_DATA_STAT_IBI_DATA_STAT_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_IBI_DATA_STAT_IBI_DATA_STAT_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_QUEUE_THLD_CTRL register description at address offset 0x1c
  *
  * Register default value:        0x01000101
  * Register full path in IP: mipi_i3c/reg/QUEUE_THLD_CTRL
  * Queue Threshold Control Register
  */

typedef union {
  struct {
    uint32_t CMD_EMPTY_BUF_THLD : 8;
    ///< Command Buffer Empty Threshold Value. Controls the number of empty
    ///< locations (or greater) in the Command Queue that trigger CMD_QUEUE_READY_STAT
    ///< interrupt. The valid range is 0 to IC_CMD_BUF_DEPTH-1. The software
    ///< shall program only valid values. Value of N ranging from 1 to IC_CMD_BUF_DEPTH-1
    ///< sets the threshold to N empty locations and a value of 0 sets the
    ///< threshold to indicate that the queue is completely empty.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RESP_BUF_THLD : 8;
    ///< Response Buffer Threshold Value. Controls the number of entries (or
    ///< greater) in the Response Queue that trigger the RESP_READY_STAT_INTR
    ///< interrupt. The valid range is 0 to IC_RESP_BUF_DEPTH-1. The software
    ///< shall program only valid values. A value of 0 sets the threshold for
    ///< 1 entry, and a value of N sets the threshold for N+1 entries.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t IBI_STATUS_THLD : 8;
    ///< In-Band Interrupt Status Threshold Value. Every In Band Interrupt
    ///< received (with or without data) by I3C controller generates an IBI
    ///< status. This field controls the number of IBI status entries (or greater)
    ///< in the IBI queue that trigger the IBI_THLD_STAT interrupt. The valid
    ///< range is 0 to IC_IBI_BUF_DEPTH-1. The software shall program only
    ///< valid values. A value of 0 sets the threshold for 1 entry, and a value
    ///< of N sets the threshold for N+1 entries.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
  } ;
  uint32_t value;
} mipi_i3c_que_thld_ctrl_reg_t;

#define MIPI_I3C_QUE_THLD_CTRL_DEFAULT (0x01000101U)
#define MIPI_I3C_QUE_THLD_CTRL_RD_MASK (0xff00ffffU)
#define MIPI_I3C_QUE_THLD_CTRL_WR_MASK (0xff00ffffU)


///< Command Buffer Empty Threshold Value. Controls the number of empty
///< locations (or greater) in the Command Queue that trigger CMD_QUEUE_READY_STAT
///< interrupt. The valid range is 0 to IC_CMD_BUF_DEPTH-1. The software
///< shall program only valid values. Value of N ranging from 1 to IC_CMD_BUF_DEPTH-1
///< sets the threshold to N empty locations and a value of 0 sets the
///< threshold to indicate that the queue is completely empty.
#define MIPI_I3C_QUE_THLD_CTRL_CMD_EMPTY_BUF_THLD_BF_OFF ( 0)
#define MIPI_I3C_QUE_THLD_CTRL_CMD_EMPTY_BUF_THLD_BF_WID ( 8)
#define MIPI_I3C_QUE_THLD_CTRL_CMD_EMPTY_BUF_THLD_BF_MSK (0x000000FF)
#define MIPI_I3C_QUE_THLD_CTRL_CMD_EMPTY_BUF_THLD_BF_DEF (0x00000001)

///< Response Buffer Threshold Value. Controls the number of entries (or
///< greater) in the Response Queue that trigger the RESP_READY_STAT_INTR
///< interrupt. The valid range is 0 to IC_RESP_BUF_DEPTH-1. The software
///< shall program only valid values. A value of 0 sets the threshold for
///< 1 entry, and a value of N sets the threshold for N+1 entries.
#define MIPI_I3C_QUE_THLD_CTRL_RESP_BUF_THLD_BF_OFF ( 8)
#define MIPI_I3C_QUE_THLD_CTRL_RESP_BUF_THLD_BF_WID ( 8)
#define MIPI_I3C_QUE_THLD_CTRL_RESP_BUF_THLD_BF_MSK (0x0000FF00)
#define MIPI_I3C_QUE_THLD_CTRL_RESP_BUF_THLD_BF_DEF (0x00000100)

///< In-Band Interrupt Status Threshold Value. Every In Band Interrupt
///< received (with or without data) by I3C controller generates an IBI
///< status. This field controls the number of IBI status entries (or greater)
///< in the IBI queue that trigger the IBI_THLD_STAT interrupt. The valid
///< range is 0 to IC_IBI_BUF_DEPTH-1. The software shall program only
///< valid values. A value of 0 sets the threshold for 1 entry, and a value
///< of N sets the threshold for N+1 entries.
#define MIPI_I3C_QUE_THLD_CTRL_IBI_STAT_THLD_BF_OFF (24)
#define MIPI_I3C_QUE_THLD_CTRL_IBI_STAT_THLD_BF_WID ( 8)
#define MIPI_I3C_QUE_THLD_CTRL_IBI_STAT_THLD_BF_MSK (0xFF000000)
#define MIPI_I3C_QUE_THLD_CTRL_IBI_STAT_THLD_BF_DEF (0x01000000)


/** @brief MIPI_I3C_REG_DATA_BUFFER_THLD_CTRL register description at address offset 0x20
  *
  * Register default value:        0x01010101
  * Register full path in IP: mipi_i3c/reg/DATA_BUFFER_THLD_CTRL
  * Data Buffer Threshold Control Register
  */

typedef union {
  struct {
    uint32_t TX_EMPTY_BUF_THLD : 3;
    ///< Transmit Buffer Threshold Value. This field controls the number of
    ///< empty locations (or above) in the Transmit FIFO that trigger the TX_THLD_STAT
    ///< interrupt. If the programmed value is greater than the buffer depth,
    ///< then threshold will be set to IC_TX_BUF_DEPTH. The supported values
    ///< for TX_BUF_THLD are - 000: 1 - 001: 4 - 010: 8 - 011: 16 - 100: 32
    ///< - 101: 64
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t RX_BUF_THLD : 3;
    ///< Receive Buffer Threshold Value. <ct:cbc:1:IC_MASTER_MODE==1> This
    ///< field controls the number of entries (or above) in the Receive FIFO
    ///< that trigger the RX_THLD_STAT interrupt. If the programmed value is
    ///< greater than the buffer depth, then threshold will be set to IC_RX_BUF_DEPTH.
    ///< The supported values for RX_BUF_THLD are - 000: 1 - 001: 4 - 010:
    ///< 8 - 011: 16 - 100: 32 - 101: 64
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TX_START_THLD : 3;
    ///< Transfer Start Threshold Value. In master mode of operation when the
    ///< controller is set up to initiate a write transfer, it waits until
    ///< either one of the following conditions are met before it initiates
    ///< the write transfer on the I3C Interface. - Data length (as specified
    ///< in the command) number of locations are filled in the Transmit FIFO
    ///< - Threshold number of entries (or more) are available in the Transmit
    ///< FIFO The supported values for TX_START_THLD are: - 000: 1 - 001: 4
    ///< - 010: 8 - 011: 16 - 100: 32 - 101: 64
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t RX_START_THLD : 3;
    ///< Receive Start Threshold Value. In master mode of operation when the
    ///< controller is set up to initiate a read transfer, it waits until either
    ///< one of the conditions are met before it initiates the read transfer
    ///< on the I3C Interface. - Data length (as specified in the command)
    ///< number of locations are empty in the Receive FIFO. - Threshold number
    ///< of locations (or more) are empty in the Receive FIFO. The supported
    ///< values for RX_START_THLD are: - 000 - 1 - 001 - 4 - 010 - 8 - 011
    ///< - 16 - 100 - 32 - 101 - 64
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_data_buff_thld_ctrl_reg_t;

#define MIPI_I3C_DATA_BUFF_THLD_CTRL_DEFAULT (0x01010101U)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RD_MASK (0x07070707U)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_WR_MASK (0x07070707U)


///< Transmit Buffer Threshold Value. This field controls the number of
///< empty locations (or above) in the Transmit FIFO that trigger the TX_THLD_STAT
///< interrupt. If the programmed value is greater than the buffer depth,
///< then threshold will be set to IC_TX_BUF_DEPTH. The supported values
///< for TX_BUF_THLD are - 000: 1 - 001: 4 - 010: 8 - 011: 16 - 100: 32
///< - 101: 64
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_EMPTY_BUF_THLD_BF_OFF ( 0)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_EMPTY_BUF_THLD_BF_WID ( 3)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_EMPTY_BUF_THLD_BF_MSK (0x00000007)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_EMPTY_BUF_THLD_BF_DEF (0x00000001)

///< Receive Buffer Threshold Value. <ct:cbc:1:IC_MASTER_MODE==1> This
///< field controls the number of entries (or above) in the Receive FIFO
///< that trigger the RX_THLD_STAT interrupt. If the programmed value is
///< greater than the buffer depth, then threshold will be set to IC_RX_BUF_DEPTH.
///< The supported values for RX_BUF_THLD are - 000: 1 - 001: 4 - 010:
///< 8 - 011: 16 - 100: 32 - 101: 64
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_BUF_THLD_BF_OFF ( 8)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_BUF_THLD_BF_WID ( 3)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_BUF_THLD_BF_MSK (0x00000700)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_BUF_THLD_BF_DEF (0x00000100)

///< Transfer Start Threshold Value. In master mode of operation when the
///< controller is set up to initiate a write transfer, it waits until
///< either one of the following conditions are met before it initiates
///< the write transfer on the I3C Interface. - Data length (as specified
///< in the command) number of locations are filled in the Transmit FIFO
///< - Threshold number of entries (or more) are available in the Transmit
///< FIFO The supported values for TX_START_THLD are: - 000: 1 - 001: 4
///< - 010: 8 - 011: 16 - 100: 32 - 101: 64
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_START_THLD_BF_OFF (16)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_START_THLD_BF_WID ( 3)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_START_THLD_BF_MSK (0x00070000)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_TX_START_THLD_BF_DEF (0x00010000)

///< Receive Start Threshold Value. In master mode of operation when the
///< controller is set up to initiate a read transfer, it waits until either
///< one of the conditions are met before it initiates the read transfer
///< on the I3C Interface. - Data length (as specified in the command)
///< number of locations are empty in the Receive FIFO. - Threshold number
///< of locations (or more) are empty in the Receive FIFO. The supported
///< values for RX_START_THLD are: - 000 - 1 - 001 - 4 - 010 - 8 - 011
///< - 16 - 100 - 32 - 101 - 64
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_START_THLD_BF_OFF (24)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_START_THLD_BF_WID ( 3)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_START_THLD_BF_MSK (0x07000000)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_RX_START_THLD_BF_DEF (0x01000000)


/** @brief MIPI_I3C_REG_IBI_QUEUE_CTRL register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/IBI_QUEUE_CTRL
  * IBI Queue Control Register
  */

typedef union {
  struct {
    uint32_t NOTIFY_HJ_REJECTED : 1;
    ///< Notify Rejected Hot-Join Control. This bit is used to suppress reporting
    ///< to the application about Hot-Join request rejected (NACK and Auto
    ///< Disable). - 0: Suppress passing the IBI Status to the IBI FIFO (hence
    ///< not notifying the application) when a HJ Request is NACKed and auto-disabled
    ///< based on the DEVICE_CTRL.HOT_JOIN_CTRL. - 1: Writes IBI Status to
    ///< the IBI FIFO (hence notifying the application) when a HJ Request is
    ///< NACKed and auto-disabled based on the DEVICE_CTRL.HOT_JOIN_CTRL.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t NOTIFY_SIR_REJECTED : 1;
    ///< Notify Rejected Slave Interrupt Request Control. This bit is used
    ///< to suppress reporting to the application about SIR request rejected.
    ///< - 0: Suppress passing the IBI Status to the IBI FIFO (hence not notifying
    ///< the application) when a Slave Interrupt Request is NACKed and auto-disabled
    ///< based on the IBI_SIR_REQ_REJECT Register. - 1: Writes IBI Status to
    ///< the IBI FIFO (hence notifying the application) when a Slave Interrupt
    ///< Request is NACKed and auto-disabled based on the IBI_SIR_REQ_REJECT
    ///< Register.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_ibi_que_ctrl_reg_t;

#define MIPI_I3C_IBI_QUE_CTRL_DEFAULT (0x00000000U)
#define MIPI_I3C_IBI_QUE_CTRL_RD_MASK (0x00000009U)
#define MIPI_I3C_IBI_QUE_CTRL_WR_MASK (0x00000009U)


///< Notify Rejected Hot-Join Control. This bit is used to suppress reporting
///< to the application about Hot-Join request rejected (NACK and Auto
///< Disable). - 0: Suppress passing the IBI Status to the IBI FIFO (hence
///< not notifying the application) when a HJ Request is NACKed and auto-disabled
///< based on the DEVICE_CTRL.HOT_JOIN_CTRL. - 1: Writes IBI Status to
///< the IBI FIFO (hence notifying the application) when a HJ Request is
///< NACKed and auto-disabled based on the DEVICE_CTRL.HOT_JOIN_CTRL.
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_HJ_REJECTED_BF_OFF ( 0)
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_HJ_REJECTED_BF_WID ( 1)
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_HJ_REJECTED_BF_MSK (0x00000001)
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_HJ_REJECTED_BF_DEF (0x00000000)

///< Notify Rejected Slave Interrupt Request Control. This bit is used
///< to suppress reporting to the application about SIR request rejected.
///< - 0: Suppress passing the IBI Status to the IBI FIFO (hence not notifying
///< the application) when a Slave Interrupt Request is NACKed and auto-disabled
///< based on the IBI_SIR_REQ_REJECT Register. - 1: Writes IBI Status to
///< the IBI FIFO (hence notifying the application) when a Slave Interrupt
///< Request is NACKed and auto-disabled based on the IBI_SIR_REQ_REJECT
///< Register.
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_SIR_REJECTED_BF_OFF ( 3)
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_SIR_REJECTED_BF_WID ( 1)
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_SIR_REJECTED_BF_MSK (0x00000008)
#define MIPI_I3C_IBI_QUE_CTRL_NOTIFY_SIR_REJECTED_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_RESET_CTRL register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/RESET_CTRL
  * Reset Control Register
  */

typedef union {
  struct {
    uint32_t SOFT_RST : 1;
    ///< Core Software Reset. Write 1'b1 to this bit to exercise software reset.
    ///< This will reset all Buffers - Receive, Transmit, Command and Response
    ///< This bit will be cleared automatically once the core reset is completed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMD_QUEUE_RST : 1;
    ///< Command Queue Software Reset. Write 1'b1 to this bit to exercise Command
    ///< Queue reset. This bit will the cleared automatically once the Command
    ///< Queue reset is completed.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESP_QUEUE_RST : 1;
    ///< Response Queue Software Reset. Write 1'b1 to this bit to exercise
    ///< Response Queue reset. This bit will be cleared automatically once
    ///< the Response Queue reset is completed.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TX_FIFO_RST : 1;
    ///< Transmit Buffer Software Reset. Write 1'b1 to this bit to exercise
    ///< Transmit Buffer reset. This bit will be cleared automatically once
    ///< the Transmit Buffer reset is completed.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_FIFO_RST : 1;
    ///< Receive Buffer Software Reset. Write 1'b1 to this bit to exercise
    ///< Receive Buffer reset. This bit will be cleared automatically once
    ///< the Receive buffer reset is completed.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t IBI_QUEUE_RST : 1;
    ///< IBI Queue Software Reset. This bit is only used in master mode of
    ///< operation. Write 1'b1 to this bit to exercise IBI Queue reset This
    ///< bit will be cleared automatically once the IBI Queue reset is completed.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_rst_ctrl_reg_t;

#define MIPI_I3C_RST_CTRL_DEFAULT (0x00000000U)
#define MIPI_I3C_RST_CTRL_RD_MASK (0x0000003fU)
#define MIPI_I3C_RST_CTRL_WR_MASK (0x0000003fU)


///< Core Software Reset. Write 1'b1 to this bit to exercise software reset.
///< This will reset all Buffers - Receive, Transmit, Command and Response
///< This bit will be cleared automatically once the core reset is completed.
#define MIPI_I3C_RST_CTRL_SOFT_RST_BF_OFF ( 0)
#define MIPI_I3C_RST_CTRL_SOFT_RST_BF_WID ( 1)
#define MIPI_I3C_RST_CTRL_SOFT_RST_BF_MSK (0x00000001)
#define MIPI_I3C_RST_CTRL_SOFT_RST_BF_DEF (0x00000000)

///< Command Queue Software Reset. Write 1'b1 to this bit to exercise Command
///< Queue reset. This bit will the cleared automatically once the Command
///< Queue reset is completed.
#define MIPI_I3C_RST_CTRL_CMD_QUE_RST_BF_OFF ( 1)
#define MIPI_I3C_RST_CTRL_CMD_QUE_RST_BF_WID ( 1)
#define MIPI_I3C_RST_CTRL_CMD_QUE_RST_BF_MSK (0x00000002)
#define MIPI_I3C_RST_CTRL_CMD_QUE_RST_BF_DEF (0x00000000)

///< Response Queue Software Reset. Write 1'b1 to this bit to exercise
///< Response Queue reset. This bit will be cleared automatically once
///< the Response Queue reset is completed.
#define MIPI_I3C_RST_CTRL_RESP_QUE_RST_BF_OFF ( 2)
#define MIPI_I3C_RST_CTRL_RESP_QUE_RST_BF_WID ( 1)
#define MIPI_I3C_RST_CTRL_RESP_QUE_RST_BF_MSK (0x00000004)
#define MIPI_I3C_RST_CTRL_RESP_QUE_RST_BF_DEF (0x00000000)

///< Transmit Buffer Software Reset. Write 1'b1 to this bit to exercise
///< Transmit Buffer reset. This bit will be cleared automatically once
///< the Transmit Buffer reset is completed.
#define MIPI_I3C_RST_CTRL_TX_FIFO_RST_BF_OFF ( 3)
#define MIPI_I3C_RST_CTRL_TX_FIFO_RST_BF_WID ( 1)
#define MIPI_I3C_RST_CTRL_TX_FIFO_RST_BF_MSK (0x00000008)
#define MIPI_I3C_RST_CTRL_TX_FIFO_RST_BF_DEF (0x00000000)

///< Receive Buffer Software Reset. Write 1'b1 to this bit to exercise
///< Receive Buffer reset. This bit will be cleared automatically once
///< the Receive buffer reset is completed.
#define MIPI_I3C_RST_CTRL_RX_FIFO_RST_BF_OFF ( 4)
#define MIPI_I3C_RST_CTRL_RX_FIFO_RST_BF_WID ( 1)
#define MIPI_I3C_RST_CTRL_RX_FIFO_RST_BF_MSK (0x00000010)
#define MIPI_I3C_RST_CTRL_RX_FIFO_RST_BF_DEF (0x00000000)

///< IBI Queue Software Reset. This bit is only used in master mode of
///< operation. Write 1'b1 to this bit to exercise IBI Queue reset This
///< bit will be cleared automatically once the IBI Queue reset is completed.
#define MIPI_I3C_RST_CTRL_IBI_QUE_RST_BF_OFF ( 5)
#define MIPI_I3C_RST_CTRL_IBI_QUE_RST_BF_WID ( 1)
#define MIPI_I3C_RST_CTRL_IBI_QUE_RST_BF_MSK (0x00000020)
#define MIPI_I3C_RST_CTRL_IBI_QUE_RST_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_SLV_EVENT_STATUS register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/SLV_EVENT_STATUS
  * Slave Event Status Register
  */

typedef union {
  struct {
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t ACTIVITY_STATE : 2;
    ///< Activity State Status. - ENTAS0 - 00 - ENTAS1 - 01 - ENTAS2 - 10 -
    ///< ENTAS3 - 11 This bit reflects the Activity State of slave set by the
    ///< Master.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t MRL_UPDATED : 1;
    ///< MRL Updated Status. This bit indicates a SETMRL CCC is received by
    ///< the slave. The updated MRL value can be read from SLV_MAX_LEN register.
    ///< This status can be cleared by writing 1'b1 to this field after reading
    ///< the updated MRL.
    ///< AccessType="RW/1C" BitOffset="6" ResetValue="0x0"
    uint32_t MWL_UPDATED : 1;
    ///< MWL Updated Status. This bit indicates a SETMWL CCC is received by
    ///< the slave. The updated MWL value can be read from SLV_MAX_LEN register.
    ///< This status can be cleared by writing 1'b1 to this field after reading
    ///< the updated MWL.
    ///< AccessType="RW/1C" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_slv_event_stat_reg_t;

#define MIPI_I3C_SLV_EVENT_STAT_DEFAULT (0x00000000U)
#define MIPI_I3C_SLV_EVENT_STAT_RD_MASK (0x000000f0U)
#define MIPI_I3C_SLV_EVENT_STAT_WR_MASK (0x000000c0U)


///< Activity State Status. - ENTAS0 - 00 - ENTAS1 - 01 - ENTAS2 - 10 -
///< ENTAS3 - 11 This bit reflects the Activity State of slave set by the
///< Master.
#define MIPI_I3C_SLV_EVENT_STAT_ACTIVITY_STATE_BF_OFF ( 4)
#define MIPI_I3C_SLV_EVENT_STAT_ACTIVITY_STATE_BF_WID ( 2)
#define MIPI_I3C_SLV_EVENT_STAT_ACTIVITY_STATE_BF_MSK (0x00000030)
#define MIPI_I3C_SLV_EVENT_STAT_ACTIVITY_STATE_BF_DEF (0x00000000)

///< MRL Updated Status. This bit indicates a SETMRL CCC is received by
///< the slave. The updated MRL value can be read from SLV_MAX_LEN register.
///< This status can be cleared by writing 1'b1 to this field after reading
///< the updated MRL.
#define MIPI_I3C_SLV_EVENT_STAT_MRL_UPDATED_BF_OFF ( 6)
#define MIPI_I3C_SLV_EVENT_STAT_MRL_UPDATED_BF_WID ( 1)
#define MIPI_I3C_SLV_EVENT_STAT_MRL_UPDATED_BF_MSK (0x00000040)
#define MIPI_I3C_SLV_EVENT_STAT_MRL_UPDATED_BF_DEF (0x00000000)

///< MWL Updated Status. This bit indicates a SETMWL CCC is received by
///< the slave. The updated MWL value can be read from SLV_MAX_LEN register.
///< This status can be cleared by writing 1'b1 to this field after reading
///< the updated MWL.
#define MIPI_I3C_SLV_EVENT_STAT_MWL_UPDATED_BF_OFF ( 7)
#define MIPI_I3C_SLV_EVENT_STAT_MWL_UPDATED_BF_WID ( 1)
#define MIPI_I3C_SLV_EVENT_STAT_MWL_UPDATED_BF_MSK (0x00000080)
#define MIPI_I3C_SLV_EVENT_STAT_MWL_UPDATED_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_INTR_STATUS register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/INTR_STATUS
  * Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t TX_THLD_STS : 1;
    ///< Transmit Buffer Threshold Status. This interrupt is generated when
    ///< number of empty locations in transmit buffer is greater than or equal
    ///< to threshold value specified by TX_EMPTY_BUF_THLD field in DATA_BUFFER_THLD_CTRL
    ///< register. This interrupt will be cleared automatically when number
    ///< of empty locations in transmit buffer is less than threshold value
    ///< specified.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RX_THLD_STS : 1;
    ///< Receive Buffer Threshold Status. This interrupt is generated when
    ///< number of entries in receive buffer is greater than or equal to threshold
    ///< value specified by RX_BUF_THLD field in DATA_BUFFER_THLD_CTRL register.
    ///< This interrupt will be cleared automatically when number of entries
    ///< in receive buffer is less than threshold value specified.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t IBI_THLD_STS : 1;
    ///< IBI Buffer Threshold Status. This field is only used in master mode
    ///< of operation This interrupt is generated when number of entries in
    ///< IBI buffer is greater than or equal to threshold value specified by
    ///< IBI_BUF_THLD field in QUEUE_THLD_CTRL register. This interrupt will
    ///< be cleared automatically when number of entries in IBI buffer is less
    ///< than threshold value specified.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t CMD_QUEUE_READY_STS : 1;
    ///< Command Queue Ready. This interrupt is generated when number of empty
    ///< locations in command queue is greater than or equal to threshold value
    ///< specified by CMD_EMPTY_BUF_THLD field in QUEUE_THLD_CTRL register.
    ///< This interrupt will be cleared automatically when number of empty
    ///< locations in command buffer is less than threshold value specified.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t RESP_READY_STS : 1;
    ///< Response Queue Ready Status. This interrupt is generated when number
    ///< of entries in response queue is greater than or equal to threshold
    ///< value specified by RESP_BUF_THLD field in QUEUE_THLD_CTRL register.
    ///< This interrupt will be cleared automatically when number of entries
    ///< in response buffer is less than threshold value specified.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t TRANSFER_ABORT_STS : 1;
    ///< Transfer Abort Status. This field is used only in master mode of operation.
    ///< This interrupt is generated if transfer is aborted. This interrupt
    ///< can be cleared by writing 1'b1.
    ///< AccessType="RW/1C" BitOffset="5" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TRANSFER_ERR_STS : 1;
    ///< Transfer Error Status. This interrupt is generated if any error occurs
    ///< during transfer. The error type will be specified in the response
    ///< packet associated with the command (in ERR_STATUS field of RESPONSE_QUEUE_PORT
    ///< register). This bit can be cleared by writing 1'b1.
    ///< AccessType="RW/1C" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_intr_stat_reg_t;

#define MIPI_I3C_INTR_STAT_DEFAULT (0x00000000U)
#define MIPI_I3C_INTR_STAT_RD_MASK (0x0000023fU)
#define MIPI_I3C_INTR_STAT_WR_MASK (0x00000220U)


///< Transmit Buffer Threshold Status. This interrupt is generated when
///< number of empty locations in transmit buffer is greater than or equal
///< to threshold value specified by TX_EMPTY_BUF_THLD field in DATA_BUFFER_THLD_CTRL
///< register. This interrupt will be cleared automatically when number
///< of empty locations in transmit buffer is less than threshold value
///< specified.
#define MIPI_I3C_INTR_STAT_TX_THLD_STS_BF_OFF ( 0)
#define MIPI_I3C_INTR_STAT_TX_THLD_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_TX_THLD_STS_BF_MSK (0x00000001)
#define MIPI_I3C_INTR_STAT_TX_THLD_STS_BF_DEF (0x00000000)

///< Receive Buffer Threshold Status. This interrupt is generated when
///< number of entries in receive buffer is greater than or equal to threshold
///< value specified by RX_BUF_THLD field in DATA_BUFFER_THLD_CTRL register.
///< This interrupt will be cleared automatically when number of entries
///< in receive buffer is less than threshold value specified.
#define MIPI_I3C_INTR_STAT_RX_THLD_STS_BF_OFF ( 1)
#define MIPI_I3C_INTR_STAT_RX_THLD_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_RX_THLD_STS_BF_MSK (0x00000002)
#define MIPI_I3C_INTR_STAT_RX_THLD_STS_BF_DEF (0x00000000)

///< IBI Buffer Threshold Status. This field is only used in master mode
///< of operation This interrupt is generated when number of entries in
///< IBI buffer is greater than or equal to threshold value specified by
///< IBI_BUF_THLD field in QUEUE_THLD_CTRL register. This interrupt will
///< be cleared automatically when number of entries in IBI buffer is less
///< than threshold value specified.
#define MIPI_I3C_INTR_STAT_IBI_THLD_STS_BF_OFF ( 2)
#define MIPI_I3C_INTR_STAT_IBI_THLD_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_IBI_THLD_STS_BF_MSK (0x00000004)
#define MIPI_I3C_INTR_STAT_IBI_THLD_STS_BF_DEF (0x00000000)

///< Command Queue Ready. This interrupt is generated when number of empty
///< locations in command queue is greater than or equal to threshold value
///< specified by CMD_EMPTY_BUF_THLD field in QUEUE_THLD_CTRL register.
///< This interrupt will be cleared automatically when number of empty
///< locations in command buffer is less than threshold value specified.
#define MIPI_I3C_INTR_STAT_CMD_QUE_READY_STS_BF_OFF ( 3)
#define MIPI_I3C_INTR_STAT_CMD_QUE_READY_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_CMD_QUE_READY_STS_BF_MSK (0x00000008)
#define MIPI_I3C_INTR_STAT_CMD_QUE_READY_STS_BF_DEF (0x00000000)

///< Response Queue Ready Status. This interrupt is generated when number
///< of entries in response queue is greater than or equal to threshold
///< value specified by RESP_BUF_THLD field in QUEUE_THLD_CTRL register.
///< This interrupt will be cleared automatically when number of entries
///< in response buffer is less than threshold value specified.
#define MIPI_I3C_INTR_STAT_RESP_READY_STS_BF_OFF ( 4)
#define MIPI_I3C_INTR_STAT_RESP_READY_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_RESP_READY_STS_BF_MSK (0x00000010)
#define MIPI_I3C_INTR_STAT_RESP_READY_STS_BF_DEF (0x00000000)

///< Transfer Abort Status. This field is used only in master mode of operation.
///< This interrupt is generated if transfer is aborted. This interrupt
///< can be cleared by writing 1'b1.
#define MIPI_I3C_INTR_STAT_TRANSFER_ABORT_STS_BF_OFF ( 5)
#define MIPI_I3C_INTR_STAT_TRANSFER_ABORT_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_TRANSFER_ABORT_STS_BF_MSK (0x00000020)
#define MIPI_I3C_INTR_STAT_TRANSFER_ABORT_STS_BF_DEF (0x00000000)

///< Transfer Error Status. This interrupt is generated if any error occurs
///< during transfer. The error type will be specified in the response
///< packet associated with the command (in ERR_STATUS field of RESPONSE_QUEUE_PORT
///< register). This bit can be cleared by writing 1'b1.
#define MIPI_I3C_INTR_STAT_TRANSFER_ERR_STS_BF_OFF ( 9)
#define MIPI_I3C_INTR_STAT_TRANSFER_ERR_STS_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_TRANSFER_ERR_STS_BF_MSK (0x00000200)
#define MIPI_I3C_INTR_STAT_TRANSFER_ERR_STS_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_INTR_STATUS_EN register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/INTR_STATUS_EN
  * Interrupt Status Enable Register
  */

typedef union {
  struct {
    uint32_t TX_THLD_STS_EN : 1;
    ///< Transmit Buffer Threshold Status Enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_THLD_STS_EN : 1;
    ///< Receive Buffer Threshold Status Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t IBI_THLD_STS_EN : 1;
    ///< IBI Buffer Threshold Status Enable. This field is used only in master
    ///< mode of operation.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CMD_QUEUE_READY_STS_EN : 1;
    ///< Command Queue Ready Status Enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RESP_READY_STS_EN : 1;
    ///< Response Queue Ready Status Enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TRANSFER_ABORT_STS_EN : 1;
    ///< Transfer Abort Status Enable. This field is used only in master mode
    ///< of operation.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TRANSFER_ERR_STS_EN : 1;
    ///< Transfer Error Status Enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_intr_stat_en_reg_t;

#define MIPI_I3C_INTR_STAT_EN_DEFAULT (0x00000000U)
#define MIPI_I3C_INTR_STAT_EN_RD_MASK (0x0000023fU)
#define MIPI_I3C_INTR_STAT_EN_WR_MASK (0x0000023fU)


///< Transmit Buffer Threshold Status Enable.
#define MIPI_I3C_INTR_STAT_EN_TX_THLD_STS_EN_BF_OFF ( 0)
#define MIPI_I3C_INTR_STAT_EN_TX_THLD_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_TX_THLD_STS_EN_BF_MSK (0x00000001)
#define MIPI_I3C_INTR_STAT_EN_TX_THLD_STS_EN_BF_DEF (0x00000000)

///< Receive Buffer Threshold Status Enable
#define MIPI_I3C_INTR_STAT_EN_RX_THLD_STS_EN_BF_OFF ( 1)
#define MIPI_I3C_INTR_STAT_EN_RX_THLD_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_RX_THLD_STS_EN_BF_MSK (0x00000002)
#define MIPI_I3C_INTR_STAT_EN_RX_THLD_STS_EN_BF_DEF (0x00000000)

///< IBI Buffer Threshold Status Enable. This field is used only in master
///< mode of operation.
#define MIPI_I3C_INTR_STAT_EN_IBI_THLD_STS_EN_BF_OFF ( 2)
#define MIPI_I3C_INTR_STAT_EN_IBI_THLD_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_IBI_THLD_STS_EN_BF_MSK (0x00000004)
#define MIPI_I3C_INTR_STAT_EN_IBI_THLD_STS_EN_BF_DEF (0x00000000)

///< Command Queue Ready Status Enable
#define MIPI_I3C_INTR_STAT_EN_CMD_QUE_READY_STS_EN_BF_OFF ( 3)
#define MIPI_I3C_INTR_STAT_EN_CMD_QUE_READY_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_CMD_QUE_READY_STS_EN_BF_MSK (0x00000008)
#define MIPI_I3C_INTR_STAT_EN_CMD_QUE_READY_STS_EN_BF_DEF (0x00000000)

///< Response Queue Ready Status Enable
#define MIPI_I3C_INTR_STAT_EN_RESP_READY_STS_EN_BF_OFF ( 4)
#define MIPI_I3C_INTR_STAT_EN_RESP_READY_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_RESP_READY_STS_EN_BF_MSK (0x00000010)
#define MIPI_I3C_INTR_STAT_EN_RESP_READY_STS_EN_BF_DEF (0x00000000)

///< Transfer Abort Status Enable. This field is used only in master mode
///< of operation.
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ABORT_STS_EN_BF_OFF ( 5)
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ABORT_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ABORT_STS_EN_BF_MSK (0x00000020)
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ABORT_STS_EN_BF_DEF (0x00000000)

///< Transfer Error Status Enable
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ERR_STS_EN_BF_OFF ( 9)
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ERR_STS_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ERR_STS_EN_BF_MSK (0x00000200)
#define MIPI_I3C_INTR_STAT_EN_TRANSFER_ERR_STS_EN_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_INTR_SIGNAL_EN register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/INTR_SIGNAL_EN
  * Interrupt Signal Enable Register
  */

typedef union {
  struct {
    uint32_t TX_THLD_SIGNAL_EN : 1;
    ///< Transmit Buffer Threshold Signal Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_THLD_SIGNAL_EN : 1;
    ///< Receive Buffer Threshold Signal Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t IBI_THLD_SIGNAL_EN : 1;
    ///< IBI Buffer Threshold Signal Enable This field is used in master mode
    ///< of operation.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CMD_QUEUE_READY_SIGNAL_EN : 1;
    ///< Command Queue Ready Signal Enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RESP_READY_SIGNAL_EN : 1;
    ///< Response Queue Ready Signal Enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TRANSFER_ABORT_SIGNAL_EN : 1;
    ///< Transfer Abort Signal Enable This field is used in master mode of
    ///< operation.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TRANSFER_ERR_SIGNAL_EN : 1;
    ///< Transfer Error Signal Enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_intr_signal_en_reg_t;

#define MIPI_I3C_INTR_SIGNAL_EN_DEFAULT (0x00000000U)
#define MIPI_I3C_INTR_SIGNAL_EN_RD_MASK (0x0000023fU)
#define MIPI_I3C_INTR_SIGNAL_EN_WR_MASK (0x0000023fU)


///< Transmit Buffer Threshold Signal Enable
#define MIPI_I3C_INTR_SIGNAL_EN_TX_THLD_SIGNAL_EN_BF_OFF ( 0)
#define MIPI_I3C_INTR_SIGNAL_EN_TX_THLD_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_TX_THLD_SIGNAL_EN_BF_MSK (0x00000001)
#define MIPI_I3C_INTR_SIGNAL_EN_TX_THLD_SIGNAL_EN_BF_DEF (0x00000000)

///< Receive Buffer Threshold Signal Enable
#define MIPI_I3C_INTR_SIGNAL_EN_RX_THLD_SIGNAL_EN_BF_OFF ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_RX_THLD_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_RX_THLD_SIGNAL_EN_BF_MSK (0x00000002)
#define MIPI_I3C_INTR_SIGNAL_EN_RX_THLD_SIGNAL_EN_BF_DEF (0x00000000)

///< IBI Buffer Threshold Signal Enable This field is used in master mode
///< of operation.
#define MIPI_I3C_INTR_SIGNAL_EN_IBI_THLD_SIGNAL_EN_BF_OFF ( 2)
#define MIPI_I3C_INTR_SIGNAL_EN_IBI_THLD_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_IBI_THLD_SIGNAL_EN_BF_MSK (0x00000004)
#define MIPI_I3C_INTR_SIGNAL_EN_IBI_THLD_SIGNAL_EN_BF_DEF (0x00000000)

///< Command Queue Ready Signal Enable
#define MIPI_I3C_INTR_SIGNAL_EN_CMD_QUE_READY_SIGNAL_EN_BF_OFF ( 3)
#define MIPI_I3C_INTR_SIGNAL_EN_CMD_QUE_READY_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_CMD_QUE_READY_SIGNAL_EN_BF_MSK (0x00000008)
#define MIPI_I3C_INTR_SIGNAL_EN_CMD_QUE_READY_SIGNAL_EN_BF_DEF (0x00000000)

///< Response Queue Ready Signal Enable
#define MIPI_I3C_INTR_SIGNAL_EN_RESP_READY_SIGNAL_EN_BF_OFF ( 4)
#define MIPI_I3C_INTR_SIGNAL_EN_RESP_READY_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_RESP_READY_SIGNAL_EN_BF_MSK (0x00000010)
#define MIPI_I3C_INTR_SIGNAL_EN_RESP_READY_SIGNAL_EN_BF_DEF (0x00000000)

///< Transfer Abort Signal Enable This field is used in master mode of
///< operation.
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ABORT_SIGNAL_EN_BF_OFF ( 5)
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ABORT_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ABORT_SIGNAL_EN_BF_MSK (0x00000020)
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ABORT_SIGNAL_EN_BF_DEF (0x00000000)

///< Transfer Error Signal Enable
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ERR_SIGNAL_EN_BF_OFF ( 9)
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ERR_SIGNAL_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ERR_SIGNAL_EN_BF_MSK (0x00000200)
#define MIPI_I3C_INTR_SIGNAL_EN_TRANSFER_ERR_SIGNAL_EN_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_INTR_FORCE register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/INTR_FORCE
  * Interrupt Force Enable Register
  */

typedef union {
  struct {
    uint32_t TX_THLD_FORCE_EN : 1;
    ///< Transmit Buffer Threshold Force Enable
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t RX_THLD_FORCE_EN : 1;
    ///< Receive Buffer Threshold Force Enable
    ///< AccessType="WO" BitOffset="1" ResetValue="0x0"
    uint32_t IBI_THLD_FORCE_EN : 1;
    ///< IBI Buffer Threshold Force Enable This field is used in master mode
    ///< of operation.
    ///< AccessType="WO" BitOffset="2" ResetValue="0x0"
    uint32_t CMD_QUEUE_READY_FORCE_EN : 1;
    ///< Command Queue Ready Force Enable
    ///< AccessType="WO" BitOffset="3" ResetValue="0x0"
    uint32_t RESP_READY_FORCE_EN : 1;
    ///< Response Queue Ready Force Enable
    ///< AccessType="WO" BitOffset="4" ResetValue="0x0"
    uint32_t TRANSFER_ABORT_FORCE_EN : 1;
    ///< Transfer Abort Force Enable This field is used in master mode of operation.
    ///< AccessType="WO" BitOffset="5" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TRANSFER_ERR_FORCE_EN : 1;
    ///< Transfer Error Force Enable
    ///< AccessType="WO" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_intr_force_reg_t;

#define MIPI_I3C_INTR_FORCE_DEFAULT (0x00000000U)
#define MIPI_I3C_INTR_FORCE_RD_MASK (0x00000000U)
#define MIPI_I3C_INTR_FORCE_WR_MASK (0x0000023fU)


///< Transmit Buffer Threshold Force Enable
#define MIPI_I3C_INTR_FORCE_TX_THLD_FORCE_EN_BF_OFF ( 0)
#define MIPI_I3C_INTR_FORCE_TX_THLD_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_TX_THLD_FORCE_EN_BF_MSK (0x00000001)
#define MIPI_I3C_INTR_FORCE_TX_THLD_FORCE_EN_BF_DEF (0x00000000)

///< Receive Buffer Threshold Force Enable
#define MIPI_I3C_INTR_FORCE_RX_THLD_FORCE_EN_BF_OFF ( 1)
#define MIPI_I3C_INTR_FORCE_RX_THLD_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_RX_THLD_FORCE_EN_BF_MSK (0x00000002)
#define MIPI_I3C_INTR_FORCE_RX_THLD_FORCE_EN_BF_DEF (0x00000000)

///< IBI Buffer Threshold Force Enable This field is used in master mode
///< of operation.
#define MIPI_I3C_INTR_FORCE_IBI_THLD_FORCE_EN_BF_OFF ( 2)
#define MIPI_I3C_INTR_FORCE_IBI_THLD_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_IBI_THLD_FORCE_EN_BF_MSK (0x00000004)
#define MIPI_I3C_INTR_FORCE_IBI_THLD_FORCE_EN_BF_DEF (0x00000000)

///< Command Queue Ready Force Enable
#define MIPI_I3C_INTR_FORCE_CMD_QUE_READY_FORCE_EN_BF_OFF ( 3)
#define MIPI_I3C_INTR_FORCE_CMD_QUE_READY_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_CMD_QUE_READY_FORCE_EN_BF_MSK (0x00000008)
#define MIPI_I3C_INTR_FORCE_CMD_QUE_READY_FORCE_EN_BF_DEF (0x00000000)

///< Response Queue Ready Force Enable
#define MIPI_I3C_INTR_FORCE_RESP_READY_FORCE_EN_BF_OFF ( 4)
#define MIPI_I3C_INTR_FORCE_RESP_READY_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_RESP_READY_FORCE_EN_BF_MSK (0x00000010)
#define MIPI_I3C_INTR_FORCE_RESP_READY_FORCE_EN_BF_DEF (0x00000000)

///< Transfer Abort Force Enable This field is used in master mode of operation.
#define MIPI_I3C_INTR_FORCE_TRANSFER_ABORT_FORCE_EN_BF_OFF ( 5)
#define MIPI_I3C_INTR_FORCE_TRANSFER_ABORT_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_TRANSFER_ABORT_FORCE_EN_BF_MSK (0x00000020)
#define MIPI_I3C_INTR_FORCE_TRANSFER_ABORT_FORCE_EN_BF_DEF (0x00000000)

///< Transfer Error Force Enable
#define MIPI_I3C_INTR_FORCE_TRANSFER_ERR_FORCE_EN_BF_OFF ( 9)
#define MIPI_I3C_INTR_FORCE_TRANSFER_ERR_FORCE_EN_BF_WID ( 1)
#define MIPI_I3C_INTR_FORCE_TRANSFER_ERR_FORCE_EN_BF_MSK (0x00000200)
#define MIPI_I3C_INTR_FORCE_TRANSFER_ERR_FORCE_EN_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_QUEUE_STATUS_LEVEL register description at address offset 0x4c
  *
  * Register default value:        0x00000010
  * Register full path in IP: mipi_i3c/reg/QUEUE_STATUS_LEVEL
  * Queue Status Level Register
  */

typedef union {
  struct {
    uint32_t CMD_QUEUE_EMPTY_LOC : 8;
    ///< Command Queue Empty Locations. Contains the number of empty locations
    ///< in the command Buffer.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x10"
    uint32_t RESP_BUF_BLR : 8;
    ///< Response Buffer Level Value. Contains the number of valid data entries
    ///< in the response Buffer.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t IBI_BUF_BLR : 8;
    ///< IBI Buffer Level Value. Contains the number of valid entries in the
    ///< IBI Buffer. This field is used in master mode of operation.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t IBI_STS_CNT : 5;
    ///< IBI Buffer Status Count. Contains the number of IBI status entries
    ///< in the IBI Buffer. This field is used in master mode of operation.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_que_stat_lvl_reg_t;

#define MIPI_I3C_QUE_STAT_LVL_DEFAULT (0x00000010U)
#define MIPI_I3C_QUE_STAT_LVL_RD_MASK (0x1fffffffU)
#define MIPI_I3C_QUE_STAT_LVL_WR_MASK (0x00000000U)


///< Command Queue Empty Locations. Contains the number of empty locations
///< in the command Buffer.
#define MIPI_I3C_QUE_STAT_LVL_CMD_QUE_EMPTY_LOC_BF_OFF ( 0)
#define MIPI_I3C_QUE_STAT_LVL_CMD_QUE_EMPTY_LOC_BF_WID ( 8)
#define MIPI_I3C_QUE_STAT_LVL_CMD_QUE_EMPTY_LOC_BF_MSK (0x000000FF)
#define MIPI_I3C_QUE_STAT_LVL_CMD_QUE_EMPTY_LOC_BF_DEF (0x00000010)

///< Response Buffer Level Value. Contains the number of valid data entries
///< in the response Buffer.
#define MIPI_I3C_QUE_STAT_LVL_RESP_BUF_BLR_BF_OFF ( 8)
#define MIPI_I3C_QUE_STAT_LVL_RESP_BUF_BLR_BF_WID ( 8)
#define MIPI_I3C_QUE_STAT_LVL_RESP_BUF_BLR_BF_MSK (0x0000FF00)
#define MIPI_I3C_QUE_STAT_LVL_RESP_BUF_BLR_BF_DEF (0x00000000)

///< IBI Buffer Level Value. Contains the number of valid entries in the
///< IBI Buffer. This field is used in master mode of operation.
#define MIPI_I3C_QUE_STAT_LVL_IBI_BUF_BLR_BF_OFF (16)
#define MIPI_I3C_QUE_STAT_LVL_IBI_BUF_BLR_BF_WID ( 8)
#define MIPI_I3C_QUE_STAT_LVL_IBI_BUF_BLR_BF_MSK (0x00FF0000)
#define MIPI_I3C_QUE_STAT_LVL_IBI_BUF_BLR_BF_DEF (0x00000000)

///< IBI Buffer Status Count. Contains the number of IBI status entries
///< in the IBI Buffer. This field is used in master mode of operation.
#define MIPI_I3C_QUE_STAT_LVL_IBI_STS_CNT_BF_OFF (24)
#define MIPI_I3C_QUE_STAT_LVL_IBI_STS_CNT_BF_WID ( 5)
#define MIPI_I3C_QUE_STAT_LVL_IBI_STS_CNT_BF_MSK (0x1F000000)
#define MIPI_I3C_QUE_STAT_LVL_IBI_STS_CNT_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DATA_BUFFER_STATUS_LEVEL register description at address offset 0x50
  *
  * Register default value:        0x00000040
  * Register full path in IP: mipi_i3c/reg/DATA_BUFFER_STATUS_LEVEL
  * Data Buffer Status Level Register
  */

typedef union {
  struct {
    uint32_t TX_BUF_EMPTY_LOC : 8;
    ///< Transmit Buffer Empty Level Value. Contains the number of empty locations
    ///< in the transmit Buffer.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x40"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t RX_BUF_BLR : 8;
    ///< Receive Buffer Level Value. Contains the number of valid data entries
    ///< in the receive Buffer.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_data_buff_stat_lvl_reg_t;

#define MIPI_I3C_DATA_BUFF_STAT_LVL_DEFAULT (0x00000040U)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_RD_MASK (0x00ff00ffU)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_WR_MASK (0x00000000U)


///< Transmit Buffer Empty Level Value. Contains the number of empty locations
///< in the transmit Buffer.
#define MIPI_I3C_DATA_BUFF_STAT_LVL_TX_BUF_EMPTY_LOC_BF_OFF ( 0)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_TX_BUF_EMPTY_LOC_BF_WID ( 8)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_TX_BUF_EMPTY_LOC_BF_MSK (0x000000FF)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_TX_BUF_EMPTY_LOC_BF_DEF (0x00000040)

///< Receive Buffer Level Value. Contains the number of valid data entries
///< in the receive Buffer.
#define MIPI_I3C_DATA_BUFF_STAT_LVL_RX_BUF_BLR_BF_OFF (16)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_RX_BUF_BLR_BF_WID ( 8)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_RX_BUF_BLR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_RX_BUF_BLR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_PRESENT_STATE register description at address offset 0x54
  *
  * Register default value:        0x10000003
  * Register full path in IP: mipi_i3c/reg/PRESENT_STATE
  * Present State Register
  */

typedef union {
  struct {
    uint32_t SCL_LINE_SIGNAL_LEVEL : 1;
    ///< This bit is used to check the SCL line level to recover from errors
    ///< and for debugging. This bit reflects the value of synchronized scl_in_a
    ///< signal. This is valid in Master mode only
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x1"
    uint32_t SDA_LINE_SIGNAL_LEVEL : 1;
    ///< This bit is used to check the SDA line level to recover from errors
    ///< and for debugging. This bit reflects the value of synchronized sda_in_a
    ///< signal. This is valid in Master mode only.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x1"
    uint32_t CURRENT_MASTER : 1;
    ///< This Bit is used to check whether the Master is Current Master or
    ///< not. The Current Master is the Master that owns the SCL line. If this
    ///< bit is set to 0, the Master is not Current Master and requires to
    ///< request and the ownership before initiating any transfer on the line.
    ///< If this bit is set to 1, the Master is the Current Master and can
    ///< initate the transfers on the line. - 0: Master is not Current Master
    ///< - 1: Master is Current Master
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t CM_TFR_STS : 6;
    ///< Transfer Type Status. Indicates the type of transfer currently executing
    ///< by the DWC_mipi_i3c controller. In Master mode of operation : - 6'h0:
    ///< IDLE (Controller is in Idle state, waiting for commands from application
    ///< or Slave initated In-band Interrupt) - 6'h1: Broadcast CCC Write Transfer.
    ///< - 6'h2: Directed CCC Write Transfer. - 6'h3: Directed CCC Read Transfer.
    ///< - 6'h4: ENTDAA Address Assignment Transfer. - 6'h5: SETDASA Address
    ///< Assignment Transfer. - 6'h6: Private I3C SDR Write Transfer. - 6'h7:
    ///< Private I3C SDR Read Transfer. - 6'h8: Private I2C SDR Write Transfer.
    ///< - 6'h9: Private I2C SDR Read Transfer. - 6'hA: Private HDR Ternary
    ///< Symbol(TS) Write Transfer. - 6'hB: Private HDR Ternary Symbol(TS)
    ///< Read Transfer. - 6'hC: Private HDR Double-Data Rate(DDR) Write Transfer.
    ///< - 6'hD: Private HDR Double-Data Rate(DDR) Read Transfer. - 6'hE: Servicing
    ///< In-Band Interrupt Transfer. - 6'hF: Halt state (Controller is in Halt
    ///< State, waiting for the application to resume through DEVICE_CTRL Register)
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CM_TFR_ST_STS : 6;
    ///< Current Master Transfer State Status. Indicates the state of current
    ///< transfer currently executing by the DWC_mipi_i3c controller. This
    ///< is valid in Master mode only. - 6'h0: IDLE (Controller is Idle state,
    ///< waiting for commands from application or Slave initated In-band Interrupt)
    ///< - 6'h1: START Generation State. - 6'h2: RESTART Generation State.
    ///< - 6'h3: STOP Generation State. - 6'h4: START Hold Generation for the
    ///< Slave Initiated START State. - 6'h5: Broadcast Write Address Header(7'h7E,W)
    ///< Generation State. - 6'h6: Broadcast Read Address Header(7'h7E,R) Generation
    ///< State. - 6'h7: Dynamic Address Assignment State. - 6'h8: Slave Address
    ///< Generation State. - 6'hB: CCC Byte Generation State. - 6'hC: HDR Command
    ///< Generation State. - 6'hD: Write Data Transfer State. - 6'hE: Read
    ///< Data Transfer State. - 6'hF: In-Band Interrupt(SIR) Read Data State.
    ///< - 6'h10: In-Band Interrupt Auto-Disable State - 6'h11: HDR-DDR CRC
    ///< Data Generation/Receive State. - 6'h12: Clock Extension State. - 6'h13:
    ///< Halt State.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CMD_TID : 4;
    ///< This field reflects the Transaction-ID of the current executing command.
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t MASTER_IDLE : 1;
    ///< This field reflects whether the Master Controller is in Idle state
    ///< or not. This bit will set when all the Queues(Command , Response,
    ///< IBI) and Buffers(Transmit and Receive) are empty along with the Master
    ///< State machine is in Idle state.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_present_state_reg_t;

#define MIPI_I3C_PRESENT_STATE_DEFAULT (0x10000003U)
#define MIPI_I3C_PRESENT_STATE_RD_MASK (0x1f3f3f07U)
#define MIPI_I3C_PRESENT_STATE_WR_MASK (0x00000000U)


///< This bit is used to check the SCL line level to recover from errors
///< and for debugging. This bit reflects the value of synchronized scl_in_a
///< signal. This is valid in Master mode only
#define MIPI_I3C_PRESENT_STATE_SCL_LINE_SIGNAL_LVL_BF_OFF ( 0)
#define MIPI_I3C_PRESENT_STATE_SCL_LINE_SIGNAL_LVL_BF_WID ( 1)
#define MIPI_I3C_PRESENT_STATE_SCL_LINE_SIGNAL_LVL_BF_MSK (0x00000001)
#define MIPI_I3C_PRESENT_STATE_SCL_LINE_SIGNAL_LVL_BF_DEF (0x00000001)

///< This bit is used to check the SDA line level to recover from errors
///< and for debugging. This bit reflects the value of synchronized sda_in_a
///< signal. This is valid in Master mode only.
#define MIPI_I3C_PRESENT_STATE_SDA_LINE_SIGNAL_LVL_BF_OFF ( 1)
#define MIPI_I3C_PRESENT_STATE_SDA_LINE_SIGNAL_LVL_BF_WID ( 1)
#define MIPI_I3C_PRESENT_STATE_SDA_LINE_SIGNAL_LVL_BF_MSK (0x00000002)
#define MIPI_I3C_PRESENT_STATE_SDA_LINE_SIGNAL_LVL_BF_DEF (0x00000002)

///< This Bit is used to check whether the Master is Current Master or
///< not. The Current Master is the Master that owns the SCL line. If this
///< bit is set to 0, the Master is not Current Master and requires to
///< request and the ownership before initiating any transfer on the line.
///< If this bit is set to 1, the Master is the Current Master and can
///< initate the transfers on the line. - 0: Master is not Current Master
///< - 1: Master is Current Master
#define MIPI_I3C_PRESENT_STATE_CURRENT_MASTER_BF_OFF ( 2)
#define MIPI_I3C_PRESENT_STATE_CURRENT_MASTER_BF_WID ( 1)
#define MIPI_I3C_PRESENT_STATE_CURRENT_MASTER_BF_MSK (0x00000004)
#define MIPI_I3C_PRESENT_STATE_CURRENT_MASTER_BF_DEF (0x00000000)

///< Transfer Type Status. Indicates the type of transfer currently executing
///< by the DWC_mipi_i3c controller. In Master mode of operation : - 6'h0:
///< IDLE (Controller is in Idle state, waiting for commands from application
///< or Slave initated In-band Interrupt) - 6'h1: Broadcast CCC Write Transfer.
///< - 6'h2: Directed CCC Write Transfer. - 6'h3: Directed CCC Read Transfer.
///< - 6'h4: ENTDAA Address Assignment Transfer. - 6'h5: SETDASA Address
///< Assignment Transfer. - 6'h6: Private I3C SDR Write Transfer. - 6'h7:
///< Private I3C SDR Read Transfer. - 6'h8: Private I2C SDR Write Transfer.
///< - 6'h9: Private I2C SDR Read Transfer. - 6'hA: Private HDR Ternary
///< Symbol(TS) Write Transfer. - 6'hB: Private HDR Ternary Symbol(TS)
///< Read Transfer. - 6'hC: Private HDR Double-Data Rate(DDR) Write Transfer.
///< - 6'hD: Private HDR Double-Data Rate(DDR) Read Transfer. - 6'hE: Servicing
///< In-Band Interrupt Transfer. - 6'hF: Halt state (Controller is in Halt
///< State, waiting for the application to resume through DEVICE_CTRL Register)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_STS_BF_OFF ( 8)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_STS_BF_WID ( 6)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_STS_BF_MSK (0x00003F00)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_STS_BF_DEF (0x00000000)

///< Current Master Transfer State Status. Indicates the state of current
///< transfer currently executing by the DWC_mipi_i3c controller. This
///< is valid in Master mode only. - 6'h0: IDLE (Controller is Idle state,
///< waiting for commands from application or Slave initated In-band Interrupt)
///< - 6'h1: START Generation State. - 6'h2: RESTART Generation State.
///< - 6'h3: STOP Generation State. - 6'h4: START Hold Generation for the
///< Slave Initiated START State. - 6'h5: Broadcast Write Address Header(7'h7E,W)
///< Generation State. - 6'h6: Broadcast Read Address Header(7'h7E,R) Generation
///< State. - 6'h7: Dynamic Address Assignment State. - 6'h8: Slave Address
///< Generation State. - 6'hB: CCC Byte Generation State. - 6'hC: HDR Command
///< Generation State. - 6'hD: Write Data Transfer State. - 6'hE: Read
///< Data Transfer State. - 6'hF: In-Band Interrupt(SIR) Read Data State.
///< - 6'h10: In-Band Interrupt Auto-Disable State - 6'h11: HDR-DDR CRC
///< Data Generation/Receive State. - 6'h12: Clock Extension State. - 6'h13:
///< Halt State.
#define MIPI_I3C_PRESENT_STATE_CM_TFR_ST_STS_BF_OFF (16)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_ST_STS_BF_WID ( 6)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_ST_STS_BF_MSK (0x003F0000)
#define MIPI_I3C_PRESENT_STATE_CM_TFR_ST_STS_BF_DEF (0x00000000)

///< This field reflects the Transaction-ID of the current executing command.
#define MIPI_I3C_PRESENT_STATE_CMD_TID_BF_OFF (24)
#define MIPI_I3C_PRESENT_STATE_CMD_TID_BF_WID ( 4)
#define MIPI_I3C_PRESENT_STATE_CMD_TID_BF_MSK (0x0F000000)
#define MIPI_I3C_PRESENT_STATE_CMD_TID_BF_DEF (0x00000000)

///< This field reflects whether the Master Controller is in Idle state
///< or not. This bit will set when all the Queues(Command , Response,
///< IBI) and Buffers(Transmit and Receive) are empty along with the Master
///< State machine is in Idle state.
#define MIPI_I3C_PRESENT_STATE_MASTER_IDLE_BF_OFF (28)
#define MIPI_I3C_PRESENT_STATE_MASTER_IDLE_BF_WID ( 1)
#define MIPI_I3C_PRESENT_STATE_MASTER_IDLE_BF_MSK (0x10000000)
#define MIPI_I3C_PRESENT_STATE_MASTER_IDLE_BF_DEF (0x10000000)


/** @brief MIPI_I3C_REG_DEVICE_ADDR_TABLE_POINTER register description at address offset 0x5c
  *
  * Register default value:        0x00080280
  * Register full path in IP: mipi_i3c/reg/DEVICE_ADDR_TABLE_POINTER
  * Pointer for Device Address Table Registers
  */

typedef union {
  struct {
    uint32_t P_DEV_ADDR_TABLE_START_ADDR : 16;
    ///< Start Address of Device Address Table.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x280"
    uint32_t DEV_ADDR_TABLE_DEPTH : 16;
    ///< Depth of Device Address Table
    ///< AccessType="RO" BitOffset="16" ResetValue="0x8"
  } ;
  uint32_t value;
} mipi_i3c_device_addr_tbl_ptr_reg_t;

#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_DEFAULT (0x00080280U)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_WR_MASK (0x00000000U)


///< Start Address of Device Address Table.
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_P_DEV_ADDR_TBL_START_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_P_DEV_ADDR_TBL_START_ADDR_BF_WID (16)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_P_DEV_ADDR_TBL_START_ADDR_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_P_DEV_ADDR_TBL_START_ADDR_BF_DEF (0x00000280)

///< Depth of Device Address Table
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_DEV_ADDR_TBL_DEPTH_BF_OFF (16)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_DEV_ADDR_TBL_DEPTH_BF_WID (16)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_DEV_ADDR_TBL_DEPTH_BF_MSK (0xFFFF0000)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_DEV_ADDR_TBL_DEPTH_BF_DEF (0x00080000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE_POINTER register description at address offset 0x60
  *
  * Register default value:        0x00020200
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE_POINTER
  * Pointer for Device Characteristics Table
  */

typedef union {
  struct {
    uint32_t P_DEV_CHAR_TABLE_START_ADDR : 12;
    ///< Start Address of Device Characteristics Table.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x200"
    uint32_t DEV_CHAR_TABLE_DEPTH : 7;
    ///< Depth of Device Characteristics Table
    ///< AccessType="RO" BitOffset="12" ResetValue="0x20"
    uint32_t PRESENT_DEV_CHAR_TABLE_INDX : 3;
    ///< Current index of Device Characteristics Table. This field returns
    ///< the current location of Device Characteristics Table index. Initially,
    ///< this index points to 0. Once the complete characteristics information
    ///< of a Slave device is written into Device Characteristics Table during
    ///< ENTDAA, this index increments by 1. The first winning device information
    ///< is stored in Device Characteristics Table index 0, the second winning
    ///< device information in index 1, and so on. If required, this index
    ///< can be used to override the location, where characteristic information
    ///< of Slave devices on the I3C bus are written during ENTDAA. Hence,
    ///< this field is useful only if the device is Current Master. During
    ///< DEFSLV CCC, the index always starts from 0. In Non-current Master,
    ///< this field is always read-only.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl_ptr_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL_PTR_DEFAULT (0x00020200U)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_RD_MASK (0x003fffffU)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_WR_MASK (0x00380000U)


///< Start Address of Device Characteristics Table.
#define MIPI_I3C_DEV_CHAR_TBL_PTR_P_DEV_CHAR_TBL_START_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_P_DEV_CHAR_TBL_START_ADDR_BF_WID (12)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_P_DEV_CHAR_TBL_START_ADDR_BF_MSK (0x00000FFF)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_P_DEV_CHAR_TBL_START_ADDR_BF_DEF (0x00000200)

///< Depth of Device Characteristics Table
#define MIPI_I3C_DEV_CHAR_TBL_PTR_DEV_CHAR_TBL_DEPTH_BF_OFF (12)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_DEV_CHAR_TBL_DEPTH_BF_WID ( 7)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_DEV_CHAR_TBL_DEPTH_BF_MSK (0x0007F000)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_DEV_CHAR_TBL_DEPTH_BF_DEF (0x00020000)

///< Current index of Device Characteristics Table. This field returns
///< the current location of Device Characteristics Table index. Initially,
///< this index points to 0. Once the complete characteristics information
///< of a Slave device is written into Device Characteristics Table during
///< ENTDAA, this index increments by 1. The first winning device information
///< is stored in Device Characteristics Table index 0, the second winning
///< device information in index 1, and so on. If required, this index
///< can be used to override the location, where characteristic information
///< of Slave devices on the I3C bus are written during ENTDAA. Hence,
///< this field is useful only if the device is Current Master. During
///< DEFSLV CCC, the index always starts from 0. In Non-current Master,
///< this field is always read-only.
#define MIPI_I3C_DEV_CHAR_TBL_PTR_PRESENT_DEV_CHAR_TBL_INDX_BF_OFF (19)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_PRESENT_DEV_CHAR_TBL_INDX_BF_WID ( 3)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_PRESENT_DEV_CHAR_TBL_INDX_BF_MSK (0x00380000)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_PRESENT_DEV_CHAR_TBL_INDX_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_VENDOR_SPECIFIC_REG_POINTER register description at address offset 0x6c
  *
  * Register default value:        0x000000B0
  * Register full path in IP: mipi_i3c/reg/VENDOR_SPECIFIC_REG_POINTER
  * Pointer for Vendor specific Registers
  */

typedef union {
  struct {
    uint32_t P_VENDOR_REG_START_ADDR : 16;
    ///< Start Address of Vendor specific registers.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xB0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_vendor_specific_ptr_reg_t;

#define MIPI_I3C_VENDOR_SPECIFIC_PTR_DEFAULT (0x000000b0U)
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_RD_MASK (0x0000ffffU)
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_WR_MASK (0x00000000U)


///< Start Address of Vendor specific registers.
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_P_VENDOR_START_ADDR_BF_OFF ( 0)
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_P_VENDOR_START_ADDR_BF_WID (16)
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_P_VENDOR_START_ADDR_BF_MSK (0x0000FFFF)
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_P_VENDOR_START_ADDR_BF_DEF (0x000000B0)


/** @brief MIPI_I3C_REG_DEVICE_CTRL_EXTENDED register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEVICE_CTRL_EXTENDED
  * Device Control Extended Register
  */

typedef union {
  struct {
    uint32_t DEV_OPERATION_MODE : 2;
    ///< This bit is used to select the Device Operation Mode before the controller
    ///< is enabled. This field shall be written only when the DWC_mipi_i3c
    ///< is disabled. - 0: Master - 1: Slave - 2: Reserved - 3: Reserved This
    ///< field will be automatically updated by the controller once the role
    ///< change happens in secondary master mode..
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_device_ctrl_extended_reg_t;

#define MIPI_I3C_DEVICE_CTRL_EXTENDED_DEFAULT (0x00000000U)
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_RD_MASK (0x00000003U)
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_WR_MASK (0x00000003U)


///< This bit is used to select the Device Operation Mode before the controller
///< is enabled. This field shall be written only when the DWC_mipi_i3c
///< is disabled. - 0: Master - 1: Slave - 2: Reserved - 3: Reserved This
///< field will be automatically updated by the controller once the role
///< change happens in secondary master mode..
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_DEV_OPERATION_MODE_BF_OFF ( 0)
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_DEV_OPERATION_MODE_BF_WID ( 2)
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_DEV_OPERATION_MODE_BF_MSK (0x00000003)
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_DEV_OPERATION_MODE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_SCL_I3C_OD_TIMING register description at address offset 0xb4
  *
  * Register default value:        0x000A0010
  * Register full path in IP: mipi_i3c/reg/SCL_I3C_OD_TIMING
  * SCL I3C Open Drain Timing Register
  */

typedef union {
  struct {
    uint32_t I3C_OD_LCNT : 8;
    ///< I3C Open Drain Low Count. SCL Open-drain low count for I3C transfers
    ///< targeted to I3C devices.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t I3C_OD_HCNT : 8;
    ///< I3C Open Drain High Count. SCL open-drain High count (I3C) for I3C
    ///< transfers targeted to I3C devices.
    ///< AccessType="RW" BitOffset="16" ResetValue="0xA"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_scl_i3c_od_timing_reg_t;

#define MIPI_I3C_SCL_I3C_OD_TIMING_DEFAULT (0x000a0010U)
#define MIPI_I3C_SCL_I3C_OD_TIMING_RD_MASK (0x00ff00ffU)
#define MIPI_I3C_SCL_I3C_OD_TIMING_WR_MASK (0x00ff00ffU)


///< I3C Open Drain Low Count. SCL Open-drain low count for I3C transfers
///< targeted to I3C devices.
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_LCNT_BF_OFF ( 0)
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_LCNT_BF_WID ( 8)
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_LCNT_BF_MSK (0x000000FF)
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_LCNT_BF_DEF (0x00000010)

///< I3C Open Drain High Count. SCL open-drain High count (I3C) for I3C
///< transfers targeted to I3C devices.
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_HCNT_BF_OFF (16)
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_HCNT_BF_WID ( 8)
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_HCNT_BF_MSK (0x00FF0000)
#define MIPI_I3C_SCL_I3C_OD_TIMING_I3C_OD_HCNT_BF_DEF (0x000A0000)


/** @brief MIPI_I3C_REG_SCL_I3C_PP_TIMING register description at address offset 0xb8
  *
  * Register default value:        0x000A000A
  * Register full path in IP: mipi_i3c/reg/SCL_I3C_PP_TIMING
  * SCL I3C Push Pull Timing Register
  */

typedef union {
  struct {
    uint32_t I3C_PP_LCNT : 8;
    ///< I3C Push Pull Low Count. SCL Push-pull low count for I3C transfers
    ///< targeted to I3C devices.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xA"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t I3C_PP_HCNT : 8;
    ///< I3C Push Pull High Count. SCL push-pull High count for I3C transfers
    ///< targeted to I3C devices.
    ///< AccessType="RW" BitOffset="16" ResetValue="0xA"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_scl_i3c_pp_timing_reg_t;

#define MIPI_I3C_SCL_I3C_PP_TIMING_DEFAULT (0x000a000aU)
#define MIPI_I3C_SCL_I3C_PP_TIMING_RD_MASK (0x00ff00ffU)
#define MIPI_I3C_SCL_I3C_PP_TIMING_WR_MASK (0x00ff00ffU)


///< I3C Push Pull Low Count. SCL Push-pull low count for I3C transfers
///< targeted to I3C devices.
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_LCNT_BF_OFF ( 0)
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_LCNT_BF_WID ( 8)
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_LCNT_BF_MSK (0x000000FF)
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_LCNT_BF_DEF (0x0000000A)

///< I3C Push Pull High Count. SCL push-pull High count for I3C transfers
///< targeted to I3C devices.
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_HCNT_BF_OFF (16)
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_HCNT_BF_WID ( 8)
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_HCNT_BF_MSK (0x00FF0000)
#define MIPI_I3C_SCL_I3C_PP_TIMING_I3C_PP_HCNT_BF_DEF (0x000A0000)


/** @brief MIPI_I3C_REG_SCL_I2C_FM_TIMING register description at address offset 0xbc
  *
  * Register default value:        0x01380138
  * Register full path in IP: mipi_i3c/reg/SCL_I2C_FM_TIMING
  * SCL I2C Fast Mode Timing Register
  */

typedef union {
  struct {
    uint32_t I2C_FM_LCNT : 16;
    ///< I2C Fast Mode Low Count The SCL open-drain low count timing for I2C
    ///< fast mode transfers.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x138"
    uint32_t I2C_FM_HCNT : 16;
    ///< I2C Fast Mode High Count The SCL open-drain high count timing for
    ///< I2C fast mode transfers.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x138"
  } ;
  uint32_t value;
} mipi_i3c_scl_i2c_fm_timing_reg_t;

#define MIPI_I3C_SCL_I2C_FM_TIMING_DEFAULT (0x01380138U)
#define MIPI_I3C_SCL_I2C_FM_TIMING_RD_MASK (0xffffffffU)
#define MIPI_I3C_SCL_I2C_FM_TIMING_WR_MASK (0xffffffffU)


///< I2C Fast Mode Low Count The SCL open-drain low count timing for I2C
///< fast mode transfers.
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_LCNT_BF_OFF ( 0)
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_LCNT_BF_WID (16)
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_LCNT_BF_MSK (0x0000FFFF)
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_LCNT_BF_DEF (0x00000138)

///< I2C Fast Mode High Count The SCL open-drain high count timing for
///< I2C fast mode transfers.
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_HCNT_BF_OFF (16)
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_HCNT_BF_WID (16)
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_HCNT_BF_MSK (0xFFFF0000)
#define MIPI_I3C_SCL_I2C_FM_TIMING_I2C_FM_HCNT_BF_DEF (0x01380000)


/** @brief MIPI_I3C_REG_SCL_I2C_FMP_TIMING register description at address offset 0xc0
  *
  * Register default value:        0x007F007F
  * Register full path in IP: mipi_i3c/reg/SCL_I2C_FMP_TIMING
  * SCL I2C Fast Mode Plus Timing Register
  */

typedef union {
  struct {
    uint32_t I2C_FMP_LCNT : 16;
    ///< I2C Fast Mode Plus Low Count The SCL open-drain low count timing for
    ///< I2C fast mode plus transfers.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7F"
    uint32_t I2C_FMP_HCNT : 8;
    ///< I2C Fast Mode Plus High Count The SCL open-drain high count timing
    ///< for I2C fast mode plus transfers.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x7F"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_scl_i2c_fmp_timing_reg_t;

#define MIPI_I3C_SCL_I2C_FMP_TIMING_DEFAULT (0x007f007fU)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_RD_MASK (0x00ffffffU)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_WR_MASK (0x00ffffffU)


///< I2C Fast Mode Plus Low Count The SCL open-drain low count timing for
///< I2C fast mode plus transfers.
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_LCNT_BF_OFF ( 0)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_LCNT_BF_WID (16)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_LCNT_BF_MSK (0x0000FFFF)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_LCNT_BF_DEF (0x0000007F)

///< I2C Fast Mode Plus High Count The SCL open-drain high count timing
///< for I2C fast mode plus transfers.
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_HCNT_BF_OFF (16)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_HCNT_BF_WID ( 8)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_HCNT_BF_MSK (0x00FF0000)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_I2C_FMP_HCNT_BF_DEF (0x007F0000)


/** @brief MIPI_I3C_REG_SCL_EXT_LCNT_TIMING register description at address offset 0xc8
  *
  * Register default value:        0x20202020
  * Register full path in IP: mipi_i3c/reg/SCL_EXT_LCNT_TIMING
  * SCL Extended Low Count Timing Register
  */

typedef union {
  struct {
    uint32_t I3C_EXT_LCNT_1 : 8;
    ///< I3C Extended Low Count Register 1 SDR1 uses this register field for
    ///< data transfer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t I3C_EXT_LCNT_2 : 8;
    ///< I3C Extended Low Count Register 2 SDR2 uses this register field for
    ///< data transfer.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x20"
    uint32_t I3C_EXT_LCNT_3 : 8;
    ///< I3C Extended Low Count Register 3 SDR3 uses this register field for
    ///< data transfer.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x20"
    uint32_t I3C_EXT_LCNT_4 : 8;
    ///< I3C Extended Low Count Register 4 SDR4 uses this register field for
    ///< data transfer.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x20"
  } ;
  uint32_t value;
} mipi_i3c_scl_ext_lcnt_timing_reg_t;

#define MIPI_I3C_SCL_EXT_LCNT_TIMING_DEFAULT (0x20202020U)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_RD_MASK (0xffffffffU)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_WR_MASK (0xffffffffU)


///< I3C Extended Low Count Register 1 SDR1 uses this register field for
///< data transfer.
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_1_BF_OFF ( 0)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_1_BF_WID ( 8)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_1_BF_MSK (0x000000FF)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_1_BF_DEF (0x00000020)

///< I3C Extended Low Count Register 2 SDR2 uses this register field for
///< data transfer.
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_2_BF_OFF ( 8)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_2_BF_WID ( 8)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_2_BF_MSK (0x0000FF00)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_2_BF_DEF (0x00002000)

///< I3C Extended Low Count Register 3 SDR3 uses this register field for
///< data transfer.
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_3_BF_OFF (16)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_3_BF_WID ( 8)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_3_BF_MSK (0x00FF0000)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_3_BF_DEF (0x00200000)

///< I3C Extended Low Count Register 4 SDR4 uses this register field for
///< data transfer.
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_4_BF_OFF (24)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_4_BF_WID ( 8)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_4_BF_MSK (0xFF000000)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_I3C_EXT_LCNT_4_BF_DEF (0x20000000)


/** @brief MIPI_I3C_REG_SCL_EXT_TERMN_LCNT_TIMING register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/SCL_EXT_TERMN_LCNT_TIMING
  * SCL Termination Bit Low count Timing Register
  */

typedef union {
  struct {
    uint32_t I3C_EXT_TERMN_LCNT : 4;
    ///< I3C Read Termination Bit Low count. Extended I3C Read Termination
    ///< Bit low count for I3C Read transfers. Effective Termination-Bit Low
    ///< Period is derived based on the SDR speed as shown below - SDR0 speed:
    ///< I3C_PP_LCNT + I3C_EXT_TERMN_LCNT - SDR1 speed: I3C_EXT_LCNT_1 + I3C_EXT_TERMN_LCNT
    ///< - SDR2 speed: I3C_EXT_LCNT_2 + I3C_EXT_TERMN_LCNT - SDR3 speed: I3C_EXT_LCNT_3
    ///< + I3C_EXT_TERMN_LCNT - SDR4 speed: I3C_EXT_LCNT_4 + I3C_EXT_TERMN_LCNT
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_scl_ext_termn_lcnt_timing_reg_t;

#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_DEFAULT (0x00000000U)
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_RD_MASK (0x0000000fU)
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_WR_MASK (0x0000000fU)


///< I3C Read Termination Bit Low count. Extended I3C Read Termination
///< Bit low count for I3C Read transfers. Effective Termination-Bit Low
///< Period is derived based on the SDR speed as shown below - SDR0 speed:
///< I3C_PP_LCNT + I3C_EXT_TERMN_LCNT - SDR1 speed: I3C_EXT_LCNT_1 + I3C_EXT_TERMN_LCNT
///< - SDR2 speed: I3C_EXT_LCNT_2 + I3C_EXT_TERMN_LCNT - SDR3 speed: I3C_EXT_LCNT_3
///< + I3C_EXT_TERMN_LCNT - SDR4 speed: I3C_EXT_LCNT_4 + I3C_EXT_TERMN_LCNT
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_I3C_EXT_TERMN_LCNT_BF_OFF ( 0)
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_I3C_EXT_TERMN_LCNT_BF_WID ( 4)
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_I3C_EXT_TERMN_LCNT_BF_MSK (0x0000000F)
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_I3C_EXT_TERMN_LCNT_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_SDA_HOLD_DLY_TIMING register description at address offset 0xd0
  *
  * Register default value:        0x00010000
  * Register full path in IP: mipi_i3c/reg/SDA_HOLD_DLY_TIMING
  * SDA Hold Delay Timing Register
  */

typedef union {
  struct {
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t SDA_TX_HOLD : 3;
    ///< This field controls the hold time (in term of the core clock period)
    ///< of the transmit data (SDA) with respect to the SCL edge in FM FM+
    ///< SDR and DDR speed mode of operations. This field is not applicable
    ///< for the ternary speed modes. The valid values are 1 to 7. Others are
    ///< Reserved.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_sda_hold_dly_timing_reg_t;

#define MIPI_I3C_SDA_HOLD_DLY_TIMING_DEFAULT (0x00010000U)
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_RD_MASK (0x00070000U)
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_WR_MASK (0x00070000U)


///< This field controls the hold time (in term of the core clock period)
///< of the transmit data (SDA) with respect to the SCL edge in FM FM+
///< SDR and DDR speed mode of operations. This field is not applicable
///< for the ternary speed modes. The valid values are 1 to 7. Others are
///< Reserved.
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_SDA_TX_HOLD_BF_OFF (16)
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_SDA_TX_HOLD_BF_WID ( 3)
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_SDA_TX_HOLD_BF_MSK (0x00070000)
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_SDA_TX_HOLD_BF_DEF (0x00010000)


/** @brief MIPI_I3C_REG_BUS_FREE_AVAIL_TIMING register description at address offset 0xd4
  *
  * Register default value:        0x00000020
  * Register full path in IP: mipi_i3c/reg/BUS_FREE_AVAIL_TIMING
  * Bus Free Timing Register
  */

typedef union {
  struct {
    uint32_t BUS_FREE_TIME : 16;
    ///< This register field is used only in Master mode of operation I3C Bus
    ///< Free Count Value. In Pure Bus System, this field represents tCAS parameter.
    ///< In Mixed Bus system, this field is expected to be programmed to tLOW
    ///< of I2C Timing.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_bus_free_avail_timing_reg_t;

#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_DEFAULT (0x00000020U)
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_RD_MASK (0x0000ffffU)
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_WR_MASK (0x0000ffffU)


///< This register field is used only in Master mode of operation I3C Bus
///< Free Count Value. In Pure Bus System, this field represents tCAS parameter.
///< In Mixed Bus system, this field is expected to be programmed to tLOW
///< of I2C Timing.
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_BUS_FREE_TIME_BF_OFF ( 0)
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_BUS_FREE_TIME_BF_WID (16)
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_BUS_FREE_TIME_BF_MSK (0x0000FFFF)
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_BUS_FREE_TIME_BF_DEF (0x00000020)


/** @brief MIPI_I3C_REG_I3C_VER_ID register description at address offset 0xe0
  *
  * Register default value:        0x3130302A
  * Register full path in IP: mipi_i3c/reg/I3C_VER_ID
  * DWC_mipi_i3c Version ID Register
  */

typedef union {
  struct {
    uint32_t I3C_VER_ID : 32;
    ///< Current release number This field indicates the Synopsys DesignWare
    ///< Cores DWC_mipi_i3c current release number that is read by an application.
    ///< For example, release number
    ///< AccessType="RO" BitOffset="0" ResetValue="0x3130302A"
  } ;
  uint32_t value;
} mipi_i3c_ver_id_reg_t;

#define MIPI_I3C_VER_ID_DEFAULT (0x3130302aU)
#define MIPI_I3C_VER_ID_RD_MASK (0xffffffffU)
#define MIPI_I3C_VER_ID_WR_MASK (0x00000000U)


///< Current release number This field indicates the Synopsys DesignWare
///< Cores DWC_mipi_i3c current release number that is read by an application.
///< For example, release number
#define MIPI_I3C_VER_ID_I3C_VER_ID_BF_OFF ( 0)
#define MIPI_I3C_VER_ID_I3C_VER_ID_BF_WID (32)
#define MIPI_I3C_VER_ID_I3C_VER_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_VER_ID_I3C_VER_ID_BF_DEF (0x3130302A)


/** @brief MIPI_I3C_REG_I3C_VER_TYPE register description at address offset 0xe4
  *
  * Register default value:        0x6C633033
  * Register full path in IP: mipi_i3c/reg/I3C_VER_TYPE
  * DWC_mipi_i3c Version Type Register
  */

typedef union {
  struct {
    uint32_t I3C_VER_TYPE : 32;
    ///< Current release type This field indicates the Synopsys DesignWare
    ///< Cores DWC_mipi_i3c current release type that is read by an application.
    ///< For example, release type
    ///< AccessType="RO" BitOffset="0" ResetValue="0x6C633033"
  } ;
  uint32_t value;
} mipi_i3c_ver_type_reg_t;

#define MIPI_I3C_VER_TYPE_DEFAULT (0x6c633033U)
#define MIPI_I3C_VER_TYPE_RD_MASK (0xffffffffU)
#define MIPI_I3C_VER_TYPE_WR_MASK (0x00000000U)


///< Current release type This field indicates the Synopsys DesignWare
///< Cores DWC_mipi_i3c current release type that is read by an application.
///< For example, release type
#define MIPI_I3C_VER_TYPE_I3C_VER_TYPE_BF_OFF ( 0)
#define MIPI_I3C_VER_TYPE_I3C_VER_TYPE_BF_WID (32)
#define MIPI_I3C_VER_TYPE_I3C_VER_TYPE_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_VER_TYPE_I3C_VER_TYPE_BF_DEF (0x6C633033)


/** @brief MIPI_I3C_REG_QUEUE_SIZE_CAPABILITY register description at address offset 0xe8
  *
  * Register default value:        0x00022355
  * Register full path in IP: mipi_i3c/reg/QUEUE_SIZE_CAPABILITY
  * DWC_mipi_i3c Queue Size Capability Register
  */

typedef union {
  struct {
    uint32_t TX_BUF_SIZE : 4;
    ///< Transmit Data Buffer Size This field reflects the configured Transmit
    ///< Buffer size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS
    ///< - 0x1 : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS - 0x4 : 32 DWORDS
    ///< - 0x5 : 64 DWORDS
    ///< AccessType="RO" BitOffset="0" ResetValue="0x5"
    uint32_t RX_BUF_SIZE : 4;
    ///< Receive Data Buffer Size This field reflects the configured Receive
    ///< Buffer size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS
    ///< - 0x1 : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS - 0x4 : 32 DWORDS
    ///< - 0x5 : 64 DWORDS
    ///< AccessType="RO" BitOffset="4" ResetValue="0x5"
    uint32_t CMD_BUF_SIZE : 4;
    ///< Command Queue Size This field reflects the configured Command Queue
    ///< size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS - 0x1
    ///< : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS
    ///< AccessType="RO" BitOffset="8" ResetValue="0x3"
    uint32_t RESP_BUF_SIZE : 4;
    ///< Response Queue Size This field reflects the configured Response Queue
    ///< size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS - 0x1
    ///< : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS
    ///< AccessType="RO" BitOffset="12" ResetValue="0x2"
    uint32_t IBI_BUF_SIZE : 4;
    ///< IBI Queue Size This field reflects the configured IBI Queue size (in
    ///< DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS - 0x1 : 4 DWORDS
    ///< - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS
    ///< AccessType="RO" BitOffset="16" ResetValue="0x2"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_que_size_capability_reg_t;

#define MIPI_I3C_QUE_SIZE_CAPABILITY_DEFAULT (0x00022355U)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RD_MASK (0x000fffffU)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_WR_MASK (0x00000000U)


///< Transmit Data Buffer Size This field reflects the configured Transmit
///< Buffer size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS
///< - 0x1 : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS - 0x4 : 32 DWORDS
///< - 0x5 : 64 DWORDS
#define MIPI_I3C_QUE_SIZE_CAPABILITY_TX_BUF_SIZE_BF_OFF ( 0)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_TX_BUF_SIZE_BF_WID ( 4)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_TX_BUF_SIZE_BF_MSK (0x0000000F)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_TX_BUF_SIZE_BF_DEF (0x00000005)

///< Receive Data Buffer Size This field reflects the configured Receive
///< Buffer size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS
///< - 0x1 : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS - 0x4 : 32 DWORDS
///< - 0x5 : 64 DWORDS
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RX_BUF_SIZE_BF_OFF ( 4)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RX_BUF_SIZE_BF_WID ( 4)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RX_BUF_SIZE_BF_MSK (0x000000F0)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RX_BUF_SIZE_BF_DEF (0x00000050)

///< Command Queue Size This field reflects the configured Command Queue
///< size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS - 0x1
///< : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS
#define MIPI_I3C_QUE_SIZE_CAPABILITY_CMD_BUF_SIZE_BF_OFF ( 8)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_CMD_BUF_SIZE_BF_WID ( 4)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_CMD_BUF_SIZE_BF_MSK (0x00000F00)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_CMD_BUF_SIZE_BF_DEF (0x00000300)

///< Response Queue Size This field reflects the configured Response Queue
///< size (in DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS - 0x1
///< : 4 DWORDS - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RESP_BUF_SIZE_BF_OFF (12)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RESP_BUF_SIZE_BF_WID ( 4)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RESP_BUF_SIZE_BF_MSK (0x0000F000)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_RESP_BUF_SIZE_BF_DEF (0x00002000)

///< IBI Queue Size This field reflects the configured IBI Queue size (in
///< DWORDS) in Encoded Values. Values: - 0x0 : 2 DWORDS - 0x1 : 4 DWORDS
///< - 0x2 : 8 DWORDS - 0x3 : 16 DWORDS
#define MIPI_I3C_QUE_SIZE_CAPABILITY_IBI_BUF_SIZE_BF_OFF (16)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_IBI_BUF_SIZE_BF_WID ( 4)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_IBI_BUF_SIZE_BF_MSK (0x000F0000)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_IBI_BUF_SIZE_BF_DEF (0x00020000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE1_LOC1 register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE1_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl1_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE1_LOC2 register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE1_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl1_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE1_LOC3 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE1_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl1_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE1_LOC4 register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE1_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl1_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE2_LOC1 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE2_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl2_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE2_LOC2 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE2_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl2_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE2_LOC3 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE2_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl2_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE2_LOC4 register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE2_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl2_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE3_LOC1 register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE3_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl3_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE3_LOC2 register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE3_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl3_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE3_LOC3 register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE3_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl3_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE3_LOC4 register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE3_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl3_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE4_LOC1 register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE4_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl4_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE4_LOC2 register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE4_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl4_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE4_LOC3 register description at address offset 0x238
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE4_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl4_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE4_LOC4 register description at address offset 0x23c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE4_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl4_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE5_LOC1 register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE5_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl5_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE5_LOC2 register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE5_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl5_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE5_LOC3 register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE5_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl5_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE5_LOC4 register description at address offset 0x24c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE5_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl5_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE6_LOC1 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE6_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl6_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE6_LOC2 register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE6_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl6_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE6_LOC3 register description at address offset 0x258
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE6_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl6_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE6_LOC4 register description at address offset 0x25c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE6_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl6_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE7_LOC1 register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE7_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl7_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE7_LOC2 register description at address offset 0x264
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE7_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl7_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE7_LOC3 register description at address offset 0x268
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE7_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl7_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE7_LOC4 register description at address offset 0x26c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE7_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl7_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE8_LOC1 register description at address offset 0x270
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE8_LOC1
  */

typedef union {
  struct {
    uint32_t LSB_PROVISIONAL_ID : 32;
    ///< The LSB 32-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl8_loc1_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_RD_MASK (0xffffffffU)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_WR_MASK (0x00000000U)


///< The LSB 32-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_LSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_LSB_PROVISIONAL_ID_BF_WID (32)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_LSB_PROVISIONAL_ID_BF_MSK (0xFFFFFFFF)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_LSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE8_LOC2 register description at address offset 0x274
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE8_LOC2
  */

typedef union {
  struct {
    uint32_t MSB_PROVISIONAL_ID : 16;
    ///< The MSB 16-bit value of Provisional-ID
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl8_loc2_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_WR_MASK (0x00000000U)


///< The MSB 16-bit value of Provisional-ID
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_MSB_PROVISIONAL_ID_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_MSB_PROVISIONAL_ID_BF_WID (16)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_MSB_PROVISIONAL_ID_BF_MSK (0x0000FFFF)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_MSB_PROVISIONAL_ID_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE8_LOC3 register description at address offset 0x278
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE8_LOC3
  */

typedef union {
  struct {
    uint32_t DCR : 8;
    ///< Device Characteristic Value
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t BCR : 8;
    ///< Bus Characteristic Value
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl8_loc3_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_RD_MASK (0x0000ffffU)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_WR_MASK (0x00000000U)


///< Device Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_DCR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_DCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_DCR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_DCR_BF_DEF (0x00000000)

///< Bus Characteristic Value
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_BCR_BF_OFF ( 8)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_BCR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_BCR_BF_MSK (0x0000FF00)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_BCR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_CHAR_TABLE8_LOC4 register description at address offset 0x27c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_CHAR_TABLE8_LOC4
  */

typedef union {
  struct {
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address assigned.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} mipi_i3c_dev_char_tbl8_loc4_reg_t;

#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_RD_MASK (0x000000ffU)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_WR_MASK (0x00000000U)


///< Device Dynamic Address assigned.
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_DEV_DYNAMIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x000000FF)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC1 register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC1
  * Device Address Table of Device1
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< This field is used to set the Device NACK Retry count for the particular
    ///< device. If the Device NACK's for the device address, the controller
    ///< automatically retries the same device until this count expires. If
    ///< the Slave does not ACK for the mentioned number of retries, then Controller
    ///< generates an error response and move to the Halt state. This feature
    ///< is used for Retry Model for the following features mentioned in the
    ///< I3C Specification: - Retry Model for Direct GET CCC Commands. - The
    ///< incoming SIR-IBI matches with the slave address initated by the Master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc1_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< This field is used to set the Device NACK Retry count for the particular
///< device. If the Device NACK's for the device address, the controller
///< automatically retries the same device until this count expires. If
///< the Slave does not ACK for the mentioned number of retries, then Controller
///< generates an error response and move to the Halt state. This feature
///< is used for Retry Model for the following features mentioned in the
///< I3C Specification: - Retry Model for Direct GET CCC Commands. - The
///< incoming SIR-IBI matches with the slave address initated by the Master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC2 register description at address offset 0x284
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC2
  * Device Address Table of Device2
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc2_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC3 register description at address offset 0x288
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC3
  * Device Address Table of Device3
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc3_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC4 register description at address offset 0x28c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC4
  * Device Address Table of Device4
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc4_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC5 register description at address offset 0x290
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC5
  * Device Address Table of Device5
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc5_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC6 register description at address offset 0x294
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC6
  * Device Address Table of Device6
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc6_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC7 register description at address offset 0x298
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC7
  * Device Address Table of Device7
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc7_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)


/** @brief MIPI_I3C_REG_DEV_ADDR_TABLE_LOC8 register description at address offset 0x29c
  *
  * Register default value:        0x00000000
  * Register full path in IP: mipi_i3c/reg/DEV_ADDR_TABLE_LOC8
  * Device Address Table of Device8
  */

typedef union {
  struct {
    uint32_t DEV_STATIC_ADDR : 7;
    ///< Device Static Address.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEV_DYNAMIC_ADDR : 8;
    ///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
    ///< with parity of dynamic address.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t DEV_NACK_RETRY_CNT : 2;
    ///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
    ///< Retry count for the particular device. If the Device NACK's for the
    ///< device address, the controller automatically retries the same device
    ///< until this count expires. If the slave doesn't ACK for the mentioned
    ///< number of retries, then controller generates an error response and
    ///< move to the Halt state. This feature is used for Retry Model for the
    ///< following features mentioned in the specification: 1. Retry Model
    ///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
    ///< the slave address initated by the master.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t LEGACY_I2C_DEVICE : 1;
    ///< Legacy I2C device or not. This bit should be set to 1 if the device
    ///< is a legacy I2C device.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} mipi_i3c_dev_addr_tbl_loc8_reg_t;

#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEFAULT (0x00000000U)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_RD_MASK (0xe0ff007fU)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_WR_MASK (0xe0ff007fU)


///< Device Static Address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_STATIC_ADDR_BF_OFF ( 0)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_STATIC_ADDR_BF_WID ( 7)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_STATIC_ADDR_BF_MSK (0x0000007F)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_STATIC_ADDR_BF_DEF (0x00000000)

///< Device Dynamic Address with parity. The MSB, bit[23], should be programmed
///< with parity of dynamic address.
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_DYNAMIC_ADDR_BF_OFF (16)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_DYNAMIC_ADDR_BF_WID ( 8)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_DYNAMIC_ADDR_BF_MSK (0x00FF0000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_DYNAMIC_ADDR_BF_DEF (0x00000000)

///< DEVICE_NACK_RETRY_CNT: These field is used to set the Device NACK
///< Retry count for the particular device. If the Device NACK's for the
///< device address, the controller automatically retries the same device
///< until this count expires. If the slave doesn't ACK for the mentioned
///< number of retries, then controller generates an error response and
///< move to the Halt state. This feature is used for Retry Model for the
///< following features mentioned in the specification: 1. Retry Model
///< for Direct GET CCC Commands 2. If the incoming SIR-IBI matches with
///< the slave address initated by the master.
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_NACK_RETRY_CNT_BF_OFF (29)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_NACK_RETRY_CNT_BF_WID ( 2)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_NACK_RETRY_CNT_BF_MSK (0x60000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_DEV_NACK_RETRY_CNT_BF_DEF (0x00000000)

///< Legacy I2C device or not. This bit should be set to 1 if the device
///< is a legacy I2C device.
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_LEGACY_I2C_DEVICE_BF_OFF (31)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_LEGACY_I2C_DEVICE_BF_WID ( 1)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_LEGACY_I2C_DEVICE_BF_MSK (0x80000000)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_LEGACY_I2C_DEVICE_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define MIPI_I3C_DEVICE_CTRL_REG ((mipi_i3c_device_ctrl_reg_t*) MIPI_I3C_DEVICE_CTRL_ADR)
#define MIPI_I3C_DEVICE_ADDR_REG ((mipi_i3c_device_addr_reg_t*) MIPI_I3C_DEVICE_ADDR_ADR)
#define MIPI_I3C_HW_CAPABILITY_REG ((mipi_i3c_hw_capability_reg_t*) MIPI_I3C_HW_CAPABILITY_ADR)
#define MIPI_I3C_CMD_QUE_PORT_XXX_REG ((mipi_i3c_cmd_que_port_xxx_reg_t*) MIPI_I3C_CMD_QUE_PORT_XXX_ADR)
#define MIPI_I3C_RSP_QUE_PORT_REG ((mipi_i3c_rsp_que_port_reg_t*) MIPI_I3C_RSP_QUE_PORT_ADR)
#define MIPI_I3C_RX_TX_DATA_PORT_REG ((mipi_i3c_rx_tx_data_port_reg_t*) MIPI_I3C_RX_TX_DATA_PORT_ADR)
#define MIPI_I3C_IBI_DATA_STAT_REG ((mipi_i3c_ibi_data_stat_reg_t*) MIPI_I3C_IBI_DATA_STAT_ADR)
#define MIPI_I3C_QUE_THLD_CTRL_REG ((mipi_i3c_que_thld_ctrl_reg_t*) MIPI_I3C_QUE_THLD_CTRL_ADR)
#define MIPI_I3C_DATA_BUFF_THLD_CTRL_REG ((mipi_i3c_data_buff_thld_ctrl_reg_t*) MIPI_I3C_DATA_BUFF_THLD_CTRL_ADR)
#define MIPI_I3C_IBI_QUE_CTRL_REG ((mipi_i3c_ibi_que_ctrl_reg_t*) MIPI_I3C_IBI_QUE_CTRL_ADR)
#define MIPI_I3C_RST_CTRL_REG ((mipi_i3c_rst_ctrl_reg_t*) MIPI_I3C_RST_CTRL_ADR)
#define MIPI_I3C_SLV_EVENT_STAT_REG ((mipi_i3c_slv_event_stat_reg_t*) MIPI_I3C_SLV_EVENT_STAT_ADR)
#define MIPI_I3C_INTR_STAT_REG ((mipi_i3c_intr_stat_reg_t*) MIPI_I3C_INTR_STAT_ADR)
#define MIPI_I3C_INTR_STAT_EN_REG ((mipi_i3c_intr_stat_en_reg_t*) MIPI_I3C_INTR_STAT_EN_ADR)
#define MIPI_I3C_INTR_SIGNAL_EN_REG ((mipi_i3c_intr_signal_en_reg_t*) MIPI_I3C_INTR_SIGNAL_EN_ADR)
#define MIPI_I3C_INTR_FORCE_REG ((mipi_i3c_intr_force_reg_t*) MIPI_I3C_INTR_FORCE_ADR)
#define MIPI_I3C_QUE_STAT_LVL_REG ((mipi_i3c_que_stat_lvl_reg_t*) MIPI_I3C_QUE_STAT_LVL_ADR)
#define MIPI_I3C_DATA_BUFF_STAT_LVL_REG ((mipi_i3c_data_buff_stat_lvl_reg_t*) MIPI_I3C_DATA_BUFF_STAT_LVL_ADR)
#define MIPI_I3C_PRESENT_STATE_REG ((mipi_i3c_present_state_reg_t*) MIPI_I3C_PRESENT_STATE_ADR)
#define MIPI_I3C_DEVICE_ADDR_TBL_PTR_REG ((mipi_i3c_device_addr_tbl_ptr_reg_t*) MIPI_I3C_DEVICE_ADDR_TBL_PTR_ADR)
#define MIPI_I3C_DEV_CHAR_TBL_PTR_REG ((mipi_i3c_dev_char_tbl_ptr_reg_t*) MIPI_I3C_DEV_CHAR_TBL_PTR_ADR)
#define MIPI_I3C_VENDOR_SPECIFIC_PTR_REG ((mipi_i3c_vendor_specific_ptr_reg_t*) MIPI_I3C_VENDOR_SPECIFIC_PTR_ADR)
#define MIPI_I3C_DEVICE_CTRL_EXTENDED_REG ((mipi_i3c_device_ctrl_extended_reg_t*) MIPI_I3C_DEVICE_CTRL_EXTENDED_ADR)
#define MIPI_I3C_SCL_I3C_OD_TIMING_REG ((mipi_i3c_scl_i3c_od_timing_reg_t*) MIPI_I3C_SCL_I3C_OD_TIMING_ADR)
#define MIPI_I3C_SCL_I3C_PP_TIMING_REG ((mipi_i3c_scl_i3c_pp_timing_reg_t*) MIPI_I3C_SCL_I3C_PP_TIMING_ADR)
#define MIPI_I3C_SCL_I2C_FM_TIMING_REG ((mipi_i3c_scl_i2c_fm_timing_reg_t*) MIPI_I3C_SCL_I2C_FM_TIMING_ADR)
#define MIPI_I3C_SCL_I2C_FMP_TIMING_REG ((mipi_i3c_scl_i2c_fmp_timing_reg_t*) MIPI_I3C_SCL_I2C_FMP_TIMING_ADR)
#define MIPI_I3C_SCL_EXT_LCNT_TIMING_REG ((mipi_i3c_scl_ext_lcnt_timing_reg_t*) MIPI_I3C_SCL_EXT_LCNT_TIMING_ADR)
#define MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_REG ((mipi_i3c_scl_ext_termn_lcnt_timing_reg_t*) MIPI_I3C_SCL_EXT_TERMN_LCNT_TIMING_ADR)
#define MIPI_I3C_SDA_HOLD_DLY_TIMING_REG ((mipi_i3c_sda_hold_dly_timing_reg_t*) MIPI_I3C_SDA_HOLD_DLY_TIMING_ADR)
#define MIPI_I3C_BUS_FREE_AVAIL_TIMING_REG ((mipi_i3c_bus_free_avail_timing_reg_t*) MIPI_I3C_BUS_FREE_AVAIL_TIMING_ADR)
#define MIPI_I3C_VER_ID_REG ((mipi_i3c_ver_id_reg_t*) MIPI_I3C_VER_ID_ADR)
#define MIPI_I3C_VER_TYPE_REG ((mipi_i3c_ver_type_reg_t*) MIPI_I3C_VER_TYPE_ADR)
#define MIPI_I3C_QUE_SIZE_CAPABILITY_REG ((mipi_i3c_que_size_capability_reg_t*) MIPI_I3C_QUE_SIZE_CAPABILITY_ADR)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC1_REG ((mipi_i3c_dev_char_tbl1_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL1_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC2_REG ((mipi_i3c_dev_char_tbl1_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL1_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC3_REG ((mipi_i3c_dev_char_tbl1_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL1_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL1_LOC4_REG ((mipi_i3c_dev_char_tbl1_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL1_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC1_REG ((mipi_i3c_dev_char_tbl2_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL2_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC2_REG ((mipi_i3c_dev_char_tbl2_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL2_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC3_REG ((mipi_i3c_dev_char_tbl2_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL2_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL2_LOC4_REG ((mipi_i3c_dev_char_tbl2_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL2_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC1_REG ((mipi_i3c_dev_char_tbl3_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL3_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC2_REG ((mipi_i3c_dev_char_tbl3_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL3_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC3_REG ((mipi_i3c_dev_char_tbl3_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL3_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL3_LOC4_REG ((mipi_i3c_dev_char_tbl3_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL3_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC1_REG ((mipi_i3c_dev_char_tbl4_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL4_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC2_REG ((mipi_i3c_dev_char_tbl4_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL4_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC3_REG ((mipi_i3c_dev_char_tbl4_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL4_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL4_LOC4_REG ((mipi_i3c_dev_char_tbl4_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL4_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC1_REG ((mipi_i3c_dev_char_tbl5_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL5_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC2_REG ((mipi_i3c_dev_char_tbl5_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL5_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC3_REG ((mipi_i3c_dev_char_tbl5_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL5_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL5_LOC4_REG ((mipi_i3c_dev_char_tbl5_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL5_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC1_REG ((mipi_i3c_dev_char_tbl6_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL6_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC2_REG ((mipi_i3c_dev_char_tbl6_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL6_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC3_REG ((mipi_i3c_dev_char_tbl6_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL6_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL6_LOC4_REG ((mipi_i3c_dev_char_tbl6_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL6_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC1_REG ((mipi_i3c_dev_char_tbl7_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL7_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC2_REG ((mipi_i3c_dev_char_tbl7_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL7_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC3_REG ((mipi_i3c_dev_char_tbl7_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL7_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL7_LOC4_REG ((mipi_i3c_dev_char_tbl7_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL7_LOC4_ADR)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC1_REG ((mipi_i3c_dev_char_tbl8_loc1_reg_t*) MIPI_I3C_DEV_CHAR_TBL8_LOC1_ADR)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC2_REG ((mipi_i3c_dev_char_tbl8_loc2_reg_t*) MIPI_I3C_DEV_CHAR_TBL8_LOC2_ADR)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC3_REG ((mipi_i3c_dev_char_tbl8_loc3_reg_t*) MIPI_I3C_DEV_CHAR_TBL8_LOC3_ADR)
#define MIPI_I3C_DEV_CHAR_TBL8_LOC4_REG ((mipi_i3c_dev_char_tbl8_loc4_reg_t*) MIPI_I3C_DEV_CHAR_TBL8_LOC4_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC1_REG ((mipi_i3c_dev_addr_tbl_loc1_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC1_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC2_REG ((mipi_i3c_dev_addr_tbl_loc2_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC2_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC3_REG ((mipi_i3c_dev_addr_tbl_loc3_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC3_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC4_REG ((mipi_i3c_dev_addr_tbl_loc4_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC4_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC5_REG ((mipi_i3c_dev_addr_tbl_loc5_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC5_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC6_REG ((mipi_i3c_dev_addr_tbl_loc6_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC6_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC7_REG ((mipi_i3c_dev_addr_tbl_loc7_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC7_ADR)
#define MIPI_I3C_DEV_ADDR_TBL_LOC8_REG ((mipi_i3c_dev_addr_tbl_loc8_reg_t*) MIPI_I3C_DEV_ADDR_TBL_LOC8_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    mipi_i3c_device_ctrl_reg_t DEVICE_CTRL;     /*< Address offset = 0x0 */
    mipi_i3c_device_addr_reg_t DEVICE_ADDR;     /*< Address offset = 0x4 */
    mipi_i3c_hw_capability_reg_t HW_CAPABILITY;   /*< Address offset = 0x8 */
    mipi_i3c_cmd_que_port_xxx_reg_t CMD_QUE_PORT_XXX; /*< Address offset = 0xc */
    mipi_i3c_rsp_que_port_reg_t RSP_QUE_PORT; /*< Address offset = 0x10 */
    mipi_i3c_rx_tx_data_port_reg_t RX_TX_DATA_PORT; /*< Address offset = 0x14 */
    mipi_i3c_ibi_data_stat_reg_t IBI_DATA_STAT; /*< Address offset = 0x18 */
    mipi_i3c_que_thld_ctrl_reg_t QUE_THLD_CTRL; /*< Address offset = 0x1c */
    mipi_i3c_data_buff_thld_ctrl_reg_t DATA_BUFF_THLD_CTRL; /*< Address offset = 0x20 */
    mipi_i3c_ibi_que_ctrl_reg_t IBI_QUE_CTRL;  /*< Address offset = 0x24 */
    const uint8_t        reservedArea0 [12];  /*< Address offset = 0x28 */
    mipi_i3c_rst_ctrl_reg_t RST_CTRL;      /*< Address offset = 0x34 */
    mipi_i3c_slv_event_stat_reg_t SLV_EVENT_STAT; /*< Address offset = 0x38 */
    mipi_i3c_intr_stat_reg_t INTR_STAT;     /*< Address offset = 0x3c */
    mipi_i3c_intr_stat_en_reg_t INTR_STAT_EN;  /*< Address offset = 0x40 */
    mipi_i3c_intr_signal_en_reg_t INTR_SIGNAL_EN;  /*< Address offset = 0x44 */
    mipi_i3c_intr_force_reg_t INTR_FORCE;      /*< Address offset = 0x48 */
    mipi_i3c_que_stat_lvl_reg_t QUE_STAT_LVL; /*< Address offset = 0x4c */
    mipi_i3c_data_buff_stat_lvl_reg_t DATA_BUFF_STAT_LVL; /*< Address offset = 0x50 */
    mipi_i3c_present_state_reg_t PRESENT_STATE;   /*< Address offset = 0x54 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x58 */
    mipi_i3c_device_addr_tbl_ptr_reg_t DEVICE_ADDR_TBL_PTR; /*< Address offset = 0x5c */
    mipi_i3c_dev_char_tbl_ptr_reg_t DEV_CHAR_TBL_PTR; /*< Address offset = 0x60 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x64 */
    mipi_i3c_vendor_specific_ptr_reg_t VENDOR_SPECIFIC_PTR; /*< Address offset = 0x6c */
    const uint8_t        reservedArea3 [64];  /*< Address offset = 0x70 */
    mipi_i3c_device_ctrl_extended_reg_t DEVICE_CTRL_EXTENDED; /*< Address offset = 0xb0 */
    mipi_i3c_scl_i3c_od_timing_reg_t SCL_I3C_OD_TIMING; /*< Address offset = 0xb4 */
    mipi_i3c_scl_i3c_pp_timing_reg_t SCL_I3C_PP_TIMING; /*< Address offset = 0xb8 */
    mipi_i3c_scl_i2c_fm_timing_reg_t SCL_I2C_FM_TIMING; /*< Address offset = 0xbc */
    mipi_i3c_scl_i2c_fmp_timing_reg_t SCL_I2C_FMP_TIMING; /*< Address offset = 0xc0 */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0xc4 */
    mipi_i3c_scl_ext_lcnt_timing_reg_t SCL_EXT_LCNT_TIMING; /*< Address offset = 0xc8 */
    mipi_i3c_scl_ext_termn_lcnt_timing_reg_t SCL_EXT_TERMN_LCNT_TIMING; /*< Address offset = 0xcc */
    mipi_i3c_sda_hold_dly_timing_reg_t SDA_HOLD_DLY_TIMING; /*< Address offset = 0xd0 */
    mipi_i3c_bus_free_avail_timing_reg_t BUS_FREE_AVAIL_TIMING; /*< Address offset = 0xd4 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0xd8 */
    mipi_i3c_ver_id_reg_t I3C_VER_ID;      /*< Address offset = 0xe0 */
    mipi_i3c_ver_type_reg_t I3C_VER_TYPE;    /*< Address offset = 0xe4 */
    mipi_i3c_que_size_capability_reg_t QUE_SIZE_CAPABILITY; /*< Address offset = 0xe8 */
    const uint8_t        reservedArea6 [276]; /*< Address offset = 0xec */
    mipi_i3c_dev_char_tbl1_loc1_reg_t DEV_CHAR_TBL1_LOC1; /*< Address offset = 0x200 */
    mipi_i3c_dev_char_tbl1_loc2_reg_t DEV_CHAR_TBL1_LOC2; /*< Address offset = 0x204 */
    mipi_i3c_dev_char_tbl1_loc3_reg_t DEV_CHAR_TBL1_LOC3; /*< Address offset = 0x208 */
    mipi_i3c_dev_char_tbl1_loc4_reg_t DEV_CHAR_TBL1_LOC4; /*< Address offset = 0x20c */
    mipi_i3c_dev_char_tbl2_loc1_reg_t DEV_CHAR_TBL2_LOC1; /*< Address offset = 0x210 */
    mipi_i3c_dev_char_tbl2_loc2_reg_t DEV_CHAR_TBL2_LOC2; /*< Address offset = 0x214 */
    mipi_i3c_dev_char_tbl2_loc3_reg_t DEV_CHAR_TBL2_LOC3; /*< Address offset = 0x218 */
    mipi_i3c_dev_char_tbl2_loc4_reg_t DEV_CHAR_TBL2_LOC4; /*< Address offset = 0x21c */
    mipi_i3c_dev_char_tbl3_loc1_reg_t DEV_CHAR_TBL3_LOC1; /*< Address offset = 0x220 */
    mipi_i3c_dev_char_tbl3_loc2_reg_t DEV_CHAR_TBL3_LOC2; /*< Address offset = 0x224 */
    mipi_i3c_dev_char_tbl3_loc3_reg_t DEV_CHAR_TBL3_LOC3; /*< Address offset = 0x228 */
    mipi_i3c_dev_char_tbl3_loc4_reg_t DEV_CHAR_TBL3_LOC4; /*< Address offset = 0x22c */
    mipi_i3c_dev_char_tbl4_loc1_reg_t DEV_CHAR_TBL4_LOC1; /*< Address offset = 0x230 */
    mipi_i3c_dev_char_tbl4_loc2_reg_t DEV_CHAR_TBL4_LOC2; /*< Address offset = 0x234 */
    mipi_i3c_dev_char_tbl4_loc3_reg_t DEV_CHAR_TBL4_LOC3; /*< Address offset = 0x238 */
    mipi_i3c_dev_char_tbl4_loc4_reg_t DEV_CHAR_TBL4_LOC4; /*< Address offset = 0x23c */
    mipi_i3c_dev_char_tbl5_loc1_reg_t DEV_CHAR_TBL5_LOC1; /*< Address offset = 0x240 */
    mipi_i3c_dev_char_tbl5_loc2_reg_t DEV_CHAR_TBL5_LOC2; /*< Address offset = 0x244 */
    mipi_i3c_dev_char_tbl5_loc3_reg_t DEV_CHAR_TBL5_LOC3; /*< Address offset = 0x248 */
    mipi_i3c_dev_char_tbl5_loc4_reg_t DEV_CHAR_TBL5_LOC4; /*< Address offset = 0x24c */
    mipi_i3c_dev_char_tbl6_loc1_reg_t DEV_CHAR_TBL6_LOC1; /*< Address offset = 0x250 */
    mipi_i3c_dev_char_tbl6_loc2_reg_t DEV_CHAR_TBL6_LOC2; /*< Address offset = 0x254 */
    mipi_i3c_dev_char_tbl6_loc3_reg_t DEV_CHAR_TBL6_LOC3; /*< Address offset = 0x258 */
    mipi_i3c_dev_char_tbl6_loc4_reg_t DEV_CHAR_TBL6_LOC4; /*< Address offset = 0x25c */
    mipi_i3c_dev_char_tbl7_loc1_reg_t DEV_CHAR_TBL7_LOC1; /*< Address offset = 0x260 */
    mipi_i3c_dev_char_tbl7_loc2_reg_t DEV_CHAR_TBL7_LOC2; /*< Address offset = 0x264 */
    mipi_i3c_dev_char_tbl7_loc3_reg_t DEV_CHAR_TBL7_LOC3; /*< Address offset = 0x268 */
    mipi_i3c_dev_char_tbl7_loc4_reg_t DEV_CHAR_TBL7_LOC4; /*< Address offset = 0x26c */
    mipi_i3c_dev_char_tbl8_loc1_reg_t DEV_CHAR_TBL8_LOC1; /*< Address offset = 0x270 */
    mipi_i3c_dev_char_tbl8_loc2_reg_t DEV_CHAR_TBL8_LOC2; /*< Address offset = 0x274 */
    mipi_i3c_dev_char_tbl8_loc3_reg_t DEV_CHAR_TBL8_LOC3; /*< Address offset = 0x278 */
    mipi_i3c_dev_char_tbl8_loc4_reg_t DEV_CHAR_TBL8_LOC4; /*< Address offset = 0x27c */
    mipi_i3c_dev_addr_tbl_loc1_reg_t DEV_ADDR_TBL_LOC1; /*< Address offset = 0x280 */
    mipi_i3c_dev_addr_tbl_loc2_reg_t DEV_ADDR_TBL_LOC2; /*< Address offset = 0x284 */
    mipi_i3c_dev_addr_tbl_loc3_reg_t DEV_ADDR_TBL_LOC3; /*< Address offset = 0x288 */
    mipi_i3c_dev_addr_tbl_loc4_reg_t DEV_ADDR_TBL_LOC4; /*< Address offset = 0x28c */
    mipi_i3c_dev_addr_tbl_loc5_reg_t DEV_ADDR_TBL_LOC5; /*< Address offset = 0x290 */
    mipi_i3c_dev_addr_tbl_loc6_reg_t DEV_ADDR_TBL_LOC6; /*< Address offset = 0x294 */
    mipi_i3c_dev_addr_tbl_loc7_reg_t DEV_ADDR_TBL_LOC7; /*< Address offset = 0x298 */
    mipi_i3c_dev_addr_tbl_loc8_reg_t DEV_ADDR_TBL_LOC8; /*< Address offset = 0x29c */
} mipi_i3c_t;     // size: 0x0128

// AddressSpace struct pointer
//
#define RCS_I3CM0_MIPI   ((mipi_i3c_t*) RCS_I3CM0_MIPI_BASE)

// ******************************************* /Address Space

#endif      // _MIPI_I3C_H_

