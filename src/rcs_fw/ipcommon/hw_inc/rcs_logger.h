#ifndef _RCS_LOGGER_H_
#define _RCS_LOGGER_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_LOGGER_BASE       ( 0x00240000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RCS_LOGGER_RSM0_AXI2EDCRN_OFFSET ( 0x00000800U )
#define RCS_LOGGER_RSM0_AXI2EDSR1N_OFFSET ( 0x00000804U )
#define RCS_LOGGER_RSM0_AXI2EDSR2N_OFFSET ( 0x00000808U )
#define RCS_LOGGER_RSM0_AXI2EDEARN_OFFSET ( 0x0000080cU )
#define RCS_LOGGER_RSM0_ECCSBECN_OFFSET ( 0x00000810U )
#define RCS_LOGGER_RSM0_ECCDBECN_OFFSET ( 0x00000814U )
#define RCS_LOGGER_RSM0_AWPECN_OFFSET ( 0x00000818U )
#define RCS_LOGGER_RSM0_WPECN_OFFSET ( 0x0000081cU )
#define RCS_LOGGER_RSM0_ARPECN_OFFSET ( 0x00000820U )
#define RCS_LOGGER_RSM0_AXI2EDIMTN_OFFSET ( 0x00000824U )
#define RCS_LOGGER_RSM0_AXI2EDIMTON_OFFSET ( 0x00000828U )
#define RCS_LOGGER_RSM0_AXI2EDFIFOSRN_OFFSET ( 0x0000082cU )
#define RCS_LOGGER_RSM0_AXI2EDFIFON_OFFSET ( 0x00000830U )
#define RCS_LOGGER_RSM0_AXI2EDIDN_OFFSET ( 0x00000834U )
#define RCS_LOGGER_RSM1_AXI2EDCRN_OFFSET ( 0x00000840U )
#define RCS_LOGGER_RSM1_AXI2EDSR1N_OFFSET ( 0x00000844U )
#define RCS_LOGGER_RSM1_AXI2EDSR2N_OFFSET ( 0x00000848U )
#define RCS_LOGGER_RSM1_AXI2EDEARN_OFFSET ( 0x0000084cU )
#define RCS_LOGGER_RSM1_ECCSBECN_OFFSET ( 0x00000850U )
#define RCS_LOGGER_RSM1_ECCDBECN_OFFSET ( 0x00000854U )
#define RCS_LOGGER_RSM1_AWPECN_OFFSET ( 0x00000858U )
#define RCS_LOGGER_RSM1_WPECN_OFFSET ( 0x0000085cU )
#define RCS_LOGGER_RSM1_ARPECN_OFFSET ( 0x00000860U )
#define RCS_LOGGER_RSM1_AXI2EDIMTN_OFFSET ( 0x00000864U )
#define RCS_LOGGER_RSM1_AXI2EDIMTON_OFFSET ( 0x00000868U )
#define RCS_LOGGER_RSM1_AXI2EDFIFOSRN_OFFSET ( 0x0000086cU )
#define RCS_LOGGER_RSM1_AXI2EDFIFON_OFFSET ( 0x00000870U )
#define RCS_LOGGER_RSM1_AXI2EDIDN_OFFSET ( 0x00000874U )
#define RCS_LOGGER_PID_OFFSET    ( 0x00000fc0U )
#define RCS_LOGGER_PEIWER_OFFSET ( 0x00000fc4U )
#define RCS_LOGGER_EMCR_OFFSET   ( 0x00000fc8U )
#define RCS_LOGGER_ADBESR_OFFSET ( 0x00000fdcU )
#define RCS_LOGGER_APESR_OFFSET  ( 0x00000fe0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RCS_LOGGER_RSM0_AXI2EDCRN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDCRN_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDSR1N_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDSR1N_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDSR2N_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDSR2N_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDEARN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDEARN_OFFSET ) ))
#define RCS_LOGGER_RSM0_ECCSBECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_ECCSBECN_OFFSET ) ))
#define RCS_LOGGER_RSM0_ECCDBECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_ECCDBECN_OFFSET ) ))
#define RCS_LOGGER_RSM0_AWPECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AWPECN_OFFSET ) ))
#define RCS_LOGGER_RSM0_WPECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_WPECN_OFFSET ) ))
#define RCS_LOGGER_RSM0_ARPECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_ARPECN_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDIMTN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDIMTN_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDIMTON_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDIMTON_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDFIFOSRN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDFIFOSRN_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDFIFON_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDFIFON_OFFSET ) ))
#define RCS_LOGGER_RSM0_AXI2EDIDN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM0_AXI2EDIDN_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDCRN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDCRN_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDSR1N_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDSR1N_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDSR2N_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDSR2N_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDEARN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDEARN_OFFSET ) ))
#define RCS_LOGGER_RSM1_ECCSBECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_ECCSBECN_OFFSET ) ))
#define RCS_LOGGER_RSM1_ECCDBECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_ECCDBECN_OFFSET ) ))
#define RCS_LOGGER_RSM1_AWPECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AWPECN_OFFSET ) ))
#define RCS_LOGGER_RSM1_WPECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_WPECN_OFFSET ) ))
#define RCS_LOGGER_RSM1_ARPECN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_ARPECN_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDIMTN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDIMTN_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDIMTON_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDIMTON_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDFIFOSRN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDFIFOSRN_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDFIFON_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDFIFON_OFFSET ) ))
#define RCS_LOGGER_RSM1_AXI2EDIDN_ADR (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_RSM1_AXI2EDIDN_OFFSET ) ))
#define RCS_LOGGER_PID_ADR       (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_PID_OFFSET ) ))
#define RCS_LOGGER_PEIWER_ADR    (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_PEIWER_OFFSET ) ))
#define RCS_LOGGER_EMCR_ADR      (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_EMCR_OFFSET ) ))
#define RCS_LOGGER_ADBESR_ADR    (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_ADBESR_OFFSET ) ))
#define RCS_LOGGER_APESR_ADR     (( ( RCS_LOGGER_BASE ) + ( RCS_LOGGER_APESR_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDCRN[2] register description at address offset 0x800
  *
  * Register default value:        0x001FF2EE
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDCRn
  * AXI2ED Control Register
  */

typedef union {
  struct {
    uint32_t WP : 1;
    ///< Write protect of the nth AXI2ED controller. The value programmed in
    ///< this bit appears on the primary write_protect[n] output signal. This
    ///< output signal protects the AXI2ED memories from write operations.
    ///< On reset, the memories are enabled for write operations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ENRMWECCCHK : 1;
    ///< ECC check control for read operations during RMW of the nth AXI2ED
    ///< controller. - 0: Disable ECC check. - 1: Enable ECC check. The value
    ///< programmed in this bit appears on the primary ENABLE_RMW_ECC_CHECK[n]
    ///< output signal. This output signal controls the ECC checks of read
    ///< operations in RMW sequences. On reset, the ECC checks for read operations
    ///< of RMW sequences are disabled.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t ENRDECCCHK : 1;
    ///< ECC check control for read operations of the nth AXI2ED controller.
    ///< - 0: Disable ECC check. - 1: Enable ECC check. The value programmed
    ///< in this bit appears on the primary ENABLE_RD_ECC_CHECK[n] output signal.
    ///< This output signal controls the ECC checks of read operations. On
    ///< reset, ECC checks for read operations are disabled.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t ENECCGEN : 1;
    ///< Enable ECC generation. When this bit is set, only ECC is generated
    ///< and written to memory. Otherwise, the ECC bits are not written into
    ///< memory.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t READECC : 1;
    ///< Read ECC bits onto AXI. When this bit is set, the AXI2ED controller
    ///< responds with the ECC data on the R channel.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DAWPCHK : 1;
    ///< Disable the AWADDR parity check of the nth manager module. The value
    ///< programmed in this bit appears on the disable_awaddr_parchk_axi2ed[n]
    ///< primary output signal. This output signal disables the AWADDR parity
    ///< check. The parity check is disabled on reset.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t DWPCHK : 1;
    ///< Disable the WDATA parity check of the nth manager module.
    ///< The value programmed in this bit appears on the disable_wdata_parchk_axi2ed[n]
    ///< primary output signal. This output signal disables the WDATA parity
    ///< check. The parity check is disabled on reset.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t DARPCHK : 1;
    ///< Disable the ARADDR parity check of the nth manager module. The value
    ///< programmed in this bit appears on the disable_araddr_parchk_axi2ed[n]
    ///< primary output signal. This output signal disables the ARADDR parity
    ///< check. The parity check is disabled on reset.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RPPN : 1;
    ///< Parity generation polarity of RDATA for the nth AXI2ED module. The
    ///< value programmed in this bit appears on the rdata_parity_polarity_axi2ed[n]
    ///< primary output signal. This output signal generates the odd polarity
    ///< parity or even polarity parity. On reset, even parity is generated
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DRPGN : 1;
    ///< Disable RDATA parity generation of the nth AXI2ED module. The value
    ///< programmed in this bit appears on the disable_rdata_pargen_axi2ed[n]
    ///< primary output signal. On reset, parity generation is disabled.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t IMTEN : 1;
    ///< Idle measurement timer enable of the nth AXI2ED controller. - 0: Disable
    ///< idle measurement timer. - 1: Enable idle measurement timer. --------------------------------------------------------------------------------------------------
    ///< NOTE: You must enable the timer only when the time-out register is
    ///< programmed to a non-zero value. --------------------------------------------------------------------------------------------------
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t SEALDN : 1;
    ///< Single-bit error address logger disable. When this bit is set and
    ///< the error ID reported by the AXI2ED controller matches the ID programmed
    ///< in the AXI2EDIDn register with appropriate mask bits applied, single-bit
    ///< errors are not logged into the FIFO. Typically, this bit is set when
    ///< performing a scrubbing operation along with having the required value
    ///< programmed into the AXI2EDIDn register. When reset, error-logging
    ///< for all IDs is enabled.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t FRPN : 9;
    ///< Flip RDATA Parity. Flip the RDATA parity of the nth AXI2ED module.
    ///< These bits are programmable only when the parity error injection write
    ///< enable register write enable bit is set to a value of 1. The values
    ///< programmed in these bits appear on the flip_rdata_parity_axi2ed[n][8:0]
    ///< primary output signals. These output signals flip the parity generated
    ///< for the R channel. A width of 9 bits is maintained to support a maximum
    ///< data width of 1024 bits. These bits are decoded and the associated
    ///< parity bit is flipped. On reset, the parity bits are not flipped
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1FF"
    uint32_t RESERVED : 11;
    ///< When these bits are read, 0x000 appears on the read bus.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edcrn_reg_t;

#define RCS_LOGGER_RSM_AXI2EDCRN_DEFAULT (0x001ff2eeU)
#define RCS_LOGGER_RSM_AXI2EDCRN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDCRN_WR_MASK (0xffffffffU)


///< Write protect of the nth AXI2ED controller. The value programmed in
///< this bit appears on the primary write_protect[n] output signal. This
///< output signal protects the AXI2ED memories from write operations.
///< On reset, the memories are enabled for write operations.
#define RCS_LOGGER_RSM_AXI2EDCRN_WP_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDCRN_WP_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_WP_BF_MSK (0x00000001)
#define RCS_LOGGER_RSM_AXI2EDCRN_WP_BF_DEF (0x00000000)

///< ECC check control for read operations during RMW of the nth AXI2ED
///< controller. - 0: Disable ECC check. - 1: Enable ECC check. The value
///< programmed in this bit appears on the primary ENABLE_RMW_ECC_CHECK[n]
///< output signal. This output signal controls the ECC checks of read
///< operations in RMW sequences. On reset, the ECC checks for read operations
///< of RMW sequences are disabled.
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRMWECCCHK_BF_OFF ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRMWECCCHK_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRMWECCCHK_BF_MSK (0x00000002)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRMWECCCHK_BF_DEF (0x00000002)

///< ECC check control for read operations of the nth AXI2ED controller.
///< - 0: Disable ECC check. - 1: Enable ECC check. The value programmed
///< in this bit appears on the primary ENABLE_RD_ECC_CHECK[n] output signal.
///< This output signal controls the ECC checks of read operations. On
///< reset, ECC checks for read operations are disabled.
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRDECCCHK_BF_OFF ( 2)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRDECCCHK_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRDECCCHK_BF_MSK (0x00000004)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENRDECCCHK_BF_DEF (0x00000004)

///< Enable ECC generation. When this bit is set, only ECC is generated
///< and written to memory. Otherwise, the ECC bits are not written into
///< memory.
#define RCS_LOGGER_RSM_AXI2EDCRN_ENECCGEN_BF_OFF ( 3)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENECCGEN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENECCGEN_BF_MSK (0x00000008)
#define RCS_LOGGER_RSM_AXI2EDCRN_ENECCGEN_BF_DEF (0x00000008)

///< Read ECC bits onto AXI. When this bit is set, the AXI2ED controller
///< responds with the ECC data on the R channel.
#define RCS_LOGGER_RSM_AXI2EDCRN_READECC_BF_OFF ( 4)
#define RCS_LOGGER_RSM_AXI2EDCRN_READECC_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_READECC_BF_MSK (0x00000010)
#define RCS_LOGGER_RSM_AXI2EDCRN_READECC_BF_DEF (0x00000000)

///< Disable the AWADDR parity check of the nth manager module. The value
///< programmed in this bit appears on the disable_awaddr_parchk_axi2ed[n]
///< primary output signal. This output signal disables the AWADDR parity
///< check. The parity check is disabled on reset.
#define RCS_LOGGER_RSM_AXI2EDCRN_DAWPCHK_BF_OFF ( 5)
#define RCS_LOGGER_RSM_AXI2EDCRN_DAWPCHK_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_DAWPCHK_BF_MSK (0x00000020)
#define RCS_LOGGER_RSM_AXI2EDCRN_DAWPCHK_BF_DEF (0x00000020)

///< Disable the WDATA parity check of the nth manager module.
///< The value programmed in this bit appears on the disable_wdata_parchk_axi2ed[n]
///< primary output signal. This output signal disables the WDATA parity
///< check. The parity check is disabled on reset.
#define RCS_LOGGER_RSM_AXI2EDCRN_DWPCHK_BF_OFF ( 6)
#define RCS_LOGGER_RSM_AXI2EDCRN_DWPCHK_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_DWPCHK_BF_MSK (0x00000040)
#define RCS_LOGGER_RSM_AXI2EDCRN_DWPCHK_BF_DEF (0x00000040)

///< Disable the ARADDR parity check of the nth manager module. The value
///< programmed in this bit appears on the disable_araddr_parchk_axi2ed[n]
///< primary output signal. This output signal disables the ARADDR parity
///< check. The parity check is disabled on reset.
#define RCS_LOGGER_RSM_AXI2EDCRN_DARPCHK_BF_OFF ( 7)
#define RCS_LOGGER_RSM_AXI2EDCRN_DARPCHK_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_DARPCHK_BF_MSK (0x00000080)
#define RCS_LOGGER_RSM_AXI2EDCRN_DARPCHK_BF_DEF (0x00000080)

///< Parity generation polarity of RDATA for the nth AXI2ED module. The
///< value programmed in this bit appears on the rdata_parity_polarity_axi2ed[n]
///< primary output signal. This output signal generates the odd polarity
///< parity or even polarity parity. On reset, even parity is generated
#define RCS_LOGGER_RSM_AXI2EDCRN_RPPN_BF_OFF ( 8)
#define RCS_LOGGER_RSM_AXI2EDCRN_RPPN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_RPPN_BF_MSK (0x00000100)
#define RCS_LOGGER_RSM_AXI2EDCRN_RPPN_BF_DEF (0x00000000)

///< Disable RDATA parity generation of the nth AXI2ED module. The value
///< programmed in this bit appears on the disable_rdata_pargen_axi2ed[n]
///< primary output signal. On reset, parity generation is disabled.
#define RCS_LOGGER_RSM_AXI2EDCRN_DRPGN_BF_OFF ( 9)
#define RCS_LOGGER_RSM_AXI2EDCRN_DRPGN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_DRPGN_BF_MSK (0x00000200)
#define RCS_LOGGER_RSM_AXI2EDCRN_DRPGN_BF_DEF (0x00000200)

///< Idle measurement timer enable of the nth AXI2ED controller. - 0: Disable
///< idle measurement timer. - 1: Enable idle measurement timer. --------------------------------------------------------------------------------------------------
///< NOTE: You must enable the timer only when the time-out register is
///< programmed to a non-zero value. --------------------------------------------------------------------------------------------------
#define RCS_LOGGER_RSM_AXI2EDCRN_IMTEN_BF_OFF (10)
#define RCS_LOGGER_RSM_AXI2EDCRN_IMTEN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_IMTEN_BF_MSK (0x00000400)
#define RCS_LOGGER_RSM_AXI2EDCRN_IMTEN_BF_DEF (0x00000000)

///< Single-bit error address logger disable. When this bit is set and
///< the error ID reported by the AXI2ED controller matches the ID programmed
///< in the AXI2EDIDn register with appropriate mask bits applied, single-bit
///< errors are not logged into the FIFO. Typically, this bit is set when
///< performing a scrubbing operation along with having the required value
///< programmed into the AXI2EDIDn register. When reset, error-logging
///< for all IDs is enabled.
#define RCS_LOGGER_RSM_AXI2EDCRN_SEALDN_BF_OFF (11)
#define RCS_LOGGER_RSM_AXI2EDCRN_SEALDN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDCRN_SEALDN_BF_MSK (0x00000800)
#define RCS_LOGGER_RSM_AXI2EDCRN_SEALDN_BF_DEF (0x00000000)

///< Flip RDATA Parity. Flip the RDATA parity of the nth AXI2ED module.
///< These bits are programmable only when the parity error injection write
///< enable register write enable bit is set to a value of 1. The values
///< programmed in these bits appear on the flip_rdata_parity_axi2ed[n][8:0]
///< primary output signals. These output signals flip the parity generated
///< for the R channel. A width of 9 bits is maintained to support a maximum
///< data width of 1024 bits. These bits are decoded and the associated
///< parity bit is flipped. On reset, the parity bits are not flipped
#define RCS_LOGGER_RSM_AXI2EDCRN_FRPN_BF_OFF (12)
#define RCS_LOGGER_RSM_AXI2EDCRN_FRPN_BF_WID ( 9)
#define RCS_LOGGER_RSM_AXI2EDCRN_FRPN_BF_MSK (0x001FF000)
#define RCS_LOGGER_RSM_AXI2EDCRN_FRPN_BF_DEF (0x001FF000)

///< When these bits are read, 0x000 appears on the read bus.
#define RCS_LOGGER_RSM_AXI2EDCRN_RESERVED_BF_OFF (21)
#define RCS_LOGGER_RSM_AXI2EDCRN_RESERVED_BF_WID (11)
#define RCS_LOGGER_RSM_AXI2EDCRN_RESERVED_BF_MSK (0xFFE00000)
#define RCS_LOGGER_RSM_AXI2EDCRN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDCRN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDCRN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDSR1N[2] register description at address offset 0x804
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDSR1n
  * AXI2ED Status Register 1
  */

typedef union {
  struct {
    uint32_t DEDN : 1;
    ///< Double-bit error detection of the nth manager module. This register
    ///< stores the value that appears on the primary ERR_MULTPL[n] input signal
    ///< in one of the following cases: - If the error is the first double-bit
    ///< error detected in the AXI2ED memories. - If the error is the first
    ///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
    ///< bus, after the status is cleared or after a reset. The ERR_MULTPL
    ///< signal of the nth AXI2ED controller drives the ERR_MULTPL[n] input
    ///< signal.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t AWPERR : 1;
    ///< AWADDR parity error of the nth AXI2ED module. This register stores
    ///< the value that appears on the awaddr_parerr_axi2ed[n] primary input
    ///< in one of the following cases: - If the error is the first double-bit
    ///< error detected in the AXI2ED memories. - If the error is the first
    ///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
    ///< bus, after the status is cleared or after a reset. The awaddr_parerr_axi2ed
    ///< signal (AWADDR parity check that results in a parity error) of the
    ///< nth AXI2ED parity module drives the awaddr_parerr_axi2ed[n] input
    ///< signal.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t WPERR : 1;
    ///< WDATA parity error of the nth AXI2ED module. This register stores
    ///< the value that appears on the wdata_parerr_axi2ed[n] primary input
    ///< in one of the following cases: - If the error is the first double-bit
    ///< error detected in the AXI2ED memories. - If the error is the first
    ///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
    ///< bus, after the status is cleared or after a reset. The wdata_parerr_axi2ed
    ///< signal (WDATA parity check that results in a parity error) of the
    ///< nth AXI2ED parity module drives the wdata_parerr_axi2ed[n] input signal.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t ARPERR : 1;
    ///< ARADDR parity error of the nth AXI2ED module. This register stores
    ///< the value that appears on the araddr_parerr_axi2ed[n] primary input
    ///< in one of the following cases: - If the error is the first double-bit
    ///< error detected in the AXI2ED memories. - If the error is the first
    ///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
    ///< bus, after the status is cleared or after a reset. The araddr_parerr_axi2ed
    ///< signal (ARADDR parity check that results in a parity error) of the
    ///< nth AXI2ED parity module drives the araddr_parerr_axi2ed[n] input
    ///< signal.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t ERRTYPEN : 3;
    ///< Transfer type of the AXI2ED operation when the double-bit error occurred.
    ///< - 0x0 : Read operation ECC error. - 0x1 : Write operation RMW ECC
    ///< double-bit error. - 0x2 : ARADDR parity error. - 0x3 : AWADDR parity
    ///< error. - 0x4 : WDATA parity error. This register drives the value
    ///< that appears on the primary ERR_TYPE[n] input signal in one of the
    ///< following cases: - If the error is the first double-bit error detected
    ///< in the AXI2ED memories. - If the error is the first parity error detected
    ///< on the AWADDR bus, the WDATA bus, or the ARADDR bus, after the status
    ///< is cleared or after a reset. The ERR_TYPE signal of the nth AXI2ED
    ///< controller drives the ERR_TYPE[n] input signal.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RESERVED : 25;
    ///< When these bits are read, 0x0000000 appears on the read bus.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edsr1n_reg_t;

#define RCS_LOGGER_RSM_AXI2EDSR1N_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDSR1N_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDSR1N_WR_MASK (0x00000000U)


///< Double-bit error detection of the nth manager module. This register
///< stores the value that appears on the primary ERR_MULTPL[n] input signal
///< in one of the following cases: - If the error is the first double-bit
///< error detected in the AXI2ED memories. - If the error is the first
///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
///< bus, after the status is cleared or after a reset. The ERR_MULTPL
///< signal of the nth AXI2ED controller drives the ERR_MULTPL[n] input
///< signal.
#define RCS_LOGGER_RSM_AXI2EDSR1N_DEDN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDSR1N_DEDN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDSR1N_DEDN_BF_MSK (0x00000001)
#define RCS_LOGGER_RSM_AXI2EDSR1N_DEDN_BF_DEF (0x00000000)

///< AWADDR parity error of the nth AXI2ED module. This register stores
///< the value that appears on the awaddr_parerr_axi2ed[n] primary input
///< in one of the following cases: - If the error is the first double-bit
///< error detected in the AXI2ED memories. - If the error is the first
///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
///< bus, after the status is cleared or after a reset. The awaddr_parerr_axi2ed
///< signal (AWADDR parity check that results in a parity error) of the
///< nth AXI2ED parity module drives the awaddr_parerr_axi2ed[n] input
///< signal.
#define RCS_LOGGER_RSM_AXI2EDSR1N_AWPERR_BF_OFF ( 1)
#define RCS_LOGGER_RSM_AXI2EDSR1N_AWPERR_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDSR1N_AWPERR_BF_MSK (0x00000002)
#define RCS_LOGGER_RSM_AXI2EDSR1N_AWPERR_BF_DEF (0x00000000)

///< WDATA parity error of the nth AXI2ED module. This register stores
///< the value that appears on the wdata_parerr_axi2ed[n] primary input
///< in one of the following cases: - If the error is the first double-bit
///< error detected in the AXI2ED memories. - If the error is the first
///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
///< bus, after the status is cleared or after a reset. The wdata_parerr_axi2ed
///< signal (WDATA parity check that results in a parity error) of the
///< nth AXI2ED parity module drives the wdata_parerr_axi2ed[n] input signal.
#define RCS_LOGGER_RSM_AXI2EDSR1N_WPERR_BF_OFF ( 2)
#define RCS_LOGGER_RSM_AXI2EDSR1N_WPERR_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDSR1N_WPERR_BF_MSK (0x00000004)
#define RCS_LOGGER_RSM_AXI2EDSR1N_WPERR_BF_DEF (0x00000000)

///< ARADDR parity error of the nth AXI2ED module. This register stores
///< the value that appears on the araddr_parerr_axi2ed[n] primary input
///< in one of the following cases: - If the error is the first double-bit
///< error detected in the AXI2ED memories. - If the error is the first
///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
///< bus, after the status is cleared or after a reset. The araddr_parerr_axi2ed
///< signal (ARADDR parity check that results in a parity error) of the
///< nth AXI2ED parity module drives the araddr_parerr_axi2ed[n] input
///< signal.
#define RCS_LOGGER_RSM_AXI2EDSR1N_ARPERR_BF_OFF ( 3)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ARPERR_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ARPERR_BF_MSK (0x00000008)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ARPERR_BF_DEF (0x00000000)

///< Transfer type of the AXI2ED operation when the double-bit error occurred.
///< - 0x0 : Read operation ECC error. - 0x1 : Write operation RMW ECC
///< double-bit error. - 0x2 : ARADDR parity error. - 0x3 : AWADDR parity
///< error. - 0x4 : WDATA parity error. This register drives the value
///< that appears on the primary ERR_TYPE[n] input signal in one of the
///< following cases: - If the error is the first double-bit error detected
///< in the AXI2ED memories. - If the error is the first parity error detected
///< on the AWADDR bus, the WDATA bus, or the ARADDR bus, after the status
///< is cleared or after a reset. The ERR_TYPE signal of the nth AXI2ED
///< controller drives the ERR_TYPE[n] input signal.
#define RCS_LOGGER_RSM_AXI2EDSR1N_ERRTYPEN_BF_OFF ( 4)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ERRTYPEN_BF_WID ( 3)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ERRTYPEN_BF_MSK (0x00000070)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ERRTYPEN_BF_DEF (0x00000000)

///< When these bits are read, 0x0000000 appears on the read bus.
#define RCS_LOGGER_RSM_AXI2EDSR1N_RESERVED_BF_OFF ( 7)
#define RCS_LOGGER_RSM_AXI2EDSR1N_RESERVED_BF_WID (25)
#define RCS_LOGGER_RSM_AXI2EDSR1N_RESERVED_BF_MSK (0xFFFFFF80)
#define RCS_LOGGER_RSM_AXI2EDSR1N_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDSR1N_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDSR2N[2] register description at address offset 0x808
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDSR2n
  * AXI2ED Status Register 2
  */

typedef union {
  struct {
    uint32_t SYNDROMEN : 16;
    ///< Error syndrome of the nth manager module. This register stores the
    ///< value that appears on the primary ERR_SYNDROME[n] input signal, if
    ///< the error is the first single bit error detected in AXI2ED memories,
    ///< for which error address logging is enabled (SEALD bit is set) and
    ///< the AXI2ED single bit error address FIFO is empty. The ERR_SYNDROME
    ///< signal of the nth AXI2ED controller drives the ERR_SYNDROME[n] input
    ///< signal.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t XFERIDN : 16;
    ///< Transfer ID address at which the first error occurred. This register
    ///< stores the value that appears on the primary ERRID_AXI2ED input in
    ///< one of the following cases: - If the error is the first double-bit
    ///< error detected in the AXI2ED memories. - If the error is the first
    ///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
    ///< bus, after the status is cleared or after a reset. If the ID width
    ///< is less than 16 bits, the LSBs are stored in the XferIDn field. The
    ///< ERR_ID signal of the nth AXI2ED controller drives the ERRID_AXI2ED[n]
    ///< input signal.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edsr2n_reg_t;

#define RCS_LOGGER_RSM_AXI2EDSR2N_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDSR2N_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDSR2N_WR_MASK (0x00000000U)


///< Error syndrome of the nth manager module. This register stores the
///< value that appears on the primary ERR_SYNDROME[n] input signal, if
///< the error is the first single bit error detected in AXI2ED memories,
///< for which error address logging is enabled (SEALD bit is set) and
///< the AXI2ED single bit error address FIFO is empty. The ERR_SYNDROME
///< signal of the nth AXI2ED controller drives the ERR_SYNDROME[n] input
///< signal.
#define RCS_LOGGER_RSM_AXI2EDSR2N_SYNDROMEN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDSR2N_SYNDROMEN_BF_WID (16)
#define RCS_LOGGER_RSM_AXI2EDSR2N_SYNDROMEN_BF_MSK (0x0000FFFF)
#define RCS_LOGGER_RSM_AXI2EDSR2N_SYNDROMEN_BF_DEF (0x00000000)

///< Transfer ID address at which the first error occurred. This register
///< stores the value that appears on the primary ERRID_AXI2ED input in
///< one of the following cases: - If the error is the first double-bit
///< error detected in the AXI2ED memories. - If the error is the first
///< parity error detected on the AWADDR bus, the WDATA bus, or the ARADDR
///< bus, after the status is cleared or after a reset. If the ID width
///< is less than 16 bits, the LSBs are stored in the XferIDn field. The
///< ERR_ID signal of the nth AXI2ED controller drives the ERRID_AXI2ED[n]
///< input signal.
#define RCS_LOGGER_RSM_AXI2EDSR2N_XFERIDN_BF_OFF (16)
#define RCS_LOGGER_RSM_AXI2EDSR2N_XFERIDN_BF_WID (16)
#define RCS_LOGGER_RSM_AXI2EDSR2N_XFERIDN_BF_MSK (0xFFFF0000)
#define RCS_LOGGER_RSM_AXI2EDSR2N_XFERIDN_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDSR2N_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDSR2N_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDEARN[2] register description at address offset 0x80c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDEARn
  * AXI2ED Error Address Register
  */

typedef union {
  struct {
    uint32_t XFERADDRESS : 32;
    ///< Transaction address at which the first error occurred. This register
    ///< stores the value that appears on the primary ERRADDR_AXI2ED[n] input
    ///< signal in one of the following cases: - If the error is the first
    ///< double-bit error detected in the AXI2ED memories. - If the error is
    ///< the first parity error detected on the AWADDR bus, the WDATA bus,
    ///< or the ARADDR bus, after the status is cleared or after a reset. The
    ///< ERR_ADDR signal of the nth AXI2ED controller drives the ERRADDR_AXI2ED[n]
    ///< input signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edearn_reg_t;

#define RCS_LOGGER_RSM_AXI2EDEARN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDEARN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDEARN_WR_MASK (0xffffffffU)


///< Transaction address at which the first error occurred. This register
///< stores the value that appears on the primary ERRADDR_AXI2ED[n] input
///< signal in one of the following cases: - If the error is the first
///< double-bit error detected in the AXI2ED memories. - If the error is
///< the first parity error detected on the AWADDR bus, the WDATA bus,
///< or the ARADDR bus, after the status is cleared or after a reset. The
///< ERR_ADDR signal of the nth AXI2ED controller drives the ERRADDR_AXI2ED[n]
///< input signal.
#define RCS_LOGGER_RSM_AXI2EDEARN_XFERADDR_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDEARN_XFERADDR_BF_WID (32)
#define RCS_LOGGER_RSM_AXI2EDEARN_XFERADDR_BF_MSK (0xFFFFFFFF)
#define RCS_LOGGER_RSM_AXI2EDEARN_XFERADDR_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDEARN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDEARN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_ECCSBECN[2] register description at address offset 0x810
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/ECCSBECn
  * AXI2ED ECC Single-Bit Error Counter Register
  */

typedef union {
  struct {
    uint32_t SBECN : 8;
    ///< Single-bit error counter of the nth AXI2ED controller. When a single-bit
    ///< error occurs, as indicated by the ERR_DETECT[n] signal, this counter
    ///< is incremented. -------------------------------------------------------------------------------
    ///< NOTE To increment this counter, single-bit error logging must be disabled
    ///< using the AXI2EDIDn and SEALDn bits in the AXI2EDCRn register. -------------------------------------------------------------------------------
    ///< A write operation always results in clearing the counter, independent
    ///< of the write data. When a firmware write operation and an external
    ///< error occur in the same cycle, with error-logging enabled, the counter
    ///< is set to a value of 0x01 and it is not cleared. If errors occur after
    ///< the counter reaches a value of 0xFF, the counter is held constant
    ///< at a value of 0xFF till the firmware clears the register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 24;
    ///< This is Reserved
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_eccsbecn_reg_t;

#define RCS_LOGGER_RSM_ECCSBECN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_ECCSBECN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_ECCSBECN_WR_MASK (0xffffffffU)


///< Single-bit error counter of the nth AXI2ED controller. When a single-bit
///< error occurs, as indicated by the ERR_DETECT[n] signal, this counter
///< is incremented. -------------------------------------------------------------------------------
///< NOTE To increment this counter, single-bit error logging must be disabled
///< using the AXI2EDIDn and SEALDn bits in the AXI2EDCRn register. -------------------------------------------------------------------------------
///< A write operation always results in clearing the counter, independent
///< of the write data. When a firmware write operation and an external
///< error occur in the same cycle, with error-logging enabled, the counter
///< is set to a value of 0x01 and it is not cleared. If errors occur after
///< the counter reaches a value of 0xFF, the counter is held constant
///< at a value of 0xFF till the firmware clears the register.
#define RCS_LOGGER_RSM_ECCSBECN_SBECN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_ECCSBECN_SBECN_BF_WID ( 8)
#define RCS_LOGGER_RSM_ECCSBECN_SBECN_BF_MSK (0x000000FF)
#define RCS_LOGGER_RSM_ECCSBECN_SBECN_BF_DEF (0x00000000)

///< This is Reserved
#define RCS_LOGGER_RSM_ECCSBECN_RESERVED_BF_OFF ( 8)
#define RCS_LOGGER_RSM_ECCSBECN_RESERVED_BF_WID (24)
#define RCS_LOGGER_RSM_ECCSBECN_RESERVED_BF_MSK (0xFFFFFF00)
#define RCS_LOGGER_RSM_ECCSBECN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_ECCSBECN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_ECCSBECN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_ECCDBECN[2] register description at address offset 0x814
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/ECCDBECn
  * AXI2ED ECC Double-Bit Error Counter Register
  */

typedef union {
  struct {
    uint32_t DBECN : 8;
    ///< Double-bit error counter of nth AXI2ED controller. This counter is
    ///< incremented when a double-bit error occurs, as indicated by the ERR_MULTPL[n]
    ///< signal. A write operation always results in clearing the counter,
    ///< independent of the write data. When firmware performs a write operation
    ///< and an external error indication occurs in the same cycle, this counter
    ///< is set to a value of 0x01, it does not clear the counter. If errors
    ///< occur after the counter reaches a value of 0xFF, the counter is held
    ///< constant at a value of 0xFF till the firmware clears the register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 24;
    ///< This is reserved
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_eccdbecn_reg_t;

#define RCS_LOGGER_RSM_ECCDBECN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_ECCDBECN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_ECCDBECN_WR_MASK (0xffffffffU)


///< Double-bit error counter of nth AXI2ED controller. This counter is
///< incremented when a double-bit error occurs, as indicated by the ERR_MULTPL[n]
///< signal. A write operation always results in clearing the counter,
///< independent of the write data. When firmware performs a write operation
///< and an external error indication occurs in the same cycle, this counter
///< is set to a value of 0x01, it does not clear the counter. If errors
///< occur after the counter reaches a value of 0xFF, the counter is held
///< constant at a value of 0xFF till the firmware clears the register.
#define RCS_LOGGER_RSM_ECCDBECN_DBECN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_ECCDBECN_DBECN_BF_WID ( 8)
#define RCS_LOGGER_RSM_ECCDBECN_DBECN_BF_MSK (0x000000FF)
#define RCS_LOGGER_RSM_ECCDBECN_DBECN_BF_DEF (0x00000000)

///< This is reserved
#define RCS_LOGGER_RSM_ECCDBECN_RESERVED_BF_OFF ( 8)
#define RCS_LOGGER_RSM_ECCDBECN_RESERVED_BF_WID (24)
#define RCS_LOGGER_RSM_ECCDBECN_RESERVED_BF_MSK (0xFFFFFF00)
#define RCS_LOGGER_RSM_ECCDBECN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_ECCDBECN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_ECCDBECN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AWPECN[2] register description at address offset 0x818
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AWPECn
  * AWADDR Parity Error Counter Register
  */

typedef union {
  struct {
    uint32_t AWPECN : 8;
    ///< AWADDR parity error counter of nth AXI2ED controller. This counter
    ///< is incremented when an AWADDR parity error occurs, as indicated by
    ///< the awaddr_parerr_axi2ed[n] signal. A write operation always results
    ///< in clearing the counter, independent of the write data. When the firmware
    ///< performs a write operation and an external error indication occurs
    ///< in the same cycle, this counter is set to a value of 0x01, and it
    ///< is not cleared. If errors occur after the counter reaches a value
    ///< of 0xFF, the counter is held constant at a value of 0xFF till the
    ///< firmware clears the register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 24;
    ///< This is Reserved
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_awpecn_reg_t;

#define RCS_LOGGER_RSM_AWPECN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AWPECN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AWPECN_WR_MASK (0xffffffffU)


///< AWADDR parity error counter of nth AXI2ED controller. This counter
///< is incremented when an AWADDR parity error occurs, as indicated by
///< the awaddr_parerr_axi2ed[n] signal. A write operation always results
///< in clearing the counter, independent of the write data. When the firmware
///< performs a write operation and an external error indication occurs
///< in the same cycle, this counter is set to a value of 0x01, and it
///< is not cleared. If errors occur after the counter reaches a value
///< of 0xFF, the counter is held constant at a value of 0xFF till the
///< firmware clears the register.
#define RCS_LOGGER_RSM_AWPECN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AWPECN_BF_WID ( 8)
#define RCS_LOGGER_RSM_AWPECN_BF_MSK (0x000000FF)
#define RCS_LOGGER_RSM_AWPECN_BF_DEF (0x00000000)

///< This is Reserved
#define RCS_LOGGER_RSM_AWPECN_RESERVED_BF_OFF ( 8)
#define RCS_LOGGER_RSM_AWPECN_RESERVED_BF_WID (24)
#define RCS_LOGGER_RSM_AWPECN_RESERVED_BF_MSK (0xFFFFFF00)
#define RCS_LOGGER_RSM_AWPECN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AWPECN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AWPECN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_WPECN[2] register description at address offset 0x81c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/WPECn
  * WDATA Parity Error Control Register
  */

typedef union {
  struct {
    uint32_t WPECN : 8;
    ///< WDATA parity error counter of nth AXI2ED controller. This counter
    ///< is incremented when a WDATA parity error occurs, as indicated by the
    ///< wdata_parerr_axi2ed[n] signal. A write operation always results in
    ///< clearing the counter, independent of the write data. When the firmware
    ///< performs a write operation and an external error indication occurs
    ///< in the same cycle, this counter is set to a value of 0x01, and is
    ///< not cleared. If errors occur after the counter reaches a value of
    ///< 0xFF, the counter is held constant at a value of 0xFF till the firmware
    ///< clears the register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 24;
    ///< This is reserved
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_wpecn_reg_t;

#define RCS_LOGGER_RSM_WPECN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_WPECN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_WPECN_WR_MASK (0xffffffffU)


///< WDATA parity error counter of nth AXI2ED controller. This counter
///< is incremented when a WDATA parity error occurs, as indicated by the
///< wdata_parerr_axi2ed[n] signal. A write operation always results in
///< clearing the counter, independent of the write data. When the firmware
///< performs a write operation and an external error indication occurs
///< in the same cycle, this counter is set to a value of 0x01, and is
///< not cleared. If errors occur after the counter reaches a value of
///< 0xFF, the counter is held constant at a value of 0xFF till the firmware
///< clears the register.
#define RCS_LOGGER_RSM_WPECN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_WPECN_BF_WID ( 8)
#define RCS_LOGGER_RSM_WPECN_BF_MSK (0x000000FF)
#define RCS_LOGGER_RSM_WPECN_BF_DEF (0x00000000)

///< This is reserved
#define RCS_LOGGER_RSM_WPECN_RESERVED_BF_OFF ( 8)
#define RCS_LOGGER_RSM_WPECN_RESERVED_BF_WID (24)
#define RCS_LOGGER_RSM_WPECN_RESERVED_BF_MSK (0xFFFFFF00)
#define RCS_LOGGER_RSM_WPECN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_WPECN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_WPECN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_ARPECN[2] register description at address offset 0x820
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/ARPECn
  * ARADDR Parity Error Counter Register
  */

typedef union {
  struct {
    uint32_t ARPECN : 8;
    ///< ARADDR parity error counter of nth AXI2ED controller.
    ///< This counter is incremented when an ARADDR parity error occurs, as
    ///< indicated by the araddr_parerr_axi2ed[n] signal. A write operation
    ///< always results in clearing the counter, independent of the write data.
    ///< When the firmware performs a write operation and an external error
    ///< indication occurs in the same cycle, this counter is set to a value
    ///< of 0x01, and is not cleared. If errors occur after the counter reaches
    ///< a value of 0xFF, the counter is held constant at a value of 0xFF till
    ///< the firmware clears the register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 24;
    ///< This is reserved.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_arpecn_reg_t;

#define RCS_LOGGER_RSM_ARPECN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_ARPECN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_ARPECN_WR_MASK (0xffffffffU)


///< ARADDR parity error counter of nth AXI2ED controller.
///< This counter is incremented when an ARADDR parity error occurs, as
///< indicated by the araddr_parerr_axi2ed[n] signal. A write operation
///< always results in clearing the counter, independent of the write data.
///< When the firmware performs a write operation and an external error
///< indication occurs in the same cycle, this counter is set to a value
///< of 0x01, and is not cleared. If errors occur after the counter reaches
///< a value of 0xFF, the counter is held constant at a value of 0xFF till
///< the firmware clears the register.
#define RCS_LOGGER_RSM_ARPECN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_ARPECN_BF_WID ( 8)
#define RCS_LOGGER_RSM_ARPECN_BF_MSK (0x000000FF)
#define RCS_LOGGER_RSM_ARPECN_BF_DEF (0x00000000)

///< This is reserved.
#define RCS_LOGGER_RSM_ARPECN_RESERVED_BF_OFF ( 8)
#define RCS_LOGGER_RSM_ARPECN_RESERVED_BF_WID (24)
#define RCS_LOGGER_RSM_ARPECN_RESERVED_BF_MSK (0xFFFFFF00)
#define RCS_LOGGER_RSM_ARPECN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_ARPECN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_ARPECN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDIMTN[2] register description at address offset 0x824
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDIMTn
  * Idle Measurement Time Register
  */

typedef union {
  struct {
    uint32_t AXI2EDIMTN : 32;
    ///< AXI2ED idle measurement timer of the nth AXI2ED controller. This counter
    ///< is incremented as long as the AXI2ED_IDLE[n] signal is asserted. When
    ///< the AXI2ED_IDLE signal is deasserted, this counter is reset to all
    ///< 0s. Writing all 0s clears this register. If the AXI2ED_IDLE[n] signal
    ///< is asserted, firmware takes precedence when updating this register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edimtn_reg_t;

#define RCS_LOGGER_RSM_AXI2EDIMTN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDIMTN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDIMTN_WR_MASK (0xffffffffU)


///< AXI2ED idle measurement timer of the nth AXI2ED controller. This counter
///< is incremented as long as the AXI2ED_IDLE[n] signal is asserted. When
///< the AXI2ED_IDLE signal is deasserted, this counter is reset to all
///< 0s. Writing all 0s clears this register. If the AXI2ED_IDLE[n] signal
///< is asserted, firmware takes precedence when updating this register.
#define RCS_LOGGER_RSM_AXI2EDIMTN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDIMTN_BF_WID (32)
#define RCS_LOGGER_RSM_AXI2EDIMTN_BF_MSK (0xFFFFFFFF)
#define RCS_LOGGER_RSM_AXI2EDIMTN_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDIMTN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDIMTN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDIMTON[2] register description at address offset 0x828
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDIMTOn
  * AXI2ED Parity Error Status Register
  */

typedef union {
  struct {
    uint32_t AXI2EDIMTON : 32;
    ///< Time-out value of the nth AXI2ED controller. Use this register to
    ///< program the time-out value of the AXI2ED idle measurement timer. When
    ///< the idle measurement timer reaches this time-out value, the AXI2ED_IMTO[n]
    ///< output is asserted and the idle measurement timer stops counting further
    ///< until an idle measurement timer reset occurs in firmware or hardware.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edimton_reg_t;

#define RCS_LOGGER_RSM_AXI2EDIMTON_DEFAULT (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDIMTON_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDIMTON_WR_MASK (0xffffffffU)


///< Time-out value of the nth AXI2ED controller. Use this register to
///< program the time-out value of the AXI2ED idle measurement timer. When
///< the idle measurement timer reaches this time-out value, the AXI2ED_IMTO[n]
///< output is asserted and the idle measurement timer stops counting further
///< until an idle measurement timer reset occurs in firmware or hardware.
#define RCS_LOGGER_RSM_AXI2EDIMTON_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDIMTON_BF_WID (32)
#define RCS_LOGGER_RSM_AXI2EDIMTON_BF_MSK (0xFFFFFFFF)
#define RCS_LOGGER_RSM_AXI2EDIMTON_BF_DEF (0xFFFFFFFF)
#define RCS_LOGGER_RSM_AXI2EDIMTON_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDIMTON_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDFIFOSRN[2] register description at address offset 0x82c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDFIFOSRn
  * AXI2ED Single-Bit Error Address FIFO Status Register
  */

typedef union {
  struct {
    uint32_t FULLN : 1;
    ///< FIFO of the nth AXI2ED controller is full. This bit is set when the
    ///< FIFO is full.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t NEN : 1;
    ///< FIFO of the nth AXI2ED controller is not empty. This bit is set when
    ///< the FIFO is not empty.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED : 30;
    ///< This is reserved.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edfifosrn_reg_t;

#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_WR_MASK (0x00000000U)


///< FIFO of the nth AXI2ED controller is full. This bit is set when the
///< FIFO is full.
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_FULLN_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_FULLN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_FULLN_BF_MSK (0x00000001)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_FULLN_BF_DEF (0x00000000)

///< FIFO of the nth AXI2ED controller is not empty. This bit is set when
///< the FIFO is not empty.
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_NEN_BF_OFF ( 1)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_NEN_BF_WID ( 1)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_NEN_BF_MSK (0x00000002)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_NEN_BF_DEF (0x00000000)

///< This is reserved.
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_RESERVED_BF_OFF ( 2)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_RESERVED_BF_WID (30)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_RESERVED_BF_MSK (0xFFFFFFFC)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_RESERVED_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDFIFOSRN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDFIFON[2] register description at address offset 0x830
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDFIFOn
  * AXI2ED Single-Bit Error Address FIFO Register
  */

typedef union {
  struct {
    uint32_t SEA : 32;
    ///< Single-bit error address.
    ///< Transaction address at which a correctable single-bit error was detected
    ///< during read transactions. This FIFO stores the value that appears
    ///< on the primary ERRADDR_AXI2ED[n] input signal, if the FIFO is not
    ///< full and a single-bit error is detected during a read transfer.
    ///< You can use this FIFO for memory scrubbing.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edfifon_reg_t;

#define RCS_LOGGER_RSM_AXI2EDFIFON_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDFIFON_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDFIFON_WR_MASK (0x00000000U)


///< Single-bit error address.
///< Transaction address at which a correctable single-bit error was detected
///< during read transactions. This FIFO stores the value that appears
///< on the primary ERRADDR_AXI2ED[n] input signal, if the FIFO is not
///< full and a single-bit error is detected during a read transfer.
///< You can use this FIFO for memory scrubbing.
#define RCS_LOGGER_RSM_AXI2EDFIFON_SEA_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDFIFON_SEA_BF_WID (32)
#define RCS_LOGGER_RSM_AXI2EDFIFON_SEA_BF_MSK (0xFFFFFFFF)
#define RCS_LOGGER_RSM_AXI2EDFIFON_SEA_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDFIFON_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDFIFON_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_RSM0_AXI2EDIDN[2] register description at address offset 0x834
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/RSM0/AXI2EDIDn
  * AXI2ED ID Logging Register
  */

typedef union {
  struct {
    uint32_t ID : 16;
    ///< When the ID programmed in this register matches the error ID reported
    ///< by the AXI2ED controller while mask bits (as per UNMSK field in this
    ///< register) are applied, and the SEALDn bit in the AXI2ED Control Register
    ///< is set, logging the single-bit error address into the FIFO is disabled.
    ///< In addition, the AXI2ED ECC Single-Bit Error Counter Register does
    ///< not count the errors.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t UNMSK : 16;
    ///< When the UNMSK bit is set, the corresponding ID bit is unmasked while
    ///< the programmed ID is compared with the reported error ID by the AXI2ED
    ///< controller.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_rsm_axi2edidn_reg_t;

#define RCS_LOGGER_RSM_AXI2EDIDN_DEFAULT (0x00000000U)
#define RCS_LOGGER_RSM_AXI2EDIDN_RD_MASK (0xffffffffU)
#define RCS_LOGGER_RSM_AXI2EDIDN_WR_MASK (0xffffffffU)


///< When the ID programmed in this register matches the error ID reported
///< by the AXI2ED controller while mask bits (as per UNMSK field in this
///< register) are applied, and the SEALDn bit in the AXI2ED Control Register
///< is set, logging the single-bit error address into the FIFO is disabled.
///< In addition, the AXI2ED ECC Single-Bit Error Counter Register does
///< not count the errors.
#define RCS_LOGGER_RSM_AXI2EDIDN_ID_BF_OFF ( 0)
#define RCS_LOGGER_RSM_AXI2EDIDN_ID_BF_WID (16)
#define RCS_LOGGER_RSM_AXI2EDIDN_ID_BF_MSK (0x0000FFFF)
#define RCS_LOGGER_RSM_AXI2EDIDN_ID_BF_DEF (0x00000000)

///< When the UNMSK bit is set, the corresponding ID bit is unmasked while
///< the programmed ID is compared with the reported error ID by the AXI2ED
///< controller.
#define RCS_LOGGER_RSM_AXI2EDIDN_UNMSK_BF_OFF (16)
#define RCS_LOGGER_RSM_AXI2EDIDN_UNMSK_BF_WID (16)
#define RCS_LOGGER_RSM_AXI2EDIDN_UNMSK_BF_MSK (0xFFFF0000)
#define RCS_LOGGER_RSM_AXI2EDIDN_UNMSK_BF_DEF (0x00000000)
#define RCS_LOGGER_RSM_AXI2EDIDN_ARR_SZ0 (2)
#define RCS_LOGGER_RSM_AXI2EDIDN_ARRAY_STRIDE0 (0x0040)


/** @brief RCS_LOGGER_COM_REG_PID register description at address offset 0xfc0
  *
  * Register default value:        0x00000310
  * Register full path in IP: rcs_logger_com/reg/PID
  * Peripheral ID Register
  */

typedef union {
  struct {
    uint32_t SUBVERSION : 4;
    ///< This value tracks the sub-version of the IP. For example, if the 1.4
    ///< version of this IP is released, then the sub-version is 0x4 and the
    ///< version is 0x1. The current version of the IP is 1.0 and hence the
    ///< sub-version is 0x0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MAIN_VERSION : 4;
    ///< This value tracks the main version of the IP. For example, if the
    ///< 1.4 version of this IP is released, then the sub-version is 0x4 and
    ///< the version is 0x1. The current version of the IP is 1.0 and hence
    ///< the version is 0x1.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t APBVER : 4;
    ///< This value represents the version of the supported APB protocol. This
    ///< IP supports the APB3.0 protocol and hence the value of this field
    ///< is 0x3.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t RESERVED : 20;
    ///< This is reserved.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_pid_reg_t;

#define RCS_LOGGER_PID_DEFAULT (0x00000310U)
#define RCS_LOGGER_PID_RD_MASK (0xffffffffU)
#define RCS_LOGGER_PID_WR_MASK (0xffffffffU)


///< This value tracks the sub-version of the IP. For example, if the 1.4
///< version of this IP is released, then the sub-version is 0x4 and the
///< version is 0x1. The current version of the IP is 1.0 and hence the
///< sub-version is 0x0.
#define RCS_LOGGER_PID_SUBVER_BF_OFF ( 0)
#define RCS_LOGGER_PID_SUBVER_BF_WID ( 4)
#define RCS_LOGGER_PID_SUBVER_BF_MSK (0x0000000F)
#define RCS_LOGGER_PID_SUBVER_BF_DEF (0x00000000)

///< This value tracks the main version of the IP. For example, if the
///< 1.4 version of this IP is released, then the sub-version is 0x4 and
///< the version is 0x1. The current version of the IP is 1.0 and hence
///< the version is 0x1.
#define RCS_LOGGER_PID_MAIN_VER_BF_OFF ( 4)
#define RCS_LOGGER_PID_MAIN_VER_BF_WID ( 4)
#define RCS_LOGGER_PID_MAIN_VER_BF_MSK (0x000000F0)
#define RCS_LOGGER_PID_MAIN_VER_BF_DEF (0x00000010)

///< This value represents the version of the supported APB protocol. This
///< IP supports the APB3.0 protocol and hence the value of this field
///< is 0x3.
#define RCS_LOGGER_PID_APBVER_BF_OFF ( 8)
#define RCS_LOGGER_PID_APBVER_BF_WID ( 4)
#define RCS_LOGGER_PID_APBVER_BF_MSK (0x00000F00)
#define RCS_LOGGER_PID_APBVER_BF_DEF (0x00000300)

///< This is reserved.
#define RCS_LOGGER_PID_RESERVED_BF_OFF (12)
#define RCS_LOGGER_PID_RESERVED_BF_WID (20)
#define RCS_LOGGER_PID_RESERVED_BF_MSK (0xFFFFF000)
#define RCS_LOGGER_PID_RESERVED_BF_DEF (0x00000000)


/** @brief RCS_LOGGER_COM_REG_PEIWER register description at address offset 0xfc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/PEIWER
  * Parity Error Injection Write Enable register
  */

typedef union {
  struct {
    uint32_t PEIWE : 1;
    ///< Parity error injection write enable. Various parity flip bits present
    ///< in control registers are programmed to inject parity errors. To avoid
    ///< accidental programming of these parity flip bits, this parity error
    ///< injection write enable manager control bit is provided. - 0x1: Only
    ///< various parity flip controls are programmable. - 0x0: Writes to various
    ///< parity flip controls are ignored.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 31;
    ///< This is reserved.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_peiwer_reg_t;

#define RCS_LOGGER_PEIWER_DEFAULT (0x00000000U)
#define RCS_LOGGER_PEIWER_RD_MASK (0xffffffffU)
#define RCS_LOGGER_PEIWER_WR_MASK (0xffffffffU)


///< Parity error injection write enable. Various parity flip bits present
///< in control registers are programmed to inject parity errors. To avoid
///< accidental programming of these parity flip bits, this parity error
///< injection write enable manager control bit is provided. - 0x1: Only
///< various parity flip controls are programmable. - 0x0: Writes to various
///< parity flip controls are ignored.
#define RCS_LOGGER_PEIWER_PEIWE_BF_OFF ( 0)
#define RCS_LOGGER_PEIWER_PEIWE_BF_WID ( 1)
#define RCS_LOGGER_PEIWER_PEIWE_BF_MSK (0x00000001)
#define RCS_LOGGER_PEIWER_PEIWE_BF_DEF (0x00000000)

///< This is reserved.
#define RCS_LOGGER_PEIWER_RESERVED_BF_OFF ( 1)
#define RCS_LOGGER_PEIWER_RESERVED_BF_WID (31)
#define RCS_LOGGER_PEIWER_RESERVED_BF_MSK (0xFFFFFFFE)
#define RCS_LOGGER_PEIWER_RESERVED_BF_DEF (0x00000000)


/** @brief RCS_LOGGER_COM_REG_EMCR register description at address offset 0xfc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/EMCR
  * Error Masking Control Register
  */

typedef union {
  struct {
    uint32_t MFE : 1;
    ///< Mask fatal error.                                         The FATAL_ERROR
    ///< output is asserted when a fatal error occurs on any parity module
    ///< of the AXI manager interface, the AXI subordinate interface, or the
    ///< NIC AMIB interface. When this bit is set, the FATAL_ERROR output is
    ///< masked. Only the output is masked.
    ///< Upon detecting a fatal error, the individual status bits remain set.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MNE : 1;
    ///< Mask normal error. The NORMAL_ERROR output is asserted when a normal
    ///< error occurs on any parity module of the AXI manager interface or
    ///< the AXI subordinate interface. When this bit is set, the NORMAL_ERROR
    ///< output is masked. Only the output is masked. Upon detecting a normal
    ///< error, the individual status bits remain set.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t MAE : 1;
    ///< Mask AXI2ED error. The AXI2ED_ERROR output signal is asserted when
    ///< a normal error occurs on any of the AXI2ED modules. When this bit
    ///< is set, the AXI2ED_ERROR output is masked. Only the output is masked.
    ///< Upon detecting ECC double bit error or parity error on AWADDR/ARADDR/WDATA,
    ///< the individual status bits remain set.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t MFIFOFULL : 1;
    ///< Mask FIFO full. The FIFO_FULL output signal is asserted when any of
    ///< the AXI2ED FIFOs is full. When this bit is set, the FIFO_FULL output
    ///< is masked. Only the output is masked. Upon single bit error FIFO full,
    ///< the individual status bits remain set.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t MFIFONE : 1;
    ///< Mask FIFO not empty.                                         The FIFO_NE
    ///< output signal is asserted when any of the AXI2ED FIFOs is not empty.
    ///< When this bit is set, the FIFO_NE output is masked. Only the output
    ///< is masked.                                         Upon storing single
    ///< bit errors into the FIFO, the individual status bits remain set.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RESERVED : 27;
    ///< When these bits are read, 0x0000000 appears on the read bus.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_emcr_reg_t;

#define RCS_LOGGER_EMCR_DEFAULT (0x00000000U)
#define RCS_LOGGER_EMCR_RD_MASK (0xffffffffU)
#define RCS_LOGGER_EMCR_WR_MASK (0xffffffffU)


///< Mask fatal error.                                         The FATAL_ERROR
///< output is asserted when a fatal error occurs on any parity module
///< of the AXI manager interface, the AXI subordinate interface, or the
///< NIC AMIB interface. When this bit is set, the FATAL_ERROR output is
///< masked. Only the output is masked.
///< Upon detecting a fatal error, the individual status bits remain set.
#define RCS_LOGGER_EMCR_MFE_BF_OFF ( 0)
#define RCS_LOGGER_EMCR_MFE_BF_WID ( 1)
#define RCS_LOGGER_EMCR_MFE_BF_MSK (0x00000001)
#define RCS_LOGGER_EMCR_MFE_BF_DEF (0x00000000)

///< Mask normal error. The NORMAL_ERROR output is asserted when a normal
///< error occurs on any parity module of the AXI manager interface or
///< the AXI subordinate interface. When this bit is set, the NORMAL_ERROR
///< output is masked. Only the output is masked. Upon detecting a normal
///< error, the individual status bits remain set.
#define RCS_LOGGER_EMCR_MNE_BF_OFF ( 1)
#define RCS_LOGGER_EMCR_MNE_BF_WID ( 1)
#define RCS_LOGGER_EMCR_MNE_BF_MSK (0x00000002)
#define RCS_LOGGER_EMCR_MNE_BF_DEF (0x00000000)

///< Mask AXI2ED error. The AXI2ED_ERROR output signal is asserted when
///< a normal error occurs on any of the AXI2ED modules. When this bit
///< is set, the AXI2ED_ERROR output is masked. Only the output is masked.
///< Upon detecting ECC double bit error or parity error on AWADDR/ARADDR/WDATA,
///< the individual status bits remain set.
#define RCS_LOGGER_EMCR_MAE_BF_OFF ( 2)
#define RCS_LOGGER_EMCR_MAE_BF_WID ( 1)
#define RCS_LOGGER_EMCR_MAE_BF_MSK (0x00000004)
#define RCS_LOGGER_EMCR_MAE_BF_DEF (0x00000000)

///< Mask FIFO full. The FIFO_FULL output signal is asserted when any of
///< the AXI2ED FIFOs is full. When this bit is set, the FIFO_FULL output
///< is masked. Only the output is masked. Upon single bit error FIFO full,
///< the individual status bits remain set.
#define RCS_LOGGER_EMCR_MFIFOFULL_BF_OFF ( 3)
#define RCS_LOGGER_EMCR_MFIFOFULL_BF_WID ( 1)
#define RCS_LOGGER_EMCR_MFIFOFULL_BF_MSK (0x00000008)
#define RCS_LOGGER_EMCR_MFIFOFULL_BF_DEF (0x00000000)

///< Mask FIFO not empty.                                         The FIFO_NE
///< output signal is asserted when any of the AXI2ED FIFOs is not empty.
///< When this bit is set, the FIFO_NE output is masked. Only the output
///< is masked.                                         Upon storing single
///< bit errors into the FIFO, the individual status bits remain set.
#define RCS_LOGGER_EMCR_MFIFONE_BF_OFF ( 4)
#define RCS_LOGGER_EMCR_MFIFONE_BF_WID ( 1)
#define RCS_LOGGER_EMCR_MFIFONE_BF_MSK (0x00000010)
#define RCS_LOGGER_EMCR_MFIFONE_BF_DEF (0x00000000)

///< When these bits are read, 0x0000000 appears on the read bus.
#define RCS_LOGGER_EMCR_RESERVED_BF_OFF ( 5)
#define RCS_LOGGER_EMCR_RESERVED_BF_WID (27)
#define RCS_LOGGER_EMCR_RESERVED_BF_MSK (0xFFFFFFE0)
#define RCS_LOGGER_EMCR_RESERVED_BF_DEF (0x00000000)


/** @brief RCS_LOGGER_COM_REG_ADBESR register description at address offset 0xfdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/ADBESR
  * AXI2ED Double-Bit Error Status Register
  */

typedef union {
  struct {
    uint32_t DBE0 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DBE1 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DBE2 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DBE3 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DBE4 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DBE5 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t DBE6 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t DBE7 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t DBE8 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t DBE9 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t DBE10 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t DBE11 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t DBE12 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t DBE13 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t DBE14 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t DBE15 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t DBE16 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t DBE17 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t DBE18 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t DBE19 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t DBE20 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t DBE21 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t DBE22 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t DBE23 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t DBE24 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t DBE25 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t DBE26 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t DBE27 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t DBE28 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t DBE29 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t DBE30 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t DBE31 : 1;
    ///< Double-bit error of the nth AXI2ED controller. This bit is set when
    ///< a double bit ECC error is detected, during read operations or RMW
    ///< read operations.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_adbesr_reg_t;

#define RCS_LOGGER_ADBESR_DEFAULT (0x00000000U)
#define RCS_LOGGER_ADBESR_RD_MASK (0xffffffffU)
#define RCS_LOGGER_ADBESR_WR_MASK (0x00000000U)


///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE0_BF_OFF ( 0)
#define RCS_LOGGER_ADBESR_DBE0_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE0_BF_MSK (0x00000001)
#define RCS_LOGGER_ADBESR_DBE0_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE1_BF_OFF ( 1)
#define RCS_LOGGER_ADBESR_DBE1_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE1_BF_MSK (0x00000002)
#define RCS_LOGGER_ADBESR_DBE1_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE2_BF_OFF ( 2)
#define RCS_LOGGER_ADBESR_DBE2_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE2_BF_MSK (0x00000004)
#define RCS_LOGGER_ADBESR_DBE2_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE3_BF_OFF ( 3)
#define RCS_LOGGER_ADBESR_DBE3_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE3_BF_MSK (0x00000008)
#define RCS_LOGGER_ADBESR_DBE3_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE4_BF_OFF ( 4)
#define RCS_LOGGER_ADBESR_DBE4_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE4_BF_MSK (0x00000010)
#define RCS_LOGGER_ADBESR_DBE4_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE5_BF_OFF ( 5)
#define RCS_LOGGER_ADBESR_DBE5_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE5_BF_MSK (0x00000020)
#define RCS_LOGGER_ADBESR_DBE5_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE6_BF_OFF ( 6)
#define RCS_LOGGER_ADBESR_DBE6_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE6_BF_MSK (0x00000040)
#define RCS_LOGGER_ADBESR_DBE6_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE7_BF_OFF ( 7)
#define RCS_LOGGER_ADBESR_DBE7_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE7_BF_MSK (0x00000080)
#define RCS_LOGGER_ADBESR_DBE7_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE8_BF_OFF ( 8)
#define RCS_LOGGER_ADBESR_DBE8_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE8_BF_MSK (0x00000100)
#define RCS_LOGGER_ADBESR_DBE8_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE9_BF_OFF ( 9)
#define RCS_LOGGER_ADBESR_DBE9_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE9_BF_MSK (0x00000200)
#define RCS_LOGGER_ADBESR_DBE9_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE10_BF_OFF (10)
#define RCS_LOGGER_ADBESR_DBE10_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE10_BF_MSK (0x00000400)
#define RCS_LOGGER_ADBESR_DBE10_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE11_BF_OFF (11)
#define RCS_LOGGER_ADBESR_DBE11_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE11_BF_MSK (0x00000800)
#define RCS_LOGGER_ADBESR_DBE11_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE12_BF_OFF (12)
#define RCS_LOGGER_ADBESR_DBE12_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE12_BF_MSK (0x00001000)
#define RCS_LOGGER_ADBESR_DBE12_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE13_BF_OFF (13)
#define RCS_LOGGER_ADBESR_DBE13_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE13_BF_MSK (0x00002000)
#define RCS_LOGGER_ADBESR_DBE13_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE14_BF_OFF (14)
#define RCS_LOGGER_ADBESR_DBE14_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE14_BF_MSK (0x00004000)
#define RCS_LOGGER_ADBESR_DBE14_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE15_BF_OFF (15)
#define RCS_LOGGER_ADBESR_DBE15_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE15_BF_MSK (0x00008000)
#define RCS_LOGGER_ADBESR_DBE15_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE16_BF_OFF (16)
#define RCS_LOGGER_ADBESR_DBE16_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE16_BF_MSK (0x00010000)
#define RCS_LOGGER_ADBESR_DBE16_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE17_BF_OFF (17)
#define RCS_LOGGER_ADBESR_DBE17_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE17_BF_MSK (0x00020000)
#define RCS_LOGGER_ADBESR_DBE17_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE18_BF_OFF (18)
#define RCS_LOGGER_ADBESR_DBE18_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE18_BF_MSK (0x00040000)
#define RCS_LOGGER_ADBESR_DBE18_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE19_BF_OFF (19)
#define RCS_LOGGER_ADBESR_DBE19_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE19_BF_MSK (0x00080000)
#define RCS_LOGGER_ADBESR_DBE19_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE20_BF_OFF (20)
#define RCS_LOGGER_ADBESR_DBE20_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE20_BF_MSK (0x00100000)
#define RCS_LOGGER_ADBESR_DBE20_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE21_BF_OFF (21)
#define RCS_LOGGER_ADBESR_DBE21_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE21_BF_MSK (0x00200000)
#define RCS_LOGGER_ADBESR_DBE21_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE22_BF_OFF (22)
#define RCS_LOGGER_ADBESR_DBE22_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE22_BF_MSK (0x00400000)
#define RCS_LOGGER_ADBESR_DBE22_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE23_BF_OFF (23)
#define RCS_LOGGER_ADBESR_DBE23_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE23_BF_MSK (0x00800000)
#define RCS_LOGGER_ADBESR_DBE23_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE24_BF_OFF (24)
#define RCS_LOGGER_ADBESR_DBE24_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE24_BF_MSK (0x01000000)
#define RCS_LOGGER_ADBESR_DBE24_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE25_BF_OFF (25)
#define RCS_LOGGER_ADBESR_DBE25_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE25_BF_MSK (0x02000000)
#define RCS_LOGGER_ADBESR_DBE25_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE26_BF_OFF (26)
#define RCS_LOGGER_ADBESR_DBE26_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE26_BF_MSK (0x04000000)
#define RCS_LOGGER_ADBESR_DBE26_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE27_BF_OFF (27)
#define RCS_LOGGER_ADBESR_DBE27_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE27_BF_MSK (0x08000000)
#define RCS_LOGGER_ADBESR_DBE27_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE28_BF_OFF (28)
#define RCS_LOGGER_ADBESR_DBE28_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE28_BF_MSK (0x10000000)
#define RCS_LOGGER_ADBESR_DBE28_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE29_BF_OFF (29)
#define RCS_LOGGER_ADBESR_DBE29_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE29_BF_MSK (0x20000000)
#define RCS_LOGGER_ADBESR_DBE29_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE30_BF_OFF (30)
#define RCS_LOGGER_ADBESR_DBE30_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE30_BF_MSK (0x40000000)
#define RCS_LOGGER_ADBESR_DBE30_BF_DEF (0x00000000)

///< Double-bit error of the nth AXI2ED controller. This bit is set when
///< a double bit ECC error is detected, during read operations or RMW
///< read operations.
#define RCS_LOGGER_ADBESR_DBE31_BF_OFF (31)
#define RCS_LOGGER_ADBESR_DBE31_BF_WID ( 1)
#define RCS_LOGGER_ADBESR_DBE31_BF_MSK (0x80000000)
#define RCS_LOGGER_ADBESR_DBE31_BF_DEF (0x00000000)


/** @brief RCS_LOGGER_COM_REG_APESR register description at address offset 0xfe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_logger_com/reg/APESR
  * AXI2ED Parity Error Status Register
  */

typedef union {
  struct {
    uint32_t PE0 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PE1 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PE2 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PE3 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PE4 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PE5 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PE6 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t PE7 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t PE8 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t PE9 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t PE10 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t PE11 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t PE12 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t PE13 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t PE14 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t PE15 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t PE16 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t PE17 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t PE18 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t PE19 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t PE20 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t PE21 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t PE22 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t PE23 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t PE24 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t PE25 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t PE26 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t PE27 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t PE28 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t PE29 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t PE30 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t PE31 : 1;
    ///< Parity error of the nth AXI2ED controller. This bit is set when a
    ///< parity error is detected, during read operations or write operations.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_logger_apesr_reg_t;

#define RCS_LOGGER_APESR_DEFAULT (0x00000000U)
#define RCS_LOGGER_APESR_RD_MASK (0xffffffffU)
#define RCS_LOGGER_APESR_WR_MASK (0x00000000U)


///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE0_BF_OFF ( 0)
#define RCS_LOGGER_APESR_PE0_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE0_BF_MSK (0x00000001)
#define RCS_LOGGER_APESR_PE0_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE1_BF_OFF ( 1)
#define RCS_LOGGER_APESR_PE1_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE1_BF_MSK (0x00000002)
#define RCS_LOGGER_APESR_PE1_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE2_BF_OFF ( 2)
#define RCS_LOGGER_APESR_PE2_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE2_BF_MSK (0x00000004)
#define RCS_LOGGER_APESR_PE2_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE3_BF_OFF ( 3)
#define RCS_LOGGER_APESR_PE3_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE3_BF_MSK (0x00000008)
#define RCS_LOGGER_APESR_PE3_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE4_BF_OFF ( 4)
#define RCS_LOGGER_APESR_PE4_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE4_BF_MSK (0x00000010)
#define RCS_LOGGER_APESR_PE4_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE5_BF_OFF ( 5)
#define RCS_LOGGER_APESR_PE5_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE5_BF_MSK (0x00000020)
#define RCS_LOGGER_APESR_PE5_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE6_BF_OFF ( 6)
#define RCS_LOGGER_APESR_PE6_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE6_BF_MSK (0x00000040)
#define RCS_LOGGER_APESR_PE6_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE7_BF_OFF ( 7)
#define RCS_LOGGER_APESR_PE7_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE7_BF_MSK (0x00000080)
#define RCS_LOGGER_APESR_PE7_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE8_BF_OFF ( 8)
#define RCS_LOGGER_APESR_PE8_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE8_BF_MSK (0x00000100)
#define RCS_LOGGER_APESR_PE8_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE9_BF_OFF ( 9)
#define RCS_LOGGER_APESR_PE9_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE9_BF_MSK (0x00000200)
#define RCS_LOGGER_APESR_PE9_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE10_BF_OFF (10)
#define RCS_LOGGER_APESR_PE10_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE10_BF_MSK (0x00000400)
#define RCS_LOGGER_APESR_PE10_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE11_BF_OFF (11)
#define RCS_LOGGER_APESR_PE11_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE11_BF_MSK (0x00000800)
#define RCS_LOGGER_APESR_PE11_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE12_BF_OFF (12)
#define RCS_LOGGER_APESR_PE12_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE12_BF_MSK (0x00001000)
#define RCS_LOGGER_APESR_PE12_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE13_BF_OFF (13)
#define RCS_LOGGER_APESR_PE13_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE13_BF_MSK (0x00002000)
#define RCS_LOGGER_APESR_PE13_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE14_BF_OFF (14)
#define RCS_LOGGER_APESR_PE14_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE14_BF_MSK (0x00004000)
#define RCS_LOGGER_APESR_PE14_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE15_BF_OFF (15)
#define RCS_LOGGER_APESR_PE15_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE15_BF_MSK (0x00008000)
#define RCS_LOGGER_APESR_PE15_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE16_BF_OFF (16)
#define RCS_LOGGER_APESR_PE16_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE16_BF_MSK (0x00010000)
#define RCS_LOGGER_APESR_PE16_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE17_BF_OFF (17)
#define RCS_LOGGER_APESR_PE17_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE17_BF_MSK (0x00020000)
#define RCS_LOGGER_APESR_PE17_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE18_BF_OFF (18)
#define RCS_LOGGER_APESR_PE18_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE18_BF_MSK (0x00040000)
#define RCS_LOGGER_APESR_PE18_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE19_BF_OFF (19)
#define RCS_LOGGER_APESR_PE19_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE19_BF_MSK (0x00080000)
#define RCS_LOGGER_APESR_PE19_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE20_BF_OFF (20)
#define RCS_LOGGER_APESR_PE20_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE20_BF_MSK (0x00100000)
#define RCS_LOGGER_APESR_PE20_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE21_BF_OFF (21)
#define RCS_LOGGER_APESR_PE21_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE21_BF_MSK (0x00200000)
#define RCS_LOGGER_APESR_PE21_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE22_BF_OFF (22)
#define RCS_LOGGER_APESR_PE22_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE22_BF_MSK (0x00400000)
#define RCS_LOGGER_APESR_PE22_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE23_BF_OFF (23)
#define RCS_LOGGER_APESR_PE23_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE23_BF_MSK (0x00800000)
#define RCS_LOGGER_APESR_PE23_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE24_BF_OFF (24)
#define RCS_LOGGER_APESR_PE24_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE24_BF_MSK (0x01000000)
#define RCS_LOGGER_APESR_PE24_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE25_BF_OFF (25)
#define RCS_LOGGER_APESR_PE25_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE25_BF_MSK (0x02000000)
#define RCS_LOGGER_APESR_PE25_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE26_BF_OFF (26)
#define RCS_LOGGER_APESR_PE26_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE26_BF_MSK (0x04000000)
#define RCS_LOGGER_APESR_PE26_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE27_BF_OFF (27)
#define RCS_LOGGER_APESR_PE27_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE27_BF_MSK (0x08000000)
#define RCS_LOGGER_APESR_PE27_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE28_BF_OFF (28)
#define RCS_LOGGER_APESR_PE28_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE28_BF_MSK (0x10000000)
#define RCS_LOGGER_APESR_PE28_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE29_BF_OFF (29)
#define RCS_LOGGER_APESR_PE29_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE29_BF_MSK (0x20000000)
#define RCS_LOGGER_APESR_PE29_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE30_BF_OFF (30)
#define RCS_LOGGER_APESR_PE30_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE30_BF_MSK (0x40000000)
#define RCS_LOGGER_APESR_PE30_BF_DEF (0x00000000)

///< Parity error of the nth AXI2ED controller. This bit is set when a
///< parity error is detected, during read operations or write operations.
#define RCS_LOGGER_APESR_PE31_BF_OFF (31)
#define RCS_LOGGER_APESR_PE31_BF_WID ( 1)
#define RCS_LOGGER_APESR_PE31_BF_MSK (0x80000000)
#define RCS_LOGGER_APESR_PE31_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RCS_LOGGER_RSM0_AXI2EDCRN_REG ((rcs_logger_rsm_axi2edcrn_reg_t*) RCS_LOGGER_RSM0_AXI2EDCRN_ADR)
#define RCS_LOGGER_RSM0_AXI2EDSR1N_REG ((rcs_logger_rsm_axi2edsr1n_reg_t*) RCS_LOGGER_RSM0_AXI2EDSR1N_ADR)
#define RCS_LOGGER_RSM0_AXI2EDSR2N_REG ((rcs_logger_rsm_axi2edsr2n_reg_t*) RCS_LOGGER_RSM0_AXI2EDSR2N_ADR)
#define RCS_LOGGER_RSM0_AXI2EDEARN_REG ((rcs_logger_rsm_axi2edearn_reg_t*) RCS_LOGGER_RSM0_AXI2EDEARN_ADR)
#define RCS_LOGGER_RSM0_ECCSBECN_REG ((rcs_logger_rsm_eccsbecn_reg_t*) RCS_LOGGER_RSM0_ECCSBECN_ADR)
#define RCS_LOGGER_RSM0_ECCDBECN_REG ((rcs_logger_rsm_eccdbecn_reg_t*) RCS_LOGGER_RSM0_ECCDBECN_ADR)
#define RCS_LOGGER_RSM0_AWPECN_REG ((rcs_logger_rsm_awpecn_reg_t*) RCS_LOGGER_RSM0_AWPECN_ADR)
#define RCS_LOGGER_RSM0_WPECN_REG ((rcs_logger_rsm_wpecn_reg_t*) RCS_LOGGER_RSM0_WPECN_ADR)
#define RCS_LOGGER_RSM0_ARPECN_REG ((rcs_logger_rsm_arpecn_reg_t*) RCS_LOGGER_RSM0_ARPECN_ADR)
#define RCS_LOGGER_RSM0_AXI2EDIMTN_REG ((rcs_logger_rsm_axi2edimtn_reg_t*) RCS_LOGGER_RSM0_AXI2EDIMTN_ADR)
#define RCS_LOGGER_RSM0_AXI2EDIMTON_REG ((rcs_logger_rsm_axi2edimton_reg_t*) RCS_LOGGER_RSM0_AXI2EDIMTON_ADR)
#define RCS_LOGGER_RSM0_AXI2EDFIFOSRN_REG ((rcs_logger_rsm_axi2edfifosrn_reg_t*) RCS_LOGGER_RSM0_AXI2EDFIFOSRN_ADR)
#define RCS_LOGGER_RSM0_AXI2EDFIFON_REG ((rcs_logger_rsm_axi2edfifon_reg_t*) RCS_LOGGER_RSM0_AXI2EDFIFON_ADR)
#define RCS_LOGGER_RSM0_AXI2EDIDN_REG ((rcs_logger_rsm_axi2edidn_reg_t*) RCS_LOGGER_RSM0_AXI2EDIDN_ADR)
#define RCS_LOGGER_RSM1_AXI2EDCRN_REG ((rcs_logger_rsm_axi2edcrn_reg_t*) RCS_LOGGER_RSM1_AXI2EDCRN_ADR)
#define RCS_LOGGER_RSM1_AXI2EDSR1N_REG ((rcs_logger_rsm_axi2edsr1n_reg_t*) RCS_LOGGER_RSM1_AXI2EDSR1N_ADR)
#define RCS_LOGGER_RSM1_AXI2EDSR2N_REG ((rcs_logger_rsm_axi2edsr2n_reg_t*) RCS_LOGGER_RSM1_AXI2EDSR2N_ADR)
#define RCS_LOGGER_RSM1_AXI2EDEARN_REG ((rcs_logger_rsm_axi2edearn_reg_t*) RCS_LOGGER_RSM1_AXI2EDEARN_ADR)
#define RCS_LOGGER_RSM1_ECCSBECN_REG ((rcs_logger_rsm_eccsbecn_reg_t*) RCS_LOGGER_RSM1_ECCSBECN_ADR)
#define RCS_LOGGER_RSM1_ECCDBECN_REG ((rcs_logger_rsm_eccdbecn_reg_t*) RCS_LOGGER_RSM1_ECCDBECN_ADR)
#define RCS_LOGGER_RSM1_AWPECN_REG ((rcs_logger_rsm_awpecn_reg_t*) RCS_LOGGER_RSM1_AWPECN_ADR)
#define RCS_LOGGER_RSM1_WPECN_REG ((rcs_logger_rsm_wpecn_reg_t*) RCS_LOGGER_RSM1_WPECN_ADR)
#define RCS_LOGGER_RSM1_ARPECN_REG ((rcs_logger_rsm_arpecn_reg_t*) RCS_LOGGER_RSM1_ARPECN_ADR)
#define RCS_LOGGER_RSM1_AXI2EDIMTN_REG ((rcs_logger_rsm_axi2edimtn_reg_t*) RCS_LOGGER_RSM1_AXI2EDIMTN_ADR)
#define RCS_LOGGER_RSM1_AXI2EDIMTON_REG ((rcs_logger_rsm_axi2edimton_reg_t*) RCS_LOGGER_RSM1_AXI2EDIMTON_ADR)
#define RCS_LOGGER_RSM1_AXI2EDFIFOSRN_REG ((rcs_logger_rsm_axi2edfifosrn_reg_t*) RCS_LOGGER_RSM1_AXI2EDFIFOSRN_ADR)
#define RCS_LOGGER_RSM1_AXI2EDFIFON_REG ((rcs_logger_rsm_axi2edfifon_reg_t*) RCS_LOGGER_RSM1_AXI2EDFIFON_ADR)
#define RCS_LOGGER_RSM1_AXI2EDIDN_REG ((rcs_logger_rsm_axi2edidn_reg_t*) RCS_LOGGER_RSM1_AXI2EDIDN_ADR)
#define RCS_LOGGER_PID_REG ((rcs_logger_pid_reg_t*) RCS_LOGGER_PID_ADR)
#define RCS_LOGGER_PEIWER_REG ((rcs_logger_peiwer_reg_t*) RCS_LOGGER_PEIWER_ADR)
#define RCS_LOGGER_EMCR_REG ((rcs_logger_emcr_reg_t*) RCS_LOGGER_EMCR_ADR)
#define RCS_LOGGER_ADBESR_REG ((rcs_logger_adbesr_reg_t*) RCS_LOGGER_ADBESR_ADR)
#define RCS_LOGGER_APESR_REG ((rcs_logger_apesr_reg_t*) RCS_LOGGER_APESR_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    const uint8_t        reservedArea0 [2048]; /*< Address offset = 0x0 */
    rcs_logger_rsm_axi2edcrn_reg_t RSM0_AXI2EDCRN;  /*< Address offset = 0x800 */
    rcs_logger_rsm_axi2edsr1n_reg_t RSM0_AXI2EDSR1N; /*< Address offset = 0x804 */
    rcs_logger_rsm_axi2edsr2n_reg_t RSM0_AXI2EDSR2N; /*< Address offset = 0x808 */
    rcs_logger_rsm_axi2edearn_reg_t RSM0_AXI2EDEARN; /*< Address offset = 0x80c */
    rcs_logger_rsm_eccsbecn_reg_t RSM0_ECCSBECN;   /*< Address offset = 0x810 */
    rcs_logger_rsm_eccdbecn_reg_t RSM0_ECCDBECN;   /*< Address offset = 0x814 */
    rcs_logger_rsm_awpecn_reg_t RSM0_AWPECN;     /*< Address offset = 0x818 */
    rcs_logger_rsm_wpecn_reg_t RSM0_WPECN;      /*< Address offset = 0x81c */
    rcs_logger_rsm_arpecn_reg_t RSM0_ARPECN;     /*< Address offset = 0x820 */
    rcs_logger_rsm_axi2edimtn_reg_t RSM0_AXI2EDIMTN; /*< Address offset = 0x824 */
    rcs_logger_rsm_axi2edimton_reg_t RSM0_AXI2EDIMTON; /*< Address offset = 0x828 */
    rcs_logger_rsm_axi2edfifosrn_reg_t RSM0_AXI2EDFIFOSRN; /*< Address offset = 0x82c */
    rcs_logger_rsm_axi2edfifon_reg_t RSM0_AXI2EDFIFON; /*< Address offset = 0x830 */
    rcs_logger_rsm_axi2edidn_reg_t RSM0_AXI2EDIDN;  /*< Address offset = 0x834 */
    const uint8_t        reservedArea1 [8];   /*< Address offset = 0x838 */
    rcs_logger_rsm_axi2edcrn_reg_t RSM1_AXI2EDCRN;  /*< Address offset = 0x840 */
    rcs_logger_rsm_axi2edsr1n_reg_t RSM1_AXI2EDSR1N; /*< Address offset = 0x844 */
    rcs_logger_rsm_axi2edsr2n_reg_t RSM1_AXI2EDSR2N; /*< Address offset = 0x848 */
    rcs_logger_rsm_axi2edearn_reg_t RSM1_AXI2EDEARN; /*< Address offset = 0x84c */
    rcs_logger_rsm_eccsbecn_reg_t RSM1_ECCSBECN;   /*< Address offset = 0x850 */
    rcs_logger_rsm_eccdbecn_reg_t RSM1_ECCDBECN;   /*< Address offset = 0x854 */
    rcs_logger_rsm_awpecn_reg_t RSM1_AWPECN;     /*< Address offset = 0x858 */
    rcs_logger_rsm_wpecn_reg_t RSM1_WPECN;      /*< Address offset = 0x85c */
    rcs_logger_rsm_arpecn_reg_t RSM1_ARPECN;     /*< Address offset = 0x860 */
    rcs_logger_rsm_axi2edimtn_reg_t RSM1_AXI2EDIMTN; /*< Address offset = 0x864 */
    rcs_logger_rsm_axi2edimton_reg_t RSM1_AXI2EDIMTON; /*< Address offset = 0x868 */
    rcs_logger_rsm_axi2edfifosrn_reg_t RSM1_AXI2EDFIFOSRN; /*< Address offset = 0x86c */
    rcs_logger_rsm_axi2edfifon_reg_t RSM1_AXI2EDFIFON; /*< Address offset = 0x870 */
    rcs_logger_rsm_axi2edidn_reg_t RSM1_AXI2EDIDN;  /*< Address offset = 0x874 */
    const uint8_t        reservedArea2 [1864]; /*< Address offset = 0x878 */
    rcs_logger_pid_reg_t PID;             /*< Address offset = 0xfc0 */
    rcs_logger_peiwer_reg_t PEIWER;          /*< Address offset = 0xfc4 */
    rcs_logger_emcr_reg_t EMCR;            /*< Address offset = 0xfc8 */
    const uint8_t        reservedArea3 [16];  /*< Address offset = 0xfcc */
    rcs_logger_adbesr_reg_t ADBESR;          /*< Address offset = 0xfdc */
    rcs_logger_apesr_reg_t APESR;           /*< Address offset = 0xfe0 */
} rcs_logger_t;     // size: 0x0084

// AddressSpace struct pointer
//
#define RCS_LOGGER       ((rcs_logger_t*) RCS_LOGGER_BASE)

// ******************************************* /Address Space

#endif      // _RCS_LOGGER_H_

