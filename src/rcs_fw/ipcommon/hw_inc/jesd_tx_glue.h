#ifndef _JESD_TX_GLUE_H_
#define _JESD_TX_GLUE_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_TX_GLUE_BASE  ( 0x06708000 )
#define DLNK_JESD1_TX_GLUE_BASE  ( 0x06f08000 )
#define DLNK_JESD2_TX_GLUE_BASE  ( 0x07708000 )
#define DLNK_JESD3_TX_GLUE_BASE  ( 0x07f08000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define JESD_TX_GLUE_SCRATCH_OFFSET ( 0x00000000U )
#define JESD_TX_GLUE_APB_BRDG_STAT_OFFSET ( 0x00000004U )
#define JESD_TX_GLUE_STRM_INST_CNT_OFFSET ( 0x00000010U )
#define JESD_TX_GLUE_CONV_DP_CFG_OFFSET ( 0x00000014U )
#define JESD_TX_GLUE_FB_CONV_DP_CFG_OFFSET ( 0x00000018U )
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_OFFSET ( 0x0000001cU )
#define JESD_TX_GLUE_PHM_FRAME_CFG_OFFSET ( 0x00000020U )
#define JESD_TX_GLUE_FOVR_CFG_OFFSET ( 0x00000024U )
#define JESD_TX_GLUE_STRM_PHM_EN_OFFSET ( 0x00000028U )
#define JESD_TX_GLUE_STRM_FOVR_EN_OFFSET ( 0x0000002cU )
#define JESD_TX_GLUE_DATA_SRC_EN_OFFSET ( 0x00000030U )
#define JESD_TX_GLUE_CAP_FRZ_EN_OFFSET ( 0x00000034U )
#define JESD_TX_GLUE_APB_RADDR_OFFSET ( 0x00000038U )
#define JESD_TX_GLUE_APB_RD_OFFSET ( 0x0000003cU )
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_OFFSET ( 0x00000040U )
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_OFFSET ( 0x00000044U )
#define JESD_TX_GLUE_TSB_EMPTY_STAT_OFFSET ( 0x00000048U )
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_OFFSET ( 0x0000004cU )
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_OFFSET ( 0x00000050U )
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_OFFSET ( 0x00000054U )
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_OFFSET ( 0x00000058U )
#define JESD_TX_GLUE_TSB_RD_TRIG_OFFSET ( 0x00000060U )
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_OFFSET ( 0x00000064U )
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_OFFSET ( 0x00000068U )
#define JESD_TX_GLUE_PHM_SHIFT_NUM_OFFSET ( 0x0000006cU )
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_OFFSET ( 0x00000070U )
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_OFFSET ( 0x00000074U )
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_OFFSET ( 0x00000078U )
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_OFFSET ( 0x0000007cU )
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_OFFSET ( 0x00000080U )
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_OFFSET ( 0x00000084U )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_OFFSET ( 0x00000088U )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_OFFSET ( 0x0000008cU )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_OFFSET ( 0x00000090U )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_OFFSET ( 0x00000094U )
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_OFFSET ( 0x000000a0U )
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_OFFSET ( 0x000000a4U )
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_OFFSET ( 0x000000a8U )
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_OFFSET ( 0x000000acU )
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_OFFSET ( 0x000000b0U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_OFFSET ( 0x000000b4U )
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_OFFSET ( 0x000000c0U )
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_OFFSET ( 0x000000c4U )
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_OFFSET ( 0x000000c8U )
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_OFFSET ( 0x000000ccU )
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_OFFSET ( 0x000000d0U )
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_OFFSET ( 0x000000d4U )
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_OFFSET ( 0x000000d8U )
#define JESD_TX_GLUE_SRG_PAT_EN_OFFSET ( 0x000000dcU )
#define JESD_TX_GLUE_ECC_CHK_DIS_OFFSET ( 0x000000e0U )
#define JESD_TX_GLUE_ECC_FORCE_ERR_OFFSET ( 0x000000e4U )
#define JESD_TX_GLUE_ECC_FORCE_TYPE_OFFSET ( 0x000000e8U )
#define JESD_TX_GLUE_ECC_STAT_CLR_OFFSET ( 0x000000ecU )
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_OFFSET ( 0x000000f0U )
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_OFFSET ( 0x000000f4U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_OFFSET ( 0x000000f8U )
#define JESD_TX_GLUE_SP_MON_CAP_VLD_OFFSET ( 0x000000fcU )
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_OFFSET ( 0x00000100U )
#define JESD_TX_GLUE_FB_MODE_CTRL_OFFSET ( 0x00000104U )
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_OFFSET ( 0x00000108U )
#define JESD_TX_GLUE_SHIFT_CAP_STAT_OFFSET ( 0x0000010cU )
#define JESD_TX_GLUE_SHIFT_CAP_EN_OFFSET ( 0x00000110U )
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_OFFSET ( 0x00000114U )
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_OFFSET ( 0x00000118U )
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_OFFSET ( 0x0000011cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_OFFSET ( 0x00000120U )
#define JESD_TX_GLUE_STRM_RD_PTR0_OFFSET ( 0x00000200U )
#define JESD_TX_GLUE_STRM_RD_PTR1_OFFSET ( 0x00000204U )
#define JESD_TX_GLUE_STRM_RD_PTR2_OFFSET ( 0x00000208U )
#define JESD_TX_GLUE_STRM_RD_PTR3_OFFSET ( 0x0000020cU )
#define JESD_TX_GLUE_STRM_RD_PTR4_OFFSET ( 0x00000210U )
#define JESD_TX_GLUE_STRM_RD_PTR5_OFFSET ( 0x00000214U )
#define JESD_TX_GLUE_STRM_RD_PTR6_OFFSET ( 0x00000218U )
#define JESD_TX_GLUE_STRM_RD_PTR7_OFFSET ( 0x0000021cU )
#define JESD_TX_GLUE_STRM_RD_PTR8_OFFSET ( 0x00000220U )
#define JESD_TX_GLUE_STRM_RD_PTR9_OFFSET ( 0x00000224U )
#define JESD_TX_GLUE_STRM_RD_PTR10_OFFSET ( 0x00000228U )
#define JESD_TX_GLUE_STRM_RD_PTR11_OFFSET ( 0x0000022cU )
#define JESD_TX_GLUE_STRM_RD_PTR12_OFFSET ( 0x00000230U )
#define JESD_TX_GLUE_STRM_RD_PTR13_OFFSET ( 0x00000234U )
#define JESD_TX_GLUE_STRM_RD_PTR14_OFFSET ( 0x00000238U )
#define JESD_TX_GLUE_STRM_RD_PTR15_OFFSET ( 0x0000023cU )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP0_OFFSET ( 0x00000240U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP1_OFFSET ( 0x00000244U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP2_OFFSET ( 0x00000248U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP3_OFFSET ( 0x0000024cU )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP4_OFFSET ( 0x00000250U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP5_OFFSET ( 0x00000254U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP6_OFFSET ( 0x00000258U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP7_OFFSET ( 0x0000025cU )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP8_OFFSET ( 0x00000260U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP9_OFFSET ( 0x00000264U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP10_OFFSET ( 0x00000268U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP11_OFFSET ( 0x0000026cU )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP12_OFFSET ( 0x00000270U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP13_OFFSET ( 0x00000274U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP14_OFFSET ( 0x00000278U )
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP15_OFFSET ( 0x0000027cU )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS0_OFFSET ( 0x00000280U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS1_OFFSET ( 0x00000284U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS2_OFFSET ( 0x00000288U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS3_OFFSET ( 0x0000028cU )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS4_OFFSET ( 0x00000290U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS5_OFFSET ( 0x00000294U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS6_OFFSET ( 0x00000298U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS7_OFFSET ( 0x0000029cU )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS8_OFFSET ( 0x000002a0U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS9_OFFSET ( 0x000002a4U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS10_OFFSET ( 0x000002a8U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS11_OFFSET ( 0x000002acU )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS12_OFFSET ( 0x000002b0U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS13_OFFSET ( 0x000002b4U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS14_OFFSET ( 0x000002b8U )
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS15_OFFSET ( 0x000002bcU )
#define JESD_TX_GLUE_APB_RDATA0_OFFSET ( 0x000002c0U )
#define JESD_TX_GLUE_APB_RDATA1_OFFSET ( 0x000002c4U )
#define JESD_TX_GLUE_APB_RDATA2_OFFSET ( 0x000002c8U )
#define JESD_TX_GLUE_APB_RDATA3_OFFSET ( 0x000002ccU )
#define JESD_TX_GLUE_APB_RDATA4_OFFSET ( 0x000002d0U )
#define JESD_TX_GLUE_APB_RDATA5_OFFSET ( 0x000002d4U )
#define JESD_TX_GLUE_APB_RDATA6_OFFSET ( 0x000002d8U )
#define JESD_TX_GLUE_APB_RDATA7_OFFSET ( 0x000002dcU )
#define JESD_TX_GLUE_APB_RDATA8_OFFSET ( 0x000002e0U )
#define JESD_TX_GLUE_APB_RDATA9_OFFSET ( 0x000002e4U )
#define JESD_TX_GLUE_APB_RDATA10_OFFSET ( 0x000002e8U )
#define JESD_TX_GLUE_APB_RDATA11_OFFSET ( 0x000002ecU )
#define JESD_TX_GLUE_APB_RDATA12_OFFSET ( 0x000002f0U )
#define JESD_TX_GLUE_APB_RDATA13_OFFSET ( 0x000002f4U )
#define JESD_TX_GLUE_APB_RDATA14_OFFSET ( 0x000002f8U )
#define JESD_TX_GLUE_APB_RDATA15_OFFSET ( 0x000002fcU )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH0_OFFSET ( 0x00000300U )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH1_OFFSET ( 0x00000304U )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM0_OFFSET ( 0x00000310U )
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM1_OFFSET ( 0x00000314U )
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER0_OFFSET ( 0x00000320U )
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER1_OFFSET ( 0x00000324U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG00_OFFSET ( 0x00000330U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG01_OFFSET ( 0x00000334U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG02_OFFSET ( 0x00000338U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG03_OFFSET ( 0x0000033cU )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG10_OFFSET ( 0x00000340U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG11_OFFSET ( 0x00000344U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG12_OFFSET ( 0x00000348U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG13_OFFSET ( 0x0000034cU )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG20_OFFSET ( 0x00000350U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG21_OFFSET ( 0x00000354U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG22_OFFSET ( 0x00000358U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG23_OFFSET ( 0x0000035cU )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG30_OFFSET ( 0x00000360U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG31_OFFSET ( 0x00000364U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG32_OFFSET ( 0x00000368U )
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG33_OFFSET ( 0x0000036cU )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT0_OFFSET ( 0x00000380U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT1_OFFSET ( 0x00000384U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT2_OFFSET ( 0x00000388U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT3_OFFSET ( 0x0000038cU )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT4_OFFSET ( 0x00000390U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT5_OFFSET ( 0x00000394U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT6_OFFSET ( 0x00000398U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT7_OFFSET ( 0x0000039cU )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT8_OFFSET ( 0x000003a0U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT9_OFFSET ( 0x000003a4U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT10_OFFSET ( 0x000003a8U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT11_OFFSET ( 0x000003acU )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT12_OFFSET ( 0x000003b0U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT13_OFFSET ( 0x000003b4U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT14_OFFSET ( 0x000003b8U )
#define JESD_TX_GLUE_ECC_B0_ERR_STAT15_OFFSET ( 0x000003bcU )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT0_OFFSET ( 0x000003c0U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT1_OFFSET ( 0x000003c4U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT2_OFFSET ( 0x000003c8U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT3_OFFSET ( 0x000003ccU )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT4_OFFSET ( 0x000003d0U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT5_OFFSET ( 0x000003d4U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT6_OFFSET ( 0x000003d8U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT7_OFFSET ( 0x000003dcU )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT8_OFFSET ( 0x000003e0U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT9_OFFSET ( 0x000003e4U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT10_OFFSET ( 0x000003e8U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT11_OFFSET ( 0x000003ecU )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT12_OFFSET ( 0x000003f0U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT13_OFFSET ( 0x000003f4U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT14_OFFSET ( 0x000003f8U )
#define JESD_TX_GLUE_ECC_B1_ERR_STAT15_OFFSET ( 0x000003fcU )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY0_OFFSET ( 0x00000400U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY1_OFFSET ( 0x00000404U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY2_OFFSET ( 0x00000408U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY3_OFFSET ( 0x0000040cU )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY4_OFFSET ( 0x00000410U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY5_OFFSET ( 0x00000414U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY6_OFFSET ( 0x00000418U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY7_OFFSET ( 0x0000041cU )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY8_OFFSET ( 0x00000420U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY9_OFFSET ( 0x00000424U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY10_OFFSET ( 0x00000428U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY11_OFFSET ( 0x0000042cU )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY12_OFFSET ( 0x00000430U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY13_OFFSET ( 0x00000434U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY14_OFFSET ( 0x00000438U )
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY15_OFFSET ( 0x0000043cU )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY0_OFFSET ( 0x00000440U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY1_OFFSET ( 0x00000444U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY2_OFFSET ( 0x00000448U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY3_OFFSET ( 0x0000044cU )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY4_OFFSET ( 0x00000450U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY5_OFFSET ( 0x00000454U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY6_OFFSET ( 0x00000458U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY7_OFFSET ( 0x0000045cU )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY8_OFFSET ( 0x00000460U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY9_OFFSET ( 0x00000464U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY10_OFFSET ( 0x00000468U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY11_OFFSET ( 0x0000046cU )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY12_OFFSET ( 0x00000470U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY13_OFFSET ( 0x00000474U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY14_OFFSET ( 0x00000478U )
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY15_OFFSET ( 0x0000047cU )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG0_OFFSET ( 0x00000480U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG1_OFFSET ( 0x00000484U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG2_OFFSET ( 0x00000488U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG3_OFFSET ( 0x0000048cU )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG4_OFFSET ( 0x00000490U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG5_OFFSET ( 0x00000494U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG6_OFFSET ( 0x00000498U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG7_OFFSET ( 0x0000049cU )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG8_OFFSET ( 0x000004a0U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG9_OFFSET ( 0x000004a4U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG10_OFFSET ( 0x000004a8U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG11_OFFSET ( 0x000004acU )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG12_OFFSET ( 0x000004b0U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG13_OFFSET ( 0x000004b4U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG14_OFFSET ( 0x000004b8U )
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG15_OFFSET ( 0x000004bcU )
#define JESD_TX_GLUE_TSB_DEPTH0_OFFSET ( 0x000004c0U )
#define JESD_TX_GLUE_TSB_DEPTH1_OFFSET ( 0x000004c4U )
#define JESD_TX_GLUE_TSB_DEPTH2_OFFSET ( 0x000004c8U )
#define JESD_TX_GLUE_TSB_DEPTH3_OFFSET ( 0x000004ccU )
#define JESD_TX_GLUE_TSB_DEPTH4_OFFSET ( 0x000004d0U )
#define JESD_TX_GLUE_TSB_DEPTH5_OFFSET ( 0x000004d4U )
#define JESD_TX_GLUE_TSB_DEPTH6_OFFSET ( 0x000004d8U )
#define JESD_TX_GLUE_TSB_DEPTH7_OFFSET ( 0x000004dcU )
#define JESD_TX_GLUE_TSB_DEPTH8_OFFSET ( 0x000004e0U )
#define JESD_TX_GLUE_TSB_DEPTH9_OFFSET ( 0x000004e4U )
#define JESD_TX_GLUE_TSB_DEPTH10_OFFSET ( 0x000004e8U )
#define JESD_TX_GLUE_TSB_DEPTH11_OFFSET ( 0x000004ecU )
#define JESD_TX_GLUE_TSB_DEPTH12_OFFSET ( 0x000004f0U )
#define JESD_TX_GLUE_TSB_DEPTH13_OFFSET ( 0x000004f4U )
#define JESD_TX_GLUE_TSB_DEPTH14_OFFSET ( 0x000004f8U )
#define JESD_TX_GLUE_TSB_DEPTH15_OFFSET ( 0x000004fcU )
#define JESD_TX_GLUE_SP_MON_CAP_REG00_OFFSET ( 0x00000500U )
#define JESD_TX_GLUE_SP_MON_CAP_REG01_OFFSET ( 0x00000504U )
#define JESD_TX_GLUE_SP_MON_CAP_REG02_OFFSET ( 0x00000508U )
#define JESD_TX_GLUE_SP_MON_CAP_REG03_OFFSET ( 0x0000050cU )
#define JESD_TX_GLUE_SP_MON_CAP_REG10_OFFSET ( 0x00000510U )
#define JESD_TX_GLUE_SP_MON_CAP_REG11_OFFSET ( 0x00000514U )
#define JESD_TX_GLUE_SP_MON_CAP_REG12_OFFSET ( 0x00000518U )
#define JESD_TX_GLUE_SP_MON_CAP_REG13_OFFSET ( 0x0000051cU )
#define JESD_TX_GLUE_SP_MON_CAP_REG20_OFFSET ( 0x00000520U )
#define JESD_TX_GLUE_SP_MON_CAP_REG21_OFFSET ( 0x00000524U )
#define JESD_TX_GLUE_SP_MON_CAP_REG22_OFFSET ( 0x00000528U )
#define JESD_TX_GLUE_SP_MON_CAP_REG23_OFFSET ( 0x0000052cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA0_OFFSET ( 0x00000800U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA1_OFFSET ( 0x00000804U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA2_OFFSET ( 0x00000808U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA3_OFFSET ( 0x0000080cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA4_OFFSET ( 0x00000810U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA5_OFFSET ( 0x00000814U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA6_OFFSET ( 0x00000818U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA7_OFFSET ( 0x0000081cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA8_OFFSET ( 0x00000820U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA9_OFFSET ( 0x00000824U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA10_OFFSET ( 0x00000828U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA11_OFFSET ( 0x0000082cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA12_OFFSET ( 0x00000830U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA13_OFFSET ( 0x00000834U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA14_OFFSET ( 0x00000838U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA15_OFFSET ( 0x0000083cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA16_OFFSET ( 0x00000840U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA17_OFFSET ( 0x00000844U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA18_OFFSET ( 0x00000848U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA19_OFFSET ( 0x0000084cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA20_OFFSET ( 0x00000850U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA21_OFFSET ( 0x00000854U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA22_OFFSET ( 0x00000858U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA23_OFFSET ( 0x0000085cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA24_OFFSET ( 0x00000860U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA25_OFFSET ( 0x00000864U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA26_OFFSET ( 0x00000868U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA27_OFFSET ( 0x0000086cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA28_OFFSET ( 0x00000870U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA29_OFFSET ( 0x00000874U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA30_OFFSET ( 0x00000878U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA31_OFFSET ( 0x0000087cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA32_OFFSET ( 0x00000880U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA33_OFFSET ( 0x00000884U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA34_OFFSET ( 0x00000888U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA35_OFFSET ( 0x0000088cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA36_OFFSET ( 0x00000890U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA37_OFFSET ( 0x00000894U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA38_OFFSET ( 0x00000898U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA39_OFFSET ( 0x0000089cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA40_OFFSET ( 0x000008a0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA41_OFFSET ( 0x000008a4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA42_OFFSET ( 0x000008a8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA43_OFFSET ( 0x000008acU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA44_OFFSET ( 0x000008b0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA45_OFFSET ( 0x000008b4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA46_OFFSET ( 0x000008b8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA47_OFFSET ( 0x000008bcU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA48_OFFSET ( 0x000008c0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA49_OFFSET ( 0x000008c4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA50_OFFSET ( 0x000008c8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA51_OFFSET ( 0x000008ccU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA52_OFFSET ( 0x000008d0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA53_OFFSET ( 0x000008d4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA54_OFFSET ( 0x000008d8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA55_OFFSET ( 0x000008dcU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA56_OFFSET ( 0x000008e0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA57_OFFSET ( 0x000008e4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA58_OFFSET ( 0x000008e8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA59_OFFSET ( 0x000008ecU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA60_OFFSET ( 0x000008f0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA61_OFFSET ( 0x000008f4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA62_OFFSET ( 0x000008f8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA63_OFFSET ( 0x000008fcU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA64_OFFSET ( 0x00000900U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA65_OFFSET ( 0x00000904U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA66_OFFSET ( 0x00000908U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA67_OFFSET ( 0x0000090cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA68_OFFSET ( 0x00000910U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA69_OFFSET ( 0x00000914U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA70_OFFSET ( 0x00000918U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA71_OFFSET ( 0x0000091cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA72_OFFSET ( 0x00000920U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA73_OFFSET ( 0x00000924U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA74_OFFSET ( 0x00000928U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA75_OFFSET ( 0x0000092cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA76_OFFSET ( 0x00000930U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA77_OFFSET ( 0x00000934U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA78_OFFSET ( 0x00000938U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA79_OFFSET ( 0x0000093cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA80_OFFSET ( 0x00000940U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA81_OFFSET ( 0x00000944U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA82_OFFSET ( 0x00000948U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA83_OFFSET ( 0x0000094cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA84_OFFSET ( 0x00000950U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA85_OFFSET ( 0x00000954U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA86_OFFSET ( 0x00000958U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA87_OFFSET ( 0x0000095cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA88_OFFSET ( 0x00000960U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA89_OFFSET ( 0x00000964U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA90_OFFSET ( 0x00000968U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA91_OFFSET ( 0x0000096cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA92_OFFSET ( 0x00000970U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA93_OFFSET ( 0x00000974U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA94_OFFSET ( 0x00000978U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA95_OFFSET ( 0x0000097cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA96_OFFSET ( 0x00000980U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA97_OFFSET ( 0x00000984U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA98_OFFSET ( 0x00000988U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA99_OFFSET ( 0x0000098cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA100_OFFSET ( 0x00000990U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA101_OFFSET ( 0x00000994U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA102_OFFSET ( 0x00000998U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA103_OFFSET ( 0x0000099cU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA104_OFFSET ( 0x000009a0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA105_OFFSET ( 0x000009a4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA106_OFFSET ( 0x000009a8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA107_OFFSET ( 0x000009acU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA108_OFFSET ( 0x000009b0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA109_OFFSET ( 0x000009b4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA110_OFFSET ( 0x000009b8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA111_OFFSET ( 0x000009bcU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA112_OFFSET ( 0x000009c0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA113_OFFSET ( 0x000009c4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA114_OFFSET ( 0x000009c8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA115_OFFSET ( 0x000009ccU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA116_OFFSET ( 0x000009d0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA117_OFFSET ( 0x000009d4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA118_OFFSET ( 0x000009d8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA119_OFFSET ( 0x000009dcU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA120_OFFSET ( 0x000009e0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA121_OFFSET ( 0x000009e4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA122_OFFSET ( 0x000009e8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA123_OFFSET ( 0x000009ecU )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA124_OFFSET ( 0x000009f0U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA125_OFFSET ( 0x000009f4U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA126_OFFSET ( 0x000009f8U )
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA127_OFFSET ( 0x000009fcU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA0_OFFSET ( 0x00000a00U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA1_OFFSET ( 0x00000a04U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA2_OFFSET ( 0x00000a08U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA3_OFFSET ( 0x00000a0cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA4_OFFSET ( 0x00000a10U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA5_OFFSET ( 0x00000a14U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA6_OFFSET ( 0x00000a18U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA7_OFFSET ( 0x00000a1cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA8_OFFSET ( 0x00000a20U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA9_OFFSET ( 0x00000a24U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA10_OFFSET ( 0x00000a28U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA11_OFFSET ( 0x00000a2cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA12_OFFSET ( 0x00000a30U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA13_OFFSET ( 0x00000a34U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA14_OFFSET ( 0x00000a38U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA15_OFFSET ( 0x00000a3cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA16_OFFSET ( 0x00000a40U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA17_OFFSET ( 0x00000a44U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA18_OFFSET ( 0x00000a48U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA19_OFFSET ( 0x00000a4cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA20_OFFSET ( 0x00000a50U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA21_OFFSET ( 0x00000a54U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA22_OFFSET ( 0x00000a58U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA23_OFFSET ( 0x00000a5cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA24_OFFSET ( 0x00000a60U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA25_OFFSET ( 0x00000a64U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA26_OFFSET ( 0x00000a68U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA27_OFFSET ( 0x00000a6cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA28_OFFSET ( 0x00000a70U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA29_OFFSET ( 0x00000a74U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA30_OFFSET ( 0x00000a78U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA31_OFFSET ( 0x00000a7cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA32_OFFSET ( 0x00000a80U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA33_OFFSET ( 0x00000a84U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA34_OFFSET ( 0x00000a88U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA35_OFFSET ( 0x00000a8cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA36_OFFSET ( 0x00000a90U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA37_OFFSET ( 0x00000a94U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA38_OFFSET ( 0x00000a98U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA39_OFFSET ( 0x00000a9cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA40_OFFSET ( 0x00000aa0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA41_OFFSET ( 0x00000aa4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA42_OFFSET ( 0x00000aa8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA43_OFFSET ( 0x00000aacU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA44_OFFSET ( 0x00000ab0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA45_OFFSET ( 0x00000ab4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA46_OFFSET ( 0x00000ab8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA47_OFFSET ( 0x00000abcU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA48_OFFSET ( 0x00000ac0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA49_OFFSET ( 0x00000ac4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA50_OFFSET ( 0x00000ac8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA51_OFFSET ( 0x00000accU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA52_OFFSET ( 0x00000ad0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA53_OFFSET ( 0x00000ad4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA54_OFFSET ( 0x00000ad8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA55_OFFSET ( 0x00000adcU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA56_OFFSET ( 0x00000ae0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA57_OFFSET ( 0x00000ae4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA58_OFFSET ( 0x00000ae8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA59_OFFSET ( 0x00000aecU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA60_OFFSET ( 0x00000af0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA61_OFFSET ( 0x00000af4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA62_OFFSET ( 0x00000af8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA63_OFFSET ( 0x00000afcU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA64_OFFSET ( 0x00000b00U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA65_OFFSET ( 0x00000b04U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA66_OFFSET ( 0x00000b08U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA67_OFFSET ( 0x00000b0cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA68_OFFSET ( 0x00000b10U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA69_OFFSET ( 0x00000b14U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA70_OFFSET ( 0x00000b18U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA71_OFFSET ( 0x00000b1cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA72_OFFSET ( 0x00000b20U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA73_OFFSET ( 0x00000b24U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA74_OFFSET ( 0x00000b28U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA75_OFFSET ( 0x00000b2cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA76_OFFSET ( 0x00000b30U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA77_OFFSET ( 0x00000b34U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA78_OFFSET ( 0x00000b38U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA79_OFFSET ( 0x00000b3cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA80_OFFSET ( 0x00000b40U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA81_OFFSET ( 0x00000b44U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA82_OFFSET ( 0x00000b48U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA83_OFFSET ( 0x00000b4cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA84_OFFSET ( 0x00000b50U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA85_OFFSET ( 0x00000b54U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA86_OFFSET ( 0x00000b58U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA87_OFFSET ( 0x00000b5cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA88_OFFSET ( 0x00000b60U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA89_OFFSET ( 0x00000b64U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA90_OFFSET ( 0x00000b68U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA91_OFFSET ( 0x00000b6cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA92_OFFSET ( 0x00000b70U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA93_OFFSET ( 0x00000b74U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA94_OFFSET ( 0x00000b78U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA95_OFFSET ( 0x00000b7cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA96_OFFSET ( 0x00000b80U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA97_OFFSET ( 0x00000b84U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA98_OFFSET ( 0x00000b88U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA99_OFFSET ( 0x00000b8cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA100_OFFSET ( 0x00000b90U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA101_OFFSET ( 0x00000b94U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA102_OFFSET ( 0x00000b98U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA103_OFFSET ( 0x00000b9cU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA104_OFFSET ( 0x00000ba0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA105_OFFSET ( 0x00000ba4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA106_OFFSET ( 0x00000ba8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA107_OFFSET ( 0x00000bacU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA108_OFFSET ( 0x00000bb0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA109_OFFSET ( 0x00000bb4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA110_OFFSET ( 0x00000bb8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA111_OFFSET ( 0x00000bbcU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA112_OFFSET ( 0x00000bc0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA113_OFFSET ( 0x00000bc4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA114_OFFSET ( 0x00000bc8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA115_OFFSET ( 0x00000bccU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA116_OFFSET ( 0x00000bd0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA117_OFFSET ( 0x00000bd4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA118_OFFSET ( 0x00000bd8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA119_OFFSET ( 0x00000bdcU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA120_OFFSET ( 0x00000be0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA121_OFFSET ( 0x00000be4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA122_OFFSET ( 0x00000be8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA123_OFFSET ( 0x00000becU )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA124_OFFSET ( 0x00000bf0U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA125_OFFSET ( 0x00000bf4U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA126_OFFSET ( 0x00000bf8U )
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA127_OFFSET ( 0x00000bfcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define JESD_TX_GLUE_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SCRATCH_OFFSET ) ))
#define JESD_TX_GLUE_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_BRDG_STAT_OFFSET ) ))
#define JESD_TX_GLUE_STRM_INST_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_INST_CNT_OFFSET ) ))
#define JESD_TX_GLUE_CONV_DP_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_DP_CFG_OFFSET ) ))
#define JESD_TX_GLUE_FB_CONV_DP_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_FB_CONV_DP_CFG_OFFSET ) ))
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_DATAPATH_GATE_SEL_OFFSET ) ))
#define JESD_TX_GLUE_PHM_FRAME_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_PHM_FRAME_CFG_OFFSET ) ))
#define JESD_TX_GLUE_FOVR_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_FOVR_CFG_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_EN_OFFSET ) ))
#define JESD_TX_GLUE_STRM_FOVR_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_FOVR_EN_OFFSET ) ))
#define JESD_TX_GLUE_DATA_SRC_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_DATA_SRC_EN_OFFSET ) ))
#define JESD_TX_GLUE_CAP_FRZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CAP_FRZ_EN_OFFSET ) ))
#define JESD_TX_GLUE_APB_RADDR_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RADDR_OFFSET ) ))
#define JESD_TX_GLUE_APB_RD_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RD_OFFSET ) ))
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_FB_EN_EVENT_DLY_OFFSET ) ))
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_OFFSET ) ))
#define JESD_TX_GLUE_TSB_EMPTY_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_EMPTY_STAT_OFFSET ) ))
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_UNDERFLOW_STAT_OFFSET ) ))
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_OFFSET ) ))
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_OFFSET ) ))
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_OFFSET ) ))
#define JESD_TX_GLUE_TSB_RD_TRIG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_RD_TRIG_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_OFFSET ) ))
#define JESD_TX_GLUE_PHM_SHIFT_NUM_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_PHM_SHIFT_NUM_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_ERR_STS_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_ALM_EN_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_ERR_CLR_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_ERR_FRC_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_FLIT_CNT_OFFSET ) ))
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_OFFSET ) ))
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_OFFSET ) ))
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SRG_PAT_CFG_LOW_OFFSET ) ))
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SRG_PAT_CFG_HIGH_OFFSET ) ))
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SRG_PAT_DEL_CFG_OFFSET ) ))
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_OFFSET ) ))
#define JESD_TX_GLUE_SRG_PAT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SRG_PAT_EN_OFFSET ) ))
#define JESD_TX_GLUE_ECC_CHK_DIS_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_CHK_DIS_OFFSET ) ))
#define JESD_TX_GLUE_ECC_FORCE_ERR_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_FORCE_ERR_OFFSET ) ))
#define JESD_TX_GLUE_ECC_FORCE_TYPE_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_FORCE_TYPE_OFFSET ) ))
#define JESD_TX_GLUE_ECC_STAT_CLR_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_STAT_CLR_OFFSET ) ))
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_VLD_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_VLD_OFFSET ) ))
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_OFFSET ) ))
#define JESD_TX_GLUE_FB_MODE_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_FB_MODE_CTRL_OFFSET ) ))
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_OFFSET ) ))
#define JESD_TX_GLUE_SHIFT_CAP_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SHIFT_CAP_STAT_OFFSET ) ))
#define JESD_TX_GLUE_SHIFT_CAP_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SHIFT_CAP_EN_OFFSET ) ))
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR0_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR1_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR2_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR3_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR4_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR5_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR6_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR7_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR8_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR9_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR10_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR11_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR12_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR13_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR14_OFFSET ) ))
#define JESD_TX_GLUE_STRM_RD_PTR15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_RD_PTR15_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP0_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP1_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP2_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP3_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP4_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP5_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP6_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP7_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP8_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP9_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP10_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP11_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP12_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP13_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP14_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FOVR_MAP15_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS0_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS1_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS2_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS3_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS4_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS5_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS6_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS7_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS8_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS9_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS10_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS11_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS12_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS13_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS14_OFFSET ) ))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_STRM_PHM_FIFO_STS15_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA0_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA1_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA2_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA3_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA4_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA5_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA6_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA7_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA8_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA9_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA10_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA11_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA12_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA13_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA14_OFFSET ) ))
#define JESD_TX_GLUE_APB_RDATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_APB_RDATA15_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH0_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH1_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM0_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM1_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER0_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER1_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG00_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG00_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG01_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG01_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG02_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG02_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG03_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG03_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG10_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG11_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG12_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG13_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG20_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG20_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG21_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG21_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG22_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG22_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG23_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG23_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG30_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG30_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG31_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG31_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG32_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG32_OFFSET ) ))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG33_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG33_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT0_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT1_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT2_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT3_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT4_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT5_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT6_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT7_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT8_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT9_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT10_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT11_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT12_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT13_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT14_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B0_ERR_STAT15_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT0_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT1_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT2_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT3_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT4_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT5_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT6_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT7_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT8_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT9_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT10_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT11_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT12_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT13_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT14_OFFSET ) ))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_ECC_B1_ERR_STAT15_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY0_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY1_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY2_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY3_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY4_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY5_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY6_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY7_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY8_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY9_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY10_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY11_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY12_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY13_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY14_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MIN_OCCUPANCY15_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY0_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY1_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY2_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY3_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY4_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY5_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY6_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY7_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY8_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY9_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY10_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY11_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY12_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY13_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY14_OFFSET ) ))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_MAX_OCCUPANCY15_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG0_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG1_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG2_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG3_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG4_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG5_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG6_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG7_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG8_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG9_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG10_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG11_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG12_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG13_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG14_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG15_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH0_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH1_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH2_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH3_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH4_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH5_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH6_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH7_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH8_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH9_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH10_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH11_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH12_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH13_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH14_OFFSET ) ))
#define JESD_TX_GLUE_TSB_DEPTH15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_TSB_DEPTH15_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG00_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG00_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG01_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG01_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG02_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG02_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG03_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG03_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG10_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG11_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG12_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG13_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG20_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG20_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG21_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG21_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG22_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG22_OFFSET ) ))
#define JESD_TX_GLUE_SP_MON_CAP_REG23_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_SP_MON_CAP_REG23_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA0_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA1_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA2_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA3_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA4_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA5_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA6_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA7_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA8_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA9_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA10_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA11_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA12_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA13_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA14_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA15_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA16_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA16_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA17_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA17_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA18_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA18_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA19_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA19_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA20_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA20_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA21_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA21_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA22_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA22_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA23_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA23_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA24_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA24_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA25_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA25_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA26_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA26_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA27_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA27_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA28_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA28_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA29_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA29_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA30_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA30_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA31_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA31_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA32_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA32_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA33_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA33_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA34_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA34_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA35_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA35_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA36_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA36_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA37_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA37_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA38_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA38_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA39_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA39_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA40_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA40_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA41_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA41_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA42_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA42_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA43_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA43_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA44_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA44_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA45_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA45_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA46_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA46_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA47_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA47_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA48_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA48_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA49_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA49_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA50_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA50_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA51_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA51_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA52_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA52_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA53_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA53_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA54_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA54_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA55_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA55_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA56_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA56_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA57_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA57_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA58_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA58_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA59_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA59_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA60_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA60_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA61_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA61_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA62_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA62_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA63_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA63_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA64_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA64_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA65_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA65_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA66_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA66_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA67_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA67_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA68_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA68_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA69_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA69_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA70_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA70_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA71_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA71_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA72_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA72_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA73_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA73_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA74_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA74_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA75_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA75_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA76_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA76_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA77_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA77_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA78_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA78_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA79_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA79_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA80_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA80_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA81_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA81_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA82_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA82_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA83_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA83_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA84_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA84_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA85_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA85_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA86_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA86_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA87_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA87_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA88_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA88_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA89_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA89_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA90_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA90_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA91_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA91_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA92_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA92_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA93_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA93_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA94_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA94_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA95_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA95_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA96_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA96_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA97_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA97_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA98_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA98_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA99_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA99_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA100_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA100_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA101_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA101_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA102_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA102_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA103_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA103_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA104_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA104_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA105_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA105_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA106_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA106_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA107_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA107_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA108_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA108_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA109_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA109_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA110_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA110_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA111_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA111_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA112_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA112_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA113_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA113_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA114_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA114_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA115_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA115_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA116_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA116_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA117_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA117_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA118_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA118_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA119_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA119_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA120_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA120_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA121_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA121_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA122_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA122_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA123_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA123_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA124_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA124_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA125_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA125_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA126_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA126_OFFSET ) ))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA127_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_CONV_SMPL_INIT_DATA127_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA0_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA1_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA2_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA3_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA4_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA5_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA6_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA7_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA8_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA9_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA10_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA11_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA12_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA13_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA14_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA15_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA16_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA16_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA17_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA17_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA18_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA18_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA19_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA19_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA20_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA20_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA21_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA21_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA22_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA22_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA23_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA23_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA24_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA24_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA25_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA25_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA26_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA26_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA27_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA27_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA28_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA28_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA29_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA29_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA30_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA30_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA31_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA31_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA32_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA32_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA33_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA33_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA34_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA34_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA35_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA35_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA36_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA36_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA37_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA37_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA38_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA38_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA39_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA39_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA40_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA40_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA41_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA41_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA42_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA42_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA43_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA43_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA44_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA44_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA45_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA45_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA46_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA46_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA47_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA47_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA48_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA48_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA49_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA49_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA50_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA50_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA51_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA51_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA52_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA52_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA53_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA53_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA54_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA54_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA55_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA55_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA56_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA56_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA57_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA57_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA58_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA58_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA59_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA59_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA60_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA60_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA61_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA61_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA62_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA62_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA63_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA63_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA64_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA64_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA65_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA65_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA66_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA66_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA67_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA67_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA68_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA68_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA69_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA69_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA70_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA70_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA71_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA71_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA72_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA72_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA73_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA73_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA74_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA74_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA75_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA75_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA76_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA76_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA77_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA77_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA78_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA78_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA79_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA79_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA80_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA80_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA81_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA81_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA82_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA82_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA83_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA83_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA84_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA84_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA85_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA85_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA86_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA86_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA87_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA87_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA88_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA88_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA89_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA89_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA90_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA90_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA91_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA91_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA92_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA92_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA93_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA93_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA94_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA94_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA95_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA95_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA96_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA96_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA97_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA97_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA98_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA98_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA99_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA99_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA100_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA100_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA101_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA101_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA102_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA102_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA103_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA103_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA104_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA104_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA105_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA105_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA106_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA106_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA107_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA107_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA108_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA108_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA109_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA109_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA110_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA110_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA111_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA111_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA112_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA112_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA113_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA113_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA114_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA114_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA115_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA115_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA116_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA116_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA117_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA117_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA118_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA118_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA119_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA119_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA120_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA120_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA121_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA121_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA122_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA122_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA123_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA123_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA124_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA124_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA125_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA125_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA126_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA126_OFFSET ) ))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA127_ADR(_BASE) (( ( _BASE ) + ( JESD_TX_GLUE_IP_SMPL_INTF_DATA127_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_scratch_reg_t;

#define JESD_TX_GLUE_SCRATCH_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SCRATCH_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESD_TX_GLUE_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESD_TX_GLUE_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESD_TX_GLUE_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_apb_brdg_stat_reg_t;

#define JESD_TX_GLUE_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define JESD_TX_GLUE_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define JESD_TX_GLUE_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define JESD_TX_GLUE_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define JESD_TX_GLUE_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define JESD_TX_GLUE_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESD_TX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define JESD_TX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define JESD_TX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESD_TX_GLUE_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESD_TX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define JESD_TX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define JESD_TX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define JESD_TX_GLUE_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESD_TX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define JESD_TX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define JESD_TX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define JESD_TX_GLUE_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define JESD_TX_GLUE_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_MEM_INST_CNT register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_MEM_INST_CNT
  * TX stream memory instance count register
  */

typedef union {
  struct {
    uint32_t STRM_MEM_INST_UL : 6;
    ///< Specifies the number of 4 KB memory blocks mapped to each stream.
    ///< The value should be one hot encoded as shown below.
    ///< 5'b00001   = 1  memory block.
    ///< 5'b00010   = 2  memory blocks.
    ///< 5'b00100   = 4  memory blocks.
    ///< 5'b01000   = 8  memory blocks             5'b10000   = 16 memory blocks.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t STRM_MEM_INST_FB : 6;
    ///< Specifies the number of 4 KB memory blocks mapped to each stream.
    ///< The value should be one hot encoded as shown below. valid only when
    ///< usecase is with feedback
    ///< 5'b00001   = 1  memory block.
    ///< 5'b00010   = 2  memory blocks.
    ///< 5'b00100   = 4  memory blocks.
    ///< 5'b01000   = 8  memory blocks             5'b10000   = 16 memory blocks.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_inst_cnt_reg_t;

#define JESD_TX_GLUE_STRM_INST_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_INST_CNT_RD_MASK (0x00000fffU)
#define JESD_TX_GLUE_STRM_INST_CNT_WR_MASK (0x00000fffU)


///< Specifies the number of 4 KB memory blocks mapped to each stream.
///< The value should be one hot encoded as shown below.
///< 5'b00001   = 1  memory block.
///< 5'b00010   = 2  memory blocks.
///< 5'b00100   = 4  memory blocks.
///< 5'b01000   = 8  memory blocks             5'b10000   = 16 memory blocks.
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_UL_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_UL_BF_WID ( 6)
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_UL_BF_MSK (0x0000003F)
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_UL_BF_DEF (0x00000000)

///< Specifies the number of 4 KB memory blocks mapped to each stream.
///< The value should be one hot encoded as shown below. valid only when
///< usecase is with feedback
///< 5'b00001   = 1  memory block.
///< 5'b00010   = 2  memory blocks.
///< 5'b00100   = 4  memory blocks.
///< 5'b01000   = 8  memory blocks             5'b10000   = 16 memory blocks.
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_FB_BF_OFF ( 6)
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_FB_BF_WID ( 6)
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_FB_BF_MSK (0x00000FC0)
#define JESD_TX_GLUE_STRM_INST_CNT_STRM_INST_FB_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_CONV_DP_CFG register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_CONV_DP_CFG
  * TX Converter datapath configuration register
  */

typedef union {
  struct {
    uint32_t TX_SONI_UL : 3;
    ///< Defines number of sample transfered to IP in single sample clock cycle.
    ///< The valid values are as below.
    ///< 3'b000= soni 1       3'b001= soni 2       3'b010= soni 4       3'b011=
    ///< soni 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SMPL_SHIFT_SIZE_UL : 5;
    ///< Number of sample cycles taken to transfer 16 16-bit x samples per
    ///< converter to IP at the specified SONIhould be one hot encoded.
    ///< smpl_shift_size == 256/(16*tx_soni)
    ///< TBD for 12 bit mode
    ///< 5'b00001  = 1 shifts
    ///< 5'b00010  = 2  shifts
    ///< 5'b00100  = 4  shifts
    ///< 5'b01000  = 8  shifts
    ///< 5'b10000  = 16  shifts
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SMPL_WIDTH_UL : 1;
    ///< Convereter Data sample width.
    ///< 1- 16-bit samples
    ///< 0- 12-bit samples.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_conv_dp_cfg_reg_t;

#define JESD_TX_GLUE_CONV_DP_CFG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_CONV_DP_CFG_RD_MASK (0x000001ffU)
#define JESD_TX_GLUE_CONV_DP_CFG_WR_MASK (0x000001ffU)


///< Defines number of sample transfered to IP in single sample clock cycle.
///< The valid values are as below.
///< 3'b000= soni 1       3'b001= soni 2       3'b010= soni 4       3'b011=
///< soni 8
#define JESD_TX_GLUE_CONV_DP_CFG_TX_SONI_UL_BF_OFF ( 0)
#define JESD_TX_GLUE_CONV_DP_CFG_TX_SONI_UL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_DP_CFG_TX_SONI_UL_BF_MSK (0x00000007)
#define JESD_TX_GLUE_CONV_DP_CFG_TX_SONI_UL_BF_DEF (0x00000000)

///< Number of sample cycles taken to transfer 16 16-bit x samples per
///< converter to IP at the specified SONIhould be one hot encoded.
///< smpl_shift_size == 256/(16*tx_soni)
///< TBD for 12 bit mode
///< 5'b00001  = 1 shifts
///< 5'b00010  = 2  shifts
///< 5'b00100  = 4  shifts
///< 5'b01000  = 8  shifts
///< 5'b10000  = 16  shifts
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_SHIFT_SIZE_UL_BF_OFF ( 3)
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_SHIFT_SIZE_UL_BF_WID ( 5)
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_SHIFT_SIZE_UL_BF_MSK (0x000000F8)
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_SHIFT_SIZE_UL_BF_DEF (0x00000000)

///< Convereter Data sample width.
///< 1- 16-bit samples
///< 0- 12-bit samples.
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_WIDTH_UL_BF_OFF ( 8)
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_WIDTH_UL_BF_WID ( 1)
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_WIDTH_UL_BF_MSK (0x00000100)
#define JESD_TX_GLUE_CONV_DP_CFG_SMPL_WIDTH_UL_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_FB_CONV_DP_CFG register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_FB_CONV_DP_CFG
  * TX Converter datapath configuration register
  */

typedef union {
  struct {
    uint32_t TX_SONI_FB : 3;
    ///< Defines number of sample transfered to IP in single sample clock cycle.
    ///< The valid values are as below.
    ///< 3'b000= soni 1       3'b001= soni 2       3'b010= soni 4       3'b011=
    ///< soni 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SMPL_SHIFT_SIZE_FB : 5;
    ///< Number of sample cycles taken to transfer 16 16-bit x samples per
    ///< converter to IP at the specified SONIhould be one hot encoded.
    ///< smpl_shift_size == 256/(16*tx_soni)
    ///< TBD for 12 bit mode
    ///< 5'b00001  = 1 shifts
    ///< 5'b00010  = 2  shifts
    ///< 5'b00100  = 4  shifts
    ///< 5'b01000  = 8  shifts
    ///< 5'b10000  = 16  shifts
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SMPL_WIDTH_FB : 1;
    ///< Convereter Data sample width.
    ///< 1- 16-bit samples
    ///< 0- 12-bit samples.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_fb_conv_dp_cfg_reg_t;

#define JESD_TX_GLUE_FB_CONV_DP_CFG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_RD_MASK (0x000001ffU)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_WR_MASK (0x000001ffU)


///< Defines number of sample transfered to IP in single sample clock cycle.
///< The valid values are as below.
///< 3'b000= soni 1       3'b001= soni 2       3'b010= soni 4       3'b011=
///< soni 8
#define JESD_TX_GLUE_FB_CONV_DP_CFG_TX_SONI_FB_BF_OFF ( 0)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_TX_SONI_FB_BF_WID ( 3)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_TX_SONI_FB_BF_MSK (0x00000007)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_TX_SONI_FB_BF_DEF (0x00000000)

///< Number of sample cycles taken to transfer 16 16-bit x samples per
///< converter to IP at the specified SONIhould be one hot encoded.
///< smpl_shift_size == 256/(16*tx_soni)
///< TBD for 12 bit mode
///< 5'b00001  = 1 shifts
///< 5'b00010  = 2  shifts
///< 5'b00100  = 4  shifts
///< 5'b01000  = 8  shifts
///< 5'b10000  = 16  shifts
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_SHIFT_SIZE_FB_BF_OFF ( 3)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_SHIFT_SIZE_FB_BF_WID ( 5)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_SHIFT_SIZE_FB_BF_MSK (0x000000F8)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_SHIFT_SIZE_FB_BF_DEF (0x00000000)

///< Convereter Data sample width.
///< 1- 16-bit samples
///< 0- 12-bit samples.
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_WIDTH_FB_BF_OFF ( 8)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_WIDTH_FB_BF_WID ( 1)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_WIDTH_FB_BF_MSK (0x00000100)
#define JESD_TX_GLUE_FB_CONV_DP_CFG_SMPL_WIDTH_FB_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_DATAPATH_GATE_SEL register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_DATAPATH_GATE_SEL
  * TX Datapath Gating logic parameters
  */

typedef union {
  struct {
    uint32_t TX_START_TRIG0_SEL : 2;
    ///< This selects the trigger to read TSB buffers.
    ///< 2'b00: ANT_RX_START
    ///< 2'b01: TSB Fill level based trigger
    ///< 2'b10: BFN Trigger 0        2'b11: Software Trigger // To be added
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TX_START_TRIG1_SEL : 2;
    ///< Selects the datapath switch over from fixed data pattern to TSB output
    ///< data.                                                  2'b00: START
    ///< TRIG0 Delayed by programmable Sample Clocks.       2'b01: BFN Trigger
    ///< 1.       2'b10: Always enabled for TSB data       2'b11: SoftWare
    ///< Trigger
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_datapath_gate_sel_reg_t;

#define JESD_TX_GLUE_DATAPATH_GATE_SEL_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_RD_MASK (0x0000000fU)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_WR_MASK (0x0000000fU)


///< This selects the trigger to read TSB buffers.
///< 2'b00: ANT_RX_START
///< 2'b01: TSB Fill level based trigger
///< 2'b10: BFN Trigger 0        2'b11: Software Trigger // To be added
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG0_SEL_BF_OFF ( 0)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG0_SEL_BF_WID ( 2)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG0_SEL_BF_MSK (0x00000003)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG0_SEL_BF_DEF (0x00000000)

///< Selects the datapath switch over from fixed data pattern to TSB output
///< data.                                                  2'b00: START
///< TRIG0 Delayed by programmable Sample Clocks.       2'b01: BFN Trigger
///< 1.       2'b10: Always enabled for TSB data       2'b11: SoftWare
///< Trigger
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG1_SEL_BF_OFF ( 2)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG1_SEL_BF_WID ( 2)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG1_SEL_BF_MSK (0x0000000C)
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_TX_START_TRIG1_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_PHM_FRAME_CFG register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_PHM_FRAME_CFG
  * PHM frame configuration register
  */

typedef union {
  struct {
    uint32_t PHM_IDENTIFIER : 8;
    ///< 8 bit identifier value  in PHM Frame.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PHM_FRAME_START_BIT : 1;
    ///< start bit vlaue in phm frame
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PHM_FRAME_STOP_BIT : 1;
    ///< stop bit vlaue in phm frame
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t PHM_FRAME_IDLE_BIT : 1;
    ///< idle bit vlaue in phm frame
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t PHM_DATA_BIT_ORDER : 1;
    ///< bit indicates how 16 bit phm payload is shifted jesd CS interface
    ///< 0- 15th bit (MSB) first      1- 0th bit (LSB) first
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_phm_frame_cfg_reg_t;

#define JESD_TX_GLUE_PHM_FRAME_CFG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_PHM_FRAME_CFG_RD_MASK (0x00000fffU)
#define JESD_TX_GLUE_PHM_FRAME_CFG_WR_MASK (0x00000fffU)


///< 8 bit identifier value  in PHM Frame.
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_IDENTIFIER_BF_OFF ( 0)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_IDENTIFIER_BF_WID ( 8)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_IDENTIFIER_BF_MSK (0x000000FF)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_IDENTIFIER_BF_DEF (0x00000000)

///< start bit vlaue in phm frame
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_START_BIT_BF_OFF ( 8)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_START_BIT_BF_WID ( 1)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_START_BIT_BF_MSK (0x00000100)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_START_BIT_BF_DEF (0x00000000)

///< stop bit vlaue in phm frame
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_STOP_BIT_BF_OFF ( 9)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_STOP_BIT_BF_WID ( 1)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_STOP_BIT_BF_MSK (0x00000200)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_STOP_BIT_BF_DEF (0x00000000)

///< idle bit vlaue in phm frame
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_IDLE_BIT_BF_OFF (10)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_IDLE_BIT_BF_WID ( 1)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_IDLE_BIT_BF_MSK (0x00000400)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_FRAME_IDLE_BIT_BF_DEF (0x00000000)

///< bit indicates how 16 bit phm payload is shifted jesd CS interface
///< 0- 15th bit (MSB) first      1- 0th bit (LSB) first
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_DATA_BIT_ORDER_BF_OFF (11)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_DATA_BIT_ORDER_BF_WID ( 1)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_DATA_BIT_ORDER_BF_MSK (0x00000800)
#define JESD_TX_GLUE_PHM_FRAME_CFG_PHM_DATA_BIT_ORDER_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_FOVR_CFG register description at address offset 0x24
  *
  * Register default value:        0x00000102
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_FOVR_CFG
  * FOVR PULSE width Configuration
  */

typedef union {
  struct {
    uint32_t FOVR_PULSE_EXTEND_CNT : 8;
    ///< This values specifies number of source cycles for which FOVR pulse
    ///< is extended before synchronising to Sample Clock. This to avoid missing
    ///< very fast FOVR pulses.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t FOVR_SAMPLE_CNT : 8;
    ///< Number of Samples for which Synchronised FOVR pulse is sent.The value
    ///< should be greater than or equal to 1.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_fovr_cfg_reg_t;

#define JESD_TX_GLUE_FOVR_CFG_DEFAULT (0x00000102U)
#define JESD_TX_GLUE_FOVR_CFG_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_FOVR_CFG_WR_MASK (0x0000ffffU)


///< This values specifies number of source cycles for which FOVR pulse
///< is extended before synchronising to Sample Clock. This to avoid missing
///< very fast FOVR pulses.
#define JESD_TX_GLUE_FOVR_CFG_FOVR_PULSE_EXTEND_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_FOVR_CFG_FOVR_PULSE_EXTEND_CNT_BF_WID ( 8)
#define JESD_TX_GLUE_FOVR_CFG_FOVR_PULSE_EXTEND_CNT_BF_MSK (0x000000FF)
#define JESD_TX_GLUE_FOVR_CFG_FOVR_PULSE_EXTEND_CNT_BF_DEF (0x00000002)

///< Number of Samples for which Synchronised FOVR pulse is sent.The value
///< should be greater than or equal to 1.
#define JESD_TX_GLUE_FOVR_CFG_FOVR_SAMPLE_CNT_BF_OFF ( 8)
#define JESD_TX_GLUE_FOVR_CFG_FOVR_SAMPLE_CNT_BF_WID ( 8)
#define JESD_TX_GLUE_FOVR_CFG_FOVR_SAMPLE_CNT_BF_MSK (0x0000FF00)
#define JESD_TX_GLUE_FOVR_CFG_FOVR_SAMPLE_CNT_BF_DEF (0x00000100)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_PHM_EN register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_PHM_EN
  * TX Stream PHM enable register
  */

typedef union {
  struct {
    uint32_t PHM_EN : 16;
    ///< Each bit indicates if PHM is enabled or disabled for stream.
    ///< Bit0 : 1- Stream0 PHM enabled.       Bit1 : 1- Stream1 PHM enabled.
    ///< and so on.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_phm_en_reg_t;

#define JESD_TX_GLUE_STRM_PHM_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_PHM_EN_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_STRM_PHM_EN_WR_MASK (0x0000ffffU)


///< Each bit indicates if PHM is enabled or disabled for stream.
///< Bit0 : 1- Stream0 PHM enabled.       Bit1 : 1- Stream1 PHM enabled.
///< and so on.
#define JESD_TX_GLUE_STRM_PHM_EN_PHM_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_PHM_EN_PHM_EN_BF_WID (16)
#define JESD_TX_GLUE_STRM_PHM_EN_PHM_EN_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_STRM_PHM_EN_PHM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_FOVR_EN register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_FOVR_EN
  * TX Stream FOVR enable register
  */

typedef union {
  struct {
    uint32_t FOVR_EN : 16;
    ///< Each bit indicates if FOVR is enabled or disabled for stream.
    ///< Bit0 : 1- Stream0 FOVR enabled.       Bit1 : 1- Stream1 FOVR enabled.
    ///< and so on.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_fovr_en_reg_t;

#define JESD_TX_GLUE_STRM_FOVR_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_FOVR_EN_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_STRM_FOVR_EN_WR_MASK (0x0000ffffU)


///< Each bit indicates if FOVR is enabled or disabled for stream.
///< Bit0 : 1- Stream0 FOVR enabled.       Bit1 : 1- Stream1 FOVR enabled.
///< and so on.
#define JESD_TX_GLUE_STRM_FOVR_EN_FOVR_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_FOVR_EN_FOVR_EN_BF_WID (16)
#define JESD_TX_GLUE_STRM_FOVR_EN_FOVR_EN_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_STRM_FOVR_EN_FOVR_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_DATA_SRC_EN register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_DATA_SRC_EN
  * TX TSB DATA SOURCE Mode Enable register
  */

typedef union {
  struct {
    uint32_t DATA_SRC : 1;
    ///< Enables TSB data source mode when set to 1. The TSB buffers are loaded
    ///< through APB and Data is repeatedly sent on the JESD interface in this
    ///< mode. The writes to TSB from crux interface is disabled in this mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_data_src_en_reg_t;

#define JESD_TX_GLUE_DATA_SRC_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_DATA_SRC_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_DATA_SRC_EN_WR_MASK (0x00000001U)


///< Enables TSB data source mode when set to 1. The TSB buffers are loaded
///< through APB and Data is repeatedly sent on the JESD interface in this
///< mode. The writes to TSB from crux interface is disabled in this mode.
#define JESD_TX_GLUE_DATA_SRC_EN_DATA_SRC_BF_OFF ( 0)
#define JESD_TX_GLUE_DATA_SRC_EN_DATA_SRC_BF_WID ( 1)
#define JESD_TX_GLUE_DATA_SRC_EN_DATA_SRC_BF_MSK (0x00000001)
#define JESD_TX_GLUE_DATA_SRC_EN_DATA_SRC_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_CAPTURE_FRZ_EN register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_CAPTURE_FRZ_EN
  * TX TSB CAPTURE FREEZE Mode Enable register
  */

typedef union {
  struct {
    uint32_t DATA_SRC : 1;
    ///< Enables TSB capture mode when set to 1. The TSB buffers capture data
    ///< from CRUX interface until they are full.TSB data can be accessed through
    ///< APB interface. The APB write to TSB and TSB to IP datapth are disabled
    ///< in this mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_cap_frz_en_reg_t;

#define JESD_TX_GLUE_CAP_FRZ_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_CAP_FRZ_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_CAP_FRZ_EN_WR_MASK (0x00000001U)


///< Enables TSB capture mode when set to 1. The TSB buffers capture data
///< from CRUX interface until they are full.TSB data can be accessed through
///< APB interface. The APB write to TSB and TSB to IP datapth are disabled
///< in this mode.
#define JESD_TX_GLUE_CAP_FRZ_EN_DATA_SRC_BF_OFF ( 0)
#define JESD_TX_GLUE_CAP_FRZ_EN_DATA_SRC_BF_WID ( 1)
#define JESD_TX_GLUE_CAP_FRZ_EN_DATA_SRC_BF_MSK (0x00000001)
#define JESD_TX_GLUE_CAP_FRZ_EN_DATA_SRC_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_APB_MEM_RADDR register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_APB_MEM_RADDR
  * TX TSB APB MEM Read Address
  */

typedef union {
  struct {
    uint32_t APB_MEM_RADDR : 6;
    ///< TX TSB APB MEM Read Address
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RD_BUFFER_SEL : 4;
    ///< inidactes the buffers selected to be written in data capture mode
    ///< only one buffer can be selected to read at once ,
    ///< 4'b0000  -  buffer 0 is selected
    ///< 4'b0001  - buffer 1 is selcted
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_apb_raddr_reg_t;

#define JESD_TX_GLUE_APB_RADDR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_APB_RADDR_RD_MASK (0x000003ffU)
#define JESD_TX_GLUE_APB_RADDR_WR_MASK (0x000003ffU)


///< TX TSB APB MEM Read Address
#define JESD_TX_GLUE_APB_RADDR_APB_RADDR_BF_OFF ( 0)
#define JESD_TX_GLUE_APB_RADDR_APB_RADDR_BF_WID ( 6)
#define JESD_TX_GLUE_APB_RADDR_APB_RADDR_BF_MSK (0x0000003F)
#define JESD_TX_GLUE_APB_RADDR_APB_RADDR_BF_DEF (0x00000000)

///< inidactes the buffers selected to be written in data capture mode
///< only one buffer can be selected to read at once ,
///< 4'b0000  -  buffer 0 is selected
///< 4'b0001  - buffer 1 is selcted
#define JESD_TX_GLUE_APB_RADDR_RD_BUFF_SEL_BF_OFF ( 6)
#define JESD_TX_GLUE_APB_RADDR_RD_BUFF_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_APB_RADDR_RD_BUFF_SEL_BF_MSK (0x000003C0)
#define JESD_TX_GLUE_APB_RADDR_RD_BUFF_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_APB_MEM_RD register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_APB_MEM_RD
  * TX TSB APB MEM READ register
  */

typedef union {
  struct {
    uint32_t TSB_RD : 1;
    ///< When written 1 triggers read to all enabled tsb buffers and captures
    ///< the 512 bit from read address location per TSB.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_apb_rd_reg_t;

#define JESD_TX_GLUE_APB_RD_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_APB_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_APB_RD_WR_MASK (0x00000001U)


///< When written 1 triggers read to all enabled tsb buffers and captures
///< the 512 bit from read address location per TSB.
#define JESD_TX_GLUE_APB_RD_TSB_RD_BF_OFF ( 0)
#define JESD_TX_GLUE_APB_RD_TSB_RD_BF_WID ( 1)
#define JESD_TX_GLUE_APB_RD_TSB_RD_BF_MSK (0x00000001)
#define JESD_TX_GLUE_APB_RD_TSB_RD_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_FB_EN_EVENT_DLY register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_FB_EN_EVENT_DLY
  * TX FB Enable event delay
  */

typedef union {
  struct {
    uint32_t RISE_DLY : 16;
    ///< The 16-bit value that delays rising edge of FB enable signal by programmed
    ///< value of TX IP sample clock.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DLY : 16;
    ///< The 16-bit value that delays falling edge of FB enable signal by programmed
    ///< value of TX IP sample clock.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_fb_en_event_dly_reg_t;

#define JESD_TX_GLUE_FB_EN_EVENT_DLY_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_WR_MASK (0xffffffffU)


///< The 16-bit value that delays rising edge of FB enable signal by programmed
///< value of TX IP sample clock.
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_RISE_DLY_BF_OFF ( 0)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_RISE_DLY_BF_WID (16)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_RISE_DLY_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_RISE_DLY_BF_DEF (0x00000000)

///< The 16-bit value that delays falling edge of FB enable signal by programmed
///< value of TX IP sample clock.
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_FALL_DLY_BF_OFF (16)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_FALL_DLY_BF_WID (16)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_FALL_DLY_BF_MSK (0xFFFF0000)
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_FALL_DLY_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_EMPTY_WATER_MARK register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_EMPTY_WATER_MARK
  * JESD TX  TSB buffers empty water mark
  */

typedef union {
  struct {
    uint32_t TX_BUF_EMPTY_WATER_MARK : 10;
    ///< Indicates the tsb buffer  empty water wark 64 byte aligned
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_empty_water_mark_reg_t;

#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_RD_MASK (0x000003ffU)
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_WR_MASK (0x000003ffU)


///< Indicates the tsb buffer  empty water wark 64 byte aligned
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_TX_BUF_EMPTY_WATER_MARK_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_TX_BUF_EMPTY_WATER_MARK_BF_WID (10)
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_TX_BUF_EMPTY_WATER_MARK_BF_MSK (0x000003FF)
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_TX_BUF_EMPTY_WATER_MARK_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_EMPTY_STATUS register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_EMPTY_STATUS
  * JESD TX TSB empty and almost empty  Status
  */

typedef union {
  struct {
    uint32_t TX_BUF_EMPTY : 16;
    ///< set if tsb buffers are empty , each bit corresponds to each stream
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t TX_BUF_ALMOST_EMPTY : 16;
    ///< set if tsb buffers are almost empty , each bit corresponds to each
    ///< stream
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_empty_stat_reg_t;

#define JESD_TX_GLUE_TSB_EMPTY_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_WR_MASK (0x00000000U)


///< set if tsb buffers are empty , each bit corresponds to each stream
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_EMPTY_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_EMPTY_BF_WID (16)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_EMPTY_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_EMPTY_BF_DEF (0x00000000)

///< set if tsb buffers are almost empty , each bit corresponds to each
///< stream
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_ALMOST_EMPTY_BF_OFF (16)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_ALMOST_EMPTY_BF_WID (16)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_ALMOST_EMPTY_BF_MSK (0xFFFF0000)
#define JESD_TX_GLUE_TSB_EMPTY_STAT_TX_BUF_ALMOST_EMPTY_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_UNDERFLOW_STATUS register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_UNDERFLOW_STATUS
  * JESD TX TSB underflow status
  */

typedef union {
  struct {
    uint32_t TX_BUF_UNDERFLOW : 16;
    ///< set for the tsb buffers underflow
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_underflow_stat_reg_t;

#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_WR_MASK (0x0000ffffU)


///< set for the tsb buffers underflow
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_TX_BUF_UNDERFLOW_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_TX_BUF_UNDERFLOW_BF_WID (16)
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_TX_BUF_UNDERFLOW_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_TX_BUF_UNDERFLOW_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ANTENNA_START_DELAY_CNT register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ANTENNA_START_DELAY_CNT
  * TX Antenna Start Delay Count
  */

typedef union {
  struct {
    uint32_t ANT_START_DLY_CNT : 32;
    ///< This register indicates the value to delay DIG RF antenna start trigger
    ///< before reading TSB.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_antenna_start_delay_cnt_reg_t;

#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_WR_MASK (0xffffffffU)


///< This register indicates the value to delay DIG RF antenna start trigger
///< before reading TSB.
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_ANT_START_DLY_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_ANT_START_DLY_CNT_BF_WID (32)
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_ANT_START_DLY_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_ANT_START_DLY_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_DP_START_TRIG0_DELAY_CNT register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_DP_START_TRIG0_DELAY_CNT
  * TX datapath Start Trigger0 Delay Count
  */

typedef union {
  struct {
    uint32_t ANT_START_DLY_CNT : 32;
    ///< This register indicates the value to delay TSB read trigger value
    ///< that is used to seitch data to TX IP from Initial fixed pattern to
    ///< TSB output..
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_dp_start_trig0_delay_cnt_reg_t;

#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_WR_MASK (0xffffffffU)


///< This register indicates the value to delay TSB read trigger value
///< that is used to seitch data to TX IP from Initial fixed pattern to
///< TSB output..
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_ANT_START_DLY_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_ANT_START_DLY_CNT_BF_WID (32)
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_ANT_START_DLY_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_ANT_START_DLY_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SYNC_POINT_IP_REQ_DLY_CNT register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SYNC_POINT_IP_REQ_DLY_CNT
  * TX Syncpoint to TXIP Req delay Count
  */

typedef union {
  struct {
    uint32_t TX_SP_IP_REQ_DLY : 32;
    ///< This register captures the number of sample clock cycles between the
    ///< syncpoint where the data is switched to tsb output and immediate request
    ///< from tx ip.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_sync_point_ip_req_dly_cnt_reg_t;

#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_WR_MASK (0x00000000U)


///< This register captures the number of sample clock cycles between the
///< syncpoint where the data is switched to tsb output and immediate request
///< from tx ip.
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_TX_SP_IP_REQ_DLY_BF_OFF ( 0)
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_TX_SP_IP_REQ_DLY_BF_WID (32)
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_TX_SP_IP_REQ_DLY_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_TX_SP_IP_REQ_DLY_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_RD_TRIG register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_RD_TRIG
  * TX TSB READ trigger register
  */

typedef union {
  struct {
    uint32_t TSB_RD_TRIG : 1;
    ///< Setting this bit to 1 triggers the TSB buffer read irrespective of
    ///< the fill level status, only when select through TX_DATAPATH_GATE_SEL
    ///< registers.        This is used in TSB data source debug mode to trigger
    ///< TSB read after loading it through AXI interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_rd_trig_reg_t;

#define JESD_TX_GLUE_TSB_RD_TRIG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_RD_TRIG_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_TSB_RD_TRIG_WR_MASK (0x00000001U)


///< Setting this bit to 1 triggers the TSB buffer read irrespective of
///< the fill level status, only when select through TX_DATAPATH_GATE_SEL
///< registers.        This is used in TSB data source debug mode to trigger
///< TSB read after loading it through AXI interface.
#define JESD_TX_GLUE_TSB_RD_TRIG_TSB_RD_TRIG_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_RD_TRIG_TSB_RD_TRIG_BF_WID ( 1)
#define JESD_TX_GLUE_TSB_RD_TRIG_TSB_RD_TRIG_BF_MSK (0x00000001)
#define JESD_TX_GLUE_TSB_RD_TRIG_TSB_RD_TRIG_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_IP_SMPL_TSB_DATA_EN register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_IP_SMPL_TSB_DATA_EN
  * TSB RD data to TX IP Sample Data enable
  */

typedef union {
  struct {
    uint32_t TSB_RD_TRIG : 1;
    ///< Setting this bit to 1 selects the data to switch from constant pattern
    ///< to TSB output, only when select through TX_DATAPATH_GATE_SEL registers.
    ///< This used in TSB data source debug mode. This bit needs to be set
    ///< after the TSB read is triggered through TX_TSB_RD_TRIG register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ip_smpl_tsb_data_en_reg_t;

#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_WR_MASK (0x00000001U)


///< Setting this bit to 1 selects the data to switch from constant pattern
///< to TSB output, only when select through TX_DATAPATH_GATE_SEL registers.
///< This used in TSB data source debug mode. This bit needs to be set
///< after the TSB read is triggered through TX_TSB_RD_TRIG register.
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_TSB_RD_TRIG_BF_OFF ( 0)
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_TSB_RD_TRIG_BF_WID ( 1)
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_TSB_RD_TRIG_BF_MSK (0x00000001)
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_TSB_RD_TRIG_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_CONV_SMPL_INTRLV_CTRL register description at address offset 0x68
  *
  * Register default value:        0x00FAC688
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_CONV_SMPL_INTRLV_CTRL
  * TX Convereter Sample interleaving control
  */

typedef union {
  struct {
    uint32_t CONV0_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 0 data to be shifted to  IP sample interface.
    ///< 3'b0 : IP sample interface Converter 0 sample 0.       3'b1 : IP sample
    ///< interface Converter 0 sample 1.       3'b2 : IP sample interface Converter
    ///< 1 sample 0.       3'b3 : IP sample interface Converter 1 sample 1.
    ///< 3'b4 : IP sample interface Converter 2 sample 0.       3'b5 : IP sample
    ///< interface Converter 2 sample 1.       3'b6 : IP sample interface Converter
    ///< 3 sample 0.       3'b7 : IP sample interface Converter 3 sample 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CONV0_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 0 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CONV1_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 1 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x2"
    uint32_t CONV1_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 1 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x3"
    uint32_t CONV2_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 2 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x4"
    uint32_t CONV2_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 2 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x5"
    uint32_t CONV3_SMPL0_SEL : 3;
    ///< Selects sample 0 of converter 3 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x6"
    uint32_t CONV3_SMPL1_SEL : 3;
    ///< Selects sample 1 of converter 3 data to shift to IP sample interface.
    ///< Sample mapping same as converter 0 sample 0.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x7"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_conv_smpl_intrlv_ctrl_reg_t;

#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_DEFAULT (0x00fac688U)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_RD_MASK (0x00ffffffU)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_WR_MASK (0x00ffffffU)


///< Selects sample 0 of converter 0 data to be shifted to  IP sample interface.
///< 3'b0 : IP sample interface Converter 0 sample 0.       3'b1 : IP sample
///< interface Converter 0 sample 1.       3'b2 : IP sample interface Converter
///< 1 sample 0.       3'b3 : IP sample interface Converter 1 sample 1.
///< 3'b4 : IP sample interface Converter 2 sample 0.       3'b5 : IP sample
///< interface Converter 2 sample 1.       3'b6 : IP sample interface Converter
///< 3 sample 0.       3'b7 : IP sample interface Converter 3 sample 1.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_OFF ( 0)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_MSK (0x00000007)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL0_SEL_BF_DEF (0x00000000)

///< Selects sample 1 of converter 0 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_OFF ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_MSK (0x00000038)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV0_SMPL1_SEL_BF_DEF (0x00000008)

///< Selects sample 0 of converter 1 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_OFF ( 6)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_MSK (0x000001C0)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL0_SEL_BF_DEF (0x00000080)

///< Selects sample 1 of converter 1 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_OFF ( 9)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_MSK (0x00000E00)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV1_SMPL1_SEL_BF_DEF (0x00000600)

///< Selects sample 0 of converter 2 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_OFF (12)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_MSK (0x00007000)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL0_SEL_BF_DEF (0x00004000)

///< Selects sample 1 of converter 2 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_OFF (15)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_MSK (0x00038000)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV2_SMPL1_SEL_BF_DEF (0x00028000)

///< Selects sample 0 of converter 3 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_OFF (18)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_MSK (0x001C0000)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL0_SEL_BF_DEF (0x00180000)

///< Selects sample 1 of converter 3 data to shift to IP sample interface.
///< Sample mapping same as converter 0 sample 0.
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_OFF (21)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_WID ( 3)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_MSK (0x00E00000)
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_CONV3_SMPL1_SEL_BF_DEF (0x00E00000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_PHM_SHIFT_NUM register description at address offset 0x6c
  *
  * Register default value:        0x00000028
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_PHM_SHIFT_NUM
  * PHM Data shift Number configuration register
  */

typedef union {
  struct {
    uint32_t NUM_SHIFTS_PER_FRAME : 6;
    ///< 40-bit PHM Data is shifted serially to IP one bit per sample.
    ///< This register indicates number of sample clock cyles taken to shift
    ///< 40-bit data based on IP TX Samples on Interface value. The encoding
    ///< is value minus 1.             Number of shifts = 40 / tx_soni + (40
    ///< % tx_soni).                                                soni=1
    ///< , shifts = 39.                                                soni=2
    ///< shifts will be 19.             soni=4 shifts will be 9.         soni=8
    ///< shifts will be 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x28"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_phm_shift_num_reg_t;

#define JESD_TX_GLUE_PHM_SHIFT_NUM_DEFAULT (0x00000028U)
#define JESD_TX_GLUE_PHM_SHIFT_NUM_RD_MASK (0x0000003fU)
#define JESD_TX_GLUE_PHM_SHIFT_NUM_WR_MASK (0x0000003fU)


///< 40-bit PHM Data is shifted serially to IP one bit per sample.
///< This register indicates number of sample clock cyles taken to shift
///< 40-bit data based on IP TX Samples on Interface value. The encoding
///< is value minus 1.             Number of shifts = 40 / tx_soni + (40
///< % tx_soni).                                                soni=1
///< , shifts = 39.                                                soni=2
///< shifts will be 19.             soni=4 shifts will be 9.         soni=8
///< shifts will be 4
#define JESD_TX_GLUE_PHM_SHIFT_NUM_SHIFTS_PER_FRAME_BF_OFF ( 0)
#define JESD_TX_GLUE_PHM_SHIFT_NUM_SHIFTS_PER_FRAME_BF_WID ( 6)
#define JESD_TX_GLUE_PHM_SHIFT_NUM_SHIFTS_PER_FRAME_BF_MSK (0x0000003F)
#define JESD_TX_GLUE_PHM_SHIFT_NUM_SHIFTS_PER_FRAME_BF_DEF (0x00000028)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_ERR_STS register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_ERR_STS
  * Status register for Fatal and Window based errors detected in TX sample clock domain
  */

typedef union {
  struct {
    uint32_t ERR_STS : 7;
    ///< Status register for Fatal and Window based errors detected in TX sample
    ///< clock domain.            The register value is sticky once set and
    ///< only cleared upon writing to corresponding error clear register.
    ///< This register is set if the corresponding error is detected irrespective
    ///< of the value of the error generation enable.            The mapping
    ///< of individual bits is shown below.          [0]  - TSB  FIFO underflow.
    ///< [1]  - PHM0 FIFO underflow.         [2]  - PHM1 FIFO underflow.
    ///< [3]  - TSB HALF FULL BEFORE ANT RX START         [4]  - TSB Single
    ///< Bit ECC Error.         [5]  - TSB Double Bit ECC Error.         [6]
    ///< - SRG_PAT_GEN_ERR.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_err_sts_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_RD_MASK (0x0000007fU)
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_WR_MASK (0x00000000U)


///< Status register for Fatal and Window based errors detected in TX sample
///< clock domain.            The register value is sticky once set and
///< only cleared upon writing to corresponding error clear register.
///< This register is set if the corresponding error is detected irrespective
///< of the value of the error generation enable.            The mapping
///< of individual bits is shown below.          [0]  - TSB  FIFO underflow.
///< [1]  - PHM0 FIFO underflow.         [2]  - PHM1 FIFO underflow.
///< [3]  - TSB HALF FULL BEFORE ANT RX START         [4]  - TSB Single
///< Bit ECC Error.         [5]  - TSB Double Bit ECC Error.         [6]
///< - SRG_PAT_GEN_ERR.
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_WID ( 7)
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_MSK (0x0000007F)
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_ERR_STS_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_INTR_HIGH_EN register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_INTR_HIGH_EN
  * High Priority Enable register for RX Interrupts for errors detected in TX sample clock domain
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_EN : 5;
    ///< This register contains corresponding high priority Interrupt enable
    ///< bits for all the Interrupt conditions detected in TX sample clock
    ///< error Status register.             Each bit of this register enable
    ///< High priority Interrupt for corresponding error in the status register.
    ///< The mapping of bits is same as TX sample clock error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_intr_high_en_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_RD_MASK (0x0000001fU)
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_WR_MASK (0x0000001fU)


///< This register contains corresponding high priority Interrupt enable
///< bits for all the Interrupt conditions detected in TX sample clock
///< error Status register.             Each bit of this register enable
///< High priority Interrupt for corresponding error in the status register.
///< The mapping of bits is same as TX sample clock error Status register.
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_INTR_HIGH_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_INTR_HIGH_EN_BF_WID ( 5)
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_INTR_HIGH_EN_BF_MSK (0x0000001F)
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_INTR_HIGH_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_INTR_LOW_EN register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_INTR_LOW_EN
  * Low Priority Enable register for RX Interrupts for errors detected in TX sample clock domain
  */

typedef union {
  struct {
    uint32_t INTR_LOW_EN : 5;
    ///< This register contains corresponding Low priority Interrupt enable
    ///< bits for all the Interrupt conditions detected in TX sample clock
    ///< error Status register.             Each bit of this register enable
    ///< Low priority Interrupt for corresponding error in the status register.
    ///< The mapping of bits is same as TX sample clock error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_intr_low_en_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_RD_MASK (0x0000001fU)
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_WR_MASK (0x0000001fU)


///< This register contains corresponding Low priority Interrupt enable
///< bits for all the Interrupt conditions detected in TX sample clock
///< error Status register.             Each bit of this register enable
///< Low priority Interrupt for corresponding error in the status register.
///< The mapping of bits is same as TX sample clock error Status register.
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_INTR_LOW_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_INTR_LOW_EN_BF_WID ( 5)
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_INTR_LOW_EN_BF_MSK (0x0000001F)
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_INTR_LOW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_ALM_EN register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_ALM_EN
  * Enable register for Alarms for errors detected in TX sample clock domain
  */

typedef union {
  struct {
    uint32_t ALM_EN : 5;
    ///< This register contains corresponding enable bits for all the error
    ///< conditions detected in TX sample clock error Status register.
    ///< Each bit of this register enable alarm for corresponding error in
    ///< the status register.             The mapping of bits is same as TX
    ///< sample clock error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_alm_en_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_RD_MASK (0x0000001fU)
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_WR_MASK (0x0000001fU)


///< This register contains corresponding enable bits for all the error
///< conditions detected in TX sample clock error Status register.
///< Each bit of this register enable alarm for corresponding error in
///< the status register.             The mapping of bits is same as TX
///< sample clock error Status register.
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_WID ( 5)
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_MSK (0x0000001F)
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_ALM_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_ERR_CLR register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_ERR_CLR
  * Clear register for errors detected in TX sample clock domain
  */

typedef union {
  struct {
    uint32_t ERR_CLR : 5;
    ///< This register contains clear bits for all the error conditions detected
    ///< in TX sample clock error Status register.             Each bit of
    ///< this register when written clears the corresponding bit in the error
    ///< status status register.            The clear operation is done for
    ///< only one cycle and subsequent error bits can set the status registers.
    ///< The mapping of bits is same as TX sample clock error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_err_clr_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_RD_MASK (0x0000001fU)
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_WR_MASK (0x0000001fU)


///< This register contains clear bits for all the error conditions detected
///< in TX sample clock error Status register.             Each bit of
///< this register when written clears the corresponding bit in the error
///< status status register.            The clear operation is done for
///< only one cycle and subsequent error bits can set the status registers.
///< The mapping of bits is same as TX sample clock error Status register.
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_WID ( 5)
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_MSK (0x0000001F)
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_ERR_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_ERR_FRC register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_ERR_FRC
  * Force register for errors detected in TX sample clock domain
  */

typedef union {
  struct {
    uint32_t ERR_FRC : 5;
    ///< This register contains forcr bits for all the Alarm conditions detected
    ///< in TX sample clock error Status register.             Each bit of
    ///< this register when written force the corresponding bit in the error
    ///< status register to 1 irrespective of the error condition (active value
    ///< of the error) until written back to 0.                         The
    ///< mapping of bits is same as TX sample clock error Status register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_err_frc_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_RD_MASK (0x0000001fU)
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_WR_MASK (0x0000001fU)


///< This register contains forcr bits for all the Alarm conditions detected
///< in TX sample clock error Status register.             Each bit of
///< this register when written force the corresponding bit in the error
///< status register to 1 irrespective of the error condition (active value
///< of the error) until written back to 0.                         The
///< mapping of bits is same as TX sample clock error Status register.
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_WID ( 5)
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_MSK (0x0000001F)
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_ERR_FRC_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_WNDW_ERR_CNT_EN register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_WNDW_ERR_CNT_EN
  * Enable Register for  Error window Counters.
  */

typedef union {
  struct {
    uint32_t WNDW_CNT_EN : 2;
    ///< Enable register for  Error window counters for windowed Counter Threshold
    ///< errors detected in TX sample clock domain.            Each bit will
    ///< enable counters which will generate error signals once counters reach
    ///< programmable threshold.        The mapping of indivbsual bits is shown
    ///< below.           [0]  - TSB Single Bit ECC Error window counter Enable.
    ///< [1]  - TSB Double Bit ECC Error window counter Enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_wndw_err_cnt_en_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_RD_MASK (0x00000003U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_WR_MASK (0x00000003U)


///< Enable register for  Error window counters for windowed Counter Threshold
///< errors detected in TX sample clock domain.            Each bit will
///< enable counters which will generate error signals once counters reach
///< programmable threshold.        The mapping of indivbsual bits is shown
///< below.           [0]  - TSB Single Bit ECC Error window counter Enable.
///< [1]  - TSB Double Bit ECC Error window counter Enable.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_WID ( 2)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_MSK (0x00000003)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_WNDW_CNT_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_WNDW_ERR_CNT_CLR register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_WNDW_ERR_CNT_CLR
  * Clear Register for  Error window Counters.
  */

typedef union {
  struct {
    uint32_t WNDW_CNT_CLR : 2;
    ///< Clear register for Per Lane Error window counters for windowed Counter
    ///< Threshold errors detected in TX sample clock domain.            Each
    ///< bit will clear all the counters corresponding per lane window based
    ///< error.         The mapping of bits is same as Per Lane error counter
    ///< enable register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_wndw_err_cnt_clr_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_RD_MASK (0x00000003U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_WR_MASK (0x00000003U)


///< Clear register for Per Lane Error window counters for windowed Counter
///< Threshold errors detected in TX sample clock domain.            Each
///< bit will clear all the counters corresponding per lane window based
///< error.         The mapping of bits is same as Per Lane error counter
///< enable register.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_WID ( 2)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_MSK (0x00000003)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_WNDW_CNT_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_WNDW_ERR_CNT_IDX register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_WNDW_ERR_CNT_IDX
  * Per Lane Error window Counters Read Index.
  */

typedef union {
  struct {
    uint32_t CNTR_TYPE : 4;
    ///< Selects the counter type for the selected error type.       4'd0 -
    ///< Sub Window 0 Error Counter.       4'd1 - Sub Window 1 Error Counter.
    ///< 4'd2 - Sub Window 2 Error Counter.       4'd3 - Sub Window 3 Error
    ///< Counter.       4'd4 - Sub Window 4 Error Counter.       4'd5 - Sub
    ///< Window 5 Error Counter.       4'd6 - Sub Window 6 Error Counter.
    ///< 4'd7 - Sub Window 7 Error Counter.       4'd8 - Sub Window Timer Value.
    ///< 4'd9 - Cumulative Error count.       4'd10-15 - Reserved.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_TYPE : 4;
    ///< Selects the error type.             4'd0 - TSB Single bit error.
    ///< 4'd1 - TSB Double bit error.             4'd2-15 - Reserved.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_wndw_err_cnt_idx_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_RD_MASK (0x000000ffU)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_WR_MASK (0x000000ffU)


///< Selects the counter type for the selected error type.       4'd0 -
///< Sub Window 0 Error Counter.       4'd1 - Sub Window 1 Error Counter.
///< 4'd2 - Sub Window 2 Error Counter.       4'd3 - Sub Window 3 Error
///< Counter.       4'd4 - Sub Window 4 Error Counter.       4'd5 - Sub
///< Window 5 Error Counter.       4'd6 - Sub Window 6 Error Counter.
///< 4'd7 - Sub Window 7 Error Counter.       4'd8 - Sub Window Timer Value.
///< 4'd9 - Cumulative Error count.       4'd10-15 - Reserved.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_WID ( 4)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_MSK (0x0000000F)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_CNTR_TYPE_BF_DEF (0x00000000)

///< Selects the error type.             4'd0 - TSB Single bit error.
///< 4'd1 - TSB Double bit error.             4'd2-15 - Reserved.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_OFF ( 4)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_WID ( 4)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_MSK (0x000000F0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_ERR_TYPE_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_WNDW_ERR_CNT_RDATA register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_WNDW_ERR_CNT_RDATA
  * Per Lane Error window Counters Read Data
  */

typedef union {
  struct {
    uint32_t READ_DATA : 19;
    ///< Read Data corresponding to the counter selected by read index.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_wndw_err_cnt_rdata_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_RD_MASK (0x0007ffffU)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_WR_MASK (0x00000000U)


///< Read Data corresponding to the counter selected by read index.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_WID (19)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_MSK (0x0007FFFF)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_READ_DATA_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_SIG_MON_EN register description at address offset 0xa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_SIG_MON_EN
  * Tx Sample clock signal Monitor enable
  */

typedef union {
  struct {
    uint32_t MON_EN : 1;
    ///< When set to 1 enables the signals monitor used to capture debug signals
    ///< in crux_clock domain.                   This signal is used as clock
    ///< gating signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_sig_mon_en_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_WR_MASK (0x00000001U)


///< When set to 1 enables the signals monitor used to capture debug signals
///< in crux_clock domain.                   This signal is used as clock
///< gating signal.
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_MON_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_SIG_MON_CAP_EN register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_SIG_MON_CAP_EN
  * Tx Sample clock signal Monitor capture enable
  */

typedef union {
  struct {
    uint32_t CAP_EN : 1;
    ///< When set to 1 enables the signal capture by the monitor depending
    ///< on the mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_sig_mon_cap_en_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_WR_MASK (0x00000001U)


///< When set to 1 enables the signal capture by the monitor depending
///< on the mode.
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_CAP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_SIG_MON_STS_CLR register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_SIG_MON_STS_CLR
  * Tx Sample clock signal Monitor status clear
  */

typedef union {
  struct {
    uint32_t STS_CLR : 1;
    ///< Writing 1 willclear the status and capture registers. The clear opertaion
    ///< is for one cycle and register holds the last written value.
    ///< Clearing status when capture enable is set will cause the signal to
    ///< be re-captured.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_sig_mon_sts_clr_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_WR_MASK (0x00000001U)


///< Writing 1 willclear the status and capture registers. The clear opertaion
///< is for one cycle and register holds the last written value.
///< Clearing status when capture enable is set will cause the signal to
///< be re-captured.
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_STS_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_SIG_MON_CFG register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_SIG_MON_CFG
  * Tx Sample clock signal Monitor configuration
  */

typedef union {
  struct {
    uint32_t REL_CAP_EN : 1;
    ///< 0- All the signals are captured individually based on the trigger
    ///< event.            1- relative capture mode: Event on signal 0 will
    ///< trigger the capture of all signals.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRIG_MODE : 2;
    ///< 2'b00- Signals are captured next cycle after capture enable is set
    ///< to 1.            2'b01- Reserved.            2'b10- Signal capture
    ///< is triggered by rising  edge of signal after capture enable is set
    ///< to 1.            2'b11- Signal capture is triggered by falling edge
    ///< of signal after capture enable is set to 1.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CAP_CYCLES : 7;
    ///< Specifes the number of clock cycles the signal values are acaptured
    ///< after capture event.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_sig_mon_cfg_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_RD_MASK (0x000003ffU)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_WR_MASK (0x000003ffU)


///< 0- All the signals are captured individually based on the trigger
///< event.            1- relative capture mode: Event on signal 0 will
///< trigger the capture of all signals.
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_REL_CAP_EN_BF_DEF (0x00000000)

///< 2'b00- Signals are captured next cycle after capture enable is set
///< to 1.            2'b01- Reserved.            2'b10- Signal capture
///< is triggered by rising  edge of signal after capture enable is set
///< to 1.            2'b11- Signal capture is triggered by falling edge
///< of signal after capture enable is set to 1.
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_OFF ( 1)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_WID ( 2)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_MSK (0x00000006)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_TRIG_MODE_BF_DEF (0x00000000)

///< Specifes the number of clock cycles the signal values are acaptured
///< after capture event.
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_OFF ( 3)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_WID ( 7)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_MSK (0x000003F8)
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_CAP_CYCLES_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_DBG_SIG_SEL register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_DBG_SIG_SEL
  * Tx Sample clock debug mux select
  */

typedef union {
  struct {
    uint32_t SIG0_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SIG2_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SIG3_MUX_SEL : 4;
    ///< Selects the signal to be monitered. TBD.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_dbg_sig_sel_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_WR_MASK (0x0000ffffU)


///< Selects the signal to be monitered. TBD.
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_MSK (0x0000000F)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG0_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_OFF ( 4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_MSK (0x000000F0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG1_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_OFF ( 8)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_MSK (0x00000F00)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG2_MUX_SEL_BF_DEF (0x00000000)

///< Selects the signal to be monitered. TBD.
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_OFF (12)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_MSK (0x0000F000)
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_SIG3_MUX_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_DBG_CAP_VLD register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_DBG_CAP_VLD
  * Tx Sample clock debug signal capture valid
  */

typedef union {
  struct {
    uint32_t SIG0_CAP_VLD : 1;
    ///< Indicates the signal 0 capture is complete.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_CAP_VLD : 1;
    ///< Indicates the signal 1 capture is complete.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SIG2_CAP_VLD : 1;
    ///< Indicates the signal 2 capture is complete.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SIG3_CAP_VLD : 1;
    ///< Indicates the signal 3 capture is complete.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_dbg_cap_vld_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_RD_MASK (0x0000000fU)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_WR_MASK (0x00000000U)


///< Indicates the signal 0 capture is complete.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG0_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 1 capture is complete.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_OFF ( 1)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_MSK (0x00000002)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG1_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 2 capture is complete.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_OFF ( 2)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_MSK (0x00000004)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG2_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 3 capture is complete.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_OFF ( 3)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_MSK (0x00000008)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_SIG3_CAP_VLD_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_RD_FLIT_CNT register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_RD_FLIT_CNT
  * TX Stream read Flit Count
  */

typedef union {
  struct {
    uint32_t RD_FLIT_CNT : 32;
    ///< This counter indicates number of flits read for each stream from TSB.
    ///< There is only one counter since all streams are read together .
    ///< The counter saturates at Max value(32'hFFFF_FFFF).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_rd_flit_cnt_reg_t;

#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_WR_MASK (0xffffffffU)


///< This counter indicates number of flits read for each stream from TSB.
///< There is only one counter since all streams are read together .
///< The counter saturates at Max value(32'hFFFF_FFFF).
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_RD_FLIT_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_RD_FLIT_CNT_BF_WID (32)
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_RD_FLIT_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_RD_FLIT_CNT_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ANT_RX_START_TO_TSB_HALF_FULL_CNT register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ANT_RX_START_TO_TSB_HALF_FULL_CNT
  * TX Count between antenna_rx_started to half full of all TSB buffers
  */

typedef union {
  struct {
    uint32_t CNT_CYCLES : 32;
    ///< This counter indicates number of sample clock count between antenna_rx_started
    ///< and half full of all tsb's.             This value can be used to
    ///< programm the del1 counter on rx started .            The counter saturates
    ///< at Max value(32'hFFFF_FFFF).
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_ant_rx_start_to_tsb_half_full_cnt_reg_t;

#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_WR_MASK (0x00000000U)


///< This counter indicates number of sample clock count between antenna_rx_started
///< and half full of all tsb's.             This value can be used to
///< programm the del1 counter on rx started .            The counter saturates
///< at Max value(32'hFFFF_FFFF).
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_CYCLES_BF_OFF ( 0)
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_CYCLES_BF_WID (32)
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_CYCLES_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_CYCLES_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_VALID_TO_TSB_HALF_FULL_CNT register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_VALID_TO_TSB_HALF_FULL_CNT
  * TX Count between first strm vlid from NSIP to half full of all TSB buffers
  */

typedef union {
  struct {
    uint32_t CNT_CYCLES : 32;
    ///< This counter indicates number of sample clock count between first
    ///< strm valid from nsip and half full of all tsb's.             The counter
    ///< saturates at Max value(32'hFFFF_FFFF).
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_valid_to_tsb_half_full_cnt_reg_t;

#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_WR_MASK (0x00000000U)


///< This counter indicates number of sample clock count between first
///< strm valid from nsip and half full of all tsb's.             The counter
///< saturates at Max value(32'hFFFF_FFFF).
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_CYCLES_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_CYCLES_BF_WID (32)
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_CYCLES_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_CYCLES_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SRG_PAT_CFG_LOW register description at address offset 0xcc
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SRG_PAT_CFG_LOW
  * TX Sample request gen config
  */

typedef union {
  struct {
    uint32_t PATTERN_LOW : 32;
    ///< This registers hold the request pattern from IP .             holds
    ///< the first 32 clock cycle pattern .
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_tx_glue_srg_pat_cfg_low_reg_t;

#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_DEFAULT (0xffffffffU)
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_WR_MASK (0xffffffffU)


///< This registers hold the request pattern from IP .             holds
///< the first 32 clock cycle pattern .
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_PATTERN_LOW_BF_OFF ( 0)
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_PATTERN_LOW_BF_WID (32)
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_PATTERN_LOW_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_PATTERN_LOW_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SRG_PAT_CFG_HIGH register description at address offset 0xd0
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SRG_PAT_CFG_HIGH
  * TX Sample request gen config
  */

typedef union {
  struct {
    uint32_t PATTERN_HIGH : 32;
    ///< This registers hold the request pattern from IP .             holds
    ///< the second 32 clock cycle pattern .
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_tx_glue_srg_pat_cfg_high_reg_t;

#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_DEFAULT (0xffffffffU)
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_WR_MASK (0xffffffffU)


///< This registers hold the request pattern from IP .             holds
///< the second 32 clock cycle pattern .
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_PATTERN_HIGH_BF_OFF ( 0)
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_PATTERN_HIGH_BF_WID (32)
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_PATTERN_HIGH_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_PATTERN_HIGH_BF_DEF (0xFFFFFFFF)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SRG_PAT_DEL_CFG register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SRG_PAT_DEL_CFG
  * TX Sample request gen delay  config
  */

typedef union {
  struct {
    uint32_t PATTERN_DLY : 5;
    ///< This registers hold the delay by which  the sample request is delayed
    ///< before reaching glue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PATTERN_DLY_FOR_ERR_GEN : 2;
    ///< this field will choose the one of thre delayed version pat_gen to
    ///< comapre with actual ip req gen to generate err             2'b00 -
    ///< zero delay version             2'b01 - one smpl clk delayed version
    ///< 2'b10 - two smpl clk delayed version
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_srg_pat_del_cfg_reg_t;

#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_RD_MASK (0x0000007fU)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_WR_MASK (0x0000007fU)


///< This registers hold the delay by which  the sample request is delayed
///< before reaching glue
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_BF_OFF ( 0)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_BF_WID ( 5)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_BF_MSK (0x0000001F)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_BF_DEF (0x00000000)

///< this field will choose the one of thre delayed version pat_gen to
///< comapre with actual ip req gen to generate err             2'b00 -
///< zero delay version             2'b01 - one smpl clk delayed version
///< 2'b10 - two smpl clk delayed version
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_FOR_ERR_GEN_BF_OFF ( 5)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_FOR_ERR_GEN_BF_WID ( 2)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_FOR_ERR_GEN_BF_MSK (0x00000060)
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_PATTERN_DLY_FOR_ERR_GEN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SRG_PAT_PERIOD_CFG register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SRG_PAT_PERIOD_CFG
  * TX Sample request gen period  config
  */

typedef union {
  struct {
    uint32_t PATTERN_PERIOD : 6;
    ///< This registers holds the number of bits selected from tx_srg_pat_cfg_low/high
    ///< combined to generate request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_srg_pat_period_cfg_reg_t;

#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_RD_MASK (0x0000003fU)
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_WR_MASK (0x0000003fU)


///< This registers holds the number of bits selected from tx_srg_pat_cfg_low/high
///< combined to generate request
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_PATTERN_PERIOD_BF_OFF ( 0)
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_PATTERN_PERIOD_BF_WID ( 6)
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_PATTERN_PERIOD_BF_MSK (0x0000003F)
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_PATTERN_PERIOD_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SRG_PAT_EN register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SRG_PAT_EN
  * TX Sample request gen enable
  */

typedef union {
  struct {
    uint32_t PATTERN_EN : 1;
    ///< This registers enables the request pattern generation, enable once
    ///< all cfg for srg_pat is programmed
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_srg_pat_en_reg_t;

#define JESD_TX_GLUE_SRG_PAT_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SRG_PAT_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SRG_PAT_EN_WR_MASK (0x00000001U)


///< This registers enables the request pattern generation, enable once
///< all cfg for srg_pat is programmed
#define JESD_TX_GLUE_SRG_PAT_EN_PATTERN_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SRG_PAT_EN_PATTERN_EN_BF_WID ( 1)
#define JESD_TX_GLUE_SRG_PAT_EN_PATTERN_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SRG_PAT_EN_PATTERN_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ECC_CHK_DIS register description at address offset 0xe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ECC_CHK_DIS
  * TX ecc check disable
  */

typedef union {
  struct {
    uint32_t ECC_CHK_DIS : 1;
    ///< This registers disables ecc check for TSB memories
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ecc_chk_dis_reg_t;

#define JESD_TX_GLUE_ECC_CHK_DIS_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ECC_CHK_DIS_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_ECC_CHK_DIS_WR_MASK (0x00000001U)


///< This registers disables ecc check for TSB memories
#define JESD_TX_GLUE_ECC_CHK_DIS_ECC_CHK_DIS_BF_OFF ( 0)
#define JESD_TX_GLUE_ECC_CHK_DIS_ECC_CHK_DIS_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_CHK_DIS_ECC_CHK_DIS_BF_MSK (0x00000001)
#define JESD_TX_GLUE_ECC_CHK_DIS_ECC_CHK_DIS_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ECC_FORCE_ERR register description at address offset 0xe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ECC_FORCE_ERR
  * TX ecc force err
  */

typedef union {
  struct {
    uint32_t ECC_FORCE_ERR : 1;
    ///< This registers forces ecc errors on TSB while reading self clearing
    ///< register it get cleared when error is dectected
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ecc_force_err_reg_t;

#define JESD_TX_GLUE_ECC_FORCE_ERR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ECC_FORCE_ERR_RD_MASK (0x00000000U)
#define JESD_TX_GLUE_ECC_FORCE_ERR_WR_MASK (0x00000001U)


///< This registers forces ecc errors on TSB while reading self clearing
///< register it get cleared when error is dectected
#define JESD_TX_GLUE_ECC_FORCE_ERR_ECC_FORCE_ERR_BF_OFF ( 0)
#define JESD_TX_GLUE_ECC_FORCE_ERR_ECC_FORCE_ERR_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_FORCE_ERR_ECC_FORCE_ERR_BF_MSK (0x00000001)
#define JESD_TX_GLUE_ECC_FORCE_ERR_ECC_FORCE_ERR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ECC_FORCE_TYPE register description at address offset 0xe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ECC_FORCE_TYPE
  * TX ecc force err type
  */

typedef union {
  struct {
    uint32_t ECC_FORCE_ERR_TYP : 1;
    ///< This registers indicates the type of error forced when  tx_ecc_force_err
    ///< register is set       0= 1 bit error , 1= 2 bit error
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ecc_force_type_reg_t;

#define JESD_TX_GLUE_ECC_FORCE_TYPE_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ECC_FORCE_TYPE_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_ECC_FORCE_TYPE_WR_MASK (0x00000001U)


///< This registers indicates the type of error forced when  tx_ecc_force_err
///< register is set       0= 1 bit error , 1= 2 bit error
#define JESD_TX_GLUE_ECC_FORCE_TYPE_ECC_FORCE_ERR_TYP_BF_OFF ( 0)
#define JESD_TX_GLUE_ECC_FORCE_TYPE_ECC_FORCE_ERR_TYP_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_FORCE_TYPE_ECC_FORCE_ERR_TYP_BF_MSK (0x00000001)
#define JESD_TX_GLUE_ECC_FORCE_TYPE_ECC_FORCE_ERR_TYP_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ECC_STATUS_CLR register description at address offset 0xec
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ECC_STATUS_CLR
  * TX ecc status clr
  */

typedef union {
  struct {
    uint32_t ECC_STATUS_CLR : 1;
    ///< This registers clears the ecc status register
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ecc_stat_clr_reg_t;

#define JESD_TX_GLUE_ECC_STAT_CLR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ECC_STAT_CLR_RD_MASK (0x00000000U)
#define JESD_TX_GLUE_ECC_STAT_CLR_WR_MASK (0x00000001U)


///< This registers clears the ecc status register
#define JESD_TX_GLUE_ECC_STAT_CLR_ECC_STAT_CLR_BF_OFF ( 0)
#define JESD_TX_GLUE_ECC_STAT_CLR_ECC_STAT_CLR_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_STAT_CLR_ECC_STAT_CLR_BF_MSK (0x00000001)
#define JESD_TX_GLUE_ECC_STAT_CLR_ECC_STAT_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ANTENNA_RX_STARTED_SP_BYPASS register description at address offset 0xf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ANTENNA_RX_STARTED_SP_BYPASS
  * tx drf_antenna_rx_started  sync point bypass
  */

typedef union {
  struct {
    uint32_t BYPASS : 1;
    ///< This register bypass the sync point based latching of atenna_rx_started,
    ///< .
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_antenna_rx_started_sp_byp_reg_t;

#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_WR_MASK (0x00000001U)


///< This register bypass the sync point based latching of atenna_rx_started,
///< .
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_BF_OFF ( 0)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_BF_WID ( 1)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_BF_MSK (0x00000001)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_MIN_MAX_OCCUPANCY_CAPT_EN register description at address offset 0xf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_MIN_MAX_OCCUPANCY_CAPT_EN
  * TX TSB min max occupancy capture en
  */

typedef union {
  struct {
    uint32_t MIN_OCCUPANCY_CAPT_EN : 1;
    ///< This field enables the cpature of min occupancy
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MAX_OCCUPANCY_CAPT_EN : 1;
    ///< This field enables the cpature of max occupancy
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OCCUPANCY_CAPT_EN : 1;
    ///< This field enables the cpature of occupancy level continously
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_min_max_occupancy_capt_en_reg_t;

#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_RD_MASK (0x00000007U)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_WR_MASK (0x00000007U)


///< This field enables the cpature of min occupancy
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MIN_OCCUPANCY_CAPT_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MIN_OCCUPANCY_CAPT_EN_BF_WID ( 1)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MIN_OCCUPANCY_CAPT_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MIN_OCCUPANCY_CAPT_EN_BF_DEF (0x00000000)

///< This field enables the cpature of max occupancy
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MAX_OCCUPANCY_CAPT_EN_BF_OFF ( 1)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MAX_OCCUPANCY_CAPT_EN_BF_WID ( 1)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MAX_OCCUPANCY_CAPT_EN_BF_MSK (0x00000002)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_MAX_OCCUPANCY_CAPT_EN_BF_DEF (0x00000000)

///< This field enables the cpature of occupancy level continously
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_OCCUPANCY_CAPT_EN_BF_OFF ( 2)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_OCCUPANCY_CAPT_EN_BF_WID ( 1)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_OCCUPANCY_CAPT_EN_BF_MSK (0x00000004)
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_OCCUPANCY_CAPT_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_DEPTH_AT_READ_TRIG_VLD register description at address offset 0xf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_DEPTH_AT_READ_TRIG_VLD
  * tx tsb depth when read_trig vld
  */

typedef union {
  struct {
    uint32_t VALID : 1;
    ///< This register indicates the TSB depth in depth capture registers is
    ///< valid .
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_depth_at_read_trig_vld_reg_t;

#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_WR_MASK (0x00000000U)


///< This register indicates the TSB depth in depth capture registers is
///< valid .
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_VALID_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_VALID_BF_WID ( 1)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_VALID_BF_MSK (0x00000001)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_VALID_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SP_MON_CAP_VLD register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SP_MON_CAP_VLD
  * Sync point debug signal capture valid
  */

typedef union {
  struct {
    uint32_t SIG0_CAP_VLD : 1;
    ///< Indicates the signal 0 capture is complete.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SIG1_CAP_VLD : 1;
    ///< Indicates the signal 1 capture is complete.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SIG2_CAP_VLD : 1;
    ///< Indicates the signal 2 capture is complete.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_sp_mon_cap_vld_reg_t;

#define JESD_TX_GLUE_SP_MON_CAP_VLD_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_RD_MASK (0x00000007U)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_WR_MASK (0x00000000U)


///< Indicates the signal 0 capture is complete.
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_OFF ( 0)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG0_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 1 capture is complete.
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_OFF ( 1)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_MSK (0x00000002)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG1_CAP_VLD_BF_DEF (0x00000000)

///< Indicates the signal 2 capture is complete.
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_OFF ( 2)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_WID ( 1)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_MSK (0x00000004)
#define JESD_TX_GLUE_SP_MON_CAP_VLD_SIG2_CAP_VLD_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ANTENNA_RX_STARTED_STATUS register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ANTENNA_RX_STARTED_STATUS
  * tx drf_antenna_rx_started  status
  */

typedef union {
  struct {
    uint32_t RCVD_AT_JESD_PORT : 1;
    ///< this field  is set to one when rx started received at jesd port ,
    ///< .
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RCVD_AT_TRIG0_MUX : 1;
    ///< this field  is set to one when rx started received at trig0_mux passing
    ///< sync_point and delays ,  .
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_antenna_rx_started_stat_reg_t;

#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RD_MASK (0x00000003U)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_WR_MASK (0x00000000U)


///< this field  is set to one when rx started received at jesd port ,
///< .
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_JESD_PORT_BF_OFF ( 0)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_JESD_PORT_BF_WID ( 1)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_JESD_PORT_BF_MSK (0x00000001)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_JESD_PORT_BF_DEF (0x00000000)

///< this field  is set to one when rx started received at trig0_mux passing
///< sync_point and delays ,  .
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_TRIG0_MUX_BF_OFF ( 1)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_TRIG0_MUX_BF_WID ( 1)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_TRIG0_MUX_BF_MSK (0x00000002)
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_RCVD_AT_TRIG0_MUX_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_FB_MODE_CTRL register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_FB_MODE_CTRL
  * TX feedback mode enable ctrl register
  */

typedef union {
  struct {
    uint32_t TX_FB_MODE_ON : 1;
    ///< this should be set when the  usecase with feedback traffic is on
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TX_FB_MODE_TYPE : 1;
    ///< when fb mode is on this bit indicates the type of fb mode traffic
    ///< on jesd lane             0 == lane sharing mode , on jesd lane either
    ///< UL or FB traffic will be running at any point of time
    ///< 1 == multi point mode , on jesd lane both UL and FB traffic will be
    ///< running simulatenously
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TX_FB_USECASE_TYPE : 2;
    ///< when fb is on we support these set of use, only valid in multi point
    ///< mode                   2'b00 == A1,B1                 2'b01 == D1,E1,F1
    ///< 2'b10 == C1                  2'b11 == unused not valid
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TX_UL_CONV_SHARED : 1;
    ///< this is bit programmed based on number of UL conv present in fb usecases,only
    ///< valid in multipoint mode            1'b0 == 4 UL conv            1'b1
    ///< == 8 UL conv
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_fb_mode_ctrl_reg_t;

#define JESD_TX_GLUE_FB_MODE_CTRL_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_FB_MODE_CTRL_RD_MASK (0x0000001fU)
#define JESD_TX_GLUE_FB_MODE_CTRL_WR_MASK (0x0000001fU)


///< this should be set when the  usecase with feedback traffic is on
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_ON_BF_OFF ( 0)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_ON_BF_WID ( 1)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_ON_BF_MSK (0x00000001)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_ON_BF_DEF (0x00000000)

///< when fb mode is on this bit indicates the type of fb mode traffic
///< on jesd lane             0 == lane sharing mode , on jesd lane either
///< UL or FB traffic will be running at any point of time
///< 1 == multi point mode , on jesd lane both UL and FB traffic will be
///< running simulatenously
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_TYPE_BF_OFF ( 1)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_TYPE_BF_WID ( 1)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_TYPE_BF_MSK (0x00000002)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_MODE_TYPE_BF_DEF (0x00000000)

///< when fb is on we support these set of use, only valid in multi point
///< mode                   2'b00 == A1,B1                 2'b01 == D1,E1,F1
///< 2'b10 == C1                  2'b11 == unused not valid
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_USECASE_TYPE_BF_OFF ( 2)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_USECASE_TYPE_BF_WID ( 2)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_USECASE_TYPE_BF_MSK (0x0000000C)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_FB_USECASE_TYPE_BF_DEF (0x00000000)

///< this is bit programmed based on number of UL conv present in fb usecases,only
///< valid in multipoint mode            1'b0 == 4 UL conv            1'b1
///< == 8 UL conv
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_UL_CONV_SHARED_BF_OFF ( 4)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_UL_CONV_SHARED_BF_WID ( 1)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_UL_CONV_SHARED_BF_MSK (0x00000010)
#define JESD_TX_GLUE_FB_MODE_CTRL_TX_UL_CONV_SHARED_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SHIFT_REG_CAPTURE_CLR_STATUS register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SHIFT_REG_CAPTURE_CLR_STATUS
  * TX shift_reg data capture clr
  */

typedef union {
  struct {
    uint32_t STATUS_CLR : 1;
    ///< This register clears the status of the shif_reg data capture when
    ///< set to 1
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_shift_cap_clr_stat_reg_t;

#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_RD_MASK (0x00000000U)
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_WR_MASK (0x00000001U)


///< This register clears the status of the shif_reg data capture when
///< set to 1
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_CLR_BF_OFF ( 0)
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_CLR_BF_WID ( 1)
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_CLR_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SHIFT_REG_CAPTURE_STATUS register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SHIFT_REG_CAPTURE_STATUS
  * TX shift_reg data capture status
  */

typedef union {
  struct {
    uint32_t STATUS : 1;
    ///< This register holds the status of the shif_reg data capture
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_shift_cap_stat_reg_t;

#define JESD_TX_GLUE_SHIFT_CAP_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SHIFT_CAP_STAT_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SHIFT_CAP_STAT_WR_MASK (0x00000000U)


///< This register holds the status of the shif_reg data capture
#define JESD_TX_GLUE_SHIFT_CAP_STAT_BF_OFF ( 0)
#define JESD_TX_GLUE_SHIFT_CAP_STAT_BF_WID ( 1)
#define JESD_TX_GLUE_SHIFT_CAP_STAT_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SHIFT_CAP_STAT_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SHIFT_REG_CAPTURE_ENABLE register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SHIFT_REG_CAPTURE_ENABLE
  * TX shift_reg data capture enable
  */

typedef union {
  struct {
    uint32_t CAPTURE_EN : 1;
    ///< This register triggers the capture of shift_reg data , 256 bits from
    ///< each  of the 16 shift_registers is captured
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_shift_cap_en_reg_t;

#define JESD_TX_GLUE_SHIFT_CAP_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SHIFT_CAP_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SHIFT_CAP_EN_WR_MASK (0x00000001U)


///< This register triggers the capture of shift_reg data , 256 bits from
///< each  of the 16 shift_registers is captured
#define JESD_TX_GLUE_SHIFT_CAP_EN_CAP_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_SHIFT_CAP_EN_CAP_EN_BF_WID ( 1)
#define JESD_TX_GLUE_SHIFT_CAP_EN_CAP_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SHIFT_CAP_EN_CAP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SHIFT_REG_CAPTURE_FORCE_MODE register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SHIFT_REG_CAPTURE_FORCE_MODE
  * TX shift_reg data capture or force mode
  */

typedef union {
  struct {
    uint32_t MODE : 1;
    ///< This registers indicates whether the  data in shift_registers is captured
    ///< on to tx_conv_smpl_init_data_r registers  when tx_shift_reg_capture_start
    ///< is set or  APB writes are given priority to tx_conv_smpl_init_data_r
    ///< 1'b0 =  apb mode       1'b1 = capture mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_shift_cap_force_mode_reg_t;

#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_WR_MASK (0x00000001U)


///< This registers indicates whether the  data in shift_registers is captured
///< on to tx_conv_smpl_init_data_r registers  when tx_shift_reg_capture_start
///< is set or  APB writes are given priority to tx_conv_smpl_init_data_r
///< 1'b0 =  apb mode       1'b1 = capture mode
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_BF_OFF ( 0)
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_BF_WID ( 1)
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_BF_MSK (0x00000001)
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_IP_SMPL_INTF_CAPTURE_ENABLE register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_IP_SMPL_INTF_CAPTURE_ENABLE
  * TX_IP sample interface data capture enable
  */

typedef union {
  struct {
    uint32_t CAPTURE_EN : 1;
    ///< when enabled sample data  on TX_IP sample interface is captured on
    ///< to tx_ip_sampl_intf_data_r
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ip_smpl_intf_cap_en_reg_t;

#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_WR_MASK (0x00000001U)


///< when enabled sample data  on TX_IP sample interface is captured on
///< to tx_ip_sampl_intf_data_r
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_CAP_EN_BF_OFF ( 0)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_CAP_EN_BF_WID ( 1)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_CAP_EN_BF_MSK (0x00000001)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_CAP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_IP_SMPL_INTF_CAPTURE_CLR_STATUS register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_IP_SMPL_INTF_CAPTURE_CLR_STATUS
  * TX smpl interface data capture clr
  */

typedef union {
  struct {
    uint32_t STATUS_CLR : 1;
    ///< This register clears the status of the smpl_intf data capture when
    ///< set to 1
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ip_smpl_intf_cap_clr_stat_reg_t;

#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_RD_MASK (0x00000000U)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_WR_MASK (0x00000001U)


///< This register clears the status of the smpl_intf data capture when
///< set to 1
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_CLR_BF_OFF ( 0)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_CLR_BF_WID ( 1)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_CLR_BF_MSK (0x00000001)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_CLR_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_IP_SMPL_INTF_CAPTURE_STATUS register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_IP_SMPL_INTF_CAPTURE_STATUS
  * TX smpl_intf data capture status
  */

typedef union {
  struct {
    uint32_t STATUS : 1;
    ///< This register holds the status of the shif_reg data capture
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ip_smpl_intf_cap_stat_reg_t;

#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_RD_MASK (0x00000001U)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_WR_MASK (0x00000000U)


///< This register holds the status of the shif_reg data capture
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_BF_OFF ( 0)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_BF_WID ( 1)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_BF_MSK (0x00000001)
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_BF_DEF (0x00000000)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_MEM_RD_PTR[16] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_MEM_RD_PTR
  * JESD TX Glue Memory Read Pointer
  */

typedef union {
  struct {
    uint32_t TX_MEM_RD_PTR : 16;
    ///< Tx memory read pointer.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_rd_ptr_reg_t;

#define JESD_TX_GLUE_STRM_RD_PTR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_RD_PTR_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_STRM_RD_PTR_WR_MASK (0x00000000U)


///< Tx memory read pointer.
#define JESD_TX_GLUE_STRM_RD_PTR_TX_RD_PTR_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_RD_PTR_TX_RD_PTR_BF_WID (16)
#define JESD_TX_GLUE_STRM_RD_PTR_TX_RD_PTR_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_STRM_RD_PTR_TX_RD_PTR_BF_DEF (0x00000000)
#define JESD_TX_GLUE_STRM_RD_PTR_ARR_SZ0 (16)
#define JESD_TX_GLUE_STRM_RD_PTR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_PHM_FOVR_MAP[16] register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_PHM_FOVR_MAP
  * jesd phm,fovr ids to stram map
  */

typedef union {
  struct {
    uint32_t FOVR_DRF_SEL : 1;
    ///< Specifes if the Stream FOVR values are selected from DIG RF 0 or DIG
    ///< RF 1 as shown below.             0- drf_0 , 1-drf_1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t FOVR_STRM_SEL : 4;
    ///< Indicates bit number in the 10-bit FOVR bus from the selected DIG
    ///< RF
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PHM_DRF_SEL : 1;
    ///< Specifes if the Stream PHM values are selected from DIG RF 0 or DIG
    ///< RF 1 as shown below.             0- drf_0 , 1-drf_1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t PHM_STRM_SEL : 4;
    ///< Indicates phm id mapped to stream from the selected DIG RF
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t PHM_FOVR_BIT_POS : 1;
    ///< Indicates phm and fovr bit pos on control bits [1:0], when both phm
    ///< and fovr are enabled            0=  fovr,phm             1=  phm,fovr
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_phm_fovr_reg_t;

#define JESD_TX_GLUE_STRM_PHM_FOVR_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_PHM_FOVR_RD_MASK (0x0001f1f1U)
#define JESD_TX_GLUE_STRM_PHM_FOVR_WR_MASK (0x0001f1f1U)


///< Specifes if the Stream FOVR values are selected from DIG RF 0 or DIG
///< RF 1 as shown below.             0- drf_0 , 1-drf_1
#define JESD_TX_GLUE_STRM_PHM_FOVR_DRF_SEL_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_PHM_FOVR_DRF_SEL_BF_WID ( 1)
#define JESD_TX_GLUE_STRM_PHM_FOVR_DRF_SEL_BF_MSK (0x00000001)
#define JESD_TX_GLUE_STRM_PHM_FOVR_DRF_SEL_BF_DEF (0x00000000)

///< Indicates bit number in the 10-bit FOVR bus from the selected DIG
///< RF
#define JESD_TX_GLUE_STRM_PHM_FOVR_STRM_SEL_BF_OFF ( 4)
#define JESD_TX_GLUE_STRM_PHM_FOVR_STRM_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_STRM_PHM_FOVR_STRM_SEL_BF_MSK (0x000000F0)
#define JESD_TX_GLUE_STRM_PHM_FOVR_STRM_SEL_BF_DEF (0x00000000)

///< Specifes if the Stream PHM values are selected from DIG RF 0 or DIG
///< RF 1 as shown below.             0- drf_0 , 1-drf_1
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_DRF_SEL_BF_OFF ( 8)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_DRF_SEL_BF_WID ( 1)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_DRF_SEL_BF_MSK (0x00000100)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_DRF_SEL_BF_DEF (0x00000000)

///< Indicates phm id mapped to stream from the selected DIG RF
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_STRM_SEL_BF_OFF (12)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_STRM_SEL_BF_WID ( 4)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_STRM_SEL_BF_MSK (0x0000F000)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_STRM_SEL_BF_DEF (0x00000000)

///< Indicates phm and fovr bit pos on control bits [1:0], when both phm
///< and fovr are enabled            0=  fovr,phm             1=  phm,fovr
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_FOVR_BIT_POS_BF_OFF (16)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_FOVR_BIT_POS_BF_WID ( 1)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_FOVR_BIT_POS_BF_MSK (0x00010000)
#define JESD_TX_GLUE_STRM_PHM_FOVR_PHM_FOVR_BIT_POS_BF_DEF (0x00000000)
#define JESD_TX_GLUE_STRM_PHM_FOVR_ARR_SZ0 (16)
#define JESD_TX_GLUE_STRM_PHM_FOVR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_STRM_PHM_FIFO_STS[16] register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_STRM_PHM_FIFO_STS
  * TX Stream PHM FIFO Status
  */

typedef union {
  struct {
    uint32_t PHM_FIFO_STATUS : 32;
    ///< HHlds the value of phm_fifo status bits
    ///< [31:DEPTHWIDTH+8]:  0,
    ///< [DEPTHWIDTH+7:8]:  FIFO depth,
    ///< [7]:      FIFO full         (FIFO depth == FIFO size),
    ///< [6]:      FIFO almost full  (FIFO depth >= high watermark),
    ///< [5]:      FIFO almost empty (FIFO depth <= low  watermark),
    ///< [4]:      FIFO empty        (FIFO depth == 0),
    ///< [3]:                    Reserved,
    ///< [2]:      FIFO parity error (always 0),
    ///< [1]:      FIFO overflow     (push while FIFO full),
    ///< [0]:      FIFO underflow    (pop  while FIFO empty),Status of phm
    ///< fifo
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_strm_phm_fifo_sts_reg_t;

#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_WR_MASK (0x00000000U)


///< HHlds the value of phm_fifo status bits
///< [31:DEPTHWIDTH+8]:  0,
///< [DEPTHWIDTH+7:8]:  FIFO depth,
///< [7]:      FIFO full         (FIFO depth == FIFO size),
///< [6]:      FIFO almost full  (FIFO depth >= high watermark),
///< [5]:      FIFO almost empty (FIFO depth <= low  watermark),
///< [4]:      FIFO empty        (FIFO depth == 0),
///< [3]:                    Reserved,
///< [2]:      FIFO parity error (always 0),
///< [1]:      FIFO overflow     (push while FIFO full),
///< [0]:      FIFO underflow    (pop  while FIFO empty),Status of phm
///< fifo
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_PHM_FIFO_STAT_BF_OFF ( 0)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_PHM_FIFO_STAT_BF_WID (32)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_PHM_FIFO_STAT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_PHM_FIFO_STAT_BF_DEF (0x00000000)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_ARR_SZ0 (16)
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_APB_MEM_RDATA[16] register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_APB_MEM_RDATA
  * TX APB MEM Read Data
  */

typedef union {
  struct {
    uint32_t APB_MEM_RDATA : 32;
    ///< holds the 32 bit read data.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_apb_rdata_reg_t;

#define JESD_TX_GLUE_APB_RDATA_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_APB_RDATA_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_APB_RDATA_WR_MASK (0x00000000U)


///< holds the 32 bit read data.
#define JESD_TX_GLUE_APB_RDATA_APB_RDATA_BF_OFF ( 0)
#define JESD_TX_GLUE_APB_RDATA_APB_RDATA_BF_WID (32)
#define JESD_TX_GLUE_APB_RDATA_APB_RDATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_APB_RDATA_APB_RDATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_APB_RDATA_ARR_SZ0 (16)
#define JESD_TX_GLUE_APB_RDATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_WNDW_ERR_THRSH[2] register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_WNDW_ERR_THRSH
  * Error Threshold Value for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t ERR_THRSH : 19;
    ///< Error count Threshold value. Error is generated the current accumulated
    ///< count from alll enabled sub windows matches or exceeds this value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_wndw_err_thrsh_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_RD_MASK (0x0007ffffU)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_WR_MASK (0x0007ffffU)


///< Error count Threshold value. Error is generated the current accumulated
///< count from alll enabled sub windows matches or exceeds this value.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_WID (19)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_MSK (0x0007FFFF)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_ERR_THRSH_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_ARR_SZ0 (2)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_WNDW_ERR_WNDW_NUM[2] register description at address offset 0x310
  *
  * Register default value:        0x00000007
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_WNDW_ERR_WNDW_NUM
  * Error sub window count for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t WNDW_CNT : 3;
    ///< Each window based error implements 8 16-bit error windows to calculate
    ///< sliding window error count.             This register selects number
    ///< of sub windows enabled for aparticular error type.       3'd0 - Single
    ///< sub window.       3'd1 - 2 sub windows.       3'd2 - 3 sub windows.
    ///< 3'd3 - 4 sub windows.       3'd4 - 5 sub windows.       3'd5 - 6 sub
    ///< windows.       3'd6 - 7 sub windows.       3'd7 - 8 sub windows.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_wndw_err_wndw_num_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_DEFAULT (0x00000007U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_RD_MASK (0x00000007U)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_WR_MASK (0x00000007U)


///< Each window based error implements 8 16-bit error windows to calculate
///< sliding window error count.             This register selects number
///< of sub windows enabled for aparticular error type.       3'd0 - Single
///< sub window.       3'd1 - 2 sub windows.       3'd2 - 3 sub windows.
///< 3'd3 - 4 sub windows.       3'd4 - 5 sub windows.       3'd5 - 6 sub
///< windows.       3'd6 - 7 sub windows.       3'd7 - 8 sub windows.
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_WID ( 3)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_MSK (0x00000007)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_WNDW_CNT_BF_DEF (0x00000007)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_ARR_SZ0 (2)
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_XCLK_WNDW_ERR_WNDW_TIMER[2] register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_XCLK_WNDW_ERR_WNDW_TIMER
  * Error sub window Timer Value for windowed counter based errors
  */

typedef union {
  struct {
    uint32_t ERR_TIMER : 16;
    ///< Timer count value for sub error windows. When timer reaches this value
    ///< all sub windows will be updated with previous error window value i.e
    ///< window count slides.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_xclk_wndw_err_wndw_timer_reg_t;

#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_RD_MASK (0x0000ffffU)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_WR_MASK (0x0000ffffU)


///< Timer count value for sub error windows. When timer reaches this value
///< all sub windows will be updated with previous error window value i.e
///< window count slides.
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_WID (16)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_MSK (0x0000FFFF)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_ERR_TIMER_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_ARR_SZ0 (2)
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_DBG_CAP_REG0[4] register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_DBG_CAP_REG0
  * Tx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_dbg_cap_reg0_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_ARR_SZ0 (4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG0_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_DBG_CAP_REG1[4] register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_DBG_CAP_REG1
  * Tx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_dbg_cap_reg1_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_ARR_SZ0 (4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG1_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_DBG_CAP_REG2[4] register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_DBG_CAP_REG2
  * Tx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_dbg_cap_reg2_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_ARR_SZ0 (4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG2_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SMPL_CLK_DBG_CAP_REG3[4] register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SMPL_CLK_DBG_CAP_REG3
  * Tx Sample clock debug signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_smpl_clk_dbg_cap_reg3_reg_t;

#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_ARR_SZ0 (4)
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG3_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ECC_B0_ERR_STATUS[16] register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ECC_B0_ERR_STATUS
  * TX ecc error status
  */

typedef union {
  struct {
    uint32_t ECC_ERR_ADDR : 6;
    ///< This field holds the address where ecc error occured
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t ECC_ERR_SYND : 10;
    ///< This field holds the ecc syndrome when ecc error occured
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t ECC_MULTI_BIT_ERR : 1;
    ///< This field is set when multi bit error is occured
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t ECC_SINGLE_BIT_ERR : 1;
    ///< This field is set when single bit error is occured
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ecc_b0_err_stat_reg_t;

#define JESD_TX_GLUE_ECC_B0_ERR_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_RD_MASK (0x0003ffffU)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_WR_MASK (0x00000000U)


///< This field holds the address where ecc error occured
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_ADDR_BF_OFF ( 0)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_ADDR_BF_WID ( 6)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_ADDR_BF_MSK (0x0000003F)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_ADDR_BF_DEF (0x00000000)

///< This field holds the ecc syndrome when ecc error occured
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_SYND_BF_OFF ( 6)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_SYND_BF_WID (10)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_SYND_BF_MSK (0x0000FFC0)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_ERR_SYND_BF_DEF (0x00000000)

///< This field is set when multi bit error is occured
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_MULTI_BIT_ERR_BF_OFF (16)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_MULTI_BIT_ERR_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_MULTI_BIT_ERR_BF_MSK (0x00010000)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_MULTI_BIT_ERR_BF_DEF (0x00000000)

///< This field is set when single bit error is occured
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_OFF (17)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_MSK (0x00020000)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_DEF (0x00000000)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ARR_SZ0 (16)
#define JESD_TX_GLUE_ECC_B0_ERR_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_ECC_B1_ERR_STATUS[16] register description at address offset 0x3c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_ECC_B1_ERR_STATUS
  * TX ecc error status
  */

typedef union {
  struct {
    uint32_t ECC_ERR_ADDR : 6;
    ///< This field holds the address where ecc error occured
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t ECC_ERR_SYND : 10;
    ///< This field holds the ecc syndrome when ecc error occured
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t ECC_MULTI_BIT_ERR : 1;
    ///< This field is set when multi bit error is occured
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t ECC_SINGLE_BIT_ERR : 1;
    ///< This field is set when single bit error is occured
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesd_tx_glue_ecc_b1_err_stat_reg_t;

#define JESD_TX_GLUE_ECC_B1_ERR_STAT_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_RD_MASK (0x0003ffffU)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_WR_MASK (0x00000000U)


///< This field holds the address where ecc error occured
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_ADDR_BF_OFF ( 0)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_ADDR_BF_WID ( 6)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_ADDR_BF_MSK (0x0000003F)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_ADDR_BF_DEF (0x00000000)

///< This field holds the ecc syndrome when ecc error occured
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_SYND_BF_OFF ( 6)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_SYND_BF_WID (10)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_SYND_BF_MSK (0x0000FFC0)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_ERR_SYND_BF_DEF (0x00000000)

///< This field is set when multi bit error is occured
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_MULTI_BIT_ERR_BF_OFF (16)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_MULTI_BIT_ERR_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_MULTI_BIT_ERR_BF_MSK (0x00010000)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_MULTI_BIT_ERR_BF_DEF (0x00000000)

///< This field is set when single bit error is occured
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_OFF (17)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_WID ( 1)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_MSK (0x00020000)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ECC_SINGLE_BIT_ERR_BF_DEF (0x00000000)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ARR_SZ0 (16)
#define JESD_TX_GLUE_ECC_B1_ERR_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_MIN_OCCUPANCY[16] register description at address offset 0x400
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_MIN_OCCUPANCY
  * TX TSB min occupancy
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the minimum occupancy level of TSB during the
    ///< dataflow post tsb read trig.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_min_occupancy_reg_t;

#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_DEFAULT (0xffffffffU)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_WR_MASK (0x00000000U)


///< This register store the minimum occupancy level of TSB during the
///< dataflow post tsb read trig.
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_CNT_BF_WID (32)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_CNT_BF_DEF (0xFFFFFFFF)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_ARR_SZ0 (16)
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_MAX_OCCUPANCY[16] register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_MAX_OCCUPANCY
  * TX TSB max occupancy
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the maximum occupancy level of TSB during the
    ///< dataflow post tsb read trig.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_max_occupancy_reg_t;

#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_WR_MASK (0x00000000U)


///< This register store the maximum occupancy level of TSB during the
///< dataflow post tsb read trig.
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_CNT_BF_WID (32)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_CNT_BF_DEF (0x00000000)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_ARR_SZ0 (16)
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_DEPTH_AT_READ_TRIG[16] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_DEPTH_AT_READ_TRIG
  * tx tsb depth when read_trig
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the sanp shot of tsb depth when read trig happens.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_depth_at_read_trig_reg_t;

#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_WR_MASK (0x00000000U)


///< This register store the sanp shot of tsb depth when read trig happens.
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_CNT_BF_WID (32)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_CNT_BF_DEF (0x00000000)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_ARR_SZ0 (16)
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_TSB_DEPTH[16] register description at address offset 0x4c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_TSB_DEPTH
  * dynamic tx tsb depth
  */

typedef union {
  struct {
    uint32_t COUNT : 32;
    ///< This register store the  tsb depth  continously update it based on
    ///< the dataflow .
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_tsb_depth_reg_t;

#define JESD_TX_GLUE_TSB_DEPTH_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_TSB_DEPTH_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_TSB_DEPTH_WR_MASK (0x00000000U)


///< This register store the  tsb depth  continously update it based on
///< the dataflow .
#define JESD_TX_GLUE_TSB_DEPTH_CNT_BF_OFF ( 0)
#define JESD_TX_GLUE_TSB_DEPTH_CNT_BF_WID (32)
#define JESD_TX_GLUE_TSB_DEPTH_CNT_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_TSB_DEPTH_CNT_BF_DEF (0x00000000)
#define JESD_TX_GLUE_TSB_DEPTH_ARR_SZ0 (16)
#define JESD_TX_GLUE_TSB_DEPTH_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SP_MON_CAP_REG0[4] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SP_MON_CAP_REG0
  * Sync Point signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_sp_mon_cap_reg0_reg_t;

#define JESD_TX_GLUE_SP_MON_CAP_REG0_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_ARR_SZ0 (4)
#define JESD_TX_GLUE_SP_MON_CAP_REG0_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SP_MON_CAP_REG1[4] register description at address offset 0x510
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SP_MON_CAP_REG1
  * Sync Point signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_sp_mon_cap_reg1_reg_t;

#define JESD_TX_GLUE_SP_MON_CAP_REG1_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_ARR_SZ0 (4)
#define JESD_TX_GLUE_SP_MON_CAP_REG1_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_SP_MON_CAP_REG2[4] register description at address offset 0x520
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_SP_MON_CAP_REG2
  * Sync Point signal capture value
  */

typedef union {
  struct {
    uint32_t CAP_DATA : 32;
    ///< 32-bit signal capture value.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_sp_mon_cap_reg2_reg_t;

#define JESD_TX_GLUE_SP_MON_CAP_REG2_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_WR_MASK (0x00000000U)


///< 32-bit signal capture value.
#define JESD_TX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_WID (32)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_CAP_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_ARR_SZ0 (4)
#define JESD_TX_GLUE_SP_MON_CAP_REG2_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_CONV_SMPL_INIT_DATA[128] register description at address offset 0x800
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_CONV_SMPL_INIT_DATA
  * TX IP Converter Sample Initial data
  */

typedef union {
  struct {
    uint32_t CONV_SMPL_INIT_DATA : 32;
    ///< This set of registers holds the Initial data pattern to be driven
    ///< on TX IP sample interface until data path is switch to read from DIG
    ///< RF Antenna data.        Each 32-bit register holds data for 2 16-bit
    ///< samples.              128 32-bit register are needed to drive 4096
    ///< bit IP sample interface. (32 coverters and 8 16-bit samples per converter).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_conv_smpl_init_data_reg_t;

#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_WR_MASK (0xffffffffU)


///< This set of registers holds the Initial data pattern to be driven
///< on TX IP sample interface until data path is switch to read from DIG
///< RF Antenna data.        Each 32-bit register holds data for 2 16-bit
///< samples.              128 32-bit register are needed to drive 4096
///< bit IP sample interface. (32 coverters and 8 16-bit samples per converter).
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_CONV_SMPL_INIT_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_CONV_SMPL_INIT_DATA_BF_WID (32)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_CONV_SMPL_INIT_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_CONV_SMPL_INIT_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_ARR_SZ0 (128)
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_TX_GLUE_MEM_JESDABC_TX_GLUE_TX_IP_SMPL_INTF_DATA[128] register description at address offset 0xa00
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_tx_glue_MEM/jesdabc_tx_glue/TX_IP_SMPL_INTF_DATA
  * TX_IP sample interface data
  */

typedef union {
  struct {
    uint32_t SAMPLE_INTF_DATA : 32;
    ///< This set of registers holds data pattern  on TX IP sample interface.
    ///< Each 32-bit register holds data for 2 16-bit samples.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesd_tx_glue_ip_smpl_intf_data_reg_t;

#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_DEFAULT (0x00000000U)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_RD_MASK (0xffffffffU)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_WR_MASK (0x00000000U)


///< This set of registers holds data pattern  on TX IP sample interface.
///< Each 32-bit register holds data for 2 16-bit samples.
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_SAMPLE_INTF_DATA_BF_OFF ( 0)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_SAMPLE_INTF_DATA_BF_WID (32)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_SAMPLE_INTF_DATA_BF_MSK (0xFFFFFFFF)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_SAMPLE_INTF_DATA_BF_DEF (0x00000000)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_ARR_SZ0 (128)
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define JESD_TX_GLUE_SCRATCH_REG(_BASE) ((jesd_tx_glue_scratch_reg_t*) JESD_TX_GLUE_SCRATCH_ADR(_BASE))
#define JESD_TX_GLUE_APB_BRDG_STAT_REG(_BASE) ((jesd_tx_glue_apb_brdg_stat_reg_t*) JESD_TX_GLUE_APB_BRDG_STAT_ADR(_BASE))
#define JESD_TX_GLUE_STRM_INST_CNT_REG(_BASE) ((jesd_tx_glue_strm_inst_cnt_reg_t*) JESD_TX_GLUE_STRM_INST_CNT_ADR(_BASE))
#define JESD_TX_GLUE_CONV_DP_CFG_REG(_BASE) ((jesd_tx_glue_conv_dp_cfg_reg_t*) JESD_TX_GLUE_CONV_DP_CFG_ADR(_BASE))
#define JESD_TX_GLUE_FB_CONV_DP_CFG_REG(_BASE) ((jesd_tx_glue_fb_conv_dp_cfg_reg_t*) JESD_TX_GLUE_FB_CONV_DP_CFG_ADR(_BASE))
#define JESD_TX_GLUE_DATAPATH_GATE_SEL_REG(_BASE) ((jesd_tx_glue_datapath_gate_sel_reg_t*) JESD_TX_GLUE_DATAPATH_GATE_SEL_ADR(_BASE))
#define JESD_TX_GLUE_PHM_FRAME_CFG_REG(_BASE) ((jesd_tx_glue_phm_frame_cfg_reg_t*) JESD_TX_GLUE_PHM_FRAME_CFG_ADR(_BASE))
#define JESD_TX_GLUE_FOVR_CFG_REG(_BASE) ((jesd_tx_glue_fovr_cfg_reg_t*) JESD_TX_GLUE_FOVR_CFG_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_EN_REG(_BASE) ((jesd_tx_glue_strm_phm_en_reg_t*) JESD_TX_GLUE_STRM_PHM_EN_ADR(_BASE))
#define JESD_TX_GLUE_STRM_FOVR_EN_REG(_BASE) ((jesd_tx_glue_strm_fovr_en_reg_t*) JESD_TX_GLUE_STRM_FOVR_EN_ADR(_BASE))
#define JESD_TX_GLUE_DATA_SRC_EN_REG(_BASE) ((jesd_tx_glue_data_src_en_reg_t*) JESD_TX_GLUE_DATA_SRC_EN_ADR(_BASE))
#define JESD_TX_GLUE_CAP_FRZ_EN_REG(_BASE) ((jesd_tx_glue_cap_frz_en_reg_t*) JESD_TX_GLUE_CAP_FRZ_EN_ADR(_BASE))
#define JESD_TX_GLUE_APB_RADDR_REG(_BASE) ((jesd_tx_glue_apb_raddr_reg_t*) JESD_TX_GLUE_APB_RADDR_ADR(_BASE))
#define JESD_TX_GLUE_APB_RD_REG(_BASE) ((jesd_tx_glue_apb_rd_reg_t*) JESD_TX_GLUE_APB_RD_ADR(_BASE))
#define JESD_TX_GLUE_FB_EN_EVENT_DLY_REG(_BASE) ((jesd_tx_glue_fb_en_event_dly_reg_t*) JESD_TX_GLUE_FB_EN_EVENT_DLY_ADR(_BASE))
#define JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_REG(_BASE) ((jesd_tx_glue_tsb_empty_water_mark_reg_t*) JESD_TX_GLUE_TSB_EMPTY_WATER_MARK_ADR(_BASE))
#define JESD_TX_GLUE_TSB_EMPTY_STAT_REG(_BASE) ((jesd_tx_glue_tsb_empty_stat_reg_t*) JESD_TX_GLUE_TSB_EMPTY_STAT_ADR(_BASE))
#define JESD_TX_GLUE_TSB_UNDERFLOW_STAT_REG(_BASE) ((jesd_tx_glue_tsb_underflow_stat_reg_t*) JESD_TX_GLUE_TSB_UNDERFLOW_STAT_ADR(_BASE))
#define JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_REG(_BASE) ((jesd_tx_glue_antenna_start_delay_cnt_reg_t*) JESD_TX_GLUE_ANTENNA_START_DELAY_CNT_ADR(_BASE))
#define JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_REG(_BASE) ((jesd_tx_glue_dp_start_trig0_delay_cnt_reg_t*) JESD_TX_GLUE_DP_START_TRIG0_DELAY_CNT_ADR(_BASE))
#define JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_REG(_BASE) ((jesd_tx_glue_sync_point_ip_req_dly_cnt_reg_t*) JESD_TX_GLUE_SYNC_POINT_IP_REQ_DLY_CNT_ADR(_BASE))
#define JESD_TX_GLUE_TSB_RD_TRIG_REG(_BASE) ((jesd_tx_glue_tsb_rd_trig_reg_t*) JESD_TX_GLUE_TSB_RD_TRIG_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_REG(_BASE) ((jesd_tx_glue_ip_smpl_tsb_data_en_reg_t*) JESD_TX_GLUE_IP_SMPL_TSB_DATA_EN_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_REG(_BASE) ((jesd_tx_glue_conv_smpl_intrlv_ctrl_reg_t*) JESD_TX_GLUE_CONV_SMPL_INTRLV_CTRL_ADR(_BASE))
#define JESD_TX_GLUE_PHM_SHIFT_NUM_REG(_BASE) ((jesd_tx_glue_phm_shift_num_reg_t*) JESD_TX_GLUE_PHM_SHIFT_NUM_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_ERR_STS_REG(_BASE) ((jesd_tx_glue_smpl_clk_err_sts_reg_t*) JESD_TX_GLUE_SMPL_CLK_ERR_STS_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_REG(_BASE) ((jesd_tx_glue_smpl_clk_intr_high_en_reg_t*) JESD_TX_GLUE_SMPL_CLK_INTR_HIGH_EN_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_REG(_BASE) ((jesd_tx_glue_smpl_clk_intr_low_en_reg_t*) JESD_TX_GLUE_SMPL_CLK_INTR_LOW_EN_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_ALM_EN_REG(_BASE) ((jesd_tx_glue_smpl_clk_alm_en_reg_t*) JESD_TX_GLUE_SMPL_CLK_ALM_EN_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_ERR_CLR_REG(_BASE) ((jesd_tx_glue_smpl_clk_err_clr_reg_t*) JESD_TX_GLUE_SMPL_CLK_ERR_CLR_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_ERR_FRC_REG(_BASE) ((jesd_tx_glue_smpl_clk_err_frc_reg_t*) JESD_TX_GLUE_SMPL_CLK_ERR_FRC_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_cnt_en_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_EN_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_cnt_clr_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_CLR_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_cnt_idx_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_IDX_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_cnt_rdata_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_CNT_RDATA_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_REG(_BASE) ((jesd_tx_glue_smpl_clk_sig_mon_en_reg_t*) JESD_TX_GLUE_SMPL_CLK_SIG_MON_EN_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_REG(_BASE) ((jesd_tx_glue_smpl_clk_sig_mon_cap_en_reg_t*) JESD_TX_GLUE_SMPL_CLK_SIG_MON_CAP_EN_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_REG(_BASE) ((jesd_tx_glue_smpl_clk_sig_mon_sts_clr_reg_t*) JESD_TX_GLUE_SMPL_CLK_SIG_MON_STS_CLR_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_REG(_BASE) ((jesd_tx_glue_smpl_clk_sig_mon_cfg_reg_t*) JESD_TX_GLUE_SMPL_CLK_SIG_MON_CFG_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_sig_sel_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_SIG_SEL_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_vld_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_VLD_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_FLIT_CNT_REG(_BASE) ((jesd_tx_glue_strm_rd_flit_cnt_reg_t*) JESD_TX_GLUE_STRM_RD_FLIT_CNT_ADR(_BASE))
#define JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_REG(_BASE) ((jesd_tx_glue_ant_rx_start_to_tsb_half_full_cnt_reg_t*) JESD_TX_GLUE_ANT_RX_START_TO_TSB_HALF_FULL_CNT_ADR(_BASE))
#define JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_REG(_BASE) ((jesd_tx_glue_strm_valid_to_tsb_half_full_cnt_reg_t*) JESD_TX_GLUE_STRM_VALID_TO_TSB_HALF_FULL_CNT_ADR(_BASE))
#define JESD_TX_GLUE_SRG_PAT_CFG_LOW_REG(_BASE) ((jesd_tx_glue_srg_pat_cfg_low_reg_t*) JESD_TX_GLUE_SRG_PAT_CFG_LOW_ADR(_BASE))
#define JESD_TX_GLUE_SRG_PAT_CFG_HIGH_REG(_BASE) ((jesd_tx_glue_srg_pat_cfg_high_reg_t*) JESD_TX_GLUE_SRG_PAT_CFG_HIGH_ADR(_BASE))
#define JESD_TX_GLUE_SRG_PAT_DEL_CFG_REG(_BASE) ((jesd_tx_glue_srg_pat_del_cfg_reg_t*) JESD_TX_GLUE_SRG_PAT_DEL_CFG_ADR(_BASE))
#define JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_REG(_BASE) ((jesd_tx_glue_srg_pat_period_cfg_reg_t*) JESD_TX_GLUE_SRG_PAT_PERIOD_CFG_ADR(_BASE))
#define JESD_TX_GLUE_SRG_PAT_EN_REG(_BASE) ((jesd_tx_glue_srg_pat_en_reg_t*) JESD_TX_GLUE_SRG_PAT_EN_ADR(_BASE))
#define JESD_TX_GLUE_ECC_CHK_DIS_REG(_BASE) ((jesd_tx_glue_ecc_chk_dis_reg_t*) JESD_TX_GLUE_ECC_CHK_DIS_ADR(_BASE))
#define JESD_TX_GLUE_ECC_FORCE_ERR_REG(_BASE) ((jesd_tx_glue_ecc_force_err_reg_t*) JESD_TX_GLUE_ECC_FORCE_ERR_ADR(_BASE))
#define JESD_TX_GLUE_ECC_FORCE_TYPE_REG(_BASE) ((jesd_tx_glue_ecc_force_type_reg_t*) JESD_TX_GLUE_ECC_FORCE_TYPE_ADR(_BASE))
#define JESD_TX_GLUE_ECC_STAT_CLR_REG(_BASE) ((jesd_tx_glue_ecc_stat_clr_reg_t*) JESD_TX_GLUE_ECC_STAT_CLR_ADR(_BASE))
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_REG(_BASE) ((jesd_tx_glue_antenna_rx_started_sp_byp_reg_t*) JESD_TX_GLUE_ANTENNA_RX_STARTED_SP_BYP_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_REG(_BASE) ((jesd_tx_glue_tsb_min_max_occupancy_capt_en_reg_t*) JESD_TX_GLUE_TSB_MIN_MAX_OCCUPANCY_CAPT_EN_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_vld_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG_VLD_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_VLD_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_vld_reg_t*) JESD_TX_GLUE_SP_MON_CAP_VLD_ADR(_BASE))
#define JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_REG(_BASE) ((jesd_tx_glue_antenna_rx_started_stat_reg_t*) JESD_TX_GLUE_ANTENNA_RX_STARTED_STAT_ADR(_BASE))
#define JESD_TX_GLUE_FB_MODE_CTRL_REG(_BASE) ((jesd_tx_glue_fb_mode_ctrl_reg_t*) JESD_TX_GLUE_FB_MODE_CTRL_ADR(_BASE))
#define JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_REG(_BASE) ((jesd_tx_glue_shift_cap_clr_stat_reg_t*) JESD_TX_GLUE_SHIFT_CAP_CLR_STAT_ADR(_BASE))
#define JESD_TX_GLUE_SHIFT_CAP_STAT_REG(_BASE) ((jesd_tx_glue_shift_cap_stat_reg_t*) JESD_TX_GLUE_SHIFT_CAP_STAT_ADR(_BASE))
#define JESD_TX_GLUE_SHIFT_CAP_EN_REG(_BASE) ((jesd_tx_glue_shift_cap_en_reg_t*) JESD_TX_GLUE_SHIFT_CAP_EN_ADR(_BASE))
#define JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_REG(_BASE) ((jesd_tx_glue_shift_cap_force_mode_reg_t*) JESD_TX_GLUE_SHIFT_CAP_FORCE_MODE_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_cap_en_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_CAP_EN_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_cap_clr_stat_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_CAP_CLR_STAT_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_cap_stat_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_CAP_STAT_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR0_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR0_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR1_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR1_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR2_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR2_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR3_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR3_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR4_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR4_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR5_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR5_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR6_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR6_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR7_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR7_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR8_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR8_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR9_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR9_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR10_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR10_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR11_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR11_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR12_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR12_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR13_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR13_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR14_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR14_ADR(_BASE))
#define JESD_TX_GLUE_STRM_RD_PTR15_REG(_BASE) ((jesd_tx_glue_strm_rd_ptr_reg_t*) JESD_TX_GLUE_STRM_RD_PTR15_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP0_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP0_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP1_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP1_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP2_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP2_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP3_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP3_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP4_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP4_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP5_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP5_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP6_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP6_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP7_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP7_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP8_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP8_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP9_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP9_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP10_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP10_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP11_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP11_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP12_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP12_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP13_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP13_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP14_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP14_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FOVR_MAP15_REG(_BASE) ((jesd_tx_glue_strm_phm_fovr_reg_t*) JESD_TX_GLUE_STRM_PHM_FOVR_MAP15_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS0_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS0_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS1_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS1_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS2_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS2_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS3_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS3_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS4_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS4_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS5_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS5_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS6_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS6_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS7_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS7_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS8_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS8_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS9_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS9_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS10_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS10_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS11_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS11_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS12_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS12_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS13_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS13_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS14_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS14_ADR(_BASE))
#define JESD_TX_GLUE_STRM_PHM_FIFO_STS15_REG(_BASE) ((jesd_tx_glue_strm_phm_fifo_sts_reg_t*) JESD_TX_GLUE_STRM_PHM_FIFO_STS15_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA0_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA0_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA1_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA1_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA2_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA2_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA3_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA3_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA4_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA4_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA5_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA5_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA6_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA6_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA7_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA7_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA8_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA8_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA9_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA9_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA10_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA10_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA11_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA11_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA12_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA12_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA13_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA13_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA14_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA14_ADR(_BASE))
#define JESD_TX_GLUE_APB_RDATA15_REG(_BASE) ((jesd_tx_glue_apb_rdata_reg_t*) JESD_TX_GLUE_APB_RDATA15_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH0_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_thrsh_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH0_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH1_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_thrsh_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_THRSH1_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM0_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_wndw_num_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM0_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM1_REG(_BASE) ((jesd_tx_glue_smpl_clk_wndw_err_wndw_num_reg_t*) JESD_TX_GLUE_SMPL_CLK_WNDW_ERR_WNDW_NUM1_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER0_REG(_BASE) ((jesd_tx_glue_smpl_xclk_wndw_err_wndw_timer_reg_t*) JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER0_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER1_REG(_BASE) ((jesd_tx_glue_smpl_xclk_wndw_err_wndw_timer_reg_t*) JESD_TX_GLUE_SMPL_XCLK_WNDW_ERR_WNDW_TIMER1_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG00_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG00_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG01_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG01_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG02_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG02_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG03_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg0_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG03_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG10_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG10_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG11_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG11_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG12_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG12_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG13_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg1_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG13_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG20_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG20_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG21_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG21_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG22_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG22_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG23_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg2_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG23_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG30_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG30_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG31_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG31_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG32_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG32_ADR(_BASE))
#define JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG33_REG(_BASE) ((jesd_tx_glue_smpl_clk_dbg_cap_reg3_reg_t*) JESD_TX_GLUE_SMPL_CLK_DBG_CAP_REG33_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT0_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT0_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT1_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT1_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT2_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT2_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT3_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT3_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT4_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT4_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT5_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT5_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT6_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT6_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT7_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT7_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT8_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT8_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT9_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT9_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT10_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT10_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT11_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT11_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT12_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT12_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT13_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT13_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT14_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT14_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B0_ERR_STAT15_REG(_BASE) ((jesd_tx_glue_ecc_b0_err_stat_reg_t*) JESD_TX_GLUE_ECC_B0_ERR_STAT15_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT0_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT0_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT1_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT1_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT2_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT2_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT3_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT3_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT4_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT4_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT5_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT5_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT6_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT6_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT7_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT7_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT8_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT8_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT9_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT9_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT10_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT10_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT11_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT11_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT12_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT12_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT13_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT13_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT14_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT14_ADR(_BASE))
#define JESD_TX_GLUE_ECC_B1_ERR_STAT15_REG(_BASE) ((jesd_tx_glue_ecc_b1_err_stat_reg_t*) JESD_TX_GLUE_ECC_B1_ERR_STAT15_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY0_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY0_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY1_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY1_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY2_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY2_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY3_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY3_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY4_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY4_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY5_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY5_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY6_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY6_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY7_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY7_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY8_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY8_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY9_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY9_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY10_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY10_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY11_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY11_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY12_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY12_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY13_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY13_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY14_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY14_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MIN_OCCUPANCY15_REG(_BASE) ((jesd_tx_glue_tsb_min_occupancy_reg_t*) JESD_TX_GLUE_TSB_MIN_OCCUPANCY15_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY0_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY0_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY1_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY1_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY2_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY2_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY3_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY3_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY4_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY4_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY5_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY5_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY6_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY6_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY7_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY7_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY8_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY8_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY9_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY9_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY10_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY10_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY11_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY11_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY12_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY12_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY13_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY13_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY14_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY14_ADR(_BASE))
#define JESD_TX_GLUE_TSB_MAX_OCCUPANCY15_REG(_BASE) ((jesd_tx_glue_tsb_max_occupancy_reg_t*) JESD_TX_GLUE_TSB_MAX_OCCUPANCY15_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG0_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG0_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG1_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG1_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG2_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG2_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG3_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG3_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG4_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG4_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG5_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG5_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG6_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG6_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG7_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG7_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG8_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG8_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG9_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG9_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG10_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG10_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG11_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG11_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG12_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG12_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG13_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG13_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG14_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG14_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG15_REG(_BASE) ((jesd_tx_glue_tsb_depth_at_read_trig_reg_t*) JESD_TX_GLUE_TSB_DEPTH_AT_READ_TRIG15_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH0_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH0_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH1_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH1_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH2_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH2_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH3_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH3_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH4_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH4_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH5_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH5_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH6_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH6_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH7_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH7_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH8_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH8_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH9_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH9_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH10_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH10_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH11_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH11_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH12_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH12_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH13_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH13_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH14_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH14_ADR(_BASE))
#define JESD_TX_GLUE_TSB_DEPTH15_REG(_BASE) ((jesd_tx_glue_tsb_depth_reg_t*) JESD_TX_GLUE_TSB_DEPTH15_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG00_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg0_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG00_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG01_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg0_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG01_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG02_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg0_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG02_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG03_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg0_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG03_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG10_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg1_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG10_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG11_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg1_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG11_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG12_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg1_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG12_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG13_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg1_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG13_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG20_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg2_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG20_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG21_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg2_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG21_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG22_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg2_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG22_ADR(_BASE))
#define JESD_TX_GLUE_SP_MON_CAP_REG23_REG(_BASE) ((jesd_tx_glue_sp_mon_cap_reg2_reg_t*) JESD_TX_GLUE_SP_MON_CAP_REG23_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA0_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA0_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA1_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA1_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA2_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA2_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA3_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA3_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA4_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA4_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA5_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA5_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA6_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA6_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA7_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA7_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA8_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA8_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA9_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA9_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA10_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA10_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA11_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA11_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA12_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA12_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA13_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA13_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA14_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA14_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA15_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA15_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA16_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA16_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA17_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA17_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA18_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA18_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA19_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA19_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA20_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA20_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA21_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA21_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA22_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA22_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA23_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA23_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA24_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA24_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA25_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA25_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA26_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA26_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA27_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA27_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA28_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA28_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA29_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA29_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA30_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA30_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA31_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA31_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA32_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA32_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA33_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA33_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA34_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA34_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA35_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA35_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA36_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA36_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA37_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA37_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA38_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA38_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA39_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA39_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA40_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA40_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA41_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA41_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA42_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA42_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA43_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA43_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA44_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA44_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA45_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA45_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA46_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA46_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA47_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA47_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA48_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA48_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA49_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA49_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA50_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA50_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA51_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA51_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA52_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA52_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA53_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA53_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA54_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA54_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA55_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA55_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA56_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA56_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA57_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA57_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA58_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA58_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA59_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA59_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA60_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA60_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA61_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA61_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA62_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA62_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA63_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA63_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA64_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA64_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA65_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA65_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA66_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA66_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA67_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA67_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA68_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA68_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA69_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA69_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA70_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA70_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA71_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA71_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA72_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA72_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA73_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA73_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA74_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA74_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA75_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA75_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA76_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA76_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA77_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA77_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA78_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA78_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA79_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA79_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA80_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA80_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA81_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA81_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA82_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA82_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA83_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA83_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA84_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA84_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA85_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA85_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA86_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA86_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA87_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA87_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA88_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA88_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA89_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA89_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA90_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA90_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA91_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA91_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA92_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA92_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA93_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA93_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA94_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA94_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA95_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA95_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA96_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA96_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA97_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA97_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA98_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA98_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA99_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA99_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA100_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA100_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA101_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA101_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA102_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA102_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA103_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA103_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA104_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA104_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA105_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA105_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA106_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA106_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA107_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA107_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA108_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA108_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA109_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA109_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA110_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA110_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA111_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA111_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA112_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA112_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA113_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA113_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA114_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA114_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA115_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA115_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA116_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA116_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA117_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA117_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA118_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA118_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA119_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA119_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA120_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA120_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA121_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA121_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA122_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA122_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA123_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA123_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA124_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA124_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA125_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA125_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA126_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA126_ADR(_BASE))
#define JESD_TX_GLUE_CONV_SMPL_INIT_DATA127_REG(_BASE) ((jesd_tx_glue_conv_smpl_init_data_reg_t*) JESD_TX_GLUE_CONV_SMPL_INIT_DATA127_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA0_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA0_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA1_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA1_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA2_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA2_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA3_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA3_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA4_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA4_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA5_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA5_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA6_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA6_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA7_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA7_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA8_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA8_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA9_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA9_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA10_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA10_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA11_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA11_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA12_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA12_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA13_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA13_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA14_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA14_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA15_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA15_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA16_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA16_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA17_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA17_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA18_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA18_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA19_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA19_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA20_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA20_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA21_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA21_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA22_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA22_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA23_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA23_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA24_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA24_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA25_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA25_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA26_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA26_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA27_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA27_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA28_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA28_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA29_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA29_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA30_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA30_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA31_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA31_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA32_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA32_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA33_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA33_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA34_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA34_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA35_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA35_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA36_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA36_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA37_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA37_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA38_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA38_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA39_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA39_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA40_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA40_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA41_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA41_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA42_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA42_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA43_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA43_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA44_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA44_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA45_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA45_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA46_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA46_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA47_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA47_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA48_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA48_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA49_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA49_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA50_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA50_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA51_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA51_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA52_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA52_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA53_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA53_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA54_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA54_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA55_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA55_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA56_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA56_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA57_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA57_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA58_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA58_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA59_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA59_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA60_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA60_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA61_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA61_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA62_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA62_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA63_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA63_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA64_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA64_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA65_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA65_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA66_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA66_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA67_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA67_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA68_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA68_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA69_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA69_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA70_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA70_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA71_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA71_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA72_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA72_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA73_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA73_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA74_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA74_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA75_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA75_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA76_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA76_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA77_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA77_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA78_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA78_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA79_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA79_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA80_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA80_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA81_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA81_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA82_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA82_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA83_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA83_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA84_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA84_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA85_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA85_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA86_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA86_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA87_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA87_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA88_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA88_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA89_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA89_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA90_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA90_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA91_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA91_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA92_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA92_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA93_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA93_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA94_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA94_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA95_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA95_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA96_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA96_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA97_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA97_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA98_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA98_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA99_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA99_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA100_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA100_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA101_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA101_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA102_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA102_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA103_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA103_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA104_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA104_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA105_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA105_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA106_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA106_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA107_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA107_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA108_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA108_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA109_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA109_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA110_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA110_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA111_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA111_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA112_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA112_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA113_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA113_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA114_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA114_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA115_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA115_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA116_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA116_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA117_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA117_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA118_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA118_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA119_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA119_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA120_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA120_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA121_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA121_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA122_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA122_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA123_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA123_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA124_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA124_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA125_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA125_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA126_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA126_ADR(_BASE))
#define JESD_TX_GLUE_IP_SMPL_INTF_DATA127_REG(_BASE) ((jesd_tx_glue_ip_smpl_intf_data_reg_t*) JESD_TX_GLUE_IP_SMPL_INTF_DATA127_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    jesd_tx_glue_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesd_tx_glue_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesd_tx_glue_strm_inst_cnt_reg_t TX_STRM_INST_CNT; /*< Address offset = 0x10 */
    jesd_tx_glue_conv_dp_cfg_reg_t TX_CONV_DP_CFG; /*< Address offset = 0x14 */
    jesd_tx_glue_fb_conv_dp_cfg_reg_t TX_FB_CONV_DP_CFG; /*< Address offset = 0x18 */
    jesd_tx_glue_datapath_gate_sel_reg_t TX_DATAPATH_GATE_SEL; /*< Address offset = 0x1c */
    jesd_tx_glue_phm_frame_cfg_reg_t TX_PHM_FRAME_CFG; /*< Address offset = 0x20 */
    jesd_tx_glue_fovr_cfg_reg_t TX_FOVR_CFG; /*< Address offset = 0x24 */
    jesd_tx_glue_strm_phm_en_reg_t TX_STRM_PHM_EN; /*< Address offset = 0x28 */
    jesd_tx_glue_strm_fovr_en_reg_t TX_STRM_FOVR_EN; /*< Address offset = 0x2c */
    jesd_tx_glue_data_src_en_reg_t TX_DATA_SRC_EN; /*< Address offset = 0x30 */
    jesd_tx_glue_cap_frz_en_reg_t TX_CAP_FRZ_EN; /*< Address offset = 0x34 */
    jesd_tx_glue_apb_raddr_reg_t TX_APB_RADDR; /*< Address offset = 0x38 */
    jesd_tx_glue_apb_rd_reg_t TX_APB_RD; /*< Address offset = 0x3c */
    jesd_tx_glue_fb_en_event_dly_reg_t TX_FB_EN_EVENT_DLY; /*< Address offset = 0x40 */
    jesd_tx_glue_tsb_empty_water_mark_reg_t TX_TSB_EMPTY_WATER_MARK; /*< Address offset = 0x44 */
    jesd_tx_glue_tsb_empty_stat_reg_t TX_TSB_EMPTY_STAT; /*< Address offset = 0x48 */
    jesd_tx_glue_tsb_underflow_stat_reg_t TX_TSB_UNDERFLOW_STAT; /*< Address offset = 0x4c */
    jesd_tx_glue_antenna_start_delay_cnt_reg_t TX_ANTENNA_START_DELAY_CNT; /*< Address offset = 0x50 */
    jesd_tx_glue_dp_start_trig0_delay_cnt_reg_t TX_DP_START_TRIG0_DELAY_CNT; /*< Address offset = 0x54 */
    jesd_tx_glue_sync_point_ip_req_dly_cnt_reg_t TX_SYNC_POINT_IP_REQ_DLY_CNT; /*< Address offset = 0x58 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x5c */
    jesd_tx_glue_tsb_rd_trig_reg_t TX_TSB_RD_TRIG; /*< Address offset = 0x60 */
    jesd_tx_glue_ip_smpl_tsb_data_en_reg_t TX_IP_SMPL_TSB_DATA_EN; /*< Address offset = 0x64 */
    jesd_tx_glue_conv_smpl_intrlv_ctrl_reg_t TX_CONV_SMPL_INTRLV_CTRL; /*< Address offset = 0x68 */
    jesd_tx_glue_phm_shift_num_reg_t TX_PHM_SHIFT_NUM; /*< Address offset = 0x6c */
    jesd_tx_glue_smpl_clk_err_sts_reg_t TX_SMPL_CLK_ERR_STS; /*< Address offset = 0x70 */
    jesd_tx_glue_smpl_clk_intr_high_en_reg_t TX_SMPL_CLK_INTR_HIGH_EN; /*< Address offset = 0x74 */
    jesd_tx_glue_smpl_clk_intr_low_en_reg_t TX_SMPL_CLK_INTR_LOW_EN; /*< Address offset = 0x78 */
    jesd_tx_glue_smpl_clk_alm_en_reg_t TX_SMPL_CLK_ALM_EN; /*< Address offset = 0x7c */
    jesd_tx_glue_smpl_clk_err_clr_reg_t TX_SMPL_CLK_ERR_CLR; /*< Address offset = 0x80 */
    jesd_tx_glue_smpl_clk_err_frc_reg_t TX_SMPL_CLK_ERR_FRC; /*< Address offset = 0x84 */
    jesd_tx_glue_smpl_clk_wndw_err_cnt_en_reg_t TX_SMPL_CLK_WNDW_ERR_CNT_EN; /*< Address offset = 0x88 */
    jesd_tx_glue_smpl_clk_wndw_err_cnt_clr_reg_t TX_SMPL_CLK_WNDW_ERR_CNT_CLR; /*< Address offset = 0x8c */
    jesd_tx_glue_smpl_clk_wndw_err_cnt_idx_reg_t TX_SMPL_CLK_WNDW_ERR_CNT_IDX; /*< Address offset = 0x90 */
    jesd_tx_glue_smpl_clk_wndw_err_cnt_rdata_reg_t TX_SMPL_CLK_WNDW_ERR_CNT_RDATA; /*< Address offset = 0x94 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x98 */
    jesd_tx_glue_smpl_clk_sig_mon_en_reg_t TX_SMPL_CLK_SIG_MON_EN; /*< Address offset = 0xa0 */
    jesd_tx_glue_smpl_clk_sig_mon_cap_en_reg_t TX_SMPL_CLK_SIG_MON_CAP_EN; /*< Address offset = 0xa4 */
    jesd_tx_glue_smpl_clk_sig_mon_sts_clr_reg_t TX_SMPL_CLK_SIG_MON_STS_CLR; /*< Address offset = 0xa8 */
    jesd_tx_glue_smpl_clk_sig_mon_cfg_reg_t TX_SMPL_CLK_SIG_MON_CFG; /*< Address offset = 0xac */
    jesd_tx_glue_smpl_clk_dbg_sig_sel_reg_t TX_SMPL_CLK_DBG_SIG_SEL; /*< Address offset = 0xb0 */
    jesd_tx_glue_smpl_clk_dbg_cap_vld_reg_t TX_SMPL_CLK_DBG_CAP_VLD; /*< Address offset = 0xb4 */
    const uint8_t        reservedArea3 [8];   /*< Address offset = 0xb8 */
    jesd_tx_glue_strm_rd_flit_cnt_reg_t TX_STRM_RD_FLIT_CNT; /*< Address offset = 0xc0 */
    jesd_tx_glue_ant_rx_start_to_tsb_half_full_cnt_reg_t TX_ANT_RX_START_TO_TSB_HALF_FULL_CNT; /*< Address offset = 0xc4 */
    jesd_tx_glue_strm_valid_to_tsb_half_full_cnt_reg_t TX_STRM_VALID_TO_TSB_HALF_FULL_CNT; /*< Address offset = 0xc8 */
    jesd_tx_glue_srg_pat_cfg_low_reg_t TX_SRG_PAT_CFG_LOW; /*< Address offset = 0xcc */
    jesd_tx_glue_srg_pat_cfg_high_reg_t TX_SRG_PAT_CFG_HIGH; /*< Address offset = 0xd0 */
    jesd_tx_glue_srg_pat_del_cfg_reg_t TX_SRG_PAT_DEL_CFG; /*< Address offset = 0xd4 */
    jesd_tx_glue_srg_pat_period_cfg_reg_t TX_SRG_PAT_PERIOD_CFG; /*< Address offset = 0xd8 */
    jesd_tx_glue_srg_pat_en_reg_t TX_SRG_PAT_EN; /*< Address offset = 0xdc */
    jesd_tx_glue_ecc_chk_dis_reg_t TX_ECC_CHK_DIS; /*< Address offset = 0xe0 */
    jesd_tx_glue_ecc_force_err_reg_t TX_ECC_FORCE_ERR; /*< Address offset = 0xe4 */
    jesd_tx_glue_ecc_force_type_reg_t TX_ECC_FORCE_TYPE; /*< Address offset = 0xe8 */
    jesd_tx_glue_ecc_stat_clr_reg_t TX_ECC_STAT_CLR; /*< Address offset = 0xec */
    jesd_tx_glue_antenna_rx_started_sp_byp_reg_t TX_ANTENNA_RX_STARTED_SP_BYP; /*< Address offset = 0xf0 */
    jesd_tx_glue_tsb_min_max_occupancy_capt_en_reg_t TX_TSB_MIN_MAX_OCCUPANCY_CAPT_EN; /*< Address offset = 0xf4 */
    jesd_tx_glue_tsb_depth_at_read_trig_vld_reg_t TX_TSB_DEPTH_AT_READ_TRIG_VLD; /*< Address offset = 0xf8 */
    jesd_tx_glue_sp_mon_cap_vld_reg_t TX_SP_MON_CAP_VLD; /*< Address offset = 0xfc */
    jesd_tx_glue_antenna_rx_started_stat_reg_t TX_ANTENNA_RX_STARTED_STAT; /*< Address offset = 0x100 */
    jesd_tx_glue_fb_mode_ctrl_reg_t TX_FB_MODE_CTRL; /*< Address offset = 0x104 */
    jesd_tx_glue_shift_cap_clr_stat_reg_t TX_SHIFT_CAP_CLR_STAT; /*< Address offset = 0x108 */
    jesd_tx_glue_shift_cap_stat_reg_t TX_SHIFT_CAP_STAT; /*< Address offset = 0x10c */
    jesd_tx_glue_shift_cap_en_reg_t TX_SHIFT_CAP_EN; /*< Address offset = 0x110 */
    jesd_tx_glue_shift_cap_force_mode_reg_t TX_SHIFT_CAP_FORCE_MODE; /*< Address offset = 0x114 */
    jesd_tx_glue_ip_smpl_intf_cap_en_reg_t TX_IP_SMPL_INTF_CAP_EN; /*< Address offset = 0x118 */
    jesd_tx_glue_ip_smpl_intf_cap_clr_stat_reg_t TX_IP_SMPL_INTF_CAP_CLR_STAT; /*< Address offset = 0x11c */
    jesd_tx_glue_ip_smpl_intf_cap_stat_reg_t TX_IP_SMPL_INTF_CAP_STAT; /*< Address offset = 0x120 */
    const uint8_t        reservedArea4 [220]; /*< Address offset = 0x124 */
    jesd_tx_glue_strm_rd_ptr_reg_t TX_STRM_RD_PTR[16]; /*< Address offset = 0x200 */
    jesd_tx_glue_strm_phm_fovr_reg_t TX_STRM_PHM_FOVR_MAP[16]; /*< Address offset = 0x240 */
    jesd_tx_glue_strm_phm_fifo_sts_reg_t TX_STRM_PHM_FIFO_STS[16]; /*< Address offset = 0x280 */
    jesd_tx_glue_apb_rdata_reg_t TX_APB_RDATA[16]; /*< Address offset = 0x2c0 */
    jesd_tx_glue_smpl_clk_wndw_err_thrsh_reg_t TX_SMPL_CLK_WNDW_ERR_THRSH[2]; /*< Address offset = 0x300 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0x308 */
    jesd_tx_glue_smpl_clk_wndw_err_wndw_num_reg_t TX_SMPL_CLK_WNDW_ERR_WNDW_NUM[2]; /*< Address offset = 0x310 */
    const uint8_t        reservedArea6 [8];   /*< Address offset = 0x318 */
    jesd_tx_glue_smpl_xclk_wndw_err_wndw_timer_reg_t TX_SMPL_XCLK_WNDW_ERR_WNDW_TIMER[2]; /*< Address offset = 0x320 */
    const uint8_t        reservedArea7 [8];   /*< Address offset = 0x328 */
    jesd_tx_glue_smpl_clk_dbg_cap_reg0_reg_t TX_SMPL_CLK_DBG_CAP_REG0[4]; /*< Address offset = 0x330 */
    jesd_tx_glue_smpl_clk_dbg_cap_reg1_reg_t TX_SMPL_CLK_DBG_CAP_REG1[4]; /*< Address offset = 0x340 */
    jesd_tx_glue_smpl_clk_dbg_cap_reg2_reg_t TX_SMPL_CLK_DBG_CAP_REG2[4]; /*< Address offset = 0x350 */
    jesd_tx_glue_smpl_clk_dbg_cap_reg3_reg_t TX_SMPL_CLK_DBG_CAP_REG3[4]; /*< Address offset = 0x360 */
    const uint8_t        reservedArea8 [16];  /*< Address offset = 0x370 */
    jesd_tx_glue_ecc_b0_err_stat_reg_t TX_ECC_B0_ERR_STAT[16]; /*< Address offset = 0x380 */
    jesd_tx_glue_ecc_b1_err_stat_reg_t TX_ECC_B1_ERR_STAT[16]; /*< Address offset = 0x3c0 */
    jesd_tx_glue_tsb_min_occupancy_reg_t TX_TSB_MIN_OCCUPANCY[16]; /*< Address offset = 0x400 */
    jesd_tx_glue_tsb_max_occupancy_reg_t TX_TSB_MAX_OCCUPANCY[16]; /*< Address offset = 0x440 */
    jesd_tx_glue_tsb_depth_at_read_trig_reg_t TX_TSB_DEPTH_AT_READ_TRIG[16]; /*< Address offset = 0x480 */
    jesd_tx_glue_tsb_depth_reg_t TX_TSB_DEPTH[16]; /*< Address offset = 0x4c0 */
    jesd_tx_glue_sp_mon_cap_reg0_reg_t TX_SP_MON_CAP_REG0[4]; /*< Address offset = 0x500 */
    jesd_tx_glue_sp_mon_cap_reg1_reg_t TX_SP_MON_CAP_REG1[4]; /*< Address offset = 0x510 */
    jesd_tx_glue_sp_mon_cap_reg2_reg_t TX_SP_MON_CAP_REG2[4]; /*< Address offset = 0x520 */
    const uint8_t        reservedArea9 [720]; /*< Address offset = 0x530 */
    jesd_tx_glue_conv_smpl_init_data_reg_t TX_CONV_SMPL_INIT_DATA[128]; /*< Address offset = 0x800 */
    jesd_tx_glue_ip_smpl_intf_data_reg_t TX_IP_SMPL_INTF_DATA[128]; /*< Address offset = 0xa00 */
} jesd_tx_glue_t;     // size: 0x0160

// AddressSpace struct pointer
//
#define DLNK_JESD0_TX_GLUE  ((jesd_tx_glue_t*) DLNK_JESD0_TX_GLUE_BASE)
#define DLNK_JESD1_TX_GLUE  ((jesd_tx_glue_t*) DLNK_JESD1_TX_GLUE_BASE)
#define DLNK_JESD2_TX_GLUE  ((jesd_tx_glue_t*) DLNK_JESD2_TX_GLUE_BASE)
#define DLNK_JESD3_TX_GLUE  ((jesd_tx_glue_t*) DLNK_JESD3_TX_GLUE_BASE)

// ******************************************* /Address Space

#endif      // _JESD_TX_GLUE_H_

