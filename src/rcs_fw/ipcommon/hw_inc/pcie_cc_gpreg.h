#ifndef _PCIE_CC_GPREG_H_
#define _PCIE_CC_GPREG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_PCIE_CC_GPREG_BASE  ( 0x01a01000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PCIE_CC_GPREG_SCRATCH0_OFFSET ( 0x00000000U )
#define PCIE_CC_GPREG_SCRATCH1_OFFSET ( 0x00000004U )
#define PCIE_CC_GPREG_BRDG_OFFSET ( 0x00000008U )
#define PCIE_CC_GPREG_CTL_0_S_OFFSET ( 0x00000100U )
#define PCIE_CC_GPREG_CTL_1_OFFSET ( 0x00000104U )
#define PCIE_CC_GPREG_CTL_2_OFFSET ( 0x00000108U )
#define PCIE_CC_GPREG_CTL_3_OFFSET ( 0x0000010cU )
#define PCIE_CC_GPREG_CTL_4_OFFSET ( 0x00000110U )
#define PCIE_CC_GPREG_CTL_5_OFFSET ( 0x00000114U )
#define PCIE_CC_GPREG_CTL_6_S_OFFSET ( 0x00000118U )
#define PCIE_CC_GPREG_CTL_7_OFFSET ( 0x0000011cU )
#define PCIE_CC_GPREG_CTL_8_OFFSET ( 0x00000120U )
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_OFFSET ( 0x00000124U )
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_OFFSET ( 0x00000128U )
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_OFFSET ( 0x0000012cU )
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_OFFSET ( 0x00000130U )
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_OFFSET ( 0x00000134U )
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_OFFSET ( 0x00000138U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S0_OFFSET ( 0x0000013cU )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S1_OFFSET ( 0x00000140U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S2_OFFSET ( 0x00000144U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S3_OFFSET ( 0x00000148U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S4_OFFSET ( 0x0000014cU )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S5_OFFSET ( 0x00000150U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S6_OFFSET ( 0x00000154U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S7_OFFSET ( 0x00000158U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S8_OFFSET ( 0x0000015cU )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S9_OFFSET ( 0x00000160U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S10_OFFSET ( 0x00000164U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S11_OFFSET ( 0x00000168U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S12_OFFSET ( 0x0000016cU )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S13_OFFSET ( 0x00000170U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S14_OFFSET ( 0x00000174U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S15_OFFSET ( 0x00000178U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S16_OFFSET ( 0x0000017cU )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S17_OFFSET ( 0x00000180U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S18_OFFSET ( 0x00000184U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S19_OFFSET ( 0x00000188U )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S20_OFFSET ( 0x0000018cU )
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S21_OFFSET ( 0x00000190U )
#define PCIE_CC_GPREG_RO_0_OFFSET ( 0x00000200U )
#define PCIE_CC_GPREG_RO_3_OFFSET ( 0x0000020cU )
#define PCIE_CC_GPREG_RO_4_OFFSET ( 0x00000210U )
#define PCIE_CC_GPREG_RO_5_OFFSET ( 0x00000214U )
#define PCIE_CC_GPREG_RO_6_OFFSET ( 0x00000218U )
#define PCIE_CC_GPREG_RO_8_OFFSET ( 0x00000220U )
#define PCIE_CC_GPREG_RO_10_OFFSET ( 0x00000228U )
#define PCIE_CC_GPREG_RO_11_OFFSET ( 0x0000022cU )
#define PCIE_CC_GPREG_RO_12_OFFSET ( 0x00000230U )
#define PCIE_CC_GPREG_RO_13_OFFSET ( 0x00000234U )
#define PCIE_CC_GPREG_RO_17_OFFSET ( 0x00000244U )
#define PCIE_CC_GPREG_RO_18_OFFSET ( 0x00000248U )
#define PCIE_CC_GPREG_RO_19_OFFSET ( 0x0000024cU )
#define PCIE_CC_GPREG_RO_20_OFFSET ( 0x00000250U )
#define PCIE_CC_GPREG_DOE_00_S_OFFSET ( 0x00000260U )
#define PCIE_CC_GPREG_DOE_01_S_OFFSET ( 0x00000264U )
#define PCIE_CC_GPREG_DOE_02_S_OFFSET ( 0x00000268U )
#define PCIE_CC_GPREG_DOE_03_S_OFFSET ( 0x0000026cU )
#define PCIE_CC_GPREG_DOE_04_S_OFFSET ( 0x00000270U )
#define PCIE_CC_GPREG_DOE_05_S_OFFSET ( 0x00000274U )
#define PCIE_CC_GPREG_DOE_06_S_OFFSET ( 0x00000278U )
#define PCIE_CC_GPREG_DOE_07_S_OFFSET ( 0x0000027cU )
#define PCIE_CC_GPREG_DOE_08_S_OFFSET ( 0x00000280U )
#define PCIE_CC_GPREG_DOE_09_S_OFFSET ( 0x00000284U )
#define PCIE_CC_GPREG_DOE_10_S_OFFSET ( 0x00000288U )
#define PCIE_CC_GPREG_DOE_11_S_OFFSET ( 0x0000028cU )
#define PCIE_CC_GPREG_DOE_12_S_OFFSET ( 0x00000290U )
#define PCIE_CC_GPREG_DOE_13_S_OFFSET ( 0x00000294U )
#define PCIE_CC_GPREG_DOE_14_S_OFFSET ( 0x00000298U )
#define PCIE_CC_GPREG_DOE_15_S_OFFSET ( 0x0000029cU )
#define PCIE_CC_GPREG_DOE_16_S_OFFSET ( 0x000002a0U )
#define PCIE_CC_GPREG_DOE_17_S_OFFSET ( 0x000002a4U )
#define PCIE_CC_GPREG_DOE_18_S_OFFSET ( 0x000002a8U )
#define PCIE_CC_GPREG_DOE_19_S_OFFSET ( 0x000002acU )
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_OFFSET ( 0x000002b0U )
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_OFFSET ( 0x000002b4U )
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_OFFSET ( 0x000002b8U )
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_OFFSET ( 0x000002bcU )
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_OFFSET ( 0x000002c0U )
#define PCIE_CC_GPREG_WIRE_S_OFFSET ( 0x000002c4U )
#define PCIE_CC_GPREG_LTSSM_S_OFFSET ( 0x000002c8U )
#define PCIE_CC_GPREG_ECC_SBE_OFFSET ( 0x000002ccU )
#define PCIE_CC_GPREG_ECC_DBE_OFFSET ( 0x000002d0U )
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_OFFSET ( 0x000002d4U )
#define PCIE_CC_GPREG_ECC_SBE_CNT_00_OFFSET ( 0x000002d8U )
#define PCIE_CC_GPREG_ECC_SBE_CNT_01_OFFSET ( 0x000002dcU )
#define PCIE_CC_GPREG_ECC_SBE_CNT_02_OFFSET ( 0x000002e0U )
#define PCIE_CC_GPREG_ECC_SBE_CNT_03_OFFSET ( 0x000002e4U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_00_OFFSET ( 0x000002e8U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_01_OFFSET ( 0x000002ecU )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_02_OFFSET ( 0x000002f0U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_03_OFFSET ( 0x000002f4U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_04_OFFSET ( 0x000002f8U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_05_OFFSET ( 0x000002fcU )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_06_OFFSET ( 0x00000300U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_07_OFFSET ( 0x00000304U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_08_OFFSET ( 0x00000308U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_09_OFFSET ( 0x0000030cU )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_010_OFFSET ( 0x00000310U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_011_OFFSET ( 0x00000314U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_012_OFFSET ( 0x00000318U )
#define PCIE_CC_GPREG_ECC_ERR_ADDR_013_OFFSET ( 0x0000031cU )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_00_OFFSET ( 0x00000320U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_01_OFFSET ( 0x00000324U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_02_OFFSET ( 0x00000328U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_03_OFFSET ( 0x0000032cU )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_04_OFFSET ( 0x00000330U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_05_OFFSET ( 0x00000334U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_06_OFFSET ( 0x00000338U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_07_OFFSET ( 0x0000033cU )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_08_OFFSET ( 0x00000340U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_09_OFFSET ( 0x00000344U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_010_OFFSET ( 0x00000348U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_011_OFFSET ( 0x0000034cU )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_012_OFFSET ( 0x00000350U )
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_013_OFFSET ( 0x00000354U )
#define PCIE_CC_GPREG_INTR0_STAT_OFFSET ( 0x00000400U )
#define PCIE_CC_GPREG_INTR0_HIGH_EN_OFFSET ( 0x00000404U )
#define PCIE_CC_GPREG_INTR0_LOW_EN_OFFSET ( 0x00000408U )
#define PCIE_CC_GPREG_INTR0_CLR_OFFSET ( 0x0000040cU )
#define PCIE_CC_GPREG_INTR0_FORCE_OFFSET ( 0x00000410U )
#define PCIE_CC_GPREG_INTR1_STAT_OFFSET ( 0x00000420U )
#define PCIE_CC_GPREG_INTR1_HIGH_EN_OFFSET ( 0x00000424U )
#define PCIE_CC_GPREG_INTR1_LOW_EN_OFFSET ( 0x00000428U )
#define PCIE_CC_GPREG_INTR1_CLR_OFFSET ( 0x0000042cU )
#define PCIE_CC_GPREG_INTR1_FORCE_OFFSET ( 0x00000430U )
#define PCIE_CC_GPREG_INTR2_STAT_S_OFFSET ( 0x00000440U )
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_OFFSET ( 0x00000444U )
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_OFFSET ( 0x00000448U )
#define PCIE_CC_GPREG_INTR2_CLR_S_OFFSET ( 0x0000044cU )
#define PCIE_CC_GPREG_INTR2_FORCE_S_OFFSET ( 0x00000450U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PCIE_CC_GPREG_SCRATCH0_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_SCRATCH0_OFFSET ) ))
#define PCIE_CC_GPREG_SCRATCH1_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_SCRATCH1_OFFSET ) ))
#define PCIE_CC_GPREG_BRDG_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_BRDG_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_0_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_0_S_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_1_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_1_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_2_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_2_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_3_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_3_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_4_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_4_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_5_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_5_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_6_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_6_S_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_7_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_7_OFFSET ) ))
#define PCIE_CC_GPREG_CTL_8_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_CTL_8_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_FORCE_TYPE_S_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_FORCE_ERR_S_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_CLR_S_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_CNT_CLR_S_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_CHK_DIS_S_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_GEN_DIS_S_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S0_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S0_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S1_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S1_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S2_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S2_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S3_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S3_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S4_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S4_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S5_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S5_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S6_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S6_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S7_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S7_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S8_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S8_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S9_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S9_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S10_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S10_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S11_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S11_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S12_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S12_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S13_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S13_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S14_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S14_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S15_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S15_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S16_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S16_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S17_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S17_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S18_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S18_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S19_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S19_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S20_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S20_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S21_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_SW_SHDW_S21_OFFSET ) ))
#define PCIE_CC_GPREG_RO_0_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_0_OFFSET ) ))
#define PCIE_CC_GPREG_RO_3_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_3_OFFSET ) ))
#define PCIE_CC_GPREG_RO_4_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_4_OFFSET ) ))
#define PCIE_CC_GPREG_RO_5_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_5_OFFSET ) ))
#define PCIE_CC_GPREG_RO_6_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_6_OFFSET ) ))
#define PCIE_CC_GPREG_RO_8_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_8_OFFSET ) ))
#define PCIE_CC_GPREG_RO_10_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_10_OFFSET ) ))
#define PCIE_CC_GPREG_RO_11_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_11_OFFSET ) ))
#define PCIE_CC_GPREG_RO_12_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_12_OFFSET ) ))
#define PCIE_CC_GPREG_RO_13_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_13_OFFSET ) ))
#define PCIE_CC_GPREG_RO_17_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_17_OFFSET ) ))
#define PCIE_CC_GPREG_RO_18_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_18_OFFSET ) ))
#define PCIE_CC_GPREG_RO_19_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_19_OFFSET ) ))
#define PCIE_CC_GPREG_RO_20_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_RO_20_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_00_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_00_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_01_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_01_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_02_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_02_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_03_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_03_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_04_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_04_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_05_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_05_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_06_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_06_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_07_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_07_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_08_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_08_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_09_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_09_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_10_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_10_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_11_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_11_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_12_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_12_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_13_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_13_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_14_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_14_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_15_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_15_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_16_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_16_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_17_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_17_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_18_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_18_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_19_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_19_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_INTR_STAT_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_INTR_CLR_S_OFFSET ) ))
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_DOE_INTR_FORCE_S_OFFSET ) ))
#define PCIE_CC_GPREG_WIRE_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_WIRE_S_OFFSET ) ))
#define PCIE_CC_GPREG_LTSSM_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_LTSSM_S_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_SBE_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_SBE_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_DBE_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_DBE_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_SBE_CNT_00_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_SBE_CNT_00_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_SBE_CNT_01_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_SBE_CNT_01_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_SBE_CNT_02_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_SBE_CNT_02_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_SBE_CNT_03_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_SBE_CNT_03_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_00_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_00_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_01_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_01_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_02_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_02_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_03_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_03_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_04_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_04_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_05_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_05_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_06_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_06_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_07_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_07_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_08_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_08_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_09_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_09_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_010_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_010_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_011_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_011_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_012_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_012_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_ADDR_013_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_ADDR_013_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_00_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_00_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_01_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_01_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_02_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_02_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_03_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_03_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_04_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_04_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_05_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_05_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_06_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_06_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_07_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_07_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_08_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_08_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_09_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_09_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_010_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_010_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_011_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_011_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_012_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_012_OFFSET ) ))
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_013_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_ECC_ERR_SYNDROME_013_OFFSET ) ))
#define PCIE_CC_GPREG_INTR0_STAT_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR0_STAT_OFFSET ) ))
#define PCIE_CC_GPREG_INTR0_HIGH_EN_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR0_HIGH_EN_OFFSET ) ))
#define PCIE_CC_GPREG_INTR0_LOW_EN_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR0_LOW_EN_OFFSET ) ))
#define PCIE_CC_GPREG_INTR0_CLR_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR0_CLR_OFFSET ) ))
#define PCIE_CC_GPREG_INTR0_FORCE_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR0_FORCE_OFFSET ) ))
#define PCIE_CC_GPREG_INTR1_STAT_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR1_STAT_OFFSET ) ))
#define PCIE_CC_GPREG_INTR1_HIGH_EN_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR1_HIGH_EN_OFFSET ) ))
#define PCIE_CC_GPREG_INTR1_LOW_EN_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR1_LOW_EN_OFFSET ) ))
#define PCIE_CC_GPREG_INTR1_CLR_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR1_CLR_OFFSET ) ))
#define PCIE_CC_GPREG_INTR1_FORCE_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR1_FORCE_OFFSET ) ))
#define PCIE_CC_GPREG_INTR2_STAT_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR2_STAT_S_OFFSET ) ))
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR2_HIGH_EN_S_OFFSET ) ))
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR2_LOW_EN_S_OFFSET ) ))
#define PCIE_CC_GPREG_INTR2_CLR_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR2_CLR_S_OFFSET ) ))
#define PCIE_CC_GPREG_INTR2_FORCE_S_ADR (( ( DLNK_PCIE_CC_GPREG_BASE ) + ( PCIE_CC_GPREG_INTR2_FORCE_S_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_SCRATCH0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_scratch0
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCH : 32;
    ///< Scratch Regiser - Has no functionality in RTL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_scratch0_reg_t;

#define PCIE_CC_GPREG_SCRATCH0_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_SCRATCH0_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_SCRATCH0_WR_MASK (0xffffffffU)


///< Scratch Regiser - Has no functionality in RTL
#define PCIE_CC_GPREG_SCRATCH0_SCRATCH_BF_OFF ( 0)
#define PCIE_CC_GPREG_SCRATCH0_SCRATCH_BF_WID (32)
#define PCIE_CC_GPREG_SCRATCH0_SCRATCH_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_SCRATCH0_SCRATCH_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_SCRATCH1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_scratch1
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCH : 32;
    ///< Scratch Regiser - Has no functionality in RTL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_scratch1_reg_t;

#define PCIE_CC_GPREG_SCRATCH1_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_SCRATCH1_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_SCRATCH1_WR_MASK (0xffffffffU)


///< Scratch Regiser - Has no functionality in RTL
#define PCIE_CC_GPREG_SCRATCH1_SCRATCH_BF_OFF ( 0)
#define PCIE_CC_GPREG_SCRATCH1_SCRATCH_BF_WID (32)
#define PCIE_CC_GPREG_SCRATCH1_SCRATCH_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_SCRATCH1_SCRATCH_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_BRIDGE register description at address offset 0x8
  *
  * Register default value:        0x00C10000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_bridge
  * PCIE PHY Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Timeout value in core_clk cycles
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number[27:20] = SERID Value[0-5]
    ///< AccessType="RO" BitOffset="20" ResetValue="0xC"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Lock control bit that will prevent writes to the timeout value when
    ///< set(1'b1). The lock bit is clear on reset and once it has been set
    ///< it can only be cleared by a block reset.
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t APB_ACK_UNSOL : 1;
    ///< Received an unsolicited acknowledge
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t APB_ACK_ERR : 1;
    ///< Request acknowledge had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t APB_ACK_TIMEOUT : 1;
    ///< Request timeout occurred
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_brdg_reg_t;

#define PCIE_CC_GPREG_BRDG_DEFAULT (0x00c10000U)
#define PCIE_CC_GPREG_BRDG_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_BRDG_WR_MASK (0xf00fffffU)


///< Timeout value in core_clk cycles
#define PCIE_CC_GPREG_BRDG_TIMEOUT_VAL_BF_OFF ( 0)
#define PCIE_CC_GPREG_BRDG_TIMEOUT_VAL_BF_WID (20)
#define PCIE_CC_GPREG_BRDG_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define PCIE_CC_GPREG_BRDG_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number[27:20] = SERID Value[0-5]
#define PCIE_CC_GPREG_BRDG_REVISION_BF_OFF (20)
#define PCIE_CC_GPREG_BRDG_REVISION_BF_WID ( 8)
#define PCIE_CC_GPREG_BRDG_REVISION_BF_MSK (0x0FF00000)
#define PCIE_CC_GPREG_BRDG_REVISION_BF_DEF (0x00C00000)

///< Lock control bit that will prevent writes to the timeout value when
///< set(1'b1). The lock bit is clear on reset and once it has been set
///< it can only be cleared by a block reset.
#define PCIE_CC_GPREG_BRDG_SW_LOCK_CTRL_BF_OFF (28)
#define PCIE_CC_GPREG_BRDG_SW_LOCK_CTRL_BF_WID ( 1)
#define PCIE_CC_GPREG_BRDG_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define PCIE_CC_GPREG_BRDG_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< Received an unsolicited acknowledge
#define PCIE_CC_GPREG_BRDG_APB_ACK_UNSOL_BF_OFF (29)
#define PCIE_CC_GPREG_BRDG_APB_ACK_UNSOL_BF_WID ( 1)
#define PCIE_CC_GPREG_BRDG_APB_ACK_UNSOL_BF_MSK (0x20000000)
#define PCIE_CC_GPREG_BRDG_APB_ACK_UNSOL_BF_DEF (0x00000000)

///< Request acknowledge had error bit set
#define PCIE_CC_GPREG_BRDG_APB_ACK_ERR_BF_OFF (30)
#define PCIE_CC_GPREG_BRDG_APB_ACK_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_BRDG_APB_ACK_ERR_BF_MSK (0x40000000)
#define PCIE_CC_GPREG_BRDG_APB_ACK_ERR_BF_DEF (0x00000000)

///< Request timeout occurred
#define PCIE_CC_GPREG_BRDG_APB_ACK_TIMEOUT_BF_OFF (31)
#define PCIE_CC_GPREG_BRDG_APB_ACK_TIMEOUT_BF_WID ( 1)
#define PCIE_CC_GPREG_BRDG_APB_ACK_TIMEOUT_BF_MSK (0x80000000)
#define PCIE_CC_GPREG_BRDG_APB_ACK_TIMEOUT_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_0_S register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_0_S
  * CC Control Register 0
  */

typedef union {
  struct {
    uint32_t DEVICE_TYPE : 4;
    ///< EP=4'b0000, RC=4'b0100
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t APP_DBI_RO_WR_DISABLE : 1;
    ///< MISC_CONTROL_1_OFF. 1=DBI_RO_WR_EN register field is forced to 0 and
    ///< is read-only; 0=field is RW
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_0_s_reg_t;

#define PCIE_CC_GPREG_CTL_0_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_0_S_RD_MASK (0x0000001fU)
#define PCIE_CC_GPREG_CTL_0_S_WR_MASK (0x0000001fU)


///< EP=4'b0000, RC=4'b0100
#define PCIE_CC_GPREG_CTL_0_S_DEVICE_TYPE_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_0_S_DEVICE_TYPE_BF_WID ( 4)
#define PCIE_CC_GPREG_CTL_0_S_DEVICE_TYPE_BF_MSK (0x0000000F)
#define PCIE_CC_GPREG_CTL_0_S_DEVICE_TYPE_BF_DEF (0x00000000)

///< MISC_CONTROL_1_OFF. 1=DBI_RO_WR_EN register field is forced to 0 and
///< is read-only; 0=field is RW
#define PCIE_CC_GPREG_CTL_0_S_APP_DBI_RO_WR_DIS_BF_OFF ( 4)
#define PCIE_CC_GPREG_CTL_0_S_APP_DBI_RO_WR_DIS_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_0_S_APP_DBI_RO_WR_DIS_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_CTL_0_S_APP_DBI_RO_WR_DIS_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_1 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_1
  * CC Control Register 1
  */

typedef union {
  struct {
    uint32_t PEI3_SII_SNAP_CTL : 2;
    ///< [0]=0, Continuous Capture, [0]=1, snap shot - [1] 0 -> 1 re-trigger
    ///< capture, ignore in continous capture mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TRGT_TIMEOUT_CPL_SNAP_CTL : 2;
    ///< See Description in [1:0]
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PEI3_RADM_MSG_PAYLOAD_SNAP_CTL : 2;
    ///< See Description in [1:0]
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RESERVED6 : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t RADM_VENDOR_MSG_VAL_MASK : 8;
    ///< Alarm masked when value set to 1: [br]radm_vendor_msg[7] [br]radm_msg_unlock[6]
    ///< [br]radm_nonfatal_err[5] [br]radm_fatal_err[4] [br]radm_correctable_err[3]
    ///< [br]radm_pm_pme[2] [br]radm_pm_to_ack[1] [br]radm_pm_turnoff[0]
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RCS_MSI_INTR_VECTOR : 5;
    ///< MSI Vector Value for Hardware Generation of RCS interrupt going from
    ///< low -> high
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RESERVED29 : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_1_reg_t;

#define PCIE_CC_GPREG_CTL_1_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_1_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_1_WR_MASK (0x1fff003fU)


///< [0]=0, Continuous Capture, [0]=1, snap shot - [1] 0 -> 1 re-trigger
///< capture, ignore in continous capture mode.
#define PCIE_CC_GPREG_CTL_1_PEI3_SII_SNAP_CTL_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_1_PEI3_SII_SNAP_CTL_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_1_PEI3_SII_SNAP_CTL_BF_MSK (0x00000003)
#define PCIE_CC_GPREG_CTL_1_PEI3_SII_SNAP_CTL_BF_DEF (0x00000000)

///< See Description in [1:0]
#define PCIE_CC_GPREG_CTL_1_TRGT_TIMEOUT_CPL_SNAP_CTL_BF_OFF ( 2)
#define PCIE_CC_GPREG_CTL_1_TRGT_TIMEOUT_CPL_SNAP_CTL_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_1_TRGT_TIMEOUT_CPL_SNAP_CTL_BF_MSK (0x0000000C)
#define PCIE_CC_GPREG_CTL_1_TRGT_TIMEOUT_CPL_SNAP_CTL_BF_DEF (0x00000000)

///< See Description in [1:0]
#define PCIE_CC_GPREG_CTL_1_PEI3_RADM_MSG_PAYLOAD_SNAP_CTL_BF_OFF ( 4)
#define PCIE_CC_GPREG_CTL_1_PEI3_RADM_MSG_PAYLOAD_SNAP_CTL_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_1_PEI3_RADM_MSG_PAYLOAD_SNAP_CTL_BF_MSK (0x00000030)
#define PCIE_CC_GPREG_CTL_1_PEI3_RADM_MSG_PAYLOAD_SNAP_CTL_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_1_RESERVED6_BF_OFF ( 6)
#define PCIE_CC_GPREG_CTL_1_RESERVED6_BF_WID (10)
#define PCIE_CC_GPREG_CTL_1_RESERVED6_BF_MSK (0x0000FFC0)
#define PCIE_CC_GPREG_CTL_1_RESERVED6_BF_DEF (0x00000000)

///< Alarm masked when value set to 1: [br]radm_vendor_msg[7] [br]radm_msg_unlock[6]
///< [br]radm_nonfatal_err[5] [br]radm_fatal_err[4] [br]radm_correctable_err[3]
///< [br]radm_pm_pme[2] [br]radm_pm_to_ack[1] [br]radm_pm_turnoff[0]
#define PCIE_CC_GPREG_CTL_1_RADM_VENDOR_MSG_VAL_MASK_BF_OFF (16)
#define PCIE_CC_GPREG_CTL_1_RADM_VENDOR_MSG_VAL_MASK_BF_WID ( 8)
#define PCIE_CC_GPREG_CTL_1_RADM_VENDOR_MSG_VAL_MASK_BF_MSK (0x00FF0000)
#define PCIE_CC_GPREG_CTL_1_RADM_VENDOR_MSG_VAL_MASK_BF_DEF (0x00000000)

///< MSI Vector Value for Hardware Generation of RCS interrupt going from
///< low -> high
#define PCIE_CC_GPREG_CTL_1_RCS_MSI_INTR_VECTOR_BF_OFF (24)
#define PCIE_CC_GPREG_CTL_1_RCS_MSI_INTR_VECTOR_BF_WID ( 5)
#define PCIE_CC_GPREG_CTL_1_RCS_MSI_INTR_VECTOR_BF_MSK (0x1F000000)
#define PCIE_CC_GPREG_CTL_1_RCS_MSI_INTR_VECTOR_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_1_RESERVED29_BF_OFF (29)
#define PCIE_CC_GPREG_CTL_1_RESERVED29_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_1_RESERVED29_BF_MSK (0xE0000000)
#define PCIE_CC_GPREG_CTL_1_RESERVED29_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_2 register description at address offset 0x108
  *
  * Register default value:        0x00000001
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_2
  * PCIE Control 2 Register - Vendor Mesage Gen
  */

typedef union {
  struct {
    uint32_t VEN_MSG_FMT : 2;
    ///< The Format field for the vendor-defined Message TLP. Should be set
    ///< to 0x1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t VEN_MSG_TD : 1;
    ///< The TLP Digest (TD) bit for the vendor-defined Message TLP.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t VEN_MSG_EP : 1;
    ///< The Poisoned TLP (EP) bit for the vendor-defined Message TLP.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t VEN_MSG_FUNC_NUM : 3;
    ///< Function Number for the vendor-defined Message TLP. Function numbering
    ///< starts at '0'.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t VEN_MSG_TC : 3;
    ///< The Traffic Class field for the vendor-defined Message TLP.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t VEN_MSG_TYPE : 5;
    ///< The Type field for the vendor-defined Message TLP
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RESERVED15 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t VEN_MSG_ATTR : 2;
    ///< The Attributes field for the vendor-defined Message TLP.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RESERVED18 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
    uint32_t VEN_MSG_LEN : 10;
    ///< The Length field for the vendor-defined Message TLP (indicates length
    ///< of data payload in dwords). Should be set to 0
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RESERVED30 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="0x0"
    uint32_t VEN_MSG_REQ : 1;
    ///< Vendor Message Request - 0->1 transiton will cause the core to generate
    ///< the message
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_2_reg_t;

#define PCIE_CC_GPREG_CTL_2_DEFAULT (0x00000001U)
#define PCIE_CC_GPREG_CTL_2_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_2_WR_MASK (0xbff37fffU)


///< The Format field for the vendor-defined Message TLP. Should be set
///< to 0x1.
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FMT_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FMT_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FMT_BF_MSK (0x00000003)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FMT_BF_DEF (0x00000001)

///< The TLP Digest (TD) bit for the vendor-defined Message TLP.
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TD_BF_OFF ( 2)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TD_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TD_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TD_BF_DEF (0x00000000)

///< The Poisoned TLP (EP) bit for the vendor-defined Message TLP.
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_EP_BF_OFF ( 3)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_EP_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_EP_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_EP_BF_DEF (0x00000000)

///< Function Number for the vendor-defined Message TLP. Function numbering
///< starts at '0'.
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FUNC_NUM_BF_OFF ( 4)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FUNC_NUM_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FUNC_NUM_BF_MSK (0x00000070)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_FUNC_NUM_BF_DEF (0x00000000)

///< The Traffic Class field for the vendor-defined Message TLP.
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TC_BF_OFF ( 7)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TC_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TC_BF_MSK (0x00000380)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TC_BF_DEF (0x00000000)

///< The Type field for the vendor-defined Message TLP
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TYPE_BF_OFF (10)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TYPE_BF_WID ( 5)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TYPE_BF_MSK (0x00007C00)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_TYPE_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_2_RESERVED15_BF_OFF (15)
#define PCIE_CC_GPREG_CTL_2_RESERVED15_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_2_RESERVED15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_CTL_2_RESERVED15_BF_DEF (0x00000000)

///< The Attributes field for the vendor-defined Message TLP.
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_ATTR_BF_OFF (16)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_ATTR_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_ATTR_BF_MSK (0x00030000)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_ATTR_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_2_RESERVED18_BF_OFF (18)
#define PCIE_CC_GPREG_CTL_2_RESERVED18_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_2_RESERVED18_BF_MSK (0x000C0000)
#define PCIE_CC_GPREG_CTL_2_RESERVED18_BF_DEF (0x00000000)

///< The Length field for the vendor-defined Message TLP (indicates length
///< of data payload in dwords). Should be set to 0
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_LEN_BF_OFF (20)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_LEN_BF_WID (10)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_LEN_BF_MSK (0x3FF00000)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_LEN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_2_RESERVED30_BF_OFF (30)
#define PCIE_CC_GPREG_CTL_2_RESERVED30_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_2_RESERVED30_BF_MSK (0x40000000)
#define PCIE_CC_GPREG_CTL_2_RESERVED30_BF_DEF (0x00000000)

///< Vendor Message Request - 0->1 transiton will cause the core to generate
///< the message
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_REQ_BF_OFF (31)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_REQ_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_REQ_BF_MSK (0x80000000)
#define PCIE_CC_GPREG_CTL_2_VEN_MSG_REQ_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_3 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_3
  * PCIE Control 3 Register - Vendor Mesage Gen
  */

typedef union {
  struct {
    uint32_t VEN_MSG_TAG : 10;
    ///< Tag for the vendor-defined Message TLP
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED10 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t VEN_MSG_CODE : 8;
    ///< The Message Code for the vendor-defined Message TLP.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED20 : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_3_reg_t;

#define PCIE_CC_GPREG_CTL_3_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_3_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_3_WR_MASK (0x000ff3ffU)


///< Tag for the vendor-defined Message TLP
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_TAG_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_TAG_BF_WID (10)
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_TAG_BF_MSK (0x000003FF)
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_TAG_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_3_RESERVED10_BF_OFF (10)
#define PCIE_CC_GPREG_CTL_3_RESERVED10_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_3_RESERVED10_BF_MSK (0x00000C00)
#define PCIE_CC_GPREG_CTL_3_RESERVED10_BF_DEF (0x00000000)

///< The Message Code for the vendor-defined Message TLP.
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_CODE_BF_OFF (12)
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_CODE_BF_WID ( 8)
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_CODE_BF_MSK (0x000FF000)
#define PCIE_CC_GPREG_CTL_3_VEN_MSG_CODE_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_3_RESERVED20_BF_OFF (20)
#define PCIE_CC_GPREG_CTL_3_RESERVED20_BF_WID (12)
#define PCIE_CC_GPREG_CTL_3_RESERVED20_BF_MSK (0xFFF00000)
#define PCIE_CC_GPREG_CTL_3_RESERVED20_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_4 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_4
  * PCIE Control 4 Register - Vendor Mesage Gen
  */

typedef union {
  struct {
    uint32_t VEN_MSG_DATA_LOW : 32;
    ///< Fourth dword of the Vendor Defined Message header where: Bytes 12-15
    ///< (fourth header dword) =ven_msg_data[31:0], where ven_msg_data[7:0]
    ///< =byte 15
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_4_reg_t;

#define PCIE_CC_GPREG_CTL_4_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_4_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_4_WR_MASK (0xffffffffU)


///< Fourth dword of the Vendor Defined Message header where: Bytes 12-15
///< (fourth header dword) =ven_msg_data[31:0], where ven_msg_data[7:0]
///< =byte 15
#define PCIE_CC_GPREG_CTL_4_VEN_MSG_DATA_LOW_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_4_VEN_MSG_DATA_LOW_BF_WID (32)
#define PCIE_CC_GPREG_CTL_4_VEN_MSG_DATA_LOW_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_CTL_4_VEN_MSG_DATA_LOW_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_5 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_5
  * PCIE Control 5 Register - Vendor Mesage Gen
  */

typedef union {
  struct {
    uint32_t VEN_MSG_DATA_HIGH : 32;
    ///< Third dword of the Vendor Defined Message header where: Bytes 8-11
    ///< (third header dword) = ven_msg_data[63:32]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_5_reg_t;

#define PCIE_CC_GPREG_CTL_5_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_5_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_5_WR_MASK (0xffffffffU)


///< Third dword of the Vendor Defined Message header where: Bytes 8-11
///< (third header dword) = ven_msg_data[63:32]
#define PCIE_CC_GPREG_CTL_5_VEN_MSG_DATA_HIGH_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_5_VEN_MSG_DATA_HIGH_BF_WID (32)
#define PCIE_CC_GPREG_CTL_5_VEN_MSG_DATA_HIGH_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_CTL_5_VEN_MSG_DATA_HIGH_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_6_S register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_6_S
  * PCIE Control 6 Register
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t DIAG_CTRL_BUS : 3;
    ///< Diagnostic Control Bus: [br]x01: Insert LCRC error by inverting the
    ///< LSB of LCRC [br]x10: Insert ECRC error by inverting the LSB of ECRC
    ///< [br]The rising edge of these two signals ([1:0]) enable the core to
    ///< assert an LCRC or ECRC to the packet that it currently being transferred.
    ///< When LCRC or ECRC error packets are transmitted by the core, the core
    ///< asserts diag_status_bus[lcrc_err_asserted] or diag_status_bus[ecrc_err_asserted]
    ///< to report that the requested action has been completed. This handshake
    ///< between control and status allows your application to control a specific
    ///< packet being injected with an CRC or ECRC error. The LCRC and ECRC
    ///< errors are generated by simply inverting the last bit of the LCRC
    ///< or ECRC value. [br]1xx: Select Fast Link Mode. Sets all internal timers
    ///< to Fast Mode for speeding up simulation purposes. Forces the LTSSM
    ///< training (link initialization) to use shorter timeouts and to link
    ///< up faster. The scaling factor is 1024 for all internal timers. Fast
    ///< Link Mode can also be activated by setting the Fast Link Mode bit
    ///< of the Port Link Control Register.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RESERVED19 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
    uint32_t RX_LANE_FLIP_EN : 1;
    ///< Performs manual lane reversal for receive lanes
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t TX_LANE_FLIP_EN : 1;
    ///< Performs manual lane reversal for transmit lanes
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t RESERVED22 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="0x0"
    uint32_t APP_SEND_STREAM_TO_INSECURE : 2;
    ///< Pulse to force a Stream to Insecure state. Selective Streams, if present,
    ///< are represented by the least significant bits of this signal. Link
    ///< Streams are concatenated in order after the Selective Streams.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RESERVED26 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="0x0"
    uint32_t APP_TDI_STATE_PF : 3;
    ///< Indicates if the TDI State represented by the PF. Each state is 3bits
    ///< wide, so for example the TDI state of PF2 is app_tdi_state_pf[2*3+:3]
    ///< Encoding as: - 3'b0xx: NON-TEE Function (bound to Legacy VM),
    ///< TDISP additional checks have no effect for inbound TLPs matching this
    ///< Function - 3'b100: CONFIG_UNLOCKED - 3'b101: CONFIG_LOCKED - 3'b110:
    ///< RUN - 3'b111: ERROR. Valid only for Endpoints
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_6_s_reg_t;

#define PCIE_CC_GPREG_CTL_6_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_6_S_RD_MASK (0x7fffffffU)
#define PCIE_CC_GPREG_CTL_6_S_WR_MASK (0x73370000U)


///< Reserved
#define PCIE_CC_GPREG_CTL_6_S_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED0_BF_WID (16)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED0_BF_MSK (0x0000FFFF)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED0_BF_DEF (0x00000000)

///< Diagnostic Control Bus: [br]x01: Insert LCRC error by inverting the
///< LSB of LCRC [br]x10: Insert ECRC error by inverting the LSB of ECRC
///< [br]The rising edge of these two signals ([1:0]) enable the core to
///< assert an LCRC or ECRC to the packet that it currently being transferred.
///< When LCRC or ECRC error packets are transmitted by the core, the core
///< asserts diag_status_bus[lcrc_err_asserted] or diag_status_bus[ecrc_err_asserted]
///< to report that the requested action has been completed. This handshake
///< between control and status allows your application to control a specific
///< packet being injected with an CRC or ECRC error. The LCRC and ECRC
///< errors are generated by simply inverting the last bit of the LCRC
///< or ECRC value. [br]1xx: Select Fast Link Mode. Sets all internal timers
///< to Fast Mode for speeding up simulation purposes. Forces the LTSSM
///< training (link initialization) to use shorter timeouts and to link
///< up faster. The scaling factor is 1024 for all internal timers. Fast
///< Link Mode can also be activated by setting the Fast Link Mode bit
///< of the Port Link Control Register.
#define PCIE_CC_GPREG_CTL_6_S_DIAG_CTRL_BUS_BF_OFF (16)
#define PCIE_CC_GPREG_CTL_6_S_DIAG_CTRL_BUS_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_6_S_DIAG_CTRL_BUS_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_CTL_6_S_DIAG_CTRL_BUS_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_6_S_RESERVED19_BF_OFF (19)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED19_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED19_BF_MSK (0x00080000)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED19_BF_DEF (0x00000000)

///< Performs manual lane reversal for receive lanes
#define PCIE_CC_GPREG_CTL_6_S_RX_LANE_FLIP_EN_BF_OFF (20)
#define PCIE_CC_GPREG_CTL_6_S_RX_LANE_FLIP_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_6_S_RX_LANE_FLIP_EN_BF_MSK (0x00100000)
#define PCIE_CC_GPREG_CTL_6_S_RX_LANE_FLIP_EN_BF_DEF (0x00000000)

///< Performs manual lane reversal for transmit lanes
#define PCIE_CC_GPREG_CTL_6_S_TX_LANE_FLIP_EN_BF_OFF (21)
#define PCIE_CC_GPREG_CTL_6_S_TX_LANE_FLIP_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_6_S_TX_LANE_FLIP_EN_BF_MSK (0x00200000)
#define PCIE_CC_GPREG_CTL_6_S_TX_LANE_FLIP_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_6_S_RESERVED22_BF_OFF (22)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED22_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED22_BF_MSK (0x00C00000)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED22_BF_DEF (0x00000000)

///< Pulse to force a Stream to Insecure state. Selective Streams, if present,
///< are represented by the least significant bits of this signal. Link
///< Streams are concatenated in order after the Selective Streams.
#define PCIE_CC_GPREG_CTL_6_S_APP_SEND_STRM_TO_INSECURE_BF_OFF (24)
#define PCIE_CC_GPREG_CTL_6_S_APP_SEND_STRM_TO_INSECURE_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_6_S_APP_SEND_STRM_TO_INSECURE_BF_MSK (0x03000000)
#define PCIE_CC_GPREG_CTL_6_S_APP_SEND_STRM_TO_INSECURE_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_6_S_RESERVED26_BF_OFF (26)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED26_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED26_BF_MSK (0x0C000000)
#define PCIE_CC_GPREG_CTL_6_S_RESERVED26_BF_DEF (0x00000000)

///< Indicates if the TDI State represented by the PF. Each state is 3bits
///< wide, so for example the TDI state of PF2 is app_tdi_state_pf[2*3+:3]
///< Encoding as: - 3'b0xx: NON-TEE Function (bound to Legacy VM),
///< TDISP additional checks have no effect for inbound TLPs matching this
///< Function - 3'b100: CONFIG_UNLOCKED - 3'b101: CONFIG_LOCKED - 3'b110:
///< RUN - 3'b111: ERROR. Valid only for Endpoints
#define PCIE_CC_GPREG_CTL_6_S_APP_TDI_STATE_PF_BF_OFF (28)
#define PCIE_CC_GPREG_CTL_6_S_APP_TDI_STATE_PF_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_6_S_APP_TDI_STATE_PF_BF_MSK (0x70000000)
#define PCIE_CC_GPREG_CTL_6_S_APP_TDI_STATE_PF_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_7 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_7
  * CC Control Register 7
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t APPS_PM_XMT_TURNOFF : 1;
    ///< Request from your application to generate a PM_Turn_Off message
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t APP_UNLOCK_MSG : 1;
    ///< Request from your application to generate an Unlock message
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t APPS_PM_XMT_PME : 1;
    ///< Wake Up. Used by application logic to wake up the PMC state machine
    ///< from a D1, D2 or D3 power state. Upon wake-up, the core sends a PM_PME
    ///< Message.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t RESERVED10 : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t APP_DEV_NUM : 5;
    ///< Device Number in requester ID
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RESERVED21 : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
    uint32_t APP_BUS_NUM : 8;
    ///< Bus Number in requester ID
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_7_reg_t;

#define PCIE_CC_GPREG_CTL_7_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_7_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_7_WR_MASK (0xff1f0380U)


///< Reserved
#define PCIE_CC_GPREG_CTL_7_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_7_RESERVED0_BF_WID ( 7)
#define PCIE_CC_GPREG_CTL_7_RESERVED0_BF_MSK (0x0000007F)
#define PCIE_CC_GPREG_CTL_7_RESERVED0_BF_DEF (0x00000000)

///< Request from your application to generate a PM_Turn_Off message
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_TURNOFF_BF_OFF ( 7)
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_TURNOFF_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_TURNOFF_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_TURNOFF_BF_DEF (0x00000000)

///< Request from your application to generate an Unlock message
#define PCIE_CC_GPREG_CTL_7_APP_UNLOCK_MSG_BF_OFF ( 8)
#define PCIE_CC_GPREG_CTL_7_APP_UNLOCK_MSG_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_7_APP_UNLOCK_MSG_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_CTL_7_APP_UNLOCK_MSG_BF_DEF (0x00000000)

///< Wake Up. Used by application logic to wake up the PMC state machine
///< from a D1, D2 or D3 power state. Upon wake-up, the core sends a PM_PME
///< Message.
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_PME_BF_OFF ( 9)
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_PME_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_PME_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_CTL_7_APPS_PM_XMT_PME_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_7_RESERVED10_BF_OFF (10)
#define PCIE_CC_GPREG_CTL_7_RESERVED10_BF_WID ( 6)
#define PCIE_CC_GPREG_CTL_7_RESERVED10_BF_MSK (0x0000FC00)
#define PCIE_CC_GPREG_CTL_7_RESERVED10_BF_DEF (0x00000000)

///< Device Number in requester ID
#define PCIE_CC_GPREG_CTL_7_APP_DEV_NUM_BF_OFF (16)
#define PCIE_CC_GPREG_CTL_7_APP_DEV_NUM_BF_WID ( 5)
#define PCIE_CC_GPREG_CTL_7_APP_DEV_NUM_BF_MSK (0x001F0000)
#define PCIE_CC_GPREG_CTL_7_APP_DEV_NUM_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_7_RESERVED21_BF_OFF (21)
#define PCIE_CC_GPREG_CTL_7_RESERVED21_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_7_RESERVED21_BF_MSK (0x00E00000)
#define PCIE_CC_GPREG_CTL_7_RESERVED21_BF_DEF (0x00000000)

///< Bus Number in requester ID
#define PCIE_CC_GPREG_CTL_7_APP_BUS_NUM_BF_OFF (24)
#define PCIE_CC_GPREG_CTL_7_APP_BUS_NUM_BF_WID ( 8)
#define PCIE_CC_GPREG_CTL_7_APP_BUS_NUM_BF_MSK (0xFF000000)
#define PCIE_CC_GPREG_CTL_7_APP_BUS_NUM_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_CTL_8 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ctl_8
  * PCIE Control 8 Register - MSI Doorbell
  */

typedef union {
  struct {
    uint32_t GP_VECTOR : 5;
    ///< Interrupt Vector Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED5 : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t GP_RESET : 2;
    ///< Toggle value 2'b11->2'b00 to reset the module
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RESERVED10 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t GP_TC : 3;
    ///< TC value
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED15 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t RESERVED16 : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t GP_PF : 5;
    ///< Physical Function Number
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RESERVED29 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="0x0"
    uint32_t GP_CLR_PENDING : 1;
    ///< Clear Associated Pending Bit
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t GP_REQ : 1;
    ///< Send Request (0 -> 1)
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ctl_8_reg_t;

#define PCIE_CC_GPREG_CTL_8_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_CTL_8_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_CTL_8_WR_MASK (0xdf00731fU)


///< Interrupt Vector Value
#define PCIE_CC_GPREG_CTL_8_GP_VECTOR_BF_OFF ( 0)
#define PCIE_CC_GPREG_CTL_8_GP_VECTOR_BF_WID ( 5)
#define PCIE_CC_GPREG_CTL_8_GP_VECTOR_BF_MSK (0x0000001F)
#define PCIE_CC_GPREG_CTL_8_GP_VECTOR_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_8_RESERVED5_BF_OFF ( 5)
#define PCIE_CC_GPREG_CTL_8_RESERVED5_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_8_RESERVED5_BF_MSK (0x000000E0)
#define PCIE_CC_GPREG_CTL_8_RESERVED5_BF_DEF (0x00000000)

///< Toggle value 2'b11->2'b00 to reset the module
#define PCIE_CC_GPREG_CTL_8_GP_RST_BF_OFF ( 8)
#define PCIE_CC_GPREG_CTL_8_GP_RST_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_8_GP_RST_BF_MSK (0x00000300)
#define PCIE_CC_GPREG_CTL_8_GP_RST_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_8_RESERVED10_BF_OFF (10)
#define PCIE_CC_GPREG_CTL_8_RESERVED10_BF_WID ( 2)
#define PCIE_CC_GPREG_CTL_8_RESERVED10_BF_MSK (0x00000C00)
#define PCIE_CC_GPREG_CTL_8_RESERVED10_BF_DEF (0x00000000)

///< TC value
#define PCIE_CC_GPREG_CTL_8_GP_TC_BF_OFF (12)
#define PCIE_CC_GPREG_CTL_8_GP_TC_BF_WID ( 3)
#define PCIE_CC_GPREG_CTL_8_GP_TC_BF_MSK (0x00007000)
#define PCIE_CC_GPREG_CTL_8_GP_TC_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_8_RESERVED15_BF_OFF (15)
#define PCIE_CC_GPREG_CTL_8_RESERVED15_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_8_RESERVED15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_CTL_8_RESERVED15_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_8_RESERVED16_BF_OFF (16)
#define PCIE_CC_GPREG_CTL_8_RESERVED16_BF_WID ( 8)
#define PCIE_CC_GPREG_CTL_8_RESERVED16_BF_MSK (0x00FF0000)
#define PCIE_CC_GPREG_CTL_8_RESERVED16_BF_DEF (0x00000000)

///< Physical Function Number
#define PCIE_CC_GPREG_CTL_8_GP_PF_BF_OFF (24)
#define PCIE_CC_GPREG_CTL_8_GP_PF_BF_WID ( 5)
#define PCIE_CC_GPREG_CTL_8_GP_PF_BF_MSK (0x1F000000)
#define PCIE_CC_GPREG_CTL_8_GP_PF_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_CTL_8_RESERVED29_BF_OFF (29)
#define PCIE_CC_GPREG_CTL_8_RESERVED29_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_8_RESERVED29_BF_MSK (0x20000000)
#define PCIE_CC_GPREG_CTL_8_RESERVED29_BF_DEF (0x00000000)

///< Clear Associated Pending Bit
#define PCIE_CC_GPREG_CTL_8_GP_CLR_PENDING_BF_OFF (30)
#define PCIE_CC_GPREG_CTL_8_GP_CLR_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_8_GP_CLR_PENDING_BF_MSK (0x40000000)
#define PCIE_CC_GPREG_CTL_8_GP_CLR_PENDING_BF_DEF (0x00000000)

///< Send Request (0 -> 1)
#define PCIE_CC_GPREG_CTL_8_GP_REQ_BF_OFF (31)
#define PCIE_CC_GPREG_CTL_8_GP_REQ_BF_WID ( 1)
#define PCIE_CC_GPREG_CTL_8_GP_REQ_BF_MSK (0x80000000)
#define PCIE_CC_GPREG_CTL_8_GP_REQ_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_FORCE_TYPE_S register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_force_type_S
  * Memory ECC Force Error Type Register
  */

typedef union {
  struct {
    uint32_t ECC_FORCE_TYPE_M2T0 : 3;
    ///< Force Error Type. This bit indicates the type of ECC errors forced
    ///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_FORCE_TYPE_M6 : 1;
    ///< Force Error Type. This bit indicates the type of ECC errors forced
    ///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_FORCE_TYPE_M27T8 : 20;
    ///< Force Error Type. This bit indicates the type of ECC errors forced
    ///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_force_type_s_reg_t;

#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_WR_MASK (0x0fffff47U)


///< Force Error Type. This bit indicates the type of ECC errors forced
///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M2T0_BF_DEF (0x00000000)

///< Force Error Type. This bit indicates the type of ECC errors forced
///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M6_BF_DEF (0x00000000)

///< Force Error Type. This bit indicates the type of ECC errors forced
///< to be inserted. 1=Double Bit Error(DBE), 0=Single Bit Error(SBE).
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ECC_FORCE_TYPE_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_FORCE_ERR_S register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_force_err_S
  * Memory ECC Force Error Register
  */

typedef union {
  struct {
    uint32_t ECC_FORCE_ERR_M2T0 : 3;
    ///< Force Error. When set to 1, this bit enables to insert one ECC error
    ///< determined by FORCE_TYPE. SW write this bit to zero and then write
    ///< it to a one to generate another error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_FORCE_ERR_M6 : 1;
    ///< Force Error. When set to 1, this bit enables to insert one ECC error
    ///< determined by FORCE_TYPE. SW write this bit to zero and then write
    ///< it to a one to generate another error.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_FORCE_ERR_M27T8 : 20;
    ///< Force Error. When set to 1, this bit enables to insert one ECC error
    ///< determined by FORCE_TYPE. SW write this bit to zero and then write
    ///< it to a one to generate another error.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_force_err_s_reg_t;

#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_WR_MASK (0x0fffff47U)


///< Force Error. When set to 1, this bit enables to insert one ECC error
///< determined by FORCE_TYPE. SW write this bit to zero and then write
///< it to a one to generate another error.
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M2T0_BF_DEF (0x00000000)

///< Force Error. When set to 1, this bit enables to insert one ECC error
///< determined by FORCE_TYPE. SW write this bit to zero and then write
///< it to a one to generate another error.
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M6_BF_DEF (0x00000000)

///< Force Error. When set to 1, this bit enables to insert one ECC error
///< determined by FORCE_TYPE. SW write this bit to zero and then write
///< it to a one to generate another error.
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_ECC_FORCE_ERR_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_ERR_CLR_S register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_err_clr_S
  * Memory ECC Error Clear Register
  */

typedef union {
  struct {
    uint32_t ECC_ERR_CLR_M2T0 : 3;
    ///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
    ///< status and information of the correponding memory slice. This bit
    ///< retains the last written value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_ERR_CLR_M6 : 1;
    ///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
    ///< status and information of the correponding memory slice. This bit
    ///< retains the last written value.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_ERR_CLR_M27T8 : 20;
    ///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
    ///< status and information of the correponding memory slice. This bit
    ///< retains the last written value.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_err_clr_s_reg_t;

#define PCIE_CC_GPREG_ECC_ERR_CLR_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_WR_MASK (0x0fffff47U)


///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
///< status and information of the correponding memory slice. This bit
///< retains the last written value.
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M2T0_BF_DEF (0x00000000)

///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
///< status and information of the correponding memory slice. This bit
///< retains the last written value.
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M6_BF_DEF (0x00000000)

///< Error Clear. Writing this bit to 1 clears SBE, DBE, ERR_ADDR and ERR_SYNDROME
///< status and information of the correponding memory slice. This bit
///< retains the last written value.
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_ECC_ERR_CLR_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_CNT_CLR_S register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_cnt_clr_S
  * Memory ECC Error Clear Register
  */

typedef union {
  struct {
    uint32_t ECC_CNT_CLR_M2T0 : 3;
    ///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
    ///< status and information of the corresponding memory slice. This bit
    ///< retains the last written value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_CNT_CLR_M6 : 1;
    ///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
    ///< status and information of the corresponding memory slice. This bit
    ///< retains the last written value.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_CNT_CLR_M27T8 : 20;
    ///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
    ///< status and information of the corresponding memory slice. This bit
    ///< retains the last written value.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_cnt_clr_s_reg_t;

#define PCIE_CC_GPREG_ECC_CNT_CLR_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_WR_MASK (0x0fffff47U)


///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
///< status and information of the corresponding memory slice. This bit
///< retains the last written value.
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M2T0_BF_DEF (0x00000000)

///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
///< status and information of the corresponding memory slice. This bit
///< retains the last written value.
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M6_BF_DEF (0x00000000)

///< Count Clear. Writing this bit to 1 clears SBE_COUNT and SBE_CNT_OVFL
///< status and information of the corresponding memory slice. This bit
///< retains the last written value.
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_ECC_CNT_CLR_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_CHK_DIS_S register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_chk_dis_S
  * Memory ECC Check Disable Register
  */

typedef union {
  struct {
    uint32_t ECC_CHK_DIS_M2T0 : 3;
    ///< heck and Correction Disable. When set, this bit disables ECC checking
    ///< and correction for the corresponding memory slice. It's used for debug
    ///< and testing purpose.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_CHK_DIS_M6 : 1;
    ///< heck and Correction Disable. When set, this bit disables ECC checking
    ///< and correction for the corresponding memory slice. It's used for debug
    ///< and testing purpose.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_CHK_DIS_M27T8 : 20;
    ///< heck and Correction Disable. When set, this bit disables ECC checking
    ///< and correction for the corresponding memory slice. It's used for debug
    ///< and testing purpose.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_chk_dis_s_reg_t;

#define PCIE_CC_GPREG_ECC_CHK_DIS_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_WR_MASK (0x0fffff47U)


///< heck and Correction Disable. When set, this bit disables ECC checking
///< and correction for the corresponding memory slice. It's used for debug
///< and testing purpose.
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M2T0_BF_DEF (0x00000000)

///< heck and Correction Disable. When set, this bit disables ECC checking
///< and correction for the corresponding memory slice. It's used for debug
///< and testing purpose.
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M6_BF_DEF (0x00000000)

///< heck and Correction Disable. When set, this bit disables ECC checking
///< and correction for the corresponding memory slice. It's used for debug
///< and testing purpose.
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_ECC_CHK_DIS_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_GEN_DIS_S register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_gen_dis_S
  * Memory ECC Generation Disable Register
  */

typedef union {
  struct {
    uint32_t ECC_GEN_DIS_M2T0 : 3;
    ///< Generation Disable. When set, this bit disables ECC generation for
    ///< the corresponding memory slice. It's used for debug and testing purpose.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_GEN_DIS_M6 : 1;
    ///< Generation Disable. When set, this bit disables ECC generation for
    ///< the corresponding memory slice. It's used for debug and testing purpose
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_GEN_DIS_M27T8 : 20;
    ///< Generation Disable. When set, this bit disables ECC generation for
    ///< the corresponding memory slice. It's used for debug and testing purpose.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_gen_dis_s_reg_t;

#define PCIE_CC_GPREG_ECC_GEN_DIS_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_WR_MASK (0x0fffff47U)


///< Generation Disable. When set, this bit disables ECC generation for
///< the corresponding memory slice. It's used for debug and testing purpose.
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M2T0_BF_DEF (0x00000000)

///< Generation Disable. When set, this bit disables ECC generation for
///< the corresponding memory slice. It's used for debug and testing purpose
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M6_BF_DEF (0x00000000)

///< Generation Disable. When set, this bit disables ECC generation for
///< the corresponding memory slice. It's used for debug and testing purpose.
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_ECC_GEN_DIS_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_WIRE_SW_SHADOW_REG_S[22] register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_wire_sw_shadow_reg_S
  * Write Access SW Write Shadow register value to Config Space
  */

typedef union {
  struct {
    uint32_t WIRE_ACCESS_SHADOW_VALUE : 32;
    ///< SW must update the associated values with the value written to the
    ///< associated register value, this value will be used when a write from
    ///< the wire is attempted and the register is protected.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_wire_sw_shdw_s_reg_t;

#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_WR_MASK (0xffffffffU)


///< SW must update the associated values with the value written to the
///< associated register value, this value will be used when a write from
///< the wire is attempted and the register is protected.
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_WIRE_ACCESS_SHDW_VAL_BF_OFF ( 0)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_WIRE_ACCESS_SHDW_VAL_BF_WID (32)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_WIRE_ACCESS_SHDW_VAL_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_WIRE_ACCESS_SHDW_VAL_BF_DEF (0x00000000)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_ARR_SZ0 (22)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S_ARRAY_STRIDE0 (0x0004)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_0 register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_0
  * CC Monitor 0 Register
  */

typedef union {
  struct {
    uint32_t APP_SRIS_MODE_SYNC : 1;
    ///< Top Level Fuse value to set SRIS mode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t DEVICE_TYPE_SYNC : 4;
    ///< Device/port type 0:PCIE Express Endpoint; 1=Legacy Endpoint; 4=RC
    ///< Mode
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_PCIE_CAP_INT_MSG_NUM : 5;
    ///< Assertion of hp_msi or cfg_pme_msi along with a value cfg_pcie_cap_int_msg_num
    ///< is equivalent to the core receiving an MSI with the cfg_pcie_cap_int_msg_num
    ///< value as the MSI vector.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_0_reg_t;

#define PCIE_CC_GPREG_RO_0_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_0_RD_MASK (0x00001ff1U)
#define PCIE_CC_GPREG_RO_0_WR_MASK (0x00000000U)


///< Top Level Fuse value to set SRIS mode
#define PCIE_CC_GPREG_RO_0_APP_SRIS_MODE_SYNC_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_0_APP_SRIS_MODE_SYNC_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_0_APP_SRIS_MODE_SYNC_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_RO_0_APP_SRIS_MODE_SYNC_BF_DEF (0x00000000)

///< Device/port type 0:PCIE Express Endpoint; 1=Legacy Endpoint; 4=RC
///< Mode
#define PCIE_CC_GPREG_RO_0_DEVICE_TYPE_SYNC_BF_OFF ( 4)
#define PCIE_CC_GPREG_RO_0_DEVICE_TYPE_SYNC_BF_WID ( 4)
#define PCIE_CC_GPREG_RO_0_DEVICE_TYPE_SYNC_BF_MSK (0x000000F0)
#define PCIE_CC_GPREG_RO_0_DEVICE_TYPE_SYNC_BF_DEF (0x00000000)

///< Assertion of hp_msi or cfg_pme_msi along with a value cfg_pcie_cap_int_msg_num
///< is equivalent to the core receiving an MSI with the cfg_pcie_cap_int_msg_num
///< value as the MSI vector.
#define PCIE_CC_GPREG_RO_0_CFG_PCIE_CAP_INT_MSG_NUM_BF_OFF ( 8)
#define PCIE_CC_GPREG_RO_0_CFG_PCIE_CAP_INT_MSG_NUM_BF_WID ( 5)
#define PCIE_CC_GPREG_RO_0_CFG_PCIE_CAP_INT_MSG_NUM_BF_MSK (0x00001F00)
#define PCIE_CC_GPREG_RO_0_CFG_PCIE_CAP_INT_MSG_NUM_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_3 register description at address offset 0x20c
  *
  * Register default value:        0x00000123
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_3
  * CC Monitor 3 Register - MSI Doorbell Gen Status
  */

typedef union {
  struct {
    uint32_t GP_RDY : 1;
    ///< Ready: 1 when logic can accept a new SW doorbell message , 0 when
    ///< logic is sending a MSI message
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x1"
    uint32_t GP_SENT : 1;
    ///< MSI TLP sent - inverted value of selected gp_pending bit
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x1"
    uint32_t GP_PENDING : 1;
    ///< Pending value of selected gp_pf_sent or gp_vf_sent value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t GP_F_FLR : 1;
    ///< Selected Function Level Reset value
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t GP_F_DIS : 1;
    ///< Inverted value of the gp_msi_en signal
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x1"
    uint32_t GP_MSI_EN : 1;
    ///< MSI Enable value
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t GP_MSI_MASK : 1;
    ///< Mask value of selected gp_pf_sent or gp_vf_sent value
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t GP_MSI_64 : 1;
    ///< From MSI Capability value
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x1"
    uint32_t GP_MULTI_MSI_EN : 3;
    ///< From MSI Capability value
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RESERVED12 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t VEN_MSI_REQ_NXT : 1;
    ///< Debug Signal
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t INTR_RCS_SYNC : 1;
    ///< Value of RCS External Interrupt - Active High
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t RESERVED15 : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t GP_PF_SENT : 4;
    ///< PF value from MSI Doorbell Register
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t MSI_ST : 4;
    ///< MSI Pending Clear State Machine: [br] MSI_IDLE = 0 [br] MSI_PF_SEND
    ///< = 1 [br] MSI_PF_WAIT = 2 [br] MSI_DONE = 3 [br] MSI_DONE2 = 4 [br]
    ///< MSI_ERROR = 5
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_3_reg_t;

#define PCIE_CC_GPREG_RO_3_DEFAULT (0x00000123U)
#define PCIE_CC_GPREG_RO_3_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_3_WR_MASK (0x00000000U)


///< Ready: 1 when logic can accept a new SW doorbell message , 0 when
///< logic is sending a MSI message
#define PCIE_CC_GPREG_RO_3_GP_RDY_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_3_GP_RDY_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_RDY_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_RO_3_GP_RDY_BF_DEF (0x00000001)

///< MSI TLP sent - inverted value of selected gp_pending bit
#define PCIE_CC_GPREG_RO_3_GP_SENT_BF_OFF ( 1)
#define PCIE_CC_GPREG_RO_3_GP_SENT_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_SENT_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_RO_3_GP_SENT_BF_DEF (0x00000002)

///< Pending value of selected gp_pf_sent or gp_vf_sent value
#define PCIE_CC_GPREG_RO_3_GP_PENDING_BF_OFF ( 2)
#define PCIE_CC_GPREG_RO_3_GP_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_PENDING_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_RO_3_GP_PENDING_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_RO_3_RESERVED3_BF_OFF ( 3)
#define PCIE_CC_GPREG_RO_3_RESERVED3_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_RESERVED3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_RO_3_RESERVED3_BF_DEF (0x00000000)

///< Selected Function Level Reset value
#define PCIE_CC_GPREG_RO_3_GP_F_FLR_BF_OFF ( 4)
#define PCIE_CC_GPREG_RO_3_GP_F_FLR_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_F_FLR_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_RO_3_GP_F_FLR_BF_DEF (0x00000000)

///< Inverted value of the gp_msi_en signal
#define PCIE_CC_GPREG_RO_3_GP_F_DIS_BF_OFF ( 5)
#define PCIE_CC_GPREG_RO_3_GP_F_DIS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_F_DIS_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_RO_3_GP_F_DIS_BF_DEF (0x00000020)

///< MSI Enable value
#define PCIE_CC_GPREG_RO_3_GP_MSI_EN_BF_OFF ( 6)
#define PCIE_CC_GPREG_RO_3_GP_MSI_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_MSI_EN_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_RO_3_GP_MSI_EN_BF_DEF (0x00000000)

///< Mask value of selected gp_pf_sent or gp_vf_sent value
#define PCIE_CC_GPREG_RO_3_GP_MSI_MASK_BF_OFF ( 7)
#define PCIE_CC_GPREG_RO_3_GP_MSI_MASK_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_MSI_MASK_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_RO_3_GP_MSI_MASK_BF_DEF (0x00000000)

///< From MSI Capability value
#define PCIE_CC_GPREG_RO_3_GP_MSI_64_BF_OFF ( 8)
#define PCIE_CC_GPREG_RO_3_GP_MSI_64_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_GP_MSI_64_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_RO_3_GP_MSI_64_BF_DEF (0x00000100)

///< From MSI Capability value
#define PCIE_CC_GPREG_RO_3_GP_MULTI_MSI_EN_BF_OFF ( 9)
#define PCIE_CC_GPREG_RO_3_GP_MULTI_MSI_EN_BF_WID ( 3)
#define PCIE_CC_GPREG_RO_3_GP_MULTI_MSI_EN_BF_MSK (0x00000E00)
#define PCIE_CC_GPREG_RO_3_GP_MULTI_MSI_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_RO_3_RESERVED12_BF_OFF (12)
#define PCIE_CC_GPREG_RO_3_RESERVED12_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_RESERVED12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_RO_3_RESERVED12_BF_DEF (0x00000000)

///< Debug Signal
#define PCIE_CC_GPREG_RO_3_VEN_MSI_REQ_NXT_BF_OFF (13)
#define PCIE_CC_GPREG_RO_3_VEN_MSI_REQ_NXT_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_VEN_MSI_REQ_NXT_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_RO_3_VEN_MSI_REQ_NXT_BF_DEF (0x00000000)

///< Value of RCS External Interrupt - Active High
#define PCIE_CC_GPREG_RO_3_INTR_RCS_SYNC_BF_OFF (14)
#define PCIE_CC_GPREG_RO_3_INTR_RCS_SYNC_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_3_INTR_RCS_SYNC_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_RO_3_INTR_RCS_SYNC_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_RO_3_RESERVED15_BF_OFF (15)
#define PCIE_CC_GPREG_RO_3_RESERVED15_BF_WID ( 9)
#define PCIE_CC_GPREG_RO_3_RESERVED15_BF_MSK (0x00FF8000)
#define PCIE_CC_GPREG_RO_3_RESERVED15_BF_DEF (0x00000000)

///< PF value from MSI Doorbell Register
#define PCIE_CC_GPREG_RO_3_GP_PF_SENT_BF_OFF (24)
#define PCIE_CC_GPREG_RO_3_GP_PF_SENT_BF_WID ( 4)
#define PCIE_CC_GPREG_RO_3_GP_PF_SENT_BF_MSK (0x0F000000)
#define PCIE_CC_GPREG_RO_3_GP_PF_SENT_BF_DEF (0x00000000)

///< MSI Pending Clear State Machine: [br] MSI_IDLE = 0 [br] MSI_PF_SEND
///< = 1 [br] MSI_PF_WAIT = 2 [br] MSI_DONE = 3 [br] MSI_DONE2 = 4 [br]
///< MSI_ERROR = 5
#define PCIE_CC_GPREG_RO_3_MSI_ST_BF_OFF (28)
#define PCIE_CC_GPREG_RO_3_MSI_ST_BF_WID ( 4)
#define PCIE_CC_GPREG_RO_3_MSI_ST_BF_MSK (0xF0000000)
#define PCIE_CC_GPREG_RO_3_MSI_ST_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_4 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_4
  * CC Monitor 4 Register - MSI Doorbell Gen
  */

typedef union {
  struct {
    uint32_t MSI_DOORBELL_ADDR : 32;
    ///< MSI Lower Address
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_4_reg_t;

#define PCIE_CC_GPREG_RO_4_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_4_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_4_WR_MASK (0x00000000U)


///< MSI Lower Address
#define PCIE_CC_GPREG_RO_4_MSI_DOORBELL_ADDR_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_4_MSI_DOORBELL_ADDR_BF_WID (32)
#define PCIE_CC_GPREG_RO_4_MSI_DOORBELL_ADDR_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_RO_4_MSI_DOORBELL_ADDR_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_5 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_5
  * CC Monitor 5 Register - MSI Doorbell Gen
  */

typedef union {
  struct {
    uint32_t MSI_DOORBELL_ADDR_UPPER : 32;
    ///< MSI Upper Address
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_5_reg_t;

#define PCIE_CC_GPREG_RO_5_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_5_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_5_WR_MASK (0x00000000U)


///< MSI Upper Address
#define PCIE_CC_GPREG_RO_5_MSI_DOORBELL_ADDR_UPPER_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_5_MSI_DOORBELL_ADDR_UPPER_BF_WID (32)
#define PCIE_CC_GPREG_RO_5_MSI_DOORBELL_ADDR_UPPER_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_RO_5_MSI_DOORBELL_ADDR_UPPER_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_6 register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_6
  * CC Monitor 6 Register - MSI Doorbell Data
  */

typedef union {
  struct {
    uint32_t MSI_DOORBELL_DATA : 32;
    ///< MSI Doorbell Data - Valid only when gp_vfActive=0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_6_reg_t;

#define PCIE_CC_GPREG_RO_6_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_6_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_6_WR_MASK (0x00000000U)


///< MSI Doorbell Data - Valid only when gp_vfActive=0
#define PCIE_CC_GPREG_RO_6_MSI_DOORBELL_DATA_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_6_MSI_DOORBELL_DATA_BF_WID (32)
#define PCIE_CC_GPREG_RO_6_MSI_DOORBELL_DATA_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_RO_6_MSI_DOORBELL_DATA_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_8 register description at address offset 0x220
  *
  * Register default value:        0x00040000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_8
  * CC Monitor 8 Register
  */

typedef union {
  struct {
    uint32_t PM_CURNT_STATE : 3;
    ///< Indicates the current power state.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t SMLH_LTSSM_STATE : 6;
    ///< Current state of the LTSSM. Encoding is defined as follows: - 6'h00:
    ///< S_DETECT_QUIET - 6'h01: S_DETECT_ACT - 6'h02: S_POLL_ACTIVE - 6'h03:
    ///< S_POLL_COMPLIANCE - 6'h04: S_POLL_CONFIG - 6'h05: S_PRE_DETECT_QUIET
    ///< - 6'h06: S_DETECT_WAIT - 6'h07: S_CFG_LINKWD_START - 6'h08: S_CFG_LINKWD_ACEPT
    ///< - 6'h09: S_CFG_LANENUM_WAI - 6'h0A: S_CFG_LANENUM_ACEPT - 6'h0B: S_CFG_COMPLETE
    ///< - 6'h0C: S_CFG_IDLE - 6'h0D: S_RCVRY_LOCK - 6'h0E: S_RCVRY_SPEED -
    ///< 6'h0F: S_RCVRY_RCVRCFG - 6'h10: S_RCVRY_IDLE - 6'h11: S_L0 - 6'h12:
    ///< S_L0S - 6'h13: S_L123_SEND_EIDLE - 6'h14: S_L1_IDLE - 6'h15: S_L2_IDLE
    ///< - 6'h16: S_L2_WAKE - 6'h17: S_DISABLED_ENTRY - 6'h18: S_DISABLED_IDLE
    ///< - 6'h19: S_DISABLED - 6'h1A: S_LPBK_ENTRY - 6'h1B: S_LPBK_ACTIVE -
    ///< 6'h1C: S_LPBK_EXIT - 6'h1D: S_LPBK_EXIT_TIMEOUT - 6'h1E: S_HOT_RESET_ENTRY
    ///< - 6'h1F: S_HOT_RESET - 6'h20: S_RCVRY_EQ0 - 6'h21: S_RCVRY_EQ1 - 6'h22:
    ///< S_RCVRY_EQ2 - 6'h23: S_RCVRY_EQ3
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t SMLH_LINK_UP : 1;
    ///< PHY Link up/down indicator
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t PM_DSTATE : 3;
    ///< The current power management D-state of the function: - 000b: D0 -
    ///< 001b: D1 - 010b: D2 - 011b: D3 - 100b: Uninitialized - Other values:
    ///< Not applicable
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x4"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PM_LINKST_IN_L0S : 1;
    ///< Power management is in L0s state
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t PM_LINKST_IN_L1 : 1;
    ///< Power management is in L1 state
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t PM_LINKST_IN_L2 : 1;
    ///< Power management is in L2 state
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_8_reg_t;

#define PCIE_CC_GPREG_RO_8_DEFAULT (0x00040000U)
#define PCIE_CC_GPREG_RO_8_RD_MASK (0x038713f7U)
#define PCIE_CC_GPREG_RO_8_WR_MASK (0x00000000U)


///< Indicates the current power state.
#define PCIE_CC_GPREG_RO_8_PM_CURNT_STATE_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_8_PM_CURNT_STATE_BF_WID ( 3)
#define PCIE_CC_GPREG_RO_8_PM_CURNT_STATE_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_RO_8_PM_CURNT_STATE_BF_DEF (0x00000000)

///< Current state of the LTSSM. Encoding is defined as follows: - 6'h00:
///< S_DETECT_QUIET - 6'h01: S_DETECT_ACT - 6'h02: S_POLL_ACTIVE - 6'h03:
///< S_POLL_COMPLIANCE - 6'h04: S_POLL_CONFIG - 6'h05: S_PRE_DETECT_QUIET
///< - 6'h06: S_DETECT_WAIT - 6'h07: S_CFG_LINKWD_START - 6'h08: S_CFG_LINKWD_ACEPT
///< - 6'h09: S_CFG_LANENUM_WAI - 6'h0A: S_CFG_LANENUM_ACEPT - 6'h0B: S_CFG_COMPLETE
///< - 6'h0C: S_CFG_IDLE - 6'h0D: S_RCVRY_LOCK - 6'h0E: S_RCVRY_SPEED -
///< 6'h0F: S_RCVRY_RCVRCFG - 6'h10: S_RCVRY_IDLE - 6'h11: S_L0 - 6'h12:
///< S_L0S - 6'h13: S_L123_SEND_EIDLE - 6'h14: S_L1_IDLE - 6'h15: S_L2_IDLE
///< - 6'h16: S_L2_WAKE - 6'h17: S_DISABLED_ENTRY - 6'h18: S_DISABLED_IDLE
///< - 6'h19: S_DISABLED - 6'h1A: S_LPBK_ENTRY - 6'h1B: S_LPBK_ACTIVE -
///< 6'h1C: S_LPBK_EXIT - 6'h1D: S_LPBK_EXIT_TIMEOUT - 6'h1E: S_HOT_RESET_ENTRY
///< - 6'h1F: S_HOT_RESET - 6'h20: S_RCVRY_EQ0 - 6'h21: S_RCVRY_EQ1 - 6'h22:
///< S_RCVRY_EQ2 - 6'h23: S_RCVRY_EQ3
#define PCIE_CC_GPREG_RO_8_SMLH_LTSSM_STATE_BF_OFF ( 4)
#define PCIE_CC_GPREG_RO_8_SMLH_LTSSM_STATE_BF_WID ( 6)
#define PCIE_CC_GPREG_RO_8_SMLH_LTSSM_STATE_BF_MSK (0x000003F0)
#define PCIE_CC_GPREG_RO_8_SMLH_LTSSM_STATE_BF_DEF (0x00000000)

///< PHY Link up/down indicator
#define PCIE_CC_GPREG_RO_8_SMLH_LINK_UP_BF_OFF (12)
#define PCIE_CC_GPREG_RO_8_SMLH_LINK_UP_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_8_SMLH_LINK_UP_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_RO_8_SMLH_LINK_UP_BF_DEF (0x00000000)

///< The current power management D-state of the function: - 000b: D0 -
///< 001b: D1 - 010b: D2 - 011b: D3 - 100b: Uninitialized - Other values:
///< Not applicable
#define PCIE_CC_GPREG_RO_8_PM_DSTATE_BF_OFF (16)
#define PCIE_CC_GPREG_RO_8_PM_DSTATE_BF_WID ( 3)
#define PCIE_CC_GPREG_RO_8_PM_DSTATE_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_RO_8_PM_DSTATE_BF_DEF (0x00040000)

///< Power management is in L0s state
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L0S_BF_OFF (23)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L0S_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L0S_BF_MSK (0x00800000)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L0S_BF_DEF (0x00000000)

///< Power management is in L1 state
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L1_BF_OFF (24)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L1_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L1_BF_MSK (0x01000000)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L1_BF_DEF (0x00000000)

///< Power management is in L2 state
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L2_BF_OFF (25)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L2_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L2_BF_MSK (0x02000000)
#define PCIE_CC_GPREG_RO_8_PM_LINKST_IN_L2_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_10 register description at address offset 0x228
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_10
  * SII General and Vendor Message Reception
  */

typedef union {
  struct {
    uint32_t RADM_MSG_PAYLOAD_LO : 32;
    ///< Received message header information. Using the example of radm_vendor_msg,
    ///< it is mapped to the TLP header dwords as follows: [br]When RX_TLP
    ///< =1 [br][31:0] =bytes 12-15 (4th dword), where [7:0]=byte 15 [br][63:32]
    ///< =bytes 8-11 (3rd dword)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_10_reg_t;

#define PCIE_CC_GPREG_RO_10_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_10_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_10_WR_MASK (0x00000000U)


///< Received message header information. Using the example of radm_vendor_msg,
///< it is mapped to the TLP header dwords as follows: [br]When RX_TLP
///< =1 [br][31:0] =bytes 12-15 (4th dword), where [7:0]=byte 15 [br][63:32]
///< =bytes 8-11 (3rd dword)
#define PCIE_CC_GPREG_RO_10_RADM_MSG_PAYLOAD_LO_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_10_RADM_MSG_PAYLOAD_LO_BF_WID (32)
#define PCIE_CC_GPREG_RO_10_RADM_MSG_PAYLOAD_LO_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_RO_10_RADM_MSG_PAYLOAD_LO_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_11 register description at address offset 0x22c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_11
  * SII General and Vendor Message Reception
  */

typedef union {
  struct {
    uint32_t RADM_MSG_PAYLOAD_HI : 32;
    ///< Received message header information. Using the example of radm_vendor_msg,
    ///< it is mapped to the TLP header dwords as follows: [br]When RX_TLP
    ///< =1 [br][31:0] =bytes 12-15 (4th dword), where [7:0]=byte 15 [br][63:32]
    ///< =bytes 8-11 (3rd dword)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_11_reg_t;

#define PCIE_CC_GPREG_RO_11_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_11_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_11_WR_MASK (0x00000000U)


///< Received message header information. Using the example of radm_vendor_msg,
///< it is mapped to the TLP header dwords as follows: [br]When RX_TLP
///< =1 [br][31:0] =bytes 12-15 (4th dword), where [7:0]=byte 15 [br][63:32]
///< =bytes 8-11 (3rd dword)
#define PCIE_CC_GPREG_RO_11_RADM_MSG_PAYLOAD_HI_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_11_RADM_MSG_PAYLOAD_HI_BF_WID (32)
#define PCIE_CC_GPREG_RO_11_RADM_MSG_PAYLOAD_HI_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_RO_11_RADM_MSG_PAYLOAD_HI_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_12 register description at address offset 0x230
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_12
  * SII General and Vendor Message Reception
  */

typedef union {
  struct {
    uint32_t RADM_MSG_REQ_ID : 16;
    ///< The requester ID of the received Message. [br][15:8]: Bus number [br][7:3]:
    ///< Device number [br][2:0]: Function number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t RADM_MSG_REQ_EN : 8;
    ///< Message Type Captured: [br]  - radm_vendor_msg [br]  - radm_msg_unlock
    ///< [br]  - radm_nonfatal_err [br]  - radm_fatal_err [br]  - radm_correctable_err
    ///< [br]  - radm_pm_pme [br]  - radm_pm_to_ack [br]  - radm_pm_turnoff
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_12_reg_t;

#define PCIE_CC_GPREG_RO_12_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_12_RD_MASK (0xff00ffffU)
#define PCIE_CC_GPREG_RO_12_WR_MASK (0x00000000U)


///< The requester ID of the received Message. [br][15:8]: Bus number [br][7:3]:
///< Device number [br][2:0]: Function number
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_ID_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_ID_BF_WID (16)
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_ID_BF_MSK (0x0000FFFF)
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_ID_BF_DEF (0x00000000)

///< Message Type Captured: [br]  - radm_vendor_msg [br]  - radm_msg_unlock
///< [br]  - radm_nonfatal_err [br]  - radm_fatal_err [br]  - radm_correctable_err
///< [br]  - radm_pm_pme [br]  - radm_pm_to_ack [br]  - radm_pm_turnoff
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_EN_BF_OFF (24)
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_EN_BF_WID ( 8)
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_EN_BF_MSK (0xFF000000)
#define PCIE_CC_GPREG_RO_12_RADM_MSG_REQ_EN_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_13 register description at address offset 0x234
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_13
  * CC Monitor 13 Register
  */

typedef union {
  struct {
    uint32_t RDLH_LINK_UP : 1;
    ///< Data link layer up/down indicator: Data link layer is ready to transmit
    ///< and receive packets.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t XDLH_RETRYBUF_NOT_EMPTY : 1;
    ///< Retry Buffer not empty indication
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t BRDG_SLV_XFER_PENDING : 1;
    ///< AXI Secondary non-DBI transfer pending status.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t BRDG_DBI_XFER_PENDING : 1;
    ///< AXI Secondary DBI transfer pending status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t EDMA_XFER_PENDING : 1;
    ///< eDMA transfer pending status.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RADM_XFER_PENDING : 1;
    ///< Receive request pending status
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RADM_Q_NOT_EMPTY : 1;
    ///< Level indicating that the receive queues contain TLP header/data
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_13_reg_t;

#define PCIE_CC_GPREG_RO_13_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_13_RD_MASK (0x0000007fU)
#define PCIE_CC_GPREG_RO_13_WR_MASK (0x00000000U)


///< Data link layer up/down indicator: Data link layer is ready to transmit
///< and receive packets.
#define PCIE_CC_GPREG_RO_13_RDLH_LINK_UP_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_13_RDLH_LINK_UP_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_RDLH_LINK_UP_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_RO_13_RDLH_LINK_UP_BF_DEF (0x00000000)

///< Retry Buffer not empty indication
#define PCIE_CC_GPREG_RO_13_XDLH_RETRYBUF_NOT_EMPTY_BF_OFF ( 1)
#define PCIE_CC_GPREG_RO_13_XDLH_RETRYBUF_NOT_EMPTY_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_XDLH_RETRYBUF_NOT_EMPTY_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_RO_13_XDLH_RETRYBUF_NOT_EMPTY_BF_DEF (0x00000000)

///< AXI Secondary non-DBI transfer pending status.
#define PCIE_CC_GPREG_RO_13_BRDG_SLV_XFER_PENDING_BF_OFF ( 2)
#define PCIE_CC_GPREG_RO_13_BRDG_SLV_XFER_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_BRDG_SLV_XFER_PENDING_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_RO_13_BRDG_SLV_XFER_PENDING_BF_DEF (0x00000000)

///< AXI Secondary DBI transfer pending status
#define PCIE_CC_GPREG_RO_13_BRDG_DBI_XFER_PENDING_BF_OFF ( 3)
#define PCIE_CC_GPREG_RO_13_BRDG_DBI_XFER_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_BRDG_DBI_XFER_PENDING_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_RO_13_BRDG_DBI_XFER_PENDING_BF_DEF (0x00000000)

///< eDMA transfer pending status.
#define PCIE_CC_GPREG_RO_13_EDMA_XFER_PENDING_BF_OFF ( 4)
#define PCIE_CC_GPREG_RO_13_EDMA_XFER_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_EDMA_XFER_PENDING_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_RO_13_EDMA_XFER_PENDING_BF_DEF (0x00000000)

///< Receive request pending status
#define PCIE_CC_GPREG_RO_13_RADM_XFER_PENDING_BF_OFF ( 5)
#define PCIE_CC_GPREG_RO_13_RADM_XFER_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_RADM_XFER_PENDING_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_RO_13_RADM_XFER_PENDING_BF_DEF (0x00000000)

///< Level indicating that the receive queues contain TLP header/data
#define PCIE_CC_GPREG_RO_13_RADM_Q_NOT_EMPTY_BF_OFF ( 6)
#define PCIE_CC_GPREG_RO_13_RADM_Q_NOT_EMPTY_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_13_RADM_Q_NOT_EMPTY_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_RO_13_RADM_Q_NOT_EMPTY_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_17 register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_17
  * SII Signals: Receive Control/CPL Timeout
  */

typedef union {
  struct {
    uint32_t RADM_CPL_TIMEOUT : 1;
    ///< Indicates that the completion TLP for a request has not been received
    ///< within the expected time window.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RADM_TIMEOUT_FUNC_NUM : 3;
    ///< The function Number of the timed out completion. Function numbering
    ///< starts at '0'.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RADM_TIMEOUT_CPL_TC : 3;
    ///< The Traffic Class of the timed out completion
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t RADM_TIMEOUT_CPL_ATTR : 2;
    ///< The Attributes field of the timed out completion.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t RADM_TIMEOUT_CPL_TAG : 10;
    ///< The Tag field of the timed out completion.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t RADM_TIMEOUT_CPL_LEN : 8;
    ///< Length (in bytes) of the timed out completion. For a split completion,
    ///< it indicates the number of bytes remaining to be delivered when the
    ///< completion timed out.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_17_reg_t;

#define PCIE_CC_GPREG_RO_17_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_17_RD_MASK (0xff3ff37fU)
#define PCIE_CC_GPREG_RO_17_WR_MASK (0x00000000U)


///< Indicates that the completion TLP for a request has not been received
///< within the expected time window.
#define PCIE_CC_GPREG_RO_17_RADM_CPL_TIMEOUT_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_17_RADM_CPL_TIMEOUT_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_17_RADM_CPL_TIMEOUT_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_RO_17_RADM_CPL_TIMEOUT_BF_DEF (0x00000000)

///< The function Number of the timed out completion. Function numbering
///< starts at '0'.
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_FUNC_NUM_BF_OFF ( 1)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_FUNC_NUM_BF_WID ( 3)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_FUNC_NUM_BF_MSK (0x0000000E)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_FUNC_NUM_BF_DEF (0x00000000)

///< The Traffic Class of the timed out completion
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TC_BF_OFF ( 4)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TC_BF_WID ( 3)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TC_BF_MSK (0x00000070)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TC_BF_DEF (0x00000000)

///< The Attributes field of the timed out completion.
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_ATTR_BF_OFF ( 8)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_ATTR_BF_WID ( 2)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_ATTR_BF_MSK (0x00000300)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_ATTR_BF_DEF (0x00000000)

///< The Tag field of the timed out completion.
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TAG_BF_OFF (12)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TAG_BF_WID (10)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TAG_BF_MSK (0x003FF000)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_TAG_BF_DEF (0x00000000)

///< Length (in bytes) of the timed out completion. For a split completion,
///< it indicates the number of bytes remaining to be delivered when the
///< completion timed out.
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_LEN_BF_OFF (24)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_LEN_BF_WID ( 8)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_LEN_BF_MSK (0xFF000000)
#define PCIE_CC_GPREG_RO_17_RADM_TIMEOUT_CPL_LEN_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_18 register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_18
  * SII Signals: Receive Control/CPL Timeout
  */

typedef union {
  struct {
    uint32_t RADM_TIMEOUT_CPL_LEN : 4;
    ///< Length (in bytes) of the timed out completion. For a split completion,
    ///< it indicates the number of bytes remaining to be delivered when the
    ///< completion timed out. Bits[11:8]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t SII_RX_CTL_01_SNAP_PENDING : 1;
    ///< sii_rx_ctl01 pending indication: 1=Snap Pending, 0=Snap Complete
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TRGT_TIMEOUT_CPL_SNAP_PENDING : 1;
    ///< trgt_timeout_cpl pending indication: 1=Snap Pending, 0=Snap Complete
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RADM_MSG_PAYLOAD_SNAP_PENDING : 1;
    ///< radm_msg_payload pending indication: 1=Snap Pending, 0=Snap Complete
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_18_reg_t;

#define PCIE_CC_GPREG_RO_18_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_18_RD_MASK (0x0003100fU)
#define PCIE_CC_GPREG_RO_18_WR_MASK (0x00000000U)


///< Length (in bytes) of the timed out completion. For a split completion,
///< it indicates the number of bytes remaining to be delivered when the
///< completion timed out. Bits[11:8]
#define PCIE_CC_GPREG_RO_18_RADM_TIMEOUT_CPL_LEN_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_18_RADM_TIMEOUT_CPL_LEN_BF_WID ( 4)
#define PCIE_CC_GPREG_RO_18_RADM_TIMEOUT_CPL_LEN_BF_MSK (0x0000000F)
#define PCIE_CC_GPREG_RO_18_RADM_TIMEOUT_CPL_LEN_BF_DEF (0x00000000)

///< sii_rx_ctl01 pending indication: 1=Snap Pending, 0=Snap Complete
#define PCIE_CC_GPREG_RO_18_SII_RX_CTL_01_SNAP_PENDING_BF_OFF (12)
#define PCIE_CC_GPREG_RO_18_SII_RX_CTL_01_SNAP_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_18_SII_RX_CTL_01_SNAP_PENDING_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_RO_18_SII_RX_CTL_01_SNAP_PENDING_BF_DEF (0x00000000)

///< trgt_timeout_cpl pending indication: 1=Snap Pending, 0=Snap Complete
#define PCIE_CC_GPREG_RO_18_TRGT_TIMEOUT_CPL_SNAP_PENDING_BF_OFF (16)
#define PCIE_CC_GPREG_RO_18_TRGT_TIMEOUT_CPL_SNAP_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_18_TRGT_TIMEOUT_CPL_SNAP_PENDING_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_RO_18_TRGT_TIMEOUT_CPL_SNAP_PENDING_BF_DEF (0x00000000)

///< radm_msg_payload pending indication: 1=Snap Pending, 0=Snap Complete
#define PCIE_CC_GPREG_RO_18_RADM_MSG_PAYLOAD_SNAP_PENDING_BF_OFF (17)
#define PCIE_CC_GPREG_RO_18_RADM_MSG_PAYLOAD_SNAP_PENDING_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_18_RADM_MSG_PAYLOAD_SNAP_PENDING_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_RO_18_RADM_MSG_PAYLOAD_SNAP_PENDING_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_19 register description at address offset 0x24c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_19
  * SII Signals: Receive Control/CPL Timeout
  */

typedef union {
  struct {
    uint32_t TRGT_TIMEOUT_CPL_BUS : 32;
    ///< Target Values for the timed out completion. [br]trgt_timeout_cpl_tc[2:0],
    ///< // [31:29] [br]4'd0, // [28:25] [br]trgt_timeout_cpl_func_num, //
    ///< [24:22] [br]trgt_timeout_cpl_attr[1:0], // [21:20] [br]trgt_timeout_cpl_len[11:0],
    ///< // [19:8] [br]trgt_timeout_lookup_id[7:0] // [7:0]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_19_reg_t;

#define PCIE_CC_GPREG_RO_19_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_19_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_RO_19_WR_MASK (0x00000000U)


///< Target Values for the timed out completion. [br]trgt_timeout_cpl_tc[2:0],
///< // [31:29] [br]4'd0, // [28:25] [br]trgt_timeout_cpl_func_num, //
///< [24:22] [br]trgt_timeout_cpl_attr[1:0], // [21:20] [br]trgt_timeout_cpl_len[11:0],
///< // [19:8] [br]trgt_timeout_lookup_id[7:0] // [7:0]
#define PCIE_CC_GPREG_RO_19_TRGT_TIMEOUT_CPL_BUS_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_19_TRGT_TIMEOUT_CPL_BUS_BF_WID (32)
#define PCIE_CC_GPREG_RO_19_TRGT_TIMEOUT_CPL_BUS_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_RO_19_TRGT_TIMEOUT_CPL_BUS_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_RO_20 register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ro_20
  * CC Monitor 20 Register
  */

typedef union {
  struct {
    uint32_t CFG_RCVR_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Receiver
    ///< Error.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_BAD_TLP_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Bad
    ///< TLP Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_BAD_DLLP_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Bad
    ///< DLLP Error
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_REPLAY_TIMER_TIMEOUT_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Replay
    ///< Timer Timeout.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_REPLAY_NUMBER_ROLLOVER_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an REPLAY_NUMBER
    ///< Rollover Error
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_CORRECTED_INTERNAL_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Corrected
    ///< Internal Error.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_ECRC_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an ECRC
    ///< Error.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_DL_PROTOCOL_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Data
    ///< Link Protocol Error.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_SURPRISE_DOWN_ER_STS : 1;
    ///< Indication from the controller that the controller detected an Surprise
    ///< Down Error.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t CFG_MLF_TLP_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Malformed
    ///< TLP Error
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_FC_PROTOCOL_ERR_STS : 1;
    ///< Indication from the controller that the controller detected an Data
    ///< Link Protocol Error
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t CFG_RCVR_OVERFLOW_ERR_STS : 1;
    ///< Indication from the controller that the controller has detected an
    ///< Receiver Overflow Error.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_UNCOR_INTERNAL_ERR_STS : 1;
    ///< Indication from the controller that the controller has detected an
    ///< Uncorrectable Internal Error.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ro_20_reg_t;

#define PCIE_CC_GPREG_RO_20_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_RO_20_RD_MASK (0x00001fffU)
#define PCIE_CC_GPREG_RO_20_WR_MASK (0x00000000U)


///< Indication from the controller that the controller detected an Receiver
///< Error.
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_ERR_STS_BF_OFF ( 0)
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_ERR_STS_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Bad
///< TLP Error
#define PCIE_CC_GPREG_RO_20_CFG_BAD_TLP_ERR_STS_BF_OFF ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_BAD_TLP_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_BAD_TLP_ERR_STS_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_RO_20_CFG_BAD_TLP_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Bad
///< DLLP Error
#define PCIE_CC_GPREG_RO_20_CFG_BAD_DLLP_ERR_STS_BF_OFF ( 2)
#define PCIE_CC_GPREG_RO_20_CFG_BAD_DLLP_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_BAD_DLLP_ERR_STS_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_RO_20_CFG_BAD_DLLP_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Replay
///< Timer Timeout.
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_TIMER_TIMEOUT_ERR_STS_BF_OFF ( 3)
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_TIMER_TIMEOUT_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_TIMER_TIMEOUT_ERR_STS_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_TIMER_TIMEOUT_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an REPLAY_NUMBER
///< Rollover Error
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_NUMBER_ROLLOVER_ERR_STS_BF_OFF ( 4)
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_NUMBER_ROLLOVER_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_NUMBER_ROLLOVER_ERR_STS_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_RO_20_CFG_REPLAY_NUMBER_ROLLOVER_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Corrected
///< Internal Error.
#define PCIE_CC_GPREG_RO_20_CFG_CORRECTED_INTERNAL_ERR_STS_BF_OFF ( 5)
#define PCIE_CC_GPREG_RO_20_CFG_CORRECTED_INTERNAL_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_CORRECTED_INTERNAL_ERR_STS_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_RO_20_CFG_CORRECTED_INTERNAL_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an ECRC
///< Error.
#define PCIE_CC_GPREG_RO_20_CFG_ECRC_ERR_STS_BF_OFF ( 6)
#define PCIE_CC_GPREG_RO_20_CFG_ECRC_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_ECRC_ERR_STS_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_RO_20_CFG_ECRC_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Data
///< Link Protocol Error.
#define PCIE_CC_GPREG_RO_20_CFG_DL_PROTOCOL_ERR_STS_BF_OFF ( 7)
#define PCIE_CC_GPREG_RO_20_CFG_DL_PROTOCOL_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_DL_PROTOCOL_ERR_STS_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_RO_20_CFG_DL_PROTOCOL_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Surprise
///< Down Error.
#define PCIE_CC_GPREG_RO_20_CFG_SURPRISE_DOWN_ER_STS_BF_OFF ( 8)
#define PCIE_CC_GPREG_RO_20_CFG_SURPRISE_DOWN_ER_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_SURPRISE_DOWN_ER_STS_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_RO_20_CFG_SURPRISE_DOWN_ER_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Malformed
///< TLP Error
#define PCIE_CC_GPREG_RO_20_CFG_MLF_TLP_ERR_STS_BF_OFF ( 9)
#define PCIE_CC_GPREG_RO_20_CFG_MLF_TLP_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_MLF_TLP_ERR_STS_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_RO_20_CFG_MLF_TLP_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller detected an Data
///< Link Protocol Error
#define PCIE_CC_GPREG_RO_20_CFG_FC_PROTOCOL_ERR_STS_BF_OFF (10)
#define PCIE_CC_GPREG_RO_20_CFG_FC_PROTOCOL_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_FC_PROTOCOL_ERR_STS_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_RO_20_CFG_FC_PROTOCOL_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller has detected an
///< Receiver Overflow Error.
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_OVERFLOW_ERR_STS_BF_OFF (11)
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_OVERFLOW_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_OVERFLOW_ERR_STS_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_RO_20_CFG_RCVR_OVERFLOW_ERR_STS_BF_DEF (0x00000000)

///< Indication from the controller that the controller has detected an
///< Uncorrectable Internal Error.
#define PCIE_CC_GPREG_RO_20_CFG_UNCOR_INTERNAL_ERR_STS_BF_OFF (12)
#define PCIE_CC_GPREG_RO_20_CFG_UNCOR_INTERNAL_ERR_STS_BF_WID ( 1)
#define PCIE_CC_GPREG_RO_20_CFG_UNCOR_INTERNAL_ERR_STS_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_RO_20_CFG_UNCOR_INTERNAL_ERR_STS_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_00_S register description at address offset 0x260
  *
  * Register default value:        0x0001002E
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_00_S
  * PCIe Express Extended Capability Header
  */

typedef union {
  struct {
    uint32_t PCI_DOE_CAP_ID_NEXT_CTRL_REG : 16;
    ///< This field is a PCI-SIG defined ID number that indicates the nature
    ///< and format of the Extended Capability
    ///< AccessType="RO" BitOffset="0" ResetValue="0x2E"
    uint32_t PCI_DOE_CAP_VER_REG : 4;
    ///< This field is a PCI-SIG defined version number that indicates the
    ///< version of the Capability structure present.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x1"
    uint32_t PCI_DOE_NXT_CAP_OFFSET_REG : 12;
    ///< This field contains the offset to the next PCI Express Extended Capability
    ///< structure or 000h if no other items exist in the linked list of Capabilities.
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_00_s_reg_t;

#define PCIE_CC_GPREG_DOE_00_S_DEFAULT (0x0001002eU)
#define PCIE_CC_GPREG_DOE_00_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_00_S_WR_MASK (0x00000000U)


///< This field is a PCI-SIG defined ID number that indicates the nature
///< and format of the Extended Capability
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_ID_NEXT_CTRL_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_ID_NEXT_CTRL_BF_WID (16)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_ID_NEXT_CTRL_BF_MSK (0x0000FFFF)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_ID_NEXT_CTRL_BF_DEF (0x0000002E)

///< This field is a PCI-SIG defined version number that indicates the
///< version of the Capability structure present.
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_VER_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_VER_BF_WID ( 4)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_VER_BF_MSK (0x000F0000)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_CAP_VER_BF_DEF (0x00010000)

///< This field contains the offset to the next PCI Express Extended Capability
///< structure or 000h if no other items exist in the linked list of Capabilities.
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_NXT_CAP_OFFSET_BF_OFF (20)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_NXT_CAP_OFFSET_BF_WID (12)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_NXT_CAP_OFFSET_BF_MSK (0xFFF00000)
#define PCIE_CC_GPREG_DOE_00_S_PCI_DOE_NXT_CAP_OFFSET_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_01_S register description at address offset 0x264
  *
  * Register default value:        0x00000001
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_01_S
  * DOE Capabilities Register
  */

typedef union {
  struct {
    uint32_t PCI_DOE_INTR_SUPPORT_REG : 1;
    ///< When Set, this bit indicates DOE support for using MSI/MSI-X to indicate
    ///< the availability of a data object
    ///< AccessType="RO" BitOffset="0" ResetValue="0x1"
    uint32_t PCI_DOE_INTR_MSG_NUM_REG : 11;
    ///< When the Interrupt Support bit is Set, this field indicates which
    ///< MSI/MSI-X vector is used for the interrupt message generated in association
    ///< with DOE.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_01_s_reg_t;

#define PCIE_CC_GPREG_DOE_01_S_DEFAULT (0x00000001U)
#define PCIE_CC_GPREG_DOE_01_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_01_S_WR_MASK (0x00000000U)


///< When Set, this bit indicates DOE support for using MSI/MSI-X to indicate
///< the availability of a data object
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_SUPPORT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_SUPPORT_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_SUPPORT_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_SUPPORT_BF_DEF (0x00000001)

///< When the Interrupt Support bit is Set, this field indicates which
///< MSI/MSI-X vector is used for the interrupt message generated in association
///< with DOE.
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_MSG_NUM_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_MSG_NUM_BF_WID (11)
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_MSG_NUM_BF_MSK (0x00000FFE)
#define PCIE_CC_GPREG_DOE_01_S_PCI_DOE_INTR_MSG_NUM_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_01_S_RESERVED_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_01_S_RESERVED_BF_WID (20)
#define PCIE_CC_GPREG_DOE_01_S_RESERVED_BF_MSK (0xFFFFF000)
#define PCIE_CC_GPREG_DOE_01_S_RESERVED_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_02_S register description at address offset 0x268
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_02_S
  * DOE Control Register
  */

typedef union {
  struct {
    uint32_t PCI_DOE_ABORT_REG : 1;
    ///< A write of 1b to this bit must cause all data object transfer operations
    ///< associated with this DOE instance to be aborted.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DOE_INTR_EN_REG : 1;
    ///< When Set, and MSI/MSI-X is enabled, the DOE instance must issue an
    ///< MSI/MSI-X interrupt as defined in Section 6.xx.3
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
    uint32_t PCI_DOE_GO_REG : 1;
    ///< A write of 1b to this bit indicates to the DOE instance that it can
    ///< start consuming the data object transferred through the DOE Write
    ///< Data Mailbox register.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_02_s_reg_t;

#define PCIE_CC_GPREG_DOE_02_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_02_S_RD_MASK (0xbfffffffU)
#define PCIE_CC_GPREG_DOE_02_S_WR_MASK (0x80000003U)


///< A write of 1b to this bit must cause all data object transfer operations
///< associated with this DOE instance to be aborted.
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_ABORT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_ABORT_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_ABORT_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_ABORT_BF_DEF (0x00000000)

///< When Set, and MSI/MSI-X is enabled, the DOE instance must issue an
///< MSI/MSI-X interrupt as defined in Section 6.xx.3
#define PCIE_CC_GPREG_DOE_02_S_DOE_INTR_EN_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_02_S_DOE_INTR_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_02_S_DOE_INTR_EN_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_02_S_DOE_INTR_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_02_S_RESERVED_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_02_S_RESERVED_BF_WID (28)
#define PCIE_CC_GPREG_DOE_02_S_RESERVED_BF_MSK (0x3FFFFFFC)
#define PCIE_CC_GPREG_DOE_02_S_RESERVED_BF_DEF (0x00000000)

///< A write of 1b to this bit indicates to the DOE instance that it can
///< start consuming the data object transferred through the DOE Write
///< Data Mailbox register.
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_GO_BF_OFF (31)
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_GO_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_GO_BF_MSK (0x80000000)
#define PCIE_CC_GPREG_DOE_02_S_PCI_DOE_GO_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_03_S register description at address offset 0x26c
  *
  * Register default value:        0x00000001
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_03_S
  * DOE Status Register
  */

typedef union {
  struct {
    uint32_t PCI_DOE_BUSY_REG : 1;
    ///< When Set, this bit indicates the DOE instance is temporarily unable
    ///< to receive a new data object through the DOE Write Data Mailbox register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCI_DOE_INTR_STATUS_REG : 1;
    ///< This bit must be Set when an interrupt is generated to indicate that
    ///< the Data Object Ready bit or the DOE Error bit has been Set or that
    ///< the DOE Busy bit has been Cleared.
    ///< AccessType="RW/1C" BitOffset="1" ResetValue="0x0"
    uint32_t PCI_DOE_ERROR_REG : 1;
    ///< This bit, when Set, indicates that there has been an internal error
    ///< associated with data object received, or that a data object has been
    ///< received for which the DOE instance is unable to provide a response.
    ///< Cleared                  by writing to the abort bit only.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED : 27;
    ///< reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
    uint32_t PCI_DOE_DATA_OBJECT_READY_REG : 1;
    ///< When Set, this bit indicates the DOE instance has a data object available
    ///< to be read by system firmware/software.                  If there
    ///< is no additional data object ready for transfer, the DOE instance
    ///< must clear this bit after the entire data object has been transferred,
    ///< as indicated by software writing to the DOE Read Data Mailbox register
    ///< after reading the final DW of the data object.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_03_s_reg_t;

#define PCIE_CC_GPREG_DOE_03_S_DEFAULT (0x00000001U)
#define PCIE_CC_GPREG_DOE_03_S_RD_MASK (0xbfffffffU)
#define PCIE_CC_GPREG_DOE_03_S_WR_MASK (0x80000003U)


///< When Set, this bit indicates the DOE instance is temporarily unable
///< to receive a new data object through the DOE Write Data Mailbox register.
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_BUSY_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_BUSY_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_BUSY_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_BUSY_BF_DEF (0x00000001)

///< This bit must be Set when an interrupt is generated to indicate that
///< the Data Object Ready bit or the DOE Error bit has been Set or that
///< the DOE Busy bit has been Cleared.
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_INTR_STAT_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_INTR_STAT_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_INTR_STAT_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_INTR_STAT_BF_DEF (0x00000000)

///< This bit, when Set, indicates that there has been an internal error
///< associated with data object received, or that a data object has been
///< received for which the DOE instance is unable to provide a response.
///< Cleared                  by writing to the abort bit only.
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_ERR_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_ERR_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_ERR_BF_DEF (0x00000000)

///< reserved
#define PCIE_CC_GPREG_DOE_03_S_RESERVED_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_03_S_RESERVED_BF_WID (27)
#define PCIE_CC_GPREG_DOE_03_S_RESERVED_BF_MSK (0x3FFFFFF8)
#define PCIE_CC_GPREG_DOE_03_S_RESERVED_BF_DEF (0x00000000)

///< When Set, this bit indicates the DOE instance has a data object available
///< to be read by system firmware/software.                  If there
///< is no additional data object ready for transfer, the DOE instance
///< must clear this bit after the entire data object has been transferred,
///< as indicated by software writing to the DOE Read Data Mailbox register
///< after reading the final DW of the data object.
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_DATA_OBJECT_READY_BF_OFF (31)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_DATA_OBJECT_READY_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_DATA_OBJECT_READY_BF_MSK (0x80000000)
#define PCIE_CC_GPREG_DOE_03_S_PCI_DOE_DATA_OBJECT_READY_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_04_S register description at address offset 0x270
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_04_S
  * DOE Write Mailbox Register
  */

typedef union {
  struct {
    uint32_t PCI_DOE_WRITE_MAILBOX_REG : 32;
    ///< Reserved
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_04_s_reg_t;

#define PCIE_CC_GPREG_DOE_04_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_04_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_04_S_WR_MASK (0x00000000U)


///< Reserved
#define PCIE_CC_GPREG_DOE_04_S_PCI_DOE_WRITE_MAILBOX_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_04_S_PCI_DOE_WRITE_MAILBOX_BF_WID (32)
#define PCIE_CC_GPREG_DOE_04_S_PCI_DOE_WRITE_MAILBOX_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_DOE_04_S_PCI_DOE_WRITE_MAILBOX_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_05_S register description at address offset 0x274
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_05_S
  * DOE Read Mailbox Register
  */

typedef union {
  struct {
    uint32_t PCI_DOE_READ_MAILBOX_REG : 32;
    ///< This shaddow register allows reading of the currently read data from
    ///< the Read Mailbox FIFO
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_05_s_reg_t;

#define PCIE_CC_GPREG_DOE_05_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_05_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_05_S_WR_MASK (0x00000000U)


///< This shaddow register allows reading of the currently read data from
///< the Read Mailbox FIFO
#define PCIE_CC_GPREG_DOE_05_S_PCI_DOE_READ_MAILBOX_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_05_S_PCI_DOE_READ_MAILBOX_BF_WID (32)
#define PCIE_CC_GPREG_DOE_05_S_PCI_DOE_READ_MAILBOX_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_DOE_05_S_PCI_DOE_READ_MAILBOX_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_06_S register description at address offset 0x278
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_06_S
  * DOE Write Mailbox Address Register
  */

typedef union {
  struct {
    uint32_t RESERVED : 2;
    ///< reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t DOE_WRITE_MAILBOX_ADDR : 30;
    ///< Base Address for Write mailbox
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_06_s_reg_t;

#define PCIE_CC_GPREG_DOE_06_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_06_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_06_S_WR_MASK (0xfffffffcU)


///< reserved
#define PCIE_CC_GPREG_DOE_06_S_RESERVED_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_06_S_RESERVED_BF_WID ( 2)
#define PCIE_CC_GPREG_DOE_06_S_RESERVED_BF_MSK (0x00000003)
#define PCIE_CC_GPREG_DOE_06_S_RESERVED_BF_DEF (0x00000000)

///< Base Address for Write mailbox
#define PCIE_CC_GPREG_DOE_06_S_DOE_WRITE_MAILBOX_ADDR_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_06_S_DOE_WRITE_MAILBOX_ADDR_BF_WID (30)
#define PCIE_CC_GPREG_DOE_06_S_DOE_WRITE_MAILBOX_ADDR_BF_MSK (0xFFFFFFFC)
#define PCIE_CC_GPREG_DOE_06_S_DOE_WRITE_MAILBOX_ADDR_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_07_S register description at address offset 0x27c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_07_S
  * DOE Read Message Length
  */

typedef union {
  struct {
    uint32_t DOE_READ_MSG_LENGTH : 18;
    ///< Length (DW-32 bits) of Response Messge being read through read mailbox.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 14;
    ///< reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_07_s_reg_t;

#define PCIE_CC_GPREG_DOE_07_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_07_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_07_S_WR_MASK (0x0003ffffU)


///< Length (DW-32 bits) of Response Messge being read through read mailbox.
#define PCIE_CC_GPREG_DOE_07_S_DOE_READ_MSG_LENGTH_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_07_S_DOE_READ_MSG_LENGTH_BF_WID (18)
#define PCIE_CC_GPREG_DOE_07_S_DOE_READ_MSG_LENGTH_BF_MSK (0x0003FFFF)
#define PCIE_CC_GPREG_DOE_07_S_DOE_READ_MSG_LENGTH_BF_DEF (0x00000000)

///< reserved
#define PCIE_CC_GPREG_DOE_07_S_RESERVED_BF_OFF (18)
#define PCIE_CC_GPREG_DOE_07_S_RESERVED_BF_WID (14)
#define PCIE_CC_GPREG_DOE_07_S_RESERVED_BF_MSK (0xFFFC0000)
#define PCIE_CC_GPREG_DOE_07_S_RESERVED_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_08_S register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_08_S
  * DOE Read Mailbox Address Register
  */

typedef union {
  struct {
    uint32_t RESERVED : 2;
    ///< reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t DOE_READ_MAILBOX_ADDR_REG : 30;
    ///< Base Address of Read Mesage
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_08_s_reg_t;

#define PCIE_CC_GPREG_DOE_08_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_08_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_08_S_WR_MASK (0xfffffffcU)


///< reserved
#define PCIE_CC_GPREG_DOE_08_S_RESERVED_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_08_S_RESERVED_BF_WID ( 2)
#define PCIE_CC_GPREG_DOE_08_S_RESERVED_BF_MSK (0x00000003)
#define PCIE_CC_GPREG_DOE_08_S_RESERVED_BF_DEF (0x00000000)

///< Base Address of Read Mesage
#define PCIE_CC_GPREG_DOE_08_S_DOE_READ_MAILBOX_ADDR_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_08_S_DOE_READ_MAILBOX_ADDR_BF_WID (30)
#define PCIE_CC_GPREG_DOE_08_S_DOE_READ_MAILBOX_ADDR_BF_MSK (0xFFFFFFFC)
#define PCIE_CC_GPREG_DOE_08_S_DOE_READ_MAILBOX_ADDR_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_09_S register description at address offset 0x284
  *
  * Register default value:        0x3F000E01
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_09_S
  * Mailbox FIFO Water Mark Register
  */

typedef union {
  struct {
    uint32_t DOE_MAILBOX_FIFO_LOW_WM : 5;
    ///< Read/Write Mailbox FIFO Low Watermark
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t RESERVED5 : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t DOE_MAILBOX_FIFO_HIGH_WM : 5;
    ///< Read/Write Mailbox FIFO High Watermark
    ///< AccessType="RW" BitOffset="8" ResetValue="0xE"
    uint32_t RESERVED13 : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="0x0"
    uint32_t DOE_ERROR_SET_EN : 6;
    ///< Failure Enables (Active high to allow contribution to error indication):
    ///< Contribution                 doe_intr_status_set[5] - Disable all
    ///< contributions to the Interrupt Status Bit;                  doe_error_set:poisioned_cfg_write_err[4]
    ///< - CfgWr Poisioned Error;                           doe_error_set:wr_lbc_push_err[3]
    ///< - DOE Write while FIFO full;                           doe_error_set:rd_lbc_pop_err[2]
    ///< - DOE Read while FIFO Empty;                           doe_error_set:write_mailbox_write_err[1]
    ///< - Write to DOE Write Mailbox without all write strobes active ;
    ///< doe_error_set:read_mailbox_write_err[0] - Write to DOE Read Mailbox
    ///< without all write strobes active ;
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3F"
    uint32_t RESERVED30 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_09_s_reg_t;

#define PCIE_CC_GPREG_DOE_09_S_DEFAULT (0x3f000e01U)
#define PCIE_CC_GPREG_DOE_09_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_09_S_WR_MASK (0x3f001f1fU)


///< Read/Write Mailbox FIFO Low Watermark
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_LOW_WM_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_LOW_WM_BF_WID ( 5)
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_LOW_WM_BF_MSK (0x0000001F)
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_LOW_WM_BF_DEF (0x00000001)

///< Reserved
#define PCIE_CC_GPREG_DOE_09_S_RESERVED5_BF_OFF ( 5)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED5_BF_WID ( 3)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED5_BF_MSK (0x000000E0)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED5_BF_DEF (0x00000000)

///< Read/Write Mailbox FIFO High Watermark
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_HIGH_WM_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_HIGH_WM_BF_WID ( 5)
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_HIGH_WM_BF_MSK (0x00001F00)
#define PCIE_CC_GPREG_DOE_09_S_DOE_MAILBOX_FIFO_HIGH_WM_BF_DEF (0x00000E00)

///< Reserved
#define PCIE_CC_GPREG_DOE_09_S_RESERVED13_BF_OFF (13)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED13_BF_WID (11)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED13_BF_MSK (0x00FFE000)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED13_BF_DEF (0x00000000)

///< Failure Enables (Active high to allow contribution to error indication):
///< Contribution                 doe_intr_status_set[5] - Disable all
///< contributions to the Interrupt Status Bit;                  doe_error_set:poisioned_cfg_write_err[4]
///< - CfgWr Poisioned Error;                           doe_error_set:wr_lbc_push_err[3]
///< - DOE Write while FIFO full;                           doe_error_set:rd_lbc_pop_err[2]
///< - DOE Read while FIFO Empty;                           doe_error_set:write_mailbox_write_err[1]
///< - Write to DOE Write Mailbox without all write strobes active ;
///< doe_error_set:read_mailbox_write_err[0] - Write to DOE Read Mailbox
///< without all write strobes active ;
#define PCIE_CC_GPREG_DOE_09_S_DOE_ERR_SET_EN_BF_OFF (24)
#define PCIE_CC_GPREG_DOE_09_S_DOE_ERR_SET_EN_BF_WID ( 6)
#define PCIE_CC_GPREG_DOE_09_S_DOE_ERR_SET_EN_BF_MSK (0x3F000000)
#define PCIE_CC_GPREG_DOE_09_S_DOE_ERR_SET_EN_BF_DEF (0x3F000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_09_S_RESERVED30_BF_OFF (30)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED30_BF_WID ( 2)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED30_BF_MSK (0xC0000000)
#define PCIE_CC_GPREG_DOE_09_S_RESERVED30_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_10_S register description at address offset 0x288
  *
  * Register default value:        0x00000030
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_10_S
  * Write MB FIFO Status Secure
  */

typedef union {
  struct {
    uint32_t DOE_WRITE_MAILBOX_FIFO_STATUS : 32;
    ///< The fifo_status output is defined in the aw_fifo_status_t structure:
    ///< [31:13]:  0           [12:8]:  FIFO depth           [7]:      FIFO
    ///< full         (FIFO depth == FIFO size)           [6]:      FIFO almost
    ///< full  (FIFO depth greater than or equal to the high watermark)
    ///< [5]:      FIFO almost empty (FIFO depth less than or equal low to
    ///< the watermark)           [4]:      FIFO empty        (FIFO depth ==
    ///< 0)           [3]:      RESERVED           [2]:      FIFO parity error
    ///< (always 0)           [1]:      FIFO overflow     (push while FIFO
    ///< full)           [0]:      FIFO underflow    (pop  while FIFO empty)
    ///< AccessType="RO" BitOffset="0" ResetValue="0x30"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_10_s_reg_t;

#define PCIE_CC_GPREG_DOE_10_S_DEFAULT (0x00000030U)
#define PCIE_CC_GPREG_DOE_10_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_10_S_WR_MASK (0x00000000U)


///< The fifo_status output is defined in the aw_fifo_status_t structure:
///< [31:13]:  0           [12:8]:  FIFO depth           [7]:      FIFO
///< full         (FIFO depth == FIFO size)           [6]:      FIFO almost
///< full  (FIFO depth greater than or equal to the high watermark)
///< [5]:      FIFO almost empty (FIFO depth less than or equal low to
///< the watermark)           [4]:      FIFO empty        (FIFO depth ==
///< 0)           [3]:      RESERVED           [2]:      FIFO parity error
///< (always 0)           [1]:      FIFO overflow     (push while FIFO
///< full)           [0]:      FIFO underflow    (pop  while FIFO empty)
#define PCIE_CC_GPREG_DOE_10_S_DOE_WRITE_MAILBOX_FIFO_STAT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_10_S_DOE_WRITE_MAILBOX_FIFO_STAT_BF_WID (32)
#define PCIE_CC_GPREG_DOE_10_S_DOE_WRITE_MAILBOX_FIFO_STAT_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_DOE_10_S_DOE_WRITE_MAILBOX_FIFO_STAT_BF_DEF (0x00000030)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_11_S register description at address offset 0x28c
  *
  * Register default value:        0x00000030
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_11_S
  * Read MB FIFO Status Secure
  */

typedef union {
  struct {
    uint32_t DOE_READ_MAILBOX_FIFO_STATUS : 32;
    ///< The fifo_status output is defined in the aw_fifo_status_t structure:
    ///< [31:13]:  0           [12:8]:  FIFO depth           [7]:      FIFO
    ///< full         (FIFO depth == FIFO size)           [6]:      FIFO almost
    ///< full  (FIFO depth greater than or equal to the high watermark)
    ///< [5]:      FIFO almost empty (FIFO depth less than or equal low to
    ///< the low  watermark)           [4]:      FIFO empty        (FIFO depth
    ///< == 0)           [3]:      RESERVED           [2]:      FIFO parity
    ///< error (always 0)           [1]:      FIFO overflow     (push while
    ///< FIFO full)           [0]:      FIFO underflow    (pop  while FIFO
    ///< empty)
    ///< AccessType="RO" BitOffset="0" ResetValue="0x30"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_11_s_reg_t;

#define PCIE_CC_GPREG_DOE_11_S_DEFAULT (0x00000030U)
#define PCIE_CC_GPREG_DOE_11_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_11_S_WR_MASK (0x00000000U)


///< The fifo_status output is defined in the aw_fifo_status_t structure:
///< [31:13]:  0           [12:8]:  FIFO depth           [7]:      FIFO
///< full         (FIFO depth == FIFO size)           [6]:      FIFO almost
///< full  (FIFO depth greater than or equal to the high watermark)
///< [5]:      FIFO almost empty (FIFO depth less than or equal low to
///< the low  watermark)           [4]:      FIFO empty        (FIFO depth
///< == 0)           [3]:      RESERVED           [2]:      FIFO parity
///< error (always 0)           [1]:      FIFO overflow     (push while
///< FIFO full)           [0]:      FIFO underflow    (pop  while FIFO
///< empty)
#define PCIE_CC_GPREG_DOE_11_S_DOE_READ_MAILBOX_FIFO_STAT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_11_S_DOE_READ_MAILBOX_FIFO_STAT_BF_WID (32)
#define PCIE_CC_GPREG_DOE_11_S_DOE_READ_MAILBOX_FIFO_STAT_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_DOE_11_S_DOE_READ_MAILBOX_FIFO_STAT_BF_DEF (0x00000030)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_12_S register description at address offset 0x290
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_12_S
  * DOE Internal Alarm Register
  */

typedef union {
  struct {
    uint32_t CFG_RSV_RESP_ERR_VAL : 3;
    ///< Reserved Response value: RESP_RSV_2=3'b010; RESP_RSV_3=3'b011
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_RDRESP_ERR_VAL : 3;
    ///< Read Response value: RESP_OK_R=3'b000; RESP_SLVERR_R=3'b100; RESP_DECERR_R=3'b110;
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RESERVED7 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_WRESP_ERR_VAL : 3;
    ///< Write Response value: RESP_OK_W     = 3'b001; RESP_SLVERR_W = 3'b101;
    ///< RESP_DECERR_W = 3'b111;
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RESERVED11 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t CFG_RESP_SM_DEBUG : 3;
    ///< DOE AXI Response StateMachine: IDLE_RESP= 3'b000; WRITE_RESP_OK  =
    ///< 3'b001; WRITE_RESP_ERR = 3'b010; READ_RESP_OK= 3'b011; READ_RESP_ERR=
    ///< 3'b100; RSV_RESP_ERR= 3'b101; ABORT_RESP= 3'b110;
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED15 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_REQ_SM_DEBUG : 3;
    ///< DOE AXI Request StateMachine: POWERUP=3'b000; START=3'b001; DOE_WR_FIFO_POP_DATA=3'b010;
    ///< DOE_RD_FIFO_PUSH_DATA=3'b011; DOE_REQ_ABORT=3'b100;
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t RESERVED19 : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_12_s_reg_t;

#define PCIE_CC_GPREG_DOE_12_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_12_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_12_S_WR_MASK (0x00000000U)


///< Reserved Response value: RESP_RSV_2=3'b010; RESP_RSV_3=3'b011
#define PCIE_CC_GPREG_DOE_12_S_CFG_RSV_RESP_ERR_VAL_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RSV_RESP_ERR_VAL_BF_WID ( 3)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RSV_RESP_ERR_VAL_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RSV_RESP_ERR_VAL_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_12_S_RESERVED3_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED3_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED3_BF_DEF (0x00000000)

///< Read Response value: RESP_OK_R=3'b000; RESP_SLVERR_R=3'b100; RESP_DECERR_R=3'b110;
#define PCIE_CC_GPREG_DOE_12_S_CFG_RDRESP_ERR_VAL_BF_OFF ( 4)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RDRESP_ERR_VAL_BF_WID ( 3)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RDRESP_ERR_VAL_BF_MSK (0x00000070)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RDRESP_ERR_VAL_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_12_S_RESERVED7_BF_OFF ( 7)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED7_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED7_BF_DEF (0x00000000)

///< Write Response value: RESP_OK_W     = 3'b001; RESP_SLVERR_W = 3'b101;
///< RESP_DECERR_W = 3'b111;
#define PCIE_CC_GPREG_DOE_12_S_CFG_WRESP_ERR_VAL_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_12_S_CFG_WRESP_ERR_VAL_BF_WID ( 3)
#define PCIE_CC_GPREG_DOE_12_S_CFG_WRESP_ERR_VAL_BF_MSK (0x00000700)
#define PCIE_CC_GPREG_DOE_12_S_CFG_WRESP_ERR_VAL_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_12_S_RESERVED11_BF_OFF (11)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED11_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED11_BF_DEF (0x00000000)

///< DOE AXI Response StateMachine: IDLE_RESP= 3'b000; WRITE_RESP_OK  =
///< 3'b001; WRITE_RESP_ERR = 3'b010; READ_RESP_OK= 3'b011; READ_RESP_ERR=
///< 3'b100; RSV_RESP_ERR= 3'b101; ABORT_RESP= 3'b110;
#define PCIE_CC_GPREG_DOE_12_S_CFG_RESP_SM_DBG_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RESP_SM_DBG_BF_WID ( 3)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RESP_SM_DBG_BF_MSK (0x00007000)
#define PCIE_CC_GPREG_DOE_12_S_CFG_RESP_SM_DBG_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_12_S_RESERVED15_BF_OFF (15)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED15_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED15_BF_DEF (0x00000000)

///< DOE AXI Request StateMachine: POWERUP=3'b000; START=3'b001; DOE_WR_FIFO_POP_DATA=3'b010;
///< DOE_RD_FIFO_PUSH_DATA=3'b011; DOE_REQ_ABORT=3'b100;
#define PCIE_CC_GPREG_DOE_12_S_CFG_REQ_SM_DBG_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_12_S_CFG_REQ_SM_DBG_BF_WID ( 3)
#define PCIE_CC_GPREG_DOE_12_S_CFG_REQ_SM_DBG_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_DOE_12_S_CFG_REQ_SM_DBG_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_12_S_RESERVED19_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED19_BF_WID (13)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED19_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_12_S_RESERVED19_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_13_S register description at address offset 0x294
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_13_S
  * DOE Write Message Length
  */

typedef union {
  struct {
    uint32_t WR_LBC_PUSH_CNT : 19;
    ///< Count the number of writes to the DOE Write Mailbox between doe_go
    ///< signal going active (0 -> 1)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED18 : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_13_s_reg_t;

#define PCIE_CC_GPREG_DOE_13_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_13_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_13_S_WR_MASK (0x00000000U)


///< Count the number of writes to the DOE Write Mailbox between doe_go
///< signal going active (0 -> 1)
#define PCIE_CC_GPREG_DOE_13_S_WR_LBC_PUSH_CNT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_13_S_WR_LBC_PUSH_CNT_BF_WID (19)
#define PCIE_CC_GPREG_DOE_13_S_WR_LBC_PUSH_CNT_BF_MSK (0x0007FFFF)
#define PCIE_CC_GPREG_DOE_13_S_WR_LBC_PUSH_CNT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_13_S_RESERVED18_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_13_S_RESERVED18_BF_WID (13)
#define PCIE_CC_GPREG_DOE_13_S_RESERVED18_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_13_S_RESERVED18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_14_S register description at address offset 0x298
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_14_S
  * DOE AXI Write Request Sent Counter
  */

typedef union {
  struct {
    uint32_t CFG_WR_REQ_CNT : 19;
    ///< Count the number of AXI write requests
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED18 : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_14_s_reg_t;

#define PCIE_CC_GPREG_DOE_14_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_14_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_14_S_WR_MASK (0x00000000U)


///< Count the number of AXI write requests
#define PCIE_CC_GPREG_DOE_14_S_CFG_WR_REQ_CNT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_14_S_CFG_WR_REQ_CNT_BF_WID (19)
#define PCIE_CC_GPREG_DOE_14_S_CFG_WR_REQ_CNT_BF_MSK (0x0007FFFF)
#define PCIE_CC_GPREG_DOE_14_S_CFG_WR_REQ_CNT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_14_S_RESERVED18_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_14_S_RESERVED18_BF_WID (13)
#define PCIE_CC_GPREG_DOE_14_S_RESERVED18_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_14_S_RESERVED18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_15_S register description at address offset 0x29c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_15_S
  * DOE Write Response Received Counter
  */

typedef union {
  struct {
    uint32_t CFG_WR_RESP_CNT : 19;
    ///< Count the number of AXI Write Responses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED18 : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_15_s_reg_t;

#define PCIE_CC_GPREG_DOE_15_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_15_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_15_S_WR_MASK (0x00000000U)


///< Count the number of AXI Write Responses
#define PCIE_CC_GPREG_DOE_15_S_CFG_WR_RESP_CNT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_15_S_CFG_WR_RESP_CNT_BF_WID (19)
#define PCIE_CC_GPREG_DOE_15_S_CFG_WR_RESP_CNT_BF_MSK (0x0007FFFF)
#define PCIE_CC_GPREG_DOE_15_S_CFG_WR_RESP_CNT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_15_S_RESERVED18_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_15_S_RESERVED18_BF_WID (13)
#define PCIE_CC_GPREG_DOE_15_S_RESERVED18_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_15_S_RESERVED18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_16_S register description at address offset 0x2a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_16_S
  * DOE Read Request Counter
  */

typedef union {
  struct {
    uint32_t CFG_RD_REQ_CNT : 19;
    ///< Count the number of AXI Read Requests
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED18 : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_16_s_reg_t;

#define PCIE_CC_GPREG_DOE_16_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_16_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_16_S_WR_MASK (0x00000000U)


///< Count the number of AXI Read Requests
#define PCIE_CC_GPREG_DOE_16_S_CFG_RD_REQ_CNT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_16_S_CFG_RD_REQ_CNT_BF_WID (19)
#define PCIE_CC_GPREG_DOE_16_S_CFG_RD_REQ_CNT_BF_MSK (0x0007FFFF)
#define PCIE_CC_GPREG_DOE_16_S_CFG_RD_REQ_CNT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_16_S_RESERVED18_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_16_S_RESERVED18_BF_WID (13)
#define PCIE_CC_GPREG_DOE_16_S_RESERVED18_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_16_S_RESERVED18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_17_S register description at address offset 0x2a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_17_S
  * DOE Read Response Received Counter
  */

typedef union {
  struct {
    uint32_t CFG_RD_RESP_CNT : 19;
    ///< Count the number of AXI Read Responses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED18 : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_17_s_reg_t;

#define PCIE_CC_GPREG_DOE_17_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_17_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_17_S_WR_MASK (0x00000000U)


///< Count the number of AXI Read Responses
#define PCIE_CC_GPREG_DOE_17_S_CFG_RD_RESP_CNT_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_17_S_CFG_RD_RESP_CNT_BF_WID (19)
#define PCIE_CC_GPREG_DOE_17_S_CFG_RD_RESP_CNT_BF_MSK (0x0007FFFF)
#define PCIE_CC_GPREG_DOE_17_S_CFG_RD_RESP_CNT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_17_S_RESERVED18_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_17_S_RESERVED18_BF_WID (13)
#define PCIE_CC_GPREG_DOE_17_S_RESERVED18_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_17_S_RESERVED18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_18_S register description at address offset 0x2a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_18_S
  * DOE Write Message Size Register
  */

typedef union {
  struct {
    uint32_t CFG_CAP_DOE_WRITE_MSG_SIZE : 18;
    ///< DOE Write Message size captured from DW #2 of message
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t RESERVED : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_18_s_reg_t;

#define PCIE_CC_GPREG_DOE_18_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_18_S_RD_MASK (0xfffbffffU)
#define PCIE_CC_GPREG_DOE_18_S_WR_MASK (0x00000000U)


///< DOE Write Message size captured from DW #2 of message
#define PCIE_CC_GPREG_DOE_18_S_CFG_CAP_DOE_WRITE_MSG_SIZE_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_18_S_CFG_CAP_DOE_WRITE_MSG_SIZE_BF_WID (18)
#define PCIE_CC_GPREG_DOE_18_S_CFG_CAP_DOE_WRITE_MSG_SIZE_BF_MSK (0x0003FFFF)
#define PCIE_CC_GPREG_DOE_18_S_CFG_CAP_DOE_WRITE_MSG_SIZE_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_18_S_RESERVED_BF_OFF (19)
#define PCIE_CC_GPREG_DOE_18_S_RESERVED_BF_WID (13)
#define PCIE_CC_GPREG_DOE_18_S_RESERVED_BF_MSK (0xFFF80000)
#define PCIE_CC_GPREG_DOE_18_S_RESERVED_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_19_S register description at address offset 0x2ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_19_S
  * DOE Reserved Register
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_19_s_reg_t;

#define PCIE_CC_GPREG_DOE_19_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_19_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_19_S_WR_MASK (0x00000000U)


///< Reserved
#define PCIE_CC_GPREG_DOE_19_S_RESERVED_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_19_S_RESERVED_BF_WID (32)
#define PCIE_CC_GPREG_DOE_19_S_RESERVED_BF_MSK (0xFFFFFFFF)
#define PCIE_CC_GPREG_DOE_19_S_RESERVED_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_INTR_STATUS_S register description at address offset 0x2b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_intr_status_S
  * PCIe DOE Interrupt Status
  */

typedef union {
  struct {
    uint32_t CFG_RSV_RESP_ERR_ALM : 1;
    ///< Received Reserved Response value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_WR_ID_ERR_ALM : 1;
    ///< Write Response with invalid WID value Alarm
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_RD_ID_ERR_ALM : 1;
    ///< Read Response with invalid RID value Alarm
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_RDRESP_ERR_ALM : 1;
    ///< Read Response with Error value Alarm
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_WRESP_ERR_ALM : 1;
    ///< AXI Write Response Error Value Alarm
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_WR_MSG_RESP_DONE_ALM : 1;
    ///< Received entire write response messages and doe_go bit is high
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_RD_MSG_RESP_DONE_ALM : 1;
    ///< Loaded entire response message to Read Mailbox FIFO
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED7 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t DOE_GO_ALM : 1;
    ///< The doe go bit was written to a 1. Indicating the complete DOE message
    ///< was written to the Write Mailbox
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t DOE_ABORT_ALM : 1;
    ///< The DOE Abort bit was written to a 1
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RD_LBC_READ_MAILBOX_WRITE_ALM : 1;
    ///< A write to the DOE Read Mailbox occured, indicates entire message
    ///< sent
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t READ_MAILBOX_WRITE_ERR_ALM : 1;
    ///< A write to the DOE Read Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t WRITE_MAILBOX_WRITE_ERR_ALM : 1;
    ///< A write to the DOE Write Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RD_LBC_POP_ERR_ALM : 1;
    ///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t WR_LBC_PUSH_ERR_ALM : 1;
    ///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t POISIONED_CFG_WRITE_ERR_ALM : 1;
    ///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_intr_stat_s_reg_t;

#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WR_MASK (0x00000000U)


///< Received Reserved Response value
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RSV_RESP_ERR_ALM_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RSV_RESP_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RSV_RESP_ERR_ALM_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RSV_RESP_ERR_ALM_BF_DEF (0x00000000)

///< Write Response with invalid WID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_ID_ERR_ALM_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_ID_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_ID_ERR_ALM_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_ID_ERR_ALM_BF_DEF (0x00000000)

///< Read Response with invalid RID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_ID_ERR_ALM_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_ID_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_ID_ERR_ALM_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_ID_ERR_ALM_BF_DEF (0x00000000)

///< Read Response with Error value Alarm
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RDRESP_ERR_ALM_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RDRESP_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RDRESP_ERR_ALM_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RDRESP_ERR_ALM_BF_DEF (0x00000000)

///< AXI Write Response Error Value Alarm
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WRESP_ERR_ALM_BF_OFF ( 4)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WRESP_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WRESP_ERR_ALM_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WRESP_ERR_ALM_BF_DEF (0x00000000)

///< Received entire write response messages and doe_go bit is high
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_MSG_RESP_DONE_ALM_BF_OFF ( 5)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_MSG_RESP_DONE_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_MSG_RESP_DONE_ALM_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_WR_MSG_RESP_DONE_ALM_BF_DEF (0x00000000)

///< Loaded entire response message to Read Mailbox FIFO
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_MSG_RESP_DONE_ALM_BF_OFF ( 6)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_MSG_RESP_DONE_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_MSG_RESP_DONE_ALM_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_CFG_RD_MSG_RESP_DONE_ALM_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED7_BF_OFF ( 7)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED7_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED7_BF_DEF (0x00000000)

///< The doe go bit was written to a 1. Indicating the complete DOE message
///< was written to the Write Mailbox
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_GO_ALM_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_GO_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_GO_ALM_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_GO_ALM_BF_DEF (0x00000000)

///< The DOE Abort bit was written to a 1
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_ABORT_ALM_BF_OFF ( 9)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_ABORT_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_ABORT_ALM_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_DOE_ABORT_ALM_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured, indicates entire message
///< sent
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_READ_MAILBOX_WRITE_ALM_BF_OFF (10)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_READ_MAILBOX_WRITE_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_READ_MAILBOX_WRITE_ALM_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_READ_MAILBOX_WRITE_ALM_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_READ_MAILBOX_WRITE_ERR_ALM_BF_OFF (11)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_READ_MAILBOX_WRITE_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_READ_MAILBOX_WRITE_ERR_ALM_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_READ_MAILBOX_WRITE_ERR_ALM_BF_DEF (0x00000000)

///< A write to the DOE Write Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WRITE_MAILBOX_WRITE_ERR_ALM_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WRITE_MAILBOX_WRITE_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WRITE_MAILBOX_WRITE_ERR_ALM_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WRITE_MAILBOX_WRITE_ERR_ALM_BF_DEF (0x00000000)

///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_POP_ERR_ALM_BF_OFF (13)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_POP_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_POP_ERR_ALM_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RD_LBC_POP_ERR_ALM_BF_DEF (0x00000000)

///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WR_LBC_PUSH_ERR_ALM_BF_OFF (14)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WR_LBC_PUSH_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WR_LBC_PUSH_ERR_ALM_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_WR_LBC_PUSH_ERR_ALM_BF_DEF (0x00000000)

///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_POISIONED_CFG_WRITE_ERR_ALM_BF_OFF (15)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_POISIONED_CFG_WRITE_ERR_ALM_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_POISIONED_CFG_WRITE_ERR_ALM_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_POISIONED_CFG_WRITE_ERR_ALM_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED16_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED16_BF_WID (16)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_INTR_HIGH_EN_S register description at address offset 0x2b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_intr_high_en_S
  * PCIe DOE High Enable
  */

typedef union {
  struct {
    uint32_t CFG_RSV_RESP_ERR_HIGH_EN : 1;
    ///< Received Reserved Response value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_WR_ID_ERR_HIGH_EN : 1;
    ///< Write Response with invalid WID value Alarm
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_RD_ID_ERR_HIGH_EN : 1;
    ///< Read Response with invalid RID value Alarm
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_RDRESP_ERR_HIGH_EN : 1;
    ///< Read Response with Error value Alarm
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_WRESP_ERR_HIGH_EN : 1;
    ///< AXI Write Response Error Value Alarm
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_WR_MSG_RESP_DONE_HIGH_EN : 1;
    ///< Received entire write message, Host wrote DOE go bit
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_RD_MSG_RESP_DONE_HIGH_EN : 1;
    ///< Loaded entire response message to Read Mailbox FIFO
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED7 : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t DOE_GO_HIGH_EN : 1;
    ///< The doe go bit was written to a 1. Indicating the complete DOE message
    ///< was written to the Write Mailbox
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DOE_ABORT_HIGH_EN : 1;
    ///< The DOE Abort bit was written to a 1
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t RD_LBC_READ_MAILBOX_WRITE_HIGH_EN : 1;
    ///< A write to the DOE Read Mailbox occured, indicates entire message
    ///< sent
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t READ_MAILBOX_WRITE_ERR_HIGH_EN : 1;
    ///< A write to the DOE Read Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t WRITE_MAILBOX_WRITE_ERR_HIGH_EN : 1;
    ///< A write to the DOE Write Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t RD_LBC_POP_ERR_HIGH_EN : 1;
    ///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t WR_LBC_PUSH_ERR_HIGH_EN : 1;
    ///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t POISIONED_CFG_WRITE_ERR_HIGH_EN : 1;
    ///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_intr_high_en_s_reg_t;

#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WR_MASK (0x0000ffffU)


///< Received Reserved Response value
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RSV_RESP_ERR_HIGH_EN_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RSV_RESP_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RSV_RESP_ERR_HIGH_EN_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RSV_RESP_ERR_HIGH_EN_BF_DEF (0x00000000)

///< Write Response with invalid WID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_ID_ERR_HIGH_EN_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_ID_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_ID_ERR_HIGH_EN_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_ID_ERR_HIGH_EN_BF_DEF (0x00000000)

///< Read Response with invalid RID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_ID_ERR_HIGH_EN_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_ID_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_ID_ERR_HIGH_EN_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_ID_ERR_HIGH_EN_BF_DEF (0x00000000)

///< Read Response with Error value Alarm
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RDRESP_ERR_HIGH_EN_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RDRESP_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RDRESP_ERR_HIGH_EN_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RDRESP_ERR_HIGH_EN_BF_DEF (0x00000000)

///< AXI Write Response Error Value Alarm
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WRESP_ERR_HIGH_EN_BF_OFF ( 4)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WRESP_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WRESP_ERR_HIGH_EN_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WRESP_ERR_HIGH_EN_BF_DEF (0x00000000)

///< Received entire write message, Host wrote DOE go bit
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_MSG_RESP_DONE_HIGH_EN_BF_OFF ( 5)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_MSG_RESP_DONE_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_MSG_RESP_DONE_HIGH_EN_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_WR_MSG_RESP_DONE_HIGH_EN_BF_DEF (0x00000000)

///< Loaded entire response message to Read Mailbox FIFO
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_MSG_RESP_DONE_HIGH_EN_BF_OFF ( 6)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_MSG_RESP_DONE_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_MSG_RESP_DONE_HIGH_EN_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_CFG_RD_MSG_RESP_DONE_HIGH_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED7_BF_OFF ( 7)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED7_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED7_BF_DEF (0x00000000)

///< The doe go bit was written to a 1. Indicating the complete DOE message
///< was written to the Write Mailbox
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_GO_HIGH_EN_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_GO_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_GO_HIGH_EN_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_GO_HIGH_EN_BF_DEF (0x00000000)

///< The DOE Abort bit was written to a 1
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_ABORT_HIGH_EN_BF_OFF ( 9)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_ABORT_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_ABORT_HIGH_EN_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_DOE_ABORT_HIGH_EN_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured, indicates entire message
///< sent
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_READ_MAILBOX_WRITE_HIGH_EN_BF_OFF (10)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_READ_MAILBOX_WRITE_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_READ_MAILBOX_WRITE_HIGH_EN_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_READ_MAILBOX_WRITE_HIGH_EN_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_READ_MAILBOX_WRITE_ERR_HIGH_EN_BF_OFF (11)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_READ_MAILBOX_WRITE_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_READ_MAILBOX_WRITE_ERR_HIGH_EN_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_READ_MAILBOX_WRITE_ERR_HIGH_EN_BF_DEF (0x00000000)

///< A write to the DOE Write Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WRITE_MAILBOX_WRITE_ERR_HIGH_EN_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WRITE_MAILBOX_WRITE_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WRITE_MAILBOX_WRITE_ERR_HIGH_EN_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WRITE_MAILBOX_WRITE_ERR_HIGH_EN_BF_DEF (0x00000000)

///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_POP_ERR_HIGH_EN_BF_OFF (13)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_POP_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_POP_ERR_HIGH_EN_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RD_LBC_POP_ERR_HIGH_EN_BF_DEF (0x00000000)

///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WR_LBC_PUSH_ERR_HIGH_EN_BF_OFF (14)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WR_LBC_PUSH_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WR_LBC_PUSH_ERR_HIGH_EN_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_WR_LBC_PUSH_ERR_HIGH_EN_BF_DEF (0x00000000)

///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_POISIONED_CFG_WRITE_ERR_HIGH_EN_BF_OFF (15)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_POISIONED_CFG_WRITE_ERR_HIGH_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_POISIONED_CFG_WRITE_ERR_HIGH_EN_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_POISIONED_CFG_WRITE_ERR_HIGH_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED16_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED16_BF_WID (16)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_INTR_LOW_EN_S register description at address offset 0x2b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_intr_low_en_S
  * PCIe DOE Low Enable
  */

typedef union {
  struct {
    uint32_t CFG_RSV_RESP_ERR_LOW_EN : 1;
    ///< Received Reserved Response value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_WR_ID_ERR_LOW_EN : 1;
    ///< Write Response with invalid WID value Alarm
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_RD_ID_ERR_LOW_EN : 1;
    ///< Read Response with invalid RID value Alarm
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_RDRESP_ERR_LOW_EN : 1;
    ///< Read Response with Error value Alarm
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_WRESP_ERR_LOW_EN : 1;
    ///< AXI Write Response Error Value Alarm
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_WR_MSG_RESP_DONE_LOW_EN : 1;
    ///< Received entire write message, Host wrote DOE go bit
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_RD_MSG_RESP_DONE_LOW_EN : 1;
    ///< Loaded entire response message to Read Mailbox FIFO
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED7 : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t DOE_GO_LOW_EN : 1;
    ///< The doe go bit was written to a 1. Indicating the complete DOE message
    ///< was written to the Write Mailbox
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DOE_ABORT_LOW_EN : 1;
    ///< The DOE Abort bit was written to a 1
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t RD_LBC_READ_MAILBOX_WRITE_LOW_EN : 1;
    ///< A write to the DOE Read Mailbox occured, indicates entire message
    ///< sent
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t READ_MAILBOX_WRITE_ERR_LOW_EN : 1;
    ///< A write to the DOE Read Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t WRITE_MAILBOX_WRITE_ERR_LOW_EN : 1;
    ///< A write to the DOE Write Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t RD_LBC_POP_ERR_LOW_EN : 1;
    ///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t WR_LBC_PUSH_ERR_LOW_EN : 1;
    ///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t POISIONED_CFG_WRITE_ERR_LOW_EN : 1;
    ///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_intr_low_en_s_reg_t;

#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WR_MASK (0x0000ffffU)


///< Received Reserved Response value
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RSV_RESP_ERR_LOW_EN_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RSV_RESP_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RSV_RESP_ERR_LOW_EN_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RSV_RESP_ERR_LOW_EN_BF_DEF (0x00000000)

///< Write Response with invalid WID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_ID_ERR_LOW_EN_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_ID_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_ID_ERR_LOW_EN_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_ID_ERR_LOW_EN_BF_DEF (0x00000000)

///< Read Response with invalid RID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_ID_ERR_LOW_EN_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_ID_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_ID_ERR_LOW_EN_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_ID_ERR_LOW_EN_BF_DEF (0x00000000)

///< Read Response with Error value Alarm
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RDRESP_ERR_LOW_EN_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RDRESP_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RDRESP_ERR_LOW_EN_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RDRESP_ERR_LOW_EN_BF_DEF (0x00000000)

///< AXI Write Response Error Value Alarm
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WRESP_ERR_LOW_EN_BF_OFF ( 4)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WRESP_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WRESP_ERR_LOW_EN_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WRESP_ERR_LOW_EN_BF_DEF (0x00000000)

///< Received entire write message, Host wrote DOE go bit
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_MSG_RESP_DONE_LOW_EN_BF_OFF ( 5)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_MSG_RESP_DONE_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_MSG_RESP_DONE_LOW_EN_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_WR_MSG_RESP_DONE_LOW_EN_BF_DEF (0x00000000)

///< Loaded entire response message to Read Mailbox FIFO
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_MSG_RESP_DONE_LOW_EN_BF_OFF ( 6)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_MSG_RESP_DONE_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_MSG_RESP_DONE_LOW_EN_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_CFG_RD_MSG_RESP_DONE_LOW_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED7_BF_OFF ( 7)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED7_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED7_BF_DEF (0x00000000)

///< The doe go bit was written to a 1. Indicating the complete DOE message
///< was written to the Write Mailbox
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_GO_LOW_EN_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_GO_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_GO_LOW_EN_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_GO_LOW_EN_BF_DEF (0x00000000)

///< The DOE Abort bit was written to a 1
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_ABORT_LOW_EN_BF_OFF ( 9)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_ABORT_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_ABORT_LOW_EN_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_DOE_ABORT_LOW_EN_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured, indicates entire message
///< sent
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_READ_MAILBOX_WRITE_LOW_EN_BF_OFF (10)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_READ_MAILBOX_WRITE_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_READ_MAILBOX_WRITE_LOW_EN_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_READ_MAILBOX_WRITE_LOW_EN_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_READ_MAILBOX_WRITE_ERR_LOW_EN_BF_OFF (11)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_READ_MAILBOX_WRITE_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_READ_MAILBOX_WRITE_ERR_LOW_EN_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_READ_MAILBOX_WRITE_ERR_LOW_EN_BF_DEF (0x00000000)

///< A write to the DOE Write Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WRITE_MAILBOX_WRITE_ERR_LOW_EN_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WRITE_MAILBOX_WRITE_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WRITE_MAILBOX_WRITE_ERR_LOW_EN_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WRITE_MAILBOX_WRITE_ERR_LOW_EN_BF_DEF (0x00000000)

///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_POP_ERR_LOW_EN_BF_OFF (13)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_POP_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_POP_ERR_LOW_EN_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RD_LBC_POP_ERR_LOW_EN_BF_DEF (0x00000000)

///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WR_LBC_PUSH_ERR_LOW_EN_BF_OFF (14)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WR_LBC_PUSH_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WR_LBC_PUSH_ERR_LOW_EN_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_WR_LBC_PUSH_ERR_LOW_EN_BF_DEF (0x00000000)

///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_POISIONED_CFG_WRITE_ERR_LOW_EN_BF_OFF (15)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_POISIONED_CFG_WRITE_ERR_LOW_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_POISIONED_CFG_WRITE_ERR_LOW_EN_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_POISIONED_CFG_WRITE_ERR_LOW_EN_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED16_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED16_BF_WID (16)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_INTR_CLEAR_S register description at address offset 0x2bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_intr_clear_S
  * PCIe DOE Interrupt Clear
  */

typedef union {
  struct {
    uint32_t CFG_RSV_RESP_ERR_CLR : 1;
    ///< Received Reserved Response value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_WR_ID_ERR_CLR : 1;
    ///< Write Response with invalid WID value Alarm
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_RD_ID_ERR_CLR : 1;
    ///< Read Response with invalid RID value Alarm
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_RDRESP_ERR_CLR : 1;
    ///< Read Response with Error value Alarm
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_WRESP_ERR_CLR : 1;
    ///< AXI Write Response Error Value Alarm
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_WR_MSG_RESP_DONE_CLR : 1;
    ///< Received entire write message, Host wrote DOE go bit
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_RD_MSG_RESP_DONE_CLR : 1;
    ///< Loaded entire response message to Read Mailbox FIFO
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED7 : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t DOE_GO_CLR : 1;
    ///< The doe go bit was written to a 1. Indicating the complete DOE message
    ///< was written to the Write Mailbox
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DOE_ABORT_CLR : 1;
    ///< The DOE Abort bit was written to a 1
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t RD_LBC_READ_MAILBOX_WRITE_CLR : 1;
    ///< A write to the DOE Read Mailbox occured, indicates entire message
    ///< sent
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t READ_MAILBOX_WRITE_ERR_CLR : 1;
    ///< A write to the DOE Read Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t WRITE_MAILBOX_WRITE_ERR_CLR : 1;
    ///< A write to the DOE Write Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t RD_LBC_POP_ERR_CLR : 1;
    ///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t WR_LBC_PUSH_ERR_CLR : 1;
    ///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t POISIONED_CFG_WRITE_ERR_CLR : 1;
    ///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_intr_clr_s_reg_t;

#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WR_MASK (0x0000ffffU)


///< Received Reserved Response value
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RSV_RESP_ERR_CLR_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RSV_RESP_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RSV_RESP_ERR_CLR_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RSV_RESP_ERR_CLR_BF_DEF (0x00000000)

///< Write Response with invalid WID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_ID_ERR_CLR_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_ID_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_ID_ERR_CLR_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_ID_ERR_CLR_BF_DEF (0x00000000)

///< Read Response with invalid RID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_ID_ERR_CLR_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_ID_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_ID_ERR_CLR_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_ID_ERR_CLR_BF_DEF (0x00000000)

///< Read Response with Error value Alarm
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RDRESP_ERR_CLR_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RDRESP_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RDRESP_ERR_CLR_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RDRESP_ERR_CLR_BF_DEF (0x00000000)

///< AXI Write Response Error Value Alarm
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WRESP_ERR_CLR_BF_OFF ( 4)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WRESP_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WRESP_ERR_CLR_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WRESP_ERR_CLR_BF_DEF (0x00000000)

///< Received entire write message, Host wrote DOE go bit
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_MSG_RESP_DONE_CLR_BF_OFF ( 5)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_MSG_RESP_DONE_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_MSG_RESP_DONE_CLR_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_WR_MSG_RESP_DONE_CLR_BF_DEF (0x00000000)

///< Loaded entire response message to Read Mailbox FIFO
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_MSG_RESP_DONE_CLR_BF_OFF ( 6)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_MSG_RESP_DONE_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_MSG_RESP_DONE_CLR_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_CFG_RD_MSG_RESP_DONE_CLR_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED7_BF_OFF ( 7)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED7_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED7_BF_DEF (0x00000000)

///< The doe go bit was written to a 1. Indicating the complete DOE message
///< was written to the Write Mailbox
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_GO_CLR_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_GO_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_GO_CLR_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_GO_CLR_BF_DEF (0x00000000)

///< The DOE Abort bit was written to a 1
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_ABORT_CLR_BF_OFF ( 9)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_ABORT_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_ABORT_CLR_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_DOE_ABORT_CLR_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured, indicates entire message
///< sent
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_READ_MAILBOX_WRITE_CLR_BF_OFF (10)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_READ_MAILBOX_WRITE_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_READ_MAILBOX_WRITE_CLR_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_READ_MAILBOX_WRITE_CLR_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_READ_MAILBOX_WRITE_ERR_CLR_BF_OFF (11)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_READ_MAILBOX_WRITE_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_READ_MAILBOX_WRITE_ERR_CLR_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_READ_MAILBOX_WRITE_ERR_CLR_BF_DEF (0x00000000)

///< A write to the DOE Write Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WRITE_MAILBOX_WRITE_ERR_CLR_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WRITE_MAILBOX_WRITE_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WRITE_MAILBOX_WRITE_ERR_CLR_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WRITE_MAILBOX_WRITE_ERR_CLR_BF_DEF (0x00000000)

///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_POP_ERR_CLR_BF_OFF (13)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_POP_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_POP_ERR_CLR_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RD_LBC_POP_ERR_CLR_BF_DEF (0x00000000)

///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WR_LBC_PUSH_ERR_CLR_BF_OFF (14)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WR_LBC_PUSH_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WR_LBC_PUSH_ERR_CLR_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_WR_LBC_PUSH_ERR_CLR_BF_DEF (0x00000000)

///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_POISIONED_CFG_WRITE_ERR_CLR_BF_OFF (15)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_POISIONED_CFG_WRITE_ERR_CLR_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_POISIONED_CFG_WRITE_ERR_CLR_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_POISIONED_CFG_WRITE_ERR_CLR_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED16_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED16_BF_WID (16)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_DOE_INTR_FORCE_S register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_doe_intr_force_S
  * PCIe DOE Interrupt Force
  */

typedef union {
  struct {
    uint32_t CFG_RSV_RESP_ERR_FRC : 1;
    ///< Received Reserved Response value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_WR_ID_ERR_FRC : 1;
    ///< Write Response with invalid WID value Alarm
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_RD_ID_ERR_FRC : 1;
    ///< Read Response with invalid RID value Alarm
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_RDRESP_ERR_FRC : 1;
    ///< Read Response with Error value Alarm
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_WRESP_ERR_FRC : 1;
    ///< AXI Write Response Error Value Alarm
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_WR_MSG_RESP_DONE_FRC : 1;
    ///< Received entire write message, Host wrote DOE go bit
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_RD_MSG_RESP_DONE_FRC : 1;
    ///< Loaded entire response message to Read Mailbox FIFO
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED7 : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t DOE_GO_FRC : 1;
    ///< The doe go bit was written to a 1. Indicating the complete DOE message
    ///< was written to the Write Mailbox
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DOE_ABORT_FRC : 1;
    ///< The DOE Abort bit was written to a 1
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t RD_LBC_READ_MAILBOX_WRITE_FRC : 1;
    ///< A write to the DOE Read Mailbox occured, indicates entire message
    ///< sent
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t READ_MAILBOX_WRITE_ERR_FRC : 1;
    ///< A write to the DOE Read Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t WRITE_MAILBOX_WRITE_ERR_FRC : 1;
    ///< A write to the DOE Write Mailbox occured without all the write strobes
    ///< active
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t RD_LBC_POP_ERR_FRC : 1;
    ///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t WR_LBC_PUSH_ERR_FRC : 1;
    ///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t POISIONED_CFG_WRITE_ERR_FRC : 1;
    ///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t RESERVED16 : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_doe_intr_force_s_reg_t;

#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WR_MASK (0x0000ffffU)


///< Received Reserved Response value
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RSV_RESP_ERR_FRC_BF_OFF ( 0)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RSV_RESP_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RSV_RESP_ERR_FRC_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RSV_RESP_ERR_FRC_BF_DEF (0x00000000)

///< Write Response with invalid WID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_ID_ERR_FRC_BF_OFF ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_ID_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_ID_ERR_FRC_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_ID_ERR_FRC_BF_DEF (0x00000000)

///< Read Response with invalid RID value Alarm
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_ID_ERR_FRC_BF_OFF ( 2)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_ID_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_ID_ERR_FRC_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_ID_ERR_FRC_BF_DEF (0x00000000)

///< Read Response with Error value Alarm
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RDRESP_ERR_FRC_BF_OFF ( 3)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RDRESP_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RDRESP_ERR_FRC_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RDRESP_ERR_FRC_BF_DEF (0x00000000)

///< AXI Write Response Error Value Alarm
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WRESP_ERR_FRC_BF_OFF ( 4)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WRESP_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WRESP_ERR_FRC_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WRESP_ERR_FRC_BF_DEF (0x00000000)

///< Received entire write message, Host wrote DOE go bit
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_MSG_RESP_DONE_FRC_BF_OFF ( 5)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_MSG_RESP_DONE_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_MSG_RESP_DONE_FRC_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_WR_MSG_RESP_DONE_FRC_BF_DEF (0x00000000)

///< Loaded entire response message to Read Mailbox FIFO
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_MSG_RESP_DONE_FRC_BF_OFF ( 6)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_MSG_RESP_DONE_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_MSG_RESP_DONE_FRC_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_CFG_RD_MSG_RESP_DONE_FRC_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED7_BF_OFF ( 7)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED7_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED7_BF_DEF (0x00000000)

///< The doe go bit was written to a 1. Indicating the complete DOE message
///< was written to the Write Mailbox
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_GO_FRC_BF_OFF ( 8)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_GO_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_GO_FRC_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_GO_FRC_BF_DEF (0x00000000)

///< The DOE Abort bit was written to a 1
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_ABORT_FRC_BF_OFF ( 9)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_ABORT_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_ABORT_FRC_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_DOE_ABORT_FRC_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured, indicates entire message
///< sent
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_READ_MAILBOX_WRITE_FRC_BF_OFF (10)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_READ_MAILBOX_WRITE_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_READ_MAILBOX_WRITE_FRC_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_READ_MAILBOX_WRITE_FRC_BF_DEF (0x00000000)

///< A write to the DOE Read Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_READ_MAILBOX_WRITE_ERR_FRC_BF_OFF (11)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_READ_MAILBOX_WRITE_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_READ_MAILBOX_WRITE_ERR_FRC_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_READ_MAILBOX_WRITE_ERR_FRC_BF_DEF (0x00000000)

///< A write to the DOE Write Mailbox occured without all the write strobes
///< active
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WRITE_MAILBOX_WRITE_ERR_FRC_BF_OFF (12)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WRITE_MAILBOX_WRITE_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WRITE_MAILBOX_WRITE_ERR_FRC_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WRITE_MAILBOX_WRITE_ERR_FRC_BF_DEF (0x00000000)

///< A read to the DOE Read Mailbox occured while the FIFO was empty (underflow)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_POP_ERR_FRC_BF_OFF (13)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_POP_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_POP_ERR_FRC_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RD_LBC_POP_ERR_FRC_BF_DEF (0x00000000)

///< A Write to the DOE Write Mailbox occured while the FIFO was full (overflow)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WR_LBC_PUSH_ERR_FRC_BF_OFF (14)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WR_LBC_PUSH_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WR_LBC_PUSH_ERR_FRC_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_WR_LBC_PUSH_ERR_FRC_BF_DEF (0x00000000)

///< A Poisioned CfgWr was received to the DOE Read/Write Mailboxes
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_POISIONED_CFG_WRITE_ERR_FRC_BF_OFF (15)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_POISIONED_CFG_WRITE_ERR_FRC_BF_WID ( 1)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_POISIONED_CFG_WRITE_ERR_FRC_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_POISIONED_CFG_WRITE_ERR_FRC_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED16_BF_OFF (16)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED16_BF_WID (16)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED16_BF_MSK (0xFFFF0000)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_RESERVED16_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_WIRE_S register description at address offset 0x2c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_wire_S
  * Write Access Control to Config Space
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t WIRE_ACCESS_DISABLE_STATUS : 1;
    ///< Limit wire access to +0x00000004 STATUS_COMMAND_REG  when active (1),
    ///< Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_BAR : 1;
    ///< Limit wire access to                 +0x00000010 Register(32 bit)
    ///< BAR0_REG,                 +0x00000014 Register(32 bit) BAR1_REG,
    ///< +0x00000018 Register(32 bit) BAR2_REG,                 +0x0000001c
    ///< Register(32 bit) BAR3_REG,                 +0x00000020 Register(32
    ///< bit) BAR4_REG,                 +0x00000024 Register(32 bit) BAR5_REG,
    ///< Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_CON_STATUS : 1;
    ///< Limit wire access to +0x00000044 Register(32 bit) CON_STATUS_REG when
    ///< active (1), Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_DC_DS : 1;
    ///< Limit wire access to +0x00000078 DEVICE_CONTROL_DEVICE_STATUS  when
    ///< active (1), Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_HDR_LOG : 1;
    ///< Limit wire access to                  +0x0000011c Register(32 bit)
    ///< HDR_LOG_0_OFF,                 +0x00000120 Register(32 bit) HDR_LOG_1_OFF,
    ///< +0x00000124 Register(32 bit) HDR_LOG_2_OFF,                 +0x00000128
    ///< Register(32 bit) HDR_LOG_3_OFF,                 +0x00000138 Register(32
    ///< bit) TLP_PREFIX_LOG_1_OFF,                 +0x0000013c Register(32
    ///< bit) TLP_PREFIX_LOG_2_OFF,                 +0x00000140 Register(32
    ///< bit) TLP_PREFIX_LOG_3_OFF,                 +0x00000144 Register(32
    ///< bit) TLP_PREFIX_LOG_4_OFF,           when active (1), Value will clean
    ///< when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_MARGIN_LANE : 1;
    ///< Limit wire access to +0x00000184 Register(32 bit) MARGIN_LANE_CNTRL_STATUS0_REG
    ///< when active (1), Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_PL32G : 1;
    ///< Limit wire access to +0x00000194 Register(32 bit) PL32G_CONTROL_REG
    ///< when active (1), Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_EVENT_COUNTER : 1;
    ///< Limit wire access to +0x000001b8 Register(32 bit) EVENT_COUNTER_CONTROL_REG,
    ///< +0x000001bc Register(32 bit) EVENT_COUNTER_DATA_REG when active (1),
    ///< Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_SD : 1;
    ///< Limit wire access to                  +0x00000250 Register(32 bit)
    ///< SD_CONTROL1_REG,                 +0x00000254 Register(32 bit) SD_CONTROL2_REG,
    ///< +0x00000260 Register(32 bit) SD_STATUS_L1LANE_REG,
    ///< +0x00000264 Register(32 bit) SD_STATUS_L1LTSSM_REG,
    ///< +0x00000268 Register(32 bit) SD_STATUS_PM_REG,                 +0x0000026c
    ///< Register(32 bit) SD_STATUS_L2_REG,                 +0x00000270 Register(32
    ///< bit) SD_STATUS_L3FC_REG,                 +0x00000274 Register(32 bit)
    ///< SD_STATUS_L3_REG,                 +0x00000280 Register(32 bit) SD_EQ_CONTROL1_REG,
    ///< +0x00000284 Register(32 bit) SD_EQ_CONTROL2_REG,                 +0x00000288
    ///< Register(32 bit) SD_EQ_CONTROL3_REG,                 +0x00000290 Register(32
    ///< bit) SD_EQ_STATUS1_REG,                 +0x00000294 Register(32 bit)
    ///< SD_EQ_STATUS2_REG,                 +0x00000298 Register(32 bit) SD_EQ_STATUS3_REG,
    ///< when active (1), Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_IDE : 1;
    ///< Limit wire access to                  +0x00002004 Register(32 bit)
    ///< IDE_CAP,                 +0x00002008 Register(32 bit) IDE_CTRL,
    ///< +0x0000200c Register(32 bit) IDE_LINK_STREAM_CTRL_0,
    ///< +0x00002018 Register(32 bit) IDE_SLCT_IDE_STREAM_CTRL_0,
    ///< +0x00002020 Register(32 bit) IDE_RID_ASSOS_REG1_0,
    ///< +0x00002024 Register(32 bit) IDE_RID_ASSOS_REG2_0,
    ///< +0x00002028 Register(32 bit) IDE_ADDR_ASSOS_REG1_0_0,
    ///< +0x0000202c Register(32 bit) IDE_ADDR_ASSOS_REG2_0_0,
    ///< +0x00002030 Register(32 bit) IDE_ADDR_ASSOS_REG3_0_0,           when
    ///< active (1), Value will clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t WIRE_ACCESS_DISABLE_LINK_CONTROL_LINK_STATUS : 1;
    ///< Limit wire access to                  +0x00000080 Register(32 bit)
    ///< LINK_CONTROL_LINK_STATUS_REG           when active (1), Value will
    ///< clean when PCIe Controller is hot reset
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t WIRE_ACCESS_DISABLE_LINK_ACCESS_ALARM_CLR : 12;
    ///< Alarm Clear per disable region - (0->1).
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_wire_s_reg_t;

#define PCIE_CC_GPREG_WIRE_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_WIRE_S_RD_MASK (0x0fff0ffeU)
#define PCIE_CC_GPREG_WIRE_S_WR_MASK (0x0fff0ffeU)


///< Limit wire access to +0x00000004 STATUS_COMMAND_REG  when active (1),
///< Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_STAT_BF_OFF ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_STAT_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_STAT_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_STAT_BF_DEF (0x00000000)

///< Limit wire access to                 +0x00000010 Register(32 bit)
///< BAR0_REG,                 +0x00000014 Register(32 bit) BAR1_REG,
///< +0x00000018 Register(32 bit) BAR2_REG,                 +0x0000001c
///< Register(32 bit) BAR3_REG,                 +0x00000020 Register(32
///< bit) BAR4_REG,                 +0x00000024 Register(32 bit) BAR5_REG,
///< Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_BAR_BF_OFF ( 2)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_BAR_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_BAR_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_BAR_BF_DEF (0x00000000)

///< Limit wire access to +0x00000044 Register(32 bit) CON_STATUS_REG when
///< active (1), Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_CON_STAT_BF_OFF ( 3)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_CON_STAT_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_CON_STAT_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_CON_STAT_BF_DEF (0x00000000)

///< Limit wire access to +0x00000078 DEVICE_CONTROL_DEVICE_STATUS  when
///< active (1), Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_DC_DS_BF_OFF ( 4)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_DC_DS_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_DC_DS_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_DC_DS_BF_DEF (0x00000000)

///< Limit wire access to                  +0x0000011c Register(32 bit)
///< HDR_LOG_0_OFF,                 +0x00000120 Register(32 bit) HDR_LOG_1_OFF,
///< +0x00000124 Register(32 bit) HDR_LOG_2_OFF,                 +0x00000128
///< Register(32 bit) HDR_LOG_3_OFF,                 +0x00000138 Register(32
///< bit) TLP_PREFIX_LOG_1_OFF,                 +0x0000013c Register(32
///< bit) TLP_PREFIX_LOG_2_OFF,                 +0x00000140 Register(32
///< bit) TLP_PREFIX_LOG_3_OFF,                 +0x00000144 Register(32
///< bit) TLP_PREFIX_LOG_4_OFF,           when active (1), Value will clean
///< when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_HDR_LOG_BF_OFF ( 5)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_HDR_LOG_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_HDR_LOG_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_HDR_LOG_BF_DEF (0x00000000)

///< Limit wire access to +0x00000184 Register(32 bit) MARGIN_LANE_CNTRL_STATUS0_REG
///< when active (1), Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_MARGIN_LANE_BF_OFF ( 6)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_MARGIN_LANE_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_MARGIN_LANE_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_MARGIN_LANE_BF_DEF (0x00000000)

///< Limit wire access to +0x00000194 Register(32 bit) PL32G_CONTROL_REG
///< when active (1), Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_PL32G_BF_OFF ( 7)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_PL32G_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_PL32G_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_PL32G_BF_DEF (0x00000000)

///< Limit wire access to +0x000001b8 Register(32 bit) EVENT_COUNTER_CONTROL_REG,
///< +0x000001bc Register(32 bit) EVENT_COUNTER_DATA_REG when active (1),
///< Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_EVENT_CNTER_BF_OFF ( 8)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_EVENT_CNTER_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_EVENT_CNTER_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_EVENT_CNTER_BF_DEF (0x00000000)

///< Limit wire access to                  +0x00000250 Register(32 bit)
///< SD_CONTROL1_REG,                 +0x00000254 Register(32 bit) SD_CONTROL2_REG,
///< +0x00000260 Register(32 bit) SD_STATUS_L1LANE_REG,
///< +0x00000264 Register(32 bit) SD_STATUS_L1LTSSM_REG,
///< +0x00000268 Register(32 bit) SD_STATUS_PM_REG,                 +0x0000026c
///< Register(32 bit) SD_STATUS_L2_REG,                 +0x00000270 Register(32
///< bit) SD_STATUS_L3FC_REG,                 +0x00000274 Register(32 bit)
///< SD_STATUS_L3_REG,                 +0x00000280 Register(32 bit) SD_EQ_CONTROL1_REG,
///< +0x00000284 Register(32 bit) SD_EQ_CONTROL2_REG,                 +0x00000288
///< Register(32 bit) SD_EQ_CONTROL3_REG,                 +0x00000290 Register(32
///< bit) SD_EQ_STATUS1_REG,                 +0x00000294 Register(32 bit)
///< SD_EQ_STATUS2_REG,                 +0x00000298 Register(32 bit) SD_EQ_STATUS3_REG,
///< when active (1), Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_SD_BF_OFF ( 9)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_SD_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_SD_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_SD_BF_DEF (0x00000000)

///< Limit wire access to                  +0x00002004 Register(32 bit)
///< IDE_CAP,                 +0x00002008 Register(32 bit) IDE_CTRL,
///< +0x0000200c Register(32 bit) IDE_LINK_STREAM_CTRL_0,
///< +0x00002018 Register(32 bit) IDE_SLCT_IDE_STREAM_CTRL_0,
///< +0x00002020 Register(32 bit) IDE_RID_ASSOS_REG1_0,
///< +0x00002024 Register(32 bit) IDE_RID_ASSOS_REG2_0,
///< +0x00002028 Register(32 bit) IDE_ADDR_ASSOS_REG1_0_0,
///< +0x0000202c Register(32 bit) IDE_ADDR_ASSOS_REG2_0_0,
///< +0x00002030 Register(32 bit) IDE_ADDR_ASSOS_REG3_0_0,           when
///< active (1), Value will clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_IDE_BF_OFF (10)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_IDE_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_IDE_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_IDE_BF_DEF (0x00000000)

///< Limit wire access to                  +0x00000080 Register(32 bit)
///< LINK_CONTROL_LINK_STATUS_REG           when active (1), Value will
///< clean when PCIe Controller is hot reset
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_CTRL_LINK_STAT_BF_OFF (11)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_CTRL_LINK_STAT_BF_WID ( 1)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_CTRL_LINK_STAT_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_CTRL_LINK_STAT_BF_DEF (0x00000000)

///< Alarm Clear per disable region - (0->1).
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_ACCESS_ALARM_CLR_BF_OFF (16)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_ACCESS_ALARM_CLR_BF_WID (12)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_ACCESS_ALARM_CLR_BF_MSK (0x0FFF0000)
#define PCIE_CC_GPREG_WIRE_S_WIRE_ACCESS_DIS_LINK_ACCESS_ALARM_CLR_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_LTSSM_S register description at address offset 0x2c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ltssm_S
  * LTSSM SW Enable
  */

typedef union {
  struct {
    uint32_t APP_LTSSM_ENABLE : 1;
    ///< When your application has finished initializing the core configuration
    ///< registers, it asserts app_ltssm_enable to allow the LTSSM to continue
    ///< link establishment.                 This bit will clear when a hot
    ///< reset of the controller occurs.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ltssm_s_reg_t;

#define PCIE_CC_GPREG_LTSSM_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_LTSSM_S_RD_MASK (0x00000001U)
#define PCIE_CC_GPREG_LTSSM_S_WR_MASK (0x00000001U)


///< When your application has finished initializing the core configuration
///< registers, it asserts app_ltssm_enable to allow the LTSSM to continue
///< link establishment.                 This bit will clear when a hot
///< reset of the controller occurs.
#define PCIE_CC_GPREG_LTSSM_S_APP_LTSSM_EN_BF_OFF ( 0)
#define PCIE_CC_GPREG_LTSSM_S_APP_LTSSM_EN_BF_WID ( 1)
#define PCIE_CC_GPREG_LTSSM_S_APP_LTSSM_EN_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_LTSSM_S_APP_LTSSM_EN_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_SBE register description at address offset 0x2cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_sbe
  * Memory ECC Single Bit Error - SBE
  */

typedef union {
  struct {
    uint32_t ECC_SBE_M2T0 : 3;
    ///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC single bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_SBE_M6 : 1;
    ///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC single bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_SBE_M27T8 : 20;
    ///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC single bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_sbe_reg_t;

#define PCIE_CC_GPREG_ECC_SBE_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_SBE_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_SBE_WR_MASK (0x00000000U)


///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC single bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M2T0_BF_DEF (0x00000000)

///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC single bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M6_BF_DEF (0x00000000)

///< ECC Single Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC single bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_SBE_ECC_SBE_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_DBE register description at address offset 0x2d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_dbe
  * Memory ECC Double Bit Error - DBE
  */

typedef union {
  struct {
    uint32_t ECC_DBE_M2T0 : 3;
    ///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC double bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_DBE_M6 : 1;
    ///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC double bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_DBE_M27T8 : 20;
    ///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
    ///< in a TPCIe Controller, and when high, indicates an ECC double bit
    ///< error was detected, and can be cleared by the associated ERR_CLR bit.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_dbe_reg_t;

#define PCIE_CC_GPREG_ECC_DBE_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_DBE_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_DBE_WR_MASK (0x00000000U)


///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC double bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M2T0_BF_DEF (0x00000000)

///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC double bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M6_BF_DEF (0x00000000)

///< ECC Double Bit Error. Each bit is for an ECC protected memory slice
///< in a TPCIe Controller, and when high, indicates an ECC double bit
///< error was detected, and can be cleared by the associated ERR_CLR bit.
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_DBE_ECC_DBE_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_SBE_CNT_OVFL register description at address offset 0x2d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_sbe_cnt_ovfl
  * Memory ECC Single Bit Error Count Overflow - SBE
  */

typedef union {
  struct {
    uint32_t ECC_SBR_CNT_OVFL_M2T0 : 3;
    ///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
    ///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
    ///< by CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ECC_SBR_CNT_OVFL_M6 : 1;
    ///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
    ///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
    ///< by CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t ECC_SBR_CNT_OVFL_M27T8 : 20;
    ///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
    ///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
    ///< by CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_sbe_cnt_ovfl_reg_t;

#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_RD_MASK (0x0fffff47U)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_WR_MASK (0x00000000U)


///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
///< by CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M2T0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M2T0_BF_WID ( 3)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M2T0_BF_MSK (0x00000007)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M2T0_BF_DEF (0x00000000)

///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
///< by CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M6_BF_OFF ( 6)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M6_BF_WID ( 1)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M6_BF_DEF (0x00000000)

///< SBE Count Overflow. Each bit is for an ECC protected memory, and when
///< high, indicates the SBE_COUNT[3:0] is overflowed. It can be cleared
///< by CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M27T8_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M27T8_BF_WID (20)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M27T8_BF_MSK (0x0FFFFF00)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ECC_SBR_CNT_OVFL_M27T8_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_SBE_CNT_0[4] register description at address offset 0x2d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_sbe_cnt_0
  * Memory ECC Single Bit Error Counter
  */

typedef union {
  struct {
    uint32_t ECC_SBE_CNT_0 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_1 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_2 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_3 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_4 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_5 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_6 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t ECC_SBE_CNT_7 : 4;
    ///< SBE Count. This is the value of the SBE counter, which doesn't roll
    ///< over and can be cleared by the associated CNT_CLR bit.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_sbe_cnt_0_reg_t;

#define PCIE_CC_GPREG_ECC_SBE_CNT_0_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_WR_MASK (0x00000000U)


///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_0_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_0_BF_MSK (0x0000000F)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_0_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_1_BF_OFF ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_1_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_1_BF_MSK (0x000000F0)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_1_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_2_BF_OFF ( 8)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_2_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_2_BF_MSK (0x00000F00)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_2_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_3_BF_OFF (12)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_3_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_3_BF_MSK (0x0000F000)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_3_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_4_BF_OFF (16)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_4_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_4_BF_MSK (0x000F0000)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_4_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_5_BF_OFF (20)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_5_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_5_BF_MSK (0x00F00000)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_5_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_6_BF_OFF (24)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_6_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_6_BF_MSK (0x0F000000)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_6_BF_DEF (0x00000000)

///< SBE Count. This is the value of the SBE counter, which doesn't roll
///< over and can be cleared by the associated CNT_CLR bit.
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_7_BF_OFF (28)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_7_BF_WID ( 4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_7_BF_MSK (0xF0000000)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ECC_SBE_CNT_7_BF_DEF (0x00000000)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ARR_SZ0 (4)
#define PCIE_CC_GPREG_ECC_SBE_CNT_0_ARRAY_STRIDE0 (0x0004)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_ERR_ADDR_0[14] register description at address offset 0x2e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_err_addr_0
  * Memory ECC Error Address
  */

typedef union {
  struct {
    uint32_t ECC_ERR_ADDR_0 : 11;
    ///< ECC Error Address.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t ECC_ERR_ADDR_1 : 11;
    ///< ECC Error Address.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_err_addr_0_reg_t;

#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_RD_MASK (0x07ff07ffU)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_WR_MASK (0x00000000U)


///< ECC Error Address.
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_0_BF_WID (11)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_0_BF_MSK (0x000007FF)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_0_BF_DEF (0x00000000)

///< ECC Error Address.
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_1_BF_OFF (16)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_1_BF_WID (11)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_1_BF_MSK (0x07FF0000)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ECC_ERR_ADDR_1_BF_DEF (0x00000000)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ARR_SZ0 (14)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_0_ARRAY_STRIDE0 (0x0004)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_ECC_ERR_SYNDROME_0[14] register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_ecc_err_syndrome_0
  * Memory ECC Error Syndrome
  */

typedef union {
  struct {
    uint32_t ECC_ERR_SYNDROME_0 : 10;
    ///< ECC Error Syndrome
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t ECC_ERR_SYNDROME_1 : 10;
    ///< ECC Error Syndrome
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_ecc_err_syndrome_0_reg_t;

#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_RD_MASK (0x03ff03ffU)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_WR_MASK (0x00000000U)


///< ECC Error Syndrome
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_0_BF_WID (10)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_0_BF_MSK (0x000003FF)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_0_BF_DEF (0x00000000)

///< ECC Error Syndrome
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_1_BF_OFF (16)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_1_BF_WID (10)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_1_BF_MSK (0x03FF0000)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ECC_ERR_SYNDROME_1_BF_DEF (0x00000000)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ARR_SZ0 (14)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_0_ARRAY_STRIDE0 (0x0004)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR0_STATUS register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr0_status
  * CC Interrupt Status 0
  */

typedef union {
  struct {
    uint32_t RADM_INTA_ASSERTED : 1;
    ///< the controller received an Assert_INTA Message from the downstream
    ///< device
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RADM_INTA_DEASSERTED : 1;
    ///< the controller received an Deassert_INTA Message from the downstream
    ///< device
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t HP_PME : 1;
    ///< The controller asserts hp_pme when all of the following conditions
    ///< are true: - The PME Enable bit in the Power Management Control and
    ///< Status register is set to 1. - Any bit in the Slot Status register
    ///< transitions from 0 to 1 and the associated event notification is enabled
    ///< in the Slot Control register.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t HP_MSI : 1;
    ///< hp_msi (MSI or MSI-X is enabled.)
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CFG_SYS_ERR_RC : 1;
    ///< System error detected
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RADM_MSG_UNLOCK : 1;
    ///< The core received an UNLOCK message
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RADM_CORRECTABLE_ERR : 1;
    ///< The core received an ERR_COR message
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RADM_NONFATAL_ERR : 1;
    ///< The core received an ERR_NONFATAL message
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t RADM_FATAL_ERR : 1;
    ///< The core received an ERR_FATAL message
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t RADM_PM_PME : 1;
    ///< The core received a PM_PME message
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t RADM_PM_TO_ACK : 1;
    ///< The core received a PME_TO_Ack message
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RADM_PM_TURNOFF : 1;
    ///< One-clock-cycle pulse that indicates that the controller received
    ///< a PME Turnoff message
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t PM_LINKST_IN_L2 : 1;
    ///< In L2 mode
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t RADM_QOVERFLOW : 1;
    ///< one or more of the P/NP/CPL receive queues have overflowed
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t RADM_VENDOR_MSG : 1;
    ///< The core received a vendor-defined message
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_SEND_COR_ERR : 1;
    ///< Sent Correctable Error.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t CFG_SEND_NF_ERR : 1;
    ///< Sent Non-Fatal Error
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t CFG_SEND_F_ERR : 1;
    ///< Sent Fatal Error.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t CFG_X_ERR_STS_OR : 1;
    ///< internal error Reporting Signals
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CFG_AER_RC_ERR_MSI : 1;
    ///< MSI/MSI-x enable, A reported error condition causes a bit to be set
    ///< in the Root Error Status register
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t CFG_PME_MSI : 1;
    ///< MSI/MSI-x enable,
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t TRGT_CPL_TIMEOUT : 1;
    ///< application has not generated a completion for an incoming request
    ///< within required time
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t SMLH_REQ_RST_NOT : 1;
    ///< Early version of the link_req_rst_not signal.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr0_stat_reg_t;

#define PCIE_CC_GPREG_INTR0_STAT_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR0_STAT_RD_MASK (0x06dffff3U)
#define PCIE_CC_GPREG_INTR0_STAT_WR_MASK (0x00000000U)


///< the controller received an Assert_INTA Message from the downstream
///< device
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_ASSERTED_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_ASSERTED_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_ASSERTED_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_ASSERTED_BF_DEF (0x00000000)

///< the controller received an Deassert_INTA Message from the downstream
///< device
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_DEASSERTED_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_DEASSERTED_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_DEASSERTED_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_INTA_DEASSERTED_BF_DEF (0x00000000)

///< The controller asserts hp_pme when all of the following conditions
///< are true: - The PME Enable bit in the Power Management Control and
///< Status register is set to 1. - Any bit in the Slot Status register
///< transitions from 0 to 1 and the associated event notification is enabled
///< in the Slot Control register.
#define PCIE_CC_GPREG_INTR0_STAT_HP_PME_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR0_STAT_HP_PME_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_HP_PME_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR0_STAT_HP_PME_BF_DEF (0x00000000)

///< hp_msi (MSI or MSI-X is enabled.)
#define PCIE_CC_GPREG_INTR0_STAT_HP_MSI_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR0_STAT_HP_MSI_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_HP_MSI_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR0_STAT_HP_MSI_BF_DEF (0x00000000)

///< System error detected
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SYS_ERR_RC_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SYS_ERR_RC_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SYS_ERR_RC_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SYS_ERR_RC_BF_DEF (0x00000000)

///< The core received an UNLOCK message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_MSG_UNLOCK_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_MSG_UNLOCK_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_MSG_UNLOCK_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_MSG_UNLOCK_BF_DEF (0x00000000)

///< The core received an ERR_COR message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_CORRECTBL_ERR_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_CORRECTBL_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_CORRECTBL_ERR_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_CORRECTBL_ERR_BF_DEF (0x00000000)

///< The core received an ERR_NONFATAL message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_NONFATAL_ERR_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_NONFATAL_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_NONFATAL_ERR_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_NONFATAL_ERR_BF_DEF (0x00000000)

///< The core received an ERR_FATAL message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_FATAL_ERR_BF_OFF (10)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_FATAL_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_FATAL_ERR_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_FATAL_ERR_BF_DEF (0x00000000)

///< The core received a PM_PME message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_PME_BF_OFF (11)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_PME_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_PME_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_PME_BF_DEF (0x00000000)

///< The core received a PME_TO_Ack message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TO_ACK_BF_OFF (12)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TO_ACK_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TO_ACK_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TO_ACK_BF_DEF (0x00000000)

///< One-clock-cycle pulse that indicates that the controller received
///< a PME Turnoff message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TURNOFF_BF_OFF (13)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TURNOFF_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TURNOFF_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_PM_TURNOFF_BF_DEF (0x00000000)

///< In L2 mode
#define PCIE_CC_GPREG_INTR0_STAT_PM_LINKST_IN_L2_BF_OFF (14)
#define PCIE_CC_GPREG_INTR0_STAT_PM_LINKST_IN_L2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_PM_LINKST_IN_L2_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_INTR0_STAT_PM_LINKST_IN_L2_BF_DEF (0x00000000)

///< one or more of the P/NP/CPL receive queues have overflowed
#define PCIE_CC_GPREG_INTR0_STAT_RADM_QOVERFLOW_BF_OFF (15)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_QOVERFLOW_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_QOVERFLOW_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_QOVERFLOW_BF_DEF (0x00000000)

///< The core received a vendor-defined message
#define PCIE_CC_GPREG_INTR0_STAT_RADM_VENDOR_MSG_BF_OFF (16)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_VENDOR_MSG_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_VENDOR_MSG_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_INTR0_STAT_RADM_VENDOR_MSG_BF_DEF (0x00000000)

///< Sent Correctable Error.
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_COR_ERR_BF_OFF (17)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_COR_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_COR_ERR_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_COR_ERR_BF_DEF (0x00000000)

///< Sent Non-Fatal Error
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_NF_ERR_BF_OFF (18)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_NF_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_NF_ERR_BF_MSK (0x00040000)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_NF_ERR_BF_DEF (0x00000000)

///< Sent Fatal Error.
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_F_ERR_BF_OFF (19)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_F_ERR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_F_ERR_BF_MSK (0x00080000)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_SEND_F_ERR_BF_DEF (0x00000000)

///< internal error Reporting Signals
#define PCIE_CC_GPREG_INTR0_STAT_CFG_X_ERR_STS_OR_BF_OFF (20)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_X_ERR_STS_OR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_X_ERR_STS_OR_BF_MSK (0x00100000)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_X_ERR_STS_OR_BF_DEF (0x00000000)

///< MSI/MSI-x enable, A reported error condition causes a bit to be set
///< in the Root Error Status register
#define PCIE_CC_GPREG_INTR0_STAT_CFG_AER_RC_ERR_MSI_BF_OFF (22)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_AER_RC_ERR_MSI_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_AER_RC_ERR_MSI_BF_MSK (0x00400000)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_AER_RC_ERR_MSI_BF_DEF (0x00000000)

///< MSI/MSI-x enable,
#define PCIE_CC_GPREG_INTR0_STAT_CFG_PME_MSI_BF_OFF (23)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_PME_MSI_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_PME_MSI_BF_MSK (0x00800000)
#define PCIE_CC_GPREG_INTR0_STAT_CFG_PME_MSI_BF_DEF (0x00000000)

///< application has not generated a completion for an incoming request
///< within required time
#define PCIE_CC_GPREG_INTR0_STAT_TRGT_CPL_TIMEOUT_BF_OFF (25)
#define PCIE_CC_GPREG_INTR0_STAT_TRGT_CPL_TIMEOUT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_TRGT_CPL_TIMEOUT_BF_MSK (0x02000000)
#define PCIE_CC_GPREG_INTR0_STAT_TRGT_CPL_TIMEOUT_BF_DEF (0x00000000)

///< Early version of the link_req_rst_not signal.
#define PCIE_CC_GPREG_INTR0_STAT_SMLH_REQ_RST_NOT_BF_OFF (26)
#define PCIE_CC_GPREG_INTR0_STAT_SMLH_REQ_RST_NOT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_STAT_SMLH_REQ_RST_NOT_BF_MSK (0x04000000)
#define PCIE_CC_GPREG_INTR0_STAT_SMLH_REQ_RST_NOT_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR0_HIGH_EN register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr0_high_en
  * CC Interrupt High EN 0
  */

typedef union {
  struct {
    uint32_t INTR_HIGH_EN_0 : 1;
    ///< High Interrupt Enable for Status Bit 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_1 : 1;
    ///< High Interrupt Enable for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED2 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_4 : 1;
    ///< High Interrupt Enable for Status Bit 4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_5 : 1;
    ///< High Interrupt Enable for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_6 : 1;
    ///< High Interrupt Enable for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_7 : 1;
    ///< High Interrupt Enable for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_8 : 1;
    ///< High Interrupt Enable for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_9 : 1;
    ///< High Interrupt Enable for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_10 : 1;
    ///< High Interrupt Enable for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_11 : 1;
    ///< High Interrupt Enable for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_12 : 1;
    ///< High Interrupt Enable for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_13 : 1;
    ///< High Interrupt Enable for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_14 : 1;
    ///< High Interrupt Enable for Status Bit 14
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_15 : 1;
    ///< High Interrupt Enable for Status Bit 15
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_16 : 1;
    ///< High Interrupt Enable for Status Bit 16
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_17 : 1;
    ///< High Interrupt Enable for Status Bit 17
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_18 : 1;
    ///< High Interrupt Enable for Status Bit 18
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_19 : 1;
    ///< High Interrupt Enable for Status Bit 19
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_20 : 1;
    ///< High Interrupt Enable for Status Bit 20
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RESERVED21 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_22 : 1;
    ///< High Interrupt Enable for Status Bit 22
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_23 : 1;
    ///< High Interrupt Enable for Status Bit 23
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RESERVED24 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_25 : 1;
    ///< High Interrupt Enable for Status Bit 25
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_26 : 1;
    ///< High Interrupt Enable for Status Bit 26
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RESERVED27 : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr0_high_en_reg_t;

#define PCIE_CC_GPREG_INTR0_HIGH_EN_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_WR_MASK (0x06dffff3U)


///< High Interrupt Enable for Status Bit 0
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_0_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 1
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_1_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED2_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED3_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 4
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_4_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 5
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_5_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 6
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_6_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 7
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_7_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 8
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_8_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 9
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_9_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 10
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_10_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 11
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_11_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 12
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_12_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 13
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_13_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 14
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_14_BF_OFF (14)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_14_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_14_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_14_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 15
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_15_BF_OFF (15)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_15_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_15_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 16
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_16_BF_OFF (16)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_16_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_16_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_16_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 17
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_17_BF_OFF (17)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_17_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_17_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_17_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 18
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_18_BF_OFF (18)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_18_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_18_BF_MSK (0x00040000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_18_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 19
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_19_BF_OFF (19)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_19_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_19_BF_MSK (0x00080000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_19_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 20
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_20_BF_OFF (20)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_20_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_20_BF_MSK (0x00100000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_20_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED21_BF_OFF (21)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED21_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED21_BF_MSK (0x00200000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED21_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 22
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_22_BF_OFF (22)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_22_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_22_BF_MSK (0x00400000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_22_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 23
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_23_BF_OFF (23)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_23_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_23_BF_MSK (0x00800000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_23_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED24_BF_OFF (24)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED24_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED24_BF_MSK (0x01000000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED24_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 25
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_25_BF_OFF (25)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_25_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_25_BF_MSK (0x02000000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_25_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 26
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_26_BF_OFF (26)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_26_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_26_BF_MSK (0x04000000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_INTR_HIGH_EN_26_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED27_BF_OFF (27)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED27_BF_WID ( 5)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED27_BF_MSK (0xF8000000)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_RESERVED27_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR0_LOW_EN register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr0_low_en
  * CC Interrupt Low EN 0
  */

typedef union {
  struct {
    uint32_t INTR_LOW_EN_0 : 1;
    ///< Low Interrupt Enable for Status Bit 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_LOW_EN_1 : 1;
    ///< Low Interrupt Enable for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED2 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t INTR_LOW_EN_4 : 1;
    ///< Low Interrupt Enable for Status Bit 4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_LOW_EN_5 : 1;
    ///< Low Interrupt Enable for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_LOW_EN_6 : 1;
    ///< Low Interrupt Enable for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_LOW_EN_7 : 1;
    ///< Low Interrupt Enable for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_LOW_EN_8 : 1;
    ///< Low Interrupt Enable for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_LOW_EN_9 : 1;
    ///< Low Interrupt Enable for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_LOW_EN_10 : 1;
    ///< Low Interrupt Enable for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_LOW_EN_11 : 1;
    ///< Low Interrupt Enable for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_LOW_EN_12 : 1;
    ///< Low Interrupt Enable for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_LOW_EN_13 : 1;
    ///< Low Interrupt Enable for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t INTR_LOW_EN_14 : 1;
    ///< Low Interrupt Enable for Status Bit 14
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t INTR_LOW_EN_15 : 1;
    ///< Low Interrupt Enable for Status Bit 15
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t INTR_LOW_EN_16 : 1;
    ///< Low Interrupt Enable for Status Bit 16
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTR_LOW_EN_17 : 1;
    ///< Low Interrupt Enable for Status Bit 17
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t INTR_LOW_EN_18 : 1;
    ///< Low Interrupt Enable for Status Bit 18
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t INTR_LOW_EN_19 : 1;
    ///< Low Interrupt Enable for Status Bit 19
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t INTR_LOW_EN_20 : 1;
    ///< Low Interrupt Enable for Status Bit 20
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RESERVED21 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
    uint32_t INTR_LOW_EN_22 : 1;
    ///< Low Interrupt Enable for Status Bit 22
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t INTR_LOW_EN_23 : 1;
    ///< Low Interrupt Enable for Status Bit 23
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RESERVED24 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t INTR_LOW_EN_25 : 1;
    ///< Low Interrupt Enable for Status Bit 25
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t INTR_LOW_EN_26 : 1;
    ///< Low Interrupt Enable for Status Bit 26
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RESERVED27 : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr0_low_en_reg_t;

#define PCIE_CC_GPREG_INTR0_LOW_EN_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_INTR0_LOW_EN_WR_MASK (0x06dffff3U)


///< Low Interrupt Enable for Status Bit 0
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_0_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 1
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_1_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED2_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED3_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 4
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_4_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 5
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_5_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 6
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_6_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 7
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_7_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 8
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_8_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 9
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_9_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 10
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_10_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 11
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_11_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 12
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_12_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 13
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_13_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 14
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_14_BF_OFF (14)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_14_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_14_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_14_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 15
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_15_BF_OFF (15)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_15_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_15_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 16
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_16_BF_OFF (16)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_16_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_16_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_16_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 17
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_17_BF_OFF (17)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_17_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_17_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_17_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 18
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_18_BF_OFF (18)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_18_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_18_BF_MSK (0x00040000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_18_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 19
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_19_BF_OFF (19)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_19_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_19_BF_MSK (0x00080000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_19_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 20
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_20_BF_OFF (20)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_20_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_20_BF_MSK (0x00100000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_20_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED21_BF_OFF (21)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED21_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED21_BF_MSK (0x00200000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED21_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 22
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_22_BF_OFF (22)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_22_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_22_BF_MSK (0x00400000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_22_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 23
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_23_BF_OFF (23)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_23_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_23_BF_MSK (0x00800000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_23_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED24_BF_OFF (24)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED24_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED24_BF_MSK (0x01000000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED24_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 25
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_25_BF_OFF (25)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_25_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_25_BF_MSK (0x02000000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_25_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 26
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_26_BF_OFF (26)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_26_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_26_BF_MSK (0x04000000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_INTR_LOW_EN_26_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED27_BF_OFF (27)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED27_BF_WID ( 5)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED27_BF_MSK (0xF8000000)
#define PCIE_CC_GPREG_INTR0_LOW_EN_RESERVED27_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR0_CLEAR register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr0_clear
  * CC Interrupt Clear 0
  */

typedef union {
  struct {
    uint32_t INTR_CLEAR_0 : 1;
    ///< Clear for Status Bit 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_CLEAR_1 : 1;
    ///< Clear for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED2 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t INTR_CLEAR_4 : 1;
    ///< Clear for Status Bit 4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_CLEAR_5 : 1;
    ///< Clear for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_CLEAR_6 : 1;
    ///< Clear for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_CLEAR_7 : 1;
    ///< Clear for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_CLEAR_8 : 1;
    ///< Clear for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_CLEAR_9 : 1;
    ///< Clear for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_CLEAR_10 : 1;
    ///< Clear for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_CLEAR_11 : 1;
    ///< Clear for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_CLEAR_12 : 1;
    ///< Clear for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_CLEAR_13 : 1;
    ///< Clear for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t INTR_CLEAR_14 : 1;
    ///< Clear for Status Bit 14
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t INTR_CLEAR_15 : 1;
    ///< Clear for Status Bit 15
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t INTR_CLEAR_16 : 1;
    ///< Clear for Status Bit 16
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTR_CLEAR_17 : 1;
    ///< Clear for Status Bit 17
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t INTR_CLEAR_18 : 1;
    ///< Clear for Status Bit 18
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t INTR_CLEAR_19 : 1;
    ///< Clear for Status Bit 19
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t INTR_CLEAR_20 : 1;
    ///< Clear for Status Bit 20
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RESERVED21 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
    uint32_t INTR_CLEAR_22 : 1;
    ///< Clear for Status Bit 22
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t INTR_CLEAR_23 : 1;
    ///< Clear for Status Bit 23
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RESERVED24 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t INTR_CLEAR_25 : 1;
    ///< Clear for Status Bit 25
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t INTR_CLEAR_26 : 1;
    ///< Clear for Status Bit 26
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RESERVED27 : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr0_clr_reg_t;

#define PCIE_CC_GPREG_INTR0_CLR_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR0_CLR_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_INTR0_CLR_WR_MASK (0x06dffff3U)


///< Clear for Status Bit 0
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_0_BF_DEF (0x00000000)

///< Clear for Status Bit 1
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_1_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED2_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED3_BF_DEF (0x00000000)

///< Clear for Status Bit 4
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_4_BF_DEF (0x00000000)

///< Clear for Status Bit 5
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_5_BF_DEF (0x00000000)

///< Clear for Status Bit 6
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_6_BF_DEF (0x00000000)

///< Clear for Status Bit 7
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_7_BF_DEF (0x00000000)

///< Clear for Status Bit 8
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_8_BF_DEF (0x00000000)

///< Clear for Status Bit 9
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_9_BF_DEF (0x00000000)

///< Clear for Status Bit 10
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_10_BF_DEF (0x00000000)

///< Clear for Status Bit 11
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_11_BF_DEF (0x00000000)

///< Clear for Status Bit 12
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_12_BF_DEF (0x00000000)

///< Clear for Status Bit 13
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_13_BF_DEF (0x00000000)

///< Clear for Status Bit 14
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_14_BF_OFF (14)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_14_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_14_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_14_BF_DEF (0x00000000)

///< Clear for Status Bit 15
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_15_BF_OFF (15)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_15_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_15_BF_DEF (0x00000000)

///< Clear for Status Bit 16
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_16_BF_OFF (16)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_16_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_16_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_16_BF_DEF (0x00000000)

///< Clear for Status Bit 17
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_17_BF_OFF (17)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_17_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_17_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_17_BF_DEF (0x00000000)

///< Clear for Status Bit 18
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_18_BF_OFF (18)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_18_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_18_BF_MSK (0x00040000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_18_BF_DEF (0x00000000)

///< Clear for Status Bit 19
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_19_BF_OFF (19)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_19_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_19_BF_MSK (0x00080000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_19_BF_DEF (0x00000000)

///< Clear for Status Bit 20
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_20_BF_OFF (20)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_20_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_20_BF_MSK (0x00100000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_20_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED21_BF_OFF (21)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED21_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED21_BF_MSK (0x00200000)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED21_BF_DEF (0x00000000)

///< Clear for Status Bit 22
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_22_BF_OFF (22)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_22_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_22_BF_MSK (0x00400000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_22_BF_DEF (0x00000000)

///< Clear for Status Bit 23
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_23_BF_OFF (23)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_23_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_23_BF_MSK (0x00800000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_23_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED24_BF_OFF (24)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED24_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED24_BF_MSK (0x01000000)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED24_BF_DEF (0x00000000)

///< Clear for Status Bit 25
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_25_BF_OFF (25)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_25_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_25_BF_MSK (0x02000000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_25_BF_DEF (0x00000000)

///< Clear for Status Bit 26
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_26_BF_OFF (26)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_26_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_26_BF_MSK (0x04000000)
#define PCIE_CC_GPREG_INTR0_CLR_INTR_CLR_26_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED27_BF_OFF (27)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED27_BF_WID ( 5)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED27_BF_MSK (0xF8000000)
#define PCIE_CC_GPREG_INTR0_CLR_RESERVED27_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR0_FORCE register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr0_force
  * CC Interrupt Force 0
  */

typedef union {
  struct {
    uint32_t INTR_FORCE_0 : 1;
    ///< Force for Status Bit 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_FORCE_1 : 1;
    ///< Force for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RESERVED2 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="0x0"
    uint32_t INTR_FORCE_4 : 1;
    ///< Force for Status Bit 4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_FORCE_5 : 1;
    ///< Force for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_FORCE_6 : 1;
    ///< Force for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_FORCE_7 : 1;
    ///< Force for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_FORCE_8 : 1;
    ///< Force for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_FORCE_9 : 1;
    ///< Force for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_FORCE_10 : 1;
    ///< Force for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_FORCE_11 : 1;
    ///< Force for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_FORCE_12 : 1;
    ///< Force for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_FORCE_13 : 1;
    ///< Force for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t INTR_FORCE_14 : 1;
    ///< Force for Status Bit 14
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t INTR_FORCE_15 : 1;
    ///< Force for Status Bit 15
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t INTR_FORCE_16 : 1;
    ///< Force for Status Bit 16
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTR_FORCE_17 : 1;
    ///< Force for Status Bit 17
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t INTR_FORCE_18 : 1;
    ///< Force for Status Bit 18
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t INTR_FORCE_19 : 1;
    ///< Force for Status Bit 19
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t INTR_FORCE_20 : 1;
    ///< Force for Status Bit 20
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t RESERVED21 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
    uint32_t INTR_FORCE_22 : 1;
    ///< Force for Status Bit 22
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t INTR_FORCE_23 : 1;
    ///< Force for Status Bit 23
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t RESERVED24 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="0x0"
    uint32_t INTR_FORCE_25 : 1;
    ///< Force for Status Bit 25
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t INTR_FORCE_26 : 1;
    ///< Force for Status Bit 26
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t RESERVED27 : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="0x0"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr0_force_reg_t;

#define PCIE_CC_GPREG_INTR0_FORCE_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR0_FORCE_RD_MASK (0xffffffffU)
#define PCIE_CC_GPREG_INTR0_FORCE_WR_MASK (0x06dffff3U)


///< Force for Status Bit 0
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_0_BF_DEF (0x00000000)

///< Force for Status Bit 1
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_1_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED2_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED3_BF_DEF (0x00000000)

///< Force for Status Bit 4
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_4_BF_DEF (0x00000000)

///< Force for Status Bit 5
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_5_BF_DEF (0x00000000)

///< Force for Status Bit 6
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_6_BF_DEF (0x00000000)

///< Force for Status Bit 7
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_7_BF_DEF (0x00000000)

///< Force for Status Bit 8
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_8_BF_DEF (0x00000000)

///< Force for Status Bit 9
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_9_BF_DEF (0x00000000)

///< Force for Status Bit 10
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_10_BF_DEF (0x00000000)

///< Force for Status Bit 11
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_11_BF_DEF (0x00000000)

///< Force for Status Bit 12
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_12_BF_DEF (0x00000000)

///< Force for Status Bit 13
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_13_BF_DEF (0x00000000)

///< Force for Status Bit 14
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_14_BF_OFF (14)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_14_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_14_BF_MSK (0x00004000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_14_BF_DEF (0x00000000)

///< Force for Status Bit 15
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_15_BF_OFF (15)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_15_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_15_BF_MSK (0x00008000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_15_BF_DEF (0x00000000)

///< Force for Status Bit 16
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_16_BF_OFF (16)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_16_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_16_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_16_BF_DEF (0x00000000)

///< Force for Status Bit 17
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_17_BF_OFF (17)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_17_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_17_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_17_BF_DEF (0x00000000)

///< Force for Status Bit 18
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_18_BF_OFF (18)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_18_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_18_BF_MSK (0x00040000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_18_BF_DEF (0x00000000)

///< Force for Status Bit 19
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_19_BF_OFF (19)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_19_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_19_BF_MSK (0x00080000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_19_BF_DEF (0x00000000)

///< Force for Status Bit 20
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_20_BF_OFF (20)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_20_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_20_BF_MSK (0x00100000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_20_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED21_BF_OFF (21)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED21_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED21_BF_MSK (0x00200000)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED21_BF_DEF (0x00000000)

///< Force for Status Bit 22
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_22_BF_OFF (22)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_22_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_22_BF_MSK (0x00400000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_22_BF_DEF (0x00000000)

///< Force for Status Bit 23
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_23_BF_OFF (23)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_23_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_23_BF_MSK (0x00800000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_23_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED24_BF_OFF (24)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED24_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED24_BF_MSK (0x01000000)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED24_BF_DEF (0x00000000)

///< Force for Status Bit 25
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_25_BF_OFF (25)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_25_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_25_BF_MSK (0x02000000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_25_BF_DEF (0x00000000)

///< Force for Status Bit 26
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_26_BF_OFF (26)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_26_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_26_BF_MSK (0x04000000)
#define PCIE_CC_GPREG_INTR0_FORCE_INTR_FORCE_26_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED27_BF_OFF (27)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED27_BF_WID ( 5)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED27_BF_MSK (0xF8000000)
#define PCIE_CC_GPREG_INTR0_FORCE_RESERVED27_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR1_STATUS register description at address offset 0x420
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr1_status
  * CC Interrupt Status 1
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_AER_RC_ERR_INT : 1;
    ///< Asserted when reported error causes a bit to be set in the Root Error
    ///< Status register
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_PME_INT : 1;
    ///< The core asserts cfg_pme_int
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t HP_INT : 1;
    ///< Hot-Plug interrupts are enabled in the Slot Control register. Any
    ///< bit in the Slot Status register is equal to 1, and the associated
    ///< event notification is enabled in the Slot Control register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RESERVED4 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_LINK_EQ_REQ_INT : 1;
    ///< The Link Equalization Request bit in the Link Status 2 Register has
    ///< been set
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PM_LINKST_IN_L2 : 1;
    ///< In L2 mode
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t CFG_X_ERR_STS_OR : 1;
    ///< Oring of Internal Error Indications
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t CFG_2ND_RESET : 1;
    ///< Hot Reset occured
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t EDMA_INT : 4;
    ///< DMA Interrupt per Channel
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t MSI_CTRL_INT : 1;
    ///< DSP (RC) AXI MSI Interrupt Detected.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t RESERVED14 : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="0x0"
    uint32_t MEM_ECC_SBE : 1;
    ///< SBE Error - ORing of [27:8],[6],[2:0] SBE errors from pcie_axi_ecc_sbe
    ///< register.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t MEM_ECC_DBE : 1;
    ///< DBE Error - ORing of [27:8],[6],[2:0] DBE errors from pcie_axi_ecc_dbe
    ///< register.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t MEM_ECC_SBE_CNT_OVFL : 1;
    ///< SBE Counter Overflow Error - ORing of [27:8],[6],[2:0] SBE Counter
    ///< overflow from pcie_axi_ecc_cnt_ovfl register.
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr1_stat_reg_t;

#define PCIE_CC_GPREG_INTR1_STAT_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR1_STAT_RD_MASK (0x0007ffffU)
#define PCIE_CC_GPREG_INTR1_STAT_WR_MASK (0x00000000U)


///< Reserved
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED0_BF_DEF (0x00000000)

///< Asserted when reported error causes a bit to be set in the Root Error
///< Status register
#define PCIE_CC_GPREG_INTR1_STAT_CFG_AER_RC_ERR_INT_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_AER_RC_ERR_INT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_AER_RC_ERR_INT_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_AER_RC_ERR_INT_BF_DEF (0x00000000)

///< The core asserts cfg_pme_int
#define PCIE_CC_GPREG_INTR1_STAT_CFG_PME_INT_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_PME_INT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_PME_INT_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_PME_INT_BF_DEF (0x00000000)

///< Hot-Plug interrupts are enabled in the Slot Control register. Any
///< bit in the Slot Status register is equal to 1, and the associated
///< event notification is enabled in the Slot Control register.
#define PCIE_CC_GPREG_INTR1_STAT_HP_INT_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR1_STAT_HP_INT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_HP_INT_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR1_STAT_HP_INT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED4_BF_DEF (0x00000000)

///< The Link Equalization Request bit in the Link Status 2 Register has
///< been set
#define PCIE_CC_GPREG_INTR1_STAT_CFG_LINK_EQ_REQ_INT_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_LINK_EQ_REQ_INT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_LINK_EQ_REQ_INT_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_LINK_EQ_REQ_INT_BF_DEF (0x00000000)

///< In L2 mode
#define PCIE_CC_GPREG_INTR1_STAT_PM_LINKST_IN_L2_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR1_STAT_PM_LINKST_IN_L2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_PM_LINKST_IN_L2_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR1_STAT_PM_LINKST_IN_L2_BF_DEF (0x00000000)

///< Oring of Internal Error Indications
#define PCIE_CC_GPREG_INTR1_STAT_CFG_X_ERR_STS_OR_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_X_ERR_STS_OR_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_X_ERR_STS_OR_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_X_ERR_STS_OR_BF_DEF (0x00000000)

///< Hot Reset occured
#define PCIE_CC_GPREG_INTR1_STAT_CFG_2ND_RST_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_2ND_RST_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_2ND_RST_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR1_STAT_CFG_2ND_RST_BF_DEF (0x00000000)

///< DMA Interrupt per Channel
#define PCIE_CC_GPREG_INTR1_STAT_EDMA_INT_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR1_STAT_EDMA_INT_BF_WID ( 4)
#define PCIE_CC_GPREG_INTR1_STAT_EDMA_INT_BF_MSK (0x00001E00)
#define PCIE_CC_GPREG_INTR1_STAT_EDMA_INT_BF_DEF (0x00000000)

///< DSP (RC) AXI MSI Interrupt Detected.
#define PCIE_CC_GPREG_INTR1_STAT_MSI_CTRL_INT_BF_OFF (13)
#define PCIE_CC_GPREG_INTR1_STAT_MSI_CTRL_INT_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_MSI_CTRL_INT_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR1_STAT_MSI_CTRL_INT_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED14_BF_OFF (14)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED14_BF_WID ( 2)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED14_BF_MSK (0x0000C000)
#define PCIE_CC_GPREG_INTR1_STAT_RESERVED14_BF_DEF (0x00000000)

///< SBE Error - ORing of [27:8],[6],[2:0] SBE errors from pcie_axi_ecc_sbe
///< register.
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_BF_OFF (16)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_BF_MSK (0x00010000)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_BF_DEF (0x00000000)

///< DBE Error - ORing of [27:8],[6],[2:0] DBE errors from pcie_axi_ecc_dbe
///< register.
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_DBE_BF_OFF (17)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_DBE_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_DBE_BF_MSK (0x00020000)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_DBE_BF_DEF (0x00000000)

///< SBE Counter Overflow Error - ORing of [27:8],[6],[2:0] SBE Counter
///< overflow from pcie_axi_ecc_cnt_ovfl register.
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_CNT_OVFL_BF_OFF (18)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_CNT_OVFL_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_CNT_OVFL_BF_MSK (0x00040000)
#define PCIE_CC_GPREG_INTR1_STAT_MEM_ECC_SBE_CNT_OVFL_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR1_HIGH_EN register description at address offset 0x424
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr1_high_en
  * CC Interrupt High EN 1
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_1 : 1;
    ///< High Interrupt Enable for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_2 : 1;
    ///< High Interrupt Enable for Status Bit 2
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_3 : 1;
    ///< High Interrupt Enable for Status Bit 3
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RESERVED4 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_5 : 1;
    ///< High Interrupt Enable for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_6 : 1;
    ///< High Interrupt Enable for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_7 : 1;
    ///< High Interrupt Enable for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_8 : 1;
    ///< High Interrupt Enable for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_9 : 1;
    ///< High Interrupt Enable for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_10 : 1;
    ///< High Interrupt Enable for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_11 : 1;
    ///< High Interrupt Enable for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_12 : 1;
    ///< High Interrupt Enable for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_HIGH_EN_13 : 1;
    ///< High Interrupt Enable for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t INTR_HIGH_EN_16T18 : 3;
    ///< High Interrupt Enable for Status Bit 16 to 18
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr1_high_en_reg_t;

#define PCIE_CC_GPREG_INTR1_HIGH_EN_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RD_MASK (0x00073fffU)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_WR_MASK (0x00073feeU)


///< Reserved
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED0_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 1
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_1_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 2
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_2_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 3
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_3_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_RESERVED4_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 5
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_5_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 6
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_6_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 7
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_7_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 8
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_8_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 9
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_9_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 10
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_10_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 11
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_11_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 12
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_12_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 13
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_13_BF_DEF (0x00000000)

///< High Interrupt Enable for Status Bit 16 to 18
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_16T18_BF_OFF (16)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_16T18_BF_WID ( 3)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_16T18_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_INTR_HIGH_EN_16T18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR1_LOW_EN register description at address offset 0x428
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr1_low_en
  * CC Interrupt Low EN 1
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_LOW_EN_1 : 1;
    ///< Low Interrupt Enable for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INTR_LOW_EN_2 : 1;
    ///< Low Interrupt Enable for Status Bit 2
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INTR_LOW_EN_3 : 1;
    ///< Low Interrupt Enable for Status Bit 3
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RESERVED4 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_LOW_EN_5 : 1;
    ///< Low Interrupt Enable for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_LOW_EN_6 : 1;
    ///< Low Interrupt Enable for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_LOW_EN_7 : 1;
    ///< Low Interrupt Enable for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_LOW_EN_8 : 1;
    ///< Low Interrupt Enable for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_LOW_EN_9 : 1;
    ///< Low Interrupt Enable for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_LOW_EN_10 : 1;
    ///< Low Interrupt Enable for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_LOW_EN_11 : 1;
    ///< Low Interrupt Enable for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_LOW_EN_12 : 1;
    ///< Low Interrupt Enable for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_LOW_EN_13 : 1;
    ///< Low Interrupt Enable for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t INTR_LOW_EN_16T18 : 3;
    ///< Low Interrupt Enable for Status Bit 16 to 18
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr1_low_en_reg_t;

#define PCIE_CC_GPREG_INTR1_LOW_EN_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RD_MASK (0x00073fffU)
#define PCIE_CC_GPREG_INTR1_LOW_EN_WR_MASK (0x00073feeU)


///< Reserved
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED0_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 1
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_1_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 2
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_2_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 3
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_3_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR1_LOW_EN_RESERVED4_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 5
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_5_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 6
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_6_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 7
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_7_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 8
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_8_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 9
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_9_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 10
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_10_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 11
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_11_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 12
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_12_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 13
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_13_BF_DEF (0x00000000)

///< Low Interrupt Enable for Status Bit 16 to 18
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_16T18_BF_OFF (16)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_16T18_BF_WID ( 3)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_16T18_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_INTR1_LOW_EN_INTR_LOW_EN_16T18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR1_CLEAR register description at address offset 0x42c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr1_clear
  * CC Interrupt Clear 1
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_CLEAR_1 : 1;
    ///< Clear for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INTR_CLEAR_2 : 1;
    ///< Clear for Status Bit 2
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INTR_CLEAR_3 : 1;
    ///< Clear for Status Bit 3
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RESERVED4 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_CLEAR_5 : 1;
    ///< Clear for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_CLEAR_6 : 1;
    ///< Clear for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_CLEAR_7 : 1;
    ///< Clear for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_CLEAR_8 : 1;
    ///< Clear for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_CLEAR_9 : 1;
    ///< Clear for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_CLEAR_10 : 1;
    ///< Clear for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_CLEAR_11 : 1;
    ///< Clear for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_CLEAR_12 : 1;
    ///< Clear for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_CLEAR_13 : 1;
    ///< Clear for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t INTR_CLEAR_EN_16T18 : 3;
    ///< Clear for Status Bit 16 to 18
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr1_clr_reg_t;

#define PCIE_CC_GPREG_INTR1_CLR_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR1_CLR_RD_MASK (0x00073fffU)
#define PCIE_CC_GPREG_INTR1_CLR_WR_MASK (0x00073feeU)


///< Reserved
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED0_BF_DEF (0x00000000)

///< Clear for Status Bit 1
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_1_BF_DEF (0x00000000)

///< Clear for Status Bit 2
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_2_BF_DEF (0x00000000)

///< Clear for Status Bit 3
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_3_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR1_CLR_RESERVED4_BF_DEF (0x00000000)

///< Clear for Status Bit 5
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_5_BF_DEF (0x00000000)

///< Clear for Status Bit 6
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_6_BF_DEF (0x00000000)

///< Clear for Status Bit 7
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_7_BF_DEF (0x00000000)

///< Clear for Status Bit 8
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_8_BF_DEF (0x00000000)

///< Clear for Status Bit 9
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_9_BF_DEF (0x00000000)

///< Clear for Status Bit 10
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_10_BF_DEF (0x00000000)

///< Clear for Status Bit 11
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_11_BF_DEF (0x00000000)

///< Clear for Status Bit 12
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_12_BF_DEF (0x00000000)

///< Clear for Status Bit 13
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_13_BF_DEF (0x00000000)

///< Clear for Status Bit 16 to 18
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_EN_16T18_BF_OFF (16)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_EN_16T18_BF_WID ( 3)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_EN_16T18_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_INTR1_CLR_INTR_CLR_EN_16T18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR1_FORCE register description at address offset 0x430
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr1_force
  * CC Interrupt Force 1
  */

typedef union {
  struct {
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t INTR_FORCE_1 : 1;
    ///< Force for Status Bit 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INTR_FORCE_2 : 1;
    ///< Force for Status Bit 2
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INTR_FORCE_3 : 1;
    ///< Force for Status Bit 3
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RESERVED4 : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t INTR_FORCE_5 : 1;
    ///< Force for Status Bit 5
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INTR_FORCE_6 : 1;
    ///< Force for Status Bit 6
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INTR_FORCE_7 : 1;
    ///< Force for Status Bit 7
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INTR_FORCE_8 : 1;
    ///< Force for Status Bit 8
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INTR_FORCE_9 : 1;
    ///< Force for Status Bit 9
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t INTR_FORCE_10 : 1;
    ///< Force for Status Bit 10
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t INTR_FORCE_11 : 1;
    ///< Force for Status Bit 11
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INTR_FORCE_12 : 1;
    ///< Force for Status Bit 12
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t INTR_FORCE_13 : 1;
    ///< Force for Status Bit 13
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t INTR_FORCE_16T18 : 3;
    ///< Force for Status Bit 16 to 18
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr1_force_reg_t;

#define PCIE_CC_GPREG_INTR1_FORCE_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR1_FORCE_RD_MASK (0x00073fffU)
#define PCIE_CC_GPREG_INTR1_FORCE_WR_MASK (0x00073feeU)


///< Reserved
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED0_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED0_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED0_BF_MSK (0x00000001)
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED0_BF_DEF (0x00000000)

///< Force for Status Bit 1
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_1_BF_OFF ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_1_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_1_BF_MSK (0x00000002)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_1_BF_DEF (0x00000000)

///< Force for Status Bit 2
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_2_BF_OFF ( 2)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_2_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_2_BF_MSK (0x00000004)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_2_BF_DEF (0x00000000)

///< Force for Status Bit 3
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_3_BF_OFF ( 3)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_3_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_3_BF_MSK (0x00000008)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_3_BF_DEF (0x00000000)

///< Reserved
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED4_BF_OFF ( 4)
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED4_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED4_BF_MSK (0x00000010)
#define PCIE_CC_GPREG_INTR1_FORCE_RESERVED4_BF_DEF (0x00000000)

///< Force for Status Bit 5
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_5_BF_OFF ( 5)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_5_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_5_BF_MSK (0x00000020)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_5_BF_DEF (0x00000000)

///< Force for Status Bit 6
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_6_BF_OFF ( 6)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_6_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_6_BF_MSK (0x00000040)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_6_BF_DEF (0x00000000)

///< Force for Status Bit 7
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_7_BF_OFF ( 7)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_7_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_7_BF_MSK (0x00000080)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_7_BF_DEF (0x00000000)

///< Force for Status Bit 8
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_8_BF_OFF ( 8)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_8_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_8_BF_MSK (0x00000100)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_8_BF_DEF (0x00000000)

///< Force for Status Bit 9
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_9_BF_OFF ( 9)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_9_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_9_BF_MSK (0x00000200)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_9_BF_DEF (0x00000000)

///< Force for Status Bit 10
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_10_BF_OFF (10)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_10_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_10_BF_MSK (0x00000400)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_10_BF_DEF (0x00000000)

///< Force for Status Bit 11
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_11_BF_OFF (11)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_11_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_11_BF_MSK (0x00000800)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_11_BF_DEF (0x00000000)

///< Force for Status Bit 12
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_12_BF_OFF (12)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_12_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_12_BF_MSK (0x00001000)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_12_BF_DEF (0x00000000)

///< Force for Status Bit 13
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_13_BF_OFF (13)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_13_BF_WID ( 1)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_13_BF_MSK (0x00002000)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_13_BF_DEF (0x00000000)

///< Force for Status Bit 16 to 18
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_16T18_BF_OFF (16)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_16T18_BF_WID ( 3)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_16T18_BF_MSK (0x00070000)
#define PCIE_CC_GPREG_INTR1_FORCE_INTR_FORCE_16T18_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR2_STATUS_S register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr2_status_S
  * CC Interrupt Status 2
  */

typedef union {
  struct {
    uint32_t WIRE_ACCESS_STATUS : 12;
    ///< Wire Access Selected Region
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr2_stat_s_reg_t;

#define PCIE_CC_GPREG_INTR2_STAT_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR2_STAT_S_RD_MASK (0x00000fffU)
#define PCIE_CC_GPREG_INTR2_STAT_S_WR_MASK (0x00000000U)


///< Wire Access Selected Region
#define PCIE_CC_GPREG_INTR2_STAT_S_WIRE_ACCESS_STAT_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR2_STAT_S_WIRE_ACCESS_STAT_BF_WID (12)
#define PCIE_CC_GPREG_INTR2_STAT_S_WIRE_ACCESS_STAT_BF_MSK (0x00000FFF)
#define PCIE_CC_GPREG_INTR2_STAT_S_WIRE_ACCESS_STAT_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR2_HIGH_EN_S register description at address offset 0x444
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr2_high_en_S
  * CC Interrupt High EN 2
  */

typedef union {
  struct {
    uint32_t WIRE_ACCESS_STATUS_HIGH_EN : 12;
    ///< Wire Access Selected Region High enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr2_high_en_s_reg_t;

#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_RD_MASK (0x00000fffU)
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_WR_MASK (0x00000fffU)


///< Wire Access Selected Region High enable
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_WIRE_ACCESS_STAT_HIGH_EN_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_WIRE_ACCESS_STAT_HIGH_EN_BF_WID (12)
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_WIRE_ACCESS_STAT_HIGH_EN_BF_MSK (0x00000FFF)
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_WIRE_ACCESS_STAT_HIGH_EN_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR2_LOW_EN_S register description at address offset 0x448
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr2_low_en_S
  * CC Interrupt Low EN 2
  */

typedef union {
  struct {
    uint32_t WIRE_ACCESS_STATUS_LOW_EN : 12;
    ///< Wire Access Selected Region Low EN
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr2_low_en_s_reg_t;

#define PCIE_CC_GPREG_INTR2_LOW_EN_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_RD_MASK (0x00000fffU)
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_WR_MASK (0x00000fffU)


///< Wire Access Selected Region Low EN
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_WIRE_ACCESS_STAT_LOW_EN_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_WIRE_ACCESS_STAT_LOW_EN_BF_WID (12)
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_WIRE_ACCESS_STAT_LOW_EN_BF_MSK (0x00000FFF)
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_WIRE_ACCESS_STAT_LOW_EN_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR2_CLEAR_S register description at address offset 0x44c
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr2_clear_S
  * CC Interrupt Clear 2
  */

typedef union {
  struct {
    uint32_t WIRE_ACCESS_STATUS_CLR : 12;
    ///< Wire Access Selected Region Clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr2_clr_s_reg_t;

#define PCIE_CC_GPREG_INTR2_CLR_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR2_CLR_S_RD_MASK (0x00000fffU)
#define PCIE_CC_GPREG_INTR2_CLR_S_WR_MASK (0x00000fffU)


///< Wire Access Selected Region Clear
#define PCIE_CC_GPREG_INTR2_CLR_S_WIRE_ACCESS_STAT_CLR_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR2_CLR_S_WIRE_ACCESS_STAT_CLR_BF_WID (12)
#define PCIE_CC_GPREG_INTR2_CLR_S_WIRE_ACCESS_STAT_CLR_BF_MSK (0x00000FFF)
#define PCIE_CC_GPREG_INTR2_CLR_S_WIRE_ACCESS_STAT_CLR_BF_DEF (0x00000000)


/** @brief PCIE_CC_GPREG_MAP_MEM_PCIE_CC_GPREG_MAP_PCIE_CC_INTR2_FORCE_S register description at address offset 0x450
  *
  * Register default value:        0x00000000
  * Register full path in IP: pcie_cc_gpreg_map_MEM/pcie_cc_gpreg_map/pcie_cc_intr2_force_S
  * CC Interrupt Force 2
  */

typedef union {
  struct {
    uint32_t WIRE_ACCESS_STATUS_FRC : 12;
    ///< Wire Access Selected Region Force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pcie_cc_gpreg_intr2_force_s_reg_t;

#define PCIE_CC_GPREG_INTR2_FORCE_S_DEFAULT (0x00000000U)
#define PCIE_CC_GPREG_INTR2_FORCE_S_RD_MASK (0x00000fffU)
#define PCIE_CC_GPREG_INTR2_FORCE_S_WR_MASK (0x00000fffU)


///< Wire Access Selected Region Force
#define PCIE_CC_GPREG_INTR2_FORCE_S_WIRE_ACCESS_STAT_FRC_BF_OFF ( 0)
#define PCIE_CC_GPREG_INTR2_FORCE_S_WIRE_ACCESS_STAT_FRC_BF_WID (12)
#define PCIE_CC_GPREG_INTR2_FORCE_S_WIRE_ACCESS_STAT_FRC_BF_MSK (0x00000FFF)
#define PCIE_CC_GPREG_INTR2_FORCE_S_WIRE_ACCESS_STAT_FRC_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PCIE_CC_GPREG_SCRATCH0_REG ((pcie_cc_gpreg_scratch0_reg_t*) PCIE_CC_GPREG_SCRATCH0_ADR)
#define PCIE_CC_GPREG_SCRATCH1_REG ((pcie_cc_gpreg_scratch1_reg_t*) PCIE_CC_GPREG_SCRATCH1_ADR)
#define PCIE_CC_GPREG_BRDG_REG ((pcie_cc_gpreg_brdg_reg_t*) PCIE_CC_GPREG_BRDG_ADR)
#define PCIE_CC_GPREG_CTL_0_S_REG ((pcie_cc_gpreg_ctl_0_s_reg_t*) PCIE_CC_GPREG_CTL_0_S_ADR)
#define PCIE_CC_GPREG_CTL_1_REG ((pcie_cc_gpreg_ctl_1_reg_t*) PCIE_CC_GPREG_CTL_1_ADR)
#define PCIE_CC_GPREG_CTL_2_REG ((pcie_cc_gpreg_ctl_2_reg_t*) PCIE_CC_GPREG_CTL_2_ADR)
#define PCIE_CC_GPREG_CTL_3_REG ((pcie_cc_gpreg_ctl_3_reg_t*) PCIE_CC_GPREG_CTL_3_ADR)
#define PCIE_CC_GPREG_CTL_4_REG ((pcie_cc_gpreg_ctl_4_reg_t*) PCIE_CC_GPREG_CTL_4_ADR)
#define PCIE_CC_GPREG_CTL_5_REG ((pcie_cc_gpreg_ctl_5_reg_t*) PCIE_CC_GPREG_CTL_5_ADR)
#define PCIE_CC_GPREG_CTL_6_S_REG ((pcie_cc_gpreg_ctl_6_s_reg_t*) PCIE_CC_GPREG_CTL_6_S_ADR)
#define PCIE_CC_GPREG_CTL_7_REG ((pcie_cc_gpreg_ctl_7_reg_t*) PCIE_CC_GPREG_CTL_7_ADR)
#define PCIE_CC_GPREG_CTL_8_REG ((pcie_cc_gpreg_ctl_8_reg_t*) PCIE_CC_GPREG_CTL_8_ADR)
#define PCIE_CC_GPREG_ECC_FORCE_TYPE_S_REG ((pcie_cc_gpreg_ecc_force_type_s_reg_t*) PCIE_CC_GPREG_ECC_FORCE_TYPE_S_ADR)
#define PCIE_CC_GPREG_ECC_FORCE_ERR_S_REG ((pcie_cc_gpreg_ecc_force_err_s_reg_t*) PCIE_CC_GPREG_ECC_FORCE_ERR_S_ADR)
#define PCIE_CC_GPREG_ECC_ERR_CLR_S_REG ((pcie_cc_gpreg_ecc_err_clr_s_reg_t*) PCIE_CC_GPREG_ECC_ERR_CLR_S_ADR)
#define PCIE_CC_GPREG_ECC_CNT_CLR_S_REG ((pcie_cc_gpreg_ecc_cnt_clr_s_reg_t*) PCIE_CC_GPREG_ECC_CNT_CLR_S_ADR)
#define PCIE_CC_GPREG_ECC_CHK_DIS_S_REG ((pcie_cc_gpreg_ecc_chk_dis_s_reg_t*) PCIE_CC_GPREG_ECC_CHK_DIS_S_ADR)
#define PCIE_CC_GPREG_ECC_GEN_DIS_S_REG ((pcie_cc_gpreg_ecc_gen_dis_s_reg_t*) PCIE_CC_GPREG_ECC_GEN_DIS_S_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S0_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S0_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S1_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S1_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S2_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S2_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S3_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S3_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S4_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S4_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S5_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S5_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S6_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S6_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S7_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S7_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S8_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S8_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S9_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S9_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S10_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S10_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S11_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S11_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S12_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S12_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S13_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S13_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S14_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S14_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S15_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S15_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S16_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S16_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S17_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S17_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S18_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S18_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S19_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S19_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S20_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S20_ADR)
#define PCIE_CC_GPREG_WIRE_SW_SHDW_S21_REG ((pcie_cc_gpreg_wire_sw_shdw_s_reg_t*) PCIE_CC_GPREG_WIRE_SW_SHDW_S21_ADR)
#define PCIE_CC_GPREG_RO_0_REG ((pcie_cc_gpreg_ro_0_reg_t*) PCIE_CC_GPREG_RO_0_ADR)
#define PCIE_CC_GPREG_RO_3_REG ((pcie_cc_gpreg_ro_3_reg_t*) PCIE_CC_GPREG_RO_3_ADR)
#define PCIE_CC_GPREG_RO_4_REG ((pcie_cc_gpreg_ro_4_reg_t*) PCIE_CC_GPREG_RO_4_ADR)
#define PCIE_CC_GPREG_RO_5_REG ((pcie_cc_gpreg_ro_5_reg_t*) PCIE_CC_GPREG_RO_5_ADR)
#define PCIE_CC_GPREG_RO_6_REG ((pcie_cc_gpreg_ro_6_reg_t*) PCIE_CC_GPREG_RO_6_ADR)
#define PCIE_CC_GPREG_RO_8_REG ((pcie_cc_gpreg_ro_8_reg_t*) PCIE_CC_GPREG_RO_8_ADR)
#define PCIE_CC_GPREG_RO_10_REG ((pcie_cc_gpreg_ro_10_reg_t*) PCIE_CC_GPREG_RO_10_ADR)
#define PCIE_CC_GPREG_RO_11_REG ((pcie_cc_gpreg_ro_11_reg_t*) PCIE_CC_GPREG_RO_11_ADR)
#define PCIE_CC_GPREG_RO_12_REG ((pcie_cc_gpreg_ro_12_reg_t*) PCIE_CC_GPREG_RO_12_ADR)
#define PCIE_CC_GPREG_RO_13_REG ((pcie_cc_gpreg_ro_13_reg_t*) PCIE_CC_GPREG_RO_13_ADR)
#define PCIE_CC_GPREG_RO_17_REG ((pcie_cc_gpreg_ro_17_reg_t*) PCIE_CC_GPREG_RO_17_ADR)
#define PCIE_CC_GPREG_RO_18_REG ((pcie_cc_gpreg_ro_18_reg_t*) PCIE_CC_GPREG_RO_18_ADR)
#define PCIE_CC_GPREG_RO_19_REG ((pcie_cc_gpreg_ro_19_reg_t*) PCIE_CC_GPREG_RO_19_ADR)
#define PCIE_CC_GPREG_RO_20_REG ((pcie_cc_gpreg_ro_20_reg_t*) PCIE_CC_GPREG_RO_20_ADR)
#define PCIE_CC_GPREG_DOE_00_S_REG ((pcie_cc_gpreg_doe_00_s_reg_t*) PCIE_CC_GPREG_DOE_00_S_ADR)
#define PCIE_CC_GPREG_DOE_01_S_REG ((pcie_cc_gpreg_doe_01_s_reg_t*) PCIE_CC_GPREG_DOE_01_S_ADR)
#define PCIE_CC_GPREG_DOE_02_S_REG ((pcie_cc_gpreg_doe_02_s_reg_t*) PCIE_CC_GPREG_DOE_02_S_ADR)
#define PCIE_CC_GPREG_DOE_03_S_REG ((pcie_cc_gpreg_doe_03_s_reg_t*) PCIE_CC_GPREG_DOE_03_S_ADR)
#define PCIE_CC_GPREG_DOE_04_S_REG ((pcie_cc_gpreg_doe_04_s_reg_t*) PCIE_CC_GPREG_DOE_04_S_ADR)
#define PCIE_CC_GPREG_DOE_05_S_REG ((pcie_cc_gpreg_doe_05_s_reg_t*) PCIE_CC_GPREG_DOE_05_S_ADR)
#define PCIE_CC_GPREG_DOE_06_S_REG ((pcie_cc_gpreg_doe_06_s_reg_t*) PCIE_CC_GPREG_DOE_06_S_ADR)
#define PCIE_CC_GPREG_DOE_07_S_REG ((pcie_cc_gpreg_doe_07_s_reg_t*) PCIE_CC_GPREG_DOE_07_S_ADR)
#define PCIE_CC_GPREG_DOE_08_S_REG ((pcie_cc_gpreg_doe_08_s_reg_t*) PCIE_CC_GPREG_DOE_08_S_ADR)
#define PCIE_CC_GPREG_DOE_09_S_REG ((pcie_cc_gpreg_doe_09_s_reg_t*) PCIE_CC_GPREG_DOE_09_S_ADR)
#define PCIE_CC_GPREG_DOE_10_S_REG ((pcie_cc_gpreg_doe_10_s_reg_t*) PCIE_CC_GPREG_DOE_10_S_ADR)
#define PCIE_CC_GPREG_DOE_11_S_REG ((pcie_cc_gpreg_doe_11_s_reg_t*) PCIE_CC_GPREG_DOE_11_S_ADR)
#define PCIE_CC_GPREG_DOE_12_S_REG ((pcie_cc_gpreg_doe_12_s_reg_t*) PCIE_CC_GPREG_DOE_12_S_ADR)
#define PCIE_CC_GPREG_DOE_13_S_REG ((pcie_cc_gpreg_doe_13_s_reg_t*) PCIE_CC_GPREG_DOE_13_S_ADR)
#define PCIE_CC_GPREG_DOE_14_S_REG ((pcie_cc_gpreg_doe_14_s_reg_t*) PCIE_CC_GPREG_DOE_14_S_ADR)
#define PCIE_CC_GPREG_DOE_15_S_REG ((pcie_cc_gpreg_doe_15_s_reg_t*) PCIE_CC_GPREG_DOE_15_S_ADR)
#define PCIE_CC_GPREG_DOE_16_S_REG ((pcie_cc_gpreg_doe_16_s_reg_t*) PCIE_CC_GPREG_DOE_16_S_ADR)
#define PCIE_CC_GPREG_DOE_17_S_REG ((pcie_cc_gpreg_doe_17_s_reg_t*) PCIE_CC_GPREG_DOE_17_S_ADR)
#define PCIE_CC_GPREG_DOE_18_S_REG ((pcie_cc_gpreg_doe_18_s_reg_t*) PCIE_CC_GPREG_DOE_18_S_ADR)
#define PCIE_CC_GPREG_DOE_19_S_REG ((pcie_cc_gpreg_doe_19_s_reg_t*) PCIE_CC_GPREG_DOE_19_S_ADR)
#define PCIE_CC_GPREG_DOE_INTR_STAT_S_REG ((pcie_cc_gpreg_doe_intr_stat_s_reg_t*) PCIE_CC_GPREG_DOE_INTR_STAT_S_ADR)
#define PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_REG ((pcie_cc_gpreg_doe_intr_high_en_s_reg_t*) PCIE_CC_GPREG_DOE_INTR_HIGH_EN_S_ADR)
#define PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_REG ((pcie_cc_gpreg_doe_intr_low_en_s_reg_t*) PCIE_CC_GPREG_DOE_INTR_LOW_EN_S_ADR)
#define PCIE_CC_GPREG_DOE_INTR_CLR_S_REG ((pcie_cc_gpreg_doe_intr_clr_s_reg_t*) PCIE_CC_GPREG_DOE_INTR_CLR_S_ADR)
#define PCIE_CC_GPREG_DOE_INTR_FORCE_S_REG ((pcie_cc_gpreg_doe_intr_force_s_reg_t*) PCIE_CC_GPREG_DOE_INTR_FORCE_S_ADR)
#define PCIE_CC_GPREG_WIRE_S_REG ((pcie_cc_gpreg_wire_s_reg_t*) PCIE_CC_GPREG_WIRE_S_ADR)
#define PCIE_CC_GPREG_LTSSM_S_REG ((pcie_cc_gpreg_ltssm_s_reg_t*) PCIE_CC_GPREG_LTSSM_S_ADR)
#define PCIE_CC_GPREG_ECC_SBE_REG ((pcie_cc_gpreg_ecc_sbe_reg_t*) PCIE_CC_GPREG_ECC_SBE_ADR)
#define PCIE_CC_GPREG_ECC_DBE_REG ((pcie_cc_gpreg_ecc_dbe_reg_t*) PCIE_CC_GPREG_ECC_DBE_ADR)
#define PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_REG ((pcie_cc_gpreg_ecc_sbe_cnt_ovfl_reg_t*) PCIE_CC_GPREG_ECC_SBE_CNT_OVFL_ADR)
#define PCIE_CC_GPREG_ECC_SBE_CNT_00_REG ((pcie_cc_gpreg_ecc_sbe_cnt_0_reg_t*) PCIE_CC_GPREG_ECC_SBE_CNT_00_ADR)
#define PCIE_CC_GPREG_ECC_SBE_CNT_01_REG ((pcie_cc_gpreg_ecc_sbe_cnt_0_reg_t*) PCIE_CC_GPREG_ECC_SBE_CNT_01_ADR)
#define PCIE_CC_GPREG_ECC_SBE_CNT_02_REG ((pcie_cc_gpreg_ecc_sbe_cnt_0_reg_t*) PCIE_CC_GPREG_ECC_SBE_CNT_02_ADR)
#define PCIE_CC_GPREG_ECC_SBE_CNT_03_REG ((pcie_cc_gpreg_ecc_sbe_cnt_0_reg_t*) PCIE_CC_GPREG_ECC_SBE_CNT_03_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_00_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_00_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_01_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_01_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_02_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_02_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_03_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_03_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_04_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_04_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_05_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_05_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_06_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_06_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_07_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_07_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_08_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_08_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_09_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_09_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_010_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_010_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_011_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_011_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_012_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_012_ADR)
#define PCIE_CC_GPREG_ECC_ERR_ADDR_013_REG ((pcie_cc_gpreg_ecc_err_addr_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_ADDR_013_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_00_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_00_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_01_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_01_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_02_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_02_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_03_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_03_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_04_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_04_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_05_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_05_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_06_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_06_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_07_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_07_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_08_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_08_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_09_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_09_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_010_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_010_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_011_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_011_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_012_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_012_ADR)
#define PCIE_CC_GPREG_ECC_ERR_SYNDROME_013_REG ((pcie_cc_gpreg_ecc_err_syndrome_0_reg_t*) PCIE_CC_GPREG_ECC_ERR_SYNDROME_013_ADR)
#define PCIE_CC_GPREG_INTR0_STAT_REG ((pcie_cc_gpreg_intr0_stat_reg_t*) PCIE_CC_GPREG_INTR0_STAT_ADR)
#define PCIE_CC_GPREG_INTR0_HIGH_EN_REG ((pcie_cc_gpreg_intr0_high_en_reg_t*) PCIE_CC_GPREG_INTR0_HIGH_EN_ADR)
#define PCIE_CC_GPREG_INTR0_LOW_EN_REG ((pcie_cc_gpreg_intr0_low_en_reg_t*) PCIE_CC_GPREG_INTR0_LOW_EN_ADR)
#define PCIE_CC_GPREG_INTR0_CLR_REG ((pcie_cc_gpreg_intr0_clr_reg_t*) PCIE_CC_GPREG_INTR0_CLR_ADR)
#define PCIE_CC_GPREG_INTR0_FORCE_REG ((pcie_cc_gpreg_intr0_force_reg_t*) PCIE_CC_GPREG_INTR0_FORCE_ADR)
#define PCIE_CC_GPREG_INTR1_STAT_REG ((pcie_cc_gpreg_intr1_stat_reg_t*) PCIE_CC_GPREG_INTR1_STAT_ADR)
#define PCIE_CC_GPREG_INTR1_HIGH_EN_REG ((pcie_cc_gpreg_intr1_high_en_reg_t*) PCIE_CC_GPREG_INTR1_HIGH_EN_ADR)
#define PCIE_CC_GPREG_INTR1_LOW_EN_REG ((pcie_cc_gpreg_intr1_low_en_reg_t*) PCIE_CC_GPREG_INTR1_LOW_EN_ADR)
#define PCIE_CC_GPREG_INTR1_CLR_REG ((pcie_cc_gpreg_intr1_clr_reg_t*) PCIE_CC_GPREG_INTR1_CLR_ADR)
#define PCIE_CC_GPREG_INTR1_FORCE_REG ((pcie_cc_gpreg_intr1_force_reg_t*) PCIE_CC_GPREG_INTR1_FORCE_ADR)
#define PCIE_CC_GPREG_INTR2_STAT_S_REG ((pcie_cc_gpreg_intr2_stat_s_reg_t*) PCIE_CC_GPREG_INTR2_STAT_S_ADR)
#define PCIE_CC_GPREG_INTR2_HIGH_EN_S_REG ((pcie_cc_gpreg_intr2_high_en_s_reg_t*) PCIE_CC_GPREG_INTR2_HIGH_EN_S_ADR)
#define PCIE_CC_GPREG_INTR2_LOW_EN_S_REG ((pcie_cc_gpreg_intr2_low_en_s_reg_t*) PCIE_CC_GPREG_INTR2_LOW_EN_S_ADR)
#define PCIE_CC_GPREG_INTR2_CLR_S_REG ((pcie_cc_gpreg_intr2_clr_s_reg_t*) PCIE_CC_GPREG_INTR2_CLR_S_ADR)
#define PCIE_CC_GPREG_INTR2_FORCE_S_REG ((pcie_cc_gpreg_intr2_force_s_reg_t*) PCIE_CC_GPREG_INTR2_FORCE_S_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pcie_cc_gpreg_scratch0_reg_t PCIE_CC_SCRATCH0; /*< Address offset = 0x0 */
    pcie_cc_gpreg_scratch1_reg_t PCIE_CC_SCRATCH1; /*< Address offset = 0x4 */
    pcie_cc_gpreg_brdg_reg_t PCIE_CC_BRDG; /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [244]; /*< Address offset = 0xc */
    pcie_cc_gpreg_ctl_0_s_reg_t PCIE_CC_CTL_0_S; /*< Address offset = 0x100 */
    pcie_cc_gpreg_ctl_1_reg_t PCIE_CC_CTL_1; /*< Address offset = 0x104 */
    pcie_cc_gpreg_ctl_2_reg_t PCIE_CC_CTL_2; /*< Address offset = 0x108 */
    pcie_cc_gpreg_ctl_3_reg_t PCIE_CC_CTL_3; /*< Address offset = 0x10c */
    pcie_cc_gpreg_ctl_4_reg_t PCIE_CC_CTL_4; /*< Address offset = 0x110 */
    pcie_cc_gpreg_ctl_5_reg_t PCIE_CC_CTL_5; /*< Address offset = 0x114 */
    pcie_cc_gpreg_ctl_6_s_reg_t PCIE_CC_CTL_6_S; /*< Address offset = 0x118 */
    pcie_cc_gpreg_ctl_7_reg_t PCIE_CC_CTL_7; /*< Address offset = 0x11c */
    pcie_cc_gpreg_ctl_8_reg_t PCIE_CC_CTL_8; /*< Address offset = 0x120 */
    pcie_cc_gpreg_ecc_force_type_s_reg_t PCIE_CC_ECC_FORCE_TYPE_S; /*< Address offset = 0x124 */
    pcie_cc_gpreg_ecc_force_err_s_reg_t PCIE_CC_ECC_FORCE_ERR_S; /*< Address offset = 0x128 */
    pcie_cc_gpreg_ecc_err_clr_s_reg_t PCIE_CC_ECC_ERR_CLR_S; /*< Address offset = 0x12c */
    pcie_cc_gpreg_ecc_cnt_clr_s_reg_t PCIE_CC_ECC_CNT_CLR_S; /*< Address offset = 0x130 */
    pcie_cc_gpreg_ecc_chk_dis_s_reg_t PCIE_CC_ECC_CHK_DIS_S; /*< Address offset = 0x134 */
    pcie_cc_gpreg_ecc_gen_dis_s_reg_t PCIE_CC_ECC_GEN_DIS_S; /*< Address offset = 0x138 */
    pcie_cc_gpreg_wire_sw_shdw_s_reg_t PCIE_CC_WIRE_SW_SHDW_S[22]; /*< Address offset = 0x13c */
    const uint8_t        reservedArea1 [108]; /*< Address offset = 0x194 */
    pcie_cc_gpreg_ro_0_reg_t PCIE_CC_RO_0; /*< Address offset = 0x200 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x204 */
    pcie_cc_gpreg_ro_3_reg_t PCIE_CC_RO_3; /*< Address offset = 0x20c */
    pcie_cc_gpreg_ro_4_reg_t PCIE_CC_RO_4; /*< Address offset = 0x210 */
    pcie_cc_gpreg_ro_5_reg_t PCIE_CC_RO_5; /*< Address offset = 0x214 */
    pcie_cc_gpreg_ro_6_reg_t PCIE_CC_RO_6; /*< Address offset = 0x218 */
    const uint8_t        reservedArea3 [4];   /*< Address offset = 0x21c */
    pcie_cc_gpreg_ro_8_reg_t PCIE_CC_RO_8; /*< Address offset = 0x220 */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0x224 */
    pcie_cc_gpreg_ro_10_reg_t PCIE_CC_RO_10; /*< Address offset = 0x228 */
    pcie_cc_gpreg_ro_11_reg_t PCIE_CC_RO_11; /*< Address offset = 0x22c */
    pcie_cc_gpreg_ro_12_reg_t PCIE_CC_RO_12; /*< Address offset = 0x230 */
    pcie_cc_gpreg_ro_13_reg_t PCIE_CC_RO_13; /*< Address offset = 0x234 */
    const uint8_t        reservedArea5 [12];  /*< Address offset = 0x238 */
    pcie_cc_gpreg_ro_17_reg_t PCIE_CC_RO_17; /*< Address offset = 0x244 */
    pcie_cc_gpreg_ro_18_reg_t PCIE_CC_RO_18; /*< Address offset = 0x248 */
    pcie_cc_gpreg_ro_19_reg_t PCIE_CC_RO_19; /*< Address offset = 0x24c */
    pcie_cc_gpreg_ro_20_reg_t PCIE_CC_RO_20; /*< Address offset = 0x250 */
    const uint8_t        reservedArea6 [12];  /*< Address offset = 0x254 */
    pcie_cc_gpreg_doe_00_s_reg_t PCIE_CC_DOE_00_S; /*< Address offset = 0x260 */
    pcie_cc_gpreg_doe_01_s_reg_t PCIE_CC_DOE_01_S; /*< Address offset = 0x264 */
    pcie_cc_gpreg_doe_02_s_reg_t PCIE_CC_DOE_02_S; /*< Address offset = 0x268 */
    pcie_cc_gpreg_doe_03_s_reg_t PCIE_CC_DOE_03_S; /*< Address offset = 0x26c */
    pcie_cc_gpreg_doe_04_s_reg_t PCIE_CC_DOE_04_S; /*< Address offset = 0x270 */
    pcie_cc_gpreg_doe_05_s_reg_t PCIE_CC_DOE_05_S; /*< Address offset = 0x274 */
    pcie_cc_gpreg_doe_06_s_reg_t PCIE_CC_DOE_06_S; /*< Address offset = 0x278 */
    pcie_cc_gpreg_doe_07_s_reg_t PCIE_CC_DOE_07_S; /*< Address offset = 0x27c */
    pcie_cc_gpreg_doe_08_s_reg_t PCIE_CC_DOE_08_S; /*< Address offset = 0x280 */
    pcie_cc_gpreg_doe_09_s_reg_t PCIE_CC_DOE_09_S; /*< Address offset = 0x284 */
    pcie_cc_gpreg_doe_10_s_reg_t PCIE_CC_DOE_10_S; /*< Address offset = 0x288 */
    pcie_cc_gpreg_doe_11_s_reg_t PCIE_CC_DOE_11_S; /*< Address offset = 0x28c */
    pcie_cc_gpreg_doe_12_s_reg_t PCIE_CC_DOE_12_S; /*< Address offset = 0x290 */
    pcie_cc_gpreg_doe_13_s_reg_t PCIE_CC_DOE_13_S; /*< Address offset = 0x294 */
    pcie_cc_gpreg_doe_14_s_reg_t PCIE_CC_DOE_14_S; /*< Address offset = 0x298 */
    pcie_cc_gpreg_doe_15_s_reg_t PCIE_CC_DOE_15_S; /*< Address offset = 0x29c */
    pcie_cc_gpreg_doe_16_s_reg_t PCIE_CC_DOE_16_S; /*< Address offset = 0x2a0 */
    pcie_cc_gpreg_doe_17_s_reg_t PCIE_CC_DOE_17_S; /*< Address offset = 0x2a4 */
    pcie_cc_gpreg_doe_18_s_reg_t PCIE_CC_DOE_18_S; /*< Address offset = 0x2a8 */
    pcie_cc_gpreg_doe_19_s_reg_t PCIE_CC_DOE_19_S; /*< Address offset = 0x2ac */
    pcie_cc_gpreg_doe_intr_stat_s_reg_t PCIE_CC_DOE_INTR_STAT_S; /*< Address offset = 0x2b0 */
    pcie_cc_gpreg_doe_intr_high_en_s_reg_t PCIE_CC_DOE_INTR_HIGH_EN_S; /*< Address offset = 0x2b4 */
    pcie_cc_gpreg_doe_intr_low_en_s_reg_t PCIE_CC_DOE_INTR_LOW_EN_S; /*< Address offset = 0x2b8 */
    pcie_cc_gpreg_doe_intr_clr_s_reg_t PCIE_CC_DOE_INTR_CLR_S; /*< Address offset = 0x2bc */
    pcie_cc_gpreg_doe_intr_force_s_reg_t PCIE_CC_DOE_INTR_FORCE_S; /*< Address offset = 0x2c0 */
    pcie_cc_gpreg_wire_s_reg_t PCIE_CC_WIRE_S; /*< Address offset = 0x2c4 */
    pcie_cc_gpreg_ltssm_s_reg_t PCIE_CC_LTSSM_S; /*< Address offset = 0x2c8 */
    pcie_cc_gpreg_ecc_sbe_reg_t PCIE_CC_ECC_SBE; /*< Address offset = 0x2cc */
    pcie_cc_gpreg_ecc_dbe_reg_t PCIE_CC_ECC_DBE; /*< Address offset = 0x2d0 */
    pcie_cc_gpreg_ecc_sbe_cnt_ovfl_reg_t PCIE_CC_ECC_SBE_CNT_OVFL; /*< Address offset = 0x2d4 */
    pcie_cc_gpreg_ecc_sbe_cnt_0_reg_t PCIE_CC_ECC_SBE_CNT_0[4]; /*< Address offset = 0x2d8 */
    pcie_cc_gpreg_ecc_err_addr_0_reg_t PCIE_CC_ECC_ERR_ADDR_0[14]; /*< Address offset = 0x2e8 */
    pcie_cc_gpreg_ecc_err_syndrome_0_reg_t PCIE_CC_ECC_ERR_SYNDROME_0[14]; /*< Address offset = 0x320 */
    const uint8_t        reservedArea7 [168]; /*< Address offset = 0x358 */
    pcie_cc_gpreg_intr0_stat_reg_t PCIE_CC_INTR0_STAT; /*< Address offset = 0x400 */
    pcie_cc_gpreg_intr0_high_en_reg_t PCIE_CC_INTR0_HIGH_EN; /*< Address offset = 0x404 */
    pcie_cc_gpreg_intr0_low_en_reg_t PCIE_CC_INTR0_LOW_EN; /*< Address offset = 0x408 */
    pcie_cc_gpreg_intr0_clr_reg_t PCIE_CC_INTR0_CLR; /*< Address offset = 0x40c */
    pcie_cc_gpreg_intr0_force_reg_t PCIE_CC_INTR0_FORCE; /*< Address offset = 0x410 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x414 */
    pcie_cc_gpreg_intr1_stat_reg_t PCIE_CC_INTR1_STAT; /*< Address offset = 0x420 */
    pcie_cc_gpreg_intr1_high_en_reg_t PCIE_CC_INTR1_HIGH_EN; /*< Address offset = 0x424 */
    pcie_cc_gpreg_intr1_low_en_reg_t PCIE_CC_INTR1_LOW_EN; /*< Address offset = 0x428 */
    pcie_cc_gpreg_intr1_clr_reg_t PCIE_CC_INTR1_CLR; /*< Address offset = 0x42c */
    pcie_cc_gpreg_intr1_force_reg_t PCIE_CC_INTR1_FORCE; /*< Address offset = 0x430 */
    const uint8_t        reservedArea9 [12];  /*< Address offset = 0x434 */
    pcie_cc_gpreg_intr2_stat_s_reg_t PCIE_CC_INTR2_STAT_S; /*< Address offset = 0x440 */
    pcie_cc_gpreg_intr2_high_en_s_reg_t PCIE_CC_INTR2_HIGH_EN_S; /*< Address offset = 0x444 */
    pcie_cc_gpreg_intr2_low_en_s_reg_t PCIE_CC_INTR2_LOW_EN_S; /*< Address offset = 0x448 */
    pcie_cc_gpreg_intr2_clr_s_reg_t PCIE_CC_INTR2_CLR_S; /*< Address offset = 0x44c */
    pcie_cc_gpreg_intr2_force_s_reg_t PCIE_CC_INTR2_FORCE_S; /*< Address offset = 0x450 */
} pcie_cc_gpreg_t;     // size: 0x0144

// AddressSpace struct pointer
//
#define DLNK_PCIE_CC_GPREG  ((pcie_cc_gpreg_t*) DLNK_PCIE_CC_GPREG_BASE)

// ******************************************* /Address Space

#endif      // _PCIE_CC_GPREG_H_

