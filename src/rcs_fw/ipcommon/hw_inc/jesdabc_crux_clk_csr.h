#ifndef _JESDABC_CRUX_CLK_CSR_H_
#define _JESDABC_CRUX_CLK_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define DLNK_JESDABC0_CRUX_CLK_CSR_BASE  0x06708000
#define DLNK_JESDABC1_CRUX_CLK_CSR_BASE  0x06f08000
#define DLNK_JESDABC2_CRUX_CLK_CSR_BASE  0x07708000
#define DLNK_JESDABC3_CRUX_CLK_CSR_BASE  0x07f08000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_OFFSET ( 0x00000000U )
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_OFFSET ( 0x00000004U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_OFFSET ( 0x00000010U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_OFFSET ( 0x00000014U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_OFFSET ( 0x00000018U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_OFFSET ( 0x0000001cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_OFFSET ( 0x00000030U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_OFFSET ( 0x00000034U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_OFFSET ( 0x00000038U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_OFFSET ( 0x00000040U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_OFFSET ( 0x00000044U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA0_OFFSET ( 0x00000100U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA1_OFFSET ( 0x00000104U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA2_OFFSET ( 0x00000108U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA3_OFFSET ( 0x0000010cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA4_OFFSET ( 0x00000110U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA5_OFFSET ( 0x00000114U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA6_OFFSET ( 0x00000118U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA7_OFFSET ( 0x0000011cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA8_OFFSET ( 0x00000120U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA9_OFFSET ( 0x00000124U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA10_OFFSET ( 0x00000128U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA11_OFFSET ( 0x0000012cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA12_OFFSET ( 0x00000130U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA13_OFFSET ( 0x00000134U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA14_OFFSET ( 0x00000138U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA15_OFFSET ( 0x0000013cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA0_OFFSET ( 0x00000180U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA1_OFFSET ( 0x00000184U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA2_OFFSET ( 0x00000188U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA3_OFFSET ( 0x0000018cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA4_OFFSET ( 0x00000190U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA5_OFFSET ( 0x00000194U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA6_OFFSET ( 0x00000198U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA7_OFFSET ( 0x0000019cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA8_OFFSET ( 0x000001a0U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA9_OFFSET ( 0x000001a4U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA10_OFFSET ( 0x000001a8U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA11_OFFSET ( 0x000001acU )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA12_OFFSET ( 0x000001b0U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA13_OFFSET ( 0x000001b4U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA14_OFFSET ( 0x000001b8U )
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA15_OFFSET ( 0x000001bcU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL0_OFFSET ( 0x00000200U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL1_OFFSET ( 0x00000204U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL2_OFFSET ( 0x00000208U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL3_OFFSET ( 0x0000020cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL4_OFFSET ( 0x00000210U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL5_OFFSET ( 0x00000214U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL6_OFFSET ( 0x00000218U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL7_OFFSET ( 0x0000021cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL8_OFFSET ( 0x00000220U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL9_OFFSET ( 0x00000224U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL10_OFFSET ( 0x00000228U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL11_OFFSET ( 0x0000022cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL12_OFFSET ( 0x00000230U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL13_OFFSET ( 0x00000234U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL14_OFFSET ( 0x00000238U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL15_OFFSET ( 0x0000023cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL0_OFFSET ( 0x00000280U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL1_OFFSET ( 0x00000284U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL2_OFFSET ( 0x00000288U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL3_OFFSET ( 0x0000028cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL4_OFFSET ( 0x00000290U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL5_OFFSET ( 0x00000294U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL6_OFFSET ( 0x00000298U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL7_OFFSET ( 0x0000029cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL8_OFFSET ( 0x000002a0U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL9_OFFSET ( 0x000002a4U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL10_OFFSET ( 0x000002a8U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL11_OFFSET ( 0x000002acU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL12_OFFSET ( 0x000002b0U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL13_OFFSET ( 0x000002b4U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL14_OFFSET ( 0x000002b8U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL15_OFFSET ( 0x000002bcU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL0_OFFSET ( 0x00000300U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL1_OFFSET ( 0x00000304U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL2_OFFSET ( 0x00000308U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL3_OFFSET ( 0x0000030cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL4_OFFSET ( 0x00000310U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL5_OFFSET ( 0x00000314U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL6_OFFSET ( 0x00000318U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL7_OFFSET ( 0x0000031cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL8_OFFSET ( 0x00000320U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL9_OFFSET ( 0x00000324U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL10_OFFSET ( 0x00000328U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL11_OFFSET ( 0x0000032cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL12_OFFSET ( 0x00000330U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL13_OFFSET ( 0x00000334U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL14_OFFSET ( 0x00000338U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL15_OFFSET ( 0x0000033cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL0_OFFSET ( 0x00000380U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL1_OFFSET ( 0x00000384U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL2_OFFSET ( 0x00000388U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL3_OFFSET ( 0x0000038cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL4_OFFSET ( 0x00000390U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL5_OFFSET ( 0x00000394U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL6_OFFSET ( 0x00000398U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL7_OFFSET ( 0x0000039cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL8_OFFSET ( 0x000003a0U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL9_OFFSET ( 0x000003a4U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL10_OFFSET ( 0x000003a8U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL11_OFFSET ( 0x000003acU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL12_OFFSET ( 0x000003b0U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL13_OFFSET ( 0x000003b4U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL14_OFFSET ( 0x000003b8U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL15_OFFSET ( 0x000003bcU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS0_OFFSET ( 0x00000500U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS1_OFFSET ( 0x00000504U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS2_OFFSET ( 0x00000508U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS3_OFFSET ( 0x0000050cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS4_OFFSET ( 0x00000510U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS5_OFFSET ( 0x00000514U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS6_OFFSET ( 0x00000518U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS7_OFFSET ( 0x0000051cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS8_OFFSET ( 0x00000520U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS9_OFFSET ( 0x00000524U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS10_OFFSET ( 0x00000528U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS11_OFFSET ( 0x0000052cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS12_OFFSET ( 0x00000530U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS13_OFFSET ( 0x00000534U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS14_OFFSET ( 0x00000538U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS15_OFFSET ( 0x0000053cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL0_OFFSET ( 0x00000600U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL1_OFFSET ( 0x00000604U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL2_OFFSET ( 0x00000608U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL3_OFFSET ( 0x0000060cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL4_OFFSET ( 0x00000610U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL5_OFFSET ( 0x00000614U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL6_OFFSET ( 0x00000618U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL7_OFFSET ( 0x0000061cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL8_OFFSET ( 0x00000620U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL9_OFFSET ( 0x00000624U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL10_OFFSET ( 0x00000628U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL11_OFFSET ( 0x0000062cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL12_OFFSET ( 0x00000630U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL13_OFFSET ( 0x00000634U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL14_OFFSET ( 0x00000638U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL15_OFFSET ( 0x0000063cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL16_OFFSET ( 0x00000640U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL17_OFFSET ( 0x00000644U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL18_OFFSET ( 0x00000648U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL19_OFFSET ( 0x0000064cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL20_OFFSET ( 0x00000650U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL21_OFFSET ( 0x00000654U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL22_OFFSET ( 0x00000658U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL23_OFFSET ( 0x0000065cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL24_OFFSET ( 0x00000660U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL25_OFFSET ( 0x00000664U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL26_OFFSET ( 0x00000668U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL27_OFFSET ( 0x0000066cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL28_OFFSET ( 0x00000670U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL29_OFFSET ( 0x00000674U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL30_OFFSET ( 0x00000678U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL31_OFFSET ( 0x0000067cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL0_OFFSET ( 0x00000680U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL1_OFFSET ( 0x00000684U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL2_OFFSET ( 0x00000688U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL3_OFFSET ( 0x0000068cU )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL4_OFFSET ( 0x00000690U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL5_OFFSET ( 0x00000694U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL6_OFFSET ( 0x00000698U )
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL7_OFFSET ( 0x0000069cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_OFFSET ( 0x00001000U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_OFFSET ( 0x00001004U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_OFFSET ( 0x00001008U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_OFFSET ( 0x00001010U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_OFFSET ( 0x00001014U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_OFFSET ( 0x00001030U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_OFFSET ( 0x00001034U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL0_OFFSET ( 0x00001100U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL1_OFFSET ( 0x00001104U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL2_OFFSET ( 0x00001108U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL3_OFFSET ( 0x0000110cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL4_OFFSET ( 0x00001110U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL5_OFFSET ( 0x00001114U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL6_OFFSET ( 0x00001118U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL7_OFFSET ( 0x0000111cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL8_OFFSET ( 0x00001120U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL9_OFFSET ( 0x00001124U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL10_OFFSET ( 0x00001128U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL11_OFFSET ( 0x0000112cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL12_OFFSET ( 0x00001130U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL13_OFFSET ( 0x00001134U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL14_OFFSET ( 0x00001138U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL15_OFFSET ( 0x0000113cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL16_OFFSET ( 0x00001140U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL17_OFFSET ( 0x00001144U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL18_OFFSET ( 0x00001148U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL19_OFFSET ( 0x0000114cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL20_OFFSET ( 0x00001150U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL21_OFFSET ( 0x00001154U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL22_OFFSET ( 0x00001158U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL23_OFFSET ( 0x0000115cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL24_OFFSET ( 0x00001160U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL25_OFFSET ( 0x00001164U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL26_OFFSET ( 0x00001168U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL27_OFFSET ( 0x0000116cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL28_OFFSET ( 0x00001170U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL29_OFFSET ( 0x00001174U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL30_OFFSET ( 0x00001178U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL31_OFFSET ( 0x0000117cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR0_OFFSET ( 0x00001200U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR1_OFFSET ( 0x00001204U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR2_OFFSET ( 0x00001208U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR3_OFFSET ( 0x0000120cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR4_OFFSET ( 0x00001210U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR5_OFFSET ( 0x00001214U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR6_OFFSET ( 0x00001218U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR7_OFFSET ( 0x0000121cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR8_OFFSET ( 0x00001220U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR9_OFFSET ( 0x00001224U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR10_OFFSET ( 0x00001228U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR11_OFFSET ( 0x0000122cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR12_OFFSET ( 0x00001230U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR13_OFFSET ( 0x00001234U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR14_OFFSET ( 0x00001238U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR15_OFFSET ( 0x0000123cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE0_OFFSET ( 0x00001280U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE1_OFFSET ( 0x00001284U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE2_OFFSET ( 0x00001288U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE3_OFFSET ( 0x0000128cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE4_OFFSET ( 0x00001290U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE5_OFFSET ( 0x00001294U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE6_OFFSET ( 0x00001298U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE7_OFFSET ( 0x0000129cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE8_OFFSET ( 0x000012a0U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE9_OFFSET ( 0x000012a4U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE10_OFFSET ( 0x000012a8U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE11_OFFSET ( 0x000012acU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE12_OFFSET ( 0x000012b0U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE13_OFFSET ( 0x000012b4U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE14_OFFSET ( 0x000012b8U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE15_OFFSET ( 0x000012bcU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR0_OFFSET ( 0x00001300U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR1_OFFSET ( 0x00001304U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR2_OFFSET ( 0x00001308U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR3_OFFSET ( 0x0000130cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR4_OFFSET ( 0x00001310U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR5_OFFSET ( 0x00001314U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR6_OFFSET ( 0x00001318U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR7_OFFSET ( 0x0000131cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR8_OFFSET ( 0x00001320U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR9_OFFSET ( 0x00001324U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR10_OFFSET ( 0x00001328U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR11_OFFSET ( 0x0000132cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR12_OFFSET ( 0x00001330U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR13_OFFSET ( 0x00001334U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR14_OFFSET ( 0x00001338U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR15_OFFSET ( 0x0000133cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA0_OFFSET ( 0x00001380U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA1_OFFSET ( 0x00001384U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA2_OFFSET ( 0x00001388U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA3_OFFSET ( 0x0000138cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA4_OFFSET ( 0x00001390U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA5_OFFSET ( 0x00001394U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA6_OFFSET ( 0x00001398U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA7_OFFSET ( 0x0000139cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA8_OFFSET ( 0x000013a0U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA9_OFFSET ( 0x000013a4U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA10_OFFSET ( 0x000013a8U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA11_OFFSET ( 0x000013acU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA12_OFFSET ( 0x000013b0U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA13_OFFSET ( 0x000013b4U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA14_OFFSET ( 0x000013b8U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA15_OFFSET ( 0x000013bcU )
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_OFFSET ( 0x00002000U )
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_OFFSET ( 0x00002004U )
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_OFFSET ( 0x00002008U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_OFFSET ( 0x0000200cU )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_OFFSET ( 0x00002010U )
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_OFFSET ( 0x00002014U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL16_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL16_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL17_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL17_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL18_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL18_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL19_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL19_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL20_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL20_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL21_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL21_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL22_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL22_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL23_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL23_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL24_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL24_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL25_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL25_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL26_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL26_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL27_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL27_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL28_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL28_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL29_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL29_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL30_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL30_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL31_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL31_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL16_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL16_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL17_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL17_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL18_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL18_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL19_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL19_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL20_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL20_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL21_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL21_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL22_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL22_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL23_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL23_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL24_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL24_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL25_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL25_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL26_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL26_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL27_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL27_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL28_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL28_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL29_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL29_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL30_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL30_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL31_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL31_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA0_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA1_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA2_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA3_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA4_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA5_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA6_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA7_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA8_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA8_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA9_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA9_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA10_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA10_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA11_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA11_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA12_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA12_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA13_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA13_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA14_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA14_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA15_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA15_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_OFFSET ) ))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_ADR(_BASE) (( ( _BASE ) + ( JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_scratch_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_apb_bridge_status_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_DEFAULT (0x00010000U)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_WID (20)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_MSK (0x000FFFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_DEF (0x00010000)

///< Module Revision Number
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_OFF (20)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_WID ( 8)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_MSK (0x0FF00000)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_OFF (28)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_OFF (29)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_MSK (0x20000000)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_OFF (30)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_MSK (0x40000000)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_OFF (31)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_MSK (0x80000000)
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_STRM_CFG register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_STRM_CFG
  * RX Stream configuration register
  */

typedef union {
  struct {
    uint32_t NUM_STRM : 5;
    ///< Number of streams enabled for crux port.
    ///< t                                        The value of 0 represents
    ///< no streams are mapped to the crux port.
    ///< t                                 valid values are from 0 to 16
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FLITS_PER_STRM : 9;
    ///< Specifies the no. of 512 bits which needs to be prefilled per stream
    ///< to enable read for Mem of crux port.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_strm_cfg_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_RD_MASK (0x00003fffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_WR_MASK (0x00003fffU)


///< Number of streams enabled for crux port.
///< t                                        The value of 0 represents
///< no streams are mapped to the crux port.
///< t                                 valid values are from 0 to 16
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_NUM_STRM_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_NUM_STRM_BF_WID ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_NUM_STRM_BF_MSK (0x0000001F)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_NUM_STRM_BF_DEF (0x00000000)

///< Specifies the no. of 512 bits which needs to be prefilled per stream
///< to enable read for Mem of crux port.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_FLITS_PER_STRM_BF_OFF ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_FLITS_PER_STRM_BF_WID ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_FLITS_PER_STRM_BF_MSK (0x00003FE0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_FLITS_PER_STRM_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_MEM_STREAM_CFG register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_MEM_STREAM_CFG
  * RX memory streams allocation configuration register
  */

typedef union {
  struct {
    uint32_t MEM_DEPTH_PER_STR : 9;
    ///< number of max flits/depth allocated to memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_mem_stream_cfg_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_RD_MASK (0x000001ffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_WR_MASK (0x000001ffU)


///< number of max flits/depth allocated to memory.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_MEM_DEPTH_PER_STR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_MEM_DEPTH_PER_STR_BF_WID ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_MEM_DEPTH_PER_STR_BF_MSK (0x000001FF)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_MEM_DEPTH_PER_STR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_TOP_CTL register description at address offset 0x18
  *
  * Register default value:        0x00000002
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_TOP_CTL
  * JESD RX  decompression top level control
  */

typedef union {
  struct {
    uint32_t CFG_MODE_SEL : 2;
    ///< Control to select the mode of decompression
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t CFG_IPFMT_SEL : 1;
    ///< Shows the vin input forma
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_decomp_top_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_DEFAULT (0x00000002U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_RD_MASK (0x0000000bU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_WR_MASK (0x0000000bU)


///< Control to select the mode of decompression
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_MSK (0x00000003)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_MODE_SEL_BF_DEF (0x00000002)

///< Shows the vin input forma
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_OFF ( 3)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_MSK (0x00000008)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_CFG_IPFMT_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_VNSH_CTL register description at address offset 0x1c
  *
  * Register default value:        0x1F005206
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_VNSH_CTL
  * RX VNSH Control input to JESD decompression
  */

typedef union {
  struct {
    uint32_t CFG_VNSH_IELEMSIZE : 2;
    ///< The size of each element at the vnsh block input. 00=8bit, 01=16bit,
    ///< 10=32bit, 11=rsvd.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t CFG_VNSH_OELEMSIZE : 2;
    ///< Output Element size. 00=8bit elements.2'b01=16 bit elements. 2'b10=32
    ///< bit elements. 2'b11 = Reserved.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t CFG_ROUNDMODE : 1;
    ///< Rounding Mode.0=Round-away-from-0. 1=Bankers rounding.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_EXPADJ : 2;
    ///< Exponent Adjust selection. This selects the adjustment to be made
    ///< to the shift values.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CFG_WIDTH : 6;
    ///< Saturation width of output sample
    ///< AccessType="RW" BitOffset="8" ResetValue="0x12"
    uint32_t CFG_VNSH_AGCA_SE : 1;
    ///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
    ///< sign extended from bit 27.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t CFG_AGCA_EXPADJ : 1;
    ///< Exponent Adjustment for AGC Abit.if set, add bit 7 of the exponent
    ///< element in IV2 to the 5 LSB bits of exponent.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_FSHIFT : 6;
    ///< All elements of IV2 are incremented by this value if expadj=01.This
    ///< field is signed
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CFG_MAXSHIFT : 5;
    ///< Maximum shift value. This defines the maximum value of the shift that
    ///< is permitted on the input samples.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1F"
    uint32_t CFG_AGCA_INSERTABIT : 2;
    ///< Insert IV0, IV1 input elements bit (Abit, selected from 31:29 based
    ///< on top_ctl[13:12]) into bit 15 of corresponding shifted output element
    ///< in OV0, OV1. 00,01,10 = do nothing, 11= replace output element bit
    ///< 15 with Abit
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t CFG_OV2SEL : 1;
    ///< Select exponent values to be output on OV2, 0 = Unadjusted exponents,1
    ///< = Adjusted exponents.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_decomp_vnsh_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_DEFAULT (0x1f005206U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_RD_MASK (0xff3fff7fU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_WR_MASK (0xff3fff7fU)


///< The size of each element at the vnsh block input. 00=8bit, 01=16bit,
///< 10=32bit, 11=rsvd.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_MSK (0x00000003)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_IELEMSIZE_BF_DEF (0x00000002)

///< Output Element size. 00=8bit elements.2'b01=16 bit elements. 2'b10=32
///< bit elements. 2'b11 = Reserved.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_OFF ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_MSK (0x0000000C)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_OELEMSIZE_BF_DEF (0x00000004)

///< Rounding Mode.0=Round-away-from-0. 1=Bankers rounding.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_OFF ( 4)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_MSK (0x00000010)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_ROUNDMODE_BF_DEF (0x00000000)

///< Exponent Adjust selection. This selects the adjustment to be made
///< to the shift values.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_OFF ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_MSK (0x00000060)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_EXPADJ_BF_DEF (0x00000000)

///< Saturation width of output sample
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_OFF ( 8)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_MSK (0x00003F00)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_WIDTH_BF_DEF (0x00001200)

///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
///< sign extended from bit 27.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_OFF (14)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_MSK (0x00004000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_VNSH_AGCA_SE_BF_DEF (0x00004000)

///< Exponent Adjustment for AGC Abit.if set, add bit 7 of the exponent
///< element in IV2 to the 5 LSB bits of exponent.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_OFF (15)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_MSK (0x00008000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_EXPADJ_BF_DEF (0x00000000)

///< All elements of IV2 are incremented by this value if expadj=01.This
///< field is signed
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_OFF (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_MSK (0x003F0000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_FSHIFT_BF_DEF (0x00000000)

///< Maximum shift value. This defines the maximum value of the shift that
///< is permitted on the input samples.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_OFF (24)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_WID ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_MSK (0x1F000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_MAXSHIFT_BF_DEF (0x1F000000)

///< Insert IV0, IV1 input elements bit (Abit, selected from 31:29 based
///< on top_ctl[13:12]) into bit 15 of corresponding shifted output element
///< in OV0, OV1. 00,01,10 = do nothing, 11= replace output element bit
///< 15 with Abit
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_OFF (29)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_MSK (0x60000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_AGCA_INSERTABIT_BF_DEF (0x00000000)

///< Select exponent values to be output on OV2, 0 = Unadjusted exponents,1
///< = Adjusted exponents.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_OFF (31)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_MSK (0x80000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_CFG_OV2SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_SRC_EN register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_SRC_EN
  * JESD  RSB Data Source Mode enable
  */

typedef union {
  struct {
    uint32_t RSB_DATA_SRC_EN : 1;
    ///< Enables RSB Data source mode, where RSB is loded through APB and data
    ///< is sent repititively on Crux interface.            The write from
    ///< JESD IP are ignored in this mode, when set to 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_data_src_en_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_WR_MASK (0x00000001U)


///< Enables RSB Data source mode, where RSB is loded through APB and data
///< is sent repititively on Crux interface.            The write from
///< JESD IP are ignored in this mode, when set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_RSB_DATA_SRC_EN_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_RSB_DATA_SRC_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_RSB_DATA_SRC_EN_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_RSB_DATA_SRC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_SRC_START register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_SRC_START
  * JESD  RSB Data Source start
  */

typedef union {
  struct {
    uint32_t RSB_DATA_SRC_EN : 1;
    ///< This register will trigger the RSB read logic to send data loaded
    ///< in RSB to crux interface in RSB data source mode, when set to 1.
    ///< Setting this bit also gates any further APB writes to RSB.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_data_src_start_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_WR_MASK (0x00000001U)


///< This register will trigger the RSB read logic to send data loaded
///< in RSB to crux interface in RSB data source mode, when set to 1.
///< Setting this bit also gates any further APB writes to RSB.
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_RSB_DATA_SRC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_DATA_CAP_FRZ_EN register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_DATA_CAP_FRZ_EN
  * JESD  RSB Capture Freeze mode
  */

typedef union {
  struct {
    uint32_t RSB_DATA_CAP_FRZ_MODE : 1;
    ///< This register will enable RSB capture freeze mode, when set to 1.
    ///< Rata from JESD IP will be captured in the RSB until it is full. The
    ///< data to crux interface from RSB is disabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_data_cap_frz_en_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_WR_MASK (0x00000001U)


///< This register will enable RSB capture freeze mode, when set to 1.
///< Rata from JESD IP will be captured in the RSB until it is full. The
///< data to crux interface from RSB is disabled.
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_RSB_DATA_CAP_FRZ_MODE_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_INDIR_ADDR register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_INDIR_ADDR
  * JESD  RSB Indirect address
  */

typedef union {
  struct {
    uint32_t RSB_INDIR_ADDR : 32;
    ///< Contains the 256-bit aligned address location of the RSB buffer to
    ///< be written/read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_indir_addr_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_WR_MASK (0xffffffffU)


///< Contains the 256-bit aligned address location of the RSB buffer to
///< be written/read.
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_WID (32)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_MSK (0xFFFFFFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_RSB_INDIR_ADDR_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_WR_RD_CTL register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_WR_RD_CTL
  * JESD  RSB read/write control
  */

typedef union {
  struct {
    uint32_t RSB_RD_WR_CTRL : 1;
    ///< Writing to this register will trigger RSB read/write operation.
    ///< 1'b0 : Triggers RSB write.                   1'b1 : Triggers RSB read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_wr_rd_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_WR_MASK (0x00000001U)


///< Writing to this register will trigger RSB read/write operation.
///< 1'b0 : Triggers RSB write.                   1'b1 : Triggers RSB read.
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_RSB_RD_WR_CTRL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_WR_DATA[16] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_WR_DATA
  * JESD  RSB write data Word
  */

typedef union {
  struct {
    uint32_t RSB_WR_DATA_WORD : 32;
    ///< Receiver Buffer write data word
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_WR_MASK (0xffffffffU)


///< Receiver Buffer write data word
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_WID (32)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_MSK (0xFFFFFFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_RSB_WR_DATA_WORD_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RSB_RD_DATA[16] register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RSB_RD_DATA
  * JESD  RSB read data Word
  */

typedef union {
  struct {
    uint32_t RSB_RD_DATA_WORD : 32;
    ///< Receiver Buffer read data word
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_WR_MASK (0x00000000U)


///< Receiver Buffer read data word
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_WID (32)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_MSK (0xFFFFFFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_RSB_RD_DATA_WORD_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_WR_MEM_TBL[16] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_WR_MEM_TBL
  * JESD RSB wr mem config table
  */

typedef union {
  struct {
    uint32_t RX_MEM_BASE_ADDR : 9;
    ///< Rx memory base address.
    ///< The start address location corrsponding to each stream for the 512
    ///< bit wide write bus  to be writtten in the memory for crux port 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_RD_MASK (0x000001ffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_WR_MASK (0x000001ffU)


///< Rx memory base address.
///< The start address location corrsponding to each stream for the 512
///< bit wide write bus  to be writtten in the memory for crux port 0.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_WID ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_MSK (0x000001FF)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_RX_MEM_BASE_ADDR_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_RD_MEM_TBL[16] register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_RD_MEM_TBL
  * JESD RSB rd mem config table
  */

typedef union {
  struct {
    uint32_t RX_MEM_BASE_ADDR : 9;
    ///< Rx memory base address for read.
    ///< The start address location corrsponding to each stream for the 512
    ///< bit wide read bus  to be read from the memory for crux port 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t STREAM_ID : 4;
    ///< Stream Id .
    ///< The value of stream id  corrsponding to the rd base address.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_RD_MASK (0x00001fffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_WR_MASK (0x00001fffU)


///< Rx memory base address for read.
///< The start address location corrsponding to each stream for the 512
///< bit wide read bus  to be read from the memory for crux port 0.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_WID ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_MSK (0x000001FF)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_RX_MEM_BASE_ADDR_BF_DEF (0x00000000)

///< Stream Id .
///< The value of stream id  corrsponding to the rd base address.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_STREAM_ID_BF_OFF ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_STREAM_ID_BF_WID ( 4)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_STREAM_ID_BF_MSK (0x00001E00)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_STREAM_ID_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_WR_POINTER_TBL[16] register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_WR_POINTER_TBL
  * JESD Rx memory pointer Register
  */

typedef union {
  struct {
    uint32_t RX_MEM_PTR : 9;
    ///< Rx memory write/Read pointer for crux port.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_RD_MASK (0x000001ffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_WR_MASK (0x000001ffU)


///< Rx memory write/Read pointer for crux port.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_RX_MEM_PTR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_RX_MEM_PTR_BF_WID ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_RX_MEM_PTR_BF_MSK (0x000001FF)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_RX_MEM_PTR_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_RD_POINTER_TBL[16] register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_RD_POINTER_TBL
  * JESD Rx memory pointer Register
  */

typedef union {
  struct {
    uint32_t RX_MEM_PTR : 9;
    ///< Rx memory write/Read pointer for crux port.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_RD_MASK (0x000001ffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_WR_MASK (0x000001ffU)


///< Rx memory write/Read pointer for crux port.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_RX_MEM_PTR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_RX_MEM_PTR_BF_WID ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_RX_MEM_PTR_BF_MSK (0x000001FF)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_RX_MEM_PTR_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_STRM_MEM_STS[16] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_STRM_MEM_STS
  * JESD Rx Stream Buffer Status Register
  */

typedef union {
  struct {
    uint32_t RSB_FILL_LEVEL : 10;
    ///< Rx buffer current occupancy status. Each count corresponds to one
    ///< flit or one 512 bit location.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RSB_FILL_FULL : 1;
    ///< Indicates RSB is full when set to 1.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t RSB_FILL_EMPTY : 1;
    ///< Indicates RSB is empty when set to 1.
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RD_MASK (0x00000fffU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_WR_MASK (0x00000000U)


///< Rx buffer current occupancy status. Each count corresponds to one
///< flit or one 512 bit location.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_LEVEL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_LEVEL_BF_WID (10)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_LEVEL_BF_MSK (0x000003FF)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_LEVEL_BF_DEF (0x00000000)

///< Indicates RSB is full when set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_OFF (10)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_MSK (0x00000400)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_FULL_BF_DEF (0x00000000)

///< Indicates RSB is empty when set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_OFF (11)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_MSK (0x00000800)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_RSB_FILL_EMPTY_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_MANTISSA_CTL[32] register description at address offset 0x600
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_MANTISSA_CTL
  * JESD RX  decompression mantissa control
  */

typedef union {
  struct {
    uint32_t CFG_MANTISSA_SEL : 6;
    ///< Control to select the mantissa bits from the compressed data packet.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_RD_MASK (0x0000003fU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_WR_MASK (0x0000003fU)


///< Control to select the mantissa bits from the compressed data packet.
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_MSK (0x0000003F)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_CFG_MANTISSA_SEL_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_ARRAY_INST0 (32)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_RX_DECOMP_EXP_CTL[8] register description at address offset 0x680
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/RX_DECOMP_EXP_CTL
  * JESD RX  decompression exponent control
  */

typedef union {
  struct {
    uint32_t CFG_EXPONENT_SEL : 6;
    ///< Control to select the exponent bits from the compressed data packet
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_RD_MASK (0x0000003fU)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_WR_MASK (0x0000003fU)


///< Control to select the exponent bits from the compressed data packet
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_MSK (0x0000003F)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_CFG_EXPONENT_SEL_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_ARRAY_INST0 (8)
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_VMLGA_REG register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_VMLGA_REG
  * TX vmlga control for compression
  */

typedef union {
  struct {
    uint32_t CFG_GRP : 1;
    ///< VMLGA group select.This field select the group size of compression
    ///< block .
    ///< t 0 : Group size is 1 element.
    ///< t 1 :Group size is 2 elements.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CFG_VMLGA_IELEMSIZE : 2;
    ///< The size of each element at the compression block input.
    ///< t Input element size. 00=rsvd; 01=16bit; 10=32bit; 11=rsvd
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t CFG_AGCA_SE27 : 1;
    ///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
    ///< sign extended from bit 27
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CFG_AGCA_ORCLONEABIT : 1;
    ///< Clone ORred AGC-Abit. If 1, the Abits (Bit 29) from each element of
    ///< a group are Orred, and the output bit of this OR operation is cloned
    ///< and inserted into bit 7 of all output elements.
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CFG_EXPADJ : 1;
    ///< For twos complement output format set this bit to 1.For signed magnitude
    ///< output this bit should be 0.
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_vmlga_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_RD_MASK (0x07000301U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_WR_MASK (0x07000301U)


///< VMLGA group select.This field select the group size of compression
///< block .
///< t 0 : Group size is 1 element.
///< t 1 :Group size is 2 elements.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_GRP_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_GRP_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_GRP_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_GRP_BF_DEF (0x00000000)

///< The size of each element at the compression block input.
///< t Input element size. 00=rsvd; 01=16bit; 10=32bit; 11=rsvd
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_VMLGA_IELEMSIZE_BF_OFF ( 8)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_VMLGA_IELEMSIZE_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_VMLGA_IELEMSIZE_BF_MSK (0x00000300)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_VMLGA_IELEMSIZE_BF_DEF (0x00000000)

///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
///< sign extended from bit 27
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_SE27_BF_OFF (24)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_SE27_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_SE27_BF_MSK (0x01000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_SE27_BF_DEF (0x00000000)

///< Clone ORred AGC-Abit. If 1, the Abits (Bit 29) from each element of
///< a group are Orred, and the output bit of this OR operation is cloned
///< and inserted into bit 7 of all output elements.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_ORCLONEABIT_BF_OFF (25)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_ORCLONEABIT_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_ORCLONEABIT_BF_MSK (0x02000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_AGCA_ORCLONEABIT_BF_DEF (0x00000000)

///< For twos complement output format set this bit to 1.For signed magnitude
///< output this bit should be 0.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_EXPADJ_BF_OFF (26)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_EXPADJ_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_EXPADJ_BF_MSK (0x04000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG_CFG_EXPADJ_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_VNSH_REG register description at address offset 0x1004
  *
  * Register default value:        0x1F004C06
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_VNSH_REG
  * TX VNSH Control input to compression
  */

typedef union {
  struct {
    uint32_t CFG_VNSH_IELEMSIZE : 2;
    ///< The size of each element at the vnsh block input.
    ///< t Input element size. 00=8bit, 01=16bit, 10=32bit, 11=rsvd
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t CFG_VNSH_OELEMSIZE : 2;
    ///< Output Element size.
    ///< t 00=8bit elements. 2'b01=16 bit elements, 2'b10=32 bit elements,
    ///< 2'b11 = Reserved.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t CFG_ROUNDMODE : 1;
    ///< Rounding Mode.
    ///< t 0=Round-away-from-0
    ///< t 1=Bankers rounding.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CFG_EXPADJ : 2;
    ///< Exponent Adjust selection.
    ///< t 00 : No adjustment.
    ///< t 01 : Add fshift to bits[4:0] of each element of IV2 and use the
    ///< result to shift
    ///< t 10 : Override values of all elements in IV2 with fshift
    ///< t 11 : Use shift values from IV2 elements bits[7:0].
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CFG_WIDTH : 6;
    ///< Saturation width of output sample.
    ///< AccessType="RW" BitOffset="8" ResetValue="0xC"
    uint32_t CFG_VNSH_AGCA_SE : 1;
    ///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
    ///< sign extended from bit 27.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t CFG_AGCA_EXPADJ : 1;
    ///< Exponent Adjustment for AGC Abit. if set, add bit 7 of the exponent
    ///< element in IV2 to the 5 LSB bits of exponent.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CFG_FSHIFT : 6;
    ///< All elements of IV2 are overridden by this value if expadj==10.
    ///< t All elements of IV2 are incremented by this value if expadj=01.This
    ///< field is signed.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t CFG_MAXSHIFT : 5;
    ///< Maximum shift value. This defines the maximum value of the shift that
    ///< is permitted on the input samples..
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1F"
    uint32_t CFG_AGCA_INSERTABIT : 2;
    ///< Insert IV0, IV1 input elements bit 29 (Abit) into bit 13,14 or 15
    ///< of corresponding shifted output element in OV0 OV1 00, 01, 10= do
    ///< nothing.  11= replace output elem bit 15 with Abit.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t CFG_OV2SEL : 1;
    ///< Select exponent values to be output on OV2.
    ///< t 0 = Unadjusted exponents.
    ///< t 1 = Adjusted exponents .
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_vnsh_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_DEFAULT (0x1f004c06U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_RD_MASK (0xff3fff7fU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_WR_MASK (0xff3fff7fU)


///< The size of each element at the vnsh block input.
///< t Input element size. 00=8bit, 01=16bit, 10=32bit, 11=rsvd
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_IELEMSIZE_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_IELEMSIZE_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_IELEMSIZE_BF_MSK (0x00000003)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_IELEMSIZE_BF_DEF (0x00000002)

///< Output Element size.
///< t 00=8bit elements. 2'b01=16 bit elements, 2'b10=32 bit elements,
///< 2'b11 = Reserved.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_OELEMSIZE_BF_OFF ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_OELEMSIZE_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_OELEMSIZE_BF_MSK (0x0000000C)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_OELEMSIZE_BF_DEF (0x00000004)

///< Rounding Mode.
///< t 0=Round-away-from-0
///< t 1=Bankers rounding.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_ROUNDMODE_BF_OFF ( 4)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_ROUNDMODE_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_ROUNDMODE_BF_MSK (0x00000010)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_ROUNDMODE_BF_DEF (0x00000000)

///< Exponent Adjust selection.
///< t 00 : No adjustment.
///< t 01 : Add fshift to bits[4:0] of each element of IV2 and use the
///< result to shift
///< t 10 : Override values of all elements in IV2 with fshift
///< t 11 : Use shift values from IV2 elements bits[7:0].
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_EXPADJ_BF_OFF ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_EXPADJ_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_EXPADJ_BF_MSK (0x00000060)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_EXPADJ_BF_DEF (0x00000000)

///< Saturation width of output sample.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_WIDTH_BF_OFF ( 8)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_WIDTH_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_WIDTH_BF_MSK (0x00003F00)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_WIDTH_BF_DEF (0x00000C00)

///< Sign Extend for AGC-Abit. If this bit is set, the input elements are
///< sign extended from bit 27.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_AGCA_SE_BF_OFF (14)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_AGCA_SE_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_AGCA_SE_BF_MSK (0x00004000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_VNSH_AGCA_SE_BF_DEF (0x00004000)

///< Exponent Adjustment for AGC Abit. if set, add bit 7 of the exponent
///< element in IV2 to the 5 LSB bits of exponent.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_EXPADJ_BF_OFF (15)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_EXPADJ_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_EXPADJ_BF_MSK (0x00008000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_EXPADJ_BF_DEF (0x00000000)

///< All elements of IV2 are overridden by this value if expadj==10.
///< t All elements of IV2 are incremented by this value if expadj=01.This
///< field is signed.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_FSHIFT_BF_OFF (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_FSHIFT_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_FSHIFT_BF_MSK (0x003F0000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_FSHIFT_BF_DEF (0x00000000)

///< Maximum shift value. This defines the maximum value of the shift that
///< is permitted on the input samples..
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_MAXSHIFT_BF_OFF (24)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_MAXSHIFT_BF_WID ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_MAXSHIFT_BF_MSK (0x1F000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_MAXSHIFT_BF_DEF (0x1F000000)

///< Insert IV0, IV1 input elements bit 29 (Abit) into bit 13,14 or 15
///< of corresponding shifted output element in OV0 OV1 00, 01, 10= do
///< nothing.  11= replace output elem bit 15 with Abit.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_INSERTABIT_BF_OFF (29)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_INSERTABIT_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_INSERTABIT_BF_MSK (0x60000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_AGCA_INSERTABIT_BF_DEF (0x00000000)

///< Select exponent values to be output on OV2.
///< t 0 = Unadjusted exponents.
///< t 1 = Adjusted exponents .
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_OV2SEL_BF_OFF (31)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_OV2SEL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_OV2SEL_BF_MSK (0x80000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG_CFG_OV2SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_TOP_REG register description at address offset 0x1008
  *
  * Register default value:        0x000230A0
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_TOP_REG
  * TX Compression module top level controls
  */

typedef union {
  struct {
    uint32_t CFG_VMLGA_EN : 1;
    ///< VMLGA enable.
    ///< t 1'b1 - Enable VMLGA
    ///< t 1'b0 - Disable VMLGA
    ///< t If compression is disabled, VMLGA will be internally disabled irrespective
    ///< of this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CFG_VNSH_EN : 1;
    ///< VNSH enable.
    ///< t 1'b1 - Enable VNSH
    ///< t 1'b0 - Disable VNSH
    ///< t If compression is disabled, VNSH will be internally disabled irrespective
    ///< of this field.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CFG_COMPRESSION_EN : 1;
    ///< Compression enable.
    ///< t 1'b1 - Enable compression
    ///< t 1'b0 - Disable compression
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CFG_OPFMT_CTL : 1;
    ///< Selects output format. 1b0 = VNSH output is passed unchanged (2s complement
    ///< format).  1b1 =VNSH output is converted to sign magnitude format.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CFG_MW_CTL : 5;
    ///< Width of the mantissa, used to subtract from logarithmic output. set
    ///< to output mantissa width-2 for shared  and individual exponent.
    ///< AccessType="RW" BitOffset="4" ResetValue="0xA"
    uint32_t CFG_RSVD1 : 3;
    ///< Reserved.Program to zero.
    ///< AccessType="RO" BitOffset="9" ResetValue="0x0"
    uint32_t CFG_AGC_SEL : 2;
    ///< Selects the AGC bit from bits 31:28 of each element. 2'b00 = bit 28
    ///< is selected as AGC bit.  2'b01 = bit 29 is selected as AGC bit. 2'b10
    ///< =bit 30 is selected as AGC 2'b11 =bit 31 is selected as AGC bit.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x3"
    uint32_t CFG_RSVD2 : 2;
    ///< Reserved.Program to zero.
    ///< AccessType="RO" BitOffset="14" ResetValue="0x0"
    uint32_t CFG_BF_OUT_SEL : 1;
    ///< 1'b0 - Bit formatter output is taken directly to generate Vout  1'b1
    ///< - Select lower [15:0] from each bit formatter slice to form vout.
    ///< If compression is disabled, this field internally sets to 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CFG_OUT_WIDTH_SEL : 1;
    ///< 1'b0 - Bit formatter output [255:0] is cloned to vout [511:256] 1'b1
    ///< = Bit formatter output [511:256] is cloned to   vout[511:256]
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t CFG_RSVD3 : 14;
    ///< Reserved.Program to zero.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_top_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_DEFAULT (0x000230a0U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_WR_MASK (0x000331ffU)


///< VMLGA enable.
///< t 1'b1 - Enable VMLGA
///< t 1'b0 - Disable VMLGA
///< t If compression is disabled, VMLGA will be internally disabled irrespective
///< of this field.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VMLGA_EN_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VMLGA_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VMLGA_EN_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VMLGA_EN_BF_DEF (0x00000000)

///< VNSH enable.
///< t 1'b1 - Enable VNSH
///< t 1'b0 - Disable VNSH
///< t If compression is disabled, VNSH will be internally disabled irrespective
///< of this field.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VNSH_EN_BF_OFF ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VNSH_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VNSH_EN_BF_MSK (0x00000002)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_VNSH_EN_BF_DEF (0x00000000)

///< Compression enable.
///< t 1'b1 - Enable compression
///< t 1'b0 - Disable compression
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_COMPRESSION_EN_BF_OFF ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_COMPRESSION_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_COMPRESSION_EN_BF_MSK (0x00000004)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_COMPRESSION_EN_BF_DEF (0x00000000)

///< Selects output format. 1b0 = VNSH output is passed unchanged (2s complement
///< format).  1b1 =VNSH output is converted to sign magnitude format.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OPFMT_CTL_BF_OFF ( 3)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OPFMT_CTL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OPFMT_CTL_BF_MSK (0x00000008)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OPFMT_CTL_BF_DEF (0x00000000)

///< Width of the mantissa, used to subtract from logarithmic output. set
///< to output mantissa width-2 for shared  and individual exponent.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_MW_CTL_BF_OFF ( 4)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_MW_CTL_BF_WID ( 5)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_MW_CTL_BF_MSK (0x000001F0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_MW_CTL_BF_DEF (0x000000A0)

///< Reserved.Program to zero.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD1_BF_OFF ( 9)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD1_BF_WID ( 3)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD1_BF_MSK (0x00000E00)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD1_BF_DEF (0x00000000)

///< Selects the AGC bit from bits 31:28 of each element. 2'b00 = bit 28
///< is selected as AGC bit.  2'b01 = bit 29 is selected as AGC bit. 2'b10
///< =bit 30 is selected as AGC 2'b11 =bit 31 is selected as AGC bit.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_AGC_SEL_BF_OFF (12)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_AGC_SEL_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_AGC_SEL_BF_MSK (0x00003000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_AGC_SEL_BF_DEF (0x00003000)

///< Reserved.Program to zero.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD2_BF_OFF (14)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD2_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD2_BF_MSK (0x0000C000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD2_BF_DEF (0x00000000)

///< 1'b0 - Bit formatter output is taken directly to generate Vout  1'b1
///< - Select lower [15:0] from each bit formatter slice to form vout.
///< If compression is disabled, this field internally sets to 0
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_BF_OUT_SEL_BF_OFF (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_BF_OUT_SEL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_BF_OUT_SEL_BF_MSK (0x00010000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_BF_OUT_SEL_BF_DEF (0x00000000)

///< 1'b0 - Bit formatter output [255:0] is cloned to vout [511:256] 1'b1
///< = Bit formatter output [511:256] is cloned to   vout[511:256]
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OUT_WIDTH_SEL_BF_OFF (17)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OUT_WIDTH_SEL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OUT_WIDTH_SEL_BF_MSK (0x00020000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_OUT_WIDTH_SEL_BF_DEF (0x00020000)

///< Reserved.Program to zero.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD3_BF_OFF (18)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD3_BF_WID (14)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD3_BF_MSK (0xFFFC0000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG_CFG_RSVD3_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_TRIG_EN_REG register description at address offset 0x1010
  *
  * Register default value:        0x0001FFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_TRIG_EN_REG
  * TSB read request trigger configuration
  */

typedef union {
  struct {
    uint32_t TSB_RD_TRIG_FILL_LVL : 16;
    ///< Indicates the Tsb fill level at which the read trig should be generated
    ///< max (64KB)
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t TSB_RD_TRIG_ON_HALF_FILL : 1;
    ///< enables the trigger if all valid buffers are half filled
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t TSB_RD_TRIG_EN : 1;
    ///< enables the trigger based on size mentioned in field [16:0]
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_tsb_trig_en_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_DEFAULT (0x0001ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_RD_MASK (0x0003ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_WR_MASK (0x0003ffffU)


///< Indicates the Tsb fill level at which the read trig should be generated
///< max (64KB)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_FILL_LVL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_FILL_LVL_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_FILL_LVL_BF_MSK (0x0000FFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_FILL_LVL_BF_DEF (0x0000FFFF)

///< enables the trigger if all valid buffers are half filled
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_ON_HALF_FILL_BF_OFF (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_ON_HALF_FILL_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_ON_HALF_FILL_BF_MSK (0x00010000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_ON_HALF_FILL_BF_DEF (0x00010000)

///< enables the trigger based on size mentioned in field [16:0]
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_EN_BF_OFF (17)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_EN_BF_MSK (0x00020000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG_TSB_RD_TRIG_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_BUF_FILL_STATUS register description at address offset 0x1014
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_BUF_FILL_STATUS
  * TSB Buffer fill status
  */

typedef union {
  struct {
    uint32_t TSB_HALF_FILL_STATUS : 1;
    ///< This bit indicates all valid tsb buffers have reached half mark.
    ///< The bit set when TSB initially reaches this mark after traffic starts
    ///< and is sticky after that irrespective of the TSB level change.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t TSB_FILL_STATUS : 1;
    ///< This bit indicates all valid buffers have reached programmed fill
    ///< level.                   The bit set when TSB initially reaches this
    ///< mark after traffic starts and is sticky after that irrespective of
    ///< the TSB level change.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t TSB_BUF_OVERFLOW : 1;
    ///< This bit set when there is oveflow in any one of TSB buffers
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_tsb_buf_fill_status_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_RD_MASK (0x00000007U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_WR_MASK (0x00000000U)


///< This bit indicates all valid tsb buffers have reached half mark.
///< The bit set when TSB initially reaches this mark after traffic starts
///< and is sticky after that irrespective of the TSB level change.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_HALF_FILL_STATUS_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_HALF_FILL_STATUS_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_HALF_FILL_STATUS_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_HALF_FILL_STATUS_BF_DEF (0x00000000)

///< This bit indicates all valid buffers have reached programmed fill
///< level.                   The bit set when TSB initially reaches this
///< mark after traffic starts and is sticky after that irrespective of
///< the TSB level change.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_FILL_STATUS_BF_OFF ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_FILL_STATUS_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_FILL_STATUS_BF_MSK (0x00000002)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_FILL_STATUS_BF_DEF (0x00000000)

///< This bit set when there is oveflow in any one of TSB buffers
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_BUF_OVERFLOW_BF_OFF ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_BUF_OVERFLOW_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_BUF_OVERFLOW_BF_MSK (0x00000004)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_TSB_BUF_OVERFLOW_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_MEM_APB_WR register description at address offset 0x1030
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_MEM_APB_WR
  * TX Memory APB writes
  */

typedef union {
  struct {
    uint32_t TRIG_DEBUG_WRITE_TO_MEM : 1;
    ///< Triggers a write to  the memory on address present  tx_mem_apb_addr
    ///< register. The write is valid only  when TSB  data source mode in enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_mem_apb_wr_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_MASK (0x00000001U)


///< Triggers a write to  the memory on address present  tx_mem_apb_addr
///< register. The write is valid only  when TSB  data source mode in enabled
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_TRIG_DEBUG_WRITE_TO_MEM_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_TRIG_DEBUG_WRITE_TO_MEM_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_TRIG_DEBUG_WRITE_TO_MEM_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_TRIG_DEBUG_WRITE_TO_MEM_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_APB_MEM_WADDR register description at address offset 0x1034
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_APB_MEM_WADDR
  * TX Memory APB Write access address
  */

typedef union {
  struct {
    uint32_t TX_MEM_WADDR : 6;
    ///< TX memory write address to be written.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TX_MEM_SEL : 16;
    ///< Inidactes the buffers selected to be written.        Bit 0 : Buf0
    ///< enabled for write and so on.             Multiple buffers can be selected
    ///< to written at once.
    ///< Example 16'b0000_0000_0000_0011   -  buffer 0,1 are selected
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_apb_mem_waddr_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_RD_MASK (0x003fffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_WR_MASK (0x003fffffU)


///< TX memory write address to be written.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_MSK (0x0000003F)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_WADDR_BF_DEF (0x00000000)

///< Inidactes the buffers selected to be written.        Bit 0 : Buf0
///< enabled for write and so on.             Multiple buffers can be selected
///< to written at once.
///< Example 16'b0000_0000_0000_0011   -  buffer 0,1 are selected
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_OFF ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_MSK (0x003FFFC0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_TX_MEM_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_COMP_BITFORMAT_CTL[32] register description at address offset 0x1100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_COMP_BITFORMAT_CTL
  * TX Copression bit format register
  */

typedef union {
  struct {
    uint32_t CFG_MUX_SEL : 6;
    ///< This register controls the bit position of the compressed JESD IQ
    ///< output.             Its value will be different for different compression
    ///< use cases. This value is determined by the output compressed word
    ///< format.            The value of this register can be ranged from 0
    ///< to 47.Rest of the values (48-63) are reserved. This register is used
    ///< only if the compression is enabled.            If compression is disabled,
    ///< this register can be programmed to any value. Each of this register
    ///< goes to the select line of a 48x1 mux used in the design.
    ///< The 48 bit data input of the 48x1 mux consists of the mantissa and
    ///< exponent obtained as the results of compression.            If we
    ///< program this register to 0, 0th bit will be selected from the 48 bit
    ///< input as the mux output.            Similarly, if we program this
    ///< register to value n ,bit [n] of the data input will be selected as
    ///< mux output.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_RD_MASK (0x0000003fU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_WR_MASK (0x0000003fU)


///< This register controls the bit position of the compressed JESD IQ
///< output.             Its value will be different for different compression
///< use cases. This value is determined by the output compressed word
///< format.            The value of this register can be ranged from 0
///< to 47.Rest of the values (48-63) are reserved. This register is used
///< only if the compression is enabled.            If compression is disabled,
///< this register can be programmed to any value. Each of this register
///< goes to the select line of a 48x1 mux used in the design.
///< The 48 bit data input of the 48x1 mux consists of the mantissa and
///< exponent obtained as the results of compression.            If we
///< program this register to 0, 0th bit will be selected from the 48 bit
///< input as the mux output.            Similarly, if we program this
///< register to value n ,bit [n] of the data input will be selected as
///< mux output.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_WID ( 6)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_MSK (0x0000003F)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_CFG_MUX_SEL_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_ARRAY_INST0 (32)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_MEM_ADDR[16] register description at address offset 0x1200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_MEM_ADDR
  * JESD TX Stream Memory Address configuratio Register
  */

typedef union {
  struct {
    uint32_t TX_MEM_BASE_ADDR : 16;
    ///< Tx memory Base address.
    ///< The 512 bit start address offset aligned to 4KB boundary in the TX
    ///< memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_RD_MASK (0x0000ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_WR_MASK (0x0000ffffU)


///< Tx memory Base address.
///< The 512 bit start address offset aligned to 4KB boundary in the TX
///< memory.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_MSK (0x0000FFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_TX_MEM_BASE_ADDR_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_MEM_SIZE[16] register description at address offset 0x1280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_MEM_SIZE
  * JESD Stream MEmory Size Configuration
  */

typedef union {
  struct {
    uint32_t TX_MEM_SIZE : 16;
    ///< Tx memory size.
    ///< The total memory locations allocated to the Stream byte aligned
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_RD_MASK (0x0000ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_WR_MASK (0x0000ffffU)


///< Tx memory size.
///< The total memory locations allocated to the Stream byte aligned
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_MSK (0x0000FFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_TX_MEM_SIZE_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_STRM_MEM_WPTR[16] register description at address offset 0x1300
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_STRM_MEM_WPTR
  * JESD TX Stream Memory Write Pointer
  */

typedef union {
  struct {
    uint32_t TX_MEM_WR_PTR : 16;
    ///< Tx memory write pointer.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_RD_MASK (0x0000ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_WR_MASK (0x00000000U)


///< Tx memory write pointer.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_MSK (0x0000FFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_TX_MEM_WR_PTR_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_MEM_APB_WDATA[16] register description at address offset 0x1380
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_MEM_APB_WDATA
  * TX memory write data word
  */

typedef union {
  struct {
    uint32_t TX_MEM_WDATA_WORD : 32;
    ///< Holds the 32 bit write data to be written in to the memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_WR_MASK (0xffffffffU)


///< Holds the 32 bit write data to be written in to the memory.
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_WID (32)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_MSK (0xFFFFFFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_TX_MEM_WDATA_WORD_BF_DEF (0x00000000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_ARRAY_INST0 (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_NSIP_HALT register description at address offset 0x2000
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/NSIP_HALT
  * NSIP HALT register
  */

typedef union {
  struct {
    uint32_t NSIP_HALT : 1;
    ///< When set to 1 indicates NSIP to complete sending pending data on crux
    ///< interface and stop accepting data from RX glue.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_nsip_halt_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_WR_MASK (0x00000001U)


///< When set to 1 indicates NSIP to complete sending pending data on crux
///< interface and stop accepting data from RX glue.
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_NSIP_HALT_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_NSIP_HALT_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_NSIP_HALT_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_NSIP_HALT_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_LPBK_CTL register description at address offset 0x2004
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/LPBK_CTL
  * JESD SS Loopback Control registers
  */

typedef union {
  struct {
    uint32_t NSIP_OUT_TO_NSIP_IN_LPBK_EN : 1;
    ///< Enables the loopback connection between  NSIP output to TX Glue and
    ///< NSIP input from RX glue, if set to 1.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_GLUE_TO_TX_GLUE_LPBK_EN : 1;
    ///< Enables the loopback connection between RX glue output to NSIP and
    ///< Tx Glue input from NSIP, if set to 1.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TX_GLUE_TO_RX_GLUE_LPBK_EN : 1;
    ///< Enables the loopback connection between TX glue output to JESD IP
    ///< and Rx Glue input from JESD IP, if set to 1.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t JESD_RXIP_TO_TXIP_LOOP_EN : 1;
    ///< Enables the loopback connection between JESD RX IP sample interface
    ///< output and JESD TX IP sample interface input, if set to 1.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t JESD_TXIP_TO_RXIP_LOOP_EN : 1;
    ///< Enables the loopback connection between JESD TX IP serdes interface
    ///< output and JESD RX IP serdes interface input, if set to 1.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_lpbk_ctl_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_RD_MASK (0x0000001fU)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_WR_MASK (0x0000001fU)


///< Enables the loopback connection between  NSIP output to TX Glue and
///< NSIP input from RX glue, if set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_NSIP_OUT_TO_NSIP_IN_LPBK_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between RX glue output to NSIP and
///< Tx Glue input from NSIP, if set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_OFF ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_MSK (0x00000002)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_RX_GLUE_TO_TX_GLUE_LPBK_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between TX glue output to JESD IP
///< and Rx Glue input from JESD IP, if set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_OFF ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_MSK (0x00000004)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_TX_GLUE_TO_RX_GLUE_LPBK_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between JESD RX IP sample interface
///< output and JESD TX IP sample interface input, if set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_OFF ( 3)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_MSK (0x00000008)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_RXIP_TO_TXIP_LOOP_EN_BF_DEF (0x00000000)

///< Enables the loopback connection between JESD TX IP serdes interface
///< output and JESD RX IP serdes interface input, if set to 1.
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_OFF ( 4)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_MSK (0x00000010)
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_JESD_TXIP_TO_RXIP_LOOP_EN_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_NSIP_HALT_DONE register description at address offset 0x2008
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/NSIP_HALT_DONE
  * NSIP HALT DONE register
  */

typedef union {
  struct {
    uint32_t NSIP_HALT_DONE : 1;
    ///< When set to 1 indicates NSIP completed sending pending data on crux
    ///< interface after assrtion of halt input.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_nsip_halt_done_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_RD_MASK (0x00000001U)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_WR_MASK (0x00000000U)


///< When set to 1 indicates NSIP completed sending pending data on crux
///< interface after assrtion of halt input.
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_WID ( 1)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_MSK (0x00000001)
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_NSIP_HALT_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_FULL_WATER_MARK register description at address offset 0x200c
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_FULL_WATER_MARK
  * JESD TX  TSB buffers full water mark
  */

typedef union {
  struct {
    uint32_t TX_BUF_FULL_WATER_MARK : 16;
    ///< Indicates the tsb buffer  full water wark byte aligned
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_tsb_full_water_mark_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_DEFAULT (0x0000ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_RD_MASK (0x0000ffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_WR_MASK (0x0000ffffU)


///< Indicates the tsb buffer  full water wark byte aligned
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_MSK (0x0000FFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_TX_BUF_FULL_WATER_MARK_BF_DEF (0x0000FFFF)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_FULL_STATUS register description at address offset 0x2010
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_FULL_STATUS
  * JESD TX TSB full and almost full  Status
  */

typedef union {
  struct {
    uint32_t TX_BUF_FULL : 16;
    ///< set if tsb buffers are full , each bit corresponds to each stream
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t TX_BUF_ALMOST_FULL : 16;
    ///< set if tsb buffers are almost full , each bit corresponds to each
    ///< stream
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_tsb_full_status_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_RD_MASK (0xffffffffU)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_WR_MASK (0x00000000U)


///< set if tsb buffers are full , each bit corresponds to each stream
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_FULL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_FULL_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_FULL_BF_MSK (0x0000FFFF)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_FULL_BF_DEF (0x00000000)

///< set if tsb buffers are almost full , each bit corresponds to each
///< stream
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_ALMOST_FULL_BF_OFF (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_ALMOST_FULL_BF_WID (16)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_ALMOST_FULL_BF_MSK (0xFFFF0000)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_TX_BUF_ALMOST_FULL_BF_DEF (0x00000000)


/** @brief JESDABC_CRUX_CLK_CSR_MEM_JESDABC_CRUX_CLK_CSR_TX_TSB_CFG register description at address offset 0x2014
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_crux_clk_csr_MEM/jesdabc_crux_clk_csr/TX_TSB_CFG
  * JESD TX TSB config
  */

typedef union {
  struct {
    uint32_t TX_OP_MODE_WHEN_FULL : 2;
    ///< indicates the mode of write operation when tsb buffer is full  'b00
    ///< = override the tsb locations , 'b01 = drop the writes to the TSB
    ///< 'b10 = block the writes to TSB , this will back pressure NSIP  'b11
    ///< = override the TSB location ( same like 'b00)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_crux_clk_csr_mem_tx_tsb_cfg_reg_t;

#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_DEFAULT (0x00000000U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_RD_MASK (0x00000003U)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_WR_MASK (0x00000003U)


///< indicates the mode of write operation when tsb buffer is full  'b00
///< = override the tsb locations , 'b01 = drop the writes to the TSB
///< 'b10 = block the writes to TSB , this will back pressure NSIP  'b11
///< = override the TSB location ( same like 'b00)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_OFF ( 0)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_WID ( 2)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_MSK (0x00000003)
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_TX_OP_MODE_WHEN_FULL_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_REG(_BASE) ((jesdabc_crux_clk_csr_mem_scratch_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_SCRATCH_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_REG(_BASE) ((jesdabc_crux_clk_csr_mem_apb_bridge_status_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_APB_BRIDGE_STATUS_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_cfg_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_CFG_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_mem_stream_cfg_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_MEM_STREAM_CFG_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_top_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_TOP_CTL_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_vnsh_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_VNSH_CTL_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_data_src_en_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_EN_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_data_src_start_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_SRC_START_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_data_cap_frz_en_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_DATA_CAP_FRZ_EN_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_indir_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_INDIR_ADDR_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_rd_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_RD_CTL_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_WR_DATA15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RSB_RD_DATA15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_MEM_TBL15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_MEM_TBL15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_WR_POINTER_TBL15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_RD_POINTER_TBL15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_STRM_MEM_STS15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL16_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL16_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL17_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL17_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL18_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL18_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL19_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL19_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL20_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL20_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL21_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL21_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL22_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL22_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL23_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL23_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL24_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL24_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL25_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL25_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL26_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL26_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL27_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL27_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL28_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL28_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL29_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL29_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL30_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL30_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL31_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_MANTISSA_CTL31_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_RX_DECOMP_EXP_CTL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_vmlga_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_VMLGA_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_vnsh_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_VNSH_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_top_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_TOP_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_tsb_trig_en_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_TRIG_EN_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_tsb_buf_fill_status_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_BUF_FILL_STATUS_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WR_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_apb_mem_waddr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_APB_MEM_WADDR_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL16_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL16_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL17_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL17_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL18_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL18_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL19_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL19_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL20_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL20_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL21_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL21_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL22_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL22_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL23_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL23_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL24_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL24_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL25_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL25_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL26_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL26_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL27_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL27_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL28_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL28_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL29_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL29_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL30_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL30_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL31_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_BITFORMAT_CTL31_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_ADDR15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_SIZE15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_STRM_MEM_WPTR15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA0_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA0_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA1_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA1_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA2_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA2_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA3_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA3_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA4_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA4_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA5_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA5_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA6_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA6_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA7_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA7_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA8_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA8_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA9_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA9_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA10_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA10_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA11_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA11_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA12_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA12_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA13_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA13_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA14_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA14_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA15_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_MEM_APB_WDATA15_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_REG(_BASE) ((jesdabc_crux_clk_csr_mem_nsip_halt_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_REG(_BASE) ((jesdabc_crux_clk_csr_mem_lpbk_ctl_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_LPBK_CTL_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_REG(_BASE) ((jesdabc_crux_clk_csr_mem_nsip_halt_done_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_NSIP_HALT_DONE_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_tsb_full_water_mark_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_WATER_MARK_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_tsb_full_status_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_FULL_STATUS_ADR(_BASE))
#define JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_REG(_BASE) ((jesdabc_crux_clk_csr_mem_tx_tsb_cfg_reg_t*) JESDABC_CRUX_CLK_CSR_MEM_TX_TSB_CFG_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    jesdabc_crux_clk_csr_mem_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesdabc_crux_clk_csr_mem_apb_bridge_status_reg_t APB_BRIDGE_STATUS; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesdabc_crux_clk_csr_mem_rx_strm_cfg_reg_t RX_STRM_CFG; /*< Address offset = 0x10 */
    jesdabc_crux_clk_csr_mem_rx_mem_stream_cfg_reg_t RX_MEM_STREAM_CFG; /*< Address offset = 0x14 */
    jesdabc_crux_clk_csr_mem_rx_decomp_top_ctl_reg_t RX_DECOMP_TOP_CTL; /*< Address offset = 0x18 */
    jesdabc_crux_clk_csr_mem_rx_decomp_vnsh_ctl_reg_t RX_DECOMP_VNSH_CTL; /*< Address offset = 0x1c */
    const uint8_t        reservedArea1 [16];  /*< Address offset = 0x20 */
    jesdabc_crux_clk_csr_mem_rsb_data_src_en_reg_t RSB_DATA_SRC_EN; /*< Address offset = 0x30 */
    jesdabc_crux_clk_csr_mem_rsb_data_src_start_reg_t RSB_DATA_SRC_START; /*< Address offset = 0x34 */
    jesdabc_crux_clk_csr_mem_rsb_data_cap_frz_en_reg_t RSB_DATA_CAP_FRZ_EN; /*< Address offset = 0x38 */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0x3c */
    jesdabc_crux_clk_csr_mem_rsb_indir_addr_reg_t RSB_INDIR_ADDR; /*< Address offset = 0x40 */
    jesdabc_crux_clk_csr_mem_rsb_wr_rd_ctl_reg_t RSB_WR_RD_CTL; /*< Address offset = 0x44 */
    const uint8_t        reservedArea3 [184]; /*< Address offset = 0x48 */
    jesdabc_crux_clk_csr_mem_rsb_wr_data_reg_t RSB_WR_DATA[16]; /*< Address offset = 0x100 */
    const uint8_t        reservedArea4 [64];  /*< Address offset = 0x140 */
    jesdabc_crux_clk_csr_mem_rsb_rd_data_reg_t RSB_RD_DATA[16]; /*< Address offset = 0x180 */
    const uint8_t        reservedArea5 [64];  /*< Address offset = 0x1c0 */
    jesdabc_crux_clk_csr_mem_rx_wr_mem_tbl_reg_t RX_WR_MEM_TBL[16]; /*< Address offset = 0x200 */
    const uint8_t        reservedArea6 [64];  /*< Address offset = 0x240 */
    jesdabc_crux_clk_csr_mem_rx_rd_mem_tbl_reg_t RX_RD_MEM_TBL[16]; /*< Address offset = 0x280 */
    const uint8_t        reservedArea7 [64];  /*< Address offset = 0x2c0 */
    jesdabc_crux_clk_csr_mem_rx_wr_pointer_tbl_reg_t RX_WR_POINTER_TBL[16]; /*< Address offset = 0x300 */
    const uint8_t        reservedArea8 [64];  /*< Address offset = 0x340 */
    jesdabc_crux_clk_csr_mem_rx_rd_pointer_tbl_reg_t RX_RD_POINTER_TBL[16]; /*< Address offset = 0x380 */
    const uint8_t        reservedArea9 [320]; /*< Address offset = 0x3c0 */
    jesdabc_crux_clk_csr_mem_rx_strm_mem_sts_reg_t RX_STRM_MEM_STS[16]; /*< Address offset = 0x500 */
    const uint8_t        reservedArea10 [192]; /*< Address offset = 0x540 */
    jesdabc_crux_clk_csr_mem_rx_decomp_mantissa_ctl_reg_t RX_DECOMP_MANTISSA_CTL[32]; /*< Address offset = 0x600 */
    jesdabc_crux_clk_csr_mem_rx_decomp_exp_ctl_reg_t RX_DECOMP_EXP_CTL[8]; /*< Address offset = 0x680 */
    const uint8_t        reservedArea11 [2400]; /*< Address offset = 0x6a0 */
    jesdabc_crux_clk_csr_mem_tx_vmlga_reg_t TX_VMLGA; /*< Address offset = 0x1000 */
    jesdabc_crux_clk_csr_mem_tx_vnsh_reg_t TX_VNSH; /*< Address offset = 0x1004 */
    jesdabc_crux_clk_csr_mem_tx_top_reg_t TX_TOP; /*< Address offset = 0x1008 */
    const uint8_t        reservedArea12 [4];  /*< Address offset = 0x100c */
    jesdabc_crux_clk_csr_mem_tx_tsb_trig_en_reg_t TX_TSB_TRIG_EN; /*< Address offset = 0x1010 */
    jesdabc_crux_clk_csr_mem_tx_tsb_buf_fill_status_reg_t TX_TSB_BUF_FILL_STATUS; /*< Address offset = 0x1014 */
    const uint8_t        reservedArea13 [24]; /*< Address offset = 0x1018 */
    jesdabc_crux_clk_csr_mem_tx_mem_apb_wr_reg_t TX_MEM_APB_WR; /*< Address offset = 0x1030 */
    jesdabc_crux_clk_csr_mem_tx_apb_mem_waddr_reg_t TX_APB_MEM_WADDR; /*< Address offset = 0x1034 */
    const uint8_t        reservedArea14 [200]; /*< Address offset = 0x1038 */
    jesdabc_crux_clk_csr_mem_tx_bitformat_ctl_reg_t TX_BITFORMAT_CTL[32]; /*< Address offset = 0x1100 */
    const uint8_t        reservedArea15 [128]; /*< Address offset = 0x1180 */
    jesdabc_crux_clk_csr_mem_tx_strm_mem_addr_reg_t TX_STRM_MEM_ADDR[16]; /*< Address offset = 0x1200 */
    const uint8_t        reservedArea16 [64]; /*< Address offset = 0x1240 */
    jesdabc_crux_clk_csr_mem_tx_strm_mem_size_reg_t TX_STRM_MEM_SIZE[16]; /*< Address offset = 0x1280 */
    const uint8_t        reservedArea17 [64]; /*< Address offset = 0x12c0 */
    jesdabc_crux_clk_csr_mem_tx_strm_mem_wptr_reg_t TX_STRM_MEM_WPTR[16]; /*< Address offset = 0x1300 */
    const uint8_t        reservedArea18 [64]; /*< Address offset = 0x1340 */
    jesdabc_crux_clk_csr_mem_tx_mem_apb_wdata_reg_t TX_MEM_APB_WDATA[16]; /*< Address offset = 0x1380 */
    const uint8_t        reservedArea19 [3136]; /*< Address offset = 0x13c0 */
    jesdabc_crux_clk_csr_mem_nsip_halt_reg_t NSIP_HALT; /*< Address offset = 0x2000 */
    jesdabc_crux_clk_csr_mem_lpbk_ctl_reg_t LPBK_CTL; /*< Address offset = 0x2004 */
    jesdabc_crux_clk_csr_mem_nsip_halt_done_reg_t NSIP_HALT_DONE; /*< Address offset = 0x2008 */
    jesdabc_crux_clk_csr_mem_tx_tsb_full_water_mark_reg_t TX_TSB_FULL_WATER_MARK; /*< Address offset = 0x200c */
    jesdabc_crux_clk_csr_mem_tx_tsb_full_status_reg_t TX_TSB_FULL_STATUS; /*< Address offset = 0x2010 */
    jesdabc_crux_clk_csr_mem_tx_tsb_cfg_reg_t TX_TSB_CFG; /*< Address offset = 0x2014 */
} jesdabc_crux_clk_csr_t;     // size: 0x0098

// AddressSpace struct pointer
//
#define DLNK_JESDABC0_CRUX_CLK_CSR ((jesdabc_crux_clk_csr_t*) DLNK_JESDABC0_CRUX_CLK_CSR_BASE)
#define DLNK_JESDABC1_CRUX_CLK_CSR ((jesdabc_crux_clk_csr_t*) DLNK_JESDABC1_CRUX_CLK_CSR_BASE)
#define DLNK_JESDABC2_CRUX_CLK_CSR ((jesdabc_crux_clk_csr_t*) DLNK_JESDABC2_CRUX_CLK_CSR_BASE)
#define DLNK_JESDABC3_CRUX_CLK_CSR ((jesdabc_crux_clk_csr_t*) DLNK_JESDABC3_CRUX_CLK_CSR_BASE)

// ******************************************* /Address Space

#endif      // _JESDABC_CRUX_CLK_CSR_H_

