#ifndef _NSIP_HBI_H_
#define _NSIP_HBI_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_CRUX_NSIP_HBI_BASE           ( 0x00274000 )
#define DLNK_JESD0_NSIP_HBI_CSR_BASE     ( 0x06704000 )
#define DLNK_JESD1_NSIP_HBI_CSR_BASE     ( 0x06f04000 )
#define DLNK_JESD2_NSIP_HBI_CSR_BASE     ( 0x07704000 )
#define DLNK_JESD3_NSIP_HBI_CSR_BASE     ( 0x07f04000 )
#define V2D0_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x03818000 )
#define V2D0_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x03819000 )
#define V2D0_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x03838000 )
#define V2D0_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x03839000 )
#define V2D1_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x03858000 )
#define V2D1_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x03859000 )
#define V2D1_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x03878000 )
#define V2D1_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x03879000 )
#define V2D2_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x03898000 )
#define V2D2_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x03899000 )
#define V2D2_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x038b8000 )
#define V2D2_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x038b9000 )
#define V2D3_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x038d8000 )
#define V2D3_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x038d9000 )
#define V2D3_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x038f8000 )
#define V2D3_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x038f9000 )
#define V2D4_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x03918000 )
#define V2D4_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x03919000 )
#define V2D4_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x03938000 )
#define V2D4_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x03939000 )
#define V2D5_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x03958000 )
#define V2D5_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x03959000 )
#define V2D5_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x03978000 )
#define V2D5_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x03979000 )
#define V2D6_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x03998000 )
#define V2D6_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x03999000 )
#define V2D6_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x039b8000 )
#define V2D6_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x039b9000 )
#define V2D7_AV2D_APB_0_NSIP_HBI_0_BASE  ( 0x039d8000 )
#define V2D7_AV2D_APB_0_NSIP_HBI_1_BASE  ( 0x039d9000 )
#define V2D7_AV2D_APB_1_NSIP_HBI_0_BASE  ( 0x039f8000 )
#define V2D7_AV2D_APB_1_NSIP_HBI_1_BASE  ( 0x039f9000 )
#define VHA0_ANT0_NSIP_HBI_CSR_BASE      ( 0x03c04000 )
#define VHA0_ANT1_NSIP_HBI_CSR_BASE      ( 0x03c14000 )
#define VHA1_ANT0_NSIP_HBI_CSR_BASE      ( 0x03c24000 )
#define VHA1_ANT1_NSIP_HBI_CSR_BASE      ( 0x03c34000 )
#define VHA2_ANT0_NSIP_HBI_CSR_BASE      ( 0x03c44000 )
#define VHA2_ANT1_NSIP_HBI_CSR_BASE      ( 0x03c54000 )
#define VHA3_ANT0_NSIP_HBI_CSR_BASE      ( 0x03c64000 )
#define VHA3_ANT1_NSIP_HBI_CSR_BASE      ( 0x03c74000 )
#define VHA4_ANT0_NSIP_HBI_CSR_BASE      ( 0x03c84000 )
#define VHA4_ANT1_NSIP_HBI_CSR_BASE      ( 0x03c94000 )
#define VHA5_ANT0_NSIP_HBI_CSR_BASE      ( 0x03ca4000 )
#define VHA5_ANT1_NSIP_HBI_CSR_BASE      ( 0x03cb4000 )
#define VHA6_ANT0_NSIP_HBI_CSR_BASE      ( 0x03cc4000 )
#define VHA6_ANT1_NSIP_HBI_CSR_BASE      ( 0x03cd4000 )
#define VHA7_ANT0_NSIP_HBI_CSR_BASE      ( 0x03ce4000 )
#define VHA7_ANT1_NSIP_HBI_CSR_BASE      ( 0x03cf4000 )
#define MEM_FB0_NSIP_HBI_0_BASE          ( 0x04504000 )
#define MEM_FB0_NSIP_HBI_1_BASE          ( 0x04505000 )
#define MEM_FB1_NSIP_HBI_0_BASE          ( 0x04704000 )
#define MEM_FB1_NSIP_HBI_1_BASE          ( 0x04705000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define NSIP_HBI_SCRATCH_OFFSET  ( 0x00000000U )
#define NSIP_HBI_APB_BRDG_STAT_OFFSET ( 0x00000004U )
#define NSIP_HBI_B2H_FF_FIFO_CTRL_OFFSET ( 0x00000008U )
#define NSIP_HBI_B2H_FF_FIFO_STAT_OFFSET ( 0x0000000cU )
#define NSIP_HBI_B2H_CSR_CREDIT_CS_OFFSET ( 0x00000010U )
#define NSIP_HBI_B2H_CSR_FLIT_CNT_OFFSET ( 0x00000014U )
#define NSIP_HBI_B2H_CSR_INSERT_STRM_OFFSET ( 0x00000020U )
#define NSIP_HBI_B2H_CSR_INSERT_STATE_OFFSET ( 0x00000024U )
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_OFFSET ( 0x00000028U )
#define NSIP_HBI_INSERT_QUE_CSR0_B2H_CSR_OFFSET ( 0x00000030U )
#define NSIP_HBI_INSERT_QUE_CSR0_B2H_NULL_SAMPLE_OFFSET ( 0x00000034U )
#define NSIP_HBI_INSERT_QUE_CSR0_CMD_STRM_EN_OFFSET ( 0x00000038U )
#define NSIP_HBI_INSERT_QUE_CSR0_CMD_CTRL_OFFSET ( 0x0000003cU )
#define NSIP_HBI_INSERT_QUE_CSR1_B2H_CSR_OFFSET ( 0x00000040U )
#define NSIP_HBI_INSERT_QUE_CSR1_B2H_NULL_SAMPLE_OFFSET ( 0x00000044U )
#define NSIP_HBI_INSERT_QUE_CSR1_CMD_STRM_EN_OFFSET ( 0x00000048U )
#define NSIP_HBI_INSERT_QUE_CSR1_CMD_CTRL_OFFSET ( 0x0000004cU )
#define NSIP_HBI_INTR_INT_STAT_OFFSET ( 0x00000080U )
#define NSIP_HBI_INTR_INT_HIGH_EN_OFFSET ( 0x00000084U )
#define NSIP_HBI_INTR_INT_LOW_EN_OFFSET ( 0x00000088U )
#define NSIP_HBI_INTR_INT_CLR_OFFSET ( 0x0000008cU )
#define NSIP_HBI_INTR_INT_FORCE_OFFSET ( 0x00000090U )
#define NSIP_HBI_SMON_SMON00_OFFSET ( 0x000000a0U )
#define NSIP_HBI_SMON_SMON01_OFFSET ( 0x000000a4U )
#define NSIP_HBI_SMON_SMON02_OFFSET ( 0x000000a8U )
#define NSIP_HBI_SMON_SMON03_OFFSET ( 0x000000acU )
#define NSIP_HBI_SMON_SMON04_OFFSET ( 0x000000b0U )
#define NSIP_HBI_SMON_SMON05_OFFSET ( 0x000000b4U )
#define NSIP_HBI_SMON_SMON06_OFFSET ( 0x000000b8U )
#define NSIP_HBI_SMON_SMON07_OFFSET ( 0x000000bcU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL0_OFFSET ( 0x00000100U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL1_OFFSET ( 0x00000104U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL2_OFFSET ( 0x00000108U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL3_OFFSET ( 0x0000010cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL4_OFFSET ( 0x00000110U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL5_OFFSET ( 0x00000114U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL6_OFFSET ( 0x00000118U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL7_OFFSET ( 0x0000011cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL8_OFFSET ( 0x00000120U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL9_OFFSET ( 0x00000124U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL10_OFFSET ( 0x00000128U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL11_OFFSET ( 0x0000012cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL12_OFFSET ( 0x00000130U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL13_OFFSET ( 0x00000134U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL14_OFFSET ( 0x00000138U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL15_OFFSET ( 0x0000013cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL16_OFFSET ( 0x00000140U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL17_OFFSET ( 0x00000144U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL18_OFFSET ( 0x00000148U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL19_OFFSET ( 0x0000014cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL20_OFFSET ( 0x00000150U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL21_OFFSET ( 0x00000154U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL22_OFFSET ( 0x00000158U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL23_OFFSET ( 0x0000015cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL24_OFFSET ( 0x00000160U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL25_OFFSET ( 0x00000164U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL26_OFFSET ( 0x00000168U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL27_OFFSET ( 0x0000016cU )
#define NSIP_HBI_B2H_CSR_ADDR_TBL28_OFFSET ( 0x00000170U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL29_OFFSET ( 0x00000174U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL30_OFFSET ( 0x00000178U )
#define NSIP_HBI_B2H_CSR_ADDR_TBL31_OFFSET ( 0x0000017cU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL0_OFFSET ( 0x00000180U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL1_OFFSET ( 0x00000184U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL2_OFFSET ( 0x00000188U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL3_OFFSET ( 0x0000018cU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL4_OFFSET ( 0x00000190U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL5_OFFSET ( 0x00000194U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL6_OFFSET ( 0x00000198U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL7_OFFSET ( 0x0000019cU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL8_OFFSET ( 0x000001a0U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL9_OFFSET ( 0x000001a4U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL10_OFFSET ( 0x000001a8U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL11_OFFSET ( 0x000001acU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL12_OFFSET ( 0x000001b0U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL13_OFFSET ( 0x000001b4U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL14_OFFSET ( 0x000001b8U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL15_OFFSET ( 0x000001bcU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL16_OFFSET ( 0x000001c0U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL17_OFFSET ( 0x000001c4U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL18_OFFSET ( 0x000001c8U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL19_OFFSET ( 0x000001ccU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL20_OFFSET ( 0x000001d0U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL21_OFFSET ( 0x000001d4U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL22_OFFSET ( 0x000001d8U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL23_OFFSET ( 0x000001dcU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL24_OFFSET ( 0x000001e0U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL25_OFFSET ( 0x000001e4U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL26_OFFSET ( 0x000001e8U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL27_OFFSET ( 0x000001ecU )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL28_OFFSET ( 0x000001f0U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL29_OFFSET ( 0x000001f4U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL30_OFFSET ( 0x000001f8U )
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL31_OFFSET ( 0x000001fcU )
#define NSIP_HBI_H2B_FF_FIFO_CTRL_OFFSET ( 0x00000308U )
#define NSIP_HBI_H2B_FF_FIFO_STAT_OFFSET ( 0x0000030cU )
#define NSIP_HBI_H2B_CREDIT_READY_CS_OFFSET ( 0x00000310U )
#define NSIP_HBI_H2B_FLIT_CNT_OFFSET ( 0x00000314U )
#define NSIP_HBI_H2B_MISC_CSR_OFFSET ( 0x00000318U )
#define NSIP_HBI_MD_CMD_STRM_EN_OFFSET ( 0x00000320U )
#define NSIP_HBI_MD_CMD_MSG_OFFSET ( 0x00000324U )
#define NSIP_HBI_MD_CMD_CTRL_OFFSET ( 0x00000328U )
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_OFFSET ( 0x00000330U )
#define NSIP_HBI_SCNT_PRL_STRM_EN_OFFSET ( 0x00000334U )
#define NSIP_HBI_DROP_CMD0_CMD_STRM_EN_OFFSET ( 0x00000340U )
#define NSIP_HBI_DROP_CMD0_CMD_CTRL_OFFSET ( 0x00000344U )
#define NSIP_HBI_DROP_CMD1_CMD_STRM_EN_OFFSET ( 0x00000348U )
#define NSIP_HBI_DROP_CMD1_CMD_CTRL_OFFSET ( 0x0000034cU )
#define NSIP_HBI_H2B_DROP_STATE_OFFSET ( 0x00000350U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL0_OFFSET ( 0x00000380U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL1_OFFSET ( 0x00000384U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL2_OFFSET ( 0x00000388U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL3_OFFSET ( 0x0000038cU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL4_OFFSET ( 0x00000390U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL5_OFFSET ( 0x00000394U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL6_OFFSET ( 0x00000398U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL7_OFFSET ( 0x0000039cU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL8_OFFSET ( 0x000003a0U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL9_OFFSET ( 0x000003a4U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL10_OFFSET ( 0x000003a8U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL11_OFFSET ( 0x000003acU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL12_OFFSET ( 0x000003b0U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL13_OFFSET ( 0x000003b4U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL14_OFFSET ( 0x000003b8U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL15_OFFSET ( 0x000003bcU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL16_OFFSET ( 0x000003c0U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL17_OFFSET ( 0x000003c4U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL18_OFFSET ( 0x000003c8U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL19_OFFSET ( 0x000003ccU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL20_OFFSET ( 0x000003d0U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL21_OFFSET ( 0x000003d4U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL22_OFFSET ( 0x000003d8U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL23_OFFSET ( 0x000003dcU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL24_OFFSET ( 0x000003e0U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL25_OFFSET ( 0x000003e4U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL26_OFFSET ( 0x000003e8U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL27_OFFSET ( 0x000003ecU )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL28_OFFSET ( 0x000003f0U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL29_OFFSET ( 0x000003f4U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL30_OFFSET ( 0x000003f8U )
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL31_OFFSET ( 0x000003fcU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL0_OFFSET ( 0x00000400U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL1_OFFSET ( 0x00000404U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL2_OFFSET ( 0x00000408U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL3_OFFSET ( 0x0000040cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL4_OFFSET ( 0x00000410U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL5_OFFSET ( 0x00000414U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL6_OFFSET ( 0x00000418U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL7_OFFSET ( 0x0000041cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL8_OFFSET ( 0x00000420U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL9_OFFSET ( 0x00000424U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL10_OFFSET ( 0x00000428U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL11_OFFSET ( 0x0000042cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL12_OFFSET ( 0x00000430U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL13_OFFSET ( 0x00000434U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL14_OFFSET ( 0x00000438U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL15_OFFSET ( 0x0000043cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL16_OFFSET ( 0x00000440U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL17_OFFSET ( 0x00000444U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL18_OFFSET ( 0x00000448U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL19_OFFSET ( 0x0000044cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL20_OFFSET ( 0x00000450U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL21_OFFSET ( 0x00000454U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL22_OFFSET ( 0x00000458U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL23_OFFSET ( 0x0000045cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL24_OFFSET ( 0x00000460U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL25_OFFSET ( 0x00000464U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL26_OFFSET ( 0x00000468U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL27_OFFSET ( 0x0000046cU )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL28_OFFSET ( 0x00000470U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL29_OFFSET ( 0x00000474U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL30_OFFSET ( 0x00000478U )
#define NSIP_HBI_H2B_ADDR_LKUP_TBL31_OFFSET ( 0x0000047cU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL0_OFFSET ( 0x00000480U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL1_OFFSET ( 0x00000484U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL2_OFFSET ( 0x00000488U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL3_OFFSET ( 0x0000048cU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL4_OFFSET ( 0x00000490U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL5_OFFSET ( 0x00000494U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL6_OFFSET ( 0x00000498U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL7_OFFSET ( 0x0000049cU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL8_OFFSET ( 0x000004a0U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL9_OFFSET ( 0x000004a4U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL10_OFFSET ( 0x000004a8U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL11_OFFSET ( 0x000004acU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL12_OFFSET ( 0x000004b0U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL13_OFFSET ( 0x000004b4U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL14_OFFSET ( 0x000004b8U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL15_OFFSET ( 0x000004bcU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL16_OFFSET ( 0x000004c0U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL17_OFFSET ( 0x000004c4U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL18_OFFSET ( 0x000004c8U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL19_OFFSET ( 0x000004ccU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL20_OFFSET ( 0x000004d0U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL21_OFFSET ( 0x000004d4U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL22_OFFSET ( 0x000004d8U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL23_OFFSET ( 0x000004dcU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL24_OFFSET ( 0x000004e0U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL25_OFFSET ( 0x000004e4U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL26_OFFSET ( 0x000004e8U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL27_OFFSET ( 0x000004ecU )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL28_OFFSET ( 0x000004f0U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL29_OFFSET ( 0x000004f4U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL30_OFFSET ( 0x000004f8U )
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL31_OFFSET ( 0x000004fcU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL0_OFFSET ( 0x00000500U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL1_OFFSET ( 0x00000504U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL2_OFFSET ( 0x00000508U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL3_OFFSET ( 0x0000050cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL4_OFFSET ( 0x00000510U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL5_OFFSET ( 0x00000514U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL6_OFFSET ( 0x00000518U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL7_OFFSET ( 0x0000051cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL8_OFFSET ( 0x00000520U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL9_OFFSET ( 0x00000524U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL10_OFFSET ( 0x00000528U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL11_OFFSET ( 0x0000052cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL12_OFFSET ( 0x00000530U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL13_OFFSET ( 0x00000534U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL14_OFFSET ( 0x00000538U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL15_OFFSET ( 0x0000053cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL16_OFFSET ( 0x00000540U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL17_OFFSET ( 0x00000544U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL18_OFFSET ( 0x00000548U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL19_OFFSET ( 0x0000054cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL20_OFFSET ( 0x00000550U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL21_OFFSET ( 0x00000554U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL22_OFFSET ( 0x00000558U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL23_OFFSET ( 0x0000055cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL24_OFFSET ( 0x00000560U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL25_OFFSET ( 0x00000564U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL26_OFFSET ( 0x00000568U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL27_OFFSET ( 0x0000056cU )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL28_OFFSET ( 0x00000570U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL29_OFFSET ( 0x00000574U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL30_OFFSET ( 0x00000578U )
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL31_OFFSET ( 0x0000057cU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL0_OFFSET ( 0x00000580U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL1_OFFSET ( 0x00000584U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL2_OFFSET ( 0x00000588U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL3_OFFSET ( 0x0000058cU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL4_OFFSET ( 0x00000590U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL5_OFFSET ( 0x00000594U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL6_OFFSET ( 0x00000598U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL7_OFFSET ( 0x0000059cU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL8_OFFSET ( 0x000005a0U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL9_OFFSET ( 0x000005a4U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL10_OFFSET ( 0x000005a8U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL11_OFFSET ( 0x000005acU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL12_OFFSET ( 0x000005b0U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL13_OFFSET ( 0x000005b4U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL14_OFFSET ( 0x000005b8U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL15_OFFSET ( 0x000005bcU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL16_OFFSET ( 0x000005c0U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL17_OFFSET ( 0x000005c4U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL18_OFFSET ( 0x000005c8U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL19_OFFSET ( 0x000005ccU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL20_OFFSET ( 0x000005d0U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL21_OFFSET ( 0x000005d4U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL22_OFFSET ( 0x000005d8U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL23_OFFSET ( 0x000005dcU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL24_OFFSET ( 0x000005e0U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL25_OFFSET ( 0x000005e4U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL26_OFFSET ( 0x000005e8U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL27_OFFSET ( 0x000005ecU )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL28_OFFSET ( 0x000005f0U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL29_OFFSET ( 0x000005f4U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL30_OFFSET ( 0x000005f8U )
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL31_OFFSET ( 0x000005fcU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL0_OFFSET ( 0x00000600U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL1_OFFSET ( 0x00000604U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL2_OFFSET ( 0x00000608U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL3_OFFSET ( 0x0000060cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL4_OFFSET ( 0x00000610U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL5_OFFSET ( 0x00000614U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL6_OFFSET ( 0x00000618U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL7_OFFSET ( 0x0000061cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL8_OFFSET ( 0x00000620U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL9_OFFSET ( 0x00000624U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL10_OFFSET ( 0x00000628U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL11_OFFSET ( 0x0000062cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL12_OFFSET ( 0x00000630U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL13_OFFSET ( 0x00000634U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL14_OFFSET ( 0x00000638U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL15_OFFSET ( 0x0000063cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL16_OFFSET ( 0x00000640U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL17_OFFSET ( 0x00000644U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL18_OFFSET ( 0x00000648U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL19_OFFSET ( 0x0000064cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL20_OFFSET ( 0x00000650U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL21_OFFSET ( 0x00000654U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL22_OFFSET ( 0x00000658U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL23_OFFSET ( 0x0000065cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL24_OFFSET ( 0x00000660U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL25_OFFSET ( 0x00000664U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL26_OFFSET ( 0x00000668U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL27_OFFSET ( 0x0000066cU )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL28_OFFSET ( 0x00000670U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL29_OFFSET ( 0x00000674U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL30_OFFSET ( 0x00000678U )
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL31_OFFSET ( 0x0000067cU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL0_OFFSET ( 0x00000680U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL1_OFFSET ( 0x00000684U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL2_OFFSET ( 0x00000688U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL3_OFFSET ( 0x0000068cU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL4_OFFSET ( 0x00000690U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL5_OFFSET ( 0x00000694U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL6_OFFSET ( 0x00000698U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL7_OFFSET ( 0x0000069cU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL8_OFFSET ( 0x000006a0U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL9_OFFSET ( 0x000006a4U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL10_OFFSET ( 0x000006a8U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL11_OFFSET ( 0x000006acU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL12_OFFSET ( 0x000006b0U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL13_OFFSET ( 0x000006b4U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL14_OFFSET ( 0x000006b8U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL15_OFFSET ( 0x000006bcU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL16_OFFSET ( 0x000006c0U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL17_OFFSET ( 0x000006c4U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL18_OFFSET ( 0x000006c8U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL19_OFFSET ( 0x000006ccU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL20_OFFSET ( 0x000006d0U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL21_OFFSET ( 0x000006d4U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL22_OFFSET ( 0x000006d8U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL23_OFFSET ( 0x000006dcU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL24_OFFSET ( 0x000006e0U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL25_OFFSET ( 0x000006e4U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL26_OFFSET ( 0x000006e8U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL27_OFFSET ( 0x000006ecU )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL28_OFFSET ( 0x000006f0U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL29_OFFSET ( 0x000006f4U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL30_OFFSET ( 0x000006f8U )
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL31_OFFSET ( 0x000006fcU )
#define NSIP_HBI_H2B_MD_CTRL_TBL0_OFFSET ( 0x00000700U )
#define NSIP_HBI_H2B_MD_CTRL_TBL1_OFFSET ( 0x00000704U )
#define NSIP_HBI_H2B_MD_CTRL_TBL2_OFFSET ( 0x00000708U )
#define NSIP_HBI_H2B_MD_CTRL_TBL3_OFFSET ( 0x0000070cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL4_OFFSET ( 0x00000710U )
#define NSIP_HBI_H2B_MD_CTRL_TBL5_OFFSET ( 0x00000714U )
#define NSIP_HBI_H2B_MD_CTRL_TBL6_OFFSET ( 0x00000718U )
#define NSIP_HBI_H2B_MD_CTRL_TBL7_OFFSET ( 0x0000071cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL8_OFFSET ( 0x00000720U )
#define NSIP_HBI_H2B_MD_CTRL_TBL9_OFFSET ( 0x00000724U )
#define NSIP_HBI_H2B_MD_CTRL_TBL10_OFFSET ( 0x00000728U )
#define NSIP_HBI_H2B_MD_CTRL_TBL11_OFFSET ( 0x0000072cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL12_OFFSET ( 0x00000730U )
#define NSIP_HBI_H2B_MD_CTRL_TBL13_OFFSET ( 0x00000734U )
#define NSIP_HBI_H2B_MD_CTRL_TBL14_OFFSET ( 0x00000738U )
#define NSIP_HBI_H2B_MD_CTRL_TBL15_OFFSET ( 0x0000073cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL16_OFFSET ( 0x00000740U )
#define NSIP_HBI_H2B_MD_CTRL_TBL17_OFFSET ( 0x00000744U )
#define NSIP_HBI_H2B_MD_CTRL_TBL18_OFFSET ( 0x00000748U )
#define NSIP_HBI_H2B_MD_CTRL_TBL19_OFFSET ( 0x0000074cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL20_OFFSET ( 0x00000750U )
#define NSIP_HBI_H2B_MD_CTRL_TBL21_OFFSET ( 0x00000754U )
#define NSIP_HBI_H2B_MD_CTRL_TBL22_OFFSET ( 0x00000758U )
#define NSIP_HBI_H2B_MD_CTRL_TBL23_OFFSET ( 0x0000075cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL24_OFFSET ( 0x00000760U )
#define NSIP_HBI_H2B_MD_CTRL_TBL25_OFFSET ( 0x00000764U )
#define NSIP_HBI_H2B_MD_CTRL_TBL26_OFFSET ( 0x00000768U )
#define NSIP_HBI_H2B_MD_CTRL_TBL27_OFFSET ( 0x0000076cU )
#define NSIP_HBI_H2B_MD_CTRL_TBL28_OFFSET ( 0x00000770U )
#define NSIP_HBI_H2B_MD_CTRL_TBL29_OFFSET ( 0x00000774U )
#define NSIP_HBI_H2B_MD_CTRL_TBL30_OFFSET ( 0x00000778U )
#define NSIP_HBI_H2B_MD_CTRL_TBL31_OFFSET ( 0x0000077cU )
#define NSIP_HBI_H2B_SCNT_TK_PTR0_OFFSET ( 0x00000780U )
#define NSIP_HBI_H2B_SCNT_TK_PTR1_OFFSET ( 0x00000784U )
#define NSIP_HBI_H2B_SCNT_TK_PTR2_OFFSET ( 0x00000788U )
#define NSIP_HBI_H2B_SCNT_TK_PTR3_OFFSET ( 0x0000078cU )
#define NSIP_HBI_H2B_SCNT_TK_PTR4_OFFSET ( 0x00000790U )
#define NSIP_HBI_H2B_SCNT_TK_PTR5_OFFSET ( 0x00000794U )
#define NSIP_HBI_H2B_SCNT_TK_PTR6_OFFSET ( 0x00000798U )
#define NSIP_HBI_H2B_SCNT_TK_PTR7_OFFSET ( 0x0000079cU )
#define NSIP_HBI_H2B_SCNT_TK_PTR8_OFFSET ( 0x000007a0U )
#define NSIP_HBI_H2B_SCNT_TK_PTR9_OFFSET ( 0x000007a4U )
#define NSIP_HBI_H2B_SCNT_TK_PTR10_OFFSET ( 0x000007a8U )
#define NSIP_HBI_H2B_SCNT_TK_PTR11_OFFSET ( 0x000007acU )
#define NSIP_HBI_H2B_SCNT_TK_PTR12_OFFSET ( 0x000007b0U )
#define NSIP_HBI_H2B_SCNT_TK_PTR13_OFFSET ( 0x000007b4U )
#define NSIP_HBI_H2B_SCNT_TK_PTR14_OFFSET ( 0x000007b8U )
#define NSIP_HBI_H2B_SCNT_TK_PTR15_OFFSET ( 0x000007bcU )
#define NSIP_HBI_H2B_SCNT_TK_PTR16_OFFSET ( 0x000007c0U )
#define NSIP_HBI_H2B_SCNT_TK_PTR17_OFFSET ( 0x000007c4U )
#define NSIP_HBI_H2B_SCNT_TK_PTR18_OFFSET ( 0x000007c8U )
#define NSIP_HBI_H2B_SCNT_TK_PTR19_OFFSET ( 0x000007ccU )
#define NSIP_HBI_H2B_SCNT_TK_PTR20_OFFSET ( 0x000007d0U )
#define NSIP_HBI_H2B_SCNT_TK_PTR21_OFFSET ( 0x000007d4U )
#define NSIP_HBI_H2B_SCNT_TK_PTR22_OFFSET ( 0x000007d8U )
#define NSIP_HBI_H2B_SCNT_TK_PTR23_OFFSET ( 0x000007dcU )
#define NSIP_HBI_H2B_SCNT_TK_PTR24_OFFSET ( 0x000007e0U )
#define NSIP_HBI_H2B_SCNT_TK_PTR25_OFFSET ( 0x000007e4U )
#define NSIP_HBI_H2B_SCNT_TK_PTR26_OFFSET ( 0x000007e8U )
#define NSIP_HBI_H2B_SCNT_TK_PTR27_OFFSET ( 0x000007ecU )
#define NSIP_HBI_H2B_SCNT_TK_PTR28_OFFSET ( 0x000007f0U )
#define NSIP_HBI_H2B_SCNT_TK_PTR29_OFFSET ( 0x000007f4U )
#define NSIP_HBI_H2B_SCNT_TK_PTR30_OFFSET ( 0x000007f8U )
#define NSIP_HBI_H2B_SCNT_TK_PTR31_OFFSET ( 0x000007fcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define NSIP_HBI_SCRATCH_ADR(_BASE)     (( ( _BASE ) + ( NSIP_HBI_SCRATCH_OFFSET ) ))
#define NSIP_HBI_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_APB_BRDG_STAT_OFFSET ) ))
#define NSIP_HBI_B2H_FF_FIFO_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_FF_FIFO_CTRL_OFFSET ) ))
#define NSIP_HBI_B2H_FF_FIFO_STAT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_FF_FIFO_STAT_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_CREDIT_CS_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_CREDIT_CS_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_FLIT_CNT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_FLIT_CNT_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_INSERT_STRM_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_INSERT_STRM_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_INSERT_STATE_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_INSERT_STATE_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_INSERT_CTRL_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR0_B2H_CSR_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR0_B2H_CSR_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR0_B2H_NULL_SAMPLE_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR0_B2H_NULL_SAMPLE_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR0_CMD_STRM_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR0_CMD_STRM_EN_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR0_CMD_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR0_CMD_CTRL_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR1_B2H_CSR_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR1_B2H_CSR_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR1_B2H_NULL_SAMPLE_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR1_B2H_NULL_SAMPLE_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR1_CMD_STRM_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR1_CMD_STRM_EN_OFFSET ) ))
#define NSIP_HBI_INSERT_QUE_CSR1_CMD_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INSERT_QUE_CSR1_CMD_CTRL_OFFSET ) ))
#define NSIP_HBI_INTR_INT_STAT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INTR_INT_STAT_OFFSET ) ))
#define NSIP_HBI_INTR_INT_HIGH_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INTR_INT_HIGH_EN_OFFSET ) ))
#define NSIP_HBI_INTR_INT_LOW_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INTR_INT_LOW_EN_OFFSET ) ))
#define NSIP_HBI_INTR_INT_CLR_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INTR_INT_CLR_OFFSET ) ))
#define NSIP_HBI_INTR_INT_FORCE_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_INTR_INT_FORCE_OFFSET ) ))
#define NSIP_HBI_SMON_SMON00_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON00_OFFSET ) ))
#define NSIP_HBI_SMON_SMON01_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON01_OFFSET ) ))
#define NSIP_HBI_SMON_SMON02_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON02_OFFSET ) ))
#define NSIP_HBI_SMON_SMON03_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON03_OFFSET ) ))
#define NSIP_HBI_SMON_SMON04_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON04_OFFSET ) ))
#define NSIP_HBI_SMON_SMON05_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON05_OFFSET ) ))
#define NSIP_HBI_SMON_SMON06_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON06_OFFSET ) ))
#define NSIP_HBI_SMON_SMON07_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SMON_SMON07_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL0_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL1_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL2_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL3_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL4_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL5_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL6_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL7_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL8_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL9_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL10_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL11_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL12_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL13_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL14_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL15_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL16_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL17_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL18_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL19_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL20_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL21_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL22_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL23_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL24_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL25_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL26_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL27_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL28_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL29_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL30_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_TBL31_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL0_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL1_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL2_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL3_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL4_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL5_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL6_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL7_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL8_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL9_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL10_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL11_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL12_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL13_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL14_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL15_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL16_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL17_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL18_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL19_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL20_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL21_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL22_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL23_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL24_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL25_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL26_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL27_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL28_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL29_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL30_OFFSET ) ))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_B2H_CSR_ADDR_MASK_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_FF_FIFO_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_FF_FIFO_CTRL_OFFSET ) ))
#define NSIP_HBI_H2B_FF_FIFO_STAT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_FF_FIFO_STAT_OFFSET ) ))
#define NSIP_HBI_H2B_CREDIT_READY_CS_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_CREDIT_READY_CS_OFFSET ) ))
#define NSIP_HBI_H2B_FLIT_CNT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_FLIT_CNT_OFFSET ) ))
#define NSIP_HBI_H2B_MISC_CSR_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MISC_CSR_OFFSET ) ))
#define NSIP_HBI_MD_CMD_STRM_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_MD_CMD_STRM_EN_OFFSET ) ))
#define NSIP_HBI_MD_CMD_MSG_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_MD_CMD_MSG_OFFSET ) ))
#define NSIP_HBI_MD_CMD_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_MD_CMD_CTRL_OFFSET ) ))
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SCNT_PRL_SEQ_CNT_OFFSET ) ))
#define NSIP_HBI_SCNT_PRL_STRM_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_SCNT_PRL_STRM_EN_OFFSET ) ))
#define NSIP_HBI_DROP_CMD0_CMD_STRM_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_DROP_CMD0_CMD_STRM_EN_OFFSET ) ))
#define NSIP_HBI_DROP_CMD0_CMD_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_DROP_CMD0_CMD_CTRL_OFFSET ) ))
#define NSIP_HBI_DROP_CMD1_CMD_STRM_EN_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_DROP_CMD1_CMD_STRM_EN_OFFSET ) ))
#define NSIP_HBI_DROP_CMD1_CMD_CTRL_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_DROP_CMD1_CMD_CTRL_OFFSET ) ))
#define NSIP_HBI_H2B_DROP_STATE_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_DROP_STATE_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_BUF_SZ_HW_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ADDR_LKUP_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_ROUTE_LKUP_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ADDR_LKUP_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ADDR_LKUP_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL0_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL1_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL2_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL3_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL4_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL5_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL6_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL7_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL8_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL9_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL10_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL11_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL12_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL13_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL14_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL15_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL16_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL17_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL18_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL19_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL20_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL21_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL22_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL23_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL24_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL25_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL26_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL27_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL28_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL29_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL30_OFFSET ) ))
#define NSIP_HBI_H2B_MD_CTRL_TBL31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_MD_CTRL_TBL31_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR0_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR0_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR1_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR1_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR2_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR2_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR3_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR3_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR4_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR4_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR5_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR5_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR6_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR6_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR7_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR7_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR8_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR8_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR9_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR9_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR10_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR10_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR11_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR11_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR12_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR12_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR13_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR13_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR14_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR14_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR15_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR15_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR16_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR16_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR17_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR17_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR18_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR18_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR19_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR19_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR20_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR20_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR21_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR21_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR22_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR22_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR23_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR23_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR24_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR24_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR25_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR25_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR26_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR26_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR27_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR27_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR28_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR28_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR29_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR29_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR30_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR30_OFFSET ) ))
#define NSIP_HBI_H2B_SCNT_TK_PTR31_ADR(_BASE) (( ( _BASE ) + ( NSIP_HBI_H2B_SCNT_TK_PTR31_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief NSIP_HBI_COM_REG_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_scratch_reg_t;

#define NSIP_HBI_SCRATCH_DEFAULT (0x00000000U)
#define NSIP_HBI_SCRATCH_RD_MASK (0xffffffffU)
#define NSIP_HBI_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define NSIP_HBI_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define NSIP_HBI_SCRATCH_SCRATCHPAD_BF_WID (32)
#define NSIP_HBI_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: nsip_hbi_com/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_apb_brdg_stat_reg_t;

#define NSIP_HBI_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define NSIP_HBI_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define NSIP_HBI_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define NSIP_HBI_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define NSIP_HBI_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define NSIP_HBI_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define NSIP_HBI_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define NSIP_HBI_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define NSIP_HBI_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define NSIP_HBI_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define NSIP_HBI_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define NSIP_HBI_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define NSIP_HBI_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define NSIP_HBI_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define NSIP_HBI_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define NSIP_HBI_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define NSIP_HBI_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define NSIP_HBI_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define NSIP_HBI_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define NSIP_HBI_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_FF_B2H_FIFO_CONTROL register description at address offset 0x8
  *
  * Register default value:        0x00000184
  * Register full path in IP: nsip_hbi_com/reg/b2h_ff/B2H_FIFO_CONTROL
  * 16-Entry B2H FIFO Watermark and Soft Reset Register
  */

typedef union {
  struct {
    uint32_t LOW_WM : 5;
    ///< FIFO Low Watermark
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t HIGH_WM : 5;
    ///< FIFO High Watermark
    ///< AccessType="RW" BitOffset="5" ResetValue="0xC"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t AFULL_DROP_EN : 1;
    ///< FIFO Almost Full Drop Enable. This bit is for debug purpose and enables
    ///< B2H data drop if the FIFO is almost full.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t POP_SOFT_RST : 1;
    ///< FIFO soft reset on pop clock domain. This bit is for debug purpose
    ///< and should never need to be used.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t PUSH_SOFT_RST : 1;
    ///< FIFO soft reset on push clock domain. This bit is for debug purpose
    ///< and should never need to be used.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_b2h_ff_fifo_ctrl_reg_t;

#define NSIP_HBI_B2H_FF_FIFO_CTRL_DEFAULT (0x00000184U)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_RD_MASK (0xe00003ffU)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_WR_MASK (0xe00003ffU)


///< FIFO Low Watermark
#define NSIP_HBI_B2H_FF_FIFO_CTRL_LOW_WM_BF_OFF ( 0)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_LOW_WM_BF_WID ( 5)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_LOW_WM_BF_MSK (0x0000001F)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_LOW_WM_BF_DEF (0x00000004)

///< FIFO High Watermark
#define NSIP_HBI_B2H_FF_FIFO_CTRL_HIGH_WM_BF_OFF ( 5)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_HIGH_WM_BF_WID ( 5)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_HIGH_WM_BF_MSK (0x000003E0)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_HIGH_WM_BF_DEF (0x00000180)

///< FIFO Almost Full Drop Enable. This bit is for debug purpose and enables
///< B2H data drop if the FIFO is almost full.
#define NSIP_HBI_B2H_FF_FIFO_CTRL_AFULL_DROP_EN_BF_OFF (29)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_AFULL_DROP_EN_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_AFULL_DROP_EN_BF_MSK (0x20000000)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_AFULL_DROP_EN_BF_DEF (0x00000000)

///< FIFO soft reset on pop clock domain. This bit is for debug purpose
///< and should never need to be used.
#define NSIP_HBI_B2H_FF_FIFO_CTRL_POP_SOFT_RST_BF_OFF (30)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_POP_SOFT_RST_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_POP_SOFT_RST_BF_MSK (0x40000000)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_POP_SOFT_RST_BF_DEF (0x00000000)

///< FIFO soft reset on push clock domain. This bit is for debug purpose
///< and should never need to be used.
#define NSIP_HBI_B2H_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_OFF (31)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_MSK (0x80000000)
#define NSIP_HBI_B2H_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_FF_B2H_FIFO_STATUS register description at address offset 0xc
  *
  * Register default value:        0x0000200C
  * Register full path in IP: nsip_hbi_com/reg/b2h_ff/B2H_FIFO_STATUS
  * B2H FIFO Status Register
  */

typedef union {
  struct {
    uint32_t FIFO_UNDERFLOW : 1;
    ///< FIFO Underflow
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_OVERFLOW : 1;
    ///< FIFO Overflow
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t FIFO_EMPTY : 1;
    ///< FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FIFO_ALMOST_EMPTY : 1;
    ///< FIFO Almost Empty
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x1"
    uint32_t FIFO_ALMOST_FULL : 1;
    ///< FIFO Almost Full
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t FIFO_FULL : 1;
    ///< FIFO Full
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t FIFO_DEPTH : 5;
    ///< FIFO Depth
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t INS_FF_UNDERFLOW : 1;
    ///< Insertion FIFO Underflow
    ///< AccessType="RO" BitOffset="11" ResetValue="0x0"
    uint32_t INS_FF_OVERFLOW : 1;
    ///< Insertion FIFO Overflow
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t INS_FF_EMPTY : 1;
    ///< Insertion FIFO Empty
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x1"
    uint32_t INS_FF_FULL : 1;
    ///< Insertion FIFO Full
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_b2h_ff_fifo_stat_reg_t;

#define NSIP_HBI_B2H_FF_FIFO_STAT_DEFAULT (0x0000200cU)
#define NSIP_HBI_B2H_FF_FIFO_STAT_RD_MASK (0x00007fffU)
#define NSIP_HBI_B2H_FF_FIFO_STAT_WR_MASK (0x00000000U)


///< FIFO Underflow
#define NSIP_HBI_B2H_FF_FIFO_STAT_UNDERFLOW_BF_OFF ( 0)
#define NSIP_HBI_B2H_FF_FIFO_STAT_UNDERFLOW_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_UNDERFLOW_BF_MSK (0x00000001)
#define NSIP_HBI_B2H_FF_FIFO_STAT_UNDERFLOW_BF_DEF (0x00000000)

///< FIFO Overflow
#define NSIP_HBI_B2H_FF_FIFO_STAT_OVERFLOW_BF_OFF ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_OVERFLOW_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_OVERFLOW_BF_MSK (0x00000002)
#define NSIP_HBI_B2H_FF_FIFO_STAT_OVERFLOW_BF_DEF (0x00000000)

///< FIFO Empty
#define NSIP_HBI_B2H_FF_FIFO_STAT_EMPTY_BF_OFF ( 2)
#define NSIP_HBI_B2H_FF_FIFO_STAT_EMPTY_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_EMPTY_BF_MSK (0x00000004)
#define NSIP_HBI_B2H_FF_FIFO_STAT_EMPTY_BF_DEF (0x00000004)

///< FIFO Almost Empty
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_EMPTY_BF_OFF ( 3)
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_EMPTY_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_EMPTY_BF_MSK (0x00000008)
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_EMPTY_BF_DEF (0x00000008)

///< FIFO Almost Full
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_FULL_BF_OFF ( 4)
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_FULL_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_FULL_BF_MSK (0x00000010)
#define NSIP_HBI_B2H_FF_FIFO_STAT_ALMOST_FULL_BF_DEF (0x00000000)

///< FIFO Full
#define NSIP_HBI_B2H_FF_FIFO_STAT_FULL_BF_OFF ( 5)
#define NSIP_HBI_B2H_FF_FIFO_STAT_FULL_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_FULL_BF_MSK (0x00000020)
#define NSIP_HBI_B2H_FF_FIFO_STAT_FULL_BF_DEF (0x00000000)

///< FIFO Depth
#define NSIP_HBI_B2H_FF_FIFO_STAT_DEPTH_BF_OFF ( 6)
#define NSIP_HBI_B2H_FF_FIFO_STAT_DEPTH_BF_WID ( 5)
#define NSIP_HBI_B2H_FF_FIFO_STAT_DEPTH_BF_MSK (0x000007C0)
#define NSIP_HBI_B2H_FF_FIFO_STAT_DEPTH_BF_DEF (0x00000000)

///< Insertion FIFO Underflow
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_UNDERFLOW_BF_OFF (11)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_UNDERFLOW_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_UNDERFLOW_BF_MSK (0x00000800)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_UNDERFLOW_BF_DEF (0x00000000)

///< Insertion FIFO Overflow
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_OVERFLOW_BF_OFF (12)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_OVERFLOW_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_OVERFLOW_BF_MSK (0x00001000)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_OVERFLOW_BF_DEF (0x00000000)

///< Insertion FIFO Empty
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_EMPTY_BF_OFF (13)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_EMPTY_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_EMPTY_BF_MSK (0x00002000)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_EMPTY_BF_DEF (0x00002000)

///< Insertion FIFO Full
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_FULL_BF_OFF (14)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_FULL_BF_WID ( 1)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_FULL_BF_MSK (0x00004000)
#define NSIP_HBI_B2H_FF_FIFO_STAT_INS_FULL_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_CREDIT_CS register description at address offset 0x10
  *
  * Register default value:        0x0000000F
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_CREDIT_CS
  * HBI Credit Control and Status Register
  */

typedef union {
  struct {
    uint32_t MAX_CREDITS : 4;
    ///< Maximum Credit Value. This is the maximum credits the module can have.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t CREDIT_COUNT : 4;
    ///< Credit Count. This is the current credit count. This count will load
    ///< MAX_CREDITS value after traffic starts.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_credit_cs_reg_t;

#define NSIP_HBI_B2H_CSR_CREDIT_CS_DEFAULT (0x0000000fU)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_RD_MASK (0x00000f0fU)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_WR_MASK (0x0000000fU)


///< Maximum Credit Value. This is the maximum credits the module can have.
#define NSIP_HBI_B2H_CSR_CREDIT_CS_MAX_CREDITS_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_MAX_CREDITS_BF_WID ( 4)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_MAX_CREDITS_BF_MSK (0x0000000F)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_MAX_CREDITS_BF_DEF (0x0000000F)

///< Credit Count. This is the current credit count. This count will load
///< MAX_CREDITS value after traffic starts.
#define NSIP_HBI_B2H_CSR_CREDIT_CS_CNT_BF_OFF ( 8)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_CNT_BF_WID ( 4)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_CNT_BF_MSK (0x00000F00)
#define NSIP_HBI_B2H_CSR_CREDIT_CS_CNT_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_FLIT_COUNT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_FLIT_COUNT
  * HBI Flit Count Register
  */

typedef union {
  struct {
    uint32_t FLIT_COUNT : 32;
    ///< Flit Count. This shows the number of flits transferred on B2H or H2B
    ///< interfaces after last read. Read to clear.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_flit_cnt_reg_t;

#define NSIP_HBI_B2H_CSR_FLIT_CNT_DEFAULT (0x00000000U)
#define NSIP_HBI_B2H_CSR_FLIT_CNT_RD_MASK (0xffffffffU)
#define NSIP_HBI_B2H_CSR_FLIT_CNT_WR_MASK (0x00000000U)


///< Flit Count. This shows the number of flits transferred on B2H or H2B
///< interfaces after last read. Read to clear.
#define NSIP_HBI_B2H_CSR_FLIT_CNT_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_FLIT_CNT_BF_WID (32)
#define NSIP_HBI_B2H_CSR_FLIT_CNT_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_B2H_CSR_FLIT_CNT_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_INSERT_STREAM_MAP register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_INSERT_STREAM_MAP
  * B2H Insert Stream Mapping Register
  */

typedef union {
  struct {
    uint32_t STREAM_MAP : 32;
    ///< Stream To Command Queue Mapping. Each bit corresponds to a data stream,
    ///< and when set, indicates the stream is mapped with Command Queue 1
    ///< and the associated registers. Otherwise by default, the stream is
    ///< with Command Queue 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_insert_strm_reg_t;

#define NSIP_HBI_B2H_CSR_INSERT_STRM_DEFAULT (0x00000000U)
#define NSIP_HBI_B2H_CSR_INSERT_STRM_RD_MASK (0xffffffffU)
#define NSIP_HBI_B2H_CSR_INSERT_STRM_WR_MASK (0xffffffffU)


///< Stream To Command Queue Mapping. Each bit corresponds to a data stream,
///< and when set, indicates the stream is mapped with Command Queue 1
///< and the associated registers. Otherwise by default, the stream is
///< with Command Queue 0.
#define NSIP_HBI_B2H_CSR_INSERT_STRM_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_INSERT_STRM_BF_WID (32)
#define NSIP_HBI_B2H_CSR_INSERT_STRM_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_B2H_CSR_INSERT_STRM_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_INSERT_STATE register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_INSERT_STATE
  * B2H Stream Insertion State Register
  */

typedef union {
  struct {
    uint32_t INSERT_STATE : 32;
    ///< Stream Insertion State. Each bit corresponds to a data stream, and
    ///< when set, indicates the stream is in insertion state.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_insert_state_reg_t;

#define NSIP_HBI_B2H_CSR_INSERT_STATE_DEFAULT (0x00000000U)
#define NSIP_HBI_B2H_CSR_INSERT_STATE_RD_MASK (0xffffffffU)
#define NSIP_HBI_B2H_CSR_INSERT_STATE_WR_MASK (0x00000000U)


///< Stream Insertion State. Each bit corresponds to a data stream, and
///< when set, indicates the stream is in insertion state.
#define NSIP_HBI_B2H_CSR_INSERT_STATE_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_INSERT_STATE_BF_WID (32)
#define NSIP_HBI_B2H_CSR_INSERT_STATE_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_B2H_CSR_INSERT_STATE_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_INSERT_CONTROL register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_INSERT_CONTROL
  * B2H Insert Control Register
  */

typedef union {
  struct {
    uint32_t ARB_MODE : 2;
    ///< Insertion Arbitration Mode. This controls arbitration mode to select
    ///< data among normal B2H path and insertion sources and send to Host.
    ///< 2'b00 = strict priority, 2'b01 = rotating priority, 2'b10 = round
    ///< robin.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_insert_ctrl_reg_t;

#define NSIP_HBI_B2H_CSR_INSERT_CTRL_DEFAULT (0x00000000U)
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_RD_MASK (0x00000003U)
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_WR_MASK (0x00000003U)


///< Insertion Arbitration Mode. This controls arbitration mode to select
///< data among normal B2H path and insertion sources and send to Host.
///< 2'b00 = strict priority, 2'b01 = rotating priority, 2'b10 = round
///< robin.
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_ARB_MODE_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_ARB_MODE_BF_WID ( 2)
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_ARB_MODE_BF_MSK (0x00000003)
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_ARB_MODE_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_INSERT_QUEUE_CSR0_B2H_INSERT_CSR[2] register description at address offset 0x30
  *
  * Register default value:        0x01000000
  * Register full path in IP: nsip_hbi_com/reg/insert_queue_csr0/B2H_INSERT_CSR
  * B2H Insertion Control and Status Register
  */

typedef union {
  struct {
    uint32_t DA_BLOCK_SIZE : 10;
    ///< Sample Data Block Size. (DA_BLOCK_SIZE + 1) defines number of flits
    ///< in a software's processing block. This is used to convert flit counts
    ///< to block/sequence counts. Maximum 1k flits, equal to 16k I/Q samples.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t BLOCK_CLK_CYCLES : 12;
    ///< Clock Cycles for A Data Block. (BLOCK_CLK_CYCLES + 1) defines number
    ///< of clock cycles for inserting a data block. This is used to control
    ///< data block insertion rate.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t INSERT_FIFO_PTR : 3;
    ///< Insert Command Queue Pointer. Insert commands are pushed into a 2-entry
    ///< FIFO. This is the pointer[2:0] of the FIFO. A set bit of the pointer
    ///< indicates the fullness of the FIFO. Pointer[0] = 1 means the FIFO
    ///< is empty, and pointer[3] = 1 means the FIFO is full.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t USE_NULL : 1;
    ///< Use Null Sample. This bit enables to use B2H_INSERT_NULL_SAMPLE for
    ///< data insertion. If this bit is 0 by default, the stream's last sample
    ///< would be used for insertion.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_insert_que_csr_b2h_reg_t;

#define NSIP_HBI_INSERT_QUE_CSR_B2H_DEFAULT (0x01000000U)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_RD_MASK (0x173fffffU)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_WR_MASK (0x103fffffU)


///< Sample Data Block Size. (DA_BLOCK_SIZE + 1) defines number of flits
///< in a software's processing block. This is used to convert flit counts
///< to block/sequence counts. Maximum 1k flits, equal to 16k I/Q samples.
#define NSIP_HBI_INSERT_QUE_CSR_B2H_DA_SIZE_BF_OFF ( 0)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_DA_SIZE_BF_WID (10)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_DA_SIZE_BF_MSK (0x000003FF)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_DA_SIZE_BF_DEF (0x00000000)

///< Clock Cycles for A Data Block. (BLOCK_CLK_CYCLES + 1) defines number
///< of clock cycles for inserting a data block. This is used to control
///< data block insertion rate.
#define NSIP_HBI_INSERT_QUE_CSR_B2H_CLK_CYCLES_BF_OFF (10)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_CLK_CYCLES_BF_WID (12)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_CLK_CYCLES_BF_MSK (0x003FFC00)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_CLK_CYCLES_BF_DEF (0x00000000)

///< Insert Command Queue Pointer. Insert commands are pushed into a 2-entry
///< FIFO. This is the pointer[2:0] of the FIFO. A set bit of the pointer
///< indicates the fullness of the FIFO. Pointer[0] = 1 means the FIFO
///< is empty, and pointer[3] = 1 means the FIFO is full.
#define NSIP_HBI_INSERT_QUE_CSR_B2H_FIFO_PTR_BF_OFF (24)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_FIFO_PTR_BF_WID ( 3)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_FIFO_PTR_BF_MSK (0x07000000)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_FIFO_PTR_BF_DEF (0x01000000)

///< Use Null Sample. This bit enables to use B2H_INSERT_NULL_SAMPLE for
///< data insertion. If this bit is 0 by default, the stream's last sample
///< would be used for insertion.
#define NSIP_HBI_INSERT_QUE_CSR_B2H_USE_NULL_BF_OFF (28)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_USE_NULL_BF_WID ( 1)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_USE_NULL_BF_MSK (0x10000000)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_USE_NULL_BF_DEF (0x00000000)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_ARR_SZ0 (2)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_ARRAY_STRIDE0 (0x0010)


/** @brief NSIP_HBI_COM_REG_INSERT_QUEUE_CSR0_B2H_INSERT_NULL_SAMPLE[2] register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/insert_queue_csr0/B2H_INSERT_NULL_SAMPLE
  * B2H Insertion Null Sample Register
  */

typedef union {
  struct {
    uint32_t NULL_SAMPLE : 32;
    ///< Null Sample. This value is used as an I/Q or R2/R1 data for logic
    ///< to insert into data path for streams if enabled. If not enabled, stream's
    ///< last sample will be used. There are total two Null Sample registers,
    ///< each for a insertion command queue.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_insert_que_csr_b2h_null_sample_reg_t;

#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_DEFAULT (0x00000000U)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_RD_MASK (0xffffffffU)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_WR_MASK (0xffffffffU)


///< Null Sample. This value is used as an I/Q or R2/R1 data for logic
///< to insert into data path for streams if enabled. If not enabled, stream's
///< last sample will be used. There are total two Null Sample registers,
///< each for a insertion command queue.
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_BF_OFF ( 0)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_BF_WID (32)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_BF_DEF (0x00000000)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_ARR_SZ0 (2)
#define NSIP_HBI_INSERT_QUE_CSR_B2H_NULL_SAMPLE_ARRAY_STRIDE0 (0x0010)


/** @brief NSIP_HBI_COM_REG_INSERT_QUEUE_CSR0_CMD_INSERT_STREAM_EN[2] register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/insert_queue_csr0/CMD_INSERT_STREAM_EN
  * B2H Insert Command Stream Enable Register
  */

typedef union {
  struct {
    uint32_t STREAM_EN : 32;
    ///< Insert Command Stream Enable Field. Each bit corresponds to a data
    ///< stream, and when set, indicates this command applies to the stream.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_insert_que_csr_cmd_strm_en_reg_t;

#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_DEFAULT (0x00000000U)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_RD_MASK (0xffffffffU)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_WR_MASK (0xffffffffU)


///< Insert Command Stream Enable Field. Each bit corresponds to a data
///< stream, and when set, indicates this command applies to the stream.
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_BF_OFF ( 0)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_BF_WID (32)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_BF_DEF (0x00000000)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_ARR_SZ0 (2)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_STRM_EN_ARRAY_STRIDE0 (0x0010)


/** @brief NSIP_HBI_COM_REG_INSERT_QUEUE_CSR0_CMD_INSERT_CONTROL[2] register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/insert_queue_csr0/CMD_INSERT_CONTROL
  * B2H Insert Command Control Register
  */

typedef union {
  struct {
    uint32_t SEQUENCE_CNT : 16;
    ///< Insert Command Sequence Count Field. This is the sequence count field
    ///< in an Insert command. It's the count of data blocks.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t INSERT_EN : 1;
    ///< Insert Enable. This is the pass/insert control bit in an Insert command.
    ///< When 1, data insertion will start for enabled streams in CMD_INSERT_STREAM_EN
    ///< from data block numbered by SEQUENCE_CNT. When 0, insertion will stop
    ///< for enabled streams from data block numbered by SEQUENCE_CNT.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_insert_que_csr_cmd_ctrl_reg_t;

#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_DEFAULT (0x00000000U)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_RD_MASK (0x8000ffffU)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_WR_MASK (0x8000ffffU)


///< Insert Command Sequence Count Field. This is the sequence count field
///< in an Insert command. It's the count of data blocks.
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_SEQUENCE_CNT_BF_OFF ( 0)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_SEQUENCE_CNT_BF_WID (16)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_SEQUENCE_CNT_BF_MSK (0x0000FFFF)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_SEQUENCE_CNT_BF_DEF (0x00000000)

///< Insert Enable. This is the pass/insert control bit in an Insert command.
///< When 1, data insertion will start for enabled streams in CMD_INSERT_STREAM_EN
///< from data block numbered by SEQUENCE_CNT. When 0, insertion will stop
///< for enabled streams from data block numbered by SEQUENCE_CNT.
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_EN_BF_OFF (31)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_EN_BF_WID ( 1)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_EN_BF_MSK (0x80000000)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_EN_BF_DEF (0x00000000)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_ARR_SZ0 (2)
#define NSIP_HBI_INSERT_QUE_CSR_CMD_CTRL_ARRAY_STRIDE0 (0x0010)


/** @brief NSIP_HBI_COM_REG_INTR_INT_STATUS register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/intr/INT_STATUS
  * HBI Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t B2H_FF_FULL_DROP : 1;
    ///< B2H FIFO Full Drop. This bit indicates that data drop happened in
    ///< nsip_hbi_b2h module due to
    ///< 1. data still coming from VEX Array, but B2H FIFO is full. This could
    ///< happen if credit handshake is not configured correctly.
    ///< 2. data coming from VEX Array, but B2H FIFO is almost full and AFULL_DROP_EN
    ///< bit is set.                                               3. data
    ///< coming from VEX Array during halt operation.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t B2H_NOMAP_DROP : 1;
    ///< B2H No Mapping Drop. This bit indicates that a data drop due to no
    ///< matching found in both data and Token address mapping happened in
    ///< nsip_hbi_b2h module.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t B2H_MATCH_ERR : 1;
    ///< B2H Address Match Error. This bit indicates that a data address match
    ///< found in both data and Token address matching tables in nsip_hbi_b2h
    ///< module.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t B2H_TYPE_ERR : 1;
    ///< B2H Type Error. This bit indicates that the Type field in a data flit
    ///< has a value not equal to 3'd6 in nsip_hbi_b2h module.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved, bit 4. This bit is not used.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved, bit 5. This bit is not used.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t H2B_NOLKUP_DROP : 1;
    ///< H2B No Lookup Drop. This bit indicates that a data drop due to no
    ///< valid lookup entry found happened in nsip_hbi_h2b module.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t H2B_CQ_FF_OVFL : 1;
    ///< H2B Metadata Command FIFO Overflow. This bit indicates that while
    ///< the FIFO is full, a command tried to be pushed into the FIFO in nsip_hbi_h2b
    ///< module. The command was dropped.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t H2B_TK_IN_PKT : 1;
    ///< H2B Token In Packet. This bit indicates that a Token was generated
    ///< and sent out during a packet transfer, due to Token interval and packet
    ///< size were not configured properly.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t H2B_FIFO_ERR : 1;
    ///< H2B FIFO Error. This bit indicates that an overflow and/or an underflow
    ///< happened in H2B FIFO. Please check H2B FIFO status registers.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t B2H_FIFO_ERR : 1;
    ///< B2H FIFO Error. This bit indicates that an overflow and/or an underflow
    ///< happened in B2H FIFO. Please check B2H FIFO status registers.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t SMON_INT : 1;
    ///< SMON Interrupt. This bit indicates that the SMON interrupt signal
    ///< is asserted. Please check SMON registers.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t H2B_DROP_FF_OVFL : 2;
    ///< H2B Drop Command FIFO Overflow. These bits are for the two FIFOs of
    ///< Drop Command Queue 0/1, indicating that while the FIFO is full, a
    ///< command tried to be pushed into the FIFO in nsip_hbi_h2b module. The
    ///< command was dropped.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t B2H_INSERT_FF_OVFL : 2;
    ///< B2H Insert Command FIFO Overflow. These bits are for the two FIFOs
    ///< of Insert Command Queue 0/1, indicating that while the FIFO is full,
    ///< a command tried to be pushed into the FIFO in nsip_hbi_b2h module.
    ///< The command was dropped.
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t B2H_INSERT_VEX_DROP : 1;
    ///< B2H Insert VEX Data Drop. This bit indicates that data for a stream
    ///< from VEX were dropped due to the stream is in insertion state.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t H2B_NO_SOP_ERR : 1;
    ///< H2B No SOP Error. This bit indicates that expected SOP is not received
    ///< with data from Host.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t H2B_NO_EOP_ERR : 1;
    ///< H2B No EOP Error. This bit indicates that expected EOP is not received
    ///< with data from Host.
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t H2B_LEN_ERR : 1;
    ///< H2B LEN Error. This bit indicates that LEN field doesn't match with
    ///< real packet size or its value changes within a packet.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t B2H_INS_FIFO_ERR : 1;
    ///< B2H Insertion FIFO Error. This bit indicates that an overflow and/or
    ///< an underflow happened in B2H insertion FIFO. Please check B2H FIFO
    ///< status registers.
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_intr_int_stat_reg_t;

#define NSIP_HBI_INTR_INT_STAT_DEFAULT (0x00000000U)
#define NSIP_HBI_INTR_INT_STAT_RD_MASK (0x001fffffU)
#define NSIP_HBI_INTR_INT_STAT_WR_MASK (0x00000000U)


///< B2H FIFO Full Drop. This bit indicates that data drop happened in
///< nsip_hbi_b2h module due to
///< 1. data still coming from VEX Array, but B2H FIFO is full. This could
///< happen if credit handshake is not configured correctly.
///< 2. data coming from VEX Array, but B2H FIFO is almost full and AFULL_DROP_EN
///< bit is set.                                               3. data
///< coming from VEX Array during halt operation.
#define NSIP_HBI_INTR_INT_STAT_B2H_FF_FULL_DROP_BF_OFF ( 0)
#define NSIP_HBI_INTR_INT_STAT_B2H_FF_FULL_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_FF_FULL_DROP_BF_MSK (0x00000001)
#define NSIP_HBI_INTR_INT_STAT_B2H_FF_FULL_DROP_BF_DEF (0x00000000)

///< B2H No Mapping Drop. This bit indicates that a data drop due to no
///< matching found in both data and Token address mapping happened in
///< nsip_hbi_b2h module.
#define NSIP_HBI_INTR_INT_STAT_B2H_NOMAP_DROP_BF_OFF ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_NOMAP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_NOMAP_DROP_BF_MSK (0x00000002)
#define NSIP_HBI_INTR_INT_STAT_B2H_NOMAP_DROP_BF_DEF (0x00000000)

///< B2H Address Match Error. This bit indicates that a data address match
///< found in both data and Token address matching tables in nsip_hbi_b2h
///< module.
#define NSIP_HBI_INTR_INT_STAT_B2H_MATCH_ERR_BF_OFF ( 2)
#define NSIP_HBI_INTR_INT_STAT_B2H_MATCH_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_MATCH_ERR_BF_MSK (0x00000004)
#define NSIP_HBI_INTR_INT_STAT_B2H_MATCH_ERR_BF_DEF (0x00000000)

///< B2H Type Error. This bit indicates that the Type field in a data flit
///< has a value not equal to 3'd6 in nsip_hbi_b2h module.
#define NSIP_HBI_INTR_INT_STAT_B2H_TYPE_ERR_BF_OFF ( 3)
#define NSIP_HBI_INTR_INT_STAT_B2H_TYPE_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_TYPE_ERR_BF_MSK (0x00000008)
#define NSIP_HBI_INTR_INT_STAT_B2H_TYPE_ERR_BF_DEF (0x00000000)

///< Reserved, bit 4. This bit is not used.
#define NSIP_HBI_INTR_INT_STAT_RESERVED_4_BF_OFF ( 4)
#define NSIP_HBI_INTR_INT_STAT_RESERVED_4_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_RESERVED_4_BF_MSK (0x00000010)
#define NSIP_HBI_INTR_INT_STAT_RESERVED_4_BF_DEF (0x00000000)

///< Reserved, bit 5. This bit is not used.
#define NSIP_HBI_INTR_INT_STAT_RESERVED_5_BF_OFF ( 5)
#define NSIP_HBI_INTR_INT_STAT_RESERVED_5_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_RESERVED_5_BF_MSK (0x00000020)
#define NSIP_HBI_INTR_INT_STAT_RESERVED_5_BF_DEF (0x00000000)

///< H2B No Lookup Drop. This bit indicates that a data drop due to no
///< valid lookup entry found happened in nsip_hbi_h2b module.
#define NSIP_HBI_INTR_INT_STAT_H2B_NOLKUP_DROP_BF_OFF ( 6)
#define NSIP_HBI_INTR_INT_STAT_H2B_NOLKUP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_NOLKUP_DROP_BF_MSK (0x00000040)
#define NSIP_HBI_INTR_INT_STAT_H2B_NOLKUP_DROP_BF_DEF (0x00000000)

///< H2B Metadata Command FIFO Overflow. This bit indicates that while
///< the FIFO is full, a command tried to be pushed into the FIFO in nsip_hbi_h2b
///< module. The command was dropped.
#define NSIP_HBI_INTR_INT_STAT_H2B_CQ_FF_OVFL_BF_OFF ( 7)
#define NSIP_HBI_INTR_INT_STAT_H2B_CQ_FF_OVFL_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_CQ_FF_OVFL_BF_MSK (0x00000080)
#define NSIP_HBI_INTR_INT_STAT_H2B_CQ_FF_OVFL_BF_DEF (0x00000000)

///< H2B Token In Packet. This bit indicates that a Token was generated
///< and sent out during a packet transfer, due to Token interval and packet
///< size were not configured properly.
#define NSIP_HBI_INTR_INT_STAT_H2B_TK_IN_PKT_BF_OFF ( 8)
#define NSIP_HBI_INTR_INT_STAT_H2B_TK_IN_PKT_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_TK_IN_PKT_BF_MSK (0x00000100)
#define NSIP_HBI_INTR_INT_STAT_H2B_TK_IN_PKT_BF_DEF (0x00000000)

///< H2B FIFO Error. This bit indicates that an overflow and/or an underflow
///< happened in H2B FIFO. Please check H2B FIFO status registers.
#define NSIP_HBI_INTR_INT_STAT_H2B_FIFO_ERR_BF_OFF ( 9)
#define NSIP_HBI_INTR_INT_STAT_H2B_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_FIFO_ERR_BF_MSK (0x00000200)
#define NSIP_HBI_INTR_INT_STAT_H2B_FIFO_ERR_BF_DEF (0x00000000)

///< B2H FIFO Error. This bit indicates that an overflow and/or an underflow
///< happened in B2H FIFO. Please check B2H FIFO status registers.
#define NSIP_HBI_INTR_INT_STAT_B2H_FIFO_ERR_BF_OFF (10)
#define NSIP_HBI_INTR_INT_STAT_B2H_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_FIFO_ERR_BF_MSK (0x00000400)
#define NSIP_HBI_INTR_INT_STAT_B2H_FIFO_ERR_BF_DEF (0x00000000)

///< SMON Interrupt. This bit indicates that the SMON interrupt signal
///< is asserted. Please check SMON registers.
#define NSIP_HBI_INTR_INT_STAT_SMON_BF_OFF (11)
#define NSIP_HBI_INTR_INT_STAT_SMON_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_SMON_BF_MSK (0x00000800)
#define NSIP_HBI_INTR_INT_STAT_SMON_BF_DEF (0x00000000)

///< H2B Drop Command FIFO Overflow. These bits are for the two FIFOs of
///< Drop Command Queue 0/1, indicating that while the FIFO is full, a
///< command tried to be pushed into the FIFO in nsip_hbi_h2b module. The
///< command was dropped.
#define NSIP_HBI_INTR_INT_STAT_H2B_DROP_FF_OVFL_BF_OFF (12)
#define NSIP_HBI_INTR_INT_STAT_H2B_DROP_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_STAT_H2B_DROP_FF_OVFL_BF_MSK (0x00003000)
#define NSIP_HBI_INTR_INT_STAT_H2B_DROP_FF_OVFL_BF_DEF (0x00000000)

///< B2H Insert Command FIFO Overflow. These bits are for the two FIFOs
///< of Insert Command Queue 0/1, indicating that while the FIFO is full,
///< a command tried to be pushed into the FIFO in nsip_hbi_b2h module.
///< The command was dropped.
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_FF_OVFL_BF_OFF (14)
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_FF_OVFL_BF_MSK (0x0000C000)
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_FF_OVFL_BF_DEF (0x00000000)

///< B2H Insert VEX Data Drop. This bit indicates that data for a stream
///< from VEX were dropped due to the stream is in insertion state.
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_VEX_DROP_BF_OFF (16)
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_VEX_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_VEX_DROP_BF_MSK (0x00010000)
#define NSIP_HBI_INTR_INT_STAT_B2H_INSERT_VEX_DROP_BF_DEF (0x00000000)

///< H2B No SOP Error. This bit indicates that expected SOP is not received
///< with data from Host.
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_SOP_ERR_BF_OFF (17)
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_SOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_SOP_ERR_BF_MSK (0x00020000)
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_SOP_ERR_BF_DEF (0x00000000)

///< H2B No EOP Error. This bit indicates that expected EOP is not received
///< with data from Host.
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_EOP_ERR_BF_OFF (18)
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_EOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_EOP_ERR_BF_MSK (0x00040000)
#define NSIP_HBI_INTR_INT_STAT_H2B_NO_EOP_ERR_BF_DEF (0x00000000)

///< H2B LEN Error. This bit indicates that LEN field doesn't match with
///< real packet size or its value changes within a packet.
#define NSIP_HBI_INTR_INT_STAT_H2B_LEN_ERR_BF_OFF (19)
#define NSIP_HBI_INTR_INT_STAT_H2B_LEN_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_H2B_LEN_ERR_BF_MSK (0x00080000)
#define NSIP_HBI_INTR_INT_STAT_H2B_LEN_ERR_BF_DEF (0x00000000)

///< B2H Insertion FIFO Error. This bit indicates that an overflow and/or
///< an underflow happened in B2H insertion FIFO. Please check B2H FIFO
///< status registers.
#define NSIP_HBI_INTR_INT_STAT_B2H_INS_FIFO_ERR_BF_OFF (20)
#define NSIP_HBI_INTR_INT_STAT_B2H_INS_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_STAT_B2H_INS_FIFO_ERR_BF_MSK (0x00100000)
#define NSIP_HBI_INTR_INT_STAT_B2H_INS_FIFO_ERR_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_INTR_INT_HIGH_EN register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/intr/INT_HIGH_EN
  * HBI High Priority Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t HIGH_EN_B2H_FF_FULL_DROP : 1;
    ///< High Enable for B2H FIFO Full Drop. This bit enables B2H_FF_FULL_DROP
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_NOMAP_DROP : 1;
    ///< High Enable for B2H No Mapping Drop. This bit enables B2H_NOMAP_DROP
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_MATCH_ERR : 1;
    ///< High Enable for B2H Address Match Error. This bit enables B2H_MATCH_ERR
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_TYPE_ERR : 1;
    ///< High Enable for B2H Type Error. This bit enables B2H_TYPE_ERR in INT_STATUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t HIGH_EN_RESERVED_4 : 1;
    ///< High Enable for Reserved_4. This bit enables Reserved_4 in INT_STATUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t HIGH_EN_RESERVED_5 : 1;
    ///< High Enable for Reserved_5. This bit enables Reserved_5 in INT_STATUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_NOLKUP_DROP : 1;
    ///< High Enable for H2B No Lookup Drop. This bit enables H2B_NOLKUP_DROP
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_CQ_FF_OVFL : 1;
    ///< High Enable for H2B Metadata Command FIFO Overflow. This bit enables
    ///< H2B_CQ_FF_OVFL in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_TK_IN_PKT : 1;
    ///< High Enable for H2B Token In Packet. This bit enables H2B_TK_IN_PKT
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_FIFO_ERR : 1;
    ///< High Enable for H2B FIFO Error. This bit enables H2B_FIFO_ERR in INT_STATUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_FIFO_ERR : 1;
    ///< High Enable for B2H FIFO Error. This bit enables B2H_FIFO_ERR in INT_STATUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t HIGH_EN_SMON_INT : 1;
    ///< High Enable for SMON Interrupt. This bit enables SMON_INT in INT_STAUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_DROP_FF_OVFL : 2;
    ///< High Enable for H2B Drop Command FIFO Overflow. Each bit enables H2B_DROP_FF_OVFL
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_INSERT_FF_OVFL : 2;
    ///< High Enable for B2H Insert Command FIFO Overflow. Each bit enables
    ///< B2H_INSERT_FF_OVFL in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_INSERT_VEX_DROP : 1;
    ///< High Enable for B2H Insert VEX Data Drop. This bit enables B2H_INSERT_VEX_DROP
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_NO_SOP_ERR : 1;
    ///< High Enable for H2B No SOP Error. This bit enables H2B_NO_SOP_ERR
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_NO_EOP_ERR : 1;
    ///< High Enable for H2B No EOP Error. This bit enables H2B_NO_EOP_ERR
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t HIGH_EN_H2B_LEN_ERR : 1;
    ///< High Enable for H2B LEN Error. This bit enables H2B_LEN_ERR in INT_STATUS
    ///< register for high interrupt.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t HIGH_EN_B2H_INS_FIFO_ERR : 1;
    ///< High Enable for B2H Insertion FIFO Error. This bit enables B2H_INS_FIFO_ERR
    ///< in INT_STATUS register for high interrupt.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_intr_int_high_en_reg_t;

#define NSIP_HBI_INTR_INT_HIGH_EN_DEFAULT (0x00000000U)
#define NSIP_HBI_INTR_INT_HIGH_EN_RD_MASK (0x001fffffU)
#define NSIP_HBI_INTR_INT_HIGH_EN_WR_MASK (0x001fffffU)


///< High Enable for B2H FIFO Full Drop. This bit enables B2H_FF_FULL_DROP
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FF_FULL_DROP_BF_OFF ( 0)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FF_FULL_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FF_FULL_DROP_BF_MSK (0x00000001)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FF_FULL_DROP_BF_DEF (0x00000000)

///< High Enable for B2H No Mapping Drop. This bit enables B2H_NOMAP_DROP
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_NOMAP_DROP_BF_OFF ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_NOMAP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_NOMAP_DROP_BF_MSK (0x00000002)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_NOMAP_DROP_BF_DEF (0x00000000)

///< High Enable for B2H Address Match Error. This bit enables B2H_MATCH_ERR
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_MATCH_ERR_BF_OFF ( 2)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_MATCH_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_MATCH_ERR_BF_MSK (0x00000004)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_MATCH_ERR_BF_DEF (0x00000000)

///< High Enable for B2H Type Error. This bit enables B2H_TYPE_ERR in INT_STATUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_TYPE_ERR_BF_OFF ( 3)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_TYPE_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_TYPE_ERR_BF_MSK (0x00000008)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_TYPE_ERR_BF_DEF (0x00000000)

///< High Enable for Reserved_4. This bit enables Reserved_4 in INT_STATUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_4_BF_OFF ( 4)
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_4_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_4_BF_MSK (0x00000010)
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_4_BF_DEF (0x00000000)

///< High Enable for Reserved_5. This bit enables Reserved_5 in INT_STATUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_5_BF_OFF ( 5)
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_5_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_5_BF_MSK (0x00000020)
#define NSIP_HBI_INTR_INT_HIGH_EN_RESERVED_5_BF_DEF (0x00000000)

///< High Enable for H2B No Lookup Drop. This bit enables H2B_NOLKUP_DROP
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NOLKUP_DROP_BF_OFF ( 6)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NOLKUP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NOLKUP_DROP_BF_MSK (0x00000040)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NOLKUP_DROP_BF_DEF (0x00000000)

///< High Enable for H2B Metadata Command FIFO Overflow. This bit enables
///< H2B_CQ_FF_OVFL in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_CQ_FF_OVFL_BF_OFF ( 7)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_CQ_FF_OVFL_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_CQ_FF_OVFL_BF_MSK (0x00000080)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_CQ_FF_OVFL_BF_DEF (0x00000000)

///< High Enable for H2B Token In Packet. This bit enables H2B_TK_IN_PKT
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_TK_IN_PKT_BF_OFF ( 8)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_TK_IN_PKT_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_TK_IN_PKT_BF_MSK (0x00000100)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_TK_IN_PKT_BF_DEF (0x00000000)

///< High Enable for H2B FIFO Error. This bit enables H2B_FIFO_ERR in INT_STATUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_FIFO_ERR_BF_OFF ( 9)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_FIFO_ERR_BF_MSK (0x00000200)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_FIFO_ERR_BF_DEF (0x00000000)

///< High Enable for B2H FIFO Error. This bit enables B2H_FIFO_ERR in INT_STATUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FIFO_ERR_BF_OFF (10)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FIFO_ERR_BF_MSK (0x00000400)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_FIFO_ERR_BF_DEF (0x00000000)

///< High Enable for SMON Interrupt. This bit enables SMON_INT in INT_STAUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_SMON_BF_OFF (11)
#define NSIP_HBI_INTR_INT_HIGH_EN_SMON_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_SMON_BF_MSK (0x00000800)
#define NSIP_HBI_INTR_INT_HIGH_EN_SMON_BF_DEF (0x00000000)

///< High Enable for H2B Drop Command FIFO Overflow. Each bit enables H2B_DROP_FF_OVFL
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_DROP_FF_OVFL_BF_OFF (12)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_DROP_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_DROP_FF_OVFL_BF_MSK (0x00003000)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_DROP_FF_OVFL_BF_DEF (0x00000000)

///< High Enable for B2H Insert Command FIFO Overflow. Each bit enables
///< B2H_INSERT_FF_OVFL in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_FF_OVFL_BF_OFF (14)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_FF_OVFL_BF_MSK (0x0000C000)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_FF_OVFL_BF_DEF (0x00000000)

///< High Enable for B2H Insert VEX Data Drop. This bit enables B2H_INSERT_VEX_DROP
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_VEX_DROP_BF_OFF (16)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_VEX_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_VEX_DROP_BF_MSK (0x00010000)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INSERT_VEX_DROP_BF_DEF (0x00000000)

///< High Enable for H2B No SOP Error. This bit enables H2B_NO_SOP_ERR
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_SOP_ERR_BF_OFF (17)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_SOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_SOP_ERR_BF_MSK (0x00020000)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_SOP_ERR_BF_DEF (0x00000000)

///< High Enable for H2B No EOP Error. This bit enables H2B_NO_EOP_ERR
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_EOP_ERR_BF_OFF (18)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_EOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_EOP_ERR_BF_MSK (0x00040000)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_NO_EOP_ERR_BF_DEF (0x00000000)

///< High Enable for H2B LEN Error. This bit enables H2B_LEN_ERR in INT_STATUS
///< register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_LEN_ERR_BF_OFF (19)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_LEN_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_LEN_ERR_BF_MSK (0x00080000)
#define NSIP_HBI_INTR_INT_HIGH_EN_H2B_LEN_ERR_BF_DEF (0x00000000)

///< High Enable for B2H Insertion FIFO Error. This bit enables B2H_INS_FIFO_ERR
///< in INT_STATUS register for high interrupt.
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INS_FIFO_ERR_BF_OFF (20)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INS_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INS_FIFO_ERR_BF_MSK (0x00100000)
#define NSIP_HBI_INTR_INT_HIGH_EN_B2H_INS_FIFO_ERR_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_INTR_INT_LOW_EN register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/intr/INT_LOW_EN
  * HBI Low Priority Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t LOW_EN_B2H_FF_FULL_DROP : 1;
    ///< Low Enable for B2H FIFO Full Drop. This bit enables B2H_FF_FULL_DROP
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LOW_EN_B2H_NOMAP_DROP : 1;
    ///< Low Enable for B2H No Mapping Drop. This bit enables B2H_NOMAP_DROP
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t LOW_EN_B2H_MATCH_ERR : 1;
    ///< Low Enable for B2H Address Match Error. This bit enables B2H_MATCH_ERR
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LOW_EN_B2H_TYPE_ERR : 1;
    ///< Low Enable for B2H Type Error. This bit enables B2H_TYPE_ERR in INT_STATUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t LOW_EN_RESERVED_4 : 1;
    ///< Low Enable for Reserved_4. This bit enables Reserved_4 in INT_STATUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LOW_EN_RESERVED_5 : 1;
    ///< Low Enable for Reserved_5. This bit enables Reserved_5 in INT_STATUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t LOW_EN_H2B_NOLKUP_DROP : 1;
    ///< Low Enable for H2B No Lookup Drop. This bit enables H2B_NOLKUP_DROP
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LOW_EN_H2B_CQ_FF_OVFL : 1;
    ///< Low Enable for H2B Metadata Command FIFO Overflow. This bit enables
    ///< H2B_CQ_FF_OVFL in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t LOW_EN_H2B_TK_IN_PKT : 1;
    ///< Low Enable for H2B Token In Packet. This bit enables H2B_TK_IN_PKT
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t LOW_EN_H2B_FIFO_ERR : 1;
    ///< Low Enable for H2B FIFO Error. This bit enables H2B_FIFO_ERR in INT_STATUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t LOW_EN_B2H_FIFO_ERR : 1;
    ///< Low Enable for B2H FIFO Error. This bit enables B2H_FIFO_ERR in INT_STATUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t LOW_EN_SMON_INT : 1;
    ///< Low Enable for SMON Interrupt. This bit enables SMON_INT in INT_STAUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t LOW_EN_H2B_DROP_FF_OVFL : 2;
    ///< Low Enable for H2B Drop Command FIFO Overflow. Each bit enables H2B_DROP_FF_OVFL
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t LOW_EN_B2H_INSERT_FF_OVFL : 2;
    ///< Low Enable for B2H Insert Command FIFO Overflow. Each bit enables
    ///< B2H_INSERT_FF_OVFL in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t LOW_EN_B2H_INSERT_VEX_DROP : 1;
    ///< Low Enable for B2H Insert VEX Data Drop. This bit enables B2H_INSERT_VEX_DROP
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t LOW_EN_H2B_NO_SOP_ERR : 1;
    ///< Low Enable for H2B No SOP Error. This bit enables H2B_NO_SOP_ERR in
    ///< INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t LOW_EN_H2B_NO_EOP_ERR : 1;
    ///< Low Enable for H2B No EOP Error. This bit enables H2B_NO_EOP_ERR in
    ///< INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t LOW_EN_H2B_LEN_ERR : 1;
    ///< Low Enable for H2B LEN Error. This bit enables H2B_LEN_ERR in INT_STATUS
    ///< register for low interrupt.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t LOW_EN_B2H_INS_FIFO_ERR : 1;
    ///< Low Enable for B2H Insertion FIFO Error. This bit enables B2H_INS_FIFO_ERR
    ///< in INT_STATUS register for low interrupt.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_intr_int_low_en_reg_t;

#define NSIP_HBI_INTR_INT_LOW_EN_DEFAULT (0x00000000U)
#define NSIP_HBI_INTR_INT_LOW_EN_RD_MASK (0x001fffffU)
#define NSIP_HBI_INTR_INT_LOW_EN_WR_MASK (0x001fffffU)


///< Low Enable for B2H FIFO Full Drop. This bit enables B2H_FF_FULL_DROP
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FF_FULL_DROP_BF_OFF ( 0)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FF_FULL_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FF_FULL_DROP_BF_MSK (0x00000001)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FF_FULL_DROP_BF_DEF (0x00000000)

///< Low Enable for B2H No Mapping Drop. This bit enables B2H_NOMAP_DROP
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_NOMAP_DROP_BF_OFF ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_NOMAP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_NOMAP_DROP_BF_MSK (0x00000002)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_NOMAP_DROP_BF_DEF (0x00000000)

///< Low Enable for B2H Address Match Error. This bit enables B2H_MATCH_ERR
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_MATCH_ERR_BF_OFF ( 2)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_MATCH_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_MATCH_ERR_BF_MSK (0x00000004)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_MATCH_ERR_BF_DEF (0x00000000)

///< Low Enable for B2H Type Error. This bit enables B2H_TYPE_ERR in INT_STATUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_TYPE_ERR_BF_OFF ( 3)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_TYPE_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_TYPE_ERR_BF_MSK (0x00000008)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_TYPE_ERR_BF_DEF (0x00000000)

///< Low Enable for Reserved_4. This bit enables Reserved_4 in INT_STATUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_4_BF_OFF ( 4)
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_4_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_4_BF_MSK (0x00000010)
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_4_BF_DEF (0x00000000)

///< Low Enable for Reserved_5. This bit enables Reserved_5 in INT_STATUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_5_BF_OFF ( 5)
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_5_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_5_BF_MSK (0x00000020)
#define NSIP_HBI_INTR_INT_LOW_EN_RESERVED_5_BF_DEF (0x00000000)

///< Low Enable for H2B No Lookup Drop. This bit enables H2B_NOLKUP_DROP
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NOLKUP_DROP_BF_OFF ( 6)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NOLKUP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NOLKUP_DROP_BF_MSK (0x00000040)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NOLKUP_DROP_BF_DEF (0x00000000)

///< Low Enable for H2B Metadata Command FIFO Overflow. This bit enables
///< H2B_CQ_FF_OVFL in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_CQ_FF_OVFL_BF_OFF ( 7)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_CQ_FF_OVFL_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_CQ_FF_OVFL_BF_MSK (0x00000080)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_CQ_FF_OVFL_BF_DEF (0x00000000)

///< Low Enable for H2B Token In Packet. This bit enables H2B_TK_IN_PKT
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_TK_IN_PKT_BF_OFF ( 8)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_TK_IN_PKT_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_TK_IN_PKT_BF_MSK (0x00000100)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_TK_IN_PKT_BF_DEF (0x00000000)

///< Low Enable for H2B FIFO Error. This bit enables H2B_FIFO_ERR in INT_STATUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_FIFO_ERR_BF_OFF ( 9)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_FIFO_ERR_BF_MSK (0x00000200)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_FIFO_ERR_BF_DEF (0x00000000)

///< Low Enable for B2H FIFO Error. This bit enables B2H_FIFO_ERR in INT_STATUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FIFO_ERR_BF_OFF (10)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FIFO_ERR_BF_MSK (0x00000400)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_FIFO_ERR_BF_DEF (0x00000000)

///< Low Enable for SMON Interrupt. This bit enables SMON_INT in INT_STAUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_SMON_BF_OFF (11)
#define NSIP_HBI_INTR_INT_LOW_EN_SMON_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_SMON_BF_MSK (0x00000800)
#define NSIP_HBI_INTR_INT_LOW_EN_SMON_BF_DEF (0x00000000)

///< Low Enable for H2B Drop Command FIFO Overflow. Each bit enables H2B_DROP_FF_OVFL
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_DROP_FF_OVFL_BF_OFF (12)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_DROP_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_DROP_FF_OVFL_BF_MSK (0x00003000)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_DROP_FF_OVFL_BF_DEF (0x00000000)

///< Low Enable for B2H Insert Command FIFO Overflow. Each bit enables
///< B2H_INSERT_FF_OVFL in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_FF_OVFL_BF_OFF (14)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_FF_OVFL_BF_MSK (0x0000C000)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_FF_OVFL_BF_DEF (0x00000000)

///< Low Enable for B2H Insert VEX Data Drop. This bit enables B2H_INSERT_VEX_DROP
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_VEX_DROP_BF_OFF (16)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_VEX_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_VEX_DROP_BF_MSK (0x00010000)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INSERT_VEX_DROP_BF_DEF (0x00000000)

///< Low Enable for H2B No SOP Error. This bit enables H2B_NO_SOP_ERR in
///< INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_SOP_ERR_BF_OFF (17)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_SOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_SOP_ERR_BF_MSK (0x00020000)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_SOP_ERR_BF_DEF (0x00000000)

///< Low Enable for H2B No EOP Error. This bit enables H2B_NO_EOP_ERR in
///< INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_EOP_ERR_BF_OFF (18)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_EOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_EOP_ERR_BF_MSK (0x00040000)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_NO_EOP_ERR_BF_DEF (0x00000000)

///< Low Enable for H2B LEN Error. This bit enables H2B_LEN_ERR in INT_STATUS
///< register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_LEN_ERR_BF_OFF (19)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_LEN_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_LEN_ERR_BF_MSK (0x00080000)
#define NSIP_HBI_INTR_INT_LOW_EN_H2B_LEN_ERR_BF_DEF (0x00000000)

///< Low Enable for B2H Insertion FIFO Error. This bit enables B2H_INS_FIFO_ERR
///< in INT_STATUS register for low interrupt.
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INS_FIFO_ERR_BF_OFF (20)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INS_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INS_FIFO_ERR_BF_MSK (0x00100000)
#define NSIP_HBI_INTR_INT_LOW_EN_B2H_INS_FIFO_ERR_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_INTR_INT_CLEAR register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/intr/INT_CLEAR
  * HBI Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t CLEAR_B2H_FF_FULL_DROP : 1;
    ///< B2H FIFO Full Drop Clear. This bit clears B2H_FF_FULL_DROP in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CLEAR_B2H_NOMAP_DROP : 1;
    ///< B2H No Mapping Drop Clear. This bit clears B2H_NOMAP_DROP in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CLEAR_B2H_MATCH_ERR : 1;
    ///< B2H Address Match Error Clear. This bit clears B2H_MATCH_ERR in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CLEAR_B2H_TYPE_ERR : 1;
    ///< B2H Type Error Clear. This bit clears B2H_TYPE_ERR in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CLEAR_RESERVED_4 : 1;
    ///< Reserved_4 Clear. This bit clears Reserved_4 in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CLEAR_RESERVED_5 : 1;
    ///< Reserved_5 Clear. This bit clears Reserved_5 in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CLEAR_H2B_NOLKUP_DROP : 1;
    ///< H2B No Lookup Drop Clear. This bit clears H2B_NOLKUP_DROP in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CLEAR_H2B_CQ_FF_OVFL : 1;
    ///< H2B Metadata Command FIFO Overflow Clear. This bit clears H2B_CQ_FF_OVFL
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CLEAR_H2B_TK_IN_PKT : 1;
    ///< H2B Token In Packet Clear. This bit clears H2B_TK_IN_PKT in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CLEAR_H2B_FIFO_ERR : 1;
    ///< H2B FIFO Error Clear. This bit clears H2B_FIFO_ERR in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CLEAR_B2H_FIFO_ERR : 1;
    ///< B2H FIFO Error Clear. This bit clears B2H_FIFO_ERR in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CLEAR_SMON_INT : 1;
    ///< SMON Interrupt Clear. This bit clears SMON_INT in INT_STAUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CLEAR_H2B_DROP_FF_OVFL : 2;
    ///< H2B Drop Command FIFO Overflow Clear. Each bit clears H2B_DROP_FF_OVFL
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CLEAR_B2H_INSERT_FF_OVFL : 2;
    ///< B2H Insert Command FIFO Overflow Clear. Each bit clears B2H_INSERT_FF_OVFL
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CLEAR_B2H_INSERT_VEX_DROP : 1;
    ///< B2H Insert VEX Data Drop Clear. This bit clears B2H_INSERT_VEX_DROP
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CLEAR_H2B_NO_SOP_ERR : 1;
    ///< H2B No SOP Error Clear. This bit clears H2B_NO_SOP_ERR in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CLEAR_H2B_NO_EOP_ERR : 1;
    ///< H2B No EOP Error Clear. This bit clears H2B_NO_EOP_ERR in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CLEAR_H2B_LEN_ERR : 1;
    ///< H2B LEN Error Clear. This bit clears H2B_LEN_ERR in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t CLEAR_B2H_INS_FIFO_ERR : 1;
    ///< B2H Insertion FIFO Error Clear. This bit clears B2H_INS_FIFO_ERR in
    ///< INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_intr_int_clr_reg_t;

#define NSIP_HBI_INTR_INT_CLR_DEFAULT (0x00000000U)
#define NSIP_HBI_INTR_INT_CLR_RD_MASK (0x001fffffU)
#define NSIP_HBI_INTR_INT_CLR_WR_MASK (0x001fffffU)


///< B2H FIFO Full Drop Clear. This bit clears B2H_FF_FULL_DROP in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_FF_FULL_DROP_BF_OFF ( 0)
#define NSIP_HBI_INTR_INT_CLR_B2H_FF_FULL_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_FF_FULL_DROP_BF_MSK (0x00000001)
#define NSIP_HBI_INTR_INT_CLR_B2H_FF_FULL_DROP_BF_DEF (0x00000000)

///< B2H No Mapping Drop Clear. This bit clears B2H_NOMAP_DROP in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_NOMAP_DROP_BF_OFF ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_NOMAP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_NOMAP_DROP_BF_MSK (0x00000002)
#define NSIP_HBI_INTR_INT_CLR_B2H_NOMAP_DROP_BF_DEF (0x00000000)

///< B2H Address Match Error Clear. This bit clears B2H_MATCH_ERR in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_MATCH_ERR_BF_OFF ( 2)
#define NSIP_HBI_INTR_INT_CLR_B2H_MATCH_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_MATCH_ERR_BF_MSK (0x00000004)
#define NSIP_HBI_INTR_INT_CLR_B2H_MATCH_ERR_BF_DEF (0x00000000)

///< B2H Type Error Clear. This bit clears B2H_TYPE_ERR in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_TYPE_ERR_BF_OFF ( 3)
#define NSIP_HBI_INTR_INT_CLR_B2H_TYPE_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_TYPE_ERR_BF_MSK (0x00000008)
#define NSIP_HBI_INTR_INT_CLR_B2H_TYPE_ERR_BF_DEF (0x00000000)

///< Reserved_4 Clear. This bit clears Reserved_4 in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_RESERVED_4_BF_OFF ( 4)
#define NSIP_HBI_INTR_INT_CLR_RESERVED_4_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_RESERVED_4_BF_MSK (0x00000010)
#define NSIP_HBI_INTR_INT_CLR_RESERVED_4_BF_DEF (0x00000000)

///< Reserved_5 Clear. This bit clears Reserved_5 in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_RESERVED_5_BF_OFF ( 5)
#define NSIP_HBI_INTR_INT_CLR_RESERVED_5_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_RESERVED_5_BF_MSK (0x00000020)
#define NSIP_HBI_INTR_INT_CLR_RESERVED_5_BF_DEF (0x00000000)

///< H2B No Lookup Drop Clear. This bit clears H2B_NOLKUP_DROP in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_NOLKUP_DROP_BF_OFF ( 6)
#define NSIP_HBI_INTR_INT_CLR_H2B_NOLKUP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_NOLKUP_DROP_BF_MSK (0x00000040)
#define NSIP_HBI_INTR_INT_CLR_H2B_NOLKUP_DROP_BF_DEF (0x00000000)

///< H2B Metadata Command FIFO Overflow Clear. This bit clears H2B_CQ_FF_OVFL
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_CQ_FF_OVFL_BF_OFF ( 7)
#define NSIP_HBI_INTR_INT_CLR_H2B_CQ_FF_OVFL_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_CQ_FF_OVFL_BF_MSK (0x00000080)
#define NSIP_HBI_INTR_INT_CLR_H2B_CQ_FF_OVFL_BF_DEF (0x00000000)

///< H2B Token In Packet Clear. This bit clears H2B_TK_IN_PKT in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_TK_IN_PKT_BF_OFF ( 8)
#define NSIP_HBI_INTR_INT_CLR_H2B_TK_IN_PKT_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_TK_IN_PKT_BF_MSK (0x00000100)
#define NSIP_HBI_INTR_INT_CLR_H2B_TK_IN_PKT_BF_DEF (0x00000000)

///< H2B FIFO Error Clear. This bit clears H2B_FIFO_ERR in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_FIFO_ERR_BF_OFF ( 9)
#define NSIP_HBI_INTR_INT_CLR_H2B_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_FIFO_ERR_BF_MSK (0x00000200)
#define NSIP_HBI_INTR_INT_CLR_H2B_FIFO_ERR_BF_DEF (0x00000000)

///< B2H FIFO Error Clear. This bit clears B2H_FIFO_ERR in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_FIFO_ERR_BF_OFF (10)
#define NSIP_HBI_INTR_INT_CLR_B2H_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_FIFO_ERR_BF_MSK (0x00000400)
#define NSIP_HBI_INTR_INT_CLR_B2H_FIFO_ERR_BF_DEF (0x00000000)

///< SMON Interrupt Clear. This bit clears SMON_INT in INT_STAUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_SMON_BF_OFF (11)
#define NSIP_HBI_INTR_INT_CLR_SMON_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_SMON_BF_MSK (0x00000800)
#define NSIP_HBI_INTR_INT_CLR_SMON_BF_DEF (0x00000000)

///< H2B Drop Command FIFO Overflow Clear. Each bit clears H2B_DROP_FF_OVFL
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_DROP_FF_OVFL_BF_OFF (12)
#define NSIP_HBI_INTR_INT_CLR_H2B_DROP_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_CLR_H2B_DROP_FF_OVFL_BF_MSK (0x00003000)
#define NSIP_HBI_INTR_INT_CLR_H2B_DROP_FF_OVFL_BF_DEF (0x00000000)

///< B2H Insert Command FIFO Overflow Clear. Each bit clears B2H_INSERT_FF_OVFL
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_FF_OVFL_BF_OFF (14)
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_FF_OVFL_BF_MSK (0x0000C000)
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_FF_OVFL_BF_DEF (0x00000000)

///< B2H Insert VEX Data Drop Clear. This bit clears B2H_INSERT_VEX_DROP
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_VEX_DROP_BF_OFF (16)
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_VEX_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_VEX_DROP_BF_MSK (0x00010000)
#define NSIP_HBI_INTR_INT_CLR_B2H_INSERT_VEX_DROP_BF_DEF (0x00000000)

///< H2B No SOP Error Clear. This bit clears H2B_NO_SOP_ERR in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_SOP_ERR_BF_OFF (17)
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_SOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_SOP_ERR_BF_MSK (0x00020000)
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_SOP_ERR_BF_DEF (0x00000000)

///< H2B No EOP Error Clear. This bit clears H2B_NO_EOP_ERR in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_EOP_ERR_BF_OFF (18)
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_EOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_EOP_ERR_BF_MSK (0x00040000)
#define NSIP_HBI_INTR_INT_CLR_H2B_NO_EOP_ERR_BF_DEF (0x00000000)

///< H2B LEN Error Clear. This bit clears H2B_LEN_ERR in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_CLR_H2B_LEN_ERR_BF_OFF (19)
#define NSIP_HBI_INTR_INT_CLR_H2B_LEN_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_H2B_LEN_ERR_BF_MSK (0x00080000)
#define NSIP_HBI_INTR_INT_CLR_H2B_LEN_ERR_BF_DEF (0x00000000)

///< B2H Insertion FIFO Error Clear. This bit clears B2H_INS_FIFO_ERR in
///< INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_CLR_B2H_INS_FIFO_ERR_BF_OFF (20)
#define NSIP_HBI_INTR_INT_CLR_B2H_INS_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_CLR_B2H_INS_FIFO_ERR_BF_MSK (0x00100000)
#define NSIP_HBI_INTR_INT_CLR_B2H_INS_FIFO_ERR_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_INTR_INT_FORCE register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/intr/INT_FORCE
  * HBI Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t FORCE_B2H_FF_FULL_DROP : 1;
    ///< B2H FIFO Full Drop Force. This bit forces B2H_FF_FULL_DROP bit to
    ///< 1 in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FORCE_B2H_NOMAP_DROP : 1;
    ///< B2H No Mapping Drop Force. This bit forces B2H_NOMAP_DROP bit to 1
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t FORCE_B2H_MATCH_ERR : 1;
    ///< B2H Address Match Error Force. This bit forces B2H_MATCH_ERR in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t FORCE_B2H_TYPE_ERR : 1;
    ///< B2H Type Error Force. This bit forces B2H_TYPE_ERR in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t FORCE_RESERVED_4 : 1;
    ///< Reserved, bit 4. This bit forces Reserved_4 in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t FORCE_RESERVED_5 : 1;
    ///< Reserved, bit 5. This bit forces Reserved_5 in INT_STATUS register
    ///< for interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t FORCE_H2B_NOLKUP_DROP : 1;
    ///< H2B No Lookup Drop Force. This bit forces H2B_NOLKUP_DROP bit to 1
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t FORCE_H2B_CQ_FF_OVFL : 1;
    ///< H2B Metadata Command FIFO Overflow Force. This bit forces H2B_CQ_FF_OVFL
    ///< bit to be 1 in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t FORCE_H2B_TK_IN_PKT : 1;
    ///< H2B Token In Packet Force. This bit forces H2B_TK_IN_PKT to 1 in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t FORCE_H2B_FIFO_ERR : 1;
    ///< H2B FIFO Error Force. This bit forces H2B_FIFO_ERR bit to 1 in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t FORCE_B2H_FIFO_ERR : 1;
    ///< B2H FIFO Error Force. This bit forces B2H_FIFO_ERR bit to 1 in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t FORCE_SMON_INT : 1;
    ///< SMON Interrupt Force. This bit forces SMON_INT bit to 1 in INT_STAUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t FORCE_H2B_DROP_FF_OVFL : 2;
    ///< H2B Drop Command FIFO Overflow Force. Each bit forces H2B_DROP_FF_OVFL
    ///< bit to be 1 in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t FORCE_B2H_INSERT_FF_OVFL : 2;
    ///< B2H Insert Command FIFO Overflow Force. Each bit forces B2H_INSERT_FF_OVFL
    ///< bit to be 1 in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t FORCE_B2H_INSERT_VEX_DROP : 1;
    ///< B2H Insert VEX Data Drop Force. This bit forces B2H_INSERT_VEX_DROP
    ///< bit to be 1 in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t FORCE_H2B_NO_SOP_ERR : 1;
    ///< H2B No SOP Error Force. This bit forces H2B_NO_SOP_ERR bit to be 1
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t FORCE_H2B_NO_EOP_ERR : 1;
    ///< H2B No EOP Error Force. This bit forces H2B_NO_EOP_ERR bit to be 1
    ///< in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t FORCE_H2B_LEN_ERR : 1;
    ///< H2B LEN Error Force. This bit forces H2B_LEN_ERR bit to be 1 in INT_STATUS
    ///< register for interrupt.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t FORCE_B2H_INS_FIFO_ERR : 1;
    ///< B2H Insertion FIFO Error Force. This bit forces B2H_INS_FIFO_ERR bit
    ///< to 1 in INT_STATUS register for interrupt.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_intr_int_force_reg_t;

#define NSIP_HBI_INTR_INT_FORCE_DEFAULT (0x00000000U)
#define NSIP_HBI_INTR_INT_FORCE_RD_MASK (0x001fffffU)
#define NSIP_HBI_INTR_INT_FORCE_WR_MASK (0x001fffffU)


///< B2H FIFO Full Drop Force. This bit forces B2H_FF_FULL_DROP bit to
///< 1 in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_FF_FULL_DROP_BF_OFF ( 0)
#define NSIP_HBI_INTR_INT_FORCE_B2H_FF_FULL_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_FF_FULL_DROP_BF_MSK (0x00000001)
#define NSIP_HBI_INTR_INT_FORCE_B2H_FF_FULL_DROP_BF_DEF (0x00000000)

///< B2H No Mapping Drop Force. This bit forces B2H_NOMAP_DROP bit to 1
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_NOMAP_DROP_BF_OFF ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_NOMAP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_NOMAP_DROP_BF_MSK (0x00000002)
#define NSIP_HBI_INTR_INT_FORCE_B2H_NOMAP_DROP_BF_DEF (0x00000000)

///< B2H Address Match Error Force. This bit forces B2H_MATCH_ERR in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_MATCH_ERR_BF_OFF ( 2)
#define NSIP_HBI_INTR_INT_FORCE_B2H_MATCH_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_MATCH_ERR_BF_MSK (0x00000004)
#define NSIP_HBI_INTR_INT_FORCE_B2H_MATCH_ERR_BF_DEF (0x00000000)

///< B2H Type Error Force. This bit forces B2H_TYPE_ERR in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_TYPE_ERR_BF_OFF ( 3)
#define NSIP_HBI_INTR_INT_FORCE_B2H_TYPE_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_TYPE_ERR_BF_MSK (0x00000008)
#define NSIP_HBI_INTR_INT_FORCE_B2H_TYPE_ERR_BF_DEF (0x00000000)

///< Reserved, bit 4. This bit forces Reserved_4 in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_4_BF_OFF ( 4)
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_4_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_4_BF_MSK (0x00000010)
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_4_BF_DEF (0x00000000)

///< Reserved, bit 5. This bit forces Reserved_5 in INT_STATUS register
///< for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_5_BF_OFF ( 5)
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_5_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_5_BF_MSK (0x00000020)
#define NSIP_HBI_INTR_INT_FORCE_RESERVED_5_BF_DEF (0x00000000)

///< H2B No Lookup Drop Force. This bit forces H2B_NOLKUP_DROP bit to 1
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_NOLKUP_DROP_BF_OFF ( 6)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NOLKUP_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NOLKUP_DROP_BF_MSK (0x00000040)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NOLKUP_DROP_BF_DEF (0x00000000)

///< H2B Metadata Command FIFO Overflow Force. This bit forces H2B_CQ_FF_OVFL
///< bit to be 1 in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_CQ_FF_OVFL_BF_OFF ( 7)
#define NSIP_HBI_INTR_INT_FORCE_H2B_CQ_FF_OVFL_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_CQ_FF_OVFL_BF_MSK (0x00000080)
#define NSIP_HBI_INTR_INT_FORCE_H2B_CQ_FF_OVFL_BF_DEF (0x00000000)

///< H2B Token In Packet Force. This bit forces H2B_TK_IN_PKT to 1 in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_TK_IN_PKT_BF_OFF ( 8)
#define NSIP_HBI_INTR_INT_FORCE_H2B_TK_IN_PKT_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_TK_IN_PKT_BF_MSK (0x00000100)
#define NSIP_HBI_INTR_INT_FORCE_H2B_TK_IN_PKT_BF_DEF (0x00000000)

///< H2B FIFO Error Force. This bit forces H2B_FIFO_ERR bit to 1 in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_FIFO_ERR_BF_OFF ( 9)
#define NSIP_HBI_INTR_INT_FORCE_H2B_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_FIFO_ERR_BF_MSK (0x00000200)
#define NSIP_HBI_INTR_INT_FORCE_H2B_FIFO_ERR_BF_DEF (0x00000000)

///< B2H FIFO Error Force. This bit forces B2H_FIFO_ERR bit to 1 in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_FIFO_ERR_BF_OFF (10)
#define NSIP_HBI_INTR_INT_FORCE_B2H_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_FIFO_ERR_BF_MSK (0x00000400)
#define NSIP_HBI_INTR_INT_FORCE_B2H_FIFO_ERR_BF_DEF (0x00000000)

///< SMON Interrupt Force. This bit forces SMON_INT bit to 1 in INT_STAUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_SMON_BF_OFF (11)
#define NSIP_HBI_INTR_INT_FORCE_SMON_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_SMON_BF_MSK (0x00000800)
#define NSIP_HBI_INTR_INT_FORCE_SMON_BF_DEF (0x00000000)

///< H2B Drop Command FIFO Overflow Force. Each bit forces H2B_DROP_FF_OVFL
///< bit to be 1 in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_DROP_FF_OVFL_BF_OFF (12)
#define NSIP_HBI_INTR_INT_FORCE_H2B_DROP_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_FORCE_H2B_DROP_FF_OVFL_BF_MSK (0x00003000)
#define NSIP_HBI_INTR_INT_FORCE_H2B_DROP_FF_OVFL_BF_DEF (0x00000000)

///< B2H Insert Command FIFO Overflow Force. Each bit forces B2H_INSERT_FF_OVFL
///< bit to be 1 in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_FF_OVFL_BF_OFF (14)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_FF_OVFL_BF_WID ( 2)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_FF_OVFL_BF_MSK (0x0000C000)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_FF_OVFL_BF_DEF (0x00000000)

///< B2H Insert VEX Data Drop Force. This bit forces B2H_INSERT_VEX_DROP
///< bit to be 1 in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_VEX_DROP_BF_OFF (16)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_VEX_DROP_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_VEX_DROP_BF_MSK (0x00010000)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INSERT_VEX_DROP_BF_DEF (0x00000000)

///< H2B No SOP Error Force. This bit forces H2B_NO_SOP_ERR bit to be 1
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_SOP_ERR_BF_OFF (17)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_SOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_SOP_ERR_BF_MSK (0x00020000)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_SOP_ERR_BF_DEF (0x00000000)

///< H2B No EOP Error Force. This bit forces H2B_NO_EOP_ERR bit to be 1
///< in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_EOP_ERR_BF_OFF (18)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_EOP_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_EOP_ERR_BF_MSK (0x00040000)
#define NSIP_HBI_INTR_INT_FORCE_H2B_NO_EOP_ERR_BF_DEF (0x00000000)

///< H2B LEN Error Force. This bit forces H2B_LEN_ERR bit to be 1 in INT_STATUS
///< register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_H2B_LEN_ERR_BF_OFF (19)
#define NSIP_HBI_INTR_INT_FORCE_H2B_LEN_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_H2B_LEN_ERR_BF_MSK (0x00080000)
#define NSIP_HBI_INTR_INT_FORCE_H2B_LEN_ERR_BF_DEF (0x00000000)

///< B2H Insertion FIFO Error Force. This bit forces B2H_INS_FIFO_ERR bit
///< to 1 in INT_STATUS register for interrupt.
#define NSIP_HBI_INTR_INT_FORCE_B2H_INS_FIFO_ERR_BF_OFF (20)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INS_FIFO_ERR_BF_WID ( 1)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INS_FIFO_ERR_BF_MSK (0x00100000)
#define NSIP_HBI_INTR_INT_FORCE_B2H_INS_FIFO_ERR_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON00 register description at address offset 0xa0
  *
  * Register default value:        0x40000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON00
  * AW_smon CONTROL0 register
  */

typedef union {
  struct {
    uint32_t SMON_ENABLE : 1;
    ///< enable the SMON counters
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSVD0 : 3;
    ///< reserved
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SMON0_FUNCTION : 3;
    ///< SMON0 function    mode00 = 3'h0   desc =  free running function. Trigger
    ///< to accumulate the value into the engine SMON_COUNT when an event is
    ///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
    ///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
    ///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
    ///< to update max value when an event is valid and larger than the current
    ///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
    ///< =  Timestamp First Mode. Capture the timer value on the first occurance
    ///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
    ///< desc =  Timestamp Mode. Capture the timer value on every occurance
    ///< of an event.  ;  ;
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SMON0_FUNCTION_COMPARE : 1;
    ///< SMON0 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
    ///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SMON1_FUNCTION : 3;
    ///< SMON1 function    mode00 = 3'h0   desc =  free running function. Trigger
    ///< to accumulate the value into the engine SMON_COUNT when an event is
    ///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
    ///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
    ///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
    ///< to update max value when an event is valid and larger than the current
    ///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
    ///< =  Timestamp First Mode. Capture the timer value on the first occurance
    ///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
    ///< desc =  Timestamp Mode. Capture the timer value on every occurance
    ///< of an event.  ;  ;
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SMON1_FUNCTION_COMPARE : 1;
    ///< SMON1 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
    ///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t SMON_MODE : 4;
    ///< SMON mode    mode00 = 4'h0   desc =  Independant Mode. SMON0_COUNT
    ///< & SMON1_COUNT operate independantly as their function is configured.
    ///< ;  ;    mode01 = 4'h1   desc =  Average Latency Mode. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT accumulates
    ///< occurances and SMON1_COUNT accumulates timer values. For multiple
    ///< stop for a single start, accumulate  start_to_stop1,  start_to_stop1stop2
    ///< ... ;  ;    mode02 = 4'h2   desc =  MinMax Latency Mode,. SMON0 trigger
    ///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
    ///< minimum timer value and SMON1_COUNT maintains the maximum timer value
    ///< ;  ;    mode03 = 4'h3   desc =  Average Mode.   SMON0 trigger increments
    ///< SMON0_COUNT and the value is accumulated in SMON1_COUNT. SMON1 events
    ///< are disabled. ;  ;    mode04 = 4'h4   desc =  Average Lantecy Mode
    ///< 2. same as mode01, but only accumulate the first start_to_stop1 if
    ///< there are multiple stop for each start ;  ;    mode05 = 4'h5   desc
    ///< =  Average Latency Mode 3. same as mode01, but accumualte the incremental
    ///< start_to_stop1, stop1_to_stop2... if there are multiple stop for each
    ///< start ;  ;
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t STOPCOUNTEROVFL : 1;
    ///< configure to stop on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t INTCOUNTEROVFL : 1;
    ///< configure to interupt on counter0 or counter1 overflow
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t STATCOUNTER0OVFL : 1;
    ///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t STATCOUNTER1OVFL : 1;
    ///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t STOPTIMEROVFL : 1;
    ///< configure to stop on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INTTIMEROVFL : 1;
    ///< configure to interrupt on timer overflow or timer>maxvalue
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t STATTIMEROVFL : 1;
    ///< status of timer overflow. A value of '1' signifies timer overflow,
    ///< or timer>maxvalue.
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RSVD1 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t TIMER_PRESCALE : 5;
    ///< timer prescale    mode00 = 5'h00   desc =  increment timer every
    ///< 1 clock ;  ;    mode01 = 5'h01   desc =  increment timer every
    ///< 2 clocks ;  ;    mode02 = 5'h02   desc =  increment timer every
    ///< 4 clocks ;  ;    mode03 = 5'h03   desc =  increment timer every
    ///< 8 clocks ;  ;    mode04 = 5'h04   desc =  increment timer every
    ///< 16 clocks ;  ;    mode05 = 5'h05   desc =  increment timer every
    ///< 32 clocks ;  ;    mode06 = 5'h06   desc =  increment timer every
    ///< 64 clocks ;  ;    mode07 = 5'h07   desc =  increment timer every
    ///< 128 clocks ;  ;    mode08 = 5'h08   desc =  increment timer every
    ///< 256 clocks ;  ;    mode09 = 5'h09   desc =  increment timer every
    ///< 512 clocks ;  ;    mode10 = 5'h0a   desc =  increment timer every
    ///< 1024 clocks ;  ;    mode11 = 5'h0b   desc =  increment timer every
    ///< 2048 clocks ;  ;    mode12 = 5'h0c   desc =  increment timer every
    ///< 4096 clocks ;  ;    mode13 = 5'h0d   desc =  increment timer every
    ///< 8192 clocks ;  ;    mode14 = 5'h0e   desc =  increment timer every
    ///< 16384 clocks ;  ;    mode15 = 5'h0f   desc =  increment timer every
    ///< 32768 clocks ;  ;    mode16 = 5'h10   desc =  increment timer every
    ///< 65536 clocks ;  ;    mode17 = 5'h11   desc =  increment timer every
    ///< 131072 clocks ;  ;    mode18 = 5'h12   desc =  increment timer every
    ///< 262144 clocks ;  ;    mode19 = 5'h13   desc =  increment timer every
    ///< 524288 clocks ;  ;
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t RSVD2 : 1;
    ///< reserved
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t VERSION : 2;
    ///< version
    ///< AccessType="RO" BitOffset="30" ResetValue="0x1"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon00_reg_t;

#define NSIP_HBI_SMON_SMON00_DEFAULT (0x40000000U)
#define NSIP_HBI_SMON_SMON00_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON00_WR_MASK (0x3fffffffU)


///< enable the SMON counters
#define NSIP_HBI_SMON_SMON00_EN_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON00_EN_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_EN_BF_MSK (0x00000001)
#define NSIP_HBI_SMON_SMON00_EN_BF_DEF (0x00000000)

///< reserved
#define NSIP_HBI_SMON_SMON00_RSVD0_BF_OFF ( 1)
#define NSIP_HBI_SMON_SMON00_RSVD0_BF_WID ( 3)
#define NSIP_HBI_SMON_SMON00_RSVD0_BF_MSK (0x0000000E)
#define NSIP_HBI_SMON_SMON00_RSVD0_BF_DEF (0x00000000)

///< SMON0 function    mode00 = 3'h0   desc =  free running function. Trigger
///< to accumulate the value into the engine SMON_COUNT when an event is
///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
///< to update max value when an event is valid and larger than the current
///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
///< =  Timestamp First Mode. Capture the timer value on the first occurance
///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
///< desc =  Timestamp Mode. Capture the timer value on every occurance
///< of an event.  ;  ;
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_BF_OFF ( 4)
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_BF_WID ( 3)
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_BF_MSK (0x00000070)
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_BF_DEF (0x00000000)

///< SMON0 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_CMP_BF_OFF ( 7)
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_CMP_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_CMP_BF_MSK (0x00000080)
#define NSIP_HBI_SMON_SMON00_SMON0_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON1 function    mode00 = 3'h0   desc =  free running function. Trigger
///< to accumulate the value into the engine SMON_COUNT when an event is
///< valid. ;  ;    mode01 = 3'h1   desc =  free running function. Trigger
///< to accumulate a fixed value of 1 into the engine SMON_COUNT when an
///< event is valid. ;  ;    mode02 = 3'h2   desc =  max function. Trigger
///< to update max value when an event is valid and larger than the current
///< value stored in the engine SMON_COUNT. ;  ;    mode03 = 3'h3   desc
///< =  Timestamp First Mode. Capture the timer value on the first occurance
///< of an event. Need to write CONTROL01 to reset ;  ;    mode04 = 3'h4
///< desc =  Timestamp Mode. Capture the timer value on every occurance
///< of an event.  ;  ;
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_BF_OFF ( 8)
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_BF_WID ( 3)
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_BF_MSK (0x00000700)
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_BF_DEF (0x00000000)

///< SMON1 function_compare    mode00 = 1'h0   desc =  Compare mode disabled
///< ;  ;    mode01 = 1'h1   desc =  compare mode enabled ;  ;
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_CMP_BF_OFF (11)
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_CMP_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_CMP_BF_MSK (0x00000800)
#define NSIP_HBI_SMON_SMON00_SMON1_FUNCTION_CMP_BF_DEF (0x00000000)

///< SMON mode    mode00 = 4'h0   desc =  Independant Mode. SMON0_COUNT
///< & SMON1_COUNT operate independantly as their function is configured.
///< ;  ;    mode01 = 4'h1   desc =  Average Latency Mode. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT accumulates
///< occurances and SMON1_COUNT accumulates timer values. For multiple
///< stop for a single start, accumulate  start_to_stop1,  start_to_stop1stop2
///< ... ;  ;    mode02 = 4'h2   desc =  MinMax Latency Mode,. SMON0 trigger
///< starts timer & SMON1 trigger stops timer. SMON0_COUNT maintains the
///< minimum timer value and SMON1_COUNT maintains the maximum timer value
///< ;  ;    mode03 = 4'h3   desc =  Average Mode.   SMON0 trigger increments
///< SMON0_COUNT and the value is accumulated in SMON1_COUNT. SMON1 events
///< are disabled. ;  ;    mode04 = 4'h4   desc =  Average Lantecy Mode
///< 2. same as mode01, but only accumulate the first start_to_stop1 if
///< there are multiple stop for each start ;  ;    mode05 = 4'h5   desc
///< =  Average Latency Mode 3. same as mode01, but accumualte the incremental
///< start_to_stop1, stop1_to_stop2... if there are multiple stop for each
///< start ;  ;
#define NSIP_HBI_SMON_SMON00_MODE_BF_OFF (12)
#define NSIP_HBI_SMON_SMON00_MODE_BF_WID ( 4)
#define NSIP_HBI_SMON_SMON00_MODE_BF_MSK (0x0000F000)
#define NSIP_HBI_SMON_SMON00_MODE_BF_DEF (0x00000000)

///< configure to stop on counter0 or counter1 overflow
#define NSIP_HBI_SMON_SMON00_STOPCNTEROVFL_BF_OFF (16)
#define NSIP_HBI_SMON_SMON00_STOPCNTEROVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_STOPCNTEROVFL_BF_MSK (0x00010000)
#define NSIP_HBI_SMON_SMON00_STOPCNTEROVFL_BF_DEF (0x00000000)

///< configure to interupt on counter0 or counter1 overflow
#define NSIP_HBI_SMON_SMON00_INTCNTEROVFL_BF_OFF (17)
#define NSIP_HBI_SMON_SMON00_INTCNTEROVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_INTCNTEROVFL_BF_MSK (0x00020000)
#define NSIP_HBI_SMON_SMON00_INTCNTEROVFL_BF_DEF (0x00000000)

///< status for counter0 overflow. A value of '1' signifies counter0 overflow.
#define NSIP_HBI_SMON_SMON00_STATCNTER0OVFL_BF_OFF (18)
#define NSIP_HBI_SMON_SMON00_STATCNTER0OVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_STATCNTER0OVFL_BF_MSK (0x00040000)
#define NSIP_HBI_SMON_SMON00_STATCNTER0OVFL_BF_DEF (0x00000000)

///< status for counter1 overflow. A value of '1' signifies counter1 overflow.
#define NSIP_HBI_SMON_SMON00_STATCNTER1OVFL_BF_OFF (19)
#define NSIP_HBI_SMON_SMON00_STATCNTER1OVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_STATCNTER1OVFL_BF_MSK (0x00080000)
#define NSIP_HBI_SMON_SMON00_STATCNTER1OVFL_BF_DEF (0x00000000)

///< configure to stop on timer overflow or timer>maxvalue
#define NSIP_HBI_SMON_SMON00_STOPTIMEROVFL_BF_OFF (20)
#define NSIP_HBI_SMON_SMON00_STOPTIMEROVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_STOPTIMEROVFL_BF_MSK (0x00100000)
#define NSIP_HBI_SMON_SMON00_STOPTIMEROVFL_BF_DEF (0x00000000)

///< configure to interrupt on timer overflow or timer>maxvalue
#define NSIP_HBI_SMON_SMON00_INTTIMEROVFL_BF_OFF (21)
#define NSIP_HBI_SMON_SMON00_INTTIMEROVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_INTTIMEROVFL_BF_MSK (0x00200000)
#define NSIP_HBI_SMON_SMON00_INTTIMEROVFL_BF_DEF (0x00000000)

///< status of timer overflow. A value of '1' signifies timer overflow,
///< or timer>maxvalue.
#define NSIP_HBI_SMON_SMON00_STATTIMEROVFL_BF_OFF (22)
#define NSIP_HBI_SMON_SMON00_STATTIMEROVFL_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_STATTIMEROVFL_BF_MSK (0x00400000)
#define NSIP_HBI_SMON_SMON00_STATTIMEROVFL_BF_DEF (0x00000000)

///< reserved
#define NSIP_HBI_SMON_SMON00_RSVD1_BF_OFF (23)
#define NSIP_HBI_SMON_SMON00_RSVD1_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_RSVD1_BF_MSK (0x00800000)
#define NSIP_HBI_SMON_SMON00_RSVD1_BF_DEF (0x00000000)

///< timer prescale    mode00 = 5'h00   desc =  increment timer every
///< 1 clock ;  ;    mode01 = 5'h01   desc =  increment timer every
///< 2 clocks ;  ;    mode02 = 5'h02   desc =  increment timer every
///< 4 clocks ;  ;    mode03 = 5'h03   desc =  increment timer every
///< 8 clocks ;  ;    mode04 = 5'h04   desc =  increment timer every
///< 16 clocks ;  ;    mode05 = 5'h05   desc =  increment timer every
///< 32 clocks ;  ;    mode06 = 5'h06   desc =  increment timer every
///< 64 clocks ;  ;    mode07 = 5'h07   desc =  increment timer every
///< 128 clocks ;  ;    mode08 = 5'h08   desc =  increment timer every
///< 256 clocks ;  ;    mode09 = 5'h09   desc =  increment timer every
///< 512 clocks ;  ;    mode10 = 5'h0a   desc =  increment timer every
///< 1024 clocks ;  ;    mode11 = 5'h0b   desc =  increment timer every
///< 2048 clocks ;  ;    mode12 = 5'h0c   desc =  increment timer every
///< 4096 clocks ;  ;    mode13 = 5'h0d   desc =  increment timer every
///< 8192 clocks ;  ;    mode14 = 5'h0e   desc =  increment timer every
///< 16384 clocks ;  ;    mode15 = 5'h0f   desc =  increment timer every
///< 32768 clocks ;  ;    mode16 = 5'h10   desc =  increment timer every
///< 65536 clocks ;  ;    mode17 = 5'h11   desc =  increment timer every
///< 131072 clocks ;  ;    mode18 = 5'h12   desc =  increment timer every
///< 262144 clocks ;  ;    mode19 = 5'h13   desc =  increment timer every
///< 524288 clocks ;  ;
#define NSIP_HBI_SMON_SMON00_TIMER_PRESCALE_BF_OFF (24)
#define NSIP_HBI_SMON_SMON00_TIMER_PRESCALE_BF_WID ( 5)
#define NSIP_HBI_SMON_SMON00_TIMER_PRESCALE_BF_MSK (0x1F000000)
#define NSIP_HBI_SMON_SMON00_TIMER_PRESCALE_BF_DEF (0x00000000)

///< reserved
#define NSIP_HBI_SMON_SMON00_RSVD2_BF_OFF (29)
#define NSIP_HBI_SMON_SMON00_RSVD2_BF_WID ( 1)
#define NSIP_HBI_SMON_SMON00_RSVD2_BF_MSK (0x20000000)
#define NSIP_HBI_SMON_SMON00_RSVD2_BF_DEF (0x00000000)

///< version
#define NSIP_HBI_SMON_SMON00_VER_BF_OFF (30)
#define NSIP_HBI_SMON_SMON00_VER_BF_WID ( 2)
#define NSIP_HBI_SMON_SMON00_VER_BF_MSK (0xC0000000)
#define NSIP_HBI_SMON_SMON00_VER_BF_DEF (0x40000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON01 register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON01
  * AW_smon CONTROL1 register
  */

typedef union {
  struct {
    uint32_t MODE0 : 8;
    ///< select input signal for SMON0 engine, value should not more than 0x1a.
    ///< 0x0  =  Triggered by H2B Bridge interface valid signal, o_h2b_valid.
    ///< Counter input is connected to  len[2:0], type[2:0], addr[25:0]  of
    ///< o_h2b_data signal. ;   0x1  =  Triggered by H2B Bridge interface valid
    ///< signal, o_h2b_valid. Counter input is connected to  3'd0, o_h2b_sop,
    ///< 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;   0x2  =  Triggered by
    ///< H2B Bridge interface SOP signal, o_h2b_sop. Counter input is connected
    ///< to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data signal. ;   0x3
    ///< =  Triggered by H2B Bridge interface EOP signal, o_h2b_eop. Counter
    ///< input is connected to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data
    ///< signal. ;   0x4  =  Triggered by H2B Bridge interface credit increment
    ///< signal, i_h2b_credit_incr. Counter input is connected to 32'd1. ;
    ///< 0x5  =  Triggered by H2B Host interface FIFO pop signal. Counter input
    ///< is connected to  h2b_fifo_stat, h2b_ff_pop_data(sop, eop, len[2:0],
    ///< idx[4:0]) . ;   0x6  =  Triggered by H2B No Lookup Drop pulse signal,
    ///< h2b_nolkup_drop_pls. Counter input is connected to 32'd1. ;   0x7
    ///< =  Triggered by H2B Bridge interface valid data with TYPE=3'd6 (regular
    ///< data). Counter input is connected to  len[2:0], type[2:0], addr[25:0]
    ///< of o_h2b_data signal. ;   0x8  =  Triggered by H2B Bridge interface
    ///< valid data with TYPE=3'd6 (regular data). Counter input is connected
    ///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
    ///< 0x9  =  Triggered by H2B Bridge interface valid data with TYPE=3'd3
    ///< (Metadata data). Counter input is connected to  len[2:0], type[2:0],
    ///< addr[25:0]  of o_h2b_data signal. ;   0xA  =  Triggered by H2B Bridge
    ///< interface valid data with TYPE=3'd3 (Metadata data). Counter input
    ///< is connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
    ///< . ;   0xB  =  Triggered by H2B Bridge interface valid data with TYPE=3'd1
    ///< (Token data). Counter input is connected to  len[2:0], type[2:0],
    ///< addr[25:0]  of o_h2b_data signal. ;   0xC  =  Triggered by H2B Bridge
    ///< interface valid data with TYPE=3'd1 (Token data). Counter input is
    ///< connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
    ///< . ;   0xD  =  Triggered by H2B Bridge interface valid data with unsupported
    ///< TYPE value. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
    ///< of o_h2b_data signal. ;   0xE  =  Triggered by H2B Bridge interface
    ///< valid data with unsupported TYPE value. Counter input is connected
    ///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
    ///< 0xF  =  Triggered by B2H Host interface FIFO push signal. Counter
    ///< input is connected to  b2h_fifo_stat, b2h_ff_push_data(sop, eop, len[2:0],
    ///< idx[4:0]) . ;   0x10 =  Triggered by B2H Bridge interface valid signal,
    ///< i_b2h_valid. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
    ///< of i_b2h_data signal. ;   0x11 =  Triggered by B2H Bridge interface
    ///< SOP signal, i_b2h_sop. Counter input is connected to  len[2:0], type[2:0],
    ///< addr[25:0]  of i_b2h_data signal. ;   0x12 =  Triggered by B2H Bridge
    ///< interface EOP signal, i_b2h_eop. Counter input is connected to  len[2:0],
    ///< type[2:0], addr[25:0]  of i_b2h_data signal. ;   0x13 =  Triggered
    ///< by B2H Bridge interface credit increment signal, o_b2h_credit_incr.
    ///< Counter input is connected to 32'd1. ;   0x14 =  Triggered by B2H
    ///< Token Length Error pulse signal, b2h_tk_len_err_pls. Counter input
    ///< is connected to 32'd1. ;   0x15 =  Triggered by B2H Token Type Error
    ///< pulse signal, b2h_tk_type_err_pls. Counter input is connected to 32'd1.
    ///< ;   0x16 =  Triggered by B2H Data Type Error pulse signal, b2h_type_err_pls.
    ///< Counter input is connected to 32'd1. ;   0x17 =  Triggered by B2H
    ///< Data and Token Match Error pulse signal, b2h_match_err_pls. Counter
    ///< input is connected to 32'd1. ;   0x18 =  Triggered by B2H No Mapping
    ///< Drop pulse signal, b2h_nomap_drop_pls. Counter input is connected
    ///< to 32'd1. ;   0x19 =  Triggered by B2H FIFO Full Drop pulse signal,
    ///< b2h_ff_full_drop_pls. Counter input is connected to 32'd1. ;   0x1a
    ///< =  Triggered by H2B Wait Credit pulse signal, h2b_wait_credit_pls,
    ///< asserted when a flit is waiting for credit to be transferred to Bridge.
    ///< Counter input is connected to 32'd1. ;
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE1 : 8;
    ///< select input signal for SMON1 engine, value should not more than 0x1a.
    ///< 0x0  =  Triggered by H2B Bridge interface valid signal, o_h2b_valid.
    ///< Counter input is connected to  len[2:0], type[2:0], addr[25:0]  of
    ///< o_h2b_data signal. ;   0x1  =  Triggered by H2B Bridge interface valid
    ///< signal, o_h2b_valid. Counter input is connected to  3'd0, o_h2b_sop,
    ///< 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;   0x2  =  Triggered by
    ///< H2B Bridge interface SOP signal, o_h2b_sop. Counter input is connected
    ///< to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data signal. ;   0x3
    ///< =  Triggered by H2B Bridge interface EOP signal, o_h2b_eop. Counter
    ///< input is connected to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data
    ///< signal. ;   0x4  =  Triggered by H2B Bridge interface credit increment
    ///< signal, i_h2b_credit_incr. Counter input is connected to 32'd1. ;
    ///< 0x5  =  Triggered by H2B Host interface FIFO pop signal. Counter input
    ///< is connected to  h2b_fifo_stat, h2b_ff_pop_data(sop, eop, len[2:0],
    ///< idx[4:0]) . ;   0x6  =  Triggered by H2B No Lookup Drop pulse signal,
    ///< h2b_nolkup_drop_pls. Counter input is connected to 32'd1. ;   0x7
    ///< =  Triggered by H2B Bridge interface valid data with TYPE=3'd6 (regular
    ///< data). Counter input is connected to  len[2:0], type[2:0], addr[25:0]
    ///< of o_h2b_data signal. ;   0x8  =  Triggered by H2B Bridge interface
    ///< valid data with TYPE=3'd6 (regular data). Counter input is connected
    ///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
    ///< 0x9  =  Triggered by H2B Bridge interface valid data with TYPE=3'd3
    ///< (Metadata data). Counter input is connected to  len[2:0], type[2:0],
    ///< addr[25:0]  of o_h2b_data signal. ;   0xA  =  Triggered by H2B Bridge
    ///< interface valid data with TYPE=3'd3 (Metadata data). Counter input
    ///< is connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
    ///< . ;   0xB  =  Triggered by H2B Bridge interface valid data with TYPE=3'd1
    ///< (Token data). Counter input is connected to  len[2:0], type[2:0],
    ///< addr[25:0]  of o_h2b_data signal. ;   0xC  =  Triggered by H2B Bridge
    ///< interface valid data with TYPE=3'd1 (Token data). Counter input is
    ///< connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
    ///< . ;   0xD  =  Triggered by H2B Bridge interface valid data with unsupported
    ///< TYPE value. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
    ///< of o_h2b_data signal. ;   0xE  =  Triggered by H2B Bridge interface
    ///< valid data with unsupported TYPE value. Counter input is connected
    ///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
    ///< 0xF  =  Triggered by B2H Host interface FIFO push signal. Counter
    ///< input is connected to  b2h_fifo_stat, b2h_ff_push_data(sop, eop, len[2:0],
    ///< idx[4:0]) . ;   0x10 =  Triggered by B2H Bridge interface valid signal,
    ///< i_b2h_valid. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
    ///< of i_b2h_data signal. ;   0x11 =  Triggered by B2H Bridge interface
    ///< SOP signal, i_b2h_sop. Counter input is connected to  len[2:0], type[2:0],
    ///< addr[25:0]  of i_b2h_data signal. ;   0x12 =  Triggered by B2H Bridge
    ///< interface EOP signal, i_b2h_eop. Counter input is connected to  len[2:0],
    ///< type[2:0], addr[25:0]  of i_b2h_data signal. ;   0x13 =  Triggered
    ///< by B2H Bridge interface credit increment signal, o_b2h_credit_incr.
    ///< Counter input is connected to 32'd1. ;   0x14 =  Triggered by B2H
    ///< Token Length Error pulse signal, b2h_tk_len_err_pls. Counter input
    ///< is connected to 32'd1. ;   0x15 =  Triggered by B2H Token Type Error
    ///< pulse signal, b2h_tk_type_err_pls. Counter input is connected to 32'd1.
    ///< ;   0x16 =  Triggered by B2H Data Type Error pulse signal, b2h_type_err_pls.
    ///< Counter input is connected to 32'd1. ;   0x17 =  Triggered by B2H
    ///< Data and Token Match Error pulse signal, b2h_match_err_pls. Counter
    ///< input is connected to 32'd1. ;   0x18 =  Triggered by B2H No Mapping
    ///< Drop pulse signal, b2h_nomap_drop_pls. Counter input is connected
    ///< to 32'd1. ;   0x19 =  Triggered by B2H FIFO Full Drop pulse signal,
    ///< b2h_ff_full_drop_pls. Counter input is connected to 32'd1. ;   0x1a
    ///< =  Triggered by H2B Wait Credit pulse signal, h2b_wait_credit_pls,
    ///< asserted when a flit is waiting for credit to be transferred to Bridge.
    ///< Counter input is connected to 32'd1. ;
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RSVD : 16;
    ///< reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon01_reg_t;

#define NSIP_HBI_SMON_SMON01_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON01_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON01_WR_MASK (0xffffffffU)


///< select input signal for SMON0 engine, value should not more than 0x1a.
///< 0x0  =  Triggered by H2B Bridge interface valid signal, o_h2b_valid.
///< Counter input is connected to  len[2:0], type[2:0], addr[25:0]  of
///< o_h2b_data signal. ;   0x1  =  Triggered by H2B Bridge interface valid
///< signal, o_h2b_valid. Counter input is connected to  3'd0, o_h2b_sop,
///< 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;   0x2  =  Triggered by
///< H2B Bridge interface SOP signal, o_h2b_sop. Counter input is connected
///< to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data signal. ;   0x3
///< =  Triggered by H2B Bridge interface EOP signal, o_h2b_eop. Counter
///< input is connected to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data
///< signal. ;   0x4  =  Triggered by H2B Bridge interface credit increment
///< signal, i_h2b_credit_incr. Counter input is connected to 32'd1. ;
///< 0x5  =  Triggered by H2B Host interface FIFO pop signal. Counter input
///< is connected to  h2b_fifo_stat, h2b_ff_pop_data(sop, eop, len[2:0],
///< idx[4:0]) . ;   0x6  =  Triggered by H2B No Lookup Drop pulse signal,
///< h2b_nolkup_drop_pls. Counter input is connected to 32'd1. ;   0x7
///< =  Triggered by H2B Bridge interface valid data with TYPE=3'd6 (regular
///< data). Counter input is connected to  len[2:0], type[2:0], addr[25:0]
///< of o_h2b_data signal. ;   0x8  =  Triggered by H2B Bridge interface
///< valid data with TYPE=3'd6 (regular data). Counter input is connected
///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
///< 0x9  =  Triggered by H2B Bridge interface valid data with TYPE=3'd3
///< (Metadata data). Counter input is connected to  len[2:0], type[2:0],
///< addr[25:0]  of o_h2b_data signal. ;   0xA  =  Triggered by H2B Bridge
///< interface valid data with TYPE=3'd3 (Metadata data). Counter input
///< is connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
///< . ;   0xB  =  Triggered by H2B Bridge interface valid data with TYPE=3'd1
///< (Token data). Counter input is connected to  len[2:0], type[2:0],
///< addr[25:0]  of o_h2b_data signal. ;   0xC  =  Triggered by H2B Bridge
///< interface valid data with TYPE=3'd1 (Token data). Counter input is
///< connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
///< . ;   0xD  =  Triggered by H2B Bridge interface valid data with unsupported
///< TYPE value. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
///< of o_h2b_data signal. ;   0xE  =  Triggered by H2B Bridge interface
///< valid data with unsupported TYPE value. Counter input is connected
///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
///< 0xF  =  Triggered by B2H Host interface FIFO push signal. Counter
///< input is connected to  b2h_fifo_stat, b2h_ff_push_data(sop, eop, len[2:0],
///< idx[4:0]) . ;   0x10 =  Triggered by B2H Bridge interface valid signal,
///< i_b2h_valid. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
///< of i_b2h_data signal. ;   0x11 =  Triggered by B2H Bridge interface
///< SOP signal, i_b2h_sop. Counter input is connected to  len[2:0], type[2:0],
///< addr[25:0]  of i_b2h_data signal. ;   0x12 =  Triggered by B2H Bridge
///< interface EOP signal, i_b2h_eop. Counter input is connected to  len[2:0],
///< type[2:0], addr[25:0]  of i_b2h_data signal. ;   0x13 =  Triggered
///< by B2H Bridge interface credit increment signal, o_b2h_credit_incr.
///< Counter input is connected to 32'd1. ;   0x14 =  Triggered by B2H
///< Token Length Error pulse signal, b2h_tk_len_err_pls. Counter input
///< is connected to 32'd1. ;   0x15 =  Triggered by B2H Token Type Error
///< pulse signal, b2h_tk_type_err_pls. Counter input is connected to 32'd1.
///< ;   0x16 =  Triggered by B2H Data Type Error pulse signal, b2h_type_err_pls.
///< Counter input is connected to 32'd1. ;   0x17 =  Triggered by B2H
///< Data and Token Match Error pulse signal, b2h_match_err_pls. Counter
///< input is connected to 32'd1. ;   0x18 =  Triggered by B2H No Mapping
///< Drop pulse signal, b2h_nomap_drop_pls. Counter input is connected
///< to 32'd1. ;   0x19 =  Triggered by B2H FIFO Full Drop pulse signal,
///< b2h_ff_full_drop_pls. Counter input is connected to 32'd1. ;   0x1a
///< =  Triggered by H2B Wait Credit pulse signal, h2b_wait_credit_pls,
///< asserted when a flit is waiting for credit to be transferred to Bridge.
///< Counter input is connected to 32'd1. ;
#define NSIP_HBI_SMON_SMON01_MODE0_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON01_MODE0_BF_WID ( 8)
#define NSIP_HBI_SMON_SMON01_MODE0_BF_MSK (0x000000FF)
#define NSIP_HBI_SMON_SMON01_MODE0_BF_DEF (0x00000000)

///< select input signal for SMON1 engine, value should not more than 0x1a.
///< 0x0  =  Triggered by H2B Bridge interface valid signal, o_h2b_valid.
///< Counter input is connected to  len[2:0], type[2:0], addr[25:0]  of
///< o_h2b_data signal. ;   0x1  =  Triggered by H2B Bridge interface valid
///< signal, o_h2b_valid. Counter input is connected to  3'd0, o_h2b_sop,
///< 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;   0x2  =  Triggered by
///< H2B Bridge interface SOP signal, o_h2b_sop. Counter input is connected
///< to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data signal. ;   0x3
///< =  Triggered by H2B Bridge interface EOP signal, o_h2b_eop. Counter
///< input is connected to  len[2:0], type[2:0], addr[25:0]  of o_h2b_data
///< signal. ;   0x4  =  Triggered by H2B Bridge interface credit increment
///< signal, i_h2b_credit_incr. Counter input is connected to 32'd1. ;
///< 0x5  =  Triggered by H2B Host interface FIFO pop signal. Counter input
///< is connected to  h2b_fifo_stat, h2b_ff_pop_data(sop, eop, len[2:0],
///< idx[4:0]) . ;   0x6  =  Triggered by H2B No Lookup Drop pulse signal,
///< h2b_nolkup_drop_pls. Counter input is connected to 32'd1. ;   0x7
///< =  Triggered by H2B Bridge interface valid data with TYPE=3'd6 (regular
///< data). Counter input is connected to  len[2:0], type[2:0], addr[25:0]
///< of o_h2b_data signal. ;   0x8  =  Triggered by H2B Bridge interface
///< valid data with TYPE=3'd6 (regular data). Counter input is connected
///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
///< 0x9  =  Triggered by H2B Bridge interface valid data with TYPE=3'd3
///< (Metadata data). Counter input is connected to  len[2:0], type[2:0],
///< addr[25:0]  of o_h2b_data signal. ;   0xA  =  Triggered by H2B Bridge
///< interface valid data with TYPE=3'd3 (Metadata data). Counter input
///< is connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
///< . ;   0xB  =  Triggered by H2B Bridge interface valid data with TYPE=3'd1
///< (Token data). Counter input is connected to  len[2:0], type[2:0],
///< addr[25:0]  of o_h2b_data signal. ;   0xC  =  Triggered by H2B Bridge
///< interface valid data with TYPE=3'd1 (Token data). Counter input is
///< connected to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route
///< . ;   0xD  =  Triggered by H2B Bridge interface valid data with unsupported
///< TYPE value. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
///< of o_h2b_data signal. ;   0xE  =  Triggered by H2B Bridge interface
///< valid data with unsupported TYPE value. Counter input is connected
///< to  3'd0, o_h2b_sop, 3'd0, o_h2b_eop, 6'd0, o_h2b_dst_route . ;
///< 0xF  =  Triggered by B2H Host interface FIFO push signal. Counter
///< input is connected to  b2h_fifo_stat, b2h_ff_push_data(sop, eop, len[2:0],
///< idx[4:0]) . ;   0x10 =  Triggered by B2H Bridge interface valid signal,
///< i_b2h_valid. Counter input is connected to  len[2:0], type[2:0], addr[25:0]
///< of i_b2h_data signal. ;   0x11 =  Triggered by B2H Bridge interface
///< SOP signal, i_b2h_sop. Counter input is connected to  len[2:0], type[2:0],
///< addr[25:0]  of i_b2h_data signal. ;   0x12 =  Triggered by B2H Bridge
///< interface EOP signal, i_b2h_eop. Counter input is connected to  len[2:0],
///< type[2:0], addr[25:0]  of i_b2h_data signal. ;   0x13 =  Triggered
///< by B2H Bridge interface credit increment signal, o_b2h_credit_incr.
///< Counter input is connected to 32'd1. ;   0x14 =  Triggered by B2H
///< Token Length Error pulse signal, b2h_tk_len_err_pls. Counter input
///< is connected to 32'd1. ;   0x15 =  Triggered by B2H Token Type Error
///< pulse signal, b2h_tk_type_err_pls. Counter input is connected to 32'd1.
///< ;   0x16 =  Triggered by B2H Data Type Error pulse signal, b2h_type_err_pls.
///< Counter input is connected to 32'd1. ;   0x17 =  Triggered by B2H
///< Data and Token Match Error pulse signal, b2h_match_err_pls. Counter
///< input is connected to 32'd1. ;   0x18 =  Triggered by B2H No Mapping
///< Drop pulse signal, b2h_nomap_drop_pls. Counter input is connected
///< to 32'd1. ;   0x19 =  Triggered by B2H FIFO Full Drop pulse signal,
///< b2h_ff_full_drop_pls. Counter input is connected to 32'd1. ;   0x1a
///< =  Triggered by H2B Wait Credit pulse signal, h2b_wait_credit_pls,
///< asserted when a flit is waiting for credit to be transferred to Bridge.
///< Counter input is connected to 32'd1. ;
#define NSIP_HBI_SMON_SMON01_MODE1_BF_OFF ( 8)
#define NSIP_HBI_SMON_SMON01_MODE1_BF_WID ( 8)
#define NSIP_HBI_SMON_SMON01_MODE1_BF_MSK (0x0000FF00)
#define NSIP_HBI_SMON_SMON01_MODE1_BF_DEF (0x00000000)

///< reserved
#define NSIP_HBI_SMON_SMON01_RSVD_BF_OFF (16)
#define NSIP_HBI_SMON_SMON01_RSVD_BF_WID (16)
#define NSIP_HBI_SMON_SMON01_RSVD_BF_MSK (0xFFFF0000)
#define NSIP_HBI_SMON_SMON01_RSVD_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON02 register description at address offset 0xa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON02
  * AW_smon SMON0_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE0 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon02_reg_t;

#define NSIP_HBI_SMON_SMON02_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON02_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON02_WR_MASK (0xffffffffU)


///< Comparison value.
#define NSIP_HBI_SMON_SMON02_CMP0_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON02_CMP0_BF_WID (32)
#define NSIP_HBI_SMON_SMON02_CMP0_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SMON_SMON02_CMP0_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON03 register description at address offset 0xac
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON03
  * AW_smon SMON1_COMPARE register
  */

typedef union {
  struct {
    uint32_t COMPARE1 : 32;
    ///< Comparison value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon03_reg_t;

#define NSIP_HBI_SMON_SMON03_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON03_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON03_WR_MASK (0xffffffffU)


///< Comparison value.
#define NSIP_HBI_SMON_SMON03_CMP1_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON03_CMP1_BF_WID (32)
#define NSIP_HBI_SMON_SMON03_CMP1_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SMON_SMON03_CMP1_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON04 register description at address offset 0xb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON04
  * AW_smon SMON0_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER0 : 32;
    ///< counter0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon04_reg_t;

#define NSIP_HBI_SMON_SMON04_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON04_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON04_WR_MASK (0xffffffffU)


///< counter0
#define NSIP_HBI_SMON_SMON04_CNTER0_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON04_CNTER0_BF_WID (32)
#define NSIP_HBI_SMON_SMON04_CNTER0_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SMON_SMON04_CNTER0_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON05 register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON05
  * AW_smon SMON1_COUNT register
  */

typedef union {
  struct {
    uint32_t COUNTER1 : 32;
    ///< counter1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon05_reg_t;

#define NSIP_HBI_SMON_SMON05_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON05_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON05_WR_MASK (0xffffffffU)


///< counter1
#define NSIP_HBI_SMON_SMON05_CNTER1_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON05_CNTER1_BF_WID (32)
#define NSIP_HBI_SMON_SMON05_CNTER1_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SMON_SMON05_CNTER1_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON06 register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON06
  * AW_smon TIMER register
  */

typedef union {
  struct {
    uint32_t TIMER : 32;
    ///< timer
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon06_reg_t;

#define NSIP_HBI_SMON_SMON06_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON06_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON06_WR_MASK (0xffffffffU)


///< timer
#define NSIP_HBI_SMON_SMON06_TIMER_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON06_TIMER_BF_WID (32)
#define NSIP_HBI_SMON_SMON06_TIMER_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SMON_SMON06_TIMER_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SMON_SMON07 register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/smon/SMON07
  * AW_smon TIMERMAXVAL register
  */

typedef union {
  struct {
    uint32_t MAXVALUE : 32;
    ///< maxvalue
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_smon_smon07_reg_t;

#define NSIP_HBI_SMON_SMON07_DEFAULT (0x00000000U)
#define NSIP_HBI_SMON_SMON07_RD_MASK (0xffffffffU)
#define NSIP_HBI_SMON_SMON07_WR_MASK (0xffffffffU)


///< maxvalue
#define NSIP_HBI_SMON_SMON07_MAXVAL_BF_OFF ( 0)
#define NSIP_HBI_SMON_SMON07_MAXVAL_BF_WID (32)
#define NSIP_HBI_SMON_SMON07_MAXVAL_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SMON_SMON07_MAXVAL_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_ADDR_MAP_TBL[32] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_ADDR_MAP_TBL
  * B2H Address Mapping Address Control Register
  */

typedef union {
  struct {
    uint32_t MAP_BYTE_ADDRESS : 28;
    ///< Mapping Byte Address. Bits 27:2 are used to compare with the received
    ///< word address. If they match, the table entry index will be returned.
    ///< Note: this is byte address, thus bits 1:0 are ignored for word(4 bytes)
    ///< address comparison.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
    uint32_t VALID : 1;
    ///< Valid Address and Mask Entry. This is used to control the validity
    ///< of MAP_ADDRESS and associated MAP_MASK for address mapping of sampling
    ///< data packets and tokens.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_addr_tbl_reg_t;

#define NSIP_HBI_B2H_CSR_ADDR_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_RD_MASK (0x8fffffffU)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_WR_MASK (0x8fffffffU)


///< Mapping Byte Address. Bits 27:2 are used to compare with the received
///< word address. If they match, the table entry index will be returned.
///< Note: this is byte address, thus bits 1:0 are ignored for word(4 bytes)
///< address comparison.
#define NSIP_HBI_B2H_CSR_ADDR_TBL_BYTE_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_BYTE_BF_WID (28)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_BYTE_BF_MSK (0x0FFFFFFF)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_BYTE_BF_DEF (0x00000000)

///< Valid Address and Mask Entry. This is used to control the validity
///< of MAP_ADDRESS and associated MAP_MASK for address mapping of sampling
///< data packets and tokens.
#define NSIP_HBI_B2H_CSR_ADDR_TBL_VALID_BF_OFF (31)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_VALID_BF_WID ( 1)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_VALID_BF_MSK (0x80000000)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_VALID_BF_DEF (0x00000000)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_ARR_SZ0 (32)
#define NSIP_HBI_B2H_CSR_ADDR_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_B2H_CSR_B2H_ADDR_MASK_TBL[32] register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/b2h_csr/B2H_ADDR_MASK_TBL
  * B2H Address Mapping Mask Control Register
  */

typedef union {
  struct {
    uint32_t MAP_BYTE_MASK : 28;
    ///< Mapping Byte Mask. This is a mask used in address mapping. If a bit
    ///< is 1, the corresponding bit in MAP_BYTE_ADDRESS will be masked out
    ///< and not used in address match. Bit VALID in the address mapping table
    ///< controls the validity of the mask. Note: this is for byte address,
    ///< thus bits 1:0 are ignored for word(4 bytes) address comparison.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_b2h_csr_addr_mask_tbl_reg_t;

#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_RD (0x0fffffffU)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_WR (0x0fffffffU)


///< Mapping Byte Mask. This is a mask used in address mapping. If a bit
///< is 1, the corresponding bit in MAP_BYTE_ADDRESS will be masked out
///< and not used in address match. Bit VALID in the address mapping table
///< controls the validity of the mask. Note: this is for byte address,
///< thus bits 1:0 are ignored for word(4 bytes) address comparison.
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_BYTE_BF_OFF ( 0)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_BYTE_BF_WID (28)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_BYTE_BF_MSK (0x0FFFFFFF)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_BYTE_BF_DEF (0x00000000)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_ARR_SZ0 (32)
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_FF_H2B_FIFO_CONTROL register description at address offset 0x308
  *
  * Register default value:        0x00000184
  * Register full path in IP: nsip_hbi_com/reg/h2b_ff/H2B_FIFO_CONTROL
  * 16-Entry H2B FIFO Watermark and Soft Reset Register
  */

typedef union {
  struct {
    uint32_t LOW_WM : 5;
    ///< FIFO Low Watermark
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t HIGH_WM : 5;
    ///< FIFO High Watermark
    ///< AccessType="RW" BitOffset="5" ResetValue="0xC"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t POP_SOFT_RST : 1;
    ///< FIFO soft reset on pop clock domain. This bit is for debug purpose
    ///< and should never need to be used.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t PUSH_SOFT_RST : 1;
    ///< FIFO soft reset on push clock domain. This bit is for debug purpose
    ///< and should never need to be used.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_ff_fifo_ctrl_reg_t;

#define NSIP_HBI_H2B_FF_FIFO_CTRL_DEFAULT (0x00000184U)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_RD_MASK (0xc00003ffU)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_WR_MASK (0xc00003ffU)


///< FIFO Low Watermark
#define NSIP_HBI_H2B_FF_FIFO_CTRL_LOW_WM_BF_OFF ( 0)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_LOW_WM_BF_WID ( 5)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_LOW_WM_BF_MSK (0x0000001F)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_LOW_WM_BF_DEF (0x00000004)

///< FIFO High Watermark
#define NSIP_HBI_H2B_FF_FIFO_CTRL_HIGH_WM_BF_OFF ( 5)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_HIGH_WM_BF_WID ( 5)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_HIGH_WM_BF_MSK (0x000003E0)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_HIGH_WM_BF_DEF (0x00000180)

///< FIFO soft reset on pop clock domain. This bit is for debug purpose
///< and should never need to be used.
#define NSIP_HBI_H2B_FF_FIFO_CTRL_POP_SOFT_RST_BF_OFF (30)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_POP_SOFT_RST_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_POP_SOFT_RST_BF_MSK (0x40000000)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_POP_SOFT_RST_BF_DEF (0x00000000)

///< FIFO soft reset on push clock domain. This bit is for debug purpose
///< and should never need to be used.
#define NSIP_HBI_H2B_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_OFF (31)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_MSK (0x80000000)
#define NSIP_HBI_H2B_FF_FIFO_CTRL_PUSH_SOFT_RST_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_H2B_FF_H2B_FIFO_STATUS register description at address offset 0x30c
  *
  * Register default value:        0x0000000C
  * Register full path in IP: nsip_hbi_com/reg/h2b_ff/H2B_FIFO_STATUS
  * 16-Entry Clock Crossing FIFO Status Register
  */

typedef union {
  struct {
    uint32_t FIFO_UNDERFLOW : 1;
    ///< FIFO Underflow
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_OVERFLOW : 1;
    ///< FIFO Overflow
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t FIFO_EMPTY : 1;
    ///< FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FIFO_ALMOST_EMPTY : 1;
    ///< FIFO Almost Empty
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x1"
    uint32_t FIFO_ALMOST_FULL : 1;
    ///< FIFO Almost Full
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t FIFO_FULL : 1;
    ///< FIFO Full
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t FIFO_DEPTH : 5;
    ///< FIFO Depth
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_ff_fifo_stat_reg_t;

#define NSIP_HBI_H2B_FF_FIFO_STAT_DEFAULT (0x0000000cU)
#define NSIP_HBI_H2B_FF_FIFO_STAT_RD_MASK (0x000007ffU)
#define NSIP_HBI_H2B_FF_FIFO_STAT_WR_MASK (0x00000000U)


///< FIFO Underflow
#define NSIP_HBI_H2B_FF_FIFO_STAT_UNDERFLOW_BF_OFF ( 0)
#define NSIP_HBI_H2B_FF_FIFO_STAT_UNDERFLOW_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_UNDERFLOW_BF_MSK (0x00000001)
#define NSIP_HBI_H2B_FF_FIFO_STAT_UNDERFLOW_BF_DEF (0x00000000)

///< FIFO Overflow
#define NSIP_HBI_H2B_FF_FIFO_STAT_OVERFLOW_BF_OFF ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_OVERFLOW_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_OVERFLOW_BF_MSK (0x00000002)
#define NSIP_HBI_H2B_FF_FIFO_STAT_OVERFLOW_BF_DEF (0x00000000)

///< FIFO Empty
#define NSIP_HBI_H2B_FF_FIFO_STAT_EMPTY_BF_OFF ( 2)
#define NSIP_HBI_H2B_FF_FIFO_STAT_EMPTY_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_EMPTY_BF_MSK (0x00000004)
#define NSIP_HBI_H2B_FF_FIFO_STAT_EMPTY_BF_DEF (0x00000004)

///< FIFO Almost Empty
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_EMPTY_BF_OFF ( 3)
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_EMPTY_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_EMPTY_BF_MSK (0x00000008)
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_EMPTY_BF_DEF (0x00000008)

///< FIFO Almost Full
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_FULL_BF_OFF ( 4)
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_FULL_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_FULL_BF_MSK (0x00000010)
#define NSIP_HBI_H2B_FF_FIFO_STAT_ALMOST_FULL_BF_DEF (0x00000000)

///< FIFO Full
#define NSIP_HBI_H2B_FF_FIFO_STAT_FULL_BF_OFF ( 5)
#define NSIP_HBI_H2B_FF_FIFO_STAT_FULL_BF_WID ( 1)
#define NSIP_HBI_H2B_FF_FIFO_STAT_FULL_BF_MSK (0x00000020)
#define NSIP_HBI_H2B_FF_FIFO_STAT_FULL_BF_DEF (0x00000000)

///< FIFO Depth
#define NSIP_HBI_H2B_FF_FIFO_STAT_DEPTH_BF_OFF ( 6)
#define NSIP_HBI_H2B_FF_FIFO_STAT_DEPTH_BF_WID ( 5)
#define NSIP_HBI_H2B_FF_FIFO_STAT_DEPTH_BF_MSK (0x000007C0)
#define NSIP_HBI_H2B_FF_FIFO_STAT_DEPTH_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_H2B_CREDIT_READY_CS register description at address offset 0x310
  *
  * Register default value:        0x00010008
  * Register full path in IP: nsip_hbi_com/reg/H2B_CREDIT_READY_CS
  * H2B Credit and Ready signal Control and Status Register
  */

typedef union {
  struct {
    uint32_t MAX_CREDITS : 4;
    ///< Maximum Credit Value. This is the maximum credits the module can have.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t CREDIT_COUNT : 4;
    ///< Credit Count. This is the current credit count. This count will load
    ///< MAX_CREDITS value after traffic starts.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t B2H_READY_SIGNAL_STATUS : 1;
    ///< B2H Ready Signal Status. This bit is connected with o_b2h_ready signal,
    ///< which should stay high out of reset.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x1"
    uint32_t H2B_READY_SIGNAL_STATUS : 1;
    ///< H2B Ready Signal Status. This bit is connected with i_h2b_ready signal.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t H2B_READY_ENABLE : 1;
    ///< H2B Ready Signal Enable. When high, this bit enables H2B logic to
    ///< take i_h2b_ready signal into account. When low, H2B logic will ignore
    ///< i_h2b_ready signal and assumes it's always high.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_credit_ready_cs_reg_t;

#define NSIP_HBI_H2B_CREDIT_READY_CS_DEFAULT (0x00010008U)
#define NSIP_HBI_H2B_CREDIT_READY_CS_RD_MASK (0x00130f0fU)
#define NSIP_HBI_H2B_CREDIT_READY_CS_WR_MASK (0x0010000fU)


///< Maximum Credit Value. This is the maximum credits the module can have.
#define NSIP_HBI_H2B_CREDIT_READY_CS_MAX_CREDITS_BF_OFF ( 0)
#define NSIP_HBI_H2B_CREDIT_READY_CS_MAX_CREDITS_BF_WID ( 4)
#define NSIP_HBI_H2B_CREDIT_READY_CS_MAX_CREDITS_BF_MSK (0x0000000F)
#define NSIP_HBI_H2B_CREDIT_READY_CS_MAX_CREDITS_BF_DEF (0x00000008)

///< Credit Count. This is the current credit count. This count will load
///< MAX_CREDITS value after traffic starts.
#define NSIP_HBI_H2B_CREDIT_READY_CS_CNT_BF_OFF ( 8)
#define NSIP_HBI_H2B_CREDIT_READY_CS_CNT_BF_WID ( 4)
#define NSIP_HBI_H2B_CREDIT_READY_CS_CNT_BF_MSK (0x00000F00)
#define NSIP_HBI_H2B_CREDIT_READY_CS_CNT_BF_DEF (0x00000000)

///< B2H Ready Signal Status. This bit is connected with o_b2h_ready signal,
///< which should stay high out of reset.
#define NSIP_HBI_H2B_CREDIT_READY_CS_B2H_SIGNAL_STAT_BF_OFF (16)
#define NSIP_HBI_H2B_CREDIT_READY_CS_B2H_SIGNAL_STAT_BF_WID ( 1)
#define NSIP_HBI_H2B_CREDIT_READY_CS_B2H_SIGNAL_STAT_BF_MSK (0x00010000)
#define NSIP_HBI_H2B_CREDIT_READY_CS_B2H_SIGNAL_STAT_BF_DEF (0x00010000)

///< H2B Ready Signal Status. This bit is connected with i_h2b_ready signal.
#define NSIP_HBI_H2B_CREDIT_READY_CS_SIGNAL_STAT_BF_OFF (17)
#define NSIP_HBI_H2B_CREDIT_READY_CS_SIGNAL_STAT_BF_WID ( 1)
#define NSIP_HBI_H2B_CREDIT_READY_CS_SIGNAL_STAT_BF_MSK (0x00020000)
#define NSIP_HBI_H2B_CREDIT_READY_CS_SIGNAL_STAT_BF_DEF (0x00000000)

///< H2B Ready Signal Enable. When high, this bit enables H2B logic to
///< take i_h2b_ready signal into account. When low, H2B logic will ignore
///< i_h2b_ready signal and assumes it's always high.
#define NSIP_HBI_H2B_CREDIT_READY_CS_EN_BF_OFF (20)
#define NSIP_HBI_H2B_CREDIT_READY_CS_EN_BF_WID ( 1)
#define NSIP_HBI_H2B_CREDIT_READY_CS_EN_BF_MSK (0x00100000)
#define NSIP_HBI_H2B_CREDIT_READY_CS_EN_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_H2B_FLIT_COUNT register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_FLIT_COUNT
  * HBI Flit Count Register
  */

typedef union {
  struct {
    uint32_t FLIT_COUNT : 32;
    ///< Flit Count. This shows the number of flits transferred on B2H or H2B
    ///< interfaces after last read. Read to clear.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_flit_cnt_reg_t;

#define NSIP_HBI_H2B_FLIT_CNT_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_FLIT_CNT_RD_MASK (0xffffffffU)
#define NSIP_HBI_H2B_FLIT_CNT_WR_MASK (0x00000000U)


///< Flit Count. This shows the number of flits transferred on B2H or H2B
///< interfaces after last read. Read to clear.
#define NSIP_HBI_H2B_FLIT_CNT_BF_OFF ( 0)
#define NSIP_HBI_H2B_FLIT_CNT_BF_WID (32)
#define NSIP_HBI_H2B_FLIT_CNT_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_H2B_FLIT_CNT_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_H2B_MISC_CSR register description at address offset 0x318
  *
  * Register default value:        0x00011001
  * Register full path in IP: nsip_hbi_com/reg/H2B_MISC_CSR
  * H2B Miscellaneous Control and Status Register
  */

typedef union {
  struct {
    uint32_t MD_FIFO_PTR : 9;
    ///< Metadata Command FIFO Pointer. Metadata commands are pushed into a
    ///< 8-entry FIFO. This is the pointer[8:0] of the FIFO. A set bit of the
    ///< pointer indicates the fullness of the FIFO. Pointer[0] = 1 means the
    ///< FIFO is empty, and pointer[8] = 1 means the FIFO is full.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t DROP_FIFO_0_PTR : 3;
    ///< Drop Command Queue 0 Pointer. Drop commands are pushed into a 2-entry
    ///< FIFO. This is the pointer[2:0] of the FIFO. A set bit of the pointer
    ///< indicates the fullness of the FIFO. Pointer[0] = 1 means the FIFO
    ///< is empty, and pointer[3] = 1 means the FIFO is full.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t DROP_FIFO_1_PTR : 3;
    ///< Drop Command Queue 1 Pointer. Drop commands are pushed into a 2-entry
    ///< FIFO. This is the pointer[2:0] of the FIFO. A set bit of the pointer
    ///< indicates the fullness of the FIFO. Pointer[0] = 1 means the FIFO
    ///< is empty, and pointer[3] = 1 means the FIFO is full.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t VEXA_ROW_DISABLED : 5;
    ///< VEX Array Row Disable Status. This VEX Array Row disable status is
    ///< from FUSE and each bit is for a VEX row. If any bit is 1, meaning
    ///< the corresponding row is disabled, H2B module would add an offset
    ///< to DestID in routing signal not to send packets to the row.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset State. When high, this signal indicates that the soft reset
    ///< signal from user block is asserted and both H2B and B2H modules are
    ///< forced synchronously to reset state. Re-configuration is needed to
    ///< restart H2B and B2H modules.
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t HALT_DONE : 1;
    ///< Halt Done. When high, this signal indicates that the entire nsip_hbi
    ///< module has completed Halt operation, caused by the halt signal from
    ///< user block, and is waiting for a hard or soft reset. It'll be cleared
    ///< by hard/soft resets.
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t HALT_ENABLE : 1;
    ///< Halt Enable. When high, this signal indicates that the halt signal
    ///< from user block is asserted. H2B will force to terminate on-going
    ///< packet with EOP and stop. B2H will force to return all credits to
    ///< Bridge. Then a hard or soft reset is needed to reset the entire nsip_hbi
    ///< module, and then reprogram and restart.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_misc_csr_reg_t;

#define NSIP_HBI_H2B_MISC_CSR_DEFAULT (0x00011001U)
#define NSIP_HBI_H2B_MISC_CSR_RD_MASK (0xff0771ffU)
#define NSIP_HBI_H2B_MISC_CSR_WR_MASK (0x00000000U)


///< Metadata Command FIFO Pointer. Metadata commands are pushed into a
///< 8-entry FIFO. This is the pointer[8:0] of the FIFO. A set bit of the
///< pointer indicates the fullness of the FIFO. Pointer[0] = 1 means the
///< FIFO is empty, and pointer[8] = 1 means the FIFO is full.
#define NSIP_HBI_H2B_MISC_CSR_MD_FIFO_PTR_BF_OFF ( 0)
#define NSIP_HBI_H2B_MISC_CSR_MD_FIFO_PTR_BF_WID ( 9)
#define NSIP_HBI_H2B_MISC_CSR_MD_FIFO_PTR_BF_MSK (0x000001FF)
#define NSIP_HBI_H2B_MISC_CSR_MD_FIFO_PTR_BF_DEF (0x00000001)

///< Drop Command Queue 0 Pointer. Drop commands are pushed into a 2-entry
///< FIFO. This is the pointer[2:0] of the FIFO. A set bit of the pointer
///< indicates the fullness of the FIFO. Pointer[0] = 1 means the FIFO
///< is empty, and pointer[3] = 1 means the FIFO is full.
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_0_PTR_BF_OFF (12)
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_0_PTR_BF_WID ( 3)
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_0_PTR_BF_MSK (0x00007000)
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_0_PTR_BF_DEF (0x00001000)

///< Drop Command Queue 1 Pointer. Drop commands are pushed into a 2-entry
///< FIFO. This is the pointer[2:0] of the FIFO. A set bit of the pointer
///< indicates the fullness of the FIFO. Pointer[0] = 1 means the FIFO
///< is empty, and pointer[3] = 1 means the FIFO is full.
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_1_PTR_BF_OFF (16)
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_1_PTR_BF_WID ( 3)
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_1_PTR_BF_MSK (0x00070000)
#define NSIP_HBI_H2B_MISC_CSR_DROP_FIFO_1_PTR_BF_DEF (0x00010000)

///< VEX Array Row Disable Status. This VEX Array Row disable status is
///< from FUSE and each bit is for a VEX row. If any bit is 1, meaning
///< the corresponding row is disabled, H2B module would add an offset
///< to DestID in routing signal not to send packets to the row.
#define NSIP_HBI_H2B_MISC_CSR_VEXA_ROW_DISD_BF_OFF (24)
#define NSIP_HBI_H2B_MISC_CSR_VEXA_ROW_DISD_BF_WID ( 5)
#define NSIP_HBI_H2B_MISC_CSR_VEXA_ROW_DISD_BF_MSK (0x1F000000)
#define NSIP_HBI_H2B_MISC_CSR_VEXA_ROW_DISD_BF_DEF (0x00000000)

///< Soft Reset State. When high, this signal indicates that the soft reset
///< signal from user block is asserted and both H2B and B2H modules are
///< forced synchronously to reset state. Re-configuration is needed to
///< restart H2B and B2H modules.
#define NSIP_HBI_H2B_MISC_CSR_SOFT_RST_BF_OFF (29)
#define NSIP_HBI_H2B_MISC_CSR_SOFT_RST_BF_WID ( 1)
#define NSIP_HBI_H2B_MISC_CSR_SOFT_RST_BF_MSK (0x20000000)
#define NSIP_HBI_H2B_MISC_CSR_SOFT_RST_BF_DEF (0x00000000)

///< Halt Done. When high, this signal indicates that the entire nsip_hbi
///< module has completed Halt operation, caused by the halt signal from
///< user block, and is waiting for a hard or soft reset. It'll be cleared
///< by hard/soft resets.
#define NSIP_HBI_H2B_MISC_CSR_HALT_DONE_BF_OFF (30)
#define NSIP_HBI_H2B_MISC_CSR_HALT_DONE_BF_WID ( 1)
#define NSIP_HBI_H2B_MISC_CSR_HALT_DONE_BF_MSK (0x40000000)
#define NSIP_HBI_H2B_MISC_CSR_HALT_DONE_BF_DEF (0x00000000)

///< Halt Enable. When high, this signal indicates that the halt signal
///< from user block is asserted. H2B will force to terminate on-going
///< packet with EOP and stop. B2H will force to return all credits to
///< Bridge. Then a hard or soft reset is needed to reset the entire nsip_hbi
///< module, and then reprogram and restart.
#define NSIP_HBI_H2B_MISC_CSR_HALT_EN_BF_OFF (31)
#define NSIP_HBI_H2B_MISC_CSR_HALT_EN_BF_WID ( 1)
#define NSIP_HBI_H2B_MISC_CSR_HALT_EN_BF_MSK (0x80000000)
#define NSIP_HBI_H2B_MISC_CSR_HALT_EN_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_MD_CMD_CMD_MD_STREAM_EN register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/md_cmd/CMD_MD_STREAM_EN
  * Metadata Command Stream Enable Register
  */

typedef union {
  struct {
    uint32_t STREAM_EN : 32;
    ///< Metadata Command Stream Enable Field. Each bit corresponds to a data
    ///< stream, and when set, indicates this command applies to the stream.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_md_cmd_strm_en_reg_t;

#define NSIP_HBI_MD_CMD_STRM_EN_DEFAULT (0x00000000U)
#define NSIP_HBI_MD_CMD_STRM_EN_RD_MASK (0xffffffffU)
#define NSIP_HBI_MD_CMD_STRM_EN_WR_MASK (0xffffffffU)


///< Metadata Command Stream Enable Field. Each bit corresponds to a data
///< stream, and when set, indicates this command applies to the stream.
#define NSIP_HBI_MD_CMD_STRM_EN_BF_OFF ( 0)
#define NSIP_HBI_MD_CMD_STRM_EN_BF_WID (32)
#define NSIP_HBI_MD_CMD_STRM_EN_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_MD_CMD_STRM_EN_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_MD_CMD_CMD_MD_MESSAGE register description at address offset 0x324
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/md_cmd/CMD_MD_MESSAGE
  * Metadata Command Message Register
  */

typedef union {
  struct {
    uint32_t MESSAGE : 32;
    ///< Metadata Command Message Field. This is the message field in a Metadata
    ///< command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_md_cmd_msg_reg_t;

#define NSIP_HBI_MD_CMD_MSG_DEFAULT (0x00000000U)
#define NSIP_HBI_MD_CMD_MSG_RD_MASK (0xffffffffU)
#define NSIP_HBI_MD_CMD_MSG_WR_MASK (0xffffffffU)


///< Metadata Command Message Field. This is the message field in a Metadata
///< command.
#define NSIP_HBI_MD_CMD_MSG_BF_OFF ( 0)
#define NSIP_HBI_MD_CMD_MSG_BF_WID (32)
#define NSIP_HBI_MD_CMD_MSG_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_MD_CMD_MSG_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_MD_CMD_CMD_MD_CONTROL register description at address offset 0x328
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/md_cmd/CMD_MD_CONTROL
  * Metadata Command Control Register
  */

typedef union {
  struct {
    uint32_t SEQUENCE_CNT : 16;
    ///< Metadata Command Sequence Count Field. This is the sequence count
    ///< field in a Metadata command. It's the count of software processing
    ///< blocks.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t MODE : 1;
    ///< Metadata Command Mode. This is the mode bit in a Metadata command.
    ///< When high, indicates the Message field is sticky in Metadata flits
    ///< till next command update, otherwise, the Message field is one-shot
    ///< and only appear in one Metadata flit.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_md_cmd_ctrl_reg_t;

#define NSIP_HBI_MD_CMD_CTRL_DEFAULT (0x00000000U)
#define NSIP_HBI_MD_CMD_CTRL_RD_MASK (0x8000ffffU)
#define NSIP_HBI_MD_CMD_CTRL_WR_MASK (0x8000ffffU)


///< Metadata Command Sequence Count Field. This is the sequence count
///< field in a Metadata command. It's the count of software processing
///< blocks.
#define NSIP_HBI_MD_CMD_CTRL_SEQUENCE_CNT_BF_OFF ( 0)
#define NSIP_HBI_MD_CMD_CTRL_SEQUENCE_CNT_BF_WID (16)
#define NSIP_HBI_MD_CMD_CTRL_SEQUENCE_CNT_BF_MSK (0x0000FFFF)
#define NSIP_HBI_MD_CMD_CTRL_SEQUENCE_CNT_BF_DEF (0x00000000)

///< Metadata Command Mode. This is the mode bit in a Metadata command.
///< When high, indicates the Message field is sticky in Metadata flits
///< till next command update, otherwise, the Message field is one-shot
///< and only appear in one Metadata flit.
#define NSIP_HBI_MD_CMD_CTRL_MODE_BF_OFF (31)
#define NSIP_HBI_MD_CMD_CTRL_MODE_BF_WID ( 1)
#define NSIP_HBI_MD_CMD_CTRL_MODE_BF_MSK (0x80000000)
#define NSIP_HBI_MD_CMD_CTRL_MODE_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SCNT_PRL_PRL_SEQ_COUNT register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/scnt_prl/PRL_SEQ_COUNT
  * Preload Sequence Count Register
  */

typedef union {
  struct {
    uint32_t SEQUENCE_CNT : 16;
    ///< Preload Sequence Count. This is the sequence count used to be preloaded
    ///< into the internal sequence counters of the enabled streams.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_scnt_prl_seq_cnt_reg_t;

#define NSIP_HBI_SCNT_PRL_SEQ_CNT_DEFAULT (0x00000000U)
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_RD_MASK (0x0000ffffU)
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_WR_MASK (0x0000ffffU)


///< Preload Sequence Count. This is the sequence count used to be preloaded
///< into the internal sequence counters of the enabled streams.
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_SEQUENCE_BF_OFF ( 0)
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_SEQUENCE_BF_WID (16)
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_SEQUENCE_BF_MSK (0x0000FFFF)
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_SEQUENCE_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_SCNT_PRL_PRL_STREAM_EN register description at address offset 0x334
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/scnt_prl/PRL_STREAM_EN
  * Sequence Count Preload Stream Enable Register
  */

typedef union {
  struct {
    uint32_t STREAM_EN : 32;
    ///< Preload Stream Enable. Each bit corresponds to a data stream, and
    ///< when it changes from 0 to 1, the internal sequence counter of the
    ///< stream will be loaded with the value in SEQ_COUNT register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_scnt_prl_strm_en_reg_t;

#define NSIP_HBI_SCNT_PRL_STRM_EN_DEFAULT (0x00000000U)
#define NSIP_HBI_SCNT_PRL_STRM_EN_RD_MASK (0xffffffffU)
#define NSIP_HBI_SCNT_PRL_STRM_EN_WR_MASK (0xffffffffU)


///< Preload Stream Enable. Each bit corresponds to a data stream, and
///< when it changes from 0 to 1, the internal sequence counter of the
///< stream will be loaded with the value in SEQ_COUNT register.
#define NSIP_HBI_SCNT_PRL_STRM_EN_BF_OFF ( 0)
#define NSIP_HBI_SCNT_PRL_STRM_EN_BF_WID (32)
#define NSIP_HBI_SCNT_PRL_STRM_EN_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_SCNT_PRL_STRM_EN_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_DROP_CMD0_CMD_DROP_STREAM_EN[2] register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/drop_cmd0/CMD_DROP_STREAM_EN
  * H2B Drop Command Stream Enable Register
  */

typedef union {
  struct {
    uint32_t STREAM_EN : 32;
    ///< Drop Command Stream Enable Field. Each bit corresponds to a data stream,
    ///< and when set, indicates this command applies to the stream.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_drop_cmd_strm_en_reg_t;

#define NSIP_HBI_DROP_CMD_STRM_EN_DEFAULT (0x00000000U)
#define NSIP_HBI_DROP_CMD_STRM_EN_RD_MASK (0xffffffffU)
#define NSIP_HBI_DROP_CMD_STRM_EN_WR_MASK (0xffffffffU)


///< Drop Command Stream Enable Field. Each bit corresponds to a data stream,
///< and when set, indicates this command applies to the stream.
#define NSIP_HBI_DROP_CMD_STRM_EN_BF_OFF ( 0)
#define NSIP_HBI_DROP_CMD_STRM_EN_BF_WID (32)
#define NSIP_HBI_DROP_CMD_STRM_EN_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_DROP_CMD_STRM_EN_BF_DEF (0x00000000)
#define NSIP_HBI_DROP_CMD_STRM_EN_ARR_SZ0 (2)
#define NSIP_HBI_DROP_CMD_STRM_EN_ARRAY_STRIDE0 (0x0008)


/** @brief NSIP_HBI_COM_REG_DROP_CMD0_CMD_DROP_CONTROL[2] register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/drop_cmd0/CMD_DROP_CONTROL
  * H2B Drop Command Control Register
  */

typedef union {
  struct {
    uint32_t SEQUENCE_CNT : 16;
    ///< Drop Command Sequence Count Field. This is the sequence count field
    ///< in a Drop command. It's the count of data blocks.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t DROP_EN : 1;
    ///< Drop Enable. This is the pass/drop control bit in a Drop command.
    ///< When 1, data dropping will start for enabled streams in CMD_DROP_STREAM_EN
    ///< from data block numbered by SEQUENCE_CNT. When 0, dropping will stop
    ///< for enabled streams from data block numbered by SEQUENCE_CNT.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_drop_cmd_ctrl_reg_t;

#define NSIP_HBI_DROP_CMD_CTRL_DEFAULT (0x00000000U)
#define NSIP_HBI_DROP_CMD_CTRL_RD_MASK (0x8000ffffU)
#define NSIP_HBI_DROP_CMD_CTRL_WR_MASK (0x8000ffffU)


///< Drop Command Sequence Count Field. This is the sequence count field
///< in a Drop command. It's the count of data blocks.
#define NSIP_HBI_DROP_CMD_CTRL_SEQUENCE_CNT_BF_OFF ( 0)
#define NSIP_HBI_DROP_CMD_CTRL_SEQUENCE_CNT_BF_WID (16)
#define NSIP_HBI_DROP_CMD_CTRL_SEQUENCE_CNT_BF_MSK (0x0000FFFF)
#define NSIP_HBI_DROP_CMD_CTRL_SEQUENCE_CNT_BF_DEF (0x00000000)

///< Drop Enable. This is the pass/drop control bit in a Drop command.
///< When 1, data dropping will start for enabled streams in CMD_DROP_STREAM_EN
///< from data block numbered by SEQUENCE_CNT. When 0, dropping will stop
///< for enabled streams from data block numbered by SEQUENCE_CNT.
#define NSIP_HBI_DROP_CMD_CTRL_EN_BF_OFF (31)
#define NSIP_HBI_DROP_CMD_CTRL_EN_BF_WID ( 1)
#define NSIP_HBI_DROP_CMD_CTRL_EN_BF_MSK (0x80000000)
#define NSIP_HBI_DROP_CMD_CTRL_EN_BF_DEF (0x00000000)
#define NSIP_HBI_DROP_CMD_CTRL_ARR_SZ0 (2)
#define NSIP_HBI_DROP_CMD_CTRL_ARRAY_STRIDE0 (0x0008)


/** @brief NSIP_HBI_COM_REG_H2B_DROP_STATE register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_DROP_STATE
  * H2B Stream Dropping State Register
  */

typedef union {
  struct {
    uint32_t DROP_STATE : 32;
    ///< Stream Drop State. Each bit corresponds to a data stream, and when
    ///< set, indicates the stream is in dropping state.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_drop_state_reg_t;

#define NSIP_HBI_H2B_DROP_STATE_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_DROP_STATE_RD_MASK (0xffffffffU)
#define NSIP_HBI_H2B_DROP_STATE_WR_MASK (0x00000000U)


///< Stream Drop State. Each bit corresponds to a data stream, and when
///< set, indicates the stream is in dropping state.
#define NSIP_HBI_H2B_DROP_STATE_BF_OFF ( 0)
#define NSIP_HBI_H2B_DROP_STATE_BF_WID (32)
#define NSIP_HBI_H2B_DROP_STATE_BF_MSK (0xFFFFFFFF)
#define NSIP_HBI_H2B_DROP_STATE_BF_DEF (0x00000000)


/** @brief NSIP_HBI_COM_REG_H2B_BUF_SZ_HW_TBL[32] register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_BUF_SZ_HW_TBL
  * H2B Destination Buffer Size and High Watermark Control Register
  */

typedef union {
  struct {
    uint32_t DEST_BUF_SIZE : 8;
    ///< Destination Buffer Size. This defines two destination buffer sizes.
    ///< One is Data buffer size, which is (DEST_BUF_SIZE + 1) in number of
    ///< data blocks(defined in DA_BLOCK_SIZE). The other is Metadata buffer
    ///< size, which is (DEST_BUF_SIZE + 1) in number of flits.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_buf_sz_hw_tbl_reg_t;

#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_RD_MASK (0x000000ffU)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_WR_MASK (0x000000ffU)


///< Destination Buffer Size. This defines two destination buffer sizes.
///< One is Data buffer size, which is (DEST_BUF_SIZE + 1) in number of
///< data blocks(defined in DA_BLOCK_SIZE). The other is Metadata buffer
///< size, which is (DEST_BUF_SIZE + 1) in number of flits.
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_DEST_SIZE_BF_OFF ( 0)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_DEST_SIZE_BF_WID ( 8)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_DEST_SIZE_BF_MSK (0x000000FF)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_DEST_SIZE_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_ADDR_LKUP_TBL[32] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_ADDR_LKUP_TBL
  * H2B Address Lookup Control Register
  */

typedef union {
  struct {
    uint32_t BASE_BYTE_ADDRESS : 28;
    ///< Base Byte Address. This is the base byte address for a data stream
    ///< going to Bridge. Note: Bridge interface uses word(4 bytes) address,
    ///< thus bits 1:0 in this byte address are ignored and not used.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
    uint32_t VALID : 1;
    ///< Valid Address and Routing Entry in Data/Token/Metadata Lookup Registers.
    ///< This is used to control the validity of BASE_ADDRESS and associated
    ///< routing information for this entry, and the corresponding Token/Metadata
    ///< lookup table entries.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_addr_lkup_tbl_reg_t;

#define NSIP_HBI_H2B_ADDR_LKUP_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_RD_MASK (0x8fffffffU)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_WR_MASK (0x8fffffffU)


///< Base Byte Address. This is the base byte address for a data stream
///< going to Bridge. Note: Bridge interface uses word(4 bytes) address,
///< thus bits 1:0 in this byte address are ignored and not used.
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_BASE_BYTE_BF_OFF ( 0)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_BASE_BYTE_BF_WID (28)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_BASE_BYTE_BF_MSK (0x0FFFFFFF)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_BASE_BYTE_BF_DEF (0x00000000)

///< Valid Address and Routing Entry in Data/Token/Metadata Lookup Registers.
///< This is used to control the validity of BASE_ADDRESS and associated
///< routing information for this entry, and the corresponding Token/Metadata
///< lookup table entries.
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_VALID_BF_OFF (31)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_VALID_BF_WID ( 1)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_VALID_BF_MSK (0x80000000)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_VALID_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_ADDR_LKUP_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_ROUTE_LKUP_TBL[32] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_ROUTE_LKUP_TBL
  * H2B Rounting Information Lookup Control Register
  */

typedef union {
  struct {
    uint32_t DEST_HOST_ID : 11;
    ///< Destination Host ID.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t DEST_INTF_ID : 3;
    ///< Destination Interface ID.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_route_lkup_tbl_reg_t;

#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_RD_MASK (0x000707ffU)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_WR_MASK (0x000707ffU)


///< Destination Host ID.
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_OFF ( 0)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_WID (11)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_MSK (0x000007FF)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_DEF (0x00000000)

///< Destination Interface ID.
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_OFF (16)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_WID ( 3)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_MSK (0x00070000)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_TK_ADDR_LKUP_TBL[32] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_TK_ADDR_LKUP_TBL
  * H2B Token Address Lookup Control Register
  */

typedef union {
  struct {
    uint32_t TK_BYTE_ADDRESS : 28;
    ///< Token Byte Address. This is the byte address used for a generated
    ///< Token going to Bridge. The validity of this field is controlled by
    ///< VALID in corresponding entry in H2B_ADDR_LKUP_TBL. Note: Bridge interface
    ///< uses word(4 bytes) address, thus bits 1:0 in this byte address are
    ///< ignored and not used.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t;

#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_RD_MASK (0x0fffffffU)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_WR_MASK (0x0fffffffU)


///< Token Byte Address. This is the byte address used for a generated
///< Token going to Bridge. The validity of this field is controlled by
///< VALID in corresponding entry in H2B_ADDR_LKUP_TBL. Note: Bridge interface
///< uses word(4 bytes) address, thus bits 1:0 in this byte address are
///< ignored and not used.
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_BYTE_BF_OFF ( 0)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_BYTE_BF_WID (28)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_BYTE_BF_MSK (0x0FFFFFFF)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_BYTE_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_TK_ROUTE_LKUP_TBL[32] register description at address offset 0x580
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_TK_ROUTE_LKUP_TBL
  * H2B Rounting Information Lookup Control Register
  */

typedef union {
  struct {
    uint32_t DEST_HOST_ID : 11;
    ///< Destination Host ID.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t DEST_INTF_ID : 3;
    ///< Destination Interface ID.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_tk_route_lkup_tbl_reg_t;

#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_RD_MASK (0x000707ffU)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_WR_MASK (0x000707ffU)


///< Destination Host ID.
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_OFF ( 0)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_WID (11)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_MSK (0x000007FF)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_DEF (0x00000000)

///< Destination Interface ID.
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_OFF (16)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_WID ( 3)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_MSK (0x00070000)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_MD_ADDR_LKUP_TBL[32] register description at address offset 0x600
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_MD_ADDR_LKUP_TBL
  * H2B Address Lookup Control Register
  */

typedef union {
  struct {
    uint32_t BASE_BYTE_ADDRESS : 28;
    ///< Base BYTE_Address. This is the base byte address for Metadata going
    ///< to Bridge of a stream. Note: Bridge interface uses word(4 bytes) address,
    ///< thus bits 1:0 in this byte address are ignored and not used.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_md_addr_lkup_tbl_reg_t;

#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_RD_MASK (0x0fffffffU)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_WR_MASK (0x0fffffffU)


///< Base BYTE_Address. This is the base byte address for Metadata going
///< to Bridge of a stream. Note: Bridge interface uses word(4 bytes) address,
///< thus bits 1:0 in this byte address are ignored and not used.
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_BASE_BYTE_BF_OFF ( 0)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_BASE_BYTE_BF_WID (28)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_BASE_BYTE_BF_MSK (0x0FFFFFFF)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_BASE_BYTE_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_MD_ROUTE_LKUP_TBL[32] register description at address offset 0x680
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_MD_ROUTE_LKUP_TBL
  * H2B Rounting Information Lookup Control Register
  */

typedef union {
  struct {
    uint32_t DEST_HOST_ID : 11;
    ///< Destination Host ID.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t DEST_INTF_ID : 3;
    ///< Destination Interface ID.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} nsip_hbi_h2b_md_route_lkup_tbl_reg_t;

#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_RD_MASK (0x000707ffU)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_WR_MASK (0x000707ffU)


///< Destination Host ID.
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_OFF ( 0)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_WID (11)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_MSK (0x000007FF)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_HOST_ID_BF_DEF (0x00000000)

///< Destination Interface ID.
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_OFF (16)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_WID ( 3)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_MSK (0x00070000)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_DEST_INTF_ID_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_MD_CONTROL_TBL[32] register description at address offset 0x700
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_MD_CONTROL_TBL
  * H2B Metadata Miscellaneous Control Register
  */

typedef union {
  struct {
    uint32_t DA_BLOCK_SIZE : 10;
    ///< Sample Data Block Size. (DA_BLOCK_SIZE + 1) defines number of flits
    ///< in a software's processing block. This is used to convert flit counts
    ///< to block/sequence counts. Maximum 1k flits, equal to 16k I/Q samples.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t TOKEN_DIS : 1;
    ///< Token Disable. If high, Token generation for the corresponding stream
    ///< is disabled and there will be no Token sent out for this stream, but
    ///< if METADATA_EN is high, this bit will not have effect.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t METADATA_EN : 1;
    ///< Metadata Generation Enable. If high, Metadata generation function
    ///< is enabled, and bit TOKEN_DIS is ignored and Token will be forced
    ///< to be enabled.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_md_ctrl_tbl_reg_t;

#define NSIP_HBI_H2B_MD_CTRL_TBL_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_MD_CTRL_TBL_RD_MASK (0xc00003ffU)
#define NSIP_HBI_H2B_MD_CTRL_TBL_WR_MASK (0xc00003ffU)


///< Sample Data Block Size. (DA_BLOCK_SIZE + 1) defines number of flits
///< in a software's processing block. This is used to convert flit counts
///< to block/sequence counts. Maximum 1k flits, equal to 16k I/Q samples.
#define NSIP_HBI_H2B_MD_CTRL_TBL_DA_SIZE_BF_OFF ( 0)
#define NSIP_HBI_H2B_MD_CTRL_TBL_DA_SIZE_BF_WID (10)
#define NSIP_HBI_H2B_MD_CTRL_TBL_DA_SIZE_BF_MSK (0x000003FF)
#define NSIP_HBI_H2B_MD_CTRL_TBL_DA_SIZE_BF_DEF (0x00000000)

///< Token Disable. If high, Token generation for the corresponding stream
///< is disabled and there will be no Token sent out for this stream, but
///< if METADATA_EN is high, this bit will not have effect.
#define NSIP_HBI_H2B_MD_CTRL_TBL_TOKEN_DIS_BF_OFF (30)
#define NSIP_HBI_H2B_MD_CTRL_TBL_TOKEN_DIS_BF_WID ( 1)
#define NSIP_HBI_H2B_MD_CTRL_TBL_TOKEN_DIS_BF_MSK (0x40000000)
#define NSIP_HBI_H2B_MD_CTRL_TBL_TOKEN_DIS_BF_DEF (0x00000000)

///< Metadata Generation Enable. If high, Metadata generation function
///< is enabled, and bit TOKEN_DIS is ignored and Token will be forced
///< to be enabled.
#define NSIP_HBI_H2B_MD_CTRL_TBL_METADATA_EN_BF_OFF (31)
#define NSIP_HBI_H2B_MD_CTRL_TBL_METADATA_EN_BF_WID ( 1)
#define NSIP_HBI_H2B_MD_CTRL_TBL_METADATA_EN_BF_MSK (0x80000000)
#define NSIP_HBI_H2B_MD_CTRL_TBL_METADATA_EN_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_MD_CTRL_TBL_ARR_SZ0 (32)
#define NSIP_HBI_H2B_MD_CTRL_TBL_ARRAY_STRIDE0 (0x0004)


/** @brief NSIP_HBI_COM_REG_H2B_SCNT_TK_PTR[32] register description at address offset 0x780
  *
  * Register default value:        0x00000000
  * Register full path in IP: nsip_hbi_com/reg/H2B_SCNT_TK_PTR
  * HBI Sequence Counter and Token Pointer Register
  */

typedef union {
  struct {
    uint32_t TK_POINTER : 16;
    ///< Token Pointer. This shows current position of the write pointer and
    ///< will be used in next Token.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_COUNT : 16;
    ///< Sequence Count. This shows current value of sequence counter. The
    ///< counter increments by 1 after a block of data are sent out. Data block
    ///< size is defined by DA_BLOCK_SIZE. The counter natually wraps back
    ///< to 0s when adding 1 to 16'hFFFF.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} nsip_hbi_h2b_scnt_tk_ptr_reg_t;

#define NSIP_HBI_H2B_SCNT_TK_PTR_DEFAULT (0x00000000U)
#define NSIP_HBI_H2B_SCNT_TK_PTR_RD_MASK (0xffffffffU)
#define NSIP_HBI_H2B_SCNT_TK_PTR_WR_MASK (0x00000000U)


///< Token Pointer. This shows current position of the write pointer and
///< will be used in next Token.
#define NSIP_HBI_H2B_SCNT_TK_PTR_BF_OFF ( 0)
#define NSIP_HBI_H2B_SCNT_TK_PTR_BF_WID (16)
#define NSIP_HBI_H2B_SCNT_TK_PTR_BF_MSK (0x0000FFFF)
#define NSIP_HBI_H2B_SCNT_TK_PTR_BF_DEF (0x00000000)

///< Sequence Count. This shows current value of sequence counter. The
///< counter increments by 1 after a block of data are sent out. Data block
///< size is defined by DA_BLOCK_SIZE. The counter natually wraps back
///< to 0s when adding 1 to 16'hFFFF.
#define NSIP_HBI_H2B_SCNT_TK_PTR_SEQ_CNT_BF_OFF (16)
#define NSIP_HBI_H2B_SCNT_TK_PTR_SEQ_CNT_BF_WID (16)
#define NSIP_HBI_H2B_SCNT_TK_PTR_SEQ_CNT_BF_MSK (0xFFFF0000)
#define NSIP_HBI_H2B_SCNT_TK_PTR_SEQ_CNT_BF_DEF (0x00000000)
#define NSIP_HBI_H2B_SCNT_TK_PTR_ARR_SZ0 (32)
#define NSIP_HBI_H2B_SCNT_TK_PTR_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define NSIP_HBI_SCRATCH_REG(_BASE) ((nsip_hbi_scratch_reg_t*) NSIP_HBI_SCRATCH_ADR(_BASE))
#define NSIP_HBI_APB_BRDG_STAT_REG(_BASE) ((nsip_hbi_apb_brdg_stat_reg_t*) NSIP_HBI_APB_BRDG_STAT_ADR(_BASE))
#define NSIP_HBI_B2H_FF_FIFO_CTRL_REG(_BASE) ((nsip_hbi_b2h_ff_fifo_ctrl_reg_t*) NSIP_HBI_B2H_FF_FIFO_CTRL_ADR(_BASE))
#define NSIP_HBI_B2H_FF_FIFO_STAT_REG(_BASE) ((nsip_hbi_b2h_ff_fifo_stat_reg_t*) NSIP_HBI_B2H_FF_FIFO_STAT_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_CREDIT_CS_REG(_BASE) ((nsip_hbi_b2h_csr_credit_cs_reg_t*) NSIP_HBI_B2H_CSR_CREDIT_CS_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_FLIT_CNT_REG(_BASE) ((nsip_hbi_b2h_csr_flit_cnt_reg_t*) NSIP_HBI_B2H_CSR_FLIT_CNT_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_INSERT_STRM_REG(_BASE) ((nsip_hbi_b2h_csr_insert_strm_reg_t*) NSIP_HBI_B2H_CSR_INSERT_STRM_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_INSERT_STATE_REG(_BASE) ((nsip_hbi_b2h_csr_insert_state_reg_t*) NSIP_HBI_B2H_CSR_INSERT_STATE_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_INSERT_CTRL_REG(_BASE) ((nsip_hbi_b2h_csr_insert_ctrl_reg_t*) NSIP_HBI_B2H_CSR_INSERT_CTRL_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR0_B2H_CSR_REG(_BASE) ((nsip_hbi_insert_que_csr_b2h_reg_t*) NSIP_HBI_INSERT_QUE_CSR0_B2H_CSR_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR0_B2H_NULL_SAMPLE_REG(_BASE) ((nsip_hbi_insert_que_csr_b2h_null_sample_reg_t*) NSIP_HBI_INSERT_QUE_CSR0_B2H_NULL_SAMPLE_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR0_CMD_STRM_EN_REG(_BASE) ((nsip_hbi_insert_que_csr_cmd_strm_en_reg_t*) NSIP_HBI_INSERT_QUE_CSR0_CMD_STRM_EN_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR0_CMD_CTRL_REG(_BASE) ((nsip_hbi_insert_que_csr_cmd_ctrl_reg_t*) NSIP_HBI_INSERT_QUE_CSR0_CMD_CTRL_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR1_B2H_CSR_REG(_BASE) ((nsip_hbi_insert_que_csr_b2h_reg_t*) NSIP_HBI_INSERT_QUE_CSR1_B2H_CSR_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR1_B2H_NULL_SAMPLE_REG(_BASE) ((nsip_hbi_insert_que_csr_b2h_null_sample_reg_t*) NSIP_HBI_INSERT_QUE_CSR1_B2H_NULL_SAMPLE_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR1_CMD_STRM_EN_REG(_BASE) ((nsip_hbi_insert_que_csr_cmd_strm_en_reg_t*) NSIP_HBI_INSERT_QUE_CSR1_CMD_STRM_EN_ADR(_BASE))
#define NSIP_HBI_INSERT_QUE_CSR1_CMD_CTRL_REG(_BASE) ((nsip_hbi_insert_que_csr_cmd_ctrl_reg_t*) NSIP_HBI_INSERT_QUE_CSR1_CMD_CTRL_ADR(_BASE))
#define NSIP_HBI_INTR_INT_STAT_REG(_BASE) ((nsip_hbi_intr_int_stat_reg_t*) NSIP_HBI_INTR_INT_STAT_ADR(_BASE))
#define NSIP_HBI_INTR_INT_HIGH_EN_REG(_BASE) ((nsip_hbi_intr_int_high_en_reg_t*) NSIP_HBI_INTR_INT_HIGH_EN_ADR(_BASE))
#define NSIP_HBI_INTR_INT_LOW_EN_REG(_BASE) ((nsip_hbi_intr_int_low_en_reg_t*) NSIP_HBI_INTR_INT_LOW_EN_ADR(_BASE))
#define NSIP_HBI_INTR_INT_CLR_REG(_BASE) ((nsip_hbi_intr_int_clr_reg_t*) NSIP_HBI_INTR_INT_CLR_ADR(_BASE))
#define NSIP_HBI_INTR_INT_FORCE_REG(_BASE) ((nsip_hbi_intr_int_force_reg_t*) NSIP_HBI_INTR_INT_FORCE_ADR(_BASE))
#define NSIP_HBI_SMON_SMON00_REG(_BASE) ((nsip_hbi_smon_smon00_reg_t*) NSIP_HBI_SMON_SMON00_ADR(_BASE))
#define NSIP_HBI_SMON_SMON01_REG(_BASE) ((nsip_hbi_smon_smon01_reg_t*) NSIP_HBI_SMON_SMON01_ADR(_BASE))
#define NSIP_HBI_SMON_SMON02_REG(_BASE) ((nsip_hbi_smon_smon02_reg_t*) NSIP_HBI_SMON_SMON02_ADR(_BASE))
#define NSIP_HBI_SMON_SMON03_REG(_BASE) ((nsip_hbi_smon_smon03_reg_t*) NSIP_HBI_SMON_SMON03_ADR(_BASE))
#define NSIP_HBI_SMON_SMON04_REG(_BASE) ((nsip_hbi_smon_smon04_reg_t*) NSIP_HBI_SMON_SMON04_ADR(_BASE))
#define NSIP_HBI_SMON_SMON05_REG(_BASE) ((nsip_hbi_smon_smon05_reg_t*) NSIP_HBI_SMON_SMON05_ADR(_BASE))
#define NSIP_HBI_SMON_SMON06_REG(_BASE) ((nsip_hbi_smon_smon06_reg_t*) NSIP_HBI_SMON_SMON06_ADR(_BASE))
#define NSIP_HBI_SMON_SMON07_REG(_BASE) ((nsip_hbi_smon_smon07_reg_t*) NSIP_HBI_SMON_SMON07_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL0_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL0_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL1_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL1_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL2_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL2_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL3_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL3_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL4_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL4_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL5_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL5_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL6_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL6_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL7_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL7_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL8_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL8_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL9_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL9_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL10_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL10_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL11_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL11_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL12_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL12_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL13_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL13_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL14_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL14_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL15_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL15_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL16_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL16_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL17_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL17_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL18_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL18_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL19_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL19_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL20_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL20_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL21_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL21_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL22_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL22_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL23_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL23_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL24_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL24_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL25_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL25_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL26_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL26_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL27_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL27_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL28_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL28_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL29_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL29_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL30_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL30_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_TBL31_REG(_BASE) ((nsip_hbi_b2h_csr_addr_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_TBL31_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL0_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL0_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL1_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL1_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL2_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL2_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL3_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL3_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL4_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL4_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL5_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL5_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL6_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL6_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL7_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL7_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL8_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL8_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL9_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL9_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL10_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL10_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL11_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL11_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL12_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL12_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL13_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL13_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL14_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL14_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL15_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL15_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL16_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL16_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL17_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL17_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL18_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL18_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL19_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL19_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL20_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL20_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL21_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL21_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL22_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL22_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL23_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL23_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL24_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL24_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL25_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL25_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL26_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL26_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL27_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL27_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL28_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL28_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL29_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL29_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL30_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL30_ADR(_BASE))
#define NSIP_HBI_B2H_CSR_ADDR_MASK_TBL31_REG(_BASE) ((nsip_hbi_b2h_csr_addr_mask_tbl_reg_t*) NSIP_HBI_B2H_CSR_ADDR_MASK_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_FF_FIFO_CTRL_REG(_BASE) ((nsip_hbi_h2b_ff_fifo_ctrl_reg_t*) NSIP_HBI_H2B_FF_FIFO_CTRL_ADR(_BASE))
#define NSIP_HBI_H2B_FF_FIFO_STAT_REG(_BASE) ((nsip_hbi_h2b_ff_fifo_stat_reg_t*) NSIP_HBI_H2B_FF_FIFO_STAT_ADR(_BASE))
#define NSIP_HBI_H2B_CREDIT_READY_CS_REG(_BASE) ((nsip_hbi_h2b_credit_ready_cs_reg_t*) NSIP_HBI_H2B_CREDIT_READY_CS_ADR(_BASE))
#define NSIP_HBI_H2B_FLIT_CNT_REG(_BASE) ((nsip_hbi_h2b_flit_cnt_reg_t*) NSIP_HBI_H2B_FLIT_CNT_ADR(_BASE))
#define NSIP_HBI_H2B_MISC_CSR_REG(_BASE) ((nsip_hbi_h2b_misc_csr_reg_t*) NSIP_HBI_H2B_MISC_CSR_ADR(_BASE))
#define NSIP_HBI_MD_CMD_STRM_EN_REG(_BASE) ((nsip_hbi_md_cmd_strm_en_reg_t*) NSIP_HBI_MD_CMD_STRM_EN_ADR(_BASE))
#define NSIP_HBI_MD_CMD_MSG_REG(_BASE) ((nsip_hbi_md_cmd_msg_reg_t*) NSIP_HBI_MD_CMD_MSG_ADR(_BASE))
#define NSIP_HBI_MD_CMD_CTRL_REG(_BASE) ((nsip_hbi_md_cmd_ctrl_reg_t*) NSIP_HBI_MD_CMD_CTRL_ADR(_BASE))
#define NSIP_HBI_SCNT_PRL_SEQ_CNT_REG(_BASE) ((nsip_hbi_scnt_prl_seq_cnt_reg_t*) NSIP_HBI_SCNT_PRL_SEQ_CNT_ADR(_BASE))
#define NSIP_HBI_SCNT_PRL_STRM_EN_REG(_BASE) ((nsip_hbi_scnt_prl_strm_en_reg_t*) NSIP_HBI_SCNT_PRL_STRM_EN_ADR(_BASE))
#define NSIP_HBI_DROP_CMD0_CMD_STRM_EN_REG(_BASE) ((nsip_hbi_drop_cmd_strm_en_reg_t*) NSIP_HBI_DROP_CMD0_CMD_STRM_EN_ADR(_BASE))
#define NSIP_HBI_DROP_CMD0_CMD_CTRL_REG(_BASE) ((nsip_hbi_drop_cmd_ctrl_reg_t*) NSIP_HBI_DROP_CMD0_CMD_CTRL_ADR(_BASE))
#define NSIP_HBI_DROP_CMD1_CMD_STRM_EN_REG(_BASE) ((nsip_hbi_drop_cmd_strm_en_reg_t*) NSIP_HBI_DROP_CMD1_CMD_STRM_EN_ADR(_BASE))
#define NSIP_HBI_DROP_CMD1_CMD_CTRL_REG(_BASE) ((nsip_hbi_drop_cmd_ctrl_reg_t*) NSIP_HBI_DROP_CMD1_CMD_CTRL_ADR(_BASE))
#define NSIP_HBI_H2B_DROP_STATE_REG(_BASE) ((nsip_hbi_h2b_drop_state_reg_t*) NSIP_HBI_H2B_DROP_STATE_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL0_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL1_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL2_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL3_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL4_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL5_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL6_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL7_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL8_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL9_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL10_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL11_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL12_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL13_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL14_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL15_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL16_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL17_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL18_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL19_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL20_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL21_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL22_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL23_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL24_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL25_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL26_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL27_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL28_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL29_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL30_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_BUF_SZ_HW_TBL31_REG(_BASE) ((nsip_hbi_h2b_buf_sz_hw_tbl_reg_t*) NSIP_HBI_H2B_BUF_SZ_HW_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL0_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL1_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL2_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL3_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL4_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL5_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL6_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL7_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL8_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL9_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL10_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL11_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL12_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL13_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL14_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL15_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL16_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL17_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL18_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL19_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL20_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL21_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL22_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL23_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL24_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL25_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL26_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL27_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL28_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL29_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL30_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_ADDR_LKUP_TBL31_REG(_BASE) ((nsip_hbi_h2b_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_ADDR_LKUP_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL0_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL1_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL2_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL3_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL4_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL5_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL6_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL7_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL8_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL9_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL10_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL11_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL12_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL13_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL14_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL15_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL16_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL17_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL18_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL19_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL20_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL21_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL22_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL23_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL24_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL25_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL26_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL27_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL28_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL29_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL30_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_ROUTE_LKUP_TBL31_REG(_BASE) ((nsip_hbi_h2b_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_ROUTE_LKUP_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL0_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL1_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL2_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL3_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL4_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL5_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL6_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL7_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL8_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL9_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL10_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL11_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL12_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL13_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL14_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL15_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL16_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL17_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL18_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL19_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL20_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL21_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL22_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL23_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL24_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL25_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL26_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL27_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL28_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL29_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL30_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ADDR_LKUP_TBL31_REG(_BASE) ((nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ADDR_LKUP_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL0_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL1_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL2_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL3_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL4_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL5_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL6_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL7_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL8_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL9_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL10_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL11_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL12_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL13_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL14_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL15_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL16_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL17_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL18_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL19_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL20_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL21_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL22_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL23_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL24_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL25_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL26_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL27_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL28_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL29_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL30_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL31_REG(_BASE) ((nsip_hbi_h2b_tk_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_TK_ROUTE_LKUP_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL0_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL1_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL2_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL3_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL4_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL5_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL6_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL7_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL8_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL9_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL10_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL11_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL12_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL13_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL14_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL15_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL16_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL17_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL18_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL19_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL20_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL21_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL22_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL23_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL24_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL25_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL26_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL27_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL28_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL29_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL30_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ADDR_LKUP_TBL31_REG(_BASE) ((nsip_hbi_h2b_md_addr_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ADDR_LKUP_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL0_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL1_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL2_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL3_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL4_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL5_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL6_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL7_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL8_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL9_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL10_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL11_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL12_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL13_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL14_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL15_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL16_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL17_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL18_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL19_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL20_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL21_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL22_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL23_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL24_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL25_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL26_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL27_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL28_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL29_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL30_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL31_REG(_BASE) ((nsip_hbi_h2b_md_route_lkup_tbl_reg_t*) NSIP_HBI_H2B_MD_ROUTE_LKUP_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL0_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL0_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL1_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL1_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL2_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL2_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL3_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL3_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL4_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL4_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL5_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL5_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL6_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL6_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL7_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL7_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL8_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL8_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL9_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL9_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL10_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL10_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL11_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL11_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL12_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL12_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL13_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL13_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL14_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL14_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL15_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL15_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL16_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL16_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL17_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL17_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL18_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL18_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL19_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL19_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL20_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL20_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL21_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL21_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL22_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL22_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL23_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL23_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL24_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL24_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL25_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL25_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL26_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL26_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL27_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL27_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL28_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL28_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL29_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL29_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL30_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL30_ADR(_BASE))
#define NSIP_HBI_H2B_MD_CTRL_TBL31_REG(_BASE) ((nsip_hbi_h2b_md_ctrl_tbl_reg_t*) NSIP_HBI_H2B_MD_CTRL_TBL31_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR0_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR0_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR1_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR1_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR2_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR2_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR3_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR3_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR4_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR4_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR5_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR5_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR6_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR6_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR7_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR7_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR8_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR8_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR9_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR9_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR10_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR10_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR11_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR11_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR12_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR12_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR13_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR13_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR14_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR14_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR15_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR15_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR16_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR16_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR17_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR17_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR18_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR18_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR19_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR19_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR20_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR20_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR21_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR21_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR22_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR22_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR23_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR23_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR24_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR24_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR25_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR25_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR26_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR26_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR27_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR27_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR28_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR28_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR29_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR29_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR30_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR30_ADR(_BASE))
#define NSIP_HBI_H2B_SCNT_TK_PTR31_REG(_BASE) ((nsip_hbi_h2b_scnt_tk_ptr_reg_t*) NSIP_HBI_H2B_SCNT_TK_PTR31_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    nsip_hbi_scratch_reg_t SCRATCH;         /*< Address offset = 0x0 */
    nsip_hbi_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x4 */
    nsip_hbi_b2h_ff_fifo_ctrl_reg_t B2H_FF_FIFO_CTRL; /*< Address offset = 0x8 */
    nsip_hbi_b2h_ff_fifo_stat_reg_t B2H_FF_FIFO_STAT; /*< Address offset = 0xc */
    nsip_hbi_b2h_csr_credit_cs_reg_t B2H_CSR_CREDIT_CS; /*< Address offset = 0x10 */
    nsip_hbi_b2h_csr_flit_cnt_reg_t B2H_CSR_FLIT_CNT; /*< Address offset = 0x14 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x18 */
    nsip_hbi_b2h_csr_insert_strm_reg_t B2H_CSR_INSERT_STRM_MAP; /*< Address offset = 0x20 */
    nsip_hbi_b2h_csr_insert_state_reg_t B2H_CSR_INSERT_STATE; /*< Address offset = 0x24 */
    nsip_hbi_b2h_csr_insert_ctrl_reg_t B2H_CSR_INSERT_CTRL; /*< Address offset = 0x28 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x2c */
    nsip_hbi_insert_que_csr_b2h_reg_t INSERT_QUE_CSR0_B2H_CSR; /*< Address offset = 0x30 */
    nsip_hbi_insert_que_csr_b2h_null_sample_reg_t INSERT_QUE_CSR0_B2H_NULL_SAMPLE; /*< Address offset = 0x34 */
    nsip_hbi_insert_que_csr_cmd_strm_en_reg_t INSERT_QUE_CSR0_CMD_STRM_EN; /*< Address offset = 0x38 */
    nsip_hbi_insert_que_csr_cmd_ctrl_reg_t INSERT_QUE_CSR0_CMD_CTRL; /*< Address offset = 0x3c */
    nsip_hbi_insert_que_csr_b2h_reg_t INSERT_QUE_CSR1_B2H_CSR; /*< Address offset = 0x40 */
    nsip_hbi_insert_que_csr_b2h_null_sample_reg_t INSERT_QUE_CSR1_B2H_NULL_SAMPLE; /*< Address offset = 0x44 */
    nsip_hbi_insert_que_csr_cmd_strm_en_reg_t INSERT_QUE_CSR1_CMD_STRM_EN; /*< Address offset = 0x48 */
    nsip_hbi_insert_que_csr_cmd_ctrl_reg_t INSERT_QUE_CSR1_CMD_CTRL; /*< Address offset = 0x4c */
    const uint8_t        reservedArea2 [48];  /*< Address offset = 0x50 */
    nsip_hbi_intr_int_stat_reg_t INTR_INT_STAT; /*< Address offset = 0x80 */
    nsip_hbi_intr_int_high_en_reg_t INTR_INT_HIGH_EN; /*< Address offset = 0x84 */
    nsip_hbi_intr_int_low_en_reg_t INTR_INT_LOW_EN; /*< Address offset = 0x88 */
    nsip_hbi_intr_int_clr_reg_t INTR_INT_CLR;  /*< Address offset = 0x8c */
    nsip_hbi_intr_int_force_reg_t INTR_INT_FORCE;  /*< Address offset = 0x90 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x94 */
    nsip_hbi_smon_smon00_reg_t SMON_SMON00;     /*< Address offset = 0xa0 */
    nsip_hbi_smon_smon01_reg_t SMON_SMON01;     /*< Address offset = 0xa4 */
    nsip_hbi_smon_smon02_reg_t SMON_SMON02;     /*< Address offset = 0xa8 */
    nsip_hbi_smon_smon03_reg_t SMON_SMON03;     /*< Address offset = 0xac */
    nsip_hbi_smon_smon04_reg_t SMON_SMON04;     /*< Address offset = 0xb0 */
    nsip_hbi_smon_smon05_reg_t SMON_SMON05;     /*< Address offset = 0xb4 */
    nsip_hbi_smon_smon06_reg_t SMON_SMON06;     /*< Address offset = 0xb8 */
    nsip_hbi_smon_smon07_reg_t SMON_SMON07;     /*< Address offset = 0xbc */
    const uint8_t        reservedArea4 [64];  /*< Address offset = 0xc0 */
    nsip_hbi_b2h_csr_addr_tbl_reg_t B2H_CSR_ADDR_TBL[32]; /*< Address offset = 0x100 */
    nsip_hbi_b2h_csr_addr_mask_tbl_reg_t B2H_CSR_ADDR_MASK_TBL[32]; /*< Address offset = 0x180 */
    const uint8_t        reservedArea5 [264]; /*< Address offset = 0x200 */
    nsip_hbi_h2b_ff_fifo_ctrl_reg_t H2B_FF_FIFO_CTRL; /*< Address offset = 0x308 */
    nsip_hbi_h2b_ff_fifo_stat_reg_t H2B_FF_FIFO_STAT; /*< Address offset = 0x30c */
    nsip_hbi_h2b_credit_ready_cs_reg_t H2B_CREDIT_READY_CS; /*< Address offset = 0x310 */
    nsip_hbi_h2b_flit_cnt_reg_t H2B_FLIT_CNT;  /*< Address offset = 0x314 */
    nsip_hbi_h2b_misc_csr_reg_t H2B_MISC_CSR;    /*< Address offset = 0x318 */
    const uint8_t        reservedArea6 [4];   /*< Address offset = 0x31c */
    nsip_hbi_md_cmd_strm_en_reg_t MD_CMD_STRM_EN; /*< Address offset = 0x320 */
    nsip_hbi_md_cmd_msg_reg_t MD_CMD_MSG; /*< Address offset = 0x324 */
    nsip_hbi_md_cmd_ctrl_reg_t MD_CMD_CTRL; /*< Address offset = 0x328 */
    const uint8_t        reservedArea7 [4];   /*< Address offset = 0x32c */
    nsip_hbi_scnt_prl_seq_cnt_reg_t SCNT_PRL_SEQ_CNT; /*< Address offset = 0x330 */
    nsip_hbi_scnt_prl_strm_en_reg_t SCNT_PRL_STRM_EN; /*< Address offset = 0x334 */
    const uint8_t        reservedArea8 [8];   /*< Address offset = 0x338 */
    nsip_hbi_drop_cmd_strm_en_reg_t DROP_CMD0_CMD_STRM_EN; /*< Address offset = 0x340 */
    nsip_hbi_drop_cmd_ctrl_reg_t DROP_CMD0_CMD_CTRL; /*< Address offset = 0x344 */
    nsip_hbi_drop_cmd_strm_en_reg_t DROP_CMD1_CMD_STRM_EN; /*< Address offset = 0x348 */
    nsip_hbi_drop_cmd_ctrl_reg_t DROP_CMD1_CMD_CTRL; /*< Address offset = 0x34c */
    nsip_hbi_h2b_drop_state_reg_t H2B_DROP_STATE;  /*< Address offset = 0x350 */
    const uint8_t        reservedArea9 [44];  /*< Address offset = 0x354 */
    nsip_hbi_h2b_buf_sz_hw_tbl_reg_t H2B_BUF_SZ_HW_TBL[32]; /*< Address offset = 0x380 */
    nsip_hbi_h2b_addr_lkup_tbl_reg_t H2B_ADDR_LKUP_TBL[32]; /*< Address offset = 0x400 */
    nsip_hbi_h2b_route_lkup_tbl_reg_t H2B_ROUTE_LKUP_TBL[32]; /*< Address offset = 0x480 */
    nsip_hbi_h2b_tk_addr_lkup_tbl_reg_t H2B_TK_ADDR_LKUP_TBL[32]; /*< Address offset = 0x500 */
    nsip_hbi_h2b_tk_route_lkup_tbl_reg_t H2B_TK_ROUTE_LKUP_TBL[32]; /*< Address offset = 0x580 */
    nsip_hbi_h2b_md_addr_lkup_tbl_reg_t H2B_MD_ADDR_LKUP_TBL[32]; /*< Address offset = 0x600 */
    nsip_hbi_h2b_md_route_lkup_tbl_reg_t H2B_MD_ROUTE_LKUP_TBL[32]; /*< Address offset = 0x680 */
    nsip_hbi_h2b_md_ctrl_tbl_reg_t H2B_MD_CTRL_TBL[32]; /*< Address offset = 0x700 */
    nsip_hbi_h2b_scnt_tk_ptr_reg_t H2B_SCNT_TK_PTR[32]; /*< Address offset = 0x780 */
} nsip_hbi_t;     // size: 0x00e0

// AddressSpace struct pointer
//
#define RCS_CRUX_NSIP_HBI           ((nsip_hbi_t*) RCS_CRUX_NSIP_HBI_BASE)
#define DLNK_JESD0_NSIP_HBI_CSR     ((nsip_hbi_t*) DLNK_JESD0_NSIP_HBI_CSR_BASE)
#define DLNK_JESD1_NSIP_HBI_CSR     ((nsip_hbi_t*) DLNK_JESD1_NSIP_HBI_CSR_BASE)
#define DLNK_JESD2_NSIP_HBI_CSR     ((nsip_hbi_t*) DLNK_JESD2_NSIP_HBI_CSR_BASE)
#define DLNK_JESD3_NSIP_HBI_CSR     ((nsip_hbi_t*) DLNK_JESD3_NSIP_HBI_CSR_BASE)
#define V2D0_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D0_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D0_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D0_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D0_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D0_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D0_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D0_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D1_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D1_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D1_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D1_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D1_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D1_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D1_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D1_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D2_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D2_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D2_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D2_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D2_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D2_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D2_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D2_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D3_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D3_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D3_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D3_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D3_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D3_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D3_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D3_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D4_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D4_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D4_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D4_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D4_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D4_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D4_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D4_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D5_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D5_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D5_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D5_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D5_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D5_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D5_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D5_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D6_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D6_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D6_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D6_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D6_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D6_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D6_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D6_AV2D_APB_1_NSIP_HBI_1_BASE)
#define V2D7_AV2D_APB_0_NSIP_HBI_0  ((nsip_hbi_t*) V2D7_AV2D_APB_0_NSIP_HBI_0_BASE)
#define V2D7_AV2D_APB_0_NSIP_HBI_1  ((nsip_hbi_t*) V2D7_AV2D_APB_0_NSIP_HBI_1_BASE)
#define V2D7_AV2D_APB_1_NSIP_HBI_0  ((nsip_hbi_t*) V2D7_AV2D_APB_1_NSIP_HBI_0_BASE)
#define V2D7_AV2D_APB_1_NSIP_HBI_1  ((nsip_hbi_t*) V2D7_AV2D_APB_1_NSIP_HBI_1_BASE)
#define VHA0_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA0_ANT0_NSIP_HBI_CSR_BASE)
#define VHA0_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA0_ANT1_NSIP_HBI_CSR_BASE)
#define VHA1_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA1_ANT0_NSIP_HBI_CSR_BASE)
#define VHA1_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA1_ANT1_NSIP_HBI_CSR_BASE)
#define VHA2_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA2_ANT0_NSIP_HBI_CSR_BASE)
#define VHA2_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA2_ANT1_NSIP_HBI_CSR_BASE)
#define VHA3_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA3_ANT0_NSIP_HBI_CSR_BASE)
#define VHA3_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA3_ANT1_NSIP_HBI_CSR_BASE)
#define VHA4_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA4_ANT0_NSIP_HBI_CSR_BASE)
#define VHA4_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA4_ANT1_NSIP_HBI_CSR_BASE)
#define VHA5_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA5_ANT0_NSIP_HBI_CSR_BASE)
#define VHA5_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA5_ANT1_NSIP_HBI_CSR_BASE)
#define VHA6_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA6_ANT0_NSIP_HBI_CSR_BASE)
#define VHA6_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA6_ANT1_NSIP_HBI_CSR_BASE)
#define VHA7_ANT0_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA7_ANT0_NSIP_HBI_CSR_BASE)
#define VHA7_ANT1_NSIP_HBI_CSR      ((nsip_hbi_t*) VHA7_ANT1_NSIP_HBI_CSR_BASE)
#define MEM_FB0_NSIP_HBI_0          ((nsip_hbi_t*) MEM_FB0_NSIP_HBI_0_BASE)
#define MEM_FB0_NSIP_HBI_1          ((nsip_hbi_t*) MEM_FB0_NSIP_HBI_1_BASE)
#define MEM_FB1_NSIP_HBI_0          ((nsip_hbi_t*) MEM_FB1_NSIP_HBI_0_BASE)
#define MEM_FB1_NSIP_HBI_1          ((nsip_hbi_t*) MEM_FB1_NSIP_HBI_1_BASE)

// ******************************************* /Address Space

#endif      // _NSIP_HBI_H_

