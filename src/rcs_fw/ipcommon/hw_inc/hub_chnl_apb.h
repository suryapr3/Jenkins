#ifndef _HUB_CHNL_APB_H_
#define _HUB_CHNL_APB_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define HUB_CHNL_APB_BASE     ( 0x01b00000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define HUB_CHNL_APB_HUB_SCRATCH_OFFSET ( 0x00000000U )
#define HUB_CHNL_APB_HUB_CLK_EN_OFFSET ( 0x00000004U )
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_OFFSET ( 0x00000010U )
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_OFFSET ( 0x00000020U )
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_OFFSET ( 0x00000030U )
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OFFSET ( 0x00000040U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define HUB_CHNL_APB_HUB_SCRATCH_ADR (( ( HUB_CHNL_APB_BASE ) + ( HUB_CHNL_APB_HUB_SCRATCH_OFFSET ) ))
#define HUB_CHNL_APB_HUB_CLK_EN_ADR (( ( HUB_CHNL_APB_BASE ) + ( HUB_CHNL_APB_HUB_CLK_EN_OFFSET ) ))
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_ADR (( ( HUB_CHNL_APB_BASE ) + ( HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_OFFSET ) ))
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_ADR (( ( HUB_CHNL_APB_BASE ) + ( HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_OFFSET ) ))
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_ADR (( ( HUB_CHNL_APB_BASE ) + ( HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_OFFSET ) ))
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_ADR (( ( HUB_CHNL_APB_BASE ) + ( HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief HUB_CHNL_APB_REG_HUB_MAP_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: hub_chnl_apb/reg/HUB_MAP/Scratch
  * SYSCON Control scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD_L : 8;
    ///< Scratchpad low (warm reset)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SCRATCHPAD_M : 8;
    ///< Scratchpad low (cold reset)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SCRATCHPAD_H : 16;
    ///< Scratchpad high (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} hub_chnl_apb_hub_scratch_reg_t;

#define HUB_CHNL_APB_HUB_SCRATCH_DEFAULT (0x00000000U)
#define HUB_CHNL_APB_HUB_SCRATCH_RD_MASK (0xffffffffU)
#define HUB_CHNL_APB_HUB_SCRATCH_WR_MASK (0xffffffffU)


///< Scratchpad low (warm reset)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_OFF ( 0)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_WID ( 8)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_MSK (0x000000FF)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_L_BF_DEF (0x00000000)

///< Scratchpad low (cold reset)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_OFF ( 8)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_WID ( 8)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_MSK (0x0000FF00)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_M_BF_DEF (0x00000000)

///< Scratchpad high (sticky, power-up reset)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_OFF (16)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_WID (16)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_MSK (0xFFFF0000)
#define HUB_CHNL_APB_HUB_SCRATCH_SCRATCHPAD_H_BF_DEF (0x00000000)


/** @brief HUB_CHNL_APB_REG_HUB_MAP_CLK_EN register description at address offset 0x4
  *
  * Register default value:        0x00001777
  * Register full path in IP: hub_chnl_apb/reg/HUB_MAP/CLK_EN
  * Clock Enables
  */

typedef union {
  struct {
    uint32_t VEX : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CRUX : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t DRF : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t JESD_1G : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t JESD_1P5G : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t VHA_1P5G : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CS_ATB : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t CS_APB : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CS_DBG : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t DFT_DLNK : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} hub_chnl_apb_hub_clk_en_reg_t;

#define HUB_CHNL_APB_HUB_CLK_EN_DEFAULT (0x00001777U)
#define HUB_CHNL_APB_HUB_CLK_EN_RD_MASK (0x00001777U)
#define HUB_CHNL_APB_HUB_CLK_EN_WR_MASK (0x00001777U)


#define HUB_CHNL_APB_HUB_CLK_EN_VEX_BF_OFF ( 0)
#define HUB_CHNL_APB_HUB_CLK_EN_VEX_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_VEX_BF_MSK (0x00000001)
#define HUB_CHNL_APB_HUB_CLK_EN_VEX_BF_DEF (0x00000001)

#define HUB_CHNL_APB_HUB_CLK_EN_CRUX_BF_OFF ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_CRUX_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_CRUX_BF_MSK (0x00000002)
#define HUB_CHNL_APB_HUB_CLK_EN_CRUX_BF_DEF (0x00000002)

#define HUB_CHNL_APB_HUB_CLK_EN_DRF_BF_OFF ( 2)
#define HUB_CHNL_APB_HUB_CLK_EN_DRF_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_DRF_BF_MSK (0x00000004)
#define HUB_CHNL_APB_HUB_CLK_EN_DRF_BF_DEF (0x00000004)

#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1G_BF_OFF ( 4)
#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1G_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1G_BF_MSK (0x00000010)
#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1G_BF_DEF (0x00000010)

#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1P5G_BF_OFF ( 5)
#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1P5G_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1P5G_BF_MSK (0x00000020)
#define HUB_CHNL_APB_HUB_CLK_EN_JESD_1P5G_BF_DEF (0x00000020)

#define HUB_CHNL_APB_HUB_CLK_EN_VHA_1P5G_BF_OFF ( 6)
#define HUB_CHNL_APB_HUB_CLK_EN_VHA_1P5G_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_VHA_1P5G_BF_MSK (0x00000040)
#define HUB_CHNL_APB_HUB_CLK_EN_VHA_1P5G_BF_DEF (0x00000040)

#define HUB_CHNL_APB_HUB_CLK_EN_CS_ATB_BF_OFF ( 8)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_ATB_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_ATB_BF_MSK (0x00000100)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_ATB_BF_DEF (0x00000100)

#define HUB_CHNL_APB_HUB_CLK_EN_CS_APB_BF_OFF ( 9)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_APB_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_APB_BF_MSK (0x00000200)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_APB_BF_DEF (0x00000200)

#define HUB_CHNL_APB_HUB_CLK_EN_CS_DBG_BF_OFF (10)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_DBG_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_DBG_BF_MSK (0x00000400)
#define HUB_CHNL_APB_HUB_CLK_EN_CS_DBG_BF_DEF (0x00000400)

#define HUB_CHNL_APB_HUB_CLK_EN_DFT_DLNK_BF_OFF (12)
#define HUB_CHNL_APB_HUB_CLK_EN_DFT_DLNK_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_CLK_EN_DFT_DLNK_BF_MSK (0x00001000)
#define HUB_CHNL_APB_HUB_CLK_EN_DFT_DLNK_BF_DEF (0x00001000)


/** @brief HUB_CHNL_APB_REG_HUB_MAP_DIG_VIEWPIN_MUX_CTRL register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: hub_chnl_apb/reg/HUB_MAP/DIG_VIEWPIN_MUX_CTRL
  * Digital Viewpin Mux Control Register
  */

typedef union {
  struct {
    uint32_t MUX_SEL_0 : 3;
    ///< This controls the 8 to 1 mux to select one of the 5 digital inputs.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MUX_EN_0 : 1;
    ///< MUX enable. 1=enable the mux.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t MUX_SEL_1 : 3;
    ///< This controls the 8 to 1 mux to select one of the 5 digital inputs.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t MUX_EN_1 : 1;
    ///< MUX enable. 1=enable the mux.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t MUX_SEL_2 : 2;
    ///< This controls the 4 to 1 mux to select one of the 4 digital inputs.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t MUX_EN_2 : 1;
    ///< MUX enable. 1=enable the mux.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} hub_chnl_apb_hub_dig_viewpin_mux_ctrl_reg_t;

#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_DEFAULT (0x00000000U)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_RD_MASK (0x00000bffU)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_WR_MASK (0x00000bffU)


///< This controls the 8 to 1 mux to select one of the 5 digital inputs.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_0_BF_OFF ( 0)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_0_BF_WID ( 3)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_0_BF_MSK (0x00000007)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_0_BF_DEF (0x00000000)

///< MUX enable. 1=enable the mux.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_0_BF_OFF ( 3)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_0_BF_MSK (0x00000008)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_0_BF_DEF (0x00000000)

///< This controls the 8 to 1 mux to select one of the 5 digital inputs.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_1_BF_OFF ( 4)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_1_BF_WID ( 3)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_1_BF_MSK (0x00000070)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_1_BF_DEF (0x00000000)

///< MUX enable. 1=enable the mux.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_1_BF_OFF ( 7)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_1_BF_MSK (0x00000080)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_1_BF_DEF (0x00000000)

///< This controls the 4 to 1 mux to select one of the 4 digital inputs.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_2_BF_OFF ( 8)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_2_BF_WID ( 2)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_2_BF_MSK (0x00000300)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_SEL_2_BF_DEF (0x00000000)

///< MUX enable. 1=enable the mux.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_2_BF_OFF (11)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_2_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_2_BF_MSK (0x00000800)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_MUX_EN_2_BF_DEF (0x00000000)


/** @brief HUB_CHNL_APB_REG_HUB_MAP_DIG_VIEWPIN_CTRL register description at address offset 0x20
  *
  * Register default value:        0x04840484
  * Register full path in IP: hub_chnl_apb/reg/HUB_MAP/DIG_VIEWPIN_CTRL
  * Digital Viewpin Basic Control Register
  */

typedef union {
  struct {
    uint32_t RCOMP_BINN_0 : 5;
    ///< Pull down RCOMP code.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t MODE_SEL_0 : 1;
    ///< Differential vs Single ended mode select. 1=Single ended mode, 0=Differential
    ///< mode.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t RCOMP_BINP_0 : 5;
    ///< Pull up RCOMP code.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t DRIVE_EN_0 : 1;
    ///< TX enable. When high, enables viewpin outputs.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RCOMP_BINN_1 : 5;
    ///< Pull down RCOMP code.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t MODE_SEL_1 : 1;
    ///< Differential vs Single ended mode select. 1=Single ended mode, 0=Differential
    ///< mode.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t RCOMP_BINP_1 : 5;
    ///< Pull up RCOMP code.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
    uint32_t DRIVE_EN_1 : 1;
    ///< TX enable. When high, enables viewpin outputs.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} hub_chnl_apb_hub_dig_viewpin_ctrl_reg_t;

#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DEFAULT (0x04840484U)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RD_MASK (0x9f9f9f9fU)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_WR_MASK (0x9f9f9f9fU)


///< Pull down RCOMP code.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_0_BF_OFF ( 0)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_0_BF_WID ( 5)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_0_BF_MSK (0x0000001F)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_0_BF_DEF (0x00000004)

///< Differential vs Single ended mode select. 1=Single ended mode, 0=Differential
///< mode.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_0_BF_OFF ( 7)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_0_BF_MSK (0x00000080)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_0_BF_DEF (0x00000080)

///< Pull up RCOMP code.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_0_BF_OFF ( 8)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_0_BF_WID ( 5)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_0_BF_MSK (0x00001F00)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_0_BF_DEF (0x00000400)

///< TX enable. When high, enables viewpin outputs.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_0_BF_OFF (15)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_0_BF_MSK (0x00008000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_0_BF_DEF (0x00000000)

///< Pull down RCOMP code.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_1_BF_OFF (16)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_1_BF_WID ( 5)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_1_BF_MSK (0x001F0000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINN_1_BF_DEF (0x00040000)

///< Differential vs Single ended mode select. 1=Single ended mode, 0=Differential
///< mode.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_1_BF_OFF (23)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_1_BF_MSK (0x00800000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_MODE_SEL_1_BF_DEF (0x00800000)

///< Pull up RCOMP code.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_1_BF_OFF (24)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_1_BF_WID ( 5)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_1_BF_MSK (0x1F000000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_RCOMP_BINP_1_BF_DEF (0x04000000)

///< TX enable. When high, enables viewpin outputs.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_1_BF_OFF (31)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_1_BF_MSK (0x80000000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_DRIVE_EN_1_BF_DEF (0x00000000)


/** @brief HUB_CHNL_APB_REG_HUB_MAP_DIG_VIEWPIN_EQ_CTRL register description at address offset 0x30
  *
  * Register default value:        0x01000100
  * Register full path in IP: hub_chnl_apb/reg/HUB_MAP/DIG_VIEWPIN_EQ_CTRL
  * Digital Viewpin Equalization Control Register
  */

typedef union {
  struct {
    uint32_t EQ_CTRL0_0 : 4;
    ///< Equalization control_0 bits.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EQ_CTRL1_0 : 4;
    ///< Equalization control_1 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t EQ_MUTE_0 : 1;
    ///< Equalization control_1 bits.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t EQ_CTRL0_1 : 4;
    ///< Equalization control_0 bits.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t EQ_CTRL1_1 : 4;
    ///< Equalization control_1 bits.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t EQ_MUTE_1 : 1;
    ///< Equalization control_1 bits.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} hub_chnl_apb_hub_dig_viewpin_eq_ctrl_reg_t;

#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_DEFAULT (0x01000100U)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_RD_MASK (0x01ff01ffU)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_WR_MASK (0x01ff01ffU)


///< Equalization control_0 bits.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_0_BF_OFF ( 0)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_0_BF_WID ( 4)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_0_BF_MSK (0x0000000F)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_0_BF_DEF (0x00000000)

///< Equalization control_1 bits.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_0_BF_OFF ( 4)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_0_BF_WID ( 4)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_0_BF_MSK (0x000000F0)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_0_BF_DEF (0x00000000)

///< Equalization control_1 bits.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_0_BF_OFF ( 8)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_0_BF_MSK (0x00000100)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_0_BF_DEF (0x00000100)

///< Equalization control_0 bits.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_1_BF_OFF (16)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_1_BF_WID ( 4)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_1_BF_MSK (0x000F0000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL0_1_BF_DEF (0x00000000)

///< Equalization control_1 bits.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_1_BF_OFF (20)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_1_BF_WID ( 4)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_1_BF_MSK (0x00F00000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_CTRL1_1_BF_DEF (0x00000000)

///< Equalization control_1 bits.
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_1_BF_OFF (24)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_1_BF_MSK (0x01000000)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_EQ_MUTE_1_BF_DEF (0x01000000)


/** @brief HUB_CHNL_APB_REG_HUB_MAP_ANA_VIEWPIN_CTRL register description at address offset 0x40
  *
  * Register default value:        0x00000808
  * Register full path in IP: hub_chnl_apb/reg/HUB_MAP/ANA_VIEWPIN_CTRL
  * Analog Viewpin Control Register
  */

typedef union {
  struct {
    uint32_t DIGPWRGOOD_0 : 1;
    ///< Digital power supply power good. 1=digital power good.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t BYP_EN_0 : 1;
    ///< Bypass Unity Gain Buffer. 1=Bypass enable.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OB_EN_0 : 1;
    ///< Enable Unity Gain Buffer. 1=Enable UGB.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PWRGATE_ENB_0 : 1;
    ///< LDO enable. 0=Enable internal LDO.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t MUX_CTRL_0 : 3;
    ///< This controls the analog mux to select one of the 5 analog inputs.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DIGPWRGOOD_1 : 1;
    ///< Digital power supply power good. 1=digital power good.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t BYP_EN_1 : 1;
    ///< Bypass Unity Gain Buffer. 1=Bypass enable.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t OB_EN_1 : 1;
    ///< Enable Unity Gain Buffer. 1=Enable UGB.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t PWRGATE_ENB_1 : 1;
    ///< LDO enable. 0=Enable internal LDO.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t MUX_CTRL_1 : 3;
    ///< This controls the analog mux to select one of the 5 analog inputs.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t MUX_EN_0 : 1;
    ///< Input analog mux enable. 1=Enable the mux.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t MUX_EN_1 : 1;
    ///< Input analog mux enable. 1=Enable the mux.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} hub_chnl_apb_hub_ana_viewpin_ctrl_reg_t;

#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DEFAULT (0x00000808U)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_RD_MASK (0x00037f7fU)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_WR_MASK (0x00037f7fU)


///< Digital power supply power good. 1=digital power good.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_0_BF_OFF ( 0)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_0_BF_MSK (0x00000001)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_0_BF_DEF (0x00000000)

///< Bypass Unity Gain Buffer. 1=Bypass enable.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_0_BF_OFF ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_0_BF_MSK (0x00000002)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_0_BF_DEF (0x00000000)

///< Enable Unity Gain Buffer. 1=Enable UGB.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_0_BF_OFF ( 2)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_0_BF_MSK (0x00000004)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_0_BF_DEF (0x00000000)

///< LDO enable. 0=Enable internal LDO.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_0_BF_OFF ( 3)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_0_BF_MSK (0x00000008)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_0_BF_DEF (0x00000008)

///< This controls the analog mux to select one of the 5 analog inputs.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_0_BF_OFF ( 4)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_0_BF_WID ( 3)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_0_BF_MSK (0x00000070)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_0_BF_DEF (0x00000000)

///< Digital power supply power good. 1=digital power good.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_1_BF_OFF ( 8)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_1_BF_MSK (0x00000100)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_DIGPWRGOOD_1_BF_DEF (0x00000000)

///< Bypass Unity Gain Buffer. 1=Bypass enable.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_1_BF_OFF ( 9)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_1_BF_MSK (0x00000200)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_BYP_EN_1_BF_DEF (0x00000000)

///< Enable Unity Gain Buffer. 1=Enable UGB.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_1_BF_OFF (10)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_1_BF_MSK (0x00000400)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_OB_EN_1_BF_DEF (0x00000000)

///< LDO enable. 0=Enable internal LDO.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_1_BF_OFF (11)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_1_BF_MSK (0x00000800)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_PWRGATE_ENB_1_BF_DEF (0x00000800)

///< This controls the analog mux to select one of the 5 analog inputs.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_1_BF_OFF (12)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_1_BF_WID ( 3)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_1_BF_MSK (0x00007000)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_CTRL_1_BF_DEF (0x00000000)

///< Input analog mux enable. 1=Enable the mux.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_0_BF_OFF (16)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_0_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_0_BF_MSK (0x00010000)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_0_BF_DEF (0x00000000)

///< Input analog mux enable. 1=Enable the mux.
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_1_BF_OFF (17)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_1_BF_WID ( 1)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_1_BF_MSK (0x00020000)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_MUX_EN_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define HUB_CHNL_APB_HUB_SCRATCH_REG ((hub_chnl_apb_hub_scratch_reg_t*) HUB_CHNL_APB_HUB_SCRATCH_ADR)
#define HUB_CHNL_APB_HUB_CLK_EN_REG ((hub_chnl_apb_hub_clk_en_reg_t*) HUB_CHNL_APB_HUB_CLK_EN_ADR)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_REG ((hub_chnl_apb_hub_dig_viewpin_mux_ctrl_reg_t*) HUB_CHNL_APB_HUB_DIG_VIEWPIN_MUX_CTRL_ADR)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_REG ((hub_chnl_apb_hub_dig_viewpin_ctrl_reg_t*) HUB_CHNL_APB_HUB_DIG_VIEWPIN_CTRL_ADR)
#define HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_REG ((hub_chnl_apb_hub_dig_viewpin_eq_ctrl_reg_t*) HUB_CHNL_APB_HUB_DIG_VIEWPIN_EQ_CTRL_ADR)
#define HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_REG ((hub_chnl_apb_hub_ana_viewpin_ctrl_reg_t*) HUB_CHNL_APB_HUB_ANA_VIEWPIN_CTRL_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    hub_chnl_apb_hub_scratch_reg_t HUB_SCRATCH; /*< Address offset = 0x0 */
    hub_chnl_apb_hub_clk_en_reg_t HUB_CLK_EN;  /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    hub_chnl_apb_hub_dig_viewpin_mux_ctrl_reg_t HUB_DIG_VIEWPIN_MUX_CTRL; /*< Address offset = 0x10 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x14 */
    hub_chnl_apb_hub_dig_viewpin_ctrl_reg_t HUB_DIG_VIEWPIN_CTRL; /*< Address offset = 0x20 */
    const uint8_t        reservedArea2 [12];  /*< Address offset = 0x24 */
    hub_chnl_apb_hub_dig_viewpin_eq_ctrl_reg_t HUB_DIG_VIEWPIN_EQ_CTRL; /*< Address offset = 0x30 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x34 */
    hub_chnl_apb_hub_ana_viewpin_ctrl_reg_t HUB_ANA_VIEWPIN_CTRL; /*< Address offset = 0x40 */
} hub_chnl_apb_t;     // size: 0x0018

// AddressSpace struct pointer
//
#define HUB_CHNL_APB     ((hub_chnl_apb_t*) HUB_CHNL_APB_BASE)

// ******************************************* /Address Space

#endif      // _HUB_CHNL_APB_H_

