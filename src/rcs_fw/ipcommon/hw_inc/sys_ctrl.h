#ifndef _SYS_CTRL_H_
#define _SYS_CTRL_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_CTRL_BASE      ( 0x01e10000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define SYS_CTRL_SCRATCHBOTTOM_OFFSET ( 0x00000000U )
#define SYS_CTRL_VER_OFFSET      ( 0x00000004U )
#define SYS_CTRL_SYS_CTRL_OFFSET ( 0x00000008U )
#define SYS_CTRL_SYS_STAT_OFFSET ( 0x0000000cU )
#define SYS_CTRL_RST_CTRL_OFFSET ( 0x00000010U )
#define SYS_CTRL_GPIO_CTRL_OFFSET ( 0x00000014U )
#define SYS_CTRL_SPICSR_OFFSET       ( 0x0000001cU )
#define SYS_CTRL_RST_SOURCE_OFFSET ( 0x00000020U )
#define SYS_CTRL_CSTS_SNAPSHOT_H_OFFSET ( 0x00000028U )
#define SYS_CTRL_CSTS_SNAPSHOT_L_OFFSET ( 0x0000002cU )
#define SYS_CTRL_VADFSMSR_OFFSET     ( 0x00000030U )
#define SYS_CTRL_FDISTOV_CSR_OFFSET  ( 0x00000034U )
#define SYS_CTRL_WDOG_MAP0_WDOG_CSR_OFFSET ( 0x00000040U )
#define SYS_CTRL_WDOG_MAP0_WDOG_IVAL_OFFSET ( 0x00000044U )
#define SYS_CTRL_WDOG_MAP0_WDOG_KA_OFFSET ( 0x00000048U )
#define SYS_CTRL_WDOG_MAP1_WDOG_CSR_OFFSET ( 0x00000050U )
#define SYS_CTRL_WDOG_MAP1_WDOG_IVAL_OFFSET ( 0x00000054U )
#define SYS_CTRL_WDOG_MAP1_WDOG_KA_OFFSET ( 0x00000058U )
#define SYS_CTRL_SBB_CTRL_STAT_OFFSET ( 0x00000060U )
#define SYS_CTRL_SBB_MEM_CTRL_OFFSET ( 0x00000064U )
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_OFFSET ( 0x00000068U )
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_OFFSET ( 0x0000006cU )
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_OFFSET ( 0x00000070U )
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_OFFSET ( 0x00000074U )
#define SYS_CTRL_SBB_MEM_ECC_STAT0_OFFSET ( 0x00000078U )
#define SYS_CTRL_SBB_MEM_ECC_STAT1_OFFSET ( 0x0000007cU )
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_OFFSET ( 0x00000080U )
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_OFFSET ( 0x00000084U )
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_OFFSET ( 0x00000088U )
#define SYS_CTRL_SBB_TRNG_RAND_OFFSET ( 0x0000008cU )
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_OFFSET ( 0x00000100U )
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_OFFSET ( 0x00000104U )
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_OFFSET ( 0x00000108U )
#define SYS_CTRL_INTR0_CSR_INTRCLR0_OFFSET ( 0x0000010cU )
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_OFFSET ( 0x00000110U )
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_OFFSET ( 0x00000120U )
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_OFFSET ( 0x00000124U )
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_OFFSET ( 0x00000128U )
#define SYS_CTRL_INTR1_CSR_INTRCLR1_OFFSET ( 0x0000012cU )
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_OFFSET ( 0x00000130U )
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_OFFSET ( 0x00000140U )
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_OFFSET ( 0x00000144U )
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_OFFSET ( 0x00000148U )
#define SYS_CTRL_INTR2_CSR_INTRCLR2_OFFSET ( 0x0000014cU )
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_OFFSET ( 0x00000150U )
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_OFFSET ( 0x00000160U )
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_OFFSET ( 0x00000164U )
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_OFFSET ( 0x00000168U )
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_OFFSET ( 0x0000016cU )
#define SYS_CTRL_DFX_HW_LOCK_STAT_OFFSET ( 0x00007e00U )
#define SYS_CTRL_DFX_BOOTDBG_STAT_OFFSET ( 0x00007e04U )
#define SYS_CTRL_DFX_BOOTDBG_CTRL_OFFSET ( 0x00007e08U )
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OFFSET ( 0x00007e10U )
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_OFFSET ( 0x00007e14U )
#define SYS_CTRL_DFX_GPIOEAST_CTRL_OFFSET ( 0x00007e18U )
#define SYS_CTRL_DFX_DBGMUX_CTRL_OFFSET ( 0x00007e1cU )
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_OFFSET ( 0x00007e20U )
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_OFFSET ( 0x00007e24U )
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_OFFSET ( 0x00007e28U )
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_OFFSET ( 0x00007e2cU )
#define SYS_CTRL_DFX_FSLDO_STATOVRD_OFFSET ( 0x00007e40U )
#define SYS_CTRL_DFX_BSLDO_STATOVRD_OFFSET ( 0x00007e44U )
#define SYS_CTRL_DFX_FSLDO_CTRL_OFFSET ( 0x00007e48U )
#define SYS_CTRL_DFX_BSLDO_CTRL_OFFSET ( 0x00007e4cU )
#define SYS_CTRL_DFX_SBGRLDO_CSR_OFFSET ( 0x00007e50U )
#define SYS_CTRL_DFX_BISR_CSR_OFFSET ( 0x00007e54U )
#define SYS_CTRL_DFX_DBGMSGCMD_OFFSET ( 0x00007e58U )
#define SYS_CTRL_SCRATCHTOP_OFFSET   ( 0x00007ffcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define SYS_CTRL_SCRATCHBOTTOM_ADR   (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SCRATCHBOTTOM_OFFSET ) ))
#define SYS_CTRL_VER_ADR         (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_VER_OFFSET ) ))
#define SYS_CTRL_SYS_CTRL_ADR  (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SYS_CTRL_OFFSET ) ))
#define SYS_CTRL_SYS_STAT_ADR   (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SYS_STAT_OFFSET ) ))
#define SYS_CTRL_RST_CTRL_ADR   (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_RST_CTRL_OFFSET ) ))
#define SYS_CTRL_GPIO_CTRL_ADR    (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_GPIO_CTRL_OFFSET ) ))
#define SYS_CTRL_SPICSR_ADR          (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SPICSR_OFFSET ) ))
#define SYS_CTRL_RST_SOURCE_ADR    (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_RST_SOURCE_OFFSET ) ))
#define SYS_CTRL_CSTS_SNAPSHOT_H_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_CSTS_SNAPSHOT_H_OFFSET ) ))
#define SYS_CTRL_CSTS_SNAPSHOT_L_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_CSTS_SNAPSHOT_L_OFFSET ) ))
#define SYS_CTRL_VADFSMSR_ADR        (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_VADFSMSR_OFFSET ) ))
#define SYS_CTRL_FDISTOV_CSR_ADR     (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_FDISTOV_CSR_OFFSET ) ))
#define SYS_CTRL_WDOG_MAP0_WDOG_CSR_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_WDOG_MAP0_WDOG_CSR_OFFSET ) ))
#define SYS_CTRL_WDOG_MAP0_WDOG_IVAL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_WDOG_MAP0_WDOG_IVAL_OFFSET ) ))
#define SYS_CTRL_WDOG_MAP0_WDOG_KA_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_WDOG_MAP0_WDOG_KA_OFFSET ) ))
#define SYS_CTRL_WDOG_MAP1_WDOG_CSR_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_WDOG_MAP1_WDOG_CSR_OFFSET ) ))
#define SYS_CTRL_WDOG_MAP1_WDOG_IVAL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_WDOG_MAP1_WDOG_IVAL_OFFSET ) ))
#define SYS_CTRL_WDOG_MAP1_WDOG_KA_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_WDOG_MAP1_WDOG_KA_OFFSET ) ))
#define SYS_CTRL_SBB_CTRL_STAT_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_CTRL_STAT_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_CTRL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_CTRL_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_CTRL0_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_CTRL1_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_CTRL2_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_CTRL3_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_STAT0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_STAT0_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_STAT1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_STAT1_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_OFFSET ) ))
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_MEM_ERR_INFORMATION_OFFSET ) ))
#define SYS_CTRL_SBB_TRNG_RAND_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SBB_TRNG_RAND_OFFSET ) ))
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR0_CSR_INTRSTAT0_OFFSET ) ))
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR0_CSR_INTRENHIGH0_OFFSET ) ))
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR0_CSR_INTRENLOW0_OFFSET ) ))
#define SYS_CTRL_INTR0_CSR_INTRCLR0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR0_CSR_INTRCLR0_OFFSET ) ))
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR0_CSR_INTRFORCE0_OFFSET ) ))
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR1_CSR_INTRSTAT1_OFFSET ) ))
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR1_CSR_INTRENHIGH1_OFFSET ) ))
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR1_CSR_INTRENLOW1_OFFSET ) ))
#define SYS_CTRL_INTR1_CSR_INTRCLR1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR1_CSR_INTRCLR1_OFFSET ) ))
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR1_CSR_INTRFORCE1_OFFSET ) ))
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR2_CSR_INTRSTAT2_OFFSET ) ))
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR2_CSR_INTRENHIGH2_OFFSET ) ))
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR2_CSR_INTRENLOW2_OFFSET ) ))
#define SYS_CTRL_INTR2_CSR_INTRCLR2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR2_CSR_INTRCLR2_OFFSET ) ))
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_INTR2_CSR_INTRFORCE2_OFFSET ) ))
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_TXALARM_CSR_TXALARMSTAT_OFFSET ) ))
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_TXALARM_CSR_TXALARMEN_OFFSET ) ))
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_TXALARM_CSR_TXALARMCLR_OFFSET ) ))
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_TXALARM_CSR_TXALARMFORCE_OFFSET ) ))
#define SYS_CTRL_DFX_HW_LOCK_STAT_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_HW_LOCK_STAT_OFFSET ) ))
#define SYS_CTRL_DFX_BOOTDBG_STAT_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BOOTDBG_STAT_OFFSET ) ))
#define SYS_CTRL_DFX_BOOTDBG_CTRL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BOOTDBG_CTRL_OFFSET ) ))
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OFFSET ) ))
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BOOTDBG_RSTVAL_OFFSET ) ))
#define SYS_CTRL_DFX_GPIOEAST_CTRL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_GPIOEAST_CTRL_OFFSET ) ))
#define SYS_CTRL_DFX_DBGMUX_CTRL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_DBGMUX_CTRL_OFFSET ) ))
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_MEM_TRIM_OVRD1_OFFSET ) ))
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_MEM_TRIM_OVRD2_OFFSET ) ))
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_LB_TRIM_OVRD1_OFFSET ) ))
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_LB_TRIM_OVRD2_OFFSET ) ))
#define SYS_CTRL_DFX_FSLDO_STATOVRD_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_FSLDO_STATOVRD_OFFSET ) ))
#define SYS_CTRL_DFX_BSLDO_STATOVRD_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BSLDO_STATOVRD_OFFSET ) ))
#define SYS_CTRL_DFX_FSLDO_CTRL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_FSLDO_CTRL_OFFSET ) ))
#define SYS_CTRL_DFX_BSLDO_CTRL_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BSLDO_CTRL_OFFSET ) ))
#define SYS_CTRL_DFX_SBGRLDO_CSR_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_SBGRLDO_CSR_OFFSET ) ))
#define SYS_CTRL_DFX_BISR_CSR_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_BISR_CSR_OFFSET ) ))
#define SYS_CTRL_DFX_DBGMSGCMD_ADR (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_DFX_DBGMSGCMD_OFFSET ) ))
#define SYS_CTRL_SCRATCHTOP_ADR      (( ( SYSCON_CTRL_BASE ) + ( SYS_CTRL_SCRATCHTOP_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief SYS_CTRL_REG_SCRATCHBOTTOM register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/ScratchBottom
  * SYSCON Control scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD_L : 8;
    ///< Scratchpad low (warm reset)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SCRATCHPAD_M : 8;
    ///< Scratchpad low (cold reset)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SCRATCHPAD_H : 16;
    ///< Scratchpad high (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_scratchbottom_reg_t;

#define SYS_CTRL_SCRATCHBOTTOM_DEFAULT (0x00000000U)
#define SYS_CTRL_SCRATCHBOTTOM_RD_MASK (0xffffffffU)
#define SYS_CTRL_SCRATCHBOTTOM_WR_MASK (0xffffffffU)


///< Scratchpad low (warm reset)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_L_BF_OFF ( 0)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_L_BF_WID ( 8)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_L_BF_MSK (0x000000FF)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_L_BF_DEF (0x00000000)

///< Scratchpad low (cold reset)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_M_BF_OFF ( 8)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_M_BF_WID ( 8)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_M_BF_MSK (0x0000FF00)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_M_BF_DEF (0x00000000)

///< Scratchpad high (sticky, power-up reset)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_H_BF_OFF (16)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_H_BF_WID (16)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_H_BF_MSK (0xFFFF0000)
#define SYS_CTRL_SCRATCHBOTTOM_SCRATCHPAD_H_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_VERSION register description at address offset 0x4
  *
  * Register default value:        0x00000008
  * Register full path in IP: sys_ctrl/reg/Version
  * SYSCON Version Register
  */

typedef union {
  struct {
    uint32_t DEVID : 3;
    ///< Encoded Device Identification:  CODE            DEVICE 'b000
    ///< 0008 'b001              0016 'b010              1608 'b011
    ///< 1616 'b100              4008 'b101              4016 'b110
    ///< reserved 'b111             reserved
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PREPRODUCT : 1;
    ///< When set, SOC is pre-production or a test device.  Modifies the meaning
    ///< of the SOCRevision field.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x1"
    uint32_t SOCREVISION : 4;
    ///< SOC Metal Mask Revision  BITS [7:6] (dependent on PreProduct field)
    ///< 'b00= if PreProduct=0, then  A , else  Z  'b01= if PreProduct=0, then
    ///< B , else  Y  'b10= if PreProduct=0, then  C , else  X  'b11= if PreProduct=0,
    ///< then  D , else  W   BITS [5:4] 'b00=0 'b01=1 'b10=2 'b11=3
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t SOCVARIANT : 2;
    ///< SOC Metal Variant  'b00 = Variant T 'b01 = Variant F 'b10 = Variant
    ///< C 'b11 = reserved
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ENV : 2;
    ///< Build Environment:      00=silicon,     01=emulation/FPGA     10=simulation
    ///< 11=undefined
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t FM_REV : 4;
    ///< Version of fuse map.  Loaded by fuses.
    ///< AccessType="RO/V/P" BitOffset="12" ResetValue="0x0"
    uint32_t SATE_VER : 6;
    ///< Version of the SerDes ATE Test Program.  Loaded by fuses.
    ///< AccessType="RO/V/P" BitOffset="16" ResetValue="0x0"
    uint32_t SERDES_SKIP_LOAD : 1;
    ///< SerDes Skip Load.  When set, SerDes Rom image is invalid and should
    ///< not be loaded. Loaded by fuses.
    ///< AccessType="RO/V/P" BitOffset="22" ResetValue="0x0"
    uint32_t BOOTHALT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t A0DEBUG : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
    uint32_t EXPORT_COMPLIANCE : 1;
    ///< Export Compliance 0=Export Compliance disabled 1=Export Compliance
    ///< enabled
    ///< AccessType="RO/V/P" BitOffset="27" ResetValue="0x0"
    uint32_t SBE : 1;
    ///< Secure Boot Enable Fuse 0=Secure Boot disabled 1=Secure Boot enabled
    ///< AccessType="RO/V/P" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_ver_reg_t;

#define SYS_CTRL_VER_DEFAULT (0x00000008U)
#define SYS_CTRL_VER_RD_MASK (0x19ffffffU)
#define SYS_CTRL_VER_WR_MASK (0x00000000U)


///< Encoded Device Identification:  CODE            DEVICE 'b000
///< 0008 'b001              0016 'b010              1608 'b011
///< 1616 'b100              4008 'b101              4016 'b110
///< reserved 'b111             reserved
#define SYS_CTRL_VER_DEVID_BF_OFF ( 0)
#define SYS_CTRL_VER_DEVID_BF_WID ( 3)
#define SYS_CTRL_VER_DEVID_BF_MSK (0x00000007)
#define SYS_CTRL_VER_DEVID_BF_DEF (0x00000000)

///< When set, SOC is pre-production or a test device.  Modifies the meaning
///< of the SOCRevision field.
#define SYS_CTRL_VER_PREPRODUCT_BF_OFF ( 3)
#define SYS_CTRL_VER_PREPRODUCT_BF_WID ( 1)
#define SYS_CTRL_VER_PREPRODUCT_BF_MSK (0x00000008)
#define SYS_CTRL_VER_PREPRODUCT_BF_DEF (0x00000008)

///< SOC Metal Mask Revision  BITS [7:6] (dependent on PreProduct field)
///< 'b00= if PreProduct=0, then  A , else  Z  'b01= if PreProduct=0, then
///< B , else  Y  'b10= if PreProduct=0, then  C , else  X  'b11= if PreProduct=0,
///< then  D , else  W   BITS [5:4] 'b00=0 'b01=1 'b10=2 'b11=3
#define SYS_CTRL_VER_SOCREVISION_BF_OFF ( 4)
#define SYS_CTRL_VER_SOCREVISION_BF_WID ( 4)
#define SYS_CTRL_VER_SOCREVISION_BF_MSK (0x000000F0)
#define SYS_CTRL_VER_SOCREVISION_BF_DEF (0x00000000)

///< SOC Metal Variant  'b00 = Variant T 'b01 = Variant F 'b10 = Variant
///< C 'b11 = reserved
#define SYS_CTRL_VER_SOCVARIANT_BF_OFF ( 8)
#define SYS_CTRL_VER_SOCVARIANT_BF_WID ( 2)
#define SYS_CTRL_VER_SOCVARIANT_BF_MSK (0x00000300)
#define SYS_CTRL_VER_SOCVARIANT_BF_DEF (0x00000000)

///< Build Environment:      00=silicon,     01=emulation/FPGA     10=simulation
///< 11=undefined
#define SYS_CTRL_VER_ENV_BF_OFF (10)
#define SYS_CTRL_VER_ENV_BF_WID ( 2)
#define SYS_CTRL_VER_ENV_BF_MSK (0x00000C00)
#define SYS_CTRL_VER_ENV_BF_DEF (0x00000000)

///< Version of fuse map.  Loaded by fuses.
#define SYS_CTRL_VER_FM_REV_BF_OFF (12)
#define SYS_CTRL_VER_FM_REV_BF_WID ( 4)
#define SYS_CTRL_VER_FM_REV_BF_MSK (0x0000F000)
#define SYS_CTRL_VER_FM_REV_BF_DEF (0x00000000)

///< Version of the SerDes ATE Test Program.  Loaded by fuses.
#define SYS_CTRL_VER_SATE_VER_BF_OFF (16)
#define SYS_CTRL_VER_SATE_VER_BF_WID ( 6)
#define SYS_CTRL_VER_SATE_VER_BF_MSK (0x003F0000)
#define SYS_CTRL_VER_SATE_VER_BF_DEF (0x00000000)

///< SerDes Skip Load.  When set, SerDes Rom image is invalid and should
///< not be loaded. Loaded by fuses.
#define SYS_CTRL_VER_SERDES_SKIP_LOAD_BF_OFF (22)
#define SYS_CTRL_VER_SERDES_SKIP_LOAD_BF_WID ( 1)
#define SYS_CTRL_VER_SERDES_SKIP_LOAD_BF_MSK (0x00400000)
#define SYS_CTRL_VER_SERDES_SKIP_LOAD_BF_DEF (0x00000000)

#define SYS_CTRL_VER_BOOTHALT_BF_OFF (23)
#define SYS_CTRL_VER_BOOTHALT_BF_WID ( 1)
#define SYS_CTRL_VER_BOOTHALT_BF_MSK (0x00800000)
#define SYS_CTRL_VER_BOOTHALT_BF_DEF (0x00000000)

#define SYS_CTRL_VER_A0DBG_BF_OFF (24)
#define SYS_CTRL_VER_A0DBG_BF_WID ( 1)
#define SYS_CTRL_VER_A0DBG_BF_MSK (0x01000000)
#define SYS_CTRL_VER_A0DBG_BF_DEF (0x00000000)

///< Export Compliance 0=Export Compliance disabled 1=Export Compliance
///< enabled
#define SYS_CTRL_VER_EXPORT_COMPLIANCE_BF_OFF (27)
#define SYS_CTRL_VER_EXPORT_COMPLIANCE_BF_WID ( 1)
#define SYS_CTRL_VER_EXPORT_COMPLIANCE_BF_MSK (0x08000000)
#define SYS_CTRL_VER_EXPORT_COMPLIANCE_BF_DEF (0x00000000)

///< Secure Boot Enable Fuse 0=Secure Boot disabled 1=Secure Boot enabled
#define SYS_CTRL_VER_SBE_BF_OFF (28)
#define SYS_CTRL_VER_SBE_BF_WID ( 1)
#define SYS_CTRL_VER_SBE_BF_MSK (0x10000000)
#define SYS_CTRL_VER_SBE_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SYSTEM_CONTROL register description at address offset 0x8
  *
  * Register default value:        0x00000101
  * Register full path in IP: sys_ctrl/reg/System_Control
  * System Control Register
  */

typedef union {
  struct {
    uint32_t TTRIP_NMIDIS : 1;
    ///< Disable for NMI generated when DTS ThermTrip (CatTrip) is asserted
    ///< 0=Disable NMI generation 1=Enable NMI generation (default)
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t PLL_BAND_SEL : 2;
    ///< PLL Default frequency mode.  Loaded by OEM fuse. RW when ref_clk_deselect=1.
    ///< RO  when ref_clk_deselect=0.  00=16 GHz for both PLLs (default) 01=16
    ///< GHz for PLL1 (west); 24 GHz for PLL0 (east) 10= 24 GHz for PLL1 (west);
    ///< 16 GHz for PLL0 (east) 11= 24 Ghz for both PLLs
    ///< AccessType="RW/V/P/L" BitOffset="2" ResetValue="0x0"
    uint32_t PLL_SELECT : 1;
    ///< PLL Selection for the main clock source inputs.  Choose which set
    ///< of PLLs to use as the clock source. 0=pll[0] (east) 1=pll[1] (west)
    ///< AccessType="RW/P" BitOffset="4" ResetValue="0x0"
    uint32_t CLK_VEX_SELECT : 1;
    ///< CLK_VEX Selection.  0 = 983.04 MHz, 1 = 1474.56 MHz
    ///< AccessType="RW/P" BitOffset="5" ResetValue="0x0"
    uint32_t CLK_DRF_SELECT : 1;
    ///< CLK_DRF Selection.  0 = 983.04 MHz, 1 = 1474.56 MHz
    ///< AccessType="RW/P" BitOffset="6" ResetValue="0x0"
    uint32_t REF_CLK_DESELECT : 1;
    ///< REF_CLK De-select (set to select PLL for clock sources over REF_CLK)
    ///< 0 = REF_CLK (default), 1 = PLL
    ///< AccessType="RW/P" BitOffset="7" ResetValue="0x0"
    uint32_t TX_ALARM_DELAY : 2;
    ///< TX Alarm Delay Selection.  00 =  32 clocks 01 =  64 clocks (default)
    ///< 10 = 128 clocks 11 = 256 clocks
    ///< AccessType="RW/P" BitOffset="8" ResetValue="0x1"
    uint32_t SERDES_ROM_DBG : 1;
    ///< SerDes ROM Debug Mode.  Initial value loaded by fuse.  0 = disabled
    ///< 1 = enabled
    ///< AccessType="RW/V/P/L" BitOffset="10" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t BMODE : 1;
    ///< SOC Boot Mode (sticky):      0=Normal     1=Debug
    ///< AccessType="RW/P/L" BitOffset="16" ResetValue="0x0"
    uint32_t FORCE_PUR : 1;
    ///< Force Power Up Reset (sticky)  When set, SWCold_Rst will initiate
    ///< a power-up reset.
    ///< AccessType="RW/L" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t SWWARM_RST : 1;
    ///< Software Warm Reset.  Initiates a Warm Reset on a 0->1 transition,
    ///< when SWRst_EN = 0x1.
    ///< AccessType="RW/AC" BitOffset="28" ResetValue="0x0"
    uint32_t SWCOLD_RST : 1;
    ///< Software Cold Reset.  Initiates a Cold Reset on a 0->1 transition,
    ///< when SWRst_EN = 0x2.
    ///< AccessType="RW/AC" BitOffset="29" ResetValue="0x0"
    uint32_t SWRST_EN : 2;
    ///< Software Reset Enable.  0x1 (01) to enable SWWarm_Rst. 0x2 (10) to
    ///< enable SWCold_Rst.  All others have no effect.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sys_ctrl_reg_t;

#define SYS_CTRL_SYS_CTRL_DEFAULT (0x00000101U)
#define SYS_CTRL_SYS_CTRL_RD_MASK (0xf00307fdU)
#define SYS_CTRL_SYS_CTRL_WR_MASK (0xf00307fdU)


///< Disable for NMI generated when DTS ThermTrip (CatTrip) is asserted
///< 0=Disable NMI generation 1=Enable NMI generation (default)
#define SYS_CTRL_SYS_CTRL_TTRIP_NMIDIS_BF_OFF ( 0)
#define SYS_CTRL_SYS_CTRL_TTRIP_NMIDIS_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_TTRIP_NMIDIS_BF_MSK (0x00000001)
#define SYS_CTRL_SYS_CTRL_TTRIP_NMIDIS_BF_DEF (0x00000001)

///< PLL Default frequency mode.  Loaded by OEM fuse. RW when ref_clk_deselect=1.
///< RO  when ref_clk_deselect=0.  00=16 GHz for both PLLs (default) 01=16
///< GHz for PLL1 (west); 24 GHz for PLL0 (east) 10= 24 GHz for PLL1 (west);
///< 16 GHz for PLL0 (east) 11= 24 Ghz for both PLLs
#define SYS_CTRL_SYS_CTRL_PLL_BAND_SEL_BF_OFF ( 2)
#define SYS_CTRL_SYS_CTRL_PLL_BAND_SEL_BF_WID ( 2)
#define SYS_CTRL_SYS_CTRL_PLL_BAND_SEL_BF_MSK (0x0000000C)
#define SYS_CTRL_SYS_CTRL_PLL_BAND_SEL_BF_DEF (0x00000000)

///< PLL Selection for the main clock source inputs.  Choose which set
///< of PLLs to use as the clock source. 0=pll[0] (east) 1=pll[1] (west)
#define SYS_CTRL_SYS_CTRL_PLL_SEL_BF_OFF ( 4)
#define SYS_CTRL_SYS_CTRL_PLL_SEL_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_PLL_SEL_BF_MSK (0x00000010)
#define SYS_CTRL_SYS_CTRL_PLL_SEL_BF_DEF (0x00000000)

///< CLK_VEX Selection.  0 = 983.04 MHz, 1 = 1474.56 MHz
#define SYS_CTRL_SYS_CTRL_CLK_VEX_SEL_BF_OFF ( 5)
#define SYS_CTRL_SYS_CTRL_CLK_VEX_SEL_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_CLK_VEX_SEL_BF_MSK (0x00000020)
#define SYS_CTRL_SYS_CTRL_CLK_VEX_SEL_BF_DEF (0x00000000)

///< CLK_DRF Selection.  0 = 983.04 MHz, 1 = 1474.56 MHz
#define SYS_CTRL_SYS_CTRL_CLK_DRF_SEL_BF_OFF ( 6)
#define SYS_CTRL_SYS_CTRL_CLK_DRF_SEL_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_CLK_DRF_SEL_BF_MSK (0x00000040)
#define SYS_CTRL_SYS_CTRL_CLK_DRF_SEL_BF_DEF (0x00000000)

///< REF_CLK De-select (set to select PLL for clock sources over REF_CLK)
///< 0 = REF_CLK (default), 1 = PLL
#define SYS_CTRL_SYS_CTRL_REF_CLK_DESEL_BF_OFF ( 7)
#define SYS_CTRL_SYS_CTRL_REF_CLK_DESEL_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_REF_CLK_DESEL_BF_MSK (0x00000080)
#define SYS_CTRL_SYS_CTRL_REF_CLK_DESEL_BF_DEF (0x00000000)

///< TX Alarm Delay Selection.  00 =  32 clocks 01 =  64 clocks (default)
///< 10 = 128 clocks 11 = 256 clocks
#define SYS_CTRL_SYS_CTRL_TX_ALARM_DELAY_BF_OFF ( 8)
#define SYS_CTRL_SYS_CTRL_TX_ALARM_DELAY_BF_WID ( 2)
#define SYS_CTRL_SYS_CTRL_TX_ALARM_DELAY_BF_MSK (0x00000300)
#define SYS_CTRL_SYS_CTRL_TX_ALARM_DELAY_BF_DEF (0x00000100)

///< SerDes ROM Debug Mode.  Initial value loaded by fuse.  0 = disabled
///< 1 = enabled
#define SYS_CTRL_SYS_CTRL_SERDES_ROM_DBG_BF_OFF (10)
#define SYS_CTRL_SYS_CTRL_SERDES_ROM_DBG_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_SERDES_ROM_DBG_BF_MSK (0x00000400)
#define SYS_CTRL_SYS_CTRL_SERDES_ROM_DBG_BF_DEF (0x00000000)

///< SOC Boot Mode (sticky):      0=Normal     1=Debug
#define SYS_CTRL_SYS_CTRL_BMODE_BF_OFF (16)
#define SYS_CTRL_SYS_CTRL_BMODE_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_BMODE_BF_MSK (0x00010000)
#define SYS_CTRL_SYS_CTRL_BMODE_BF_DEF (0x00000000)

///< Force Power Up Reset (sticky)  When set, SWCold_Rst will initiate
///< a power-up reset.
#define SYS_CTRL_SYS_CTRL_FORCE_PUR_BF_OFF (17)
#define SYS_CTRL_SYS_CTRL_FORCE_PUR_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_FORCE_PUR_BF_MSK (0x00020000)
#define SYS_CTRL_SYS_CTRL_FORCE_PUR_BF_DEF (0x00000000)

///< Software Warm Reset.  Initiates a Warm Reset on a 0->1 transition,
///< when SWRst_EN = 0x1.
#define SYS_CTRL_SYS_CTRL_SWWARM_RST_BF_OFF (28)
#define SYS_CTRL_SYS_CTRL_SWWARM_RST_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_SWWARM_RST_BF_MSK (0x10000000)
#define SYS_CTRL_SYS_CTRL_SWWARM_RST_BF_DEF (0x00000000)

///< Software Cold Reset.  Initiates a Cold Reset on a 0->1 transition,
///< when SWRst_EN = 0x2.
#define SYS_CTRL_SYS_CTRL_SWCOLD_RST_BF_OFF (29)
#define SYS_CTRL_SYS_CTRL_SWCOLD_RST_BF_WID ( 1)
#define SYS_CTRL_SYS_CTRL_SWCOLD_RST_BF_MSK (0x20000000)
#define SYS_CTRL_SYS_CTRL_SWCOLD_RST_BF_DEF (0x00000000)

///< Software Reset Enable.  0x1 (01) to enable SWWarm_Rst. 0x2 (10) to
///< enable SWCold_Rst.  All others have no effect.
#define SYS_CTRL_SYS_CTRL_SWRST_EN_BF_OFF (30)
#define SYS_CTRL_SYS_CTRL_SWRST_EN_BF_WID ( 2)
#define SYS_CTRL_SYS_CTRL_SWRST_EN_BF_MSK (0xC0000000)
#define SYS_CTRL_SYS_CTRL_SWRST_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SYSTEM_STATUS register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/System_Status
  * SYSCON Status Register
  */

typedef union {
  struct {
    uint32_t READY : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FUSESENSEDONE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t FUSESENSEERROR : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t FUSEDISTDONE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t SPI_DIS : 1;
    ///< SPI Disabled      0=Enabled     1=Disabled
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PCIE_DIS : 1;
    ///< PCIE Disabled      0=Enabled     1=Disabled
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PLL_LOCK : 2;
    ///< ---
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t HW_PLL_SELECT : 1;
    ///< Hardware PLL Selection for the main clock source inputs.  Reflects
    ///< which PLL is seleted by SYSCON hardware, based on SW request and fuse
    ///< values.. 0=pll[0] (east) 1=pll[1] (west)
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t HW_CLK_VEX_SELECT : 1;
    ///< Hardware CLK_VEX Selection.  Reflects which clock in selected by SYSCON
    ///< hardware for VEX.  0 = 983.04 MHz, 1 = 1474.56 MHz
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t HW_CLK_DRF_SELECT : 1;
    ///< Hardware CLK_DRF Selection.  Reflects which clock is selected by SYSCON
    ///< hardware for DRF.  0 = 983.04 MHz, 1 = 1474.56 MHz
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t HW_REF_CLK_DESELECT : 1;
    ///< Hardware REF_CLK De-select.  Reflects state of reference clock selection,
    ///< based on SW request and fuse values.  0 = REF_CLK (default), 1 = PLL
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t MBOX_TAPSEL : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sys_stat_reg_t;

#define SYS_CTRL_SYS_STAT_DEFAULT (0x00000000U)
#define SYS_CTRL_SYS_STAT_RD_MASK (0x80000fffU)
#define SYS_CTRL_SYS_STAT_WR_MASK (0x00000000U)


#define SYS_CTRL_SYS_STAT_READY_BF_OFF ( 0)
#define SYS_CTRL_SYS_STAT_READY_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_READY_BF_MSK (0x00000001)
#define SYS_CTRL_SYS_STAT_READY_BF_DEF (0x00000000)

#define SYS_CTRL_SYS_STAT_FUSESENSEDONE_BF_OFF ( 1)
#define SYS_CTRL_SYS_STAT_FUSESENSEDONE_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_FUSESENSEDONE_BF_MSK (0x00000002)
#define SYS_CTRL_SYS_STAT_FUSESENSEDONE_BF_DEF (0x00000000)

#define SYS_CTRL_SYS_STAT_FUSESENSEERR_BF_OFF ( 2)
#define SYS_CTRL_SYS_STAT_FUSESENSEERR_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_FUSESENSEERR_BF_MSK (0x00000004)
#define SYS_CTRL_SYS_STAT_FUSESENSEERR_BF_DEF (0x00000000)

#define SYS_CTRL_SYS_STAT_FUSEDISTDONE_BF_OFF ( 3)
#define SYS_CTRL_SYS_STAT_FUSEDISTDONE_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_FUSEDISTDONE_BF_MSK (0x00000008)
#define SYS_CTRL_SYS_STAT_FUSEDISTDONE_BF_DEF (0x00000000)

///< SPI Disabled      0=Enabled     1=Disabled
#define SYS_CTRL_SYS_STAT_SPI_DIS_BF_OFF ( 4)
#define SYS_CTRL_SYS_STAT_SPI_DIS_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_SPI_DIS_BF_MSK (0x00000010)
#define SYS_CTRL_SYS_STAT_SPI_DIS_BF_DEF (0x00000000)

///< PCIE Disabled      0=Enabled     1=Disabled
#define SYS_CTRL_SYS_STAT_PCIE_DIS_BF_OFF ( 5)
#define SYS_CTRL_SYS_STAT_PCIE_DIS_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_PCIE_DIS_BF_MSK (0x00000020)
#define SYS_CTRL_SYS_STAT_PCIE_DIS_BF_DEF (0x00000000)

#define SYS_CTRL_SYS_STAT_PLL_LOCK_BF_OFF ( 6)
#define SYS_CTRL_SYS_STAT_PLL_LOCK_BF_WID ( 2)
#define SYS_CTRL_SYS_STAT_PLL_LOCK_BF_MSK (0x000000C0)
#define SYS_CTRL_SYS_STAT_PLL_LOCK_BF_DEF (0x00000000)

///< Hardware PLL Selection for the main clock source inputs.  Reflects
///< which PLL is seleted by SYSCON hardware, based on SW request and fuse
///< values.. 0=pll[0] (east) 1=pll[1] (west)
#define SYS_CTRL_SYS_STAT_HW_PLL_SEL_BF_OFF ( 8)
#define SYS_CTRL_SYS_STAT_HW_PLL_SEL_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_HW_PLL_SEL_BF_MSK (0x00000100)
#define SYS_CTRL_SYS_STAT_HW_PLL_SEL_BF_DEF (0x00000000)

///< Hardware CLK_VEX Selection.  Reflects which clock in selected by SYSCON
///< hardware for VEX.  0 = 983.04 MHz, 1 = 1474.56 MHz
#define SYS_CTRL_SYS_STAT_HW_CLK_VEX_SEL_BF_OFF ( 9)
#define SYS_CTRL_SYS_STAT_HW_CLK_VEX_SEL_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_HW_CLK_VEX_SEL_BF_MSK (0x00000200)
#define SYS_CTRL_SYS_STAT_HW_CLK_VEX_SEL_BF_DEF (0x00000000)

///< Hardware CLK_DRF Selection.  Reflects which clock is selected by SYSCON
///< hardware for DRF.  0 = 983.04 MHz, 1 = 1474.56 MHz
#define SYS_CTRL_SYS_STAT_HW_CLK_DRF_SEL_BF_OFF (10)
#define SYS_CTRL_SYS_STAT_HW_CLK_DRF_SEL_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_HW_CLK_DRF_SEL_BF_MSK (0x00000400)
#define SYS_CTRL_SYS_STAT_HW_CLK_DRF_SEL_BF_DEF (0x00000000)

///< Hardware REF_CLK De-select.  Reflects state of reference clock selection,
///< based on SW request and fuse values.  0 = REF_CLK (default), 1 = PLL
#define SYS_CTRL_SYS_STAT_HW_REF_CLK_DESEL_BF_OFF (11)
#define SYS_CTRL_SYS_STAT_HW_REF_CLK_DESEL_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_HW_REF_CLK_DESEL_BF_MSK (0x00000800)
#define SYS_CTRL_SYS_STAT_HW_REF_CLK_DESEL_BF_DEF (0x00000000)

#define SYS_CTRL_SYS_STAT_MBOX_TAPSEL_BF_OFF (31)
#define SYS_CTRL_SYS_STAT_MBOX_TAPSEL_BF_WID ( 1)
#define SYS_CTRL_SYS_STAT_MBOX_TAPSEL_BF_MSK (0x80000000)
#define SYS_CTRL_SYS_STAT_MBOX_TAPSEL_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_RESET_CONTROL register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/Reset_Control
  * SYSCON Reset Control Register
  */

typedef union {
  struct {
    uint32_t RESET_DFXAGG : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="0" ResetValue="0x0"
    uint32_t RESET_IFS : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="1" ResetValue="0x0"
    uint32_t RESET_SBB : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="2" ResetValue="0x0"
    uint32_t RESET_SBB_NS : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="3" ResetValue="0x0"
    uint32_t RESET_SYSCON : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="4" ResetValue="0x0"
    uint32_t RESET_SPI : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="5" ResetValue="0x0"
    uint32_t COLD_SPARE : 2;
    ///< ---
    ///< AccessType="RW/P" BitOffset="6" ResetValue="0x0"
    uint32_t RESET_ORION : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="8" ResetValue="0x0"
    uint32_t RESET_RCS : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="9" ResetValue="0x0"
    uint32_t RESET_DLNK_SUBFC : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="10" ResetValue="0x0"
    uint32_t RESET_VEX_SUBFC : 1;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="11" ResetValue="0x0"
    uint32_t RESET_DRF_SUBFC : 2;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="12" ResetValue="0x0"
    uint32_t RESET_PLL : 2;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="14" ResetValue="0x0"
    uint32_t PWRUP_PLL : 2;
    ///< ---
    ///< AccessType="RW/1S/V/P" BitOffset="16" ResetValue="0x0"
    uint32_t RESET_CORESIGHT : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="18" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_rst_ctrl_reg_t;

#define SYS_CTRL_RST_CTRL_DEFAULT (0x00000000U)
#define SYS_CTRL_RST_CTRL_RD_MASK (0x0007ffffU)
#define SYS_CTRL_RST_CTRL_WR_MASK (0x0007ffffU)


#define SYS_CTRL_RST_CTRL_RST_DFXAGG_BF_OFF ( 0)
#define SYS_CTRL_RST_CTRL_RST_DFXAGG_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_DFXAGG_BF_MSK (0x00000001)
#define SYS_CTRL_RST_CTRL_RST_DFXAGG_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_IFS_BF_OFF ( 1)
#define SYS_CTRL_RST_CTRL_RST_IFS_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_IFS_BF_MSK (0x00000002)
#define SYS_CTRL_RST_CTRL_RST_IFS_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_SBB_BF_OFF ( 2)
#define SYS_CTRL_RST_CTRL_RST_SBB_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_SBB_BF_MSK (0x00000004)
#define SYS_CTRL_RST_CTRL_RST_SBB_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_SBB_NS_BF_OFF ( 3)
#define SYS_CTRL_RST_CTRL_RST_SBB_NS_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_SBB_NS_BF_MSK (0x00000008)
#define SYS_CTRL_RST_CTRL_RST_SBB_NS_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_SYSCON_BF_OFF ( 4)
#define SYS_CTRL_RST_CTRL_RST_SYSCON_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_SYSCON_BF_MSK (0x00000010)
#define SYS_CTRL_RST_CTRL_RST_SYSCON_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_SPI_BF_OFF ( 5)
#define SYS_CTRL_RST_CTRL_RST_SPI_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_SPI_BF_MSK (0x00000020)
#define SYS_CTRL_RST_CTRL_RST_SPI_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_COLD_SPARE_BF_OFF ( 6)
#define SYS_CTRL_RST_CTRL_COLD_SPARE_BF_WID ( 2)
#define SYS_CTRL_RST_CTRL_COLD_SPARE_BF_MSK (0x000000C0)
#define SYS_CTRL_RST_CTRL_COLD_SPARE_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_ORION_BF_OFF ( 8)
#define SYS_CTRL_RST_CTRL_RST_ORION_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_ORION_BF_MSK (0x00000100)
#define SYS_CTRL_RST_CTRL_RST_ORION_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_RCS_BF_OFF ( 9)
#define SYS_CTRL_RST_CTRL_RST_RCS_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_RCS_BF_MSK (0x00000200)
#define SYS_CTRL_RST_CTRL_RST_RCS_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_DLNK_SUBFC_BF_OFF (10)
#define SYS_CTRL_RST_CTRL_RST_DLNK_SUBFC_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_DLNK_SUBFC_BF_MSK (0x00000400)
#define SYS_CTRL_RST_CTRL_RST_DLNK_SUBFC_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_VEX_SUBFC_BF_OFF (11)
#define SYS_CTRL_RST_CTRL_RST_VEX_SUBFC_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_VEX_SUBFC_BF_MSK (0x00000800)
#define SYS_CTRL_RST_CTRL_RST_VEX_SUBFC_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_DRF_SUBFC_BF_OFF (12)
#define SYS_CTRL_RST_CTRL_RST_DRF_SUBFC_BF_WID ( 2)
#define SYS_CTRL_RST_CTRL_RST_DRF_SUBFC_BF_MSK (0x00003000)
#define SYS_CTRL_RST_CTRL_RST_DRF_SUBFC_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_PLL_BF_OFF (14)
#define SYS_CTRL_RST_CTRL_RST_PLL_BF_WID ( 2)
#define SYS_CTRL_RST_CTRL_RST_PLL_BF_MSK (0x0000C000)
#define SYS_CTRL_RST_CTRL_RST_PLL_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_PWRUP_PLL_BF_OFF (16)
#define SYS_CTRL_RST_CTRL_PWRUP_PLL_BF_WID ( 2)
#define SYS_CTRL_RST_CTRL_PWRUP_PLL_BF_MSK (0x00030000)
#define SYS_CTRL_RST_CTRL_PWRUP_PLL_BF_DEF (0x00000000)

#define SYS_CTRL_RST_CTRL_RST_CORESIGHT_BF_OFF (18)
#define SYS_CTRL_RST_CTRL_RST_CORESIGHT_BF_WID ( 1)
#define SYS_CTRL_RST_CTRL_RST_CORESIGHT_BF_MSK (0x00040000)
#define SYS_CTRL_RST_CTRL_RST_CORESIGHT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_GPIO_CONTROL register description at address offset 0x14
  *
  * Register default value:        0x44400055
  * Register full path in IP: sys_ctrl/reg/GPIO_Control
  * GPIO Control Register
  */

typedef union {
  struct {
    uint32_t READY : 2;
    ///< GPIO Drive Control for READY output (default=0x1, sticky)
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x1"
    uint32_t TDO : 2;
    ///< GPIO Drive Control for TDO output (default=0x1, sticky)
    ///< AccessType="RW/P" BitOffset="2" ResetValue="0x1"
    uint32_t INT_SPIMISO : 2;
    ///< GPIO Drive Control for Internal SPIMISO output (default=0x1, sticky)
    ///< AccessType="RW/P" BitOffset="4" ResetValue="0x1"
    uint32_t EXT_SPIMISO : 2;
    ///< GPIO Drive Control for eXternal SPIMISO output (default=0x1, sticky)
    ///< AccessType="RW/P" BitOffset="6" ResetValue="0x1"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t GFDLY_PLL_PON : 3;
    ///< Glitch Filter Delay, pll_sysclk_pon  (default=0x4, sticky)  Min-Max
    ///< pulse width from 550 - 850mV:  0 = 4.65 - 48.8 ns 1 = 8.81 - 93.0
    ///< ns 2 = 13.1 - 138  ns 3 = 17.2 - 182  ns 4 = 21.4 - 225  ns 5 = 25.5
    ///< - 269  ns 6 = 29.8 - 314  ns 7 = 33.9 - 358  ns
    ///< AccessType="RW/P" BitOffset="20" ResetValue="0x4"
    uint32_t GFBYP_PLL_PON : 1;
    ///< Glitch Filter Bypass, pll_sysclk_pon  (default=0, sticky)  0 = filter
    ///< enabled 1 = filter bypassed
    ///< AccessType="RW/P" BitOffset="23" ResetValue="0x0"
    uint32_t GFDLY_PLL_MODESEL : 3;
    ///< Glitch Filter Delay, pll_sysclk983p04m_sel  (default=0x4, sticky)
    ///< Min-Max pulse width from 550 - 850mV:  0 = 4.65 - 48.8 ns 1 = 8.81
    ///< - 93.0 ns 2 = 13.1 - 138  ns 3 = 17.2 - 182  ns 4 = 21.4 - 225  ns
    ///< 5 = 25.5 - 269  ns 6 = 29.8 - 314  ns 7 = 33.9 - 358  ns
    ///< AccessType="RW/P" BitOffset="24" ResetValue="0x4"
    uint32_t GFBYP_PLL_MODESEL : 1;
    ///< Glitch Filter Bypass, pll_sysclk983p04m_sel  (default=0, sticky)
    ///< 0 = filter enabled 1 = filter bypassed
    ///< AccessType="RW/P" BitOffset="27" ResetValue="0x0"
    uint32_t GFDLY_RESETB : 3;
    ///< Glitch Filter Delay, ResetB  (default=0x4, sticky)  Min-Max pulse
    ///< width from 550 - 850mV:  0 = 4.65 - 48.8 ns 1 = 8.81 - 93.0 ns 2 =
    ///< 13.1 - 138  ns 3 = 17.2 - 182  ns 4 = 21.4 - 225  ns 5 = 25.5 - 269
    ///< ns 6 = 29.8 - 314  ns 7 = 33.9 - 358  ns
    ///< AccessType="RW/P" BitOffset="28" ResetValue="0x4"
    uint32_t GFBYP_RESETB : 1;
    ///< Glitch Filter Bypass, ResetB  (default=0, sticky)  0 = filter enabled
    ///< 1 = filter bypassed
    ///< AccessType="RW/P" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_gpio_ctrl_reg_t;

#define SYS_CTRL_GPIO_CTRL_DEFAULT (0x44400055U)
#define SYS_CTRL_GPIO_CTRL_RD_MASK (0xfff000ffU)
#define SYS_CTRL_GPIO_CTRL_WR_MASK (0xfff000ffU)


///< GPIO Drive Control for READY output (default=0x1, sticky)
#define SYS_CTRL_GPIO_CTRL_READY_BF_OFF ( 0)
#define SYS_CTRL_GPIO_CTRL_READY_BF_WID ( 2)
#define SYS_CTRL_GPIO_CTRL_READY_BF_MSK (0x00000003)
#define SYS_CTRL_GPIO_CTRL_READY_BF_DEF (0x00000001)

///< GPIO Drive Control for TDO output (default=0x1, sticky)
#define SYS_CTRL_GPIO_CTRL_TDO_BF_OFF ( 2)
#define SYS_CTRL_GPIO_CTRL_TDO_BF_WID ( 2)
#define SYS_CTRL_GPIO_CTRL_TDO_BF_MSK (0x0000000C)
#define SYS_CTRL_GPIO_CTRL_TDO_BF_DEF (0x00000004)

///< GPIO Drive Control for Internal SPIMISO output (default=0x1, sticky)
#define SYS_CTRL_GPIO_CTRL_INT_SPIMISO_BF_OFF ( 4)
#define SYS_CTRL_GPIO_CTRL_INT_SPIMISO_BF_WID ( 2)
#define SYS_CTRL_GPIO_CTRL_INT_SPIMISO_BF_MSK (0x00000030)
#define SYS_CTRL_GPIO_CTRL_INT_SPIMISO_BF_DEF (0x00000010)

///< GPIO Drive Control for eXternal SPIMISO output (default=0x1, sticky)
#define SYS_CTRL_GPIO_CTRL_EXT_SPIMISO_BF_OFF ( 6)
#define SYS_CTRL_GPIO_CTRL_EXT_SPIMISO_BF_WID ( 2)
#define SYS_CTRL_GPIO_CTRL_EXT_SPIMISO_BF_MSK (0x000000C0)
#define SYS_CTRL_GPIO_CTRL_EXT_SPIMISO_BF_DEF (0x00000040)

///< Glitch Filter Delay, pll_sysclk_pon  (default=0x4, sticky)  Min-Max
///< pulse width from 550 - 850mV:  0 = 4.65 - 48.8 ns 1 = 8.81 - 93.0
///< ns 2 = 13.1 - 138  ns 3 = 17.2 - 182  ns 4 = 21.4 - 225  ns 5 = 25.5
///< - 269  ns 6 = 29.8 - 314  ns 7 = 33.9 - 358  ns
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_PON_BF_OFF (20)
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_PON_BF_WID ( 3)
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_PON_BF_MSK (0x00700000)
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_PON_BF_DEF (0x00400000)

///< Glitch Filter Bypass, pll_sysclk_pon  (default=0, sticky)  0 = filter
///< enabled 1 = filter bypassed
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_PON_BF_OFF (23)
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_PON_BF_WID ( 1)
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_PON_BF_MSK (0x00800000)
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_PON_BF_DEF (0x00000000)

///< Glitch Filter Delay, pll_sysclk983p04m_sel  (default=0x4, sticky)
///< Min-Max pulse width from 550 - 850mV:  0 = 4.65 - 48.8 ns 1 = 8.81
///< - 93.0 ns 2 = 13.1 - 138  ns 3 = 17.2 - 182  ns 4 = 21.4 - 225  ns
///< 5 = 25.5 - 269  ns 6 = 29.8 - 314  ns 7 = 33.9 - 358  ns
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_MODESEL_BF_OFF (24)
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_MODESEL_BF_WID ( 3)
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_MODESEL_BF_MSK (0x07000000)
#define SYS_CTRL_GPIO_CTRL_GFDLY_PLL_MODESEL_BF_DEF (0x04000000)

///< Glitch Filter Bypass, pll_sysclk983p04m_sel  (default=0, sticky)
///< 0 = filter enabled 1 = filter bypassed
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_MODESEL_BF_OFF (27)
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_MODESEL_BF_WID ( 1)
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_MODESEL_BF_MSK (0x08000000)
#define SYS_CTRL_GPIO_CTRL_GFBYP_PLL_MODESEL_BF_DEF (0x00000000)

///< Glitch Filter Delay, ResetB  (default=0x4, sticky)  Min-Max pulse
///< width from 550 - 850mV:  0 = 4.65 - 48.8 ns 1 = 8.81 - 93.0 ns 2 =
///< 13.1 - 138  ns 3 = 17.2 - 182  ns 4 = 21.4 - 225  ns 5 = 25.5 - 269
///< ns 6 = 29.8 - 314  ns 7 = 33.9 - 358  ns
#define SYS_CTRL_GPIO_CTRL_GFDLY_RSTB_BF_OFF (28)
#define SYS_CTRL_GPIO_CTRL_GFDLY_RSTB_BF_WID ( 3)
#define SYS_CTRL_GPIO_CTRL_GFDLY_RSTB_BF_MSK (0x70000000)
#define SYS_CTRL_GPIO_CTRL_GFDLY_RSTB_BF_DEF (0x40000000)

///< Glitch Filter Bypass, ResetB  (default=0, sticky)  0 = filter enabled
///< 1 = filter bypassed
#define SYS_CTRL_GPIO_CTRL_GFBYP_RSTB_BF_OFF (31)
#define SYS_CTRL_GPIO_CTRL_GFBYP_RSTB_BF_WID ( 1)
#define SYS_CTRL_GPIO_CTRL_GFBYP_RSTB_BF_MSK (0x80000000)
#define SYS_CTRL_GPIO_CTRL_GFBYP_RSTB_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SPICSR register description at address offset 0x1c
  *
  * Register default value:        0x00008303
  * Register full path in IP: sys_ctrl/reg/SPICSR
  * SPI Control and Status Register
  */

typedef union {
  struct {
    uint32_t INT_DELAY_RESP : 1;
    ///< Wait an additional Internal SPI transfer time. Used to compensate
    ///< for very slow response times that may cause responses to be missed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t INT_MSB_FIRST : 1;
    ///< Internal SPI data ordering; shift MSB first.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t EXT_DELAY_RESP : 1;
    ///< Wait an additional External SPI transfer time. Used to compensate
    ///< for very slow response times that may cause responses to be missed.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t EXT_MSB_FIRST : 1;
    ///< External SPI data ordering; shift MSB first.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t EXT_SPIEN : 1;
    ///< Enable External SPI Interface
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t SPI_STATE : 1;
    ///< SPI State.    0 = SPI_IDLE   1 = SPI_CAPTURE
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t SPI_RESP_STATE : 2;
    ///< SPI Response State.    00 = SPI_RESP_IDLE   01 = SPI_RESP_RD   10
    ///< = SPI_RESP_LAST   11 = SPI_RESP_WAIT
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_spicsr_reg_t;

#define SYS_CTRL_SPICSR_DEFAULT (0x00008303U)
#define SYS_CTRL_SPICSR_RD_MASK (0x00078303U)
#define SYS_CTRL_SPICSR_WR_MASK (0x00008303U)


///< Wait an additional Internal SPI transfer time. Used to compensate
///< for very slow response times that may cause responses to be missed.
#define SYS_CTRL_SPICSR_INT_DELAY_RESP_BF_OFF ( 0)
#define SYS_CTRL_SPICSR_INT_DELAY_RESP_BF_WID ( 1)
#define SYS_CTRL_SPICSR_INT_DELAY_RESP_BF_MSK (0x00000001)
#define SYS_CTRL_SPICSR_INT_DELAY_RESP_BF_DEF (0x00000001)

///< Internal SPI data ordering; shift MSB first.
#define SYS_CTRL_SPICSR_INT_MSB_FIRST_BF_OFF ( 1)
#define SYS_CTRL_SPICSR_INT_MSB_FIRST_BF_WID ( 1)
#define SYS_CTRL_SPICSR_INT_MSB_FIRST_BF_MSK (0x00000002)
#define SYS_CTRL_SPICSR_INT_MSB_FIRST_BF_DEF (0x00000002)

///< Wait an additional External SPI transfer time. Used to compensate
///< for very slow response times that may cause responses to be missed.
#define SYS_CTRL_SPICSR_EXT_DELAY_RESP_BF_OFF ( 8)
#define SYS_CTRL_SPICSR_EXT_DELAY_RESP_BF_WID ( 1)
#define SYS_CTRL_SPICSR_EXT_DELAY_RESP_BF_MSK (0x00000100)
#define SYS_CTRL_SPICSR_EXT_DELAY_RESP_BF_DEF (0x00000100)

///< External SPI data ordering; shift MSB first.
#define SYS_CTRL_SPICSR_EXT_MSB_FIRST_BF_OFF ( 9)
#define SYS_CTRL_SPICSR_EXT_MSB_FIRST_BF_WID ( 1)
#define SYS_CTRL_SPICSR_EXT_MSB_FIRST_BF_MSK (0x00000200)
#define SYS_CTRL_SPICSR_EXT_MSB_FIRST_BF_DEF (0x00000200)

///< Enable External SPI Interface
#define SYS_CTRL_SPICSR_EXT_SPIEN_BF_OFF (15)
#define SYS_CTRL_SPICSR_EXT_SPIEN_BF_WID ( 1)
#define SYS_CTRL_SPICSR_EXT_SPIEN_BF_MSK (0x00008000)
#define SYS_CTRL_SPICSR_EXT_SPIEN_BF_DEF (0x00008000)

///< SPI State.    0 = SPI_IDLE   1 = SPI_CAPTURE
#define SYS_CTRL_SPICSR_SPI_STATE_BF_OFF (16)
#define SYS_CTRL_SPICSR_SPI_STATE_BF_WID ( 1)
#define SYS_CTRL_SPICSR_SPI_STATE_BF_MSK (0x00010000)
#define SYS_CTRL_SPICSR_SPI_STATE_BF_DEF (0x00000000)

///< SPI Response State.    00 = SPI_RESP_IDLE   01 = SPI_RESP_RD   10
///< = SPI_RESP_LAST   11 = SPI_RESP_WAIT
#define SYS_CTRL_SPICSR_SPI_RESP_STATE_BF_OFF (17)
#define SYS_CTRL_SPICSR_SPI_RESP_STATE_BF_WID ( 2)
#define SYS_CTRL_SPICSR_SPI_RESP_STATE_BF_MSK (0x00060000)
#define SYS_CTRL_SPICSR_SPI_RESP_STATE_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_RESET_SOURCE register description at address offset 0x20
  *
  * Register default value:        0x00000001
  * Register full path in IP: sys_ctrl/reg/Reset_Source
  * SYSCON Reset Source Register
  */

typedef union {
  struct {
    uint32_t PU_RESET : 1;
    ///< Power Up Reset.  First cold reset after power-on. Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="0" ResetValue="0x1"
    uint32_t COLD_RESET_PIN : 1;
    ///< Cold Reset Pin. Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="1" ResetValue="0x0"
    uint32_t SW_COLD_RESET : 1;
    ///< Software initiated Cold Reset (write to SysControl Register). Write
    ///< 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="2" ResetValue="0x0"
    uint32_t SW_WARM_RESET : 1;
    ///< Software initiated Warm Reset (write to SysControl Register). Write
    ///< 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="3" ResetValue="0x0"
    uint32_t WD0_COLD_RESET : 1;
    ///< WDOG0 Cold Reset (WDOG Timeout). Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="4" ResetValue="0x0"
    uint32_t WD0_WARM_RESET : 1;
    ///< WDOG0 Warm Reset (write to SysControl Register). Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="5" ResetValue="0x0"
    uint32_t WD1_COLD_RESET : 1;
    ///< WDOG1 Cold Reset (WDOG Timeout). Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="6" ResetValue="0x0"
    uint32_t WD1_WARM_RESET : 1;
    ///< WDOG1 Warm Reset (write to SysControl Register). Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="7" ResetValue="0x0"
    uint32_t CATTRIP_RESET : 1;
    ///< Catastrophic overtemp (thermal trip) from DTS's. Write 1 to clear.
    ///< AccessType="RW/1C/V/P" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_rst_source_reg_t;

#define SYS_CTRL_RST_SOURCE_DEFAULT (0x00000001U)
#define SYS_CTRL_RST_SOURCE_RD_MASK (0x000001ffU)
#define SYS_CTRL_RST_SOURCE_WR_MASK (0x000001ffU)


///< Power Up Reset.  First cold reset after power-on. Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_PU_RST_BF_OFF ( 0)
#define SYS_CTRL_RST_SOURCE_PU_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_PU_RST_BF_MSK (0x00000001)
#define SYS_CTRL_RST_SOURCE_PU_RST_BF_DEF (0x00000001)

///< Cold Reset Pin. Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_COLD_RST_PIN_BF_OFF ( 1)
#define SYS_CTRL_RST_SOURCE_COLD_RST_PIN_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_COLD_RST_PIN_BF_MSK (0x00000002)
#define SYS_CTRL_RST_SOURCE_COLD_RST_PIN_BF_DEF (0x00000000)

///< Software initiated Cold Reset (write to SysControl Register). Write
///< 1 to clear.
#define SYS_CTRL_RST_SOURCE_SW_COLD_RST_BF_OFF ( 2)
#define SYS_CTRL_RST_SOURCE_SW_COLD_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_SW_COLD_RST_BF_MSK (0x00000004)
#define SYS_CTRL_RST_SOURCE_SW_COLD_RST_BF_DEF (0x00000000)

///< Software initiated Warm Reset (write to SysControl Register). Write
///< 1 to clear.
#define SYS_CTRL_RST_SOURCE_SW_WARM_RST_BF_OFF ( 3)
#define SYS_CTRL_RST_SOURCE_SW_WARM_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_SW_WARM_RST_BF_MSK (0x00000008)
#define SYS_CTRL_RST_SOURCE_SW_WARM_RST_BF_DEF (0x00000000)

///< WDOG0 Cold Reset (WDOG Timeout). Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_WD0_COLD_RST_BF_OFF ( 4)
#define SYS_CTRL_RST_SOURCE_WD0_COLD_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_WD0_COLD_RST_BF_MSK (0x00000010)
#define SYS_CTRL_RST_SOURCE_WD0_COLD_RST_BF_DEF (0x00000000)

///< WDOG0 Warm Reset (write to SysControl Register). Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_WD0_WARM_RST_BF_OFF ( 5)
#define SYS_CTRL_RST_SOURCE_WD0_WARM_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_WD0_WARM_RST_BF_MSK (0x00000020)
#define SYS_CTRL_RST_SOURCE_WD0_WARM_RST_BF_DEF (0x00000000)

///< WDOG1 Cold Reset (WDOG Timeout). Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_WD1_COLD_RST_BF_OFF ( 6)
#define SYS_CTRL_RST_SOURCE_WD1_COLD_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_WD1_COLD_RST_BF_MSK (0x00000040)
#define SYS_CTRL_RST_SOURCE_WD1_COLD_RST_BF_DEF (0x00000000)

///< WDOG1 Warm Reset (write to SysControl Register). Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_WD1_WARM_RST_BF_OFF ( 7)
#define SYS_CTRL_RST_SOURCE_WD1_WARM_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_WD1_WARM_RST_BF_MSK (0x00000080)
#define SYS_CTRL_RST_SOURCE_WD1_WARM_RST_BF_DEF (0x00000000)

///< Catastrophic overtemp (thermal trip) from DTS's. Write 1 to clear.
#define SYS_CTRL_RST_SOURCE_CATTRIP_RST_BF_OFF ( 8)
#define SYS_CTRL_RST_SOURCE_CATTRIP_RST_BF_WID ( 1)
#define SYS_CTRL_RST_SOURCE_CATTRIP_RST_BF_MSK (0x00000100)
#define SYS_CTRL_RST_SOURCE_CATTRIP_RST_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_CSTS_SNAPSHOT_H register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/CSTS_Snapshot_H
  * Coresight Timestamp Snapshot High
  */

typedef union {
  struct {
    uint32_t SNAPH : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_csts_snapshot_h_reg_t;

#define SYS_CTRL_CSTS_SNAPSHOT_H_DEFAULT (0x00000000U)
#define SYS_CTRL_CSTS_SNAPSHOT_H_RD_MASK (0xffffffffU)
#define SYS_CTRL_CSTS_SNAPSHOT_H_WR_MASK (0x00000000U)


#define SYS_CTRL_CSTS_SNAPSHOT_H_SNAPH_BF_OFF ( 0)
#define SYS_CTRL_CSTS_SNAPSHOT_H_SNAPH_BF_WID (32)
#define SYS_CTRL_CSTS_SNAPSHOT_H_SNAPH_BF_MSK (0xFFFFFFFF)
#define SYS_CTRL_CSTS_SNAPSHOT_H_SNAPH_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_CSTS_SNAPSHOT_L register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/CSTS_Snapshot_L
  * Coresight Timestamp Snapshot Low
  */

typedef union {
  struct {
    uint32_t SNAPL : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_csts_snapshot_l_reg_t;

#define SYS_CTRL_CSTS_SNAPSHOT_L_DEFAULT (0x00000000U)
#define SYS_CTRL_CSTS_SNAPSHOT_L_RD_MASK (0xffffffffU)
#define SYS_CTRL_CSTS_SNAPSHOT_L_WR_MASK (0x00000000U)


#define SYS_CTRL_CSTS_SNAPSHOT_L_SNAPL_BF_OFF ( 0)
#define SYS_CTRL_CSTS_SNAPSHOT_L_SNAPL_BF_WID (32)
#define SYS_CTRL_CSTS_SNAPSHOT_L_SNAPL_BF_MSK (0xFFFFFFFF)
#define SYS_CTRL_CSTS_SNAPSHOT_L_SNAPL_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_VADFSMSR register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/VADFSMSR
  * VAD (Vendor Authorized Debug) FSM Status Register
  */

typedef union {
  struct {
    uint32_t VAD_CH : 8;
    ///< Index to VAD choice.  Shows which line of the VAD table was selected
    ///< based on the current inputs.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VAD_STATE : 4;
    ///< Current state of SBB authentication FSM
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t EWA_FAIL_CNT : 3;
    ///< External Write Authorization (EWA) Fail Count for designated OEM fuses
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t EWA_FAIL_LIMIT : 1;
    ///< External Write Authorization (EWA) Fail Overlimit Maximum allowable
    ///< attempts for EWA have been reached. Only cleared by power-on reset.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t EWA_ENABLE : 1;
    ///< External Write Authorization (EWA) Enabled When 1, EWA has been authorized.
    ///< When 0, EWA has been de-authorized
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t JTAG_FAIL_CNT : 3;
    ///< JTAG Fail Count for external debug access
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t JTAG_FAIL_LIMIT : 1;
    ///< JTAG Debug Access Fail Overlimit Maximum allowable attempts for JTAG
    ///< debug access have been reached. Only cleared by power-on reset.
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t JTAG_ENABLE : 1;
    ///< JTAG Debug Access Enabled When 1, JTAG debug access has been authorized.
    ///< When 0, JTAG debug access has been de-authorized
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_vadfsmsr_reg_t;

#define SYS_CTRL_VADFSMSR_DEFAULT (0x00000000U)
#define SYS_CTRL_VADFSMSR_RD_MASK (0x1f1f0fffU)
#define SYS_CTRL_VADFSMSR_WR_MASK (0x00000000U)


///< Index to VAD choice.  Shows which line of the VAD table was selected
///< based on the current inputs.
#define SYS_CTRL_VADFSMSR_VAD_CH_BF_OFF ( 0)
#define SYS_CTRL_VADFSMSR_VAD_CH_BF_WID ( 8)
#define SYS_CTRL_VADFSMSR_VAD_CH_BF_MSK (0x000000FF)
#define SYS_CTRL_VADFSMSR_VAD_CH_BF_DEF (0x00000000)

///< Current state of SBB authentication FSM
#define SYS_CTRL_VADFSMSR_VAD_STATE_BF_OFF ( 8)
#define SYS_CTRL_VADFSMSR_VAD_STATE_BF_WID ( 4)
#define SYS_CTRL_VADFSMSR_VAD_STATE_BF_MSK (0x00000F00)
#define SYS_CTRL_VADFSMSR_VAD_STATE_BF_DEF (0x00000000)

///< External Write Authorization (EWA) Fail Count for designated OEM fuses
#define SYS_CTRL_VADFSMSR_EWA_FAIL_CNT_BF_OFF (16)
#define SYS_CTRL_VADFSMSR_EWA_FAIL_CNT_BF_WID ( 3)
#define SYS_CTRL_VADFSMSR_EWA_FAIL_CNT_BF_MSK (0x00070000)
#define SYS_CTRL_VADFSMSR_EWA_FAIL_CNT_BF_DEF (0x00000000)

///< External Write Authorization (EWA) Fail Overlimit Maximum allowable
///< attempts for EWA have been reached. Only cleared by power-on reset.
#define SYS_CTRL_VADFSMSR_EWA_FAIL_LIMIT_BF_OFF (19)
#define SYS_CTRL_VADFSMSR_EWA_FAIL_LIMIT_BF_WID ( 1)
#define SYS_CTRL_VADFSMSR_EWA_FAIL_LIMIT_BF_MSK (0x00080000)
#define SYS_CTRL_VADFSMSR_EWA_FAIL_LIMIT_BF_DEF (0x00000000)

///< External Write Authorization (EWA) Enabled When 1, EWA has been authorized.
///< When 0, EWA has been de-authorized
#define SYS_CTRL_VADFSMSR_EWA_EN_BF_OFF (20)
#define SYS_CTRL_VADFSMSR_EWA_EN_BF_WID ( 1)
#define SYS_CTRL_VADFSMSR_EWA_EN_BF_MSK (0x00100000)
#define SYS_CTRL_VADFSMSR_EWA_EN_BF_DEF (0x00000000)

///< JTAG Fail Count for external debug access
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_CNT_BF_OFF (24)
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_CNT_BF_WID ( 3)
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_CNT_BF_MSK (0x07000000)
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_CNT_BF_DEF (0x00000000)

///< JTAG Debug Access Fail Overlimit Maximum allowable attempts for JTAG
///< debug access have been reached. Only cleared by power-on reset.
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_LIMIT_BF_OFF (27)
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_LIMIT_BF_WID ( 1)
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_LIMIT_BF_MSK (0x08000000)
#define SYS_CTRL_VADFSMSR_JTAG_FAIL_LIMIT_BF_DEF (0x00000000)

///< JTAG Debug Access Enabled When 1, JTAG debug access has been authorized.
///< When 0, JTAG debug access has been de-authorized
#define SYS_CTRL_VADFSMSR_JTAG_EN_BF_OFF (28)
#define SYS_CTRL_VADFSMSR_JTAG_EN_BF_WID ( 1)
#define SYS_CTRL_VADFSMSR_JTAG_EN_BF_MSK (0x10000000)
#define SYS_CTRL_VADFSMSR_JTAG_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_FDISTOV_CSR register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/FDistOV_CSR
  * Fuse Distribution Override Control and Status
  */

typedef union {
  struct {
    uint32_t TRIM_OVDIS : 1;
    ///< Controls the override_done to the Memory/BGR Trim Serializer. 1= override
    ///< DISABLED 0= override ENABLED
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x0"
    uint32_t APB_OVDIS : 1;
    ///< Controls the override_done to the APB Client Interface. 1= override
    ///< DISABLED 0= override ENABLED
    ///< AccessType="RW/P" BitOffset="1" ResetValue="0x0"
    uint32_t SBB_OVDIS : 1;
    ///< Controls the override_done to the SBB/ECM Client Interface. 1= override
    ///< DISABLED 0= override ENABLED
    ///< AccessType="RW/P" BitOffset="2" ResetValue="0x0"
    uint32_t DWIRE_OVDIS : 1;
    ///< Controls the override_done to the Direct Wire Interface (including
    ///< the DFX Aggregator). 1= override DISABLED 0= override ENABLED
    ///< AccessType="RW/P" BitOffset="3" ResetValue="0x0"
    uint32_t DTS_OVDIS : 1;
    ///< Controls the override_done to the DTS Serializer. 1= override DISABLED
    ///< 0= override ENABLED
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t TRIM_OVDONE : 1;
    ///< Override status of the Memory/BGR Trim Serializer. 1=Override performed
    ///< at least once since last power-up reset 0=No override since last power-up
    ///< reset.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t APB_OVDONE : 1;
    ///< Override status of the APB Client Interface. 1=Override performed
    ///< at least once since last power-up reset 0=No override since last power-up
    ///< reset.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t SBB_OVDONE : 1;
    ///< Override status of the SBB/ECM Client Interface. 1=Override performed
    ///< at least once since last power-up reset 0=No override since last power-up
    ///< reset.
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t DWIRE_OVDONE : 1;
    ///< Override status of the Direct Wire Interface (including the DFX Aggregator).
    ///< 1=Override performed at least once since last power-up reset 0=No
    ///< override since last power-up reset.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t DTS_OVDONE : 1;
    ///< Override status of the DTS Serializer. 1=Override performed at least
    ///< once since last power-up reset 0=No override since last power-up reset.
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_fdistov_csr_reg_t;

#define SYS_CTRL_FDISTOV_CSR_DEFAULT (0x00000000U)
#define SYS_CTRL_FDISTOV_CSR_RD_MASK (0x001f001fU)
#define SYS_CTRL_FDISTOV_CSR_WR_MASK (0x0000001fU)


///< Controls the override_done to the Memory/BGR Trim Serializer. 1= override
///< DISABLED 0= override ENABLED
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDIS_BF_OFF ( 0)
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDIS_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDIS_BF_MSK (0x00000001)
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDIS_BF_DEF (0x00000000)

///< Controls the override_done to the APB Client Interface. 1= override
///< DISABLED 0= override ENABLED
#define SYS_CTRL_FDISTOV_CSR_APB_OVDIS_BF_OFF ( 1)
#define SYS_CTRL_FDISTOV_CSR_APB_OVDIS_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_APB_OVDIS_BF_MSK (0x00000002)
#define SYS_CTRL_FDISTOV_CSR_APB_OVDIS_BF_DEF (0x00000000)

///< Controls the override_done to the SBB/ECM Client Interface. 1= override
///< DISABLED 0= override ENABLED
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDIS_BF_OFF ( 2)
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDIS_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDIS_BF_MSK (0x00000004)
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDIS_BF_DEF (0x00000000)

///< Controls the override_done to the Direct Wire Interface (including
///< the DFX Aggregator). 1= override DISABLED 0= override ENABLED
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDIS_BF_OFF ( 3)
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDIS_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDIS_BF_MSK (0x00000008)
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDIS_BF_DEF (0x00000000)

///< Controls the override_done to the DTS Serializer. 1= override DISABLED
///< 0= override ENABLED
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDIS_BF_OFF ( 4)
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDIS_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDIS_BF_MSK (0x00000010)
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDIS_BF_DEF (0x00000000)

///< Override status of the Memory/BGR Trim Serializer. 1=Override performed
///< at least once since last power-up reset 0=No override since last power-up
///< reset.
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDONE_BF_OFF (16)
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDONE_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDONE_BF_MSK (0x00010000)
#define SYS_CTRL_FDISTOV_CSR_TRIM_OVDONE_BF_DEF (0x00000000)

///< Override status of the APB Client Interface. 1=Override performed
///< at least once since last power-up reset 0=No override since last power-up
///< reset.
#define SYS_CTRL_FDISTOV_CSR_APB_OVDONE_BF_OFF (17)
#define SYS_CTRL_FDISTOV_CSR_APB_OVDONE_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_APB_OVDONE_BF_MSK (0x00020000)
#define SYS_CTRL_FDISTOV_CSR_APB_OVDONE_BF_DEF (0x00000000)

///< Override status of the SBB/ECM Client Interface. 1=Override performed
///< at least once since last power-up reset 0=No override since last power-up
///< reset.
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDONE_BF_OFF (18)
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDONE_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDONE_BF_MSK (0x00040000)
#define SYS_CTRL_FDISTOV_CSR_SBB_OVDONE_BF_DEF (0x00000000)

///< Override status of the Direct Wire Interface (including the DFX Aggregator).
///< 1=Override performed at least once since last power-up reset 0=No
///< override since last power-up reset.
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDONE_BF_OFF (19)
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDONE_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDONE_BF_MSK (0x00080000)
#define SYS_CTRL_FDISTOV_CSR_DWIRE_OVDONE_BF_DEF (0x00000000)

///< Override status of the DTS Serializer. 1=Override performed at least
///< once since last power-up reset 0=No override since last power-up reset.
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDONE_BF_OFF (20)
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDONE_BF_WID ( 1)
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDONE_BF_MSK (0x00100000)
#define SYS_CTRL_FDISTOV_CSR_DTS_OVDONE_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_WDOG_MAP0_WDOG_CSR[2] register description at address offset 0x40
  *
  * Register default value:        0x00000010
  * Register full path in IP: sys_ctrl/reg/WDOG_MAP0/WDOG_CSR
  * Watchdog Control and Status
  */

typedef union {
  struct {
    uint32_t INTE : 1;
    ///< Watchdog Interrupt Enable     0 = NO interrupt signal generation (default).
    ///< 1 = Watchdog timeout will produce an interrupt signal (but only if
    ///< reset generation is disabled, e.g. RstE[1]=0).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXAE : 1;
    ///< Watchdog TxAlarm Enable     0 = NO TxAlarm signal generation (default).
    ///< 1 = Watchdog timeout will produce a Tx Alarm signal (but only if reset
    ///< generation is disabled, e.g. RstE[1]=0).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RSTE : 2;
    ///< Watchdog Reset Enable     0x = NO reset generated (default).     10
    ///< = Warm reset on timeout.     11 = Cold reset on timeout.
    ///< AccessType="RW/P" BitOffset="2" ResetValue="0x0"
    uint32_t HALT : 1;
    ///< Watchdog HALT     0 = Watchdog released to run.     1 = Watchdog halted
    ///< (default).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t LOAD : 1;
    ///< Watchdog LOAD.      Read:          0 = Not loading watchdog
    ///< 1 = Watchdog load in-progress.      Write:         0 = No action.
    ///< 1 = Generate LOAD pulse.
    ///< AccessType="RW/AC" BitOffset="5" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ENABLED : 1;
    ///< Watchdog ENABLED (read-only)     0 = Watchdog is disabled (default).
    ///< 1 = Watchdog is enabled.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TO : 1;
    ///< Watchdog Timeout Status      Read:         0 = Watchdog has not timed
    ///< out (default).         1 = Watchdog timed out.      Write:
    ///< 0 = No action.         1 = Clear timeout status.
    ///< AccessType="RW/1C/V/P" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_wdog_csr_reg_t;

#define SYS_CTRL_WDOG_CSR_DEFAULT (0x00000010U)
#define SYS_CTRL_WDOG_CSR_RD_MASK (0x0003003fU)
#define SYS_CTRL_WDOG_CSR_WR_MASK (0x0002003fU)


///< Watchdog Interrupt Enable     0 = NO interrupt signal generation (default).
///< 1 = Watchdog timeout will produce an interrupt signal (but only if
///< reset generation is disabled, e.g. RstE[1]=0).
#define SYS_CTRL_WDOG_CSR_INTE_BF_OFF ( 0)
#define SYS_CTRL_WDOG_CSR_INTE_BF_WID ( 1)
#define SYS_CTRL_WDOG_CSR_INTE_BF_MSK (0x00000001)
#define SYS_CTRL_WDOG_CSR_INTE_BF_DEF (0x00000000)

///< Watchdog TxAlarm Enable     0 = NO TxAlarm signal generation (default).
///< 1 = Watchdog timeout will produce a Tx Alarm signal (but only if reset
///< generation is disabled, e.g. RstE[1]=0).
#define SYS_CTRL_WDOG_CSR_TXAE_BF_OFF ( 1)
#define SYS_CTRL_WDOG_CSR_TXAE_BF_WID ( 1)
#define SYS_CTRL_WDOG_CSR_TXAE_BF_MSK (0x00000002)
#define SYS_CTRL_WDOG_CSR_TXAE_BF_DEF (0x00000000)

///< Watchdog Reset Enable     0x = NO reset generated (default).     10
///< = Warm reset on timeout.     11 = Cold reset on timeout.
#define SYS_CTRL_WDOG_CSR_RSTE_BF_OFF ( 2)
#define SYS_CTRL_WDOG_CSR_RSTE_BF_WID ( 2)
#define SYS_CTRL_WDOG_CSR_RSTE_BF_MSK (0x0000000C)
#define SYS_CTRL_WDOG_CSR_RSTE_BF_DEF (0x00000000)

///< Watchdog HALT     0 = Watchdog released to run.     1 = Watchdog halted
///< (default).
#define SYS_CTRL_WDOG_CSR_HALT_BF_OFF ( 4)
#define SYS_CTRL_WDOG_CSR_HALT_BF_WID ( 1)
#define SYS_CTRL_WDOG_CSR_HALT_BF_MSK (0x00000010)
#define SYS_CTRL_WDOG_CSR_HALT_BF_DEF (0x00000010)

///< Watchdog LOAD.      Read:          0 = Not loading watchdog
///< 1 = Watchdog load in-progress.      Write:         0 = No action.
///< 1 = Generate LOAD pulse.
#define SYS_CTRL_WDOG_CSR_LOAD_BF_OFF ( 5)
#define SYS_CTRL_WDOG_CSR_LOAD_BF_WID ( 1)
#define SYS_CTRL_WDOG_CSR_LOAD_BF_MSK (0x00000020)
#define SYS_CTRL_WDOG_CSR_LOAD_BF_DEF (0x00000000)

///< Watchdog ENABLED (read-only)     0 = Watchdog is disabled (default).
///< 1 = Watchdog is enabled.
#define SYS_CTRL_WDOG_CSR_END_BF_OFF (16)
#define SYS_CTRL_WDOG_CSR_END_BF_WID ( 1)
#define SYS_CTRL_WDOG_CSR_END_BF_MSK (0x00010000)
#define SYS_CTRL_WDOG_CSR_END_BF_DEF (0x00000000)

///< Watchdog Timeout Status      Read:         0 = Watchdog has not timed
///< out (default).         1 = Watchdog timed out.      Write:
///< 0 = No action.         1 = Clear timeout status.
#define SYS_CTRL_WDOG_CSR_TO_BF_OFF (17)
#define SYS_CTRL_WDOG_CSR_TO_BF_WID ( 1)
#define SYS_CTRL_WDOG_CSR_TO_BF_MSK (0x00020000)
#define SYS_CTRL_WDOG_CSR_TO_BF_DEF (0x00000000)
#define SYS_CTRL_WDOG_CSR_ARR_SZ0 (2)
#define SYS_CTRL_WDOG_CSR_ARRAY_STRIDE0 (0x0010)


/** @brief SYS_CTRL_REG_WDOG_MAP0_WDOG_IVAL[2] register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/WDOG_MAP0/WDOG_IVAL
  * Watchdog Interval Register
  */

typedef union {
  struct {
    uint32_t ICOUNT : 11;
    ///< Watchdog Initial Interval in millieseconds.  Default 0x000.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t COUT : 12;
    ///< Current WDOG Count - Current Value of Watchdog Counter (0.5 ms) -
    ///< only when halted.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
    uint32_t CSNAP : 1;
    ///< Watchdog Snapshot control.      Read:         0 = no snapshot activitiy
    ///< 1 = snapshot in progress      Write:         0 = no effect
    ///< 1= Capture current value of watchdog count in COut field
    ///< AccessType="RW/AC" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_wdog_ival_reg_t;

#define SYS_CTRL_WDOG_IVAL_DEFAULT (0x00000000U)
#define SYS_CTRL_WDOG_IVAL_RD_MASK (0x8fff07ffU)
#define SYS_CTRL_WDOG_IVAL_WR_MASK (0x800007ffU)


///< Watchdog Initial Interval in millieseconds.  Default 0x000.
#define SYS_CTRL_WDOG_IVAL_ICNT_BF_OFF ( 0)
#define SYS_CTRL_WDOG_IVAL_ICNT_BF_WID (11)
#define SYS_CTRL_WDOG_IVAL_ICNT_BF_MSK (0x000007FF)
#define SYS_CTRL_WDOG_IVAL_ICNT_BF_DEF (0x00000000)

///< Current WDOG Count - Current Value of Watchdog Counter (0.5 ms) -
///< only when halted.
#define SYS_CTRL_WDOG_IVAL_COUT_BF_OFF (16)
#define SYS_CTRL_WDOG_IVAL_COUT_BF_WID (12)
#define SYS_CTRL_WDOG_IVAL_COUT_BF_MSK (0x0FFF0000)
#define SYS_CTRL_WDOG_IVAL_COUT_BF_DEF (0x00000000)

///< Watchdog Snapshot control.      Read:         0 = no snapshot activitiy
///< 1 = snapshot in progress      Write:         0 = no effect
///< 1= Capture current value of watchdog count in COut field
#define SYS_CTRL_WDOG_IVAL_CSNAP_BF_OFF (31)
#define SYS_CTRL_WDOG_IVAL_CSNAP_BF_WID ( 1)
#define SYS_CTRL_WDOG_IVAL_CSNAP_BF_MSK (0x80000000)
#define SYS_CTRL_WDOG_IVAL_CSNAP_BF_DEF (0x00000000)
#define SYS_CTRL_WDOG_IVAL_ARR_SZ0 (2)
#define SYS_CTRL_WDOG_IVAL_ARRAY_STRIDE0 (0x0010)


/** @brief SYS_CTRL_REG_WDOG_MAP0_WDOG_KA[2] register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/WDOG_MAP0/WDOG_KA
  * Watchdog Keep Alive Register
  */

typedef union {
  struct {
    uint32_t KA : 1;
    ///< Watchdog Keep Alive.  Resets the WDOG count back to the Initial Interval
    ///< (ICOUNT) to avoid timeout.      Write 1 to keep WDOG alive, auto clears.
    ///< Write 0 has no effect.      Read has no effect or meaning, returns
    ///< current state of register.
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_wdog_ka_reg_t;

#define SYS_CTRL_WDOG_KA_DEFAULT (0x00000000U)
#define SYS_CTRL_WDOG_KA_RD_MASK (0x00000001U)
#define SYS_CTRL_WDOG_KA_WR_MASK (0x00000001U)


///< Watchdog Keep Alive.  Resets the WDOG count back to the Initial Interval
///< (ICOUNT) to avoid timeout.      Write 1 to keep WDOG alive, auto clears.
///< Write 0 has no effect.      Read has no effect or meaning, returns
///< current state of register.
#define SYS_CTRL_WDOG_KA_BF_OFF ( 0)
#define SYS_CTRL_WDOG_KA_BF_WID ( 1)
#define SYS_CTRL_WDOG_KA_BF_MSK (0x00000001)
#define SYS_CTRL_WDOG_KA_BF_DEF (0x00000000)
#define SYS_CTRL_WDOG_KA_ARR_SZ0 (2)
#define SYS_CTRL_WDOG_KA_ARRAY_STRIDE0 (0x0010)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_CONTROL_STATUS register description at address offset 0x60
  *
  * Register default value:        0x00000008
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_Control_Status
  * SBB CSR
  */

typedef union {
  struct {
    uint32_t CLRMEM : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t USEDBGS : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TRNGTM : 1;
    ///< TRNG Test Mode - when set to '1' and TRNGTMV=1, the SBB TRNG will
    ///< enter FIPS test mode upon reset exit.  If '0' (with TRNGTMV=1), SBB
    ///< TRNG will enter 'mission' (normal) mode.  If TRNGTMV=0 when SBB is
    ///< released from reset, SBB will hang waiting for the TRNG to boot. This
    ///< bit and TRNGTMV can only be set under RED and must be set before SBB
    ///< and SBB_NS resets are released.  This can be done while the boot FSM
    ///< is stopped using the Boot_Halt input.
    ///< AccessType="RW/L" BitOffset="2" ResetValue="0x0"
    uint32_t TRNGTMV : 1;
    ///< TRNG Test Mode Valid- qualifies the TRNGTM bit. If TRNGTMV=0 when
    ///< SBB is released from reset, SBB will hang waiting for the TRNG to
    ///< boot. This bit and TRNGTMV can only be set under RED and must be set
    ///< before SBB and SBB_NS resets are released.  This can be done while
    ///< the boot FSM is stopped using the Boot_Halt input.
    ///< AccessType="RW/L" BitOffset="3" ResetValue="0x1"
    uint32_t RANDRQ : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SBB_CSPARE : 11;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t MCLRD : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t MCDBG : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t TTRSLT : 2;
    ///< ---
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t TTRSLTV : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t TTRDV : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t SBB_SSPARE : 10;
    ///< ---
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_ctrl_stat_reg_t;

#define SYS_CTRL_SBB_CTRL_STAT_DEFAULT (0x00000008U)
#define SYS_CTRL_SBB_CTRL_STAT_RD_MASK (0xffffffffU)
#define SYS_CTRL_SBB_CTRL_STAT_WR_MASK (0x0000ffffU)


#define SYS_CTRL_SBB_CTRL_STAT_CLRMEM_BF_OFF ( 0)
#define SYS_CTRL_SBB_CTRL_STAT_CLRMEM_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_CLRMEM_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_CTRL_STAT_CLRMEM_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_USEDBGS_BF_OFF ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_USEDBGS_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_USEDBGS_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_CTRL_STAT_USEDBGS_BF_DEF (0x00000000)

///< TRNG Test Mode - when set to '1' and TRNGTMV=1, the SBB TRNG will
///< enter FIPS test mode upon reset exit.  If '0' (with TRNGTMV=1), SBB
///< TRNG will enter 'mission' (normal) mode.  If TRNGTMV=0 when SBB is
///< released from reset, SBB will hang waiting for the TRNG to boot. This
///< bit and TRNGTMV can only be set under RED and must be set before SBB
///< and SBB_NS resets are released.  This can be done while the boot FSM
///< is stopped using the Boot_Halt input.
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTM_BF_OFF ( 2)
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTM_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTM_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTM_BF_DEF (0x00000000)

///< TRNG Test Mode Valid- qualifies the TRNGTM bit. If TRNGTMV=0 when
///< SBB is released from reset, SBB will hang waiting for the TRNG to
///< boot. This bit and TRNGTMV can only be set under RED and must be set
///< before SBB and SBB_NS resets are released.  This can be done while
///< the boot FSM is stopped using the Boot_Halt input.
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTMV_BF_OFF ( 3)
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTMV_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTMV_BF_MSK (0x00000008)
#define SYS_CTRL_SBB_CTRL_STAT_TRNGTMV_BF_DEF (0x00000008)

#define SYS_CTRL_SBB_CTRL_STAT_RANDRQ_BF_OFF ( 4)
#define SYS_CTRL_SBB_CTRL_STAT_RANDRQ_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_RANDRQ_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_CTRL_STAT_RANDRQ_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_SBB_CSPARE_BF_OFF ( 5)
#define SYS_CTRL_SBB_CTRL_STAT_SBB_CSPARE_BF_WID (11)
#define SYS_CTRL_SBB_CTRL_STAT_SBB_CSPARE_BF_MSK (0x0000FFE0)
#define SYS_CTRL_SBB_CTRL_STAT_SBB_CSPARE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_MCLRD_BF_OFF (16)
#define SYS_CTRL_SBB_CTRL_STAT_MCLRD_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_MCLRD_BF_MSK (0x00010000)
#define SYS_CTRL_SBB_CTRL_STAT_MCLRD_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_MCDBG_BF_OFF (17)
#define SYS_CTRL_SBB_CTRL_STAT_MCDBG_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_MCDBG_BF_MSK (0x00020000)
#define SYS_CTRL_SBB_CTRL_STAT_MCDBG_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_TTRSLT_BF_OFF (18)
#define SYS_CTRL_SBB_CTRL_STAT_TTRSLT_BF_WID ( 2)
#define SYS_CTRL_SBB_CTRL_STAT_TTRSLT_BF_MSK (0x000C0000)
#define SYS_CTRL_SBB_CTRL_STAT_TTRSLT_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_TTRSLTV_BF_OFF (20)
#define SYS_CTRL_SBB_CTRL_STAT_TTRSLTV_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_TTRSLTV_BF_MSK (0x00100000)
#define SYS_CTRL_SBB_CTRL_STAT_TTRSLTV_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_TTRDV_BF_OFF (21)
#define SYS_CTRL_SBB_CTRL_STAT_TTRDV_BF_WID ( 1)
#define SYS_CTRL_SBB_CTRL_STAT_TTRDV_BF_MSK (0x00200000)
#define SYS_CTRL_SBB_CTRL_STAT_TTRDV_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_CTRL_STAT_SBB_SSPARE_BF_OFF (22)
#define SYS_CTRL_SBB_CTRL_STAT_SBB_SSPARE_BF_WID (10)
#define SYS_CTRL_SBB_CTRL_STAT_SBB_SSPARE_BF_MSK (0xFFC00000)
#define SYS_CTRL_SBB_CTRL_STAT_SBB_SSPARE_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_COMMON_CONTROL register description at address offset 0x64
  *
  * Register default value:        0x0000000E
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_Common_Control
  * SBB Memory ECC Common Control
  */

typedef union {
  struct {
    uint32_t COMMON_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t COMMON_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/L" BitOffset="1" ResetValue="0x1"
    uint32_t COMMON_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/L" BitOffset="2" ResetValue="0x1"
    uint32_t COMMON_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t COMMON_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="4" ResetValue="0x0"
    uint32_t COMMON_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t COMMON_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="6" ResetValue="0x0"
    uint32_t SPARE0 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t ECC_EINFO_SEL : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ctrl_reg_t;

#define SYS_CTRL_SBB_MEM_CTRL_DEFAULT (0x0000000eU)
#define SYS_CTRL_SBB_MEM_CTRL_RD_MASK (0x00000fffU)
#define SYS_CTRL_SBB_MEM_CTRL_WR_MASK (0x00000f7fU)


#define SYS_CTRL_SBB_MEM_CTRL_INT_CLR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_CTRL_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_INT_CLR_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_MEM_CTRL_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_CTRL_ECC_GEN_EN_BF_OFF ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_GEN_EN_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_GEN_EN_BF_DEF (0x00000002)

#define SYS_CTRL_SBB_MEM_CTRL_ECC_CHK_EN_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_CHK_EN_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_CHK_EN_BF_DEF (0x00000004)

#define SYS_CTRL_SBB_MEM_CTRL_REFRESH_EN_BF_OFF ( 3)
#define SYS_CTRL_SBB_MEM_CTRL_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_REFRESH_EN_BF_MSK (0x00000008)
#define SYS_CTRL_SBB_MEM_CTRL_REFRESH_EN_BF_DEF (0x00000008)

#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_FORCE_EN_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_FORCE_EN_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_DBE_SBE_N_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_DBE_SBE_N_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_CTRL_CNT_CLR_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_CTRL_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_CNT_CLR_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_CTRL_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_CTRL_SPARE0_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_CTRL_SPARE0_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_CTRL_SPARE0_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_CTRL_SPARE0_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_CTRL_ECC_EINFO_SEL_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_EINFO_SEL_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_EINFO_SEL_BF_MSK (0x00000F00)
#define SYS_CTRL_SBB_MEM_CTRL_ECC_EINFO_SEL_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_CONTROL0 register description at address offset 0x68
  *
  * Register default value:        0x06060404
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Control0
  * SBB Memory ECC Control 0
  */

typedef union {
  struct {
    uint32_t FR_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t FR_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="2" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t FR_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t FR_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t FR_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SPARE0 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t CM_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CM_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="10" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CM_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t CM_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t CM_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t SPARE1 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t EDFM_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t EDFM_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="17" ResetValue="0x1"
    uint32_t EDFM_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="18" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t EDFM_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="20" ResetValue="0x0"
    uint32_t EDFM_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t EDFM_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t SPARE2 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="23" ResetValue="0x0"
    uint32_t FIM_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t FIM_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="25" ResetValue="0x1"
    uint32_t FIM_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="26" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t FIM_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t FIM_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="29" ResetValue="0x0"
    uint32_t FIM_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
    uint32_t SPARE3 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_ctrl0_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_DEFAULT (0x06060404U)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_RD_MASK (0xf7f7f5f5U)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_WR_MASK (0x77777575U)


#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_INT_CLR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_INT_CLR_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_CHK_EN_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_CHK_EN_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_CHK_EN_BF_DEF (0x00000004)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_FORCE_EN_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_FORCE_EN_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_DBE_SBE_N_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_DBE_SBE_N_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_CNT_CLR_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_CNT_CLR_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FR_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE0_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE0_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE0_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE0_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_INT_CLR_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_INT_CLR_BF_MSK (0x00000100)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_CHK_EN_BF_OFF (10)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_CHK_EN_BF_MSK (0x00000400)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_CHK_EN_BF_DEF (0x00000400)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_FORCE_EN_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_FORCE_EN_BF_MSK (0x00001000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_DBE_SBE_N_BF_OFF (13)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_DBE_SBE_N_BF_MSK (0x00002000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_CNT_CLR_BF_OFF (14)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_CNT_CLR_BF_MSK (0x00004000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_CM_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE1_BF_OFF (15)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE1_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE1_BF_MSK (0x00008000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE1_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_INT_CLR_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_INT_CLR_BF_MSK (0x00010000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_GEN_EN_BF_OFF (17)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_GEN_EN_BF_MSK (0x00020000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_GEN_EN_BF_DEF (0x00020000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_CHK_EN_BF_OFF (18)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_CHK_EN_BF_MSK (0x00040000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_CHK_EN_BF_DEF (0x00040000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_FORCE_EN_BF_OFF (20)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_FORCE_EN_BF_MSK (0x00100000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_DBE_SBE_N_BF_OFF (21)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_DBE_SBE_N_BF_MSK (0x00200000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_CNT_CLR_BF_OFF (22)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_CNT_CLR_BF_MSK (0x00400000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_EDFM_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE2_BF_OFF (23)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE2_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE2_BF_MSK (0x00800000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE2_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_INT_CLR_BF_OFF (24)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_INT_CLR_BF_MSK (0x01000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_GEN_EN_BF_OFF (25)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_GEN_EN_BF_MSK (0x02000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_GEN_EN_BF_DEF (0x02000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_CHK_EN_BF_OFF (26)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_CHK_EN_BF_MSK (0x04000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_CHK_EN_BF_DEF (0x04000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_FORCE_EN_BF_OFF (28)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_FORCE_EN_BF_MSK (0x10000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_DBE_SBE_N_BF_OFF (29)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_DBE_SBE_N_BF_MSK (0x20000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_CNT_CLR_BF_OFF (30)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_CNT_CLR_BF_MSK (0x40000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_FIM_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE3_BF_OFF (31)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE3_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE3_BF_MSK (0x80000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_SPARE3_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_CONTROL1 register description at address offset 0x6c
  *
  * Register default value:        0x0E0E0606
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Control1
  * SBB Memory ECC Control 1
  */

typedef union {
  struct {
    uint32_t FOM_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FOM_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="1" ResetValue="0x1"
    uint32_t FOM_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="2" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t FOM_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t FOM_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t FOM_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SPARE0 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t FSM_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FSM_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="9" ResetValue="0x1"
    uint32_t FSM_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="10" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t FSM_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t FSM_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t FSM_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t SPARE1 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t MR0_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t MR0_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="17" ResetValue="0x1"
    uint32_t MR0_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="18" ResetValue="0x1"
    uint32_t MR0_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x1"
    uint32_t MR0_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="20" ResetValue="0x0"
    uint32_t MR0_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t MR0_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t SPARE2 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="23" ResetValue="0x0"
    uint32_t MR1_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t MR1_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="25" ResetValue="0x1"
    uint32_t MR1_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="26" ResetValue="0x1"
    uint32_t MR1_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="27" ResetValue="0x1"
    uint32_t MR1_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t MR1_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="29" ResetValue="0x0"
    uint32_t MR1_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
    uint32_t SPARE3 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_ctrl1_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_DEFAULT (0x0e0e0606U)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_RD_MASK (0xfffff7f7U)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_WR_MASK (0x7f7f7777U)


#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_INT_CLR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_INT_CLR_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_GEN_EN_BF_OFF ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_GEN_EN_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_GEN_EN_BF_DEF (0x00000002)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_CHK_EN_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_CHK_EN_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_CHK_EN_BF_DEF (0x00000004)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_FORCE_EN_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_FORCE_EN_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_DBE_SBE_N_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_DBE_SBE_N_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_CNT_CLR_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_CNT_CLR_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FOM_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE0_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE0_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE0_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE0_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_INT_CLR_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_INT_CLR_BF_MSK (0x00000100)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_GEN_EN_BF_OFF ( 9)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_GEN_EN_BF_MSK (0x00000200)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_GEN_EN_BF_DEF (0x00000200)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_CHK_EN_BF_OFF (10)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_CHK_EN_BF_MSK (0x00000400)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_CHK_EN_BF_DEF (0x00000400)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_FORCE_EN_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_FORCE_EN_BF_MSK (0x00001000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_DBE_SBE_N_BF_OFF (13)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_DBE_SBE_N_BF_MSK (0x00002000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_CNT_CLR_BF_OFF (14)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_CNT_CLR_BF_MSK (0x00004000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_FSM_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE1_BF_OFF (15)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE1_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE1_BF_MSK (0x00008000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE1_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_INT_CLR_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_INT_CLR_BF_MSK (0x00010000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_GEN_EN_BF_OFF (17)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_GEN_EN_BF_MSK (0x00020000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_GEN_EN_BF_DEF (0x00020000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_CHK_EN_BF_OFF (18)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_CHK_EN_BF_MSK (0x00040000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_CHK_EN_BF_DEF (0x00040000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_REFRESH_EN_BF_OFF (19)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_REFRESH_EN_BF_MSK (0x00080000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_REFRESH_EN_BF_DEF (0x00080000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_FORCE_EN_BF_OFF (20)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_FORCE_EN_BF_MSK (0x00100000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_DBE_SBE_N_BF_OFF (21)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_DBE_SBE_N_BF_MSK (0x00200000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_CNT_CLR_BF_OFF (22)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_CNT_CLR_BF_MSK (0x00400000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR0_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE2_BF_OFF (23)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE2_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE2_BF_MSK (0x00800000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE2_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_INT_CLR_BF_OFF (24)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_INT_CLR_BF_MSK (0x01000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_GEN_EN_BF_OFF (25)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_GEN_EN_BF_MSK (0x02000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_GEN_EN_BF_DEF (0x02000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_CHK_EN_BF_OFF (26)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_CHK_EN_BF_MSK (0x04000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_CHK_EN_BF_DEF (0x04000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_REFRESH_EN_BF_OFF (27)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_REFRESH_EN_BF_MSK (0x08000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_REFRESH_EN_BF_DEF (0x08000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_FORCE_EN_BF_OFF (28)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_FORCE_EN_BF_MSK (0x10000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_DBE_SBE_N_BF_OFF (29)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_DBE_SBE_N_BF_MSK (0x20000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_CNT_CLR_BF_OFF (30)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_CNT_CLR_BF_MSK (0x40000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_MR1_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE3_BF_OFF (31)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE3_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE3_BF_MSK (0x80000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_SPARE3_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_CONTROL2 register description at address offset 0x70
  *
  * Register default value:        0x0E0E0E0E
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Control2
  * SBB Memory ECC Control 2
  */

typedef union {
  struct {
    uint32_t PR0_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t PR0_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="1" ResetValue="0x1"
    uint32_t PR0_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="2" ResetValue="0x1"
    uint32_t PR0_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x1"
    uint32_t PR0_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t PR0_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t PR0_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SPARE0 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t PR1_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t PR1_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="9" ResetValue="0x1"
    uint32_t PR1_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="10" ResetValue="0x1"
    uint32_t PR1_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x1"
    uint32_t PR1_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t PR1_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t PR1_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t SPARE1 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t SR0_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t SR0_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="17" ResetValue="0x1"
    uint32_t SR0_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="18" ResetValue="0x1"
    uint32_t SR0_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x1"
    uint32_t SR0_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="20" ResetValue="0x0"
    uint32_t SR0_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t SR0_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t SPARE2 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="23" ResetValue="0x0"
    uint32_t SR1_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t SR1_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="25" ResetValue="0x1"
    uint32_t SR1_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="26" ResetValue="0x1"
    uint32_t SR1_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="27" ResetValue="0x1"
    uint32_t SR1_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t SR1_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="29" ResetValue="0x0"
    uint32_t SR1_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
    uint32_t SPARE3 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_ctrl2_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_DEFAULT (0x0e0e0e0eU)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_RD_MASK (0xffffffffU)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_WR_MASK (0x7f7f7f7fU)


#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_INT_CLR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_INT_CLR_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_GEN_EN_BF_OFF ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_GEN_EN_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_GEN_EN_BF_DEF (0x00000002)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_CHK_EN_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_CHK_EN_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_CHK_EN_BF_DEF (0x00000004)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_REFRESH_EN_BF_OFF ( 3)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_REFRESH_EN_BF_MSK (0x00000008)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_REFRESH_EN_BF_DEF (0x00000008)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_FORCE_EN_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_FORCE_EN_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_DBE_SBE_N_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_DBE_SBE_N_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_CNT_CLR_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_CNT_CLR_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR0_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE0_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE0_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE0_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE0_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_INT_CLR_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_INT_CLR_BF_MSK (0x00000100)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_GEN_EN_BF_OFF ( 9)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_GEN_EN_BF_MSK (0x00000200)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_GEN_EN_BF_DEF (0x00000200)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_CHK_EN_BF_OFF (10)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_CHK_EN_BF_MSK (0x00000400)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_CHK_EN_BF_DEF (0x00000400)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_REFRESH_EN_BF_OFF (11)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_REFRESH_EN_BF_MSK (0x00000800)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_REFRESH_EN_BF_DEF (0x00000800)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_FORCE_EN_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_FORCE_EN_BF_MSK (0x00001000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_DBE_SBE_N_BF_OFF (13)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_DBE_SBE_N_BF_MSK (0x00002000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_CNT_CLR_BF_OFF (14)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_CNT_CLR_BF_MSK (0x00004000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_PR1_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE1_BF_OFF (15)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE1_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE1_BF_MSK (0x00008000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE1_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_INT_CLR_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_INT_CLR_BF_MSK (0x00010000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_GEN_EN_BF_OFF (17)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_GEN_EN_BF_MSK (0x00020000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_GEN_EN_BF_DEF (0x00020000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_CHK_EN_BF_OFF (18)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_CHK_EN_BF_MSK (0x00040000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_CHK_EN_BF_DEF (0x00040000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_REFRESH_EN_BF_OFF (19)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_REFRESH_EN_BF_MSK (0x00080000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_REFRESH_EN_BF_DEF (0x00080000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_FORCE_EN_BF_OFF (20)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_FORCE_EN_BF_MSK (0x00100000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_DBE_SBE_N_BF_OFF (21)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_DBE_SBE_N_BF_MSK (0x00200000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_CNT_CLR_BF_OFF (22)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_CNT_CLR_BF_MSK (0x00400000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR0_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE2_BF_OFF (23)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE2_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE2_BF_MSK (0x00800000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE2_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_INT_CLR_BF_OFF (24)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_INT_CLR_BF_MSK (0x01000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_GEN_EN_BF_OFF (25)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_GEN_EN_BF_MSK (0x02000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_GEN_EN_BF_DEF (0x02000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_CHK_EN_BF_OFF (26)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_CHK_EN_BF_MSK (0x04000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_CHK_EN_BF_DEF (0x04000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_REFRESH_EN_BF_OFF (27)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_REFRESH_EN_BF_MSK (0x08000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_REFRESH_EN_BF_DEF (0x08000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_FORCE_EN_BF_OFF (28)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_FORCE_EN_BF_MSK (0x10000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_DBE_SBE_N_BF_OFF (29)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_DBE_SBE_N_BF_MSK (0x20000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_CNT_CLR_BF_OFF (30)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_CNT_CLR_BF_MSK (0x40000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SR1_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE3_BF_OFF (31)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE3_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE3_BF_MSK (0x80000000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_SPARE3_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_CONTROL3 register description at address offset 0x74
  *
  * Register default value:        0x00000E0E
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Control3
  * SBB Memory ECC Control 3
  */

typedef union {
  struct {
    uint32_t SNZR0_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t SNZR0_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="1" ResetValue="0x1"
    uint32_t SNZR0_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="2" ResetValue="0x1"
    uint32_t SNZR0_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x1"
    uint32_t SNZR0_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t SNZR0_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t SNZR0_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SPARE0 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t SNZR1_INT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t SNZR1_ECC_GEN_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="9" ResetValue="0x1"
    uint32_t SNZR1_ECC_CHK_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="10" ResetValue="0x1"
    uint32_t SNZR1_REFRESH_EN : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x1"
    uint32_t SNZR1_ECC_ERR_FORCE_EN : 1;
    ///< ---
    ///< AccessType="RW/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t SNZR1_ECC_ERR_DBE_SBE_N : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t SNZR1_CNT_CLR : 1;
    ///< ---
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t SPARE1 : 1;
    ///< ---
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_ctrl3_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_DEFAULT (0x00000e0eU)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_RD_MASK (0x0000ffffU)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_WR_MASK (0x00007f7fU)


#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_INT_CLR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_INT_CLR_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_GEN_EN_BF_OFF ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_GEN_EN_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_GEN_EN_BF_DEF (0x00000002)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_CHK_EN_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_CHK_EN_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_CHK_EN_BF_DEF (0x00000004)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_REFRESH_EN_BF_OFF ( 3)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_REFRESH_EN_BF_MSK (0x00000008)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_REFRESH_EN_BF_DEF (0x00000008)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_FORCE_EN_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_FORCE_EN_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_DBE_SBE_N_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_DBE_SBE_N_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_CNT_CLR_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_CNT_CLR_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR0_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE0_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE0_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE0_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE0_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_INT_CLR_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_INT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_INT_CLR_BF_MSK (0x00000100)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_INT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_GEN_EN_BF_OFF ( 9)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_GEN_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_GEN_EN_BF_MSK (0x00000200)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_GEN_EN_BF_DEF (0x00000200)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_CHK_EN_BF_OFF (10)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_CHK_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_CHK_EN_BF_MSK (0x00000400)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_CHK_EN_BF_DEF (0x00000400)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_REFRESH_EN_BF_OFF (11)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_REFRESH_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_REFRESH_EN_BF_MSK (0x00000800)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_REFRESH_EN_BF_DEF (0x00000800)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_FORCE_EN_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_FORCE_EN_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_FORCE_EN_BF_MSK (0x00001000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_FORCE_EN_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_DBE_SBE_N_BF_OFF (13)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_DBE_SBE_N_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_DBE_SBE_N_BF_MSK (0x00002000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_ECC_ERR_DBE_SBE_N_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_CNT_CLR_BF_OFF (14)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_CNT_CLR_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_CNT_CLR_BF_MSK (0x00004000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SNZR1_CNT_CLR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE1_BF_OFF (15)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE1_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE1_BF_MSK (0x00008000)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_SPARE1_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_STATUS0 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Status0
  * SBB Memory ECC Status 0
  */

typedef union {
  struct {
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t FR_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t FR_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t FR_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t CM_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CM_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t CM_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t EDFM_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t EDFM_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t EDFM_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t FIM_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t FIM_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t FIM_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t FOM_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t FOM_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t FOM_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t FSM_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t FSM_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t FSM_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t MR0_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t MR0_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t MR0_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t MR0_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t MR1_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t MR1_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t MR1_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t MR1_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_stat0_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_STAT0_DEFAULT (0x00000000U)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_RD_MASK (0xffeeeeeeU)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_WR_MASK (0x00000000U)


#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_SBE_BF_OFF ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_SBE_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_DBE_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_DBE_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_CNT_OVRF_BF_OFF ( 3)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_CNT_OVRF_BF_MSK (0x00000008)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FR_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_SBE_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_SBE_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_DBE_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_DBE_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_CNT_OVRF_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_CNT_OVRF_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_CM_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_SBE_BF_OFF ( 9)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_SBE_BF_MSK (0x00000200)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_DBE_BF_OFF (10)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_DBE_BF_MSK (0x00000400)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_CNT_OVRF_BF_OFF (11)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_CNT_OVRF_BF_MSK (0x00000800)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_EDFM_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_SBE_BF_OFF (13)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_SBE_BF_MSK (0x00002000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_DBE_BF_OFF (14)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_DBE_BF_MSK (0x00004000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_CNT_OVRF_BF_OFF (15)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_CNT_OVRF_BF_MSK (0x00008000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FIM_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_SBE_BF_OFF (17)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_SBE_BF_MSK (0x00020000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_DBE_BF_OFF (18)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_DBE_BF_MSK (0x00040000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_CNT_OVRF_BF_OFF (19)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_CNT_OVRF_BF_MSK (0x00080000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FOM_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_SBE_BF_OFF (21)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_SBE_BF_MSK (0x00200000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_DBE_BF_OFF (22)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_DBE_BF_MSK (0x00400000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_CNT_OVRF_BF_OFF (23)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_CNT_OVRF_BF_MSK (0x00800000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_FSM_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_REFR_IP_BF_OFF (24)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_REFR_IP_BF_MSK (0x01000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_SBE_BF_OFF (25)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_SBE_BF_MSK (0x02000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_DBE_BF_OFF (26)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_DBE_BF_MSK (0x04000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_CNT_OVRF_BF_OFF (27)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_CNT_OVRF_BF_MSK (0x08000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR0_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_REFR_IP_BF_OFF (28)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_REFR_IP_BF_MSK (0x10000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_SBE_BF_OFF (29)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_SBE_BF_MSK (0x20000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_DBE_BF_OFF (30)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_DBE_BF_MSK (0x40000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_CNT_OVRF_BF_OFF (31)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_CNT_OVRF_BF_MSK (0x80000000)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_MR1_CNT_OVRF_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_STATUS1 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Status1
  * SBB Memory ECC Status 1
  */

typedef union {
  struct {
    uint32_t PR0_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PR0_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PR0_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PR0_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PR1_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PR1_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PR1_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t PR1_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t SR0_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t SR0_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t SR0_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t SR0_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t SR1_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t SR1_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t SR1_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t SR1_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t SNZR0_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t SNZR0_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t SNZR0_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t SNZR0_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t SNZR1_REFR_IP : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t SNZR1_SBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t SNZR1_DBE : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t SNZR1_CNT_OVRF : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_stat1_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_STAT1_DEFAULT (0x00000000U)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_RD_MASK (0x00ffffffU)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_WR_MASK (0x00000000U)


#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_REFR_IP_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_REFR_IP_BF_MSK (0x00000001)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_SBE_BF_OFF ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_SBE_BF_MSK (0x00000002)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_DBE_BF_OFF ( 2)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_DBE_BF_MSK (0x00000004)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_CNT_OVRF_BF_OFF ( 3)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_CNT_OVRF_BF_MSK (0x00000008)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR0_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_REFR_IP_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_REFR_IP_BF_MSK (0x00000010)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_SBE_BF_OFF ( 5)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_SBE_BF_MSK (0x00000020)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_DBE_BF_OFF ( 6)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_DBE_BF_MSK (0x00000040)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_CNT_OVRF_BF_OFF ( 7)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_CNT_OVRF_BF_MSK (0x00000080)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_PR1_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_REFR_IP_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_REFR_IP_BF_MSK (0x00000100)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_SBE_BF_OFF ( 9)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_SBE_BF_MSK (0x00000200)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_DBE_BF_OFF (10)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_DBE_BF_MSK (0x00000400)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_CNT_OVRF_BF_OFF (11)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_CNT_OVRF_BF_MSK (0x00000800)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR0_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_REFR_IP_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_REFR_IP_BF_MSK (0x00001000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_SBE_BF_OFF (13)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_SBE_BF_MSK (0x00002000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_DBE_BF_OFF (14)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_DBE_BF_MSK (0x00004000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_CNT_OVRF_BF_OFF (15)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_CNT_OVRF_BF_MSK (0x00008000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SR1_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_REFR_IP_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_REFR_IP_BF_MSK (0x00010000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_SBE_BF_OFF (17)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_SBE_BF_MSK (0x00020000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_DBE_BF_OFF (18)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_DBE_BF_MSK (0x00040000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_CNT_OVRF_BF_OFF (19)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_CNT_OVRF_BF_MSK (0x00080000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR0_CNT_OVRF_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_REFR_IP_BF_OFF (20)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_REFR_IP_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_REFR_IP_BF_MSK (0x00100000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_REFR_IP_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_SBE_BF_OFF (21)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_SBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_SBE_BF_MSK (0x00200000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_SBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_DBE_BF_OFF (22)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_DBE_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_DBE_BF_MSK (0x00400000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_DBE_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_CNT_OVRF_BF_OFF (23)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_CNT_OVRF_BF_WID ( 1)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_CNT_OVRF_BF_MSK (0x00800000)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_SNZR1_CNT_OVRF_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_ERROR_COUNTER0 register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Error_Counter0
  * SBB Memory ECC SBE/DBE Counters 0
  */

typedef union {
  struct {
    uint32_t FR_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CM_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t EDFM_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t FIM_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t FOM_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t FSM_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t MR0_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t MR1_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_err_cnter0_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_DEFAULT (0x00000000U)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_RD_MASK (0xffffffffU)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_WR_MASK (0x00000000U)


#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FR_SBE_CNTR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FR_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FR_SBE_CNTR_BF_MSK (0x0000000F)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FR_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_CM_SBE_CNTR_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_CM_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_CM_SBE_CNTR_BF_MSK (0x000000F0)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_CM_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_EDFM_SBE_CNTR_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_EDFM_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_EDFM_SBE_CNTR_BF_MSK (0x00000F00)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_EDFM_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FIM_SBE_CNTR_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FIM_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FIM_SBE_CNTR_BF_MSK (0x0000F000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FIM_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FOM_SBE_CNTR_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FOM_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FOM_SBE_CNTR_BF_MSK (0x000F0000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FOM_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FSM_SBE_CNTR_BF_OFF (20)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FSM_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FSM_SBE_CNTR_BF_MSK (0x00F00000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_FSM_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR0_SBE_CNTR_BF_OFF (24)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR0_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR0_SBE_CNTR_BF_MSK (0x0F000000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR0_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR1_SBE_CNTR_BF_OFF (28)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR1_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR1_SBE_CNTR_BF_MSK (0xF0000000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_MR1_SBE_CNTR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ECC_ERROR_COUNTER1 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_ECC_Error_Counter1
  * SBB Memory ECC SBE/DBE Counters 1
  */

typedef union {
  struct {
    uint32_t PR0_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PR1_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t SR0_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t SR1_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t SNZR0_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t SNZR1_SBE_CNTR : 4;
    ///< ---
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_ecc_err_cnter1_reg_t;

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_DEFAULT (0x00000000U)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_RD_MASK (0x00ffffffU)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_WR_MASK (0x00000000U)


#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR0_SBE_CNTR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR0_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR0_SBE_CNTR_BF_MSK (0x0000000F)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR0_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR1_SBE_CNTR_BF_OFF ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR1_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR1_SBE_CNTR_BF_MSK (0x000000F0)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_PR1_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR0_SBE_CNTR_BF_OFF ( 8)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR0_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR0_SBE_CNTR_BF_MSK (0x00000F00)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR0_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR1_SBE_CNTR_BF_OFF (12)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR1_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR1_SBE_CNTR_BF_MSK (0x0000F000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SR1_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR0_SBE_CNTR_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR0_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR0_SBE_CNTR_BF_MSK (0x000F0000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR0_SBE_CNTR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR1_SBE_CNTR_BF_OFF (20)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR1_SBE_CNTR_BF_WID ( 4)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR1_SBE_CNTR_BF_MSK (0x00F00000)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_SNZR1_SBE_CNTR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_MEM_ERROR_INFORMATION register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_MEM_Error_Information
  * SBB Memory ECC Error Info
  */

typedef union {
  struct {
    uint32_t ERROR_ADDR : 16;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ERROR_SYND : 8;
    ///< ---
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_sbb_mem_err_information_reg_t;

#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_DEFAULT (0x00000000U)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_RD_MASK (0x00ffffffU)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_WR_MASK (0x00000000U)


#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_ADDR_BF_OFF ( 0)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_ADDR_BF_WID (16)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_ADDR_BF_MSK (0x0000FFFF)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_ADDR_BF_DEF (0x00000000)

#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_SYND_BF_OFF (16)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_SYND_BF_WID ( 8)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_SYND_BF_MSK (0x00FF0000)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_ERR_SYND_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SBB_MAP_SBB_TRNG_RAND register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/SBB_MAP/SBB_TRNG_RAND
  * SBB TRNG Random Data
  */

typedef union {
  struct {
    uint32_t RAND_DATA : 32;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_sbb_trng_rand_reg_t;

#define SYS_CTRL_SBB_TRNG_RAND_DEFAULT (0x00000000U)
#define SYS_CTRL_SBB_TRNG_RAND_RD_MASK (0xffffffffU)
#define SYS_CTRL_SBB_TRNG_RAND_WR_MASK (0x00000000U)


#define SYS_CTRL_SBB_TRNG_RAND_DATA_BF_OFF ( 0)
#define SYS_CTRL_SBB_TRNG_RAND_DATA_BF_WID (32)
#define SYS_CTRL_SBB_TRNG_RAND_DATA_BF_MSK (0xFFFFFFFF)
#define SYS_CTRL_SBB_TRNG_RAND_DATA_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT0_CSR_MAP_INTERRUPTSTATUS0 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT0_CSR_MAP/InterruptStatus0
  * INT0_STATUS
  */

typedef union {
  struct {
    uint32_t SBB_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SBE0_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DBE0_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CNT_OVRF0_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t SBE1_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DBE1_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CNT_OVRF1_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t AUTH_OLIMIT_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr0_csr_intrstat0_reg_t;

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_RD_MASK (0x000000ffU)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_WR_MASK (0x00000000U)


#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBB_INTSTAT_BF_OFF ( 0)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBB_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBB_INTSTAT_BF_MSK (0x00000001)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBB_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE0_INTSTAT_BF_OFF ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE0_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE0_INTSTAT_BF_MSK (0x00000002)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE0_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE0_INTSTAT_BF_OFF ( 2)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE0_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE0_INTSTAT_BF_MSK (0x00000004)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE0_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF0_INTSTAT_BF_OFF ( 3)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF0_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF0_INTSTAT_BF_MSK (0x00000008)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF0_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE1_INTSTAT_BF_OFF ( 4)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE1_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE1_INTSTAT_BF_MSK (0x00000010)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_SBE1_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE1_INTSTAT_BF_OFF ( 5)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE1_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE1_INTSTAT_BF_MSK (0x00000020)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_DBE1_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF1_INTSTAT_BF_OFF ( 6)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF1_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF1_INTSTAT_BF_MSK (0x00000040)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_CNT_OVRF1_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRSTAT0_AUTH_OLIMIT_INTSTAT_BF_OFF ( 7)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_AUTH_OLIMIT_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_AUTH_OLIMIT_INTSTAT_BF_MSK (0x00000080)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_AUTH_OLIMIT_INTSTAT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT0_CSR_MAP_INTERRUPTENABLEHIGH0 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT0_CSR_MAP/InterruptEnableHigh0
  * INT0_ENHIGH
  */

typedef union {
  struct {
    uint32_t SBB_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SBE0_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DBE0_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CNT_OVRF0_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SBE1_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DBE1_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CNT_OVRF1_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t AUTH_OLIMIT_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr0_csr_intrenhigh0_reg_t;

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_RD_MASK (0x000000ffU)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_WR_MASK (0x000000ffU)


#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBB_INTEN_BF_OFF ( 0)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBB_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBB_INTEN_BF_MSK (0x00000001)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBB_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE0_INTEN_BF_OFF ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE0_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE0_INTEN_BF_MSK (0x00000002)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE0_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE0_INTEN_BF_OFF ( 2)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE0_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE0_INTEN_BF_MSK (0x00000004)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE0_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF0_INTEN_BF_OFF ( 3)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF0_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF0_INTEN_BF_MSK (0x00000008)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF0_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE1_INTEN_BF_OFF ( 4)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE1_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE1_INTEN_BF_MSK (0x00000010)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_SBE1_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE1_INTEN_BF_OFF ( 5)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE1_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE1_INTEN_BF_MSK (0x00000020)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_DBE1_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF1_INTEN_BF_OFF ( 6)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF1_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF1_INTEN_BF_MSK (0x00000040)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_CNT_OVRF1_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_AUTH_OLIMIT_INTEN_BF_OFF ( 7)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_AUTH_OLIMIT_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_AUTH_OLIMIT_INTEN_BF_MSK (0x00000080)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_AUTH_OLIMIT_INTEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT0_CSR_MAP_INTERRUPTENABLELOW0 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT0_CSR_MAP/InterruptEnableLow0
  * INT0_ENLOW
  */

typedef union {
  struct {
    uint32_t SBB_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SBE0_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DBE0_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CNT_OVRF0_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SBE1_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DBE1_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CNT_OVRF1_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t AUTH_OLIMIT_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr0_csr_intrenlow0_reg_t;

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_RD_MASK (0x000000ffU)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_WR_MASK (0x000000ffU)


#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBB_INTEN_BF_OFF ( 0)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBB_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBB_INTEN_BF_MSK (0x00000001)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBB_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE0_INTEN_BF_OFF ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE0_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE0_INTEN_BF_MSK (0x00000002)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE0_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE0_INTEN_BF_OFF ( 2)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE0_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE0_INTEN_BF_MSK (0x00000004)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE0_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF0_INTEN_BF_OFF ( 3)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF0_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF0_INTEN_BF_MSK (0x00000008)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF0_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE1_INTEN_BF_OFF ( 4)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE1_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE1_INTEN_BF_MSK (0x00000010)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_SBE1_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE1_INTEN_BF_OFF ( 5)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE1_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE1_INTEN_BF_MSK (0x00000020)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_DBE1_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF1_INTEN_BF_OFF ( 6)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF1_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF1_INTEN_BF_MSK (0x00000040)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_CNT_OVRF1_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRENLOW0_AUTH_OLIMIT_INTEN_BF_OFF ( 7)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_AUTH_OLIMIT_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_AUTH_OLIMIT_INTEN_BF_MSK (0x00000080)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_AUTH_OLIMIT_INTEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT0_CSR_MAP_INTERRUPTCLEAR0 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT0_CSR_MAP/InterruptClear0
  * INT0_CLR
  */

typedef union {
  struct {
    uint32_t SBB_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t SBE0_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="1" ResetValue="0x0"
    uint32_t DBE0_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="2" ResetValue="0x0"
    uint32_t CNT_OVRF0_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="3" ResetValue="0x0"
    uint32_t SBE1_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="4" ResetValue="0x0"
    uint32_t DBE1_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="5" ResetValue="0x0"
    uint32_t CNT_OVRF1_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="6" ResetValue="0x0"
    uint32_t AUTH_OLIMIT_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr0_csr_intrclr0_reg_t;

#define SYS_CTRL_INTR0_CSR_INTRCLR0_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_RD_MASK (0x000000ffU)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_WR_MASK (0x000000ffU)


#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBB_INTCLR_BF_OFF ( 0)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBB_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBB_INTCLR_BF_MSK (0x00000001)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBB_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE0_INTCLR_BF_OFF ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE0_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE0_INTCLR_BF_MSK (0x00000002)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE0_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE0_INTCLR_BF_OFF ( 2)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE0_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE0_INTCLR_BF_MSK (0x00000004)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE0_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF0_INTCLR_BF_OFF ( 3)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF0_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF0_INTCLR_BF_MSK (0x00000008)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF0_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE1_INTCLR_BF_OFF ( 4)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE1_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE1_INTCLR_BF_MSK (0x00000010)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_SBE1_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE1_INTCLR_BF_OFF ( 5)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE1_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE1_INTCLR_BF_MSK (0x00000020)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_DBE1_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF1_INTCLR_BF_OFF ( 6)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF1_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF1_INTCLR_BF_MSK (0x00000040)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_CNT_OVRF1_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRCLR0_AUTH_OLIMIT_INTCLR_BF_OFF ( 7)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_AUTH_OLIMIT_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_AUTH_OLIMIT_INTCLR_BF_MSK (0x00000080)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_AUTH_OLIMIT_INTCLR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT0_CSR_MAP_INTERRUPTFORCE0 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT0_CSR_MAP/InterruptForce0
  * INT0_FRC
  */

typedef union {
  struct {
    uint32_t SBB_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t SBE0_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="1" ResetValue="0x0"
    uint32_t DBE0_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="2" ResetValue="0x0"
    uint32_t CNT_OVRF0_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="3" ResetValue="0x0"
    uint32_t SBE1_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="4" ResetValue="0x0"
    uint32_t DBE1_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="5" ResetValue="0x0"
    uint32_t CNT_OVRF1_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="6" ResetValue="0x0"
    uint32_t AUTH_OLIMIT_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr0_csr_intrforce0_reg_t;

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_RD_MASK (0x000000ffU)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_WR_MASK (0x000000ffU)


#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBB_INTFRC_BF_OFF ( 0)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBB_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBB_INTFRC_BF_MSK (0x00000001)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBB_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE0_INTFRC_BF_OFF ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE0_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE0_INTFRC_BF_MSK (0x00000002)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE0_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE0_INTFRC_BF_OFF ( 2)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE0_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE0_INTFRC_BF_MSK (0x00000004)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE0_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF0_INTFRC_BF_OFF ( 3)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF0_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF0_INTFRC_BF_MSK (0x00000008)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF0_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE1_INTFRC_BF_OFF ( 4)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE1_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE1_INTFRC_BF_MSK (0x00000010)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_SBE1_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE1_INTFRC_BF_OFF ( 5)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE1_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE1_INTFRC_BF_MSK (0x00000020)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_DBE1_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF1_INTFRC_BF_OFF ( 6)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF1_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF1_INTFRC_BF_MSK (0x00000040)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_CNT_OVRF1_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR0_CSR_INTRFORCE0_AUTH_OLIMIT_INTFRC_BF_OFF ( 7)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_AUTH_OLIMIT_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_AUTH_OLIMIT_INTFRC_BF_MSK (0x00000080)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_AUTH_OLIMIT_INTFRC_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT1_CSR_MAP_INTERRUPTSTATUS1 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT1_CSR_MAP/InterruptStatus1
  * INT1_STATUS
  */

typedef union {
  struct {
    uint32_t DTS_MON_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_CATTRIP_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr1_csr_intrstat1_reg_t;

#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_RD_MASK (0x00000003U)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_WR_MASK (0x00000000U)


#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_MON_INTSTAT_BF_OFF ( 0)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_MON_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_MON_INTSTAT_BF_MSK (0x00000001)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_MON_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_CATTRIP_INTSTAT_BF_OFF ( 1)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_CATTRIP_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_CATTRIP_INTSTAT_BF_MSK (0x00000002)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_DTS_CATTRIP_INTSTAT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT1_CSR_MAP_INTERRUPTENABLEHIGH1 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT1_CSR_MAP/InterruptEnableHigh1
  * INT1_ENHIGH
  */

typedef union {
  struct {
    uint32_t DTS_MON_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_CATTRIP_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr1_csr_intrenhigh1_reg_t;

#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_RD_MASK (0x00000003U)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_WR_MASK (0x00000003U)


#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_MON_INTEN_BF_OFF ( 0)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_MON_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_MON_INTEN_BF_MSK (0x00000001)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_MON_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_CATTRIP_INTEN_BF_OFF ( 1)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_CATTRIP_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_CATTRIP_INTEN_BF_MSK (0x00000002)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_DTS_CATTRIP_INTEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT1_CSR_MAP_INTERRUPTENABLELOW1 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT1_CSR_MAP/InterruptEnableLow1
  * INT1_ENLOW
  */

typedef union {
  struct {
    uint32_t DTS_MON_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_CATTRIP_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr1_csr_intrenlow1_reg_t;

#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_RD_MASK (0x00000003U)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_WR_MASK (0x00000003U)


#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_MON_INTEN_BF_OFF ( 0)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_MON_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_MON_INTEN_BF_MSK (0x00000001)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_MON_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_CATTRIP_INTEN_BF_OFF ( 1)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_CATTRIP_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_CATTRIP_INTEN_BF_MSK (0x00000002)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_DTS_CATTRIP_INTEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT1_CSR_MAP_INTERRUPTCLEAR1 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT1_CSR_MAP/InterruptClear1
  * INT1_CLR
  */

typedef union {
  struct {
    uint32_t DTS_MON_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_CATTRIP_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr1_csr_intrclr1_reg_t;

#define SYS_CTRL_INTR1_CSR_INTRCLR1_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_RD_MASK (0x00000003U)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_WR_MASK (0x00000003U)


#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_MON_INTCLR_BF_OFF ( 0)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_MON_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_MON_INTCLR_BF_MSK (0x00000001)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_MON_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_CATTRIP_INTCLR_BF_OFF ( 1)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_CATTRIP_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_CATTRIP_INTCLR_BF_MSK (0x00000002)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_DTS_CATTRIP_INTCLR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT1_CSR_MAP_INTERRUPTFORCE1 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT1_CSR_MAP/InterruptForce1
  * INT1_FRC
  */

typedef union {
  struct {
    uint32_t DTS_MON_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_CATTRIP_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr1_csr_intrforce1_reg_t;

#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_RD_MASK (0x00000003U)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_WR_MASK (0x00000003U)


#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_MON_INTFRC_BF_OFF ( 0)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_MON_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_MON_INTFRC_BF_MSK (0x00000001)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_MON_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_CATTRIP_INTFRC_BF_OFF ( 1)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_CATTRIP_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_CATTRIP_INTFRC_BF_MSK (0x00000002)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_DTS_CATTRIP_INTFRC_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT2_CSR_MAP_INTERRUPTSTATUS2 register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT2_CSR_MAP/InterruptStatus2
  * INT2_STATUS
  */

typedef union {
  struct {
    uint32_t WDOG0_TO_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WDOG1_TO_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t APB2TAP_MTC_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t IFS_FC_APB_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DMCW_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_INTSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr2_csr_intrstat2_reg_t;

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_RD_MASK (0x0000007fU)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WR_MASK (0x00000000U)


#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG0_TO_INTSTAT_BF_OFF ( 0)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG0_TO_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG0_TO_INTSTAT_BF_MSK (0x00000001)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG0_TO_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG1_TO_INTSTAT_BF_OFF ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG1_TO_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG1_TO_INTSTAT_BF_MSK (0x00000002)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_WDOG1_TO_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_APB2TAP_MTC_INTSTAT_BF_OFF ( 2)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_APB2TAP_MTC_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_APB2TAP_MTC_INTSTAT_BF_MSK (0x00000004)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_APB2TAP_MTC_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_IFS_FC_APB_INTSTAT_BF_OFF ( 3)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_IFS_FC_APB_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_IFS_FC_APB_INTSTAT_BF_MSK (0x00000008)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_IFS_FC_APB_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_DMCW_INTSTAT_BF_OFF ( 4)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_DMCW_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_DMCW_INTSTAT_BF_MSK (0x00000010)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_DMCW_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL0_LOL_INTSTAT_BF_OFF ( 5)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL0_LOL_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL0_LOL_INTSTAT_BF_MSK (0x00000020)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL0_LOL_INTSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL1_LOL_INTSTAT_BF_OFF ( 6)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL1_LOL_INTSTAT_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL1_LOL_INTSTAT_BF_MSK (0x00000040)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_PLL1_LOL_INTSTAT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT2_CSR_MAP_INTERRUPTENABLEHIGH2 register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT2_CSR_MAP/InterruptEnableHigh2
  * INT2_ENHIGH
  */

typedef union {
  struct {
    uint32_t WDOG0_TO_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WDOG1_TO_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t APB2TAP_MTC_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t IFS_FC_APB_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DMCW_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr2_csr_intrenhigh2_reg_t;

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_RD_MASK (0x0000007fU)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WR_MASK (0x0000007fU)


#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG0_TO_INTEN_BF_OFF ( 0)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG0_TO_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG0_TO_INTEN_BF_MSK (0x00000001)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG0_TO_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG1_TO_INTEN_BF_OFF ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG1_TO_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG1_TO_INTEN_BF_MSK (0x00000002)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_WDOG1_TO_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_APB2TAP_MTC_INTEN_BF_OFF ( 2)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_APB2TAP_MTC_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_APB2TAP_MTC_INTEN_BF_MSK (0x00000004)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_APB2TAP_MTC_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_IFS_FC_APB_INTEN_BF_OFF ( 3)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_IFS_FC_APB_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_IFS_FC_APB_INTEN_BF_MSK (0x00000008)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_IFS_FC_APB_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_DMCW_INTEN_BF_OFF ( 4)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_DMCW_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_DMCW_INTEN_BF_MSK (0x00000010)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_DMCW_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL0_LOL_INTEN_BF_OFF ( 5)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL0_LOL_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL0_LOL_INTEN_BF_MSK (0x00000020)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL0_LOL_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL1_LOL_INTEN_BF_OFF ( 6)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL1_LOL_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL1_LOL_INTEN_BF_MSK (0x00000040)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_PLL1_LOL_INTEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT2_CSR_MAP_INTERRUPTENABLELOW2 register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT2_CSR_MAP/InterruptEnableLow2
  * INT2_ENLOW
  */

typedef union {
  struct {
    uint32_t WDOG0_TO_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WDOG1_TO_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t APB2TAP_MTC_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t IFS_FC_APB_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DMCW_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_INTEN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr2_csr_intrenlow2_reg_t;

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_RD_MASK (0x0000007fU)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WR_MASK (0x0000007fU)


#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG0_TO_INTEN_BF_OFF ( 0)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG0_TO_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG0_TO_INTEN_BF_MSK (0x00000001)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG0_TO_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG1_TO_INTEN_BF_OFF ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG1_TO_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG1_TO_INTEN_BF_MSK (0x00000002)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_WDOG1_TO_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_APB2TAP_MTC_INTEN_BF_OFF ( 2)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_APB2TAP_MTC_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_APB2TAP_MTC_INTEN_BF_MSK (0x00000004)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_APB2TAP_MTC_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_IFS_FC_APB_INTEN_BF_OFF ( 3)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_IFS_FC_APB_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_IFS_FC_APB_INTEN_BF_MSK (0x00000008)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_IFS_FC_APB_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_DMCW_INTEN_BF_OFF ( 4)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_DMCW_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_DMCW_INTEN_BF_MSK (0x00000010)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_DMCW_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL0_LOL_INTEN_BF_OFF ( 5)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL0_LOL_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL0_LOL_INTEN_BF_MSK (0x00000020)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL0_LOL_INTEN_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL1_LOL_INTEN_BF_OFF ( 6)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL1_LOL_INTEN_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL1_LOL_INTEN_BF_MSK (0x00000040)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_PLL1_LOL_INTEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT2_CSR_MAP_INTERRUPTCLEAR2 register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT2_CSR_MAP/InterruptClear2
  * INT2_CLR
  */

typedef union {
  struct {
    uint32_t WDOG0_TO_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t WDOG1_TO_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="1" ResetValue="0x0"
    uint32_t APB2TAP_MTC_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="2" ResetValue="0x0"
    uint32_t IFS_FC_APB_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="3" ResetValue="0x0"
    uint32_t DMCW_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_INTCLR : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr2_csr_intrclr2_reg_t;

#define SYS_CTRL_INTR2_CSR_INTRCLR2_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_RD_MASK (0x0000007fU)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WR_MASK (0x0000007fU)


#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG0_TO_INTCLR_BF_OFF ( 0)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG0_TO_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG0_TO_INTCLR_BF_MSK (0x00000001)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG0_TO_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG1_TO_INTCLR_BF_OFF ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG1_TO_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG1_TO_INTCLR_BF_MSK (0x00000002)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_WDOG1_TO_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRCLR2_APB2TAP_MTC_INTCLR_BF_OFF ( 2)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_APB2TAP_MTC_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_APB2TAP_MTC_INTCLR_BF_MSK (0x00000004)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_APB2TAP_MTC_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRCLR2_IFS_FC_APB_INTCLR_BF_OFF ( 3)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_IFS_FC_APB_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_IFS_FC_APB_INTCLR_BF_MSK (0x00000008)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_IFS_FC_APB_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRCLR2_DMCW_INTCLR_BF_OFF ( 4)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_DMCW_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_DMCW_INTCLR_BF_MSK (0x00000010)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_DMCW_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL0_LOL_INTCLR_BF_OFF ( 5)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL0_LOL_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL0_LOL_INTCLR_BF_MSK (0x00000020)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL0_LOL_INTCLR_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL1_LOL_INTCLR_BF_OFF ( 6)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL1_LOL_INTCLR_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL1_LOL_INTCLR_BF_MSK (0x00000040)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_PLL1_LOL_INTCLR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_INTERRUPT2_CSR_MAP_INTERRUPTFORCE2 register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/INTERRUPT2_CSR_MAP/InterruptForce2
  * INT2_FRC
  */

typedef union {
  struct {
    uint32_t WDOG0_TO_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t WDOG1_TO_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="1" ResetValue="0x0"
    uint32_t APB2TAP_MTC_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="2" ResetValue="0x0"
    uint32_t IFS_FC_APB_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="3" ResetValue="0x0"
    uint32_t DMCW_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_INTFRC : 1;
    ///< ---
    ///< AccessType="RW/AC" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_intr2_csr_intrforce2_reg_t;

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_DEFAULT (0x00000000U)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_RD_MASK (0x0000007fU)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WR_MASK (0x0000007fU)


#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG0_TO_INTFRC_BF_OFF ( 0)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG0_TO_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG0_TO_INTFRC_BF_MSK (0x00000001)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG0_TO_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG1_TO_INTFRC_BF_OFF ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG1_TO_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG1_TO_INTFRC_BF_MSK (0x00000002)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_WDOG1_TO_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_APB2TAP_MTC_INTFRC_BF_OFF ( 2)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_APB2TAP_MTC_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_APB2TAP_MTC_INTFRC_BF_MSK (0x00000004)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_APB2TAP_MTC_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_IFS_FC_APB_INTFRC_BF_OFF ( 3)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_IFS_FC_APB_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_IFS_FC_APB_INTFRC_BF_MSK (0x00000008)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_IFS_FC_APB_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_DMCW_INTFRC_BF_OFF ( 4)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_DMCW_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_DMCW_INTFRC_BF_MSK (0x00000010)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_DMCW_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL0_LOL_INTFRC_BF_OFF ( 5)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL0_LOL_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL0_LOL_INTFRC_BF_MSK (0x00000020)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL0_LOL_INTFRC_BF_DEF (0x00000000)

#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL1_LOL_INTFRC_BF_OFF ( 6)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL1_LOL_INTFRC_BF_WID ( 1)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL1_LOL_INTFRC_BF_MSK (0x00000040)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_PLL1_LOL_INTFRC_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_TXALARM_CSR_MAP_TXALARMSTATUS register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/TXALARM_CSR_MAP/TxAlarmStatus
  * TXALARM_STATUS
  */

typedef union {
  struct {
    uint32_t BRESETB_INPUT_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WARM_RESET_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t COLD_RESET_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t WDOG0_TO_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t WDOG1_TO_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_ALSTAT : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_txalarm_csr_txalarmstat_reg_t;

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_DEFAULT (0x00000000U)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_RD_MASK (0x0000007fU)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WR_MASK (0x00000000U)


#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_BRSTB_INPUT_ALSTAT_BF_OFF ( 0)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_BRSTB_INPUT_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_BRSTB_INPUT_ALSTAT_BF_MSK (0x00000001)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_BRSTB_INPUT_ALSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WARM_RST_ALSTAT_BF_OFF ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WARM_RST_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WARM_RST_ALSTAT_BF_MSK (0x00000002)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WARM_RST_ALSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_COLD_RST_ALSTAT_BF_OFF ( 2)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_COLD_RST_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_COLD_RST_ALSTAT_BF_MSK (0x00000004)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_COLD_RST_ALSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG0_TO_ALSTAT_BF_OFF ( 3)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG0_TO_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG0_TO_ALSTAT_BF_MSK (0x00000008)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG0_TO_ALSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG1_TO_ALSTAT_BF_OFF ( 4)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG1_TO_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG1_TO_ALSTAT_BF_MSK (0x00000010)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_WDOG1_TO_ALSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL0_LOL_ALSTAT_BF_OFF ( 5)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL0_LOL_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL0_LOL_ALSTAT_BF_MSK (0x00000020)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL0_LOL_ALSTAT_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL1_LOL_ALSTAT_BF_OFF ( 6)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL1_LOL_ALSTAT_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL1_LOL_ALSTAT_BF_MSK (0x00000040)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_PLL1_LOL_ALSTAT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_TXALARM_CSR_MAP_TXALARMENABLE register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/TXALARM_CSR_MAP/TxAlarmEnable
  * TXALARM_ENABLE
  */

typedef union {
  struct {
    uint32_t BRESETB_INPUT_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="0" ResetValue="0x0"
    uint32_t WARM_RESET_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="1" ResetValue="0x0"
    uint32_t COLD_RESET_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="2" ResetValue="0x0"
    uint32_t WDOG0_TO_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="3" ResetValue="0x0"
    uint32_t WDOG1_TO_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_ALEN : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_txalarm_csr_txalarmen_reg_t;

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_DEFAULT (0x00000000U)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_RD_MASK (0x0000007fU)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WR_MASK (0x0000007fU)


#define SYS_CTRL_TXALARM_CSR_TXALARMEN_BRSTB_INPUT_ALEN_BF_OFF ( 0)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_BRSTB_INPUT_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_BRSTB_INPUT_ALEN_BF_MSK (0x00000001)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_BRSTB_INPUT_ALEN_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WARM_RST_ALEN_BF_OFF ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WARM_RST_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WARM_RST_ALEN_BF_MSK (0x00000002)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WARM_RST_ALEN_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_COLD_RST_ALEN_BF_OFF ( 2)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_COLD_RST_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_COLD_RST_ALEN_BF_MSK (0x00000004)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_COLD_RST_ALEN_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG0_TO_ALEN_BF_OFF ( 3)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG0_TO_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG0_TO_ALEN_BF_MSK (0x00000008)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG0_TO_ALEN_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG1_TO_ALEN_BF_OFF ( 4)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG1_TO_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG1_TO_ALEN_BF_MSK (0x00000010)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_WDOG1_TO_ALEN_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL0_LOL_ALEN_BF_OFF ( 5)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL0_LOL_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL0_LOL_ALEN_BF_MSK (0x00000020)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL0_LOL_ALEN_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL1_LOL_ALEN_BF_OFF ( 6)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL1_LOL_ALEN_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL1_LOL_ALEN_BF_MSK (0x00000040)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_PLL1_LOL_ALEN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_TXALARM_CSR_MAP_TXALARMCLEAR register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/TXALARM_CSR_MAP/TxAlarmClear
  * TXALARM_CLEAR
  */

typedef union {
  struct {
    uint32_t BRESETB_INPUT_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="0" ResetValue="0x0"
    uint32_t WARM_RESET_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="1" ResetValue="0x0"
    uint32_t COLD_RESET_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="2" ResetValue="0x0"
    uint32_t WDOG0_TO_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="3" ResetValue="0x0"
    uint32_t WDOG1_TO_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_ALCLR : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_txalarm_csr_txalarmclr_reg_t;

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_DEFAULT (0x00000000U)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_RD_MASK (0x0000007fU)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WR_MASK (0x0000007fU)


#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_BRSTB_INPUT_ALCLR_BF_OFF ( 0)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_BRSTB_INPUT_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_BRSTB_INPUT_ALCLR_BF_MSK (0x00000001)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_BRSTB_INPUT_ALCLR_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WARM_RST_ALCLR_BF_OFF ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WARM_RST_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WARM_RST_ALCLR_BF_MSK (0x00000002)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WARM_RST_ALCLR_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_COLD_RST_ALCLR_BF_OFF ( 2)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_COLD_RST_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_COLD_RST_ALCLR_BF_MSK (0x00000004)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_COLD_RST_ALCLR_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG0_TO_ALCLR_BF_OFF ( 3)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG0_TO_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG0_TO_ALCLR_BF_MSK (0x00000008)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG0_TO_ALCLR_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG1_TO_ALCLR_BF_OFF ( 4)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG1_TO_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG1_TO_ALCLR_BF_MSK (0x00000010)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_WDOG1_TO_ALCLR_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL0_LOL_ALCLR_BF_OFF ( 5)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL0_LOL_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL0_LOL_ALCLR_BF_MSK (0x00000020)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL0_LOL_ALCLR_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL1_LOL_ALCLR_BF_OFF ( 6)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL1_LOL_ALCLR_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL1_LOL_ALCLR_BF_MSK (0x00000040)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_PLL1_LOL_ALCLR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_TXALARM_CSR_MAP_TXALARMFORCE register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/TXALARM_CSR_MAP/TxAlarmForce
  * TXALARM_FORCE
  */

typedef union {
  struct {
    uint32_t BRESETB_INPUT_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="0" ResetValue="0x0"
    uint32_t WARM_RESET_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="1" ResetValue="0x0"
    uint32_t COLD_RESET_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="2" ResetValue="0x0"
    uint32_t WDOG0_TO_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="3" ResetValue="0x0"
    uint32_t WDOG1_TO_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="4" ResetValue="0x0"
    uint32_t PLL0_LOL_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="5" ResetValue="0x0"
    uint32_t PLL1_LOL_ALFRC : 1;
    ///< ---
    ///< AccessType="RW/V/P" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_txalarm_csr_txalarmforce_reg_t;

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_DEFAULT (0x00000000U)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_RD_MASK (0x0000007fU)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WR_MASK (0x0000007fU)


#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_BRSTB_INPUT_ALFRC_BF_OFF ( 0)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_BRSTB_INPUT_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_BRSTB_INPUT_ALFRC_BF_MSK (0x00000001)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_BRSTB_INPUT_ALFRC_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WARM_RST_ALFRC_BF_OFF ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WARM_RST_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WARM_RST_ALFRC_BF_MSK (0x00000002)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WARM_RST_ALFRC_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_COLD_RST_ALFRC_BF_OFF ( 2)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_COLD_RST_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_COLD_RST_ALFRC_BF_MSK (0x00000004)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_COLD_RST_ALFRC_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG0_TO_ALFRC_BF_OFF ( 3)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG0_TO_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG0_TO_ALFRC_BF_MSK (0x00000008)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG0_TO_ALFRC_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG1_TO_ALFRC_BF_OFF ( 4)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG1_TO_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG1_TO_ALFRC_BF_MSK (0x00000010)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_WDOG1_TO_ALFRC_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL0_LOL_ALFRC_BF_OFF ( 5)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL0_LOL_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL0_LOL_ALFRC_BF_MSK (0x00000020)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL0_LOL_ALFRC_BF_DEF (0x00000000)

#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL1_LOL_ALFRC_BF_OFF ( 6)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL1_LOL_ALFRC_BF_WID ( 1)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL1_LOL_ALFRC_BF_MSK (0x00000040)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_PLL1_LOL_ALFRC_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_HW_LOCK_STATUS register description at address offset 0x7e00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/HW_Lock_Status
  * Hardware Lock Status Register
  */

typedef union {
  struct {
    uint32_t DECOMMISSION_LOCKED : 1;
    ///< Decommission Lock  When high, device has been decommission and is
    ///< not functional.  Secure Policy:  15
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FUNCTIONALITY_LOCKED : 1;
    ///< Functionality Locked  When high, device has encountered an authtentication
    ///< error and is not functional.  Secure Policy:  1
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t FSLDO_UNLOCK : 1;
    ///< Functional Sense LDO Unlock  When high, unlocks FSLDO Control Register.
    ///< Secure Policy:  2 4 5 9
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t BSLDO_UNLOCK : 1;
    ///< BISR Sense LDO Unlock  When high, unlocks BSLDO Control Register.
    ///< Secure Policy:  2 4
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t BOOTDEBUG_UNLOCK : 1;
    ///< Boot Debug Unlock  When high, unlocks debug controls for Boot.  Secure
    ///< Policy:  2 4
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DEBUG_UNLOCK : 1;
    ///< Debug Unlock  When high, unlocks general debug controls (except Boot).
    ///< Secure Policy:  2 4 9
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t SOEMDEBUG_UNLOCK : 1;
    ///< Shared OEM Debug Unlock  When high, unlocks debug controls shared
    ///< by Intel and OEM  Secure Policy:  2 4 5
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t SERTRIMOV_UNLOCK : 1;
    ///< Memory Trim Override Unlock  When high, unlocks overrides for Memory
    ///< Trims.  Secure Policy:  2 4
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t BISRCSR_UNLOCK : 1;
    ///< BISR CSR Unlock  When high, unlocks BISR Control and Status Register.
    ///< Secure Policy:  2 4
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t SBBMEM_UNLOCK : 1;
    ///< SBB MEM/ECC Unlock  When high, unlocks all SBB ECC MEM controls for
    ///< debug.  Secure Policy:  2 4
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_dfx_hw_lock_stat_reg_t;

#define SYS_CTRL_DFX_HW_LOCK_STAT_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_HW_LOCK_STAT_RD_MASK (0x000003ffU)
#define SYS_CTRL_DFX_HW_LOCK_STAT_WR_MASK (0x00000000U)


///< Decommission Lock  When high, device has been decommission and is
///< not functional.  Secure Policy:  15
#define SYS_CTRL_DFX_HW_LOCK_STAT_DECOMMISSION_LOCKED_BF_OFF ( 0)
#define SYS_CTRL_DFX_HW_LOCK_STAT_DECOMMISSION_LOCKED_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_DECOMMISSION_LOCKED_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_HW_LOCK_STAT_DECOMMISSION_LOCKED_BF_DEF (0x00000000)

///< Functionality Locked  When high, device has encountered an authtentication
///< error and is not functional.  Secure Policy:  1
#define SYS_CTRL_DFX_HW_LOCK_STAT_FUNCTIONALITY_LOCKED_BF_OFF ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_FUNCTIONALITY_LOCKED_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_FUNCTIONALITY_LOCKED_BF_MSK (0x00000002)
#define SYS_CTRL_DFX_HW_LOCK_STAT_FUNCTIONALITY_LOCKED_BF_DEF (0x00000000)

///< Functional Sense LDO Unlock  When high, unlocks FSLDO Control Register.
///< Secure Policy:  2 4 5 9
#define SYS_CTRL_DFX_HW_LOCK_STAT_FSLDO_UNLOCK_BF_OFF ( 2)
#define SYS_CTRL_DFX_HW_LOCK_STAT_FSLDO_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_FSLDO_UNLOCK_BF_MSK (0x00000004)
#define SYS_CTRL_DFX_HW_LOCK_STAT_FSLDO_UNLOCK_BF_DEF (0x00000000)

///< BISR Sense LDO Unlock  When high, unlocks BSLDO Control Register.
///< Secure Policy:  2 4
#define SYS_CTRL_DFX_HW_LOCK_STAT_BSLDO_UNLOCK_BF_OFF ( 3)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BSLDO_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BSLDO_UNLOCK_BF_MSK (0x00000008)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BSLDO_UNLOCK_BF_DEF (0x00000000)

///< Boot Debug Unlock  When high, unlocks debug controls for Boot.  Secure
///< Policy:  2 4
#define SYS_CTRL_DFX_HW_LOCK_STAT_BOOTDBG_UNLOCK_BF_OFF ( 4)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BOOTDBG_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BOOTDBG_UNLOCK_BF_MSK (0x00000010)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BOOTDBG_UNLOCK_BF_DEF (0x00000000)

///< Debug Unlock  When high, unlocks general debug controls (except Boot).
///< Secure Policy:  2 4 9
#define SYS_CTRL_DFX_HW_LOCK_STAT_DBG_UNLOCK_BF_OFF ( 5)
#define SYS_CTRL_DFX_HW_LOCK_STAT_DBG_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_DBG_UNLOCK_BF_MSK (0x00000020)
#define SYS_CTRL_DFX_HW_LOCK_STAT_DBG_UNLOCK_BF_DEF (0x00000000)

///< Shared OEM Debug Unlock  When high, unlocks debug controls shared
///< by Intel and OEM  Secure Policy:  2 4 5
#define SYS_CTRL_DFX_HW_LOCK_STAT_SOEMDBG_UNLOCK_BF_OFF ( 6)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SOEMDBG_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SOEMDBG_UNLOCK_BF_MSK (0x00000040)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SOEMDBG_UNLOCK_BF_DEF (0x00000000)

///< Memory Trim Override Unlock  When high, unlocks overrides for Memory
///< Trims.  Secure Policy:  2 4
#define SYS_CTRL_DFX_HW_LOCK_STAT_SERTRIMOV_UNLOCK_BF_OFF ( 7)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SERTRIMOV_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SERTRIMOV_UNLOCK_BF_MSK (0x00000080)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SERTRIMOV_UNLOCK_BF_DEF (0x00000000)

///< BISR CSR Unlock  When high, unlocks BISR Control and Status Register.
///< Secure Policy:  2 4
#define SYS_CTRL_DFX_HW_LOCK_STAT_BISRCSR_UNLOCK_BF_OFF ( 8)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BISRCSR_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BISRCSR_UNLOCK_BF_MSK (0x00000100)
#define SYS_CTRL_DFX_HW_LOCK_STAT_BISRCSR_UNLOCK_BF_DEF (0x00000000)

///< SBB MEM/ECC Unlock  When high, unlocks all SBB ECC MEM controls for
///< debug.  Secure Policy:  2 4
#define SYS_CTRL_DFX_HW_LOCK_STAT_SBBMEM_UNLOCK_BF_OFF ( 9)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SBBMEM_UNLOCK_BF_WID ( 1)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SBBMEM_UNLOCK_BF_MSK (0x00000200)
#define SYS_CTRL_DFX_HW_LOCK_STAT_SBBMEM_UNLOCK_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BOOTDEBUG_STATUS register description at address offset 0x7e04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BootDebug_Status
  * Boot Debug Status Register
  */

typedef union {
  struct {
    uint32_t STRIM_TXIP : 1;
    ///< Serial Trim transmission in progress.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BOOTDBGSTAT : 23;
    ///< Boot Debug Status (TBD)
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t BOOTSTATEMON : 8;
    ///< Boot State Monitor Current encoded state of Boot FSM.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bootdbg_stat_reg_t;

#define SYS_CTRL_DFX_BOOTDBG_STAT_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_BOOTDBG_STAT_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_BOOTDBG_STAT_WR_MASK (0x00000000U)


///< Serial Trim transmission in progress.
#define SYS_CTRL_DFX_BOOTDBG_STAT_STRIM_TXIP_BF_OFF ( 0)
#define SYS_CTRL_DFX_BOOTDBG_STAT_STRIM_TXIP_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_STAT_STRIM_TXIP_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_BOOTDBG_STAT_STRIM_TXIP_BF_DEF (0x00000000)

///< Boot Debug Status (TBD)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTDBGSTAT_BF_OFF ( 1)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTDBGSTAT_BF_WID (23)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTDBGSTAT_BF_MSK (0x00FFFFFE)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTDBGSTAT_BF_DEF (0x00000000)

///< Boot State Monitor Current encoded state of Boot FSM.
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTSTATEMON_BF_OFF (24)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTSTATEMON_BF_WID ( 8)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTSTATEMON_BF_MSK (0xFF000000)
#define SYS_CTRL_DFX_BOOTDBG_STAT_BOOTSTATEMON_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BOOTDEBUG_CONTROL register description at address offset 0x7e08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BootDebug_Control
  * Boot Debug Control Register
  */

typedef union {
  struct {
    uint32_t IMRE : 2;
    ///< Ignore Memory Repair Error 1 and 2
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
    uint32_t IFE : 2;
    ///< Ignore Fuse Error (2: SBB, 3: SOC)
    ///< AccessType="RW/P/L" BitOffset="2" ResetValue="0x0"
    uint32_t SKIPMR : 1;
    ///< SKIP Memory Repair - skips over memory repair states in boot flow
    ///< AccessType="RW/P/L" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ATEH : 1;
    ///< ATE HOLD - stops boot FSM permanently until next power-on reset.
    ///< ATE can then set any other control bits and initiate any manual flow
    ///< NO RE-ENTRY TO HW BOOT FLOW; requires a power-on reset
    ///< AccessType="RW/P/L" BitOffset="7" ResetValue="0x0"
    uint32_t FMRD : 2;
    ///< Force Memory Repair Done 1 and 2
    ///< AccessType="RW/P/L" BitOffset="8" ResetValue="0x0"
    uint32_t FFPD : 1;
    ///< Force Fuse Pull Done
    ///< AccessType="RW/P/L" BitOffset="10" ResetValue="0x0"
    uint32_t FFDD : 1;
    ///< Force Fuse Distribution Done
    ///< AccessType="RW/P/L" BitOffset="11" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t TTRIPRD : 1;
    ///< Disable Thermal Trip Reset function. Prevent the DTS Thermal trip
    ///< output from generating an internal cold reset. Unblocks Boot FSM progress
    ///< (which will stall if ThermTrip is detected).
    ///< AccessType="RW/P/L" BitOffset="16" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t MINRESETDELAYS : 1;
    ///< Set all reset and alarm delays to a minimum value
    ///< AccessType="RW/P/L" BitOffset="26" ResetValue="0x0"
    uint32_t MINSTATEDELAYS : 1;
    ///< Set all state transition delays to a minimum value
    ///< AccessType="RW/P/L" BitOffset="27" ResetValue="0x0"
    uint32_t SINGLESTEPINTSEL : 1;
    ///< Single Step Internal Select Write 1 to set. When SingleStepEnable
    ///< and BDC_Enable are both set, writing a 1 wiil select the SingleStepAdvance
    ///< bit in this register as the control that advances the Boot FSM. Otherwise,
    ///< the external pin will control the Boot FSM advance.
    ///< AccessType="RW/P/L" BitOffset="28" ResetValue="0x0"
    uint32_t SINGLESTEPADVANCE : 1;
    ///< Single Step Advance Write 1 to set. When SingleStepEnable, SingleStepIntSel
    ///< and BDC_Enable are all set, writing a 1 to this bit wiil advance the
    ///< BootFSM to the next state, based on the normal state inputs. If the
    ///< conditions for advancing are not present, the BootFSM will not advance.
    ///< AccessType="RW/P/L" BitOffset="29" ResetValue="0x0"
    uint32_t SINGLESTEPENABLE : 1;
    ///< Single Step Enable (sticky, power-up reset). When set, enables single
    ///< stepping of the Boot FSM.   Boot FSM will stop at each state and wait
    ///< for the Single Step Advance signal before continuing.
    ///< AccessType="RW/P/L" BitOffset="30" ResetValue="0x0"
    uint32_t BDC_ENABLE : 1;
    ///< Boot Debug Control Enable  (sticky, power-up reset). Requires RED
    ///< unlock. When set, enables all other bits in this register to control
    ///< the behavior of the Boot FSM.
    ///< AccessType="RW/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bootdbg_ctrl_reg_t;

#define SYS_CTRL_DFX_BOOTDBG_CTRL_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_RD_MASK (0xfc010f9fU)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_WR_MASK (0xfc010f9fU)


///< Ignore Memory Repair Error 1 and 2
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IMRE_BF_OFF ( 0)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IMRE_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IMRE_BF_MSK (0x00000003)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IMRE_BF_DEF (0x00000000)

///< Ignore Fuse Error (2: SBB, 3: SOC)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IFE_BF_OFF ( 2)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IFE_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IFE_BF_MSK (0x0000000C)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_IFE_BF_DEF (0x00000000)

///< SKIP Memory Repair - skips over memory repair states in boot flow
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SKIPMR_BF_OFF ( 4)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SKIPMR_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SKIPMR_BF_MSK (0x00000010)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SKIPMR_BF_DEF (0x00000000)

///< ATE HOLD - stops boot FSM permanently until next power-on reset.
///< ATE can then set any other control bits and initiate any manual flow
///< NO RE-ENTRY TO HW BOOT FLOW; requires a power-on reset
#define SYS_CTRL_DFX_BOOTDBG_CTRL_ATEH_BF_OFF ( 7)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_ATEH_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_ATEH_BF_MSK (0x00000080)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_ATEH_BF_DEF (0x00000000)

///< Force Memory Repair Done 1 and 2
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FMRD_BF_OFF ( 8)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FMRD_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FMRD_BF_MSK (0x00000300)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FMRD_BF_DEF (0x00000000)

///< Force Fuse Pull Done
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFPD_BF_OFF (10)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFPD_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFPD_BF_MSK (0x00000400)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFPD_BF_DEF (0x00000000)

///< Force Fuse Distribution Done
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFDD_BF_OFF (11)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFDD_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFDD_BF_MSK (0x00000800)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_FFDD_BF_DEF (0x00000000)

///< Disable Thermal Trip Reset function. Prevent the DTS Thermal trip
///< output from generating an internal cold reset. Unblocks Boot FSM progress
///< (which will stall if ThermTrip is detected).
#define SYS_CTRL_DFX_BOOTDBG_CTRL_TTRIPRD_BF_OFF (16)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_TTRIPRD_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_TTRIPRD_BF_MSK (0x00010000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_TTRIPRD_BF_DEF (0x00000000)

///< Set all reset and alarm delays to a minimum value
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINRSTDELAYS_BF_OFF (26)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINRSTDELAYS_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINRSTDELAYS_BF_MSK (0x04000000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINRSTDELAYS_BF_DEF (0x00000000)

///< Set all state transition delays to a minimum value
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINSTATEDELAYS_BF_OFF (27)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINSTATEDELAYS_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINSTATEDELAYS_BF_MSK (0x08000000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_MINSTATEDELAYS_BF_DEF (0x00000000)

///< Single Step Internal Select Write 1 to set. When SingleStepEnable
///< and BDC_Enable are both set, writing a 1 wiil select the SingleStepAdvance
///< bit in this register as the control that advances the Boot FSM. Otherwise,
///< the external pin will control the Boot FSM advance.
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPINTSEL_BF_OFF (28)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPINTSEL_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPINTSEL_BF_MSK (0x10000000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPINTSEL_BF_DEF (0x00000000)

///< Single Step Advance Write 1 to set. When SingleStepEnable, SingleStepIntSel
///< and BDC_Enable are all set, writing a 1 to this bit wiil advance the
///< BootFSM to the next state, based on the normal state inputs. If the
///< conditions for advancing are not present, the BootFSM will not advance.
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPADVANCE_BF_OFF (29)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPADVANCE_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPADVANCE_BF_MSK (0x20000000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPADVANCE_BF_DEF (0x00000000)

///< Single Step Enable (sticky, power-up reset). When set, enables single
///< stepping of the Boot FSM.   Boot FSM will stop at each state and wait
///< for the Single Step Advance signal before continuing.
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPEN_BF_OFF (30)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPEN_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPEN_BF_MSK (0x40000000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_SINGLESTEPEN_BF_DEF (0x00000000)

///< Boot Debug Control Enable  (sticky, power-up reset). Requires RED
///< unlock. When set, enables all other bits in this register to control
///< the behavior of the Boot FSM.
#define SYS_CTRL_DFX_BOOTDBG_CTRL_BDC_EN_BF_OFF (31)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_BDC_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_BDC_EN_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_BDC_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BOOTDEBUG_RESETOVERRIDE register description at address offset 0x7e10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BootDebug_ResetOverride
  * Boot Debug Reset Override Register
  */

typedef union {
  struct {
    uint32_t OVR_RESET_SYSCON : 1;
    ///< Set to allow override of reset_syscon during boot.
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
    uint32_t OVR_RESET_SPI : 1;
    ///< Set to allow override of reset_spi during boot.
    ///< AccessType="RW/P/L" BitOffset="1" ResetValue="0x0"
    uint32_t OVR_COLD_RESET_RESERVE : 2;
    ///< Reserve for cold reset override
    ///< AccessType="RW/P" BitOffset="2" ResetValue="0x0"
    uint32_t OVR_RESET_ORION : 1;
    ///< Set to allow override of reset_orion during boot.
    ///< AccessType="RW/P/L" BitOffset="4" ResetValue="0x0"
    uint32_t OVR_RESET_RCS : 1;
    ///< Set to allow override of reset_rcs during boot.
    ///< AccessType="RW/P/L" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t OVR_RESET_DLNK_SUBFC : 1;
    ///< Set to allow override of reset_dlnk_subfc during boot.
    ///< AccessType="RW/P/L" BitOffset="7" ResetValue="0x0"
    uint32_t OVR_RESET_VEX_SUBFC : 1;
    ///< Set to allow override of reset_vex_subfc during boot.
    ///< AccessType="RW/P/L" BitOffset="8" ResetValue="0x0"
    uint32_t OVR_RESET_DRF_SUBFC : 2;
    ///< Set to allow override of reset_drf_subfc during boot.
    ///< AccessType="RW/P/L" BitOffset="9" ResetValue="0x0"
    uint32_t OVR_RESET_PLL : 2;
    ///< Set to allow override of reset_pll during boot.
    ///< AccessType="RW/P/L" BitOffset="11" ResetValue="0x0"
    uint32_t OVR_PWRUP_PLL : 2;
    ///< Set to allow override of pwrup_pll during boot.
    ///< AccessType="RW/P/L" BitOffset="13" ResetValue="0x0"
    uint32_t OVR_WARM_RESET_RESERVE : 5;
    ///< Reserve for warm reset override
    ///< AccessType="RW/P" BitOffset="15" ResetValue="0x0"
    uint32_t OVR_RESET_CORESIGHT : 1;
    ///< Set to allow override of reset_syscon during boot.
    ///< AccessType="RW/P/L" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bootdbg_rstovrd_reg_t;

#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_RD_MASK (0x001fffbfU)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_WR_MASK (0x001fffbfU)


///< Set to allow override of reset_syscon during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SYSCON_BF_OFF ( 0)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SYSCON_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SYSCON_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SYSCON_BF_DEF (0x00000000)

///< Set to allow override of reset_spi during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SPI_BF_OFF ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SPI_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SPI_BF_MSK (0x00000002)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_SPI_BF_DEF (0x00000000)

///< Reserve for cold reset override
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_COLD_RST_RESERVE_BF_OFF ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_COLD_RST_RESERVE_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_COLD_RST_RESERVE_BF_MSK (0x0000000C)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_COLD_RST_RESERVE_BF_DEF (0x00000000)

///< Set to allow override of reset_orion during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_ORION_BF_OFF ( 4)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_ORION_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_ORION_BF_MSK (0x00000010)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_ORION_BF_DEF (0x00000000)

///< Set to allow override of reset_rcs during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_RCS_BF_OFF ( 5)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_RCS_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_RCS_BF_MSK (0x00000020)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_RCS_BF_DEF (0x00000000)

///< Set to allow override of reset_dlnk_subfc during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DLNK_SUBFC_BF_OFF ( 7)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DLNK_SUBFC_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DLNK_SUBFC_BF_MSK (0x00000080)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DLNK_SUBFC_BF_DEF (0x00000000)

///< Set to allow override of reset_vex_subfc during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_VEX_SUBFC_BF_OFF ( 8)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_VEX_SUBFC_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_VEX_SUBFC_BF_MSK (0x00000100)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_VEX_SUBFC_BF_DEF (0x00000000)

///< Set to allow override of reset_drf_subfc during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DRF_SUBFC_BF_OFF ( 9)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DRF_SUBFC_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DRF_SUBFC_BF_MSK (0x00000600)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_DRF_SUBFC_BF_DEF (0x00000000)

///< Set to allow override of reset_pll during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_PLL_BF_OFF (11)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_PLL_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_PLL_BF_MSK (0x00001800)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_PLL_BF_DEF (0x00000000)

///< Set to allow override of pwrup_pll during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_PWRUP_PLL_BF_OFF (13)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_PWRUP_PLL_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_PWRUP_PLL_BF_MSK (0x00006000)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_PWRUP_PLL_BF_DEF (0x00000000)

///< Reserve for warm reset override
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_WARM_RST_RESERVE_BF_OFF (15)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_WARM_RST_RESERVE_BF_WID ( 5)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_WARM_RST_RESERVE_BF_MSK (0x000F8000)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_WARM_RST_RESERVE_BF_DEF (0x00000000)

///< Set to allow override of reset_syscon during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_CORESIGHT_BF_OFF (20)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_CORESIGHT_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_CORESIGHT_BF_MSK (0x00100000)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_OVR_RST_CORESIGHT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BOOTDEBUG_RESETVALUE register description at address offset 0x7e14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BootDebug_ResetValue
  * Boot Debug Reset Value Register
  */

typedef union {
  struct {
    uint32_t VAL_RESET_SYSCON : 1;
    ///< Override value of reset_syscon during boot.
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x0"
    uint32_t VAL_RESET_SPI : 1;
    ///< Override value of reset_spi during boot.
    ///< AccessType="RW/P" BitOffset="1" ResetValue="0x0"
    uint32_t VAL_COLD_RESET_RESERVE : 2;
    ///< Reserve for cold reset override values
    ///< AccessType="RW/P" BitOffset="2" ResetValue="0x0"
    uint32_t VAL_RESET_ORION : 1;
    ///< Override value of reset_orion during boot.
    ///< AccessType="RW/P" BitOffset="4" ResetValue="0x0"
    uint32_t VAL_RESET_RCS : 1;
    ///< Override value of reset_rcs during boot.
    ///< AccessType="RW/P" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t VAL_RESET_DLNK_SUBFC : 1;
    ///< Override value of reset_dlnk_subfc during boot.
    ///< AccessType="RW/P" BitOffset="7" ResetValue="0x0"
    uint32_t VAL_RESET_VEX_SUBFC : 1;
    ///< Override value of reset_vex_subfc during boot.
    ///< AccessType="RW/P" BitOffset="8" ResetValue="0x0"
    uint32_t VAL_RESET_DRF_SUBFC : 2;
    ///< Override value of reset_drf_subfc during boot.
    ///< AccessType="RW/P" BitOffset="9" ResetValue="0x0"
    uint32_t VAL_RESET_PLL : 2;
    ///< Override value of reset_pll during boot.
    ///< AccessType="RW/P" BitOffset="11" ResetValue="0x0"
    uint32_t VAL_PWRUP_PLL : 2;
    ///< Override value of pwrup_pll during boot.
    ///< AccessType="RW/P" BitOffset="13" ResetValue="0x0"
    uint32_t VAL_WARM_RESET_RESERVE : 5;
    ///< Reserve for warm reset override values
    ///< AccessType="RW/P" BitOffset="15" ResetValue="0x0"
    uint32_t VAL_RESET_CORESIGHT : 1;
    ///< Set to allow override of reset_syscon during boot.
    ///< AccessType="RW/P" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bootdbg_rstval_reg_t;

#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_RD_MASK (0x001fffbfU)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_WR_MASK (0x001fffbfU)


///< Override value of reset_syscon during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SYSCON_BF_OFF ( 0)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SYSCON_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SYSCON_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SYSCON_BF_DEF (0x00000000)

///< Override value of reset_spi during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SPI_BF_OFF ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SPI_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SPI_BF_MSK (0x00000002)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_SPI_BF_DEF (0x00000000)

///< Reserve for cold reset override values
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_COLD_RST_RESERVE_BF_OFF ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_COLD_RST_RESERVE_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_COLD_RST_RESERVE_BF_MSK (0x0000000C)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_COLD_RST_RESERVE_BF_DEF (0x00000000)

///< Override value of reset_orion during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_ORION_BF_OFF ( 4)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_ORION_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_ORION_BF_MSK (0x00000010)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_ORION_BF_DEF (0x00000000)

///< Override value of reset_rcs during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_RCS_BF_OFF ( 5)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_RCS_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_RCS_BF_MSK (0x00000020)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_RCS_BF_DEF (0x00000000)

///< Override value of reset_dlnk_subfc during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DLNK_SUBFC_BF_OFF ( 7)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DLNK_SUBFC_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DLNK_SUBFC_BF_MSK (0x00000080)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DLNK_SUBFC_BF_DEF (0x00000000)

///< Override value of reset_vex_subfc during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_VEX_SUBFC_BF_OFF ( 8)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_VEX_SUBFC_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_VEX_SUBFC_BF_MSK (0x00000100)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_VEX_SUBFC_BF_DEF (0x00000000)

///< Override value of reset_drf_subfc during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DRF_SUBFC_BF_OFF ( 9)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DRF_SUBFC_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DRF_SUBFC_BF_MSK (0x00000600)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_DRF_SUBFC_BF_DEF (0x00000000)

///< Override value of reset_pll during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_PLL_BF_OFF (11)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_PLL_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_PLL_BF_MSK (0x00001800)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_PLL_BF_DEF (0x00000000)

///< Override value of pwrup_pll during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_PWRUP_PLL_BF_OFF (13)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_PWRUP_PLL_BF_WID ( 2)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_PWRUP_PLL_BF_MSK (0x00006000)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_PWRUP_PLL_BF_DEF (0x00000000)

///< Reserve for warm reset override values
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_WARM_RST_RESERVE_BF_OFF (15)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_WARM_RST_RESERVE_BF_WID ( 5)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_WARM_RST_RESERVE_BF_MSK (0x000F8000)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_WARM_RST_RESERVE_BF_DEF (0x00000000)

///< Set to allow override of reset_syscon during boot.
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_CORESIGHT_BF_OFF (20)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_CORESIGHT_BF_WID ( 1)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_CORESIGHT_BF_MSK (0x00100000)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_VAL_RST_CORESIGHT_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_GPIOEAST_CONTROL register description at address offset 0x7e18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/GPIOEast_Control
  * GPIO East Control Register
  */

typedef union {
  struct {
    uint32_t GPIO_EAST_SEL : 2;
    ///< GPIO East Select
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_dfx_gpioeast_ctrl_reg_t;

#define SYS_CTRL_DFX_GPIOEAST_CTRL_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_GPIOEAST_CTRL_RD_MASK (0x00000003U)
#define SYS_CTRL_DFX_GPIOEAST_CTRL_WR_MASK (0x00000003U)


///< GPIO East Select
#define SYS_CTRL_DFX_GPIOEAST_CTRL_GPIO_EAST_SEL_BF_OFF ( 0)
#define SYS_CTRL_DFX_GPIOEAST_CTRL_GPIO_EAST_SEL_BF_WID ( 2)
#define SYS_CTRL_DFX_GPIOEAST_CTRL_GPIO_EAST_SEL_BF_MSK (0x00000003)
#define SYS_CTRL_DFX_GPIOEAST_CTRL_GPIO_EAST_SEL_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_DEBUGMUX_CONTROL register description at address offset 0x7e1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/DebugMux_Control
  * Debug Mux Control Register
  */

typedef union {
  struct {
    uint32_t DEBUG_SEL : 32;
    ///< Debug mux selects
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_dbgmux_ctrl_reg_t;

#define SYS_CTRL_DFX_DBGMUX_CTRL_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_DBGMUX_CTRL_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_DBGMUX_CTRL_WR_MASK (0xffffffffU)


///< Debug mux selects
#define SYS_CTRL_DFX_DBGMUX_CTRL_DBG_SEL_BF_OFF ( 0)
#define SYS_CTRL_DFX_DBGMUX_CTRL_DBG_SEL_BF_WID (32)
#define SYS_CTRL_DFX_DBGMUX_CTRL_DBG_SEL_BF_MSK (0xFFFFFFFF)
#define SYS_CTRL_DFX_DBGMUX_CTRL_DBG_SEL_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_MEM_TRIM_OVRD1 register description at address offset 0x7e20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/Mem_Trim_OVRD1
  * Memory Trim Override Register 1
  */

typedef union {
  struct {
    uint32_t MAIN_ROM : 5;
    ///< MAIN ROM Trim override values (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t MAIN_HD2PRF : 6;
    ///< MAIN HD2PRF Trim override values (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t FAST_HD2PRF : 6;
    ///< FAST HD2PRF Trim override values (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t MAIN_ROM_V : 1;
    ///< MAIN ROM Trim override VALID (sticky, power-up reset).
    ///< AccessType="RW/P/L" BitOffset="24" ResetValue="0x0"
    uint32_t MAIN_HD2PRF_V : 1;
    ///< MAIN HD2PRF Trim override VALID (sticky, power-up reset).
    ///< AccessType="RW/P/L" BitOffset="25" ResetValue="0x0"
    uint32_t FAST_HD2PRF_V : 1;
    ///< FAST HD2PRF Trim override VALID (sticky, power-up reset).
    ///< AccessType="RW/P/L" BitOffset="26" ResetValue="0x0"
    uint32_t MAIN_HDSPSR_V : 1;
    ///< MAIN HDSPSR Trim override VALID (sticky, power-up reset).
    ///< AccessType="RW/P/L" BitOffset="27" ResetValue="0x0"
    uint32_t FAST_HDSPSR_V : 1;
    ///< FAST HDSPSR Trim override VALID (sticky, power-up reset).
    ///< AccessType="RW/P/L" BitOffset="28" ResetValue="0x0"
    uint32_t TRIM_OSEL : 1;
    ///< Trim override select  (sticky, power-up reset). Requires RED unlock.
    ///< When set, will enable override of Memory, BGR and LDO trims based
    ///< on VALID bits (*_V) in the TRIM_OVRD registers. Also qualifies TRIM_OVAL.
    ///< Overrides will propagate only when TRIM_OVAL is set.
    ///< AccessType="RW/P/L" BitOffset="29" ResetValue="0x0"
    uint32_t TRIM_OVAL : 1;
    ///< Trim override valid. Write 1 to set, clears at the end of the trim_serial
    ///< transmission. Qualified with TRIM_OSEL, externally.  When set with
    ///< TRIM_OSEL=1, will will cause Trim Serializer/Deserializer to redistribute
    ///< the Memory, BGR and LDO trim values based on the contents of the TRIM_OVRD
    ///< registers. Set with TRIM_OSEL=0 will have no effect. Values from these
    ///< registers with VALID bits set (*_V) will replace actual fuse values,
    ///< otherwise fuse values will be resent.
    ///< AccessType="RW/V/P/L" BitOffset="30" ResetValue="0x0"
    uint32_t MEM_TRIM_SRESET : 1;
    ///< Memory Trim Synchronous Reset Write 1 to set, clears at the end of
    ///< the trim_serial transimission Qualified with TRIM_OSEL, externally.
    ///< When set with TRIM_OSEL=1, will will cause Trim Serializer send a
    ///< synchronous reset command to all Trim Deserializer modules. Note that
    ///< a synchronous reset will only affect the Memory Trims.  The BGR/LDO
    ///< Trims will be updated according to the TRIM_OVRD contents. Set with
    ///< TRIM_OSEL=0 will have no effect.
    ///< AccessType="RW/V/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_mem_trim_ovrd1_reg_t;

#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_RD_MASK (0xff3f3f1fU)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_WR_MASK (0xff3f3f1fU)


///< MAIN ROM Trim override values (sticky, power-up reset)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_BF_OFF ( 0)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_BF_WID ( 5)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_BF_MSK (0x0000001F)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_BF_DEF (0x00000000)

///< MAIN HD2PRF Trim override values (sticky, power-up reset)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_BF_OFF ( 8)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_BF_WID ( 6)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_BF_MSK (0x00003F00)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_BF_DEF (0x00000000)

///< FAST HD2PRF Trim override values (sticky, power-up reset)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_BF_OFF (16)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_BF_WID ( 6)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_BF_MSK (0x003F0000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_BF_DEF (0x00000000)

///< MAIN ROM Trim override VALID (sticky, power-up reset).
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_V_BF_OFF (24)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_V_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_V_BF_MSK (0x01000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_ROM_V_BF_DEF (0x00000000)

///< MAIN HD2PRF Trim override VALID (sticky, power-up reset).
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_V_BF_OFF (25)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_V_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_V_BF_MSK (0x02000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HD2PRF_V_BF_DEF (0x00000000)

///< FAST HD2PRF Trim override VALID (sticky, power-up reset).
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_V_BF_OFF (26)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_V_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_V_BF_MSK (0x04000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HD2PRF_V_BF_DEF (0x00000000)

///< MAIN HDSPSR Trim override VALID (sticky, power-up reset).
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HDSPSR_V_BF_OFF (27)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HDSPSR_V_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HDSPSR_V_BF_MSK (0x08000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MAIN_HDSPSR_V_BF_DEF (0x00000000)

///< FAST HDSPSR Trim override VALID (sticky, power-up reset).
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HDSPSR_V_BF_OFF (28)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HDSPSR_V_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HDSPSR_V_BF_MSK (0x10000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_FAST_HDSPSR_V_BF_DEF (0x00000000)

///< Trim override select  (sticky, power-up reset). Requires RED unlock.
///< When set, will enable override of Memory, BGR and LDO trims based
///< on VALID bits (*_V) in the TRIM_OVRD registers. Also qualifies TRIM_OVAL.
///< Overrides will propagate only when TRIM_OVAL is set.
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OSEL_BF_OFF (29)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OSEL_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OSEL_BF_MSK (0x20000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OSEL_BF_DEF (0x00000000)

///< Trim override valid. Write 1 to set, clears at the end of the trim_serial
///< transmission. Qualified with TRIM_OSEL, externally.  When set with
///< TRIM_OSEL=1, will will cause Trim Serializer/Deserializer to redistribute
///< the Memory, BGR and LDO trim values based on the contents of the TRIM_OVRD
///< registers. Set with TRIM_OSEL=0 will have no effect. Values from these
///< registers with VALID bits set (*_V) will replace actual fuse values,
///< otherwise fuse values will be resent.
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OVAL_BF_OFF (30)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OVAL_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OVAL_BF_MSK (0x40000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_TRIM_OVAL_BF_DEF (0x00000000)

///< Memory Trim Synchronous Reset Write 1 to set, clears at the end of
///< the trim_serial transimission Qualified with TRIM_OSEL, externally.
///< When set with TRIM_OSEL=1, will will cause Trim Serializer send a
///< synchronous reset command to all Trim Deserializer modules. Note that
///< a synchronous reset will only affect the Memory Trims.  The BGR/LDO
///< Trims will be updated according to the TRIM_OVRD contents. Set with
///< TRIM_OSEL=0 will have no effect.
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MEM_TRIM_SRST_BF_OFF (31)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MEM_TRIM_SRST_BF_WID ( 1)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MEM_TRIM_SRST_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_MEM_TRIM_SRST_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_MEM_TRIM_OVRD2 register description at address offset 0x7e24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/Mem_Trim_OVRD2
  * Memory Trim Override Register 2
  */

typedef union {
  struct {
    uint32_t MAIN_HDSPSR : 16;
    ///< MAIN HDSPSR Trim override values (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x0"
    uint32_t FAST_HDSPSR : 16;
    ///< FAST HDSPSR Trim override values (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_mem_trim_ovrd2_reg_t;

#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_WR_MASK (0xffffffffU)


///< MAIN HDSPSR Trim override values (sticky, power-up reset)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_MAIN_HDSPSR_BF_OFF ( 0)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_MAIN_HDSPSR_BF_WID (16)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_MAIN_HDSPSR_BF_MSK (0x0000FFFF)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_MAIN_HDSPSR_BF_DEF (0x00000000)

///< FAST HDSPSR Trim override values (sticky, power-up reset)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_FAST_HDSPSR_BF_OFF (16)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_FAST_HDSPSR_BF_WID (16)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_FAST_HDSPSR_BF_MSK (0xFFFF0000)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_FAST_HDSPSR_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_LB_TRIM_OVRD1 register description at address offset 0x7e28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/LB_Trim_OVRD1
  * LDO/BGR Trim Override Register 1
  */

typedef union {
  struct {
    uint32_t BGR0_OFFSET : 8;
    ///< OFFSET trim override values for BGR 0 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x0"
    uint32_t BGR0_TEMP_COEFF : 8;
    ///< TEMP_COEFF trim override values for BGR 0 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="8" ResetValue="0x0"
    uint32_t BGR1_OFFSET : 8;
    ///< OFFSET trim override values for BGR 1 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
    uint32_t BGR1_TEMP_COEFF : 8;
    ///< TEMP_COEFF trim override values for BGR 1 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_lb_trim_ovrd1_reg_t;

#define SYS_CTRL_DFX_LB_TRIM_OVRD1_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_WR_MASK (0xffffffffU)


///< OFFSET trim override values for BGR 0 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_OFFSET_BF_OFF ( 0)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_OFFSET_BF_WID ( 8)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_OFFSET_BF_MSK (0x000000FF)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_OFFSET_BF_DEF (0x00000000)

///< TEMP_COEFF trim override values for BGR 0 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_TEMP_COEFF_BF_OFF ( 8)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_TEMP_COEFF_BF_WID ( 8)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_TEMP_COEFF_BF_MSK (0x0000FF00)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR0_TEMP_COEFF_BF_DEF (0x00000000)

///< OFFSET trim override values for BGR 1 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_OFFSET_BF_OFF (16)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_OFFSET_BF_WID ( 8)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_OFFSET_BF_MSK (0x00FF0000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_OFFSET_BF_DEF (0x00000000)

///< TEMP_COEFF trim override values for BGR 1 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_TEMP_COEFF_BF_OFF (24)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_TEMP_COEFF_BF_WID ( 8)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_TEMP_COEFF_BF_MSK (0xFF000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_BGR1_TEMP_COEFF_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_LB_TRIM_OVRD2 register description at address offset 0x7e2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/LB_Trim_OVRD2
  * LDO/BGR Trim Override Register 2
  */

typedef union {
  struct {
    uint32_t BGR0_UPDLY : 2;
    ///< CONFIGURATION UP DELAY trim override values for BGR 0 (sticky, power-up
    ///< reset)
    ///< AccessType="RW/P" BitOffset="0" ResetValue="0x0"
    uint32_t BGR1_UPDLY : 2;
    ///< CONFIGURATION UP DELAY trim override values for BGR 1 (sticky, power-up
    ///< reset)
    ///< AccessType="RW/P" BitOffset="2" ResetValue="0x0"
    uint32_t LDO0_TRIM : 5;
    ///< Trim override value for LDO 0 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="4" ResetValue="0x0"
    uint32_t LDO1_TRIM : 5;
    ///< Trim override value for LDO 1 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="9" ResetValue="0x0"
    uint32_t LDO2_TRIM : 5;
    ///< Trim override value for LDO 2 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="14" ResetValue="0x0"
    uint32_t LDO3_TRIM : 5;
    ///< Trim override value for LDO 3 (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="19" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t BGR0_V : 1;
    ///< Valid bit for BGR0 overrides (sticky, power-up reset)
    ///< AccessType="RW/P/L" BitOffset="26" ResetValue="0x0"
    uint32_t BGR1_V : 1;
    ///< Valid bit for BGR1 overrides (sticky, power-up reset)
    ///< AccessType="RW/P/L" BitOffset="27" ResetValue="0x0"
    uint32_t LDO0_V : 1;
    ///< Valid bit for LDO 0 overrides (sticky, power-up reset)
    ///< AccessType="RW/P/L" BitOffset="28" ResetValue="0x0"
    uint32_t LDO1_V : 1;
    ///< Valid bit for LDO 1 overrides (sticky, power-up reset)
    ///< AccessType="RW/P/L" BitOffset="29" ResetValue="0x0"
    uint32_t LDO2_V : 1;
    ///< Valid bit for LDO 2 overrides (sticky, power-up reset)
    ///< AccessType="RW/P/L" BitOffset="30" ResetValue="0x0"
    uint32_t LDO3_V : 1;
    ///< Valid bit for LDO 3 overrides (sticky, power-up reset)
    ///< AccessType="RW/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_lb_trim_ovrd2_reg_t;

#define SYS_CTRL_DFX_LB_TRIM_OVRD2_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_RD_MASK (0xfcffffffU)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_WR_MASK (0xfcffffffU)


///< CONFIGURATION UP DELAY trim override values for BGR 0 (sticky, power-up
///< reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_UPDLY_BF_OFF ( 0)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_UPDLY_BF_WID ( 2)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_UPDLY_BF_MSK (0x00000003)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_UPDLY_BF_DEF (0x00000000)

///< CONFIGURATION UP DELAY trim override values for BGR 1 (sticky, power-up
///< reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_UPDLY_BF_OFF ( 2)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_UPDLY_BF_WID ( 2)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_UPDLY_BF_MSK (0x0000000C)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_UPDLY_BF_DEF (0x00000000)

///< Trim override value for LDO 0 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_TRIM_BF_OFF ( 4)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_TRIM_BF_WID ( 5)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_TRIM_BF_MSK (0x000001F0)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_TRIM_BF_DEF (0x00000000)

///< Trim override value for LDO 1 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_TRIM_BF_OFF ( 9)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_TRIM_BF_WID ( 5)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_TRIM_BF_MSK (0x00003E00)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_TRIM_BF_DEF (0x00000000)

///< Trim override value for LDO 2 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_TRIM_BF_OFF (14)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_TRIM_BF_WID ( 5)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_TRIM_BF_MSK (0x0007C000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_TRIM_BF_DEF (0x00000000)

///< Trim override value for LDO 3 (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_TRIM_BF_OFF (19)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_TRIM_BF_WID ( 5)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_TRIM_BF_MSK (0x00F80000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_TRIM_BF_DEF (0x00000000)

///< Valid bit for BGR0 overrides (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_V_BF_OFF (26)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_V_BF_WID ( 1)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_V_BF_MSK (0x04000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR0_V_BF_DEF (0x00000000)

///< Valid bit for BGR1 overrides (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_V_BF_OFF (27)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_V_BF_WID ( 1)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_V_BF_MSK (0x08000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_BGR1_V_BF_DEF (0x00000000)

///< Valid bit for LDO 0 overrides (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_V_BF_OFF (28)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_V_BF_WID ( 1)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_V_BF_MSK (0x10000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO0_V_BF_DEF (0x00000000)

///< Valid bit for LDO 1 overrides (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_V_BF_OFF (29)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_V_BF_WID ( 1)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_V_BF_MSK (0x20000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO1_V_BF_DEF (0x00000000)

///< Valid bit for LDO 2 overrides (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_V_BF_OFF (30)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_V_BF_WID ( 1)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_V_BF_MSK (0x40000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO2_V_BF_DEF (0x00000000)

///< Valid bit for LDO 3 overrides (sticky, power-up reset)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_V_BF_OFF (31)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_V_BF_WID ( 1)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_V_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_LDO3_V_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_FSLDO_STATUSOVRD register description at address offset 0x7e40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/FSLDO_StatusOvrd
  * Functional Fuse Sense LDO Status and Override Register
  */

typedef union {
  struct {
    uint32_t ISTATUS : 8;
    ///< LDO Raw ISTATUS output.  Only bit 0 is defined, currently, as digmuxout,
    ///< controlled by LDO digmuxsel (ICONFIG bits 15:13, Fuse Sense LDO Control
    ///< Register):  digmuxsel=000, powergood digmuxsel=001, ldo_en digmuxsel=010,
    ///< fuse_sip2hip digmuxsel=011, bypass_en
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t PWRGOOD : 1;
    ///< LDO Power Good (Captured digmuxout, when digmuxsel=000).
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t LDOCTL_ISO : 1;
    ///< LDO Control Isolation (RED access only). Prevents HW from changing
    ///< LDO Control Register.
    ///< AccessType="RW/P/L" BitOffset="30" ResetValue="0x0"
    uint32_t LDOCTL_EN : 1;
    ///< LDO DFT Enable (RED access only). Enables FW/TAP access to LDO Control
    ///< Register for DFT.
    ///< AccessType="RW/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_fsldo_statovrd_reg_t;

#define SYS_CTRL_DFX_FSLDO_STATOVRD_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_RD_MASK (0xc00100ffU)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_WR_MASK (0xc0000000U)


///< LDO Raw ISTATUS output.  Only bit 0 is defined, currently, as digmuxout,
///< controlled by LDO digmuxsel (ICONFIG bits 15:13, Fuse Sense LDO Control
///< Register):  digmuxsel=000, powergood digmuxsel=001, ldo_en digmuxsel=010,
///< fuse_sip2hip digmuxsel=011, bypass_en
#define SYS_CTRL_DFX_FSLDO_STATOVRD_ISTAT_BF_OFF ( 0)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_ISTAT_BF_WID ( 8)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_ISTAT_BF_MSK (0x000000FF)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_ISTAT_BF_DEF (0x00000000)

///< LDO Power Good (Captured digmuxout, when digmuxsel=000).
#define SYS_CTRL_DFX_FSLDO_STATOVRD_PWRGOOD_BF_OFF (16)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_PWRGOOD_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_PWRGOOD_BF_MSK (0x00010000)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_PWRGOOD_BF_DEF (0x00000000)

///< LDO Control Isolation (RED access only). Prevents HW from changing
///< LDO Control Register.
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_ISO_BF_OFF (30)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_ISO_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_ISO_BF_MSK (0x40000000)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_ISO_BF_DEF (0x00000000)

///< LDO DFT Enable (RED access only). Enables FW/TAP access to LDO Control
///< Register for DFT.
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_EN_BF_OFF (31)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_EN_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_LDOCTL_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BSLDO_STATUSOVRD register description at address offset 0x7e44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BSLDO_StatusOvrd
  * BISR Fuse Sense LDO Status and Override Register
  */

typedef union {
  struct {
    uint32_t ISTATUS : 8;
    ///< LDO Raw ISTATUS output.  Only bit 0 is defined, currently, as digmuxout,
    ///< controlled by LDO digmuxsel (ICONFIG bits 15:13, Fuse Sense LDO Control
    ///< Register):  digmuxsel=000, powergood digmuxsel=001, ldo_en digmuxsel=010,
    ///< fuse_sip2hip digmuxsel=011, bypass_en
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t PWRGOOD : 1;
    ///< LDO Power Good (Captured digmuxout, when digmuxsel=000).
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t LDOCTL_ISO : 1;
    ///< LDO Control Isolation (RED access only). Prevents HW from changing
    ///< LDO Control Register.
    ///< AccessType="RW/P/L" BitOffset="30" ResetValue="0x0"
    uint32_t LDOCTL_EN : 1;
    ///< LDO DFT Enable (RED access only). Enables FW/TAP access to LDO Control
    ///< Register for DFT.
    ///< AccessType="RW/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bsldo_statovrd_reg_t;

#define SYS_CTRL_DFX_BSLDO_STATOVRD_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_RD_MASK (0xc00100ffU)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_WR_MASK (0xc0000000U)


///< LDO Raw ISTATUS output.  Only bit 0 is defined, currently, as digmuxout,
///< controlled by LDO digmuxsel (ICONFIG bits 15:13, Fuse Sense LDO Control
///< Register):  digmuxsel=000, powergood digmuxsel=001, ldo_en digmuxsel=010,
///< fuse_sip2hip digmuxsel=011, bypass_en
#define SYS_CTRL_DFX_BSLDO_STATOVRD_ISTAT_BF_OFF ( 0)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_ISTAT_BF_WID ( 8)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_ISTAT_BF_MSK (0x000000FF)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_ISTAT_BF_DEF (0x00000000)

///< LDO Power Good (Captured digmuxout, when digmuxsel=000).
#define SYS_CTRL_DFX_BSLDO_STATOVRD_PWRGOOD_BF_OFF (16)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_PWRGOOD_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_PWRGOOD_BF_MSK (0x00010000)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_PWRGOOD_BF_DEF (0x00000000)

///< LDO Control Isolation (RED access only). Prevents HW from changing
///< LDO Control Register.
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_ISO_BF_OFF (30)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_ISO_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_ISO_BF_MSK (0x40000000)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_ISO_BF_DEF (0x00000000)

///< LDO DFT Enable (RED access only). Enables FW/TAP access to LDO Control
///< Register for DFT.
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_EN_BF_OFF (31)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_EN_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_LDOCTL_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_FSLDO_CONTROL register description at address offset 0x7e48
  *
  * Register default value:        0x00000036
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/FSLDO_Control
  * Functional Fuse Sense LDO Control Register
  */

typedef union {
  struct {
    uint32_t ISSUP1P2 : 1;
    ///< Input voltage select (0=1.8v, 1=1.2v)
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
    uint32_t IASTIM_ERRAMP : 3;
    ///< Trim error amp bias select
    ///< AccessType="RW/P/L" BitOffset="1" ResetValue="0x3"
    uint32_t TRIMSEL : 4;
    ///< LDO voltage output select (default 0x3 = 800 mV)
    ///< AccessType="RW/P/L" BitOffset="4" ResetValue="0x3"
    uint32_t LVOP : 1;
    ///< Low output voltage operation
    ///< AccessType="RW/P/L" BitOffset="8" ResetValue="0x0"
    uint32_t AMONEN : 1;
    ///< Analog voltage monitor enable
    ///< AccessType="RW/P/L" BitOffset="9" ResetValue="0x0"
    uint32_t AMONSEL : 3;
    ///< Analog voltage monitor select
    ///< AccessType="RW/P/L" BitOffset="10" ResetValue="0x0"
    uint32_t DIGMUXSEL : 3;
    ///< DFT digital 8:1 mux select
    ///< AccessType="RW/P/L" BitOffset="13" ResetValue="0x0"
    uint32_t BLD_EN : 1;
    ///< Bleeder enable
    ///< AccessType="RW/P/L" BitOffset="16" ResetValue="0x0"
    uint32_t BLD_TR : 6;
    ///< Bleeder strength
    ///< AccessType="RW/P/L" BitOffset="17" ResetValue="0x0"
    uint32_t LKGCTRL : 2;
    ///< Leakage control
    ///< AccessType="RW/P/L" BitOffset="23" ResetValue="0x0"
    uint32_t BYPASS : 1;
    ///< Bypass LDO
    ///< AccessType="RW/P/L" BitOffset="25" ResetValue="0x0"
    uint32_t LDOAUX_EN : 1;
    ///< Reserved to enable aux circuits
    ///< AccessType="RW/P/L" BitOffset="26" ResetValue="0x0"
    uint32_t CFG_AUX : 4;
    ///< Reserved to configure aux circuits
    ///< AccessType="RW/P/L" BitOffset="27" ResetValue="0x0"
    uint32_t ENABLE : 1;
    ///< SenseLDO Enable
    ///< AccessType="RW/V/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_fsldo_ctrl_reg_t;

#define SYS_CTRL_DFX_FSLDO_CTRL_DEFAULT (0x00000036U)
#define SYS_CTRL_DFX_FSLDO_CTRL_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_FSLDO_CTRL_WR_MASK (0xffffffffU)


///< Input voltage select (0=1.8v, 1=1.2v)
#define SYS_CTRL_DFX_FSLDO_CTRL_ISSUP1P2_BF_OFF ( 0)
#define SYS_CTRL_DFX_FSLDO_CTRL_ISSUP1P2_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_ISSUP1P2_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_FSLDO_CTRL_ISSUP1P2_BF_DEF (0x00000000)

///< Trim error amp bias select
#define SYS_CTRL_DFX_FSLDO_CTRL_IASTIM_ERRAMP_BF_OFF ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_IASTIM_ERRAMP_BF_WID ( 3)
#define SYS_CTRL_DFX_FSLDO_CTRL_IASTIM_ERRAMP_BF_MSK (0x0000000E)
#define SYS_CTRL_DFX_FSLDO_CTRL_IASTIM_ERRAMP_BF_DEF (0x00000006)

///< LDO voltage output select (default 0x3 = 800 mV)
#define SYS_CTRL_DFX_FSLDO_CTRL_TRIMSEL_BF_OFF ( 4)
#define SYS_CTRL_DFX_FSLDO_CTRL_TRIMSEL_BF_WID ( 4)
#define SYS_CTRL_DFX_FSLDO_CTRL_TRIMSEL_BF_MSK (0x000000F0)
#define SYS_CTRL_DFX_FSLDO_CTRL_TRIMSEL_BF_DEF (0x00000030)

///< Low output voltage operation
#define SYS_CTRL_DFX_FSLDO_CTRL_LVOP_BF_OFF ( 8)
#define SYS_CTRL_DFX_FSLDO_CTRL_LVOP_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_LVOP_BF_MSK (0x00000100)
#define SYS_CTRL_DFX_FSLDO_CTRL_LVOP_BF_DEF (0x00000000)

///< Analog voltage monitor enable
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONEN_BF_OFF ( 9)
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONEN_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONEN_BF_MSK (0x00000200)
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONEN_BF_DEF (0x00000000)

///< Analog voltage monitor select
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONSEL_BF_OFF (10)
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONSEL_BF_WID ( 3)
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONSEL_BF_MSK (0x00001C00)
#define SYS_CTRL_DFX_FSLDO_CTRL_AMONSEL_BF_DEF (0x00000000)

///< DFT digital 8:1 mux select
#define SYS_CTRL_DFX_FSLDO_CTRL_DIGMUXSEL_BF_OFF (13)
#define SYS_CTRL_DFX_FSLDO_CTRL_DIGMUXSEL_BF_WID ( 3)
#define SYS_CTRL_DFX_FSLDO_CTRL_DIGMUXSEL_BF_MSK (0x0000E000)
#define SYS_CTRL_DFX_FSLDO_CTRL_DIGMUXSEL_BF_DEF (0x00000000)

///< Bleeder enable
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_EN_BF_OFF (16)
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_EN_BF_MSK (0x00010000)
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_EN_BF_DEF (0x00000000)

///< Bleeder strength
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_TR_BF_OFF (17)
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_TR_BF_WID ( 6)
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_TR_BF_MSK (0x007E0000)
#define SYS_CTRL_DFX_FSLDO_CTRL_BLD_TR_BF_DEF (0x00000000)

///< Leakage control
#define SYS_CTRL_DFX_FSLDO_CTRL_LKGCTRL_BF_OFF (23)
#define SYS_CTRL_DFX_FSLDO_CTRL_LKGCTRL_BF_WID ( 2)
#define SYS_CTRL_DFX_FSLDO_CTRL_LKGCTRL_BF_MSK (0x01800000)
#define SYS_CTRL_DFX_FSLDO_CTRL_LKGCTRL_BF_DEF (0x00000000)

///< Bypass LDO
#define SYS_CTRL_DFX_FSLDO_CTRL_BYP_BF_OFF (25)
#define SYS_CTRL_DFX_FSLDO_CTRL_BYP_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_BYP_BF_MSK (0x02000000)
#define SYS_CTRL_DFX_FSLDO_CTRL_BYP_BF_DEF (0x00000000)

///< Reserved to enable aux circuits
#define SYS_CTRL_DFX_FSLDO_CTRL_LDOAUX_EN_BF_OFF (26)
#define SYS_CTRL_DFX_FSLDO_CTRL_LDOAUX_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_LDOAUX_EN_BF_MSK (0x04000000)
#define SYS_CTRL_DFX_FSLDO_CTRL_LDOAUX_EN_BF_DEF (0x00000000)

///< Reserved to configure aux circuits
#define SYS_CTRL_DFX_FSLDO_CTRL_CFG_AUX_BF_OFF (27)
#define SYS_CTRL_DFX_FSLDO_CTRL_CFG_AUX_BF_WID ( 4)
#define SYS_CTRL_DFX_FSLDO_CTRL_CFG_AUX_BF_MSK (0x78000000)
#define SYS_CTRL_DFX_FSLDO_CTRL_CFG_AUX_BF_DEF (0x00000000)

///< SenseLDO Enable
#define SYS_CTRL_DFX_FSLDO_CTRL_EN_BF_OFF (31)
#define SYS_CTRL_DFX_FSLDO_CTRL_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_FSLDO_CTRL_EN_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_FSLDO_CTRL_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BSLDO_CONTROL register description at address offset 0x7e4c
  *
  * Register default value:        0x00000036
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BSLDO_Control
  * BISR Fuse Sense LDO Control Register
  */

typedef union {
  struct {
    uint32_t ISSUP1P2 : 1;
    ///< Input voltage select (0=1.8v, 1=1.2v)
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
    uint32_t IASTIM_ERRAMP : 3;
    ///< Trim error amp bias select
    ///< AccessType="RW/P/L" BitOffset="1" ResetValue="0x3"
    uint32_t TRIMSEL : 4;
    ///< LDO voltage output select (default 0x3 = 800 mV)
    ///< AccessType="RW/P/L" BitOffset="4" ResetValue="0x3"
    uint32_t LVOP : 1;
    ///< Low output voltage operation
    ///< AccessType="RW/P/L" BitOffset="8" ResetValue="0x0"
    uint32_t AMONEN : 1;
    ///< Analog voltage monitor enable
    ///< AccessType="RW/P/L" BitOffset="9" ResetValue="0x0"
    uint32_t AMONSEL : 3;
    ///< Analog voltage monitor select
    ///< AccessType="RW/P/L" BitOffset="10" ResetValue="0x0"
    uint32_t DIGMUXSEL : 3;
    ///< DFT digital 8:1 mux select
    ///< AccessType="RW/P/L" BitOffset="13" ResetValue="0x0"
    uint32_t BLD_EN : 1;
    ///< Bleeder enable
    ///< AccessType="RW/P/L" BitOffset="16" ResetValue="0x0"
    uint32_t BLD_TR : 6;
    ///< Bleeder strength
    ///< AccessType="RW/P/L" BitOffset="17" ResetValue="0x0"
    uint32_t LKGCTRL : 2;
    ///< Leakage control
    ///< AccessType="RW/P/L" BitOffset="23" ResetValue="0x0"
    uint32_t BYPASS : 1;
    ///< Bypass LDO
    ///< AccessType="RW/P/L" BitOffset="25" ResetValue="0x0"
    uint32_t LDOAUX_EN : 1;
    ///< Reserved to enable aux circuits
    ///< AccessType="RW/P/L" BitOffset="26" ResetValue="0x0"
    uint32_t CFG_AUX : 4;
    ///< Reserved to configure aux circuits
    ///< AccessType="RW/P/L" BitOffset="27" ResetValue="0x0"
    uint32_t ENABLE : 1;
    ///< SenseLDO Enable
    ///< AccessType="RW/V/P/L" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bsldo_ctrl_reg_t;

#define SYS_CTRL_DFX_BSLDO_CTRL_DEFAULT (0x00000036U)
#define SYS_CTRL_DFX_BSLDO_CTRL_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_BSLDO_CTRL_WR_MASK (0xffffffffU)


///< Input voltage select (0=1.8v, 1=1.2v)
#define SYS_CTRL_DFX_BSLDO_CTRL_ISSUP1P2_BF_OFF ( 0)
#define SYS_CTRL_DFX_BSLDO_CTRL_ISSUP1P2_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_ISSUP1P2_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_BSLDO_CTRL_ISSUP1P2_BF_DEF (0x00000000)

///< Trim error amp bias select
#define SYS_CTRL_DFX_BSLDO_CTRL_IASTIM_ERRAMP_BF_OFF ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_IASTIM_ERRAMP_BF_WID ( 3)
#define SYS_CTRL_DFX_BSLDO_CTRL_IASTIM_ERRAMP_BF_MSK (0x0000000E)
#define SYS_CTRL_DFX_BSLDO_CTRL_IASTIM_ERRAMP_BF_DEF (0x00000006)

///< LDO voltage output select (default 0x3 = 800 mV)
#define SYS_CTRL_DFX_BSLDO_CTRL_TRIMSEL_BF_OFF ( 4)
#define SYS_CTRL_DFX_BSLDO_CTRL_TRIMSEL_BF_WID ( 4)
#define SYS_CTRL_DFX_BSLDO_CTRL_TRIMSEL_BF_MSK (0x000000F0)
#define SYS_CTRL_DFX_BSLDO_CTRL_TRIMSEL_BF_DEF (0x00000030)

///< Low output voltage operation
#define SYS_CTRL_DFX_BSLDO_CTRL_LVOP_BF_OFF ( 8)
#define SYS_CTRL_DFX_BSLDO_CTRL_LVOP_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_LVOP_BF_MSK (0x00000100)
#define SYS_CTRL_DFX_BSLDO_CTRL_LVOP_BF_DEF (0x00000000)

///< Analog voltage monitor enable
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONEN_BF_OFF ( 9)
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONEN_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONEN_BF_MSK (0x00000200)
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONEN_BF_DEF (0x00000000)

///< Analog voltage monitor select
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONSEL_BF_OFF (10)
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONSEL_BF_WID ( 3)
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONSEL_BF_MSK (0x00001C00)
#define SYS_CTRL_DFX_BSLDO_CTRL_AMONSEL_BF_DEF (0x00000000)

///< DFT digital 8:1 mux select
#define SYS_CTRL_DFX_BSLDO_CTRL_DIGMUXSEL_BF_OFF (13)
#define SYS_CTRL_DFX_BSLDO_CTRL_DIGMUXSEL_BF_WID ( 3)
#define SYS_CTRL_DFX_BSLDO_CTRL_DIGMUXSEL_BF_MSK (0x0000E000)
#define SYS_CTRL_DFX_BSLDO_CTRL_DIGMUXSEL_BF_DEF (0x00000000)

///< Bleeder enable
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_EN_BF_OFF (16)
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_EN_BF_MSK (0x00010000)
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_EN_BF_DEF (0x00000000)

///< Bleeder strength
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_TR_BF_OFF (17)
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_TR_BF_WID ( 6)
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_TR_BF_MSK (0x007E0000)
#define SYS_CTRL_DFX_BSLDO_CTRL_BLD_TR_BF_DEF (0x00000000)

///< Leakage control
#define SYS_CTRL_DFX_BSLDO_CTRL_LKGCTRL_BF_OFF (23)
#define SYS_CTRL_DFX_BSLDO_CTRL_LKGCTRL_BF_WID ( 2)
#define SYS_CTRL_DFX_BSLDO_CTRL_LKGCTRL_BF_MSK (0x01800000)
#define SYS_CTRL_DFX_BSLDO_CTRL_LKGCTRL_BF_DEF (0x00000000)

///< Bypass LDO
#define SYS_CTRL_DFX_BSLDO_CTRL_BYP_BF_OFF (25)
#define SYS_CTRL_DFX_BSLDO_CTRL_BYP_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_BYP_BF_MSK (0x02000000)
#define SYS_CTRL_DFX_BSLDO_CTRL_BYP_BF_DEF (0x00000000)

///< Reserved to enable aux circuits
#define SYS_CTRL_DFX_BSLDO_CTRL_LDOAUX_EN_BF_OFF (26)
#define SYS_CTRL_DFX_BSLDO_CTRL_LDOAUX_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_LDOAUX_EN_BF_MSK (0x04000000)
#define SYS_CTRL_DFX_BSLDO_CTRL_LDOAUX_EN_BF_DEF (0x00000000)

///< Reserved to configure aux circuits
#define SYS_CTRL_DFX_BSLDO_CTRL_CFG_AUX_BF_OFF (27)
#define SYS_CTRL_DFX_BSLDO_CTRL_CFG_AUX_BF_WID ( 4)
#define SYS_CTRL_DFX_BSLDO_CTRL_CFG_AUX_BF_MSK (0x78000000)
#define SYS_CTRL_DFX_BSLDO_CTRL_CFG_AUX_BF_DEF (0x00000000)

///< SenseLDO Enable
#define SYS_CTRL_DFX_BSLDO_CTRL_EN_BF_OFF (31)
#define SYS_CTRL_DFX_BSLDO_CTRL_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BSLDO_CTRL_EN_BF_MSK (0x80000000)
#define SYS_CTRL_DFX_BSLDO_CTRL_EN_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_SBGRLDO_CSR register description at address offset 0x7e50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/SBGRLDO_CSR
  * SerDes BGR/LDO Control and Status Register
  */

typedef union {
  struct {
    uint32_t LDO_REF_SEL : 4;
    ///< LDO Reference Select for LDO3, LDO2, LDO1 and LDO0  1 = voltage from
    ///< BGR 0 = Internal voltage reference (default)
    ///< AccessType="RW/V/P/L" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t BGR_FPDONE : 2;
    ///< Fuse Pull Done for BGR23 and BGR01
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t BGR_READY : 2;
    ///< Power Ready for BGR23 and BGR01
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t LDO_READY : 4;
    ///< Power Ready for LDO3, LDO2, LDO1 and LDO0
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_sbgrldo_csr_reg_t;

#define SYS_CTRL_DFX_SBGRLDO_CSR_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_SBGRLDO_CSR_RD_MASK (0xff00000fU)
#define SYS_CTRL_DFX_SBGRLDO_CSR_WR_MASK (0x0000000fU)


///< LDO Reference Select for LDO3, LDO2, LDO1 and LDO0  1 = voltage from
///< BGR 0 = Internal voltage reference (default)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_REF_SEL_BF_OFF ( 0)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_REF_SEL_BF_WID ( 4)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_REF_SEL_BF_MSK (0x0000000F)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_REF_SEL_BF_DEF (0x00000000)

///< Fuse Pull Done for BGR23 and BGR01
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_FPDONE_BF_OFF (24)
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_FPDONE_BF_WID ( 2)
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_FPDONE_BF_MSK (0x03000000)
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_FPDONE_BF_DEF (0x00000000)

///< Power Ready for BGR23 and BGR01
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_READY_BF_OFF (26)
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_READY_BF_WID ( 2)
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_READY_BF_MSK (0x0C000000)
#define SYS_CTRL_DFX_SBGRLDO_CSR_BGR_READY_BF_DEF (0x00000000)

///< Power Ready for LDO3, LDO2, LDO1 and LDO0
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_READY_BF_OFF (28)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_READY_BF_WID ( 4)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_READY_BF_MSK (0xF0000000)
#define SYS_CTRL_DFX_SBGRLDO_CSR_LDO_READY_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_BISR_CSR register description at address offset 0x7e54
  *
  * Register default value:        0x00000005
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/BISR_CSR
  * BISR Control and Status Register
  */

typedef union {
  struct {
    uint32_t CLKEN : 1;
    ///< Repair Clock Enable for BISR State Machine
    ///< AccessType="RW/V/P/L" BitOffset="0" ResetValue="0x1"
    uint32_t ENABLE : 1;
    ///< Repair Enable for BISR State Machine
    ///< AccessType="RW/V/P/L" BitOffset="1" ResetValue="0x0"
    uint32_t FUSE_PG_EN : 1;
    ///< Fuse Powergate Enable.   This bit enables the powergating between
    ///< the SOC voltage domains and the BISR fuse voltage domains.   It must
    ///< remain high until the BSLDO BISR Sense LDO) is enabled and power is
    ///< stable (check PwrGood=1 in BSLDO_StatusOvrd after 50 usec).  Set to
    ///< 0 before fuse operations.   After fuse operations set to 1 before
    ///< disabling the BSLDO.
    ///< AccessType="RW/V/P/L" BitOffset="2" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t DONE : 1;
    ///< Repair Done for BISR State Machine
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t PASS : 1;
    ///< Repair Pass for BISR State Machine 0
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t DOMA_PG : 1;
    ///< BISR Domain A PowerGood (domain_chnl_pwrgood)
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t DOMB_PG : 1;
    ///< BISR Domain B PowerGood (domain_chn1_vex_pwrgood)
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} sys_ctrl_dfx_bisr_csr_reg_t;

#define SYS_CTRL_DFX_BISR_CSR_DEFAULT (0x00000005U)
#define SYS_CTRL_DFX_BISR_CSR_RD_MASK (0x00000f07U)
#define SYS_CTRL_DFX_BISR_CSR_WR_MASK (0x00000007U)


///< Repair Clock Enable for BISR State Machine
#define SYS_CTRL_DFX_BISR_CSR_CLKEN_BF_OFF ( 0)
#define SYS_CTRL_DFX_BISR_CSR_CLKEN_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_CLKEN_BF_MSK (0x00000001)
#define SYS_CTRL_DFX_BISR_CSR_CLKEN_BF_DEF (0x00000001)

///< Repair Enable for BISR State Machine
#define SYS_CTRL_DFX_BISR_CSR_EN_BF_OFF ( 1)
#define SYS_CTRL_DFX_BISR_CSR_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_EN_BF_MSK (0x00000002)
#define SYS_CTRL_DFX_BISR_CSR_EN_BF_DEF (0x00000000)

///< Fuse Powergate Enable.   This bit enables the powergating between
///< the SOC voltage domains and the BISR fuse voltage domains.   It must
///< remain high until the BSLDO BISR Sense LDO) is enabled and power is
///< stable (check PwrGood=1 in BSLDO_StatusOvrd after 50 usec).  Set to
///< 0 before fuse operations.   After fuse operations set to 1 before
///< disabling the BSLDO.
#define SYS_CTRL_DFX_BISR_CSR_FUSE_PG_EN_BF_OFF ( 2)
#define SYS_CTRL_DFX_BISR_CSR_FUSE_PG_EN_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_FUSE_PG_EN_BF_MSK (0x00000004)
#define SYS_CTRL_DFX_BISR_CSR_FUSE_PG_EN_BF_DEF (0x00000004)

///< Repair Done for BISR State Machine
#define SYS_CTRL_DFX_BISR_CSR_DONE_BF_OFF ( 8)
#define SYS_CTRL_DFX_BISR_CSR_DONE_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_DONE_BF_MSK (0x00000100)
#define SYS_CTRL_DFX_BISR_CSR_DONE_BF_DEF (0x00000000)

///< Repair Pass for BISR State Machine 0
#define SYS_CTRL_DFX_BISR_CSR_PASS_BF_OFF ( 9)
#define SYS_CTRL_DFX_BISR_CSR_PASS_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_PASS_BF_MSK (0x00000200)
#define SYS_CTRL_DFX_BISR_CSR_PASS_BF_DEF (0x00000000)

///< BISR Domain A PowerGood (domain_chnl_pwrgood)
#define SYS_CTRL_DFX_BISR_CSR_DOMA_PG_BF_OFF (10)
#define SYS_CTRL_DFX_BISR_CSR_DOMA_PG_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_DOMA_PG_BF_MSK (0x00000400)
#define SYS_CTRL_DFX_BISR_CSR_DOMA_PG_BF_DEF (0x00000000)

///< BISR Domain B PowerGood (domain_chn1_vex_pwrgood)
#define SYS_CTRL_DFX_BISR_CSR_DOMB_PG_BF_OFF (11)
#define SYS_CTRL_DFX_BISR_CSR_DOMB_PG_BF_WID ( 1)
#define SYS_CTRL_DFX_BISR_CSR_DOMB_PG_BF_MSK (0x00000800)
#define SYS_CTRL_DFX_BISR_CSR_DOMB_PG_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_DFX_MAP_DBGMSGCMD register description at address offset 0x7e58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/DFX_MAP/DbgMsgCmd
  * Debug Message Register
  */

typedef union {
  struct {
    uint32_t MSGCMD : 32;
    ///< Boot Debug Status (TBD)
    ///< AccessType="RW/P/L" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_dfx_dbgmsgcmd_reg_t;

#define SYS_CTRL_DFX_DBGMSGCMD_DEFAULT (0x00000000U)
#define SYS_CTRL_DFX_DBGMSGCMD_RD_MASK (0xffffffffU)
#define SYS_CTRL_DFX_DBGMSGCMD_WR_MASK (0xffffffffU)


///< Boot Debug Status (TBD)
#define SYS_CTRL_DFX_DBGMSGCMD_MSGCMD_BF_OFF ( 0)
#define SYS_CTRL_DFX_DBGMSGCMD_MSGCMD_BF_WID (32)
#define SYS_CTRL_DFX_DBGMSGCMD_MSGCMD_BF_MSK (0xFFFFFFFF)
#define SYS_CTRL_DFX_DBGMSGCMD_MSGCMD_BF_DEF (0x00000000)


/** @brief SYS_CTRL_REG_SCRATCHTOP register description at address offset 0x7ffc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sys_ctrl/reg/ScratchTop
  * SYSCON Control scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD_L : 8;
    ///< Scratchpad low (warm reset)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SCRATCHPAD_M : 8;
    ///< Scratchpad low (cold reset)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SCRATCHPAD_H : 16;
    ///< Scratchpad high (sticky, power-up reset)
    ///< AccessType="RW/P" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sys_ctrl_scratchtop_reg_t;

#define SYS_CTRL_SCRATCHTOP_DEFAULT (0x00000000U)
#define SYS_CTRL_SCRATCHTOP_RD_MASK (0xffffffffU)
#define SYS_CTRL_SCRATCHTOP_WR_MASK (0xffffffffU)


///< Scratchpad low (warm reset)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_L_BF_OFF ( 0)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_L_BF_WID ( 8)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_L_BF_MSK (0x000000FF)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_L_BF_DEF (0x00000000)

///< Scratchpad low (cold reset)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_M_BF_OFF ( 8)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_M_BF_WID ( 8)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_M_BF_MSK (0x0000FF00)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_M_BF_DEF (0x00000000)

///< Scratchpad high (sticky, power-up reset)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_H_BF_OFF (16)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_H_BF_WID (16)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_H_BF_MSK (0xFFFF0000)
#define SYS_CTRL_SCRATCHTOP_SCRATCHPAD_H_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define SYS_CTRL_SCRATCHBOTTOM_REG ((sys_ctrl_scratchbottom_reg_t*) SYS_CTRL_SCRATCHBOTTOM_ADR)
#define SYS_CTRL_VER_REG ((sys_ctrl_ver_reg_t*) SYS_CTRL_VER_ADR)
#define SYS_CTRL_SYS_CTRL_REG ((sys_ctrl_sys_ctrl_reg_t*) SYS_CTRL_SYS_CTRL_ADR)
#define SYS_CTRL_SYS_STAT_REG ((sys_ctrl_sys_stat_reg_t*) SYS_CTRL_SYS_STAT_ADR)
#define SYS_CTRL_RST_CTRL_REG ((sys_ctrl_rst_ctrl_reg_t*) SYS_CTRL_RST_CTRL_ADR)
#define SYS_CTRL_GPIO_CTRL_REG ((sys_ctrl_gpio_ctrl_reg_t*) SYS_CTRL_GPIO_CTRL_ADR)
#define SYS_CTRL_SPICSR_REG ((sys_ctrl_spicsr_reg_t*) SYS_CTRL_SPICSR_ADR)
#define SYS_CTRL_RST_SOURCE_REG ((sys_ctrl_rst_source_reg_t*) SYS_CTRL_RST_SOURCE_ADR)
#define SYS_CTRL_CSTS_SNAPSHOT_H_REG ((sys_ctrl_csts_snapshot_h_reg_t*) SYS_CTRL_CSTS_SNAPSHOT_H_ADR)
#define SYS_CTRL_CSTS_SNAPSHOT_L_REG ((sys_ctrl_csts_snapshot_l_reg_t*) SYS_CTRL_CSTS_SNAPSHOT_L_ADR)
#define SYS_CTRL_VADFSMSR_REG ((sys_ctrl_vadfsmsr_reg_t*) SYS_CTRL_VADFSMSR_ADR)
#define SYS_CTRL_FDISTOV_CSR_REG ((sys_ctrl_fdistov_csr_reg_t*) SYS_CTRL_FDISTOV_CSR_ADR)
#define SYS_CTRL_WDOG_MAP0_WDOG_CSR_REG ((sys_ctrl_wdog_csr_reg_t*) SYS_CTRL_WDOG_MAP0_WDOG_CSR_ADR)
#define SYS_CTRL_WDOG_MAP0_WDOG_IVAL_REG ((sys_ctrl_wdog_ival_reg_t*) SYS_CTRL_WDOG_MAP0_WDOG_IVAL_ADR)
#define SYS_CTRL_WDOG_MAP0_WDOG_KA_REG ((sys_ctrl_wdog_ka_reg_t*) SYS_CTRL_WDOG_MAP0_WDOG_KA_ADR)
#define SYS_CTRL_WDOG_MAP1_WDOG_CSR_REG ((sys_ctrl_wdog_csr_reg_t*) SYS_CTRL_WDOG_MAP1_WDOG_CSR_ADR)
#define SYS_CTRL_WDOG_MAP1_WDOG_IVAL_REG ((sys_ctrl_wdog_ival_reg_t*) SYS_CTRL_WDOG_MAP1_WDOG_IVAL_ADR)
#define SYS_CTRL_WDOG_MAP1_WDOG_KA_REG ((sys_ctrl_wdog_ka_reg_t*) SYS_CTRL_WDOG_MAP1_WDOG_KA_ADR)
#define SYS_CTRL_SBB_CTRL_STAT_REG ((sys_ctrl_sbb_ctrl_stat_reg_t*) SYS_CTRL_SBB_CTRL_STAT_ADR)
#define SYS_CTRL_SBB_MEM_CTRL_REG ((sys_ctrl_sbb_mem_ctrl_reg_t*) SYS_CTRL_SBB_MEM_CTRL_ADR)
#define SYS_CTRL_SBB_MEM_ECC_CTRL0_REG ((sys_ctrl_sbb_mem_ecc_ctrl0_reg_t*) SYS_CTRL_SBB_MEM_ECC_CTRL0_ADR)
#define SYS_CTRL_SBB_MEM_ECC_CTRL1_REG ((sys_ctrl_sbb_mem_ecc_ctrl1_reg_t*) SYS_CTRL_SBB_MEM_ECC_CTRL1_ADR)
#define SYS_CTRL_SBB_MEM_ECC_CTRL2_REG ((sys_ctrl_sbb_mem_ecc_ctrl2_reg_t*) SYS_CTRL_SBB_MEM_ECC_CTRL2_ADR)
#define SYS_CTRL_SBB_MEM_ECC_CTRL3_REG ((sys_ctrl_sbb_mem_ecc_ctrl3_reg_t*) SYS_CTRL_SBB_MEM_ECC_CTRL3_ADR)
#define SYS_CTRL_SBB_MEM_ECC_STAT0_REG ((sys_ctrl_sbb_mem_ecc_stat0_reg_t*) SYS_CTRL_SBB_MEM_ECC_STAT0_ADR)
#define SYS_CTRL_SBB_MEM_ECC_STAT1_REG ((sys_ctrl_sbb_mem_ecc_stat1_reg_t*) SYS_CTRL_SBB_MEM_ECC_STAT1_ADR)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_REG ((sys_ctrl_sbb_mem_ecc_err_cnter0_reg_t*) SYS_CTRL_SBB_MEM_ECC_ERR_CNTER0_ADR)
#define SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_REG ((sys_ctrl_sbb_mem_ecc_err_cnter1_reg_t*) SYS_CTRL_SBB_MEM_ECC_ERR_CNTER1_ADR)
#define SYS_CTRL_SBB_MEM_ERR_INFORMATION_REG ((sys_ctrl_sbb_mem_err_information_reg_t*) SYS_CTRL_SBB_MEM_ERR_INFORMATION_ADR)
#define SYS_CTRL_SBB_TRNG_RAND_REG ((sys_ctrl_sbb_trng_rand_reg_t*) SYS_CTRL_SBB_TRNG_RAND_ADR)
#define SYS_CTRL_INTR0_CSR_INTRSTAT0_REG ((sys_ctrl_intr0_csr_intrstat0_reg_t*) SYS_CTRL_INTR0_CSR_INTRSTAT0_ADR)
#define SYS_CTRL_INTR0_CSR_INTRENHIGH0_REG ((sys_ctrl_intr0_csr_intrenhigh0_reg_t*) SYS_CTRL_INTR0_CSR_INTRENHIGH0_ADR)
#define SYS_CTRL_INTR0_CSR_INTRENLOW0_REG ((sys_ctrl_intr0_csr_intrenlow0_reg_t*) SYS_CTRL_INTR0_CSR_INTRENLOW0_ADR)
#define SYS_CTRL_INTR0_CSR_INTRCLR0_REG ((sys_ctrl_intr0_csr_intrclr0_reg_t*) SYS_CTRL_INTR0_CSR_INTRCLR0_ADR)
#define SYS_CTRL_INTR0_CSR_INTRFORCE0_REG ((sys_ctrl_intr0_csr_intrforce0_reg_t*) SYS_CTRL_INTR0_CSR_INTRFORCE0_ADR)
#define SYS_CTRL_INTR1_CSR_INTRSTAT1_REG ((sys_ctrl_intr1_csr_intrstat1_reg_t*) SYS_CTRL_INTR1_CSR_INTRSTAT1_ADR)
#define SYS_CTRL_INTR1_CSR_INTRENHIGH1_REG ((sys_ctrl_intr1_csr_intrenhigh1_reg_t*) SYS_CTRL_INTR1_CSR_INTRENHIGH1_ADR)
#define SYS_CTRL_INTR1_CSR_INTRENLOW1_REG ((sys_ctrl_intr1_csr_intrenlow1_reg_t*) SYS_CTRL_INTR1_CSR_INTRENLOW1_ADR)
#define SYS_CTRL_INTR1_CSR_INTRCLR1_REG ((sys_ctrl_intr1_csr_intrclr1_reg_t*) SYS_CTRL_INTR1_CSR_INTRCLR1_ADR)
#define SYS_CTRL_INTR1_CSR_INTRFORCE1_REG ((sys_ctrl_intr1_csr_intrforce1_reg_t*) SYS_CTRL_INTR1_CSR_INTRFORCE1_ADR)
#define SYS_CTRL_INTR2_CSR_INTRSTAT2_REG ((sys_ctrl_intr2_csr_intrstat2_reg_t*) SYS_CTRL_INTR2_CSR_INTRSTAT2_ADR)
#define SYS_CTRL_INTR2_CSR_INTRENHIGH2_REG ((sys_ctrl_intr2_csr_intrenhigh2_reg_t*) SYS_CTRL_INTR2_CSR_INTRENHIGH2_ADR)
#define SYS_CTRL_INTR2_CSR_INTRENLOW2_REG ((sys_ctrl_intr2_csr_intrenlow2_reg_t*) SYS_CTRL_INTR2_CSR_INTRENLOW2_ADR)
#define SYS_CTRL_INTR2_CSR_INTRCLR2_REG ((sys_ctrl_intr2_csr_intrclr2_reg_t*) SYS_CTRL_INTR2_CSR_INTRCLR2_ADR)
#define SYS_CTRL_INTR2_CSR_INTRFORCE2_REG ((sys_ctrl_intr2_csr_intrforce2_reg_t*) SYS_CTRL_INTR2_CSR_INTRFORCE2_ADR)
#define SYS_CTRL_TXALARM_CSR_TXALARMSTAT_REG ((sys_ctrl_txalarm_csr_txalarmstat_reg_t*) SYS_CTRL_TXALARM_CSR_TXALARMSTAT_ADR)
#define SYS_CTRL_TXALARM_CSR_TXALARMEN_REG ((sys_ctrl_txalarm_csr_txalarmen_reg_t*) SYS_CTRL_TXALARM_CSR_TXALARMEN_ADR)
#define SYS_CTRL_TXALARM_CSR_TXALARMCLR_REG ((sys_ctrl_txalarm_csr_txalarmclr_reg_t*) SYS_CTRL_TXALARM_CSR_TXALARMCLR_ADR)
#define SYS_CTRL_TXALARM_CSR_TXALARMFORCE_REG ((sys_ctrl_txalarm_csr_txalarmforce_reg_t*) SYS_CTRL_TXALARM_CSR_TXALARMFORCE_ADR)
#define SYS_CTRL_DFX_HW_LOCK_STAT_REG ((sys_ctrl_dfx_hw_lock_stat_reg_t*) SYS_CTRL_DFX_HW_LOCK_STAT_ADR)
#define SYS_CTRL_DFX_BOOTDBG_STAT_REG ((sys_ctrl_dfx_bootdbg_stat_reg_t*) SYS_CTRL_DFX_BOOTDBG_STAT_ADR)
#define SYS_CTRL_DFX_BOOTDBG_CTRL_REG ((sys_ctrl_dfx_bootdbg_ctrl_reg_t*) SYS_CTRL_DFX_BOOTDBG_CTRL_ADR)
#define SYS_CTRL_DFX_BOOTDBG_RSTOVRD_REG ((sys_ctrl_dfx_bootdbg_rstovrd_reg_t*) SYS_CTRL_DFX_BOOTDBG_RSTOVRD_ADR)
#define SYS_CTRL_DFX_BOOTDBG_RSTVAL_REG ((sys_ctrl_dfx_bootdbg_rstval_reg_t*) SYS_CTRL_DFX_BOOTDBG_RSTVAL_ADR)
#define SYS_CTRL_DFX_GPIOEAST_CTRL_REG ((sys_ctrl_dfx_gpioeast_ctrl_reg_t*) SYS_CTRL_DFX_GPIOEAST_CTRL_ADR)
#define SYS_CTRL_DFX_DBGMUX_CTRL_REG ((sys_ctrl_dfx_dbgmux_ctrl_reg_t*) SYS_CTRL_DFX_DBGMUX_CTRL_ADR)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD1_REG ((sys_ctrl_dfx_mem_trim_ovrd1_reg_t*) SYS_CTRL_DFX_MEM_TRIM_OVRD1_ADR)
#define SYS_CTRL_DFX_MEM_TRIM_OVRD2_REG ((sys_ctrl_dfx_mem_trim_ovrd2_reg_t*) SYS_CTRL_DFX_MEM_TRIM_OVRD2_ADR)
#define SYS_CTRL_DFX_LB_TRIM_OVRD1_REG ((sys_ctrl_dfx_lb_trim_ovrd1_reg_t*) SYS_CTRL_DFX_LB_TRIM_OVRD1_ADR)
#define SYS_CTRL_DFX_LB_TRIM_OVRD2_REG ((sys_ctrl_dfx_lb_trim_ovrd2_reg_t*) SYS_CTRL_DFX_LB_TRIM_OVRD2_ADR)
#define SYS_CTRL_DFX_FSLDO_STATOVRD_REG ((sys_ctrl_dfx_fsldo_statovrd_reg_t*) SYS_CTRL_DFX_FSLDO_STATOVRD_ADR)
#define SYS_CTRL_DFX_BSLDO_STATOVRD_REG ((sys_ctrl_dfx_bsldo_statovrd_reg_t*) SYS_CTRL_DFX_BSLDO_STATOVRD_ADR)
#define SYS_CTRL_DFX_FSLDO_CTRL_REG ((sys_ctrl_dfx_fsldo_ctrl_reg_t*) SYS_CTRL_DFX_FSLDO_CTRL_ADR)
#define SYS_CTRL_DFX_BSLDO_CTRL_REG ((sys_ctrl_dfx_bsldo_ctrl_reg_t*) SYS_CTRL_DFX_BSLDO_CTRL_ADR)
#define SYS_CTRL_DFX_SBGRLDO_CSR_REG ((sys_ctrl_dfx_sbgrldo_csr_reg_t*) SYS_CTRL_DFX_SBGRLDO_CSR_ADR)
#define SYS_CTRL_DFX_BISR_CSR_REG ((sys_ctrl_dfx_bisr_csr_reg_t*) SYS_CTRL_DFX_BISR_CSR_ADR)
#define SYS_CTRL_DFX_DBGMSGCMD_REG ((sys_ctrl_dfx_dbgmsgcmd_reg_t*) SYS_CTRL_DFX_DBGMSGCMD_ADR)
#define SYS_CTRL_SCRATCHTOP_REG ((sys_ctrl_scratchtop_reg_t*) SYS_CTRL_SCRATCHTOP_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    sys_ctrl_scratchbottom_reg_t SCRATCHBOTTOM;   /*< Address offset = 0x0 */
    sys_ctrl_ver_reg_t VER;         /*< Address offset = 0x4 */
    sys_ctrl_sys_ctrl_reg_t SYS_CTRL;  /*< Address offset = 0x8 */
    sys_ctrl_sys_stat_reg_t SYS_STAT;   /*< Address offset = 0xc */
    sys_ctrl_rst_ctrl_reg_t RST_CTRL;   /*< Address offset = 0x10 */
    sys_ctrl_gpio_ctrl_reg_t GPIO_CTRL;    /*< Address offset = 0x14 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x18 */
    sys_ctrl_spicsr_reg_t SPICSR;          /*< Address offset = 0x1c */
    sys_ctrl_rst_source_reg_t RST_SOURCE;    /*< Address offset = 0x20 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x24 */
    sys_ctrl_csts_snapshot_h_reg_t CSTS_SNAPSHOT_H; /*< Address offset = 0x28 */
    sys_ctrl_csts_snapshot_l_reg_t CSTS_SNAPSHOT_L; /*< Address offset = 0x2c */
    sys_ctrl_vadfsmsr_reg_t VADFSMSR;        /*< Address offset = 0x30 */
    sys_ctrl_fdistov_csr_reg_t FDISTOV_CSR;     /*< Address offset = 0x34 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x38 */
    sys_ctrl_wdog_csr_reg_t WDOG_MAP0_WDOG_CSR; /*< Address offset = 0x40 */
    sys_ctrl_wdog_ival_reg_t WDOG_MAP0_WDOG_IVAL; /*< Address offset = 0x44 */
    sys_ctrl_wdog_ka_reg_t WDOG_MAP0_WDOG_KA; /*< Address offset = 0x48 */
    const uint8_t        reservedArea3 [4];   /*< Address offset = 0x4c */
    sys_ctrl_wdog_csr_reg_t WDOG_MAP1_WDOG_CSR; /*< Address offset = 0x50 */
    sys_ctrl_wdog_ival_reg_t WDOG_MAP1_WDOG_IVAL; /*< Address offset = 0x54 */
    sys_ctrl_wdog_ka_reg_t WDOG_MAP1_WDOG_KA; /*< Address offset = 0x58 */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0x5c */
    sys_ctrl_sbb_ctrl_stat_reg_t SBB_CTRL_STAT; /*< Address offset = 0x60 */
    sys_ctrl_sbb_mem_ctrl_reg_t SBB_MEM_CTRL; /*< Address offset = 0x64 */
    sys_ctrl_sbb_mem_ecc_ctrl0_reg_t SBB_MEM_ECC_CTRL0; /*< Address offset = 0x68 */
    sys_ctrl_sbb_mem_ecc_ctrl1_reg_t SBB_MEM_ECC_CTRL1; /*< Address offset = 0x6c */
    sys_ctrl_sbb_mem_ecc_ctrl2_reg_t SBB_MEM_ECC_CTRL2; /*< Address offset = 0x70 */
    sys_ctrl_sbb_mem_ecc_ctrl3_reg_t SBB_MEM_ECC_CTRL3; /*< Address offset = 0x74 */
    sys_ctrl_sbb_mem_ecc_stat0_reg_t SBB_MEM_ECC_STAT0; /*< Address offset = 0x78 */
    sys_ctrl_sbb_mem_ecc_stat1_reg_t SBB_MEM_ECC_STAT1; /*< Address offset = 0x7c */
    sys_ctrl_sbb_mem_ecc_err_cnter0_reg_t SBB_MEM_ECC_ERR_CNTER0; /*< Address offset = 0x80 */
    sys_ctrl_sbb_mem_ecc_err_cnter1_reg_t SBB_MEM_ECC_ERR_CNTER1; /*< Address offset = 0x84 */
    sys_ctrl_sbb_mem_err_information_reg_t SBB_MEM_ERR_INFORMATION; /*< Address offset = 0x88 */
    sys_ctrl_sbb_trng_rand_reg_t SBB_TRNG_RAND; /*< Address offset = 0x8c */
    const uint8_t        reservedArea5 [112]; /*< Address offset = 0x90 */
    sys_ctrl_intr0_csr_intrstat0_reg_t INTR0_CSR_INTRSTAT0; /*< Address offset = 0x100 */
    sys_ctrl_intr0_csr_intrenhigh0_reg_t INTR0_CSR_INTRENHIGH0; /*< Address offset = 0x104 */
    sys_ctrl_intr0_csr_intrenlow0_reg_t INTR0_CSR_INTRENLOW0; /*< Address offset = 0x108 */
    sys_ctrl_intr0_csr_intrclr0_reg_t INTR0_CSR_INTRCLR0; /*< Address offset = 0x10c */
    sys_ctrl_intr0_csr_intrforce0_reg_t INTR0_CSR_INTRFORCE0; /*< Address offset = 0x110 */
    const uint8_t        reservedArea6 [12];  /*< Address offset = 0x114 */
    sys_ctrl_intr1_csr_intrstat1_reg_t INTR1_CSR_INTRSTAT1; /*< Address offset = 0x120 */
    sys_ctrl_intr1_csr_intrenhigh1_reg_t INTR1_CSR_INTRENHIGH1; /*< Address offset = 0x124 */
    sys_ctrl_intr1_csr_intrenlow1_reg_t INTR1_CSR_INTRENLOW1; /*< Address offset = 0x128 */
    sys_ctrl_intr1_csr_intrclr1_reg_t INTR1_CSR_INTRCLR1; /*< Address offset = 0x12c */
    sys_ctrl_intr1_csr_intrforce1_reg_t INTR1_CSR_INTRFORCE1; /*< Address offset = 0x130 */
    const uint8_t        reservedArea7 [12];  /*< Address offset = 0x134 */
    sys_ctrl_intr2_csr_intrstat2_reg_t INTR2_CSR_INTRSTAT2; /*< Address offset = 0x140 */
    sys_ctrl_intr2_csr_intrenhigh2_reg_t INTR2_CSR_INTRENHIGH2; /*< Address offset = 0x144 */
    sys_ctrl_intr2_csr_intrenlow2_reg_t INTR2_CSR_INTRENLOW2; /*< Address offset = 0x148 */
    sys_ctrl_intr2_csr_intrclr2_reg_t INTR2_CSR_INTRCLR2; /*< Address offset = 0x14c */
    sys_ctrl_intr2_csr_intrforce2_reg_t INTR2_CSR_INTRFORCE2; /*< Address offset = 0x150 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x154 */
    sys_ctrl_txalarm_csr_txalarmstat_reg_t TXALARM_CSR_TXALARMSTAT; /*< Address offset = 0x160 */
    sys_ctrl_txalarm_csr_txalarmen_reg_t TXALARM_CSR_TXALARMEN; /*< Address offset = 0x164 */
    sys_ctrl_txalarm_csr_txalarmclr_reg_t TXALARM_CSR_TXALARMCLR; /*< Address offset = 0x168 */
    sys_ctrl_txalarm_csr_txalarmforce_reg_t TXALARM_CSR_TXALARMFORCE; /*< Address offset = 0x16c */
    const uint8_t        reservedArea9 [31888]; /*< Address offset = 0x170 */
    sys_ctrl_dfx_hw_lock_stat_reg_t DFX_HW_LOCK_STAT; /*< Address offset = 0x7e00 */
    sys_ctrl_dfx_bootdbg_stat_reg_t DFX_BOOTDBG_STAT; /*< Address offset = 0x7e04 */
    sys_ctrl_dfx_bootdbg_ctrl_reg_t DFX_BOOTDBG_CTRL; /*< Address offset = 0x7e08 */
    const uint8_t        reservedArea10 [4];  /*< Address offset = 0x7e0c */
    sys_ctrl_dfx_bootdbg_rstovrd_reg_t DFX_BOOTDBG_RSTOVRD; /*< Address offset = 0x7e10 */
    sys_ctrl_dfx_bootdbg_rstval_reg_t DFX_BOOTDBG_RSTVAL; /*< Address offset = 0x7e14 */
    sys_ctrl_dfx_gpioeast_ctrl_reg_t DFX_GPIOEAST_CTRL; /*< Address offset = 0x7e18 */
    sys_ctrl_dfx_dbgmux_ctrl_reg_t DFX_DBGMUX_CTRL; /*< Address offset = 0x7e1c */
    sys_ctrl_dfx_mem_trim_ovrd1_reg_t DFX_MEM_TRIM_OVRD1; /*< Address offset = 0x7e20 */
    sys_ctrl_dfx_mem_trim_ovrd2_reg_t DFX_MEM_TRIM_OVRD2; /*< Address offset = 0x7e24 */
    sys_ctrl_dfx_lb_trim_ovrd1_reg_t DFX_LB_TRIM_OVRD1; /*< Address offset = 0x7e28 */
    sys_ctrl_dfx_lb_trim_ovrd2_reg_t DFX_LB_TRIM_OVRD2; /*< Address offset = 0x7e2c */
    const uint8_t        reservedArea11 [16]; /*< Address offset = 0x7e30 */
    sys_ctrl_dfx_fsldo_statovrd_reg_t DFX_FSLDO_STATOVRD; /*< Address offset = 0x7e40 */
    sys_ctrl_dfx_bsldo_statovrd_reg_t DFX_BSLDO_STATOVRD; /*< Address offset = 0x7e44 */
    sys_ctrl_dfx_fsldo_ctrl_reg_t DFX_FSLDO_CTRL; /*< Address offset = 0x7e48 */
    sys_ctrl_dfx_bsldo_ctrl_reg_t DFX_BSLDO_CTRL; /*< Address offset = 0x7e4c */
    sys_ctrl_dfx_sbgrldo_csr_reg_t DFX_SBGRLDO_CSR; /*< Address offset = 0x7e50 */
    sys_ctrl_dfx_bisr_csr_reg_t DFX_BISR_CSR; /*< Address offset = 0x7e54 */
    sys_ctrl_dfx_dbgmsgcmd_reg_t DFX_DBGMSGCMD; /*< Address offset = 0x7e58 */
    const uint8_t        reservedArea12 [416]; /*< Address offset = 0x7e5c */
    sys_ctrl_scratchtop_reg_t SCRATCHTOP;      /*< Address offset = 0x7ffc */
} sys_ctrl_t;     // size: 0x0110

// AddressSpace struct pointer
//
#define SYSCON_CTRL      ((sys_ctrl_t*) SYSCON_CTRL_BASE)

// ******************************************* /Address Space

#endif      // _SYS_CTRL_H_

