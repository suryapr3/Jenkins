#ifndef _TXCPM_H_
#define _TXCPM_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define TRX_SYS0_TXCPM0_BASE  ( 0x05264000 )
#define TRX_SYS0_TXCPM1_BASE  ( 0x05274000 )
#define TRX_SYS1_TXCPM0_BASE  ( 0x05284000 )
#define TRX_SYS1_TXCPM1_BASE  ( 0x05294000 )
#define TRX_SYS2_TXCPM0_BASE  ( 0x052a4000 )
#define TRX_SYS2_TXCPM1_BASE  ( 0x052b4000 )
#define TRX_SYS3_TXCPM0_BASE  ( 0x052c4000 )
#define TRX_SYS3_TXCPM1_BASE  ( 0x052d4000 )
#define TRX_SYS4_TXCPM0_BASE  ( 0x052e4000 )
#define TRX_SYS4_TXCPM1_BASE  ( 0x052f4000 )
#define TRX_SYS5_TXCPM0_BASE  ( 0x05304000 )
#define TRX_SYS5_TXCPM1_BASE  ( 0x05314000 )
#define TRX_SYS6_TXCPM0_BASE  ( 0x05324000 )
#define TRX_SYS6_TXCPM1_BASE  ( 0x05334000 )
#define TRX_SYS7_TXCPM0_BASE  ( 0x05344000 )
#define TRX_SYS7_TXCPM1_BASE  ( 0x05354000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TXCPM_SCRATCH_OFFSET     ( 0x00000000U )
#define TXCPM_LNR_ATTACK_TSHOLD_OFFSET ( 0x00000004U )
#define TXCPM_LNR_RELEASE_TSHOLD_OFFSET ( 0x00000008U )
#define TXCPM_DLINK_MHI_OFFSET   ( 0x0000000cU )
#define TXCPM_SEL_WND_SIZE_OFFSET ( 0x00000010U )
#define TXCPM_SEL_MEAS_OUTPUT_OFFSET ( 0x00000014U )
#define TXCPM_ERR_TRIG_TIMER_CNT_OFFSET ( 0x00000018U )
#define TXCPM_PRE_NORMAL_TIMER_CNT_OFFSET ( 0x0000001cU )
#define TXCPM_ALARM_MASK_OFFSET  ( 0x00000020U )
#define TXCPM_ALARM_FORCE_OFFSET ( 0x00000024U )
#define TXCPM_EN_MEAS_OFFSET ( 0x00000028U )
#define TXCPM_PIQ_MEAS_TRIP_VAL_OFFSET ( 0x0000002cU )
#define TXCPM_DBG_ALARM_STAT_OFFSET ( 0x00000030U )
#define TXCPM_DBG_TOTAL_WND_PWR_OFFSET ( 0x00000034U )
#define TXCPM_DBG_PEAK_WND_PWR_OFFSET ( 0x00000038U )
#define TXCPM_ALARM_CNTER_OFFSET ( 0x0000003cU )
#define TXCPM_TXE_DELAY_OFFSET   ( 0x00000040U )
#define TXCPM_APB_BRDG_STAT_OFFSET ( 0x00000044U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TXCPM_SCRATCH_ADR(_BASE)        (( ( _BASE ) + ( TXCPM_SCRATCH_OFFSET ) ))
#define TXCPM_LNR_ATTACK_TSHOLD_ADR(_BASE) (( ( _BASE ) + ( TXCPM_LNR_ATTACK_TSHOLD_OFFSET ) ))
#define TXCPM_LNR_RELEASE_TSHOLD_ADR(_BASE) (( ( _BASE ) + ( TXCPM_LNR_RELEASE_TSHOLD_OFFSET ) ))
#define TXCPM_DLINK_MHI_ADR(_BASE)      (( ( _BASE ) + ( TXCPM_DLINK_MHI_OFFSET ) ))
#define TXCPM_SEL_WND_SIZE_ADR(_BASE) (( ( _BASE ) + ( TXCPM_SEL_WND_SIZE_OFFSET ) ))
#define TXCPM_SEL_MEAS_OUTPUT_ADR(_BASE) (( ( _BASE ) + ( TXCPM_SEL_MEAS_OUTPUT_OFFSET ) ))
#define TXCPM_ERR_TRIG_TIMER_CNT_ADR(_BASE) (( ( _BASE ) + ( TXCPM_ERR_TRIG_TIMER_CNT_OFFSET ) ))
#define TXCPM_PRE_NORMAL_TIMER_CNT_ADR(_BASE) (( ( _BASE ) + ( TXCPM_PRE_NORMAL_TIMER_CNT_OFFSET ) ))
#define TXCPM_ALARM_MASK_ADR(_BASE)     (( ( _BASE ) + ( TXCPM_ALARM_MASK_OFFSET ) ))
#define TXCPM_ALARM_FORCE_ADR(_BASE)    (( ( _BASE ) + ( TXCPM_ALARM_FORCE_OFFSET ) ))
#define TXCPM_EN_MEAS_ADR(_BASE)    (( ( _BASE ) + ( TXCPM_EN_MEAS_OFFSET ) ))
#define TXCPM_PIQ_MEAS_TRIP_VAL_ADR(_BASE) (( ( _BASE ) + ( TXCPM_PIQ_MEAS_TRIP_VAL_OFFSET ) ))
#define TXCPM_DBG_ALARM_STAT_ADR(_BASE) (( ( _BASE ) + ( TXCPM_DBG_ALARM_STAT_OFFSET ) ))
#define TXCPM_DBG_TOTAL_WND_PWR_ADR(_BASE) (( ( _BASE ) + ( TXCPM_DBG_TOTAL_WND_PWR_OFFSET ) ))
#define TXCPM_DBG_PEAK_WND_PWR_ADR(_BASE) (( ( _BASE ) + ( TXCPM_DBG_PEAK_WND_PWR_OFFSET ) ))
#define TXCPM_ALARM_CNTER_ADR(_BASE)  (( ( _BASE ) + ( TXCPM_ALARM_CNTER_OFFSET ) ))
#define TXCPM_TXE_DELAY_ADR(_BASE)      (( ( _BASE ) + ( TXCPM_TXE_DELAY_OFFSET ) ))
#define TXCPM_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( TXCPM_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TXCPM_MAP_REG_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCH : 32;
    ///< Scratch space for software to test access to this module.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txcpm_scratch_reg_t;

#define TXCPM_SCRATCH_DEFAULT (0x00000000U)
#define TXCPM_SCRATCH_RD_MASK (0xffffffffU)
#define TXCPM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch space for software to test access to this module.
#define TXCPM_SCRATCH_BF_OFF ( 0)
#define TXCPM_SCRATCH_BF_WID (32)
#define TXCPM_SCRATCH_BF_MSK (0xFFFFFFFF)
#define TXCPM_SCRATCH_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_LNR_ATTACK_TSHOLD register description at address offset 0x4
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: txcpm_map/reg/LNR_ATTACK_TSHOLD
  * Linear Attack Threshold Register
  */

typedef union {
  struct {
    uint32_t LNR_ATTACK_THRESHOLD : 32;
    ///< When value is exceeded TXCPM's TX Alarm is asserted.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} txcpm_lnr_attack_tshold_reg_t;

#define TXCPM_LNR_ATTACK_TSHOLD_DEFAULT (0xffffffffU)
#define TXCPM_LNR_ATTACK_TSHOLD_RD_MASK (0xffffffffU)
#define TXCPM_LNR_ATTACK_TSHOLD_WR_MASK (0xffffffffU)


///< When value is exceeded TXCPM's TX Alarm is asserted.
#define TXCPM_LNR_ATTACK_TSHOLD_LNR_ATTACK_TSHOLD_BF_OFF ( 0)
#define TXCPM_LNR_ATTACK_TSHOLD_LNR_ATTACK_TSHOLD_BF_WID (32)
#define TXCPM_LNR_ATTACK_TSHOLD_LNR_ATTACK_TSHOLD_BF_MSK (0xFFFFFFFF)
#define TXCPM_LNR_ATTACK_TSHOLD_LNR_ATTACK_TSHOLD_BF_DEF (0xFFFFFFFF)


/** @brief TXCPM_MAP_REG_LNR_RELEASE_TSHOLD register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/LNR_RELEASE_TSHOLD
  * Linear Release Threshold Register
  */

typedef union {
  struct {
    uint32_t LNR_RELEASE_THRESHOLD : 32;
    ///< When the selected measurment value falls below this value the TX Alarm
    ///< is released.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txcpm_lnr_release_tshold_reg_t;

#define TXCPM_LNR_RELEASE_TSHOLD_DEFAULT (0x00000000U)
#define TXCPM_LNR_RELEASE_TSHOLD_RD_MASK (0xffffffffU)
#define TXCPM_LNR_RELEASE_TSHOLD_WR_MASK (0xffffffffU)


///< When the selected measurment value falls below this value the TX Alarm
///< is released.
#define TXCPM_LNR_RELEASE_TSHOLD_LNR_RELEASE_TSHOLD_BF_OFF ( 0)
#define TXCPM_LNR_RELEASE_TSHOLD_LNR_RELEASE_TSHOLD_BF_WID (32)
#define TXCPM_LNR_RELEASE_TSHOLD_LNR_RELEASE_TSHOLD_BF_MSK (0xFFFFFFFF)
#define TXCPM_LNR_RELEASE_TSHOLD_LNR_RELEASE_TSHOLD_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_DLINK_MHI register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/DLINK_MHI
  * Downlink Measurement and Alarm Hold or Initialize
  */

typedef union {
  struct {
    uint32_t DLINK_MEAS_HOLD_INITIALIZE : 1;
    ///< 0 == Reinitialize Window Measurmenet when Downlink is asserted High
    ///< again. 1 == Hold and continue Window Measurment when Downlink is asserted
    ///< high again.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DLINK_ALARM_HOLD_INITIALIZE : 1;
    ///< 0 == If the Alarm was asserted high when the link goes low, maintain
    ///< the alarm as asserted. 1 == If the Alarm was asserted high when the
    ///< link goes low, initialize the alarm to zero.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_dlink_mhi_reg_t;

#define TXCPM_DLINK_MHI_DEFAULT (0x00000000U)
#define TXCPM_DLINK_MHI_RD_MASK (0x00000003U)
#define TXCPM_DLINK_MHI_WR_MASK (0x00000003U)


///< 0 == Reinitialize Window Measurmenet when Downlink is asserted High
///< again. 1 == Hold and continue Window Measurment when Downlink is asserted
///< high again.
#define TXCPM_DLINK_MHI_DLINK_MEAS_HOLD_INITIALIZE_BF_OFF ( 0)
#define TXCPM_DLINK_MHI_DLINK_MEAS_HOLD_INITIALIZE_BF_WID ( 1)
#define TXCPM_DLINK_MHI_DLINK_MEAS_HOLD_INITIALIZE_BF_MSK (0x00000001)
#define TXCPM_DLINK_MHI_DLINK_MEAS_HOLD_INITIALIZE_BF_DEF (0x00000000)

///< 0 == If the Alarm was asserted high when the link goes low, maintain
///< the alarm as asserted. 1 == If the Alarm was asserted high when the
///< link goes low, initialize the alarm to zero.
#define TXCPM_DLINK_MHI_DLINK_ALARM_HOLD_INITIALIZE_BF_OFF ( 1)
#define TXCPM_DLINK_MHI_DLINK_ALARM_HOLD_INITIALIZE_BF_WID ( 1)
#define TXCPM_DLINK_MHI_DLINK_ALARM_HOLD_INITIALIZE_BF_MSK (0x00000002)
#define TXCPM_DLINK_MHI_DLINK_ALARM_HOLD_INITIALIZE_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_SELECT_WINDOW_SIZE register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/SELECT_WINDOW_SIZE
  * Select Measurement Window Size
  */

typedef union {
  struct {
    uint32_t SEL_WINDOW_SIZE : 5;
    ///< Selects the size of the measurment's sample window in terms of clock
    ///< or bllock. The number of samples is 8x the number of clocks(blocks).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_sel_wnd_size_reg_t;

#define TXCPM_SEL_WND_SIZE_DEFAULT (0x00000000U)
#define TXCPM_SEL_WND_SIZE_RD_MASK (0x0000001fU)
#define TXCPM_SEL_WND_SIZE_WR_MASK (0x0000001fU)


///< Selects the size of the measurment's sample window in terms of clock
///< or bllock. The number of samples is 8x the number of clocks(blocks).
#define TXCPM_SEL_WND_SIZE_SEL_WND_SIZE_BF_OFF ( 0)
#define TXCPM_SEL_WND_SIZE_SEL_WND_SIZE_BF_WID ( 5)
#define TXCPM_SEL_WND_SIZE_SEL_WND_SIZE_BF_MSK (0x0000001F)
#define TXCPM_SEL_WND_SIZE_SEL_WND_SIZE_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_SELECT_MEAS_OUTPUT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/SELECT_MEAS_OUTPUT
  * Select Power Measurement
  */

typedef union {
  struct {
    uint32_t SELECT_PWR_MEASUREMENT : 1;
    ///< Select the Power Measurment Output Type used. 0 == Selects Windowed
    ///< Power Measurement;  1 == Selects Windowed Peak Power Measurement
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_sel_meas_output_reg_t;

#define TXCPM_SEL_MEAS_OUTPUT_DEFAULT (0x00000000U)
#define TXCPM_SEL_MEAS_OUTPUT_RD_MASK (0x00000001U)
#define TXCPM_SEL_MEAS_OUTPUT_WR_MASK (0x00000001U)


///< Select the Power Measurment Output Type used. 0 == Selects Windowed
///< Power Measurement;  1 == Selects Windowed Peak Power Measurement
#define TXCPM_SEL_MEAS_OUTPUT_SEL_PWR_MEASMENT_BF_OFF ( 0)
#define TXCPM_SEL_MEAS_OUTPUT_SEL_PWR_MEASMENT_BF_WID ( 1)
#define TXCPM_SEL_MEAS_OUTPUT_SEL_PWR_MEASMENT_BF_MSK (0x00000001)
#define TXCPM_SEL_MEAS_OUTPUT_SEL_PWR_MEASMENT_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_ERROR_TRIG_TIMER_CNT register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/ERROR_TRIG_TIMER_CNT
  * Set ERROR Trigger Timer Counter
  */

typedef union {
  struct {
    uint32_t ERROR_TRIG_TIMER_CNT : 16;
    ///< This register defines the TXCPM Tri-state machine built in timer count
    ///< value. The 16=bit value is the number of 983.04MHz/1.475 GHz clocks
    ///< to wait for in a TXCOM event.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_err_trig_timer_cnt_reg_t;

#define TXCPM_ERR_TRIG_TIMER_CNT_DEFAULT (0x00000000U)
#define TXCPM_ERR_TRIG_TIMER_CNT_RD_MASK (0x0000ffffU)
#define TXCPM_ERR_TRIG_TIMER_CNT_WR_MASK (0x0000ffffU)


///< This register defines the TXCPM Tri-state machine built in timer count
///< value. The 16=bit value is the number of 983.04MHz/1.475 GHz clocks
///< to wait for in a TXCOM event.
#define TXCPM_ERR_TRIG_TIMER_CNT_ERR_TRIG_TIMER_CNT_BF_OFF ( 0)
#define TXCPM_ERR_TRIG_TIMER_CNT_ERR_TRIG_TIMER_CNT_BF_WID (16)
#define TXCPM_ERR_TRIG_TIMER_CNT_ERR_TRIG_TIMER_CNT_BF_MSK (0x0000FFFF)
#define TXCPM_ERR_TRIG_TIMER_CNT_ERR_TRIG_TIMER_CNT_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_PRE_NORMAL_TIMER_CNT register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/PRE_NORMAL_TIMER_CNT
  * Set Pre-Normal Timer Counter
  */

typedef union {
  struct {
    uint32_t PRE_NORMAL_TIMER_CNT : 16;
    ///< Set the Pre-Normal Timer Counter Value for the PA Tri-State Decision
    ///< State Machine.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_pre_normal_timer_cnt_reg_t;

#define TXCPM_PRE_NORMAL_TIMER_CNT_DEFAULT (0x00000000U)
#define TXCPM_PRE_NORMAL_TIMER_CNT_RD_MASK (0x0000ffffU)
#define TXCPM_PRE_NORMAL_TIMER_CNT_WR_MASK (0x0000ffffU)


///< Set the Pre-Normal Timer Counter Value for the PA Tri-State Decision
///< State Machine.
#define TXCPM_PRE_NORMAL_TIMER_CNT_PRE_NORMAL_TIMER_CNT_BF_OFF ( 0)
#define TXCPM_PRE_NORMAL_TIMER_CNT_PRE_NORMAL_TIMER_CNT_BF_WID (16)
#define TXCPM_PRE_NORMAL_TIMER_CNT_PRE_NORMAL_TIMER_CNT_BF_MSK (0x0000FFFF)
#define TXCPM_PRE_NORMAL_TIMER_CNT_PRE_NORMAL_TIMER_CNT_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_ALARM_MASK register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/ALARM_MASK
  * MASK ALARMS
  */

typedef union {
  struct {
    uint32_t TX_PA_ALARM_MASK : 1;
    ///< When this bit is set to 1 it masks the TX_PA_ALARM Output to TXGAIN's
    ///< TXCPM PA Tri-state Machine (E2).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXCPM_ALARM_MASK : 1;
    ///< When this bit is set to 1 it masks the TXCPM_ALARM Output to RCS Alarm
    ///< Merge Block (Y2).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_alarm_mask_reg_t;

#define TXCPM_ALARM_MASK_DEFAULT (0x00000000U)
#define TXCPM_ALARM_MASK_RD_MASK (0x00000003U)
#define TXCPM_ALARM_MASK_WR_MASK (0x00000003U)


///< When this bit is set to 1 it masks the TX_PA_ALARM Output to TXGAIN's
///< TXCPM PA Tri-state Machine (E2).
#define TXCPM_ALARM_MASK_TX_PA_ALARM_MASK_BF_OFF ( 0)
#define TXCPM_ALARM_MASK_TX_PA_ALARM_MASK_BF_WID ( 1)
#define TXCPM_ALARM_MASK_TX_PA_ALARM_MASK_BF_MSK (0x00000001)
#define TXCPM_ALARM_MASK_TX_PA_ALARM_MASK_BF_DEF (0x00000000)

///< When this bit is set to 1 it masks the TXCPM_ALARM Output to RCS Alarm
///< Merge Block (Y2).
#define TXCPM_ALARM_MASK_TXCPM_ALARM_MASK_BF_OFF ( 1)
#define TXCPM_ALARM_MASK_TXCPM_ALARM_MASK_BF_WID ( 1)
#define TXCPM_ALARM_MASK_TXCPM_ALARM_MASK_BF_MSK (0x00000002)
#define TXCPM_ALARM_MASK_TXCPM_ALARM_MASK_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_ALARM_FORCE register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/ALARM_FORCE
  * FORCE ALARMS
  */

typedef union {
  struct {
    uint32_t TX_PA_ALARM_FORCE : 1;
    ///< When this bit is set to 1 it Forces the TX_PA_ALARM Output to TXGAIN's
    ///< TXCPM PA Tri-state Machine (E2).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXCPM_ALARM_FORCE : 1;
    ///< When this bit is set to 1 it forces the TXCPM_ALARM Output to RCS
    ///< Alarm Merge Block (Y2).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_alarm_force_reg_t;

#define TXCPM_ALARM_FORCE_DEFAULT (0x00000000U)
#define TXCPM_ALARM_FORCE_RD_MASK (0x00000003U)
#define TXCPM_ALARM_FORCE_WR_MASK (0x00000003U)


///< When this bit is set to 1 it Forces the TX_PA_ALARM Output to TXGAIN's
///< TXCPM PA Tri-state Machine (E2).
#define TXCPM_ALARM_FORCE_TX_PA_ALARM_FORCE_BF_OFF ( 0)
#define TXCPM_ALARM_FORCE_TX_PA_ALARM_FORCE_BF_WID ( 1)
#define TXCPM_ALARM_FORCE_TX_PA_ALARM_FORCE_BF_MSK (0x00000001)
#define TXCPM_ALARM_FORCE_TX_PA_ALARM_FORCE_BF_DEF (0x00000000)

///< When this bit is set to 1 it forces the TXCPM_ALARM Output to RCS
///< Alarm Merge Block (Y2).
#define TXCPM_ALARM_FORCE_TXCPM_ALARM_FORCE_BF_OFF ( 1)
#define TXCPM_ALARM_FORCE_TXCPM_ALARM_FORCE_BF_WID ( 1)
#define TXCPM_ALARM_FORCE_TXCPM_ALARM_FORCE_BF_MSK (0x00000002)
#define TXCPM_ALARM_FORCE_TXCPM_ALARM_FORCE_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_ENABLE_MEAS register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/ENABLE_MEAS
  * Enable Measurement Unit
  */

typedef union {
  struct {
    uint32_t TXCPM_UNIT_ENABLE : 1;
    ///< To perfrom any measurment this bit must be set to one.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXCPM_SW_ENABLE : 1;
    ///< Software Register Write enable. Software can write this bit to a one
    ///< to enable the unit to process  valid input sample instead of relying
    ///< on the external BFN I_TX_ENABLE input signal. In normal operation
    ///< this bit is not expected to be set.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_en_meas_reg_t;

#define TXCPM_EN_MEAS_DEFAULT (0x00000000U)
#define TXCPM_EN_MEAS_RD_MASK (0x00000003U)
#define TXCPM_EN_MEAS_WR_MASK (0x00000003U)


///< To perfrom any measurment this bit must be set to one.
#define TXCPM_EN_MEAS_TXCPM_UNIT_EN_BF_OFF ( 0)
#define TXCPM_EN_MEAS_TXCPM_UNIT_EN_BF_WID ( 1)
#define TXCPM_EN_MEAS_TXCPM_UNIT_EN_BF_MSK (0x00000001)
#define TXCPM_EN_MEAS_TXCPM_UNIT_EN_BF_DEF (0x00000000)

///< Software Register Write enable. Software can write this bit to a one
///< to enable the unit to process  valid input sample instead of relying
///< on the external BFN I_TX_ENABLE input signal. In normal operation
///< this bit is not expected to be set.
#define TXCPM_EN_MEAS_TXCPM_SW_EN_BF_OFF ( 1)
#define TXCPM_EN_MEAS_TXCPM_SW_EN_BF_WID ( 1)
#define TXCPM_EN_MEAS_TXCPM_SW_EN_BF_MSK (0x00000002)
#define TXCPM_EN_MEAS_TXCPM_SW_EN_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_PIQ_MEAS_TRIP_VALUE register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/PIQ_MEAS_TRIP_VALUE
  * Power Measurment Alarm Trip Register
  */

typedef union {
  struct {
    uint32_t PIQ_MEASUREMENT_TRIP_VALUE : 32;
    ///< Contains the power measurment value which initially trigger the TX
    ///< alarm. Note:  -Value  will be captured even if the alarm output signalis
    ///< masks are set. - This value has no meaning if the alarm was tripped
    ///< by a register initiated force.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txcpm_piq_meas_trip_val_reg_t;

#define TXCPM_PIQ_MEAS_TRIP_VAL_DEFAULT (0x00000000U)
#define TXCPM_PIQ_MEAS_TRIP_VAL_RD_MASK (0xffffffffU)
#define TXCPM_PIQ_MEAS_TRIP_VAL_WR_MASK (0x00000000U)


///< Contains the power measurment value which initially trigger the TX
///< alarm. Note:  -Value  will be captured even if the alarm output signalis
///< masks are set. - This value has no meaning if the alarm was tripped
///< by a register initiated force.
#define TXCPM_PIQ_MEAS_TRIP_VAL_PIQ_MEASMENT_TRIP_VAL_BF_OFF ( 0)
#define TXCPM_PIQ_MEAS_TRIP_VAL_PIQ_MEASMENT_TRIP_VAL_BF_WID (32)
#define TXCPM_PIQ_MEAS_TRIP_VAL_PIQ_MEASMENT_TRIP_VAL_BF_MSK (0xFFFFFFFF)
#define TXCPM_PIQ_MEAS_TRIP_VAL_PIQ_MEASMENT_TRIP_VAL_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_DEBUG_ALARM_STATUS register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/DEBUG_ALARM_STATUS
  * Debug Alarm Status Register
  */

typedef union {
  struct {
    uint32_t TX_PA_ALARM_STATUS : 1;
    ///< TX_PA_ALARM Output Status to TXGAIN's  PA Tri-state Machine (E2).
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXCPM_ALARM_STATUS : 1;
    ///< TXCPM_ALARM  Output Status to RCS Alarm Merge Block (Y2).
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_dbg_alarm_stat_reg_t;

#define TXCPM_DBG_ALARM_STAT_DEFAULT (0x00000000U)
#define TXCPM_DBG_ALARM_STAT_RD_MASK (0x00000003U)
#define TXCPM_DBG_ALARM_STAT_WR_MASK (0x00000000U)


///< TX_PA_ALARM Output Status to TXGAIN's  PA Tri-state Machine (E2).
#define TXCPM_DBG_ALARM_STAT_TX_PA_ALARM_STAT_BF_OFF ( 0)
#define TXCPM_DBG_ALARM_STAT_TX_PA_ALARM_STAT_BF_WID ( 1)
#define TXCPM_DBG_ALARM_STAT_TX_PA_ALARM_STAT_BF_MSK (0x00000001)
#define TXCPM_DBG_ALARM_STAT_TX_PA_ALARM_STAT_BF_DEF (0x00000000)

///< TXCPM_ALARM  Output Status to RCS Alarm Merge Block (Y2).
#define TXCPM_DBG_ALARM_STAT_TXCPM_ALARM_STAT_BF_OFF ( 1)
#define TXCPM_DBG_ALARM_STAT_TXCPM_ALARM_STAT_BF_WID ( 1)
#define TXCPM_DBG_ALARM_STAT_TXCPM_ALARM_STAT_BF_MSK (0x00000002)
#define TXCPM_DBG_ALARM_STAT_TXCPM_ALARM_STAT_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_DEBUG_TOTAL_WND_POWER register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/DEBUG_TOTAL_WND_POWER
  * Debug Window Total Power
  */

typedef union {
  struct {
    uint32_t DBG_TOTAL_WND_PWR : 16;
    ///< Debug: Shows the Windowed Total Power Measurement.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_dbg_total_wnd_pwr_reg_t;

#define TXCPM_DBG_TOTAL_WND_PWR_DEFAULT (0x00000000U)
#define TXCPM_DBG_TOTAL_WND_PWR_RD_MASK (0x0000ffffU)
#define TXCPM_DBG_TOTAL_WND_PWR_WR_MASK (0x00000000U)


///< Debug: Shows the Windowed Total Power Measurement.
#define TXCPM_DBG_TOTAL_WND_PWR_DBG_TOTAL_WND_PWR_BF_OFF ( 0)
#define TXCPM_DBG_TOTAL_WND_PWR_DBG_TOTAL_WND_PWR_BF_WID (16)
#define TXCPM_DBG_TOTAL_WND_PWR_DBG_TOTAL_WND_PWR_BF_MSK (0x0000FFFF)
#define TXCPM_DBG_TOTAL_WND_PWR_DBG_TOTAL_WND_PWR_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_DEBUG_PEAK_WND_POWER register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/DEBUG_PEAK_WND_POWER
  * Debug Peak Window power
  */

typedef union {
  struct {
    uint32_t DBG_PEAK_WND_PWR : 16;
    ///< Debug: Shows the value of the Windowed  Peak Power measurment.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_dbg_peak_wnd_pwr_reg_t;

#define TXCPM_DBG_PEAK_WND_PWR_DEFAULT (0x00000000U)
#define TXCPM_DBG_PEAK_WND_PWR_RD_MASK (0x0000ffffU)
#define TXCPM_DBG_PEAK_WND_PWR_WR_MASK (0x00000000U)


///< Debug: Shows the value of the Windowed  Peak Power measurment.
#define TXCPM_DBG_PEAK_WND_PWR_DBG_PEAK_WND_PWR_BF_OFF ( 0)
#define TXCPM_DBG_PEAK_WND_PWR_DBG_PEAK_WND_PWR_BF_WID (16)
#define TXCPM_DBG_PEAK_WND_PWR_DBG_PEAK_WND_PWR_BF_MSK (0x0000FFFF)
#define TXCPM_DBG_PEAK_WND_PWR_DBG_PEAK_WND_PWR_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_ALARM_COUNTER register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/ALARM_COUNTER
  * ALARM COUNTER
  */

typedef union {
  struct {
    uint32_t COUNT : 31;
    ///< TXCPM Alarm counter, increased by 1 everytime there is a alarm pulse
    ///< from hi/lo state machine. 31 bits
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_OVERFLOW : 1;
    ///< Overflow flag for alarm counter, when 1 is added to 31'h7FFF_FFFF
    ///< count value, the overflow flag will be set to 1 and the count will
    ///< restart at zero.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} txcpm_alarm_cnter_reg_t;

#define TXCPM_ALARM_CNTER_DEFAULT (0x00000000U)
#define TXCPM_ALARM_CNTER_RD_MASK (0xffffffffU)
#define TXCPM_ALARM_CNTER_WR_MASK (0x00000000U)


///< TXCPM Alarm counter, increased by 1 everytime there is a alarm pulse
///< from hi/lo state machine. 31 bits
#define TXCPM_ALARM_CNTER_CNT_BF_OFF ( 0)
#define TXCPM_ALARM_CNTER_CNT_BF_WID (31)
#define TXCPM_ALARM_CNTER_CNT_BF_MSK (0x7FFFFFFF)
#define TXCPM_ALARM_CNTER_CNT_BF_DEF (0x00000000)

///< Overflow flag for alarm counter, when 1 is added to 31'h7FFF_FFFF
///< count value, the overflow flag will be set to 1 and the count will
///< restart at zero.
#define TXCPM_ALARM_CNTER_OVERFLOW_BF_OFF (31)
#define TXCPM_ALARM_CNTER_OVERFLOW_BF_WID ( 1)
#define TXCPM_ALARM_CNTER_OVERFLOW_BF_MSK (0x80000000)
#define TXCPM_ALARM_CNTER_OVERFLOW_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_TXE_DELAY register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: txcpm_map/reg/TXE_DELAY
  * TXE Delay Register
  */

typedef union {
  struct {
    uint32_t D0 : 15;
    ///< Delay D0 is associated with Lo to Hi Transition of the input signal
    ///< (tx_enable). 15 Bit signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t D1 : 15;
    ///< Delay D1 is associated with Hi to Lo Transition of the input signal
    ///< (tx_enable). 15 Bit signal.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} txcpm_txe_delay_reg_t;

#define TXCPM_TXE_DELAY_DEFAULT (0x00000000U)
#define TXCPM_TXE_DELAY_RD_MASK (0x3fffffffU)
#define TXCPM_TXE_DELAY_WR_MASK (0x3fffffffU)


///< Delay D0 is associated with Lo to Hi Transition of the input signal
///< (tx_enable). 15 Bit signal.
#define TXCPM_TXE_DELAY_D0_BF_OFF ( 0)
#define TXCPM_TXE_DELAY_D0_BF_WID (15)
#define TXCPM_TXE_DELAY_D0_BF_MSK (0x00007FFF)
#define TXCPM_TXE_DELAY_D0_BF_DEF (0x00000000)

///< Delay D1 is associated with Hi to Lo Transition of the input signal
///< (tx_enable). 15 Bit signal.
#define TXCPM_TXE_DELAY_D1_BF_OFF (15)
#define TXCPM_TXE_DELAY_D1_BF_WID (15)
#define TXCPM_TXE_DELAY_D1_BF_MSK (0x3FFF8000)
#define TXCPM_TXE_DELAY_D1_BF_DEF (0x00000000)


/** @brief TXCPM_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x44
  *
  * Register default value:        0x00010000
  * Register full path in IP: txcpm_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} txcpm_apb_brdg_stat_reg_t;

#define TXCPM_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define TXCPM_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define TXCPM_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define TXCPM_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define TXCPM_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define TXCPM_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define TXCPM_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define TXCPM_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define TXCPM_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define TXCPM_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define TXCPM_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define TXCPM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define TXCPM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define TXCPM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define TXCPM_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define TXCPM_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define TXCPM_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define TXCPM_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define TXCPM_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define TXCPM_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define TXCPM_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define TXCPM_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define TXCPM_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define TXCPM_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define TXCPM_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define TXCPM_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define TXCPM_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TXCPM_SCRATCH_REG(_BASE) ((txcpm_scratch_reg_t*) TXCPM_SCRATCH_ADR(_BASE))
#define TXCPM_LNR_ATTACK_TSHOLD_REG(_BASE) ((txcpm_lnr_attack_tshold_reg_t*) TXCPM_LNR_ATTACK_TSHOLD_ADR(_BASE))
#define TXCPM_LNR_RELEASE_TSHOLD_REG(_BASE) ((txcpm_lnr_release_tshold_reg_t*) TXCPM_LNR_RELEASE_TSHOLD_ADR(_BASE))
#define TXCPM_DLINK_MHI_REG(_BASE) ((txcpm_dlink_mhi_reg_t*) TXCPM_DLINK_MHI_ADR(_BASE))
#define TXCPM_SEL_WND_SIZE_REG(_BASE) ((txcpm_sel_wnd_size_reg_t*) TXCPM_SEL_WND_SIZE_ADR(_BASE))
#define TXCPM_SEL_MEAS_OUTPUT_REG(_BASE) ((txcpm_sel_meas_output_reg_t*) TXCPM_SEL_MEAS_OUTPUT_ADR(_BASE))
#define TXCPM_ERR_TRIG_TIMER_CNT_REG(_BASE) ((txcpm_err_trig_timer_cnt_reg_t*) TXCPM_ERR_TRIG_TIMER_CNT_ADR(_BASE))
#define TXCPM_PRE_NORMAL_TIMER_CNT_REG(_BASE) ((txcpm_pre_normal_timer_cnt_reg_t*) TXCPM_PRE_NORMAL_TIMER_CNT_ADR(_BASE))
#define TXCPM_ALARM_MASK_REG(_BASE) ((txcpm_alarm_mask_reg_t*) TXCPM_ALARM_MASK_ADR(_BASE))
#define TXCPM_ALARM_FORCE_REG(_BASE) ((txcpm_alarm_force_reg_t*) TXCPM_ALARM_FORCE_ADR(_BASE))
#define TXCPM_EN_MEAS_REG(_BASE) ((txcpm_en_meas_reg_t*) TXCPM_EN_MEAS_ADR(_BASE))
#define TXCPM_PIQ_MEAS_TRIP_VAL_REG(_BASE) ((txcpm_piq_meas_trip_val_reg_t*) TXCPM_PIQ_MEAS_TRIP_VAL_ADR(_BASE))
#define TXCPM_DBG_ALARM_STAT_REG(_BASE) ((txcpm_dbg_alarm_stat_reg_t*) TXCPM_DBG_ALARM_STAT_ADR(_BASE))
#define TXCPM_DBG_TOTAL_WND_PWR_REG(_BASE) ((txcpm_dbg_total_wnd_pwr_reg_t*) TXCPM_DBG_TOTAL_WND_PWR_ADR(_BASE))
#define TXCPM_DBG_PEAK_WND_PWR_REG(_BASE) ((txcpm_dbg_peak_wnd_pwr_reg_t*) TXCPM_DBG_PEAK_WND_PWR_ADR(_BASE))
#define TXCPM_ALARM_CNTER_REG(_BASE) ((txcpm_alarm_cnter_reg_t*) TXCPM_ALARM_CNTER_ADR(_BASE))
#define TXCPM_TXE_DELAY_REG(_BASE) ((txcpm_txe_delay_reg_t*) TXCPM_TXE_DELAY_ADR(_BASE))
#define TXCPM_APB_BRDG_STAT_REG(_BASE) ((txcpm_apb_brdg_stat_reg_t*) TXCPM_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    txcpm_scratch_reg_t SCRATCH;         /*< Address offset = 0x0 */
    txcpm_lnr_attack_tshold_reg_t LNR_ATTACK_TSHOLD; /*< Address offset = 0x4 */
    txcpm_lnr_release_tshold_reg_t LNR_RELEASE_TSHOLD; /*< Address offset = 0x8 */
    txcpm_dlink_mhi_reg_t DLINK_MHI;       /*< Address offset = 0xc */
    txcpm_sel_wnd_size_reg_t SEL_WND_SIZE; /*< Address offset = 0x10 */
    txcpm_sel_meas_output_reg_t SEL_MEAS_OUTPUT; /*< Address offset = 0x14 */
    txcpm_err_trig_timer_cnt_reg_t ERR_TRIG_TIMER_CNT; /*< Address offset = 0x18 */
    txcpm_pre_normal_timer_cnt_reg_t PRE_NORMAL_TIMER_CNT; /*< Address offset = 0x1c */
    txcpm_alarm_mask_reg_t ALARM_MASK;      /*< Address offset = 0x20 */
    txcpm_alarm_force_reg_t ALARM_FORCE;     /*< Address offset = 0x24 */
    txcpm_en_meas_reg_t EN_MEAS;     /*< Address offset = 0x28 */
    txcpm_piq_meas_trip_val_reg_t PIQ_MEAS_TRIP_VAL; /*< Address offset = 0x2c */
    txcpm_dbg_alarm_stat_reg_t DBG_ALARM_STAT; /*< Address offset = 0x30 */
    txcpm_dbg_total_wnd_pwr_reg_t DBG_TOTAL_WND_PWR; /*< Address offset = 0x34 */
    txcpm_dbg_peak_wnd_pwr_reg_t DBG_PEAK_WND_PWR; /*< Address offset = 0x38 */
    txcpm_alarm_cnter_reg_t ALARM_CNTER;   /*< Address offset = 0x3c */
    txcpm_txe_delay_reg_t TXE_DELAY;       /*< Address offset = 0x40 */
    txcpm_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x44 */
} txcpm_t;     // size: 0x0048

// AddressSpace struct pointer
//
#define TRX_SYS0_TXCPM0  ((txcpm_t*) TRX_SYS0_TXCPM0_BASE)
#define TRX_SYS0_TXCPM1  ((txcpm_t*) TRX_SYS0_TXCPM1_BASE)
#define TRX_SYS1_TXCPM0  ((txcpm_t*) TRX_SYS1_TXCPM0_BASE)
#define TRX_SYS1_TXCPM1  ((txcpm_t*) TRX_SYS1_TXCPM1_BASE)
#define TRX_SYS2_TXCPM0  ((txcpm_t*) TRX_SYS2_TXCPM0_BASE)
#define TRX_SYS2_TXCPM1  ((txcpm_t*) TRX_SYS2_TXCPM1_BASE)
#define TRX_SYS3_TXCPM0  ((txcpm_t*) TRX_SYS3_TXCPM0_BASE)
#define TRX_SYS3_TXCPM1  ((txcpm_t*) TRX_SYS3_TXCPM1_BASE)
#define TRX_SYS4_TXCPM0  ((txcpm_t*) TRX_SYS4_TXCPM0_BASE)
#define TRX_SYS4_TXCPM1  ((txcpm_t*) TRX_SYS4_TXCPM1_BASE)
#define TRX_SYS5_TXCPM0  ((txcpm_t*) TRX_SYS5_TXCPM0_BASE)
#define TRX_SYS5_TXCPM1  ((txcpm_t*) TRX_SYS5_TXCPM1_BASE)
#define TRX_SYS6_TXCPM0  ((txcpm_t*) TRX_SYS6_TXCPM0_BASE)
#define TRX_SYS6_TXCPM1  ((txcpm_t*) TRX_SYS6_TXCPM1_BASE)
#define TRX_SYS7_TXCPM0  ((txcpm_t*) TRX_SYS7_TXCPM0_BASE)
#define TRX_SYS7_TXCPM1  ((txcpm_t*) TRX_SYS7_TXCPM1_BASE)

// ******************************************* /Address Space

#endif      // _TXCPM_H_

