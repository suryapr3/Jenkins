#ifndef _VHA_MOD_H_
#define _VHA_MOD_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define VHA0_ANT0_MOD_BASE    ( 0x03c01000 )
#define VHA0_ANT1_MOD_BASE    ( 0x03c11000 )
#define VHA1_ANT0_MOD_BASE    ( 0x03c21000 )
#define VHA1_ANT1_MOD_BASE    ( 0x03c31000 )
#define VHA2_ANT0_MOD_BASE    ( 0x03c41000 )
#define VHA2_ANT1_MOD_BASE    ( 0x03c51000 )
#define VHA3_ANT0_MOD_BASE    ( 0x03c61000 )
#define VHA3_ANT1_MOD_BASE    ( 0x03c71000 )
#define VHA4_ANT0_MOD_BASE    ( 0x03c81000 )
#define VHA4_ANT1_MOD_BASE    ( 0x03c91000 )
#define VHA5_ANT0_MOD_BASE    ( 0x03ca1000 )
#define VHA5_ANT1_MOD_BASE    ( 0x03cb1000 )
#define VHA6_ANT0_MOD_BASE    ( 0x03cc1000 )
#define VHA6_ANT1_MOD_BASE    ( 0x03cd1000 )
#define VHA7_ANT0_MOD_BASE    ( 0x03ce1000 )
#define VHA7_ANT1_MOD_BASE    ( 0x03cf1000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define VHA_MOD_SCRATCH_OFFSET   ( 0x00000000U )
#define VHA_MOD_CFG_OFFSET    ( 0x00000004U )
#define VHA_MOD_EN_OFFSET    ( 0x00000008U )
#define VHA_MOD_APB_BRDG_STAT_OFFSET ( 0x00000ffcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define VHA_MOD_SCRATCH_ADR(_BASE)      (( ( _BASE ) + ( VHA_MOD_SCRATCH_OFFSET ) ))
#define VHA_MOD_CFG_ADR(_BASE)       (( ( _BASE ) + ( VHA_MOD_CFG_OFFSET ) ))
#define VHA_MOD_EN_ADR(_BASE)       (( ( _BASE ) + ( VHA_MOD_EN_OFFSET ) ))
#define VHA_MOD_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( VHA_MOD_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief VHA_MOD_MAP_REG_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_mod_map/reg/SCRATCH
  * MOD scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} vha_mod_scratch_reg_t;

#define VHA_MOD_SCRATCH_DEFAULT (0x00000000U)
#define VHA_MOD_SCRATCH_RD_MASK (0xffffffffU)
#define VHA_MOD_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field.
#define VHA_MOD_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define VHA_MOD_SCRATCH_SCRATCHPAD_BF_WID (32)
#define VHA_MOD_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define VHA_MOD_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief VHA_MOD_MAP_REG_CONFIG register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_mod_map/reg/CONFIG
  * MOD configuration register.
  */

typedef union {
  struct {
    uint32_t ACTIVE_BANDS : 2;
    ///< Bit 0: If set, Band 0 is active. Bit 1: If set, Band 1 is active.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CONJ_0 : 1;
    ///< When set to 1, the  Imag samples of the SWG0 input are negated.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CONJ_1 : 1;
    ///< When set to 1, the  Imag samples of the SWG1 input are negated.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t USE_SAME_SWG : 1;
    ///< When set to 1, MOD1 and MOD0 both use SWG0. When this bit is set,
    ///< to upconvert to 2 different bands, CONJ_1 = !CONJ_0. Otherwise, when
    ///< set to 0,  MOD 1 uses SWG1 and MOD0 uses SWG0.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} vha_mod_cfg_reg_t;

#define VHA_MOD_CFG_DEFAULT (0x00000000U)
#define VHA_MOD_CFG_RD_MASK (0x0000001fU)
#define VHA_MOD_CFG_WR_MASK (0x0000001fU)


///< Bit 0: If set, Band 0 is active. Bit 1: If set, Band 1 is active.
#define VHA_MOD_CFG_ACTIVE_BANDS_BF_OFF ( 0)
#define VHA_MOD_CFG_ACTIVE_BANDS_BF_WID ( 2)
#define VHA_MOD_CFG_ACTIVE_BANDS_BF_MSK (0x00000003)
#define VHA_MOD_CFG_ACTIVE_BANDS_BF_DEF (0x00000000)

///< When set to 1, the  Imag samples of the SWG0 input are negated.
#define VHA_MOD_CFG_CONJ_0_BF_OFF ( 2)
#define VHA_MOD_CFG_CONJ_0_BF_WID ( 1)
#define VHA_MOD_CFG_CONJ_0_BF_MSK (0x00000004)
#define VHA_MOD_CFG_CONJ_0_BF_DEF (0x00000000)

///< When set to 1, the  Imag samples of the SWG1 input are negated.
#define VHA_MOD_CFG_CONJ_1_BF_OFF ( 3)
#define VHA_MOD_CFG_CONJ_1_BF_WID ( 1)
#define VHA_MOD_CFG_CONJ_1_BF_MSK (0x00000008)
#define VHA_MOD_CFG_CONJ_1_BF_DEF (0x00000000)

///< When set to 1, MOD1 and MOD0 both use SWG0. When this bit is set,
///< to upconvert to 2 different bands, CONJ_1 = !CONJ_0. Otherwise, when
///< set to 0,  MOD 1 uses SWG1 and MOD0 uses SWG0.
#define VHA_MOD_CFG_USE_SAME_SWG_BF_OFF ( 4)
#define VHA_MOD_CFG_USE_SAME_SWG_BF_WID ( 1)
#define VHA_MOD_CFG_USE_SAME_SWG_BF_MSK (0x00000010)
#define VHA_MOD_CFG_USE_SAME_SWG_BF_DEF (0x00000000)


/** @brief VHA_MOD_MAP_REG_ENABLE register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_mod_map/reg/ENABLE
  * MOD enable register.
  */

typedef union {
  struct {
    uint32_t MOD_EN_PER_SAMPLE : 4;
    ///< Allows the user to indicate which incoming samples are enabled. The
    ///< incoming data stream has a signle valid bit arriving with the up to
    ///< 4 IQ samples every clockcycle. The user can choose to enable only
    ///< the N lower samples. This allows the data path  for the 4-N upper
    ///< samples to be clock gated.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} vha_mod_en_reg_t;

#define VHA_MOD_EN_DEFAULT (0x00000000U)
#define VHA_MOD_EN_RD_MASK (0x0000000fU)
#define VHA_MOD_EN_WR_MASK (0x0000000fU)


///< Allows the user to indicate which incoming samples are enabled. The
///< incoming data stream has a signle valid bit arriving with the up to
///< 4 IQ samples every clockcycle. The user can choose to enable only
///< the N lower samples. This allows the data path  for the 4-N upper
///< samples to be clock gated.
#define VHA_MOD_EN_MOD_EN_PER_SAMPLE_BF_OFF ( 0)
#define VHA_MOD_EN_MOD_EN_PER_SAMPLE_BF_WID ( 4)
#define VHA_MOD_EN_MOD_EN_PER_SAMPLE_BF_MSK (0x0000000F)
#define VHA_MOD_EN_MOD_EN_PER_SAMPLE_BF_DEF (0x00000000)


/** @brief VHA_MOD_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0xffc
  *
  * Register default value:        0x00010000
  * Register full path in IP: vha_mod_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} vha_mod_apb_brdg_stat_reg_t;

#define VHA_MOD_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define VHA_MOD_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define VHA_MOD_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define VHA_MOD_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define VHA_MOD_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define VHA_MOD_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define VHA_MOD_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define VHA_MOD_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define VHA_MOD_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define VHA_MOD_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define VHA_MOD_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define VHA_MOD_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define VHA_MOD_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define VHA_MOD_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define VHA_MOD_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define VHA_MOD_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define VHA_MOD_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define VHA_MOD_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define VHA_MOD_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define VHA_MOD_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define VHA_MOD_SCRATCH_REG(_BASE) ((vha_mod_scratch_reg_t*) VHA_MOD_SCRATCH_ADR(_BASE))
#define VHA_MOD_CFG_REG(_BASE) ((vha_mod_cfg_reg_t*) VHA_MOD_CFG_ADR(_BASE))
#define VHA_MOD_EN_REG(_BASE) ((vha_mod_en_reg_t*) VHA_MOD_EN_ADR(_BASE))
#define VHA_MOD_APB_BRDG_STAT_REG(_BASE) ((vha_mod_apb_brdg_stat_reg_t*) VHA_MOD_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    vha_mod_scratch_reg_t SCRATCH;         /*< Address offset = 0x0 */
    vha_mod_cfg_reg_t CFG;          /*< Address offset = 0x4 */
    vha_mod_en_reg_t EN;          /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [4080]; /*< Address offset = 0xc */
    vha_mod_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0xffc */
} vha_mod_t;     // size: 0x0010

// AddressSpace struct pointer
//
#define VHA0_ANT0_MOD    ((vha_mod_t*) VHA0_ANT0_MOD_BASE)
#define VHA0_ANT1_MOD    ((vha_mod_t*) VHA0_ANT1_MOD_BASE)
#define VHA1_ANT0_MOD    ((vha_mod_t*) VHA1_ANT0_MOD_BASE)
#define VHA1_ANT1_MOD    ((vha_mod_t*) VHA1_ANT1_MOD_BASE)
#define VHA2_ANT0_MOD    ((vha_mod_t*) VHA2_ANT0_MOD_BASE)
#define VHA2_ANT1_MOD    ((vha_mod_t*) VHA2_ANT1_MOD_BASE)
#define VHA3_ANT0_MOD    ((vha_mod_t*) VHA3_ANT0_MOD_BASE)
#define VHA3_ANT1_MOD    ((vha_mod_t*) VHA3_ANT1_MOD_BASE)
#define VHA4_ANT0_MOD    ((vha_mod_t*) VHA4_ANT0_MOD_BASE)
#define VHA4_ANT1_MOD    ((vha_mod_t*) VHA4_ANT1_MOD_BASE)
#define VHA5_ANT0_MOD    ((vha_mod_t*) VHA5_ANT0_MOD_BASE)
#define VHA5_ANT1_MOD    ((vha_mod_t*) VHA5_ANT1_MOD_BASE)
#define VHA6_ANT0_MOD    ((vha_mod_t*) VHA6_ANT0_MOD_BASE)
#define VHA6_ANT1_MOD    ((vha_mod_t*) VHA6_ANT1_MOD_BASE)
#define VHA7_ANT0_MOD    ((vha_mod_t*) VHA7_ANT0_MOD_BASE)
#define VHA7_ANT1_MOD    ((vha_mod_t*) VHA7_ANT1_MOD_BASE)

// ******************************************* /Address Space

#endif      // _VHA_MOD_H_

