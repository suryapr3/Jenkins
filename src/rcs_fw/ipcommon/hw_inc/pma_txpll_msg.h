#ifndef _PMA_TXPLL_MSG_H_
#define _PMA_TXPLL_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_TXPLL_GLOBAL_BASE  ( 0x06025400 )
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q0_BASE      ( 0x06029400 )
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q1_BASE      ( 0x0602d400 )
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q2_BASE      ( 0x06031400 )
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q3_BASE      ( 0x06035400 )
#define DLNK_JESD1_PHY_PMA0_TXPLL_GLOBAL_BASE  ( 0x06825400 )
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q0_BASE      ( 0x06829400 )
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q1_BASE      ( 0x0682d400 )
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q2_BASE      ( 0x06831400 )
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q3_BASE      ( 0x06835400 )
#define DLNK_JESD2_PHY_PMA0_TXPLL_GLOBAL_BASE  ( 0x07025400 )
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q0_BASE      ( 0x07029400 )
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q1_BASE      ( 0x0702d400 )
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q2_BASE      ( 0x07031400 )
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q3_BASE      ( 0x07035400 )
#define DLNK_JESD3_PHY_PMA0_TXPLL_GLOBAL_BASE  ( 0x07825400 )
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q0_BASE      ( 0x07829400 )
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q1_BASE      ( 0x0782d400 )
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q2_BASE      ( 0x07831400 )
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q3_BASE      ( 0x07835400 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PMA_TXPLL_MGS_CAR_CFG_OFFSET ( 0x00000000U )
#define PMA_TXPLL_MGS_CAR_CFG_RO_OFFSET ( 0x00000004U )
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_OFFSET ( 0x00000008U )
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_OFFSET ( 0x0000000cU )
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_OFFSET ( 0x00000010U )
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_OFFSET ( 0x00000014U )
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_OFFSET ( 0x00000018U )
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_OFFSET ( 0x0000001cU )
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_OFFSET ( 0x00000020U )
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_OFFSET ( 0x00000024U )
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_OFFSET ( 0x00000028U )
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_OFFSET ( 0x0000002cU )
#define PMA_TXPLL_MGS_PWR_MNG_STAT_OFFSET ( 0x00000030U )
#define PMA_TXPLL_MGS_CFG_OFFSET ( 0x00000034U )
#define PMA_TXPLL_MGS_CFG_RO_OFFSET ( 0x00000038U )
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_OFFSET ( 0x0000003cU )
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_OFFSET ( 0x00000040U )
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_OFFSET ( 0x00000044U )
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_OFFSET ( 0x00000048U )
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_OFFSET ( 0x0000004cU )
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_OFFSET ( 0x00000050U )
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_OFFSET ( 0x00000054U )
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_OFFSET ( 0x00000058U )
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_OFFSET ( 0x0000005cU )
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ( 0x00000060U )
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ( 0x00000064U )
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_OFFSET ( 0x00000068U )
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_OFFSET ( 0x0000006cU )
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_OFFSET ( 0x00000070U )
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_OFFSET ( 0x00000074U )
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_OFFSET ( 0x00000078U )
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_OFFSET ( 0x0000007cU )
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_OFFSET ( 0x00000080U )
#define PMA_TXPLL_MSG_RPU_CTRL_OFFSET ( 0x00000084U )
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_OFFSET ( 0x00000088U )
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_OFFSET ( 0x0000008cU )
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_OFFSET ( 0x00000090U )
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_OFFSET ( 0x00000094U )
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_OFFSET ( 0x00000098U )
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ( 0x0000009cU )
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ( 0x000000a0U )
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ( 0x000000a4U )
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ( 0x000000a8U )
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_OFFSET ( 0x000000acU )
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_OFFSET ( 0x000000b0U )
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_OFFSET ( 0x000000b4U )
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_OFFSET ( 0x000000b8U )
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_OFFSET ( 0x000000bcU )
#define PMA_TXPLL_MGS_STAT_0_OFFSET ( 0x000000c0U )
#define PMA_TXPLL_MGS_STAT_1_OFFSET ( 0x000000c4U )
#define PMA_TXPLL_MGS_STAT_2_OFFSET ( 0x000000c8U )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_OFFSET ( 0x000000ccU )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_OFFSET ( 0x000000d0U )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_OFFSET ( 0x000000d4U )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_OFFSET ( 0x000000d8U )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_OFFSET ( 0x000000dcU )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_OFFSET ( 0x000000e0U )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_OFFSET ( 0x000000e4U )
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_OFFSET ( 0x000000e8U )
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_OFFSET ( 0x000000ecU )
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_OFFSET ( 0x000000f0U )
#define PMA_TXPLL_MGS_CTRL_OUT_0_OFFSET ( 0x000000f4U )
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_OFFSET ( 0x000000f8U )
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_OFFSET ( 0x000000fcU )
#define PMA_TXPLL_MGS_DCCRST_CTRL_OFFSET ( 0x00000100U )
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_OFFSET ( 0x00000104U )
#define PMA_TXPLL_MGS_OBSVR_OFFSET ( 0x00000108U )
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_OFFSET ( 0x0000010cU )
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_OFFSET ( 0x00000110U )
#define PMA_TXPLL_MGS_BRKPT_CTRL_OFFSET ( 0x00000114U )
#define PMA_TXPLL_MGS_BRKPT_STAT_OFFSET ( 0x00000118U )
#define PMA_TXPLL_MGS_BRKPT_CLR_OFFSET ( 0x0000011cU )
#define PMA_TXPLL_MGS_CKM_CTRL_0_OFFSET ( 0x00000120U )
#define PMA_TXPLL_MGS_CKM_CTRL_1_OFFSET ( 0x00000124U )
#define PMA_TXPLL_MGS_CKM_CTRL_2_OFFSET ( 0x00000128U )
#define PMA_TXPLL_MGS_CKM_STAT_OFFSET ( 0x0000012cU )
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_OFFSET ( 0x00000130U )
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_OFFSET ( 0x00000134U )
#define PMA_TXPLL_MGS_LOCKTIME_OFFSET ( 0x00000138U )
#define PMA_TXPLL_MGS_SCRATCHY_0_OFFSET ( 0x0000013cU )
#define PMA_TXPLL_MGS_SCRATCHY_1_OFFSET ( 0x00000140U )
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_OFFSET ( 0x00000144U )
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_OFFSET ( 0x00000148U )
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_OFFSET ( 0x0000014cU )
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_OFFSET ( 0x00000150U )
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_OFFSET ( 0x00000154U )
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_OFFSET ( 0x00000158U )
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_OFFSET ( 0x0000015cU )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_OFFSET ( 0x00000160U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_OFFSET ( 0x00000164U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_OFFSET ( 0x00000168U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_OFFSET ( 0x0000016cU )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_OFFSET ( 0x00000170U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_OFFSET ( 0x00000174U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_OFFSET ( 0x00000178U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_OFFSET ( 0x0000017cU )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_OFFSET ( 0x00000180U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_OFFSET ( 0x00000184U )
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_OFFSET ( 0x00000188U )
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_OFFSET ( 0x000003d8U )
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_OFFSET ( 0x000003dcU )
#define PMA_TXPLL_MGS_RW_SPARE_0_OFFSET ( 0x000003e0U )
#define PMA_TXPLL_MGS_RW_SPARE_1_OFFSET ( 0x000003e4U )
#define PMA_TXPLL_MGS_RW_SPARE_2_OFFSET ( 0x000003e8U )
#define PMA_TXPLL_MGS_RW_SPARE_3_OFFSET ( 0x000003ecU )
#define PMA_TXPLL_MGS_RO_SPARE_0_OFFSET ( 0x000003f0U )
#define PMA_TXPLL_MGS_RO_SPARE_1_OFFSET ( 0x000003f4U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PMA_TXPLL_MGS_CAR_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CAR_CFG_OFFSET ) ))
#define PMA_TXPLL_MGS_CAR_CFG_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CAR_CFG_RO_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_0_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_1_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_2_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_3_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_4_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_5_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_6_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCH_PAD_7_OFFSET ) ))
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_FORCE_PUP_CTRL_OFFSET ) ))
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_PWR_MNG_CTRL_OFFSET ) ))
#define PMA_TXPLL_MGS_PWR_MNG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_PWR_MNG_STAT_OFFSET ) ))
#define PMA_TXPLL_MGS_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CFG_OFFSET ) ))
#define PMA_TXPLL_MGS_CFG_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CFG_RO_OFFSET ) ))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_OFFSET ) ))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_OFFSET ) ))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_OFFSET ) ))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_OFFSET ) ))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_OFFSET ) ))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_OFFSET ) ))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_OFFSET ) ))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_OFFSET ) ))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_OFFSET ) ))
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_CTRL_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_LUT_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_LUT_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_LUT_CFG_2_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_LUT_CFG_3_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_LUT_CFG_4_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RPU_EVENT_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RPU_EVENT_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RPU_EVENT_CFG_2_OFFSET ) ))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RPU_EVENT_CFG_3_OFFSET ) ))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RPU_EVENT_CFG_4_OFFSET ) ))
#define PMA_TXPLL_MGS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_STAT_0_OFFSET ) ))
#define PMA_TXPLL_MGS_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_STAT_1_OFFSET ) ))
#define PMA_TXPLL_MGS_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_STAT_2_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_OFFSET ) ))
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_PLL_STAT_CTRL_OFFSET ) ))
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_OFFSET ) ))
#define PMA_TXPLL_MGS_CTRL_OUT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CTRL_OUT_0_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_CTRL_OVRD_OFFSET ) ))
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_OFFSET ) ))
#define PMA_TXPLL_MGS_DCCRST_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_DCCRST_CTRL_OFFSET ) ))
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_STAGGER_TIME_CFG_OFFSET ) ))
#define PMA_TXPLL_MGS_OBSVR_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_OBSVR_OFFSET ) ))
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_OFFSET ) ))
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_OFFSET ) ))
#define PMA_TXPLL_MGS_BRKPT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_BRKPT_CTRL_OFFSET ) ))
#define PMA_TXPLL_MGS_BRKPT_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_BRKPT_STAT_OFFSET ) ))
#define PMA_TXPLL_MGS_BRKPT_CLR_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_BRKPT_CLR_OFFSET ) ))
#define PMA_TXPLL_MGS_CKM_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CKM_CTRL_0_OFFSET ) ))
#define PMA_TXPLL_MGS_CKM_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CKM_CTRL_1_OFFSET ) ))
#define PMA_TXPLL_MGS_CKM_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CKM_CTRL_2_OFFSET ) ))
#define PMA_TXPLL_MGS_CKM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CKM_STAT_OFFSET ) ))
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_OFFSET ) ))
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_OFFSET ) ))
#define PMA_TXPLL_MGS_LOCKTIME_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_LOCKTIME_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCHY_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCHY_0_OFFSET ) ))
#define PMA_TXPLL_MGS_SCRATCHY_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_SCRATCHY_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_OFFSET ) ))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_OFFSET ) ))
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_WRAPPER_RW_SPARE_OFFSET ) ))
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_WRAPPER_RO_SPARE_OFFSET ) ))
#define PMA_TXPLL_MGS_RW_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RW_SPARE_0_OFFSET ) ))
#define PMA_TXPLL_MGS_RW_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RW_SPARE_1_OFFSET ) ))
#define PMA_TXPLL_MGS_RW_SPARE_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RW_SPARE_2_OFFSET ) ))
#define PMA_TXPLL_MGS_RW_SPARE_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RW_SPARE_3_OFFSET ) ))
#define PMA_TXPLL_MGS_RO_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RO_SPARE_0_OFFSET ) ))
#define PMA_TXPLL_MGS_RO_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TXPLL_MGS_RO_SPARE_1_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CAR_CFG register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_car_cfg
  * TX PLL clock and reset config
  */

typedef union {
  struct {
    uint32_t TXPLLFSM_CKEN_OVREN : 1;
    ///< FSM clock enable override value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLFSM_CKEN_OVR : 1;
    ///< FSM clock enable override enable.  When this is set, the FSM main
    ///< clock can be disable/enable by cmn_fsm_cken_ovr.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_RST_OVR_EN : 1;
    ///< TX PLL reset override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_RST_B_OVR : 1;
    ///< TX PLL reset override value
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLLCLK_LOCOVREN : 1;
    ///< Keepalive clock override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLLCLK_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Keepalive clock override value.  To force Main clock runs in keepalive
    ///< clock.  This only takes into effort when cmn_mainclk_locovren is set
    ///< to 1.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_WAIT_FOR_LOCK_DISABLE : 1;
    ///< Ignore checking pll lock for post div clock SoC
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_WAIT_FOR_LOCK_DISABLE : 1;
    ///< Ignore checking pll lock for post div clock AutoNeg
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXPLL_KEEPALIVE_FAST_SEL : 1;
    ///< Select TxPLL PostDiv Clock source when PLL is in unlock state.  0
    ///< - Keepalive Slow Clock; 1 - Keepalive Fast Clock
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_car_cfg_reg_t;

#define PMA_TXPLL_MGS_CAR_CFG_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CAR_CFG_RD_MASK (0x000001ffU)
#define PMA_TXPLL_MGS_CAR_CFG_WR_MASK (0x000001ffU)


///< FSM clock enable override value.
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVREN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVREN_BF_DEF (0x00000000)

///< FSM clock enable override enable.  When this is set, the FSM main
///< clock can be disable/enable by cmn_fsm_cken_ovr.
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVR_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVR_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLFSM_CKEN_OVR_BF_DEF (0x00000000)

///< TX PLL reset override enable
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_OVR_EN_BF_OFF ( 2)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_OVR_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_OVR_EN_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_OVR_EN_BF_DEF (0x00000000)

///< TX PLL reset override value
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_B_OVR_BF_OFF ( 3)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_B_OVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_B_OVR_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_RST_B_OVR_BF_DEF (0x00000000)

///< Keepalive clock override enable
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_LOCOVREN_BF_OFF ( 4)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_LOCOVREN_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_LOCOVREN_BF_DEF (0x00000000)

///< Keepalive clock override value.  To force Main clock runs in keepalive
///< clock.  This only takes into effort when cmn_mainclk_locovren is set
///< to 1.
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_KEEPALIVE_EN_B_LOCOVR_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00000020)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLLCLK_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Ignore checking pll lock for post div clock SoC
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_SOC_WAIT_FOR_LOCK_DIS_BF_OFF ( 6)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_SOC_WAIT_FOR_LOCK_DIS_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_SOC_WAIT_FOR_LOCK_DIS_BF_MSK (0x00000040)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_SOC_WAIT_FOR_LOCK_DIS_BF_DEF (0x00000000)

///< Ignore checking pll lock for post div clock AutoNeg
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_AUTONEG_WAIT_FOR_LOCK_DIS_BF_OFF ( 7)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_AUTONEG_WAIT_FOR_LOCK_DIS_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_AUTONEG_WAIT_FOR_LOCK_DIS_BF_MSK (0x00000080)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_POSTDIV_AUTONEG_WAIT_FOR_LOCK_DIS_BF_DEF (0x00000000)

///< Select TxPLL PostDiv Clock source when PLL is in unlock state.  0
///< - Keepalive Slow Clock; 1 - Keepalive Fast Clock
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_KEEPALIVE_FAST_SEL_BF_OFF ( 8)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_KEEPALIVE_FAST_SEL_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_KEEPALIVE_FAST_SEL_BF_MSK (0x00000100)
#define PMA_TXPLL_MGS_CAR_CFG_TXPLL_KEEPALIVE_FAST_SEL_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CAR_CFG_RO register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_car_cfg_ro
  * TX PLL clock and reset config readback
  */

typedef union {
  struct {
    uint32_t TXPLLCLK_KEEPALIVE_EN_B_LOC : 1;
    ///< Keepalive clock enable in Main clock.  This is the value before the
    ///< register override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_STAT : 2;
    ///< TX PLL post div clock  SoC glitchless clock mux status. 2'01 - keepalive
    ///< clock is selected; 2'b10 - post div clock  is selected
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_STAT : 2;
    ///< TX PLL post div clock  AutoNeg glitchless clock mux status. 2'01 -
    ///< keepalive clock is selected; 2'b10 - post div clock  is selected
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_KEEPALIVECLK_STAT : 2;
    ///< TxPLL PostDiv clock glitchless keepalive clock mux status. 2'01 -
    ///< keepalive slow clock is selected; 2'b10 - keepalive fast clock is
    ///< selected
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_car_cfg_ro_reg_t;

#define PMA_TXPLL_MGS_CAR_CFG_RO_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CAR_CFG_RO_RD_MASK (0x0000007fU)
#define PMA_TXPLL_MGS_CAR_CFG_RO_WR_MASK (0x00000000U)


///< Keepalive clock enable in Main clock.  This is the value before the
///< register override
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLLCLK_KEEPALIVE_EN_B_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLLCLK_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLLCLK_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLLCLK_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< TX PLL post div clock  SoC glitchless clock mux status. 2'01 - keepalive
///< clock is selected; 2'b10 - post div clock  is selected
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_SOC_STAT_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_SOC_STAT_BF_WID ( 2)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_SOC_STAT_BF_MSK (0x00000006)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_SOC_STAT_BF_DEF (0x00000000)

///< TX PLL post div clock  AutoNeg glitchless clock mux status. 2'01 -
///< keepalive clock is selected; 2'b10 - post div clock  is selected
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_AUTONEG_STAT_BF_OFF ( 3)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_AUTONEG_STAT_BF_WID ( 2)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_AUTONEG_STAT_BF_MSK (0x00000018)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_POSTDIV_AUTONEG_STAT_BF_DEF (0x00000000)

///< TxPLL PostDiv clock glitchless keepalive clock mux status. 2'01 -
///< keepalive slow clock is selected; 2'b10 - keepalive fast clock is
///< selected
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_KEEPALIVECLK_STAT_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_KEEPALIVECLK_STAT_BF_WID ( 2)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_KEEPALIVECLK_STAT_BF_MSK (0x00000060)
#define PMA_TXPLL_MGS_CAR_CFG_RO_TXPLL_KEEPALIVECLK_STAT_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_0
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_0 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_0_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_TXPLL_SCRATCH_PAD_0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_TXPLL_SCRATCH_PAD_0_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_TXPLL_SCRATCH_PAD_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_TXPLL_SCRATCH_PAD_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_1 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_1
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_1 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_1_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_TXPLL_SCRATCH_PAD_1_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_TXPLL_SCRATCH_PAD_1_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_TXPLL_SCRATCH_PAD_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_TXPLL_SCRATCH_PAD_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_2 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_2
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_2 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_2_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_TXPLL_SCRATCH_PAD_2_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_TXPLL_SCRATCH_PAD_2_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_TXPLL_SCRATCH_PAD_2_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_TXPLL_SCRATCH_PAD_2_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_3 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_3
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_3 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_3_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_3_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_TXPLL_SCRATCH_PAD_3_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_TXPLL_SCRATCH_PAD_3_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_TXPLL_SCRATCH_PAD_3_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_TXPLL_SCRATCH_PAD_3_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_4 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_4
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_4 : 32;
    ///< Scratch pad 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_4_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_4_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_WR_MASK (0xffffffffU)


///< Scratch pad 4
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_TXPLL_SCRATCH_PAD_4_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_TXPLL_SCRATCH_PAD_4_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_TXPLL_SCRATCH_PAD_4_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_TXPLL_SCRATCH_PAD_4_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_5 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_5
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_5 : 32;
    ///< Scratch pad 5
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_5_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_5_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_WR_MASK (0xffffffffU)


///< Scratch pad 5
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_TXPLL_SCRATCH_PAD_5_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_TXPLL_SCRATCH_PAD_5_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_TXPLL_SCRATCH_PAD_5_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_TXPLL_SCRATCH_PAD_5_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_6 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_6
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_6 : 32;
    ///< Scratch pad 6
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_6_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_6_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_WR_MASK (0xffffffffU)


///< Scratch pad 6
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_TXPLL_SCRATCH_PAD_6_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_TXPLL_SCRATCH_PAD_6_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_TXPLL_SCRATCH_PAD_6_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_TXPLL_SCRATCH_PAD_6_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCH_PAD_7 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratch_pad_7
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TXPLL_SCRATCH_PAD_7 : 32;
    ///< Scratch pad 7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratch_pad_7_reg_t;

#define PMA_TXPLL_MGS_SCRATCH_PAD_7_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_WR_MASK (0xffffffffU)


///< Scratch pad 7
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_TXPLL_SCRATCH_PAD_7_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_TXPLL_SCRATCH_PAD_7_BF_WID (32)
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_TXPLL_SCRATCH_PAD_7_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_TXPLL_SCRATCH_PAD_7_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_FORCE_PUP_CTRL register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_force_pup_ctrl
  * TX PLL soft force power control
  */

typedef union {
  struct {
    uint32_t TXPLL_FORCE_PUP_EN : 1;
    ///< Tx PLL soft force power override enable.  When this is set Tx PLL
    ///< force power up will be controlled by txpll_force_pup
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_FORCE_PUP : 1;
    ///< Tx PLL soft force power.  Set this to '1' when the user wants to manually
    ///< power up the Tx PLL
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_FORCE_RATE_FREQ_OVR_EN : 1;
    ///< Tx PLL rate freq override enable.  When this is set Tx PLL force power
    ///< up rate freq will be controlled by txpll_force_rate_freq
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXPLL_FORCE_RATE_FREQ_OVR : 3;
    ///< Tx PLL rate freq. This is the rate freq select that Tx PLL will be
    ///< powered to selected mode during force power up
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TXPLL_IGNORE_MODE : 1;
    ///< When this bit is set, force Tx PLL to be powered into txpll_force_rate_freq
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_force_pup_ctrl_reg_t;

#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_RD_MASK (0x00000177U)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_WR_MASK (0x00000177U)


///< Tx PLL soft force power override enable.  When this is set Tx PLL
///< force power up will be controlled by txpll_force_pup
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_EN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_EN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_EN_BF_DEF (0x00000000)

///< Tx PLL soft force power.  Set this to '1' when the user wants to manually
///< power up the Tx PLL
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_BF_OFF ( 1)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_BF_WID ( 1)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_PUP_BF_DEF (0x00000000)

///< Tx PLL rate freq override enable.  When this is set Tx PLL force power
///< up rate freq will be controlled by txpll_force_rate_freq
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_EN_BF_OFF ( 2)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_EN_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_EN_BF_DEF (0x00000000)

///< Tx PLL rate freq. This is the rate freq select that Tx PLL will be
///< powered to selected mode during force power up
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_BF_OFF ( 4)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_BF_WID ( 3)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_BF_MSK (0x00000070)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_FORCE_RATE_FREQ_OVR_BF_DEF (0x00000000)

///< When this bit is set, force Tx PLL to be powered into txpll_force_rate_freq
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_IGNORE_MODE_BF_OFF ( 8)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_IGNORE_MODE_BF_WID ( 1)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_IGNORE_MODE_BF_MSK (0x00000100)
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_TXPLL_IGNORE_MODE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_POWER_MNG_CTRL register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_power_mng_ctrl
  * TX PLL power management control
  */

typedef union {
  struct {
    uint32_t TXPLLPMU_H8_OFF_DELAY : 4;
    ///< PMU hibrate off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLPMU_H8_RST_ON_DELAY : 4;
    ///< PMU hibrate rest on delay
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLLPMU_ISO_OFF_DELAY : 4;
    ///< PMU islolation off delay
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLLPMU_RESTORE_ISO_ON_DELAY : 4;
    ///< PMU restore isolation on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXPLLPMU_RESTORE_OFF_DELAY : 4;
    ///< PMU restore isolation off delay
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLLPMU_RST_OFF_DELAY : 4;
    ///< PMU reset off delay
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t TXPLLFSM_PMU_REQ_EN : 1;
    ///< PMU request override enable
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t TXPLLFSM_PMU_REQ : 1;
    ///< PMU request override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_pwr_mng_ctrl_reg_t;

#define PMA_TXPLL_MGS_PWR_MNG_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_RD_MASK (0x03ffffffU)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_WR_MASK (0x03ffffffU)


///< PMU hibrate off delay
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_OFF_DELAY_BF_OFF ( 0)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_OFF_DELAY_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_OFF_DELAY_BF_MSK (0x0000000F)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_OFF_DELAY_BF_DEF (0x00000000)

///< PMU hibrate rest on delay
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_RST_ON_DELAY_BF_OFF ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_RST_ON_DELAY_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_RST_ON_DELAY_BF_MSK (0x000000F0)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_H8_RST_ON_DELAY_BF_DEF (0x00000000)

///< PMU islolation off delay
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_ISO_OFF_DELAY_BF_OFF ( 8)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_ISO_OFF_DELAY_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_ISO_OFF_DELAY_BF_MSK (0x00000F00)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_ISO_OFF_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation on delay
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_ISO_ON_DELAY_BF_OFF (12)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_ISO_ON_DELAY_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_ISO_ON_DELAY_BF_MSK (0x0000F000)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_ISO_ON_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation off delay
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_OFF_DELAY_BF_OFF (16)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_OFF_DELAY_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_OFF_DELAY_BF_MSK (0x000F0000)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RESTORE_OFF_DELAY_BF_DEF (0x00000000)

///< PMU reset off delay
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RST_OFF_DELAY_BF_OFF (20)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RST_OFF_DELAY_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RST_OFF_DELAY_BF_MSK (0x00F00000)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLPMU_RST_OFF_DELAY_BF_DEF (0x00000000)

///< PMU request override enable
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_EN_BF_OFF (24)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_EN_BF_MSK (0x01000000)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_EN_BF_DEF (0x00000000)

///< PMU request override
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_BF_OFF (25)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_BF_WID ( 1)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_BF_MSK (0x02000000)
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_TXPLLFSM_PMU_REQ_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_POWER_MNG_STATUS register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_power_mng_status
  * TX PLL power management status
  */

typedef union {
  struct {
    uint32_t TXPLLFSM_PMU_ACK : 1;
    ///< PMU ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLFSM_PMU_PSTATE : 1;
    ///< PMU current Pstate
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLFSM_PMU_STAT : 1;
    ///< PMU status.  0 - Idle; 1 - Isolation On
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXPLLFSM_PMU_STATE : 4;
    ///< PMU FSM state
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLLFSM_PMUIF_STATE : 3;
    ///< PMU I/F FSM state
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_pwr_mng_stat_reg_t;

#define PMA_TXPLL_MGS_PWR_MNG_STAT_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_RD_MASK (0x000007f7U)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_WR_MASK (0x00000000U)


///< PMU ack
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_ACK_BF_OFF ( 0)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_ACK_BF_WID ( 1)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_ACK_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_ACK_BF_DEF (0x00000000)

///< PMU current Pstate
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_PSTATE_BF_OFF ( 1)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_PSTATE_BF_WID ( 1)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_PSTATE_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_PSTATE_BF_DEF (0x00000000)

///< PMU status.  0 - Idle; 1 - Isolation On
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STAT_BF_OFF ( 2)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STAT_BF_WID ( 1)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STAT_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STAT_BF_DEF (0x00000000)

///< PMU FSM state
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STATE_BF_OFF ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STATE_BF_WID ( 4)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STATE_BF_MSK (0x000000F0)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMU_STATE_BF_DEF (0x00000000)

///< PMU I/F FSM state
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMUIF_STATE_BF_OFF ( 8)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMUIF_STATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMUIF_STATE_BF_MSK (0x00000700)
#define PMA_TXPLL_MGS_PWR_MNG_STAT_TXPLLFSM_PMUIF_STATE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CFG register description at address offset 0x34
  *
  * Register default value:        0x00001200
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_cfg
  * TX PLL config
  */

typedef union {
  struct {
    uint32_t TXPLL_PG_DISABLE : 1;
    ///< Main FSM power gated disable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_USED : 1;
    ///< Set this bit, when TX PLL is used
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_FREEZE_SOC : 1;
    ///< When this is set to 1; the output from selecting txpll_divrate_autoneg_muxd*
    ///< will be frozen.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_FREEZE_AUTONEG : 1;
    ///< When this is set to 1; the output from selecting txpll_divrate_soc_muxd*
    ///< will be frozen.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTH_LOCOVREN : 1;
    ///< Ratewidth Mode override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTH_MODE_LOCOVR : 3;
    ///< Ratewidth Mode to be override
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLL_ON_STATE : 3;
    ///< Main FSM ON State
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2"
    uint32_t TXPLL_READY_STATE : 3;
    ///< Main FSM READY State
    ///< AccessType="RW" BitOffset="11" ResetValue="0x2"
    uint32_t TXPLLFSM_CALABORT_PULSE_WIDTH : 3;
    ///< Main FSM calibration abort pulse width
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXPLL_USEPLLCASCADE : 5;
    ///< TxPLL in CMN PLL cascading mode. Bit [n] = Mode [n]
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_cfg_reg_t;

#define PMA_TXPLL_MGS_CFG_DEFAULT (0x00001200U)
#define PMA_TXPLL_MGS_CFG_RD_MASK (0x003fffffU)
#define PMA_TXPLL_MGS_CFG_WR_MASK (0x003fffffU)


///< Main FSM power gated disable
#define PMA_TXPLL_MGS_CFG_TXPLL_PG_DIS_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CFG_TXPLL_PG_DIS_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFG_TXPLL_PG_DIS_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CFG_TXPLL_PG_DIS_BF_DEF (0x00000000)

///< Set this bit, when TX PLL is used
#define PMA_TXPLL_MGS_CFG_TXPLL_USED_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CFG_TXPLL_USED_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFG_TXPLL_USED_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_CFG_TXPLL_USED_BF_DEF (0x00000000)

///< When this is set to 1; the output from selecting txpll_divrate_autoneg_muxd*
///< will be frozen.
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_SOC_BF_OFF ( 2)
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_SOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_SOC_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_SOC_BF_DEF (0x00000000)

///< When this is set to 1; the output from selecting txpll_divrate_soc_muxd*
///< will be frozen.
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_AUTONEG_BF_OFF ( 3)
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_AUTONEG_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_AUTONEG_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_CFG_TXPLL_DIVRATE_FREEZE_AUTONEG_BF_DEF (0x00000000)

///< Ratewidth Mode override enable
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_LOCOVREN_BF_OFF ( 4)
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_LOCOVREN_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_LOCOVREN_BF_DEF (0x00000000)

///< Ratewidth Mode to be override
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_MODE_LOCOVR_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_MODE_LOCOVR_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_MODE_LOCOVR_BF_MSK (0x000000E0)
#define PMA_TXPLL_MGS_CFG_TXPLLRATEWIDTH_MODE_LOCOVR_BF_DEF (0x00000000)

///< Main FSM ON State
#define PMA_TXPLL_MGS_CFG_TXPLL_ON_STATE_BF_OFF ( 8)
#define PMA_TXPLL_MGS_CFG_TXPLL_ON_STATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFG_TXPLL_ON_STATE_BF_MSK (0x00000700)
#define PMA_TXPLL_MGS_CFG_TXPLL_ON_STATE_BF_DEF (0x00000200)

///< Main FSM READY State
#define PMA_TXPLL_MGS_CFG_TXPLL_READY_STATE_BF_OFF (11)
#define PMA_TXPLL_MGS_CFG_TXPLL_READY_STATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFG_TXPLL_READY_STATE_BF_MSK (0x00003800)
#define PMA_TXPLL_MGS_CFG_TXPLL_READY_STATE_BF_DEF (0x00001000)

///< Main FSM calibration abort pulse width
#define PMA_TXPLL_MGS_CFG_TXPLLFSM_CALABORT_PULSE_WIDTH_BF_OFF (14)
#define PMA_TXPLL_MGS_CFG_TXPLLFSM_CALABORT_PULSE_WIDTH_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFG_TXPLLFSM_CALABORT_PULSE_WIDTH_BF_MSK (0x0001C000)
#define PMA_TXPLL_MGS_CFG_TXPLLFSM_CALABORT_PULSE_WIDTH_BF_DEF (0x00000000)

///< TxPLL in CMN PLL cascading mode. Bit [n] = Mode [n]
#define PMA_TXPLL_MGS_CFG_TXPLL_USEPLLCASCADE_BF_OFF (17)
#define PMA_TXPLL_MGS_CFG_TXPLL_USEPLLCASCADE_BF_WID ( 5)
#define PMA_TXPLL_MGS_CFG_TXPLL_USEPLLCASCADE_BF_MSK (0x003E0000)
#define PMA_TXPLL_MGS_CFG_TXPLL_USEPLLCASCADE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CFG_RO register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_cfg_ro
  * TX PLL config readback
  */

typedef union {
  struct {
    uint32_t TXPLLRATEWIDTH_MODE_LOC : 3;
    ///< Ratewidth Mode before override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_cfg_ro_reg_t;

#define PMA_TXPLL_MGS_CFG_RO_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CFG_RO_RD_MASK (0x00000007U)
#define PMA_TXPLL_MGS_CFG_RO_WR_MASK (0x00000000U)


///< Ratewidth Mode before override
#define PMA_TXPLL_MGS_CFG_RO_TXPLLRATEWIDTH_MODE_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CFG_RO_TXPLLRATEWIDTH_MODE_LOC_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFG_RO_TXPLLRATEWIDTH_MODE_LOC_BF_MSK (0x00000007)
#define PMA_TXPLL_MGS_CFG_RO_TXPLLRATEWIDTH_MODE_LOC_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_POSTDIVCLK_CTRL_0 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_postdivclk_ctrl_0
  * TX PLL post div clock control
  */

typedef union {
  struct {
    uint32_t TXPLLPOSTDIV_SOC : 9;
    ///< Interger portion of SoC Postdiv clock value before register override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLPOSTDIV_P5_SOC : 1;
    ///< Fractional portion of SoC Postdiv clock value before register override
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLLPOSTDIV_AUTONEG : 9;
    ///< Interger portion of Auto Neg Postdiv clock value before register override
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t TXPLLPOSTDIV_P5_AUTONEG : 1;
    ///< Fractional portion of Auto Neg Postdiv clock value before register
    ///< override
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_postdivclk_ctrl_0_reg_t;

#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_RD_MASK (0x000fffffU)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_WR_MASK (0x00000000U)


///< Interger portion of SoC Postdiv clock value before register override
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_SOC_BF_OFF ( 0)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_SOC_BF_WID ( 9)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_SOC_BF_MSK (0x000001FF)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_SOC_BF_DEF (0x00000000)

///< Fractional portion of SoC Postdiv clock value before register override
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_SOC_BF_OFF ( 9)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_SOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_SOC_BF_MSK (0x00000200)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_SOC_BF_DEF (0x00000000)

///< Interger portion of Auto Neg Postdiv clock value before register override
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_AUTONEG_BF_OFF (10)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_AUTONEG_BF_WID ( 9)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_AUTONEG_BF_MSK (0x0007FC00)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_AUTONEG_BF_DEF (0x00000000)

///< Fractional portion of Auto Neg Postdiv clock value before register
///< override
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_AUTONEG_BF_OFF (19)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_AUTONEG_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_AUTONEG_BF_MSK (0x00080000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_TXPLLPOSTDIV_P5_AUTONEG_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_POSTDIVCLK_CTRL_1 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_postdivclk_ctrl_1
  * TX PLL post div clock control
  */

typedef union {
  struct {
    uint32_t TXPLL_POSTDIV_SOC_CLK0EN_MUXD0 : 1;
    ///< Post div - Soc clock enable in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_CLK0EN_MUXD1 : 1;
    ///< Post div - Soc clock enable in Mode B
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_CLK0EN_MUXD2 : 1;
    ///< Post div - Soc clock enable in Mode C
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_CLK0EN_MUXD3 : 1;
    ///< Post div - Soc clock enable in Mode D
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_CLK0EN_MUXD4 : 1;
    ///< Post div - Soc clock enable in Mode E
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD0 : 1;
    ///< Post div - AutoNeg clock enable in Mode A
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD1 : 1;
    ///< Post div - AutoNeg clock enable in Mode B
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD2 : 1;
    ///< Post div - AutoNeg clock enable in Mode C
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD3 : 1;
    ///< Post div - AutoNeg clock enable in Mode D
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD4 : 1;
    ///< Post div - AutoNeg clock enable in Mode E
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLL_POSTDIV_SOC_RATIO_MUXD0 : 7;
    ///< Post Div SoC Clock Ratio in Mode A. Affects o_ck_txplla_postdiva.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t TXPLL_POSTDIV_SOC_RATIO_MUXD1 : 7;
    ///< Post Div SoC Clock Ratio in Mode B. Affects o_ck_txplla_postdiva.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_postdivclk_ctrl_1_reg_t;

#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_RD_MASK (0x7f7f1f1fU)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_WR_MASK (0x7f7f1f1fU)


///< Post div - Soc clock enable in Mode A
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD0_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD0_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD0_BF_DEF (0x00000000)

///< Post div - Soc clock enable in Mode B
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD1_BF_OFF ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD1_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD1_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD1_BF_DEF (0x00000000)

///< Post div - Soc clock enable in Mode C
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD2_BF_OFF ( 2)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD2_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD2_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD2_BF_DEF (0x00000000)

///< Post div - Soc clock enable in Mode D
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD3_BF_OFF ( 3)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD3_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD3_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD3_BF_DEF (0x00000000)

///< Post div - Soc clock enable in Mode E
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD4_BF_OFF ( 4)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD4_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD4_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_CLK0EN_MUXD4_BF_DEF (0x00000000)

///< Post div - AutoNeg clock enable in Mode A
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD0_BF_OFF ( 8)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD0_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD0_BF_MSK (0x00000100)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD0_BF_DEF (0x00000000)

///< Post div - AutoNeg clock enable in Mode B
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD1_BF_OFF ( 9)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD1_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD1_BF_MSK (0x00000200)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD1_BF_DEF (0x00000000)

///< Post div - AutoNeg clock enable in Mode C
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD2_BF_OFF (10)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD2_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD2_BF_MSK (0x00000400)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD2_BF_DEF (0x00000000)

///< Post div - AutoNeg clock enable in Mode D
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD3_BF_OFF (11)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD3_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD3_BF_MSK (0x00000800)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD3_BF_DEF (0x00000000)

///< Post div - AutoNeg clock enable in Mode E
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD4_BF_OFF (12)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD4_BF_WID ( 1)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD4_BF_MSK (0x00001000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_AUTONEG_CLK0EN_MUXD4_BF_DEF (0x00000000)

///< Post Div SoC Clock Ratio in Mode A. Affects o_ck_txplla_postdiva.
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD0_BF_OFF (16)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD0_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD0_BF_MSK (0x007F0000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD0_BF_DEF (0x00000000)

///< Post Div SoC Clock Ratio in Mode B. Affects o_ck_txplla_postdiva.
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD1_BF_OFF (24)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD1_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD1_BF_MSK (0x7F000000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_TXPLL_POSTDIV_SOC_RATIO_MUXD1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_POSTDIVCLK_CTRL_2 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_postdivclk_ctrl_2
  * TX PLL post div clock control
  */

typedef union {
  struct {
    uint32_t TXPLL_POSTDIV_SOC_RATIO_MUXD2 : 7;
    ///< Post Div SoC Clock Ratio in Mode C. Affects o_ck_txplla_postdiva.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_RATIO_MUXD3 : 7;
    ///< Post Div SoC Clock Ratio in Mode D. Affects o_ck_txplla_postdiva.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_SOC_RATIO_MUXD4 : 7;
    ///< Post Div SoC Clock Ratio in Mode E. Affects o_ck_txplla_postdiva.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_RATIO_MUXD0 : 7;
    ///< Post Div AutoNeg Clock Ratio in Mode A. Affects o_ck_txplla_postdivb
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_postdivclk_ctrl_2_reg_t;

#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_RD_MASK (0x0fffffffU)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_WR_MASK (0x0fffffffU)


///< Post Div SoC Clock Ratio in Mode C. Affects o_ck_txplla_postdiva.
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD2_BF_OFF ( 0)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD2_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD2_BF_MSK (0x0000007F)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD2_BF_DEF (0x00000000)

///< Post Div SoC Clock Ratio in Mode D. Affects o_ck_txplla_postdiva.
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD3_BF_OFF ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD3_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD3_BF_MSK (0x00003F80)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD3_BF_DEF (0x00000000)

///< Post Div SoC Clock Ratio in Mode E. Affects o_ck_txplla_postdiva.
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD4_BF_OFF (14)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD4_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD4_BF_MSK (0x001FC000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_SOC_RATIO_MUXD4_BF_DEF (0x00000000)

///< Post Div AutoNeg Clock Ratio in Mode A. Affects o_ck_txplla_postdivb
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD0_BF_OFF (21)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD0_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD0_BF_MSK (0x0FE00000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_POSTDIVCLK_CTRL_3 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_postdivclk_ctrl_3
  * TX PLL post div clock control
  */

typedef union {
  struct {
    uint32_t TXPLL_POSTDIV_AUTONEG_RATIO_MUXD1 : 7;
    ///< Post Div AutoNeg Clock Ratio in Mode B. Affects o_ck_txplla_postdivb
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_RATIO_MUXD2 : 7;
    ///< Post Div AutoNeg Clock Ratio in Mode C. Affects o_ck_txplla_postdivb
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_RATIO_MUXD3 : 7;
    ///< Post Div AutoNeg Clock Ratio in Mode D. Affects o_ck_txplla_postdivb
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXPLL_POSTDIV_AUTONEG_RATIO_MUXD4 : 7;
    ///< Post Div AutoNeg Clock Ratio in Mode E. Affects o_ck_txplla_postdivb
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_postdivclk_ctrl_3_reg_t;

#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_RD_MASK (0x0fffffffU)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_WR_MASK (0x0fffffffU)


///< Post Div AutoNeg Clock Ratio in Mode B. Affects o_ck_txplla_postdivb
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD1_BF_OFF ( 0)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD1_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD1_BF_MSK (0x0000007F)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD1_BF_DEF (0x00000000)

///< Post Div AutoNeg Clock Ratio in Mode C. Affects o_ck_txplla_postdivb
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD2_BF_OFF ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD2_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD2_BF_MSK (0x00003F80)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD2_BF_DEF (0x00000000)

///< Post Div AutoNeg Clock Ratio in Mode D. Affects o_ck_txplla_postdivb
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD3_BF_OFF (14)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD3_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD3_BF_MSK (0x001FC000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD3_BF_DEF (0x00000000)

///< Post Div AutoNeg Clock Ratio in Mode E. Affects o_ck_txplla_postdivb
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD4_BF_OFF (21)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD4_BF_WID ( 7)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD4_BF_MSK (0x0FE00000)
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_TXPLL_POSTDIV_AUTONEG_RATIO_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_TXPLL_DIVRATE_CTRL_0 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_txpll_divrate_ctrl_0
  * PLL Div  Rate control
  */

typedef union {
  struct {
    uint32_t TXPLL_DIVRATE_SOC_MUXD0 : 9;
    ///< Tx PLL  Div Rate (Integer) for SoC in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_SOC_MUXD1 : 9;
    ///< Tx PLL  Div Rate (Integer) for SoC in Mode B
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_SOC_MUXD2 : 9;
    ///< Tx PLL  Div Rate (Integer) for SoC in Mode C
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_txpll_divrate_ctrl_0_reg_t;

#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_RD_MASK (0x07ffffffU)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_WR_MASK (0x07ffffffU)


///< Tx PLL  Div Rate (Integer) for SoC in Mode A
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD0_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD0_BF_MSK (0x000001FF)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD0_BF_DEF (0x00000000)

///< Tx PLL  Div Rate (Integer) for SoC in Mode B
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD1_BF_OFF ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD1_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD1_BF_MSK (0x0003FE00)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD1_BF_DEF (0x00000000)

///< Tx PLL  Div Rate (Integer) for SoC in Mode C
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD2_BF_OFF (18)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD2_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD2_BF_MSK (0x07FC0000)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_TXPLL_DIVRATE_SOC_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_TXPLL_DIVRATE_CTRL_1 register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_txpll_divrate_ctrl_1
  * PLL Div  Rate control
  */

typedef union {
  struct {
    uint32_t TXPLL_DIVRATE_SOC_MUXD3 : 9;
    ///< Tx PLL  Div Rate (Integer) for SoC in Mode D
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_SOC_MUXD4 : 9;
    ///< Tx PLL  Div Rate (Integer) for SoC in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_txpll_divrate_ctrl_1_reg_t;

#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_RD_MASK (0x0003ffffU)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_WR_MASK (0x0003ffffU)


///< Tx PLL  Div Rate (Integer) for SoC in Mode D
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD3_BF_OFF ( 0)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD3_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD3_BF_MSK (0x000001FF)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD3_BF_DEF (0x00000000)

///< Tx PLL  Div Rate (Integer) for SoC in Mode E
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD4_BF_OFF ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD4_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD4_BF_MSK (0x0003FE00)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_TXPLL_DIVRATE_SOC_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_TXPLL_DIVRATE_CTRL_2 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_txpll_divrate_ctrl_2
  * PLL Div  Rate control
  */

typedef union {
  struct {
    uint32_t TXPLL_DIVRATE_AUTONEG_MUXD0 : 9;
    ///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_AUTONEG_MUXD1 : 9;
    ///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode B
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_AUTONEG_MUXD2 : 9;
    ///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode C
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_txpll_divrate_ctrl_2_reg_t;

#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_RD_MASK (0x07ffffffU)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_WR_MASK (0x07ffffffU)


///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode A
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD0_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD0_BF_MSK (0x000001FF)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD0_BF_DEF (0x00000000)

///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode B
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD1_BF_OFF ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD1_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD1_BF_MSK (0x0003FE00)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD1_BF_DEF (0x00000000)

///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode C
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD2_BF_OFF (18)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD2_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD2_BF_MSK (0x07FC0000)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_TXPLL_DIVRATE_AUTONEG_MUXD2_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_TXPLL_DIVRATE_CTRL_3 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_txpll_divrate_ctrl_3
  * PLL Div  Rate control
  */

typedef union {
  struct {
    uint32_t TXPLL_DIVRATE_AUTONEG_MUXD3 : 9;
    ///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode D
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_AUTONEG_MUXD4 : 9;
    ///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_txpll_divrate_ctrl_3_reg_t;

#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_RD_MASK (0x0003ffffU)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_WR_MASK (0x0003ffffU)


///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode D
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD3_BF_OFF ( 0)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD3_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD3_BF_MSK (0x000001FF)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD3_BF_DEF (0x00000000)

///< Tx PLL  Div Rate (Integer) for AutoNeg in Mode E
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD4_BF_OFF ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD4_BF_WID ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD4_BF_MSK (0x0003FE00)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_TXPLL_DIVRATE_AUTONEG_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_TXPLL_DIVRATE_CTRL_4 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_txpll_divrate_ctrl_4
  * PLL Div  Rate control
  */

typedef union {
  struct {
    uint32_t TXPLL_DIVRATE_P5_SOC_MUXD0 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode A
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_SOC_MUXD1 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode B
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_SOC_MUXD2 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode C
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_SOC_MUXD3 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode D
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_SOC_MUXD4 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode E
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_AUTONEG_MUXD0 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode A
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_AUTONEG_MUXD1 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode B
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_AUTONEG_MUXD2 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode C
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_AUTONEG_MUXD3 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode D
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLL_DIVRATE_P5_AUTONEG_MUXD4 : 1;
    ///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode E
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_txpll_divrate_ctrl_4_reg_t;

#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_RD_MASK (0x000003ffU)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_WR_MASK (0x000003ffU)


///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode A
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD0_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD0_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD0_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode B
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD1_BF_OFF ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD1_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD1_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD1_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode C
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD2_BF_OFF ( 2)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD2_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD2_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD2_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode D
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD3_BF_OFF ( 3)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD3_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD3_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD3_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for SoC in Mode E
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD4_BF_OFF ( 4)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD4_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD4_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_SOC_MUXD4_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode A
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD0_BF_OFF ( 5)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD0_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD0_BF_MSK (0x00000020)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD0_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode B
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD1_BF_OFF ( 6)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD1_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD1_BF_MSK (0x00000040)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD1_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode C
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD2_BF_OFF ( 7)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD2_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD2_BF_MSK (0x00000080)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD2_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode D
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD3_BF_OFF ( 8)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD3_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD3_BF_MSK (0x00000100)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD3_BF_DEF (0x00000000)

///< Tx PL Div Rate 0.5( Fractional) for Auto Neg in Mode E
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD4_BF_OFF ( 9)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD4_BF_WID ( 1)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD4_BF_MSK (0x00000200)
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_TXPLL_DIVRATE_P5_AUTONEG_MUXD4_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_CALMASTER_PSTATE_CFG register description at address offset 0x60
  *
  * Register default value:        0x00010000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_calmaster_pstate_cfg
  * TX PLL Calibration Master config
  */

typedef union {
  struct {
    uint32_t TXPLLCALPTR_PSTATE_RXPPM_LOCKSTATUS : 3;
    ///< RxPPM calibration Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXPLLCALPTR_PSTATE_PLLPPM_LOCKSTATUS : 3;
    ///< PLL PPM calibration Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TXPLLCALPTR_PSTATE_STARTUP_PLLLC_EN_H_SUS : 3;
    ///< Regulator opamp offset calibration Pstate.  Define the Pstate to start
    ///< the calibration during the power up sequence
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TXPLLCALPTR_PSTATE_PLLLC_LOCKSTATUS : 3;
    ///< PLL enable Pstate.  Define the Pstate to start the calibration during
    ///< the power up sequence
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT0 : 3;
    ///< CalMaster break point 0 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT1 : 3;
    ///< CalMaster break point 1 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_calmaster_pstate_cfg_reg_t;

#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_DEFAULT (0x00010000U)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_RD_MASK (0x77077077U)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_WR_MASK (0x77077077U)


///< RxPPM calibration Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_RXPPM_LOCKSTAT_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_RXPPM_LOCKSTAT_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_RXPPM_LOCKSTAT_BF_MSK (0x00000007)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_RXPPM_LOCKSTAT_BF_DEF (0x00000000)

///< PLL PPM calibration Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLPPM_LOCKSTAT_BF_OFF ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLPPM_LOCKSTAT_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLPPM_LOCKSTAT_BF_MSK (0x00000070)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLPPM_LOCKSTAT_BF_DEF (0x00000000)

///< Regulator opamp offset calibration Pstate.  Define the Pstate to start
///< the calibration during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_STARTUP_PLLLC_EN_H_SUS_BF_OFF (12)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_STARTUP_PLLLC_EN_H_SUS_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_STARTUP_PLLLC_EN_H_SUS_BF_MSK (0x00007000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_STARTUP_PLLLC_EN_H_SUS_BF_DEF (0x00000000)

///< PLL enable Pstate.  Define the Pstate to start the calibration during
///< the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLLC_LOCKSTAT_BF_OFF (16)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLLC_LOCKSTAT_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLLC_LOCKSTAT_BF_MSK (0x00070000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_PLLLC_LOCKSTAT_BF_DEF (0x00010000)

///< CalMaster break point 0 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_OFF (24)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_MSK (0x07000000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_OFF (28)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_MSK (0x70000000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_TXPLLCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_CALMASTER_QUAD_CFG register description at address offset 0x64
  *
  * Register default value:        0x00040000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_calmaster_quad_cfg
  * TX PLL Calibration Master config
  */

typedef union {
  struct {
    uint32_t TXPLLCALPTR_QUAD_RXPPM_LOCKSTATUS : 4;
    ///< RxPPM calibration Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLCALPTR_QUAD_PLLPPM_LOCKSTATUS : 4;
    ///< PLL PPM calibration Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t TXPLLCALPTR_QUAD_STARTUP_PLLLC_EN_H_SUS : 4;
    ///< Regulator opamp offset calibration Quad.  Define the Quad to start
    ///< the calibration during the power up sequence
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXPLLCALPTR_QUAD_PLLLC_LOCKSTATUS : 4;
    ///< PLL enable Quad.  Define the Quad to start the calibration during
    ///< the power up sequence
    ///< AccessType="RW" BitOffset="16" ResetValue="0x4"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT0 : 4;
    ///< CalMaster break point 0 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT1 : 4;
    ///< CalMaster break point 1 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_calmaster_quad_cfg_reg_t;

#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_DEFAULT (0x00040000U)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_RD_MASK (0xff0ff0ffU)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_WR_MASK (0xff0ff0ffU)


///< RxPPM calibration Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_RXPPM_LOCKSTAT_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_RXPPM_LOCKSTAT_BF_WID ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_RXPPM_LOCKSTAT_BF_MSK (0x0000000F)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_RXPPM_LOCKSTAT_BF_DEF (0x00000000)

///< PLL PPM calibration Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLPPM_LOCKSTAT_BF_OFF ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLPPM_LOCKSTAT_BF_WID ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLPPM_LOCKSTAT_BF_MSK (0x000000F0)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLPPM_LOCKSTAT_BF_DEF (0x00000000)

///< Regulator opamp offset calibration Quad.  Define the Quad to start
///< the calibration during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_STARTUP_PLLLC_EN_H_SUS_BF_OFF (12)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_STARTUP_PLLLC_EN_H_SUS_BF_WID ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_STARTUP_PLLLC_EN_H_SUS_BF_MSK (0x0000F000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_STARTUP_PLLLC_EN_H_SUS_BF_DEF (0x00000000)

///< PLL enable Quad.  Define the Quad to start the calibration during
///< the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLLC_LOCKSTAT_BF_OFF (16)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLLC_LOCKSTAT_BF_WID ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLLC_LOCKSTAT_BF_MSK (0x000F0000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_PLLLC_LOCKSTAT_BF_DEF (0x00040000)

///< CalMaster break point 0 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_OFF (24)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_WID ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_MSK (0x0F000000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_OFF (28)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_WID ( 4)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_MSK (0xF0000000)
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_TXPLLCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_RATEWIDTH_CFG_0 register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ratewidth_cfg_0
  * TX PLL Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TXPLL_RECAL_ON_PD : 1;
    ///< Re-calbration control enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_CLK_CHK_DISABLE : 1;
    ///< Disable clock check in Ratewidth FSM
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_FASTREGPWRUP_EN : 1;
    ///< Ratewidth FSM fast power acc
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_CLK_DELAY : 12;
    ///< Ratewidth FSM clock delay interval
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_DELAY : 12;
    ///< Ratewidth FSM delay
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_INT_RECAL_EN : 5;
    ///< Ratewidth FSM restart calibration when rate change in integer mode
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ratewidth_cfg_0_reg_t;

#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_WR_MASK (0xffffffffU)


///< Re-calbration control enable
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RECAL_ON_PD_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RECAL_ON_PD_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RECAL_ON_PD_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RECAL_ON_PD_BF_DEF (0x00000000)

///< Disable clock check in Ratewidth FSM
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_CHK_DIS_BF_OFF ( 1)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_CHK_DIS_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_CHK_DIS_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_CHK_DIS_BF_DEF (0x00000000)

///< Ratewidth FSM fast power acc
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_FASTREGPWRUP_EN_BF_OFF ( 2)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_FASTREGPWRUP_EN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_FASTREGPWRUP_EN_BF_MSK (0x00000004)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_FASTREGPWRUP_EN_BF_DEF (0x00000000)

///< Ratewidth FSM clock delay interval
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_DELAY_BF_OFF ( 3)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_DELAY_BF_MSK (0x00007FF8)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_CLK_DELAY_BF_DEF (0x00000000)

///< Ratewidth FSM delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_DELAY_BF_OFF (15)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_DELAY_BF_MSK (0x07FF8000)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_DELAY_BF_DEF (0x00000000)

///< Ratewidth FSM restart calibration when rate change in integer mode
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_INT_RECAL_EN_BF_OFF (27)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_INT_RECAL_EN_BF_WID ( 5)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_INT_RECAL_EN_BF_MSK (0xF8000000)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_TXPLL_RATEWIDTH_INT_RECAL_EN_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_RATEWIDTH_CFG_1 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ratewidth_cfg_1
  * TX PLL Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TXPLL_RATEWIDTH_ETR_OFF_DELAY : 12;
    ///< Ratewidth FSM ETR off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_ETR_ON_DELAY : 12;
    ///< Ratewidth FSM ETR on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ratewidth_cfg_1_reg_t;

#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_RD_MASK (0x00ffffffU)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_WR_MASK (0x00ffffffU)


///< Ratewidth FSM ETR off delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_OFF_DELAY_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_OFF_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_OFF_DELAY_BF_DEF (0x00000000)

///< Ratewidth FSM ETR on delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_ON_DELAY_BF_OFF (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_ON_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_ON_DELAY_BF_MSK (0x00FFF000)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_TXPLL_RATEWIDTH_ETR_ON_DELAY_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_RATEWIDTH_CFG_2 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ratewidth_cfg_2
  * TX PLL Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TXPLL_RATEWIDTH_PD_ON_DELAY : 12;
    ///< Ratewidth FSM power down on delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_PD_OFF_DELAY : 12;
    ///< Ratewidth FSM power down off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ratewidth_cfg_2_reg_t;

#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_RD_MASK (0x00ffffffU)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_WR_MASK (0x00ffffffU)


///< Ratewidth FSM power down on delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_ON_DELAY_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_ON_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_ON_DELAY_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_ON_DELAY_BF_DEF (0x00000000)

///< Ratewidth FSM power down off delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_OFF_DELAY_BF_OFF (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_OFF_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_TXPLL_RATEWIDTH_PD_OFF_DELAY_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_RATEWIDTH_CFG_3 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ratewidth_cfg_3
  * TX PLL Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TXPLL_RATEWIDTH_RST_A_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-A off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_RST_B0_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B0 off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ratewidth_cfg_3_reg_t;

#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_RD_MASK (0x00ffffffU)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_WR_MASK (0x00ffffffU)


///< Ratewidth FSM reset group-A off delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_A_OFF_DELAY_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_A_OFF_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_A_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_A_OFF_DELAY_BF_DEF (0x00000000)

///< Ratewidth FSM reset group-B0 off delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_B0_OFF_DELAY_BF_OFF (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_B0_OFF_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_B0_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_TXPLL_RATEWIDTH_RST_B0_OFF_DELAY_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_RATEWIDTH_CFG_4 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ratewidth_cfg_4
  * TX PLL Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TXPLL_RATEWIDTH_RST_B1_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B1 off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_RST_B2_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B2 off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ratewidth_cfg_4_reg_t;

#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_RD_MASK (0x00ffffffU)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_WR_MASK (0x00ffffffU)


///< Ratewidth FSM reset group-B1 off delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B1_OFF_DELAY_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B1_OFF_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B1_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B1_OFF_DELAY_BF_DEF (0x00000000)

///< Ratewidth FSM reset group-B2 off delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B2_OFF_DELAY_BF_OFF (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B2_OFF_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B2_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_TXPLL_RATEWIDTH_RST_B2_OFF_DELAY_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_RATEWIDTH_CFG_5 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ratewidth_cfg_5
  * TX PLL Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TXPLL_RATEWIDTH_CAL_CLEAR_DELAY : 12;
    ///< Ratewidth calibration clear delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ratewidth_cfg_5_reg_t;

#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_RD_MASK (0x00000fffU)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_WR_MASK (0x00000fffU)


///< Ratewidth calibration clear delay
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_TXPLL_RATEWIDTH_CAL_CLR_DELAY_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_TXPLL_RATEWIDTH_CAL_CLR_DELAY_BF_WID (12)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_TXPLL_RATEWIDTH_CAL_CLR_DELAY_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_TXPLL_RATEWIDTH_CAL_CLR_DELAY_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RATEWIDTH_CASCADE_CFG register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ratewidth_cascade_cfg
  * TxPLL Rate Freq Remap in Cascading Mode
  */

typedef union {
  struct {
    uint32_t TXPLL_AMODE_CMNPLL_SEL : 1;
    ///< Mode A - TxPLL Interface Selection between CMNPLL A/B
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_BMODE_CMNPLL_SEL : 1;
    ///< Mode B - TxPLL Interface Selection between CMNPLL A/B
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_CMODE_CMNPLL_SEL : 1;
    ///< Mode C - TxPLL Interface Selection between CMNPLL A/B
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_DMODE_CMNPLL_SEL : 1;
    ///< Mode D - TxPLL Interface Selection between CMNPLL A/B
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_EMODE_CMNPLL_SEL : 1;
    ///< Mode E - TxPLL Interface Selection between CMNPLL A/B
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t TXPLL_AMODE_CMNPLLMODE_REMAP : 1;
    ///< Mode A - Remap mode to cascaded CMNPLL Mode A/B
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLL_BMODE_CMNPLLMODE_REMAP : 1;
    ///< Mode B - Remap mode to cascaded CMNPLL Mode A/B
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLL_CMODE_CMNPLLMODE_REMAP : 1;
    ///< Mode C - Remap mode to cascaded CMNPLL Mode A/B
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TXPLL_DMODE_CMNPLLMODE_REMAP : 1;
    ///< Mode D - Remap mode to cascaded CMNPLL Mode A/B
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t TXPLL_EMODE_CMNPLLMODE_REMAP : 1;
    ///< Mode E - Remap mode to cascaded CMNPLL Mode A/B
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLL_VCOPLL2REFPLLA_CASCADE_SOFTSHUTDOWN_DISABLE : 1;
    ///< Disable force pup to downstream cascaded PLL
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLL_VCOPLL2REFPLLB_CASCADE_SOFTSHUTDOWN_DISABLE : 1;
    ///< Disable force pup to downstream cascaded PLL
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_ratewidth_cascade_cfg_reg_t;

#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_RD_MASK (0x00031f1fU)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_WR_MASK (0x00031f1fU)


///< Mode A - TxPLL Interface Selection between CMNPLL A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLL_SEL_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLL_SEL_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLL_SEL_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLL_SEL_BF_DEF (0x00000000)

///< Mode B - TxPLL Interface Selection between CMNPLL A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLL_SEL_BF_OFF ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLL_SEL_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLL_SEL_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLL_SEL_BF_DEF (0x00000000)

///< Mode C - TxPLL Interface Selection between CMNPLL A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLL_SEL_BF_OFF ( 2)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLL_SEL_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLL_SEL_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLL_SEL_BF_DEF (0x00000000)

///< Mode D - TxPLL Interface Selection between CMNPLL A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLL_SEL_BF_OFF ( 3)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLL_SEL_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLL_SEL_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLL_SEL_BF_DEF (0x00000000)

///< Mode E - TxPLL Interface Selection between CMNPLL A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLL_SEL_BF_OFF ( 4)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLL_SEL_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLL_SEL_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLL_SEL_BF_DEF (0x00000000)

///< Mode A - Remap mode to cascaded CMNPLL Mode A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLLMODE_REMAP_BF_OFF ( 8)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLLMODE_REMAP_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLLMODE_REMAP_BF_MSK (0x00000100)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_AMODE_CMNPLLMODE_REMAP_BF_DEF (0x00000000)

///< Mode B - Remap mode to cascaded CMNPLL Mode A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLLMODE_REMAP_BF_OFF ( 9)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLLMODE_REMAP_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLLMODE_REMAP_BF_MSK (0x00000200)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_BMODE_CMNPLLMODE_REMAP_BF_DEF (0x00000000)

///< Mode C - Remap mode to cascaded CMNPLL Mode A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLLMODE_REMAP_BF_OFF (10)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLLMODE_REMAP_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLLMODE_REMAP_BF_MSK (0x00000400)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_CMODE_CMNPLLMODE_REMAP_BF_DEF (0x00000000)

///< Mode D - Remap mode to cascaded CMNPLL Mode A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLLMODE_REMAP_BF_OFF (11)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLLMODE_REMAP_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLLMODE_REMAP_BF_MSK (0x00000800)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_DMODE_CMNPLLMODE_REMAP_BF_DEF (0x00000000)

///< Mode E - Remap mode to cascaded CMNPLL Mode A/B
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLLMODE_REMAP_BF_OFF (12)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLLMODE_REMAP_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLLMODE_REMAP_BF_MSK (0x00001000)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_EMODE_CMNPLLMODE_REMAP_BF_DEF (0x00000000)

///< Disable force pup to downstream cascaded PLL
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLA_CASCADE_SOFTSHUTDOWN_DIS_BF_OFF (16)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLA_CASCADE_SOFTSHUTDOWN_DIS_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLA_CASCADE_SOFTSHUTDOWN_DIS_BF_MSK (0x00010000)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLA_CASCADE_SOFTSHUTDOWN_DIS_BF_DEF (0x00000000)

///< Disable force pup to downstream cascaded PLL
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLB_CASCADE_SOFTSHUTDOWN_DIS_BF_OFF (17)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLB_CASCADE_SOFTSHUTDOWN_DIS_BF_WID ( 1)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLB_CASCADE_SOFTSHUTDOWN_DIS_BF_MSK (0x00020000)
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_TXPLL_VCOPLL2REFPLLB_CASCADE_SOFTSHUTDOWN_DIS_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_CTRL register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_ctrl
  * TX PLL RPU control
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EN_B : 1;
    ///< RPU enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_ctrl_reg_t;

#define PMA_TXPLL_MSG_RPU_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_RPU_CTRL_RD_MASK (0x00000001U)
#define PMA_TXPLL_MSG_RPU_CTRL_WR_MASK (0x00000001U)


///< RPU enable
#define PMA_TXPLL_MSG_RPU_CTRL_TXPLLRPU_EN_B_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_CTRL_TXPLLRPU_EN_B_BF_WID ( 1)
#define PMA_TXPLL_MSG_RPU_CTRL_TXPLLRPU_EN_B_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_RPU_CTRL_TXPLLRPU_EN_B_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_LUT_CFG_0 register description at address offset 0x88
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_lut_cfg_0
  * TX PLL RPU LUT
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power up timer LUT - entry 1.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power up timer LUT - entry 2.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_lut_cfg_0_reg_t;

#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_DEFAULT (0x00100010U)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_RD_MASK (0x1fff1fffU)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 1.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY1_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY1_BF_MSK (0x00001FFF)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY1_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 2.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY2_BF_OFF (16)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY2_BF_MSK (0x1FFF0000)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_ENTRY2_BF_DEF (0x00100000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_LUT_CFG_1 register description at address offset 0x8c
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_lut_cfg_1
  * TX PLL RPU LUT
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power up timer LUT - entry 3.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY4 : 13;
    ///< RPU power up timer LUT - entry 4.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_lut_cfg_1_reg_t;

#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_DEFAULT (0x00100010U)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_RD_MASK (0x1fff1fffU)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 3.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY3_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY3_BF_MSK (0x00001FFF)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY3_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 4.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY4_BF_OFF (16)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY4_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY4_BF_MSK (0x1FFF0000)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_ENTRY4_BF_DEF (0x00100000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_LUT_CFG_2 register description at address offset 0x90
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_lut_cfg_2
  * TX PLL RPU LUT
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY5 : 13;
    ///< RPU power up timer LUT - entry 5.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY6 : 13;
    ///< RPU power up timer LUT - entry 6.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_lut_cfg_2_reg_t;

#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_DEFAULT (0x00100010U)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_RD_MASK (0x1fff1fffU)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 5.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY5_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY5_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY5_BF_MSK (0x00001FFF)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY5_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 6.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY6_BF_OFF (16)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY6_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY6_BF_MSK (0x1FFF0000)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_TXPLLRPU_EVUP_DELAY_LUT_ENTRY6_BF_DEF (0x00100000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_LUT_CFG_3 register description at address offset 0x94
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_lut_cfg_3
  * TX PLL RPU LUT
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_ENTRY7 : 13;
    ///< RPU power up timer LUT - entry 7.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power down timer LUT - entry 1.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_lut_cfg_3_reg_t;

#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_DEFAULT (0x00100010U)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_RD_MASK (0x1fff1fffU)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 7.  Define the duration in number of
///< main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVUP_DELAY_LUT_ENTRY7_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVUP_DELAY_LUT_ENTRY7_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVUP_DELAY_LUT_ENTRY7_BF_MSK (0x00001FFF)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVUP_DELAY_LUT_ENTRY7_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 1.  Define the duration in number
///< of main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVDN_DELAY_LUT_ENTRY1_BF_OFF (16)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVDN_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVDN_DELAY_LUT_ENTRY1_BF_MSK (0x1FFF0000)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_TXPLLRPU_EVDN_DELAY_LUT_ENTRY1_BF_DEF (0x00100000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_LUT_CFG_4 register description at address offset 0x98
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_lut_cfg_4
  * TX PLL RPU LUT
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power down timer LUT - entry 2.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power down timer LUT - entry 3.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_lut_cfg_4_reg_t;

#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_DEFAULT (0x00100010U)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_RD_MASK (0x1fff1fffU)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_WR_MASK (0x1fff1fffU)


///< RPU power down timer LUT - entry 2.  Define the duration in number
///< of main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY2_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY2_BF_MSK (0x00001FFF)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY2_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 3.  Define the duration in number
///< of main clock
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY3_BF_OFF (16)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY3_BF_MSK (0x1FFF0000)
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_TXPLLRPU_EVDN_DELAY_LUT_ENTRY3_BF_DEF (0x00100000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_EVUP_DELAY_CFG_0 register description at address offset 0x9c
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_evup_delay_cfg_0
  * TX PLL power up event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q0 : 3;
    ///< RPU power up event S0Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q1 : 3;
    ///< RPU power up event S0Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q2 : 3;
    ///< RPU power up event S0Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q3 : 3;
    ///< RPU power up event S0Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q4 : 3;
    ///< RPU power up event S0Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q5 : 3;
    ///< RPU power up event S0Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q6 : 3;
    ///< RPU power up event S0Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q7 : 3;
    ///< RPU power up event S0Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q0 : 3;
    ///< RPU power up event S1Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q1 : 3;
    ///< RPU power up event S1Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_evup_delay_cfg_0_reg_t;

#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_DEFAULT (0x09249249U)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_RD_MASK (0x3fffffffU)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_WR_MASK (0x3fffffffU)


///< RPU power up event S0Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000007)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power up event S0Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_OFF ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_MSK (0x00000038)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000008)

///< RPU power up event S0Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_OFF ( 6)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_MSK (0x000001C0)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000040)

///< RPU power up event S0Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_OFF ( 9)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_MSK (0x00000E00)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000200)

///< RPU power up event S0Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_OFF (12)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00007000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00001000)

///< RPU power up event S0Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_OFF (15)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00038000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00008000)

///< RPU power up event S0Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_OFF (18)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_MSK (0x001C0000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00040000)

///< RPU power up event S0Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_OFF (21)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_MSK (0x00E00000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00200000)

///< RPU power up event S1Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_OFF (24)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_MSK (0x07000000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_DEF (0x01000000)

///< RPU power up event S1Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_OFF (27)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_MSK (0x38000000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_DEF (0x08000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_EVUP_DELAY_CFG_1 register description at address offset 0xa0
  *
  * Register default value:        0x00049249
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_evup_delay_cfg_1
  * TX PLL power up event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q2 : 3;
    ///< RPU power up event S1Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q3 : 3;
    ///< RPU power up event S1Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q4 : 3;
    ///< RPU power up event S1Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q5 : 3;
    ///< RPU power up event S1Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q6 : 3;
    ///< RPU power up event S1Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q7 : 3;
    ///< RPU power up event S1Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t TXPLLRPU_EVUP_DELAY_LUT_SEL_S2Q0 : 3;
    ///< RPU power up event S2Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time .  Note: value 0 means disable this
    ///< RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_evup_delay_cfg_1_reg_t;

#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_DEFAULT (0x00049249U)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_RD_MASK (0x001fffffU)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_WR_MASK (0x001fffffU)


///< RPU power up event S1Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00000007)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00000001)

///< RPU power up event S1Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_OFF ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_MSK (0x00000038)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00000008)

///< RPU power up event S1Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_OFF ( 6)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_MSK (0x000001C0)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000040)

///< RPU power up event S1Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_OFF ( 9)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000E00)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000200)

///< RPU power up event S1Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_OFF (12)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_MSK (0x00007000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00001000)

///< RPU power up event S1Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_OFF (15)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00038000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00008000)

///< RPU power up event S2Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time .  Note: value 0 means disable this
///< RPU statestate
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_OFF (18)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_WID ( 3)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_MSK (0x001C0000)
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_TXPLLRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00040000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_EVDN_DELAY_CFG_0 register description at address offset 0xa4
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_evdn_delay_cfg_0
  * TX PLL power down event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q0 : 2;
    ///< RPU power down event S0Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q1 : 2;
    ///< RPU power down event S0Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q2 : 2;
    ///< RPU power down event S0Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q3 : 2;
    ///< RPU power down event S0Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q4 : 2;
    ///< RPU power down event S0Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q5 : 2;
    ///< RPU power down event S0Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q6 : 2;
    ///< RPU power down event S0Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q7 : 2;
    ///< RPU power down event S0Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q0 : 2;
    ///< RPU power down event S1Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q1 : 2;
    ///< RPU power down event S1Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_evdn_delay_cfg_0_reg_t;

#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_DEFAULT (0x09249249U)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_RD_MASK (0x1b6db6dbU)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_WR_MASK (0x1b6db6dbU)


///< RPU power down event S0Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000003)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power down event S0Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_OFF ( 3)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_MSK (0x00000018)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000008)

///< RPU power down event S0Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_OFF ( 6)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_MSK (0x000000C0)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000040)

///< RPU power down event S0Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_OFF ( 9)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_MSK (0x00000600)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000200)

///< RPU power down event S0Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_OFF (12)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00003000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00001000)

///< RPU power down event S0Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_OFF (15)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00018000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00008000)

///< RPU power down event S0Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_OFF (18)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_MSK (0x000C0000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00040000)

///< RPU power down event S0Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_OFF (21)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_MSK (0x00600000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00200000)

///< RPU power down event S1Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_OFF (24)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_MSK (0x03000000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_DEF (0x01000000)

///< RPU power down event S1Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_OFF (27)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_MSK (0x18000000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_DEF (0x08000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLRPU_EVDN_DELAY_CFG_1 register description at address offset 0xa8
  *
  * Register default value:        0x00049249
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllrpu_evdn_delay_cfg_1
  * TX PLL power down event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q2 : 2;
    ///< RPU power down event S1Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q3 : 2;
    ///< RPU power down event S1Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q4 : 2;
    ///< RPU power down event S1Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q5 : 2;
    ///< RPU power down event S1Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q6 : 2;
    ///< RPU power down event S1Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q7 : 2;
    ///< RPU power down event S1Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t TXPLLRPU_EVDN_DELAY_LUT_SEL_S2Q0 : 2;
    ///< RPU power down event S2Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time .  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_rpu_evdn_delay_cfg_1_reg_t;

#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_DEFAULT (0x00049249U)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_RD_MASK (0x000db6dbU)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_WR_MASK (0x000db6dbU)


///< RPU power down event S1Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_OFF ( 0)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00000003)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00000001)

///< RPU power down event S1Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_OFF ( 3)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_MSK (0x00000018)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00000008)

///< RPU power down event S1Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_OFF ( 6)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_MSK (0x000000C0)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000040)

///< RPU power down event S1Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_OFF ( 9)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000600)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000200)

///< RPU power down event S1Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_OFF (12)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_MSK (0x00003000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00001000)

///< RPU power down event S1Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_OFF (15)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00018000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00008000)

///< RPU power down event S2Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time .  Note: value 0 means disable
///< this RPU statestate
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_OFF (18)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_WID ( 2)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_MSK (0x000C0000)
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_TXPLLRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00040000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RPU_EVENT_CFG_0 register description at address offset 0xac
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rpu_event_cfg_0
  * TX PLL event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPUBRKPT_EVENT0_DN_CFG : 2;
    ///< RPU break point 0 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXPLLRPUBRKPT_EVENT0_DN_PTR_Q : 3;
    ///< RPU break point 0 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXPLLRPUBRKPT_EVENT0_DN_PTR_S : 3;
    ///< RPU break point 0 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXPLLRPUBRKPT_EVENT0_UP_CFG : 2;
    ///< RPU break point 0 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXPLLRPUBRKPT_EVENT0_UP_PTR_Q : 3;
    ///< RPU break point 0 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXPLLRPUBRKPT_EVENT0_UP_PTR_S : 3;
    ///< RPU break point 0 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_rpu_event_cfg_0_reg_t;

#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_DEFAULT (0x0000ffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_RD_MASK (0x0000ffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_WR_MASK (0x0000ffffU)


///< RPU break point 0 in power down config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_CFG_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_CFG_BF_MSK (0x00000003)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 0 in power down pointer q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 0 in power down pointer s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_S_BF_OFF ( 5)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 0 in power upconfig
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_CFG_BF_OFF ( 8)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_CFG_BF_MSK (0x00000300)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 0 in power up pointer q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_Q_BF_OFF (10)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 0 in power up pointer s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_S_BF_OFF (13)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_TXPLLRPUBRKPT_EVENT0_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RPU_EVENT_CFG_1 register description at address offset 0xb0
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rpu_event_cfg_1
  * TX PLL event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPUBRKPT_EVENT1_DN_CFG : 2;
    ///< RPU break point 1 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXPLLRPUBRKPT_EVENT1_DN_PTR_Q : 3;
    ///< RPU break point 1 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXPLLRPUBRKPT_EVENT1_DN_PTR_S : 3;
    ///< RPU break point 1 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXPLLRPUBRKPT_EVENT1_UP_CFG : 2;
    ///< RPU break point 1 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXPLLRPUBRKPT_EVENT1_UP_PTR_Q : 3;
    ///< RPU break point 1 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXPLLRPUBRKPT_EVENT1_UP_PTR_S : 3;
    ///< RPU break point 1 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_rpu_event_cfg_1_reg_t;

#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_DEFAULT (0x0000ffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_RD_MASK (0x0000ffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_WR_MASK (0x0000ffffU)


///< RPU break point 1 in power down config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_CFG_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_CFG_BF_MSK (0x00000003)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 1 in power down pointer q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 1 in power down pointer s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_S_BF_OFF ( 5)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 1 in power upconfig
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_CFG_BF_OFF ( 8)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_CFG_BF_MSK (0x00000300)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 1 in power up pointer q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_Q_BF_OFF (10)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 1 in power up pointer s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_S_BF_OFF (13)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_TXPLLRPUBRKPT_EVENT1_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RPU_EVENT_CFG_2 register description at address offset 0xb4
  *
  * Register default value:        0x00003B3B
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rpu_event_cfg_2
  * TX PLL event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPUPD_PLL_EN_DN_CFG : 2;
    ///< RPU PLL enable in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXPLLRPUPD_PLL_EN_DN_PTR0_Q : 3;
    ///< RPU PLL enable in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x6"
    uint32_t TXPLLRPUPD_PLL_EN_DN_PTR0_S : 3;
    ///< RPU PLL enable in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t TXPLLRPUPD_PLL_EN_UP_CFG : 2;
    ///< RPU PLL enable in power up config
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXPLLRPUPD_PLL_EN_UP_PTR0_Q : 3;
    ///< RPU PLL enable in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x6"
    uint32_t TXPLLRPUPD_PLL_EN_UP_PTR0_S : 3;
    ///< RPU PLL enable in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t TXPLLRPURST_REFDIV_DN_CFG : 2;
    ///< RPU refclock div in power down config
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLLRPURST_REFDIV_DN_PTR0_Q : 3;
    ///< RPU refclock div in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t TXPLLRPURST_REFDIV_DN_PTR0_S : 3;
    ///< RPU refclock div in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t TXPLLRPURST_REFDIV_UP_CFG : 2;
    ///< RPU refclock div in power up config
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t TXPLLRPURST_REFDIV_UP_PTR0_Q : 3;
    ///< RPU refclock div in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t TXPLLRPURST_REFDIV_UP_PTR0_S : 3;
    ///< RPU refclock div in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_rpu_event_cfg_2_reg_t;

#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_DEFAULT (0x00003b3bU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_WR_MASK (0xffffffffU)


///< RPU PLL enable in power down config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_CFG_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_CFG_BF_MSK (0x00000003)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_CFG_BF_DEF (0x00000003)

///< RPU PLL enable in power down pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_Q_BF_MSK (0x0000001C)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_Q_BF_DEF (0x00000018)

///< RPU PLL enable in power down pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_S_BF_OFF ( 5)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_S_BF_MSK (0x000000E0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_DN_PTR0_S_BF_DEF (0x00000020)

///< RPU PLL enable in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_CFG_BF_OFF ( 8)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_CFG_BF_MSK (0x00000300)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_CFG_BF_DEF (0x00000300)

///< RPU PLL enable in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_Q_BF_OFF (10)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_Q_BF_MSK (0x00001C00)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_Q_BF_DEF (0x00001800)

///< RPU PLL enable in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_S_BF_OFF (13)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_S_BF_MSK (0x0000E000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPUPD_PLL_EN_UP_PTR0_S_BF_DEF (0x00002000)

///< RPU refclock div in power down config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_CFG_BF_OFF (16)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_CFG_BF_MSK (0x00030000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_CFG_BF_DEF (0x00000000)

///< RPU refclock div in power down pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_Q_BF_OFF (18)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_Q_BF_MSK (0x001C0000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_Q_BF_DEF (0x00000000)

///< RPU refclock div in power down pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_S_BF_OFF (21)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_S_BF_MSK (0x00E00000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_DN_PTR0_S_BF_DEF (0x00000000)

///< RPU refclock div in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_CFG_BF_OFF (24)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_CFG_BF_MSK (0x03000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_CFG_BF_DEF (0x00000000)

///< RPU refclock div in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_Q_BF_OFF (26)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_Q_BF_MSK (0x1C000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_Q_BF_DEF (0x00000000)

///< RPU refclock div in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_S_BF_OFF (29)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_S_BF_MSK (0xE0000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_TXPLLRPURST_REFDIV_UP_PTR0_S_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RPU_EVENT_CFG_3 register description at address offset 0xb8
  *
  * Register default value:        0x0F130F13
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rpu_event_cfg_3
  * TX PLL event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPURST_POSTDIV_SOC_DN_CFG : 2;
    ///< RPU post div SoC clock in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXPLLRPURST_POSTDIV_SOC_DN_PTR0_Q : 3;
    ///< RPU post div SoC clock in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t TXPLLRPURST_POSTDIV_SOC_DN_PTR0_S : 3;
    ///< RPU post div SoC clock in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLLRPURST_POSTDIV_SOC_UP_CFG : 2;
    ///< RPU post div SoC clock in power up config
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXPLLRPURST_POSTDIV_SOC_UP_PTR0_Q : 3;
    ///< RPU post div SoC clock in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x3"
    uint32_t TXPLLRPURST_POSTDIV_SOC_UP_PTR0_S : 3;
    ///< RPU post div SoC clock in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TXPLLRPURST_POSTDIV_AUTONEG_DN_CFG : 2;
    ///< RPU postdiv AutoNeg  in power up config
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_Q : 3;
    ///< RPU postdiv AutoNeg  in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x4"
    uint32_t TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_S : 3;
    ///< RPU postdiv AutoNeg  in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t TXPLLRPURST_POSTDIV_AUTONEG_UP_CFG : 2;
    ///< RPU postdiv AutoNeg clock in power up config
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_Q : 3;
    ///< RPU postdiv AutoNeg clock in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="26" ResetValue="0x3"
    uint32_t TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_S : 3;
    ///< RPU postdiv AutoNeg clock in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_rpu_event_cfg_3_reg_t;

#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_DEFAULT (0x0f130f13U)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_WR_MASK (0xffffffffU)


///< RPU post div SoC clock in power down config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_CFG_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_CFG_BF_MSK (0x00000003)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_CFG_BF_DEF (0x00000003)

///< RPU post div SoC clock in power down pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_Q_BF_MSK (0x0000001C)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_Q_BF_DEF (0x00000010)

///< RPU post div SoC clock in power down pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_S_BF_OFF ( 5)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_S_BF_MSK (0x000000E0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_DN_PTR0_S_BF_DEF (0x00000000)

///< RPU post div SoC clock in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_CFG_BF_OFF ( 8)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_CFG_BF_MSK (0x00000300)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_CFG_BF_DEF (0x00000300)

///< RPU post div SoC clock in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_Q_BF_OFF (10)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_Q_BF_MSK (0x00001C00)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_Q_BF_DEF (0x00000C00)

///< RPU post div SoC clock in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_S_BF_OFF (13)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_S_BF_MSK (0x0000E000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_SOC_UP_PTR0_S_BF_DEF (0x00000000)

///< RPU postdiv AutoNeg  in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_CFG_BF_OFF (16)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_CFG_BF_MSK (0x00030000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_CFG_BF_DEF (0x00030000)

///< RPU postdiv AutoNeg  in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_Q_BF_OFF (18)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_Q_BF_MSK (0x001C0000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_Q_BF_DEF (0x00100000)

///< RPU postdiv AutoNeg  in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_S_BF_OFF (21)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_S_BF_MSK (0x00E00000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_DN_PTR0_S_BF_DEF (0x00000000)

///< RPU postdiv AutoNeg clock in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_CFG_BF_OFF (24)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_CFG_BF_MSK (0x03000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_CFG_BF_DEF (0x03000000)

///< RPU postdiv AutoNeg clock in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_Q_BF_OFF (26)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_Q_BF_MSK (0x1C000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_Q_BF_DEF (0x0C000000)

///< RPU postdiv AutoNeg clock in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_S_BF_OFF (29)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_S_BF_MSK (0xE0000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_TXPLLRPURST_POSTDIV_AUTONEG_UP_PTR0_S_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RPU_EVENT_CFG_4 register description at address offset 0xbc
  *
  * Register default value:        0x373B0000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rpu_event_cfg_4
  * TX PLL event config
  */

typedef union {
  struct {
    uint32_t TXPLLRPUPD_BITCK_DN_CFG : 2;
    ///< RPU bit clock in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLRPUPD_BITCK_DN_PTR0_Q : 3;
    ///< RPU bit clock in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLRPUPD_BITCK_DN_PTR0_S : 3;
    ///< RPU bit clock in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLLRPUPD_BITCK_UP_CFG : 2;
    ///< RPU bit clock in power up config
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLLRPUPD_BITCK_UP_PTR0_Q : 3;
    ///< RPU bit clock in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TXPLLRPUPD_BITCK_UP_PTR0_S : 3;
    ///< RPU bit clock in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TXPLLRPUCTL_KEEPALIVE_DN_CFG : 2;
    ///< RPU keepalive clock select in power up config
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t TXPLLRPUCTL_KEEPALIVE_DN_PTR0_Q : 3;
    ///< RPU keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x6"
    uint32_t TXPLLRPUCTL_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t TXPLLRPUCTL_KEEPALIVE_UP_CFG : 2;
    ///< RPU keepalive clock select in power up config
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t TXPLLRPUCTL_KEEPALIVE_UP_PTR0_Q : 3;
    ///< RPU keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="26" ResetValue="0x5"
    uint32_t TXPLLRPUCTL_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="29" ResetValue="0x1"
  } ;
  uint32_t value;
} pma_txpll_mgs_rpu_event_cfg_4_reg_t;

#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_DEFAULT (0x373b0000U)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_WR_MASK (0xffffffffU)


///< RPU bit clock in power down config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_CFG_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_CFG_BF_MSK (0x00000003)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_CFG_BF_DEF (0x00000000)

///< RPU bit clock in power down pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_Q_BF_MSK (0x0000001C)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_Q_BF_DEF (0x00000000)

///< RPU bit clock in power down pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_S_BF_OFF ( 5)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_S_BF_MSK (0x000000E0)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_DN_PTR0_S_BF_DEF (0x00000000)

///< RPU bit clock in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_CFG_BF_OFF ( 8)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_CFG_BF_MSK (0x00000300)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_CFG_BF_DEF (0x00000000)

///< RPU bit clock in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_Q_BF_OFF (10)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_Q_BF_MSK (0x00001C00)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_Q_BF_DEF (0x00000000)

///< RPU bit clock in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_S_BF_OFF (13)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_S_BF_MSK (0x0000E000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUPD_BITCK_UP_PTR0_S_BF_DEF (0x00000000)

///< RPU keepalive clock select in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_CFG_BF_OFF (16)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_CFG_BF_MSK (0x00030000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_CFG_BF_DEF (0x00030000)

///< RPU keepalive clock select in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_OFF (18)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x001C0000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00180000)

///< RPU keepalive clock select in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_S_BF_OFF (21)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_S_BF_MSK (0x00E00000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_DN_PTR0_S_BF_DEF (0x00200000)

///< RPU keepalive clock select in power up config
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_CFG_BF_OFF (24)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_CFG_BF_MSK (0x03000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_CFG_BF_DEF (0x03000000)

///< RPU keepalive clock select in power up pointer 0 q state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_OFF (26)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x1C000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x14000000)

///< RPU keepalive clock select in power up pointer 0 s state
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_S_BF_OFF (29)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_S_BF_MSK (0xE0000000)
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_TXPLLRPUCTL_KEEPALIVE_UP_PTR0_S_BF_DEF (0x20000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_STATUS_0 register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_status_0
  * TX PLL status
  */

typedef union {
  struct {
    uint32_t TXPLLFSM_MAIN_IFCMN_STATE : 2;
    ///< Main I/F FSM state
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_STATE : 4;
    ///< Main FSM state
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CUR_PSTATE : 3;
    ///< Main FSM current Pstate
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CUR_RATE_FREQ : 3;
    ///< Main FSM current rate_freq (mode)
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CUR_RATE_DIV_SOC : 9;
    ///< Main FSM current rate_div for SoC
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CUR_RATE_DIV_P5_SOC : 1;
    ///< Main FSM current rate_div 0p5 for SoC
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CUR_RATE_DIV_AUTONEG : 9;
    ///< Main FSM current rate_div for AutoNeg
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CUR_RATE_DIV_P5_AUTONEG : 1;
    ///< Main FSM current rate_div 0p5 for AutoNeg
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_stat_0_reg_t;

#define PMA_TXPLL_MGS_STAT_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_STAT_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_STAT_0_WR_MASK (0x00000000U)


///< Main I/F FSM state
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_IFCMN_STATE_BF_OFF ( 0)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_IFCMN_STATE_BF_WID ( 2)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_IFCMN_STATE_BF_MSK (0x00000003)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_IFCMN_STATE_BF_DEF (0x00000000)

///< Main FSM state
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_STATE_BF_OFF ( 2)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_STATE_BF_WID ( 4)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_STATE_BF_MSK (0x0000003C)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_STATE_BF_DEF (0x00000000)

///< Main FSM current Pstate
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_PSTATE_BF_OFF ( 6)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_PSTATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_PSTATE_BF_MSK (0x000001C0)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_PSTATE_BF_DEF (0x00000000)

///< Main FSM current rate_freq (mode)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_FREQ_BF_OFF ( 9)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_FREQ_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_FREQ_BF_MSK (0x00000E00)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_FREQ_BF_DEF (0x00000000)

///< Main FSM current rate_div for SoC
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_SOC_BF_OFF (12)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_SOC_BF_WID ( 9)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_SOC_BF_MSK (0x001FF000)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_SOC_BF_DEF (0x00000000)

///< Main FSM current rate_div 0p5 for SoC
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_SOC_BF_OFF (21)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_SOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_SOC_BF_MSK (0x00200000)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_SOC_BF_DEF (0x00000000)

///< Main FSM current rate_div for AutoNeg
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_AUTONEG_BF_OFF (22)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_AUTONEG_BF_WID ( 9)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_AUTONEG_BF_MSK (0x7FC00000)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_AUTONEG_BF_DEF (0x00000000)

///< Main FSM current rate_div 0p5 for AutoNeg
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_AUTONEG_BF_OFF (31)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_AUTONEG_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_AUTONEG_BF_MSK (0x80000000)
#define PMA_TXPLL_MGS_STAT_0_TXPLLFSM_MAIN_CUR_RATE_DIV_P5_AUTONEG_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_STATUS_1 register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_status_1
  * TX PLL status
  */

typedef union {
  struct {
    uint32_t TXPLLFSM_MAIN_TARGET_PSTATE : 3;
    ///< Main FSM target Pstate
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_TARGET_RATE_FREQ : 3;
    ///< Main FSM target Rate_Freq
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_TARGET_RATE_DIV_SOC : 9;
    ///< Main FSM target Rate_Div for SoC
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_SOC : 1;
    ///< Main FSM target Rate_Div 0p5 for SoC
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_TARGET_RATE_DIV_AUTONEG : 9;
    ///< Main FSM target Rate_Div for AutoNeg
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_AUTONEG : 1;
    ///< Main FSM target Rate_Div 0p5 for AutoNeg
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_STATUS : 1;
    ///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
    ///< state.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_READY : 1;
    ///< Main FSM ready
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t TXPLLFSM_CAL_IS_RATEWIDTHFSM_REQ : 1;
    ///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
    ///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
    ///< FSM
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t TXPLLFSM_CAL_CUR_PSTATE : 3;
    ///< Calibration FSM current Pstate
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_stat_1_reg_t;

#define PMA_TXPLL_MGS_STAT_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_STAT_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_STAT_1_WR_MASK (0x00000000U)


///< Main FSM target Pstate
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_PSTATE_BF_OFF ( 0)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_PSTATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_PSTATE_BF_MSK (0x00000007)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_PSTATE_BF_DEF (0x00000000)

///< Main FSM target Rate_Freq
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_FREQ_BF_OFF ( 3)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_FREQ_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_FREQ_BF_MSK (0x00000038)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_FREQ_BF_DEF (0x00000000)

///< Main FSM target Rate_Div for SoC
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_SOC_BF_OFF ( 6)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_SOC_BF_WID ( 9)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_SOC_BF_MSK (0x00007FC0)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_SOC_BF_DEF (0x00000000)

///< Main FSM target Rate_Div 0p5 for SoC
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_SOC_BF_OFF (15)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_SOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_SOC_BF_MSK (0x00008000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_SOC_BF_DEF (0x00000000)

///< Main FSM target Rate_Div for AutoNeg
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_AUTONEG_BF_OFF (16)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_AUTONEG_BF_WID ( 9)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_AUTONEG_BF_MSK (0x01FF0000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_AUTONEG_BF_DEF (0x00000000)

///< Main FSM target Rate_Div 0p5 for AutoNeg
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_AUTONEG_BF_OFF (25)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_AUTONEG_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_AUTONEG_BF_MSK (0x02000000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_TARGET_RATE_DIV_P5_AUTONEG_BF_DEF (0x00000000)

///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
///< state.
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_STAT_BF_OFF (26)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_STAT_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_STAT_BF_MSK (0x04000000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_STAT_BF_DEF (0x00000000)

///< Main FSM ready
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_READY_BF_OFF (27)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_READY_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_READY_BF_MSK (0x08000000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_MAIN_READY_BF_DEF (0x00000000)

///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
///< FSM
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_OFF (28)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_MSK (0x10000000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_DEF (0x00000000)

///< Calibration FSM current Pstate
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_CUR_PSTATE_BF_OFF (29)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_CUR_PSTATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_CUR_PSTATE_BF_MSK (0xE0000000)
#define PMA_TXPLL_MGS_STAT_1_TXPLLFSM_CAL_CUR_PSTATE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_STATUS_2 register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_status_2
  * TX PLL status
  */

typedef union {
  struct {
    uint32_t TXPLLFSM_CAL_CUR_QUAD : 4;
    ///< Calibration FSM current Quad
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLFSM_CAL_STATE : 4;
    ///< Calibration FSM state
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLLFSM_RPU_STATE : 3;
    ///< RPU FSM state
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLLRPU_STATE_PSTATE : 3;
    ///< RPU curent Pstate
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t TXPLLRPU_STATE_QUAD : 3;
    ///< RPU curent Quad
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t TXPLLRPU_STEPDIR : 1;
    ///< RPU power up/down status.  0 - power down ; 1 - power up
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t TXPLL_RATEWIDTH_STATE : 5;
    ///< Ratewidth FSM state
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTH_IS_RATEWIDTH : 1;
    ///< Ratewidth FSM ratewidth change status.  This bit will be set to '1'
    ///< when ratewidth fsm detect a change in rate_div, rate_freq or width
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTH_IS_WIDTH_ONLY : 1;
    ///< Ratewidth FSM width change status.  This bit will be set to '1' when
    ///< ratewidth fsm detect a change in width only
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTH_IS_RATEFREQ : 1;
    ///< Ratewidth FSM rate freq change status.  This bit will be set to '1'
    ///< when ratewidth fsm detect a change in rate_freq only
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t TXPLLFSM_MAIN_CKEN_STAT : 1;
    ///< Main clock enable status
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t TXPLL_PLLIF_STATE : 2;
    ///< Main FSM CMN PLL I/F state
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_stat_2_reg_t;

#define PMA_TXPLL_MGS_STAT_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_STAT_2_RD_MASK (0x1fffffffU)
#define PMA_TXPLL_MGS_STAT_2_WR_MASK (0x00000000U)


///< Calibration FSM current Quad
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_CUR_QUAD_BF_OFF ( 0)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_CUR_QUAD_BF_WID ( 4)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_CUR_QUAD_BF_MSK (0x0000000F)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_CUR_QUAD_BF_DEF (0x00000000)

///< Calibration FSM state
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_STATE_BF_OFF ( 4)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_STATE_BF_WID ( 4)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_STATE_BF_MSK (0x000000F0)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_CAL_STATE_BF_DEF (0x00000000)

///< RPU FSM state
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_RPU_STATE_BF_OFF ( 8)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_RPU_STATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_RPU_STATE_BF_MSK (0x00000700)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_RPU_STATE_BF_DEF (0x00000000)

///< RPU curent Pstate
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_PSTATE_BF_OFF (11)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_PSTATE_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_PSTATE_BF_MSK (0x00003800)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_PSTATE_BF_DEF (0x00000000)

///< RPU curent Quad
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_QUAD_BF_OFF (14)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_QUAD_BF_WID ( 3)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_QUAD_BF_MSK (0x0001C000)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STATE_QUAD_BF_DEF (0x00000000)

///< RPU power up/down status.  0 - power down ; 1 - power up
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STEPDIR_BF_OFF (17)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STEPDIR_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STEPDIR_BF_MSK (0x00020000)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRPU_STEPDIR_BF_DEF (0x00000000)

///< Ratewidth FSM state
#define PMA_TXPLL_MGS_STAT_2_TXPLL_RATEWIDTH_STATE_BF_OFF (18)
#define PMA_TXPLL_MGS_STAT_2_TXPLL_RATEWIDTH_STATE_BF_WID ( 5)
#define PMA_TXPLL_MGS_STAT_2_TXPLL_RATEWIDTH_STATE_BF_MSK (0x007C0000)
#define PMA_TXPLL_MGS_STAT_2_TXPLL_RATEWIDTH_STATE_BF_DEF (0x00000000)

///< Ratewidth FSM ratewidth change status.  This bit will be set to '1'
///< when ratewidth fsm detect a change in rate_div, rate_freq or width
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEWIDTH_BF_OFF (23)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEWIDTH_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEWIDTH_BF_MSK (0x00800000)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEWIDTH_BF_DEF (0x00000000)

///< Ratewidth FSM width change status.  This bit will be set to '1' when
///< ratewidth fsm detect a change in width only
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_WIDTH_ONLY_BF_OFF (24)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_WIDTH_ONLY_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_WIDTH_ONLY_BF_MSK (0x01000000)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_WIDTH_ONLY_BF_DEF (0x00000000)

///< Ratewidth FSM rate freq change status.  This bit will be set to '1'
///< when ratewidth fsm detect a change in rate_freq only
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEFREQ_BF_OFF (25)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEFREQ_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEFREQ_BF_MSK (0x02000000)
#define PMA_TXPLL_MGS_STAT_2_TXPLLRATEWIDTH_IS_RATEFREQ_BF_DEF (0x00000000)

///< Main clock enable status
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_MAIN_CKEN_STAT_BF_OFF (26)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_MAIN_CKEN_STAT_BF_WID ( 1)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_MAIN_CKEN_STAT_BF_MSK (0x04000000)
#define PMA_TXPLL_MGS_STAT_2_TXPLLFSM_MAIN_CKEN_STAT_BF_DEF (0x00000000)

///< Main FSM CMN PLL I/F state
#define PMA_TXPLL_MGS_STAT_2_TXPLL_PLLIF_STATE_BF_OFF (27)
#define PMA_TXPLL_MGS_STAT_2_TXPLL_PLLIF_STATE_BF_WID ( 2)
#define PMA_TXPLL_MGS_STAT_2_TXPLL_PLLIF_STATE_BF_MSK (0x18000000)
#define PMA_TXPLL_MGS_STAT_2_TXPLL_PLLIF_STATE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_CTRL register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_ctrl
  * TX PLL PLL Startup control
  */

typedef union {
  struct {
    uint32_t TXPLLSTARTUP_LOCOVREN : 1;
    ///< PLL Startup control overide enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLSTARTUP_PLL_EN_LOCOVR : 1;
    ///< PLL Startup PLL enable override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLSTARTUP_PLL_LDOEN_LOCOVR : 1;
    ///< PLL Startup PLL LDO enable override
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_STARTUP_PLL_EN_OVREN : 1;
    ///< DFT Mux Override Enable - Pre Register Mux Override
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_STARTUP_PLL_EN_OVR : 1;
    ///< DFT Mux Override Value - Pre Register Mux Override
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLL_STARTUP_PLL_LDOEN_OVREN : 1;
    ///< DFT Mux Override Enable - Pre Register Mux Override
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLL_STARTUP_PLL_LDOEN_OVR : 1;
    ///< DFT Mux Override Value - Pre Register Mux Override
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_LOAD_REQ_OVREN : 1;
    ///< PLLCfgLoader request override enable.  When this is set, PLLCfgloader
    ///< can be trigger by software
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_LOAD_REQ_OVR : 1;
    ///< PLLCfgLoader request override.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_PLL_OFF_REQ_OVREN : 1;
    ///< PLLCfgLoader PLL off override enable.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_PLL_OFF_REQ_OVR : 1;
    ///< PLLCfgLoader PLL off override.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_MODE_OVR : 3;
    ///< PLLCgLoader mode override
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_ctrl_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RD_MASK (0x00003fffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_WR_MASK (0x00003fffU)


///< PLL Startup control overide enable
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_LOCOVREN_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_LOCOVREN_BF_DEF (0x00000000)

///< PLL Startup PLL enable override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_EN_LOCOVR_BF_OFF ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_EN_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_EN_LOCOVR_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_EN_LOCOVR_BF_DEF (0x00000000)

///< PLL Startup PLL LDO enable override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_LDOEN_LOCOVR_BF_OFF ( 2)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_LDOEN_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_LDOEN_LOCOVR_BF_MSK (0x00000004)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLLSTARTUP_PLL_LDOEN_LOCOVR_BF_DEF (0x00000000)

///< DFT Mux Override Enable - Pre Register Mux Override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVREN_BF_OFF ( 3)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVREN_BF_MSK (0x00000008)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVREN_BF_DEF (0x00000000)

///< DFT Mux Override Value - Pre Register Mux Override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVR_BF_OFF ( 4)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVR_BF_MSK (0x00000010)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_EN_OVR_BF_DEF (0x00000000)

///< DFT Mux Override Enable - Pre Register Mux Override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVREN_BF_OFF ( 5)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVREN_BF_MSK (0x00000020)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVREN_BF_DEF (0x00000000)

///< DFT Mux Override Value - Pre Register Mux Override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVR_BF_OFF ( 6)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVR_BF_MSK (0x00000040)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_STARTUP_PLL_LDOEN_OVR_BF_DEF (0x00000000)

///< PLLCfgLoader request override enable.  When this is set, PLLCfgloader
///< can be trigger by software
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVREN_BF_OFF ( 7)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVREN_BF_MSK (0x00000080)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVREN_BF_DEF (0x00000000)

///< PLLCfgLoader request override.
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVR_BF_OFF ( 8)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVR_BF_MSK (0x00000100)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_LOAD_REQ_OVR_BF_DEF (0x00000000)

///< PLLCfgLoader PLL off override enable.
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVREN_BF_OFF ( 9)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVREN_BF_MSK (0x00000200)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVREN_BF_DEF (0x00000000)

///< PLLCfgLoader PLL off override.
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVR_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVR_BF_MSK (0x00000400)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_PLL_OFF_REQ_OVR_BF_DEF (0x00000000)

///< PLLCgLoader mode override
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_MODE_OVR_BF_OFF (11)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_MODE_OVR_BF_WID ( 3)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_MODE_OVR_BF_MSK (0x00003800)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_TXPLL_CFGLOADER_MODE_OVR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_CTRL_RO register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_ctrl_ro
  * TX PLL PLL Startup control readback
  */

typedef union {
  struct {
    uint32_t TXPLLSTARTUP_PLL_EN_LOC : 1;
    ///< PLL Startup PLL enable.  This is pre-register override value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLSTARTUP_PLL_LDOEN_LOC : 1;
    ///< PLL Startup PLL LDO enable.  This is pre-register override value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_LOAD_REQ_STATUS : 1;
    ///< PLLCfgLoader request status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_CFGLOADER_PLL_OFF_STATUS : 1;
    ///< PLLCfgLoader PLL off status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_ctrl_ro_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_RD_MASK (0x0000000fU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_WR_MASK (0x00000000U)


///< PLL Startup PLL enable.  This is pre-register override value
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_EN_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_EN_LOC_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_EN_LOC_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_EN_LOC_BF_DEF (0x00000000)

///< PLL Startup PLL LDO enable.  This is pre-register override value
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_LDOEN_LOC_BF_OFF ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_LDOEN_LOC_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_LDOEN_LOC_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLLSTARTUP_PLL_LDOEN_LOC_BF_DEF (0x00000000)

///< PLLCfgLoader request status
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_LOAD_REQ_STAT_BF_OFF ( 2)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_LOAD_REQ_STAT_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_LOAD_REQ_STAT_BF_MSK (0x00000004)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_LOAD_REQ_STAT_BF_DEF (0x00000000)

///< PLLCfgLoader PLL off status
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_PLL_OFF_STAT_BF_OFF ( 3)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_PLL_OFF_STAT_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_PLL_OFF_STAT_BF_MSK (0x00000008)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_TXPLL_CFGLOADER_PLL_OFF_STAT_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_TIMER_CFG_0 register description at address offset 0xd4
  *
  * Register default value:        0x08040020
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_timer_cfg_0
  * TX PLL PLL Startup FSM control
  */

typedef union {
  struct {
    uint32_t TXPLL_RESETCFG_PWRUP_INTERVAL : 10;
    ///< PLL Reset interval during power up
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t TXPLL_REGULATOR_PWRUP_TIME : 13;
    ///< PLL regulator interval during power up
    ///< AccessType="RW" BitOffset="10" ResetValue="0x100"
    uint32_t TXPLL_REGULATOR_PWRDN_TIME : 6;
    ///< Time to wait power down PLL regulator after disabling up PLL
    ///< AccessType="RW" BitOffset="23" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_timer_cfg_0_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_DEFAULT (0x08040020U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_RD_MASK (0x1fffffffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_WR_MASK (0x1fffffffU)


///< PLL Reset interval during power up
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_RSTCFG_PWRUP_INTERVAL_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_RSTCFG_PWRUP_INTERVAL_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_RSTCFG_PWRUP_INTERVAL_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_RSTCFG_PWRUP_INTERVAL_BF_DEF (0x00000020)

///< PLL regulator interval during power up
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRUP_TIME_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRUP_TIME_BF_WID (13)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRUP_TIME_BF_MSK (0x007FFC00)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRUP_TIME_BF_DEF (0x00040000)

///< Time to wait power down PLL regulator after disabling up PLL
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRDN_TIME_BF_OFF (23)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRDN_TIME_BF_WID ( 6)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRDN_TIME_BF_MSK (0x1F800000)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_TXPLL_REGULATOR_PWRDN_TIME_BF_DEF (0x08000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_TIMER_CFG_1 register description at address offset 0xd8
  *
  * Register default value:        0x00008020
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_timer_cfg_1
  * TX PLL PLL Startup FSM timer config
  */

typedef union {
  struct {
    uint32_t TXPLL_RESETCFG_PWRDN0_INTERVAL : 10;
    ///< PLL Startup FSM power down 0 interval
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t TXPLL_RESETCFG_PWRDN1_INTERVAL : 10;
    ///< PLL Startup FSM power down 1 interval
    ///< AccessType="RW" BitOffset="10" ResetValue="0x20"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_timer_cfg_1_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_DEFAULT (0x00008020U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_RD_MASK (0x000fffffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_WR_MASK (0x000fffffU)


///< PLL Startup FSM power down 0 interval
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN0_INTERVAL_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN0_INTERVAL_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN0_INTERVAL_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN0_INTERVAL_BF_DEF (0x00000020)

///< PLL Startup FSM power down 1 interval
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN1_INTERVAL_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN1_INTERVAL_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN1_INTERVAL_BF_MSK (0x000FFC00)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_TXPLL_RSTCFG_PWRDN1_INTERVAL_BF_DEF (0x00008000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_TIMER_CFG_2 register description at address offset 0xdc
  *
  * Register default value:        0x00006008
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_timer_cfg_2
  * TX PLL PLL Startup FSM timer config
  */

typedef union {
  struct {
    uint32_t TXPLL_RESETCFG_PWRUP_AON_START : 10;
    ///< PLL startup FSM power up aon start
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t TXPLL_RESETCFG_PWRUP_AON_END : 10;
    ///< PLL startup FSM power up aon end
    ///< AccessType="RW" BitOffset="10" ResetValue="0x18"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_timer_cfg_2_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_DEFAULT (0x00006008U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_RD_MASK (0x000fffffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_WR_MASK (0x000fffffU)


///< PLL startup FSM power up aon start
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_START_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_START_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_START_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_START_BF_DEF (0x00000008)

///< PLL startup FSM power up aon end
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_END_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_END_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_END_BF_MSK (0x000FFC00)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_TXPLL_RSTCFG_PWRUP_AON_END_BF_DEF (0x00006000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_TIMER_CFG_3 register description at address offset 0xe0
  *
  * Register default value:        0x00002008
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_timer_cfg_3
  * TX PLL PLL Startup FSM timer config
  */

typedef union {
  struct {
    uint32_t TXPLL_RESETCFG_PWRDN_AON_START : 10;
    ///< PLL Startup FSM power down - aon
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t TXPLL_RESETCFG_PWRDN_AON_MAX_M_DELTA : 10;
    ///< PLL Startup FSM power down - aon delta
    ///< AccessType="RW" BitOffset="10" ResetValue="0x8"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_timer_cfg_3_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_DEFAULT (0x00002008U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_RD_MASK (0x000fffffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_WR_MASK (0x000fffffU)


///< PLL Startup FSM power down - aon
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_START_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_START_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_START_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_START_BF_DEF (0x00000008)

///< PLL Startup FSM power down - aon delta
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_MAX_M_DELTA_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_MAX_M_DELTA_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_MAX_M_DELTA_BF_MSK (0x000FFC00)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_TXPLL_RSTCFG_PWRDN_AON_MAX_M_DELTA_BF_DEF (0x00002000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_TIMER_CFG_4 register description at address offset 0xe4
  *
  * Register default value:        0x02006008
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_timer_cfg_4
  * TX PLL PLL Startup FSM timer config
  */

typedef union {
  struct {
    uint32_t TXPLL_RESETCFG_REG_START : 10;
    ///< PLL startup FSM register reset start
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8"
    uint32_t TXPLL_RESETCFG_REG_END : 10;
    ///< PLL startup FSM register reset end
    ///< AccessType="RW" BitOffset="10" ResetValue="0x18"
    uint32_t TXPLL_RESETCFG_REG_INTERVAL : 10;
    ///< PLL startup FSM register reset interval
    ///< AccessType="RW" BitOffset="20" ResetValue="0x20"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_timer_cfg_4_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_DEFAULT (0x02006008U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_RD_MASK (0x3fffffffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_WR_MASK (0x3fffffffU)


///< PLL startup FSM register reset start
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_START_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_START_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_START_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_START_BF_DEF (0x00000008)

///< PLL startup FSM register reset end
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_END_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_END_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_END_BF_MSK (0x000FFC00)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_END_BF_DEF (0x00006000)

///< PLL startup FSM register reset interval
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_INTERVAL_BF_OFF (20)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_INTERVAL_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_INTERVAL_BF_MSK (0x3FF00000)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_TXPLL_RSTCFG_INTERVAL_BF_DEF (0x02000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_PLLSTARTUP_TIMER_CFG_5 register description at address offset 0xe8
  *
  * Register default value:        0x00003020
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_pllstartup_timer_cfg_5
  * TX PLL PLL Startup FSM timer config
  */

typedef union {
  struct {
    uint32_t TXPLL_RESETCFG_SHUTDOWN : 10;
    ///< PLL startup FSM soft shutdown  interval
    ///< AccessType="RW" BitOffset="0" ResetValue="0x20"
    uint32_t TXPLL_HARDRESET_TIMER : 10;
    ///< PLL startup FSM hard reset interval
    ///< AccessType="RW" BitOffset="10" ResetValue="0xC"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_pllstartup_timer_cfg_5_reg_t;

#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_DEFAULT (0x00003020U)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_RD_MASK (0x000fffffU)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_WR_MASK (0x000fffffU)


///< PLL startup FSM soft shutdown  interval
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_RSTCFG_SHUTDOWN_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_RSTCFG_SHUTDOWN_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_RSTCFG_SHUTDOWN_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_RSTCFG_SHUTDOWN_BF_DEF (0x00000020)

///< PLL startup FSM hard reset interval
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_HARDRST_TIMER_BF_OFF (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_HARDRST_TIMER_BF_WID (10)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_HARDRST_TIMER_BF_MSK (0x000FFC00)
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_TXPLL_HARDRST_TIMER_BF_DEF (0x00003000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_PLL_STATUS_CTRL register description at address offset 0xec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_pll_status_ctrl
  * TX PLL PLL status control
  */

typedef union {
  struct {
    uint32_t TXPLLSTATUSEARLYLOCK_LOCOVREN : 1;
    ///< PLL early lock status override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLSTATUSLOCK_LOCOVREN : 1;
    ///< PLL status override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLSTATUSRAWLOCK_LOCOVREN : 1;
    ///< PLL raw lock status override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLSTATUSEARLYLOCK_DIG_LOCOVR : 1;
    ///< PLL early lock status override value
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLLSTATUSLOCK_DIG_LOCOVR : 1;
    ///< PLL status override value
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLLSTATUSRAWLOCK_LOCOVR : 1;
    ///< PLL raw lock status override value
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_pll_stat_ctrl_reg_t;

#define PMA_TXPLL_MGS_PLL_STAT_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RD_MASK (0x0000003fU)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_WR_MASK (0x0000003fU)


///< PLL early lock status override enable
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_LOCOVREN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_LOCOVREN_BF_DEF (0x00000000)

///< PLL status override enable
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_LOCOVREN_BF_OFF ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_LOCOVREN_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_LOCOVREN_BF_DEF (0x00000000)

///< PLL raw lock status override enable
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVREN_BF_OFF ( 2)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVREN_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVREN_BF_DEF (0x00000000)

///< PLL early lock status override value
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_DIG_LOCOVR_BF_OFF ( 3)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_DIG_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_DIG_LOCOVR_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATEARLYLOCK_DIG_LOCOVR_BF_DEF (0x00000000)

///< PLL status override value
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_DIG_LOCOVR_BF_OFF ( 4)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_DIG_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_DIG_LOCOVR_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATLOCK_DIG_LOCOVR_BF_DEF (0x00000000)

///< PLL raw lock status override value
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVR_BF_OFF ( 5)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVR_BF_MSK (0x00000020)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_TXPLLSTATRAWLOCK_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_PLL_STATUS_CTRL_RO register description at address offset 0xf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_pll_status_ctrl_ro
  * TX PLL PLL status control readback
  */

typedef union {
  struct {
    uint32_t TXPLLSTATUSEARLYLOCK_DIG_LOC : 1;
    ///< PLL early lock status before register override mux
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLSTATUSLOCK_DIG_LOC : 1;
    ///< PLL status before register override mux
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLSTATUSRAWLOCK_LOC : 1;
    ///< PLL raw lock status before register override mux
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_pll_stat_ctrl_ro_reg_t;

#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_RD_MASK (0x00000007U)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_WR_MASK (0x00000000U)


///< PLL early lock status before register override mux
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATEARLYLOCK_DIG_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATEARLYLOCK_DIG_LOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATEARLYLOCK_DIG_LOC_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATEARLYLOCK_DIG_LOC_BF_DEF (0x00000000)

///< PLL status before register override mux
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATLOCK_DIG_LOC_BF_OFF ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATLOCK_DIG_LOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATLOCK_DIG_LOC_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATLOCK_DIG_LOC_BF_DEF (0x00000000)

///< PLL raw lock status before register override mux
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATRAWLOCK_LOC_BF_OFF ( 2)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATRAWLOCK_LOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATRAWLOCK_LOC_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_TXPLLSTATRAWLOCK_LOC_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CTRL_OUT_0 register description at address offset 0xf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ctrl_out_0
  * TX PLL control out
  */

typedef union {
  struct {
    uint32_t TXPLL_ARST_TXPLL_OVREN : 1;
    ///< PLL ANA Reset override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_ARST_TXPLL_OVR_B : 1;
    ///< PLL ANA Reset override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_ARST_TXPLL_MEM_OVREN : 1;
    ///< PLL Mem Register reset override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_ARST_TXPLL_MEM_OVR_B : 1;
    ///< PLL Mem Register reset override
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVREN : 1;
    ///< PLL Post div SoC clock enable override enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVR_B : 1;
    ///< PLL Post div SoC clock enable override
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVREN : 1;
    ///< PLL Post div AutoNeg clock enable override enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVR_B : 1;
    ///< PLL Post div AutoNeg clock enable override
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t TXPLL_ARST_TXPLL_REFDIV_B_OVREN : 1;
    ///< PLL Ref Div clock reset override enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLL_ARST_TXPLL_REFDIV_B_OVR_B : 1;
    ///< PLL Ref Div clock reset override
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t TXPLL_APD_TXPLL_BITCK_B_OVREN : 1;
    ///< PLL Bit clock power down override enable
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t TXPLL_APD_TXPLL_BITCK_B_OVR_B : 1;
    ///< PLL Bit clock power down override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_ctrl_out_0_reg_t;

#define PMA_TXPLL_MGS_CTRL_OUT_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CTRL_OUT_0_RD_MASK (0x030300ffU)
#define PMA_TXPLL_MGS_CTRL_OUT_0_WR_MASK (0x030300ffU)


///< PLL ANA Reset override enable
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVREN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVREN_BF_DEF (0x00000000)

///< PLL ANA Reset override
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVR_B_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVR_B_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_OVR_B_BF_DEF (0x00000000)

///< PLL Mem Register reset override enable
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVREN_BF_OFF ( 2)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVREN_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVREN_BF_DEF (0x00000000)

///< PLL Mem Register reset override
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVR_B_BF_OFF ( 3)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVR_B_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_MEM_OVR_B_BF_DEF (0x00000000)

///< PLL Post div SoC clock enable override enable
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVREN_BF_OFF ( 4)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVREN_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVREN_BF_DEF (0x00000000)

///< PLL Post div SoC clock enable override
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVR_B_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVR_B_BF_MSK (0x00000020)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_SOC_EN_OVR_B_BF_DEF (0x00000000)

///< PLL Post div AutoNeg clock enable override enable
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVREN_BF_OFF ( 6)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVREN_BF_MSK (0x00000040)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVREN_BF_DEF (0x00000000)

///< PLL Post div AutoNeg clock enable override
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVR_B_BF_OFF ( 7)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVR_B_BF_MSK (0x00000080)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_AETR_TXPLL_POSTDIV_AUTONEG_EN_OVR_B_BF_DEF (0x00000000)

///< PLL Ref Div clock reset override enable
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVREN_BF_OFF (16)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVREN_BF_MSK (0x00010000)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVREN_BF_DEF (0x00000000)

///< PLL Ref Div clock reset override
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVR_B_BF_OFF (17)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVR_B_BF_MSK (0x00020000)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_ARST_TXPLL_REFDIV_B_OVR_B_BF_DEF (0x00000000)

///< PLL Bit clock power down override enable
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVREN_BF_OFF (24)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVREN_BF_MSK (0x01000000)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVREN_BF_DEF (0x00000000)

///< PLL Bit clock power down override
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVR_B_BF_OFF (25)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVR_B_BF_MSK (0x02000000)
#define PMA_TXPLL_MGS_CTRL_OUT_0_TXPLL_APD_TXPLL_BITCK_B_OVR_B_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_CTRL_OVERRIDE register description at address offset 0xf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ctrl_override
  * TX PLL control override
  */

typedef union {
  struct {
    uint32_t TXPLLPPM_LOCOVREN : 1;
    ///< PLL PPM override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLCLKSTAT_LOCOVREN : 1;
    ///< PLL clock stat override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLPPM_LOCKSTATUS_LOCOVR : 1;
    ///< PLL PPM lock status override
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLCLKSTAT_READY_LOCOVR : 1;
    ///< PLL clock stat override
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ctrl_ovrd_reg_t;

#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RD_MASK (0x0000000fU)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_WR_MASK (0x0000000fU)


///< PLL PPM override enable
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCOVREN_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCOVREN_BF_DEF (0x00000000)

///< PLL clock stat override enable
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_LOCOVREN_BF_OFF ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_LOCOVREN_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_LOCOVREN_BF_DEF (0x00000000)

///< PLL PPM lock status override
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCKSTAT_LOCOVR_BF_OFF ( 2)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCKSTAT_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCKSTAT_LOCOVR_BF_MSK (0x00000004)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLPPM_LOCKSTAT_LOCOVR_BF_DEF (0x00000000)

///< PLL clock stat override
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_READY_LOCOVR_BF_OFF ( 3)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_READY_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_READY_LOCOVR_BF_MSK (0x00000008)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_TXPLLCLKSTAT_READY_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLLFSM_CTRL_OVERRIDE_RO register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpllfsm_ctrl_override_ro
  * TX PLL control override readback
  */

typedef union {
  struct {
    uint32_t TXPLLPPM_LOCKSTATUS_LOC : 1;
    ///< PLL PPM lock status. This is a pre register override value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLCLKSTAT_READY_LOC : 1;
    ///< PLL clock stat. This is a pre register override value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_fsm_ctrl_ovrd_ro_reg_t;

#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_RD_MASK (0x00000003U)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_WR_MASK (0x00000000U)


///< PLL PPM lock status. This is a pre register override value
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLPPM_LOCKSTAT_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLPPM_LOCKSTAT_LOC_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLPPM_LOCKSTAT_LOC_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLPPM_LOCKSTAT_LOC_BF_DEF (0x00000000)

///< PLL clock stat. This is a pre register override value
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLCLKSTAT_READY_LOC_BF_OFF ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLCLKSTAT_READY_LOC_BF_WID ( 1)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLCLKSTAT_READY_LOC_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_TXPLLCLKSTAT_READY_LOC_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_DCCRST_CTRL register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_dccrst_ctrl
  * TX PLL - DCC reset control
  */

typedef union {
  struct {
    uint32_t TXPLL_DCCRST_DISABLE : 1;
    ///< DCC reset disable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t TXPLL_TIMER_DCCRST2LOCKMASK : 8;
    ///< Time to mask between DCC reset to PLL lock
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLL_TIMER_RAWLOCK2DCCRST : 8;
    ///< Time beween raw PLL raw lock to DCC reset
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_dccrst_ctrl_reg_t;

#define PMA_TXPLL_MGS_DCCRST_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_DCCRST_CTRL_RD_MASK (0x000ffff1U)
#define PMA_TXPLL_MGS_DCCRST_CTRL_WR_MASK (0x000ffff1U)


///< DCC reset disable
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_DCCRST_DIS_BF_OFF ( 0)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_DCCRST_DIS_BF_WID ( 1)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_DCCRST_DIS_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_DCCRST_DIS_BF_DEF (0x00000000)

///< Time to mask between DCC reset to PLL lock
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_DCCRST2LOCKMASK_BF_OFF ( 4)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_DCCRST2LOCKMASK_BF_WID ( 8)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_DCCRST2LOCKMASK_BF_MSK (0x00000FF0)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_DCCRST2LOCKMASK_BF_DEF (0x00000000)

///< Time beween raw PLL raw lock to DCC reset
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_RAWLOCK2DCCRST_BF_OFF (12)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_RAWLOCK2DCCRST_BF_WID ( 8)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_RAWLOCK2DCCRST_BF_MSK (0x000FF000)
#define PMA_TXPLL_MGS_DCCRST_CTRL_TXPLL_TIMER_RAWLOCK2DCCRST_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_STAGGER_TIME_CFG register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_stagger_time_cfg
  * TX PLL stagger timer config
  */

typedef union {
  struct {
    uint32_t TXPLL_STAGGER_TIME : 13;
    ///< Stagger time
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_stagger_time_cfg_reg_t;

#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_RD_MASK (0x00001fffU)
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_WR_MASK (0x00001fffU)


///< Stagger time
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_TXPLL_STAGGER_TIME_BF_OFF ( 0)
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_TXPLL_STAGGER_TIME_BF_WID (13)
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_TXPLL_STAGGER_TIME_BF_MSK (0x00001FFF)
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_TXPLL_STAGGER_TIME_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_OBSVR register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_obsvr
  * Common PLL Observer Signals
  */

typedef union {
  struct {
    uint32_t TXPLL_OBSVR_PLL_EN : 1;
    ///< Observation - PLL enable
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_PLLFSM_RPU_APDSYNTHLC_PLL_EN_B : 1;
    ///< Observation - pllfsm_rpu_apdsynthlc_pll_en_b
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_PLLFSM_RWNI_APDSYNTHLC_PLL_EN_B : 1;
    ///< Observation - pllfsm_rwni_apdsynthlc_pll_en_b
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_PLLFSM_MAIN_FSM_PLL_OFF_REQ : 1;
    ///< Observation - pllfsm_main_fsm_pll_off_req
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_PLLFSM_RATEWIDTH_FSM_PLL_OFF_REQ : 1;
    ///< Observation - pllfsm_ratewidth_fsm_pll_off_req
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_PLLFSM_CTL_SHUTDOWN_OK : 1;
    ///< Observation - pllfsm_ctl_shutdown_ok
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_ARST_TXPLL_B : 1;
    ///< Observation - arst_txpll_b
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_ARST_TXPLL_MEM_B : 1;
    ///< Observation - arst_txpll_mem_b
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t TXPLL_OBSVR_PLLFSM_CFGLOADER_SEL : 3;
    ///< Observation - pllfsm_cfgloader_sel
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TXPLL_OBSVR_PLLFSM_CFGLOADER_REQ : 1;
    ///< Observation - pllfsm_cfgloader_req
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLL_OBSVR_PLLFSM_CFGLOADER_DONE : 1;
    ///< Observation - pllfsm_cfgloader_done
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_obsvr_reg_t;

#define PMA_TXPLL_MGS_OBSVR_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_OBSVR_RD_MASK (0x000370ffU)
#define PMA_TXPLL_MGS_OBSVR_WR_MASK (0x00000000U)


///< Observation - PLL enable
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLL_EN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLL_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLL_EN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLL_EN_BF_DEF (0x00000000)

///< Observation - pllfsm_rpu_apdsynthlc_pll_en_b
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RPU_APDSYNTHLC_PLL_EN_B_BF_OFF ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RPU_APDSYNTHLC_PLL_EN_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RPU_APDSYNTHLC_PLL_EN_B_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RPU_APDSYNTHLC_PLL_EN_B_BF_DEF (0x00000000)

///< Observation - pllfsm_rwni_apdsynthlc_pll_en_b
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RWNI_APDSYNTHLC_PLL_EN_B_BF_OFF ( 2)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RWNI_APDSYNTHLC_PLL_EN_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RWNI_APDSYNTHLC_PLL_EN_B_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RWNI_APDSYNTHLC_PLL_EN_B_BF_DEF (0x00000000)

///< Observation - pllfsm_main_fsm_pll_off_req
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_MAIN_FSM_PLL_OFF_REQ_BF_OFF ( 3)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_MAIN_FSM_PLL_OFF_REQ_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_MAIN_FSM_PLL_OFF_REQ_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_MAIN_FSM_PLL_OFF_REQ_BF_DEF (0x00000000)

///< Observation - pllfsm_ratewidth_fsm_pll_off_req
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RATEWIDTH_FSM_PLL_OFF_REQ_BF_OFF ( 4)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RATEWIDTH_FSM_PLL_OFF_REQ_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RATEWIDTH_FSM_PLL_OFF_REQ_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_RATEWIDTH_FSM_PLL_OFF_REQ_BF_DEF (0x00000000)

///< Observation - pllfsm_ctl_shutdown_ok
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CTL_SHUTDOWN_OK_BF_OFF ( 5)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CTL_SHUTDOWN_OK_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CTL_SHUTDOWN_OK_BF_MSK (0x00000020)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CTL_SHUTDOWN_OK_BF_DEF (0x00000000)

///< Observation - arst_txpll_b
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_B_BF_OFF ( 6)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_B_BF_MSK (0x00000040)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_B_BF_DEF (0x00000000)

///< Observation - arst_txpll_mem_b
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_MEM_B_BF_OFF ( 7)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_MEM_B_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_MEM_B_BF_MSK (0x00000080)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_ARST_TXPLL_MEM_B_BF_DEF (0x00000000)

///< Observation - pllfsm_cfgloader_sel
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_SEL_BF_OFF (12)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_SEL_BF_WID ( 3)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_SEL_BF_MSK (0x00007000)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_SEL_BF_DEF (0x00000000)

///< Observation - pllfsm_cfgloader_req
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_REQ_BF_OFF (16)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_REQ_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_REQ_BF_MSK (0x00010000)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_REQ_BF_DEF (0x00000000)

///< Observation - pllfsm_cfgloader_done
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_DONE_BF_OFF (17)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_DONE_BF_WID ( 1)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_DONE_BF_MSK (0x00020000)
#define PMA_TXPLL_MGS_OBSVR_TXPLL_OBSVR_PLLFSM_CFGLOADER_DONE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_OUTPUT_PIN_OVERRIDE register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_output_pin_override
  * TX PLL output pin override
  */

typedef union {
  struct {
    uint32_t TXPLLPIN_READY_LOCOVREN : 1;
    ///< o_txpll_ready_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLPIN_READY_LOCOVR : 1;
    ///< o_txpll_ready_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_output_pin_ovrd_reg_t;

#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_RD_MASK (0x00000003U)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_WR_MASK (0x00000003U)


///< o_txpll_ready_l[x]_a output pin override enable
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVREN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVREN_BF_DEF (0x00000000)

///< o_txpll_ready_l[x]_a output pin override
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVR_BF_OFF ( 1)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVR_BF_WID ( 1)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVR_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_TXPLLPIN_READY_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_OUTPUT_PIN_PREOVERRIDE register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_output_pin_preoverride
  * TX PLL output pin pre-override value
  */

typedef union {
  struct {
    uint32_t TXPLLPIN_READY_LOC : 1;
    ///< o_txpll_ready_l[x]_a output pin pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_output_pin_preovrd_reg_t;

#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_RD_MASK (0x00000001U)
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_WR_MASK (0x00000000U)


///< o_txpll_ready_l[x]_a output pin pre-override
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_TXPLLPIN_READY_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_TXPLLPIN_READY_LOC_BF_WID ( 1)
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_TXPLLPIN_READY_LOC_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_TXPLLPIN_READY_LOC_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_BRKPT_CTRL register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_brkpt_ctrl
  * TX PLL break point control
  */

typedef union {
  struct {
    uint32_t TXPLLCALMASTERBRKPT_EN : 1;
    ///< RPU break point enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLRPUBRKPT_EN : 1;
    ///< CalMaster break point enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTHBRKPT_EN : 4;
    ///< RateWidth break point enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLFSM_RST_NOTIFY_EN : 1;
    ///< Main FSM reset notify enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXPLLFSM_RST_BRKPT_EN_MASK : 1;
    ///< Main FSM reset break point enable.  This bit can be enable only when
    ///< txfsm_rst_notify_en is HIGH
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_brkpt_ctrl_reg_t;

#define PMA_TXPLL_MGS_BRKPT_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_BRKPT_CTRL_RD_MASK (0x000000ffU)
#define PMA_TXPLL_MGS_BRKPT_CTRL_WR_MASK (0x000000ffU)


///< RPU break point enable
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLCALMASTERBRKPT_EN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLCALMASTERBRKPT_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLCALMASTERBRKPT_EN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLCALMASTERBRKPT_EN_BF_DEF (0x00000000)

///< CalMaster break point enable
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRPUBRKPT_EN_BF_OFF ( 1)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRPUBRKPT_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRPUBRKPT_EN_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRPUBRKPT_EN_BF_DEF (0x00000000)

///< RateWidth break point enable
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRATEWIDTHBRKPT_EN_BF_OFF ( 2)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRATEWIDTHBRKPT_EN_BF_WID ( 4)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRATEWIDTHBRKPT_EN_BF_MSK (0x0000003C)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLRATEWIDTHBRKPT_EN_BF_DEF (0x00000000)

///< Main FSM reset notify enable
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_NOTIFY_EN_BF_OFF ( 6)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_NOTIFY_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_NOTIFY_EN_BF_MSK (0x00000040)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_NOTIFY_EN_BF_DEF (0x00000000)

///< Main FSM reset break point enable.  This bit can be enable only when
///< txfsm_rst_notify_en is HIGH
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_BRKPT_EN_MASK_BF_OFF ( 7)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_BRKPT_EN_MASK_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_BRKPT_EN_MASK_BF_MSK (0x00000080)
#define PMA_TXPLL_MGS_BRKPT_CTRL_TXPLLFSM_RST_BRKPT_EN_MASK_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_BRKPT_STATUS register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_brkpt_status
  * TX PLL break point status
  */

typedef union {
  struct {
    uint32_t TXPLLCALMASTERBRKPT_HIT : 1;
    ///< RPU break point status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLRPUBRKPT_HIT : 1;
    ///< CalMaster break point status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTHBRKPT_HIT : 1;
    ///< RateWidth break point status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLFSM_RST_NOTIFY_HIT : 1;
    ///< Main FSM reset notify status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_brkpt_stat_reg_t;

#define PMA_TXPLL_MGS_BRKPT_STAT_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_BRKPT_STAT_RD_MASK (0x0000000fU)
#define PMA_TXPLL_MGS_BRKPT_STAT_WR_MASK (0x00000000U)


///< RPU break point status
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLCALMASTERBRKPT_HIT_BF_OFF ( 0)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLCALMASTERBRKPT_HIT_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLCALMASTERBRKPT_HIT_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLCALMASTERBRKPT_HIT_BF_DEF (0x00000000)

///< CalMaster break point status
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRPUBRKPT_HIT_BF_OFF ( 1)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRPUBRKPT_HIT_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRPUBRKPT_HIT_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRPUBRKPT_HIT_BF_DEF (0x00000000)

///< RateWidth break point status
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRATEWIDTHBRKPT_HIT_BF_OFF ( 2)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRATEWIDTHBRKPT_HIT_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRATEWIDTHBRKPT_HIT_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLRATEWIDTHBRKPT_HIT_BF_DEF (0x00000000)

///< Main FSM reset notify status
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLFSM_RST_NOTIFY_HIT_BF_OFF ( 3)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLFSM_RST_NOTIFY_HIT_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLFSM_RST_NOTIFY_HIT_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_BRKPT_STAT_TXPLLFSM_RST_NOTIFY_HIT_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_BRKPT_CLEAR register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_brkpt_clear
  * TX PLL break point clear
  */

typedef union {
  struct {
    uint32_t TXPLLCALMASTERBRKPT_HIT_CLR : 1;
    ///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXPLLRPUBRKPT_HIT_CLR : 1;
    ///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXPLLRATEWIDTHBRKPT_HIT_CLR : 1;
    ///< RateWidth break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXPLLFSM_RST_NOTIFY_HIT_CLR : 1;
    ///< Main FSM reset notify break point clear/resume.  Self-clear bit.
    ///< Write 1 to clear/resume the FSM from the break point when txfsm_rst_brkpt_en_mask
    ///< is HIGH.  When the break point is cleared, this register value will
    ///< return back to 1'b0
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_brkpt_clr_reg_t;

#define PMA_TXPLL_MGS_BRKPT_CLR_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_BRKPT_CLR_RD_MASK (0x0000000fU)
#define PMA_TXPLL_MGS_BRKPT_CLR_WR_MASK (0x0000000fU)


///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLCALMASTERBRKPT_HIT_CLR_BF_OFF ( 0)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLCALMASTERBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLCALMASTERBRKPT_HIT_CLR_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLCALMASTERBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRPUBRKPT_HIT_CLR_BF_OFF ( 1)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRPUBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRPUBRKPT_HIT_CLR_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRPUBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< RateWidth break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRATEWIDTHBRKPT_HIT_CLR_BF_OFF ( 2)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRATEWIDTHBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRATEWIDTHBRKPT_HIT_CLR_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLRATEWIDTHBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< Main FSM reset notify break point clear/resume.  Self-clear bit.
///< Write 1 to clear/resume the FSM from the break point when txfsm_rst_brkpt_en_mask
///< is HIGH.  When the break point is cleared, this register value will
///< return back to 1'b0
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLFSM_RST_NOTIFY_HIT_CLR_BF_OFF ( 3)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLFSM_RST_NOTIFY_HIT_CLR_BF_WID ( 1)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLFSM_RST_NOTIFY_HIT_CLR_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_BRKPT_CLR_TXPLLFSM_RST_NOTIFY_HIT_CLR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CKM_CTRL_0 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ckm_ctrl_0
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_AVG_EN : 1;
    ///< Clock measurment averager enable.  When this is 1, the clock measurment
    ///< will an average of 4 measurments.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_CLK_EN : 1;
    ///< Clock measurment clock enable.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_CONTINUOUS : 1;
    ///< Clock measurment continous mode.  When this is set.  The measurment
    ///< block will continue take the clock measurment, until ckm_clk_en set
    ///< to 0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_EN : 1;
    ///< Clock measurment in digital domain.  Perform the clock measuement
    ///< that the clocks are in the digital domain. Always set to 1.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_ERR_CLR : 1;
    ///< Clock measurment error clear.  To clear the error status
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CKM_EN : 1;
    ///< Clock measurment enable.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_MEAS_CK_SEL : 3;
    ///< Clock measurment input clock select.
    ///< Selection TBD
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_ckm_ctrl_0_reg_t;

#define PMA_TXPLL_MGS_CKM_CTRL_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CKM_CTRL_0_RD_MASK (0x000001ffU)
#define PMA_TXPLL_MGS_CKM_CTRL_0_WR_MASK (0x000001ffU)


///< Clock measurment averager enable.  When this is 1, the clock measurment
///< will an average of 4 measurments.
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_DEF (0x00000000)

///< Clock measurment clock enable.
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_DEF (0x00000000)

///< Clock measurment continous mode.  When this is set.  The measurment
///< block will continue take the clock measurment, until ckm_clk_en set
///< to 0
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_OFF ( 2)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_MSK (0x00000004)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_DEF (0x00000000)

///< Clock measurment in digital domain.  Perform the clock measuement
///< that the clocks are in the digital domain. Always set to 1.
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_OFF ( 3)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_MSK (0x00000008)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_DEF (0x00000000)

///< Clock measurment error clear.  To clear the error status
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_OFF ( 4)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_MSK (0x00000010)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_DEF (0x00000000)

///< Clock measurment enable.
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_EN_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_EN_BF_MSK (0x00000020)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_EN_BF_DEF (0x00000000)

///< Clock measurment input clock select.
///< Selection TBD
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_OFF ( 6)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_WID ( 3)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_MSK (0x000001C0)
#define PMA_TXPLL_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CKM_CTRL_1 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ckm_ctrl_1
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_RESULT_CLR : 1;
    ///< Clock measurment clear.  Set this to 1 to clear all the measurment
    ///< history
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_START : 1;
    ///< Clock measurment start.  To start the clock measurment.  All clock
    ///< measurment configuration must be set prior to this register is set
    ///< to 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_REF_CK_DIV_RATIO : 3;
    ///< Clock measurment sample clock divider.
    ///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_WDT_INTERVAL : 2;
    ///< Clock measurment watch dog timer interval.  Time before report the
    ///< block is not able to take any clock measumrent.  For example, the
    ///< measured clock is not toggled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_WIN_THR_REF : 25;
    ///< Clock measurment window threshold
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_ckm_ctrl_1_reg_t;

#define PMA_TXPLL_MGS_CKM_CTRL_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CKM_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_CKM_CTRL_1_WR_MASK (0xffffffffU)


///< Clock measurment clear.  Set this to 1 to clear all the measurment
///< history
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_DEF (0x00000000)

///< Clock measurment start.  To start the clock measurment.  All clock
///< measurment configuration must be set prior to this register is set
///< to 1
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_START_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_START_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_START_BF_MSK (0x00000002)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_START_BF_DEF (0x00000000)

///< Clock measurment sample clock divider.
///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_OFF ( 2)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_WID ( 3)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_MSK (0x0000001C)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_DEF (0x00000000)

///< Clock measurment watch dog timer interval.  Time before report the
///< block is not able to take any clock measumrent.  For example, the
///< measured clock is not toggled
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_WID ( 2)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_MSK (0x00000060)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_DEF (0x00000000)

///< Clock measurment window threshold
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_OFF ( 7)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_WID (25)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_MSK (0xFFFFFF80)
#define PMA_TXPLL_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CKM_CTRL_2 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ckm_ctrl_2
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_MAX_THR : 25;
    ///< Clock measurment windows
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_ckm_ctrl_2_reg_t;

#define PMA_TXPLL_MGS_CKM_CTRL_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CKM_CTRL_2_RD_MASK (0x01ffffffU)
#define PMA_TXPLL_MGS_CKM_CTRL_2_WR_MASK (0x01ffffffU)


///< Clock measurment windows
#define PMA_TXPLL_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_WID (25)
#define PMA_TXPLL_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_MSK (0x01FFFFFF)
#define PMA_TXPLL_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CKM_STATUS register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ckm_status
  * Clock Measurment Status
  */

typedef union {
  struct {
    uint32_t CKM_DIG_MEAS_ERR : 1;
    ///< CKM error status.  This signal will be asserted to HIGH, if the measured
    ///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
    ///< is HIGH
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_RESULT_MEAS : 25;
    ///< Measured clock result.   This value represents how many measured clock
    ///< has counted during measuring window.  When Averager is OFF, this value
    ///< in this register represents the instantanous result from the last
    ///< run.  If Averager is ON.  This value from this register represents
    ///< the average value from the last 4 measured result.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_STATUS : 1;
    ///< This is a status indicates the CKM is in the progress taking clock
    ///< clock meaurement.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t CKM_VALID_MEAS : 1;
    ///< This indicates the measured result (ckm_result_meas) is valid to be
    ///< read
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_ckm_stat_reg_t;

#define PMA_TXPLL_MGS_CKM_STAT_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CKM_STAT_RD_MASK (0x0fffffffU)
#define PMA_TXPLL_MGS_CKM_STAT_WR_MASK (0x00000000U)


///< CKM error status.  This signal will be asserted to HIGH, if the measured
///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
///< is HIGH
#define PMA_TXPLL_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_MSK (0x00000001)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_DEF (0x00000000)

///< Measured clock result.   This value represents how many measured clock
///< has counted during measuring window.  When Averager is OFF, this value
///< in this register represents the instantanous result from the last
///< run.  If Averager is ON.  This value from this register represents
///< the average value from the last 4 measured result.
#define PMA_TXPLL_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_OFF ( 1)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_WID (25)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_MSK (0x03FFFFFE)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_DEF (0x00000000)

///< This is a status indicates the CKM is in the progress taking clock
///< clock meaurement.
#define PMA_TXPLL_MGS_CKM_STAT_CKM_STAT_BF_OFF (26)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_STAT_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_STAT_BF_MSK (0x04000000)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_STAT_BF_DEF (0x00000000)

///< This indicates the measured result (ckm_result_meas) is valid to be
///< read
#define PMA_TXPLL_MGS_CKM_STAT_CKM_VALID_MEAS_BF_OFF (27)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_VALID_MEAS_BF_WID ( 1)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_VALID_MEAS_BF_MSK (0x08000000)
#define PMA_TXPLL_MGS_CKM_STAT_CKM_VALID_MEAS_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CFGLOADER_APB2STRB_CFG register description at address offset 0x130
  *
  * Register default value:        0x000014A5
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_cfgloader_apb2strb_cfg
  * TX PLL Config Loader APB-to-Strobe Bridge Configuration
  */

typedef union {
  struct {
    uint32_t TXPLL_APB2STRBCFG_STBL_TIME_AFTR_STRB : 5;
    ///< PLL APB to STRB bridge - Time between rising edge of STRB to asserting
    ///< APB PREADY
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t TXPLL_APB2STRBCFG_STBL_TIME_BFR_STRB : 5;
    ///< PLL APB to STRB bridge - Time between APB PENABLE to rising edge of
    ///< STR
    ///< AccessType="RW" BitOffset="5" ResetValue="0x5"
    uint32_t TXPLL_APB2STRBCFG_STRB_PULSE_WIDTH : 5;
    ///< PLL APB to STRB bridge - Width of STRB
    ///< AccessType="RW" BitOffset="10" ResetValue="0x5"
    uint32_t TXPLL_APB2STRBCFG_ACC_CTRL_FIELD_MASK_WRITE_EN : 1;
    ///< PLL APB to STRB bridge - Field mask write enable.  Always set this
    ///< register to 0
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t TXPLL_APB2STRBCFG_FORCE_STATE_EN : 1;
    ///< PLL APB to STRB bridge - FSM state override enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXPLL_APB2STRBCFG_FORCE_STATE_VAL : 3;
    ///< PLL APB to STRB bridge - FSM state overrid
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_cfgloader_apb2strb_cfg_reg_t;

#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_DEFAULT (0x000014a5U)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_RD_MASK (0x000fffffU)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_WR_MASK (0x000fffffU)


///< PLL APB to STRB bridge - Time between rising edge of STRB to asserting
///< APB PREADY
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_AFTR_STRB_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_AFTR_STRB_BF_WID ( 5)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_AFTR_STRB_BF_MSK (0x0000001F)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_AFTR_STRB_BF_DEF (0x00000005)

///< PLL APB to STRB bridge - Time between APB PENABLE to rising edge of
///< STR
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_BFR_STRB_BF_OFF ( 5)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_BFR_STRB_BF_WID ( 5)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_BFR_STRB_BF_MSK (0x000003E0)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STBL_TIME_BFR_STRB_BF_DEF (0x000000A0)

///< PLL APB to STRB bridge - Width of STRB
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STRB_PULSE_WIDTH_BF_OFF (10)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STRB_PULSE_WIDTH_BF_WID ( 5)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STRB_PULSE_WIDTH_BF_MSK (0x00007C00)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_STRB_PULSE_WIDTH_BF_DEF (0x00001400)

///< PLL APB to STRB bridge - Field mask write enable.  Always set this
///< register to 0
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_ACC_CTRL_FIELD_MASK_WRITE_EN_BF_OFF (15)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_ACC_CTRL_FIELD_MASK_WRITE_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_ACC_CTRL_FIELD_MASK_WRITE_EN_BF_MSK (0x00008000)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_ACC_CTRL_FIELD_MASK_WRITE_EN_BF_DEF (0x00000000)

///< PLL APB to STRB bridge - FSM state override enable
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_EN_BF_OFF (16)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_EN_BF_WID ( 1)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_EN_BF_MSK (0x00010000)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_EN_BF_DEF (0x00000000)

///< PLL APB to STRB bridge - FSM state overrid
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_VAL_BF_OFF (17)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_VAL_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_VAL_BF_MSK (0x000E0000)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_TXPLL_APB2STRBCFG_FORCE_STATE_VAL_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_CFGLOADER_APB2STRB_STATUS register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_cfgloader_apb2strb_status
  * TX PLL Config Loader APB-to-Strobe Bridge Status
  */

typedef union {
  struct {
    uint32_t TXPLL_APB2STRBCFG_APB_FSM_PS : 3;
    ///< This register shows the PLL APB to STRB bridge - current FSM state
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_cfgloader_apb2strb_stat_reg_t;

#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_RD_MASK (0x00000007U)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_WR_MASK (0x00000000U)


///< This register shows the PLL APB to STRB bridge - current FSM state
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_TXPLL_APB2STRBCFG_APB_FSM_PS_BF_OFF ( 0)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_TXPLL_APB2STRBCFG_APB_FSM_PS_BF_WID ( 3)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_TXPLL_APB2STRBCFG_APB_FSM_PS_BF_MSK (0x00000007)
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_TXPLL_APB2STRBCFG_APB_FSM_PS_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_LOCKTIME register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_locktime
  * TxPLL Locktime
  */

typedef union {
  struct {
    uint32_t TXPLL_LOCKTIME : 18;
    ///< PLL lock time.  Measure how long the PLL takes to be in lock state
    ///< from PLL enable
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_locktime_reg_t;

#define PMA_TXPLL_MGS_LOCKTIME_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_LOCKTIME_RD_MASK (0x0003ffffU)
#define PMA_TXPLL_MGS_LOCKTIME_WR_MASK (0x00000000U)


///< PLL lock time.  Measure how long the PLL takes to be in lock state
///< from PLL enable
#define PMA_TXPLL_MGS_LOCKTIME_TXPLL_LOCKTIME_BF_OFF ( 0)
#define PMA_TXPLL_MGS_LOCKTIME_TXPLL_LOCKTIME_BF_WID (18)
#define PMA_TXPLL_MGS_LOCKTIME_TXPLL_LOCKTIME_BF_MSK (0x0003FFFF)
#define PMA_TXPLL_MGS_LOCKTIME_TXPLL_LOCKTIME_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCHY_0 register description at address offset 0x13c
  *
  * Register default value:        0x00001249
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratchy_0
  * Orchy TXPLL Scratch Register 0
  */

typedef union {
  struct {
    uint32_t REFCKSEL_MUXD0 : 3;
    ///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
    ///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD1 : 3;
    ///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
    ///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD2 : 3;
    ///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
    ///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD3 : 3;
    ///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
    ///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t REFCKSEL_MUXD4 : 3;
    ///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
    ///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
    ///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
    ///< - 1'b0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratchy_0_reg_t;

#define PMA_TXPLL_MGS_SCRATCHY_0_DEFAULT (0x00001249U)
#define PMA_TXPLL_MGS_SCRATCHY_0_RD_MASK (0x00007fffU)
#define PMA_TXPLL_MGS_SCRATCHY_0_WR_MASK (0x00007fffU)


///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
///< - 1'b0
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_WID ( 3)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_MSK (0x00000007)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD0_BF_DEF (0x00000001)

///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
///< - 1'b0
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_OFF ( 3)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_WID ( 3)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_MSK (0x00000038)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD1_BF_DEF (0x00000008)

///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
///< - 1'b0
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_OFF ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_WID ( 3)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_MSK (0x000001C0)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD2_BF_DEF (0x00000040)

///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
///< - 1'b0
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_OFF ( 9)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_WID ( 3)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_MSK (0x00000E00)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD3_BF_DEF (0x00000200)

///< Select the source for the reference clock mux for TXPLL. 0 - RX feedback
///< clock, 1 - ioa_ck_ref_left/right[0], 2 - ioa_ck_ref_left/right[1],
///< 3 - ioa_ck_ref_left/right[2], 4 - ioa_ck_ref_left/right[3], 5/6/7
///< - 1'b0
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_OFF (12)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_WID ( 3)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_MSK (0x00007000)
#define PMA_TXPLL_MGS_SCRATCHY_0_REFCKSEL_MUXD4_BF_DEF (0x00001000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_SCRATCHY_1 register description at address offset 0x140
  *
  * Register default value:        0x01041041
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_scratchy_1
  * Orchy TXPLL Scratch Register 1
  */

typedef union {
  struct {
    uint32_t REFDIV_MUXD0 : 6;
    ///< Reference clock divider value for TXPLL
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t REFDIV_MUXD1 : 6;
    ///< Reference clock divider value for TXPLL
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t REFDIV_MUXD2 : 6;
    ///< Reference clock divider value for TXPLL
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t REFDIV_MUXD3 : 6;
    ///< Reference clock divider value for TXPLL
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t REFDIV_MUXD4 : 6;
    ///< Reference clock divider value for TXPLL
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_scratchy_1_reg_t;

#define PMA_TXPLL_MGS_SCRATCHY_1_DEFAULT (0x01041041U)
#define PMA_TXPLL_MGS_SCRATCHY_1_RD_MASK (0x3fffffffU)
#define PMA_TXPLL_MGS_SCRATCHY_1_WR_MASK (0x3fffffffU)


///< Reference clock divider value for TXPLL
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_WID ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_MSK (0x0000003F)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD0_BF_DEF (0x00000001)

///< Reference clock divider value for TXPLL
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_OFF ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_WID ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_MSK (0x00000FC0)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD1_BF_DEF (0x00000040)

///< Reference clock divider value for TXPLL
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_OFF (12)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_WID ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_MSK (0x0003F000)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD2_BF_DEF (0x00001000)

///< Reference clock divider value for TXPLL
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_OFF (18)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_WID ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_MSK (0x00FC0000)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD3_BF_DEF (0x00040000)

///< Reference clock divider value for TXPLL
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_OFF (24)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_WID ( 6)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_MSK (0x3F000000)
#define PMA_TXPLL_MGS_SCRATCHY_1_REFDIV_MUXD4_BF_DEF (0x01000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_TESTBUS_CFG_0 register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_testbus_cfg_0
  * Lane testbus configuration
  */

typedef union {
  struct {
    uint32_t LANE_TSTBUS_RST_OVREN : 1;
    ///< Lane testbus reset override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LANE_TSTBUS_RST_OVR_B : 1;
    ///< Lane testbus reset override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LANE_PERFMON_EN : 1;
    ///< Lane performance monitor enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t LANE_PERFMON_COMPARE_VAL_START : 8;
    ///< Lane performance monitor compare value stop  Set 1 to stop the monitor
    ///< comparsion
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t LANE_PERFMON_COMPARE_VAL_STOP : 8;
    ///< Lane performance monitor compare value start.  Set 1 to start the
    ///< monitor comparsion
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t LANE_PERFMON_MASK : 8;
    ///< Lane performance monitor mask
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_testbus_cfg_0_reg_t;

#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_RD_MASK (0xffffff13U)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_WR_MASK (0xffffff13U)


///< Lane testbus reset override enable
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVREN_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVREN_BF_DEF (0x00000000)

///< Lane testbus reset override
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVR_B_BF_OFF ( 1)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVR_B_BF_WID ( 1)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVR_B_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_TSTBUS_RST_OVR_B_BF_DEF (0x00000000)

///< Lane performance monitor enable
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_EN_BF_OFF ( 4)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_EN_BF_WID ( 1)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_EN_BF_MSK (0x00000010)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_EN_BF_DEF (0x00000000)

///< Lane performance monitor compare value stop  Set 1 to stop the monitor
///< comparsion
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_START_BF_OFF ( 8)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_START_BF_WID ( 8)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_START_BF_MSK (0x0000FF00)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_START_BF_DEF (0x00000000)

///< Lane performance monitor compare value start.  Set 1 to start the
///< monitor comparsion
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_STOP_BF_OFF (16)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_STOP_BF_WID ( 8)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_STOP_BF_MSK (0x00FF0000)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_CMP_VAL_STOP_BF_DEF (0x00000000)

///< Lane performance monitor mask
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_MASK_BF_OFF (24)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_MASK_BF_WID ( 8)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_MASK_BF_MSK (0xFF000000)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_LANE_PERFMON_MASK_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_TESTBUS_CFG_1 register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_testbus_cfg_1
  * Lane testbus configuration
  */

typedef union {
  struct {
    uint32_t LANE_TSTBUS_ADDR : 7;
    ///< Lane Testbus bundle select.  Each testbus bundle is a 8bit bus
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_testbus_cfg_1_reg_t;

#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_RD_MASK (0x0000007fU)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_WR_MASK (0x0000007fU)


///< Lane Testbus bundle select.  Each testbus bundle is a 8bit bus
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_LANE_TSTBUS_ADDR_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_LANE_TSTBUS_ADDR_BF_WID ( 7)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_LANE_TSTBUS_ADDR_BF_MSK (0x0000007F)
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_LANE_TSTBUS_ADDR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_TESTBUS_STATUS_0 register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_testbus_status_0
  * Lane testbus status
  */

typedef union {
  struct {
    uint32_t LANE_TSTBUS_VALUE : 8;
    ///< Lane testbus value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t LANE_PERFMON_DONE : 1;
    ///< This indicates the perfermance monitor has completed the comparsio
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_testbus_stat_0_reg_t;

#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_RD_MASK (0x000001ffU)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_WR_MASK (0x00000000U)


///< Lane testbus value
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_TSTBUS_VAL_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_TSTBUS_VAL_BF_WID ( 8)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_TSTBUS_VAL_BF_MSK (0x000000FF)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_TSTBUS_VAL_BF_DEF (0x00000000)

///< This indicates the perfermance monitor has completed the comparsio
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_PERFMON_DONE_BF_OFF ( 8)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_PERFMON_DONE_BF_WID ( 1)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_PERFMON_DONE_BF_MSK (0x00000100)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_LANE_PERFMON_DONE_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_TESTBUS_STATUS_1 register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_testbus_status_1
  * Lane testbus status
  */

typedef union {
  struct {
    uint32_t LANE_PERFMON_EVENT_TIME : 32;
    ///< Lane perfermance monitor event time. Indicate how many occurances
    ///< of the observed signal(s)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_testbus_stat_1_reg_t;

#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_WR_MASK (0x00000000U)


///< Lane perfermance monitor event time. Indicate how many occurances
///< of the observed signal(s)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_LANE_PERFMON_EVENT_TIME_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_LANE_PERFMON_EVENT_TIME_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_LANE_PERFMON_EVENT_TIME_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_LANE_PERFMON_EVENT_TIME_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_SPARE_PORT_OVERRIDE_CTRL register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_spare_port_override_ctrl
  * Lane Spare Port Overide
  */

typedef union {
  struct {
    uint32_t LANESPAREINPORT_LOCOVREN : 1;
    ///< Lane Spare Input Port override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LANESPAREOUTPORT_LOCOVREN : 1;
    ///< Lane Spare Output Port override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_spare_port_ovrd_ctrl_reg_t;

#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_RD_MASK (0x00000003U)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_WR_MASK (0x00000003U)


///< Lane Spare Input Port override enable
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREINPORT_LOCOVREN_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREINPORT_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREINPORT_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREINPORT_LOCOVREN_BF_DEF (0x00000000)

///< Lane Spare Output Port override enable
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREOUTPORT_LOCOVREN_BF_OFF ( 1)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREOUTPORT_LOCOVREN_BF_WID ( 1)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREOUTPORT_LOCOVREN_BF_MSK (0x00000002)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_LANESPAREOUTPORT_LOCOVREN_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_SPARE_PORT_OVERRIDE register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_spare_port_override
  * Lane Spare Port Overide
  */

typedef union {
  struct {
    uint32_t LANESPAREINPORT_LOCOVR : 10;
    ///< Lane Spare Input Port override
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t LANESPAREOUTPORT_LOCOVR : 10;
    ///< Lane Spare Output Port override
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_spare_port_ovrd_reg_t;

#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_RD_MASK (0x03ff03ffU)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_WR_MASK (0x03ff03ffU)


///< Lane Spare Input Port override
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREINPORT_LOCOVR_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREINPORT_LOCOVR_BF_WID (10)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREINPORT_LOCOVR_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREINPORT_LOCOVR_BF_DEF (0x00000000)

///< Lane Spare Output Port override
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREOUTPORT_LOCOVR_BF_OFF (16)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREOUTPORT_LOCOVR_BF_WID (10)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREOUTPORT_LOCOVR_BF_MSK (0x03FF0000)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_LANESPAREOUTPORT_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_SPARE_PORT_PREOVERRIDE register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_spare_port_preoverride
  * Lane Spare Port Overide
  */

typedef union {
  struct {
    uint32_t LANESPAREINPORT_LOC : 10;
    ///< Lane Spare Input Port pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t LANESPAREOUTPORT_LOC : 10;
    ///< Lane Spare Output Port pre-override
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_spare_port_preovrd_reg_t;

#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_RD_MASK (0x03ff03ffU)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_WR_MASK (0x00000000U)


///< Lane Spare Input Port pre-override
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREINPORT_LOC_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREINPORT_LOC_BF_WID (10)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREINPORT_LOC_BF_MSK (0x000003FF)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREINPORT_LOC_BF_DEF (0x00000000)

///< Lane Spare Output Port pre-override
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREOUTPORT_LOC_BF_OFF (16)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREOUTPORT_LOC_BF_WID (10)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREOUTPORT_LOC_BF_MSK (0x03FF0000)
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_LANESPAREOUTPORT_LOC_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_FORCE_EVENT_CTRL register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_force_event_ctrl
  * Lane IRQ FW Event
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_FORCE_EVENT : 2;
    ///< Firmware interrupt event
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_force_event_ctrl_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_RD_MASK (0x00000003U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_WR_MASK (0x00000003U)


///< Firmware interrupt event
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_LANE_ICU_IRQ_FORCE_EVENT_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_LANE_ICU_IRQ_FORCE_EVENT_BF_WID ( 2)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_LANE_ICU_IRQ_FORCE_EVENT_BF_MSK (0x00000003)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_LANE_ICU_IRQ_FORCE_EVENT_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_ENABLE_0 register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_enable_0
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_ENABLE_0 : 32;
    ///< Enable the Lane interrupt.  Bit 31:0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_en_0_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_WR_MASK (0xffffffffU)


///< Enable the Lane interrupt.  Bit 31:0
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_LANE_ICU_IRQ_EN_0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_LANE_ICU_IRQ_EN_0_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_LANE_ICU_IRQ_EN_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_LANE_ICU_IRQ_EN_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_ENABLE_1 register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_enable_1
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_ENABLE_1 : 32;
    ///< Enable the Lane interrupt.  Bit 63:32
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_en_1_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_WR_MASK (0xffffffffU)


///< Enable the Lane interrupt.  Bit 63:32
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_LANE_ICU_IRQ_EN_1_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_LANE_ICU_IRQ_EN_1_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_LANE_ICU_IRQ_EN_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_LANE_ICU_IRQ_EN_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_MASK_0 register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_mask_0
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_MASK_0 : 32;
    ///< Mask the Lane interrupt request. Bit 31:0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_mask_0_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_WR_MASK (0xffffffffU)


///< Mask the Lane interrupt request. Bit 31:0
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_LANE_ICU_IRQ_MASK_0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_LANE_ICU_IRQ_MASK_0_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_LANE_ICU_IRQ_MASK_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_LANE_ICU_IRQ_MASK_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_MASK_1 register description at address offset 0x170
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_mask_1
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_MASK_1 : 32;
    ///< Mask the Lane interrupt request. Bit 63:32
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_mask_1_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_WR_MASK (0xffffffffU)


///< Mask the Lane interrupt request. Bit 63:32
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_LANE_ICU_IRQ_MASK_1_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_LANE_ICU_IRQ_MASK_1_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_LANE_ICU_IRQ_MASK_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_LANE_ICU_IRQ_MASK_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_CLEAR_0 register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_clear_0
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_CLEAR_0 : 32;
    ///< clear icu. Bit 31:0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_clr_0_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_WR_MASK (0xffffffffU)


///< clear icu. Bit 31:0
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_LANE_ICU_IRQ_CLR_0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_LANE_ICU_IRQ_CLR_0_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_LANE_ICU_IRQ_CLR_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_LANE_ICU_IRQ_CLR_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_CLEAR_1 register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_clear_1
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_CLEAR_1 : 32;
    ///< clear icu. Bit 63:32
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_clr_1_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_WR_MASK (0xffffffffU)


///< clear icu. Bit 63:32
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_LANE_ICU_IRQ_CLR_1_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_LANE_ICU_IRQ_CLR_1_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_LANE_ICU_IRQ_CLR_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_LANE_ICU_IRQ_CLR_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_RAW_STATUS_0 register description at address offset 0x17c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_raw_status_0
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_RAW_STATUS_0 : 32;
    ///< ICU Raw status. Bit 31:0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_raw_stat_0_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_WR_MASK (0x00000000U)


///< ICU Raw status. Bit 31:0
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_LANE_ICU_IRQ_RAW_STAT_0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_LANE_ICU_IRQ_RAW_STAT_0_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_LANE_ICU_IRQ_RAW_STAT_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_LANE_ICU_IRQ_RAW_STAT_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_RAW_STATUS_1 register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_raw_status_1
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_RAW_STATUS_1 : 32;
    ///< ICU Raw status. Bit 63:32
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_raw_stat_1_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_WR_MASK (0x00000000U)


///< ICU Raw status. Bit 63:32
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_LANE_ICU_IRQ_RAW_STAT_1_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_LANE_ICU_IRQ_RAW_STAT_1_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_LANE_ICU_IRQ_RAW_STAT_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_LANE_ICU_IRQ_RAW_STAT_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_STATUS_0 register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_status_0
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_STATUS_0 : 32;
    ///< ICU status. Bit 31:0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_stat_0_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_WR_MASK (0x00000000U)


///< ICU status. Bit 31:0
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_LANE_ICU_IRQ_STAT_0_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_LANE_ICU_IRQ_STAT_0_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_LANE_ICU_IRQ_STAT_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_LANE_ICU_IRQ_STAT_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_LANE_ICU_IRQ_STATUS_1 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/lane_icu_irq_status_1
  * Lane IRQ
  */

typedef union {
  struct {
    uint32_t LANE_ICU_IRQ_STATUS_1 : 32;
    ///< ICU status. Bit 63:32
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_msg_lane_icu_irq_stat_1_reg_t;

#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_WR_MASK (0x00000000U)


///< ICU status. Bit 63:32
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_LANE_ICU_IRQ_STAT_1_BF_OFF ( 0)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_LANE_ICU_IRQ_STAT_1_BF_WID (32)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_LANE_ICU_IRQ_STAT_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_LANE_ICU_IRQ_STAT_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_WRAPPER_RW_SPARE register description at address offset 0x3d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_wrapper_rw_spare
  * TX PLL Wrapper Spare RW Register
  */

typedef union {
  struct {
    uint32_t TXPLL_SPARE_WRAPPER_DIN : 12;
    ///< Spare registers for PLL wrapper. Rserved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_wrapper_rw_spare_reg_t;

#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_RD_MASK (0x00000fffU)
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_WR_MASK (0x00000fffU)


///< Spare registers for PLL wrapper. Rserved for future
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_TXPLL_SPARE_WRAPPER_DIN_BF_OFF ( 0)
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_TXPLL_SPARE_WRAPPER_DIN_BF_WID (12)
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_TXPLL_SPARE_WRAPPER_DIN_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_TXPLL_SPARE_WRAPPER_DIN_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_WRAPPER_RO_SPARE register description at address offset 0x3dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_wrapper_ro_spare
  * TX PLL Wrapper Spare RW Register
  */

typedef union {
  struct {
    uint32_t TXPLL_SPARE_WRAPPER_DOUT : 12;
    ///< Spare registers for PLL wrapper. Rserved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_txpll_mgs_wrapper_ro_spare_reg_t;

#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_RD_MASK (0x00000fffU)
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_WR_MASK (0x00000000U)


///< Spare registers for PLL wrapper. Rserved for future
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_TXPLL_SPARE_WRAPPER_DOUT_BF_OFF ( 0)
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_TXPLL_SPARE_WRAPPER_DOUT_BF_WID (12)
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_TXPLL_SPARE_WRAPPER_DOUT_BF_MSK (0x00000FFF)
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_TXPLL_SPARE_WRAPPER_DOUT_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RW_SPARE_0 register description at address offset 0x3e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rw_spare_0
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TXPLL_RW_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_rw_spare_0_reg_t;

#define PMA_TXPLL_MGS_RW_SPARE_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RW_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RW_SPARE_0_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLL_MGS_RW_SPARE_0_TXPLL_RW_SPARE_0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RW_SPARE_0_TXPLL_RW_SPARE_0_BF_WID (32)
#define PMA_TXPLL_MGS_RW_SPARE_0_TXPLL_RW_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_RW_SPARE_0_TXPLL_RW_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RW_SPARE_1 register description at address offset 0x3e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rw_spare_1
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TXPLL_RW_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_rw_spare_1_reg_t;

#define PMA_TXPLL_MGS_RW_SPARE_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RW_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RW_SPARE_1_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLL_MGS_RW_SPARE_1_TXPLL_RW_SPARE_1_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RW_SPARE_1_TXPLL_RW_SPARE_1_BF_WID (32)
#define PMA_TXPLL_MGS_RW_SPARE_1_TXPLL_RW_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_RW_SPARE_1_TXPLL_RW_SPARE_1_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RW_SPARE_2 register description at address offset 0x3e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rw_spare_2
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TXPLL_RW_SPARE_2 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_rw_spare_2_reg_t;

#define PMA_TXPLL_MGS_RW_SPARE_2_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RW_SPARE_2_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RW_SPARE_2_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLL_MGS_RW_SPARE_2_TXPLL_RW_SPARE_2_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RW_SPARE_2_TXPLL_RW_SPARE_2_BF_WID (32)
#define PMA_TXPLL_MGS_RW_SPARE_2_TXPLL_RW_SPARE_2_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_RW_SPARE_2_TXPLL_RW_SPARE_2_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RW_SPARE_3 register description at address offset 0x3ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_rw_spare_3
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TXPLL_RW_SPARE_3 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_rw_spare_3_reg_t;

#define PMA_TXPLL_MGS_RW_SPARE_3_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RW_SPARE_3_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RW_SPARE_3_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TXPLL_MGS_RW_SPARE_3_TXPLL_RW_SPARE_3_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RW_SPARE_3_TXPLL_RW_SPARE_3_BF_WID (32)
#define PMA_TXPLL_MGS_RW_SPARE_3_TXPLL_RW_SPARE_3_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_RW_SPARE_3_TXPLL_RW_SPARE_3_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RO_SPARE_0 register description at address offset 0x3f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ro_spare_0
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t TXPLL_RO_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_ro_spare_0_reg_t;

#define PMA_TXPLL_MGS_RO_SPARE_0_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RO_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RO_SPARE_0_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_TXPLL_MGS_RO_SPARE_0_TXPLL_RO_SPARE_0_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RO_SPARE_0_TXPLL_RO_SPARE_0_BF_WID (32)
#define PMA_TXPLL_MGS_RO_SPARE_0_TXPLL_RO_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_RO_SPARE_0_TXPLL_RO_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_TXPLL_REGS_MSG_PMA_TXPLL_REGS_TXPLL_RO_SPARE_1 register description at address offset 0x3f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TXPLL_regs_MSG/PMA_TXPLL_regs/txpll_ro_spare_1
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t TXPLL_RO_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_txpll_mgs_ro_spare_1_reg_t;

#define PMA_TXPLL_MGS_RO_SPARE_1_DEFAULT (0x00000000U)
#define PMA_TXPLL_MGS_RO_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_TXPLL_MGS_RO_SPARE_1_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_TXPLL_MGS_RO_SPARE_1_TXPLL_RO_SPARE_1_BF_OFF ( 0)
#define PMA_TXPLL_MGS_RO_SPARE_1_TXPLL_RO_SPARE_1_BF_WID (32)
#define PMA_TXPLL_MGS_RO_SPARE_1_TXPLL_RO_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_TXPLL_MGS_RO_SPARE_1_TXPLL_RO_SPARE_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PMA_TXPLL_MGS_CAR_CFG_REG(_BASE) ((pma_txpll_mgs_car_cfg_reg_t*) PMA_TXPLL_MGS_CAR_CFG_ADR(_BASE))
#define PMA_TXPLL_MGS_CAR_CFG_RO_REG(_BASE) ((pma_txpll_mgs_car_cfg_ro_reg_t*) PMA_TXPLL_MGS_CAR_CFG_RO_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_0_REG(_BASE) ((pma_txpll_mgs_scratch_pad_0_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_0_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_1_REG(_BASE) ((pma_txpll_mgs_scratch_pad_1_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_1_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_2_REG(_BASE) ((pma_txpll_mgs_scratch_pad_2_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_2_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_3_REG(_BASE) ((pma_txpll_mgs_scratch_pad_3_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_3_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_4_REG(_BASE) ((pma_txpll_mgs_scratch_pad_4_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_4_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_5_REG(_BASE) ((pma_txpll_mgs_scratch_pad_5_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_5_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_6_REG(_BASE) ((pma_txpll_mgs_scratch_pad_6_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_6_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCH_PAD_7_REG(_BASE) ((pma_txpll_mgs_scratch_pad_7_reg_t*) PMA_TXPLL_MGS_SCRATCH_PAD_7_ADR(_BASE))
#define PMA_TXPLL_MGS_FORCE_PUP_CTRL_REG(_BASE) ((pma_txpll_mgs_force_pup_ctrl_reg_t*) PMA_TXPLL_MGS_FORCE_PUP_CTRL_ADR(_BASE))
#define PMA_TXPLL_MGS_PWR_MNG_CTRL_REG(_BASE) ((pma_txpll_mgs_pwr_mng_ctrl_reg_t*) PMA_TXPLL_MGS_PWR_MNG_CTRL_ADR(_BASE))
#define PMA_TXPLL_MGS_PWR_MNG_STAT_REG(_BASE) ((pma_txpll_mgs_pwr_mng_stat_reg_t*) PMA_TXPLL_MGS_PWR_MNG_STAT_ADR(_BASE))
#define PMA_TXPLL_MGS_CFG_REG(_BASE) ((pma_txpll_mgs_cfg_reg_t*) PMA_TXPLL_MGS_CFG_ADR(_BASE))
#define PMA_TXPLL_MGS_CFG_RO_REG(_BASE) ((pma_txpll_mgs_cfg_ro_reg_t*) PMA_TXPLL_MGS_CFG_RO_ADR(_BASE))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_REG(_BASE) ((pma_txpll_mgs_postdivclk_ctrl_0_reg_t*) PMA_TXPLL_MGS_POSTDIVCLK_CTRL_0_ADR(_BASE))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_REG(_BASE) ((pma_txpll_mgs_postdivclk_ctrl_1_reg_t*) PMA_TXPLL_MGS_POSTDIVCLK_CTRL_1_ADR(_BASE))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_REG(_BASE) ((pma_txpll_mgs_postdivclk_ctrl_2_reg_t*) PMA_TXPLL_MGS_POSTDIVCLK_CTRL_2_ADR(_BASE))
#define PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_REG(_BASE) ((pma_txpll_mgs_postdivclk_ctrl_3_reg_t*) PMA_TXPLL_MGS_POSTDIVCLK_CTRL_3_ADR(_BASE))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_REG(_BASE) ((pma_txpll_mgs_txpll_divrate_ctrl_0_reg_t*) PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_0_ADR(_BASE))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_REG(_BASE) ((pma_txpll_mgs_txpll_divrate_ctrl_1_reg_t*) PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_1_ADR(_BASE))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_REG(_BASE) ((pma_txpll_mgs_txpll_divrate_ctrl_2_reg_t*) PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_2_ADR(_BASE))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_REG(_BASE) ((pma_txpll_mgs_txpll_divrate_ctrl_3_reg_t*) PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_3_ADR(_BASE))
#define PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_REG(_BASE) ((pma_txpll_mgs_txpll_divrate_ctrl_4_reg_t*) PMA_TXPLL_MGS_TXPLL_DIVRATE_CTRL_4_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_REG(_BASE) ((pma_txpll_msg_fsm_calmaster_pstate_cfg_reg_t*) PMA_TXPLL_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_REG(_BASE) ((pma_txpll_msg_fsm_calmaster_quad_cfg_reg_t*) PMA_TXPLL_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_REG(_BASE) ((pma_txpll_msg_fsm_ratewidth_cfg_0_reg_t*) PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_REG(_BASE) ((pma_txpll_msg_fsm_ratewidth_cfg_1_reg_t*) PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_REG(_BASE) ((pma_txpll_msg_fsm_ratewidth_cfg_2_reg_t*) PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_2_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_REG(_BASE) ((pma_txpll_msg_fsm_ratewidth_cfg_3_reg_t*) PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_3_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_REG(_BASE) ((pma_txpll_msg_fsm_ratewidth_cfg_4_reg_t*) PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_4_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_REG(_BASE) ((pma_txpll_msg_fsm_ratewidth_cfg_5_reg_t*) PMA_TXPLL_MSG_FSM_RATEWIDTH_CFG_5_ADR(_BASE))
#define PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_REG(_BASE) ((pma_txpll_mgs_ratewidth_cascade_cfg_reg_t*) PMA_TXPLL_MGS_RATEWIDTH_CASCADE_CFG_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_CTRL_REG(_BASE) ((pma_txpll_msg_rpu_ctrl_reg_t*) PMA_TXPLL_MSG_RPU_CTRL_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_0_REG(_BASE) ((pma_txpll_msg_rpu_lut_cfg_0_reg_t*) PMA_TXPLL_MSG_RPU_LUT_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_1_REG(_BASE) ((pma_txpll_msg_rpu_lut_cfg_1_reg_t*) PMA_TXPLL_MSG_RPU_LUT_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_2_REG(_BASE) ((pma_txpll_msg_rpu_lut_cfg_2_reg_t*) PMA_TXPLL_MSG_RPU_LUT_CFG_2_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_3_REG(_BASE) ((pma_txpll_msg_rpu_lut_cfg_3_reg_t*) PMA_TXPLL_MSG_RPU_LUT_CFG_3_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_LUT_CFG_4_REG(_BASE) ((pma_txpll_msg_rpu_lut_cfg_4_reg_t*) PMA_TXPLL_MSG_RPU_LUT_CFG_4_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_REG(_BASE) ((pma_txpll_msg_rpu_evup_delay_cfg_0_reg_t*) PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_REG(_BASE) ((pma_txpll_msg_rpu_evup_delay_cfg_1_reg_t*) PMA_TXPLL_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_REG(_BASE) ((pma_txpll_msg_rpu_evdn_delay_cfg_0_reg_t*) PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_REG(_BASE) ((pma_txpll_msg_rpu_evdn_delay_cfg_1_reg_t*) PMA_TXPLL_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_0_REG(_BASE) ((pma_txpll_mgs_rpu_event_cfg_0_reg_t*) PMA_TXPLL_MGS_RPU_EVENT_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_1_REG(_BASE) ((pma_txpll_mgs_rpu_event_cfg_1_reg_t*) PMA_TXPLL_MGS_RPU_EVENT_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_2_REG(_BASE) ((pma_txpll_mgs_rpu_event_cfg_2_reg_t*) PMA_TXPLL_MGS_RPU_EVENT_CFG_2_ADR(_BASE))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_3_REG(_BASE) ((pma_txpll_mgs_rpu_event_cfg_3_reg_t*) PMA_TXPLL_MGS_RPU_EVENT_CFG_3_ADR(_BASE))
#define PMA_TXPLL_MGS_RPU_EVENT_CFG_4_REG(_BASE) ((pma_txpll_mgs_rpu_event_cfg_4_reg_t*) PMA_TXPLL_MGS_RPU_EVENT_CFG_4_ADR(_BASE))
#define PMA_TXPLL_MGS_STAT_0_REG(_BASE) ((pma_txpll_mgs_stat_0_reg_t*) PMA_TXPLL_MGS_STAT_0_ADR(_BASE))
#define PMA_TXPLL_MGS_STAT_1_REG(_BASE) ((pma_txpll_mgs_stat_1_reg_t*) PMA_TXPLL_MGS_STAT_1_ADR(_BASE))
#define PMA_TXPLL_MGS_STAT_2_REG(_BASE) ((pma_txpll_mgs_stat_2_reg_t*) PMA_TXPLL_MGS_STAT_2_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_ctrl_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_ctrl_ro_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_CTRL_RO_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_timer_cfg_0_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_timer_cfg_1_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_timer_cfg_2_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_2_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_timer_cfg_3_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_3_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_timer_cfg_4_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_4_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_REG(_BASE) ((pma_txpll_msg_fsm_pllstartup_timer_cfg_5_reg_t*) PMA_TXPLL_MSG_FSM_PLLSTARTUP_TIMER_CFG_5_ADR(_BASE))
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_REG(_BASE) ((pma_txpll_mgs_pll_stat_ctrl_reg_t*) PMA_TXPLL_MGS_PLL_STAT_CTRL_ADR(_BASE))
#define PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_REG(_BASE) ((pma_txpll_mgs_pll_stat_ctrl_ro_reg_t*) PMA_TXPLL_MGS_PLL_STAT_CTRL_RO_ADR(_BASE))
#define PMA_TXPLL_MGS_CTRL_OUT_0_REG(_BASE) ((pma_txpll_mgs_ctrl_out_0_reg_t*) PMA_TXPLL_MGS_CTRL_OUT_0_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_REG(_BASE) ((pma_txpll_msg_fsm_ctrl_ovrd_reg_t*) PMA_TXPLL_MSG_FSM_CTRL_OVRD_ADR(_BASE))
#define PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_REG(_BASE) ((pma_txpll_msg_fsm_ctrl_ovrd_ro_reg_t*) PMA_TXPLL_MSG_FSM_CTRL_OVRD_RO_ADR(_BASE))
#define PMA_TXPLL_MGS_DCCRST_CTRL_REG(_BASE) ((pma_txpll_mgs_dccrst_ctrl_reg_t*) PMA_TXPLL_MGS_DCCRST_CTRL_ADR(_BASE))
#define PMA_TXPLL_MGS_STAGGER_TIME_CFG_REG(_BASE) ((pma_txpll_mgs_stagger_time_cfg_reg_t*) PMA_TXPLL_MGS_STAGGER_TIME_CFG_ADR(_BASE))
#define PMA_TXPLL_MGS_OBSVR_REG(_BASE) ((pma_txpll_mgs_obsvr_reg_t*) PMA_TXPLL_MGS_OBSVR_ADR(_BASE))
#define PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_REG(_BASE) ((pma_txpll_mgs_output_pin_ovrd_reg_t*) PMA_TXPLL_MGS_OUTPUT_PIN_OVRD_ADR(_BASE))
#define PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_REG(_BASE) ((pma_txpll_mgs_output_pin_preovrd_reg_t*) PMA_TXPLL_MGS_OUTPUT_PIN_PREOVRD_ADR(_BASE))
#define PMA_TXPLL_MGS_BRKPT_CTRL_REG(_BASE) ((pma_txpll_mgs_brkpt_ctrl_reg_t*) PMA_TXPLL_MGS_BRKPT_CTRL_ADR(_BASE))
#define PMA_TXPLL_MGS_BRKPT_STAT_REG(_BASE) ((pma_txpll_mgs_brkpt_stat_reg_t*) PMA_TXPLL_MGS_BRKPT_STAT_ADR(_BASE))
#define PMA_TXPLL_MGS_BRKPT_CLR_REG(_BASE) ((pma_txpll_mgs_brkpt_clr_reg_t*) PMA_TXPLL_MGS_BRKPT_CLR_ADR(_BASE))
#define PMA_TXPLL_MGS_CKM_CTRL_0_REG(_BASE) ((pma_txpll_mgs_ckm_ctrl_0_reg_t*) PMA_TXPLL_MGS_CKM_CTRL_0_ADR(_BASE))
#define PMA_TXPLL_MGS_CKM_CTRL_1_REG(_BASE) ((pma_txpll_mgs_ckm_ctrl_1_reg_t*) PMA_TXPLL_MGS_CKM_CTRL_1_ADR(_BASE))
#define PMA_TXPLL_MGS_CKM_CTRL_2_REG(_BASE) ((pma_txpll_mgs_ckm_ctrl_2_reg_t*) PMA_TXPLL_MGS_CKM_CTRL_2_ADR(_BASE))
#define PMA_TXPLL_MGS_CKM_STAT_REG(_BASE) ((pma_txpll_mgs_ckm_stat_reg_t*) PMA_TXPLL_MGS_CKM_STAT_ADR(_BASE))
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_REG(_BASE) ((pma_txpll_mgs_cfgloader_apb2strb_cfg_reg_t*) PMA_TXPLL_MGS_CFGLOADER_APB2STRB_CFG_ADR(_BASE))
#define PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_REG(_BASE) ((pma_txpll_mgs_cfgloader_apb2strb_stat_reg_t*) PMA_TXPLL_MGS_CFGLOADER_APB2STRB_STAT_ADR(_BASE))
#define PMA_TXPLL_MGS_LOCKTIME_REG(_BASE) ((pma_txpll_mgs_locktime_reg_t*) PMA_TXPLL_MGS_LOCKTIME_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCHY_0_REG(_BASE) ((pma_txpll_mgs_scratchy_0_reg_t*) PMA_TXPLL_MGS_SCRATCHY_0_ADR(_BASE))
#define PMA_TXPLL_MGS_SCRATCHY_1_REG(_BASE) ((pma_txpll_mgs_scratchy_1_reg_t*) PMA_TXPLL_MGS_SCRATCHY_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_REG(_BASE) ((pma_txpll_msg_lane_testbus_cfg_0_reg_t*) PMA_TXPLL_MSG_LANE_TESTBUS_CFG_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_REG(_BASE) ((pma_txpll_msg_lane_testbus_cfg_1_reg_t*) PMA_TXPLL_MSG_LANE_TESTBUS_CFG_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_REG(_BASE) ((pma_txpll_msg_lane_testbus_stat_0_reg_t*) PMA_TXPLL_MSG_LANE_TESTBUS_STAT_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_REG(_BASE) ((pma_txpll_msg_lane_testbus_stat_1_reg_t*) PMA_TXPLL_MSG_LANE_TESTBUS_STAT_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_REG(_BASE) ((pma_txpll_msg_lane_spare_port_ovrd_ctrl_reg_t*) PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_CTRL_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_REG(_BASE) ((pma_txpll_msg_lane_spare_port_ovrd_reg_t*) PMA_TXPLL_MSG_LANE_SPARE_PORT_OVRD_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_REG(_BASE) ((pma_txpll_msg_lane_spare_port_preovrd_reg_t*) PMA_TXPLL_MSG_LANE_SPARE_PORT_PREOVRD_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_force_event_ctrl_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_FORCE_EVENT_CTRL_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_en_0_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_en_1_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_EN_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_mask_0_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_mask_1_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_MASK_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_clr_0_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_clr_1_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_CLR_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_raw_stat_0_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_raw_stat_1_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_RAW_STAT_1_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_stat_0_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_0_ADR(_BASE))
#define PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_REG(_BASE) ((pma_txpll_msg_lane_icu_irq_stat_1_reg_t*) PMA_TXPLL_MSG_LANE_ICU_IRQ_STAT_1_ADR(_BASE))
#define PMA_TXPLL_MGS_WRAPPER_RW_SPARE_REG(_BASE) ((pma_txpll_mgs_wrapper_rw_spare_reg_t*) PMA_TXPLL_MGS_WRAPPER_RW_SPARE_ADR(_BASE))
#define PMA_TXPLL_MGS_WRAPPER_RO_SPARE_REG(_BASE) ((pma_txpll_mgs_wrapper_ro_spare_reg_t*) PMA_TXPLL_MGS_WRAPPER_RO_SPARE_ADR(_BASE))
#define PMA_TXPLL_MGS_RW_SPARE_0_REG(_BASE) ((pma_txpll_mgs_rw_spare_0_reg_t*) PMA_TXPLL_MGS_RW_SPARE_0_ADR(_BASE))
#define PMA_TXPLL_MGS_RW_SPARE_1_REG(_BASE) ((pma_txpll_mgs_rw_spare_1_reg_t*) PMA_TXPLL_MGS_RW_SPARE_1_ADR(_BASE))
#define PMA_TXPLL_MGS_RW_SPARE_2_REG(_BASE) ((pma_txpll_mgs_rw_spare_2_reg_t*) PMA_TXPLL_MGS_RW_SPARE_2_ADR(_BASE))
#define PMA_TXPLL_MGS_RW_SPARE_3_REG(_BASE) ((pma_txpll_mgs_rw_spare_3_reg_t*) PMA_TXPLL_MGS_RW_SPARE_3_ADR(_BASE))
#define PMA_TXPLL_MGS_RO_SPARE_0_REG(_BASE) ((pma_txpll_mgs_ro_spare_0_reg_t*) PMA_TXPLL_MGS_RO_SPARE_0_ADR(_BASE))
#define PMA_TXPLL_MGS_RO_SPARE_1_REG(_BASE) ((pma_txpll_mgs_ro_spare_1_reg_t*) PMA_TXPLL_MGS_RO_SPARE_1_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pma_txpll_mgs_car_cfg_reg_t TXPLL_CAR_CFG; /*< Address offset = 0x0 */
    pma_txpll_mgs_car_cfg_ro_reg_t TXPLL_CAR_CFG_RO; /*< Address offset = 0x4 */
    pma_txpll_mgs_scratch_pad_0_reg_t TXPLL_SCRATCH_PAD_0; /*< Address offset = 0x8 */
    pma_txpll_mgs_scratch_pad_1_reg_t TXPLL_SCRATCH_PAD_1; /*< Address offset = 0xc */
    pma_txpll_mgs_scratch_pad_2_reg_t TXPLL_SCRATCH_PAD_2; /*< Address offset = 0x10 */
    pma_txpll_mgs_scratch_pad_3_reg_t TXPLL_SCRATCH_PAD_3; /*< Address offset = 0x14 */
    pma_txpll_mgs_scratch_pad_4_reg_t TXPLL_SCRATCH_PAD_4; /*< Address offset = 0x18 */
    pma_txpll_mgs_scratch_pad_5_reg_t TXPLL_SCRATCH_PAD_5; /*< Address offset = 0x1c */
    pma_txpll_mgs_scratch_pad_6_reg_t TXPLL_SCRATCH_PAD_6; /*< Address offset = 0x20 */
    pma_txpll_mgs_scratch_pad_7_reg_t TXPLL_SCRATCH_PAD_7; /*< Address offset = 0x24 */
    pma_txpll_mgs_force_pup_ctrl_reg_t TXPLL_FORCE_PUP_CTRL; /*< Address offset = 0x28 */
    pma_txpll_mgs_pwr_mng_ctrl_reg_t TXPLL_PWR_MNG_CTRL; /*< Address offset = 0x2c */
    pma_txpll_mgs_pwr_mng_stat_reg_t TXPLL_PWR_MNG_STAT; /*< Address offset = 0x30 */
    pma_txpll_mgs_cfg_reg_t TXPLL_CFG; /*< Address offset = 0x34 */
    pma_txpll_mgs_cfg_ro_reg_t TXPLL_CFG_RO; /*< Address offset = 0x38 */
    pma_txpll_mgs_postdivclk_ctrl_0_reg_t TXPLL_POSTDIVCLK_CTRL_0; /*< Address offset = 0x3c */
    pma_txpll_mgs_postdivclk_ctrl_1_reg_t TXPLL_POSTDIVCLK_CTRL_1; /*< Address offset = 0x40 */
    pma_txpll_mgs_postdivclk_ctrl_2_reg_t TXPLL_POSTDIVCLK_CTRL_2; /*< Address offset = 0x44 */
    pma_txpll_mgs_postdivclk_ctrl_3_reg_t TXPLL_POSTDIVCLK_CTRL_3; /*< Address offset = 0x48 */
    pma_txpll_mgs_txpll_divrate_ctrl_0_reg_t TXPLL_DIVRATE_CTRL_0; /*< Address offset = 0x4c */
    pma_txpll_mgs_txpll_divrate_ctrl_1_reg_t TXPLL_DIVRATE_CTRL_1; /*< Address offset = 0x50 */
    pma_txpll_mgs_txpll_divrate_ctrl_2_reg_t TXPLL_DIVRATE_CTRL_2; /*< Address offset = 0x54 */
    pma_txpll_mgs_txpll_divrate_ctrl_3_reg_t TXPLL_DIVRATE_CTRL_3; /*< Address offset = 0x58 */
    pma_txpll_mgs_txpll_divrate_ctrl_4_reg_t TXPLL_DIVRATE_CTRL_4; /*< Address offset = 0x5c */
    pma_txpll_msg_fsm_calmaster_pstate_cfg_reg_t TXPLLFSM_CALMASTER_PSTATE_CFG; /*< Address offset = 0x60 */
    pma_txpll_msg_fsm_calmaster_quad_cfg_reg_t TXPLLFSM_CALMASTER_QUAD_CFG; /*< Address offset = 0x64 */
    pma_txpll_msg_fsm_ratewidth_cfg_0_reg_t TXPLLFSM_RATEWIDTH_CFG_0; /*< Address offset = 0x68 */
    pma_txpll_msg_fsm_ratewidth_cfg_1_reg_t TXPLLFSM_RATEWIDTH_CFG_1; /*< Address offset = 0x6c */
    pma_txpll_msg_fsm_ratewidth_cfg_2_reg_t TXPLLFSM_RATEWIDTH_CFG_2; /*< Address offset = 0x70 */
    pma_txpll_msg_fsm_ratewidth_cfg_3_reg_t TXPLLFSM_RATEWIDTH_CFG_3; /*< Address offset = 0x74 */
    pma_txpll_msg_fsm_ratewidth_cfg_4_reg_t TXPLLFSM_RATEWIDTH_CFG_4; /*< Address offset = 0x78 */
    pma_txpll_msg_fsm_ratewidth_cfg_5_reg_t TXPLLFSM_RATEWIDTH_CFG_5; /*< Address offset = 0x7c */
    pma_txpll_mgs_ratewidth_cascade_cfg_reg_t TXPLL_RATEWIDTH_CASCADE_CFG; /*< Address offset = 0x80 */
    pma_txpll_msg_rpu_ctrl_reg_t TXPLLRPU_CTRL; /*< Address offset = 0x84 */
    pma_txpll_msg_rpu_lut_cfg_0_reg_t TXPLLRPU_LUT_CFG_0; /*< Address offset = 0x88 */
    pma_txpll_msg_rpu_lut_cfg_1_reg_t TXPLLRPU_LUT_CFG_1; /*< Address offset = 0x8c */
    pma_txpll_msg_rpu_lut_cfg_2_reg_t TXPLLRPU_LUT_CFG_2; /*< Address offset = 0x90 */
    pma_txpll_msg_rpu_lut_cfg_3_reg_t TXPLLRPU_LUT_CFG_3; /*< Address offset = 0x94 */
    pma_txpll_msg_rpu_lut_cfg_4_reg_t TXPLLRPU_LUT_CFG_4; /*< Address offset = 0x98 */
    pma_txpll_msg_rpu_evup_delay_cfg_0_reg_t TXPLLRPU_EVUP_DELAY_CFG_0; /*< Address offset = 0x9c */
    pma_txpll_msg_rpu_evup_delay_cfg_1_reg_t TXPLLRPU_EVUP_DELAY_CFG_1; /*< Address offset = 0xa0 */
    pma_txpll_msg_rpu_evdn_delay_cfg_0_reg_t TXPLLRPU_EVDN_DELAY_CFG_0; /*< Address offset = 0xa4 */
    pma_txpll_msg_rpu_evdn_delay_cfg_1_reg_t TXPLLRPU_EVDN_DELAY_CFG_1; /*< Address offset = 0xa8 */
    pma_txpll_mgs_rpu_event_cfg_0_reg_t TXPLL_RPU_EVENT_CFG_0; /*< Address offset = 0xac */
    pma_txpll_mgs_rpu_event_cfg_1_reg_t TXPLL_RPU_EVENT_CFG_1; /*< Address offset = 0xb0 */
    pma_txpll_mgs_rpu_event_cfg_2_reg_t TXPLL_RPU_EVENT_CFG_2; /*< Address offset = 0xb4 */
    pma_txpll_mgs_rpu_event_cfg_3_reg_t TXPLL_RPU_EVENT_CFG_3; /*< Address offset = 0xb8 */
    pma_txpll_mgs_rpu_event_cfg_4_reg_t TXPLL_RPU_EVENT_CFG_4; /*< Address offset = 0xbc */
    pma_txpll_mgs_stat_0_reg_t TXPLL_STAT_0; /*< Address offset = 0xc0 */
    pma_txpll_mgs_stat_1_reg_t TXPLL_STAT_1; /*< Address offset = 0xc4 */
    pma_txpll_mgs_stat_2_reg_t TXPLL_STAT_2; /*< Address offset = 0xc8 */
    pma_txpll_msg_fsm_pllstartup_ctrl_reg_t TXPLLFSM_PLLSTARTUP_CTRL; /*< Address offset = 0xcc */
    pma_txpll_msg_fsm_pllstartup_ctrl_ro_reg_t TXPLLFSM_PLLSTARTUP_CTRL_RO; /*< Address offset = 0xd0 */
    pma_txpll_msg_fsm_pllstartup_timer_cfg_0_reg_t TXPLLFSM_PLLSTARTUP_TIMER_CFG_0; /*< Address offset = 0xd4 */
    pma_txpll_msg_fsm_pllstartup_timer_cfg_1_reg_t TXPLLFSM_PLLSTARTUP_TIMER_CFG_1; /*< Address offset = 0xd8 */
    pma_txpll_msg_fsm_pllstartup_timer_cfg_2_reg_t TXPLLFSM_PLLSTARTUP_TIMER_CFG_2; /*< Address offset = 0xdc */
    pma_txpll_msg_fsm_pllstartup_timer_cfg_3_reg_t TXPLLFSM_PLLSTARTUP_TIMER_CFG_3; /*< Address offset = 0xe0 */
    pma_txpll_msg_fsm_pllstartup_timer_cfg_4_reg_t TXPLLFSM_PLLSTARTUP_TIMER_CFG_4; /*< Address offset = 0xe4 */
    pma_txpll_msg_fsm_pllstartup_timer_cfg_5_reg_t TXPLLFSM_PLLSTARTUP_TIMER_CFG_5; /*< Address offset = 0xe8 */
    pma_txpll_mgs_pll_stat_ctrl_reg_t TXPLL_PLL_STAT_CTRL; /*< Address offset = 0xec */
    pma_txpll_mgs_pll_stat_ctrl_ro_reg_t TXPLL_PLL_STAT_CTRL_RO; /*< Address offset = 0xf0 */
    pma_txpll_mgs_ctrl_out_0_reg_t TXPLL_CTRL_OUT_0; /*< Address offset = 0xf4 */
    pma_txpll_msg_fsm_ctrl_ovrd_reg_t TXPLLFSM_CTRL_OVRD; /*< Address offset = 0xf8 */
    pma_txpll_msg_fsm_ctrl_ovrd_ro_reg_t TXPLLFSM_CTRL_OVRD_RO; /*< Address offset = 0xfc */
    pma_txpll_mgs_dccrst_ctrl_reg_t TXPLL_DCCRST_CTRL; /*< Address offset = 0x100 */
    pma_txpll_mgs_stagger_time_cfg_reg_t TXPLL_STAGGER_TIME_CFG; /*< Address offset = 0x104 */
    pma_txpll_mgs_obsvr_reg_t TXPLL_OBSVR; /*< Address offset = 0x108 */
    pma_txpll_mgs_output_pin_ovrd_reg_t TXPLL_OUTPUT_PIN_OVRD; /*< Address offset = 0x10c */
    pma_txpll_mgs_output_pin_preovrd_reg_t TXPLL_OUTPUT_PIN_PREOVRD; /*< Address offset = 0x110 */
    pma_txpll_mgs_brkpt_ctrl_reg_t TXPLL_BRKPT_CTRL; /*< Address offset = 0x114 */
    pma_txpll_mgs_brkpt_stat_reg_t TXPLL_BRKPT_STAT; /*< Address offset = 0x118 */
    pma_txpll_mgs_brkpt_clr_reg_t TXPLL_BRKPT_CLR; /*< Address offset = 0x11c */
    pma_txpll_mgs_ckm_ctrl_0_reg_t TXPLL_CKM_CTRL_0; /*< Address offset = 0x120 */
    pma_txpll_mgs_ckm_ctrl_1_reg_t TXPLL_CKM_CTRL_1; /*< Address offset = 0x124 */
    pma_txpll_mgs_ckm_ctrl_2_reg_t TXPLL_CKM_CTRL_2; /*< Address offset = 0x128 */
    pma_txpll_mgs_ckm_stat_reg_t TXPLL_CKM_STAT; /*< Address offset = 0x12c */
    pma_txpll_mgs_cfgloader_apb2strb_cfg_reg_t TXPLL_CFGLOADER_APB2STRB_CFG; /*< Address offset = 0x130 */
    pma_txpll_mgs_cfgloader_apb2strb_stat_reg_t TXPLL_CFGLOADER_APB2STRB_STAT; /*< Address offset = 0x134 */
    pma_txpll_mgs_locktime_reg_t TXPLL_LOCKTIME; /*< Address offset = 0x138 */
    pma_txpll_mgs_scratchy_0_reg_t TXPLL_SCRATCHY_0; /*< Address offset = 0x13c */
    pma_txpll_mgs_scratchy_1_reg_t TXPLL_SCRATCHY_1; /*< Address offset = 0x140 */
    pma_txpll_msg_lane_testbus_cfg_0_reg_t LANE_TESTBUS_CFG_0; /*< Address offset = 0x144 */
    pma_txpll_msg_lane_testbus_cfg_1_reg_t LANE_TESTBUS_CFG_1; /*< Address offset = 0x148 */
    pma_txpll_msg_lane_testbus_stat_0_reg_t LANE_TESTBUS_STAT_0; /*< Address offset = 0x14c */
    pma_txpll_msg_lane_testbus_stat_1_reg_t LANE_TESTBUS_STAT_1; /*< Address offset = 0x150 */
    pma_txpll_msg_lane_spare_port_ovrd_ctrl_reg_t LANE_SPARE_PORT_OVRD_CTRL; /*< Address offset = 0x154 */
    pma_txpll_msg_lane_spare_port_ovrd_reg_t LANE_SPARE_PORT_OVRD; /*< Address offset = 0x158 */
    pma_txpll_msg_lane_spare_port_preovrd_reg_t LANE_SPARE_PORT_PREOVRD; /*< Address offset = 0x15c */
    pma_txpll_msg_lane_icu_irq_force_event_ctrl_reg_t LANE_ICU_IRQ_FORCE_EVENT_CTRL; /*< Address offset = 0x160 */
    pma_txpll_msg_lane_icu_irq_en_0_reg_t LANE_ICU_IRQ_EN_0; /*< Address offset = 0x164 */
    pma_txpll_msg_lane_icu_irq_en_1_reg_t LANE_ICU_IRQ_EN_1; /*< Address offset = 0x168 */
    pma_txpll_msg_lane_icu_irq_mask_0_reg_t LANE_ICU_IRQ_MASK_0; /*< Address offset = 0x16c */
    pma_txpll_msg_lane_icu_irq_mask_1_reg_t LANE_ICU_IRQ_MASK_1; /*< Address offset = 0x170 */
    pma_txpll_msg_lane_icu_irq_clr_0_reg_t LANE_ICU_IRQ_CLR_0; /*< Address offset = 0x174 */
    pma_txpll_msg_lane_icu_irq_clr_1_reg_t LANE_ICU_IRQ_CLR_1; /*< Address offset = 0x178 */
    pma_txpll_msg_lane_icu_irq_raw_stat_0_reg_t LANE_ICU_IRQ_RAW_STAT_0; /*< Address offset = 0x17c */
    pma_txpll_msg_lane_icu_irq_raw_stat_1_reg_t LANE_ICU_IRQ_RAW_STAT_1; /*< Address offset = 0x180 */
    pma_txpll_msg_lane_icu_irq_stat_0_reg_t LANE_ICU_IRQ_STAT_0; /*< Address offset = 0x184 */
    pma_txpll_msg_lane_icu_irq_stat_1_reg_t LANE_ICU_IRQ_STAT_1; /*< Address offset = 0x188 */
    const uint8_t        reservedArea0 [588]; /*< Address offset = 0x18c */
    pma_txpll_mgs_wrapper_rw_spare_reg_t TXPLL_WRAPPER_RW_SPARE; /*< Address offset = 0x3d8 */
    pma_txpll_mgs_wrapper_ro_spare_reg_t TXPLL_WRAPPER_RO_SPARE; /*< Address offset = 0x3dc */
    pma_txpll_mgs_rw_spare_0_reg_t TXPLL_RW_SPARE_0; /*< Address offset = 0x3e0 */
    pma_txpll_mgs_rw_spare_1_reg_t TXPLL_RW_SPARE_1; /*< Address offset = 0x3e4 */
    pma_txpll_mgs_rw_spare_2_reg_t TXPLL_RW_SPARE_2; /*< Address offset = 0x3e8 */
    pma_txpll_mgs_rw_spare_3_reg_t TXPLL_RW_SPARE_3; /*< Address offset = 0x3ec */
    pma_txpll_mgs_ro_spare_0_reg_t TXPLL_RO_SPARE_0; /*< Address offset = 0x3f0 */
    pma_txpll_mgs_ro_spare_1_reg_t TXPLL_RO_SPARE_1; /*< Address offset = 0x3f4 */
} pma_txpll_msg_t;     // size: 0x01ac

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_TXPLL_GLOBAL  ((pma_txpll_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLL_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q0      ((pma_txpll_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLL_Q0_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q1      ((pma_txpll_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLL_Q1_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q2      ((pma_txpll_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLL_Q2_BASE)
#define DLNK_JESD0_PHY_PMA0_TXPLL_Q3      ((pma_txpll_msg_t*) DLNK_JESD0_PHY_PMA0_TXPLL_Q3_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLL_GLOBAL  ((pma_txpll_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLL_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q0      ((pma_txpll_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLL_Q0_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q1      ((pma_txpll_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLL_Q1_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q2      ((pma_txpll_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLL_Q2_BASE)
#define DLNK_JESD1_PHY_PMA0_TXPLL_Q3      ((pma_txpll_msg_t*) DLNK_JESD1_PHY_PMA0_TXPLL_Q3_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLL_GLOBAL  ((pma_txpll_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLL_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q0      ((pma_txpll_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLL_Q0_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q1      ((pma_txpll_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLL_Q1_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q2      ((pma_txpll_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLL_Q2_BASE)
#define DLNK_JESD2_PHY_PMA0_TXPLL_Q3      ((pma_txpll_msg_t*) DLNK_JESD2_PHY_PMA0_TXPLL_Q3_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLL_GLOBAL  ((pma_txpll_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLL_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q0      ((pma_txpll_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLL_Q0_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q1      ((pma_txpll_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLL_Q1_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q2      ((pma_txpll_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLL_Q2_BASE)
#define DLNK_JESD3_PHY_PMA0_TXPLL_Q3      ((pma_txpll_msg_t*) DLNK_JESD3_PHY_PMA0_TXPLL_Q3_BASE)

// ******************************************* /Address Space

#endif      // _PMA_TXPLL_MSG_H_

