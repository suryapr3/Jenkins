#ifndef _ANT_CSR_H_
#define _ANT_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#if (CPU_ANA) // from ADC view
#include "adc_addr_offset.h"
#define ANT0_CSR_BASE         ( 0x049f3000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_CSR_BASE         ( 0x04bf3000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_CSR_BASE         ( 0x04df3000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_CSR_BASE         ( 0x04ff3000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#else // from digRF view
#define ANT0_CSR_BASE         ( 0x049f3000 )
#define ANT1_CSR_BASE         ( 0x04bf3000 )
#define ANT2_CSR_BASE         ( 0x04df3000 )
#define ANT3_CSR_BASE         ( 0x04ff3000 )
#endif // CPU_ANA

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define ANT_CSR_SCRATCH_OFFSET   ( 0x00000000U )
#define ANT_CSR_ASC_ANT_RATE_OFFSET ( 0x00000004U )
#define ANT_CSR_ASC_XT_BYP_OFFSET ( 0x00000008U )
#define ANT_CSR_FB_ASC_ANT_RATE_OFFSET ( 0x0000000cU )
#define ANT_CSR_ANT_DCSRC_CONF0_OFFSET ( 0x00000010U )
#define ANT_CSR_ANT_DCSRC_CONF1_OFFSET ( 0x00000014U )
#define ANT_CSR_ANT_DPATH_CONF_OFFSET ( 0x00000018U )
#define ANT_CSR_ANT_BSG_CFG_OFFSET ( 0x0000001cU )
#define ANT_CSR_ANT_BSG_DC_VAL_OFFSET ( 0x00000020U )
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_OFFSET ( 0x00000024U )
#define ANT_CSR_ANT_CCF_INIT_OFFSET ( 0x00000028U )
#define ANT_CSR_ANT_DP_INIT_OFFSET ( 0x0000002cU )
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG0_OFFSET ( 0x00000030U )
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG1_OFFSET ( 0x00000034U )
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG2_OFFSET ( 0x00000038U )
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG3_OFFSET ( 0x0000003cU )
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG0_OFFSET ( 0x00000040U )
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG1_OFFSET ( 0x00000044U )
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG2_OFFSET ( 0x00000048U )
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG3_OFFSET ( 0x0000004cU )
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG0_OFFSET ( 0x00000050U )
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG1_OFFSET ( 0x00000054U )
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG2_OFFSET ( 0x00000058U )
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG3_OFFSET ( 0x0000005cU )
#define ANT_CSR_ANT_RX_EN_RESUME_CFG0_OFFSET ( 0x00000060U )
#define ANT_CSR_ANT_RX_EN_RESUME_CFG1_OFFSET ( 0x00000064U )
#define ANT_CSR_ANT_RX_EN_RESUME_CFG2_OFFSET ( 0x00000068U )
#define ANT_CSR_ANT_RX_EN_RESUME_CFG3_OFFSET ( 0x0000006cU )
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG0_OFFSET ( 0x00000070U )
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG1_OFFSET ( 0x00000074U )
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG2_OFFSET ( 0x00000078U )
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG3_OFFSET ( 0x0000007cU )
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG0_OFFSET ( 0x00000080U )
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG1_OFFSET ( 0x00000084U )
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG2_OFFSET ( 0x00000088U )
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG3_OFFSET ( 0x0000008cU )
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_OFFSET ( 0x00000090U )
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_OFFSET ( 0x00000094U )
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_OFFSET ( 0x00000098U )
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_OFFSET ( 0x0000009cU )
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_OFFSET ( 0x000000a0U )
#define ANT_CSR_ANT_CCF_RX_IN_CFG_OFFSET ( 0x000000a4U )
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_OFFSET ( 0x000000a8U )
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_OFFSET ( 0x000000acU )
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_OFFSET ( 0x000000b0U )
#define ANT_CSR_CMFF_CFG_OFFSET ( 0x000000b4U )
#define ANT_CSR_CMFF_CTRL_OFFSET ( 0x000000b8U )
#define ANT_CSR_ANT_BSG_DC_INCR_OFFSET ( 0x000000bcU )
#define ANT_CSR_ISYNC_CTRL_OFFSET ( 0x00000100U )
#define ANT_CSR_ISYNC_LCNT_INC_OFFSET ( 0x00000104U )
#define ANT_CSR_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000108U )
#define ANT_CSR_ISYNC_INC_PRE_OFFSET ( 0x0000010cU )
#define ANT_CSR_ISYNC_CNT_ADJ_OFFSET ( 0x00000110U )
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000114U )
#define ANT_CSR_ISYNC_BFN_CNT_OFFSET ( 0x00000118U )
#define ANT_CSR_BFNE_CFG0_OFFSET ( 0x00000200U )
#define ANT_CSR_BFNE_CFG1_OFFSET ( 0x00000204U )
#define ANT_CSR_BFNE_CFG2_OFFSET ( 0x00000208U )
#define ANT_CSR_BFNE_CFG3_OFFSET ( 0x0000020cU )
#define ANT_CSR_BFNE_CFG4_OFFSET ( 0x00000210U )
#define ANT_CSR_BFNE_CFG5_OFFSET ( 0x00000214U )
#define ANT_CSR_BFNE_CFG6_OFFSET ( 0x00000218U )
#define ANT_CSR_BFNE_CFG7_OFFSET ( 0x0000021cU )
#define ANT_CSR_BFNE_CFG8_OFFSET ( 0x00000220U )
#define ANT_CSR_BFNE_CFG9_OFFSET ( 0x00000224U )
#define ANT_CSR_BFNE_CFG10_OFFSET ( 0x00000228U )
#define ANT_CSR_BFNE_CFG11_OFFSET ( 0x0000022cU )
#define ANT_CSR_BFNE_CFG12_OFFSET ( 0x00000230U )
#define ANT_CSR_BFNE_CFG13_OFFSET ( 0x00000234U )
#define ANT_CSR_BFNE_CFG14_OFFSET ( 0x00000238U )
#define ANT_CSR_BFNE_CFG15_OFFSET ( 0x0000023cU )
#define ANT_CSR_BFNE_CFG16_OFFSET ( 0x00000240U )
#define ANT_CSR_BFNE_CFG17_OFFSET ( 0x00000244U )
#define ANT_CSR_BFNE_CFG18_OFFSET ( 0x00000248U )
#define ANT_CSR_BFNE_CFG19_OFFSET ( 0x0000024cU )
#define ANT_CSR_BFNE_CFG20_OFFSET ( 0x00000250U )
#define ANT_CSR_BFNE_CFG21_OFFSET ( 0x00000254U )
#define ANT_CSR_BFNE_CFG22_OFFSET ( 0x00000258U )
#define ANT_CSR_BFNE_CFG23_OFFSET ( 0x0000025cU )
#define ANT_CSR_BFNE_CFG24_OFFSET ( 0x00000260U )
#define ANT_CSR_BFNE_CFG25_OFFSET ( 0x00000264U )
#define ANT_CSR_BFNE_CFG26_OFFSET ( 0x00000268U )
#define ANT_CSR_BFNE_CFG27_OFFSET ( 0x0000026cU )
#define ANT_CSR_BFNE_CFG28_OFFSET ( 0x00000270U )
#define ANT_CSR_BFNE_CFG29_OFFSET ( 0x00000274U )
#define ANT_CSR_BFNE_CFG30_OFFSET ( 0x00000278U )
#define ANT_CSR_BFNE_CFG31_OFFSET ( 0x0000027cU )
#define ANT_CSR_BFNE_CFG32_OFFSET ( 0x00000280U )
#define ANT_CSR_BFNE_CFG33_OFFSET ( 0x00000284U )
#define ANT_CSR_BFNE_CFG34_OFFSET ( 0x00000288U )
#define ANT_CSR_BFNE_CFG35_OFFSET ( 0x0000028cU )
#define ANT_CSR_BFNE_CFG36_OFFSET ( 0x00000290U )
#define ANT_CSR_BFNE_CFG37_OFFSET ( 0x00000294U )
#define ANT_CSR_BFNE_CFG38_OFFSET ( 0x00000298U )
#define ANT_CSR_BFNE_CFG39_OFFSET ( 0x0000029cU )
#define ANT_CSR_BFNE_CFG40_OFFSET ( 0x000002a0U )
#define ANT_CSR_BFNE_CFG41_OFFSET ( 0x000002a4U )
#define ANT_CSR_BFNE_INCR0_OFFSET ( 0x00000300U )
#define ANT_CSR_BFNE_INCR1_OFFSET ( 0x00000304U )
#define ANT_CSR_BFNE_INCR2_OFFSET ( 0x00000308U )
#define ANT_CSR_BFNE_INCR3_OFFSET ( 0x0000030cU )
#define ANT_CSR_BFNE_INCR4_OFFSET ( 0x00000310U )
#define ANT_CSR_BFNE_INCR5_OFFSET ( 0x00000314U )
#define ANT_CSR_BFNE_INCR6_OFFSET ( 0x00000318U )
#define ANT_CSR_BFNE_INCR7_OFFSET ( 0x0000031cU )
#define ANT_CSR_BFNE_INCR8_OFFSET ( 0x00000320U )
#define ANT_CSR_BFNE_INCR9_OFFSET ( 0x00000324U )
#define ANT_CSR_BFNE_INCR10_OFFSET ( 0x00000328U )
#define ANT_CSR_BFNE_INCR11_OFFSET ( 0x0000032cU )
#define ANT_CSR_BFNE_INCR12_OFFSET ( 0x00000330U )
#define ANT_CSR_BFNE_INCR13_OFFSET ( 0x00000334U )
#define ANT_CSR_BFNE_INCR14_OFFSET ( 0x00000338U )
#define ANT_CSR_BFNE_INCR15_OFFSET ( 0x0000033cU )
#define ANT_CSR_BFNE_INCR16_OFFSET ( 0x00000340U )
#define ANT_CSR_BFNE_INCR17_OFFSET ( 0x00000344U )
#define ANT_CSR_BFNE_INCR18_OFFSET ( 0x00000348U )
#define ANT_CSR_BFNE_INCR19_OFFSET ( 0x0000034cU )
#define ANT_CSR_BFNE_INCR20_OFFSET ( 0x00000350U )
#define ANT_CSR_BFNE_INCR21_OFFSET ( 0x00000354U )
#define ANT_CSR_BFNE_INCR22_OFFSET ( 0x00000358U )
#define ANT_CSR_BFNE_INCR23_OFFSET ( 0x0000035cU )
#define ANT_CSR_BFNE_INCR24_OFFSET ( 0x00000360U )
#define ANT_CSR_BFNE_INCR25_OFFSET ( 0x00000364U )
#define ANT_CSR_BFNE_INCR26_OFFSET ( 0x00000368U )
#define ANT_CSR_BFNE_INCR27_OFFSET ( 0x0000036cU )
#define ANT_CSR_BFNE_INCR28_OFFSET ( 0x00000370U )
#define ANT_CSR_BFNE_INCR29_OFFSET ( 0x00000374U )
#define ANT_CSR_BFNE_INCR30_OFFSET ( 0x00000378U )
#define ANT_CSR_BFNE_INCR31_OFFSET ( 0x0000037cU )
#define ANT_CSR_BFNE_INCR32_OFFSET ( 0x00000380U )
#define ANT_CSR_BFNE_INCR33_OFFSET ( 0x00000384U )
#define ANT_CSR_BFNE_INCR34_OFFSET ( 0x00000388U )
#define ANT_CSR_BFNE_INCR35_OFFSET ( 0x0000038cU )
#define ANT_CSR_BFNE_INCR36_OFFSET ( 0x00000390U )
#define ANT_CSR_BFNE_INCR37_OFFSET ( 0x00000394U )
#define ANT_CSR_BFNE_INCR38_OFFSET ( 0x00000398U )
#define ANT_CSR_BFNE_INCR39_OFFSET ( 0x0000039cU )
#define ANT_CSR_BFNE_INCR40_OFFSET ( 0x000003a0U )
#define ANT_CSR_BFNE_INCR41_OFFSET ( 0x000003a4U )
#define ANT_CSR_BFNE_START0_OFFSET ( 0x00000400U )
#define ANT_CSR_BFNE_START1_OFFSET ( 0x00000404U )
#define ANT_CSR_BFNE_START2_OFFSET ( 0x00000408U )
#define ANT_CSR_BFNE_START3_OFFSET ( 0x0000040cU )
#define ANT_CSR_BFNE_START4_OFFSET ( 0x00000410U )
#define ANT_CSR_BFNE_START5_OFFSET ( 0x00000414U )
#define ANT_CSR_BFNE_START6_OFFSET ( 0x00000418U )
#define ANT_CSR_BFNE_START7_OFFSET ( 0x0000041cU )
#define ANT_CSR_BFNE_START8_OFFSET ( 0x00000420U )
#define ANT_CSR_BFNE_START9_OFFSET ( 0x00000424U )
#define ANT_CSR_BFNE_START10_OFFSET ( 0x00000428U )
#define ANT_CSR_BFNE_START11_OFFSET ( 0x0000042cU )
#define ANT_CSR_BFNE_START12_OFFSET ( 0x00000430U )
#define ANT_CSR_BFNE_START13_OFFSET ( 0x00000434U )
#define ANT_CSR_BFNE_START14_OFFSET ( 0x00000438U )
#define ANT_CSR_BFNE_START15_OFFSET ( 0x0000043cU )
#define ANT_CSR_BFNE_START16_OFFSET ( 0x00000440U )
#define ANT_CSR_BFNE_START17_OFFSET ( 0x00000444U )
#define ANT_CSR_BFNE_START18_OFFSET ( 0x00000448U )
#define ANT_CSR_BFNE_START19_OFFSET ( 0x0000044cU )
#define ANT_CSR_BFNE_START20_OFFSET ( 0x00000450U )
#define ANT_CSR_BFNE_START21_OFFSET ( 0x00000454U )
#define ANT_CSR_BFNE_START22_OFFSET ( 0x00000458U )
#define ANT_CSR_BFNE_START23_OFFSET ( 0x0000045cU )
#define ANT_CSR_BFNE_START24_OFFSET ( 0x00000460U )
#define ANT_CSR_BFNE_START25_OFFSET ( 0x00000464U )
#define ANT_CSR_BFNE_START26_OFFSET ( 0x00000468U )
#define ANT_CSR_BFNE_START27_OFFSET ( 0x0000046cU )
#define ANT_CSR_BFNE_START28_OFFSET ( 0x00000470U )
#define ANT_CSR_BFNE_START29_OFFSET ( 0x00000474U )
#define ANT_CSR_BFNE_START30_OFFSET ( 0x00000478U )
#define ANT_CSR_BFNE_START31_OFFSET ( 0x0000047cU )
#define ANT_CSR_BFNE_START32_OFFSET ( 0x00000480U )
#define ANT_CSR_BFNE_START33_OFFSET ( 0x00000484U )
#define ANT_CSR_BFNE_START34_OFFSET ( 0x00000488U )
#define ANT_CSR_BFNE_START35_OFFSET ( 0x0000048cU )
#define ANT_CSR_BFNE_START36_OFFSET ( 0x00000490U )
#define ANT_CSR_BFNE_START37_OFFSET ( 0x00000494U )
#define ANT_CSR_BFNE_START38_OFFSET ( 0x00000498U )
#define ANT_CSR_BFNE_START39_OFFSET ( 0x0000049cU )
#define ANT_CSR_BFNE_START40_OFFSET ( 0x000004a0U )
#define ANT_CSR_BFNE_START41_OFFSET ( 0x000004a4U )
#define ANT_CSR_BFNE_STAT0_OFFSET ( 0x00000500U )
#define ANT_CSR_BFNE_STAT1_OFFSET ( 0x00000504U )
#define ANT_CSR_BFNE_STAT2_OFFSET ( 0x00000508U )
#define ANT_CSR_BFNE_STAT3_OFFSET ( 0x0000050cU )
#define ANT_CSR_BFNE_STAT4_OFFSET ( 0x00000510U )
#define ANT_CSR_BFNE_STAT5_OFFSET ( 0x00000514U )
#define ANT_CSR_BFNE_STAT6_OFFSET ( 0x00000518U )
#define ANT_CSR_BFNE_STAT7_OFFSET ( 0x0000051cU )
#define ANT_CSR_BFNE_STAT8_OFFSET ( 0x00000520U )
#define ANT_CSR_BFNE_STAT9_OFFSET ( 0x00000524U )
#define ANT_CSR_BFNE_STAT10_OFFSET ( 0x00000528U )
#define ANT_CSR_BFNE_STAT11_OFFSET ( 0x0000052cU )
#define ANT_CSR_BFNE_STAT12_OFFSET ( 0x00000530U )
#define ANT_CSR_BFNE_STAT13_OFFSET ( 0x00000534U )
#define ANT_CSR_BFNE_STAT14_OFFSET ( 0x00000538U )
#define ANT_CSR_BFNE_STAT15_OFFSET ( 0x0000053cU )
#define ANT_CSR_BFNE_STAT16_OFFSET ( 0x00000540U )
#define ANT_CSR_BFNE_STAT17_OFFSET ( 0x00000544U )
#define ANT_CSR_BFNE_STAT18_OFFSET ( 0x00000548U )
#define ANT_CSR_BFNE_STAT19_OFFSET ( 0x0000054cU )
#define ANT_CSR_BFNE_STAT20_OFFSET ( 0x00000550U )
#define ANT_CSR_BFNE_STAT21_OFFSET ( 0x00000554U )
#define ANT_CSR_BFNE_STAT22_OFFSET ( 0x00000558U )
#define ANT_CSR_BFNE_STAT23_OFFSET ( 0x0000055cU )
#define ANT_CSR_BFNE_STAT24_OFFSET ( 0x00000560U )
#define ANT_CSR_BFNE_STAT25_OFFSET ( 0x00000564U )
#define ANT_CSR_BFNE_STAT26_OFFSET ( 0x00000568U )
#define ANT_CSR_BFNE_STAT27_OFFSET ( 0x0000056cU )
#define ANT_CSR_BFNE_STAT28_OFFSET ( 0x00000570U )
#define ANT_CSR_BFNE_STAT29_OFFSET ( 0x00000574U )
#define ANT_CSR_BFNE_STAT30_OFFSET ( 0x00000578U )
#define ANT_CSR_BFNE_STAT31_OFFSET ( 0x0000057cU )
#define ANT_CSR_BFNE_STAT32_OFFSET ( 0x00000580U )
#define ANT_CSR_BFNE_STAT33_OFFSET ( 0x00000584U )
#define ANT_CSR_BFNE_STAT34_OFFSET ( 0x00000588U )
#define ANT_CSR_BFNE_STAT35_OFFSET ( 0x0000058cU )
#define ANT_CSR_BFNE_STAT36_OFFSET ( 0x00000590U )
#define ANT_CSR_BFNE_STAT37_OFFSET ( 0x00000594U )
#define ANT_CSR_BFNE_STAT38_OFFSET ( 0x00000598U )
#define ANT_CSR_BFNE_STAT39_OFFSET ( 0x0000059cU )
#define ANT_CSR_BFNE_STAT40_OFFSET ( 0x000005a0U )
#define ANT_CSR_BFNE_STAT41_OFFSET ( 0x000005a4U )
#define ANT_CSR_ANT_BSG_STAT_OFFSET ( 0x00000600U )
#define ANT_CSR_CMFF_FIFO_STAT_OFFSET ( 0x00000604U )
#define ANT_CSR_RX_INTR_LO_STAT_OFFSET ( 0x00000608U )
#define ANT_CSR_RX_INTR_HI_STAT_OFFSET ( 0x0000060cU )
#define ANT_CSR_FB_INTR_LO_STAT_OFFSET ( 0x00000610U )
#define ANT_CSR_FB_INTR_HI_STAT_OFFSET ( 0x00000614U )
#define ANT_CSR_TX_INTR_LO_STAT_OFFSET ( 0x00000618U )
#define ANT_CSR_TX_INTR_HI_STAT_OFFSET ( 0x0000061cU )
#define ANT_CSR_ANT_DP_INIT_STAT_OFFSET ( 0x00000620U )
#define ANT_CSR_ANT_RX_ADC_START_BFN_OFFSET ( 0x00000624U )
#define ANT_CSR_ANT_FB_ADC_START_BFN_OFFSET ( 0x00000628U )
#define ANT_CSR_CCF_RX_INT_STAT_R_OFFSET ( 0x00000630U )
#define ANT_CSR_CCF_RX_INT_HIGH_R_OFFSET ( 0x00000634U )
#define ANT_CSR_CCF_RX_INT_LOW_R_OFFSET ( 0x00000638U )
#define ANT_CSR_CCF_RX_INT_CLR_R_OFFSET ( 0x0000063cU )
#define ANT_CSR_CCF_RX_INT_FORCE_R_OFFSET ( 0x00000640U )
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OFFSET ( 0x00000650U )
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OFFSET ( 0x00000654U )
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OFFSET ( 0x00000658U )
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OFFSET ( 0x0000065cU )
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OFFSET ( 0x00000660U )
#define ANT_CSR_CCF_TX_INT_STAT_R_OFFSET ( 0x00000670U )
#define ANT_CSR_CCF_TX_INT_HIGH_R_OFFSET ( 0x00000674U )
#define ANT_CSR_CCF_TX_INT_LOW_R_OFFSET ( 0x00000678U )
#define ANT_CSR_CCF_TX_INT_CLR_R_OFFSET ( 0x0000067cU )
#define ANT_CSR_CCF_TX_INT_FORCE_R_OFFSET ( 0x00000680U )
#define ANT_CSR_CCF_RX_OUT_STAT0_OFFSET ( 0x00000690U )
#define ANT_CSR_CCF_RX_OUT_STAT1_OFFSET ( 0x00000694U )
#define ANT_CSR_CCF_RX_OUT_STAT2_OFFSET ( 0x00000698U )
#define ANT_CSR_CCF_RX_OUT_STAT3_OFFSET ( 0x0000069cU )
#define ANT_CSR_CCF_RX_IN_STAT0_OFFSET ( 0x000006a0U )
#define ANT_CSR_CCF_RX_IN_STAT1_OFFSET ( 0x000006a4U )
#define ANT_CSR_CCF_RX_IN_STAT2_OFFSET ( 0x000006a8U )
#define ANT_CSR_CCF_RX_IN_STAT3_OFFSET ( 0x000006acU )
#define ANT_CSR_CCF_TX_IN_STAT0_OFFSET ( 0x000006b0U )
#define ANT_CSR_CCF_TX_IN_STAT1_OFFSET ( 0x000006b4U )
#define ANT_CSR_CCF_TX_IN_STAT2_OFFSET ( 0x000006b8U )
#define ANT_CSR_CCF_TX_IN_STAT3_OFFSET ( 0x000006bcU )
#define ANT_CSR_CCF_FB_RX_OUT_STAT_OFFSET ( 0x000006c0U )
#define ANT_CSR_CCF_FB_RX_IN_STAT_OFFSET ( 0x000006c4U )
#define ANT_CSR_CCF_DCSRC_IN_STAT_OFFSET ( 0x000006c8U )
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_OFFSET ( 0x000006ccU )
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_OFFSET ( 0x000006d0U )
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_OFFSET ( 0x000006d4U )
#define ANT_CSR_APB_BRDG_STAT_OFFSET ( 0x000006d8U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define ANT_CSR_SCRATCH_ADR(_BASE)      (( ( _BASE ) + ( ANT_CSR_SCRATCH_OFFSET ) ))
#define ANT_CSR_ASC_ANT_RATE_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ASC_ANT_RATE_OFFSET ) ))
#define ANT_CSR_ASC_XT_BYP_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ASC_XT_BYP_OFFSET ) ))
#define ANT_CSR_FB_ASC_ANT_RATE_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_FB_ASC_ANT_RATE_OFFSET ) ))
#define ANT_CSR_ANT_DCSRC_CONF0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_DCSRC_CONF0_OFFSET ) ))
#define ANT_CSR_ANT_DCSRC_CONF1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_DCSRC_CONF1_OFFSET ) ))
#define ANT_CSR_ANT_DPATH_CONF_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_DPATH_CONF_OFFSET ) ))
#define ANT_CSR_ANT_BSG_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_BSG_CFG_OFFSET ) ))
#define ANT_CSR_ANT_BSG_DC_VAL_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_BSG_DC_VAL_OFFSET ) ))
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CAPT_TMUX_CTRL_OFFSET ) ))
#define ANT_CSR_ANT_CCF_INIT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CCF_INIT_OFFSET ) ))
#define ANT_CSR_ANT_DP_INIT_ADR(_BASE)  (( ( _BASE ) + ( ANT_CSR_ANT_DP_INIT_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ0_CFG0_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ0_CFG1_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ0_CFG2_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ0_CFG3_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ1_CFG0_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ1_CFG1_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ1_CFG2_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_SEQ1_CFG3_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_PAUSE_CFG0_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_PAUSE_CFG1_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_PAUSE_CFG2_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_PAUSE_CFG3_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_RESUME_CFG0_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_RESUME_CFG1_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_RESUME_CFG2_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_RESUME_CFG3_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ0_CFG0_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ0_CFG1_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ0_CFG2_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ0_CFG3_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ1_CFG0_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ1_CFG1_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ1_CFG2_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_SEQ1_CFG3_OFFSET ) ))
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_FB_EN_SEQ0_CFG_OFFSET ) ))
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_FB_EN_SEQ1_CFG_OFFSET ) ))
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_FB_EN_PAUSE_CFG_OFFSET ) ))
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_FB_EN_RESUME_CFG_OFFSET ) ))
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CCF_RX_OUT_CFG_OFFSET ) ))
#define ANT_CSR_ANT_CCF_RX_IN_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CCF_RX_IN_CFG_OFFSET ) ))
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_OFFSET ) ))
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CCF_FB_RX_IN_CFG_OFFSET ) ))
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_CCF_DCSRC_IN_CFG_OFFSET ) ))
#define ANT_CSR_CMFF_CFG_ADR(_BASE)  (( ( _BASE ) + ( ANT_CSR_CMFF_CFG_OFFSET ) ))
#define ANT_CSR_CMFF_CTRL_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CMFF_CTRL_OFFSET ) ))
#define ANT_CSR_ANT_BSG_DC_INCR_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_BSG_DC_INCR_OFFSET ) ))
#define ANT_CSR_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_CTRL_OFFSET ) ))
#define ANT_CSR_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_LCNT_INC_OFFSET ) ))
#define ANT_CSR_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define ANT_CSR_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_INC_PRE_OFFSET ) ))
#define ANT_CSR_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_CNT_ADJ_OFFSET ) ))
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define ANT_CSR_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ISYNC_BFN_CNT_OFFSET ) ))
#define ANT_CSR_BFNE_CFG0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG0_OFFSET ) ))
#define ANT_CSR_BFNE_CFG1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG1_OFFSET ) ))
#define ANT_CSR_BFNE_CFG2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG2_OFFSET ) ))
#define ANT_CSR_BFNE_CFG3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG3_OFFSET ) ))
#define ANT_CSR_BFNE_CFG4_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG4_OFFSET ) ))
#define ANT_CSR_BFNE_CFG5_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG5_OFFSET ) ))
#define ANT_CSR_BFNE_CFG6_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG6_OFFSET ) ))
#define ANT_CSR_BFNE_CFG7_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG7_OFFSET ) ))
#define ANT_CSR_BFNE_CFG8_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG8_OFFSET ) ))
#define ANT_CSR_BFNE_CFG9_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG9_OFFSET ) ))
#define ANT_CSR_BFNE_CFG10_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG10_OFFSET ) ))
#define ANT_CSR_BFNE_CFG11_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG11_OFFSET ) ))
#define ANT_CSR_BFNE_CFG12_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG12_OFFSET ) ))
#define ANT_CSR_BFNE_CFG13_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG13_OFFSET ) ))
#define ANT_CSR_BFNE_CFG14_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG14_OFFSET ) ))
#define ANT_CSR_BFNE_CFG15_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG15_OFFSET ) ))
#define ANT_CSR_BFNE_CFG16_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG16_OFFSET ) ))
#define ANT_CSR_BFNE_CFG17_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG17_OFFSET ) ))
#define ANT_CSR_BFNE_CFG18_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG18_OFFSET ) ))
#define ANT_CSR_BFNE_CFG19_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG19_OFFSET ) ))
#define ANT_CSR_BFNE_CFG20_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG20_OFFSET ) ))
#define ANT_CSR_BFNE_CFG21_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG21_OFFSET ) ))
#define ANT_CSR_BFNE_CFG22_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG22_OFFSET ) ))
#define ANT_CSR_BFNE_CFG23_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG23_OFFSET ) ))
#define ANT_CSR_BFNE_CFG24_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG24_OFFSET ) ))
#define ANT_CSR_BFNE_CFG25_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG25_OFFSET ) ))
#define ANT_CSR_BFNE_CFG26_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG26_OFFSET ) ))
#define ANT_CSR_BFNE_CFG27_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG27_OFFSET ) ))
#define ANT_CSR_BFNE_CFG28_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG28_OFFSET ) ))
#define ANT_CSR_BFNE_CFG29_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG29_OFFSET ) ))
#define ANT_CSR_BFNE_CFG30_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG30_OFFSET ) ))
#define ANT_CSR_BFNE_CFG31_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG31_OFFSET ) ))
#define ANT_CSR_BFNE_CFG32_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG32_OFFSET ) ))
#define ANT_CSR_BFNE_CFG33_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG33_OFFSET ) ))
#define ANT_CSR_BFNE_CFG34_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG34_OFFSET ) ))
#define ANT_CSR_BFNE_CFG35_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG35_OFFSET ) ))
#define ANT_CSR_BFNE_CFG36_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG36_OFFSET ) ))
#define ANT_CSR_BFNE_CFG37_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG37_OFFSET ) ))
#define ANT_CSR_BFNE_CFG38_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG38_OFFSET ) ))
#define ANT_CSR_BFNE_CFG39_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG39_OFFSET ) ))
#define ANT_CSR_BFNE_CFG40_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG40_OFFSET ) ))
#define ANT_CSR_BFNE_CFG41_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_CFG41_OFFSET ) ))
#define ANT_CSR_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR0_OFFSET ) ))
#define ANT_CSR_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR1_OFFSET ) ))
#define ANT_CSR_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR2_OFFSET ) ))
#define ANT_CSR_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR3_OFFSET ) ))
#define ANT_CSR_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR4_OFFSET ) ))
#define ANT_CSR_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR5_OFFSET ) ))
#define ANT_CSR_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR6_OFFSET ) ))
#define ANT_CSR_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR7_OFFSET ) ))
#define ANT_CSR_BFNE_INCR8_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR8_OFFSET ) ))
#define ANT_CSR_BFNE_INCR9_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR9_OFFSET ) ))
#define ANT_CSR_BFNE_INCR10_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR10_OFFSET ) ))
#define ANT_CSR_BFNE_INCR11_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR11_OFFSET ) ))
#define ANT_CSR_BFNE_INCR12_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR12_OFFSET ) ))
#define ANT_CSR_BFNE_INCR13_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR13_OFFSET ) ))
#define ANT_CSR_BFNE_INCR14_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR14_OFFSET ) ))
#define ANT_CSR_BFNE_INCR15_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR15_OFFSET ) ))
#define ANT_CSR_BFNE_INCR16_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR16_OFFSET ) ))
#define ANT_CSR_BFNE_INCR17_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR17_OFFSET ) ))
#define ANT_CSR_BFNE_INCR18_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR18_OFFSET ) ))
#define ANT_CSR_BFNE_INCR19_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR19_OFFSET ) ))
#define ANT_CSR_BFNE_INCR20_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR20_OFFSET ) ))
#define ANT_CSR_BFNE_INCR21_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR21_OFFSET ) ))
#define ANT_CSR_BFNE_INCR22_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR22_OFFSET ) ))
#define ANT_CSR_BFNE_INCR23_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR23_OFFSET ) ))
#define ANT_CSR_BFNE_INCR24_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR24_OFFSET ) ))
#define ANT_CSR_BFNE_INCR25_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR25_OFFSET ) ))
#define ANT_CSR_BFNE_INCR26_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR26_OFFSET ) ))
#define ANT_CSR_BFNE_INCR27_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR27_OFFSET ) ))
#define ANT_CSR_BFNE_INCR28_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR28_OFFSET ) ))
#define ANT_CSR_BFNE_INCR29_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR29_OFFSET ) ))
#define ANT_CSR_BFNE_INCR30_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR30_OFFSET ) ))
#define ANT_CSR_BFNE_INCR31_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR31_OFFSET ) ))
#define ANT_CSR_BFNE_INCR32_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR32_OFFSET ) ))
#define ANT_CSR_BFNE_INCR33_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR33_OFFSET ) ))
#define ANT_CSR_BFNE_INCR34_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR34_OFFSET ) ))
#define ANT_CSR_BFNE_INCR35_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR35_OFFSET ) ))
#define ANT_CSR_BFNE_INCR36_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR36_OFFSET ) ))
#define ANT_CSR_BFNE_INCR37_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR37_OFFSET ) ))
#define ANT_CSR_BFNE_INCR38_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR38_OFFSET ) ))
#define ANT_CSR_BFNE_INCR39_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR39_OFFSET ) ))
#define ANT_CSR_BFNE_INCR40_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR40_OFFSET ) ))
#define ANT_CSR_BFNE_INCR41_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_INCR41_OFFSET ) ))
#define ANT_CSR_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START0_OFFSET ) ))
#define ANT_CSR_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START1_OFFSET ) ))
#define ANT_CSR_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START2_OFFSET ) ))
#define ANT_CSR_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START3_OFFSET ) ))
#define ANT_CSR_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START4_OFFSET ) ))
#define ANT_CSR_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START5_OFFSET ) ))
#define ANT_CSR_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START6_OFFSET ) ))
#define ANT_CSR_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START7_OFFSET ) ))
#define ANT_CSR_BFNE_START8_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START8_OFFSET ) ))
#define ANT_CSR_BFNE_START9_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START9_OFFSET ) ))
#define ANT_CSR_BFNE_START10_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START10_OFFSET ) ))
#define ANT_CSR_BFNE_START11_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START11_OFFSET ) ))
#define ANT_CSR_BFNE_START12_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START12_OFFSET ) ))
#define ANT_CSR_BFNE_START13_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START13_OFFSET ) ))
#define ANT_CSR_BFNE_START14_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START14_OFFSET ) ))
#define ANT_CSR_BFNE_START15_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START15_OFFSET ) ))
#define ANT_CSR_BFNE_START16_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START16_OFFSET ) ))
#define ANT_CSR_BFNE_START17_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START17_OFFSET ) ))
#define ANT_CSR_BFNE_START18_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START18_OFFSET ) ))
#define ANT_CSR_BFNE_START19_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START19_OFFSET ) ))
#define ANT_CSR_BFNE_START20_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START20_OFFSET ) ))
#define ANT_CSR_BFNE_START21_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START21_OFFSET ) ))
#define ANT_CSR_BFNE_START22_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START22_OFFSET ) ))
#define ANT_CSR_BFNE_START23_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START23_OFFSET ) ))
#define ANT_CSR_BFNE_START24_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START24_OFFSET ) ))
#define ANT_CSR_BFNE_START25_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START25_OFFSET ) ))
#define ANT_CSR_BFNE_START26_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START26_OFFSET ) ))
#define ANT_CSR_BFNE_START27_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START27_OFFSET ) ))
#define ANT_CSR_BFNE_START28_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START28_OFFSET ) ))
#define ANT_CSR_BFNE_START29_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START29_OFFSET ) ))
#define ANT_CSR_BFNE_START30_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START30_OFFSET ) ))
#define ANT_CSR_BFNE_START31_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START31_OFFSET ) ))
#define ANT_CSR_BFNE_START32_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START32_OFFSET ) ))
#define ANT_CSR_BFNE_START33_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START33_OFFSET ) ))
#define ANT_CSR_BFNE_START34_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START34_OFFSET ) ))
#define ANT_CSR_BFNE_START35_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START35_OFFSET ) ))
#define ANT_CSR_BFNE_START36_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START36_OFFSET ) ))
#define ANT_CSR_BFNE_START37_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START37_OFFSET ) ))
#define ANT_CSR_BFNE_START38_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START38_OFFSET ) ))
#define ANT_CSR_BFNE_START39_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START39_OFFSET ) ))
#define ANT_CSR_BFNE_START40_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START40_OFFSET ) ))
#define ANT_CSR_BFNE_START41_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_START41_OFFSET ) ))
#define ANT_CSR_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT0_OFFSET ) ))
#define ANT_CSR_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT1_OFFSET ) ))
#define ANT_CSR_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT2_OFFSET ) ))
#define ANT_CSR_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT3_OFFSET ) ))
#define ANT_CSR_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT4_OFFSET ) ))
#define ANT_CSR_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT5_OFFSET ) ))
#define ANT_CSR_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT6_OFFSET ) ))
#define ANT_CSR_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT7_OFFSET ) ))
#define ANT_CSR_BFNE_STAT8_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT8_OFFSET ) ))
#define ANT_CSR_BFNE_STAT9_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT9_OFFSET ) ))
#define ANT_CSR_BFNE_STAT10_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT10_OFFSET ) ))
#define ANT_CSR_BFNE_STAT11_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT11_OFFSET ) ))
#define ANT_CSR_BFNE_STAT12_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT12_OFFSET ) ))
#define ANT_CSR_BFNE_STAT13_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT13_OFFSET ) ))
#define ANT_CSR_BFNE_STAT14_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT14_OFFSET ) ))
#define ANT_CSR_BFNE_STAT15_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT15_OFFSET ) ))
#define ANT_CSR_BFNE_STAT16_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT16_OFFSET ) ))
#define ANT_CSR_BFNE_STAT17_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT17_OFFSET ) ))
#define ANT_CSR_BFNE_STAT18_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT18_OFFSET ) ))
#define ANT_CSR_BFNE_STAT19_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT19_OFFSET ) ))
#define ANT_CSR_BFNE_STAT20_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT20_OFFSET ) ))
#define ANT_CSR_BFNE_STAT21_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT21_OFFSET ) ))
#define ANT_CSR_BFNE_STAT22_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT22_OFFSET ) ))
#define ANT_CSR_BFNE_STAT23_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT23_OFFSET ) ))
#define ANT_CSR_BFNE_STAT24_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT24_OFFSET ) ))
#define ANT_CSR_BFNE_STAT25_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT25_OFFSET ) ))
#define ANT_CSR_BFNE_STAT26_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT26_OFFSET ) ))
#define ANT_CSR_BFNE_STAT27_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT27_OFFSET ) ))
#define ANT_CSR_BFNE_STAT28_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT28_OFFSET ) ))
#define ANT_CSR_BFNE_STAT29_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT29_OFFSET ) ))
#define ANT_CSR_BFNE_STAT30_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT30_OFFSET ) ))
#define ANT_CSR_BFNE_STAT31_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT31_OFFSET ) ))
#define ANT_CSR_BFNE_STAT32_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT32_OFFSET ) ))
#define ANT_CSR_BFNE_STAT33_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT33_OFFSET ) ))
#define ANT_CSR_BFNE_STAT34_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT34_OFFSET ) ))
#define ANT_CSR_BFNE_STAT35_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT35_OFFSET ) ))
#define ANT_CSR_BFNE_STAT36_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT36_OFFSET ) ))
#define ANT_CSR_BFNE_STAT37_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT37_OFFSET ) ))
#define ANT_CSR_BFNE_STAT38_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT38_OFFSET ) ))
#define ANT_CSR_BFNE_STAT39_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT39_OFFSET ) ))
#define ANT_CSR_BFNE_STAT40_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT40_OFFSET ) ))
#define ANT_CSR_BFNE_STAT41_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_BFNE_STAT41_OFFSET ) ))
#define ANT_CSR_ANT_BSG_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_BSG_STAT_OFFSET ) ))
#define ANT_CSR_CMFF_FIFO_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CMFF_FIFO_STAT_OFFSET ) ))
#define ANT_CSR_RX_INTR_LO_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_RX_INTR_LO_STAT_OFFSET ) ))
#define ANT_CSR_RX_INTR_HI_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_RX_INTR_HI_STAT_OFFSET ) ))
#define ANT_CSR_FB_INTR_LO_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_FB_INTR_LO_STAT_OFFSET ) ))
#define ANT_CSR_FB_INTR_HI_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_FB_INTR_HI_STAT_OFFSET ) ))
#define ANT_CSR_TX_INTR_LO_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_TX_INTR_LO_STAT_OFFSET ) ))
#define ANT_CSR_TX_INTR_HI_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_TX_INTR_HI_STAT_OFFSET ) ))
#define ANT_CSR_ANT_DP_INIT_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_DP_INIT_STAT_OFFSET ) ))
#define ANT_CSR_ANT_RX_ADC_START_BFN_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_ADC_START_BFN_OFFSET ) ))
#define ANT_CSR_ANT_FB_ADC_START_BFN_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_FB_ADC_START_BFN_OFFSET ) ))
#define ANT_CSR_CCF_RX_INT_STAT_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_INT_STAT_R_OFFSET ) ))
#define ANT_CSR_CCF_RX_INT_HIGH_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_INT_HIGH_R_OFFSET ) ))
#define ANT_CSR_CCF_RX_INT_LOW_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_INT_LOW_R_OFFSET ) ))
#define ANT_CSR_CCF_RX_INT_CLR_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_INT_CLR_R_OFFSET ) ))
#define ANT_CSR_CCF_RX_INT_FORCE_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_INT_FORCE_R_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_INT_STAT_R_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_INT_HIGH_R_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_INT_LOW_R_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_INT_CLR_R_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_INT_FORCE_R_OFFSET ) ))
#define ANT_CSR_CCF_TX_INT_STAT_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_INT_STAT_R_OFFSET ) ))
#define ANT_CSR_CCF_TX_INT_HIGH_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_INT_HIGH_R_OFFSET ) ))
#define ANT_CSR_CCF_TX_INT_LOW_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_INT_LOW_R_OFFSET ) ))
#define ANT_CSR_CCF_TX_INT_CLR_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_INT_CLR_R_OFFSET ) ))
#define ANT_CSR_CCF_TX_INT_FORCE_R_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_INT_FORCE_R_OFFSET ) ))
#define ANT_CSR_CCF_RX_OUT_STAT0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_OUT_STAT0_OFFSET ) ))
#define ANT_CSR_CCF_RX_OUT_STAT1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_OUT_STAT1_OFFSET ) ))
#define ANT_CSR_CCF_RX_OUT_STAT2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_OUT_STAT2_OFFSET ) ))
#define ANT_CSR_CCF_RX_OUT_STAT3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_OUT_STAT3_OFFSET ) ))
#define ANT_CSR_CCF_RX_IN_STAT0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_IN_STAT0_OFFSET ) ))
#define ANT_CSR_CCF_RX_IN_STAT1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_IN_STAT1_OFFSET ) ))
#define ANT_CSR_CCF_RX_IN_STAT2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_IN_STAT2_OFFSET ) ))
#define ANT_CSR_CCF_RX_IN_STAT3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_RX_IN_STAT3_OFFSET ) ))
#define ANT_CSR_CCF_TX_IN_STAT0_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_IN_STAT0_OFFSET ) ))
#define ANT_CSR_CCF_TX_IN_STAT1_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_IN_STAT1_OFFSET ) ))
#define ANT_CSR_CCF_TX_IN_STAT2_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_IN_STAT2_OFFSET ) ))
#define ANT_CSR_CCF_TX_IN_STAT3_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_TX_IN_STAT3_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_OUT_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_OUT_STAT_OFFSET ) ))
#define ANT_CSR_CCF_FB_RX_IN_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_FB_RX_IN_STAT_OFFSET ) ))
#define ANT_CSR_CCF_DCSRC_IN_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_CCF_DCSRC_IN_STAT_OFFSET ) ))
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_RX_EN_EVENT_STAT_OFFSET ) ))
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_TX_EN_EVENT_STAT_OFFSET ) ))
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_ANT_FB_EN_EVENT_STAT_OFFSET ) ))
#define ANT_CSR_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( ANT_CSR_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief ANT_CSR_MAP_REG_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/SCRATCH
  * ANT_CSR Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCH : 32;
    ///< Scratch register for software to use.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_scratch_reg_t;

#define ANT_CSR_SCRATCH_DEFAULT (0x00000000U)
#define ANT_CSR_SCRATCH_RD_MASK (0xffffffffU)
#define ANT_CSR_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch register for software to use.
#define ANT_CSR_SCRATCH_BF_OFF ( 0)
#define ANT_CSR_SCRATCH_BF_WID (32)
#define ANT_CSR_SCRATCH_BF_MSK (0xFFFFFFFF)
#define ANT_CSR_SCRATCH_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ASC_ANT_RATE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/asc_ant_rate
  * ASC_ANT_RATE Register
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< Software selects data rates.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ALT_SEQ : 1;
    ///< Selects alternate 8/12Gsps (linear) pattern
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_asc_ant_rate_reg_t;

#define ANT_CSR_ASC_ANT_RATE_DEFAULT (0x00000000U)
#define ANT_CSR_ASC_ANT_RATE_RD_MASK (0x0000000fU)
#define ANT_CSR_ASC_ANT_RATE_WR_MASK (0x0000000fU)


///< Software selects data rates.
#define ANT_CSR_ASC_ANT_RATE_ANT_RATE_BF_OFF ( 0)
#define ANT_CSR_ASC_ANT_RATE_ANT_RATE_BF_WID ( 3)
#define ANT_CSR_ASC_ANT_RATE_ANT_RATE_BF_MSK (0x00000007)
#define ANT_CSR_ASC_ANT_RATE_ANT_RATE_BF_DEF (0x00000000)

///< Selects alternate 8/12Gsps (linear) pattern
#define ANT_CSR_ASC_ANT_RATE_ALT_SEQ_BF_OFF ( 3)
#define ANT_CSR_ASC_ANT_RATE_ALT_SEQ_BF_WID ( 1)
#define ANT_CSR_ASC_ANT_RATE_ALT_SEQ_BF_MSK (0x00000008)
#define ANT_CSR_ASC_ANT_RATE_ALT_SEQ_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ASC_XT_BYPASS register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/asc_xt_bypass
  * ASC XT-BYPASS
  */

typedef union {
  struct {
    uint32_t ASC0_XT_BYPASS : 1;
    ///< ASC0's-XT_BYPASS Signal.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ASC1_XT_BYPASS : 1;
    ///< ASC1's-XT_BYPASS Signal.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ASC2_XT_BYPASS : 1;
    ///< ASC2's-XT_BYPASS Signal.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ASC3_XT_BYPASS : 1;
    ///< ASC3's-XT_BYPASS Signal.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t FB_ASC_XT_BYPASS : 1;
    ///< FB_ASC's-XT_BYPASS Signal.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_asc_xt_byp_reg_t;

#define ANT_CSR_ASC_XT_BYP_DEFAULT (0x00000000U)
#define ANT_CSR_ASC_XT_BYP_RD_MASK (0x0000001fU)
#define ANT_CSR_ASC_XT_BYP_WR_MASK (0x0000001fU)


///< ASC0's-XT_BYPASS Signal.
#define ANT_CSR_ASC_XT_BYP_ASC0_XT_BYP_BF_OFF ( 0)
#define ANT_CSR_ASC_XT_BYP_ASC0_XT_BYP_BF_WID ( 1)
#define ANT_CSR_ASC_XT_BYP_ASC0_XT_BYP_BF_MSK (0x00000001)
#define ANT_CSR_ASC_XT_BYP_ASC0_XT_BYP_BF_DEF (0x00000000)

///< ASC1's-XT_BYPASS Signal.
#define ANT_CSR_ASC_XT_BYP_ASC1_XT_BYP_BF_OFF ( 1)
#define ANT_CSR_ASC_XT_BYP_ASC1_XT_BYP_BF_WID ( 1)
#define ANT_CSR_ASC_XT_BYP_ASC1_XT_BYP_BF_MSK (0x00000002)
#define ANT_CSR_ASC_XT_BYP_ASC1_XT_BYP_BF_DEF (0x00000000)

///< ASC2's-XT_BYPASS Signal.
#define ANT_CSR_ASC_XT_BYP_ASC2_XT_BYP_BF_OFF ( 2)
#define ANT_CSR_ASC_XT_BYP_ASC2_XT_BYP_BF_WID ( 1)
#define ANT_CSR_ASC_XT_BYP_ASC2_XT_BYP_BF_MSK (0x00000004)
#define ANT_CSR_ASC_XT_BYP_ASC2_XT_BYP_BF_DEF (0x00000000)

///< ASC3's-XT_BYPASS Signal.
#define ANT_CSR_ASC_XT_BYP_ASC3_XT_BYP_BF_OFF ( 3)
#define ANT_CSR_ASC_XT_BYP_ASC3_XT_BYP_BF_WID ( 1)
#define ANT_CSR_ASC_XT_BYP_ASC3_XT_BYP_BF_MSK (0x00000008)
#define ANT_CSR_ASC_XT_BYP_ASC3_XT_BYP_BF_DEF (0x00000000)

///< FB_ASC's-XT_BYPASS Signal.
#define ANT_CSR_ASC_XT_BYP_FB_ASC_XT_BYP_BF_OFF ( 4)
#define ANT_CSR_ASC_XT_BYP_FB_ASC_XT_BYP_BF_WID ( 1)
#define ANT_CSR_ASC_XT_BYP_FB_ASC_XT_BYP_BF_MSK (0x00000010)
#define ANT_CSR_ASC_XT_BYP_FB_ASC_XT_BYP_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_FB_ASC_ANT_RATE register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/fb_asc_ant_rate
  * ASC_ANT_RATE Register
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< Software selects data rates.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ALT_SEQ : 1;
    ///< Selects alternate 8/12Gsps (linear) pattern
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_fb_asc_ant_rate_reg_t;

#define ANT_CSR_FB_ASC_ANT_RATE_DEFAULT (0x00000000U)
#define ANT_CSR_FB_ASC_ANT_RATE_RD_MASK (0x0000000fU)
#define ANT_CSR_FB_ASC_ANT_RATE_WR_MASK (0x0000000fU)


///< Software selects data rates.
#define ANT_CSR_FB_ASC_ANT_RATE_ANT_RATE_BF_OFF ( 0)
#define ANT_CSR_FB_ASC_ANT_RATE_ANT_RATE_BF_WID ( 3)
#define ANT_CSR_FB_ASC_ANT_RATE_ANT_RATE_BF_MSK (0x00000007)
#define ANT_CSR_FB_ASC_ANT_RATE_ANT_RATE_BF_DEF (0x00000000)

///< Selects alternate 8/12Gsps (linear) pattern
#define ANT_CSR_FB_ASC_ANT_RATE_ALT_SEQ_BF_OFF ( 3)
#define ANT_CSR_FB_ASC_ANT_RATE_ALT_SEQ_BF_WID ( 1)
#define ANT_CSR_FB_ASC_ANT_RATE_ALT_SEQ_BF_MSK (0x00000008)
#define ANT_CSR_FB_ASC_ANT_RATE_ALT_SEQ_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_DCSRC_CONF0 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_dcsrc_conf0
  * DCSRC control
  */

typedef union {
  struct {
    uint32_t LOW_PWR : 1;
    ///< 0 ~ Opamp in active  mode 1 ~ Opamp in low power (stand-by mode)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t PROG_BIAS : 2;
    ///< 0 ~ 25uA 1 ~ 20uA (default) 2 ~ 15uA 3 ~ 11uA
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t SEL_BW : 3;
    ///< 0 ~ 12MHz 1 ~ 10MHz (default) 3 ~ 7.5MHz 7 ~ 5MHz
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t AUX_IN : 1;
    ///< 0 ~ Normal operation, input coming from the RDAC 1 ~ Input from external
    ///< Aux port (filter_bypass must be set to 0)
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SHORT_OUT : 1;
    ///< 0 ~ Normal operation 1 ~ Filter outputs both shorted to vcm voltage
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t SWAP_OUT : 1;
    ///< 0 ~ Normal operation 1 ~ Filter outputs p and n swapped
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t FILTER_BYPASS : 1;
    ///< 0 ~ Normal operation 1 ~ Input from external Aux port directly connected
    ///< to the output bypassing the filter
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t CHOP_CNT : 7;
    ///< Chop frequency mean(fchop) = fclk/2*1/(chop_cnt + 2 + (2^chop_mask-1)/2)
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t CHOP_MASK : 3;
    ///< Chop frequency mean(fchop) = fclk/2*1/(chop_cnt + 2 + (2^chop_mask-1)/2)
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t CHOP_RESTN : 1;
    ///< 0 ~ chop clk generator in reset 1 ~ chop clk generator active
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t CHOP_CLK_EN : 1;
    ///< 0 ~ chop clk disabled 1 ~ chop clk enabled
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t INV_CLK_SYNC : 1;
    ///< 0 ~ Normal polarity of the clk going to the digital 1 ~ Inverted polarity
    ///< of the clk going to the digital
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t DATA_RST : 1;
    ///< 0 ~ Data sync active 1 ~ Data sync in reset (middle code, RDAC output
    ///< current is zero)
    ///< AccessType="RW/V" BitOffset="23" ResetValue="0x0"
    uint32_t DATA_EN : 1;
    ///< 0 ~ Data sync disabled (no clk and flip-flops are disabled) 1 ~ Data
    ///< sync enabled
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t RESERVED : 7;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="25" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_dcsrc_conf0_reg_t;

#define ANT_CSR_ANT_DCSRC_CONF0_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_DCSRC_CONF0_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_DCSRC_CONF0_WR_MASK (0xffffffffU)


///< 0 ~ Opamp in active  mode 1 ~ Opamp in low power (stand-by mode)
#define ANT_CSR_ANT_DCSRC_CONF0_LOW_PWR_BF_OFF ( 0)
#define ANT_CSR_ANT_DCSRC_CONF0_LOW_PWR_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_LOW_PWR_BF_MSK (0x00000001)
#define ANT_CSR_ANT_DCSRC_CONF0_LOW_PWR_BF_DEF (0x00000000)

///< 0 ~ 25uA 1 ~ 20uA (default) 2 ~ 15uA 3 ~ 11uA
#define ANT_CSR_ANT_DCSRC_CONF0_PROG_BIAS_BF_OFF ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_PROG_BIAS_BF_WID ( 2)
#define ANT_CSR_ANT_DCSRC_CONF0_PROG_BIAS_BF_MSK (0x00000006)
#define ANT_CSR_ANT_DCSRC_CONF0_PROG_BIAS_BF_DEF (0x00000000)

///< 0 ~ 12MHz 1 ~ 10MHz (default) 3 ~ 7.5MHz 7 ~ 5MHz
#define ANT_CSR_ANT_DCSRC_CONF0_SEL_BW_BF_OFF ( 3)
#define ANT_CSR_ANT_DCSRC_CONF0_SEL_BW_BF_WID ( 3)
#define ANT_CSR_ANT_DCSRC_CONF0_SEL_BW_BF_MSK (0x00000038)
#define ANT_CSR_ANT_DCSRC_CONF0_SEL_BW_BF_DEF (0x00000000)

///< 0 ~ Normal operation, input coming from the RDAC 1 ~ Input from external
///< Aux port (filter_bypass must be set to 0)
#define ANT_CSR_ANT_DCSRC_CONF0_AUX_IN_BF_OFF ( 6)
#define ANT_CSR_ANT_DCSRC_CONF0_AUX_IN_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_AUX_IN_BF_MSK (0x00000040)
#define ANT_CSR_ANT_DCSRC_CONF0_AUX_IN_BF_DEF (0x00000000)

///< 0 ~ Normal operation 1 ~ Filter outputs both shorted to vcm voltage
#define ANT_CSR_ANT_DCSRC_CONF0_SHORT_OUT_BF_OFF ( 7)
#define ANT_CSR_ANT_DCSRC_CONF0_SHORT_OUT_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_SHORT_OUT_BF_MSK (0x00000080)
#define ANT_CSR_ANT_DCSRC_CONF0_SHORT_OUT_BF_DEF (0x00000000)

///< 0 ~ Normal operation 1 ~ Filter outputs p and n swapped
#define ANT_CSR_ANT_DCSRC_CONF0_SWAP_OUT_BF_OFF ( 8)
#define ANT_CSR_ANT_DCSRC_CONF0_SWAP_OUT_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_SWAP_OUT_BF_MSK (0x00000100)
#define ANT_CSR_ANT_DCSRC_CONF0_SWAP_OUT_BF_DEF (0x00000000)

///< 0 ~ Normal operation 1 ~ Input from external Aux port directly connected
///< to the output bypassing the filter
#define ANT_CSR_ANT_DCSRC_CONF0_FILTER_BYP_BF_OFF ( 9)
#define ANT_CSR_ANT_DCSRC_CONF0_FILTER_BYP_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_FILTER_BYP_BF_MSK (0x00000200)
#define ANT_CSR_ANT_DCSRC_CONF0_FILTER_BYP_BF_DEF (0x00000000)

///< Chop frequency mean(fchop) = fclk/2*1/(chop_cnt + 2 + (2^chop_mask-1)/2)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CNT_BF_OFF (10)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CNT_BF_WID ( 7)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CNT_BF_MSK (0x0001FC00)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CNT_BF_DEF (0x00000000)

///< Chop frequency mean(fchop) = fclk/2*1/(chop_cnt + 2 + (2^chop_mask-1)/2)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_MASK_BF_OFF (17)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_MASK_BF_WID ( 3)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_MASK_BF_MSK (0x000E0000)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_MASK_BF_DEF (0x00000000)

///< 0 ~ chop clk generator in reset 1 ~ chop clk generator active
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_RESTN_BF_OFF (20)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_RESTN_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_RESTN_BF_MSK (0x00100000)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_RESTN_BF_DEF (0x00000000)

///< 0 ~ chop clk disabled 1 ~ chop clk enabled
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CLK_EN_BF_OFF (21)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CLK_EN_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CLK_EN_BF_MSK (0x00200000)
#define ANT_CSR_ANT_DCSRC_CONF0_CHOP_CLK_EN_BF_DEF (0x00000000)

///< 0 ~ Normal polarity of the clk going to the digital 1 ~ Inverted polarity
///< of the clk going to the digital
#define ANT_CSR_ANT_DCSRC_CONF0_INV_CLK_SYNC_BF_OFF (22)
#define ANT_CSR_ANT_DCSRC_CONF0_INV_CLK_SYNC_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_INV_CLK_SYNC_BF_MSK (0x00400000)
#define ANT_CSR_ANT_DCSRC_CONF0_INV_CLK_SYNC_BF_DEF (0x00000000)

///< 0 ~ Data sync active 1 ~ Data sync in reset (middle code, RDAC output
///< current is zero)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_RST_BF_OFF (23)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_RST_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_RST_BF_MSK (0x00800000)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_RST_BF_DEF (0x00000000)

///< 0 ~ Data sync disabled (no clk and flip-flops are disabled) 1 ~ Data
///< sync enabled
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_EN_BF_OFF (24)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_EN_BF_WID ( 1)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_EN_BF_MSK (0x01000000)
#define ANT_CSR_ANT_DCSRC_CONF0_DATA_EN_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DCSRC_CONF0_RESERVED_BF_OFF (25)
#define ANT_CSR_ANT_DCSRC_CONF0_RESERVED_BF_WID ( 7)
#define ANT_CSR_ANT_DCSRC_CONF0_RESERVED_BF_MSK (0xFE000000)
#define ANT_CSR_ANT_DCSRC_CONF0_RESERVED_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_DCSRC_CONF1 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_dcsrc_conf1
  * DCSRC spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_dcsrc_conf1_reg_t;

#define ANT_CSR_ANT_DCSRC_CONF1_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_DCSRC_CONF1_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_DCSRC_CONF1_WR_MASK (0xffffffffU)


///< RESERVED
#define ANT_CSR_ANT_DCSRC_CONF1_RESERVED_BF_OFF ( 0)
#define ANT_CSR_ANT_DCSRC_CONF1_RESERVED_BF_WID (32)
#define ANT_CSR_ANT_DCSRC_CONF1_RESERVED_BF_MSK (0xFFFFFFFF)
#define ANT_CSR_ANT_DCSRC_CONF1_RESERVED_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_DPATH_CONF register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_dpath_conf
  * AnaRF DPATH conf
  */

typedef union {
  struct {
    uint32_t DPATH_TRX0_RX_RESN : 1;
    ///< AnaRF datapath reset deassertion for RX TRX0 or TRX4
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t DPATH_TRX1_RX_RESN : 1;
    ///< AnaRF datapath reset deassertion for RX TRX1 or TRX5
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED1 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t DPATH_FBX0_RX_RESN : 1;
    ///< AnaRF datapath reset deassertion for RX FBX0 or FBX1
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t DPATH_FBX0_DCSRC_RESN : 1;
    ///< AnaRF datapath reset deassertion for DCSRC FBX0 or FBX1
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t RESERVED2 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DPATH_TRX2_RX_RESN : 1;
    ///< AnaRF datapath reset deassertion for RX TRX2 or TRX6
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t RESERVED3 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DPATH_TRX3_RX_RESN : 1;
    ///< AnaRF datapath reset deassertion for RX TRX3 or TRX7
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t RESERVED4 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t DPATH_FREEZE_ANALOG_CONF : 1;
    ///< Freeze values towards AnalogRF as in scanmode
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t DPATH_CLKMUX_SEL : 1;
    ///< Clock mux selector that select the  RX clocks as in scanmode
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED : 19;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_dpath_conf_reg_t;

#define ANT_CSR_ANT_DPATH_CONF_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_DPATH_CONF_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_DPATH_CONF_WR_MASK (0xffffffffU)


///< AnaRF datapath reset deassertion for RX TRX0 or TRX4
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX0_RX_RESN_BF_OFF ( 0)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX0_RX_RESN_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX0_RX_RESN_BF_MSK (0x00000001)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX0_RX_RESN_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DPATH_CONF_RESERVED0_BF_OFF ( 1)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED0_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED0_BF_MSK (0x00000002)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED0_BF_DEF (0x00000000)

///< AnaRF datapath reset deassertion for RX TRX1 or TRX5
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX1_RX_RESN_BF_OFF ( 2)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX1_RX_RESN_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX1_RX_RESN_BF_MSK (0x00000004)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX1_RX_RESN_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DPATH_CONF_RESERVED1_BF_OFF ( 3)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED1_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED1_BF_MSK (0x00000008)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED1_BF_DEF (0x00000000)

///< AnaRF datapath reset deassertion for RX FBX0 or FBX1
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_RX_RESN_BF_OFF ( 4)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_RX_RESN_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_RX_RESN_BF_MSK (0x00000010)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_RX_RESN_BF_DEF (0x00000000)

///< AnaRF datapath reset deassertion for DCSRC FBX0 or FBX1
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_DCSRC_RESN_BF_OFF ( 5)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_DCSRC_RESN_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_DCSRC_RESN_BF_MSK (0x00000020)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FBX0_DCSRC_RESN_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DPATH_CONF_RESERVED2_BF_OFF ( 6)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED2_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED2_BF_MSK (0x00000040)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED2_BF_DEF (0x00000000)

///< AnaRF datapath reset deassertion for RX TRX2 or TRX6
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX2_RX_RESN_BF_OFF ( 7)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX2_RX_RESN_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX2_RX_RESN_BF_MSK (0x00000080)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX2_RX_RESN_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DPATH_CONF_RESERVED3_BF_OFF ( 8)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED3_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED3_BF_MSK (0x00000100)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED3_BF_DEF (0x00000000)

///< AnaRF datapath reset deassertion for RX TRX3 or TRX7
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX3_RX_RESN_BF_OFF ( 9)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX3_RX_RESN_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX3_RX_RESN_BF_MSK (0x00000200)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_TRX3_RX_RESN_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DPATH_CONF_RESERVED4_BF_OFF (10)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED4_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED4_BF_MSK (0x00000400)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED4_BF_DEF (0x00000000)

///< Freeze values towards AnalogRF as in scanmode
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FREEZE_ANALOG_CONF_BF_OFF (11)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FREEZE_ANALOG_CONF_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FREEZE_ANALOG_CONF_BF_MSK (0x00000800)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_FREEZE_ANALOG_CONF_BF_DEF (0x00000000)

///< Clock mux selector that select the  RX clocks as in scanmode
#define ANT_CSR_ANT_DPATH_CONF_DPATH_CLKMUX_SEL_BF_OFF (12)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_CLKMUX_SEL_BF_WID ( 1)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_CLKMUX_SEL_BF_MSK (0x00001000)
#define ANT_CSR_ANT_DPATH_CONF_DPATH_CLKMUX_SEL_BF_DEF (0x00000000)

///< RESERVED
#define ANT_CSR_ANT_DPATH_CONF_RESERVED_BF_OFF (13)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED_BF_WID (19)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED_BF_MSK (0xFFFFE000)
#define ANT_CSR_ANT_DPATH_CONF_RESERVED_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_BSG_CONFIG register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_bsg_config
  * Bitstream Generator Configuration Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< BSG Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< BSG Mode
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t EXT_SHIFT : 2;
    ///< Amount of Right Shift of external input
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t QUANT_SIZE : 1;
    ///< Determines the quantization size in the Sigma Delta Modulator
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t DEM_MODE : 2;
    ///< DEM (Dynamic Element Matching) Mode
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t ANT_SEL : 3;
    ///< Determines the source of the BSG register input. 0-3 are Antenna numbers,
    ///< 4 represents the FB Antenna
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_bsg_cfg_reg_t;

#define ANT_CSR_ANT_BSG_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_BSG_CFG_RD_MASK (0x000007ffU)
#define ANT_CSR_ANT_BSG_CFG_WR_MASK (0x000007ffU)


///< BSG Enable
#define ANT_CSR_ANT_BSG_CFG_EN_BF_OFF ( 0)
#define ANT_CSR_ANT_BSG_CFG_EN_BF_WID ( 1)
#define ANT_CSR_ANT_BSG_CFG_EN_BF_MSK (0x00000001)
#define ANT_CSR_ANT_BSG_CFG_EN_BF_DEF (0x00000000)

///< BSG Mode
#define ANT_CSR_ANT_BSG_CFG_MODE_BF_OFF ( 1)
#define ANT_CSR_ANT_BSG_CFG_MODE_BF_WID ( 2)
#define ANT_CSR_ANT_BSG_CFG_MODE_BF_MSK (0x00000006)
#define ANT_CSR_ANT_BSG_CFG_MODE_BF_DEF (0x00000000)

///< Amount of Right Shift of external input
#define ANT_CSR_ANT_BSG_CFG_EXT_SHIFT_BF_OFF ( 3)
#define ANT_CSR_ANT_BSG_CFG_EXT_SHIFT_BF_WID ( 2)
#define ANT_CSR_ANT_BSG_CFG_EXT_SHIFT_BF_MSK (0x00000018)
#define ANT_CSR_ANT_BSG_CFG_EXT_SHIFT_BF_DEF (0x00000000)

///< Determines the quantization size in the Sigma Delta Modulator
#define ANT_CSR_ANT_BSG_CFG_QUANT_SIZE_BF_OFF ( 5)
#define ANT_CSR_ANT_BSG_CFG_QUANT_SIZE_BF_WID ( 1)
#define ANT_CSR_ANT_BSG_CFG_QUANT_SIZE_BF_MSK (0x00000020)
#define ANT_CSR_ANT_BSG_CFG_QUANT_SIZE_BF_DEF (0x00000000)

///< DEM (Dynamic Element Matching) Mode
#define ANT_CSR_ANT_BSG_CFG_DEM_MODE_BF_OFF ( 6)
#define ANT_CSR_ANT_BSG_CFG_DEM_MODE_BF_WID ( 2)
#define ANT_CSR_ANT_BSG_CFG_DEM_MODE_BF_MSK (0x000000C0)
#define ANT_CSR_ANT_BSG_CFG_DEM_MODE_BF_DEF (0x00000000)

///< Determines the source of the BSG register input. 0-3 are Antenna numbers,
///< 4 represents the FB Antenna
#define ANT_CSR_ANT_BSG_CFG_ANT_SEL_BF_OFF ( 8)
#define ANT_CSR_ANT_BSG_CFG_ANT_SEL_BF_WID ( 3)
#define ANT_CSR_ANT_BSG_CFG_ANT_SEL_BF_MSK (0x00000700)
#define ANT_CSR_ANT_BSG_CFG_ANT_SEL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_BSG_DC_VALUE register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_bsg_dc_value
  * ADC Bitstream Generator DC Value Register
  */

typedef union {
  struct {
    uint32_t DC_VALUE : 24;
    ///< DC Value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_bsg_dc_val_reg_t;

#define ANT_CSR_ANT_BSG_DC_VAL_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_BSG_DC_VAL_RD_MASK (0x00ffffffU)
#define ANT_CSR_ANT_BSG_DC_VAL_WR_MASK (0x00ffffffU)


///< DC Value
#define ANT_CSR_ANT_BSG_DC_VAL_DC_VAL_BF_OFF ( 0)
#define ANT_CSR_ANT_BSG_DC_VAL_DC_VAL_BF_WID (24)
#define ANT_CSR_ANT_BSG_DC_VAL_DC_VAL_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ANT_BSG_DC_VAL_DC_VAL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_CAPT_TMUX_CTRL register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_capt_tmux_ctrl
  * ANT_CAPT_TMUX Register
  */

typedef union {
  struct {
    uint32_t TM_RB_C0 : 3;
    ///< Test Mux Bottom row Column0 Value == Selects 0 == Mux Disabled. Clocks
    ///< disabled. 1 == ASC2 2 == ASC3 3 == ADC_DIG2 Slices 15 to 0, bits 26
    ///< to 16 4 == ADC_DIG3 Slices 15 to 0, bits 26 to 16 5 == FB_ADC_DIG
    ///< Slices 15 to 0, bits 26 to 16 6 == FB_ASC  7 == Feed through from
    ///< _test_mux_in_0  input to o_test_mux_out_0 output
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TM_RT_C0 : 3;
    ///< Test Mux Top Row Column0 Value == Selects 0 == Mux Disabled. Clocks
    ///< disabled. 1 == ASC0 2 == ASC1 3 == ADC_DIG0 Slices 15 to 0, bits 26
    ///< to 16 4 == ADC_DIG1 Slices 15 to 0, bits 26 to 16 5 == Select output
    ///< from test Mux Botton Row Column0
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TM_RB_C1 : 3;
    ///< Test Mux Bottom row Column1 Value == Selects 0 == Mux Disabled. Clocks
    ///< disabled. 1 == ASC2 2 == ASC3 3 == ADC_DIG2 Slices 15 to 0, bits 15
    ///< to 0 4 == ADC_DIG3 Slices 15 to 0, bits 15 to 0 5 == FB_ADC_DIG Slices
    ///< 15 to 0, bits 15 to 0 6 == FB_ASC 7 == Feed through from i_test_mux_in_1
    ///< input to o _test_mux_out1 output
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TM_RT_C1 : 3;
    ///< Test Mux Top Row Column1 Value == Selects 0 == Mux Disabled. Clocks
    ///< disabled. 1 == ASC0 2 == ASC1 3 == ADC_DIG0 Slices 15 to 0, bits 15
    ///< to 0 4 == ADC_DIG1 Slices 15 to 0, bits 15 to 0 5 == Selects output
    ///< of Test Mux Bottom Row Column1
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TM_RB_C2 : 3;
    ///< Test Mux Bottom Row Column2 Select == Value 0 == Mux Disbaled, Clock
    ///< Disabled 1 == ASC2 OBS Slice 2 == ASC3 OBS lice 3 == ADC_DIG2 OBS
    ///< Slice 4 == ADC_DIG3 OBS Slice 5 == FB_ADC_DIG OBS Slice 6 == FB_ASC
    ///< OBS Slice 7 == Feed through from i_test_mux_in2 to o_test_mux_out2
    ///< output
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TM_RT_C2 : 3;
    ///< Test Mux Top Row  Column 2 Value == Selects 0 == Mux Disbaled, Clocks
    ///< Disbaled 1 == ASC0 OBS Slice 2 == ASC1 OBS Slice 3 == ADC_DIG0 OBS
    ///< Slice 4 == ADC_DIG1 OBS Slice 5 == Output of Test Mux Bottom Row Column2
    ///< Mux
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t TM_RB_C3 : 3;
    ///< Test Mux Bottom Row Column3 Value == Selects 0 == Mux Disbaled, Clocks
    ///< Disabled 1 == ASC2 OBS Slice 2 == ASC3 OBS lice 3 == ADC_DIG2 OBS
    ///< Slice 4 == ADC_DIG3 OBS Slice 5 == FB_ADC_DIG OBS Slice 6 == FB_ASC
    ///< OBS Slice 7 == Feed through from i_test_mux_in3 to o_test_mux_out3
    ///< output
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t TM_RT_C3 : 3;
    ///< Test Mux Top Row  Column 3 Value == Selects 0 == Mux Disbaled, Clocks
    ///< Disabled 1 == ASC0 OBS Slice 2 == ASC1 OBS Slice 3 == ADC_DIG0 OBS
    ///< Slice 4 == ADC_DIG1 OBS Slice 5 == Output of Test Mux Botton Row Column3
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_capt_tmux_ctrl_reg_t;

#define ANT_CSR_ANT_CAPT_TMUX_CTRL_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_RD_MASK (0x00ffffffU)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_WR_MASK (0x00ffffffU)


///< Test Mux Bottom row Column0 Value == Selects 0 == Mux Disabled. Clocks
///< disabled. 1 == ASC2 2 == ASC3 3 == ADC_DIG2 Slices 15 to 0, bits 26
///< to 16 4 == ADC_DIG3 Slices 15 to 0, bits 26 to 16 5 == FB_ADC_DIG
///< Slices 15 to 0, bits 26 to 16 6 == FB_ASC  7 == Feed through from
///< _test_mux_in_0  input to o_test_mux_out_0 output
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C0_BF_OFF ( 0)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C0_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C0_BF_MSK (0x00000007)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C0_BF_DEF (0x00000000)

///< Test Mux Top Row Column0 Value == Selects 0 == Mux Disabled. Clocks
///< disabled. 1 == ASC0 2 == ASC1 3 == ADC_DIG0 Slices 15 to 0, bits 26
///< to 16 4 == ADC_DIG1 Slices 15 to 0, bits 26 to 16 5 == Select output
///< from test Mux Botton Row Column0
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C0_BF_OFF ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C0_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C0_BF_MSK (0x00000038)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C0_BF_DEF (0x00000000)

///< Test Mux Bottom row Column1 Value == Selects 0 == Mux Disabled. Clocks
///< disabled. 1 == ASC2 2 == ASC3 3 == ADC_DIG2 Slices 15 to 0, bits 15
///< to 0 4 == ADC_DIG3 Slices 15 to 0, bits 15 to 0 5 == FB_ADC_DIG Slices
///< 15 to 0, bits 15 to 0 6 == FB_ASC 7 == Feed through from i_test_mux_in_1
///< input to o _test_mux_out1 output
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C1_BF_OFF ( 6)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C1_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C1_BF_MSK (0x000001C0)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C1_BF_DEF (0x00000000)

///< Test Mux Top Row Column1 Value == Selects 0 == Mux Disabled. Clocks
///< disabled. 1 == ASC0 2 == ASC1 3 == ADC_DIG0 Slices 15 to 0, bits 15
///< to 0 4 == ADC_DIG1 Slices 15 to 0, bits 15 to 0 5 == Selects output
///< of Test Mux Bottom Row Column1
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C1_BF_OFF ( 9)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C1_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C1_BF_MSK (0x00000E00)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C1_BF_DEF (0x00000000)

///< Test Mux Bottom Row Column2 Select == Value 0 == Mux Disbaled, Clock
///< Disabled 1 == ASC2 OBS Slice 2 == ASC3 OBS lice 3 == ADC_DIG2 OBS
///< Slice 4 == ADC_DIG3 OBS Slice 5 == FB_ADC_DIG OBS Slice 6 == FB_ASC
///< OBS Slice 7 == Feed through from i_test_mux_in2 to o_test_mux_out2
///< output
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C2_BF_OFF (12)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C2_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C2_BF_MSK (0x00007000)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C2_BF_DEF (0x00000000)

///< Test Mux Top Row  Column 2 Value == Selects 0 == Mux Disbaled, Clocks
///< Disbaled 1 == ASC0 OBS Slice 2 == ASC1 OBS Slice 3 == ADC_DIG0 OBS
///< Slice 4 == ADC_DIG1 OBS Slice 5 == Output of Test Mux Bottom Row Column2
///< Mux
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C2_BF_OFF (15)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C2_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C2_BF_MSK (0x00038000)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C2_BF_DEF (0x00000000)

///< Test Mux Bottom Row Column3 Value == Selects 0 == Mux Disbaled, Clocks
///< Disabled 1 == ASC2 OBS Slice 2 == ASC3 OBS lice 3 == ADC_DIG2 OBS
///< Slice 4 == ADC_DIG3 OBS Slice 5 == FB_ADC_DIG OBS Slice 6 == FB_ASC
///< OBS Slice 7 == Feed through from i_test_mux_in3 to o_test_mux_out3
///< output
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C3_BF_OFF (18)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C3_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C3_BF_MSK (0x001C0000)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RB_C3_BF_DEF (0x00000000)

///< Test Mux Top Row  Column 3 Value == Selects 0 == Mux Disbaled, Clocks
///< Disabled 1 == ASC0 OBS Slice 2 == ASC1 OBS Slice 3 == ADC_DIG0 OBS
///< Slice 4 == ADC_DIG1 OBS Slice 5 == Output of Test Mux Botton Row Column3
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C3_BF_OFF (21)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C3_BF_WID ( 3)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C3_BF_MSK (0x00E00000)
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_TM_RT_C3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_CCF_INIT register description at address offset 0x28
  *
  * Register default value:        0x00007FFF
  * Register full path in IP: ant_csr_map/reg/ant_ccf_init
  * ANT CFF Init Register
  */

typedef union {
  struct {
    uint32_t CCF_RX_IN_INIT : 4;
    ///< Soft Reset for Clock Crossing FIFOs
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t CCF_RX_OUT_INIT : 4;
    ///< Soft Reset for Clock Crossing FIFOs
    ///< AccessType="RW" BitOffset="4" ResetValue="0xF"
    uint32_t CCF_FB_RX_IN_INIT : 1;
    ///< Soft Reset for Clock Crossing FIFO
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t CCF_FB_RX_OUT_INIT : 1;
    ///< Soft Reset for Clock Crossing FIFO
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CCF_TX_IN_INIT : 4;
    ///< Soft Reset for DAC Data Clock Crossing FIFOs
    ///< AccessType="RW" BitOffset="10" ResetValue="0xF"
    uint32_t CCF_DCSRC_IN_INIT : 1;
    ///< Soft Reset for DCSRC IN Clock Crossing FIFO
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_ccf_init_reg_t;

#define ANT_CSR_ANT_CCF_INIT_DEFAULT (0x00007fffU)
#define ANT_CSR_ANT_CCF_INIT_RD_MASK (0x00007fffU)
#define ANT_CSR_ANT_CCF_INIT_WR_MASK (0x00007fffU)


///< Soft Reset for Clock Crossing FIFOs
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_IN_INIT_BF_OFF ( 0)
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_IN_INIT_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_IN_INIT_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_IN_INIT_BF_DEF (0x0000000F)

///< Soft Reset for Clock Crossing FIFOs
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_OUT_INIT_BF_OFF ( 4)
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_OUT_INIT_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_OUT_INIT_BF_MSK (0x000000F0)
#define ANT_CSR_ANT_CCF_INIT_CCF_RX_OUT_INIT_BF_DEF (0x000000F0)

///< Soft Reset for Clock Crossing FIFO
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_IN_INIT_BF_OFF ( 8)
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_IN_INIT_BF_WID ( 1)
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_IN_INIT_BF_MSK (0x00000100)
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_IN_INIT_BF_DEF (0x00000100)

///< Soft Reset for Clock Crossing FIFO
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_OUT_INIT_BF_OFF ( 9)
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_OUT_INIT_BF_WID ( 1)
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_OUT_INIT_BF_MSK (0x00000200)
#define ANT_CSR_ANT_CCF_INIT_CCF_FB_RX_OUT_INIT_BF_DEF (0x00000200)

///< Soft Reset for DAC Data Clock Crossing FIFOs
#define ANT_CSR_ANT_CCF_INIT_CCF_TX_IN_INIT_BF_OFF (10)
#define ANT_CSR_ANT_CCF_INIT_CCF_TX_IN_INIT_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_INIT_CCF_TX_IN_INIT_BF_MSK (0x00003C00)
#define ANT_CSR_ANT_CCF_INIT_CCF_TX_IN_INIT_BF_DEF (0x00003C00)

///< Soft Reset for DCSRC IN Clock Crossing FIFO
#define ANT_CSR_ANT_CCF_INIT_CCF_DCSRC_IN_INIT_BF_OFF (14)
#define ANT_CSR_ANT_CCF_INIT_CCF_DCSRC_IN_INIT_BF_WID ( 1)
#define ANT_CSR_ANT_CCF_INIT_CCF_DCSRC_IN_INIT_BF_MSK (0x00004000)
#define ANT_CSR_ANT_CCF_INIT_CCF_DCSRC_IN_INIT_BF_DEF (0x00004000)


/** @brief ANT_CSR_MAP_REG_ANT_DP_INIT register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_dp_init
  * ANT DP_INIT Register
  */

typedef union {
  struct {
    uint32_t DP_INIT : 1;
    ///< Set to initiate Datapath init sequence.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_dp_init_reg_t;

#define ANT_CSR_ANT_DP_INIT_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_DP_INIT_RD_MASK (0x00000001U)
#define ANT_CSR_ANT_DP_INIT_WR_MASK (0x00000001U)


///< Set to initiate Datapath init sequence.
#define ANT_CSR_ANT_DP_INIT_DP_INIT_BF_OFF ( 0)
#define ANT_CSR_ANT_DP_INIT_DP_INIT_BF_WID ( 1)
#define ANT_CSR_ANT_DP_INIT_DP_INIT_BF_MSK (0x00000001)
#define ANT_CSR_ANT_DP_INIT_DP_INIT_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_RX_EN_SEQ0_CFG[4] register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_rx_en_seq0_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_rx_en_seq0_cfg_reg_t;

#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_FALL_VAL_BF_DEF (0x00000000)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_ARR_SZ0 (4)
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_RX_EN_SEQ1_CFG[4] register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_rx_en_seq1_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_rx_en_seq1_cfg_reg_t;

#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_FALL_VAL_BF_DEF (0x00000000)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_ARR_SZ0 (4)
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_RX_EN_PAUSE_CFG[4] register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_rx_en_pause_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_rx_en_pause_cfg_reg_t;

#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_FALL_VAL_BF_DEF (0x00000000)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_ARR_SZ0 (4)
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_RX_EN_RESUME_CFG[4] register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_rx_en_resume_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_rx_en_resume_cfg_reg_t;

#define ANT_CSR_ANT_RX_EN_RESUME_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_FALL_VAL_BF_DEF (0x00000000)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_ARR_SZ0 (4)
#define ANT_CSR_ANT_RX_EN_RESUME_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_TX_EN_SEQ0_CFG[4] register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_tx_en_seq0_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_tx_en_seq0_cfg_reg_t;

#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_FALL_VAL_BF_DEF (0x00000000)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_ARR_SZ0 (4)
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_TX_EN_SEQ1_CFG[4] register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_tx_en_seq1_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_tx_en_seq1_cfg_reg_t;

#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_FALL_VAL_BF_DEF (0x00000000)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_ARR_SZ0 (4)
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_FB_EN_SEQ0_CFG register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_fb_en_seq0_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_fb_en_seq0_cfg_reg_t;

#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_FALL_VAL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_FB_EN_SEQ1_CFG register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_fb_en_seq1_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_fb_en_seq1_cfg_reg_t;

#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_FALL_VAL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_FB_EN_PAUSE_CFG register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_fb_en_pause_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_fb_en_pause_cfg_reg_t;

#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_FALL_VAL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_FB_EN_RESUME_CFG register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_fb_en_resume_cfg
  * Link Event config
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of event to set
    ///< the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of event to set
    ///< the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of event. If RISE_VALUE =
    ///< FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of event. If RISE_VALUE
    ///< = FALL_VALUE then the event is set to that value immediately and the
    ///< DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_fb_en_resume_cfg_reg_t;

#define ANT_CSR_ANT_FB_EN_RESUME_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of event to set
///< the event to RISE_VALUE.
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_DELAY_BF_OFF ( 0)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_DELAY_BF_MSK (0x00007FFF)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of event to set
///< the event to FALL_VALUE.
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_DELAY_BF_OFF (15)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_DELAY_BF_WID (15)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_DELAY_BF_MSK (0x3FFF8000)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of event. If RISE_VALUE =
///< FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_VAL_BF_OFF (30)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_VAL_BF_MSK (0x40000000)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of event. If RISE_VALUE
///< = FALL_VALUE then the event is set to that value immediately and the
///< DELAY fields are ignored.
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_VAL_BF_OFF (31)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_VAL_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_VAL_BF_MSK (0x80000000)
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_FALL_VAL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_CCF_RX_OUT_CONFIG register description at address offset 0xa0
  *
  * Register default value:        0x00004444
  * Register full path in IP: ant_csr_map/reg/ant_ccf_rx_out_config
  * ANT RX Data CFF Startup Config Register
  */

typedef union {
  struct {
    uint32_t WATERMARK0 : 4;
    ///< Level above which the antenna 0 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t WATERMARK1 : 4;
    ///< Level above which the antenna 1 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="4" ResetValue="0x4"
    uint32_t WATERMARK2 : 4;
    ///< Level above which the antenna 2 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t WATERMARK3 : 4;
    ///< Level above which the antenna 3 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="12" ResetValue="0x4"
    uint32_t MASK : 4;
    ///< When one, each bit enables the respective watermark to be used as
    ///< a gate for the startup of DeQ. If all bits are zero, the BFN is used
    ///< to start the DeQ.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_ccf_rx_out_cfg_reg_t;

#define ANT_CSR_ANT_CCF_RX_OUT_CFG_DEFAULT (0x00004444U)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_RD_MASK (0x000fffffU)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WR_MASK (0x000fffffU)


///< Level above which the antenna 0 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK0_BF_OFF ( 0)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK0_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK0_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK0_BF_DEF (0x00000004)

///< Level above which the antenna 1 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK1_BF_OFF ( 4)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK1_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK1_BF_MSK (0x000000F0)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK1_BF_DEF (0x00000040)

///< Level above which the antenna 2 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK2_BF_OFF ( 8)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK2_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK2_BF_MSK (0x00000F00)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK2_BF_DEF (0x00000400)

///< Level above which the antenna 3 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK3_BF_OFF (12)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK3_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK3_BF_MSK (0x0000F000)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_WATERMARK3_BF_DEF (0x00004000)

///< When one, each bit enables the respective watermark to be used as
///< a gate for the startup of DeQ. If all bits are zero, the BFN is used
///< to start the DeQ.
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_MASK_BF_OFF (16)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_MASK_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_MASK_BF_MSK (0x000F0000)
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_MASK_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_CCF_RX_IN_CONFIG register description at address offset 0xa4
  *
  * Register default value:        0x00002222
  * Register full path in IP: ant_csr_map/reg/ant_ccf_rx_in_config
  * ANT RX Control CFF Config Register
  */

typedef union {
  struct {
    uint32_t WATERMARK0 : 4;
    ///< Level above which the antenna 0 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t WATERMARK1 : 4;
    ///< Level above which the antenna 1 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t WATERMARK2 : 4;
    ///< Level above which the antenna 2 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2"
    uint32_t WATERMARK3 : 4;
    ///< Level above which the antenna 3 fifo reports data on the read side
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_ccf_rx_in_cfg_reg_t;

#define ANT_CSR_ANT_CCF_RX_IN_CFG_DEFAULT (0x00002222U)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_RD_MASK (0x0000ffffU)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WR_MASK (0x0000ffffU)


///< Level above which the antenna 0 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK0_BF_OFF ( 0)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK0_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK0_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK0_BF_DEF (0x00000002)

///< Level above which the antenna 1 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK1_BF_OFF ( 4)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK1_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK1_BF_MSK (0x000000F0)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK1_BF_DEF (0x00000020)

///< Level above which the antenna 2 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK2_BF_OFF ( 8)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK2_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK2_BF_MSK (0x00000F00)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK2_BF_DEF (0x00000200)

///< Level above which the antenna 3 fifo reports data on the read side
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK3_BF_OFF (12)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK3_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK3_BF_MSK (0x0000F000)
#define ANT_CSR_ANT_CCF_RX_IN_CFG_WATERMARK3_BF_DEF (0x00002000)


/** @brief ANT_CSR_MAP_REG_ANT_CCF_FB_RX_OUT_CONFIG register description at address offset 0xa8
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ant_ccf_fb_rx_out_config
  * ANT FB RX Data CFF Startup Config Register
  */

typedef union {
  struct {
    uint32_t WATERMARK : 4;
    ///< Level above which the fb rx data fifo reports data on the read side
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t MASK : 1;
    ///< When one, the watermark to be used as a gate for the startup of DeQ.
    ///< If zero, the BFN is used to start the DeQ.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_ccf_fb_rx_out_cfg_reg_t;

#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_DEFAULT (0x00000004U)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_RD_MASK (0x0000001fU)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_WR_MASK (0x0000001fU)


///< Level above which the fb rx data fifo reports data on the read side
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_WATERMARK_BF_OFF ( 0)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_WATERMARK_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_WATERMARK_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_WATERMARK_BF_DEF (0x00000004)

///< When one, the watermark to be used as a gate for the startup of DeQ.
///< If zero, the BFN is used to start the DeQ.
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_MASK_BF_OFF ( 4)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_MASK_BF_WID ( 1)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_MASK_BF_MSK (0x00000010)
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_MASK_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_CCF_FB_RX_IN_CONFIG register description at address offset 0xac
  *
  * Register default value:        0x00000002
  * Register full path in IP: ant_csr_map/reg/ant_ccf_fb_rx_in_config
  * ANT CFF Startup Config Register
  */

typedef union {
  struct {
    uint32_t WATERMARK : 4;
    ///< Level above which the respective fifo reports data on the read side
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_ccf_fb_rx_in_cfg_reg_t;

#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_DEFAULT (0x00000002U)
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_RD_MASK (0x0000000fU)
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_WR_MASK (0x0000000fU)


///< Level above which the respective fifo reports data on the read side
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_WATERMARK_BF_OFF ( 0)
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_WATERMARK_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_WATERMARK_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_WATERMARK_BF_DEF (0x00000002)


/** @brief ANT_CSR_MAP_REG_ANT_CCF_DCSRC_IN_CONFIG register description at address offset 0xb0
  *
  * Register default value:        0x00000002
  * Register full path in IP: ant_csr_map/reg/ant_ccf_dcsrc_in_config
  * ANT CFF Startup Config Register
  */

typedef union {
  struct {
    uint32_t WATERMARK : 4;
    ///< Level above which the respective fifo reports data on the read side
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_ccf_dcsrc_in_cfg_reg_t;

#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_DEFAULT (0x00000002U)
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_RD_MASK (0x0000000fU)
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_WR_MASK (0x0000000fU)


///< Level above which the respective fifo reports data on the read side
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_WATERMARK_BF_OFF ( 0)
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_WATERMARK_BF_WID ( 4)
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_WATERMARK_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_WATERMARK_BF_DEF (0x00000002)


/** @brief ANT_CSR_MAP_REG_CMFF_CONFIG register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/cmff_config
  * CMFF Configuration Register
  */

typedef union {
  struct {
    uint32_t PATH : 3;
    ///< Selects one of Five Paths. Paths to select RX ADC[3:0] or FB ADC.
    ///< Values 0,1,2,3, selects Paths RX ADC0, DC1, ADC2 and ADC3.  Value
    ///< of 4 selects the FB ADCV path.  All other vaues default to path 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t SLICE : 5;
    ///< Selects one of seventeen data slices from the selected data path.
    ///< Valid Values 0 to 16. Any other value defaults to slice0.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_cmff_cfg_reg_t;

#define ANT_CSR_CMFF_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_CMFF_CFG_RD_MASK (0x000001f7U)
#define ANT_CSR_CMFF_CFG_WR_MASK (0x000001f7U)


///< Selects one of Five Paths. Paths to select RX ADC[3:0] or FB ADC.
///< Values 0,1,2,3, selects Paths RX ADC0, DC1, ADC2 and ADC3.  Value
///< of 4 selects the FB ADCV path.  All other vaues default to path 0.
#define ANT_CSR_CMFF_CFG_PATH_BF_OFF ( 0)
#define ANT_CSR_CMFF_CFG_PATH_BF_WID ( 3)
#define ANT_CSR_CMFF_CFG_PATH_BF_MSK (0x00000007)
#define ANT_CSR_CMFF_CFG_PATH_BF_DEF (0x00000000)

///< Selects one of seventeen data slices from the selected data path.
///< Valid Values 0 to 16. Any other value defaults to slice0.
#define ANT_CSR_CMFF_CFG_SLICE_BF_OFF ( 4)
#define ANT_CSR_CMFF_CFG_SLICE_BF_WID ( 5)
#define ANT_CSR_CMFF_CFG_SLICE_BF_MSK (0x000001F0)
#define ANT_CSR_CMFF_CFG_SLICE_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CMFF_CONTROL register description at address offset 0xb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/cmff_control
  * CMFF Configuration Register
  */

typedef union {
  struct {
    uint32_t EN_PUSH : 1;
    ///< Set to 1 to allow valid data to be pushed into the data clock crossing
    ///< FIFO.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SOFT_RESET : 1;
    ///< Soft reset of CC_FIFO in the event of over/under flow condition.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_cmff_ctrl_reg_t;

#define ANT_CSR_CMFF_CTRL_DEFAULT (0x00000000U)
#define ANT_CSR_CMFF_CTRL_RD_MASK (0x00000003U)
#define ANT_CSR_CMFF_CTRL_WR_MASK (0x00000003U)


///< Set to 1 to allow valid data to be pushed into the data clock crossing
///< FIFO.
#define ANT_CSR_CMFF_CTRL_EN_PUSH_BF_OFF ( 0)
#define ANT_CSR_CMFF_CTRL_EN_PUSH_BF_WID ( 1)
#define ANT_CSR_CMFF_CTRL_EN_PUSH_BF_MSK (0x00000001)
#define ANT_CSR_CMFF_CTRL_EN_PUSH_BF_DEF (0x00000000)

///< Soft reset of CC_FIFO in the event of over/under flow condition.
#define ANT_CSR_CMFF_CTRL_SOFT_RST_BF_OFF ( 1)
#define ANT_CSR_CMFF_CTRL_SOFT_RST_BF_WID ( 1)
#define ANT_CSR_CMFF_CTRL_SOFT_RST_BF_MSK (0x00000002)
#define ANT_CSR_CMFF_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_BSG_DC_INCR register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_bsg_dc_incr
  * ADC Bitstream Generator DC Value Increment Register
  */

typedef union {
  struct {
    uint32_t DC_INCR : 24;
    ///< DC Value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_bsg_dc_incr_reg_t;

#define ANT_CSR_ANT_BSG_DC_INCR_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_BSG_DC_INCR_RD_MASK (0x00ffffffU)
#define ANT_CSR_ANT_BSG_DC_INCR_WR_MASK (0x00000000U)


///< DC Value
#define ANT_CSR_ANT_BSG_DC_INCR_DC_INCR_BF_OFF ( 0)
#define ANT_CSR_ANT_BSG_DC_INCR_DC_INCR_BF_WID (24)
#define ANT_CSR_ANT_BSG_DC_INCR_DC_INCR_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ANT_BSG_DC_INCR_DC_INCR_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_isync_ctrl_reg_t;

#define ANT_CSR_ISYNC_CTRL_DEFAULT (0x00000000U)
#define ANT_CSR_ISYNC_CTRL_RD_MASK (0x00008037U)
#define ANT_CSR_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define ANT_CSR_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define ANT_CSR_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define ANT_CSR_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define ANT_CSR_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define ANT_CSR_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define ANT_CSR_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define ANT_CSR_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define ANT_CSR_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define ANT_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define ANT_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define ANT_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define ANT_CSR_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define ANT_CSR_ISYNC_CTRL_SOFT_RST_BF_OFF (15)
#define ANT_CSR_ISYNC_CTRL_SOFT_RST_BF_WID ( 1)
#define ANT_CSR_ISYNC_CTRL_SOFT_RST_BF_MSK (0x00008000)
#define ANT_CSR_ISYNC_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x104
  *
  * Register default value:        0x00000001
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_isync_lcnt_inc_reg_t;

#define ANT_CSR_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define ANT_CSR_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define ANT_CSR_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define ANT_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define ANT_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define ANT_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x108
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_isync_ten_ms_cnt_reg_t;

#define ANT_CSR_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define ANT_CSR_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define ANT_CSR_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define ANT_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define ANT_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define ANT_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_isync_inc_pre_reg_t;

#define ANT_CSR_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define ANT_CSR_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define ANT_CSR_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define ANT_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define ANT_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define ANT_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define ANT_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define ANT_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define ANT_CSR_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_isync_cnt_adj_reg_t;

#define ANT_CSR_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define ANT_CSR_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define ANT_CSR_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define ANT_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define ANT_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define ANT_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define ANT_CSR_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_isync_bfn_cnt_sync_reg_t;

#define ANT_CSR_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_isync_bfn_cnt_reg_t;

#define ANT_CSR_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define ANT_CSR_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define ANT_CSR_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define ANT_CSR_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define ANT_CSR_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define ANT_CSR_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define ANT_CSR_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define ANT_CSR_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define ANT_CSR_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ABC_BFN_EVENTS_BFNE_CONFIG[42] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_bfne_cfg_reg_t;

#define ANT_CSR_BFNE_CFG_DEFAULT (0x00000000U)
#define ANT_CSR_BFNE_CFG_RD_MASK (0x0000003fU)
#define ANT_CSR_BFNE_CFG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define ANT_CSR_BFNE_CFG_EN_BF_OFF ( 0)
#define ANT_CSR_BFNE_CFG_EN_BF_WID ( 1)
#define ANT_CSR_BFNE_CFG_EN_BF_MSK (0x00000001)
#define ANT_CSR_BFNE_CFG_EN_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define ANT_CSR_BFNE_CFG_MODE_BF_OFF ( 1)
#define ANT_CSR_BFNE_CFG_MODE_BF_WID ( 2)
#define ANT_CSR_BFNE_CFG_MODE_BF_MSK (0x00000006)
#define ANT_CSR_BFNE_CFG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define ANT_CSR_BFNE_CFG_OUTPUT_MODE_BF_OFF ( 3)
#define ANT_CSR_BFNE_CFG_OUTPUT_MODE_BF_WID ( 1)
#define ANT_CSR_BFNE_CFG_OUTPUT_MODE_BF_MSK (0x00000008)
#define ANT_CSR_BFNE_CFG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define ANT_CSR_BFNE_CFG_DBG_MODE_BF_OFF ( 4)
#define ANT_CSR_BFNE_CFG_DBG_MODE_BF_WID ( 2)
#define ANT_CSR_BFNE_CFG_DBG_MODE_BF_MSK (0x00000030)
#define ANT_CSR_BFNE_CFG_DBG_MODE_BF_DEF (0x00000000)
#define ANT_CSR_BFNE_CFG_ARR_SZ0 (42)
#define ANT_CSR_BFNE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ABC_BFN_EVENTS_BFNE_INCR[42] register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_bfne_incr_reg_t;

#define ANT_CSR_BFNE_INCR_DEFAULT (0x00000000U)
#define ANT_CSR_BFNE_INCR_RD_MASK (0xffffffffU)
#define ANT_CSR_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define ANT_CSR_BFNE_INCR_OFFSET_BF_WID (24)
#define ANT_CSR_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define ANT_CSR_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define ANT_CSR_BFNE_INCR_FRAME_BF_OFF (24)
#define ANT_CSR_BFNE_INCR_FRAME_BF_WID ( 8)
#define ANT_CSR_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define ANT_CSR_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define ANT_CSR_BFNE_INCR_ARR_SZ0 (42)
#define ANT_CSR_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ABC_BFN_EVENTS_BFNE_START[42] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_bfne_start_reg_t;

#define ANT_CSR_BFNE_START_DEFAULT (0x00000000U)
#define ANT_CSR_BFNE_START_RD_MASK (0xffffffffU)
#define ANT_CSR_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_BFNE_START_OFFSET_BF_OFF ( 0)
#define ANT_CSR_BFNE_START_OFFSET_BF_WID (24)
#define ANT_CSR_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define ANT_CSR_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define ANT_CSR_BFNE_START_FRAME_BF_OFF (24)
#define ANT_CSR_BFNE_START_FRAME_BF_WID ( 8)
#define ANT_CSR_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define ANT_CSR_BFNE_START_FRAME_BF_DEF (0x00000000)
#define ANT_CSR_BFNE_START_ARR_SZ0 (42)
#define ANT_CSR_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ABC_BFN_EVENTS_BFNE_STAT[42] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_bfne_stat_reg_t;

#define ANT_CSR_BFNE_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_BFNE_STAT_RD_MASK (0xffffffffU)
#define ANT_CSR_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define ANT_CSR_BFNE_STAT_CURRENT_VAL_BF_OFF ( 0)
#define ANT_CSR_BFNE_STAT_CURRENT_VAL_BF_WID ( 1)
#define ANT_CSR_BFNE_STAT_CURRENT_VAL_BF_MSK (0x00000001)
#define ANT_CSR_BFNE_STAT_CURRENT_VAL_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define ANT_CSR_BFNE_STAT_WAITING_BF_OFF ( 1)
#define ANT_CSR_BFNE_STAT_WAITING_BF_WID ( 1)
#define ANT_CSR_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define ANT_CSR_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define ANT_CSR_BFNE_STAT_DONE_BF_OFF ( 2)
#define ANT_CSR_BFNE_STAT_DONE_BF_WID ( 1)
#define ANT_CSR_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define ANT_CSR_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define ANT_CSR_BFNE_STAT_DBG_BF_OFF ( 3)
#define ANT_CSR_BFNE_STAT_DBG_BF_WID (29)
#define ANT_CSR_BFNE_STAT_DBG_BF_MSK (0xFFFFFFF8)
#define ANT_CSR_BFNE_STAT_DBG_BF_DEF (0x00000000)
#define ANT_CSR_BFNE_STAT_ARR_SZ0 (42)
#define ANT_CSR_BFNE_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_ANT_BSG_STAT register description at address offset 0x600
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_bsg_stat
  * ADC Bitstream Generator BSG U Value Register
  */

typedef union {
  struct {
    uint32_t U_VALUE : 19;
    ///< U Value. This reads back the current value of the input to the Sigma
    ///< Delta Modulator (SDM). This is a live register so it may change rapidly.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BIN_VALUE : 5;
    ///< This reads back the current value of the 5-bit Binary input to the
    ///< Bin2Thermo circut. This is a live register so it may change rapidly.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_bsg_stat_reg_t;

#define ANT_CSR_ANT_BSG_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_BSG_STAT_RD_MASK (0x00ffffffU)
#define ANT_CSR_ANT_BSG_STAT_WR_MASK (0x00000000U)


///< U Value. This reads back the current value of the input to the Sigma
///< Delta Modulator (SDM). This is a live register so it may change rapidly.
#define ANT_CSR_ANT_BSG_STAT_U_VAL_BF_OFF ( 0)
#define ANT_CSR_ANT_BSG_STAT_U_VAL_BF_WID (19)
#define ANT_CSR_ANT_BSG_STAT_U_VAL_BF_MSK (0x0007FFFF)
#define ANT_CSR_ANT_BSG_STAT_U_VAL_BF_DEF (0x00000000)

///< This reads back the current value of the 5-bit Binary input to the
///< Bin2Thermo circut. This is a live register so it may change rapidly.
#define ANT_CSR_ANT_BSG_STAT_BIN_VAL_BF_OFF (19)
#define ANT_CSR_ANT_BSG_STAT_BIN_VAL_BF_WID ( 5)
#define ANT_CSR_ANT_BSG_STAT_BIN_VAL_BF_MSK (0x00F80000)
#define ANT_CSR_ANT_BSG_STAT_BIN_VAL_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CMFF_FIFO_STATUS register description at address offset 0x604
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/cmff_fifo_status
  * CMFF Clock Crossing FIFO Status Register
  */

typedef union {
  struct {
    uint32_t UNDERFLOW_ERROR : 1;
    ///< Indicates CC-FIFO Inderflow_Error condition
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR : 1;
    ///< Indicates CC_FIFO Overflow_Error condition.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Indicates CC_FIFO is Empty.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Indicates CC_FIFO is Full.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t FF_DEPTH : 8;
    ///< Indicates CC_FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_cmff_fifo_stat_reg_t;

#define ANT_CSR_CMFF_FIFO_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CMFF_FIFO_STAT_RD_MASK (0x00000fffU)
#define ANT_CSR_CMFF_FIFO_STAT_WR_MASK (0x00000000U)


///< Indicates CC-FIFO Inderflow_Error condition
#define ANT_CSR_CMFF_FIFO_STAT_UNDERFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CMFF_FIFO_STAT_UNDERFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CMFF_FIFO_STAT_UNDERFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CMFF_FIFO_STAT_UNDERFLOW_ERR_BF_DEF (0x00000000)

///< Indicates CC_FIFO Overflow_Error condition.
#define ANT_CSR_CMFF_FIFO_STAT_OVERFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CMFF_FIFO_STAT_OVERFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CMFF_FIFO_STAT_OVERFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CMFF_FIFO_STAT_OVERFLOW_ERR_BF_DEF (0x00000000)

///< Indicates CC_FIFO is Empty.
#define ANT_CSR_CMFF_FIFO_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CMFF_FIFO_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CMFF_FIFO_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CMFF_FIFO_STAT_EMPTY_BF_DEF (0x00000004)

///< Indicates CC_FIFO is Full.
#define ANT_CSR_CMFF_FIFO_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CMFF_FIFO_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CMFF_FIFO_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CMFF_FIFO_STAT_FULL_BF_DEF (0x00000000)

///< Indicates CC_FIFO Depth
#define ANT_CSR_CMFF_FIFO_STAT_FF_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CMFF_FIFO_STAT_FF_DEPTH_BF_WID ( 8)
#define ANT_CSR_CMFF_FIFO_STAT_FF_DEPTH_BF_MSK (0x00000FF0)
#define ANT_CSR_CMFF_FIFO_STAT_FF_DEPTH_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_RX_INTR_LO_STAT register description at address offset 0x608
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/rx_intr_lo_stat
  * RX Intr_Low Status
  */

typedef union {
  struct {
    uint32_t ADC_DIG0 : 1;
    ///< Status of ADC_DIG0 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_DIG1 : 1;
    ///< Status of ADC_DIG1 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t ADC_DIG2 : 1;
    ///< Status of ADC_DIG2 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_DIG3 : 1;
    ///< Status of ADC_DIG3 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t ASC0 : 1;
    ///< Status of ASC0 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ASC1 : 1;
    ///< Status of ASC1 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t ASC2 : 1;
    ///< Status of ASC2 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t ASC3 : 1;
    ///< Status of ASC3 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t ADC_CPU : 1;
    ///< Status of ADC_CPU Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t CCF_RX : 1;
    ///< Status of RX Clock Crossing FIFO Low Priority Interrupt
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_rx_intr_lo_stat_reg_t;

#define ANT_CSR_RX_INTR_LO_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_RX_INTR_LO_STAT_RD_MASK (0x000003ffU)
#define ANT_CSR_RX_INTR_LO_STAT_WR_MASK (0x00000000U)


///< Status of ADC_DIG0 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG0_BF_OFF ( 0)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG0_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG0_BF_MSK (0x00000001)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG0_BF_DEF (0x00000000)

///< Status of ADC_DIG1 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG1_BF_OFF ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG1_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG1_BF_MSK (0x00000002)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG1_BF_DEF (0x00000000)

///< Status of ADC_DIG2 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG2_BF_OFF ( 2)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG2_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG2_BF_MSK (0x00000004)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG2_BF_DEF (0x00000000)

///< Status of ADC_DIG3 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG3_BF_OFF ( 3)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG3_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG3_BF_MSK (0x00000008)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_DIG3_BF_DEF (0x00000000)

///< Status of ASC0 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ASC0_BF_OFF ( 4)
#define ANT_CSR_RX_INTR_LO_STAT_ASC0_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ASC0_BF_MSK (0x00000010)
#define ANT_CSR_RX_INTR_LO_STAT_ASC0_BF_DEF (0x00000000)

///< Status of ASC1 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ASC1_BF_OFF ( 5)
#define ANT_CSR_RX_INTR_LO_STAT_ASC1_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ASC1_BF_MSK (0x00000020)
#define ANT_CSR_RX_INTR_LO_STAT_ASC1_BF_DEF (0x00000000)

///< Status of ASC2 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ASC2_BF_OFF ( 6)
#define ANT_CSR_RX_INTR_LO_STAT_ASC2_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ASC2_BF_MSK (0x00000040)
#define ANT_CSR_RX_INTR_LO_STAT_ASC2_BF_DEF (0x00000000)

///< Status of ASC3 Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ASC3_BF_OFF ( 7)
#define ANT_CSR_RX_INTR_LO_STAT_ASC3_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ASC3_BF_MSK (0x00000080)
#define ANT_CSR_RX_INTR_LO_STAT_ASC3_BF_DEF (0x00000000)

///< Status of ADC_CPU Low Priority Interrupt Status
#define ANT_CSR_RX_INTR_LO_STAT_ADC_CPU_BF_OFF ( 8)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_CPU_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_CPU_BF_MSK (0x00000100)
#define ANT_CSR_RX_INTR_LO_STAT_ADC_CPU_BF_DEF (0x00000000)

///< Status of RX Clock Crossing FIFO Low Priority Interrupt
#define ANT_CSR_RX_INTR_LO_STAT_CCF_RX_BF_OFF ( 9)
#define ANT_CSR_RX_INTR_LO_STAT_CCF_RX_BF_WID ( 1)
#define ANT_CSR_RX_INTR_LO_STAT_CCF_RX_BF_MSK (0x00000200)
#define ANT_CSR_RX_INTR_LO_STAT_CCF_RX_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_RX_INTR_HI_STAT register description at address offset 0x60c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/rx_intr_hi_stat
  * RX Intr_High Status
  */

typedef union {
  struct {
    uint32_t ADC_DIG0 : 1;
    ///< Status of ADC_DIG0 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ADC_DIG1 : 1;
    ///< Status of ADC_DIG1 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t ADC_DIG2 : 1;
    ///< Status of ADC_DIG2 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_DIG3 : 1;
    ///< Status of ADC_DIG3 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t ASC0 : 1;
    ///< Status of ASC0 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t ASC1 : 1;
    ///< Status of ASC1 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t ASC2 : 1;
    ///< Status of ASC2 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t ASC3 : 1;
    ///< Status of ASC3 HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t ADC_CPU : 1;
    ///< Status of ADC_CPU HIGH Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t CCF_RX : 1;
    ///< Status of RX Clock Crossing FIFO HIGH Priority Interrupt
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_rx_intr_hi_stat_reg_t;

#define ANT_CSR_RX_INTR_HI_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_RX_INTR_HI_STAT_RD_MASK (0x000003ffU)
#define ANT_CSR_RX_INTR_HI_STAT_WR_MASK (0x00000000U)


///< Status of ADC_DIG0 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG0_BF_OFF ( 0)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG0_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG0_BF_MSK (0x00000001)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG0_BF_DEF (0x00000000)

///< Status of ADC_DIG1 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG1_BF_OFF ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG1_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG1_BF_MSK (0x00000002)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG1_BF_DEF (0x00000000)

///< Status of ADC_DIG2 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG2_BF_OFF ( 2)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG2_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG2_BF_MSK (0x00000004)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG2_BF_DEF (0x00000000)

///< Status of ADC_DIG3 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG3_BF_OFF ( 3)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG3_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG3_BF_MSK (0x00000008)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_DIG3_BF_DEF (0x00000000)

///< Status of ASC0 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ASC0_BF_OFF ( 4)
#define ANT_CSR_RX_INTR_HI_STAT_ASC0_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ASC0_BF_MSK (0x00000010)
#define ANT_CSR_RX_INTR_HI_STAT_ASC0_BF_DEF (0x00000000)

///< Status of ASC1 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ASC1_BF_OFF ( 5)
#define ANT_CSR_RX_INTR_HI_STAT_ASC1_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ASC1_BF_MSK (0x00000020)
#define ANT_CSR_RX_INTR_HI_STAT_ASC1_BF_DEF (0x00000000)

///< Status of ASC2 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ASC2_BF_OFF ( 6)
#define ANT_CSR_RX_INTR_HI_STAT_ASC2_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ASC2_BF_MSK (0x00000040)
#define ANT_CSR_RX_INTR_HI_STAT_ASC2_BF_DEF (0x00000000)

///< Status of ASC3 HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ASC3_BF_OFF ( 7)
#define ANT_CSR_RX_INTR_HI_STAT_ASC3_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ASC3_BF_MSK (0x00000080)
#define ANT_CSR_RX_INTR_HI_STAT_ASC3_BF_DEF (0x00000000)

///< Status of ADC_CPU HIGH Priority Interrupt Status
#define ANT_CSR_RX_INTR_HI_STAT_ADC_CPU_BF_OFF ( 8)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_CPU_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_CPU_BF_MSK (0x00000100)
#define ANT_CSR_RX_INTR_HI_STAT_ADC_CPU_BF_DEF (0x00000000)

///< Status of RX Clock Crossing FIFO HIGH Priority Interrupt
#define ANT_CSR_RX_INTR_HI_STAT_CCF_RX_BF_OFF ( 9)
#define ANT_CSR_RX_INTR_HI_STAT_CCF_RX_BF_WID ( 1)
#define ANT_CSR_RX_INTR_HI_STAT_CCF_RX_BF_MSK (0x00000200)
#define ANT_CSR_RX_INTR_HI_STAT_CCF_RX_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_FB_INTR_LO_STAT register description at address offset 0x610
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/fb_intr_lo_stat
  * FB Intr_Low Status
  */

typedef union {
  struct {
    uint32_t FB_ADC_DIG : 1;
    ///< Status of FB_ADC_DIG Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FB_ASC : 1;
    ///< Status of FB_ASC Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CCF_FB_RX : 1;
    ///< Status of FB_RX_CCF Low Priority Interrupt
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_fb_intr_lo_stat_reg_t;

#define ANT_CSR_FB_INTR_LO_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_FB_INTR_LO_STAT_RD_MASK (0x00000007U)
#define ANT_CSR_FB_INTR_LO_STAT_WR_MASK (0x00000000U)


///< Status of FB_ADC_DIG Low Priority Interrupt Status
#define ANT_CSR_FB_INTR_LO_STAT_FB_ADC_DIG_BF_OFF ( 0)
#define ANT_CSR_FB_INTR_LO_STAT_FB_ADC_DIG_BF_WID ( 1)
#define ANT_CSR_FB_INTR_LO_STAT_FB_ADC_DIG_BF_MSK (0x00000001)
#define ANT_CSR_FB_INTR_LO_STAT_FB_ADC_DIG_BF_DEF (0x00000000)

///< Status of FB_ASC Low Priority Interrupt Status
#define ANT_CSR_FB_INTR_LO_STAT_FB_ASC_BF_OFF ( 1)
#define ANT_CSR_FB_INTR_LO_STAT_FB_ASC_BF_WID ( 1)
#define ANT_CSR_FB_INTR_LO_STAT_FB_ASC_BF_MSK (0x00000002)
#define ANT_CSR_FB_INTR_LO_STAT_FB_ASC_BF_DEF (0x00000000)

///< Status of FB_RX_CCF Low Priority Interrupt
#define ANT_CSR_FB_INTR_LO_STAT_CCF_FB_RX_BF_OFF ( 2)
#define ANT_CSR_FB_INTR_LO_STAT_CCF_FB_RX_BF_WID ( 1)
#define ANT_CSR_FB_INTR_LO_STAT_CCF_FB_RX_BF_MSK (0x00000004)
#define ANT_CSR_FB_INTR_LO_STAT_CCF_FB_RX_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_FB_INTR_HI_STAT register description at address offset 0x614
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/fb_intr_hi_stat
  * FB Intr_High Status
  */

typedef union {
  struct {
    uint32_t FB_ADC_DIG : 1;
    ///< Status of FB_ADC_DIG High Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FB_ASC : 1;
    ///< Status of FB_ASC High Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CCF_FB_RX : 1;
    ///< Status of FB_RX_CCF High Priority Interrupt
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_fb_intr_hi_stat_reg_t;

#define ANT_CSR_FB_INTR_HI_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_FB_INTR_HI_STAT_RD_MASK (0x00000007U)
#define ANT_CSR_FB_INTR_HI_STAT_WR_MASK (0x00000000U)


///< Status of FB_ADC_DIG High Priority Interrupt Status
#define ANT_CSR_FB_INTR_HI_STAT_FB_ADC_DIG_BF_OFF ( 0)
#define ANT_CSR_FB_INTR_HI_STAT_FB_ADC_DIG_BF_WID ( 1)
#define ANT_CSR_FB_INTR_HI_STAT_FB_ADC_DIG_BF_MSK (0x00000001)
#define ANT_CSR_FB_INTR_HI_STAT_FB_ADC_DIG_BF_DEF (0x00000000)

///< Status of FB_ASC High Priority Interrupt Status
#define ANT_CSR_FB_INTR_HI_STAT_FB_ASC_BF_OFF ( 1)
#define ANT_CSR_FB_INTR_HI_STAT_FB_ASC_BF_WID ( 1)
#define ANT_CSR_FB_INTR_HI_STAT_FB_ASC_BF_MSK (0x00000002)
#define ANT_CSR_FB_INTR_HI_STAT_FB_ASC_BF_DEF (0x00000000)

///< Status of FB_RX_CCF High Priority Interrupt
#define ANT_CSR_FB_INTR_HI_STAT_CCF_FB_RX_BF_OFF ( 2)
#define ANT_CSR_FB_INTR_HI_STAT_CCF_FB_RX_BF_WID ( 1)
#define ANT_CSR_FB_INTR_HI_STAT_CCF_FB_RX_BF_MSK (0x00000004)
#define ANT_CSR_FB_INTR_HI_STAT_CCF_FB_RX_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_TX_INTR_LO_STAT register description at address offset 0x618
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/tx_intr_lo_stat
  * tx_Intr_Low Status
  */

typedef union {
  struct {
    uint32_t DDAC0 : 1;
    ///< Status of DDAC0 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DDAC1 : 1;
    ///< Status of DDAC1 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DDAC2 : 1;
    ///< Status of DDAC2 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DDAC3 : 1;
    ///< Status of DDAC3 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t CCF_TX : 1;
    ///< Status of CCF TX Low Priority Interrupt
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_tx_intr_lo_stat_reg_t;

#define ANT_CSR_TX_INTR_LO_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_TX_INTR_LO_STAT_RD_MASK (0x0000001fU)
#define ANT_CSR_TX_INTR_LO_STAT_WR_MASK (0x00000000U)


///< Status of DDAC0 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_LO_STAT_DDAC0_BF_OFF ( 0)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC0_BF_WID ( 1)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC0_BF_MSK (0x00000001)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC0_BF_DEF (0x00000000)

///< Status of DDAC1 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_LO_STAT_DDAC1_BF_OFF ( 1)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC1_BF_WID ( 1)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC1_BF_MSK (0x00000002)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC1_BF_DEF (0x00000000)

///< Status of DDAC2 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_LO_STAT_DDAC2_BF_OFF ( 2)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC2_BF_WID ( 1)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC2_BF_MSK (0x00000004)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC2_BF_DEF (0x00000000)

///< Status of DDAC3 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_LO_STAT_DDAC3_BF_OFF ( 3)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC3_BF_WID ( 1)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC3_BF_MSK (0x00000008)
#define ANT_CSR_TX_INTR_LO_STAT_DDAC3_BF_DEF (0x00000000)

///< Status of CCF TX Low Priority Interrupt
#define ANT_CSR_TX_INTR_LO_STAT_CCF_TX_BF_OFF ( 4)
#define ANT_CSR_TX_INTR_LO_STAT_CCF_TX_BF_WID ( 1)
#define ANT_CSR_TX_INTR_LO_STAT_CCF_TX_BF_MSK (0x00000010)
#define ANT_CSR_TX_INTR_LO_STAT_CCF_TX_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_TX_INTR_HI_STAT register description at address offset 0x61c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/tx_intr_hi_stat
  * tx_Intr_high Status
  */

typedef union {
  struct {
    uint32_t DDAC0 : 1;
    ///< Status of DDAC0 High Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DDAC1 : 1;
    ///< Status of DDAC1 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DDAC2 : 1;
    ///< Status of DDAC2 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DDAC3 : 1;
    ///< Status of DDAC3 Low Priority Interrupt Status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t CCF_TX : 1;
    ///< Status of CCF TX Low Priority Interrupt
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_tx_intr_hi_stat_reg_t;

#define ANT_CSR_TX_INTR_HI_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_TX_INTR_HI_STAT_RD_MASK (0x0000001fU)
#define ANT_CSR_TX_INTR_HI_STAT_WR_MASK (0x00000000U)


///< Status of DDAC0 High Priority Interrupt Status
#define ANT_CSR_TX_INTR_HI_STAT_DDAC0_BF_OFF ( 0)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC0_BF_WID ( 1)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC0_BF_MSK (0x00000001)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC0_BF_DEF (0x00000000)

///< Status of DDAC1 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_HI_STAT_DDAC1_BF_OFF ( 1)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC1_BF_WID ( 1)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC1_BF_MSK (0x00000002)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC1_BF_DEF (0x00000000)

///< Status of DDAC2 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_HI_STAT_DDAC2_BF_OFF ( 2)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC2_BF_WID ( 1)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC2_BF_MSK (0x00000004)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC2_BF_DEF (0x00000000)

///< Status of DDAC3 Low Priority Interrupt Status
#define ANT_CSR_TX_INTR_HI_STAT_DDAC3_BF_OFF ( 3)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC3_BF_WID ( 1)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC3_BF_MSK (0x00000008)
#define ANT_CSR_TX_INTR_HI_STAT_DDAC3_BF_DEF (0x00000000)

///< Status of CCF TX Low Priority Interrupt
#define ANT_CSR_TX_INTR_HI_STAT_CCF_TX_BF_OFF ( 4)
#define ANT_CSR_TX_INTR_HI_STAT_CCF_TX_BF_WID ( 1)
#define ANT_CSR_TX_INTR_HI_STAT_CCF_TX_BF_MSK (0x00000010)
#define ANT_CSR_TX_INTR_HI_STAT_CCF_TX_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_DP_INIT_STAT register description at address offset 0x620
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_dp_init_stat
  * ANT DP_INIT Status Register
  */

typedef union {
  struct {
    uint32_t ADC_DIG : 4;
    ///< Hardware sets to one when the respective ADC_DIG Datapath Init is
    ///< complete.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ASC : 4;
    ///< Hardware sets to one when the respective ASC Datapath Init is complete.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DDAC : 4;
    ///< Hardware sets to one when the respective DDAC Datapath Init is complete.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t FB_ADC_DIG : 1;
    ///< Hardware sets to one when the Feedback ADC_DIG Datapath Init is complete.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t FB_ASC : 1;
    ///< Hardware sets to one when the Feedback ASC Datapath Init is complete.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t CMFF : 1;
    ///< Hardware sets to one when the CMFF Datapath Init is complete.
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t INIT_DONE : 1;
    ///< Hardware sets to one when the entirety of the datapath Init is complete.
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_dp_init_stat_reg_t;

#define ANT_CSR_ANT_DP_INIT_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_DP_INIT_STAT_RD_MASK (0x0000ffffU)
#define ANT_CSR_ANT_DP_INIT_STAT_WR_MASK (0x00000000U)


///< Hardware sets to one when the respective ADC_DIG Datapath Init is
///< complete.
#define ANT_CSR_ANT_DP_INIT_STAT_ADC_DIG_BF_OFF ( 0)
#define ANT_CSR_ANT_DP_INIT_STAT_ADC_DIG_BF_WID ( 4)
#define ANT_CSR_ANT_DP_INIT_STAT_ADC_DIG_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_DP_INIT_STAT_ADC_DIG_BF_DEF (0x00000000)

///< Hardware sets to one when the respective ASC Datapath Init is complete.
#define ANT_CSR_ANT_DP_INIT_STAT_ASC_BF_OFF ( 4)
#define ANT_CSR_ANT_DP_INIT_STAT_ASC_BF_WID ( 4)
#define ANT_CSR_ANT_DP_INIT_STAT_ASC_BF_MSK (0x000000F0)
#define ANT_CSR_ANT_DP_INIT_STAT_ASC_BF_DEF (0x00000000)

///< Hardware sets to one when the respective DDAC Datapath Init is complete.
#define ANT_CSR_ANT_DP_INIT_STAT_DDAC_BF_OFF ( 8)
#define ANT_CSR_ANT_DP_INIT_STAT_DDAC_BF_WID ( 4)
#define ANT_CSR_ANT_DP_INIT_STAT_DDAC_BF_MSK (0x00000F00)
#define ANT_CSR_ANT_DP_INIT_STAT_DDAC_BF_DEF (0x00000000)

///< Hardware sets to one when the Feedback ADC_DIG Datapath Init is complete.
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ADC_DIG_BF_OFF (12)
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ADC_DIG_BF_WID ( 1)
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ADC_DIG_BF_MSK (0x00001000)
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ADC_DIG_BF_DEF (0x00000000)

///< Hardware sets to one when the Feedback ASC Datapath Init is complete.
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ASC_BF_OFF (13)
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ASC_BF_WID ( 1)
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ASC_BF_MSK (0x00002000)
#define ANT_CSR_ANT_DP_INIT_STAT_FB_ASC_BF_DEF (0x00000000)

///< Hardware sets to one when the CMFF Datapath Init is complete.
#define ANT_CSR_ANT_DP_INIT_STAT_CMFF_BF_OFF (14)
#define ANT_CSR_ANT_DP_INIT_STAT_CMFF_BF_WID ( 1)
#define ANT_CSR_ANT_DP_INIT_STAT_CMFF_BF_MSK (0x00004000)
#define ANT_CSR_ANT_DP_INIT_STAT_CMFF_BF_DEF (0x00000000)

///< Hardware sets to one when the entirety of the datapath Init is complete.
#define ANT_CSR_ANT_DP_INIT_STAT_INIT_DONE_BF_OFF (15)
#define ANT_CSR_ANT_DP_INIT_STAT_INIT_DONE_BF_WID ( 1)
#define ANT_CSR_ANT_DP_INIT_STAT_INIT_DONE_BF_MSK (0x00008000)
#define ANT_CSR_ANT_DP_INIT_STAT_INIT_DONE_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_RX_ADC_START_BFN register description at address offset 0x624
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_rx_adc_start_bfn
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_rx_adc_start_bfn_reg_t;

#define ANT_CSR_ANT_RX_ADC_START_BFN_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_RX_ADC_START_BFN_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_RX_ADC_START_BFN_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_ANT_RX_ADC_START_BFN_OFFSET_BF_OFF ( 0)
#define ANT_CSR_ANT_RX_ADC_START_BFN_OFFSET_BF_WID (24)
#define ANT_CSR_ANT_RX_ADC_START_BFN_OFFSET_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ANT_RX_ADC_START_BFN_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define ANT_CSR_ANT_RX_ADC_START_BFN_FRAME_BF_OFF (24)
#define ANT_CSR_ANT_RX_ADC_START_BFN_FRAME_BF_WID ( 8)
#define ANT_CSR_ANT_RX_ADC_START_BFN_FRAME_BF_MSK (0xFF000000)
#define ANT_CSR_ANT_RX_ADC_START_BFN_FRAME_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_FB_ADC_START_BFN register description at address offset 0x628
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_fb_adc_start_bfn
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_ant_fb_adc_start_bfn_reg_t;

#define ANT_CSR_ANT_FB_ADC_START_BFN_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_FB_ADC_START_BFN_RD_MASK (0xffffffffU)
#define ANT_CSR_ANT_FB_ADC_START_BFN_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define ANT_CSR_ANT_FB_ADC_START_BFN_OFFSET_BF_OFF ( 0)
#define ANT_CSR_ANT_FB_ADC_START_BFN_OFFSET_BF_WID (24)
#define ANT_CSR_ANT_FB_ADC_START_BFN_OFFSET_BF_MSK (0x00FFFFFF)
#define ANT_CSR_ANT_FB_ADC_START_BFN_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define ANT_CSR_ANT_FB_ADC_START_BFN_FRAME_BF_OFF (24)
#define ANT_CSR_ANT_FB_ADC_START_BFN_FRAME_BF_WID ( 8)
#define ANT_CSR_ANT_FB_ADC_START_BFN_FRAME_BF_MSK (0xFF000000)
#define ANT_CSR_ANT_FB_ADC_START_BFN_FRAME_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_RX_INT_STATUS_R register description at address offset 0x630
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_rx_int_status_r
  * CCF RX Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_RXOUT0 : 1;
    ///< CCF RX Out_0 Underflow Error. See ccf_rx_out_stat0 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT0 : 1;
    ///< CCF RX Out_0 Overflow Error. See ccf_rx_out_stat0 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT1 : 1;
    ///< CCF RX Out_1 Underflow Error. See ccf_rx_out_stat1 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT1 : 1;
    ///< CCF RX Out_1 Overflow Error. See ccf_rx_out_stat1 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT2 : 1;
    ///< CCF RX Out_2 Underflow Error. See ccf_rx_out_stat2 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT2 : 1;
    ///< CCF RX Out_2 Overflow Error. See ccf_rx_out_stat2 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT3 : 1;
    ///< CCF RX Out_3 Underflow Error. See ccf_rx_out_stat3 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT3 : 1;
    ///< CCF RX Out_3 Overflow Error. See ccf_rx_out_stat3 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN0 : 1;
    ///< CCF RX IN_0 Underflow Error. See ccf_rx_in_stat0 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN0 : 1;
    ///< CCF RX IN_0 Overflow Error. See ccf_rx_in_stat0 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN1 : 1;
    ///< CCF RX IN_1 Underflow Error. See ccf_rx_in_stat1 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN1 : 1;
    ///< CCF RX IN_1 Overflow Error. See ccf_rx_in_stat1 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN2 : 1;
    ///< CCF RX IN_2 Underflow Error. See ccf_rx_in_stat2 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN2 : 1;
    ///< CCF RX IN_2 Overflow Error. See ccf_rx_in_stat2 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN3 : 1;
    ///< CCF RX IN_3 Underflow Error. See ccf_rx_in_stat3 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN3 : 1;
    ///< CCF RX IN_3 Overflow Error. See ccf_rx_in_stat3 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_int_stat_r_reg_t;

#define ANT_CSR_CCF_RX_INT_STAT_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_RX_INT_STAT_R_RD_MASK (0x0000ffffU)
#define ANT_CSR_CCF_RX_INT_STAT_R_WR_MASK (0x00000000U)


///< CCF RX Out_0 Underflow Error. See ccf_rx_out_stat0 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT0_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< CCF RX Out_0 Overflow Error. See ccf_rx_out_stat0 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT0_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< CCF RX Out_1 Underflow Error. See ccf_rx_out_stat1 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT1_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< CCF RX Out_1 Overflow Error. See ccf_rx_out_stat1 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT1_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< CCF RX Out_2 Underflow Error. See ccf_rx_out_stat2 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT2_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< CCF RX Out_2 Overflow Error. See ccf_rx_out_stat2 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT2_BF_OFF ( 5)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< CCF RX Out_3 Underflow Error. See ccf_rx_out_stat3 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT3_BF_OFF ( 6)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< CCF RX Out_3 Overflow Error. See ccf_rx_out_stat3 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT3_BF_OFF ( 7)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< CCF RX IN_0 Underflow Error. See ccf_rx_in_stat0 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN0_BF_OFF ( 8)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000100)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< CCF RX IN_0 Overflow Error. See ccf_rx_in_stat0 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN0_BF_OFF ( 9)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000200)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< CCF RX IN_1 Underflow Error. See ccf_rx_in_stat1 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN1_BF_OFF (10)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000400)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< CCF RX IN_1 Overflow Error. See ccf_rx_in_stat1 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN1_BF_OFF (11)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000800)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< CCF RX IN_2 Underflow Error. See ccf_rx_in_stat2 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN2_BF_OFF (12)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN2_BF_MSK (0x00001000)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< CCF RX IN_2 Overflow Error. See ccf_rx_in_stat2 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN2_BF_OFF (13)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN2_BF_MSK (0x00002000)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< CCF RX IN_3 Underflow Error. See ccf_rx_in_stat3 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN3_BF_OFF (14)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN3_BF_MSK (0x00004000)
#define ANT_CSR_CCF_RX_INT_STAT_R_UNFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)

///< CCF RX IN_3 Overflow Error. See ccf_rx_in_stat3 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN3_BF_OFF (15)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN3_BF_MSK (0x00008000)
#define ANT_CSR_CCF_RX_INT_STAT_R_OVFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_RX_INT_HIGH_R register description at address offset 0x634
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_rx_int_high_r
  * Assign CFF_RX_Interrupts as High_Priority
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNLOW_ERR_CCF_RXOUT1 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT1 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT2 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT2 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT3 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT3 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN0 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN0 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNLOW_ERR_CCF_RXIN1 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN1 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN2 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN2 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN3 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN3 : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_int_high_r_reg_t;

#define ANT_CSR_CCF_RX_INT_HIGH_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_RX_INT_HIGH_R_RD_MASK (0x0000ffffU)
#define ANT_CSR_CCF_RX_INT_HIGH_R_WR_MASK (0x0000ffffU)


///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT0_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT0_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXOUT1_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT1_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT2_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT2_BF_OFF ( 5)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT3_BF_OFF ( 6)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT3_BF_OFF ( 7)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN0_BF_OFF ( 8)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000100)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN0_BF_OFF ( 9)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000200)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXIN1_BF_OFF (10)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXIN1_BF_MSK (0x00000400)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN1_BF_OFF (11)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000800)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN2_BF_OFF (12)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN2_BF_MSK (0x00001000)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN2_BF_OFF (13)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN2_BF_MSK (0x00002000)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN3_BF_OFF (14)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN3_BF_MSK (0x00004000)
#define ANT_CSR_CCF_RX_INT_HIGH_R_UNFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN3_BF_OFF (15)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN3_BF_MSK (0x00008000)
#define ANT_CSR_CCF_RX_INT_HIGH_R_OVFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_RX_INT_LOW_R register description at address offset 0x638
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_rx_int_low_r
  * Assign CFF_RX  as low_Priority
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Assign corresponding interrupt as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT1 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT1 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT2 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT2 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT3 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT3 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN0 : 1;
    ///< Assign corresponding interrupt as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN0 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN1 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN1 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN2 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN2 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN3 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN3 : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_int_low_r_reg_t;

#define ANT_CSR_CCF_RX_INT_LOW_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_RX_INT_LOW_R_RD_MASK (0x0000ffffU)
#define ANT_CSR_CCF_RX_INT_LOW_R_WR_MASK (0x0000ffffU)


///< Assign corresponding interrupt as a Low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT0_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT0_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT1_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT1_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT2_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT2_BF_OFF ( 5)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT3_BF_OFF ( 6)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT3_BF_OFF ( 7)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a Low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN0_BF_OFF ( 8)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000100)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN0_BF_OFF ( 9)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000200)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN1_BF_OFF (10)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000400)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN1_BF_OFF (11)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000800)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN2_BF_OFF (12)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN2_BF_MSK (0x00001000)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN2_BF_OFF (13)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN2_BF_MSK (0x00002000)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN3_BF_OFF (14)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN3_BF_MSK (0x00004000)
#define ANT_CSR_CCF_RX_INT_LOW_R_UNFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN3_BF_OFF (15)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN3_BF_MSK (0x00008000)
#define ANT_CSR_CCF_RX_INT_LOW_R_OVFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_RX_INT_CLEAR_R register description at address offset 0x63c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_rx_int_clear_r
  * Clears Individual Interrupts
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT1 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT1 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT2 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT2 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXOUT3 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXOUT3 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN0 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN0 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN1 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN1 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN2 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN2 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_RXIN3 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_RXIN3 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_int_clr_r_reg_t;

#define ANT_CSR_CCF_RX_INT_CLR_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_RX_INT_CLR_R_RD_MASK (0x0000ffffU)
#define ANT_CSR_CCF_RX_INT_CLR_R_WR_MASK (0x0000ffffU)


///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT0_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT0_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT1_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT1_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT1_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT2_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT2_BF_OFF ( 5)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT2_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT3_BF_OFF ( 6)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT3_BF_OFF ( 7)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXOUT3_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN0_BF_OFF ( 8)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000100)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN0_BF_OFF ( 9)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN0_BF_MSK (0x00000200)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN0_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN1_BF_OFF (10)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000400)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN1_BF_OFF (11)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN1_BF_MSK (0x00000800)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN1_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN2_BF_OFF (12)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN2_BF_MSK (0x00001000)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN2_BF_OFF (13)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN2_BF_MSK (0x00002000)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN2_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN3_BF_OFF (14)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN3_BF_MSK (0x00004000)
#define ANT_CSR_CCF_RX_INT_CLR_R_UNFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN3_BF_OFF (15)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN3_BF_MSK (0x00008000)
#define ANT_CSR_CCF_RX_INT_CLR_R_OVFLOW_ERR_CCF_RXIN3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_RX_INT_FORCE_R register description at address offset 0x640
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_rx_int_force_r
  * Clears Individual Interrupts
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_RXOUT0 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXOUT0 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXOUT1 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXOUT1 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXOUT2 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXOUT2 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXOUT3 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXOUT3 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXIN0 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXIN0 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXIN1 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXIN1 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXIN2 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXIN2 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CFF_RXIN3 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CFF_RXIN3 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_int_force_r_reg_t;

#define ANT_CSR_CCF_RX_INT_FORCE_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_RX_INT_FORCE_R_RD_MASK (0x0000ffffU)
#define ANT_CSR_CCF_RX_INT_FORCE_R_WR_MASK (0x0000ffffU)


///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CCF_RXOUT0_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CCF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CCF_RXOUT0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CCF_RXOUT0_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT0_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT0_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT1_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT1_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT1_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT1_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT2_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT2_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT2_BF_OFF ( 5)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT2_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT3_BF_OFF ( 6)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXOUT3_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT3_BF_OFF ( 7)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXOUT3_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN0_BF_OFF ( 8)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN0_BF_MSK (0x00000100)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN0_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN0_BF_OFF ( 9)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN0_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN0_BF_MSK (0x00000200)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN0_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN1_BF_OFF (10)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN1_BF_MSK (0x00000400)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN1_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN1_BF_OFF (11)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN1_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN1_BF_MSK (0x00000800)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN1_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN2_BF_OFF (12)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN2_BF_MSK (0x00001000)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN2_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN2_BF_OFF (13)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN2_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN2_BF_MSK (0x00002000)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN2_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN3_BF_OFF (14)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN3_BF_MSK (0x00004000)
#define ANT_CSR_CCF_RX_INT_FORCE_R_UNFLOW_ERR_CFF_RXIN3_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN3_BF_OFF (15)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN3_BF_WID ( 1)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN3_BF_MSK (0x00008000)
#define ANT_CSR_CCF_RX_INT_FORCE_R_OVFLOW_ERR_CFF_RXIN3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_INT_STATUS_R register description at address offset 0x650
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_int_status_r
  * CCF FB RX Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t UNDERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< CCF FB RX Out_0 Underflow Error. See ccf_fb_rx_out_stat Register for
    ///< additional CCF Status details.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< CCF FB RX Out_0 Overflow Error. See ccf_fb_rx_out_stat Register for
    ///< additional CCF Status details.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_FB_IN : 1;
    ///< CCF FB RX IN Underflow Error. See ccf_fb_rx_in_stat Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_IN : 1;
    ///< CCF FB RX IN Overflow Error. See ccf_fb_rx_in_stat Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< CCF DCSRC DCSRC Underflow Error. See ccf_dcsrc_in_stat Register for
    ///< additional CCF Status details.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< CCF FB DCSRC Overflow Error. See ccf_dcsrc_in_stat Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_int_stat_r_reg_t;

#define ANT_CSR_CCF_FB_RX_INT_STAT_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_RD_MASK (0x0000003fU)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_WR_MASK (0x00000000U)


///< CCF FB RX Out_0 Underflow Error. See ccf_fb_rx_out_stat Register for
///< additional CCF Status details.
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< CCF FB RX Out_0 Overflow Error. See ccf_fb_rx_out_stat Register for
///< additional CCF Status details.
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< CCF FB RX IN Underflow Error. See ccf_fb_rx_in_stat Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_IN_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< CCF FB RX IN Overflow Error. See ccf_fb_rx_in_stat Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_IN_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< CCF DCSRC DCSRC Underflow Error. See ccf_dcsrc_in_stat Register for
///< additional CCF Status details.
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000010)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)

///< CCF FB DCSRC Overflow Error. See ccf_dcsrc_in_stat Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 5)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000020)
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_INT_HIGH_R register description at address offset 0x654
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_int_high_r
  * Assign CFF_FB_RX as High_Priority
  */

typedef union {
  struct {
    uint32_t UNDERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< Assign corresponding interrupt as a high priority interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_int_high_r_reg_t;

#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_RD_MASK (0x0000003fU)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_WR_MASK (0x0000003fU)


///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_IN_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_IN_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000010)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a high priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 5)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000020)
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_INT_LOW_R register description at address offset 0x658
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_int_low_r
  * Assign CFF_FB_RX_OUT_and_IN as low_Priority
  */

typedef union {
  struct {
    uint32_t UNDERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Assign corresponding interrupt as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< Assign corresponding interrupt as a low priority interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_int_low_r_reg_t;

#define ANT_CSR_CCF_FB_RX_INT_LOW_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_RD_MASK (0x0000003fU)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_WR_MASK (0x0000003fU)


///< Assign corresponding interrupt as a Low priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_IN_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_IN_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000010)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)

///< Assign corresponding interrupt as a low priority interrupt.
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 5)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000020)
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_OVERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_INT_CLEAR_R register description at address offset 0x65c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_int_clear_r
  * Clears Individual Interrupts
  */

typedef union {
  struct {
    uint32_t UNDERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Setting this bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Setting this bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Setting this bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CFF_FB_IN : 1;
    ///< Setting this bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_DCSRC_IN : 1;
    ///< Setting this bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CFF_DCSRC_IN : 1;
    ///< Setting this bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_int_clr_r_reg_t;

#define ANT_CSR_CCF_FB_RX_INT_CLR_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_RD_MASK (0x0000003fU)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_WR_MASK (0x0000003fU)


///< Setting this bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Setting this bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Setting this bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_IN_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Setting this bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_FB_IN_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_FB_IN_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_FB_IN_BF_DEF (0x00000000)

///< Setting this bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_MSK (0x00000010)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_UNDERFLOW_ERR_CCF_DCSRC_IN_BF_DEF (0x00000000)

///< Setting this bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_DCSRC_IN_BF_OFF ( 5)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_DCSRC_IN_BF_MSK (0x00000020)
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_OVERFLOW_ERR_CFF_DCSRC_IN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_INT_FORCE_R register description at address offset 0x660
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_int_force_r
  * Forces Individual Interrupts
  */

typedef union {
  struct {
    uint32_t UNDERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Setting this bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_OUT : 1;
    ///< Setting this bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Setting this bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_CCF_FB_IN : 1;
    ///< Setting this bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNDERFLOW_ERROR_DCSRC_IN : 1;
    ///< Setting this bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVERFLOW_ERROR_DCSRC_IN : 1;
    ///< Setting this bit to 1 forces the associated interrupt status to 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_int_force_r_reg_t;

#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_RD_MASK (0x0000003fU)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_WR_MASK (0x0000003fU)


///< Setting this bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Setting this bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_OUT_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_OUT_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_OUT_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_OUT_BF_DEF (0x00000000)

///< Setting this bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_IN_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Setting this bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_IN_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_IN_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_CCF_FB_IN_BF_DEF (0x00000000)

///< Setting this bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_DCSRC_IN_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_DCSRC_IN_BF_MSK (0x00000010)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_UNDERFLOW_ERR_DCSRC_IN_BF_DEF (0x00000000)

///< Setting this bit to 1 forces the associated interrupt status to 1
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_DCSRC_IN_BF_OFF ( 5)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_DCSRC_IN_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_DCSRC_IN_BF_MSK (0x00000020)
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_OVERFLOW_ERR_DCSRC_IN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_TX_INT_STATUS_R register description at address offset 0x670
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_tx_int_status_r
  * CCF TX Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_TX0 : 1;
    ///< CCF TXD IN 0 Underflow Error. See ccf_tx_in_stat0 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX0 : 1;
    ///< CCF TXD In 0 Overflow Error. See ccf_tx_in_stat0 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX1 : 1;
    ///< CCF TXD IN_1 Underflow Error. See ccf_tx_in_stat1 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX1 : 1;
    ///< CCF TXD IN_1 Overflow Error. See ccf_tx_in_stat1 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX2 : 1;
    ///< CCF TXD IN_2 Underflow Error. See ccf_tx_in_stat2 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX2 : 1;
    ///< CCF txd IN_2 Overflow Error. See ccf_tx_in_stat2 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX3 : 1;
    ///< CCF txd In 3 Underflow Error. See ccf_tx_in_stat3 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX3 : 1;
    ///< CCF TXD IN_3 Overflow Error. See ccf_tx_in_stat3 Register for additional
    ///< CCF Status details.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_tx_int_stat_r_reg_t;

#define ANT_CSR_CCF_TX_INT_STAT_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_TX_INT_STAT_R_RD_MASK (0x000000ffU)
#define ANT_CSR_CCF_TX_INT_STAT_R_WR_MASK (0x00000000U)


///< CCF TXD IN 0 Underflow Error. See ccf_tx_in_stat0 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX0_BF_OFF ( 0)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< CCF TXD In 0 Overflow Error. See ccf_tx_in_stat0 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX0_BF_OFF ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< CCF TXD IN_1 Underflow Error. See ccf_tx_in_stat1 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX1_BF_OFF ( 2)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< CCF TXD IN_1 Overflow Error. See ccf_tx_in_stat1 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX1_BF_OFF ( 3)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< CCF TXD IN_2 Underflow Error. See ccf_tx_in_stat2 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX2_BF_OFF ( 4)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< CCF txd IN_2 Overflow Error. See ccf_tx_in_stat2 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX2_BF_OFF ( 5)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< CCF txd In 3 Underflow Error. See ccf_tx_in_stat3 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX3_BF_OFF ( 6)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_TX_INT_STAT_R_UNFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)

///< CCF TXD IN_3 Overflow Error. See ccf_tx_in_stat3 Register for additional
///< CCF Status details.
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX3_BF_OFF ( 7)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_TX_INT_STAT_R_OVFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_TX_INT_HIGH_R register description at address offset 0x674
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_tx_int_high_r
  * Assign CCF TX as High Priority Interrupt
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_TX0 : 1;
    ///< Set to one to assign corresponding bit as a high prioroty interrupt
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX0 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX1 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX1 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX2 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX2 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX3 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX3 : 1;
    ///< Set to one to assign the corresponding bit as a High priority interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_tx_int_high_r_reg_t;

#define ANT_CSR_CCF_TX_INT_HIGH_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_TX_INT_HIGH_R_RD_MASK (0x000000ffU)
#define ANT_CSR_CCF_TX_INT_HIGH_R_WR_MASK (0x000000ffU)


///< Set to one to assign corresponding bit as a high prioroty interrupt
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX0_BF_OFF ( 0)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX0_BF_OFF ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX1_BF_OFF ( 2)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX1_BF_OFF ( 3)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX2_BF_OFF ( 4)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX2_BF_OFF ( 5)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX3_BF_OFF ( 6)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_TX_INT_HIGH_R_UNFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a High priority interrupt.
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX3_BF_OFF ( 7)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_TX_INT_HIGH_R_OVFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_TX_INT_LOW_R register description at address offset 0x678
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_tx_int_low_r
  * Assign CCF TX as Low Priority Interrupt
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_TX0 : 1;
    ///< Set to one to assign corresponding bit as a Low prioroty interrupt
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX0 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX1 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX1 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX2 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX2 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX3 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX3 : 1;
    ///< Set to one to assign the corresponding bit as a Low priority interrupt.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_tx_int_low_r_reg_t;

#define ANT_CSR_CCF_TX_INT_LOW_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_TX_INT_LOW_R_RD_MASK (0x000000ffU)
#define ANT_CSR_CCF_TX_INT_LOW_R_WR_MASK (0x000000ffU)


///< Set to one to assign corresponding bit as a Low prioroty interrupt
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX0_BF_OFF ( 0)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX0_BF_OFF ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX1_BF_OFF ( 2)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX1_BF_OFF ( 3)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX2_BF_OFF ( 4)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX2_BF_OFF ( 5)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX3_BF_OFF ( 6)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_TX_INT_LOW_R_UNFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)

///< Set to one to assign the corresponding bit as a Low priority interrupt.
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX3_BF_OFF ( 7)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_TX_INT_LOW_R_OVFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_TX_INT_CLEAR_R register description at address offset 0x67c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_tx_int_clear_r
  * Clear CCF TX Interrupt
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_TX0 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX0 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX1 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX1 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX2 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX2 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX3 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX3 : 1;
    ///< Setting a bit in this register clears the corresponding interrupt.
    ///< A read of this register returns the last value written.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_tx_int_clr_r_reg_t;

#define ANT_CSR_CCF_TX_INT_CLR_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_TX_INT_CLR_R_RD_MASK (0x000000ffU)
#define ANT_CSR_CCF_TX_INT_CLR_R_WR_MASK (0x000000ffU)


///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX0_BF_OFF ( 0)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX0_BF_OFF ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX1_BF_OFF ( 2)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX1_BF_OFF ( 3)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX2_BF_OFF ( 4)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX2_BF_OFF ( 5)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX3_BF_OFF ( 6)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_TX_INT_CLR_R_UNFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)

///< Setting a bit in this register clears the corresponding interrupt.
///< A read of this register returns the last value written.
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX3_BF_OFF ( 7)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_TX_INT_CLR_R_OVFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_TX_INT_FORCE_R register description at address offset 0x680
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ccf_tx_int_force_r
  * Force CCF TX Interrupt
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR_CCF_TX0 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX0 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX1 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX1 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX2 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX2 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t UNFLOW_ERR_CCF_TX3 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t OVFLOW_ERR_CCF_TX3 : 1;
    ///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
    ///< is a single cycle operation, the interrupt status bit will not be
    ///< held asserted. Reading returns the last value written.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_tx_int_force_r_reg_t;

#define ANT_CSR_CCF_TX_INT_FORCE_R_DEFAULT (0x00000000U)
#define ANT_CSR_CCF_TX_INT_FORCE_R_RD_MASK (0x000000ffU)
#define ANT_CSR_CCF_TX_INT_FORCE_R_WR_MASK (0x000000ffU)


///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX0_BF_OFF ( 0)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX0_BF_MSK (0x00000001)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX0_BF_OFF ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX0_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX0_BF_MSK (0x00000002)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX0_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX1_BF_OFF ( 2)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX1_BF_MSK (0x00000004)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX1_BF_OFF ( 3)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX1_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX1_BF_MSK (0x00000008)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX1_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX2_BF_OFF ( 4)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX2_BF_MSK (0x00000010)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX2_BF_OFF ( 5)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX2_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX2_BF_MSK (0x00000020)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX2_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX3_BF_OFF ( 6)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX3_BF_MSK (0x00000040)
#define ANT_CSR_CCF_TX_INT_FORCE_R_UNFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)

///< Setting  a bit to 1 forces the associated interrupt status to 1. Forcing
///< is a single cycle operation, the interrupt status bit will not be
///< held asserted. Reading returns the last value written.
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX3_BF_OFF ( 7)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX3_BF_WID ( 1)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX3_BF_MSK (0x00000080)
#define ANT_CSR_CCF_TX_INT_FORCE_R_OVFLOW_ERR_CCF_TX3_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_RX_OUT_STAT[4] register description at address offset 0x690
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ccf_rx_out_stat
  * Clock-Crossing RX Status
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR : 1;
    ///< Clock Crossing FIFO Underflow Error
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR : 1;
    ///< Clock Crossing FIFO Overflow Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Clock Crossing FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Clock Crossing FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEPTH : 5;
    ///< Clock Crossing FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_out_stat_reg_t;

#define ANT_CSR_CCF_RX_OUT_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CCF_RX_OUT_STAT_RD_MASK (0x000001ffU)
#define ANT_CSR_CCF_RX_OUT_STAT_WR_MASK (0x00000000U)


///< Clock Crossing FIFO Underflow Error
#define ANT_CSR_CCF_RX_OUT_STAT_UNFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_OUT_STAT_UNFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_RX_OUT_STAT_UNFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_OUT_STAT_UNFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Overflow Error
#define ANT_CSR_CCF_RX_OUT_STAT_OVFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_OUT_STAT_OVFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_RX_OUT_STAT_OVFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_OUT_STAT_OVFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Empty
#define ANT_CSR_CCF_RX_OUT_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_OUT_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CCF_RX_OUT_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_OUT_STAT_EMPTY_BF_DEF (0x00000004)

///< Clock Crossing FIFO Full
#define ANT_CSR_CCF_RX_OUT_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_OUT_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CCF_RX_OUT_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_OUT_STAT_FULL_BF_DEF (0x00000000)

///< Clock Crossing FIFO Depth
#define ANT_CSR_CCF_RX_OUT_STAT_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_OUT_STAT_DEPTH_BF_WID ( 5)
#define ANT_CSR_CCF_RX_OUT_STAT_DEPTH_BF_MSK (0x000001F0)
#define ANT_CSR_CCF_RX_OUT_STAT_DEPTH_BF_DEF (0x00000000)
#define ANT_CSR_CCF_RX_OUT_STAT_ARR_SZ0 (4)
#define ANT_CSR_CCF_RX_OUT_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_CCF_RX_IN_STAT[4] register description at address offset 0x6a0
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ccf_rx_in_stat
  * Clock-Crossing RX IN Status
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR : 1;
    ///< Clock Crossing FIFO Underflow Error.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR : 1;
    ///< Clock Crossing FIFO Overflow Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Clock Crossing FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Clock Crossing FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEPTH : 5;
    ///< Clock Crossing FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_rx_in_stat_reg_t;

#define ANT_CSR_CCF_RX_IN_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CCF_RX_IN_STAT_RD_MASK (0x000001ffU)
#define ANT_CSR_CCF_RX_IN_STAT_WR_MASK (0x00000000U)


///< Clock Crossing FIFO Underflow Error.
#define ANT_CSR_CCF_RX_IN_STAT_UNFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CCF_RX_IN_STAT_UNFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_RX_IN_STAT_UNFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CCF_RX_IN_STAT_UNFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Overflow Error
#define ANT_CSR_CCF_RX_IN_STAT_OVFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CCF_RX_IN_STAT_OVFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_RX_IN_STAT_OVFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CCF_RX_IN_STAT_OVFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Empty
#define ANT_CSR_CCF_RX_IN_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CCF_RX_IN_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CCF_RX_IN_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CCF_RX_IN_STAT_EMPTY_BF_DEF (0x00000004)

///< Clock Crossing FIFO Full
#define ANT_CSR_CCF_RX_IN_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CCF_RX_IN_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CCF_RX_IN_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CCF_RX_IN_STAT_FULL_BF_DEF (0x00000000)

///< Clock Crossing FIFO Depth
#define ANT_CSR_CCF_RX_IN_STAT_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CCF_RX_IN_STAT_DEPTH_BF_WID ( 5)
#define ANT_CSR_CCF_RX_IN_STAT_DEPTH_BF_MSK (0x000001F0)
#define ANT_CSR_CCF_RX_IN_STAT_DEPTH_BF_DEF (0x00000000)
#define ANT_CSR_CCF_RX_IN_STAT_ARR_SZ0 (4)
#define ANT_CSR_CCF_RX_IN_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_CCF_TX_IN_STAT[4] register description at address offset 0x6b0
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ccf_tx_in_stat
  * Clock-Crossing TX-SMC_to_DAC Status
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR : 1;
    ///< Clock Crossing FIFO Underflow Error
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR : 1;
    ///< Clock Crossing FIFO Overflow Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Clock Crossing FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Clock Crossing FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEPTH : 5;
    ///< Clock Crossing FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_tx_in_stat_reg_t;

#define ANT_CSR_CCF_TX_IN_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CCF_TX_IN_STAT_RD_MASK (0x000001ffU)
#define ANT_CSR_CCF_TX_IN_STAT_WR_MASK (0x00000000U)


///< Clock Crossing FIFO Underflow Error
#define ANT_CSR_CCF_TX_IN_STAT_UNFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CCF_TX_IN_STAT_UNFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_TX_IN_STAT_UNFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CCF_TX_IN_STAT_UNFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Overflow Error
#define ANT_CSR_CCF_TX_IN_STAT_OVFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CCF_TX_IN_STAT_OVFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_TX_IN_STAT_OVFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CCF_TX_IN_STAT_OVFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Empty
#define ANT_CSR_CCF_TX_IN_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CCF_TX_IN_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CCF_TX_IN_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CCF_TX_IN_STAT_EMPTY_BF_DEF (0x00000004)

///< Clock Crossing FIFO Full
#define ANT_CSR_CCF_TX_IN_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CCF_TX_IN_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CCF_TX_IN_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CCF_TX_IN_STAT_FULL_BF_DEF (0x00000000)

///< Clock Crossing FIFO Depth
#define ANT_CSR_CCF_TX_IN_STAT_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CCF_TX_IN_STAT_DEPTH_BF_WID ( 5)
#define ANT_CSR_CCF_TX_IN_STAT_DEPTH_BF_MSK (0x000001F0)
#define ANT_CSR_CCF_TX_IN_STAT_DEPTH_BF_DEF (0x00000000)
#define ANT_CSR_CCF_TX_IN_STAT_ARR_SZ0 (4)
#define ANT_CSR_CCF_TX_IN_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_OUT_STAT register description at address offset 0x6c0
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_out_stat
  * Clock-Crossing RX Status
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR : 1;
    ///< Clock Crossing FIFO Underflow Error
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR : 1;
    ///< Clock Crossing FIFO Overflow Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Clock Crossing FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Clock Crossing FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEPTH : 5;
    ///< Clock Crossing FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_out_stat_reg_t;

#define ANT_CSR_CCF_FB_RX_OUT_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_RD_MASK (0x000001ffU)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_WR_MASK (0x00000000U)


///< Clock Crossing FIFO Underflow Error
#define ANT_CSR_CCF_FB_RX_OUT_STAT_UNFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_UNFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_UNFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_UNFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Overflow Error
#define ANT_CSR_CCF_FB_RX_OUT_STAT_OVFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_OVFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_OVFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_OVFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Empty
#define ANT_CSR_CCF_FB_RX_OUT_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_EMPTY_BF_DEF (0x00000004)

///< Clock Crossing FIFO Full
#define ANT_CSR_CCF_FB_RX_OUT_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_FULL_BF_DEF (0x00000000)

///< Clock Crossing FIFO Depth
#define ANT_CSR_CCF_FB_RX_OUT_STAT_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_DEPTH_BF_WID ( 5)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_DEPTH_BF_MSK (0x000001F0)
#define ANT_CSR_CCF_FB_RX_OUT_STAT_DEPTH_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_FB_RX_IN_STAT register description at address offset 0x6c4
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ccf_fb_rx_in_stat
  * Clock-Crossing RX IN Status
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR : 1;
    ///< Clock Crossing FIFO Underflow Error.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR : 1;
    ///< Clock Crossing FIFO Overflow Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Clock Crossing FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Clock Crossing FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEPTH : 5;
    ///< Clock Crossing FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_fb_rx_in_stat_reg_t;

#define ANT_CSR_CCF_FB_RX_IN_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CCF_FB_RX_IN_STAT_RD_MASK (0x000001ffU)
#define ANT_CSR_CCF_FB_RX_IN_STAT_WR_MASK (0x00000000U)


///< Clock Crossing FIFO Underflow Error.
#define ANT_CSR_CCF_FB_RX_IN_STAT_UNFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CCF_FB_RX_IN_STAT_UNFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_IN_STAT_UNFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CCF_FB_RX_IN_STAT_UNFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Overflow Error
#define ANT_CSR_CCF_FB_RX_IN_STAT_OVFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CCF_FB_RX_IN_STAT_OVFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_IN_STAT_OVFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CCF_FB_RX_IN_STAT_OVFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Empty
#define ANT_CSR_CCF_FB_RX_IN_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CCF_FB_RX_IN_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_IN_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CCF_FB_RX_IN_STAT_EMPTY_BF_DEF (0x00000004)

///< Clock Crossing FIFO Full
#define ANT_CSR_CCF_FB_RX_IN_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CCF_FB_RX_IN_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CCF_FB_RX_IN_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CCF_FB_RX_IN_STAT_FULL_BF_DEF (0x00000000)

///< Clock Crossing FIFO Depth
#define ANT_CSR_CCF_FB_RX_IN_STAT_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CCF_FB_RX_IN_STAT_DEPTH_BF_WID ( 5)
#define ANT_CSR_CCF_FB_RX_IN_STAT_DEPTH_BF_MSK (0x000001F0)
#define ANT_CSR_CCF_FB_RX_IN_STAT_DEPTH_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_CCF_DCSRC_IN_STAT register description at address offset 0x6c8
  *
  * Register default value:        0x00000004
  * Register full path in IP: ant_csr_map/reg/ccf_dcsrc_in_stat
  * Clock-Crossing DCSRC IN Status
  */

typedef union {
  struct {
    uint32_t UNFLOW_ERR : 1;
    ///< Clock Crossing FIFO Underflow Error.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t OVFLOW_ERR : 1;
    ///< Clock Crossing FIFO Overflow Error
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< Clock Crossing FIFO Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< Clock Crossing FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DEPTH : 5;
    ///< Clock Crossing FIFO Depth
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ccf_dcsrc_in_stat_reg_t;

#define ANT_CSR_CCF_DCSRC_IN_STAT_DEFAULT (0x00000004U)
#define ANT_CSR_CCF_DCSRC_IN_STAT_RD_MASK (0x000001ffU)
#define ANT_CSR_CCF_DCSRC_IN_STAT_WR_MASK (0x00000000U)


///< Clock Crossing FIFO Underflow Error.
#define ANT_CSR_CCF_DCSRC_IN_STAT_UNFLOW_ERR_BF_OFF ( 0)
#define ANT_CSR_CCF_DCSRC_IN_STAT_UNFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_DCSRC_IN_STAT_UNFLOW_ERR_BF_MSK (0x00000001)
#define ANT_CSR_CCF_DCSRC_IN_STAT_UNFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Overflow Error
#define ANT_CSR_CCF_DCSRC_IN_STAT_OVFLOW_ERR_BF_OFF ( 1)
#define ANT_CSR_CCF_DCSRC_IN_STAT_OVFLOW_ERR_BF_WID ( 1)
#define ANT_CSR_CCF_DCSRC_IN_STAT_OVFLOW_ERR_BF_MSK (0x00000002)
#define ANT_CSR_CCF_DCSRC_IN_STAT_OVFLOW_ERR_BF_DEF (0x00000000)

///< Clock Crossing FIFO Empty
#define ANT_CSR_CCF_DCSRC_IN_STAT_EMPTY_BF_OFF ( 2)
#define ANT_CSR_CCF_DCSRC_IN_STAT_EMPTY_BF_WID ( 1)
#define ANT_CSR_CCF_DCSRC_IN_STAT_EMPTY_BF_MSK (0x00000004)
#define ANT_CSR_CCF_DCSRC_IN_STAT_EMPTY_BF_DEF (0x00000004)

///< Clock Crossing FIFO Full
#define ANT_CSR_CCF_DCSRC_IN_STAT_FULL_BF_OFF ( 3)
#define ANT_CSR_CCF_DCSRC_IN_STAT_FULL_BF_WID ( 1)
#define ANT_CSR_CCF_DCSRC_IN_STAT_FULL_BF_MSK (0x00000008)
#define ANT_CSR_CCF_DCSRC_IN_STAT_FULL_BF_DEF (0x00000000)

///< Clock Crossing FIFO Depth
#define ANT_CSR_CCF_DCSRC_IN_STAT_DEPTH_BF_OFF ( 4)
#define ANT_CSR_CCF_DCSRC_IN_STAT_DEPTH_BF_WID ( 5)
#define ANT_CSR_CCF_DCSRC_IN_STAT_DEPTH_BF_MSK (0x000001F0)
#define ANT_CSR_CCF_DCSRC_IN_STAT_DEPTH_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_RX_EN_EVENT_STAT register description at address offset 0x6cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_rx_en_event_stat
  * RX_EN Event Status
  */

typedef union {
  struct {
    uint32_t RX_EN_SEQ0 : 4;
    ///< Indicates current output level for each RX_EN Sequencer 0 enable event
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_SEQ1 : 4;
    ///< Indicates current output level for each RX_EN Sequencer 1 enable event
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_EN_PAUSE : 4;
    ///< Indicates current output level for each RX_EN Pause event
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_EN_RESUME : 4;
    ///< Indicates current output level for each RX_EN resume event
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RX_EN : 4;
    ///< State of the synchronized per-channel RX_EN from syscon
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_rx_en_event_stat_reg_t;

#define ANT_CSR_ANT_RX_EN_EVENT_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RD_MASK (0x000fffffU)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_WR_MASK (0x00000000U)


///< Indicates current output level for each RX_EN Sequencer 0 enable event
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ0_BF_OFF ( 0)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ0_BF_WID ( 4)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ0_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ0_BF_DEF (0x00000000)

///< Indicates current output level for each RX_EN Sequencer 1 enable event
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ1_BF_OFF ( 4)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ1_BF_WID ( 4)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ1_BF_MSK (0x000000F0)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_SEQ1_BF_DEF (0x00000000)

///< Indicates current output level for each RX_EN Pause event
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_PAUSE_BF_OFF ( 8)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_PAUSE_BF_WID ( 4)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_PAUSE_BF_MSK (0x00000F00)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_PAUSE_BF_DEF (0x00000000)

///< Indicates current output level for each RX_EN resume event
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_RESUME_BF_OFF (12)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_RESUME_BF_WID ( 4)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_RESUME_BF_MSK (0x0000F000)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_RESUME_BF_DEF (0x00000000)

///< State of the synchronized per-channel RX_EN from syscon
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_BF_OFF (16)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_BF_WID ( 4)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_BF_MSK (0x000F0000)
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_RX_EN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_TX_EN_EVENT_STAT register description at address offset 0x6d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_tx_en_event_stat
  * TX_EN Event Status
  */

typedef union {
  struct {
    uint32_t TX_EN_SEQ0 : 4;
    ///< Indicates current output level for each TX_EN Sequencer 0 enable event
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TX_EN_SEQ1 : 4;
    ///< Indicates current output level for each TX_EN Sequencer 1 enable event
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TX_EN : 4;
    ///< State of the synchronized per-channel TX_EN from syscon
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_tx_en_event_stat_reg_t;

#define ANT_CSR_ANT_TX_EN_EVENT_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_RD_MASK (0x00000fffU)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_WR_MASK (0x00000000U)


///< Indicates current output level for each TX_EN Sequencer 0 enable event
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ0_BF_OFF ( 0)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ0_BF_WID ( 4)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ0_BF_MSK (0x0000000F)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ0_BF_DEF (0x00000000)

///< Indicates current output level for each TX_EN Sequencer 1 enable event
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ1_BF_OFF ( 4)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ1_BF_WID ( 4)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ1_BF_MSK (0x000000F0)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_SEQ1_BF_DEF (0x00000000)

///< State of the synchronized per-channel TX_EN from syscon
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_BF_OFF ( 8)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_BF_WID ( 4)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_BF_MSK (0x00000F00)
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_TX_EN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_ANT_FB_EN_EVENT_STAT register description at address offset 0x6d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ant_csr_map/reg/ant_fb_en_event_stat
  * FB_EN Event Status
  */

typedef union {
  struct {
    uint32_t FB_EN_SEQ0 : 1;
    ///< Indicates current output level for the FB_EN Sequencer 0 enable event
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FB_EN_SEQ1 : 1;
    ///< Indicates current output level for the FB_EN Sequencer 1 enable event
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t FB_EN_PAUSE : 1;
    ///< Indicates current output level for the FB_EN Pause event
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t FB_EN_RESUME : 1;
    ///< Indicates current output level for the FB_EN Resume event
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t FB_EN : 1;
    ///< State of the synchronized FB_EN from syscon
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} ant_csr_ant_fb_en_event_stat_reg_t;

#define ANT_CSR_ANT_FB_EN_EVENT_STAT_DEFAULT (0x00000000U)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_RD_MASK (0x0000001fU)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_WR_MASK (0x00000000U)


///< Indicates current output level for the FB_EN Sequencer 0 enable event
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ0_BF_OFF ( 0)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ0_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ0_BF_MSK (0x00000001)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ0_BF_DEF (0x00000000)

///< Indicates current output level for the FB_EN Sequencer 1 enable event
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ1_BF_OFF ( 1)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ1_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ1_BF_MSK (0x00000002)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_SEQ1_BF_DEF (0x00000000)

///< Indicates current output level for the FB_EN Pause event
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_PAUSE_BF_OFF ( 2)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_PAUSE_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_PAUSE_BF_MSK (0x00000004)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_PAUSE_BF_DEF (0x00000000)

///< Indicates current output level for the FB_EN Resume event
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_RESUME_BF_OFF ( 3)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_RESUME_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_RESUME_BF_MSK (0x00000008)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_RESUME_BF_DEF (0x00000000)

///< State of the synchronized FB_EN from syscon
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_BF_OFF ( 4)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_BF_WID ( 1)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_BF_MSK (0x00000010)
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_FB_EN_BF_DEF (0x00000000)


/** @brief ANT_CSR_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x6d8
  *
  * Register default value:        0x00010000
  * Register full path in IP: ant_csr_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} ant_csr_apb_brdg_stat_reg_t;

#define ANT_CSR_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define ANT_CSR_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define ANT_CSR_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define ANT_CSR_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define ANT_CSR_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define ANT_CSR_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define ANT_CSR_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define ANT_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define ANT_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define ANT_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define ANT_CSR_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define ANT_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define ANT_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define ANT_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define ANT_CSR_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define ANT_CSR_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define ANT_CSR_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define ANT_CSR_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define ANT_CSR_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define ANT_CSR_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define ANT_CSR_SCRATCH_REG(_BASE) ((ant_csr_scratch_reg_t*) ANT_CSR_SCRATCH_ADR(_BASE))
#define ANT_CSR_ASC_ANT_RATE_REG(_BASE) ((ant_csr_asc_ant_rate_reg_t*) ANT_CSR_ASC_ANT_RATE_ADR(_BASE))
#define ANT_CSR_ASC_XT_BYP_REG(_BASE) ((ant_csr_asc_xt_byp_reg_t*) ANT_CSR_ASC_XT_BYP_ADR(_BASE))
#define ANT_CSR_FB_ASC_ANT_RATE_REG(_BASE) ((ant_csr_fb_asc_ant_rate_reg_t*) ANT_CSR_FB_ASC_ANT_RATE_ADR(_BASE))
#define ANT_CSR_ANT_DCSRC_CONF0_REG(_BASE) ((ant_csr_ant_dcsrc_conf0_reg_t*) ANT_CSR_ANT_DCSRC_CONF0_ADR(_BASE))
#define ANT_CSR_ANT_DCSRC_CONF1_REG(_BASE) ((ant_csr_ant_dcsrc_conf1_reg_t*) ANT_CSR_ANT_DCSRC_CONF1_ADR(_BASE))
#define ANT_CSR_ANT_DPATH_CONF_REG(_BASE) ((ant_csr_ant_dpath_conf_reg_t*) ANT_CSR_ANT_DPATH_CONF_ADR(_BASE))
#define ANT_CSR_ANT_BSG_CFG_REG(_BASE) ((ant_csr_ant_bsg_cfg_reg_t*) ANT_CSR_ANT_BSG_CFG_ADR(_BASE))
#define ANT_CSR_ANT_BSG_DC_VAL_REG(_BASE) ((ant_csr_ant_bsg_dc_val_reg_t*) ANT_CSR_ANT_BSG_DC_VAL_ADR(_BASE))
#define ANT_CSR_ANT_CAPT_TMUX_CTRL_REG(_BASE) ((ant_csr_ant_capt_tmux_ctrl_reg_t*) ANT_CSR_ANT_CAPT_TMUX_CTRL_ADR(_BASE))
#define ANT_CSR_ANT_CCF_INIT_REG(_BASE) ((ant_csr_ant_ccf_init_reg_t*) ANT_CSR_ANT_CCF_INIT_ADR(_BASE))
#define ANT_CSR_ANT_DP_INIT_REG(_BASE) ((ant_csr_ant_dp_init_reg_t*) ANT_CSR_ANT_DP_INIT_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG0_REG(_BASE) ((ant_csr_ant_rx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ0_CFG0_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG1_REG(_BASE) ((ant_csr_ant_rx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ0_CFG1_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG2_REG(_BASE) ((ant_csr_ant_rx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ0_CFG2_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ0_CFG3_REG(_BASE) ((ant_csr_ant_rx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ0_CFG3_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG0_REG(_BASE) ((ant_csr_ant_rx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ1_CFG0_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG1_REG(_BASE) ((ant_csr_ant_rx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ1_CFG1_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG2_REG(_BASE) ((ant_csr_ant_rx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ1_CFG2_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_SEQ1_CFG3_REG(_BASE) ((ant_csr_ant_rx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_RX_EN_SEQ1_CFG3_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG0_REG(_BASE) ((ant_csr_ant_rx_en_pause_cfg_reg_t*) ANT_CSR_ANT_RX_EN_PAUSE_CFG0_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG1_REG(_BASE) ((ant_csr_ant_rx_en_pause_cfg_reg_t*) ANT_CSR_ANT_RX_EN_PAUSE_CFG1_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG2_REG(_BASE) ((ant_csr_ant_rx_en_pause_cfg_reg_t*) ANT_CSR_ANT_RX_EN_PAUSE_CFG2_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_PAUSE_CFG3_REG(_BASE) ((ant_csr_ant_rx_en_pause_cfg_reg_t*) ANT_CSR_ANT_RX_EN_PAUSE_CFG3_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG0_REG(_BASE) ((ant_csr_ant_rx_en_resume_cfg_reg_t*) ANT_CSR_ANT_RX_EN_RESUME_CFG0_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG1_REG(_BASE) ((ant_csr_ant_rx_en_resume_cfg_reg_t*) ANT_CSR_ANT_RX_EN_RESUME_CFG1_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG2_REG(_BASE) ((ant_csr_ant_rx_en_resume_cfg_reg_t*) ANT_CSR_ANT_RX_EN_RESUME_CFG2_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_RESUME_CFG3_REG(_BASE) ((ant_csr_ant_rx_en_resume_cfg_reg_t*) ANT_CSR_ANT_RX_EN_RESUME_CFG3_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG0_REG(_BASE) ((ant_csr_ant_tx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ0_CFG0_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG1_REG(_BASE) ((ant_csr_ant_tx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ0_CFG1_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG2_REG(_BASE) ((ant_csr_ant_tx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ0_CFG2_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ0_CFG3_REG(_BASE) ((ant_csr_ant_tx_en_seq0_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ0_CFG3_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG0_REG(_BASE) ((ant_csr_ant_tx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ1_CFG0_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG1_REG(_BASE) ((ant_csr_ant_tx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ1_CFG1_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG2_REG(_BASE) ((ant_csr_ant_tx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ1_CFG2_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_SEQ1_CFG3_REG(_BASE) ((ant_csr_ant_tx_en_seq1_cfg_reg_t*) ANT_CSR_ANT_TX_EN_SEQ1_CFG3_ADR(_BASE))
#define ANT_CSR_ANT_FB_EN_SEQ0_CFG_REG(_BASE) ((ant_csr_ant_fb_en_seq0_cfg_reg_t*) ANT_CSR_ANT_FB_EN_SEQ0_CFG_ADR(_BASE))
#define ANT_CSR_ANT_FB_EN_SEQ1_CFG_REG(_BASE) ((ant_csr_ant_fb_en_seq1_cfg_reg_t*) ANT_CSR_ANT_FB_EN_SEQ1_CFG_ADR(_BASE))
#define ANT_CSR_ANT_FB_EN_PAUSE_CFG_REG(_BASE) ((ant_csr_ant_fb_en_pause_cfg_reg_t*) ANT_CSR_ANT_FB_EN_PAUSE_CFG_ADR(_BASE))
#define ANT_CSR_ANT_FB_EN_RESUME_CFG_REG(_BASE) ((ant_csr_ant_fb_en_resume_cfg_reg_t*) ANT_CSR_ANT_FB_EN_RESUME_CFG_ADR(_BASE))
#define ANT_CSR_ANT_CCF_RX_OUT_CFG_REG(_BASE) ((ant_csr_ant_ccf_rx_out_cfg_reg_t*) ANT_CSR_ANT_CCF_RX_OUT_CFG_ADR(_BASE))
#define ANT_CSR_ANT_CCF_RX_IN_CFG_REG(_BASE) ((ant_csr_ant_ccf_rx_in_cfg_reg_t*) ANT_CSR_ANT_CCF_RX_IN_CFG_ADR(_BASE))
#define ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_REG(_BASE) ((ant_csr_ant_ccf_fb_rx_out_cfg_reg_t*) ANT_CSR_ANT_CCF_FB_RX_OUT_CFG_ADR(_BASE))
#define ANT_CSR_ANT_CCF_FB_RX_IN_CFG_REG(_BASE) ((ant_csr_ant_ccf_fb_rx_in_cfg_reg_t*) ANT_CSR_ANT_CCF_FB_RX_IN_CFG_ADR(_BASE))
#define ANT_CSR_ANT_CCF_DCSRC_IN_CFG_REG(_BASE) ((ant_csr_ant_ccf_dcsrc_in_cfg_reg_t*) ANT_CSR_ANT_CCF_DCSRC_IN_CFG_ADR(_BASE))
#define ANT_CSR_CMFF_CFG_REG(_BASE) ((ant_csr_cmff_cfg_reg_t*) ANT_CSR_CMFF_CFG_ADR(_BASE))
#define ANT_CSR_CMFF_CTRL_REG(_BASE) ((ant_csr_cmff_ctrl_reg_t*) ANT_CSR_CMFF_CTRL_ADR(_BASE))
#define ANT_CSR_ANT_BSG_DC_INCR_REG(_BASE) ((ant_csr_ant_bsg_dc_incr_reg_t*) ANT_CSR_ANT_BSG_DC_INCR_ADR(_BASE))
#define ANT_CSR_ISYNC_CTRL_REG(_BASE) ((ant_csr_isync_ctrl_reg_t*) ANT_CSR_ISYNC_CTRL_ADR(_BASE))
#define ANT_CSR_ISYNC_LCNT_INC_REG(_BASE) ((ant_csr_isync_lcnt_inc_reg_t*) ANT_CSR_ISYNC_LCNT_INC_ADR(_BASE))
#define ANT_CSR_ISYNC_TEN_MS_CNT_REG(_BASE) ((ant_csr_isync_ten_ms_cnt_reg_t*) ANT_CSR_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define ANT_CSR_ISYNC_INC_PRE_REG(_BASE) ((ant_csr_isync_inc_pre_reg_t*) ANT_CSR_ISYNC_INC_PRE_ADR(_BASE))
#define ANT_CSR_ISYNC_CNT_ADJ_REG(_BASE) ((ant_csr_isync_cnt_adj_reg_t*) ANT_CSR_ISYNC_CNT_ADJ_ADR(_BASE))
#define ANT_CSR_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((ant_csr_isync_bfn_cnt_sync_reg_t*) ANT_CSR_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define ANT_CSR_ISYNC_BFN_CNT_REG(_BASE) ((ant_csr_isync_bfn_cnt_reg_t*) ANT_CSR_ISYNC_BFN_CNT_ADR(_BASE))
#define ANT_CSR_BFNE_CFG0_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG0_ADR(_BASE))
#define ANT_CSR_BFNE_CFG1_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG1_ADR(_BASE))
#define ANT_CSR_BFNE_CFG2_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG2_ADR(_BASE))
#define ANT_CSR_BFNE_CFG3_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG3_ADR(_BASE))
#define ANT_CSR_BFNE_CFG4_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG4_ADR(_BASE))
#define ANT_CSR_BFNE_CFG5_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG5_ADR(_BASE))
#define ANT_CSR_BFNE_CFG6_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG6_ADR(_BASE))
#define ANT_CSR_BFNE_CFG7_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG7_ADR(_BASE))
#define ANT_CSR_BFNE_CFG8_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG8_ADR(_BASE))
#define ANT_CSR_BFNE_CFG9_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG9_ADR(_BASE))
#define ANT_CSR_BFNE_CFG10_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG10_ADR(_BASE))
#define ANT_CSR_BFNE_CFG11_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG11_ADR(_BASE))
#define ANT_CSR_BFNE_CFG12_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG12_ADR(_BASE))
#define ANT_CSR_BFNE_CFG13_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG13_ADR(_BASE))
#define ANT_CSR_BFNE_CFG14_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG14_ADR(_BASE))
#define ANT_CSR_BFNE_CFG15_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG15_ADR(_BASE))
#define ANT_CSR_BFNE_CFG16_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG16_ADR(_BASE))
#define ANT_CSR_BFNE_CFG17_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG17_ADR(_BASE))
#define ANT_CSR_BFNE_CFG18_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG18_ADR(_BASE))
#define ANT_CSR_BFNE_CFG19_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG19_ADR(_BASE))
#define ANT_CSR_BFNE_CFG20_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG20_ADR(_BASE))
#define ANT_CSR_BFNE_CFG21_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG21_ADR(_BASE))
#define ANT_CSR_BFNE_CFG22_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG22_ADR(_BASE))
#define ANT_CSR_BFNE_CFG23_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG23_ADR(_BASE))
#define ANT_CSR_BFNE_CFG24_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG24_ADR(_BASE))
#define ANT_CSR_BFNE_CFG25_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG25_ADR(_BASE))
#define ANT_CSR_BFNE_CFG26_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG26_ADR(_BASE))
#define ANT_CSR_BFNE_CFG27_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG27_ADR(_BASE))
#define ANT_CSR_BFNE_CFG28_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG28_ADR(_BASE))
#define ANT_CSR_BFNE_CFG29_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG29_ADR(_BASE))
#define ANT_CSR_BFNE_CFG30_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG30_ADR(_BASE))
#define ANT_CSR_BFNE_CFG31_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG31_ADR(_BASE))
#define ANT_CSR_BFNE_CFG32_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG32_ADR(_BASE))
#define ANT_CSR_BFNE_CFG33_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG33_ADR(_BASE))
#define ANT_CSR_BFNE_CFG34_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG34_ADR(_BASE))
#define ANT_CSR_BFNE_CFG35_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG35_ADR(_BASE))
#define ANT_CSR_BFNE_CFG36_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG36_ADR(_BASE))
#define ANT_CSR_BFNE_CFG37_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG37_ADR(_BASE))
#define ANT_CSR_BFNE_CFG38_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG38_ADR(_BASE))
#define ANT_CSR_BFNE_CFG39_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG39_ADR(_BASE))
#define ANT_CSR_BFNE_CFG40_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG40_ADR(_BASE))
#define ANT_CSR_BFNE_CFG41_REG(_BASE) ((ant_csr_bfne_cfg_reg_t*) ANT_CSR_BFNE_CFG41_ADR(_BASE))
#define ANT_CSR_BFNE_INCR0_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR0_ADR(_BASE))
#define ANT_CSR_BFNE_INCR1_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR1_ADR(_BASE))
#define ANT_CSR_BFNE_INCR2_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR2_ADR(_BASE))
#define ANT_CSR_BFNE_INCR3_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR3_ADR(_BASE))
#define ANT_CSR_BFNE_INCR4_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR4_ADR(_BASE))
#define ANT_CSR_BFNE_INCR5_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR5_ADR(_BASE))
#define ANT_CSR_BFNE_INCR6_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR6_ADR(_BASE))
#define ANT_CSR_BFNE_INCR7_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR7_ADR(_BASE))
#define ANT_CSR_BFNE_INCR8_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR8_ADR(_BASE))
#define ANT_CSR_BFNE_INCR9_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR9_ADR(_BASE))
#define ANT_CSR_BFNE_INCR10_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR10_ADR(_BASE))
#define ANT_CSR_BFNE_INCR11_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR11_ADR(_BASE))
#define ANT_CSR_BFNE_INCR12_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR12_ADR(_BASE))
#define ANT_CSR_BFNE_INCR13_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR13_ADR(_BASE))
#define ANT_CSR_BFNE_INCR14_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR14_ADR(_BASE))
#define ANT_CSR_BFNE_INCR15_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR15_ADR(_BASE))
#define ANT_CSR_BFNE_INCR16_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR16_ADR(_BASE))
#define ANT_CSR_BFNE_INCR17_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR17_ADR(_BASE))
#define ANT_CSR_BFNE_INCR18_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR18_ADR(_BASE))
#define ANT_CSR_BFNE_INCR19_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR19_ADR(_BASE))
#define ANT_CSR_BFNE_INCR20_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR20_ADR(_BASE))
#define ANT_CSR_BFNE_INCR21_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR21_ADR(_BASE))
#define ANT_CSR_BFNE_INCR22_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR22_ADR(_BASE))
#define ANT_CSR_BFNE_INCR23_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR23_ADR(_BASE))
#define ANT_CSR_BFNE_INCR24_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR24_ADR(_BASE))
#define ANT_CSR_BFNE_INCR25_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR25_ADR(_BASE))
#define ANT_CSR_BFNE_INCR26_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR26_ADR(_BASE))
#define ANT_CSR_BFNE_INCR27_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR27_ADR(_BASE))
#define ANT_CSR_BFNE_INCR28_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR28_ADR(_BASE))
#define ANT_CSR_BFNE_INCR29_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR29_ADR(_BASE))
#define ANT_CSR_BFNE_INCR30_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR30_ADR(_BASE))
#define ANT_CSR_BFNE_INCR31_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR31_ADR(_BASE))
#define ANT_CSR_BFNE_INCR32_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR32_ADR(_BASE))
#define ANT_CSR_BFNE_INCR33_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR33_ADR(_BASE))
#define ANT_CSR_BFNE_INCR34_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR34_ADR(_BASE))
#define ANT_CSR_BFNE_INCR35_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR35_ADR(_BASE))
#define ANT_CSR_BFNE_INCR36_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR36_ADR(_BASE))
#define ANT_CSR_BFNE_INCR37_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR37_ADR(_BASE))
#define ANT_CSR_BFNE_INCR38_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR38_ADR(_BASE))
#define ANT_CSR_BFNE_INCR39_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR39_ADR(_BASE))
#define ANT_CSR_BFNE_INCR40_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR40_ADR(_BASE))
#define ANT_CSR_BFNE_INCR41_REG(_BASE) ((ant_csr_bfne_incr_reg_t*) ANT_CSR_BFNE_INCR41_ADR(_BASE))
#define ANT_CSR_BFNE_START0_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START0_ADR(_BASE))
#define ANT_CSR_BFNE_START1_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START1_ADR(_BASE))
#define ANT_CSR_BFNE_START2_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START2_ADR(_BASE))
#define ANT_CSR_BFNE_START3_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START3_ADR(_BASE))
#define ANT_CSR_BFNE_START4_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START4_ADR(_BASE))
#define ANT_CSR_BFNE_START5_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START5_ADR(_BASE))
#define ANT_CSR_BFNE_START6_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START6_ADR(_BASE))
#define ANT_CSR_BFNE_START7_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START7_ADR(_BASE))
#define ANT_CSR_BFNE_START8_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START8_ADR(_BASE))
#define ANT_CSR_BFNE_START9_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START9_ADR(_BASE))
#define ANT_CSR_BFNE_START10_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START10_ADR(_BASE))
#define ANT_CSR_BFNE_START11_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START11_ADR(_BASE))
#define ANT_CSR_BFNE_START12_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START12_ADR(_BASE))
#define ANT_CSR_BFNE_START13_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START13_ADR(_BASE))
#define ANT_CSR_BFNE_START14_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START14_ADR(_BASE))
#define ANT_CSR_BFNE_START15_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START15_ADR(_BASE))
#define ANT_CSR_BFNE_START16_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START16_ADR(_BASE))
#define ANT_CSR_BFNE_START17_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START17_ADR(_BASE))
#define ANT_CSR_BFNE_START18_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START18_ADR(_BASE))
#define ANT_CSR_BFNE_START19_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START19_ADR(_BASE))
#define ANT_CSR_BFNE_START20_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START20_ADR(_BASE))
#define ANT_CSR_BFNE_START21_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START21_ADR(_BASE))
#define ANT_CSR_BFNE_START22_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START22_ADR(_BASE))
#define ANT_CSR_BFNE_START23_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START23_ADR(_BASE))
#define ANT_CSR_BFNE_START24_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START24_ADR(_BASE))
#define ANT_CSR_BFNE_START25_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START25_ADR(_BASE))
#define ANT_CSR_BFNE_START26_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START26_ADR(_BASE))
#define ANT_CSR_BFNE_START27_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START27_ADR(_BASE))
#define ANT_CSR_BFNE_START28_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START28_ADR(_BASE))
#define ANT_CSR_BFNE_START29_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START29_ADR(_BASE))
#define ANT_CSR_BFNE_START30_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START30_ADR(_BASE))
#define ANT_CSR_BFNE_START31_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START31_ADR(_BASE))
#define ANT_CSR_BFNE_START32_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START32_ADR(_BASE))
#define ANT_CSR_BFNE_START33_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START33_ADR(_BASE))
#define ANT_CSR_BFNE_START34_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START34_ADR(_BASE))
#define ANT_CSR_BFNE_START35_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START35_ADR(_BASE))
#define ANT_CSR_BFNE_START36_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START36_ADR(_BASE))
#define ANT_CSR_BFNE_START37_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START37_ADR(_BASE))
#define ANT_CSR_BFNE_START38_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START38_ADR(_BASE))
#define ANT_CSR_BFNE_START39_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START39_ADR(_BASE))
#define ANT_CSR_BFNE_START40_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START40_ADR(_BASE))
#define ANT_CSR_BFNE_START41_REG(_BASE) ((ant_csr_bfne_start_reg_t*) ANT_CSR_BFNE_START41_ADR(_BASE))
#define ANT_CSR_BFNE_STAT0_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT0_ADR(_BASE))
#define ANT_CSR_BFNE_STAT1_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT1_ADR(_BASE))
#define ANT_CSR_BFNE_STAT2_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT2_ADR(_BASE))
#define ANT_CSR_BFNE_STAT3_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT3_ADR(_BASE))
#define ANT_CSR_BFNE_STAT4_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT4_ADR(_BASE))
#define ANT_CSR_BFNE_STAT5_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT5_ADR(_BASE))
#define ANT_CSR_BFNE_STAT6_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT6_ADR(_BASE))
#define ANT_CSR_BFNE_STAT7_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT7_ADR(_BASE))
#define ANT_CSR_BFNE_STAT8_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT8_ADR(_BASE))
#define ANT_CSR_BFNE_STAT9_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT9_ADR(_BASE))
#define ANT_CSR_BFNE_STAT10_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT10_ADR(_BASE))
#define ANT_CSR_BFNE_STAT11_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT11_ADR(_BASE))
#define ANT_CSR_BFNE_STAT12_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT12_ADR(_BASE))
#define ANT_CSR_BFNE_STAT13_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT13_ADR(_BASE))
#define ANT_CSR_BFNE_STAT14_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT14_ADR(_BASE))
#define ANT_CSR_BFNE_STAT15_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT15_ADR(_BASE))
#define ANT_CSR_BFNE_STAT16_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT16_ADR(_BASE))
#define ANT_CSR_BFNE_STAT17_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT17_ADR(_BASE))
#define ANT_CSR_BFNE_STAT18_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT18_ADR(_BASE))
#define ANT_CSR_BFNE_STAT19_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT19_ADR(_BASE))
#define ANT_CSR_BFNE_STAT20_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT20_ADR(_BASE))
#define ANT_CSR_BFNE_STAT21_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT21_ADR(_BASE))
#define ANT_CSR_BFNE_STAT22_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT22_ADR(_BASE))
#define ANT_CSR_BFNE_STAT23_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT23_ADR(_BASE))
#define ANT_CSR_BFNE_STAT24_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT24_ADR(_BASE))
#define ANT_CSR_BFNE_STAT25_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT25_ADR(_BASE))
#define ANT_CSR_BFNE_STAT26_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT26_ADR(_BASE))
#define ANT_CSR_BFNE_STAT27_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT27_ADR(_BASE))
#define ANT_CSR_BFNE_STAT28_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT28_ADR(_BASE))
#define ANT_CSR_BFNE_STAT29_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT29_ADR(_BASE))
#define ANT_CSR_BFNE_STAT30_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT30_ADR(_BASE))
#define ANT_CSR_BFNE_STAT31_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT31_ADR(_BASE))
#define ANT_CSR_BFNE_STAT32_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT32_ADR(_BASE))
#define ANT_CSR_BFNE_STAT33_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT33_ADR(_BASE))
#define ANT_CSR_BFNE_STAT34_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT34_ADR(_BASE))
#define ANT_CSR_BFNE_STAT35_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT35_ADR(_BASE))
#define ANT_CSR_BFNE_STAT36_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT36_ADR(_BASE))
#define ANT_CSR_BFNE_STAT37_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT37_ADR(_BASE))
#define ANT_CSR_BFNE_STAT38_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT38_ADR(_BASE))
#define ANT_CSR_BFNE_STAT39_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT39_ADR(_BASE))
#define ANT_CSR_BFNE_STAT40_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT40_ADR(_BASE))
#define ANT_CSR_BFNE_STAT41_REG(_BASE) ((ant_csr_bfne_stat_reg_t*) ANT_CSR_BFNE_STAT41_ADR(_BASE))
#define ANT_CSR_ANT_BSG_STAT_REG(_BASE) ((ant_csr_ant_bsg_stat_reg_t*) ANT_CSR_ANT_BSG_STAT_ADR(_BASE))
#define ANT_CSR_CMFF_FIFO_STAT_REG(_BASE) ((ant_csr_cmff_fifo_stat_reg_t*) ANT_CSR_CMFF_FIFO_STAT_ADR(_BASE))
#define ANT_CSR_RX_INTR_LO_STAT_REG(_BASE) ((ant_csr_rx_intr_lo_stat_reg_t*) ANT_CSR_RX_INTR_LO_STAT_ADR(_BASE))
#define ANT_CSR_RX_INTR_HI_STAT_REG(_BASE) ((ant_csr_rx_intr_hi_stat_reg_t*) ANT_CSR_RX_INTR_HI_STAT_ADR(_BASE))
#define ANT_CSR_FB_INTR_LO_STAT_REG(_BASE) ((ant_csr_fb_intr_lo_stat_reg_t*) ANT_CSR_FB_INTR_LO_STAT_ADR(_BASE))
#define ANT_CSR_FB_INTR_HI_STAT_REG(_BASE) ((ant_csr_fb_intr_hi_stat_reg_t*) ANT_CSR_FB_INTR_HI_STAT_ADR(_BASE))
#define ANT_CSR_TX_INTR_LO_STAT_REG(_BASE) ((ant_csr_tx_intr_lo_stat_reg_t*) ANT_CSR_TX_INTR_LO_STAT_ADR(_BASE))
#define ANT_CSR_TX_INTR_HI_STAT_REG(_BASE) ((ant_csr_tx_intr_hi_stat_reg_t*) ANT_CSR_TX_INTR_HI_STAT_ADR(_BASE))
#define ANT_CSR_ANT_DP_INIT_STAT_REG(_BASE) ((ant_csr_ant_dp_init_stat_reg_t*) ANT_CSR_ANT_DP_INIT_STAT_ADR(_BASE))
#define ANT_CSR_ANT_RX_ADC_START_BFN_REG(_BASE) ((ant_csr_ant_rx_adc_start_bfn_reg_t*) ANT_CSR_ANT_RX_ADC_START_BFN_ADR(_BASE))
#define ANT_CSR_ANT_FB_ADC_START_BFN_REG(_BASE) ((ant_csr_ant_fb_adc_start_bfn_reg_t*) ANT_CSR_ANT_FB_ADC_START_BFN_ADR(_BASE))
#define ANT_CSR_CCF_RX_INT_STAT_R_REG(_BASE) ((ant_csr_ccf_rx_int_stat_r_reg_t*) ANT_CSR_CCF_RX_INT_STAT_R_ADR(_BASE))
#define ANT_CSR_CCF_RX_INT_HIGH_R_REG(_BASE) ((ant_csr_ccf_rx_int_high_r_reg_t*) ANT_CSR_CCF_RX_INT_HIGH_R_ADR(_BASE))
#define ANT_CSR_CCF_RX_INT_LOW_R_REG(_BASE) ((ant_csr_ccf_rx_int_low_r_reg_t*) ANT_CSR_CCF_RX_INT_LOW_R_ADR(_BASE))
#define ANT_CSR_CCF_RX_INT_CLR_R_REG(_BASE) ((ant_csr_ccf_rx_int_clr_r_reg_t*) ANT_CSR_CCF_RX_INT_CLR_R_ADR(_BASE))
#define ANT_CSR_CCF_RX_INT_FORCE_R_REG(_BASE) ((ant_csr_ccf_rx_int_force_r_reg_t*) ANT_CSR_CCF_RX_INT_FORCE_R_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_INT_STAT_R_REG(_BASE) ((ant_csr_ccf_fb_rx_int_stat_r_reg_t*) ANT_CSR_CCF_FB_RX_INT_STAT_R_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_INT_HIGH_R_REG(_BASE) ((ant_csr_ccf_fb_rx_int_high_r_reg_t*) ANT_CSR_CCF_FB_RX_INT_HIGH_R_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_INT_LOW_R_REG(_BASE) ((ant_csr_ccf_fb_rx_int_low_r_reg_t*) ANT_CSR_CCF_FB_RX_INT_LOW_R_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_INT_CLR_R_REG(_BASE) ((ant_csr_ccf_fb_rx_int_clr_r_reg_t*) ANT_CSR_CCF_FB_RX_INT_CLR_R_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_INT_FORCE_R_REG(_BASE) ((ant_csr_ccf_fb_rx_int_force_r_reg_t*) ANT_CSR_CCF_FB_RX_INT_FORCE_R_ADR(_BASE))
#define ANT_CSR_CCF_TX_INT_STAT_R_REG(_BASE) ((ant_csr_ccf_tx_int_stat_r_reg_t*) ANT_CSR_CCF_TX_INT_STAT_R_ADR(_BASE))
#define ANT_CSR_CCF_TX_INT_HIGH_R_REG(_BASE) ((ant_csr_ccf_tx_int_high_r_reg_t*) ANT_CSR_CCF_TX_INT_HIGH_R_ADR(_BASE))
#define ANT_CSR_CCF_TX_INT_LOW_R_REG(_BASE) ((ant_csr_ccf_tx_int_low_r_reg_t*) ANT_CSR_CCF_TX_INT_LOW_R_ADR(_BASE))
#define ANT_CSR_CCF_TX_INT_CLR_R_REG(_BASE) ((ant_csr_ccf_tx_int_clr_r_reg_t*) ANT_CSR_CCF_TX_INT_CLR_R_ADR(_BASE))
#define ANT_CSR_CCF_TX_INT_FORCE_R_REG(_BASE) ((ant_csr_ccf_tx_int_force_r_reg_t*) ANT_CSR_CCF_TX_INT_FORCE_R_ADR(_BASE))
#define ANT_CSR_CCF_RX_OUT_STAT0_REG(_BASE) ((ant_csr_ccf_rx_out_stat_reg_t*) ANT_CSR_CCF_RX_OUT_STAT0_ADR(_BASE))
#define ANT_CSR_CCF_RX_OUT_STAT1_REG(_BASE) ((ant_csr_ccf_rx_out_stat_reg_t*) ANT_CSR_CCF_RX_OUT_STAT1_ADR(_BASE))
#define ANT_CSR_CCF_RX_OUT_STAT2_REG(_BASE) ((ant_csr_ccf_rx_out_stat_reg_t*) ANT_CSR_CCF_RX_OUT_STAT2_ADR(_BASE))
#define ANT_CSR_CCF_RX_OUT_STAT3_REG(_BASE) ((ant_csr_ccf_rx_out_stat_reg_t*) ANT_CSR_CCF_RX_OUT_STAT3_ADR(_BASE))
#define ANT_CSR_CCF_RX_IN_STAT0_REG(_BASE) ((ant_csr_ccf_rx_in_stat_reg_t*) ANT_CSR_CCF_RX_IN_STAT0_ADR(_BASE))
#define ANT_CSR_CCF_RX_IN_STAT1_REG(_BASE) ((ant_csr_ccf_rx_in_stat_reg_t*) ANT_CSR_CCF_RX_IN_STAT1_ADR(_BASE))
#define ANT_CSR_CCF_RX_IN_STAT2_REG(_BASE) ((ant_csr_ccf_rx_in_stat_reg_t*) ANT_CSR_CCF_RX_IN_STAT2_ADR(_BASE))
#define ANT_CSR_CCF_RX_IN_STAT3_REG(_BASE) ((ant_csr_ccf_rx_in_stat_reg_t*) ANT_CSR_CCF_RX_IN_STAT3_ADR(_BASE))
#define ANT_CSR_CCF_TX_IN_STAT0_REG(_BASE) ((ant_csr_ccf_tx_in_stat_reg_t*) ANT_CSR_CCF_TX_IN_STAT0_ADR(_BASE))
#define ANT_CSR_CCF_TX_IN_STAT1_REG(_BASE) ((ant_csr_ccf_tx_in_stat_reg_t*) ANT_CSR_CCF_TX_IN_STAT1_ADR(_BASE))
#define ANT_CSR_CCF_TX_IN_STAT2_REG(_BASE) ((ant_csr_ccf_tx_in_stat_reg_t*) ANT_CSR_CCF_TX_IN_STAT2_ADR(_BASE))
#define ANT_CSR_CCF_TX_IN_STAT3_REG(_BASE) ((ant_csr_ccf_tx_in_stat_reg_t*) ANT_CSR_CCF_TX_IN_STAT3_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_OUT_STAT_REG(_BASE) ((ant_csr_ccf_fb_rx_out_stat_reg_t*) ANT_CSR_CCF_FB_RX_OUT_STAT_ADR(_BASE))
#define ANT_CSR_CCF_FB_RX_IN_STAT_REG(_BASE) ((ant_csr_ccf_fb_rx_in_stat_reg_t*) ANT_CSR_CCF_FB_RX_IN_STAT_ADR(_BASE))
#define ANT_CSR_CCF_DCSRC_IN_STAT_REG(_BASE) ((ant_csr_ccf_dcsrc_in_stat_reg_t*) ANT_CSR_CCF_DCSRC_IN_STAT_ADR(_BASE))
#define ANT_CSR_ANT_RX_EN_EVENT_STAT_REG(_BASE) ((ant_csr_ant_rx_en_event_stat_reg_t*) ANT_CSR_ANT_RX_EN_EVENT_STAT_ADR(_BASE))
#define ANT_CSR_ANT_TX_EN_EVENT_STAT_REG(_BASE) ((ant_csr_ant_tx_en_event_stat_reg_t*) ANT_CSR_ANT_TX_EN_EVENT_STAT_ADR(_BASE))
#define ANT_CSR_ANT_FB_EN_EVENT_STAT_REG(_BASE) ((ant_csr_ant_fb_en_event_stat_reg_t*) ANT_CSR_ANT_FB_EN_EVENT_STAT_ADR(_BASE))
#define ANT_CSR_APB_BRDG_STAT_REG(_BASE) ((ant_csr_apb_brdg_stat_reg_t*) ANT_CSR_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    ant_csr_scratch_reg_t SCRATCH;         /*< Address offset = 0x0 */
    ant_csr_asc_ant_rate_reg_t ASC_ANT_RATE;    /*< Address offset = 0x4 */
    ant_csr_asc_xt_byp_reg_t ASC_XT_BYP;   /*< Address offset = 0x8 */
    ant_csr_fb_asc_ant_rate_reg_t FB_ASC_ANT_RATE; /*< Address offset = 0xc */
    ant_csr_ant_dcsrc_conf0_reg_t ANT_DCSRC_CONF0; /*< Address offset = 0x10 */
    ant_csr_ant_dcsrc_conf1_reg_t ANT_DCSRC_CONF1; /*< Address offset = 0x14 */
    ant_csr_ant_dpath_conf_reg_t ANT_DPATH_CONF;  /*< Address offset = 0x18 */
    ant_csr_ant_bsg_cfg_reg_t ANT_BSG_CFG;  /*< Address offset = 0x1c */
    ant_csr_ant_bsg_dc_val_reg_t ANT_BSG_DC_VAL; /*< Address offset = 0x20 */
    ant_csr_ant_capt_tmux_ctrl_reg_t ANT_CAPT_TMUX_CTRL; /*< Address offset = 0x24 */
    ant_csr_ant_ccf_init_reg_t ANT_CCF_INIT;    /*< Address offset = 0x28 */
    ant_csr_ant_dp_init_reg_t ANT_DP_INIT;     /*< Address offset = 0x2c */
    ant_csr_ant_rx_en_seq0_cfg_reg_t ANT_RX_EN_SEQ0_CFG[4]; /*< Address offset = 0x30 */
    ant_csr_ant_rx_en_seq1_cfg_reg_t ANT_RX_EN_SEQ1_CFG[4]; /*< Address offset = 0x40 */
    ant_csr_ant_rx_en_pause_cfg_reg_t ANT_RX_EN_PAUSE_CFG[4]; /*< Address offset = 0x50 */
    ant_csr_ant_rx_en_resume_cfg_reg_t ANT_RX_EN_RESUME_CFG[4]; /*< Address offset = 0x60 */
    ant_csr_ant_tx_en_seq0_cfg_reg_t ANT_TX_EN_SEQ0_CFG[4]; /*< Address offset = 0x70 */
    ant_csr_ant_tx_en_seq1_cfg_reg_t ANT_TX_EN_SEQ1_CFG[4]; /*< Address offset = 0x80 */
    ant_csr_ant_fb_en_seq0_cfg_reg_t ANT_FB_EN_SEQ0_CFG; /*< Address offset = 0x90 */
    ant_csr_ant_fb_en_seq1_cfg_reg_t ANT_FB_EN_SEQ1_CFG; /*< Address offset = 0x94 */
    ant_csr_ant_fb_en_pause_cfg_reg_t ANT_FB_EN_PAUSE_CFG; /*< Address offset = 0x98 */
    ant_csr_ant_fb_en_resume_cfg_reg_t ANT_FB_EN_RESUME_CFG; /*< Address offset = 0x9c */
    ant_csr_ant_ccf_rx_out_cfg_reg_t ANT_CCF_RX_OUT_CFG; /*< Address offset = 0xa0 */
    ant_csr_ant_ccf_rx_in_cfg_reg_t ANT_CCF_RX_IN_CFG; /*< Address offset = 0xa4 */
    ant_csr_ant_ccf_fb_rx_out_cfg_reg_t ANT_CCF_FB_RX_OUT_CFG; /*< Address offset = 0xa8 */
    ant_csr_ant_ccf_fb_rx_in_cfg_reg_t ANT_CCF_FB_RX_IN_CFG; /*< Address offset = 0xac */
    ant_csr_ant_ccf_dcsrc_in_cfg_reg_t ANT_CCF_DCSRC_IN_CFG; /*< Address offset = 0xb0 */
    ant_csr_cmff_cfg_reg_t CMFF_CFG;     /*< Address offset = 0xb4 */
    ant_csr_cmff_ctrl_reg_t CMFF_CTRL;    /*< Address offset = 0xb8 */
    ant_csr_ant_bsg_dc_incr_reg_t ANT_BSG_DC_INCR; /*< Address offset = 0xbc */
    const uint8_t        reservedArea0 [64];  /*< Address offset = 0xc0 */
    ant_csr_isync_ctrl_reg_t ISYNC_CTRL; /*< Address offset = 0x100 */
    ant_csr_isync_lcnt_inc_reg_t ISYNC_LCNT_INC; /*< Address offset = 0x104 */
    ant_csr_isync_ten_ms_cnt_reg_t ISYNC_TEN_MS_CNT; /*< Address offset = 0x108 */
    ant_csr_isync_inc_pre_reg_t ISYNC_INC_PRE; /*< Address offset = 0x10c */
    ant_csr_isync_cnt_adj_reg_t ISYNC_CNT_ADJ; /*< Address offset = 0x110 */
    ant_csr_isync_bfn_cnt_sync_reg_t ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x114 */
    ant_csr_isync_bfn_cnt_reg_t ISYNC_BFN_CNT; /*< Address offset = 0x118 */
    const uint8_t        reservedArea1 [228]; /*< Address offset = 0x11c */
    ant_csr_bfne_cfg_reg_t BFNE_CFG[42]; /*< Address offset = 0x200 */
    const uint8_t        reservedArea2 [88];  /*< Address offset = 0x2a8 */
    ant_csr_bfne_incr_reg_t BFNE_INCR[42]; /*< Address offset = 0x300 */
    const uint8_t        reservedArea3 [88];  /*< Address offset = 0x3a8 */
    ant_csr_bfne_start_reg_t BFNE_START[42]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea4 [88];  /*< Address offset = 0x4a8 */
    ant_csr_bfne_stat_reg_t BFNE_STAT[42]; /*< Address offset = 0x500 */
    const uint8_t        reservedArea5 [88];  /*< Address offset = 0x5a8 */
    ant_csr_ant_bsg_stat_reg_t ANT_BSG_STAT;    /*< Address offset = 0x600 */
    ant_csr_cmff_fifo_stat_reg_t CMFF_FIFO_STAT; /*< Address offset = 0x604 */
    ant_csr_rx_intr_lo_stat_reg_t RX_INTR_LO_STAT; /*< Address offset = 0x608 */
    ant_csr_rx_intr_hi_stat_reg_t RX_INTR_HI_STAT; /*< Address offset = 0x60c */
    ant_csr_fb_intr_lo_stat_reg_t FB_INTR_LO_STAT; /*< Address offset = 0x610 */
    ant_csr_fb_intr_hi_stat_reg_t FB_INTR_HI_STAT; /*< Address offset = 0x614 */
    ant_csr_tx_intr_lo_stat_reg_t TX_INTR_LO_STAT; /*< Address offset = 0x618 */
    ant_csr_tx_intr_hi_stat_reg_t TX_INTR_HI_STAT; /*< Address offset = 0x61c */
    ant_csr_ant_dp_init_stat_reg_t ANT_DP_INIT_STAT; /*< Address offset = 0x620 */
    ant_csr_ant_rx_adc_start_bfn_reg_t ANT_RX_ADC_START_BFN; /*< Address offset = 0x624 */
    ant_csr_ant_fb_adc_start_bfn_reg_t ANT_FB_ADC_START_BFN; /*< Address offset = 0x628 */
    const uint8_t        reservedArea6 [4];   /*< Address offset = 0x62c */
    ant_csr_ccf_rx_int_stat_r_reg_t CCF_RX_INT_STAT_R; /*< Address offset = 0x630 */
    ant_csr_ccf_rx_int_high_r_reg_t CCF_RX_INT_HIGH_R; /*< Address offset = 0x634 */
    ant_csr_ccf_rx_int_low_r_reg_t CCF_RX_INT_LOW_R; /*< Address offset = 0x638 */
    ant_csr_ccf_rx_int_clr_r_reg_t CCF_RX_INT_CLR_R; /*< Address offset = 0x63c */
    ant_csr_ccf_rx_int_force_r_reg_t CCF_RX_INT_FORCE_R; /*< Address offset = 0x640 */
    const uint8_t        reservedArea7 [12];  /*< Address offset = 0x644 */
    ant_csr_ccf_fb_rx_int_stat_r_reg_t CCF_FB_RX_INT_STAT_R; /*< Address offset = 0x650 */
    ant_csr_ccf_fb_rx_int_high_r_reg_t CCF_FB_RX_INT_HIGH_R; /*< Address offset = 0x654 */
    ant_csr_ccf_fb_rx_int_low_r_reg_t CCF_FB_RX_INT_LOW_R; /*< Address offset = 0x658 */
    ant_csr_ccf_fb_rx_int_clr_r_reg_t CCF_FB_RX_INT_CLR_R; /*< Address offset = 0x65c */
    ant_csr_ccf_fb_rx_int_force_r_reg_t CCF_FB_RX_INT_FORCE_R; /*< Address offset = 0x660 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x664 */
    ant_csr_ccf_tx_int_stat_r_reg_t CCF_TX_INT_STAT_R; /*< Address offset = 0x670 */
    ant_csr_ccf_tx_int_high_r_reg_t CCF_TX_INT_HIGH_R; /*< Address offset = 0x674 */
    ant_csr_ccf_tx_int_low_r_reg_t CCF_TX_INT_LOW_R; /*< Address offset = 0x678 */
    ant_csr_ccf_tx_int_clr_r_reg_t CCF_TX_INT_CLR_R; /*< Address offset = 0x67c */
    ant_csr_ccf_tx_int_force_r_reg_t CCF_TX_INT_FORCE_R; /*< Address offset = 0x680 */
    const uint8_t        reservedArea9 [12];  /*< Address offset = 0x684 */
    ant_csr_ccf_rx_out_stat_reg_t CCF_RX_OUT_STAT[4]; /*< Address offset = 0x690 */
    ant_csr_ccf_rx_in_stat_reg_t CCF_RX_IN_STAT[4]; /*< Address offset = 0x6a0 */
    ant_csr_ccf_tx_in_stat_reg_t CCF_TX_IN_STAT[4]; /*< Address offset = 0x6b0 */
    ant_csr_ccf_fb_rx_out_stat_reg_t CCF_FB_RX_OUT_STAT; /*< Address offset = 0x6c0 */
    ant_csr_ccf_fb_rx_in_stat_reg_t CCF_FB_RX_IN_STAT; /*< Address offset = 0x6c4 */
    ant_csr_ccf_dcsrc_in_stat_reg_t CCF_DCSRC_IN_STAT; /*< Address offset = 0x6c8 */
    ant_csr_ant_rx_en_event_stat_reg_t ANT_RX_EN_EVENT_STAT; /*< Address offset = 0x6cc */
    ant_csr_ant_tx_en_event_stat_reg_t ANT_TX_EN_EVENT_STAT; /*< Address offset = 0x6d0 */
    ant_csr_ant_fb_en_event_stat_reg_t ANT_FB_EN_EVENT_STAT; /*< Address offset = 0x6d4 */
    ant_csr_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x6d8 */
} ant_csr_t;     // size: 0x0134

// AddressSpace struct pointer
//
#define ANT0_CSR         ((ant_csr_t*) ANT0_CSR_BASE)
#define ANT1_CSR         ((ant_csr_t*) ANT1_CSR_BASE)
#define ANT2_CSR         ((ant_csr_t*) ANT2_CSR_BASE)
#define ANT3_CSR         ((ant_csr_t*) ANT3_CSR_BASE)

// ******************************************* /Address Space

#endif      // _ANT_CSR_H_

