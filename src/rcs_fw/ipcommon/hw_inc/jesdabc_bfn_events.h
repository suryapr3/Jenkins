#ifndef _JESDABC_BFN_EVENTS_H_
#define _JESDABC_BFN_EVENTS_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define DLNK_JESDABC0_BFN_EVENTS_BASE  0x06706000
#define DLNK_JESDABC1_BFN_EVENTS_BASE  0x06f06000
#define DLNK_JESDABC2_BFN_EVENTS_BASE  0x07706000
#define DLNK_JESDABC3_BFN_EVENTS_BASE  0x07f06000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define JESDABC_MEM_JESDABC_SCRATCH_OFFSET ( 0x00000000U )
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_OFFSET ( 0x00000004U )
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_OFFSET ( 0x00000040U )
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_OFFSET ( 0x00000044U )
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000048U )
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_OFFSET ( 0x0000004cU )
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_OFFSET ( 0x00000050U )
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000054U )
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_OFFSET ( 0x00000058U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG0_OFFSET ( 0x00000400U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG1_OFFSET ( 0x00000404U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG2_OFFSET ( 0x00000408U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG3_OFFSET ( 0x0000040cU )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG4_OFFSET ( 0x00000410U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG5_OFFSET ( 0x00000414U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG6_OFFSET ( 0x00000418U )
#define JESDABC_MEM_JESDABC_BFNE_CONFIG7_OFFSET ( 0x0000041cU )
#define JESDABC_MEM_JESDABC_BFNE_INCR0_OFFSET ( 0x00000440U )
#define JESDABC_MEM_JESDABC_BFNE_INCR1_OFFSET ( 0x00000444U )
#define JESDABC_MEM_JESDABC_BFNE_INCR2_OFFSET ( 0x00000448U )
#define JESDABC_MEM_JESDABC_BFNE_INCR3_OFFSET ( 0x0000044cU )
#define JESDABC_MEM_JESDABC_BFNE_INCR4_OFFSET ( 0x00000450U )
#define JESDABC_MEM_JESDABC_BFNE_INCR5_OFFSET ( 0x00000454U )
#define JESDABC_MEM_JESDABC_BFNE_INCR6_OFFSET ( 0x00000458U )
#define JESDABC_MEM_JESDABC_BFNE_INCR7_OFFSET ( 0x0000045cU )
#define JESDABC_MEM_JESDABC_BFNE_START0_OFFSET ( 0x00000480U )
#define JESDABC_MEM_JESDABC_BFNE_START1_OFFSET ( 0x00000484U )
#define JESDABC_MEM_JESDABC_BFNE_START2_OFFSET ( 0x00000488U )
#define JESDABC_MEM_JESDABC_BFNE_START3_OFFSET ( 0x0000048cU )
#define JESDABC_MEM_JESDABC_BFNE_START4_OFFSET ( 0x00000490U )
#define JESDABC_MEM_JESDABC_BFNE_START5_OFFSET ( 0x00000494U )
#define JESDABC_MEM_JESDABC_BFNE_START6_OFFSET ( 0x00000498U )
#define JESDABC_MEM_JESDABC_BFNE_START7_OFFSET ( 0x0000049cU )
#define JESDABC_MEM_JESDABC_BFNE_STAT0_OFFSET ( 0x000004c0U )
#define JESDABC_MEM_JESDABC_BFNE_STAT1_OFFSET ( 0x000004c4U )
#define JESDABC_MEM_JESDABC_BFNE_STAT2_OFFSET ( 0x000004c8U )
#define JESDABC_MEM_JESDABC_BFNE_STAT3_OFFSET ( 0x000004ccU )
#define JESDABC_MEM_JESDABC_BFNE_STAT4_OFFSET ( 0x000004d0U )
#define JESDABC_MEM_JESDABC_BFNE_STAT5_OFFSET ( 0x000004d4U )
#define JESDABC_MEM_JESDABC_BFNE_STAT6_OFFSET ( 0x000004d8U )
#define JESDABC_MEM_JESDABC_BFNE_STAT7_OFFSET ( 0x000004dcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define JESDABC_MEM_JESDABC_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_SCRATCH_OFFSET ) ))
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_CTRL_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_INC_PRE_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG0_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG1_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG2_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG3_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG4_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG5_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG6_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_CONFIG7_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR0_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR1_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR2_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR3_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR4_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR5_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR6_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_INCR7_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START0_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START1_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START2_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START3_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START4_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START5_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START6_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_START7_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT0_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT1_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT2_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT3_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT4_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT5_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT6_OFFSET ) ))
#define JESDABC_MEM_JESDABC_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( JESDABC_MEM_JESDABC_BFNE_STAT7_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_scratch_reg_t;

#define JESDABC_MEM_JESDABC_SCRATCH_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_SCRATCH_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESDABC_MEM_JESDABC_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESDABC_MEM_JESDABC_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESDABC_MEM_JESDABC_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_apb_bridge_status_reg_t;

#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_DEFAULT (0x00010000U)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_WID (20)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_MSK (0x000FFFFF)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_DEF (0x00010000)

///< Module Revision Number
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_REVISION_BF_OFF (20)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_REVISION_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_REVISION_BF_MSK (0x0FF00000)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_OFF (28)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_UNSOL_ACK_BF_OFF (29)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_UNSOL_ACK_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_UNSOL_ACK_BF_MSK (0x20000000)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_ACK_ERROR_BF_OFF (30)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_ACK_ERROR_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_ACK_ERROR_BF_MSK (0x40000000)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_ACK_ERROR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_BF_OFF (31)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_BF_MSK (0x80000000)
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_ctrl_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_CTRL_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_RD_MASK (0x00008037U)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_SOFT_RESET_BF_OFF (15)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_SOFT_RESET_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_SOFT_RESET_BF_MSK (0x00008000)
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_SOFT_RESET_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x44
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_lcnt_inc_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x48
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_ten_ms_cnt_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_inc_pre_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_cnt_adj_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_bfn_cnt_sync_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_isync_bfn_cnt_reg_t;

#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ABC_BFN_EVENTS_BFNE_CONFIG[8] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_bfne_config_reg_t;

#define JESDABC_MEM_JESDABC_BFNE_CONFIG_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_RD_MASK (0x0000003fU)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_ENABLE_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_ENABLE_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_ENABLE_BF_MSK (0x00000001)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_ENABLE_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_MODE_BF_OFF ( 1)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_MODE_BF_WID ( 2)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_MODE_BF_MSK (0x00000006)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_OUTPUT_MODE_BF_OFF ( 3)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_OUTPUT_MODE_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_OUTPUT_MODE_BF_MSK (0x00000008)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_DEBUG_MODE_BF_OFF ( 4)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_DEBUG_MODE_BF_WID ( 2)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_DEBUG_MODE_BF_MSK (0x00000030)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_DEBUG_MODE_BF_DEF (0x00000000)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_ARRAY_INST0 (8)
#define JESDABC_MEM_JESDABC_BFNE_CONFIG_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ABC_BFN_EVENTS_BFNE_INCR[8] register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_bfne_incr_reg_t;

#define JESDABC_MEM_JESDABC_BFNE_INCR_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_BFNE_INCR_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define JESDABC_MEM_JESDABC_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_BFNE_INCR_OFFSET_BF_WID (24)
#define JESDABC_MEM_JESDABC_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define JESDABC_MEM_JESDABC_BFNE_INCR_FRAME_BF_OFF (24)
#define JESDABC_MEM_JESDABC_BFNE_INCR_FRAME_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define JESDABC_MEM_JESDABC_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define JESDABC_MEM_JESDABC_BFNE_INCR_ARRAY_INST0 (8)
#define JESDABC_MEM_JESDABC_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ABC_BFN_EVENTS_BFNE_START[8] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_bfne_start_reg_t;

#define JESDABC_MEM_JESDABC_BFNE_START_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_BFNE_START_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define JESDABC_MEM_JESDABC_BFNE_START_OFFSET_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_BFNE_START_OFFSET_BF_WID (24)
#define JESDABC_MEM_JESDABC_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define JESDABC_MEM_JESDABC_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define JESDABC_MEM_JESDABC_BFNE_START_FRAME_BF_OFF (24)
#define JESDABC_MEM_JESDABC_BFNE_START_FRAME_BF_WID ( 8)
#define JESDABC_MEM_JESDABC_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define JESDABC_MEM_JESDABC_BFNE_START_FRAME_BF_DEF (0x00000000)
#define JESDABC_MEM_JESDABC_BFNE_START_ARRAY_INST0 (8)
#define JESDABC_MEM_JESDABC_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief JESDABC_BFN_EVENTS_MEM_JESDABC_BFN_EVENTS_ABC_BFN_EVENTS_BFNE_STAT[8] register description at address offset 0x4c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_bfn_events_MEM/jesdabc_bfn_events/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_mem_jesdabc_bfne_stat_reg_t;

#define JESDABC_MEM_JESDABC_BFNE_STAT_DEFAULT (0x00000000U)
#define JESDABC_MEM_JESDABC_BFNE_STAT_RD_MASK (0xffffffffU)
#define JESDABC_MEM_JESDABC_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define JESDABC_MEM_JESDABC_BFNE_STAT_CURRENT_VALUE_BF_OFF ( 0)
#define JESDABC_MEM_JESDABC_BFNE_STAT_CURRENT_VALUE_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_BFNE_STAT_CURRENT_VALUE_BF_MSK (0x00000001)
#define JESDABC_MEM_JESDABC_BFNE_STAT_CURRENT_VALUE_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define JESDABC_MEM_JESDABC_BFNE_STAT_WAITING_BF_OFF ( 1)
#define JESDABC_MEM_JESDABC_BFNE_STAT_WAITING_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define JESDABC_MEM_JESDABC_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define JESDABC_MEM_JESDABC_BFNE_STAT_DONE_BF_OFF ( 2)
#define JESDABC_MEM_JESDABC_BFNE_STAT_DONE_BF_WID ( 1)
#define JESDABC_MEM_JESDABC_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define JESDABC_MEM_JESDABC_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define JESDABC_MEM_JESDABC_BFNE_STAT_DEBUG_BF_OFF ( 3)
#define JESDABC_MEM_JESDABC_BFNE_STAT_DEBUG_BF_WID (29)
#define JESDABC_MEM_JESDABC_BFNE_STAT_DEBUG_BF_MSK (0xFFFFFFF8)
#define JESDABC_MEM_JESDABC_BFNE_STAT_DEBUG_BF_DEF (0x00000000)
#define JESDABC_MEM_JESDABC_BFNE_STAT_ARRAY_INST0 (8)
#define JESDABC_MEM_JESDABC_BFNE_STAT_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define JESDABC_MEM_JESDABC_SCRATCH_REG(_BASE) ((jesdabc_mem_jesdabc_scratch_reg_t*) JESDABC_MEM_JESDABC_SCRATCH_ADR(_BASE))
#define JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_REG(_BASE) ((jesdabc_mem_jesdabc_apb_bridge_status_reg_t*) JESDABC_MEM_JESDABC_APB_BRIDGE_STATUS_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_CTRL_REG(_BASE) ((jesdabc_mem_jesdabc_isync_ctrl_reg_t*) JESDABC_MEM_JESDABC_ISYNC_CTRL_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_REG(_BASE) ((jesdabc_mem_jesdabc_isync_lcnt_inc_reg_t*) JESDABC_MEM_JESDABC_ISYNC_LCNT_INC_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_REG(_BASE) ((jesdabc_mem_jesdabc_isync_ten_ms_cnt_reg_t*) JESDABC_MEM_JESDABC_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_INC_PRE_REG(_BASE) ((jesdabc_mem_jesdabc_isync_inc_pre_reg_t*) JESDABC_MEM_JESDABC_ISYNC_INC_PRE_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_REG(_BASE) ((jesdabc_mem_jesdabc_isync_cnt_adj_reg_t*) JESDABC_MEM_JESDABC_ISYNC_CNT_ADJ_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((jesdabc_mem_jesdabc_isync_bfn_cnt_sync_reg_t*) JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_REG(_BASE) ((jesdabc_mem_jesdabc_isync_bfn_cnt_reg_t*) JESDABC_MEM_JESDABC_ISYNC_BFN_CNT_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG0_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG0_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG1_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG1_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG2_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG2_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG3_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG3_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG4_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG4_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG5_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG5_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG6_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG6_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_CONFIG7_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_config_reg_t*) JESDABC_MEM_JESDABC_BFNE_CONFIG7_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR0_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR0_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR1_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR1_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR2_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR2_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR3_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR3_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR4_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR4_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR5_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR5_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR6_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR6_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_INCR7_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_incr_reg_t*) JESDABC_MEM_JESDABC_BFNE_INCR7_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START0_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START0_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START1_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START1_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START2_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START2_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START3_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START3_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START4_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START4_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START5_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START5_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START6_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START6_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_START7_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_start_reg_t*) JESDABC_MEM_JESDABC_BFNE_START7_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT0_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT0_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT1_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT1_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT2_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT2_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT3_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT3_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT4_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT4_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT5_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT5_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT6_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT6_ADR(_BASE))
#define JESDABC_MEM_JESDABC_BFNE_STAT7_REG(_BASE) ((jesdabc_mem_jesdabc_bfne_stat_reg_t*) JESDABC_MEM_JESDABC_BFNE_STAT7_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    jesdabc_mem_jesdabc_scratch_reg_t JESDABC_SCRATCH; /*< Address offset = 0x0 */
    jesdabc_mem_jesdabc_apb_bridge_status_reg_t JESDABC_APB_BRIDGE_STATUS; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [56];  /*< Address offset = 0x8 */
    jesdabc_mem_jesdabc_isync_ctrl_reg_t JESDABC_ISYNC_CTRL; /*< Address offset = 0x40 */
    jesdabc_mem_jesdabc_isync_lcnt_inc_reg_t JESDABC_ISYNC_LCNT_INC; /*< Address offset = 0x44 */
    jesdabc_mem_jesdabc_isync_ten_ms_cnt_reg_t JESDABC_ISYNC_TEN_MS_CNT; /*< Address offset = 0x48 */
    jesdabc_mem_jesdabc_isync_inc_pre_reg_t JESDABC_ISYNC_INC_PRE; /*< Address offset = 0x4c */
    jesdabc_mem_jesdabc_isync_cnt_adj_reg_t JESDABC_ISYNC_CNT_ADJ; /*< Address offset = 0x50 */
    jesdabc_mem_jesdabc_isync_bfn_cnt_sync_reg_t JESDABC_ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x54 */
    jesdabc_mem_jesdabc_isync_bfn_cnt_reg_t JESDABC_ISYNC_BFN_CNT; /*< Address offset = 0x58 */
    const uint8_t        reservedArea1 [932]; /*< Address offset = 0x5c */
    jesdabc_mem_jesdabc_bfne_config_reg_t JESDABC_BFNE_CONFIG[8]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea2 [32];  /*< Address offset = 0x420 */
    jesdabc_mem_jesdabc_bfne_incr_reg_t JESDABC_BFNE_INCR[8]; /*< Address offset = 0x440 */
    const uint8_t        reservedArea3 [32];  /*< Address offset = 0x460 */
    jesdabc_mem_jesdabc_bfne_start_reg_t JESDABC_BFNE_START[8]; /*< Address offset = 0x480 */
    const uint8_t        reservedArea4 [32];  /*< Address offset = 0x4a0 */
    jesdabc_mem_jesdabc_bfne_stat_reg_t JESDABC_BFNE_STAT[8]; /*< Address offset = 0x4c0 */
} jesdabc_bfn_events_t;     // size: 0x0034

// AddressSpace struct pointer
//
#define DLNK_JESDABC0_BFN_EVENTS ((jesdabc_bfn_events_t*) DLNK_JESDABC0_BFN_EVENTS_BASE)
#define DLNK_JESDABC1_BFN_EVENTS ((jesdabc_bfn_events_t*) DLNK_JESDABC1_BFN_EVENTS_BASE)
#define DLNK_JESDABC2_BFN_EVENTS ((jesdabc_bfn_events_t*) DLNK_JESDABC2_BFN_EVENTS_BASE)
#define DLNK_JESDABC3_BFN_EVENTS ((jesdabc_bfn_events_t*) DLNK_JESDABC3_BFN_EVENTS_BASE)

// ******************************************* /Address Space

#endif      // _JESDABC_BFN_EVENTS_H_

