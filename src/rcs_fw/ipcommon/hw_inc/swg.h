#ifndef _SWG_H_
#define _SWG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define VHA0_DL_SWG_BASE       ( 0x03c0b000 )
#define VHA0_UL_SWG_BASE       ( 0x03c1b000 )
#define VHA1_DL_SWG_BASE       ( 0x03c2b000 )
#define VHA1_UL_SWG_BASE       ( 0x03c3b000 )
#define VHA2_DL_SWG_BASE       ( 0x03c4b000 )
#define VHA2_UL_SWG_BASE       ( 0x03c5b000 )
#define VHA3_DL_SWG_BASE       ( 0x03c6b000 )
#define VHA3_UL_SWG_BASE       ( 0x03c7b000 )
#define VHA4_DL_SWG_BASE       ( 0x03c8b000 )
#define VHA4_UL_SWG_BASE       ( 0x03c9b000 )
#define VHA5_DL_SWG_BASE       ( 0x03cab000 )
#define VHA5_UL_SWG_BASE       ( 0x03cbb000 )
#define VHA6_DL_SWG_BASE       ( 0x03ccb000 )
#define VHA6_UL_SWG_BASE       ( 0x03cdb000 )
#define VHA7_DL_SWG_BASE       ( 0x03ceb000 )
#define VHA7_UL_SWG_BASE       ( 0x03cfb000 )
#define FB_ANT0_SWG_EVEN_BASE  ( 0x05029000 )
#define FB_ANT0_SWG_ODD_BASE   ( 0x05069000 )
#define FB_ANT1_SWG_EVEN_BASE  ( 0x050a9000 )
#define FB_ANT1_SWG_ODD_BASE   ( 0x050e9000 )
#define FB_SYS0_SWG0_BASE      ( 0x0510d000 )
#define FB_SYS1_SWG0_BASE      ( 0x0511d000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define SWG_INIT_UPPER_2D0_INIT_UPPER0_OFFSET ( 0x00000000U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER1_OFFSET ( 0x00000004U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER2_OFFSET ( 0x00000008U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER3_OFFSET ( 0x0000000cU )
#define SWG_INIT_UPPER_2D0_INIT_UPPER4_OFFSET ( 0x00000010U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER5_OFFSET ( 0x00000014U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER6_OFFSET ( 0x00000018U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER7_OFFSET ( 0x0000001cU )
#define SWG_INIT_UPPER_2D0_INIT_UPPER8_OFFSET ( 0x00000020U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER9_OFFSET ( 0x00000024U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER10_OFFSET ( 0x00000028U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER11_OFFSET ( 0x0000002cU )
#define SWG_INIT_UPPER_2D0_INIT_UPPER12_OFFSET ( 0x00000030U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER13_OFFSET ( 0x00000034U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER14_OFFSET ( 0x00000038U )
#define SWG_INIT_UPPER_2D0_INIT_UPPER15_OFFSET ( 0x0000003cU )
#define SWG_INIT_UPPER_2D1_INIT_UPPER0_OFFSET ( 0x00000040U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER1_OFFSET ( 0x00000044U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER2_OFFSET ( 0x00000048U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER3_OFFSET ( 0x0000004cU )
#define SWG_INIT_UPPER_2D1_INIT_UPPER4_OFFSET ( 0x00000050U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER5_OFFSET ( 0x00000054U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER6_OFFSET ( 0x00000058U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER7_OFFSET ( 0x0000005cU )
#define SWG_INIT_UPPER_2D1_INIT_UPPER8_OFFSET ( 0x00000060U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER9_OFFSET ( 0x00000064U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER10_OFFSET ( 0x00000068U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER11_OFFSET ( 0x0000006cU )
#define SWG_INIT_UPPER_2D1_INIT_UPPER12_OFFSET ( 0x00000070U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER13_OFFSET ( 0x00000074U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER14_OFFSET ( 0x00000078U )
#define SWG_INIT_UPPER_2D1_INIT_UPPER15_OFFSET ( 0x0000007cU )
#define SWG_INIT_UPPER_2D2_INIT_UPPER0_OFFSET ( 0x00000080U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER1_OFFSET ( 0x00000084U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER2_OFFSET ( 0x00000088U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER3_OFFSET ( 0x0000008cU )
#define SWG_INIT_UPPER_2D2_INIT_UPPER4_OFFSET ( 0x00000090U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER5_OFFSET ( 0x00000094U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER6_OFFSET ( 0x00000098U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER7_OFFSET ( 0x0000009cU )
#define SWG_INIT_UPPER_2D2_INIT_UPPER8_OFFSET ( 0x000000a0U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER9_OFFSET ( 0x000000a4U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER10_OFFSET ( 0x000000a8U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER11_OFFSET ( 0x000000acU )
#define SWG_INIT_UPPER_2D2_INIT_UPPER12_OFFSET ( 0x000000b0U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER13_OFFSET ( 0x000000b4U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER14_OFFSET ( 0x000000b8U )
#define SWG_INIT_UPPER_2D2_INIT_UPPER15_OFFSET ( 0x000000bcU )
#define SWG_INIT_UPPER_2D3_INIT_UPPER0_OFFSET ( 0x000000c0U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER1_OFFSET ( 0x000000c4U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER2_OFFSET ( 0x000000c8U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER3_OFFSET ( 0x000000ccU )
#define SWG_INIT_UPPER_2D3_INIT_UPPER4_OFFSET ( 0x000000d0U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER5_OFFSET ( 0x000000d4U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER6_OFFSET ( 0x000000d8U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER7_OFFSET ( 0x000000dcU )
#define SWG_INIT_UPPER_2D3_INIT_UPPER8_OFFSET ( 0x000000e0U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER9_OFFSET ( 0x000000e4U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER10_OFFSET ( 0x000000e8U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER11_OFFSET ( 0x000000ecU )
#define SWG_INIT_UPPER_2D3_INIT_UPPER12_OFFSET ( 0x000000f0U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER13_OFFSET ( 0x000000f4U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER14_OFFSET ( 0x000000f8U )
#define SWG_INIT_UPPER_2D3_INIT_UPPER15_OFFSET ( 0x000000fcU )
#define SWG_INIT_UPPER_2D4_INIT_UPPER0_OFFSET ( 0x00000100U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER1_OFFSET ( 0x00000104U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER2_OFFSET ( 0x00000108U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER3_OFFSET ( 0x0000010cU )
#define SWG_INIT_UPPER_2D4_INIT_UPPER4_OFFSET ( 0x00000110U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER5_OFFSET ( 0x00000114U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER6_OFFSET ( 0x00000118U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER7_OFFSET ( 0x0000011cU )
#define SWG_INIT_UPPER_2D4_INIT_UPPER8_OFFSET ( 0x00000120U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER9_OFFSET ( 0x00000124U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER10_OFFSET ( 0x00000128U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER11_OFFSET ( 0x0000012cU )
#define SWG_INIT_UPPER_2D4_INIT_UPPER12_OFFSET ( 0x00000130U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER13_OFFSET ( 0x00000134U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER14_OFFSET ( 0x00000138U )
#define SWG_INIT_UPPER_2D4_INIT_UPPER15_OFFSET ( 0x0000013cU )
#define SWG_INIT_UPPER_2D5_INIT_UPPER0_OFFSET ( 0x00000140U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER1_OFFSET ( 0x00000144U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER2_OFFSET ( 0x00000148U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER3_OFFSET ( 0x0000014cU )
#define SWG_INIT_UPPER_2D5_INIT_UPPER4_OFFSET ( 0x00000150U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER5_OFFSET ( 0x00000154U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER6_OFFSET ( 0x00000158U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER7_OFFSET ( 0x0000015cU )
#define SWG_INIT_UPPER_2D5_INIT_UPPER8_OFFSET ( 0x00000160U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER9_OFFSET ( 0x00000164U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER10_OFFSET ( 0x00000168U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER11_OFFSET ( 0x0000016cU )
#define SWG_INIT_UPPER_2D5_INIT_UPPER12_OFFSET ( 0x00000170U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER13_OFFSET ( 0x00000174U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER14_OFFSET ( 0x00000178U )
#define SWG_INIT_UPPER_2D5_INIT_UPPER15_OFFSET ( 0x0000017cU )
#define SWG_INIT_LOWER_2D0_INIT_LOWER0_OFFSET ( 0x00000200U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER1_OFFSET ( 0x00000204U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER2_OFFSET ( 0x00000208U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER3_OFFSET ( 0x0000020cU )
#define SWG_INIT_LOWER_2D0_INIT_LOWER4_OFFSET ( 0x00000210U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER5_OFFSET ( 0x00000214U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER6_OFFSET ( 0x00000218U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER7_OFFSET ( 0x0000021cU )
#define SWG_INIT_LOWER_2D0_INIT_LOWER8_OFFSET ( 0x00000220U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER9_OFFSET ( 0x00000224U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER10_OFFSET ( 0x00000228U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER11_OFFSET ( 0x0000022cU )
#define SWG_INIT_LOWER_2D0_INIT_LOWER12_OFFSET ( 0x00000230U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER13_OFFSET ( 0x00000234U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER14_OFFSET ( 0x00000238U )
#define SWG_INIT_LOWER_2D0_INIT_LOWER15_OFFSET ( 0x0000023cU )
#define SWG_INIT_LOWER_2D1_INIT_LOWER0_OFFSET ( 0x00000240U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER1_OFFSET ( 0x00000244U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER2_OFFSET ( 0x00000248U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER3_OFFSET ( 0x0000024cU )
#define SWG_INIT_LOWER_2D1_INIT_LOWER4_OFFSET ( 0x00000250U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER5_OFFSET ( 0x00000254U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER6_OFFSET ( 0x00000258U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER7_OFFSET ( 0x0000025cU )
#define SWG_INIT_LOWER_2D1_INIT_LOWER8_OFFSET ( 0x00000260U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER9_OFFSET ( 0x00000264U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER10_OFFSET ( 0x00000268U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER11_OFFSET ( 0x0000026cU )
#define SWG_INIT_LOWER_2D1_INIT_LOWER12_OFFSET ( 0x00000270U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER13_OFFSET ( 0x00000274U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER14_OFFSET ( 0x00000278U )
#define SWG_INIT_LOWER_2D1_INIT_LOWER15_OFFSET ( 0x0000027cU )
#define SWG_INIT_LOWER_2D2_INIT_LOWER0_OFFSET ( 0x00000280U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER1_OFFSET ( 0x00000284U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER2_OFFSET ( 0x00000288U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER3_OFFSET ( 0x0000028cU )
#define SWG_INIT_LOWER_2D2_INIT_LOWER4_OFFSET ( 0x00000290U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER5_OFFSET ( 0x00000294U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER6_OFFSET ( 0x00000298U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER7_OFFSET ( 0x0000029cU )
#define SWG_INIT_LOWER_2D2_INIT_LOWER8_OFFSET ( 0x000002a0U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER9_OFFSET ( 0x000002a4U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER10_OFFSET ( 0x000002a8U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER11_OFFSET ( 0x000002acU )
#define SWG_INIT_LOWER_2D2_INIT_LOWER12_OFFSET ( 0x000002b0U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER13_OFFSET ( 0x000002b4U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER14_OFFSET ( 0x000002b8U )
#define SWG_INIT_LOWER_2D2_INIT_LOWER15_OFFSET ( 0x000002bcU )
#define SWG_INIT_LOWER_2D3_INIT_LOWER0_OFFSET ( 0x000002c0U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER1_OFFSET ( 0x000002c4U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER2_OFFSET ( 0x000002c8U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER3_OFFSET ( 0x000002ccU )
#define SWG_INIT_LOWER_2D3_INIT_LOWER4_OFFSET ( 0x000002d0U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER5_OFFSET ( 0x000002d4U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER6_OFFSET ( 0x000002d8U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER7_OFFSET ( 0x000002dcU )
#define SWG_INIT_LOWER_2D3_INIT_LOWER8_OFFSET ( 0x000002e0U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER9_OFFSET ( 0x000002e4U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER10_OFFSET ( 0x000002e8U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER11_OFFSET ( 0x000002ecU )
#define SWG_INIT_LOWER_2D3_INIT_LOWER12_OFFSET ( 0x000002f0U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER13_OFFSET ( 0x000002f4U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER14_OFFSET ( 0x000002f8U )
#define SWG_INIT_LOWER_2D3_INIT_LOWER15_OFFSET ( 0x000002fcU )
#define SWG_INIT_LOWER_2D4_INIT_LOWER0_OFFSET ( 0x00000300U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER1_OFFSET ( 0x00000304U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER2_OFFSET ( 0x00000308U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER3_OFFSET ( 0x0000030cU )
#define SWG_INIT_LOWER_2D4_INIT_LOWER4_OFFSET ( 0x00000310U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER5_OFFSET ( 0x00000314U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER6_OFFSET ( 0x00000318U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER7_OFFSET ( 0x0000031cU )
#define SWG_INIT_LOWER_2D4_INIT_LOWER8_OFFSET ( 0x00000320U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER9_OFFSET ( 0x00000324U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER10_OFFSET ( 0x00000328U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER11_OFFSET ( 0x0000032cU )
#define SWG_INIT_LOWER_2D4_INIT_LOWER12_OFFSET ( 0x00000330U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER13_OFFSET ( 0x00000334U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER14_OFFSET ( 0x00000338U )
#define SWG_INIT_LOWER_2D4_INIT_LOWER15_OFFSET ( 0x0000033cU )
#define SWG_INIT_LOWER_2D5_INIT_LOWER0_OFFSET ( 0x00000340U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER1_OFFSET ( 0x00000344U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER2_OFFSET ( 0x00000348U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER3_OFFSET ( 0x0000034cU )
#define SWG_INIT_LOWER_2D5_INIT_LOWER4_OFFSET ( 0x00000350U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER5_OFFSET ( 0x00000354U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER6_OFFSET ( 0x00000358U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER7_OFFSET ( 0x0000035cU )
#define SWG_INIT_LOWER_2D5_INIT_LOWER8_OFFSET ( 0x00000360U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER9_OFFSET ( 0x00000364U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER10_OFFSET ( 0x00000368U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER11_OFFSET ( 0x0000036cU )
#define SWG_INIT_LOWER_2D5_INIT_LOWER12_OFFSET ( 0x00000370U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER13_OFFSET ( 0x00000374U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER14_OFFSET ( 0x00000378U )
#define SWG_INIT_LOWER_2D5_INIT_LOWER15_OFFSET ( 0x0000037cU )
#define SWG_INCR_UPPER0_OFFSET ( 0x00000400U )
#define SWG_INCR_UPPER1_OFFSET ( 0x00000404U )
#define SWG_INCR_UPPER2_OFFSET ( 0x00000408U )
#define SWG_INCR_UPPER3_OFFSET ( 0x0000040cU )
#define SWG_INCR_UPPER4_OFFSET ( 0x00000410U )
#define SWG_INCR_UPPER5_OFFSET ( 0x00000414U )
#define SWG_INCR_LOWER0_OFFSET ( 0x00000420U )
#define SWG_INCR_LOWER1_OFFSET ( 0x00000424U )
#define SWG_INCR_LOWER2_OFFSET ( 0x00000428U )
#define SWG_INCR_LOWER3_OFFSET ( 0x0000042cU )
#define SWG_INCR_LOWER4_OFFSET ( 0x00000430U )
#define SWG_INCR_LOWER5_OFFSET ( 0x00000434U )
#define SWG_INCR1_UPPER0_OFFSET ( 0x00000440U )
#define SWG_INCR1_UPPER1_OFFSET ( 0x00000444U )
#define SWG_INCR1_UPPER2_OFFSET ( 0x00000448U )
#define SWG_INCR1_UPPER3_OFFSET ( 0x0000044cU )
#define SWG_INCR1_UPPER4_OFFSET ( 0x00000450U )
#define SWG_INCR1_UPPER5_OFFSET ( 0x00000454U )
#define SWG_INCR1_LOWER0_OFFSET ( 0x00000460U )
#define SWG_INCR1_LOWER1_OFFSET ( 0x00000464U )
#define SWG_INCR1_LOWER2_OFFSET ( 0x00000468U )
#define SWG_INCR1_LOWER3_OFFSET ( 0x0000046cU )
#define SWG_INCR1_LOWER4_OFFSET ( 0x00000470U )
#define SWG_INCR1_LOWER5_OFFSET ( 0x00000474U )
#define SWG_EN0_OFFSET   ( 0x00000480U )
#define SWG_EN1_OFFSET   ( 0x00000484U )
#define SWG_EN2_OFFSET   ( 0x00000488U )
#define SWG_EN3_OFFSET   ( 0x0000048cU )
#define SWG_EN4_OFFSET   ( 0x00000490U )
#define SWG_EN5_OFFSET   ( 0x00000494U )
#define SWG_PAR_CLR_ERR_OFFSET ( 0x000004a0U )
#define SWG_PAR_TEST_CTRL_OFFSET ( 0x000004a4U )
#define SWG_EN_PER_SWG_OFFSET ( 0x000004a8U )
#define SWG_EXT_BYP_OFFSET   ( 0x000004acU )
#define SWG_TMR_CFG_OFFSET ( 0x000004b0U )
#define SWG_TMR_ERR_OFFSET ( 0x000004b4U )
#define SWG_INT_STAT_OFFSET ( 0x000004c0U )
#define SWG_INT_HIGH_EN_OFFSET ( 0x000004c4U )
#define SWG_INT_LOW_EN_OFFSET ( 0x000004c8U )
#define SWG_INT_CLR_OFFSET ( 0x000004ccU )
#define SWG_INT_FORCE_OFFSET ( 0x000004d0U )
#define SWG_TMR_ERR_INCR_UPPER_OFFSET ( 0x000004e0U )
#define SWG_TMR_ERR_INCR_LOWER_OFFSET ( 0x000004e4U )
#define SWG_SCRATCH_OFFSET   ( 0x000004f0U )
#define SWG_PAR_ERR_INIT_UPPER0_OFFSET ( 0x00000500U )
#define SWG_PAR_ERR_INIT_UPPER1_OFFSET ( 0x00000504U )
#define SWG_PAR_ERR_INIT_UPPER2_OFFSET ( 0x00000508U )
#define SWG_PAR_ERR_INIT_UPPER3_OFFSET ( 0x0000050cU )
#define SWG_PAR_ERR_INIT_UPPER4_OFFSET ( 0x00000510U )
#define SWG_PAR_ERR_INIT_UPPER5_OFFSET ( 0x00000514U )
#define SWG_PAR_ERR_INIT_LOWER0_OFFSET ( 0x00000520U )
#define SWG_PAR_ERR_INIT_LOWER1_OFFSET ( 0x00000524U )
#define SWG_PAR_ERR_INIT_LOWER2_OFFSET ( 0x00000528U )
#define SWG_PAR_ERR_INIT_LOWER3_OFFSET ( 0x0000052cU )
#define SWG_PAR_ERR_INIT_LOWER4_OFFSET ( 0x00000530U )
#define SWG_PAR_ERR_INIT_LOWER5_OFFSET ( 0x00000534U )
#define SWG_DUAL_FCW_CFG0_OFFSET ( 0x00000540U )
#define SWG_DUAL_FCW_CFG1_OFFSET ( 0x00000544U )
#define SWG_DUAL_FCW_CFG2_OFFSET ( 0x00000548U )
#define SWG_DUAL_FCW_CFG3_OFFSET ( 0x0000054cU )
#define SWG_DUAL_FCW_CFG4_OFFSET ( 0x00000550U )
#define SWG_DUAL_FCW_CFG5_OFFSET ( 0x00000554U )
#define SWG_APB_BRDG_STAT_OFFSET ( 0x000007fcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define SWG_INIT_UPPER_2D0_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER0_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER1_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER2_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER3_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER4_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER5_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER6_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER7_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER8_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER9_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER10_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER11_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER12_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER13_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER14_OFFSET ) ))
#define SWG_INIT_UPPER_2D0_INIT_UPPER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D0_INIT_UPPER15_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER0_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER1_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER2_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER3_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER4_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER5_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER6_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER7_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER8_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER9_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER10_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER11_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER12_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER13_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER14_OFFSET ) ))
#define SWG_INIT_UPPER_2D1_INIT_UPPER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D1_INIT_UPPER15_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER0_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER1_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER2_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER3_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER4_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER5_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER6_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER7_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER8_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER9_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER10_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER11_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER12_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER13_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER14_OFFSET ) ))
#define SWG_INIT_UPPER_2D2_INIT_UPPER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D2_INIT_UPPER15_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER0_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER1_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER2_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER3_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER4_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER5_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER6_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER7_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER8_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER9_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER10_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER11_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER12_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER13_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER14_OFFSET ) ))
#define SWG_INIT_UPPER_2D3_INIT_UPPER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D3_INIT_UPPER15_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER0_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER1_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER2_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER3_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER4_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER5_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER6_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER7_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER8_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER9_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER10_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER11_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER12_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER13_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER14_OFFSET ) ))
#define SWG_INIT_UPPER_2D4_INIT_UPPER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D4_INIT_UPPER15_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER0_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER1_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER2_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER3_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER4_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER5_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER6_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER7_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER8_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER9_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER10_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER11_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER12_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER13_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER14_OFFSET ) ))
#define SWG_INIT_UPPER_2D5_INIT_UPPER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_UPPER_2D5_INIT_UPPER15_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER0_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER1_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER2_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER3_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER4_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER5_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER6_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER7_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER8_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER9_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER10_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER11_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER12_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER13_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER14_OFFSET ) ))
#define SWG_INIT_LOWER_2D0_INIT_LOWER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D0_INIT_LOWER15_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER0_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER1_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER2_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER3_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER4_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER5_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER6_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER7_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER8_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER9_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER10_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER11_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER12_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER13_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER14_OFFSET ) ))
#define SWG_INIT_LOWER_2D1_INIT_LOWER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D1_INIT_LOWER15_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER0_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER1_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER2_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER3_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER4_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER5_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER6_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER7_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER8_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER9_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER10_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER11_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER12_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER13_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER14_OFFSET ) ))
#define SWG_INIT_LOWER_2D2_INIT_LOWER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D2_INIT_LOWER15_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER0_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER1_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER2_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER3_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER4_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER5_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER6_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER7_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER8_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER9_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER10_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER11_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER12_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER13_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER14_OFFSET ) ))
#define SWG_INIT_LOWER_2D3_INIT_LOWER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D3_INIT_LOWER15_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER0_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER1_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER2_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER3_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER4_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER5_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER6_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER7_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER8_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER9_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER10_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER11_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER12_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER13_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER14_OFFSET ) ))
#define SWG_INIT_LOWER_2D4_INIT_LOWER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D4_INIT_LOWER15_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER0_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER1_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER2_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER3_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER4_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER5_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER6_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER6_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER7_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER7_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER8_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER8_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER9_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER9_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER10_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER10_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER11_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER11_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER12_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER12_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER13_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER13_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER14_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER14_OFFSET ) ))
#define SWG_INIT_LOWER_2D5_INIT_LOWER15_ADR(_BASE) (( ( _BASE ) + ( SWG_INIT_LOWER_2D5_INIT_LOWER15_OFFSET ) ))
#define SWG_INCR_UPPER0_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_UPPER0_OFFSET ) ))
#define SWG_INCR_UPPER1_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_UPPER1_OFFSET ) ))
#define SWG_INCR_UPPER2_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_UPPER2_OFFSET ) ))
#define SWG_INCR_UPPER3_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_UPPER3_OFFSET ) ))
#define SWG_INCR_UPPER4_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_UPPER4_OFFSET ) ))
#define SWG_INCR_UPPER5_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_UPPER5_OFFSET ) ))
#define SWG_INCR_LOWER0_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_LOWER0_OFFSET ) ))
#define SWG_INCR_LOWER1_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_LOWER1_OFFSET ) ))
#define SWG_INCR_LOWER2_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_LOWER2_OFFSET ) ))
#define SWG_INCR_LOWER3_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_LOWER3_OFFSET ) ))
#define SWG_INCR_LOWER4_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_LOWER4_OFFSET ) ))
#define SWG_INCR_LOWER5_ADR(_BASE)  (( ( _BASE ) + ( SWG_INCR_LOWER5_OFFSET ) ))
#define SWG_INCR1_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_UPPER0_OFFSET ) ))
#define SWG_INCR1_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_UPPER1_OFFSET ) ))
#define SWG_INCR1_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_UPPER2_OFFSET ) ))
#define SWG_INCR1_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_UPPER3_OFFSET ) ))
#define SWG_INCR1_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_UPPER4_OFFSET ) ))
#define SWG_INCR1_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_UPPER5_OFFSET ) ))
#define SWG_INCR1_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_LOWER0_OFFSET ) ))
#define SWG_INCR1_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_LOWER1_OFFSET ) ))
#define SWG_INCR1_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_LOWER2_OFFSET ) ))
#define SWG_INCR1_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_LOWER3_OFFSET ) ))
#define SWG_INCR1_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_LOWER4_OFFSET ) ))
#define SWG_INCR1_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_INCR1_LOWER5_OFFSET ) ))
#define SWG_EN0_ADR(_BASE)      (( ( _BASE ) + ( SWG_EN0_OFFSET ) ))
#define SWG_EN1_ADR(_BASE)      (( ( _BASE ) + ( SWG_EN1_OFFSET ) ))
#define SWG_EN2_ADR(_BASE)      (( ( _BASE ) + ( SWG_EN2_OFFSET ) ))
#define SWG_EN3_ADR(_BASE)      (( ( _BASE ) + ( SWG_EN3_OFFSET ) ))
#define SWG_EN4_ADR(_BASE)      (( ( _BASE ) + ( SWG_EN4_OFFSET ) ))
#define SWG_EN5_ADR(_BASE)      (( ( _BASE ) + ( SWG_EN5_OFFSET ) ))
#define SWG_PAR_CLR_ERR_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_CLR_ERR_OFFSET ) ))
#define SWG_PAR_TEST_CTRL_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_TEST_CTRL_OFFSET ) ))
#define SWG_EN_PER_SWG_ADR(_BASE) (( ( _BASE ) + ( SWG_EN_PER_SWG_OFFSET ) ))
#define SWG_EXT_BYP_ADR(_BASE)      (( ( _BASE ) + ( SWG_EXT_BYP_OFFSET ) ))
#define SWG_TMR_CFG_ADR(_BASE)   (( ( _BASE ) + ( SWG_TMR_CFG_OFFSET ) ))
#define SWG_TMR_ERR_ADR(_BASE)    (( ( _BASE ) + ( SWG_TMR_ERR_OFFSET ) ))
#define SWG_INT_STAT_ADR(_BASE)   (( ( _BASE ) + ( SWG_INT_STAT_OFFSET ) ))
#define SWG_INT_HIGH_EN_ADR(_BASE)  (( ( _BASE ) + ( SWG_INT_HIGH_EN_OFFSET ) ))
#define SWG_INT_LOW_EN_ADR(_BASE)   (( ( _BASE ) + ( SWG_INT_LOW_EN_OFFSET ) ))
#define SWG_INT_CLR_ADR(_BASE)    (( ( _BASE ) + ( SWG_INT_CLR_OFFSET ) ))
#define SWG_INT_FORCE_ADR(_BASE)    (( ( _BASE ) + ( SWG_INT_FORCE_OFFSET ) ))
#define SWG_TMR_ERR_INCR_UPPER_ADR(_BASE) (( ( _BASE ) + ( SWG_TMR_ERR_INCR_UPPER_OFFSET ) ))
#define SWG_TMR_ERR_INCR_LOWER_ADR(_BASE) (( ( _BASE ) + ( SWG_TMR_ERR_INCR_LOWER_OFFSET ) ))
#define SWG_SCRATCH_ADR(_BASE)      (( ( _BASE ) + ( SWG_SCRATCH_OFFSET ) ))
#define SWG_PAR_ERR_INIT_UPPER0_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_UPPER0_OFFSET ) ))
#define SWG_PAR_ERR_INIT_UPPER1_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_UPPER1_OFFSET ) ))
#define SWG_PAR_ERR_INIT_UPPER2_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_UPPER2_OFFSET ) ))
#define SWG_PAR_ERR_INIT_UPPER3_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_UPPER3_OFFSET ) ))
#define SWG_PAR_ERR_INIT_UPPER4_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_UPPER4_OFFSET ) ))
#define SWG_PAR_ERR_INIT_UPPER5_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_UPPER5_OFFSET ) ))
#define SWG_PAR_ERR_INIT_LOWER0_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_LOWER0_OFFSET ) ))
#define SWG_PAR_ERR_INIT_LOWER1_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_LOWER1_OFFSET ) ))
#define SWG_PAR_ERR_INIT_LOWER2_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_LOWER2_OFFSET ) ))
#define SWG_PAR_ERR_INIT_LOWER3_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_LOWER3_OFFSET ) ))
#define SWG_PAR_ERR_INIT_LOWER4_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_LOWER4_OFFSET ) ))
#define SWG_PAR_ERR_INIT_LOWER5_ADR(_BASE) (( ( _BASE ) + ( SWG_PAR_ERR_INIT_LOWER5_OFFSET ) ))
#define SWG_DUAL_FCW_CFG0_ADR(_BASE) (( ( _BASE ) + ( SWG_DUAL_FCW_CFG0_OFFSET ) ))
#define SWG_DUAL_FCW_CFG1_ADR(_BASE) (( ( _BASE ) + ( SWG_DUAL_FCW_CFG1_OFFSET ) ))
#define SWG_DUAL_FCW_CFG2_ADR(_BASE) (( ( _BASE ) + ( SWG_DUAL_FCW_CFG2_OFFSET ) ))
#define SWG_DUAL_FCW_CFG3_ADR(_BASE) (( ( _BASE ) + ( SWG_DUAL_FCW_CFG3_OFFSET ) ))
#define SWG_DUAL_FCW_CFG4_ADR(_BASE) (( ( _BASE ) + ( SWG_DUAL_FCW_CFG4_OFFSET ) ))
#define SWG_DUAL_FCW_CFG5_ADR(_BASE) (( ( _BASE ) + ( SWG_DUAL_FCW_CFG5_OFFSET ) ))
#define SWG_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( SWG_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief SWG_MAP_SWG_MAP_INIT_UPPER_2D_INIT_UPPER[6][16] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/init_upper_2d/INIT_UPPER
  * Upper 6 bits [37:32] of init_upper
  */

typedef union {
  struct {
    uint32_t INIT_UPPER : 6;
    ///< initial theta upper 6 bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} swg_init_upper_2d_reg_t;

#define SWG_INIT_UPPER_2D_DEFAULT (0x00000000U)
#define SWG_INIT_UPPER_2D_RD_MASK (0x0000003fU)
#define SWG_INIT_UPPER_2D_WR_MASK (0x0000003fU)


///< initial theta upper 6 bits
#define SWG_INIT_UPPER_2D_INIT_UPPER_BF_OFF ( 0)
#define SWG_INIT_UPPER_2D_INIT_UPPER_BF_WID ( 6)
#define SWG_INIT_UPPER_2D_INIT_UPPER_BF_MSK (0x0000003F)
#define SWG_INIT_UPPER_2D_INIT_UPPER_BF_DEF (0x00000000)
#define SWG_INIT_UPPER_2D_ARR_SZ0 (6)
#define SWG_INIT_UPPER_2D_ARRAY_STRIDE0 (0x0040)
#define SWG_INIT_UPPER_2D_ARR_SZ1 (16)
#define SWG_INIT_UPPER_2D_ARRAY_STRIDE1 (0x0004)


/** @brief SWG_MAP_SWG_MAP_INIT_LOWER_2D_INIT_LOWER[6][16] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/init_lower_2d/INIT_LOWER
  * initial theta lower 32 bits
  */

typedef union {
  struct {
    uint32_t INIT_LOWER : 32;
    ///< initial theta lower 32 bits
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} swg_init_lower_2d_reg_t;

#define SWG_INIT_LOWER_2D_DEFAULT (0x00000000U)
#define SWG_INIT_LOWER_2D_RD_MASK (0xffffffffU)
#define SWG_INIT_LOWER_2D_WR_MASK (0xffffffffU)


///< initial theta lower 32 bits
#define SWG_INIT_LOWER_2D_INIT_LOWER_BF_OFF ( 0)
#define SWG_INIT_LOWER_2D_INIT_LOWER_BF_WID (32)
#define SWG_INIT_LOWER_2D_INIT_LOWER_BF_MSK (0xFFFFFFFF)
#define SWG_INIT_LOWER_2D_INIT_LOWER_BF_DEF (0x00000000)
#define SWG_INIT_LOWER_2D_ARR_SZ0 (6)
#define SWG_INIT_LOWER_2D_ARRAY_STRIDE0 (0x0040)
#define SWG_INIT_LOWER_2D_ARR_SZ1 (16)
#define SWG_INIT_LOWER_2D_ARRAY_STRIDE1 (0x0004)


/** @brief SWG_MAP_SWG_MAP_INCR_UPPER[6] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INCR_UPPER
  * theta incr upper 6 bits
  */

typedef union {
  struct {
    uint32_t INCR_UPPER : 6;
    ///< Upper portion (bits 37:32) of the SWG's incr value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} swg_incr_upper_reg_t;

#define SWG_INCR_UPPER_DEFAULT (0x00000000U)
#define SWG_INCR_UPPER_RD_MASK (0x0000003fU)
#define SWG_INCR_UPPER_WR_MASK (0x0000003fU)


///< Upper portion (bits 37:32) of the SWG's incr value.
#define SWG_INCR_UPPER_INCR_UPPER_BF_OFF ( 0)
#define SWG_INCR_UPPER_INCR_UPPER_BF_WID ( 6)
#define SWG_INCR_UPPER_INCR_UPPER_BF_MSK (0x0000003F)
#define SWG_INCR_UPPER_INCR_UPPER_BF_DEF (0x00000000)
#define SWG_INCR_UPPER_ARR_SZ0 (6)
#define SWG_INCR_UPPER_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_INCR_LOWER[6] register description at address offset 0x420
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INCR_LOWER
  * theta incr lower 32 bits
  */

typedef union {
  struct {
    uint32_t INCR_LOWER : 32;
    ///< Lower portion (bits 31:0) of the SWG's incr value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} swg_incr_lower_reg_t;

#define SWG_INCR_LOWER_DEFAULT (0x00000000U)
#define SWG_INCR_LOWER_RD_MASK (0xffffffffU)
#define SWG_INCR_LOWER_WR_MASK (0xffffffffU)


///< Lower portion (bits 31:0) of the SWG's incr value.
#define SWG_INCR_LOWER_INCR_LOWER_BF_OFF ( 0)
#define SWG_INCR_LOWER_INCR_LOWER_BF_WID (32)
#define SWG_INCR_LOWER_INCR_LOWER_BF_MSK (0xFFFFFFFF)
#define SWG_INCR_LOWER_INCR_LOWER_BF_DEF (0x00000000)
#define SWG_INCR_LOWER_ARR_SZ0 (6)
#define SWG_INCR_LOWER_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_INCR1_UPPER[6] register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INCR1_UPPER
  * theta incr upper 6 bits
  */

typedef union {
  struct {
    uint32_t INCR_UPPER : 6;
    ///< Upper portion (bits 37:32) of the SWG's incr value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} swg_incr1_upper_reg_t;

#define SWG_INCR1_UPPER_DEFAULT (0x00000000U)
#define SWG_INCR1_UPPER_RD_MASK (0x0000003fU)
#define SWG_INCR1_UPPER_WR_MASK (0x0000003fU)


///< Upper portion (bits 37:32) of the SWG's incr value.
#define SWG_INCR1_UPPER_INCR_UPPER_BF_OFF ( 0)
#define SWG_INCR1_UPPER_INCR_UPPER_BF_WID ( 6)
#define SWG_INCR1_UPPER_INCR_UPPER_BF_MSK (0x0000003F)
#define SWG_INCR1_UPPER_INCR_UPPER_BF_DEF (0x00000000)
#define SWG_INCR1_UPPER_ARR_SZ0 (6)
#define SWG_INCR1_UPPER_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_INCR1_LOWER[6] register description at address offset 0x460
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INCR1_LOWER
  * theta incr lower 32 bits
  */

typedef union {
  struct {
    uint32_t INCR_LOWER : 32;
    ///< Lower portion (bits 31:0) of the SWG's incr value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} swg_incr1_lower_reg_t;

#define SWG_INCR1_LOWER_DEFAULT (0x00000000U)
#define SWG_INCR1_LOWER_RD_MASK (0xffffffffU)
#define SWG_INCR1_LOWER_WR_MASK (0xffffffffU)


///< Lower portion (bits 31:0) of the SWG's incr value.
#define SWG_INCR1_LOWER_INCR_LOWER_BF_OFF ( 0)
#define SWG_INCR1_LOWER_INCR_LOWER_BF_WID (32)
#define SWG_INCR1_LOWER_INCR_LOWER_BF_MSK (0xFFFFFFFF)
#define SWG_INCR1_LOWER_INCR_LOWER_BF_DEF (0x00000000)
#define SWG_INCR1_LOWER_ARR_SZ0 (6)
#define SWG_INCR1_LOWER_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_ENABLE[6] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/ENABLE
  * bitwise enable for all the CORDICs in the given SWG
  */

typedef union {
  struct {
    uint32_t ENABLE : 16;
    ///< Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} swg_en_reg_t;

#define SWG_EN_DEFAULT (0x00000000U)
#define SWG_EN_RD_MASK (0x0000ffffU)
#define SWG_EN_WR_MASK (0x0000ffffU)


///< Enable
#define SWG_EN_BF_OFF ( 0)
#define SWG_EN_BF_WID (16)
#define SWG_EN_BF_MSK (0x0000FFFF)
#define SWG_EN_BF_DEF (0x00000000)
#define SWG_EN_ARR_SZ0 (6)
#define SWG_EN_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_PAR_CLR_ERROR register description at address offset 0x4a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/PAR_CLR_ERROR
  * SWG parity clear error register.
  */

typedef union {
  struct {
    uint32_t CLR_ERROR : 6;
    ///< Clears all the parity errors for init registers (upper and lower)
    ///< of a given SWG. 1 bit per SWG.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} swg_par_clr_err_reg_t;

#define SWG_PAR_CLR_ERR_DEFAULT (0x00000000U)
#define SWG_PAR_CLR_ERR_RD_MASK (0x0000003fU)
#define SWG_PAR_CLR_ERR_WR_MASK (0xffff003fU)


///< Clears all the parity errors for init registers (upper and lower)
///< of a given SWG. 1 bit per SWG.
#define SWG_PAR_CLR_ERR_CLR_ERR_BF_OFF ( 0)
#define SWG_PAR_CLR_ERR_CLR_ERR_BF_WID ( 6)
#define SWG_PAR_CLR_ERR_CLR_ERR_BF_MSK (0x0000003F)
#define SWG_PAR_CLR_ERR_CLR_ERR_BF_DEF (0x00000000)
#define SWG_PAR_CLR_ERR_MASK_BF_OFF (16)
#define SWG_PAR_CLR_ERR_MASK_BF_WID (16)
#define SWG_PAR_CLR_ERR_MASK_BF_MSK (0xFFFF0000)


/** @brief SWG_MAP_SWG_MAP_PAR_TEST_CTRL register description at address offset 0x4a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/PAR_TEST_CTRL
  * SWG parity test ctrl register.
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 1;
    ///< When set to 1, forces the parity error bit to be set for the given
    ///< init register being written to.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} swg_par_test_ctrl_reg_t;

#define SWG_PAR_TEST_CTRL_DEFAULT (0x00000000U)
#define SWG_PAR_TEST_CTRL_RD_MASK (0x00000001U)
#define SWG_PAR_TEST_CTRL_WR_MASK (0x00000001U)


///< When set to 1, forces the parity error bit to be set for the given
///< init register being written to.
#define SWG_PAR_TEST_CTRL_TEST_CTRL_BF_OFF ( 0)
#define SWG_PAR_TEST_CTRL_TEST_CTRL_BF_WID ( 1)
#define SWG_PAR_TEST_CTRL_TEST_CTRL_BF_MSK (0x00000001)
#define SWG_PAR_TEST_CTRL_TEST_CTRL_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_ENABLE_PER_SWG register description at address offset 0x4a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/ENABLE_PER_SWG
  * bitwise enable for all the CORDICs in the given SWG
  */

typedef union {
  struct {
    uint32_t ENABLE_PER_SWG : 6;
    ///< Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} swg_en_per_swg_reg_t;

#define SWG_EN_PER_SWG_DEFAULT (0x00000000U)
#define SWG_EN_PER_SWG_RD_MASK (0x0000003fU)
#define SWG_EN_PER_SWG_WR_MASK (0xffff003fU)


///< Enable
#define SWG_EN_PER_SWG_EN_PER_SWG_BF_OFF ( 0)
#define SWG_EN_PER_SWG_EN_PER_SWG_BF_WID ( 6)
#define SWG_EN_PER_SWG_EN_PER_SWG_BF_MSK (0x0000003F)
#define SWG_EN_PER_SWG_EN_PER_SWG_BF_DEF (0x00000000)
#define SWG_EN_PER_SWG_MASK_BF_OFF (16)
#define SWG_EN_PER_SWG_MASK_BF_WID (16)
#define SWG_EN_PER_SWG_MASK_BF_MSK (0xFFFF0000)


/** @brief SWG_MAP_SWG_MAP_EXT_BYP register description at address offset 0x4ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/EXT_BYP
  * allows the external trigger enable to be bypassed
  */

typedef union {
  struct {
    uint32_t BYP_EXT : 6;
    ///< Bypass external trigger.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} swg_ext_byp_reg_t;

#define SWG_EXT_BYP_DEFAULT (0x00000000U)
#define SWG_EXT_BYP_RD_MASK (0x0000003fU)
#define SWG_EXT_BYP_WR_MASK (0xffff003fU)


///< Bypass external trigger.
#define SWG_EXT_BYP_EXT_BF_OFF ( 0)
#define SWG_EXT_BYP_EXT_BF_WID ( 6)
#define SWG_EXT_BYP_EXT_BF_MSK (0x0000003F)
#define SWG_EXT_BYP_EXT_BF_DEF (0x00000000)
#define SWG_EXT_BYP_MASK_BF_OFF (16)
#define SWG_EXT_BYP_MASK_BF_WID (16)
#define SWG_EXT_BYP_MASK_BF_MSK (0xFFFF0000)


/** @brief SWG_MAP_SWG_MAP_TMR_CONFIG register description at address offset 0x4b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/TMR_CONFIG
  * TMR Config
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 2;
    ///< TMR Test Control:</br> * (0) write all 3 copies (default behavior)</br>
    ///< * (1) write copy 1 only</br> * (2) write copy 2 only</br> * (3) write
    ///< copy 3 only
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} swg_tmr_cfg_reg_t;

#define SWG_TMR_CFG_DEFAULT (0x00000000U)
#define SWG_TMR_CFG_RD_MASK (0x00000003U)
#define SWG_TMR_CFG_WR_MASK (0x00000003U)


///< TMR Test Control:</br> * (0) write all 3 copies (default behavior)</br>
///< * (1) write copy 1 only</br> * (2) write copy 2 only</br> * (3) write
///< copy 3 only
#define SWG_TMR_CFG_TEST_CTRL_BF_OFF ( 0)
#define SWG_TMR_CFG_TEST_CTRL_BF_WID ( 2)
#define SWG_TMR_CFG_TEST_CTRL_BF_MSK (0x00000003)
#define SWG_TMR_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_TMR_ERROR register description at address offset 0x4b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/TMR_ERROR
  * TMR Error
  */

typedef union {
  struct {
    uint32_t INCR : 1;
    ///< INCR register.
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t TMR_CONFIG : 1;
    ///< TMR Configuration.
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} swg_tmr_err_reg_t;

#define SWG_TMR_ERR_DEFAULT (0x00000000U)
#define SWG_TMR_ERR_RD_MASK (0x00000003U)
#define SWG_TMR_ERR_WR_MASK (0x00000003U)


///< INCR register.
#define SWG_TMR_ERR_INCR_BF_OFF ( 0)
#define SWG_TMR_ERR_INCR_BF_WID ( 1)
#define SWG_TMR_ERR_INCR_BF_MSK (0x00000001)
#define SWG_TMR_ERR_INCR_BF_DEF (0x00000000)

///< TMR Configuration.
#define SWG_TMR_ERR_TMR_CFG_BF_OFF ( 1)
#define SWG_TMR_ERR_TMR_CFG_BF_WID ( 1)
#define SWG_TMR_ERR_TMR_CFG_BF_MSK (0x00000002)
#define SWG_TMR_ERR_TMR_CFG_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_INT_STATUS register description at address offset 0x4c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INT_STATUS
  * Interrupt Status
  */

typedef union {
  struct {
    uint32_t PAR_ERR : 1;
    ///< Indicates that one of the abc_parity_reg hosting the SWG's init value
    ///< incurred a parity error.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TMR_INCR_ERR : 1;
    ///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TMR_CONFIG_ERR : 1;
    ///< Indicates that the TMR_CONFIG register incurred a TMR error.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} swg_int_stat_reg_t;

#define SWG_INT_STAT_DEFAULT (0x00000000U)
#define SWG_INT_STAT_RD_MASK (0x00000007U)
#define SWG_INT_STAT_WR_MASK (0x00000000U)


///< Indicates that one of the abc_parity_reg hosting the SWG's init value
///< incurred a parity error.
#define SWG_INT_STAT_PAR_ERR_BF_OFF ( 0)
#define SWG_INT_STAT_PAR_ERR_BF_WID ( 1)
#define SWG_INT_STAT_PAR_ERR_BF_MSK (0x00000001)
#define SWG_INT_STAT_PAR_ERR_BF_DEF (0x00000000)

///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
#define SWG_INT_STAT_TMR_INCR_ERR_BF_OFF ( 1)
#define SWG_INT_STAT_TMR_INCR_ERR_BF_WID ( 1)
#define SWG_INT_STAT_TMR_INCR_ERR_BF_MSK (0x00000002)
#define SWG_INT_STAT_TMR_INCR_ERR_BF_DEF (0x00000000)

///< Indicates that the TMR_CONFIG register incurred a TMR error.
#define SWG_INT_STAT_TMR_CFG_ERR_BF_OFF ( 2)
#define SWG_INT_STAT_TMR_CFG_ERR_BF_WID ( 1)
#define SWG_INT_STAT_TMR_CFG_ERR_BF_MSK (0x00000004)
#define SWG_INT_STAT_TMR_CFG_ERR_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_INT_HIGH_EN register description at address offset 0x4c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INT_HIGH_EN
  * Interrupt High Enable
  */

typedef union {
  struct {
    uint32_t PAR_ERR : 1;
    ///< Indicates that one of the abc_parity_reg hosting the SWG's init value
    ///< incurred a parity error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TMR_INCR_ERR : 1;
    ///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TMR_CONFIG_ERR : 1;
    ///< Indicates that the TMR_CONFIG register incurred a TMR error.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} swg_int_high_en_reg_t;

#define SWG_INT_HIGH_EN_DEFAULT (0x00000000U)
#define SWG_INT_HIGH_EN_RD_MASK (0x00000007U)
#define SWG_INT_HIGH_EN_WR_MASK (0x00000007U)


///< Indicates that one of the abc_parity_reg hosting the SWG's init value
///< incurred a parity error.
#define SWG_INT_HIGH_EN_PAR_ERR_BF_OFF ( 0)
#define SWG_INT_HIGH_EN_PAR_ERR_BF_WID ( 1)
#define SWG_INT_HIGH_EN_PAR_ERR_BF_MSK (0x00000001)
#define SWG_INT_HIGH_EN_PAR_ERR_BF_DEF (0x00000000)

///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
#define SWG_INT_HIGH_EN_TMR_INCR_ERR_BF_OFF ( 1)
#define SWG_INT_HIGH_EN_TMR_INCR_ERR_BF_WID ( 1)
#define SWG_INT_HIGH_EN_TMR_INCR_ERR_BF_MSK (0x00000002)
#define SWG_INT_HIGH_EN_TMR_INCR_ERR_BF_DEF (0x00000000)

///< Indicates that the TMR_CONFIG register incurred a TMR error.
#define SWG_INT_HIGH_EN_TMR_CFG_ERR_BF_OFF ( 2)
#define SWG_INT_HIGH_EN_TMR_CFG_ERR_BF_WID ( 1)
#define SWG_INT_HIGH_EN_TMR_CFG_ERR_BF_MSK (0x00000004)
#define SWG_INT_HIGH_EN_TMR_CFG_ERR_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_INT_LOW_EN register description at address offset 0x4c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INT_LOW_EN
  * Interrupt Low Enable
  */

typedef union {
  struct {
    uint32_t PAR_ERR : 1;
    ///< Indicates that one of the abc_parity_reg hosting the SWG's init value
    ///< incurred a parity error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TMR_INCR_ERR : 1;
    ///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TMR_CONFIG_ERR : 1;
    ///< Indicates that the TMR_CONFIG register incurred a TMR error.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} swg_int_low_en_reg_t;

#define SWG_INT_LOW_EN_DEFAULT (0x00000000U)
#define SWG_INT_LOW_EN_RD_MASK (0x00000007U)
#define SWG_INT_LOW_EN_WR_MASK (0x00000007U)


///< Indicates that one of the abc_parity_reg hosting the SWG's init value
///< incurred a parity error.
#define SWG_INT_LOW_EN_PAR_ERR_BF_OFF ( 0)
#define SWG_INT_LOW_EN_PAR_ERR_BF_WID ( 1)
#define SWG_INT_LOW_EN_PAR_ERR_BF_MSK (0x00000001)
#define SWG_INT_LOW_EN_PAR_ERR_BF_DEF (0x00000000)

///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
#define SWG_INT_LOW_EN_TMR_INCR_ERR_BF_OFF ( 1)
#define SWG_INT_LOW_EN_TMR_INCR_ERR_BF_WID ( 1)
#define SWG_INT_LOW_EN_TMR_INCR_ERR_BF_MSK (0x00000002)
#define SWG_INT_LOW_EN_TMR_INCR_ERR_BF_DEF (0x00000000)

///< Indicates that the TMR_CONFIG register incurred a TMR error.
#define SWG_INT_LOW_EN_TMR_CFG_ERR_BF_OFF ( 2)
#define SWG_INT_LOW_EN_TMR_CFG_ERR_BF_WID ( 1)
#define SWG_INT_LOW_EN_TMR_CFG_ERR_BF_MSK (0x00000004)
#define SWG_INT_LOW_EN_TMR_CFG_ERR_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_INT_CLEAR register description at address offset 0x4cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INT_CLEAR
  * SWG Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t PAR_ERR : 1;
    ///< Indicates that one of the abc_parity_reg hosting the SWG's init value
    ///< incurred a parity error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TMR_INCR_ERR : 1;
    ///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TMR_CONFIG_ERR : 1;
    ///< Indicates that the TMR_CONFIG register incurred a TMR error.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} swg_int_clr_reg_t;

#define SWG_INT_CLR_DEFAULT (0x00000000U)
#define SWG_INT_CLR_RD_MASK (0x00000007U)
#define SWG_INT_CLR_WR_MASK (0x00000007U)


///< Indicates that one of the abc_parity_reg hosting the SWG's init value
///< incurred a parity error.
#define SWG_INT_CLR_PAR_ERR_BF_OFF ( 0)
#define SWG_INT_CLR_PAR_ERR_BF_WID ( 1)
#define SWG_INT_CLR_PAR_ERR_BF_MSK (0x00000001)
#define SWG_INT_CLR_PAR_ERR_BF_DEF (0x00000000)

///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
#define SWG_INT_CLR_TMR_INCR_ERR_BF_OFF ( 1)
#define SWG_INT_CLR_TMR_INCR_ERR_BF_WID ( 1)
#define SWG_INT_CLR_TMR_INCR_ERR_BF_MSK (0x00000002)
#define SWG_INT_CLR_TMR_INCR_ERR_BF_DEF (0x00000000)

///< Indicates that the TMR_CONFIG register incurred a TMR error.
#define SWG_INT_CLR_TMR_CFG_ERR_BF_OFF ( 2)
#define SWG_INT_CLR_TMR_CFG_ERR_BF_WID ( 1)
#define SWG_INT_CLR_TMR_CFG_ERR_BF_MSK (0x00000004)
#define SWG_INT_CLR_TMR_CFG_ERR_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_INT_FORCE register description at address offset 0x4d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/INT_FORCE
  * SWG Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t PAR_ERR : 1;
    ///< Indicates that one of the abc_parity_reg hosting the SWG's init value
    ///< incurred a parity error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TMR_INCR_ERR : 1;
    ///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TMR_CONFIG_ERR : 1;
    ///< Indicates that the TMR_CONFIG register incurred a TMR error.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} swg_int_force_reg_t;

#define SWG_INT_FORCE_DEFAULT (0x00000000U)
#define SWG_INT_FORCE_RD_MASK (0x00000007U)
#define SWG_INT_FORCE_WR_MASK (0x00000007U)


///< Indicates that one of the abc_parity_reg hosting the SWG's init value
///< incurred a parity error.
#define SWG_INT_FORCE_PAR_ERR_BF_OFF ( 0)
#define SWG_INT_FORCE_PAR_ERR_BF_WID ( 1)
#define SWG_INT_FORCE_PAR_ERR_BF_MSK (0x00000001)
#define SWG_INT_FORCE_PAR_ERR_BF_DEF (0x00000000)

///< Indicates that on of the TMR_INCR  registers incurred a TMR error.
#define SWG_INT_FORCE_TMR_INCR_ERR_BF_OFF ( 1)
#define SWG_INT_FORCE_TMR_INCR_ERR_BF_WID ( 1)
#define SWG_INT_FORCE_TMR_INCR_ERR_BF_MSK (0x00000002)
#define SWG_INT_FORCE_TMR_INCR_ERR_BF_DEF (0x00000000)

///< Indicates that the TMR_CONFIG register incurred a TMR error.
#define SWG_INT_FORCE_TMR_CFG_ERR_BF_OFF ( 2)
#define SWG_INT_FORCE_TMR_CFG_ERR_BF_WID ( 1)
#define SWG_INT_FORCE_TMR_CFG_ERR_BF_MSK (0x00000004)
#define SWG_INT_FORCE_TMR_CFG_ERR_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_TMR_ERR_INCR_UPPER register description at address offset 0x4e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/TMR_ERR_INCR_UPPER
  * SWG TMR error incr_upper register.
  */

typedef union {
  struct {
    uint32_t TMR_ERR_INCR_UPPER : 6;
    ///< A  1  in the ith position indicates a TMR error occured for the upper_incr
    ///< value for the ith SWG. A 0 indicates that there is no TMR error.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TMR_ERR_INCR1_UPPER : 6;
    ///< A  1  in the ith position indicates a TMR error occured for the upper_incr
    ///< value for FCW1 for the ith SWG. A 0 indicates that there is no TMR
    ///< error.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} swg_tmr_err_incr_upper_reg_t;

#define SWG_TMR_ERR_INCR_UPPER_DEFAULT (0x00000000U)
#define SWG_TMR_ERR_INCR_UPPER_RD_MASK (0x00003f3fU)
#define SWG_TMR_ERR_INCR_UPPER_WR_MASK (0x00000000U)


///< A  1  in the ith position indicates a TMR error occured for the upper_incr
///< value for the ith SWG. A 0 indicates that there is no TMR error.
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR_UPPER_BF_OFF ( 0)
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR_UPPER_BF_WID ( 6)
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR_UPPER_BF_MSK (0x0000003F)
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR_UPPER_BF_DEF (0x00000000)

///< A  1  in the ith position indicates a TMR error occured for the upper_incr
///< value for FCW1 for the ith SWG. A 0 indicates that there is no TMR
///< error.
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR1_UPPER_BF_OFF ( 8)
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR1_UPPER_BF_WID ( 6)
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR1_UPPER_BF_MSK (0x00003F00)
#define SWG_TMR_ERR_INCR_UPPER_TMR_ERR_INCR1_UPPER_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_TMR_ERR_INCR_LOWER register description at address offset 0x4e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/TMR_ERR_INCR_LOWER
  * SWG TMR error incr_lower register.
  */

typedef union {
  struct {
    uint32_t TMR_ERR_INCR_LOWER : 6;
    ///< A  1  in the ith position indicates a TMR error occured for the lower_incr
    ///< value for the ith SWG. A 0 indicates that there is no TMR error.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TMR_ERR_INCR1_LOWER : 6;
    ///< A  1  in the ith position indicates a TMR error occured for the lower_incr
    ///< value for FCW1 for the ith SWG. A 0 indicates that there is no TMR
    ///< error.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} swg_tmr_err_incr_lower_reg_t;

#define SWG_TMR_ERR_INCR_LOWER_DEFAULT (0x00000000U)
#define SWG_TMR_ERR_INCR_LOWER_RD_MASK (0x00003f3fU)
#define SWG_TMR_ERR_INCR_LOWER_WR_MASK (0x00000000U)


///< A  1  in the ith position indicates a TMR error occured for the lower_incr
///< value for the ith SWG. A 0 indicates that there is no TMR error.
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR_LOWER_BF_OFF ( 0)
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR_LOWER_BF_WID ( 6)
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR_LOWER_BF_MSK (0x0000003F)
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR_LOWER_BF_DEF (0x00000000)

///< A  1  in the ith position indicates a TMR error occured for the lower_incr
///< value for FCW1 for the ith SWG. A 0 indicates that there is no TMR
///< error.
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR1_LOWER_BF_OFF ( 8)
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR1_LOWER_BF_WID ( 6)
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR1_LOWER_BF_MSK (0x00003F00)
#define SWG_TMR_ERR_INCR_LOWER_TMR_ERR_INCR1_LOWER_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_SCRATCH register description at address offset 0x4f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/SCRATCH
  * SWG scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} swg_scratch_reg_t;

#define SWG_SCRATCH_DEFAULT (0x00000000U)
#define SWG_SCRATCH_RD_MASK (0xffffffffU)
#define SWG_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field.
#define SWG_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define SWG_SCRATCH_SCRATCHPAD_BF_WID (32)
#define SWG_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define SWG_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief SWG_MAP_SWG_MAP_PAR_ERR_INIT_UPPER[6] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/PAR_ERR_INIT_UPPER
  * SWG parrity error init_upper register.
  */

typedef union {
  struct {
    uint32_t INIT_UPPER_ERR : 16;
    ///< A  1  in the ith position indicates a parity error in upper_init value
    ///< of the ith CORDIC of the corresponding SWG. A 0 indicates that there
    ///< is no parity error.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} swg_par_err_init_upper_reg_t;

#define SWG_PAR_ERR_INIT_UPPER_DEFAULT (0x00000000U)
#define SWG_PAR_ERR_INIT_UPPER_RD_MASK (0x0000ffffU)
#define SWG_PAR_ERR_INIT_UPPER_WR_MASK (0x00000000U)


///< A  1  in the ith position indicates a parity error in upper_init value
///< of the ith CORDIC of the corresponding SWG. A 0 indicates that there
///< is no parity error.
#define SWG_PAR_ERR_INIT_UPPER_INIT_UPPER_ERR_BF_OFF ( 0)
#define SWG_PAR_ERR_INIT_UPPER_INIT_UPPER_ERR_BF_WID (16)
#define SWG_PAR_ERR_INIT_UPPER_INIT_UPPER_ERR_BF_MSK (0x0000FFFF)
#define SWG_PAR_ERR_INIT_UPPER_INIT_UPPER_ERR_BF_DEF (0x00000000)
#define SWG_PAR_ERR_INIT_UPPER_ARR_SZ0 (6)
#define SWG_PAR_ERR_INIT_UPPER_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_PAR_ERR_INIT_LOWER[6] register description at address offset 0x520
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/PAR_ERR_INIT_LOWER
  * SWG parrity error init_lower register.
  */

typedef union {
  struct {
    uint32_t INIT_LOWER_ERR : 16;
    ///< A  1  in the ith position indicates a parity error in the lower_init
    ///< value of the ith CORDIC of the corresponding SWG. A 0 indicates that
    ///< there is no parity error.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} swg_par_err_init_lower_reg_t;

#define SWG_PAR_ERR_INIT_LOWER_DEFAULT (0x00000000U)
#define SWG_PAR_ERR_INIT_LOWER_RD_MASK (0x0000ffffU)
#define SWG_PAR_ERR_INIT_LOWER_WR_MASK (0x00000000U)


///< A  1  in the ith position indicates a parity error in the lower_init
///< value of the ith CORDIC of the corresponding SWG. A 0 indicates that
///< there is no parity error.
#define SWG_PAR_ERR_INIT_LOWER_INIT_LOWER_ERR_BF_OFF ( 0)
#define SWG_PAR_ERR_INIT_LOWER_INIT_LOWER_ERR_BF_WID (16)
#define SWG_PAR_ERR_INIT_LOWER_INIT_LOWER_ERR_BF_MSK (0x0000FFFF)
#define SWG_PAR_ERR_INIT_LOWER_INIT_LOWER_ERR_BF_DEF (0x00000000)
#define SWG_PAR_ERR_INIT_LOWER_ARR_SZ0 (6)
#define SWG_PAR_ERR_INIT_LOWER_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_DUAL_FCW_CONFIG[6] register description at address offset 0x540
  *
  * Register default value:        0x00000000
  * Register full path in IP: swg_map/SWG_MAP/DUAL_FCW_CONFIG
  * Dual FCW CONFIG register.
  */

typedef union {
  struct {
    uint32_t DUAL_FCW_ENABLE : 1;
    ///< When set to 0, the SWG only used FCW0 (frequency control word 0, or
    ///< incr) when generating its output. When set to 1, the SWG is configured
    ///< to use 2 FCW (frequency control word, also referred to as incr) to
    ///< control the frequency of the SWG output. In this mode of operation,
    ///< FCW0 (incr) is used for M clock cycles and FCW1 (incr1) is used for
    ///< N clock cycles every M+N clock cycles. Hence, the SWG uses the following
    ///< control word sequence: FCW0, FCW1, FCW0, FCW1, ....
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t COUNT0 : 8;
    ///< When dual_fcw_enable = 1, the SWG will use FCW0 for   Count0+1  clock
    ///< cycles prior to switching to FCW1.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t COUNT1 : 8;
    ///< When dual_fcw_enable = 1, the SWG will use FCW1 for   Count1+1  clock
    ///< cycles prior to switching to FCW0.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} swg_dual_fcw_cfg_reg_t;

#define SWG_DUAL_FCW_CFG_DEFAULT (0x00000000U)
#define SWG_DUAL_FCW_CFG_RD_MASK (0x0001ffffU)
#define SWG_DUAL_FCW_CFG_WR_MASK (0x0001ffffU)


///< When set to 0, the SWG only used FCW0 (frequency control word 0, or
///< incr) when generating its output. When set to 1, the SWG is configured
///< to use 2 FCW (frequency control word, also referred to as incr) to
///< control the frequency of the SWG output. In this mode of operation,
///< FCW0 (incr) is used for M clock cycles and FCW1 (incr1) is used for
///< N clock cycles every M+N clock cycles. Hence, the SWG uses the following
///< control word sequence: FCW0, FCW1, FCW0, FCW1, ....
#define SWG_DUAL_FCW_CFG_DUAL_FCW_EN_BF_OFF ( 0)
#define SWG_DUAL_FCW_CFG_DUAL_FCW_EN_BF_WID ( 1)
#define SWG_DUAL_FCW_CFG_DUAL_FCW_EN_BF_MSK (0x00000001)
#define SWG_DUAL_FCW_CFG_DUAL_FCW_EN_BF_DEF (0x00000000)

///< When dual_fcw_enable = 1, the SWG will use FCW0 for   Count0+1  clock
///< cycles prior to switching to FCW1.
#define SWG_DUAL_FCW_CFG_CNT0_BF_OFF ( 1)
#define SWG_DUAL_FCW_CFG_CNT0_BF_WID ( 8)
#define SWG_DUAL_FCW_CFG_CNT0_BF_MSK (0x000001FE)
#define SWG_DUAL_FCW_CFG_CNT0_BF_DEF (0x00000000)

///< When dual_fcw_enable = 1, the SWG will use FCW1 for   Count1+1  clock
///< cycles prior to switching to FCW0.
#define SWG_DUAL_FCW_CFG_CNT1_BF_OFF ( 9)
#define SWG_DUAL_FCW_CFG_CNT1_BF_WID ( 8)
#define SWG_DUAL_FCW_CFG_CNT1_BF_MSK (0x0001FE00)
#define SWG_DUAL_FCW_CFG_CNT1_BF_DEF (0x00000000)
#define SWG_DUAL_FCW_CFG_ARR_SZ0 (6)
#define SWG_DUAL_FCW_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief SWG_MAP_SWG_MAP_APB_BRIDGE_STATUS register description at address offset 0x7fc
  *
  * Register default value:        0x00010000
  * Register full path in IP: swg_map/SWG_MAP/APB_BRIDGE_STATUS
  * SWG APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number.
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set.
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received.
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set.
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out.
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} swg_apb_brdg_stat_reg_t;

#define SWG_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define SWG_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define SWG_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request.
#define SWG_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define SWG_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define SWG_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define SWG_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number.
#define SWG_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define SWG_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define SWG_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define SWG_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set.
#define SWG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define SWG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define SWG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define SWG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received.
#define SWG_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define SWG_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define SWG_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define SWG_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set.
#define SWG_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define SWG_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define SWG_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define SWG_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out.
#define SWG_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define SWG_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define SWG_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define SWG_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define SWG_INIT_UPPER_2D0_INIT_UPPER0_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER0_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER1_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER1_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER2_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER2_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER3_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER3_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER4_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER4_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER5_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER5_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER6_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER6_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER7_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER7_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER8_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER8_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER9_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER9_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER10_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER10_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER11_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER11_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER12_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER12_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER13_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER13_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER14_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER14_ADR(_BASE))
#define SWG_INIT_UPPER_2D0_INIT_UPPER15_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D0_INIT_UPPER15_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER0_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER0_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER1_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER1_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER2_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER2_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER3_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER3_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER4_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER4_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER5_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER5_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER6_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER6_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER7_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER7_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER8_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER8_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER9_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER9_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER10_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER10_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER11_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER11_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER12_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER12_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER13_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER13_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER14_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER14_ADR(_BASE))
#define SWG_INIT_UPPER_2D1_INIT_UPPER15_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D1_INIT_UPPER15_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER0_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER0_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER1_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER1_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER2_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER2_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER3_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER3_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER4_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER4_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER5_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER5_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER6_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER6_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER7_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER7_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER8_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER8_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER9_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER9_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER10_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER10_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER11_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER11_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER12_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER12_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER13_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER13_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER14_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER14_ADR(_BASE))
#define SWG_INIT_UPPER_2D2_INIT_UPPER15_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D2_INIT_UPPER15_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER0_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER0_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER1_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER1_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER2_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER2_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER3_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER3_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER4_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER4_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER5_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER5_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER6_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER6_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER7_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER7_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER8_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER8_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER9_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER9_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER10_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER10_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER11_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER11_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER12_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER12_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER13_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER13_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER14_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER14_ADR(_BASE))
#define SWG_INIT_UPPER_2D3_INIT_UPPER15_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D3_INIT_UPPER15_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER0_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER0_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER1_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER1_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER2_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER2_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER3_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER3_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER4_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER4_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER5_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER5_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER6_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER6_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER7_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER7_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER8_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER8_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER9_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER9_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER10_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER10_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER11_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER11_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER12_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER12_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER13_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER13_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER14_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER14_ADR(_BASE))
#define SWG_INIT_UPPER_2D4_INIT_UPPER15_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D4_INIT_UPPER15_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER0_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER0_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER1_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER1_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER2_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER2_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER3_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER3_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER4_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER4_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER5_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER5_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER6_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER6_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER7_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER7_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER8_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER8_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER9_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER9_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER10_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER10_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER11_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER11_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER12_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER12_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER13_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER13_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER14_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER14_ADR(_BASE))
#define SWG_INIT_UPPER_2D5_INIT_UPPER15_REG(_BASE) ((swg_init_upper_2d_reg_t*) SWG_INIT_UPPER_2D5_INIT_UPPER15_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER0_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER0_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER1_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER1_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER2_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER2_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER3_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER3_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER4_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER4_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER5_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER5_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER6_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER6_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER7_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER7_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER8_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER8_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER9_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER9_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER10_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER10_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER11_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER11_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER12_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER12_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER13_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER13_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER14_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER14_ADR(_BASE))
#define SWG_INIT_LOWER_2D0_INIT_LOWER15_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D0_INIT_LOWER15_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER0_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER0_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER1_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER1_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER2_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER2_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER3_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER3_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER4_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER4_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER5_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER5_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER6_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER6_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER7_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER7_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER8_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER8_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER9_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER9_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER10_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER10_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER11_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER11_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER12_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER12_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER13_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER13_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER14_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER14_ADR(_BASE))
#define SWG_INIT_LOWER_2D1_INIT_LOWER15_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D1_INIT_LOWER15_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER0_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER0_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER1_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER1_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER2_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER2_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER3_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER3_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER4_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER4_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER5_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER5_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER6_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER6_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER7_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER7_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER8_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER8_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER9_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER9_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER10_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER10_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER11_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER11_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER12_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER12_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER13_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER13_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER14_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER14_ADR(_BASE))
#define SWG_INIT_LOWER_2D2_INIT_LOWER15_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D2_INIT_LOWER15_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER0_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER0_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER1_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER1_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER2_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER2_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER3_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER3_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER4_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER4_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER5_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER5_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER6_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER6_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER7_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER7_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER8_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER8_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER9_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER9_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER10_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER10_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER11_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER11_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER12_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER12_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER13_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER13_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER14_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER14_ADR(_BASE))
#define SWG_INIT_LOWER_2D3_INIT_LOWER15_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D3_INIT_LOWER15_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER0_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER0_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER1_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER1_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER2_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER2_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER3_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER3_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER4_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER4_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER5_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER5_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER6_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER6_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER7_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER7_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER8_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER8_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER9_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER9_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER10_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER10_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER11_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER11_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER12_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER12_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER13_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER13_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER14_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER14_ADR(_BASE))
#define SWG_INIT_LOWER_2D4_INIT_LOWER15_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D4_INIT_LOWER15_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER0_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER0_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER1_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER1_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER2_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER2_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER3_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER3_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER4_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER4_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER5_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER5_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER6_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER6_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER7_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER7_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER8_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER8_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER9_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER9_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER10_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER10_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER11_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER11_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER12_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER12_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER13_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER13_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER14_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER14_ADR(_BASE))
#define SWG_INIT_LOWER_2D5_INIT_LOWER15_REG(_BASE) ((swg_init_lower_2d_reg_t*) SWG_INIT_LOWER_2D5_INIT_LOWER15_ADR(_BASE))
#define SWG_INCR_UPPER0_REG(_BASE) ((swg_incr_upper_reg_t*) SWG_INCR_UPPER0_ADR(_BASE))
#define SWG_INCR_UPPER1_REG(_BASE) ((swg_incr_upper_reg_t*) SWG_INCR_UPPER1_ADR(_BASE))
#define SWG_INCR_UPPER2_REG(_BASE) ((swg_incr_upper_reg_t*) SWG_INCR_UPPER2_ADR(_BASE))
#define SWG_INCR_UPPER3_REG(_BASE) ((swg_incr_upper_reg_t*) SWG_INCR_UPPER3_ADR(_BASE))
#define SWG_INCR_UPPER4_REG(_BASE) ((swg_incr_upper_reg_t*) SWG_INCR_UPPER4_ADR(_BASE))
#define SWG_INCR_UPPER5_REG(_BASE) ((swg_incr_upper_reg_t*) SWG_INCR_UPPER5_ADR(_BASE))
#define SWG_INCR_LOWER0_REG(_BASE) ((swg_incr_lower_reg_t*) SWG_INCR_LOWER0_ADR(_BASE))
#define SWG_INCR_LOWER1_REG(_BASE) ((swg_incr_lower_reg_t*) SWG_INCR_LOWER1_ADR(_BASE))
#define SWG_INCR_LOWER2_REG(_BASE) ((swg_incr_lower_reg_t*) SWG_INCR_LOWER2_ADR(_BASE))
#define SWG_INCR_LOWER3_REG(_BASE) ((swg_incr_lower_reg_t*) SWG_INCR_LOWER3_ADR(_BASE))
#define SWG_INCR_LOWER4_REG(_BASE) ((swg_incr_lower_reg_t*) SWG_INCR_LOWER4_ADR(_BASE))
#define SWG_INCR_LOWER5_REG(_BASE) ((swg_incr_lower_reg_t*) SWG_INCR_LOWER5_ADR(_BASE))
#define SWG_INCR1_UPPER0_REG(_BASE) ((swg_incr1_upper_reg_t*) SWG_INCR1_UPPER0_ADR(_BASE))
#define SWG_INCR1_UPPER1_REG(_BASE) ((swg_incr1_upper_reg_t*) SWG_INCR1_UPPER1_ADR(_BASE))
#define SWG_INCR1_UPPER2_REG(_BASE) ((swg_incr1_upper_reg_t*) SWG_INCR1_UPPER2_ADR(_BASE))
#define SWG_INCR1_UPPER3_REG(_BASE) ((swg_incr1_upper_reg_t*) SWG_INCR1_UPPER3_ADR(_BASE))
#define SWG_INCR1_UPPER4_REG(_BASE) ((swg_incr1_upper_reg_t*) SWG_INCR1_UPPER4_ADR(_BASE))
#define SWG_INCR1_UPPER5_REG(_BASE) ((swg_incr1_upper_reg_t*) SWG_INCR1_UPPER5_ADR(_BASE))
#define SWG_INCR1_LOWER0_REG(_BASE) ((swg_incr1_lower_reg_t*) SWG_INCR1_LOWER0_ADR(_BASE))
#define SWG_INCR1_LOWER1_REG(_BASE) ((swg_incr1_lower_reg_t*) SWG_INCR1_LOWER1_ADR(_BASE))
#define SWG_INCR1_LOWER2_REG(_BASE) ((swg_incr1_lower_reg_t*) SWG_INCR1_LOWER2_ADR(_BASE))
#define SWG_INCR1_LOWER3_REG(_BASE) ((swg_incr1_lower_reg_t*) SWG_INCR1_LOWER3_ADR(_BASE))
#define SWG_INCR1_LOWER4_REG(_BASE) ((swg_incr1_lower_reg_t*) SWG_INCR1_LOWER4_ADR(_BASE))
#define SWG_INCR1_LOWER5_REG(_BASE) ((swg_incr1_lower_reg_t*) SWG_INCR1_LOWER5_ADR(_BASE))
#define SWG_EN0_REG(_BASE) ((swg_en_reg_t*) SWG_EN0_ADR(_BASE))
#define SWG_EN1_REG(_BASE) ((swg_en_reg_t*) SWG_EN1_ADR(_BASE))
#define SWG_EN2_REG(_BASE) ((swg_en_reg_t*) SWG_EN2_ADR(_BASE))
#define SWG_EN3_REG(_BASE) ((swg_en_reg_t*) SWG_EN3_ADR(_BASE))
#define SWG_EN4_REG(_BASE) ((swg_en_reg_t*) SWG_EN4_ADR(_BASE))
#define SWG_EN5_REG(_BASE) ((swg_en_reg_t*) SWG_EN5_ADR(_BASE))
#define SWG_PAR_CLR_ERR_REG(_BASE) ((swg_par_clr_err_reg_t*) SWG_PAR_CLR_ERR_ADR(_BASE))
#define SWG_PAR_TEST_CTRL_REG(_BASE) ((swg_par_test_ctrl_reg_t*) SWG_PAR_TEST_CTRL_ADR(_BASE))
#define SWG_EN_PER_SWG_REG(_BASE) ((swg_en_per_swg_reg_t*) SWG_EN_PER_SWG_ADR(_BASE))
#define SWG_EXT_BYP_REG(_BASE) ((swg_ext_byp_reg_t*) SWG_EXT_BYP_ADR(_BASE))
#define SWG_TMR_CFG_REG(_BASE) ((swg_tmr_cfg_reg_t*) SWG_TMR_CFG_ADR(_BASE))
#define SWG_TMR_ERR_REG(_BASE) ((swg_tmr_err_reg_t*) SWG_TMR_ERR_ADR(_BASE))
#define SWG_INT_STAT_REG(_BASE) ((swg_int_stat_reg_t*) SWG_INT_STAT_ADR(_BASE))
#define SWG_INT_HIGH_EN_REG(_BASE) ((swg_int_high_en_reg_t*) SWG_INT_HIGH_EN_ADR(_BASE))
#define SWG_INT_LOW_EN_REG(_BASE) ((swg_int_low_en_reg_t*) SWG_INT_LOW_EN_ADR(_BASE))
#define SWG_INT_CLR_REG(_BASE) ((swg_int_clr_reg_t*) SWG_INT_CLR_ADR(_BASE))
#define SWG_INT_FORCE_REG(_BASE) ((swg_int_force_reg_t*) SWG_INT_FORCE_ADR(_BASE))
#define SWG_TMR_ERR_INCR_UPPER_REG(_BASE) ((swg_tmr_err_incr_upper_reg_t*) SWG_TMR_ERR_INCR_UPPER_ADR(_BASE))
#define SWG_TMR_ERR_INCR_LOWER_REG(_BASE) ((swg_tmr_err_incr_lower_reg_t*) SWG_TMR_ERR_INCR_LOWER_ADR(_BASE))
#define SWG_SCRATCH_REG(_BASE) ((swg_scratch_reg_t*) SWG_SCRATCH_ADR(_BASE))
#define SWG_PAR_ERR_INIT_UPPER0_REG(_BASE) ((swg_par_err_init_upper_reg_t*) SWG_PAR_ERR_INIT_UPPER0_ADR(_BASE))
#define SWG_PAR_ERR_INIT_UPPER1_REG(_BASE) ((swg_par_err_init_upper_reg_t*) SWG_PAR_ERR_INIT_UPPER1_ADR(_BASE))
#define SWG_PAR_ERR_INIT_UPPER2_REG(_BASE) ((swg_par_err_init_upper_reg_t*) SWG_PAR_ERR_INIT_UPPER2_ADR(_BASE))
#define SWG_PAR_ERR_INIT_UPPER3_REG(_BASE) ((swg_par_err_init_upper_reg_t*) SWG_PAR_ERR_INIT_UPPER3_ADR(_BASE))
#define SWG_PAR_ERR_INIT_UPPER4_REG(_BASE) ((swg_par_err_init_upper_reg_t*) SWG_PAR_ERR_INIT_UPPER4_ADR(_BASE))
#define SWG_PAR_ERR_INIT_UPPER5_REG(_BASE) ((swg_par_err_init_upper_reg_t*) SWG_PAR_ERR_INIT_UPPER5_ADR(_BASE))
#define SWG_PAR_ERR_INIT_LOWER0_REG(_BASE) ((swg_par_err_init_lower_reg_t*) SWG_PAR_ERR_INIT_LOWER0_ADR(_BASE))
#define SWG_PAR_ERR_INIT_LOWER1_REG(_BASE) ((swg_par_err_init_lower_reg_t*) SWG_PAR_ERR_INIT_LOWER1_ADR(_BASE))
#define SWG_PAR_ERR_INIT_LOWER2_REG(_BASE) ((swg_par_err_init_lower_reg_t*) SWG_PAR_ERR_INIT_LOWER2_ADR(_BASE))
#define SWG_PAR_ERR_INIT_LOWER3_REG(_BASE) ((swg_par_err_init_lower_reg_t*) SWG_PAR_ERR_INIT_LOWER3_ADR(_BASE))
#define SWG_PAR_ERR_INIT_LOWER4_REG(_BASE) ((swg_par_err_init_lower_reg_t*) SWG_PAR_ERR_INIT_LOWER4_ADR(_BASE))
#define SWG_PAR_ERR_INIT_LOWER5_REG(_BASE) ((swg_par_err_init_lower_reg_t*) SWG_PAR_ERR_INIT_LOWER5_ADR(_BASE))
#define SWG_DUAL_FCW_CFG0_REG(_BASE) ((swg_dual_fcw_cfg_reg_t*) SWG_DUAL_FCW_CFG0_ADR(_BASE))
#define SWG_DUAL_FCW_CFG1_REG(_BASE) ((swg_dual_fcw_cfg_reg_t*) SWG_DUAL_FCW_CFG1_ADR(_BASE))
#define SWG_DUAL_FCW_CFG2_REG(_BASE) ((swg_dual_fcw_cfg_reg_t*) SWG_DUAL_FCW_CFG2_ADR(_BASE))
#define SWG_DUAL_FCW_CFG3_REG(_BASE) ((swg_dual_fcw_cfg_reg_t*) SWG_DUAL_FCW_CFG3_ADR(_BASE))
#define SWG_DUAL_FCW_CFG4_REG(_BASE) ((swg_dual_fcw_cfg_reg_t*) SWG_DUAL_FCW_CFG4_ADR(_BASE))
#define SWG_DUAL_FCW_CFG5_REG(_BASE) ((swg_dual_fcw_cfg_reg_t*) SWG_DUAL_FCW_CFG5_ADR(_BASE))
#define SWG_APB_BRDG_STAT_REG(_BASE) ((swg_apb_brdg_stat_reg_t*) SWG_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    swg_init_upper_2d_reg_t INIT_UPPER_2D0_INIT_UPPER[16]; /*< Address offset = 0x0 */
    swg_init_upper_2d_reg_t INIT_UPPER_2D1_INIT_UPPER[16]; /*< Address offset = 0x40 */
    swg_init_upper_2d_reg_t INIT_UPPER_2D2_INIT_UPPER[16]; /*< Address offset = 0x80 */
    swg_init_upper_2d_reg_t INIT_UPPER_2D3_INIT_UPPER[16]; /*< Address offset = 0xc0 */
    swg_init_upper_2d_reg_t INIT_UPPER_2D4_INIT_UPPER[16]; /*< Address offset = 0x100 */
    swg_init_upper_2d_reg_t INIT_UPPER_2D5_INIT_UPPER[16]; /*< Address offset = 0x140 */
    const uint8_t        reservedArea0 [128]; /*< Address offset = 0x180 */
    swg_init_lower_2d_reg_t INIT_LOWER_2D0_INIT_LOWER[16]; /*< Address offset = 0x200 */
    swg_init_lower_2d_reg_t INIT_LOWER_2D1_INIT_LOWER[16]; /*< Address offset = 0x240 */
    swg_init_lower_2d_reg_t INIT_LOWER_2D2_INIT_LOWER[16]; /*< Address offset = 0x280 */
    swg_init_lower_2d_reg_t INIT_LOWER_2D3_INIT_LOWER[16]; /*< Address offset = 0x2c0 */
    swg_init_lower_2d_reg_t INIT_LOWER_2D4_INIT_LOWER[16]; /*< Address offset = 0x300 */
    swg_init_lower_2d_reg_t INIT_LOWER_2D5_INIT_LOWER[16]; /*< Address offset = 0x340 */
    const uint8_t        reservedArea1 [128]; /*< Address offset = 0x380 */
    swg_incr_upper_reg_t INCR_UPPER[6]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x418 */
    swg_incr_lower_reg_t INCR_LOWER[6]; /*< Address offset = 0x420 */
    const uint8_t        reservedArea3 [8];   /*< Address offset = 0x438 */
    swg_incr1_upper_reg_t INCR1_UPPER[6]; /*< Address offset = 0x440 */
    const uint8_t        reservedArea4 [8];   /*< Address offset = 0x458 */
    swg_incr1_lower_reg_t INCR1_LOWER[6]; /*< Address offset = 0x460 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0x478 */
    swg_en_reg_t EN[6];   /*< Address offset = 0x480 */
    const uint8_t        reservedArea6 [8];   /*< Address offset = 0x498 */
    swg_par_clr_err_reg_t PAR_CLR_ERR; /*< Address offset = 0x4a0 */
    swg_par_test_ctrl_reg_t PAR_TEST_CTRL; /*< Address offset = 0x4a4 */
    swg_en_per_swg_reg_t EN_PER_SWG; /*< Address offset = 0x4a8 */
    swg_ext_byp_reg_t EXT_BYP;     /*< Address offset = 0x4ac */
    swg_tmr_cfg_reg_t TMR_CFG;  /*< Address offset = 0x4b0 */
    swg_tmr_err_reg_t TMR_ERR;   /*< Address offset = 0x4b4 */
    const uint8_t        reservedArea7 [8];   /*< Address offset = 0x4b8 */
    swg_int_stat_reg_t INT_STAT;  /*< Address offset = 0x4c0 */
    swg_int_high_en_reg_t INT_HIGH_EN; /*< Address offset = 0x4c4 */
    swg_int_low_en_reg_t INT_LOW_EN;  /*< Address offset = 0x4c8 */
    swg_int_clr_reg_t INT_CLR;   /*< Address offset = 0x4cc */
    swg_int_force_reg_t INT_FORCE;   /*< Address offset = 0x4d0 */
    const uint8_t        reservedArea8 [12];  /*< Address offset = 0x4d4 */
    swg_tmr_err_incr_upper_reg_t TMR_ERR_INCR_UPPER; /*< Address offset = 0x4e0 */
    swg_tmr_err_incr_lower_reg_t TMR_ERR_INCR_LOWER; /*< Address offset = 0x4e4 */
    const uint8_t        reservedArea9 [8];   /*< Address offset = 0x4e8 */
    swg_scratch_reg_t SCRATCH;     /*< Address offset = 0x4f0 */
    const uint8_t        reservedArea10 [12]; /*< Address offset = 0x4f4 */
    swg_par_err_init_upper_reg_t PAR_ERR_INIT_UPPER[6]; /*< Address offset = 0x500 */
    const uint8_t        reservedArea11 [8];  /*< Address offset = 0x518 */
    swg_par_err_init_lower_reg_t PAR_ERR_INIT_LOWER[6]; /*< Address offset = 0x520 */
    const uint8_t        reservedArea12 [8];  /*< Address offset = 0x538 */
    swg_dual_fcw_cfg_reg_t DUAL_FCW_CFG[6]; /*< Address offset = 0x540 */
    const uint8_t        reservedArea13 [676]; /*< Address offset = 0x558 */
    swg_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x7fc */
} swg_t;     // size: 0x008c

// AddressSpace struct pointer
//
#define VHA0_DL_SWG       ((swg_t*) VHA0_DL_SWG_BASE)
#define VHA0_UL_SWG       ((swg_t*) VHA0_UL_SWG_BASE)
#define VHA1_DL_SWG       ((swg_t*) VHA1_DL_SWG_BASE)
#define VHA1_UL_SWG       ((swg_t*) VHA1_UL_SWG_BASE)
#define VHA2_DL_SWG       ((swg_t*) VHA2_DL_SWG_BASE)
#define VHA2_UL_SWG       ((swg_t*) VHA2_UL_SWG_BASE)
#define VHA3_DL_SWG       ((swg_t*) VHA3_DL_SWG_BASE)
#define VHA3_UL_SWG       ((swg_t*) VHA3_UL_SWG_BASE)
#define VHA4_DL_SWG       ((swg_t*) VHA4_DL_SWG_BASE)
#define VHA4_UL_SWG       ((swg_t*) VHA4_UL_SWG_BASE)
#define VHA5_DL_SWG       ((swg_t*) VHA5_DL_SWG_BASE)
#define VHA5_UL_SWG       ((swg_t*) VHA5_UL_SWG_BASE)
#define VHA6_DL_SWG       ((swg_t*) VHA6_DL_SWG_BASE)
#define VHA6_UL_SWG       ((swg_t*) VHA6_UL_SWG_BASE)
#define VHA7_DL_SWG       ((swg_t*) VHA7_DL_SWG_BASE)
#define VHA7_UL_SWG       ((swg_t*) VHA7_UL_SWG_BASE)
#define FB_ANT0_SWG_EVEN  ((swg_t*) FB_ANT0_SWG_EVEN_BASE)
#define FB_ANT0_SWG_ODD   ((swg_t*) FB_ANT0_SWG_ODD_BASE)
#define FB_ANT1_SWG_EVEN  ((swg_t*) FB_ANT1_SWG_EVEN_BASE)
#define FB_ANT1_SWG_ODD   ((swg_t*) FB_ANT1_SWG_ODD_BASE)
#define FB_SYS0_SWG0      ((swg_t*) FB_SYS0_SWG0_BASE)
#define FB_SYS1_SWG0      ((swg_t*) FB_SYS1_SWG0_BASE)

// ******************************************* /Address Space

#endif      // _SWG_H_

