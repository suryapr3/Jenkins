#ifndef _RXANA_ADC_QUARTET_MSG_H_
#define _RXANA_ADC_QUARTET_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE  ( 0x06027990 )
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE      ( 0x0602b990 )
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE      ( 0x0602f990 )
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE      ( 0x06033990 )
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE      ( 0x06037990 )
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE  ( 0x06827990 )
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE      ( 0x0682b990 )
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE      ( 0x0682f990 )
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE      ( 0x06833990 )
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE      ( 0x06837990 )
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE  ( 0x07027990 )
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE      ( 0x0702b990 )
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE      ( 0x0702f990 )
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE      ( 0x07033990 )
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE      ( 0x07037990 )
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE  ( 0x07827990 )
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE      ( 0x0782b990 )
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE      ( 0x0782f990 )
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE      ( 0x07833990 )
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE      ( 0x07837990 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_OFFSET ( 0x00000000U )
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_OFFSET ( 0x00000004U )
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_OFFSET ( 0x00000008U )
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_OFFSET ( 0x0000000cU )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_OFFSET ( 0x00000010U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_OFFSET ( 0x00000014U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_OFFSET ( 0x00000018U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_OFFSET ( 0x0000001cU )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_OFFSET ( 0x00000020U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_OFFSET ( 0x00000024U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_OFFSET ( 0x00000028U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_OFFSET ( 0x0000002cU )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_OFFSET ( 0x00000030U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_OFFSET ( 0x00000034U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_OFFSET ( 0x00000038U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_OFFSET ( 0x0000003cU )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_OFFSET ( 0x00000040U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_OFFSET ( 0x00000044U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_OFFSET ( 0x00000048U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_OFFSET ( 0x0000004cU )
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_OFFSET ( 0x00000050U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_OFFSET ( 0x00000054U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_OFFSET ( 0x00000058U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_OFFSET ( 0x0000005cU )
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_OFFSET ( 0x00000060U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_OFFSET ( 0x00000064U )
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_OFFSET ( 0x00000068U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_OFFSET ) ))
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_ADR(_BASE) (( ( _BASE ) + ( RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXPHDT_CTRL0 register description at address offset 0x0
  *
  * Register default value:        0x00080000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxphdt_ctrl0
  * rxphdt_ctrl0
  */

typedef union {
  struct {
    uint32_t PHDT_CHKN_SWAP : 1;
    ///< Swapping between go_early and go_later votes in the PD. BRK2-TC1 req
    ///< set to '1'.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PHDT_START_LATE : 1;
    ///< When '1' (POR) PD latency is 16UI after sar-array. When '0' it's 8UI
    ///< (timing issue)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PHDT_STOP_LATE : 1;
    ///< When '1' (POR) Vote duration is 16UI. When '0' it's 8UI (half gain)
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PHDT_STOP_NEXT_CYC : 1;
    ///< When '1' Vote duration is 32UI (double gain) ignoring  stop_late .
    ///< POR is '0'
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PHDT_WASTE_OFF : 1;
    ///< Turn the load resistor of the waste to it's maximum resistance for
    ///< power saving.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t PHDT_RESISTOR_CAL : 4;
    ///< Control load resistor. '0000'-3 const finger=~XXX0ohm ... '1111'-18
    ///< fingers=~XX0 ohm  TBD further
    ///< AccessType="RW" BitOffset="16" ResetValue="0x8"
    uint32_t PHDT_DFX_LOAD_SEL : 3;
    ///< Control DFX load resistor. '000'-1 const finger=~800ohm ...
    ///< '111'-8 fingers=~100 ohm
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PHDT_BIAS_GEN_PD_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t PHDT_CML_DFX_EN : 1;
    ///< Enable for the Differential output pair of dfx CML in the PD for statistics
    ///< on PD data through DC-mon differential output.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PHDT_DFX_SEL : 3;
    ///< Selects in PD dfx CML: 000  0,                         010  amp_h,
    ///< 100  amp_l,      110  dt[1](MSB),001  dt[0](2ndMSB),     011  Err,
    ///< 101  0,             111  1,
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxphdt_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_DEFAULT (0x00080000U)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_RD_MASK (0x0fff001fU)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_WR_MASK (0x0fff001fU)


///< Swapping between go_early and go_later votes in the PD. BRK2-TC1 req
///< set to '1'.
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CHKN_SWAP_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CHKN_SWAP_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CHKN_SWAP_BF_MSK (0x00000001)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CHKN_SWAP_BF_DEF (0x00000000)

///< When '1' (POR) PD latency is 16UI after sar-array. When '0' it's 8UI
///< (timing issue)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_START_LATE_BF_OFF ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_START_LATE_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_START_LATE_BF_MSK (0x00000002)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_START_LATE_BF_DEF (0x00000000)

///< When '1' (POR) Vote duration is 16UI. When '0' it's 8UI (half gain)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_LATE_BF_OFF ( 2)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_LATE_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_LATE_BF_MSK (0x00000004)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_LATE_BF_DEF (0x00000000)

///< When '1' Vote duration is 32UI (double gain) ignoring  stop_late .
///< POR is '0'
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_NEXT_CYC_BF_OFF ( 3)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_NEXT_CYC_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_NEXT_CYC_BF_MSK (0x00000008)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_STOP_NEXT_CYC_BF_DEF (0x00000000)

///< Turn the load resistor of the waste to it's maximum resistance for
///< power saving.
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_WASTE_OFF_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_WASTE_OFF_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_WASTE_OFF_BF_MSK (0x00000010)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_WASTE_OFF_BF_DEF (0x00000000)

///< Control load resistor. '0000'-3 const finger=~XXX0ohm ... '1111'-18
///< fingers=~XX0 ohm  TBD further
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_RESISTOR_CAL_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_RESISTOR_CAL_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_RESISTOR_CAL_BF_MSK (0x000F0000)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_RESISTOR_CAL_BF_DEF (0x00080000)

///< Control DFX load resistor. '000'-1 const finger=~800ohm ...
///< '111'-8 fingers=~100 ohm
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_LOAD_SEL_BF_OFF (20)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_LOAD_SEL_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_LOAD_SEL_BF_MSK (0x00700000)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_LOAD_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_BIAS_GEN_PD_B_BF_OFF (23)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_BIAS_GEN_PD_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_BIAS_GEN_PD_B_BF_MSK (0x00800000)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_BIAS_GEN_PD_B_BF_DEF (0x00000000)

///< Enable for the Differential output pair of dfx CML in the PD for statistics
///< on PD data through DC-mon differential output.
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CML_DFX_EN_BF_OFF (24)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CML_DFX_EN_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CML_DFX_EN_BF_MSK (0x01000000)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_CML_DFX_EN_BF_DEF (0x00000000)

///< Selects in PD dfx CML: 000  0,                         010  amp_h,
///< 100  amp_l,      110  dt[1](MSB),001  dt[0](2ndMSB),     011  Err,
///< 101  0,             111  1,
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_SEL_BF_OFF (25)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_SEL_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_SEL_BF_MSK (0x0E000000)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_PHDT_DFX_SEL_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXPHDT_CTRL1 register description at address offset 0x4
  *
  * Register default value:        0x00000F08
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxphdt_ctrl1
  * rxphdt_ctrl1
  */

typedef union {
  struct {
    uint32_t PHDT_DFX_VOTE_EARLIER_IF_RST : 1;
    ///< DFX override value when PhD is in RST
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PHDT_DFX_VOTE_LATER_IF_RST : 1;
    ///< DFX override value when PhD is in RST
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PHDT_QUAD_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PHDT_SAR_SEL : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PHDT_MODE_SEL_EVEN : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t PHDT_MODE_SEL_ODD : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x3"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxphdt_ctrl1_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_DEFAULT (0x00000f08U)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_RD_MASK (0x00000f3fU)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_WR_MASK (0x00000f3fU)


///< DFX override value when PhD is in RST
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_EARLIER_IF_RST_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_EARLIER_IF_RST_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_EARLIER_IF_RST_BF_MSK (0x00000001)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_EARLIER_IF_RST_BF_DEF (0x00000000)

///< DFX override value when PhD is in RST
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_LATER_IF_RST_BF_OFF ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_LATER_IF_RST_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_LATER_IF_RST_BF_MSK (0x00000002)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_DFX_VOTE_LATER_IF_RST_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_QUAD_RST_B_BF_OFF ( 2)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_QUAD_RST_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_QUAD_RST_B_BF_MSK (0x00000004)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_QUAD_RST_B_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_SAR_SEL_BF_OFF ( 3)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_SAR_SEL_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_SAR_SEL_BF_MSK (0x00000038)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_SAR_SEL_BF_DEF (0x00000008)

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_EVEN_BF_OFF ( 8)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_EVEN_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_EVEN_BF_MSK (0x00000300)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_EVEN_BF_DEF (0x00000300)

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_ODD_BF_OFF (10)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_ODD_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_ODD_BF_MSK (0x00000C00)
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_PHDT_MODE_SEL_ODD_BF_DEF (0x00000C00)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXDATA_ALIGN_CTRL0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxdata_align_ctrl0
  * rxdata_align_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCALIGN_DCMON_P_SEL : 3;
    ///< When enabled opens probing on 'dfx_dcmon_p' of: '000'-vcc0p9,
    ///< '001'-v_bias_upper,         '010'-pd_dfx_dcmon_p,
    ///< '011'-pd_cml_p, '100'...'111'- Hi-Z
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCALIGN_DCMON_N_SEL : 3;
    ///< When enabled opens probing on 'dfx_dcmon_n' of: '000'-vssx,
    ///< '001'-v_bias_lower,            '010'-pd_dfx_dcmon_n,
    ///< '011'-pd_cml_n, '100'...'111'- Hi-Z
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t ADCALIGN_A2F_DIV_SEL : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t ADCALIGN_A2F_HSMON_EN : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t ADCALIGN_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxdata_align_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_DEFAULT (0x00000000U)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_RD_MASK (0x000007ffU)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_WR_MASK (0x000007ffU)


///< When enabled opens probing on 'dfx_dcmon_p' of: '000'-vcc0p9,
///< '001'-v_bias_upper,         '010'-pd_dfx_dcmon_p,
///< '011'-pd_cml_p, '100'...'111'- Hi-Z
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_P_SEL_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_P_SEL_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_P_SEL_BF_MSK (0x00000007)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_P_SEL_BF_DEF (0x00000000)

///< When enabled opens probing on 'dfx_dcmon_n' of: '000'-vssx,
///< '001'-v_bias_lower,            '010'-pd_dfx_dcmon_n,
///< '011'-pd_cml_n, '100'...'111'- Hi-Z
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_N_SEL_BF_OFF ( 3)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_N_SEL_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_N_SEL_BF_MSK (0x00000038)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_DCMON_N_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_DIV_SEL_BF_OFF ( 6)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_DIV_SEL_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_DIV_SEL_BF_MSK (0x000000C0)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_DIV_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_HSMON_EN_BF_OFF ( 8)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_HSMON_EN_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_HSMON_EN_BF_MSK (0x00000300)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_A2F_HSMON_EN_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_RST_B_BF_OFF (10)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_RST_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_RST_B_BF_MSK (0x00000400)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADCALIGN_RST_B_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXDATA_ALIGN_SPARE0 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxdata_align_spare0
  * rxdata_align_spare0
  */

typedef union {
  struct {
    uint32_t ADCALIGN_SPARE : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxdata_align_spare0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_DEFAULT (0x00000000U)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_RD_MASK (0x0000000fU)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_WR_MASK (0x0000000fU)


#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_ADCALIGN_SPARE_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_ADCALIGN_SPARE_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_ADCALIGN_SPARE_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_ADCALIGN_SPARE_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q0_QRT0_CTRL0 register description at address offset 0x10
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q0_qrt0_ctrl0
  * rxsar_q0_qrt0_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q0_QRT0_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q0_QRT0_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q0_QRT0_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q0_qrt0_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADCSAR_Q0_QRT0_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q0_QRT1_CTRL0 register description at address offset 0x14
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q0_qrt1_ctrl0
  * rxsar_q0_qrt1_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q0_QRT1_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q0_QRT1_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q0_QRT1_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q0_qrt1_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADCSAR_Q0_QRT1_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q0_QRT2_CTRL0 register description at address offset 0x18
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q0_qrt2_ctrl0
  * rxsar_q0_qrt2_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q0_QRT2_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q0_QRT2_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q0_QRT2_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q0_qrt2_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADCSAR_Q0_QRT2_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q0_QRT3_CTRL0 register description at address offset 0x1c
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q0_qrt3_ctrl0
  * rxsar_q0_qrt3_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q0_QRT3_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q0_QRT3_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q0_QRT3_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q0_qrt3_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADCSAR_Q0_QRT3_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q1_QRT0_CTRL0 register description at address offset 0x20
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q1_qrt0_ctrl0
  * rxsar_q1_qrt0_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q1_QRT0_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q1_QRT0_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q1_QRT0_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q1_qrt0_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADCSAR_Q1_QRT0_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q1_QRT1_CTRL0 register description at address offset 0x24
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q1_qrt1_ctrl0
  * rxsar_q1_qrt1_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q1_QRT1_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q1_QRT1_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q1_QRT1_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q1_qrt1_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADCSAR_Q1_QRT1_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q1_QRT2_CTRL0 register description at address offset 0x28
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q1_qrt2_ctrl0
  * rxsar_q1_qrt2_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q1_QRT2_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q1_QRT2_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q1_QRT2_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q1_qrt2_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADCSAR_Q1_QRT2_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q1_QRT3_CTRL0 register description at address offset 0x2c
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q1_qrt3_ctrl0
  * rxsar_q1_qrt3_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q1_QRT3_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q1_QRT3_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q1_QRT3_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q1_qrt3_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADCSAR_Q1_QRT3_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q2_QRT0_CTRL0 register description at address offset 0x30
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q2_qrt0_ctrl0
  * rxsar_q2_qrt0_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q2_QRT0_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q2_QRT0_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q2_QRT0_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q2_qrt0_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADCSAR_Q2_QRT0_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q2_QRT1_CTRL0 register description at address offset 0x34
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q2_qrt1_ctrl0
  * rxsar_q2_qrt1_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q2_QRT1_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q2_QRT1_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q2_QRT1_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q2_qrt1_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADCSAR_Q2_QRT1_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q2_QRT2_CTRL0 register description at address offset 0x38
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q2_qrt2_ctrl0
  * rxsar_q2_qrt2_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q2_QRT2_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q2_QRT2_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q2_QRT2_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q2_qrt2_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADCSAR_Q2_QRT2_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q2_QRT3_CTRL0 register description at address offset 0x3c
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q2_qrt3_ctrl0
  * rxsar_q2_qrt3_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q2_QRT3_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q2_QRT3_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q2_QRT3_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q2_qrt3_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADCSAR_Q2_QRT3_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q3_QRT0_CTRL0 register description at address offset 0x40
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q3_qrt0_ctrl0
  * rxsar_q3_qrt0_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q3_QRT0_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q3_QRT0_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q3_QRT0_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q3_qrt0_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADCSAR_Q3_QRT0_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q3_QRT1_CTRL0 register description at address offset 0x44
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q3_qrt1_ctrl0
  * rxsar_q3_qrt1_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q3_QRT1_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q3_QRT1_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q3_QRT1_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q3_qrt1_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADCSAR_Q3_QRT1_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q3_QRT2_CTRL0 register description at address offset 0x48
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q3_qrt2_ctrl0
  * rxsar_q3_qrt2_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q3_QRT2_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q3_QRT2_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q3_QRT2_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q3_qrt2_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADCSAR_Q3_QRT2_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_Q3_QRT3_CTRL0 register description at address offset 0x4c
  *
  * Register default value:        0x00000001
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_q3_qrt3_ctrl0
  * rxsar_q3_qrt3_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_Q3_QRT3_CLGC_INIT : 4;
    ///< 0001 => normal mode      0101 => short operation mode. initial clogic
    ///< val
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t ADCSAR_Q3_QRT3_CLGC_EN_B : 4;
    ///< 0000 => normal mode      1100 => short operation mode. disable clgc
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t ADCSAR_Q3_QRT3_CLGC_CLK_DCC : 3;
    ///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
    ///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
    ///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
    ///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
    ///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
    ///< -  3  - TH2 duty cycle 10UI
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_q3_qrt3_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_DEFAULT (0x00000001U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_RD_MASK (0x000700ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_WR_MASK (0x000700ffU)


///< 0001 => normal mode      0101 => short operation mode. initial clogic
///< val
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_INIT_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_INIT_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_INIT_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_INIT_BF_DEF (0x00000001)

///< 0000 => normal mode      1100 => short operation mode. disable clgc
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_EN_B_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_EN_B_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_EN_B_BF_MSK (0x000000F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_EN_B_BF_DEF (0x00000000)

///< MSB clgc_clk_dc_ctrl_fw[2] -  0  disable delay ,  1  enable delay.
///< when delay is off: clgc_clk_dc_ctrl_fw[1:0] -  0 , 1 , 2 , 3  - TH2
///< duty cycle 8UI When delay is on: clgc_clk_dc_ctrl_fw[1:0] -  0  -
///< TH2 duty cycle 9UI clgc_clk_dc_ctrl_fw[1:0] -  1  - TH2 duty cycle
///< 9.25UI clgc_clk_dc_ctrl_fw[1:0] -  2  - TH2 duty cycle 9.5UI clgc_clk_dc_ctrl_fw[1:0]
///< -  3  - TH2 duty cycle 10UI
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_CLK_DCC_BF_OFF (16)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_CLK_DCC_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_CLK_DCC_BF_MSK (0x00070000)
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADCSAR_Q3_QRT3_CLGC_CLK_DCC_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_CLGC_CTRL0 register description at address offset 0x50
  *
  * Register default value:        0x00000010
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_clgc_ctrl0
  * rxsar_clgc_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_CLGC_LUT_SELECT : 4;
    ///< clgc LUT select - Will adc_sar_clgc_en/init pin values.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCSAR_CLGC_LUT_BYPASS_EN : 1;
    ///< clgc LUT bypass - pin will be driven by existing register. '1' will
    ///< enable bypass. '0' will use hardcoded LUT with lut_select.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_clgc_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_DEFAULT (0x00000010U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_RD_MASK (0x0000001fU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_WR_MASK (0x0000001fU)


///< clgc LUT select - Will adc_sar_clgc_en/init pin values.
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_SEL_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_SEL_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_SEL_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_SEL_BF_DEF (0x00000000)

///< clgc LUT bypass - pin will be driven by existing register. '1' will
///< enable bypass. '0' will use hardcoded LUT with lut_select.
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_BYP_EN_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_BYP_EN_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_BYP_EN_BF_MSK (0x00000010)
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADCSAR_CLGC_LUT_BYP_EN_BF_DEF (0x00000010)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_SHARED_CTRL0 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_shared_ctrl0
  * rxsar_shared_ctrl0
  */

typedef union {
  struct {
    uint32_t ADCSAR_DAC_CLR_FORCE : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCSAR_DAC_CLR_DIS : 1;
    ///< 0  - enbale clear  ,  1  disable clear
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ADCSAR_DAC_CLR_DLY : 3;
    ///< config clear width
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADCSAR_DAC_FORCE_RST : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t ADCSAR_GLOBAL_GAIN_CTRL : 2;
    ///< global gain ctrl
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t ADCSAR_DFX_A2F_PD_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_shared_ctrl0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_DEFAULT (0x00000000U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_RD_MASK (0x000001ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_WR_MASK (0x000001ffU)


#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_FORCE_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_FORCE_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_FORCE_BF_MSK (0x00000001)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_FORCE_BF_DEF (0x00000000)

///< 0  - enbale clear  ,  1  disable clear
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DIS_BF_OFF ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DIS_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DIS_BF_MSK (0x00000002)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DIS_BF_DEF (0x00000000)

///< config clear width
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DLY_BF_OFF ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DLY_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DLY_BF_MSK (0x0000001C)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_CLR_DLY_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_FORCE_RST_BF_OFF ( 5)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_FORCE_RST_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_FORCE_RST_BF_MSK (0x00000020)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DAC_FORCE_RST_BF_DEF (0x00000000)

///< global gain ctrl
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_GLOBAL_GAIN_CTRL_BF_OFF ( 6)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_GLOBAL_GAIN_CTRL_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_GLOBAL_GAIN_CTRL_BF_MSK (0x000000C0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_GLOBAL_GAIN_CTRL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DFX_A2F_PD_B_BF_OFF ( 8)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DFX_A2F_PD_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DFX_A2F_PD_B_BF_MSK (0x00000100)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADCSAR_DFX_A2F_PD_B_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_SHARED_CTRL1 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_shared_ctrl1
  * rxsar_shared_ctrl1
  */

typedef union {
  struct {
    uint32_t ADCSAR_DFX_A2F_DIV_SEL : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCSAR_DFX_DCMON_SEL : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADCSAR_DFX_HSMON_SEL : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ADCSAR_SARARRAY_HSMON_SEL : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_shared_ctrl1_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_DEFAULT (0x00000000U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_RD_MASK (0x000000ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_WR_MASK (0x000000ffU)


#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_A2F_DIV_SEL_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_A2F_DIV_SEL_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_A2F_DIV_SEL_BF_MSK (0x00000003)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_A2F_DIV_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_DCMON_SEL_BF_OFF ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_DCMON_SEL_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_DCMON_SEL_BF_MSK (0x0000000C)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_DCMON_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_HSMON_SEL_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_HSMON_SEL_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_HSMON_SEL_BF_MSK (0x00000030)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_DFX_HSMON_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_SARARRAY_HSMON_SEL_BF_OFF ( 6)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_SARARRAY_HSMON_SEL_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_SARARRAY_HSMON_SEL_BF_MSK (0x000000C0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADCSAR_SARARRAY_HSMON_SEL_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_SHARED_CTRL2 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_shared_ctrl2
  * rxsar_shared_ctrl2
  */

typedef union {
  struct {
    uint32_t ADCSAR_SARARRAY_DCMON_SEL : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCSAR_SARARRAY_DFX_EN : 6;
    ///< ---
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ADCSAR_RST_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_shared_ctrl2_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_DEFAULT (0x00000000U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_RD_MASK (0x000007ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_WR_MASK (0x000007ffU)


#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DCMON_SEL_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DCMON_SEL_BF_WID ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DCMON_SEL_BF_MSK (0x0000000F)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DCMON_SEL_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DFX_EN_BF_OFF ( 4)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DFX_EN_BF_WID ( 6)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DFX_EN_BF_MSK (0x000003F0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_SARARRAY_DFX_EN_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_RST_B_BF_OFF (10)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_RST_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_RST_B_BF_MSK (0x00000400)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADCSAR_RST_B_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_SPARE0 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_spare0
  * rxsar_spare0
  */

typedef union {
  struct {
    uint32_t ADCSAR_SPARE : 2;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_spare0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_DEFAULT (0x00000000U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_RD_MASK (0x00000003U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_WR_MASK (0x00000003U)


#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_ADCSAR_SPARE_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_ADCSAR_SPARE_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_ADCSAR_SPARE_BF_MSK (0x00000003)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_ADCSAR_SPARE_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_SHARED_CTRL3 register description at address offset 0x64
  *
  * Register default value:        0x00000096
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_shared_ctrl3
  * rxsar_shared_ctrl3
  */

typedef union {
  struct {
    uint32_t ADCSAR_RUNINV_FOR_PHDT_EN : 1;
    ///< switching valid to run for pd
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ADCSAR_NOB : 2;
    ///< cofig number of bit: 2'b00 - 3bit 2'b01 - 4bit 2'b10 - 5bit 2'b11
    ///< - 6bit
    ///< AccessType="RW" BitOffset="1" ResetValue="0x3"
    uint32_t ADCSAR_REG_DAC_BLEED_TUNE : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="3" ResetValue="0x2"
    uint32_t ADCSAR_REG_DAC_PD_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t ADCSAR_2SAR_MODE_SEL_B : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x1"
    uint32_t ADCALIGN_WORD_CLOCK_SEL : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_shared_ctrl3_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_DEFAULT (0x00000096U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_RD_MASK (0x000001ffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_WR_MASK (0x000001ffU)


///< switching valid to run for pd
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_RUNINV_FOR_PHDT_EN_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_RUNINV_FOR_PHDT_EN_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_RUNINV_FOR_PHDT_EN_BF_MSK (0x00000001)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_RUNINV_FOR_PHDT_EN_BF_DEF (0x00000000)

///< cofig number of bit: 2'b00 - 3bit 2'b01 - 4bit 2'b10 - 5bit 2'b11
///< - 6bit
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_NOB_BF_OFF ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_NOB_BF_WID ( 2)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_NOB_BF_MSK (0x00000006)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_NOB_BF_DEF (0x00000006)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_BLEED_TUNE_BF_OFF ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_BLEED_TUNE_BF_WID ( 3)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_BLEED_TUNE_BF_MSK (0x00000038)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_BLEED_TUNE_BF_DEF (0x00000010)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_PD_B_BF_OFF ( 6)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_PD_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_PD_B_BF_MSK (0x00000040)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_DAC_PD_B_BF_DEF (0x00000000)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_2SAR_MODE_SEL_B_BF_OFF ( 7)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_2SAR_MODE_SEL_B_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_2SAR_MODE_SEL_B_BF_MSK (0x00000080)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCSAR_2SAR_MODE_SEL_B_BF_DEF (0x00000080)

#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCALIGN_WORD_CLK_SEL_BF_OFF ( 8)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCALIGN_WORD_CLK_SEL_BF_WID ( 1)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCALIGN_WORD_CLK_SEL_BF_MSK (0x00000100)
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADCALIGN_WORD_CLK_SEL_BF_DEF (0x00000000)


/** @brief RXANA_ADC_QUARTET_REGS_MSG_RXANA_ADC_QUARTET_REGS_RXSAR_QUARTET_SPARE0 register description at address offset 0x68
  *
  * Register default value:        0x00F00000
  * Register full path in IP: RXANA_ADC_QUARTET_regs_MSG/RXANA_ADC_QUARTET_regs/rxsar_quartet_spare0
  * rxsar_quartet_spare0
  */

typedef union {
  struct {
    uint32_t RX_ADC_QUARTET_SPARE : 24;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF00000"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rxana_adc_quartet_msg_rxsar_quartet_spare0_reg_t;

#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_DEFAULT (0x00f00000U)
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_RD_MASK (0x00ffffffU)
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_WR_MASK (0x00ffffffU)


#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_RX_ADC_QUARTET_SPARE_BF_OFF ( 0)
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_RX_ADC_QUARTET_SPARE_BF_WID (24)
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_RX_ADC_QUARTET_SPARE_BF_MSK (0x00FFFFFF)
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_RX_ADC_QUARTET_SPARE_BF_DEF (0x00F00000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxphdt_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_REG(_BASE) ((rxana_adc_quartet_msg_rxphdt_ctrl1_reg_t*) RXANA_ADC_QUARTET_MSG_RXPHDT_CTRL1_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxdata_align_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_REG(_BASE) ((rxana_adc_quartet_msg_rxdata_align_spare0_reg_t*) RXANA_ADC_QUARTET_MSG_RXDATA_ALIGN_SPARE0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q0_qrt0_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT0_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q0_qrt1_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT1_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q0_qrt2_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT2_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q0_qrt3_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q0_QRT3_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q1_qrt0_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT0_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q1_qrt1_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT1_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q1_qrt2_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT2_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q1_qrt3_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q1_QRT3_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q2_qrt0_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT0_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q2_qrt1_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT1_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q2_qrt2_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT2_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q2_qrt3_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q2_QRT3_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q3_qrt0_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT0_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q3_qrt1_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT1_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q3_qrt2_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT2_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_q3_qrt3_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_Q3_QRT3_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_clgc_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_CLGC_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_shared_ctrl0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_shared_ctrl1_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL1_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_shared_ctrl2_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL2_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_spare0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_SPARE0_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_shared_ctrl3_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_SHARED_CTRL3_ADR(_BASE))
#define RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_REG(_BASE) ((rxana_adc_quartet_msg_rxsar_quartet_spare0_reg_t*) RXANA_ADC_QUARTET_MSG_RXSAR_QUARTET_SPARE0_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rxana_adc_quartet_msg_rxphdt_ctrl0_reg_t RXPHDT_CTRL0; /*< Address offset = 0x0 */
    rxana_adc_quartet_msg_rxphdt_ctrl1_reg_t RXPHDT_CTRL1; /*< Address offset = 0x4 */
    rxana_adc_quartet_msg_rxdata_align_ctrl0_reg_t RXDATA_ALIGN_CTRL0; /*< Address offset = 0x8 */
    rxana_adc_quartet_msg_rxdata_align_spare0_reg_t RXDATA_ALIGN_SPARE0; /*< Address offset = 0xc */
    rxana_adc_quartet_msg_rxsar_q0_qrt0_ctrl0_reg_t RXSAR_Q0_QRT0_CTRL0; /*< Address offset = 0x10 */
    rxana_adc_quartet_msg_rxsar_q0_qrt1_ctrl0_reg_t RXSAR_Q0_QRT1_CTRL0; /*< Address offset = 0x14 */
    rxana_adc_quartet_msg_rxsar_q0_qrt2_ctrl0_reg_t RXSAR_Q0_QRT2_CTRL0; /*< Address offset = 0x18 */
    rxana_adc_quartet_msg_rxsar_q0_qrt3_ctrl0_reg_t RXSAR_Q0_QRT3_CTRL0; /*< Address offset = 0x1c */
    rxana_adc_quartet_msg_rxsar_q1_qrt0_ctrl0_reg_t RXSAR_Q1_QRT0_CTRL0; /*< Address offset = 0x20 */
    rxana_adc_quartet_msg_rxsar_q1_qrt1_ctrl0_reg_t RXSAR_Q1_QRT1_CTRL0; /*< Address offset = 0x24 */
    rxana_adc_quartet_msg_rxsar_q1_qrt2_ctrl0_reg_t RXSAR_Q1_QRT2_CTRL0; /*< Address offset = 0x28 */
    rxana_adc_quartet_msg_rxsar_q1_qrt3_ctrl0_reg_t RXSAR_Q1_QRT3_CTRL0; /*< Address offset = 0x2c */
    rxana_adc_quartet_msg_rxsar_q2_qrt0_ctrl0_reg_t RXSAR_Q2_QRT0_CTRL0; /*< Address offset = 0x30 */
    rxana_adc_quartet_msg_rxsar_q2_qrt1_ctrl0_reg_t RXSAR_Q2_QRT1_CTRL0; /*< Address offset = 0x34 */
    rxana_adc_quartet_msg_rxsar_q2_qrt2_ctrl0_reg_t RXSAR_Q2_QRT2_CTRL0; /*< Address offset = 0x38 */
    rxana_adc_quartet_msg_rxsar_q2_qrt3_ctrl0_reg_t RXSAR_Q2_QRT3_CTRL0; /*< Address offset = 0x3c */
    rxana_adc_quartet_msg_rxsar_q3_qrt0_ctrl0_reg_t RXSAR_Q3_QRT0_CTRL0; /*< Address offset = 0x40 */
    rxana_adc_quartet_msg_rxsar_q3_qrt1_ctrl0_reg_t RXSAR_Q3_QRT1_CTRL0; /*< Address offset = 0x44 */
    rxana_adc_quartet_msg_rxsar_q3_qrt2_ctrl0_reg_t RXSAR_Q3_QRT2_CTRL0; /*< Address offset = 0x48 */
    rxana_adc_quartet_msg_rxsar_q3_qrt3_ctrl0_reg_t RXSAR_Q3_QRT3_CTRL0; /*< Address offset = 0x4c */
    rxana_adc_quartet_msg_rxsar_clgc_ctrl0_reg_t RXSAR_CLGC_CTRL0; /*< Address offset = 0x50 */
    rxana_adc_quartet_msg_rxsar_shared_ctrl0_reg_t RXSAR_SHARED_CTRL0; /*< Address offset = 0x54 */
    rxana_adc_quartet_msg_rxsar_shared_ctrl1_reg_t RXSAR_SHARED_CTRL1; /*< Address offset = 0x58 */
    rxana_adc_quartet_msg_rxsar_shared_ctrl2_reg_t RXSAR_SHARED_CTRL2; /*< Address offset = 0x5c */
    rxana_adc_quartet_msg_rxsar_spare0_reg_t RXSAR_SPARE0; /*< Address offset = 0x60 */
    rxana_adc_quartet_msg_rxsar_shared_ctrl3_reg_t RXSAR_SHARED_CTRL3; /*< Address offset = 0x64 */
    rxana_adc_quartet_msg_rxsar_quartet_spare0_reg_t RXSAR_QUARTET_SPARE0; /*< Address offset = 0x68 */
} rxana_adc_quartet_msg_t;     // size: 0x006c

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL  ((rxana_adc_quartet_msg_t*) DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q0      ((rxana_adc_quartet_msg_t*) DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE)
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q1      ((rxana_adc_quartet_msg_t*) DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE)
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q2      ((rxana_adc_quartet_msg_t*) DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE)
#define DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q3      ((rxana_adc_quartet_msg_t*) DLNK_JESD0_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE)
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL  ((rxana_adc_quartet_msg_t*) DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q0      ((rxana_adc_quartet_msg_t*) DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE)
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q1      ((rxana_adc_quartet_msg_t*) DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE)
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q2      ((rxana_adc_quartet_msg_t*) DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE)
#define DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q3      ((rxana_adc_quartet_msg_t*) DLNK_JESD1_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE)
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL  ((rxana_adc_quartet_msg_t*) DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q0      ((rxana_adc_quartet_msg_t*) DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE)
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q1      ((rxana_adc_quartet_msg_t*) DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE)
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q2      ((rxana_adc_quartet_msg_t*) DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE)
#define DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q3      ((rxana_adc_quartet_msg_t*) DLNK_JESD2_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE)
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL  ((rxana_adc_quartet_msg_t*) DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q0      ((rxana_adc_quartet_msg_t*) DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q0_BASE)
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q1      ((rxana_adc_quartet_msg_t*) DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q1_BASE)
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q2      ((rxana_adc_quartet_msg_t*) DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q2_BASE)
#define DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q3      ((rxana_adc_quartet_msg_t*) DLNK_JESD3_PHY_PMA0_RXANA_ADC_QUARTET_Q3_BASE)

// ******************************************* /Address Space

#endif      // _RXANA_ADC_QUARTET_MSG_H_

