#ifndef _DTS_MONITOR_H_
#define _DTS_MONITOR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_DTS_MONITOR_BASE  ( 0x01e00000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define DTS_EN_OFFSET ( 0x00000000U )
#define DTS_MON_EN_OFFSET ( 0x00000004U )
#define DTS_MON_TIMEOUT_CYCLE_OFFSET ( 0x00000008U )
#define DTS_ATSA_EN_OFFSET ( 0x00000020U )
#define DTS_ATSA_ADC_CAPT_OFFSET ( 0x00000024U )
#define DTS_ATSA_DAC_CAPT_OFFSET ( 0x00000028U )
#define DTS_ATSA_AGC_CAPT_OFFSET ( 0x0000002cU )
#define DTS_ATSA_FAULT_STAT_OFFSET ( 0x00000030U )
#define DTS_MON_INT_STAT_OFFSET ( 0x00000040U )
#define DTS_MON_INT_EN_OFFSET ( 0x00000044U )
#define DTS_MON_INT_CLR_OFFSET ( 0x00000048U )
#define DTS_MON_INT_FORCE_OFFSET ( 0x0000004cU )
#define DTS_MON_INT_MASKED_STAT_OFFSET ( 0x00000050U )
#define DTS_ATSA_ADC_UL0_OFFSET ( 0x00000200U )
#define DTS_ATSA_ADC_UL1_OFFSET ( 0x00000204U )
#define DTS_ATSA_ADC_UL2_OFFSET ( 0x00000208U )
#define DTS_ATSA_ADC_UL3_OFFSET ( 0x0000020cU )
#define DTS_ATSA_ADC_UL4_OFFSET ( 0x00000210U )
#define DTS_ATSA_ADC_UL5_OFFSET ( 0x00000214U )
#define DTS_ATSA_ADC_UL6_OFFSET ( 0x00000218U )
#define DTS_ATSA_ADC_UL7_OFFSET ( 0x0000021cU )
#define DTS_ATSA_ADC_LL0_OFFSET ( 0x00000220U )
#define DTS_ATSA_ADC_LL1_OFFSET ( 0x00000224U )
#define DTS_ATSA_ADC_LL2_OFFSET ( 0x00000228U )
#define DTS_ATSA_ADC_LL3_OFFSET ( 0x0000022cU )
#define DTS_ATSA_ADC_LL4_OFFSET ( 0x00000230U )
#define DTS_ATSA_ADC_LL5_OFFSET ( 0x00000234U )
#define DTS_ATSA_ADC_LL6_OFFSET ( 0x00000238U )
#define DTS_ATSA_ADC_LL7_OFFSET ( 0x0000023cU )
#define DTS_ATSA_DAC_UL0_OFFSET ( 0x00000240U )
#define DTS_ATSA_DAC_UL1_OFFSET ( 0x00000244U )
#define DTS_ATSA_DAC_UL2_OFFSET ( 0x00000248U )
#define DTS_ATSA_DAC_UL3_OFFSET ( 0x0000024cU )
#define DTS_ATSA_DAC_UL4_OFFSET ( 0x00000250U )
#define DTS_ATSA_DAC_UL5_OFFSET ( 0x00000254U )
#define DTS_ATSA_DAC_UL6_OFFSET ( 0x00000258U )
#define DTS_ATSA_DAC_UL7_OFFSET ( 0x0000025cU )
#define DTS_ATSA_DAC_LL0_OFFSET ( 0x00000260U )
#define DTS_ATSA_DAC_LL1_OFFSET ( 0x00000264U )
#define DTS_ATSA_DAC_LL2_OFFSET ( 0x00000268U )
#define DTS_ATSA_DAC_LL3_OFFSET ( 0x0000026cU )
#define DTS_ATSA_DAC_LL4_OFFSET ( 0x00000270U )
#define DTS_ATSA_DAC_LL5_OFFSET ( 0x00000274U )
#define DTS_ATSA_DAC_LL6_OFFSET ( 0x00000278U )
#define DTS_ATSA_DAC_LL7_OFFSET ( 0x0000027cU )
#define DTS_ATSA_AGC_UL0_OFFSET ( 0x00000280U )
#define DTS_ATSA_AGC_UL1_OFFSET ( 0x00000284U )
#define DTS_ATSA_AGC_UL2_OFFSET ( 0x00000288U )
#define DTS_ATSA_AGC_UL3_OFFSET ( 0x0000028cU )
#define DTS_ATSA_AGC_UL4_OFFSET ( 0x00000290U )
#define DTS_ATSA_AGC_UL5_OFFSET ( 0x00000294U )
#define DTS_ATSA_AGC_UL6_OFFSET ( 0x00000298U )
#define DTS_ATSA_AGC_UL7_OFFSET ( 0x0000029cU )
#define DTS_ATSA_AGC_LL0_OFFSET ( 0x000002a0U )
#define DTS_ATSA_AGC_LL1_OFFSET ( 0x000002a4U )
#define DTS_ATSA_AGC_LL2_OFFSET ( 0x000002a8U )
#define DTS_ATSA_AGC_LL3_OFFSET ( 0x000002acU )
#define DTS_ATSA_AGC_LL4_OFFSET ( 0x000002b0U )
#define DTS_ATSA_AGC_LL5_OFFSET ( 0x000002b4U )
#define DTS_ATSA_AGC_LL6_OFFSET ( 0x000002b8U )
#define DTS_ATSA_AGC_LL7_OFFSET ( 0x000002bcU )
#define DTS_ATSA_SENSOR0_OFFSET ( 0x000002c0U )
#define DTS_ATSA_SENSOR1_OFFSET ( 0x000002c4U )
#define DTS_ATSA_SENSOR2_OFFSET ( 0x000002c8U )
#define DTS_ATSA_SENSOR3_OFFSET ( 0x000002ccU )
#define DTS_ATSA_SENSOR4_OFFSET ( 0x000002d0U )
#define DTS_ATSA_SENSOR5_OFFSET ( 0x000002d4U )
#define DTS_ATSA_SENSOR6_OFFSET ( 0x000002d8U )
#define DTS_ATSA_SENSOR7_OFFSET ( 0x000002dcU )
#define DTS_MON_TSHOLD00_OFFSET ( 0x00000800U )
#define DTS_MON_TSHOLD01_OFFSET ( 0x00000804U )
#define DTS_MON_TSHOLD02_OFFSET ( 0x00000808U )
#define DTS_MON_TSHOLD03_OFFSET ( 0x0000080cU )
#define DTS_MON_TSHOLD04_OFFSET ( 0x00000810U )
#define DTS_MON_TSHOLD05_OFFSET ( 0x00000814U )
#define DTS_MON_TSHOLD06_OFFSET ( 0x00000818U )
#define DTS_MON_TSHOLD07_OFFSET ( 0x0000081cU )
#define DTS_MON_TSHOLD08_OFFSET ( 0x00000820U )
#define DTS_MON_TSHOLD09_OFFSET ( 0x00000824U )
#define DTS_MON_TSHOLD010_OFFSET ( 0x00000828U )
#define DTS_MON_TSHOLD011_OFFSET ( 0x0000082cU )
#define DTS_MON_TSHOLD012_OFFSET ( 0x00000830U )
#define DTS_MON_TSHOLD013_OFFSET ( 0x00000834U )
#define DTS_MON_TSHOLD014_OFFSET ( 0x00000838U )
#define DTS_MON_TSHOLD015_OFFSET ( 0x0000083cU )
#define DTS_MON_TSHOLD10_OFFSET ( 0x00000840U )
#define DTS_MON_TSHOLD11_OFFSET ( 0x00000844U )
#define DTS_MON_TSHOLD12_OFFSET ( 0x00000848U )
#define DTS_MON_TSHOLD13_OFFSET ( 0x0000084cU )
#define DTS_MON_TSHOLD14_OFFSET ( 0x00000850U )
#define DTS_MON_TSHOLD15_OFFSET ( 0x00000854U )
#define DTS_MON_TSHOLD16_OFFSET ( 0x00000858U )
#define DTS_MON_TSHOLD17_OFFSET ( 0x0000085cU )
#define DTS_MON_TSHOLD18_OFFSET ( 0x00000860U )
#define DTS_MON_TSHOLD19_OFFSET ( 0x00000864U )
#define DTS_MON_TSHOLD110_OFFSET ( 0x00000868U )
#define DTS_MON_TSHOLD111_OFFSET ( 0x0000086cU )
#define DTS_MON_TSHOLD112_OFFSET ( 0x00000870U )
#define DTS_MON_TSHOLD113_OFFSET ( 0x00000874U )
#define DTS_MON_TSHOLD114_OFFSET ( 0x00000878U )
#define DTS_MON_TSHOLD115_OFFSET ( 0x0000087cU )
#define DTS_MON_TSHOLD20_OFFSET ( 0x00000880U )
#define DTS_MON_TSHOLD21_OFFSET ( 0x00000884U )
#define DTS_MON_TSHOLD22_OFFSET ( 0x00000888U )
#define DTS_MON_TSHOLD23_OFFSET ( 0x0000088cU )
#define DTS_MON_TSHOLD24_OFFSET ( 0x00000890U )
#define DTS_MON_TSHOLD25_OFFSET ( 0x00000894U )
#define DTS_MON_TSHOLD26_OFFSET ( 0x00000898U )
#define DTS_MON_TSHOLD27_OFFSET ( 0x0000089cU )
#define DTS_MON_TSHOLD28_OFFSET ( 0x000008a0U )
#define DTS_MON_TSHOLD29_OFFSET ( 0x000008a4U )
#define DTS_MON_TSHOLD210_OFFSET ( 0x000008a8U )
#define DTS_MON_TSHOLD211_OFFSET ( 0x000008acU )
#define DTS_MON_TSHOLD212_OFFSET ( 0x000008b0U )
#define DTS_MON_TSHOLD213_OFFSET ( 0x000008b4U )
#define DTS_MON_TSHOLD214_OFFSET ( 0x000008b8U )
#define DTS_MON_TSHOLD215_OFFSET ( 0x000008bcU )
#define DTS_MON_TSHOLD30_OFFSET ( 0x000008c0U )
#define DTS_MON_TSHOLD31_OFFSET ( 0x000008c4U )
#define DTS_MON_TSHOLD32_OFFSET ( 0x000008c8U )
#define DTS_MON_TSHOLD33_OFFSET ( 0x000008ccU )
#define DTS_MON_TSHOLD34_OFFSET ( 0x000008d0U )
#define DTS_MON_TSHOLD35_OFFSET ( 0x000008d4U )
#define DTS_MON_TSHOLD36_OFFSET ( 0x000008d8U )
#define DTS_MON_TSHOLD37_OFFSET ( 0x000008dcU )
#define DTS_MON_TSHOLD38_OFFSET ( 0x000008e0U )
#define DTS_MON_TSHOLD39_OFFSET ( 0x000008e4U )
#define DTS_MON_TSHOLD310_OFFSET ( 0x000008e8U )
#define DTS_MON_TSHOLD311_OFFSET ( 0x000008ecU )
#define DTS_MON_TSHOLD312_OFFSET ( 0x000008f0U )
#define DTS_MON_TSHOLD313_OFFSET ( 0x000008f4U )
#define DTS_MON_TSHOLD314_OFFSET ( 0x000008f8U )
#define DTS_MON_TSHOLD315_OFFSET ( 0x000008fcU )
#define DTS_MON_TSHOLD40_OFFSET ( 0x00000900U )
#define DTS_MON_TSHOLD41_OFFSET ( 0x00000904U )
#define DTS_MON_TSHOLD42_OFFSET ( 0x00000908U )
#define DTS_MON_TSHOLD43_OFFSET ( 0x0000090cU )
#define DTS_MON_TSHOLD44_OFFSET ( 0x00000910U )
#define DTS_MON_TSHOLD45_OFFSET ( 0x00000914U )
#define DTS_MON_TSHOLD46_OFFSET ( 0x00000918U )
#define DTS_MON_TSHOLD47_OFFSET ( 0x0000091cU )
#define DTS_MON_TSHOLD48_OFFSET ( 0x00000920U )
#define DTS_MON_TSHOLD49_OFFSET ( 0x00000924U )
#define DTS_MON_TSHOLD410_OFFSET ( 0x00000928U )
#define DTS_MON_TSHOLD411_OFFSET ( 0x0000092cU )
#define DTS_MON_TSHOLD412_OFFSET ( 0x00000930U )
#define DTS_MON_TSHOLD413_OFFSET ( 0x00000934U )
#define DTS_MON_TSHOLD414_OFFSET ( 0x00000938U )
#define DTS_MON_TSHOLD415_OFFSET ( 0x0000093cU )
#define DTS_MON_TSHOLD50_OFFSET ( 0x00000940U )
#define DTS_MON_TSHOLD51_OFFSET ( 0x00000944U )
#define DTS_MON_TSHOLD52_OFFSET ( 0x00000948U )
#define DTS_MON_TSHOLD53_OFFSET ( 0x0000094cU )
#define DTS_MON_TSHOLD54_OFFSET ( 0x00000950U )
#define DTS_MON_TSHOLD55_OFFSET ( 0x00000954U )
#define DTS_MON_TSHOLD56_OFFSET ( 0x00000958U )
#define DTS_MON_TSHOLD57_OFFSET ( 0x0000095cU )
#define DTS_MON_TSHOLD58_OFFSET ( 0x00000960U )
#define DTS_MON_TSHOLD59_OFFSET ( 0x00000964U )
#define DTS_MON_TSHOLD510_OFFSET ( 0x00000968U )
#define DTS_MON_TSHOLD511_OFFSET ( 0x0000096cU )
#define DTS_MON_TSHOLD512_OFFSET ( 0x00000970U )
#define DTS_MON_TSHOLD513_OFFSET ( 0x00000974U )
#define DTS_MON_TSHOLD514_OFFSET ( 0x00000978U )
#define DTS_MON_TSHOLD515_OFFSET ( 0x0000097cU )
#define DTS_MON_TEMP00_OFFSET ( 0x00001000U )
#define DTS_MON_TEMP01_OFFSET ( 0x00001004U )
#define DTS_MON_TEMP02_OFFSET ( 0x00001008U )
#define DTS_MON_TEMP03_OFFSET ( 0x0000100cU )
#define DTS_MON_TEMP04_OFFSET ( 0x00001010U )
#define DTS_MON_TEMP05_OFFSET ( 0x00001014U )
#define DTS_MON_TEMP06_OFFSET ( 0x00001018U )
#define DTS_MON_TEMP07_OFFSET ( 0x0000101cU )
#define DTS_MON_TEMP08_OFFSET ( 0x00001020U )
#define DTS_MON_TEMP09_OFFSET ( 0x00001024U )
#define DTS_MON_TEMP010_OFFSET ( 0x00001028U )
#define DTS_MON_TEMP011_OFFSET ( 0x0000102cU )
#define DTS_MON_TEMP012_OFFSET ( 0x00001030U )
#define DTS_MON_TEMP013_OFFSET ( 0x00001034U )
#define DTS_MON_TEMP014_OFFSET ( 0x00001038U )
#define DTS_MON_TEMP015_OFFSET ( 0x0000103cU )
#define DTS_MON_TEMP10_OFFSET ( 0x00001040U )
#define DTS_MON_TEMP11_OFFSET ( 0x00001044U )
#define DTS_MON_TEMP12_OFFSET ( 0x00001048U )
#define DTS_MON_TEMP13_OFFSET ( 0x0000104cU )
#define DTS_MON_TEMP14_OFFSET ( 0x00001050U )
#define DTS_MON_TEMP15_OFFSET ( 0x00001054U )
#define DTS_MON_TEMP16_OFFSET ( 0x00001058U )
#define DTS_MON_TEMP17_OFFSET ( 0x0000105cU )
#define DTS_MON_TEMP18_OFFSET ( 0x00001060U )
#define DTS_MON_TEMP19_OFFSET ( 0x00001064U )
#define DTS_MON_TEMP110_OFFSET ( 0x00001068U )
#define DTS_MON_TEMP111_OFFSET ( 0x0000106cU )
#define DTS_MON_TEMP112_OFFSET ( 0x00001070U )
#define DTS_MON_TEMP113_OFFSET ( 0x00001074U )
#define DTS_MON_TEMP114_OFFSET ( 0x00001078U )
#define DTS_MON_TEMP115_OFFSET ( 0x0000107cU )
#define DTS_MON_TEMP20_OFFSET ( 0x00001080U )
#define DTS_MON_TEMP21_OFFSET ( 0x00001084U )
#define DTS_MON_TEMP22_OFFSET ( 0x00001088U )
#define DTS_MON_TEMP23_OFFSET ( 0x0000108cU )
#define DTS_MON_TEMP24_OFFSET ( 0x00001090U )
#define DTS_MON_TEMP25_OFFSET ( 0x00001094U )
#define DTS_MON_TEMP26_OFFSET ( 0x00001098U )
#define DTS_MON_TEMP27_OFFSET ( 0x0000109cU )
#define DTS_MON_TEMP28_OFFSET ( 0x000010a0U )
#define DTS_MON_TEMP29_OFFSET ( 0x000010a4U )
#define DTS_MON_TEMP210_OFFSET ( 0x000010a8U )
#define DTS_MON_TEMP211_OFFSET ( 0x000010acU )
#define DTS_MON_TEMP212_OFFSET ( 0x000010b0U )
#define DTS_MON_TEMP213_OFFSET ( 0x000010b4U )
#define DTS_MON_TEMP214_OFFSET ( 0x000010b8U )
#define DTS_MON_TEMP215_OFFSET ( 0x000010bcU )
#define DTS_MON_TEMP30_OFFSET ( 0x000010c0U )
#define DTS_MON_TEMP31_OFFSET ( 0x000010c4U )
#define DTS_MON_TEMP32_OFFSET ( 0x000010c8U )
#define DTS_MON_TEMP33_OFFSET ( 0x000010ccU )
#define DTS_MON_TEMP34_OFFSET ( 0x000010d0U )
#define DTS_MON_TEMP35_OFFSET ( 0x000010d4U )
#define DTS_MON_TEMP36_OFFSET ( 0x000010d8U )
#define DTS_MON_TEMP37_OFFSET ( 0x000010dcU )
#define DTS_MON_TEMP38_OFFSET ( 0x000010e0U )
#define DTS_MON_TEMP39_OFFSET ( 0x000010e4U )
#define DTS_MON_TEMP310_OFFSET ( 0x000010e8U )
#define DTS_MON_TEMP311_OFFSET ( 0x000010ecU )
#define DTS_MON_TEMP312_OFFSET ( 0x000010f0U )
#define DTS_MON_TEMP313_OFFSET ( 0x000010f4U )
#define DTS_MON_TEMP314_OFFSET ( 0x000010f8U )
#define DTS_MON_TEMP315_OFFSET ( 0x000010fcU )
#define DTS_MON_TEMP40_OFFSET ( 0x00001100U )
#define DTS_MON_TEMP41_OFFSET ( 0x00001104U )
#define DTS_MON_TEMP42_OFFSET ( 0x00001108U )
#define DTS_MON_TEMP43_OFFSET ( 0x0000110cU )
#define DTS_MON_TEMP44_OFFSET ( 0x00001110U )
#define DTS_MON_TEMP45_OFFSET ( 0x00001114U )
#define DTS_MON_TEMP46_OFFSET ( 0x00001118U )
#define DTS_MON_TEMP47_OFFSET ( 0x0000111cU )
#define DTS_MON_TEMP48_OFFSET ( 0x00001120U )
#define DTS_MON_TEMP49_OFFSET ( 0x00001124U )
#define DTS_MON_TEMP410_OFFSET ( 0x00001128U )
#define DTS_MON_TEMP411_OFFSET ( 0x0000112cU )
#define DTS_MON_TEMP412_OFFSET ( 0x00001130U )
#define DTS_MON_TEMP413_OFFSET ( 0x00001134U )
#define DTS_MON_TEMP414_OFFSET ( 0x00001138U )
#define DTS_MON_TEMP415_OFFSET ( 0x0000113cU )
#define DTS_MON_TEMP50_OFFSET ( 0x00001140U )
#define DTS_MON_TEMP51_OFFSET ( 0x00001144U )
#define DTS_MON_TEMP52_OFFSET ( 0x00001148U )
#define DTS_MON_TEMP53_OFFSET ( 0x0000114cU )
#define DTS_MON_TEMP54_OFFSET ( 0x00001150U )
#define DTS_MON_TEMP55_OFFSET ( 0x00001154U )
#define DTS_MON_TEMP56_OFFSET ( 0x00001158U )
#define DTS_MON_TEMP57_OFFSET ( 0x0000115cU )
#define DTS_MON_TEMP58_OFFSET ( 0x00001160U )
#define DTS_MON_TEMP59_OFFSET ( 0x00001164U )
#define DTS_MON_TEMP510_OFFSET ( 0x00001168U )
#define DTS_MON_TEMP511_OFFSET ( 0x0000116cU )
#define DTS_MON_TEMP512_OFFSET ( 0x00001170U )
#define DTS_MON_TEMP513_OFFSET ( 0x00001174U )
#define DTS_MON_TEMP514_OFFSET ( 0x00001178U )
#define DTS_MON_TEMP515_OFFSET ( 0x0000117cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define DTS_EN_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_EN_OFFSET ) ))
#define DTS_MON_EN_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_EN_OFFSET ) ))
#define DTS_MON_TIMEOUT_CYCLE_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TIMEOUT_CYCLE_OFFSET ) ))
#define DTS_ATSA_EN_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_EN_OFFSET ) ))
#define DTS_ATSA_ADC_CAPT_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_CAPT_OFFSET ) ))
#define DTS_ATSA_DAC_CAPT_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_CAPT_OFFSET ) ))
#define DTS_ATSA_AGC_CAPT_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_CAPT_OFFSET ) ))
#define DTS_ATSA_FAULT_STAT_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_FAULT_STAT_OFFSET ) ))
#define DTS_MON_INT_STAT_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_INT_STAT_OFFSET ) ))
#define DTS_MON_INT_EN_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_INT_EN_OFFSET ) ))
#define DTS_MON_INT_CLR_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_INT_CLR_OFFSET ) ))
#define DTS_MON_INT_FORCE_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_INT_FORCE_OFFSET ) ))
#define DTS_MON_INT_MASKED_STAT_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_INT_MASKED_STAT_OFFSET ) ))
#define DTS_ATSA_ADC_UL0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL0_OFFSET ) ))
#define DTS_ATSA_ADC_UL1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL1_OFFSET ) ))
#define DTS_ATSA_ADC_UL2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL2_OFFSET ) ))
#define DTS_ATSA_ADC_UL3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL3_OFFSET ) ))
#define DTS_ATSA_ADC_UL4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL4_OFFSET ) ))
#define DTS_ATSA_ADC_UL5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL5_OFFSET ) ))
#define DTS_ATSA_ADC_UL6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL6_OFFSET ) ))
#define DTS_ATSA_ADC_UL7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_UL7_OFFSET ) ))
#define DTS_ATSA_ADC_LL0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL0_OFFSET ) ))
#define DTS_ATSA_ADC_LL1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL1_OFFSET ) ))
#define DTS_ATSA_ADC_LL2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL2_OFFSET ) ))
#define DTS_ATSA_ADC_LL3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL3_OFFSET ) ))
#define DTS_ATSA_ADC_LL4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL4_OFFSET ) ))
#define DTS_ATSA_ADC_LL5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL5_OFFSET ) ))
#define DTS_ATSA_ADC_LL6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL6_OFFSET ) ))
#define DTS_ATSA_ADC_LL7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_ADC_LL7_OFFSET ) ))
#define DTS_ATSA_DAC_UL0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL0_OFFSET ) ))
#define DTS_ATSA_DAC_UL1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL1_OFFSET ) ))
#define DTS_ATSA_DAC_UL2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL2_OFFSET ) ))
#define DTS_ATSA_DAC_UL3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL3_OFFSET ) ))
#define DTS_ATSA_DAC_UL4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL4_OFFSET ) ))
#define DTS_ATSA_DAC_UL5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL5_OFFSET ) ))
#define DTS_ATSA_DAC_UL6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL6_OFFSET ) ))
#define DTS_ATSA_DAC_UL7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_UL7_OFFSET ) ))
#define DTS_ATSA_DAC_LL0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL0_OFFSET ) ))
#define DTS_ATSA_DAC_LL1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL1_OFFSET ) ))
#define DTS_ATSA_DAC_LL2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL2_OFFSET ) ))
#define DTS_ATSA_DAC_LL3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL3_OFFSET ) ))
#define DTS_ATSA_DAC_LL4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL4_OFFSET ) ))
#define DTS_ATSA_DAC_LL5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL5_OFFSET ) ))
#define DTS_ATSA_DAC_LL6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL6_OFFSET ) ))
#define DTS_ATSA_DAC_LL7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_DAC_LL7_OFFSET ) ))
#define DTS_ATSA_AGC_UL0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL0_OFFSET ) ))
#define DTS_ATSA_AGC_UL1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL1_OFFSET ) ))
#define DTS_ATSA_AGC_UL2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL2_OFFSET ) ))
#define DTS_ATSA_AGC_UL3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL3_OFFSET ) ))
#define DTS_ATSA_AGC_UL4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL4_OFFSET ) ))
#define DTS_ATSA_AGC_UL5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL5_OFFSET ) ))
#define DTS_ATSA_AGC_UL6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL6_OFFSET ) ))
#define DTS_ATSA_AGC_UL7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_UL7_OFFSET ) ))
#define DTS_ATSA_AGC_LL0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL0_OFFSET ) ))
#define DTS_ATSA_AGC_LL1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL1_OFFSET ) ))
#define DTS_ATSA_AGC_LL2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL2_OFFSET ) ))
#define DTS_ATSA_AGC_LL3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL3_OFFSET ) ))
#define DTS_ATSA_AGC_LL4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL4_OFFSET ) ))
#define DTS_ATSA_AGC_LL5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL5_OFFSET ) ))
#define DTS_ATSA_AGC_LL6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL6_OFFSET ) ))
#define DTS_ATSA_AGC_LL7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_AGC_LL7_OFFSET ) ))
#define DTS_ATSA_SENSOR0_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR0_OFFSET ) ))
#define DTS_ATSA_SENSOR1_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR1_OFFSET ) ))
#define DTS_ATSA_SENSOR2_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR2_OFFSET ) ))
#define DTS_ATSA_SENSOR3_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR3_OFFSET ) ))
#define DTS_ATSA_SENSOR4_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR4_OFFSET ) ))
#define DTS_ATSA_SENSOR5_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR5_OFFSET ) ))
#define DTS_ATSA_SENSOR6_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR6_OFFSET ) ))
#define DTS_ATSA_SENSOR7_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_ATSA_SENSOR7_OFFSET ) ))
#define DTS_MON_TSHOLD00_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD00_OFFSET ) ))
#define DTS_MON_TSHOLD01_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD01_OFFSET ) ))
#define DTS_MON_TSHOLD02_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD02_OFFSET ) ))
#define DTS_MON_TSHOLD03_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD03_OFFSET ) ))
#define DTS_MON_TSHOLD04_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD04_OFFSET ) ))
#define DTS_MON_TSHOLD05_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD05_OFFSET ) ))
#define DTS_MON_TSHOLD06_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD06_OFFSET ) ))
#define DTS_MON_TSHOLD07_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD07_OFFSET ) ))
#define DTS_MON_TSHOLD08_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD08_OFFSET ) ))
#define DTS_MON_TSHOLD09_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD09_OFFSET ) ))
#define DTS_MON_TSHOLD010_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD010_OFFSET ) ))
#define DTS_MON_TSHOLD011_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD011_OFFSET ) ))
#define DTS_MON_TSHOLD012_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD012_OFFSET ) ))
#define DTS_MON_TSHOLD013_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD013_OFFSET ) ))
#define DTS_MON_TSHOLD014_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD014_OFFSET ) ))
#define DTS_MON_TSHOLD015_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD015_OFFSET ) ))
#define DTS_MON_TSHOLD10_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD10_OFFSET ) ))
#define DTS_MON_TSHOLD11_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD11_OFFSET ) ))
#define DTS_MON_TSHOLD12_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD12_OFFSET ) ))
#define DTS_MON_TSHOLD13_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD13_OFFSET ) ))
#define DTS_MON_TSHOLD14_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD14_OFFSET ) ))
#define DTS_MON_TSHOLD15_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD15_OFFSET ) ))
#define DTS_MON_TSHOLD16_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD16_OFFSET ) ))
#define DTS_MON_TSHOLD17_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD17_OFFSET ) ))
#define DTS_MON_TSHOLD18_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD18_OFFSET ) ))
#define DTS_MON_TSHOLD19_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD19_OFFSET ) ))
#define DTS_MON_TSHOLD110_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD110_OFFSET ) ))
#define DTS_MON_TSHOLD111_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD111_OFFSET ) ))
#define DTS_MON_TSHOLD112_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD112_OFFSET ) ))
#define DTS_MON_TSHOLD113_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD113_OFFSET ) ))
#define DTS_MON_TSHOLD114_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD114_OFFSET ) ))
#define DTS_MON_TSHOLD115_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD115_OFFSET ) ))
#define DTS_MON_TSHOLD20_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD20_OFFSET ) ))
#define DTS_MON_TSHOLD21_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD21_OFFSET ) ))
#define DTS_MON_TSHOLD22_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD22_OFFSET ) ))
#define DTS_MON_TSHOLD23_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD23_OFFSET ) ))
#define DTS_MON_TSHOLD24_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD24_OFFSET ) ))
#define DTS_MON_TSHOLD25_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD25_OFFSET ) ))
#define DTS_MON_TSHOLD26_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD26_OFFSET ) ))
#define DTS_MON_TSHOLD27_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD27_OFFSET ) ))
#define DTS_MON_TSHOLD28_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD28_OFFSET ) ))
#define DTS_MON_TSHOLD29_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD29_OFFSET ) ))
#define DTS_MON_TSHOLD210_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD210_OFFSET ) ))
#define DTS_MON_TSHOLD211_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD211_OFFSET ) ))
#define DTS_MON_TSHOLD212_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD212_OFFSET ) ))
#define DTS_MON_TSHOLD213_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD213_OFFSET ) ))
#define DTS_MON_TSHOLD214_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD214_OFFSET ) ))
#define DTS_MON_TSHOLD215_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD215_OFFSET ) ))
#define DTS_MON_TSHOLD30_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD30_OFFSET ) ))
#define DTS_MON_TSHOLD31_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD31_OFFSET ) ))
#define DTS_MON_TSHOLD32_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD32_OFFSET ) ))
#define DTS_MON_TSHOLD33_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD33_OFFSET ) ))
#define DTS_MON_TSHOLD34_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD34_OFFSET ) ))
#define DTS_MON_TSHOLD35_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD35_OFFSET ) ))
#define DTS_MON_TSHOLD36_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD36_OFFSET ) ))
#define DTS_MON_TSHOLD37_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD37_OFFSET ) ))
#define DTS_MON_TSHOLD38_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD38_OFFSET ) ))
#define DTS_MON_TSHOLD39_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD39_OFFSET ) ))
#define DTS_MON_TSHOLD310_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD310_OFFSET ) ))
#define DTS_MON_TSHOLD311_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD311_OFFSET ) ))
#define DTS_MON_TSHOLD312_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD312_OFFSET ) ))
#define DTS_MON_TSHOLD313_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD313_OFFSET ) ))
#define DTS_MON_TSHOLD314_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD314_OFFSET ) ))
#define DTS_MON_TSHOLD315_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD315_OFFSET ) ))
#define DTS_MON_TSHOLD40_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD40_OFFSET ) ))
#define DTS_MON_TSHOLD41_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD41_OFFSET ) ))
#define DTS_MON_TSHOLD42_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD42_OFFSET ) ))
#define DTS_MON_TSHOLD43_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD43_OFFSET ) ))
#define DTS_MON_TSHOLD44_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD44_OFFSET ) ))
#define DTS_MON_TSHOLD45_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD45_OFFSET ) ))
#define DTS_MON_TSHOLD46_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD46_OFFSET ) ))
#define DTS_MON_TSHOLD47_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD47_OFFSET ) ))
#define DTS_MON_TSHOLD48_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD48_OFFSET ) ))
#define DTS_MON_TSHOLD49_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD49_OFFSET ) ))
#define DTS_MON_TSHOLD410_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD410_OFFSET ) ))
#define DTS_MON_TSHOLD411_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD411_OFFSET ) ))
#define DTS_MON_TSHOLD412_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD412_OFFSET ) ))
#define DTS_MON_TSHOLD413_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD413_OFFSET ) ))
#define DTS_MON_TSHOLD414_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD414_OFFSET ) ))
#define DTS_MON_TSHOLD415_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD415_OFFSET ) ))
#define DTS_MON_TSHOLD50_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD50_OFFSET ) ))
#define DTS_MON_TSHOLD51_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD51_OFFSET ) ))
#define DTS_MON_TSHOLD52_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD52_OFFSET ) ))
#define DTS_MON_TSHOLD53_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD53_OFFSET ) ))
#define DTS_MON_TSHOLD54_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD54_OFFSET ) ))
#define DTS_MON_TSHOLD55_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD55_OFFSET ) ))
#define DTS_MON_TSHOLD56_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD56_OFFSET ) ))
#define DTS_MON_TSHOLD57_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD57_OFFSET ) ))
#define DTS_MON_TSHOLD58_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD58_OFFSET ) ))
#define DTS_MON_TSHOLD59_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD59_OFFSET ) ))
#define DTS_MON_TSHOLD510_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD510_OFFSET ) ))
#define DTS_MON_TSHOLD511_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD511_OFFSET ) ))
#define DTS_MON_TSHOLD512_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD512_OFFSET ) ))
#define DTS_MON_TSHOLD513_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD513_OFFSET ) ))
#define DTS_MON_TSHOLD514_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD514_OFFSET ) ))
#define DTS_MON_TSHOLD515_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TSHOLD515_OFFSET ) ))
#define DTS_MON_TEMP00_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP00_OFFSET ) ))
#define DTS_MON_TEMP01_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP01_OFFSET ) ))
#define DTS_MON_TEMP02_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP02_OFFSET ) ))
#define DTS_MON_TEMP03_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP03_OFFSET ) ))
#define DTS_MON_TEMP04_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP04_OFFSET ) ))
#define DTS_MON_TEMP05_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP05_OFFSET ) ))
#define DTS_MON_TEMP06_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP06_OFFSET ) ))
#define DTS_MON_TEMP07_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP07_OFFSET ) ))
#define DTS_MON_TEMP08_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP08_OFFSET ) ))
#define DTS_MON_TEMP09_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP09_OFFSET ) ))
#define DTS_MON_TEMP010_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP010_OFFSET ) ))
#define DTS_MON_TEMP011_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP011_OFFSET ) ))
#define DTS_MON_TEMP012_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP012_OFFSET ) ))
#define DTS_MON_TEMP013_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP013_OFFSET ) ))
#define DTS_MON_TEMP014_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP014_OFFSET ) ))
#define DTS_MON_TEMP015_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP015_OFFSET ) ))
#define DTS_MON_TEMP10_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP10_OFFSET ) ))
#define DTS_MON_TEMP11_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP11_OFFSET ) ))
#define DTS_MON_TEMP12_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP12_OFFSET ) ))
#define DTS_MON_TEMP13_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP13_OFFSET ) ))
#define DTS_MON_TEMP14_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP14_OFFSET ) ))
#define DTS_MON_TEMP15_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP15_OFFSET ) ))
#define DTS_MON_TEMP16_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP16_OFFSET ) ))
#define DTS_MON_TEMP17_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP17_OFFSET ) ))
#define DTS_MON_TEMP18_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP18_OFFSET ) ))
#define DTS_MON_TEMP19_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP19_OFFSET ) ))
#define DTS_MON_TEMP110_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP110_OFFSET ) ))
#define DTS_MON_TEMP111_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP111_OFFSET ) ))
#define DTS_MON_TEMP112_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP112_OFFSET ) ))
#define DTS_MON_TEMP113_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP113_OFFSET ) ))
#define DTS_MON_TEMP114_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP114_OFFSET ) ))
#define DTS_MON_TEMP115_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP115_OFFSET ) ))
#define DTS_MON_TEMP20_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP20_OFFSET ) ))
#define DTS_MON_TEMP21_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP21_OFFSET ) ))
#define DTS_MON_TEMP22_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP22_OFFSET ) ))
#define DTS_MON_TEMP23_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP23_OFFSET ) ))
#define DTS_MON_TEMP24_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP24_OFFSET ) ))
#define DTS_MON_TEMP25_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP25_OFFSET ) ))
#define DTS_MON_TEMP26_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP26_OFFSET ) ))
#define DTS_MON_TEMP27_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP27_OFFSET ) ))
#define DTS_MON_TEMP28_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP28_OFFSET ) ))
#define DTS_MON_TEMP29_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP29_OFFSET ) ))
#define DTS_MON_TEMP210_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP210_OFFSET ) ))
#define DTS_MON_TEMP211_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP211_OFFSET ) ))
#define DTS_MON_TEMP212_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP212_OFFSET ) ))
#define DTS_MON_TEMP213_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP213_OFFSET ) ))
#define DTS_MON_TEMP214_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP214_OFFSET ) ))
#define DTS_MON_TEMP215_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP215_OFFSET ) ))
#define DTS_MON_TEMP30_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP30_OFFSET ) ))
#define DTS_MON_TEMP31_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP31_OFFSET ) ))
#define DTS_MON_TEMP32_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP32_OFFSET ) ))
#define DTS_MON_TEMP33_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP33_OFFSET ) ))
#define DTS_MON_TEMP34_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP34_OFFSET ) ))
#define DTS_MON_TEMP35_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP35_OFFSET ) ))
#define DTS_MON_TEMP36_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP36_OFFSET ) ))
#define DTS_MON_TEMP37_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP37_OFFSET ) ))
#define DTS_MON_TEMP38_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP38_OFFSET ) ))
#define DTS_MON_TEMP39_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP39_OFFSET ) ))
#define DTS_MON_TEMP310_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP310_OFFSET ) ))
#define DTS_MON_TEMP311_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP311_OFFSET ) ))
#define DTS_MON_TEMP312_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP312_OFFSET ) ))
#define DTS_MON_TEMP313_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP313_OFFSET ) ))
#define DTS_MON_TEMP314_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP314_OFFSET ) ))
#define DTS_MON_TEMP315_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP315_OFFSET ) ))
#define DTS_MON_TEMP40_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP40_OFFSET ) ))
#define DTS_MON_TEMP41_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP41_OFFSET ) ))
#define DTS_MON_TEMP42_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP42_OFFSET ) ))
#define DTS_MON_TEMP43_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP43_OFFSET ) ))
#define DTS_MON_TEMP44_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP44_OFFSET ) ))
#define DTS_MON_TEMP45_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP45_OFFSET ) ))
#define DTS_MON_TEMP46_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP46_OFFSET ) ))
#define DTS_MON_TEMP47_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP47_OFFSET ) ))
#define DTS_MON_TEMP48_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP48_OFFSET ) ))
#define DTS_MON_TEMP49_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP49_OFFSET ) ))
#define DTS_MON_TEMP410_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP410_OFFSET ) ))
#define DTS_MON_TEMP411_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP411_OFFSET ) ))
#define DTS_MON_TEMP412_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP412_OFFSET ) ))
#define DTS_MON_TEMP413_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP413_OFFSET ) ))
#define DTS_MON_TEMP414_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP414_OFFSET ) ))
#define DTS_MON_TEMP415_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP415_OFFSET ) ))
#define DTS_MON_TEMP50_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP50_OFFSET ) ))
#define DTS_MON_TEMP51_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP51_OFFSET ) ))
#define DTS_MON_TEMP52_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP52_OFFSET ) ))
#define DTS_MON_TEMP53_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP53_OFFSET ) ))
#define DTS_MON_TEMP54_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP54_OFFSET ) ))
#define DTS_MON_TEMP55_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP55_OFFSET ) ))
#define DTS_MON_TEMP56_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP56_OFFSET ) ))
#define DTS_MON_TEMP57_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP57_OFFSET ) ))
#define DTS_MON_TEMP58_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP58_OFFSET ) ))
#define DTS_MON_TEMP59_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP59_OFFSET ) ))
#define DTS_MON_TEMP510_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP510_OFFSET ) ))
#define DTS_MON_TEMP511_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP511_OFFSET ) ))
#define DTS_MON_TEMP512_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP512_OFFSET ) ))
#define DTS_MON_TEMP513_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP513_OFFSET ) ))
#define DTS_MON_TEMP514_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP514_OFFSET ) ))
#define DTS_MON_TEMP515_ADR (( ( SYSCON_DTS_MONITOR_BASE ) + ( DTS_MON_TEMP515_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_EN register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_en
  * dts_en
  */

typedef union {
  struct {
    uint32_t DTS_EN_0 : 1;
    ///< This register contains the DTS Enable for DTS 0 (1 = enable, 0 = disable).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_EN_1 : 1;
    ///< This register contains the DTS Enable for DTS 1 (1 = enable, 0 = disable).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DTS_EN_2 : 1;
    ///< This register contains the DTS Enable for DTS 2 (1 = enable, 0 = disable).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t DTS_EN_3 : 1;
    ///< This register contains the DTS Enable for DTS 3 (1 = enable, 0 = disable).
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DTS_EN_4 : 1;
    ///< This register contains the DTS Enable for DTS 4 (1 = enable, 0 = disable).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DTS_EN_5 : 1;
    ///< This register contains the DTS Enable for DTS 5 (1 = enable, 0 = disable).
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} dts_en_reg_t;

#define DTS_EN_DEFAULT (0x00000000U)
#define DTS_EN_RD_MASK (0x0000003fU)
#define DTS_EN_WR_MASK (0x0000003fU)


///< This register contains the DTS Enable for DTS 0 (1 = enable, 0 = disable).
#define DTS_EN_DTS_EN_0_BF_OFF ( 0)
#define DTS_EN_DTS_EN_0_BF_WID ( 1)
#define DTS_EN_DTS_EN_0_BF_MSK (0x00000001)
#define DTS_EN_DTS_EN_0_BF_DEF (0x00000000)

///< This register contains the DTS Enable for DTS 1 (1 = enable, 0 = disable).
#define DTS_EN_DTS_EN_1_BF_OFF ( 1)
#define DTS_EN_DTS_EN_1_BF_WID ( 1)
#define DTS_EN_DTS_EN_1_BF_MSK (0x00000002)
#define DTS_EN_DTS_EN_1_BF_DEF (0x00000000)

///< This register contains the DTS Enable for DTS 2 (1 = enable, 0 = disable).
#define DTS_EN_DTS_EN_2_BF_OFF ( 2)
#define DTS_EN_DTS_EN_2_BF_WID ( 1)
#define DTS_EN_DTS_EN_2_BF_MSK (0x00000004)
#define DTS_EN_DTS_EN_2_BF_DEF (0x00000000)

///< This register contains the DTS Enable for DTS 3 (1 = enable, 0 = disable).
#define DTS_EN_DTS_EN_3_BF_OFF ( 3)
#define DTS_EN_DTS_EN_3_BF_WID ( 1)
#define DTS_EN_DTS_EN_3_BF_MSK (0x00000008)
#define DTS_EN_DTS_EN_3_BF_DEF (0x00000000)

///< This register contains the DTS Enable for DTS 4 (1 = enable, 0 = disable).
#define DTS_EN_DTS_EN_4_BF_OFF ( 4)
#define DTS_EN_DTS_EN_4_BF_WID ( 1)
#define DTS_EN_DTS_EN_4_BF_MSK (0x00000010)
#define DTS_EN_DTS_EN_4_BF_DEF (0x00000000)

///< This register contains the DTS Enable for DTS 5 (1 = enable, 0 = disable).
#define DTS_EN_DTS_EN_5_BF_OFF ( 5)
#define DTS_EN_DTS_EN_5_BF_WID ( 1)
#define DTS_EN_DTS_EN_5_BF_MSK (0x00000020)
#define DTS_EN_DTS_EN_5_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_ENABLE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_enable
  * dts_mon_enable
  */

typedef union {
  struct {
    uint32_t DTS_MON_ENABLE_0 : 1;
    ///< This register contains the DTS Monitor Enable for DTS 0 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DTS_MON_ENABLE_1 : 1;
    ///< This register contains the DTS Monitor Enable for DTS 1 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DTS_MON_ENABLE_2 : 1;
    ///< This register contains the DTS Monitor Enable for DTS 2 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t DTS_MON_ENABLE_3 : 1;
    ///< This register contains the DTS Monitor Enable for DTS 3 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DTS_MON_ENABLE_4 : 1;
    ///< This register contains the DTS Monitor Enable for DTS 4 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DTS_MON_ENABLE_5 : 1;
    ///< This register contains the DTS Monitor Enable for DTS 5 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_en_reg_t;

#define DTS_MON_EN_DEFAULT (0x00000000U)
#define DTS_MON_EN_RD_MASK (0x0000003fU)
#define DTS_MON_EN_WR_MASK (0x0000003fU)


///< This register contains the DTS Monitor Enable for DTS 0 (1 = enable,
///< 0 = disable).
#define DTS_MON_EN_DTS_MON_EN_0_BF_OFF ( 0)
#define DTS_MON_EN_DTS_MON_EN_0_BF_WID ( 1)
#define DTS_MON_EN_DTS_MON_EN_0_BF_MSK (0x00000001)
#define DTS_MON_EN_DTS_MON_EN_0_BF_DEF (0x00000000)

///< This register contains the DTS Monitor Enable for DTS 1 (1 = enable,
///< 0 = disable).
#define DTS_MON_EN_DTS_MON_EN_1_BF_OFF ( 1)
#define DTS_MON_EN_DTS_MON_EN_1_BF_WID ( 1)
#define DTS_MON_EN_DTS_MON_EN_1_BF_MSK (0x00000002)
#define DTS_MON_EN_DTS_MON_EN_1_BF_DEF (0x00000000)

///< This register contains the DTS Monitor Enable for DTS 2 (1 = enable,
///< 0 = disable).
#define DTS_MON_EN_DTS_MON_EN_2_BF_OFF ( 2)
#define DTS_MON_EN_DTS_MON_EN_2_BF_WID ( 1)
#define DTS_MON_EN_DTS_MON_EN_2_BF_MSK (0x00000004)
#define DTS_MON_EN_DTS_MON_EN_2_BF_DEF (0x00000000)

///< This register contains the DTS Monitor Enable for DTS 3 (1 = enable,
///< 0 = disable).
#define DTS_MON_EN_DTS_MON_EN_3_BF_OFF ( 3)
#define DTS_MON_EN_DTS_MON_EN_3_BF_WID ( 1)
#define DTS_MON_EN_DTS_MON_EN_3_BF_MSK (0x00000008)
#define DTS_MON_EN_DTS_MON_EN_3_BF_DEF (0x00000000)

///< This register contains the DTS Monitor Enable for DTS 4 (1 = enable,
///< 0 = disable).
#define DTS_MON_EN_DTS_MON_EN_4_BF_OFF ( 4)
#define DTS_MON_EN_DTS_MON_EN_4_BF_WID ( 1)
#define DTS_MON_EN_DTS_MON_EN_4_BF_MSK (0x00000010)
#define DTS_MON_EN_DTS_MON_EN_4_BF_DEF (0x00000000)

///< This register contains the DTS Monitor Enable for DTS 5 (1 = enable,
///< 0 = disable).
#define DTS_MON_EN_DTS_MON_EN_5_BF_OFF ( 5)
#define DTS_MON_EN_DTS_MON_EN_5_BF_WID ( 1)
#define DTS_MON_EN_DTS_MON_EN_5_BF_MSK (0x00000020)
#define DTS_MON_EN_DTS_MON_EN_5_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TIMEOUT_CYCLE register description at address offset 0x8
  *
  * Register default value:        0x00080000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_timeout_cycle
  * dts_mon_timeout_cycle
  */

typedef union {
  struct {
    uint32_t DTS_MON_TIMEOUT_CYCLE : 32;
    ///< This register contains the DTS Cycle Timeout Value. LSB = 2ns
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80000"
  } ;
  uint32_t value;
} dts_mon_timeout_cycle_reg_t;

#define DTS_MON_TIMEOUT_CYCLE_DEFAULT (0x00080000U)
#define DTS_MON_TIMEOUT_CYCLE_RD_MASK (0xffffffffU)
#define DTS_MON_TIMEOUT_CYCLE_WR_MASK (0xffffffffU)


///< This register contains the DTS Cycle Timeout Value. LSB = 2ns
#define DTS_MON_TIMEOUT_CYCLE_DTS_MON_TIMEOUT_CYCLE_BF_OFF ( 0)
#define DTS_MON_TIMEOUT_CYCLE_DTS_MON_TIMEOUT_CYCLE_BF_WID (32)
#define DTS_MON_TIMEOUT_CYCLE_DTS_MON_TIMEOUT_CYCLE_BF_MSK (0xFFFFFFFF)
#define DTS_MON_TIMEOUT_CYCLE_DTS_MON_TIMEOUT_CYCLE_BF_DEF (0x00080000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_ENABLE register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_enable
  * atsa_enable
  */

typedef union {
  struct {
    uint32_t ADC_ENABLE : 1;
    ///< This register contains ATSA ADC Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DAC_ENABLE : 1;
    ///< This register contains ATSA DAC Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t AGC_ENABLE : 1;
    ///< This register contains ATSA AGC Enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_en_reg_t;

#define DTS_ATSA_EN_DEFAULT (0x00000000U)
#define DTS_ATSA_EN_RD_MASK (0x00000007U)
#define DTS_ATSA_EN_WR_MASK (0x00000007U)


///< This register contains ATSA ADC Enable
#define DTS_ATSA_EN_ADC_EN_BF_OFF ( 0)
#define DTS_ATSA_EN_ADC_EN_BF_WID ( 1)
#define DTS_ATSA_EN_ADC_EN_BF_MSK (0x00000001)
#define DTS_ATSA_EN_ADC_EN_BF_DEF (0x00000000)

///< This register contains ATSA DAC Enable
#define DTS_ATSA_EN_DAC_EN_BF_OFF ( 1)
#define DTS_ATSA_EN_DAC_EN_BF_WID ( 1)
#define DTS_ATSA_EN_DAC_EN_BF_MSK (0x00000002)
#define DTS_ATSA_EN_DAC_EN_BF_DEF (0x00000000)

///< This register contains ATSA AGC Enable
#define DTS_ATSA_EN_AGC_EN_BF_OFF ( 2)
#define DTS_ATSA_EN_AGC_EN_BF_WID ( 1)
#define DTS_ATSA_EN_AGC_EN_BF_MSK (0x00000004)
#define DTS_ATSA_EN_AGC_EN_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_ADC_CAPT register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_adc_capt
  * atsa_adc_capt
  */

typedef union {
  struct {
    uint32_t ATSA_ADC_CAPT : 1;
    ///< This register contains the ATSA ADC Starting Temperature Capture Pulse,
    ///< data needs to be 1 to activate the capture pulse.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_adc_capt_reg_t;

#define DTS_ATSA_ADC_CAPT_DEFAULT (0x00000000U)
#define DTS_ATSA_ADC_CAPT_RD_MASK (0x00000000U)
#define DTS_ATSA_ADC_CAPT_WR_MASK (0x00000001U)


///< This register contains the ATSA ADC Starting Temperature Capture Pulse,
///< data needs to be 1 to activate the capture pulse.
#define DTS_ATSA_ADC_CAPT_ATSA_ADC_CAPT_BF_OFF ( 0)
#define DTS_ATSA_ADC_CAPT_ATSA_ADC_CAPT_BF_WID ( 1)
#define DTS_ATSA_ADC_CAPT_ATSA_ADC_CAPT_BF_MSK (0x00000001)
#define DTS_ATSA_ADC_CAPT_ATSA_ADC_CAPT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_DAC_CAPT register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_dac_capt
  * atsa_dac_capt
  */

typedef union {
  struct {
    uint32_t ATSA_DAC_CAPT : 1;
    ///< This register contains the ATSA DAC Starting Temperature Capture Pulse,
    ///< data needs to be 1 to activate the capture pulse.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_dac_capt_reg_t;

#define DTS_ATSA_DAC_CAPT_DEFAULT (0x00000000U)
#define DTS_ATSA_DAC_CAPT_RD_MASK (0x00000000U)
#define DTS_ATSA_DAC_CAPT_WR_MASK (0x00000001U)


///< This register contains the ATSA DAC Starting Temperature Capture Pulse,
///< data needs to be 1 to activate the capture pulse.
#define DTS_ATSA_DAC_CAPT_ATSA_DAC_CAPT_BF_OFF ( 0)
#define DTS_ATSA_DAC_CAPT_ATSA_DAC_CAPT_BF_WID ( 1)
#define DTS_ATSA_DAC_CAPT_ATSA_DAC_CAPT_BF_MSK (0x00000001)
#define DTS_ATSA_DAC_CAPT_ATSA_DAC_CAPT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_AGC_CAPT register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_agc_capt
  * atsa_agc_capt
  */

typedef union {
  struct {
    uint32_t ATSA_AGC_CAPT : 1;
    ///< This register contains the ATSA AGC Starting Temperature Capture Pulse,
    ///< data needs to be 1 to activate the capture pulse.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_agc_capt_reg_t;

#define DTS_ATSA_AGC_CAPT_DEFAULT (0x00000000U)
#define DTS_ATSA_AGC_CAPT_RD_MASK (0x00000000U)
#define DTS_ATSA_AGC_CAPT_WR_MASK (0x00000001U)


///< This register contains the ATSA AGC Starting Temperature Capture Pulse,
///< data needs to be 1 to activate the capture pulse.
#define DTS_ATSA_AGC_CAPT_ATSA_AGC_CAPT_BF_OFF ( 0)
#define DTS_ATSA_AGC_CAPT_ATSA_AGC_CAPT_BF_WID ( 1)
#define DTS_ATSA_AGC_CAPT_ATSA_AGC_CAPT_BF_MSK (0x00000001)
#define DTS_ATSA_AGC_CAPT_ATSA_AGC_CAPT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_FAULT_STAT register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_fault_stat
  * atsa_fault_stat
  */

typedef union {
  struct {
    uint32_t FAULT_SENSOR_NUMBER : 3;
    ///< This register contains the ATSA Fault Sensor Number, only valid when
    ///< the fault_indicator = 1.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FAULT_INDICATOR : 1;
    ///< This register contains the ATSA Fault Indicator (1 = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_fault_stat_reg_t;

#define DTS_ATSA_FAULT_STAT_DEFAULT (0x00000000U)
#define DTS_ATSA_FAULT_STAT_RD_MASK (0x0000000fU)
#define DTS_ATSA_FAULT_STAT_WR_MASK (0x00000000U)


///< This register contains the ATSA Fault Sensor Number, only valid when
///< the fault_indicator = 1.
#define DTS_ATSA_FAULT_STAT_FAULT_SENSOR_NUMBER_BF_OFF ( 0)
#define DTS_ATSA_FAULT_STAT_FAULT_SENSOR_NUMBER_BF_WID ( 3)
#define DTS_ATSA_FAULT_STAT_FAULT_SENSOR_NUMBER_BF_MSK (0x00000007)
#define DTS_ATSA_FAULT_STAT_FAULT_SENSOR_NUMBER_BF_DEF (0x00000000)

///< This register contains the ATSA Fault Indicator (1 = active, 0 = inactive).
#define DTS_ATSA_FAULT_STAT_FAULT_INDICATOR_BF_OFF ( 3)
#define DTS_ATSA_FAULT_STAT_FAULT_INDICATOR_BF_WID ( 1)
#define DTS_ATSA_FAULT_STAT_FAULT_INDICATOR_BF_MSK (0x00000008)
#define DTS_ATSA_FAULT_STAT_FAULT_INDICATOR_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_INT_STATUS register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_int_status
  * dts_mon_int_status
  */

typedef union {
  struct {
    uint32_t INT_STATUS_DTS0 : 1;
    ///< This register contains the DTS Interrupt Status for DTS 0 (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t INT_STATUS_DTS1 : 1;
    ///< This register contains the DTS Interrupt Status for DTS 1 (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t INT_STATUS_DTS2 : 1;
    ///< This register contains the DTS Interrupt Status for DTS 2 (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t INT_STATUS_DTS3 : 1;
    ///< This register contains the DTS Interrupt Status for DTS 3 (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t INT_STATUS_DTS4 : 1;
    ///< This register contains the DTS Interrupt Status for DTS 4 (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t INT_STATUS_DTS5 : 1;
    ///< This register contains the DTS Interrupt Status for DTS 5 (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t INT_STATUS_ADC : 1;
    ///< This register contains the ATSA ADC Interrupt Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t INT_STATUS_DAC : 1;
    ///< This register contains the ATSA DAC Interrupt Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t INT_STATUS_AGC : 1;
    ///< This register contains the ATSA AGC Interrupt Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t INT_STATUS_FAULT : 1;
    ///< This register contains the ATSA Fault Interrupt Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_int_stat_reg_t;

#define DTS_MON_INT_STAT_DEFAULT (0x00000000U)
#define DTS_MON_INT_STAT_RD_MASK (0x000003ffU)
#define DTS_MON_INT_STAT_WR_MASK (0x00000000U)


///< This register contains the DTS Interrupt Status for DTS 0 (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DTS0_BF_OFF ( 0)
#define DTS_MON_INT_STAT_INT_STAT_DTS0_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS0_BF_MSK (0x00000001)
#define DTS_MON_INT_STAT_INT_STAT_DTS0_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Status for DTS 1 (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DTS1_BF_OFF ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS1_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS1_BF_MSK (0x00000002)
#define DTS_MON_INT_STAT_INT_STAT_DTS1_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Status for DTS 2 (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DTS2_BF_OFF ( 2)
#define DTS_MON_INT_STAT_INT_STAT_DTS2_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS2_BF_MSK (0x00000004)
#define DTS_MON_INT_STAT_INT_STAT_DTS2_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Status for DTS 3 (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DTS3_BF_OFF ( 3)
#define DTS_MON_INT_STAT_INT_STAT_DTS3_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS3_BF_MSK (0x00000008)
#define DTS_MON_INT_STAT_INT_STAT_DTS3_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Status for DTS 4 (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DTS4_BF_OFF ( 4)
#define DTS_MON_INT_STAT_INT_STAT_DTS4_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS4_BF_MSK (0x00000010)
#define DTS_MON_INT_STAT_INT_STAT_DTS4_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Status for DTS 5 (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DTS5_BF_OFF ( 5)
#define DTS_MON_INT_STAT_INT_STAT_DTS5_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DTS5_BF_MSK (0x00000020)
#define DTS_MON_INT_STAT_INT_STAT_DTS5_BF_DEF (0x00000000)

///< This register contains the ATSA ADC Interrupt Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_ADC_BF_OFF ( 6)
#define DTS_MON_INT_STAT_INT_STAT_ADC_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_ADC_BF_MSK (0x00000040)
#define DTS_MON_INT_STAT_INT_STAT_ADC_BF_DEF (0x00000000)

///< This register contains the ATSA DAC Interrupt Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_DAC_BF_OFF ( 7)
#define DTS_MON_INT_STAT_INT_STAT_DAC_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_DAC_BF_MSK (0x00000080)
#define DTS_MON_INT_STAT_INT_STAT_DAC_BF_DEF (0x00000000)

///< This register contains the ATSA AGC Interrupt Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_AGC_BF_OFF ( 8)
#define DTS_MON_INT_STAT_INT_STAT_AGC_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_AGC_BF_MSK (0x00000100)
#define DTS_MON_INT_STAT_INT_STAT_AGC_BF_DEF (0x00000000)

///< This register contains the ATSA Fault Interrupt Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_STAT_INT_STAT_FAULT_BF_OFF ( 9)
#define DTS_MON_INT_STAT_INT_STAT_FAULT_BF_WID ( 1)
#define DTS_MON_INT_STAT_INT_STAT_FAULT_BF_MSK (0x00000200)
#define DTS_MON_INT_STAT_INT_STAT_FAULT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_INT_ENABLE register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_int_enable
  * dts_mon_int_enable
  */

typedef union {
  struct {
    uint32_t INT_ENABLE_DTS0 : 1;
    ///< This register contains the DTS Interrupt Enable for DTS 0 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INT_ENABLE_DTS1 : 1;
    ///< This register contains the DTS Interrupt Enable for DTS 1 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INT_ENABLE_DTS2 : 1;
    ///< This register contains the DTS Interrupt Enable for DTS 2 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INT_ENABLE_DTS3 : 1;
    ///< This register contains the DTS Interrupt Enable for DTS 3 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t INT_ENABLE_DTS4 : 1;
    ///< This register contains the DTS Interrupt Enable for DTS 4 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INT_ENABLE_DTS5 : 1;
    ///< This register contains the DTS Interrupt Enable for DTS 5 (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INT_ENABLE_ADC : 1;
    ///< This register contains the ATSA ADC Interrupt Enable (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INT_ENABLE_DAC : 1;
    ///< This register contains the ATSA DAC Interrupt Enable (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INT_ENABLE_AGC : 1;
    ///< This register contains the ATSA AGC Interrupt Enable (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INT_ENABLE_FAULT : 1;
    ///< This register contains the ATSA Fault Interrupt Enable (1 = enable,
    ///< 0 = disable).
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_int_en_reg_t;

#define DTS_MON_INT_EN_DEFAULT (0x00000000U)
#define DTS_MON_INT_EN_RD_MASK (0x000003ffU)
#define DTS_MON_INT_EN_WR_MASK (0x000003ffU)


///< This register contains the DTS Interrupt Enable for DTS 0 (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DTS0_BF_OFF ( 0)
#define DTS_MON_INT_EN_INT_EN_DTS0_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS0_BF_MSK (0x00000001)
#define DTS_MON_INT_EN_INT_EN_DTS0_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Enable for DTS 1 (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DTS1_BF_OFF ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS1_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS1_BF_MSK (0x00000002)
#define DTS_MON_INT_EN_INT_EN_DTS1_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Enable for DTS 2 (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DTS2_BF_OFF ( 2)
#define DTS_MON_INT_EN_INT_EN_DTS2_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS2_BF_MSK (0x00000004)
#define DTS_MON_INT_EN_INT_EN_DTS2_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Enable for DTS 3 (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DTS3_BF_OFF ( 3)
#define DTS_MON_INT_EN_INT_EN_DTS3_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS3_BF_MSK (0x00000008)
#define DTS_MON_INT_EN_INT_EN_DTS3_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Enable for DTS 4 (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DTS4_BF_OFF ( 4)
#define DTS_MON_INT_EN_INT_EN_DTS4_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS4_BF_MSK (0x00000010)
#define DTS_MON_INT_EN_INT_EN_DTS4_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Enable for DTS 5 (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DTS5_BF_OFF ( 5)
#define DTS_MON_INT_EN_INT_EN_DTS5_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DTS5_BF_MSK (0x00000020)
#define DTS_MON_INT_EN_INT_EN_DTS5_BF_DEF (0x00000000)

///< This register contains the ATSA ADC Interrupt Enable (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_ADC_BF_OFF ( 6)
#define DTS_MON_INT_EN_INT_EN_ADC_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_ADC_BF_MSK (0x00000040)
#define DTS_MON_INT_EN_INT_EN_ADC_BF_DEF (0x00000000)

///< This register contains the ATSA DAC Interrupt Enable (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_DAC_BF_OFF ( 7)
#define DTS_MON_INT_EN_INT_EN_DAC_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_DAC_BF_MSK (0x00000080)
#define DTS_MON_INT_EN_INT_EN_DAC_BF_DEF (0x00000000)

///< This register contains the ATSA AGC Interrupt Enable (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_AGC_BF_OFF ( 8)
#define DTS_MON_INT_EN_INT_EN_AGC_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_AGC_BF_MSK (0x00000100)
#define DTS_MON_INT_EN_INT_EN_AGC_BF_DEF (0x00000000)

///< This register contains the ATSA Fault Interrupt Enable (1 = enable,
///< 0 = disable).
#define DTS_MON_INT_EN_INT_EN_FAULT_BF_OFF ( 9)
#define DTS_MON_INT_EN_INT_EN_FAULT_BF_WID ( 1)
#define DTS_MON_INT_EN_INT_EN_FAULT_BF_MSK (0x00000200)
#define DTS_MON_INT_EN_INT_EN_FAULT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_INT_CLEAR register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_int_clear
  * dts_mon_int_clear
  */

typedef union {
  struct {
    uint32_t INT_CLEAR_DTS0 : 1;
    ///< This register contains the DTS Interrupt Clear for DTS 0 (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INT_CLEAR_DTS1 : 1;
    ///< This register contains the DTS Interrupt Clear for DTS 1 (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INT_CLEAR_DTS2 : 1;
    ///< This register contains the DTS Interrupt Clear for DTS 2 (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INT_CLEAR_DTS3 : 1;
    ///< This register contains the DTS Interrupt Clear for DTS 3 (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t INT_CLEAR_DTS4 : 1;
    ///< This register contains the DTS Interrupt Clear for DTS 4 (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INT_CLEAR_DTS5 : 1;
    ///< This register contains the DTS Interrupt Clear for DTS 5 (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INT_CLEAR_ADC : 1;
    ///< This register contains the ATSA ADC Interrupt Clear (1 = clear, 0
    ///< = no clear).
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INT_CLEAR_DAC : 1;
    ///< This register contains the ATSA DAC Interrupt Clear (1 = clear, 0
    ///< = no clear).
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INT_CLEAR_AGC : 1;
    ///< This register contains the ATSA AGC Interrupt Clear (1 = clear, 0
    ///< = no clear).
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INT_CLEAR_FAULT : 1;
    ///< This register contains the ATSA Fault Interrupt Clear (1 = clear,
    ///< 0 = no clear).
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_int_clr_reg_t;

#define DTS_MON_INT_CLR_DEFAULT (0x00000000U)
#define DTS_MON_INT_CLR_RD_MASK (0x000003ffU)
#define DTS_MON_INT_CLR_WR_MASK (0x000003ffU)


///< This register contains the DTS Interrupt Clear for DTS 0 (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DTS0_BF_OFF ( 0)
#define DTS_MON_INT_CLR_INT_CLR_DTS0_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS0_BF_MSK (0x00000001)
#define DTS_MON_INT_CLR_INT_CLR_DTS0_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Clear for DTS 1 (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DTS1_BF_OFF ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS1_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS1_BF_MSK (0x00000002)
#define DTS_MON_INT_CLR_INT_CLR_DTS1_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Clear for DTS 2 (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DTS2_BF_OFF ( 2)
#define DTS_MON_INT_CLR_INT_CLR_DTS2_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS2_BF_MSK (0x00000004)
#define DTS_MON_INT_CLR_INT_CLR_DTS2_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Clear for DTS 3 (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DTS3_BF_OFF ( 3)
#define DTS_MON_INT_CLR_INT_CLR_DTS3_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS3_BF_MSK (0x00000008)
#define DTS_MON_INT_CLR_INT_CLR_DTS3_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Clear for DTS 4 (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DTS4_BF_OFF ( 4)
#define DTS_MON_INT_CLR_INT_CLR_DTS4_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS4_BF_MSK (0x00000010)
#define DTS_MON_INT_CLR_INT_CLR_DTS4_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Clear for DTS 5 (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DTS5_BF_OFF ( 5)
#define DTS_MON_INT_CLR_INT_CLR_DTS5_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DTS5_BF_MSK (0x00000020)
#define DTS_MON_INT_CLR_INT_CLR_DTS5_BF_DEF (0x00000000)

///< This register contains the ATSA ADC Interrupt Clear (1 = clear, 0
///< = no clear).
#define DTS_MON_INT_CLR_INT_CLR_ADC_BF_OFF ( 6)
#define DTS_MON_INT_CLR_INT_CLR_ADC_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_ADC_BF_MSK (0x00000040)
#define DTS_MON_INT_CLR_INT_CLR_ADC_BF_DEF (0x00000000)

///< This register contains the ATSA DAC Interrupt Clear (1 = clear, 0
///< = no clear).
#define DTS_MON_INT_CLR_INT_CLR_DAC_BF_OFF ( 7)
#define DTS_MON_INT_CLR_INT_CLR_DAC_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_DAC_BF_MSK (0x00000080)
#define DTS_MON_INT_CLR_INT_CLR_DAC_BF_DEF (0x00000000)

///< This register contains the ATSA AGC Interrupt Clear (1 = clear, 0
///< = no clear).
#define DTS_MON_INT_CLR_INT_CLR_AGC_BF_OFF ( 8)
#define DTS_MON_INT_CLR_INT_CLR_AGC_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_AGC_BF_MSK (0x00000100)
#define DTS_MON_INT_CLR_INT_CLR_AGC_BF_DEF (0x00000000)

///< This register contains the ATSA Fault Interrupt Clear (1 = clear,
///< 0 = no clear).
#define DTS_MON_INT_CLR_INT_CLR_FAULT_BF_OFF ( 9)
#define DTS_MON_INT_CLR_INT_CLR_FAULT_BF_WID ( 1)
#define DTS_MON_INT_CLR_INT_CLR_FAULT_BF_MSK (0x00000200)
#define DTS_MON_INT_CLR_INT_CLR_FAULT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_INT_FORCE register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_int_force
  * dts_mon_int_force
  */

typedef union {
  struct {
    uint32_t INT_FORCE_DTS0 : 1;
    ///< This register contains the DTS Interrupt Force for DTS 0 (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t INT_FORCE_DTS1 : 1;
    ///< This register contains the DTS Interrupt Force for DTS 1 (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INT_FORCE_DTS2 : 1;
    ///< This register contains the DTS Interrupt Force for DTS 2 (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INT_FORCE_DTS3 : 1;
    ///< This register contains the DTS Interrupt Force for DTS 3 (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t INT_FORCE_DTS4 : 1;
    ///< This register contains the DTS Interrupt Force for DTS 4 (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t INT_FORCE_DTS5 : 1;
    ///< This register contains the DTS Interrupt Force for DTS 5 (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INT_FORCE_ADC : 1;
    ///< This register contains the ATSA ADC Interrupt Force (1 = force, 0
    ///< = no force).
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INT_FORCE_DAC : 1;
    ///< This register contains the ATSA DAC Interrupt Force (1 = force, 0
    ///< = no force).
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INT_FORCE_AGC : 1;
    ///< This register contains the ATSA AGC Interrupt Force (1 = force, 0
    ///< = no force).
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INT_FORCE_FAULT : 1;
    ///< This register contains the ATSA Fault Interrupt Force (1 = force,
    ///< 0 = no force).
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_int_force_reg_t;

#define DTS_MON_INT_FORCE_DEFAULT (0x00000000U)
#define DTS_MON_INT_FORCE_RD_MASK (0x000003ffU)
#define DTS_MON_INT_FORCE_WR_MASK (0x000003ffU)


///< This register contains the DTS Interrupt Force for DTS 0 (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DTS0_BF_OFF ( 0)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS0_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS0_BF_MSK (0x00000001)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS0_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Force for DTS 1 (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DTS1_BF_OFF ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS1_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS1_BF_MSK (0x00000002)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS1_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Force for DTS 2 (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DTS2_BF_OFF ( 2)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS2_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS2_BF_MSK (0x00000004)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS2_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Force for DTS 3 (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DTS3_BF_OFF ( 3)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS3_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS3_BF_MSK (0x00000008)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS3_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Force for DTS 4 (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DTS4_BF_OFF ( 4)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS4_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS4_BF_MSK (0x00000010)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS4_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Force for DTS 5 (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DTS5_BF_OFF ( 5)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS5_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS5_BF_MSK (0x00000020)
#define DTS_MON_INT_FORCE_INT_FORCE_DTS5_BF_DEF (0x00000000)

///< This register contains the ATSA ADC Interrupt Force (1 = force, 0
///< = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_ADC_BF_OFF ( 6)
#define DTS_MON_INT_FORCE_INT_FORCE_ADC_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_ADC_BF_MSK (0x00000040)
#define DTS_MON_INT_FORCE_INT_FORCE_ADC_BF_DEF (0x00000000)

///< This register contains the ATSA DAC Interrupt Force (1 = force, 0
///< = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_DAC_BF_OFF ( 7)
#define DTS_MON_INT_FORCE_INT_FORCE_DAC_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_DAC_BF_MSK (0x00000080)
#define DTS_MON_INT_FORCE_INT_FORCE_DAC_BF_DEF (0x00000000)

///< This register contains the ATSA AGC Interrupt Force (1 = force, 0
///< = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_AGC_BF_OFF ( 8)
#define DTS_MON_INT_FORCE_INT_FORCE_AGC_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_AGC_BF_MSK (0x00000100)
#define DTS_MON_INT_FORCE_INT_FORCE_AGC_BF_DEF (0x00000000)

///< This register contains the ATSA Fault Interrupt Force (1 = force,
///< 0 = no force).
#define DTS_MON_INT_FORCE_INT_FORCE_FAULT_BF_OFF ( 9)
#define DTS_MON_INT_FORCE_INT_FORCE_FAULT_BF_WID ( 1)
#define DTS_MON_INT_FORCE_INT_FORCE_FAULT_BF_MSK (0x00000200)
#define DTS_MON_INT_FORCE_INT_FORCE_FAULT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_INT_MASKED_STAT register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_int_masked_stat
  * dts_mon_int_masked_stat
  */

typedef union {
  struct {
    uint32_t INT_MASKED_STAT_DTS0 : 1;
    ///< This register contains the DTS Interrupt Masked Status for DTS 0 (1
    ///< = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_DTS1 : 1;
    ///< This register contains the DTS Interrupt Masked Status for DTS 1 (1
    ///< = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_DTS2 : 1;
    ///< This register contains the DTS Interrupt Masked Status for DTS 2 (1
    ///< = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_DTS3 : 1;
    ///< This register contains the DTS Interrupt Masked Status for DTS 3 (1
    ///< = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_DTS4 : 1;
    ///< This register contains the DTS Interrupt Masked Status for DTS 4 (1
    ///< = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_DTS5 : 1;
    ///< This register contains the DTS Interrupt Masked Status for DTS 5 (1
    ///< = active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_ADC : 1;
    ///< This register contains the ATSA ADC Interrupt Masked Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_DAC : 1;
    ///< This register contains the ATSA DAC Interrupt Masked Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_AGC : 1;
    ///< This register contains the ATSA AGC Interrupt Masked Status (1 = active,
    ///< 0 = inactive).
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t INT_MASKED_STAT_FAULT : 1;
    ///< This register contains the ATSA Fault Interrupt Masked Status (1 =
    ///< active, 0 = inactive).
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_int_masked_stat_reg_t;

#define DTS_MON_INT_MASKED_STAT_DEFAULT (0x00000000U)
#define DTS_MON_INT_MASKED_STAT_RD_MASK (0x000003ffU)
#define DTS_MON_INT_MASKED_STAT_WR_MASK (0x00000000U)


///< This register contains the DTS Interrupt Masked Status for DTS 0 (1
///< = active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS0_BF_OFF ( 0)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS0_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS0_BF_MSK (0x00000001)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS0_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Masked Status for DTS 1 (1
///< = active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS1_BF_OFF ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS1_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS1_BF_MSK (0x00000002)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS1_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Masked Status for DTS 2 (1
///< = active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS2_BF_OFF ( 2)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS2_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS2_BF_MSK (0x00000004)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS2_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Masked Status for DTS 3 (1
///< = active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS3_BF_OFF ( 3)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS3_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS3_BF_MSK (0x00000008)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS3_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Masked Status for DTS 4 (1
///< = active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS4_BF_OFF ( 4)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS4_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS4_BF_MSK (0x00000010)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS4_BF_DEF (0x00000000)

///< This register contains the DTS Interrupt Masked Status for DTS 5 (1
///< = active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS5_BF_OFF ( 5)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS5_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS5_BF_MSK (0x00000020)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DTS5_BF_DEF (0x00000000)

///< This register contains the ATSA ADC Interrupt Masked Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_ADC_BF_OFF ( 6)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_ADC_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_ADC_BF_MSK (0x00000040)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_ADC_BF_DEF (0x00000000)

///< This register contains the ATSA DAC Interrupt Masked Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DAC_BF_OFF ( 7)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DAC_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DAC_BF_MSK (0x00000080)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_DAC_BF_DEF (0x00000000)

///< This register contains the ATSA AGC Interrupt Masked Status (1 = active,
///< 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_AGC_BF_OFF ( 8)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_AGC_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_AGC_BF_MSK (0x00000100)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_AGC_BF_DEF (0x00000000)

///< This register contains the ATSA Fault Interrupt Masked Status (1 =
///< active, 0 = inactive).
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_FAULT_BF_OFF ( 9)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_FAULT_BF_WID ( 1)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_FAULT_BF_MSK (0x00000200)
#define DTS_MON_INT_MASKED_STAT_INT_MASKED_STAT_FAULT_BF_DEF (0x00000000)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_ADC_UL[8] register description at address offset 0x200
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_adc_ul
  * atsa_adc_ul
  */

typedef union {
  struct {
    uint32_t ADC_UL : 9;
    ///< This register contains ATSA Upper Limit Delta Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_adc_ul_reg_t;

#define DTS_ATSA_ADC_UL_DEFAULT (0x000001ffU)
#define DTS_ATSA_ADC_UL_RD_MASK (0x000001ffU)
#define DTS_ATSA_ADC_UL_WR_MASK (0x000001ffU)


///< This register contains ATSA Upper Limit Delta Value
#define DTS_ATSA_ADC_UL_ADC_UL_BF_OFF ( 0)
#define DTS_ATSA_ADC_UL_ADC_UL_BF_WID ( 9)
#define DTS_ATSA_ADC_UL_ADC_UL_BF_MSK (0x000001FF)
#define DTS_ATSA_ADC_UL_ADC_UL_BF_DEF (0x000001FF)
#define DTS_ATSA_ADC_UL_ARR_SZ0 (8)
#define DTS_ATSA_ADC_UL_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_ADC_LL[8] register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_adc_ll
  * atsa_adc_ll
  */

typedef union {
  struct {
    uint32_t ADC_LL : 9;
    ///< This register contains ATSA Lower Limit Delta Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_adc_ll_reg_t;

#define DTS_ATSA_ADC_LL_DEFAULT (0x00000000U)
#define DTS_ATSA_ADC_LL_RD_MASK (0x000001ffU)
#define DTS_ATSA_ADC_LL_WR_MASK (0x000001ffU)


///< This register contains ATSA Lower Limit Delta Value
#define DTS_ATSA_ADC_LL_ADC_LL_BF_OFF ( 0)
#define DTS_ATSA_ADC_LL_ADC_LL_BF_WID ( 9)
#define DTS_ATSA_ADC_LL_ADC_LL_BF_MSK (0x000001FF)
#define DTS_ATSA_ADC_LL_ADC_LL_BF_DEF (0x00000000)
#define DTS_ATSA_ADC_LL_ARR_SZ0 (8)
#define DTS_ATSA_ADC_LL_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_DAC_UL[8] register description at address offset 0x240
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_dac_ul
  * atsa_adc_ul
  */

typedef union {
  struct {
    uint32_t DAC_UL : 9;
    ///< This register contains ATSA Upper Limit Delta Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_dac_ul_reg_t;

#define DTS_ATSA_DAC_UL_DEFAULT (0x000001ffU)
#define DTS_ATSA_DAC_UL_RD_MASK (0x000001ffU)
#define DTS_ATSA_DAC_UL_WR_MASK (0x000001ffU)


///< This register contains ATSA Upper Limit Delta Value
#define DTS_ATSA_DAC_UL_DAC_UL_BF_OFF ( 0)
#define DTS_ATSA_DAC_UL_DAC_UL_BF_WID ( 9)
#define DTS_ATSA_DAC_UL_DAC_UL_BF_MSK (0x000001FF)
#define DTS_ATSA_DAC_UL_DAC_UL_BF_DEF (0x000001FF)
#define DTS_ATSA_DAC_UL_ARR_SZ0 (8)
#define DTS_ATSA_DAC_UL_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_DAC_LL[8] register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_dac_ll
  * atsa_adc_ll
  */

typedef union {
  struct {
    uint32_t DAC_LL : 9;
    ///< This register contains ATSA Lower Limit Delta Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_dac_ll_reg_t;

#define DTS_ATSA_DAC_LL_DEFAULT (0x00000000U)
#define DTS_ATSA_DAC_LL_RD_MASK (0x000001ffU)
#define DTS_ATSA_DAC_LL_WR_MASK (0x000001ffU)


///< This register contains ATSA Lower Limit Delta Value
#define DTS_ATSA_DAC_LL_DAC_LL_BF_OFF ( 0)
#define DTS_ATSA_DAC_LL_DAC_LL_BF_WID ( 9)
#define DTS_ATSA_DAC_LL_DAC_LL_BF_MSK (0x000001FF)
#define DTS_ATSA_DAC_LL_DAC_LL_BF_DEF (0x00000000)
#define DTS_ATSA_DAC_LL_ARR_SZ0 (8)
#define DTS_ATSA_DAC_LL_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_AGC_UL[8] register description at address offset 0x280
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_agc_ul
  * atsa_adc_ul
  */

typedef union {
  struct {
    uint32_t AGC_UL : 9;
    ///< This register contains ATSA Upper Limit Delta Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_agc_ul_reg_t;

#define DTS_ATSA_AGC_UL_DEFAULT (0x000001ffU)
#define DTS_ATSA_AGC_UL_RD_MASK (0x000001ffU)
#define DTS_ATSA_AGC_UL_WR_MASK (0x000001ffU)


///< This register contains ATSA Upper Limit Delta Value
#define DTS_ATSA_AGC_UL_AGC_UL_BF_OFF ( 0)
#define DTS_ATSA_AGC_UL_AGC_UL_BF_WID ( 9)
#define DTS_ATSA_AGC_UL_AGC_UL_BF_MSK (0x000001FF)
#define DTS_ATSA_AGC_UL_AGC_UL_BF_DEF (0x000001FF)
#define DTS_ATSA_AGC_UL_ARR_SZ0 (8)
#define DTS_ATSA_AGC_UL_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_AGC_LL[8] register description at address offset 0x2a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_agc_ll
  * atsa_adc_ll
  */

typedef union {
  struct {
    uint32_t AGC_LL : 9;
    ///< This register contains ATSA Lower Limit Delta Value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_agc_ll_reg_t;

#define DTS_ATSA_AGC_LL_DEFAULT (0x00000000U)
#define DTS_ATSA_AGC_LL_RD_MASK (0x000001ffU)
#define DTS_ATSA_AGC_LL_WR_MASK (0x000001ffU)


///< This register contains ATSA Lower Limit Delta Value
#define DTS_ATSA_AGC_LL_AGC_LL_BF_OFF ( 0)
#define DTS_ATSA_AGC_LL_AGC_LL_BF_WID ( 9)
#define DTS_ATSA_AGC_LL_AGC_LL_BF_MSK (0x000001FF)
#define DTS_ATSA_AGC_LL_AGC_LL_BF_DEF (0x00000000)
#define DTS_ATSA_AGC_LL_ARR_SZ0 (8)
#define DTS_ATSA_AGC_LL_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_ATSA_SENSOR[8] register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/atsa_sensor
  * atsa_sensor
  */

typedef union {
  struct {
    uint32_t SENSOR_DIODE : 4;
    ///< This register contains ATSA Sensor Diode Selection
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SENSOR_DTS : 5;
    ///< This register contains ATSA Sensor DTS Selection
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SENSOR_EN : 1;
    ///< This register contains ATSA Sensor Selection Enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_atsa_sensor_reg_t;

#define DTS_ATSA_SENSOR_DEFAULT (0x00000000U)
#define DTS_ATSA_SENSOR_RD_MASK (0x000003ffU)
#define DTS_ATSA_SENSOR_WR_MASK (0x000003ffU)


///< This register contains ATSA Sensor Diode Selection
#define DTS_ATSA_SENSOR_DIODE_BF_OFF ( 0)
#define DTS_ATSA_SENSOR_DIODE_BF_WID ( 4)
#define DTS_ATSA_SENSOR_DIODE_BF_MSK (0x0000000F)
#define DTS_ATSA_SENSOR_DIODE_BF_DEF (0x00000000)

///< This register contains ATSA Sensor DTS Selection
#define DTS_ATSA_SENSOR_DTS_BF_OFF ( 4)
#define DTS_ATSA_SENSOR_DTS_BF_WID ( 5)
#define DTS_ATSA_SENSOR_DTS_BF_MSK (0x000001F0)
#define DTS_ATSA_SENSOR_DTS_BF_DEF (0x00000000)

///< This register contains ATSA Sensor Selection Enable
#define DTS_ATSA_SENSOR_EN_BF_OFF ( 9)
#define DTS_ATSA_SENSOR_EN_BF_WID ( 1)
#define DTS_ATSA_SENSOR_EN_BF_MSK (0x00000200)
#define DTS_ATSA_SENSOR_EN_BF_DEF (0x00000000)
#define DTS_ATSA_SENSOR_ARR_SZ0 (8)
#define DTS_ATSA_SENSOR_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_THRESHOLD0[16] register description at address offset 0x800
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_threshold0
  * dts_mon_threshold
  */

typedef union {
  struct {
    uint32_t TEMP_THRESHOLD : 9;
    ///< This register contains the data for the DTS Remote Diode Threshold
    ///< data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_tshold0_reg_t;

#define DTS_MON_TSHOLD0_DEFAULT (0x000001ffU)
#define DTS_MON_TSHOLD0_RD_MASK (0x000001ffU)
#define DTS_MON_TSHOLD0_WR_MASK (0x000001ffU)


///< This register contains the data for the DTS Remote Diode Threshold
///< data
#define DTS_MON_TSHOLD0_TEMP_TSHOLD_BF_OFF ( 0)
#define DTS_MON_TSHOLD0_TEMP_TSHOLD_BF_WID ( 9)
#define DTS_MON_TSHOLD0_TEMP_TSHOLD_BF_MSK (0x000001FF)
#define DTS_MON_TSHOLD0_TEMP_TSHOLD_BF_DEF (0x000001FF)
#define DTS_MON_TSHOLD0_ARR_SZ0 (16)
#define DTS_MON_TSHOLD0_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_THRESHOLD1[16] register description at address offset 0x840
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_threshold1
  * dts_mon_threshold
  */

typedef union {
  struct {
    uint32_t TEMP_THRESHOLD : 9;
    ///< This register contains the data for the DTS Remote Diode Threshold
    ///< data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_tshold1_reg_t;

#define DTS_MON_TSHOLD1_DEFAULT (0x000001ffU)
#define DTS_MON_TSHOLD1_RD_MASK (0x000001ffU)
#define DTS_MON_TSHOLD1_WR_MASK (0x000001ffU)


///< This register contains the data for the DTS Remote Diode Threshold
///< data
#define DTS_MON_TSHOLD1_TEMP_TSHOLD_BF_OFF ( 0)
#define DTS_MON_TSHOLD1_TEMP_TSHOLD_BF_WID ( 9)
#define DTS_MON_TSHOLD1_TEMP_TSHOLD_BF_MSK (0x000001FF)
#define DTS_MON_TSHOLD1_TEMP_TSHOLD_BF_DEF (0x000001FF)
#define DTS_MON_TSHOLD1_ARR_SZ0 (16)
#define DTS_MON_TSHOLD1_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_THRESHOLD2[16] register description at address offset 0x880
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_threshold2
  * dts_mon_threshold
  */

typedef union {
  struct {
    uint32_t TEMP_THRESHOLD : 9;
    ///< This register contains the data for the DTS Remote Diode Threshold
    ///< data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_tshold2_reg_t;

#define DTS_MON_TSHOLD2_DEFAULT (0x000001ffU)
#define DTS_MON_TSHOLD2_RD_MASK (0x000001ffU)
#define DTS_MON_TSHOLD2_WR_MASK (0x000001ffU)


///< This register contains the data for the DTS Remote Diode Threshold
///< data
#define DTS_MON_TSHOLD2_TEMP_TSHOLD_BF_OFF ( 0)
#define DTS_MON_TSHOLD2_TEMP_TSHOLD_BF_WID ( 9)
#define DTS_MON_TSHOLD2_TEMP_TSHOLD_BF_MSK (0x000001FF)
#define DTS_MON_TSHOLD2_TEMP_TSHOLD_BF_DEF (0x000001FF)
#define DTS_MON_TSHOLD2_ARR_SZ0 (16)
#define DTS_MON_TSHOLD2_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_THRESHOLD3[16] register description at address offset 0x8c0
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_threshold3
  * dts_mon_threshold
  */

typedef union {
  struct {
    uint32_t TEMP_THRESHOLD : 9;
    ///< This register contains the data for the DTS Remote Diode Threshold
    ///< data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_tshold3_reg_t;

#define DTS_MON_TSHOLD3_DEFAULT (0x000001ffU)
#define DTS_MON_TSHOLD3_RD_MASK (0x000001ffU)
#define DTS_MON_TSHOLD3_WR_MASK (0x000001ffU)


///< This register contains the data for the DTS Remote Diode Threshold
///< data
#define DTS_MON_TSHOLD3_TEMP_TSHOLD_BF_OFF ( 0)
#define DTS_MON_TSHOLD3_TEMP_TSHOLD_BF_WID ( 9)
#define DTS_MON_TSHOLD3_TEMP_TSHOLD_BF_MSK (0x000001FF)
#define DTS_MON_TSHOLD3_TEMP_TSHOLD_BF_DEF (0x000001FF)
#define DTS_MON_TSHOLD3_ARR_SZ0 (16)
#define DTS_MON_TSHOLD3_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_THRESHOLD4[16] register description at address offset 0x900
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_threshold4
  * dts_mon_threshold
  */

typedef union {
  struct {
    uint32_t TEMP_THRESHOLD : 9;
    ///< This register contains the data for the DTS Remote Diode Threshold
    ///< data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_tshold4_reg_t;

#define DTS_MON_TSHOLD4_DEFAULT (0x000001ffU)
#define DTS_MON_TSHOLD4_RD_MASK (0x000001ffU)
#define DTS_MON_TSHOLD4_WR_MASK (0x000001ffU)


///< This register contains the data for the DTS Remote Diode Threshold
///< data
#define DTS_MON_TSHOLD4_TEMP_TSHOLD_BF_OFF ( 0)
#define DTS_MON_TSHOLD4_TEMP_TSHOLD_BF_WID ( 9)
#define DTS_MON_TSHOLD4_TEMP_TSHOLD_BF_MSK (0x000001FF)
#define DTS_MON_TSHOLD4_TEMP_TSHOLD_BF_DEF (0x000001FF)
#define DTS_MON_TSHOLD4_ARR_SZ0 (16)
#define DTS_MON_TSHOLD4_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_THRESHOLD5[16] register description at address offset 0x940
  *
  * Register default value:        0x000001FF
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_threshold5
  * dts_mon_threshold
  */

typedef union {
  struct {
    uint32_t TEMP_THRESHOLD : 9;
    ///< This register contains the data for the DTS Remote Diode Threshold
    ///< data
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1FF"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_tshold5_reg_t;

#define DTS_MON_TSHOLD5_DEFAULT (0x000001ffU)
#define DTS_MON_TSHOLD5_RD_MASK (0x000001ffU)
#define DTS_MON_TSHOLD5_WR_MASK (0x000001ffU)


///< This register contains the data for the DTS Remote Diode Threshold
///< data
#define DTS_MON_TSHOLD5_TEMP_TSHOLD_BF_OFF ( 0)
#define DTS_MON_TSHOLD5_TEMP_TSHOLD_BF_WID ( 9)
#define DTS_MON_TSHOLD5_TEMP_TSHOLD_BF_MSK (0x000001FF)
#define DTS_MON_TSHOLD5_TEMP_TSHOLD_BF_DEF (0x000001FF)
#define DTS_MON_TSHOLD5_ARR_SZ0 (16)
#define DTS_MON_TSHOLD5_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TEMPERATURE0[16] register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_temperature0
  * dts_mon_temperature
  */

typedef union {
  struct {
    uint32_t TEMPERATURE : 9;
    ///< This register contains temperature data for the DTS Remote Diode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VALID : 1;
    ///< This register contains the valid bit for the DTS Remote Diode Temperature
    ///< data
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_temp0_reg_t;

#define DTS_MON_TEMP0_DEFAULT (0x00000000U)
#define DTS_MON_TEMP0_RD_MASK (0x000003ffU)
#define DTS_MON_TEMP0_WR_MASK (0x00000000U)


///< This register contains temperature data for the DTS Remote Diode
#define DTS_MON_TEMP0_TEMP_BF_OFF ( 0)
#define DTS_MON_TEMP0_TEMP_BF_WID ( 9)
#define DTS_MON_TEMP0_TEMP_BF_MSK (0x000001FF)
#define DTS_MON_TEMP0_TEMP_BF_DEF (0x00000000)

///< This register contains the valid bit for the DTS Remote Diode Temperature
///< data
#define DTS_MON_TEMP0_VALID_BF_OFF ( 9)
#define DTS_MON_TEMP0_VALID_BF_WID ( 1)
#define DTS_MON_TEMP0_VALID_BF_MSK (0x00000200)
#define DTS_MON_TEMP0_VALID_BF_DEF (0x00000000)
#define DTS_MON_TEMP0_ARR_SZ0 (16)
#define DTS_MON_TEMP0_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TEMPERATURE1[16] register description at address offset 0x1040
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_temperature1
  * dts_mon_temperature
  */

typedef union {
  struct {
    uint32_t TEMPERATURE : 9;
    ///< This register contains temperature data for the DTS Remote Diode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VALID : 1;
    ///< This register contains the valid bit for the DTS Remote Diode Temperature
    ///< data
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_temp1_reg_t;

#define DTS_MON_TEMP1_DEFAULT (0x00000000U)
#define DTS_MON_TEMP1_RD_MASK (0x000003ffU)
#define DTS_MON_TEMP1_WR_MASK (0x00000000U)


///< This register contains temperature data for the DTS Remote Diode
#define DTS_MON_TEMP1_TEMP_BF_OFF ( 0)
#define DTS_MON_TEMP1_TEMP_BF_WID ( 9)
#define DTS_MON_TEMP1_TEMP_BF_MSK (0x000001FF)
#define DTS_MON_TEMP1_TEMP_BF_DEF (0x00000000)

///< This register contains the valid bit for the DTS Remote Diode Temperature
///< data
#define DTS_MON_TEMP1_VALID_BF_OFF ( 9)
#define DTS_MON_TEMP1_VALID_BF_WID ( 1)
#define DTS_MON_TEMP1_VALID_BF_MSK (0x00000200)
#define DTS_MON_TEMP1_VALID_BF_DEF (0x00000000)
#define DTS_MON_TEMP1_ARR_SZ0 (16)
#define DTS_MON_TEMP1_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TEMPERATURE2[16] register description at address offset 0x1080
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_temperature2
  * dts_mon_temperature
  */

typedef union {
  struct {
    uint32_t TEMPERATURE : 9;
    ///< This register contains temperature data for the DTS Remote Diode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VALID : 1;
    ///< This register contains the valid bit for the DTS Remote Diode Temperature
    ///< data
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_temp2_reg_t;

#define DTS_MON_TEMP2_DEFAULT (0x00000000U)
#define DTS_MON_TEMP2_RD_MASK (0x000003ffU)
#define DTS_MON_TEMP2_WR_MASK (0x00000000U)


///< This register contains temperature data for the DTS Remote Diode
#define DTS_MON_TEMP2_TEMP_BF_OFF ( 0)
#define DTS_MON_TEMP2_TEMP_BF_WID ( 9)
#define DTS_MON_TEMP2_TEMP_BF_MSK (0x000001FF)
#define DTS_MON_TEMP2_TEMP_BF_DEF (0x00000000)

///< This register contains the valid bit for the DTS Remote Diode Temperature
///< data
#define DTS_MON_TEMP2_VALID_BF_OFF ( 9)
#define DTS_MON_TEMP2_VALID_BF_WID ( 1)
#define DTS_MON_TEMP2_VALID_BF_MSK (0x00000200)
#define DTS_MON_TEMP2_VALID_BF_DEF (0x00000000)
#define DTS_MON_TEMP2_ARR_SZ0 (16)
#define DTS_MON_TEMP2_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TEMPERATURE3[16] register description at address offset 0x10c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_temperature3
  * dts_mon_temperature
  */

typedef union {
  struct {
    uint32_t TEMPERATURE : 9;
    ///< This register contains temperature data for the DTS Remote Diode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VALID : 1;
    ///< This register contains the valid bit for the DTS Remote Diode Temperature
    ///< data
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_temp3_reg_t;

#define DTS_MON_TEMP3_DEFAULT (0x00000000U)
#define DTS_MON_TEMP3_RD_MASK (0x000003ffU)
#define DTS_MON_TEMP3_WR_MASK (0x00000000U)


///< This register contains temperature data for the DTS Remote Diode
#define DTS_MON_TEMP3_TEMP_BF_OFF ( 0)
#define DTS_MON_TEMP3_TEMP_BF_WID ( 9)
#define DTS_MON_TEMP3_TEMP_BF_MSK (0x000001FF)
#define DTS_MON_TEMP3_TEMP_BF_DEF (0x00000000)

///< This register contains the valid bit for the DTS Remote Diode Temperature
///< data
#define DTS_MON_TEMP3_VALID_BF_OFF ( 9)
#define DTS_MON_TEMP3_VALID_BF_WID ( 1)
#define DTS_MON_TEMP3_VALID_BF_MSK (0x00000200)
#define DTS_MON_TEMP3_VALID_BF_DEF (0x00000000)
#define DTS_MON_TEMP3_ARR_SZ0 (16)
#define DTS_MON_TEMP3_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TEMPERATURE4[16] register description at address offset 0x1100
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_temperature4
  * dts_mon_temperature
  */

typedef union {
  struct {
    uint32_t TEMPERATURE : 9;
    ///< This register contains temperature data for the DTS Remote Diode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VALID : 1;
    ///< This register contains the valid bit for the DTS Remote Diode Temperature
    ///< data
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_temp4_reg_t;

#define DTS_MON_TEMP4_DEFAULT (0x00000000U)
#define DTS_MON_TEMP4_RD_MASK (0x000003ffU)
#define DTS_MON_TEMP4_WR_MASK (0x00000000U)


///< This register contains temperature data for the DTS Remote Diode
#define DTS_MON_TEMP4_TEMP_BF_OFF ( 0)
#define DTS_MON_TEMP4_TEMP_BF_WID ( 9)
#define DTS_MON_TEMP4_TEMP_BF_MSK (0x000001FF)
#define DTS_MON_TEMP4_TEMP_BF_DEF (0x00000000)

///< This register contains the valid bit for the DTS Remote Diode Temperature
///< data
#define DTS_MON_TEMP4_VALID_BF_OFF ( 9)
#define DTS_MON_TEMP4_VALID_BF_WID ( 1)
#define DTS_MON_TEMP4_VALID_BF_MSK (0x00000200)
#define DTS_MON_TEMP4_VALID_BF_DEF (0x00000000)
#define DTS_MON_TEMP4_ARR_SZ0 (16)
#define DTS_MON_TEMP4_ARRAY_STRIDE0 (0x0004)


/** @brief DTS_MONITOR_ABC18A_REG_MAP_MEM_DTS_MONITOR_ABC18A_REG_MAP_DTS_MON_TEMPERATURE5[16] register description at address offset 0x1140
  *
  * Register default value:        0x00000000
  * Register full path in IP: dts_monitor_abc18a_reg_map_MEM/dts_monitor_abc18a_reg_map/dts_mon_temperature5
  * dts_mon_temperature
  */

typedef union {
  struct {
    uint32_t TEMPERATURE : 9;
    ///< This register contains temperature data for the DTS Remote Diode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VALID : 1;
    ///< This register contains the valid bit for the DTS Remote Diode Temperature
    ///< data
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} dts_mon_temp5_reg_t;

#define DTS_MON_TEMP5_DEFAULT (0x00000000U)
#define DTS_MON_TEMP5_RD_MASK (0x000003ffU)
#define DTS_MON_TEMP5_WR_MASK (0x00000000U)


///< This register contains temperature data for the DTS Remote Diode
#define DTS_MON_TEMP5_TEMP_BF_OFF ( 0)
#define DTS_MON_TEMP5_TEMP_BF_WID ( 9)
#define DTS_MON_TEMP5_TEMP_BF_MSK (0x000001FF)
#define DTS_MON_TEMP5_TEMP_BF_DEF (0x00000000)

///< This register contains the valid bit for the DTS Remote Diode Temperature
///< data
#define DTS_MON_TEMP5_VALID_BF_OFF ( 9)
#define DTS_MON_TEMP5_VALID_BF_WID ( 1)
#define DTS_MON_TEMP5_VALID_BF_MSK (0x00000200)
#define DTS_MON_TEMP5_VALID_BF_DEF (0x00000000)
#define DTS_MON_TEMP5_ARR_SZ0 (16)
#define DTS_MON_TEMP5_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define DTS_EN_REG ((dts_en_reg_t*) DTS_EN_ADR)
#define DTS_MON_EN_REG ((dts_mon_en_reg_t*) DTS_MON_EN_ADR)
#define DTS_MON_TIMEOUT_CYCLE_REG ((dts_mon_timeout_cycle_reg_t*) DTS_MON_TIMEOUT_CYCLE_ADR)
#define DTS_ATSA_EN_REG ((dts_atsa_en_reg_t*) DTS_ATSA_EN_ADR)
#define DTS_ATSA_ADC_CAPT_REG ((dts_atsa_adc_capt_reg_t*) DTS_ATSA_ADC_CAPT_ADR)
#define DTS_ATSA_DAC_CAPT_REG ((dts_atsa_dac_capt_reg_t*) DTS_ATSA_DAC_CAPT_ADR)
#define DTS_ATSA_AGC_CAPT_REG ((dts_atsa_agc_capt_reg_t*) DTS_ATSA_AGC_CAPT_ADR)
#define DTS_ATSA_FAULT_STAT_REG ((dts_atsa_fault_stat_reg_t*) DTS_ATSA_FAULT_STAT_ADR)
#define DTS_MON_INT_STAT_REG ((dts_mon_int_stat_reg_t*) DTS_MON_INT_STAT_ADR)
#define DTS_MON_INT_EN_REG ((dts_mon_int_en_reg_t*) DTS_MON_INT_EN_ADR)
#define DTS_MON_INT_CLR_REG ((dts_mon_int_clr_reg_t*) DTS_MON_INT_CLR_ADR)
#define DTS_MON_INT_FORCE_REG ((dts_mon_int_force_reg_t*) DTS_MON_INT_FORCE_ADR)
#define DTS_MON_INT_MASKED_STAT_REG ((dts_mon_int_masked_stat_reg_t*) DTS_MON_INT_MASKED_STAT_ADR)
#define DTS_ATSA_ADC_UL0_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL0_ADR)
#define DTS_ATSA_ADC_UL1_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL1_ADR)
#define DTS_ATSA_ADC_UL2_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL2_ADR)
#define DTS_ATSA_ADC_UL3_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL3_ADR)
#define DTS_ATSA_ADC_UL4_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL4_ADR)
#define DTS_ATSA_ADC_UL5_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL5_ADR)
#define DTS_ATSA_ADC_UL6_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL6_ADR)
#define DTS_ATSA_ADC_UL7_REG ((dts_atsa_adc_ul_reg_t*) DTS_ATSA_ADC_UL7_ADR)
#define DTS_ATSA_ADC_LL0_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL0_ADR)
#define DTS_ATSA_ADC_LL1_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL1_ADR)
#define DTS_ATSA_ADC_LL2_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL2_ADR)
#define DTS_ATSA_ADC_LL3_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL3_ADR)
#define DTS_ATSA_ADC_LL4_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL4_ADR)
#define DTS_ATSA_ADC_LL5_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL5_ADR)
#define DTS_ATSA_ADC_LL6_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL6_ADR)
#define DTS_ATSA_ADC_LL7_REG ((dts_atsa_adc_ll_reg_t*) DTS_ATSA_ADC_LL7_ADR)
#define DTS_ATSA_DAC_UL0_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL0_ADR)
#define DTS_ATSA_DAC_UL1_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL1_ADR)
#define DTS_ATSA_DAC_UL2_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL2_ADR)
#define DTS_ATSA_DAC_UL3_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL3_ADR)
#define DTS_ATSA_DAC_UL4_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL4_ADR)
#define DTS_ATSA_DAC_UL5_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL5_ADR)
#define DTS_ATSA_DAC_UL6_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL6_ADR)
#define DTS_ATSA_DAC_UL7_REG ((dts_atsa_dac_ul_reg_t*) DTS_ATSA_DAC_UL7_ADR)
#define DTS_ATSA_DAC_LL0_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL0_ADR)
#define DTS_ATSA_DAC_LL1_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL1_ADR)
#define DTS_ATSA_DAC_LL2_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL2_ADR)
#define DTS_ATSA_DAC_LL3_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL3_ADR)
#define DTS_ATSA_DAC_LL4_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL4_ADR)
#define DTS_ATSA_DAC_LL5_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL5_ADR)
#define DTS_ATSA_DAC_LL6_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL6_ADR)
#define DTS_ATSA_DAC_LL7_REG ((dts_atsa_dac_ll_reg_t*) DTS_ATSA_DAC_LL7_ADR)
#define DTS_ATSA_AGC_UL0_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL0_ADR)
#define DTS_ATSA_AGC_UL1_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL1_ADR)
#define DTS_ATSA_AGC_UL2_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL2_ADR)
#define DTS_ATSA_AGC_UL3_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL3_ADR)
#define DTS_ATSA_AGC_UL4_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL4_ADR)
#define DTS_ATSA_AGC_UL5_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL5_ADR)
#define DTS_ATSA_AGC_UL6_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL6_ADR)
#define DTS_ATSA_AGC_UL7_REG ((dts_atsa_agc_ul_reg_t*) DTS_ATSA_AGC_UL7_ADR)
#define DTS_ATSA_AGC_LL0_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL0_ADR)
#define DTS_ATSA_AGC_LL1_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL1_ADR)
#define DTS_ATSA_AGC_LL2_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL2_ADR)
#define DTS_ATSA_AGC_LL3_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL3_ADR)
#define DTS_ATSA_AGC_LL4_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL4_ADR)
#define DTS_ATSA_AGC_LL5_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL5_ADR)
#define DTS_ATSA_AGC_LL6_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL6_ADR)
#define DTS_ATSA_AGC_LL7_REG ((dts_atsa_agc_ll_reg_t*) DTS_ATSA_AGC_LL7_ADR)
#define DTS_ATSA_SENSOR0_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR0_ADR)
#define DTS_ATSA_SENSOR1_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR1_ADR)
#define DTS_ATSA_SENSOR2_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR2_ADR)
#define DTS_ATSA_SENSOR3_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR3_ADR)
#define DTS_ATSA_SENSOR4_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR4_ADR)
#define DTS_ATSA_SENSOR5_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR5_ADR)
#define DTS_ATSA_SENSOR6_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR6_ADR)
#define DTS_ATSA_SENSOR7_REG ((dts_atsa_sensor_reg_t*) DTS_ATSA_SENSOR7_ADR)
#define DTS_MON_TSHOLD00_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD00_ADR)
#define DTS_MON_TSHOLD01_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD01_ADR)
#define DTS_MON_TSHOLD02_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD02_ADR)
#define DTS_MON_TSHOLD03_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD03_ADR)
#define DTS_MON_TSHOLD04_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD04_ADR)
#define DTS_MON_TSHOLD05_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD05_ADR)
#define DTS_MON_TSHOLD06_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD06_ADR)
#define DTS_MON_TSHOLD07_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD07_ADR)
#define DTS_MON_TSHOLD08_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD08_ADR)
#define DTS_MON_TSHOLD09_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD09_ADR)
#define DTS_MON_TSHOLD010_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD010_ADR)
#define DTS_MON_TSHOLD011_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD011_ADR)
#define DTS_MON_TSHOLD012_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD012_ADR)
#define DTS_MON_TSHOLD013_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD013_ADR)
#define DTS_MON_TSHOLD014_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD014_ADR)
#define DTS_MON_TSHOLD015_REG ((dts_mon_tshold0_reg_t*) DTS_MON_TSHOLD015_ADR)
#define DTS_MON_TSHOLD10_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD10_ADR)
#define DTS_MON_TSHOLD11_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD11_ADR)
#define DTS_MON_TSHOLD12_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD12_ADR)
#define DTS_MON_TSHOLD13_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD13_ADR)
#define DTS_MON_TSHOLD14_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD14_ADR)
#define DTS_MON_TSHOLD15_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD15_ADR)
#define DTS_MON_TSHOLD16_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD16_ADR)
#define DTS_MON_TSHOLD17_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD17_ADR)
#define DTS_MON_TSHOLD18_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD18_ADR)
#define DTS_MON_TSHOLD19_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD19_ADR)
#define DTS_MON_TSHOLD110_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD110_ADR)
#define DTS_MON_TSHOLD111_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD111_ADR)
#define DTS_MON_TSHOLD112_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD112_ADR)
#define DTS_MON_TSHOLD113_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD113_ADR)
#define DTS_MON_TSHOLD114_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD114_ADR)
#define DTS_MON_TSHOLD115_REG ((dts_mon_tshold1_reg_t*) DTS_MON_TSHOLD115_ADR)
#define DTS_MON_TSHOLD20_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD20_ADR)
#define DTS_MON_TSHOLD21_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD21_ADR)
#define DTS_MON_TSHOLD22_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD22_ADR)
#define DTS_MON_TSHOLD23_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD23_ADR)
#define DTS_MON_TSHOLD24_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD24_ADR)
#define DTS_MON_TSHOLD25_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD25_ADR)
#define DTS_MON_TSHOLD26_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD26_ADR)
#define DTS_MON_TSHOLD27_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD27_ADR)
#define DTS_MON_TSHOLD28_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD28_ADR)
#define DTS_MON_TSHOLD29_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD29_ADR)
#define DTS_MON_TSHOLD210_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD210_ADR)
#define DTS_MON_TSHOLD211_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD211_ADR)
#define DTS_MON_TSHOLD212_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD212_ADR)
#define DTS_MON_TSHOLD213_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD213_ADR)
#define DTS_MON_TSHOLD214_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD214_ADR)
#define DTS_MON_TSHOLD215_REG ((dts_mon_tshold2_reg_t*) DTS_MON_TSHOLD215_ADR)
#define DTS_MON_TSHOLD30_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD30_ADR)
#define DTS_MON_TSHOLD31_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD31_ADR)
#define DTS_MON_TSHOLD32_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD32_ADR)
#define DTS_MON_TSHOLD33_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD33_ADR)
#define DTS_MON_TSHOLD34_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD34_ADR)
#define DTS_MON_TSHOLD35_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD35_ADR)
#define DTS_MON_TSHOLD36_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD36_ADR)
#define DTS_MON_TSHOLD37_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD37_ADR)
#define DTS_MON_TSHOLD38_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD38_ADR)
#define DTS_MON_TSHOLD39_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD39_ADR)
#define DTS_MON_TSHOLD310_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD310_ADR)
#define DTS_MON_TSHOLD311_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD311_ADR)
#define DTS_MON_TSHOLD312_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD312_ADR)
#define DTS_MON_TSHOLD313_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD313_ADR)
#define DTS_MON_TSHOLD314_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD314_ADR)
#define DTS_MON_TSHOLD315_REG ((dts_mon_tshold3_reg_t*) DTS_MON_TSHOLD315_ADR)
#define DTS_MON_TSHOLD40_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD40_ADR)
#define DTS_MON_TSHOLD41_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD41_ADR)
#define DTS_MON_TSHOLD42_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD42_ADR)
#define DTS_MON_TSHOLD43_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD43_ADR)
#define DTS_MON_TSHOLD44_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD44_ADR)
#define DTS_MON_TSHOLD45_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD45_ADR)
#define DTS_MON_TSHOLD46_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD46_ADR)
#define DTS_MON_TSHOLD47_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD47_ADR)
#define DTS_MON_TSHOLD48_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD48_ADR)
#define DTS_MON_TSHOLD49_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD49_ADR)
#define DTS_MON_TSHOLD410_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD410_ADR)
#define DTS_MON_TSHOLD411_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD411_ADR)
#define DTS_MON_TSHOLD412_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD412_ADR)
#define DTS_MON_TSHOLD413_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD413_ADR)
#define DTS_MON_TSHOLD414_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD414_ADR)
#define DTS_MON_TSHOLD415_REG ((dts_mon_tshold4_reg_t*) DTS_MON_TSHOLD415_ADR)
#define DTS_MON_TSHOLD50_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD50_ADR)
#define DTS_MON_TSHOLD51_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD51_ADR)
#define DTS_MON_TSHOLD52_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD52_ADR)
#define DTS_MON_TSHOLD53_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD53_ADR)
#define DTS_MON_TSHOLD54_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD54_ADR)
#define DTS_MON_TSHOLD55_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD55_ADR)
#define DTS_MON_TSHOLD56_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD56_ADR)
#define DTS_MON_TSHOLD57_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD57_ADR)
#define DTS_MON_TSHOLD58_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD58_ADR)
#define DTS_MON_TSHOLD59_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD59_ADR)
#define DTS_MON_TSHOLD510_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD510_ADR)
#define DTS_MON_TSHOLD511_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD511_ADR)
#define DTS_MON_TSHOLD512_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD512_ADR)
#define DTS_MON_TSHOLD513_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD513_ADR)
#define DTS_MON_TSHOLD514_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD514_ADR)
#define DTS_MON_TSHOLD515_REG ((dts_mon_tshold5_reg_t*) DTS_MON_TSHOLD515_ADR)
#define DTS_MON_TEMP00_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP00_ADR)
#define DTS_MON_TEMP01_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP01_ADR)
#define DTS_MON_TEMP02_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP02_ADR)
#define DTS_MON_TEMP03_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP03_ADR)
#define DTS_MON_TEMP04_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP04_ADR)
#define DTS_MON_TEMP05_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP05_ADR)
#define DTS_MON_TEMP06_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP06_ADR)
#define DTS_MON_TEMP07_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP07_ADR)
#define DTS_MON_TEMP08_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP08_ADR)
#define DTS_MON_TEMP09_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP09_ADR)
#define DTS_MON_TEMP010_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP010_ADR)
#define DTS_MON_TEMP011_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP011_ADR)
#define DTS_MON_TEMP012_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP012_ADR)
#define DTS_MON_TEMP013_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP013_ADR)
#define DTS_MON_TEMP014_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP014_ADR)
#define DTS_MON_TEMP015_REG ((dts_mon_temp0_reg_t*) DTS_MON_TEMP015_ADR)
#define DTS_MON_TEMP10_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP10_ADR)
#define DTS_MON_TEMP11_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP11_ADR)
#define DTS_MON_TEMP12_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP12_ADR)
#define DTS_MON_TEMP13_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP13_ADR)
#define DTS_MON_TEMP14_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP14_ADR)
#define DTS_MON_TEMP15_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP15_ADR)
#define DTS_MON_TEMP16_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP16_ADR)
#define DTS_MON_TEMP17_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP17_ADR)
#define DTS_MON_TEMP18_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP18_ADR)
#define DTS_MON_TEMP19_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP19_ADR)
#define DTS_MON_TEMP110_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP110_ADR)
#define DTS_MON_TEMP111_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP111_ADR)
#define DTS_MON_TEMP112_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP112_ADR)
#define DTS_MON_TEMP113_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP113_ADR)
#define DTS_MON_TEMP114_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP114_ADR)
#define DTS_MON_TEMP115_REG ((dts_mon_temp1_reg_t*) DTS_MON_TEMP115_ADR)
#define DTS_MON_TEMP20_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP20_ADR)
#define DTS_MON_TEMP21_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP21_ADR)
#define DTS_MON_TEMP22_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP22_ADR)
#define DTS_MON_TEMP23_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP23_ADR)
#define DTS_MON_TEMP24_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP24_ADR)
#define DTS_MON_TEMP25_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP25_ADR)
#define DTS_MON_TEMP26_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP26_ADR)
#define DTS_MON_TEMP27_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP27_ADR)
#define DTS_MON_TEMP28_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP28_ADR)
#define DTS_MON_TEMP29_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP29_ADR)
#define DTS_MON_TEMP210_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP210_ADR)
#define DTS_MON_TEMP211_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP211_ADR)
#define DTS_MON_TEMP212_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP212_ADR)
#define DTS_MON_TEMP213_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP213_ADR)
#define DTS_MON_TEMP214_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP214_ADR)
#define DTS_MON_TEMP215_REG ((dts_mon_temp2_reg_t*) DTS_MON_TEMP215_ADR)
#define DTS_MON_TEMP30_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP30_ADR)
#define DTS_MON_TEMP31_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP31_ADR)
#define DTS_MON_TEMP32_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP32_ADR)
#define DTS_MON_TEMP33_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP33_ADR)
#define DTS_MON_TEMP34_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP34_ADR)
#define DTS_MON_TEMP35_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP35_ADR)
#define DTS_MON_TEMP36_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP36_ADR)
#define DTS_MON_TEMP37_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP37_ADR)
#define DTS_MON_TEMP38_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP38_ADR)
#define DTS_MON_TEMP39_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP39_ADR)
#define DTS_MON_TEMP310_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP310_ADR)
#define DTS_MON_TEMP311_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP311_ADR)
#define DTS_MON_TEMP312_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP312_ADR)
#define DTS_MON_TEMP313_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP313_ADR)
#define DTS_MON_TEMP314_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP314_ADR)
#define DTS_MON_TEMP315_REG ((dts_mon_temp3_reg_t*) DTS_MON_TEMP315_ADR)
#define DTS_MON_TEMP40_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP40_ADR)
#define DTS_MON_TEMP41_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP41_ADR)
#define DTS_MON_TEMP42_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP42_ADR)
#define DTS_MON_TEMP43_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP43_ADR)
#define DTS_MON_TEMP44_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP44_ADR)
#define DTS_MON_TEMP45_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP45_ADR)
#define DTS_MON_TEMP46_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP46_ADR)
#define DTS_MON_TEMP47_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP47_ADR)
#define DTS_MON_TEMP48_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP48_ADR)
#define DTS_MON_TEMP49_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP49_ADR)
#define DTS_MON_TEMP410_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP410_ADR)
#define DTS_MON_TEMP411_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP411_ADR)
#define DTS_MON_TEMP412_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP412_ADR)
#define DTS_MON_TEMP413_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP413_ADR)
#define DTS_MON_TEMP414_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP414_ADR)
#define DTS_MON_TEMP415_REG ((dts_mon_temp4_reg_t*) DTS_MON_TEMP415_ADR)
#define DTS_MON_TEMP50_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP50_ADR)
#define DTS_MON_TEMP51_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP51_ADR)
#define DTS_MON_TEMP52_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP52_ADR)
#define DTS_MON_TEMP53_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP53_ADR)
#define DTS_MON_TEMP54_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP54_ADR)
#define DTS_MON_TEMP55_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP55_ADR)
#define DTS_MON_TEMP56_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP56_ADR)
#define DTS_MON_TEMP57_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP57_ADR)
#define DTS_MON_TEMP58_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP58_ADR)
#define DTS_MON_TEMP59_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP59_ADR)
#define DTS_MON_TEMP510_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP510_ADR)
#define DTS_MON_TEMP511_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP511_ADR)
#define DTS_MON_TEMP512_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP512_ADR)
#define DTS_MON_TEMP513_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP513_ADR)
#define DTS_MON_TEMP514_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP514_ADR)
#define DTS_MON_TEMP515_REG ((dts_mon_temp5_reg_t*) DTS_MON_TEMP515_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    dts_en_reg_t DTS_EN; /*< Address offset = 0x0 */
    dts_mon_en_reg_t DTS_MON_EN; /*< Address offset = 0x4 */
    dts_mon_timeout_cycle_reg_t DTS_MON_TIMEOUT_CYCLE; /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [20];  /*< Address offset = 0xc */
    dts_atsa_en_reg_t ATSA_EN; /*< Address offset = 0x20 */
    dts_atsa_adc_capt_reg_t ATSA_ADC_CAPT; /*< Address offset = 0x24 */
    dts_atsa_dac_capt_reg_t ATSA_DAC_CAPT; /*< Address offset = 0x28 */
    dts_atsa_agc_capt_reg_t ATSA_AGC_CAPT; /*< Address offset = 0x2c */
    dts_atsa_fault_stat_reg_t ATSA_FAULT_STAT; /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x34 */
    dts_mon_int_stat_reg_t DTS_MON_INT_STAT; /*< Address offset = 0x40 */
    dts_mon_int_en_reg_t DTS_MON_INT_EN; /*< Address offset = 0x44 */
    dts_mon_int_clr_reg_t DTS_MON_INT_CLR; /*< Address offset = 0x48 */
    dts_mon_int_force_reg_t DTS_MON_INT_FORCE; /*< Address offset = 0x4c */
    dts_mon_int_masked_stat_reg_t DTS_MON_INT_MASKED_STAT; /*< Address offset = 0x50 */
    const uint8_t        reservedArea2 [428]; /*< Address offset = 0x54 */
    dts_atsa_adc_ul_reg_t ATSA_ADC_UL[8]; /*< Address offset = 0x200 */
    dts_atsa_adc_ll_reg_t ATSA_ADC_LL[8]; /*< Address offset = 0x220 */
    dts_atsa_dac_ul_reg_t ATSA_DAC_UL[8]; /*< Address offset = 0x240 */
    dts_atsa_dac_ll_reg_t ATSA_DAC_LL[8]; /*< Address offset = 0x260 */
    dts_atsa_agc_ul_reg_t ATSA_AGC_UL[8]; /*< Address offset = 0x280 */
    dts_atsa_agc_ll_reg_t ATSA_AGC_LL[8]; /*< Address offset = 0x2a0 */
    dts_atsa_sensor_reg_t ATSA_SENSOR[8]; /*< Address offset = 0x2c0 */
    const uint8_t        reservedArea3 [1312]; /*< Address offset = 0x2e0 */
    dts_mon_tshold0_reg_t DTS_MON_TSHOLD0[16]; /*< Address offset = 0x800 */
    dts_mon_tshold1_reg_t DTS_MON_TSHOLD1[16]; /*< Address offset = 0x840 */
    dts_mon_tshold2_reg_t DTS_MON_TSHOLD2[16]; /*< Address offset = 0x880 */
    dts_mon_tshold3_reg_t DTS_MON_TSHOLD3[16]; /*< Address offset = 0x8c0 */
    dts_mon_tshold4_reg_t DTS_MON_TSHOLD4[16]; /*< Address offset = 0x900 */
    dts_mon_tshold5_reg_t DTS_MON_TSHOLD5[16]; /*< Address offset = 0x940 */
    const uint8_t        reservedArea4 [1664]; /*< Address offset = 0x980 */
    dts_mon_temp0_reg_t DTS_MON_TEMP0[16]; /*< Address offset = 0x1000 */
    dts_mon_temp1_reg_t DTS_MON_TEMP1[16]; /*< Address offset = 0x1040 */
    dts_mon_temp2_reg_t DTS_MON_TEMP2[16]; /*< Address offset = 0x1080 */
    dts_mon_temp3_reg_t DTS_MON_TEMP3[16]; /*< Address offset = 0x10c0 */
    dts_mon_temp4_reg_t DTS_MON_TEMP4[16]; /*< Address offset = 0x1100 */
    dts_mon_temp5_reg_t DTS_MON_TEMP5[16]; /*< Address offset = 0x1140 */
} dts_monitor_t;     // size: 0x0080

// AddressSpace struct pointer
//
#define SYSCON_DTS_MONITOR  ((dts_monitor_t*) SYSCON_DTS_MONITOR_BASE)

// ******************************************* /Address Space

#endif      // _DTS_MONITOR_H_

