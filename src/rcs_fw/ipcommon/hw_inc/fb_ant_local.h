#ifndef _FB_ANT_LOCAL_H_
#define _FB_ANT_LOCAL_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define FB_ANT0_CSR_BASE      ( 0x0507f000 )
#define FB_ANT1_CSR_BASE      ( 0x050ff000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define FB_ANT_LOCAL_ANT_RATE_0_OFFSET ( 0x00000000U )
#define FB_ANT_LOCAL_ANT_RATE_1_OFFSET ( 0x00000004U )
#define FB_ANT_LOCAL_INT_HI_STAT_OFFSET ( 0x00000008U )
#define FB_ANT_LOCAL_INT_LO_STAT_OFFSET ( 0x0000000cU )
#define FB_ANT_LOCAL_BRDG_STAT_OFFSET ( 0x00000010U )
#define FB_ANT_LOCAL_SMC_CTLT_OFFSET ( 0x00000014U )
#define FB_ANT_LOCAL_SMC_CTLB_OFFSET ( 0x00000018U )
#define FB_ANT_LOCAL_DIG_LPK_OFFSET  ( 0x0000001cU )
#define FB_ANT_LOCAL_DP_INIT_OFFSET  ( 0x00000020U )
#define FB_ANT_LOCAL_ISYNC_CTRL_OFFSET ( 0x00000040U )
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_OFFSET ( 0x00000044U )
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_OFFSET ( 0x00000048U )
#define FB_ANT_LOCAL_ISYNC_INC_PRE_OFFSET ( 0x0000004cU )
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_OFFSET ( 0x00000050U )
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET ( 0x00000054U )
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_OFFSET ( 0x00000058U )
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_OFFSET ( 0x00000100U )
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_OFFSET ( 0x00000104U )
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_OFFSET ( 0x00000108U )
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_OFFSET ( 0x0000010cU )
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_OFFSET ( 0x00000110U )
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_OFFSET ( 0x00000114U )
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_OFFSET ( 0x00000118U )
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_OFFSET ( 0x0000011cU )
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_OFFSET ( 0x00000120U )
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_OFFSET ( 0x00000124U )
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_OFFSET ( 0x00000128U )
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_OFFSET ( 0x0000012cU )
#define FB_ANT_LOCAL_ULDL_STAT_OFFSET ( 0x00000130U )
#define FB_ANT_LOCAL_BFNE_CFG0_OFFSET ( 0x00000400U )
#define FB_ANT_LOCAL_BFNE_CFG1_OFFSET ( 0x00000404U )
#define FB_ANT_LOCAL_BFNE_CFG2_OFFSET ( 0x00000408U )
#define FB_ANT_LOCAL_BFNE_CFG3_OFFSET ( 0x0000040cU )
#define FB_ANT_LOCAL_BFNE_CFG4_OFFSET ( 0x00000410U )
#define FB_ANT_LOCAL_BFNE_CFG5_OFFSET ( 0x00000414U )
#define FB_ANT_LOCAL_BFNE_CFG6_OFFSET ( 0x00000418U )
#define FB_ANT_LOCAL_BFNE_CFG7_OFFSET ( 0x0000041cU )
#define FB_ANT_LOCAL_BFNE_CFG8_OFFSET ( 0x00000420U )
#define FB_ANT_LOCAL_BFNE_CFG9_OFFSET ( 0x00000424U )
#define FB_ANT_LOCAL_BFNE_CFG10_OFFSET ( 0x00000428U )
#define FB_ANT_LOCAL_BFNE_CFG11_OFFSET ( 0x0000042cU )
#define FB_ANT_LOCAL_BFNE_CFG12_OFFSET ( 0x00000430U )
#define FB_ANT_LOCAL_BFNE_CFG13_OFFSET ( 0x00000434U )
#define FB_ANT_LOCAL_BFNE_CFG14_OFFSET ( 0x00000438U )
#define FB_ANT_LOCAL_BFNE_CFG15_OFFSET ( 0x0000043cU )
#define FB_ANT_LOCAL_BFNE_CFG16_OFFSET ( 0x00000440U )
#define FB_ANT_LOCAL_BFNE_CFG17_OFFSET ( 0x00000444U )
#define FB_ANT_LOCAL_BFNE_CFG18_OFFSET ( 0x00000448U )
#define FB_ANT_LOCAL_BFNE_CFG19_OFFSET ( 0x0000044cU )
#define FB_ANT_LOCAL_BFNE_CFG20_OFFSET ( 0x00000450U )
#define FB_ANT_LOCAL_BFNE_CFG21_OFFSET ( 0x00000454U )
#define FB_ANT_LOCAL_BFNE_INCR0_OFFSET ( 0x00000480U )
#define FB_ANT_LOCAL_BFNE_INCR1_OFFSET ( 0x00000484U )
#define FB_ANT_LOCAL_BFNE_INCR2_OFFSET ( 0x00000488U )
#define FB_ANT_LOCAL_BFNE_INCR3_OFFSET ( 0x0000048cU )
#define FB_ANT_LOCAL_BFNE_INCR4_OFFSET ( 0x00000490U )
#define FB_ANT_LOCAL_BFNE_INCR5_OFFSET ( 0x00000494U )
#define FB_ANT_LOCAL_BFNE_INCR6_OFFSET ( 0x00000498U )
#define FB_ANT_LOCAL_BFNE_INCR7_OFFSET ( 0x0000049cU )
#define FB_ANT_LOCAL_BFNE_INCR8_OFFSET ( 0x000004a0U )
#define FB_ANT_LOCAL_BFNE_INCR9_OFFSET ( 0x000004a4U )
#define FB_ANT_LOCAL_BFNE_INCR10_OFFSET ( 0x000004a8U )
#define FB_ANT_LOCAL_BFNE_INCR11_OFFSET ( 0x000004acU )
#define FB_ANT_LOCAL_BFNE_INCR12_OFFSET ( 0x000004b0U )
#define FB_ANT_LOCAL_BFNE_INCR13_OFFSET ( 0x000004b4U )
#define FB_ANT_LOCAL_BFNE_INCR14_OFFSET ( 0x000004b8U )
#define FB_ANT_LOCAL_BFNE_INCR15_OFFSET ( 0x000004bcU )
#define FB_ANT_LOCAL_BFNE_INCR16_OFFSET ( 0x000004c0U )
#define FB_ANT_LOCAL_BFNE_INCR17_OFFSET ( 0x000004c4U )
#define FB_ANT_LOCAL_BFNE_INCR18_OFFSET ( 0x000004c8U )
#define FB_ANT_LOCAL_BFNE_INCR19_OFFSET ( 0x000004ccU )
#define FB_ANT_LOCAL_BFNE_INCR20_OFFSET ( 0x000004d0U )
#define FB_ANT_LOCAL_BFNE_INCR21_OFFSET ( 0x000004d4U )
#define FB_ANT_LOCAL_BFNE_START0_OFFSET ( 0x00000500U )
#define FB_ANT_LOCAL_BFNE_START1_OFFSET ( 0x00000504U )
#define FB_ANT_LOCAL_BFNE_START2_OFFSET ( 0x00000508U )
#define FB_ANT_LOCAL_BFNE_START3_OFFSET ( 0x0000050cU )
#define FB_ANT_LOCAL_BFNE_START4_OFFSET ( 0x00000510U )
#define FB_ANT_LOCAL_BFNE_START5_OFFSET ( 0x00000514U )
#define FB_ANT_LOCAL_BFNE_START6_OFFSET ( 0x00000518U )
#define FB_ANT_LOCAL_BFNE_START7_OFFSET ( 0x0000051cU )
#define FB_ANT_LOCAL_BFNE_START8_OFFSET ( 0x00000520U )
#define FB_ANT_LOCAL_BFNE_START9_OFFSET ( 0x00000524U )
#define FB_ANT_LOCAL_BFNE_START10_OFFSET ( 0x00000528U )
#define FB_ANT_LOCAL_BFNE_START11_OFFSET ( 0x0000052cU )
#define FB_ANT_LOCAL_BFNE_START12_OFFSET ( 0x00000530U )
#define FB_ANT_LOCAL_BFNE_START13_OFFSET ( 0x00000534U )
#define FB_ANT_LOCAL_BFNE_START14_OFFSET ( 0x00000538U )
#define FB_ANT_LOCAL_BFNE_START15_OFFSET ( 0x0000053cU )
#define FB_ANT_LOCAL_BFNE_START16_OFFSET ( 0x00000540U )
#define FB_ANT_LOCAL_BFNE_START17_OFFSET ( 0x00000544U )
#define FB_ANT_LOCAL_BFNE_START18_OFFSET ( 0x00000548U )
#define FB_ANT_LOCAL_BFNE_START19_OFFSET ( 0x0000054cU )
#define FB_ANT_LOCAL_BFNE_START20_OFFSET ( 0x00000550U )
#define FB_ANT_LOCAL_BFNE_START21_OFFSET ( 0x00000554U )
#define FB_ANT_LOCAL_BFNE_STAT0_OFFSET ( 0x00000580U )
#define FB_ANT_LOCAL_BFNE_STAT1_OFFSET ( 0x00000584U )
#define FB_ANT_LOCAL_BFNE_STAT2_OFFSET ( 0x00000588U )
#define FB_ANT_LOCAL_BFNE_STAT3_OFFSET ( 0x0000058cU )
#define FB_ANT_LOCAL_BFNE_STAT4_OFFSET ( 0x00000590U )
#define FB_ANT_LOCAL_BFNE_STAT5_OFFSET ( 0x00000594U )
#define FB_ANT_LOCAL_BFNE_STAT6_OFFSET ( 0x00000598U )
#define FB_ANT_LOCAL_BFNE_STAT7_OFFSET ( 0x0000059cU )
#define FB_ANT_LOCAL_BFNE_STAT8_OFFSET ( 0x000005a0U )
#define FB_ANT_LOCAL_BFNE_STAT9_OFFSET ( 0x000005a4U )
#define FB_ANT_LOCAL_BFNE_STAT10_OFFSET ( 0x000005a8U )
#define FB_ANT_LOCAL_BFNE_STAT11_OFFSET ( 0x000005acU )
#define FB_ANT_LOCAL_BFNE_STAT12_OFFSET ( 0x000005b0U )
#define FB_ANT_LOCAL_BFNE_STAT13_OFFSET ( 0x000005b4U )
#define FB_ANT_LOCAL_BFNE_STAT14_OFFSET ( 0x000005b8U )
#define FB_ANT_LOCAL_BFNE_STAT15_OFFSET ( 0x000005bcU )
#define FB_ANT_LOCAL_BFNE_STAT16_OFFSET ( 0x000005c0U )
#define FB_ANT_LOCAL_BFNE_STAT17_OFFSET ( 0x000005c4U )
#define FB_ANT_LOCAL_BFNE_STAT18_OFFSET ( 0x000005c8U )
#define FB_ANT_LOCAL_BFNE_STAT19_OFFSET ( 0x000005ccU )
#define FB_ANT_LOCAL_BFNE_STAT20_OFFSET ( 0x000005d0U )
#define FB_ANT_LOCAL_BFNE_STAT21_OFFSET ( 0x000005d4U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define FB_ANT_LOCAL_ANT_RATE_0_ADR(_BASE)  (( ( _BASE ) + ( FB_ANT_LOCAL_ANT_RATE_0_OFFSET ) ))
#define FB_ANT_LOCAL_ANT_RATE_1_ADR(_BASE)  (( ( _BASE ) + ( FB_ANT_LOCAL_ANT_RATE_1_OFFSET ) ))
#define FB_ANT_LOCAL_INT_HI_STAT_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_INT_HI_STAT_OFFSET ) ))
#define FB_ANT_LOCAL_INT_LO_STAT_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_INT_LO_STAT_OFFSET ) ))
#define FB_ANT_LOCAL_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BRDG_STAT_OFFSET ) ))
#define FB_ANT_LOCAL_SMC_CTLT_ADR(_BASE)    (( ( _BASE ) + ( FB_ANT_LOCAL_SMC_CTLT_OFFSET ) ))
#define FB_ANT_LOCAL_SMC_CTLB_ADR(_BASE)    (( ( _BASE ) + ( FB_ANT_LOCAL_SMC_CTLB_OFFSET ) ))
#define FB_ANT_LOCAL_DIG_LPK_ADR(_BASE)     (( ( _BASE ) + ( FB_ANT_LOCAL_DIG_LPK_OFFSET ) ))
#define FB_ANT_LOCAL_DP_INIT_ADR(_BASE)     (( ( _BASE ) + ( FB_ANT_LOCAL_DP_INIT_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_CTRL_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_CTRL_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_LCNT_INC_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_INC_PRE_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_INC_PRE_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_CNT_ADJ_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET ) ))
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ISYNC_BFN_CNT_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_PS_LIVE0_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_PS_LIVE1_OFFSET ) ))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_OFFSET ) ))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_PS_SHDW0_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_OFFSET ) ))
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_RXM_PS_SHDW1_OFFSET ) ))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_OFFSET ) ))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_OFFSET ) ))
#define FB_ANT_LOCAL_ULDL_STAT_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_ULDL_STAT_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG0_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG1_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG2_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG2_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG3_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG3_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG4_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG4_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG5_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG5_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG6_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG6_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG7_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG7_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG8_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG8_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG9_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG9_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG10_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG10_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG11_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG11_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG12_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG12_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG13_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG13_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG14_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG14_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG15_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG15_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG16_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG16_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG17_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG17_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG18_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG18_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG19_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG19_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG20_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG20_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_CFG21_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_CFG21_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR0_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR1_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR2_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR2_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR3_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR3_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR4_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR4_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR5_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR5_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR6_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR6_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR7_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR7_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR8_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR8_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR9_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR9_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR10_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR10_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR11_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR11_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR12_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR12_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR13_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR13_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR14_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR14_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR15_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR15_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR16_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR16_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR17_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR17_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR18_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR18_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR19_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR19_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR20_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR20_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_INCR21_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_INCR21_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START0_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START1_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START2_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START2_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START3_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START3_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START4_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START4_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START5_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START5_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START6_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START6_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START7_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START7_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START8_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START8_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START9_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START9_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START10_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START10_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START11_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START11_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START12_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START12_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START13_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START13_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START14_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START14_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START15_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START15_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START16_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START16_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START17_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START17_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START18_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START18_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START19_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START19_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START20_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START20_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_START21_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_START21_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT0_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT0_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT1_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT1_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT2_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT2_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT3_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT3_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT4_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT4_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT5_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT5_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT6_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT6_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT7_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT7_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT8_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT8_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT9_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT9_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT10_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT10_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT11_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT11_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT12_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT12_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT13_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT13_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT14_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT14_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT15_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT15_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT16_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT16_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT17_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT17_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT18_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT18_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT19_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT19_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT20_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT20_OFFSET ) ))
#define FB_ANT_LOCAL_BFNE_STAT21_ADR(_BASE) (( ( _BASE ) + ( FB_ANT_LOCAL_BFNE_STAT21_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief FB_ANT_LOCAL_REG_ANT_RATE_0 register description at address offset 0x0
  *
  * Register default value:        0x00000005
  * Register full path in IP: fb_ant_local/reg/ANT_RATE_0
  * Ant rate/cfg selection
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< ANT Rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t ALT_ADC_SEQ : 1;
    ///< Alternate ADC Sequence Enable.  Selects alternate 8/12Gsps (linear)
    ///< pattern.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_ant_rate_0_reg_t;

#define FB_ANT_LOCAL_ANT_RATE_0_DEFAULT (0x00000005U)
#define FB_ANT_LOCAL_ANT_RATE_0_RD_MASK (0x0000000fU)
#define FB_ANT_LOCAL_ANT_RATE_0_WR_MASK (0x0000000fU)


///< ANT Rate
#define FB_ANT_LOCAL_ANT_RATE_0_ANT_RATE_BF_OFF ( 0)
#define FB_ANT_LOCAL_ANT_RATE_0_ANT_RATE_BF_WID ( 3)
#define FB_ANT_LOCAL_ANT_RATE_0_ANT_RATE_BF_MSK (0x00000007)
#define FB_ANT_LOCAL_ANT_RATE_0_ANT_RATE_BF_DEF (0x00000005)

///< Alternate ADC Sequence Enable.  Selects alternate 8/12Gsps (linear)
///< pattern.
#define FB_ANT_LOCAL_ANT_RATE_0_ALT_ADC_SEQ_BF_OFF ( 3)
#define FB_ANT_LOCAL_ANT_RATE_0_ALT_ADC_SEQ_BF_WID ( 1)
#define FB_ANT_LOCAL_ANT_RATE_0_ALT_ADC_SEQ_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_ANT_RATE_0_ALT_ADC_SEQ_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ANT_RATE_1 register description at address offset 0x4
  *
  * Register default value:        0x00000005
  * Register full path in IP: fb_ant_local/reg/ANT_RATE_1
  * Ant rate/cfg selection
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< ANT Rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t ALT_ADC_SEQ : 1;
    ///< Alternate ADC Sequence Enable.  Selects alternate 8/12Gsps (linear)
    ///< pattern.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_ant_rate_1_reg_t;

#define FB_ANT_LOCAL_ANT_RATE_1_DEFAULT (0x00000005U)
#define FB_ANT_LOCAL_ANT_RATE_1_RD_MASK (0x0000000fU)
#define FB_ANT_LOCAL_ANT_RATE_1_WR_MASK (0x0000000fU)


///< ANT Rate
#define FB_ANT_LOCAL_ANT_RATE_1_ANT_RATE_BF_OFF ( 0)
#define FB_ANT_LOCAL_ANT_RATE_1_ANT_RATE_BF_WID ( 3)
#define FB_ANT_LOCAL_ANT_RATE_1_ANT_RATE_BF_MSK (0x00000007)
#define FB_ANT_LOCAL_ANT_RATE_1_ANT_RATE_BF_DEF (0x00000005)

///< Alternate ADC Sequence Enable.  Selects alternate 8/12Gsps (linear)
///< pattern.
#define FB_ANT_LOCAL_ANT_RATE_1_ALT_ADC_SEQ_BF_OFF ( 3)
#define FB_ANT_LOCAL_ANT_RATE_1_ALT_ADC_SEQ_BF_WID ( 1)
#define FB_ANT_LOCAL_ANT_RATE_1_ALT_ADC_SEQ_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_ANT_RATE_1_ALT_ADC_SEQ_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_INT_HI_STAT register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/INT_HI_STAT
  * FB_ANT Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t SMC_INT_OB : 1;
    ///< smc odd bottom
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SMC_INT_EB : 1;
    ///< smc even bottom
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMC_OT : 1;
    ///< smc odd top
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t SMC_ET : 1;
    ///< smc even top
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t NLEQ0 : 1;
    ///< nleq0
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t NLEQ1 : 1;
    ///< nleq1
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CMEM0 : 1;
    ///< cmem0
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t CMEM1 : 1;
    ///< cmem1
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t DDAC_TOP : 1;
    ///< ddac top
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t DDAC_BOT : 1;
    ///< ddac bottom
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t SWG_EVEN : 1;
    ///< swg even
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t SWG_ODD : 1;
    ///< swg odd
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t CALDAC_FF : 1;
    ///< Caldac FIFO overflow/underflow interrupts
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_int_hi_stat_reg_t;

#define FB_ANT_LOCAL_INT_HI_STAT_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_INT_HI_STAT_RD_MASK (0x00001fffU)
#define FB_ANT_LOCAL_INT_HI_STAT_WR_MASK (0x00000000U)


///< smc odd bottom
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_OB_BF_OFF ( 0)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_OB_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_OB_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_OB_BF_DEF (0x00000000)

///< smc even bottom
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_EB_BF_OFF ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_EB_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_EB_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_INT_EB_BF_DEF (0x00000000)

///< smc odd top
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_OT_BF_OFF ( 2)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_OT_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_OT_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_OT_BF_DEF (0x00000000)

///< smc even top
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_ET_BF_OFF ( 3)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_ET_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_ET_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_INT_HI_STAT_SMC_ET_BF_DEF (0x00000000)

///< nleq0
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ0_BF_OFF ( 4)
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ0_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ0_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ0_BF_DEF (0x00000000)

///< nleq1
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ1_BF_OFF ( 5)
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ1_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ1_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_INT_HI_STAT_NLEQ1_BF_DEF (0x00000000)

///< cmem0
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM0_BF_OFF ( 6)
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM0_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM0_BF_MSK (0x00000040)
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM0_BF_DEF (0x00000000)

///< cmem1
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM1_BF_OFF ( 7)
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM1_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM1_BF_MSK (0x00000080)
#define FB_ANT_LOCAL_INT_HI_STAT_CMEM1_BF_DEF (0x00000000)

///< ddac top
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_TOP_BF_OFF ( 8)
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_TOP_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_TOP_BF_MSK (0x00000100)
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_TOP_BF_DEF (0x00000000)

///< ddac bottom
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_BOT_BF_OFF ( 9)
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_BOT_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_BOT_BF_MSK (0x00000200)
#define FB_ANT_LOCAL_INT_HI_STAT_DDAC_BOT_BF_DEF (0x00000000)

///< swg even
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_EVEN_BF_OFF (10)
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_EVEN_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_EVEN_BF_MSK (0x00000400)
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_EVEN_BF_DEF (0x00000000)

///< swg odd
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_ODD_BF_OFF (11)
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_ODD_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_ODD_BF_MSK (0x00000800)
#define FB_ANT_LOCAL_INT_HI_STAT_SWG_ODD_BF_DEF (0x00000000)

///< Caldac FIFO overflow/underflow interrupts
#define FB_ANT_LOCAL_INT_HI_STAT_CALDAC_FF_BF_OFF (12)
#define FB_ANT_LOCAL_INT_HI_STAT_CALDAC_FF_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_HI_STAT_CALDAC_FF_BF_MSK (0x00001000)
#define FB_ANT_LOCAL_INT_HI_STAT_CALDAC_FF_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_INT_LO_STAT register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/INT_LO_STAT
  * FB_ANT Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t SMC_INT_OB : 1;
    ///< smc odd bottom
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SMC_INT_EB : 1;
    ///< smc even bottom
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SMC_OT : 1;
    ///< smc odd top
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t SMC_ET : 1;
    ///< smc even top
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t NLEQ0 : 1;
    ///< nleq0
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t NLEQ1 : 1;
    ///< nleq1
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CMEM0 : 1;
    ///< cmem0
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t CMEM1 : 1;
    ///< cmem1
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t DDAC_TOP : 1;
    ///< ddac top
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t DDAC_BOT : 1;
    ///< ddac bottom
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t SWG_EVEN : 1;
    ///< swg even
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t SWG_ODD : 1;
    ///< swg odd
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t CALDAC_FF : 1;
    ///< Caldac FIFO overflow/underflow interrupts
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_int_lo_stat_reg_t;

#define FB_ANT_LOCAL_INT_LO_STAT_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_INT_LO_STAT_RD_MASK (0x00001fffU)
#define FB_ANT_LOCAL_INT_LO_STAT_WR_MASK (0x00000000U)


///< smc odd bottom
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_OB_BF_OFF ( 0)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_OB_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_OB_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_OB_BF_DEF (0x00000000)

///< smc even bottom
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_EB_BF_OFF ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_EB_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_EB_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_INT_EB_BF_DEF (0x00000000)

///< smc odd top
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_OT_BF_OFF ( 2)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_OT_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_OT_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_OT_BF_DEF (0x00000000)

///< smc even top
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_ET_BF_OFF ( 3)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_ET_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_ET_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_INT_LO_STAT_SMC_ET_BF_DEF (0x00000000)

///< nleq0
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ0_BF_OFF ( 4)
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ0_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ0_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ0_BF_DEF (0x00000000)

///< nleq1
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ1_BF_OFF ( 5)
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ1_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ1_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_INT_LO_STAT_NLEQ1_BF_DEF (0x00000000)

///< cmem0
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM0_BF_OFF ( 6)
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM0_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM0_BF_MSK (0x00000040)
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM0_BF_DEF (0x00000000)

///< cmem1
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM1_BF_OFF ( 7)
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM1_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM1_BF_MSK (0x00000080)
#define FB_ANT_LOCAL_INT_LO_STAT_CMEM1_BF_DEF (0x00000000)

///< ddac top
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_TOP_BF_OFF ( 8)
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_TOP_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_TOP_BF_MSK (0x00000100)
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_TOP_BF_DEF (0x00000000)

///< ddac bottom
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_BOT_BF_OFF ( 9)
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_BOT_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_BOT_BF_MSK (0x00000200)
#define FB_ANT_LOCAL_INT_LO_STAT_DDAC_BOT_BF_DEF (0x00000000)

///< swg even
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_EVEN_BF_OFF (10)
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_EVEN_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_EVEN_BF_MSK (0x00000400)
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_EVEN_BF_DEF (0x00000000)

///< swg odd
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_ODD_BF_OFF (11)
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_ODD_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_ODD_BF_MSK (0x00000800)
#define FB_ANT_LOCAL_INT_LO_STAT_SWG_ODD_BF_DEF (0x00000000)

///< Caldac FIFO overflow/underflow interrupts
#define FB_ANT_LOCAL_INT_LO_STAT_CALDAC_FF_BF_OFF (12)
#define FB_ANT_LOCAL_INT_LO_STAT_CALDAC_FF_BF_WID ( 1)
#define FB_ANT_LOCAL_INT_LO_STAT_CALDAC_FF_BF_MSK (0x00001000)
#define FB_ANT_LOCAL_INT_LO_STAT_CALDAC_FF_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_BRIDGE_STATUS register description at address offset 0x10
  *
  * Register default value:        0x00010000
  * Register full path in IP: fb_ant_local/reg/BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_brdg_stat_reg_t;

#define FB_ANT_LOCAL_BRDG_STAT_DEFAULT (0x00010000U)
#define FB_ANT_LOCAL_BRDG_STAT_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define FB_ANT_LOCAL_BRDG_STAT_REVISION_BF_OFF (20)
#define FB_ANT_LOCAL_BRDG_STAT_REVISION_BF_WID ( 8)
#define FB_ANT_LOCAL_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define FB_ANT_LOCAL_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define FB_ANT_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define FB_ANT_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define FB_ANT_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define FB_ANT_LOCAL_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define FB_ANT_LOCAL_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define FB_ANT_LOCAL_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define FB_ANT_LOCAL_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define FB_ANT_LOCAL_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define FB_ANT_LOCAL_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define FB_ANT_LOCAL_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define FB_ANT_LOCAL_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_SMC_CTLT register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/SMC_CTLT
  * SMC control
  */

typedef union {
  struct {
    uint32_t LSB_OFFSET_SEL_E : 1;
    ///< 0: lsb offset select disabled                    1: lsb offset select
    ///< enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DITHER_E : 1;
    ///< 0: dither disabled                    1: dither enabled
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UPDATE_E : 1;
    ///< 0: update disabled                    1: update enabled
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LSB_OFFSET_SEL_O : 1;
    ///< 0: lsb offset select disabled                    1: lsb offset select
    ///< enabled
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DITHER_O : 1;
    ///< 0: dither disabled                    1: dither enabled
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t UPDATE_O : 1;
    ///< 0: update disabled                    1: update enabled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_smc_ctlt_reg_t;

#define FB_ANT_LOCAL_SMC_CTLT_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_SMC_CTLT_RD_MASK (0x0000003fU)
#define FB_ANT_LOCAL_SMC_CTLT_WR_MASK (0x0000003fU)


///< 0: lsb offset select disabled                    1: lsb offset select
///< enabled
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_E_BF_OFF ( 0)
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_E_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_E_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_E_BF_DEF (0x00000000)

///< 0: dither disabled                    1: dither enabled
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_E_BF_OFF ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_E_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_E_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_E_BF_DEF (0x00000000)

///< 0: update disabled                    1: update enabled
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_E_BF_OFF ( 2)
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_E_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_E_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_E_BF_DEF (0x00000000)

///< 0: lsb offset select disabled                    1: lsb offset select
///< enabled
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_O_BF_OFF ( 3)
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_O_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_O_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_SMC_CTLT_LSB_OFFSET_SEL_O_BF_DEF (0x00000000)

///< 0: dither disabled                    1: dither enabled
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_O_BF_OFF ( 4)
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_O_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_O_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_SMC_CTLT_DITHER_O_BF_DEF (0x00000000)

///< 0: update disabled                    1: update enabled
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_O_BF_OFF ( 5)
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_O_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_O_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_SMC_CTLT_UPDATE_O_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_SMC_CTLB register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/SMC_CTLB
  * SMC control
  */

typedef union {
  struct {
    uint32_t LSB_OFFSET_SEL_E : 1;
    ///< 0: lsb offset select disabled                    1: lsb offset select
    ///< enabled
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DITHER_E : 1;
    ///< 0: dither disabled                    1: dither enabled
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t UPDATE_E : 1;
    ///< 0: update disabled                    1: update enabled
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LSB_OFFSET_SEL_O : 1;
    ///< 0: lsb offset select disabled                    1: lsb offset select
    ///< enabled
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DITHER_O : 1;
    ///< 0: dither disabled                    1: dither enabled
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t UPDATE_O : 1;
    ///< 0: update disabled                    1: update enabled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_smc_ctlb_reg_t;

#define FB_ANT_LOCAL_SMC_CTLB_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_SMC_CTLB_RD_MASK (0x0000003fU)
#define FB_ANT_LOCAL_SMC_CTLB_WR_MASK (0x0000003fU)


///< 0: lsb offset select disabled                    1: lsb offset select
///< enabled
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_E_BF_OFF ( 0)
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_E_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_E_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_E_BF_DEF (0x00000000)

///< 0: dither disabled                    1: dither enabled
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_E_BF_OFF ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_E_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_E_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_E_BF_DEF (0x00000000)

///< 0: update disabled                    1: update enabled
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_E_BF_OFF ( 2)
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_E_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_E_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_E_BF_DEF (0x00000000)

///< 0: lsb offset select disabled                    1: lsb offset select
///< enabled
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_O_BF_OFF ( 3)
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_O_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_O_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_SMC_CTLB_LSB_OFFSET_SEL_O_BF_DEF (0x00000000)

///< 0: dither disabled                    1: dither enabled
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_O_BF_OFF ( 4)
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_O_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_O_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_SMC_CTLB_DITHER_O_BF_DEF (0x00000000)

///< 0: update disabled                    1: update enabled
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_O_BF_OFF ( 5)
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_O_BF_WID ( 1)
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_O_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_SMC_CTLB_UPDATE_O_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_DIG_LPK register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/DIG_LPK
  * Digital loopback test
  */

typedef union {
  struct {
    uint32_t DIG0_LPK : 2;
    ///< 00,01: select fb0 data as input to nleq0                    10: select
    ///< cmem0 data as input to nleq0                    11: select cmem1 data
    ///< as input to nleq0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DIG1_LPK : 2;
    ///< 00,01: select fb1 data as input to nleq1                    10: select
    ///< cmem0 data as input to nleq1                    11: select cmem1 data
    ///< as input to nleq1
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_dig_lpk_reg_t;

#define FB_ANT_LOCAL_DIG_LPK_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_DIG_LPK_RD_MASK (0x0000000fU)
#define FB_ANT_LOCAL_DIG_LPK_WR_MASK (0x0000000fU)


///< 00,01: select fb0 data as input to nleq0                    10: select
///< cmem0 data as input to nleq0                    11: select cmem1 data
///< as input to nleq0
#define FB_ANT_LOCAL_DIG_LPK_DIG0_LPK_BF_OFF ( 0)
#define FB_ANT_LOCAL_DIG_LPK_DIG0_LPK_BF_WID ( 2)
#define FB_ANT_LOCAL_DIG_LPK_DIG0_LPK_BF_MSK (0x00000003)
#define FB_ANT_LOCAL_DIG_LPK_DIG0_LPK_BF_DEF (0x00000000)

///< 00,01: select fb1 data as input to nleq1                    10: select
///< cmem0 data as input to nleq1                    11: select cmem1 data
///< as input to nleq1
#define FB_ANT_LOCAL_DIG_LPK_DIG1_LPK_BF_OFF ( 2)
#define FB_ANT_LOCAL_DIG_LPK_DIG1_LPK_BF_WID ( 2)
#define FB_ANT_LOCAL_DIG_LPK_DIG1_LPK_BF_MSK (0x0000000C)
#define FB_ANT_LOCAL_DIG_LPK_DIG1_LPK_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_DP_INIT register description at address offset 0x20
  *
  * Register default value:        0x000F0000
  * Register full path in IP: fb_ant_local/reg/DP_INIT
  * Datapath Initialize
  */

typedef union {
  struct {
    uint32_t DP0_INIT : 1;
    ///< Writing to one begins the initialization process for the datapath
    ///< sub-blocks of CALDAC_ANT Top (Channel 0). Initializaiton is complete
    ///< when DP0_DONE is set.  Note SWG's and CMEM's are only initialized
    ///< if both the DP0_INIT and DP1_INIT are set.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DP0_DONE : 1;
    ///< Initialization of CALDAC_ANT TOP (Channel 0) complete
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t ESMC0_DONE : 1;
    ///< Initialization of Even SMC 0 complete
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t OSMC0_DONE : 1;
    ///< Initialization of Odd SMC 0 complete
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RXM0_DONE : 1;
    ///< Initialization of RXM 0 complete
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t NLEQ0_DONE : 1;
    ///< Initialization of NLEQ 0 complete
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t DP1_INIT : 1;
    ///< Writing to one begins the initialization process for the datapath
    ///< sub-blocks of CALDAC_ANT Bot (Channel 1). Initializaiton is complete
    ///< when DP1_DONE is set.  Note SWG's and CMEM's are only initialized
    ///< if both the DP0_INIT and DP1_INIT are set.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DP1_DONE : 1;
    ///< Initialization of CALDAC_ANT Bot (Channel 1) complete
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t ESMC1_DONE : 1;
    ///< Initialization of Even SMC 1 complete
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t OSMC1_DONE : 1;
    ///< Initialization of Odd SMC 1 complete
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t RXM1_DONE : 1;
    ///< Initialization of RXM 1 complete
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t NLEQ1_DONE : 1;
    ///< Initialization of NLEQ 1 complete
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CMEM0_DONE : 1;
    ///< Initialization of CMEM 0 complete.  Note this bit only has meaning
    ///< when both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x1"
    uint32_t CMEM1_DONE : 1;
    ///< Initialization of CMEM 1 complete.  Note this bit only has meaning
    ///< when both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x1"
    uint32_t SWGE_DONE : 1;
    ///< Initialization of SWGE complete.  Note this bit only has meaning when
    ///< both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x1"
    uint32_t SWGO_DONE : 1;
    ///< Initialization of SWGO complete.  Note this bit only has meaning when
    ///< both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x1"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_dp_init_reg_t;

#define FB_ANT_LOCAL_DP_INIT_DEFAULT (0x000f0000U)
#define FB_ANT_LOCAL_DP_INIT_RD_MASK (0x000f3f3fU)
#define FB_ANT_LOCAL_DP_INIT_WR_MASK (0x00000101U)


///< Writing to one begins the initialization process for the datapath
///< sub-blocks of CALDAC_ANT Top (Channel 0). Initializaiton is complete
///< when DP0_DONE is set.  Note SWG's and CMEM's are only initialized
///< if both the DP0_INIT and DP1_INIT are set.
#define FB_ANT_LOCAL_DP_INIT_DP0_INIT_BF_OFF ( 0)
#define FB_ANT_LOCAL_DP_INIT_DP0_INIT_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_DP0_INIT_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_DP_INIT_DP0_INIT_BF_DEF (0x00000000)

///< Initialization of CALDAC_ANT TOP (Channel 0) complete
#define FB_ANT_LOCAL_DP_INIT_DP0_DONE_BF_OFF ( 1)
#define FB_ANT_LOCAL_DP_INIT_DP0_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_DP0_DONE_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_DP_INIT_DP0_DONE_BF_DEF (0x00000000)

///< Initialization of Even SMC 0 complete
#define FB_ANT_LOCAL_DP_INIT_ESMC0_DONE_BF_OFF ( 2)
#define FB_ANT_LOCAL_DP_INIT_ESMC0_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_ESMC0_DONE_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_DP_INIT_ESMC0_DONE_BF_DEF (0x00000000)

///< Initialization of Odd SMC 0 complete
#define FB_ANT_LOCAL_DP_INIT_OSMC0_DONE_BF_OFF ( 3)
#define FB_ANT_LOCAL_DP_INIT_OSMC0_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_OSMC0_DONE_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_DP_INIT_OSMC0_DONE_BF_DEF (0x00000000)

///< Initialization of RXM 0 complete
#define FB_ANT_LOCAL_DP_INIT_RXM0_DONE_BF_OFF ( 4)
#define FB_ANT_LOCAL_DP_INIT_RXM0_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_RXM0_DONE_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_DP_INIT_RXM0_DONE_BF_DEF (0x00000000)

///< Initialization of NLEQ 0 complete
#define FB_ANT_LOCAL_DP_INIT_NLEQ0_DONE_BF_OFF ( 5)
#define FB_ANT_LOCAL_DP_INIT_NLEQ0_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_NLEQ0_DONE_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_DP_INIT_NLEQ0_DONE_BF_DEF (0x00000000)

///< Writing to one begins the initialization process for the datapath
///< sub-blocks of CALDAC_ANT Bot (Channel 1). Initializaiton is complete
///< when DP1_DONE is set.  Note SWG's and CMEM's are only initialized
///< if both the DP0_INIT and DP1_INIT are set.
#define FB_ANT_LOCAL_DP_INIT_DP1_INIT_BF_OFF ( 8)
#define FB_ANT_LOCAL_DP_INIT_DP1_INIT_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_DP1_INIT_BF_MSK (0x00000100)
#define FB_ANT_LOCAL_DP_INIT_DP1_INIT_BF_DEF (0x00000000)

///< Initialization of CALDAC_ANT Bot (Channel 1) complete
#define FB_ANT_LOCAL_DP_INIT_DP1_DONE_BF_OFF ( 9)
#define FB_ANT_LOCAL_DP_INIT_DP1_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_DP1_DONE_BF_MSK (0x00000200)
#define FB_ANT_LOCAL_DP_INIT_DP1_DONE_BF_DEF (0x00000000)

///< Initialization of Even SMC 1 complete
#define FB_ANT_LOCAL_DP_INIT_ESMC1_DONE_BF_OFF (10)
#define FB_ANT_LOCAL_DP_INIT_ESMC1_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_ESMC1_DONE_BF_MSK (0x00000400)
#define FB_ANT_LOCAL_DP_INIT_ESMC1_DONE_BF_DEF (0x00000000)

///< Initialization of Odd SMC 1 complete
#define FB_ANT_LOCAL_DP_INIT_OSMC1_DONE_BF_OFF (11)
#define FB_ANT_LOCAL_DP_INIT_OSMC1_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_OSMC1_DONE_BF_MSK (0x00000800)
#define FB_ANT_LOCAL_DP_INIT_OSMC1_DONE_BF_DEF (0x00000000)

///< Initialization of RXM 1 complete
#define FB_ANT_LOCAL_DP_INIT_RXM1_DONE_BF_OFF (12)
#define FB_ANT_LOCAL_DP_INIT_RXM1_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_RXM1_DONE_BF_MSK (0x00001000)
#define FB_ANT_LOCAL_DP_INIT_RXM1_DONE_BF_DEF (0x00000000)

///< Initialization of NLEQ 1 complete
#define FB_ANT_LOCAL_DP_INIT_NLEQ1_DONE_BF_OFF (13)
#define FB_ANT_LOCAL_DP_INIT_NLEQ1_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_NLEQ1_DONE_BF_MSK (0x00002000)
#define FB_ANT_LOCAL_DP_INIT_NLEQ1_DONE_BF_DEF (0x00000000)

///< Initialization of CMEM 0 complete.  Note this bit only has meaning
///< when both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
#define FB_ANT_LOCAL_DP_INIT_CMEM0_DONE_BF_OFF (16)
#define FB_ANT_LOCAL_DP_INIT_CMEM0_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_CMEM0_DONE_BF_MSK (0x00010000)
#define FB_ANT_LOCAL_DP_INIT_CMEM0_DONE_BF_DEF (0x00010000)

///< Initialization of CMEM 1 complete.  Note this bit only has meaning
///< when both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
#define FB_ANT_LOCAL_DP_INIT_CMEM1_DONE_BF_OFF (17)
#define FB_ANT_LOCAL_DP_INIT_CMEM1_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_CMEM1_DONE_BF_MSK (0x00020000)
#define FB_ANT_LOCAL_DP_INIT_CMEM1_DONE_BF_DEF (0x00020000)

///< Initialization of SWGE complete.  Note this bit only has meaning when
///< both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
#define FB_ANT_LOCAL_DP_INIT_SWGE_DONE_BF_OFF (18)
#define FB_ANT_LOCAL_DP_INIT_SWGE_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_SWGE_DONE_BF_MSK (0x00040000)
#define FB_ANT_LOCAL_DP_INIT_SWGE_DONE_BF_DEF (0x00040000)

///< Initialization of SWGO complete.  Note this bit only has meaning when
///< both DP0_INIT and DP1_INIT are set.  Ignore otherwise.
#define FB_ANT_LOCAL_DP_INIT_SWGO_DONE_BF_OFF (19)
#define FB_ANT_LOCAL_DP_INIT_SWGO_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_DP_INIT_SWGO_DONE_BF_MSK (0x00080000)
#define FB_ANT_LOCAL_DP_INIT_SWGO_DONE_BF_DEF (0x00080000)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_CTRL register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_CTRL
  * ISYNC Control Register
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< When i_isync value is 11, the command programmed in this register
    ///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
    ///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
    ///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
    ///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
    ///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
    ///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
    ///< all initialized to their corresponding input values.  If the current
    ///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
    ///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
    ///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
    ///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
    ///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
    ///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
    ///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
    ///< also generated so that when the  bfn_lower_cnt value is equal to the
    ///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
    ///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
    ///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
    ///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
    ///< made available  in a register for the application to read.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t LOAD_READ : 1;
    ///< When 1, load BFN count into the manager counter at the first timesync
    ///< pulse, when 0, read BFN count from the Manager BFN counter at every
    ///< timesync pulse.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t BFN_CNT_SAMPLE : 1;
    ///< Write to 1 (regardless of the current value) causes the circuit to
    ///< sample the BFN_CNT and synchronize it into the register clock domain.
    ///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
    ///< the sample is available to read in the ISYNC_BFN_CNT register
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset for the entire AW_isync. Active high.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_isync_ctrl_reg_t;

#define FB_ANT_LOCAL_ISYNC_CTRL_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_ISYNC_CTRL_RD_MASK (0x00008037U)
#define FB_ANT_LOCAL_ISYNC_CTRL_WR_MASK (0x00008037U)


///< When i_isync value is 11, the command programmed in this register
///< is executed.  3'b000, 3'b100, 3'b110 -> bfn_lower_cnt is incremented
///< with the value in BFN_LOWER_CNT_INC. If the  lower count value equals
///< the TEN_MS_CNT value the bfn_upper_cnt value is incremented by 1.
///< 3'b001 -> bfn_lower_cnt and bfn_upper_cnt are preset to the value
///< in the TIMER_INC_PRE register.  3'b010 -> The internal registers corresponding
///< to BFN_LOWER_CNT_INC., TIMER_INC_PRE, TIMER_INC_ADJ  TEN_MS_CNT are
///< all initialized to their corresponding input values.  If the current
///< bfn_lower_cnt value is equal to the TEN_MS_CNT value, the bfn_upper_cnt
///< is incremented by 1. If not, bfn_lower_cnt is incremented by the value
///< in BFN_LOWER_CNT_INC.  register.  3'b011 -> Increment the bfn_lower_cnt
///< value with the value in the TIMER_INC_PRE register.  3'b101 -> If
///< bfn_lower_cnt value equals the TEN_MS_CNT value, reset the bfn_lower_cnt
///< to zero and  increment the bfn_upper_cnt by 1. If not, increment bfn_lower_cnt
///< by a value  in the BFN_LOWER_CNT_INC. register. A sync_adj_pulse is
///< also generated so that when the  bfn_lower_cnt value is equal to the
///< TEN_MS_CNT and the bfn_upper_cnt equals timer_cnt_adj  the bfn_lower_cnt
///< is preset to the value in TIMER_INC_PRE and the bfn_upper_cnt is
///< incremented by the value in TIMER_INC_PRE register.  3'b111 -> The
///< current value in the bfn_lower_cnt and bfn_upper_cnt is captured and
///< made available  in a register for the application to read.
#define FB_ANT_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_WID ( 3)
#define FB_ANT_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_MSK (0x00000007)
#define FB_ANT_LOCAL_ISYNC_CTRL_TIMER_CMD_BF_DEF (0x00000000)

///< When 1, load BFN count into the manager counter at the first timesync
///< pulse, when 0, read BFN count from the Manager BFN counter at every
///< timesync pulse.
#define FB_ANT_LOCAL_ISYNC_CTRL_LOAD_READ_BF_OFF ( 4)
#define FB_ANT_LOCAL_ISYNC_CTRL_LOAD_READ_BF_WID ( 1)
#define FB_ANT_LOCAL_ISYNC_CTRL_LOAD_READ_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_ISYNC_CTRL_LOAD_READ_BF_DEF (0x00000000)

///< Write to 1 (regardless of the current value) causes the circuit to
///< sample the BFN_CNT and synchronize it into the register clock domain.
///< After waiting 3-4 BFN clock cycles plus 3-4 register clock cycles,
///< the sample is available to read in the ISYNC_BFN_CNT register
#define FB_ANT_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_OFF ( 5)
#define FB_ANT_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_WID ( 1)
#define FB_ANT_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_ISYNC_CTRL_BFN_CNT_SAMPLE_BF_DEF (0x00000000)

///< Soft Reset for the entire AW_isync. Active high.
#define FB_ANT_LOCAL_ISYNC_CTRL_SOFT_RST_BF_OFF (15)
#define FB_ANT_LOCAL_ISYNC_CTRL_SOFT_RST_BF_WID ( 1)
#define FB_ANT_LOCAL_ISYNC_CTRL_SOFT_RST_BF_MSK (0x00008000)
#define FB_ANT_LOCAL_ISYNC_CTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_LCNT_INC register description at address offset 0x44
  *
  * Register default value:        0x00000001
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_LCNT_INC
  * Isync Lower Count Increment Register
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< Increment for the Offset Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_isync_lcnt_inc_reg_t;

#define FB_ANT_LOCAL_ISYNC_LCNT_INC_DEFAULT (0x00000001U)
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_RD_MASK (0x00ffffffU)
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_WR_MASK (0x00ffffffU)


///< Increment for the Offset Counter.
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_TEN_MS_CNT register description at address offset 0x48
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_TEN_MS_CNT
  * Isync 10ms Counter Register
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< Number of clock cycles in 10ms (minus 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_isync_ten_ms_cnt_reg_t;

#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< Number of clock cycles in 10ms (minus 1).
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_INC_PRE register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_INC_PRE
  * Isync Timer Increment/Preset Register
  */

typedef union {
  struct {
    uint32_t OFFSET_INCR : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME_INCR : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_isync_inc_pre_reg_t;

#define FB_ANT_LOCAL_ISYNC_INC_PRE_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_ANT_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_WID (24)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_OFFSET_INCR_BF_DEF (0x00000000)

///< Bits [7:0] of the 10ms frame counter.
#define FB_ANT_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_OFF (24)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_WID ( 8)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_MSK (0xFF000000)
#define FB_ANT_LOCAL_ISYNC_INC_PRE_FRAME_INCR_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_CNT_ADJ register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_CNT_ADJ
  * Isync Timer Count Adjustment Register
  */

typedef union {
  struct {
    uint32_t FRAME_ADJ : 8;
    ///< Bits [7:0] of the 10ms frame counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_isync_cnt_adj_reg_t;

#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_RD_MASK (0x000000ffU)
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_WR_MASK (0x000000ffU)


///< Bits [7:0] of the 10ms frame counter.
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_WID ( 8)
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_MSK (0x000000FF)
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_FRAME_ADJ_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_BFN_CNT_SYNC register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_BFN_CNT_SYNC
  * BFN Count Sync
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Bits [7:0] fo the count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_isync_bfn_cnt_sync_reg_t;

#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_WID (24)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_OFFSET_BF_DEF (0x00000000)

///< Bits [7:0] fo the count of 10ms frames.
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_OFF (24)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_WID ( 8)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_MSK (0xFF000000)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_FRAME_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ISYNC_MAP_ISYNC_BFN_CNT register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ISYNC_MAP/ISYNC_BFN_CNT
  * BFN Count
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< LSB's of Count of 10ms frames.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_isync_bfn_cnt_reg_t;

#define FB_ANT_LOCAL_ISYNC_BFN_CNT_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_WR_MASK (0x00000000U)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_OFF ( 0)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_WID (24)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_OFFSET_BF_DEF (0x00000000)

///< LSB's of Count of 10ms frames.
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_FRAME_BF_OFF (24)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_FRAME_BF_WID ( 8)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_FRAME_BF_MSK (0xFF000000)
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_FRAME_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_ENA_LIVE0 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_ENA_LIVE0
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ena_live0_reg_t;

#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_PS_LIVE0 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_PS_LIVE0
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ps_live0_reg_t;

#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_ENA_LIVE1 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_ENA_LIVE1
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ena_live1_reg_t;

#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_PS_LIVE1 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_PS_LIVE1
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ps_live1_reg_t;

#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_NLEQ_ZERO_STUFF_LIVE0 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_NLEQ_ZERO_STUFF_LIVE0
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_nleq_zero_stuff_live0_reg_t;

#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_NLEQ_ZERO_STUFF_LIVE1 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_NLEQ_ZERO_STUFF_LIVE1
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_nleq_zero_stuff_live1_reg_t;

#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_ENA_SHDW0 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_ENA_SHDW0
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ena_shdw0_reg_t;

#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_PS_SHDW0 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_PS_SHDW0
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ps_shdw0_reg_t;

#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_ENA_SHDW1 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_ENA_SHDW1
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ena_shdw1_reg_t;

#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_RXM_PS_SHDW1 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_RXM_PS_SHDW1
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_rxm_ps_shdw1_reg_t;

#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_NLEQ_ZERO_STUFF_SHDW0 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_NLEQ_ZERO_STUFF_SHDW0
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_nleq_zero_stuff_shdw0_reg_t;

#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_UL_NLEQ_ZERO_STUFF_SHDW1 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/UL_NLEQ_ZERO_STUFF_SHDW1
  * Uplink Downlink event
  */

typedef union {
  struct {
    uint32_t RISE_DELAY : 15;
    ///< Number of clock cycles after the rising transition of Uplink/Downlink
    ///< BFN event to set the event to RISE_VALUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FALL_DELAY : 15;
    ///< Number of clock cycles after the falling transition of Uplink/Downlink
    ///< BFN event to set the event to FALL_VALUE.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t RISE_VALUE : 1;
    ///< Value to set after the rising transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t FALL_VALUE : 1;
    ///< Value to set after the falling transition of Uplink/Downlink BFN event.
    ///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
    ///< and the DELAY fields are ignored.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_ul_nleq_zero_stuff_shdw1_reg_t;

#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_WR_MASK (0xffffffffU)


///< Number of clock cycles after the rising transition of Uplink/Downlink
///< BFN event to set the event to RISE_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_OFF ( 0)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_MSK (0x00007FFF)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_DELAY_BF_DEF (0x00000000)

///< Number of clock cycles after the falling transition of Uplink/Downlink
///< BFN event to set the event to FALL_VALUE.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_OFF (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_WID (15)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_MSK (0x3FFF8000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_DELAY_BF_DEF (0x00000000)

///< Value to set after the rising transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_OFF (30)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_MSK (0x40000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_RISE_VAL_BF_DEF (0x00000000)

///< Value to set after the falling transition of Uplink/Downlink BFN event.
///< If RISE_VALUE = FALL_VALUE then the event is set to that value immediately
///< and the DELAY fields are ignored.
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_OFF (31)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_MSK (0x80000000)
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_FALL_VAL_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ULDL_STATUS register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ULDL_STATUS
  * Uplink Downlink event status
  */

typedef union {
  struct {
    uint32_t DL_EVENT0 : 1;
    ///< Indicates which DL event occurred most recently: 0:  DL OFF occurred
    ///< most recently 1:  DL ON occurred most recently
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXM0_ENA : 1;
    ///< Status of the RXM0 enable bit
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PS0_ENA : 1;
    ///< Status of the RXM0 PS interface enable bit
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t ZERO_STUFF0 : 1;
    ///< Status of the NLEQ0 ZERO_STUFF control bit.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DL_EVENT1 : 1;
    ///< Indicates which DL event occurred most recently: 0:  DL OFF occurred
    ///< most recently 1:  DL ON occurred most recently
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RXM1_ENA : 1;
    ///< Status of the RXM1 enable bit
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PS1_ENA : 1;
    ///< Status of the RXM1 PS interface enable bit
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t ZERO_STUFF1 : 1;
    ///< Status of the NLEQ1 ZERO_STUFF control bit.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_uldl_stat_reg_t;

#define FB_ANT_LOCAL_ULDL_STAT_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_ULDL_STAT_RD_MASK (0x000000ffU)
#define FB_ANT_LOCAL_ULDL_STAT_WR_MASK (0x00000000U)


///< Indicates which DL event occurred most recently: 0:  DL OFF occurred
///< most recently 1:  DL ON occurred most recently
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT0_BF_OFF ( 0)
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT0_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT0_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT0_BF_DEF (0x00000000)

///< Status of the RXM0 enable bit
#define FB_ANT_LOCAL_ULDL_STAT_RXM0_ENA_BF_OFF ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_RXM0_ENA_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_RXM0_ENA_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_ULDL_STAT_RXM0_ENA_BF_DEF (0x00000000)

///< Status of the RXM0 PS interface enable bit
#define FB_ANT_LOCAL_ULDL_STAT_PS0_ENA_BF_OFF ( 2)
#define FB_ANT_LOCAL_ULDL_STAT_PS0_ENA_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_PS0_ENA_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_ULDL_STAT_PS0_ENA_BF_DEF (0x00000000)

///< Status of the NLEQ0 ZERO_STUFF control bit.
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF0_BF_OFF ( 3)
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF0_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF0_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF0_BF_DEF (0x00000000)

///< Indicates which DL event occurred most recently: 0:  DL OFF occurred
///< most recently 1:  DL ON occurred most recently
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT1_BF_OFF ( 4)
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT1_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT1_BF_MSK (0x00000010)
#define FB_ANT_LOCAL_ULDL_STAT_DL_EVENT1_BF_DEF (0x00000000)

///< Status of the RXM1 enable bit
#define FB_ANT_LOCAL_ULDL_STAT_RXM1_ENA_BF_OFF ( 5)
#define FB_ANT_LOCAL_ULDL_STAT_RXM1_ENA_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_RXM1_ENA_BF_MSK (0x00000020)
#define FB_ANT_LOCAL_ULDL_STAT_RXM1_ENA_BF_DEF (0x00000000)

///< Status of the RXM1 PS interface enable bit
#define FB_ANT_LOCAL_ULDL_STAT_PS1_ENA_BF_OFF ( 6)
#define FB_ANT_LOCAL_ULDL_STAT_PS1_ENA_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_PS1_ENA_BF_MSK (0x00000040)
#define FB_ANT_LOCAL_ULDL_STAT_PS1_ENA_BF_DEF (0x00000000)

///< Status of the NLEQ1 ZERO_STUFF control bit.
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF1_BF_OFF ( 7)
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF1_BF_WID ( 1)
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF1_BF_MSK (0x00000080)
#define FB_ANT_LOCAL_ULDL_STAT_ZERO_STUFF1_BF_DEF (0x00000000)


/** @brief FB_ANT_LOCAL_REG_ABC_BFN_EVENTS_BFNE_CONFIG[22] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ABC_BFN_EVENTS/BFNE_CONFIG
  * BFN Event Config Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Set to 1 to enable the operation of the bfn_event module. When running
    ///< in repeat mode, set this back to zero to immediately halt the operation.
    ///< NOte that this must be set to 1 for the force mechanism (See BFN_START
    ///< register) to work.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 2;
    ///< Selects the mode of operation. Note that the force mechanism can be
    ///< triggered (see BFNE_START) regardless of which mode is selected here.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t OUTPUT_MODE : 1;
    ///< Selects whether the BFN_EVENT output toggles at each event, or produces
    ///< a single cycle pulse.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEBUG_MODE : 2;
    ///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} fb_ant_local_bfne_cfg_reg_t;

#define FB_ANT_LOCAL_BFNE_CFG_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_BFNE_CFG_RD_MASK (0x0000003fU)
#define FB_ANT_LOCAL_BFNE_CFG_WR_MASK (0x0000003fU)


///< Set to 1 to enable the operation of the bfn_event module. When running
///< in repeat mode, set this back to zero to immediately halt the operation.
///< NOte that this must be set to 1 for the force mechanism (See BFN_START
///< register) to work.
#define FB_ANT_LOCAL_BFNE_CFG_EN_BF_OFF ( 0)
#define FB_ANT_LOCAL_BFNE_CFG_EN_BF_WID ( 1)
#define FB_ANT_LOCAL_BFNE_CFG_EN_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_BFNE_CFG_EN_BF_DEF (0x00000000)

///< Selects the mode of operation. Note that the force mechanism can be
///< triggered (see BFNE_START) regardless of which mode is selected here.
#define FB_ANT_LOCAL_BFNE_CFG_MODE_BF_OFF ( 1)
#define FB_ANT_LOCAL_BFNE_CFG_MODE_BF_WID ( 2)
#define FB_ANT_LOCAL_BFNE_CFG_MODE_BF_MSK (0x00000006)
#define FB_ANT_LOCAL_BFNE_CFG_MODE_BF_DEF (0x00000000)

///< Selects whether the BFN_EVENT output toggles at each event, or produces
///< a single cycle pulse.
#define FB_ANT_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_OFF ( 3)
#define FB_ANT_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_WID ( 1)
#define FB_ANT_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_MSK (0x00000008)
#define FB_ANT_LOCAL_BFNE_CFG_OUTPUT_MODE_BF_DEF (0x00000000)

///< Controls what appears in BFN_EVENT_STAT DEBUG field, which is 28 bits.
#define FB_ANT_LOCAL_BFNE_CFG_DBG_MODE_BF_OFF ( 4)
#define FB_ANT_LOCAL_BFNE_CFG_DBG_MODE_BF_WID ( 2)
#define FB_ANT_LOCAL_BFNE_CFG_DBG_MODE_BF_MSK (0x00000030)
#define FB_ANT_LOCAL_BFNE_CFG_DBG_MODE_BF_DEF (0x00000000)
#define FB_ANT_LOCAL_BFNE_CFG_ARR_SZ0 (22)
#define FB_ANT_LOCAL_BFNE_CFG_ARRAY_STRIDE0 (0x0004)


/** @brief FB_ANT_LOCAL_REG_ABC_BFN_EVENTS_BFNE_INCR[22] register description at address offset 0x480
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ABC_BFN_EVENTS/BFNE_INCR
  * BFN Event Increment
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_bfne_incr_reg_t;

#define FB_ANT_LOCAL_BFNE_INCR_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_BFNE_INCR_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_BFNE_INCR_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_ANT_LOCAL_BFNE_INCR_OFFSET_BF_OFF ( 0)
#define FB_ANT_LOCAL_BFNE_INCR_OFFSET_BF_WID (24)
#define FB_ANT_LOCAL_BFNE_INCR_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_BFNE_INCR_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define FB_ANT_LOCAL_BFNE_INCR_FRAME_BF_OFF (24)
#define FB_ANT_LOCAL_BFNE_INCR_FRAME_BF_WID ( 8)
#define FB_ANT_LOCAL_BFNE_INCR_FRAME_BF_MSK (0xFF000000)
#define FB_ANT_LOCAL_BFNE_INCR_FRAME_BF_DEF (0x00000000)
#define FB_ANT_LOCAL_BFNE_INCR_ARR_SZ0 (22)
#define FB_ANT_LOCAL_BFNE_INCR_ARRAY_STRIDE0 (0x0004)


/** @brief FB_ANT_LOCAL_REG_ABC_BFN_EVENTS_BFNE_START[22] register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ABC_BFN_EVENTS/BFNE_START
  * BFN Event Start
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< Offset from nearest 10ms frame, in clock cycles.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< Count of 10ms frames.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_bfne_start_reg_t;

#define FB_ANT_LOCAL_BFNE_START_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_BFNE_START_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_BFNE_START_WR_MASK (0xffffffffU)


///< Offset from nearest 10ms frame, in clock cycles.
#define FB_ANT_LOCAL_BFNE_START_OFFSET_BF_OFF ( 0)
#define FB_ANT_LOCAL_BFNE_START_OFFSET_BF_WID (24)
#define FB_ANT_LOCAL_BFNE_START_OFFSET_BF_MSK (0x00FFFFFF)
#define FB_ANT_LOCAL_BFNE_START_OFFSET_BF_DEF (0x00000000)

///< Count of 10ms frames.
#define FB_ANT_LOCAL_BFNE_START_FRAME_BF_OFF (24)
#define FB_ANT_LOCAL_BFNE_START_FRAME_BF_WID ( 8)
#define FB_ANT_LOCAL_BFNE_START_FRAME_BF_MSK (0xFF000000)
#define FB_ANT_LOCAL_BFNE_START_FRAME_BF_DEF (0x00000000)
#define FB_ANT_LOCAL_BFNE_START_ARR_SZ0 (22)
#define FB_ANT_LOCAL_BFNE_START_ARRAY_STRIDE0 (0x0004)


/** @brief FB_ANT_LOCAL_REG_ABC_BFN_EVENTS_BFNE_STAT[22] register description at address offset 0x580
  *
  * Register default value:        0x00000000
  * Register full path in IP: fb_ant_local/reg/ABC_BFN_EVENTS/BFNE_STAT
  * BFN Event Status Register
  */

typedef union {
  struct {
    uint32_t CURRENT_VALUE : 1;
    ///< This bit shows the current output value of the bfn_event module
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t WAITING : 1;
    ///< This bit indicates when the bfn_event module is waiting for the programmed
    ///< bfn_start time. In Repeat mode, this will only toggle low during the
    ///< single cycle of each event, so is not useful.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< This bit indicates that the bfn_module has reached its programmed
    ///< bfn time. In Repeate mode, this will only toggle high during the single
    ///< cycle of each event, so is not usefule.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DEBUG : 29;
    ///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
    ///< register.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} fb_ant_local_bfne_stat_reg_t;

#define FB_ANT_LOCAL_BFNE_STAT_DEFAULT (0x00000000U)
#define FB_ANT_LOCAL_BFNE_STAT_RD_MASK (0xffffffffU)
#define FB_ANT_LOCAL_BFNE_STAT_WR_MASK (0x00000000U)


///< This bit shows the current output value of the bfn_event module
#define FB_ANT_LOCAL_BFNE_STAT_CURRENT_VAL_BF_OFF ( 0)
#define FB_ANT_LOCAL_BFNE_STAT_CURRENT_VAL_BF_WID ( 1)
#define FB_ANT_LOCAL_BFNE_STAT_CURRENT_VAL_BF_MSK (0x00000001)
#define FB_ANT_LOCAL_BFNE_STAT_CURRENT_VAL_BF_DEF (0x00000000)

///< This bit indicates when the bfn_event module is waiting for the programmed
///< bfn_start time. In Repeat mode, this will only toggle low during the
///< single cycle of each event, so is not useful.
#define FB_ANT_LOCAL_BFNE_STAT_WAITING_BF_OFF ( 1)
#define FB_ANT_LOCAL_BFNE_STAT_WAITING_BF_WID ( 1)
#define FB_ANT_LOCAL_BFNE_STAT_WAITING_BF_MSK (0x00000002)
#define FB_ANT_LOCAL_BFNE_STAT_WAITING_BF_DEF (0x00000000)

///< This bit indicates that the bfn_module has reached its programmed
///< bfn time. In Repeate mode, this will only toggle high during the single
///< cycle of each event, so is not usefule.
#define FB_ANT_LOCAL_BFNE_STAT_DONE_BF_OFF ( 2)
#define FB_ANT_LOCAL_BFNE_STAT_DONE_BF_WID ( 1)
#define FB_ANT_LOCAL_BFNE_STAT_DONE_BF_MSK (0x00000004)
#define FB_ANT_LOCAL_BFNE_STAT_DONE_BF_DEF (0x00000000)

///< This field is different based on the DEBUG_MODE setting in the BFNE_CONFIG
///< register.
#define FB_ANT_LOCAL_BFNE_STAT_DBG_BF_OFF ( 3)
#define FB_ANT_LOCAL_BFNE_STAT_DBG_BF_WID (29)
#define FB_ANT_LOCAL_BFNE_STAT_DBG_BF_MSK (0xFFFFFFF8)
#define FB_ANT_LOCAL_BFNE_STAT_DBG_BF_DEF (0x00000000)
#define FB_ANT_LOCAL_BFNE_STAT_ARR_SZ0 (22)
#define FB_ANT_LOCAL_BFNE_STAT_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define FB_ANT_LOCAL_ANT_RATE_0_REG(_BASE) ((fb_ant_local_ant_rate_0_reg_t*) FB_ANT_LOCAL_ANT_RATE_0_ADR(_BASE))
#define FB_ANT_LOCAL_ANT_RATE_1_REG(_BASE) ((fb_ant_local_ant_rate_1_reg_t*) FB_ANT_LOCAL_ANT_RATE_1_ADR(_BASE))
#define FB_ANT_LOCAL_INT_HI_STAT_REG(_BASE) ((fb_ant_local_int_hi_stat_reg_t*) FB_ANT_LOCAL_INT_HI_STAT_ADR(_BASE))
#define FB_ANT_LOCAL_INT_LO_STAT_REG(_BASE) ((fb_ant_local_int_lo_stat_reg_t*) FB_ANT_LOCAL_INT_LO_STAT_ADR(_BASE))
#define FB_ANT_LOCAL_BRDG_STAT_REG(_BASE) ((fb_ant_local_brdg_stat_reg_t*) FB_ANT_LOCAL_BRDG_STAT_ADR(_BASE))
#define FB_ANT_LOCAL_SMC_CTLT_REG(_BASE) ((fb_ant_local_smc_ctlt_reg_t*) FB_ANT_LOCAL_SMC_CTLT_ADR(_BASE))
#define FB_ANT_LOCAL_SMC_CTLB_REG(_BASE) ((fb_ant_local_smc_ctlb_reg_t*) FB_ANT_LOCAL_SMC_CTLB_ADR(_BASE))
#define FB_ANT_LOCAL_DIG_LPK_REG(_BASE) ((fb_ant_local_dig_lpk_reg_t*) FB_ANT_LOCAL_DIG_LPK_ADR(_BASE))
#define FB_ANT_LOCAL_DP_INIT_REG(_BASE) ((fb_ant_local_dp_init_reg_t*) FB_ANT_LOCAL_DP_INIT_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_CTRL_REG(_BASE) ((fb_ant_local_isync_ctrl_reg_t*) FB_ANT_LOCAL_ISYNC_CTRL_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_LCNT_INC_REG(_BASE) ((fb_ant_local_isync_lcnt_inc_reg_t*) FB_ANT_LOCAL_ISYNC_LCNT_INC_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_REG(_BASE) ((fb_ant_local_isync_ten_ms_cnt_reg_t*) FB_ANT_LOCAL_ISYNC_TEN_MS_CNT_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_INC_PRE_REG(_BASE) ((fb_ant_local_isync_inc_pre_reg_t*) FB_ANT_LOCAL_ISYNC_INC_PRE_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_CNT_ADJ_REG(_BASE) ((fb_ant_local_isync_cnt_adj_reg_t*) FB_ANT_LOCAL_ISYNC_CNT_ADJ_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_REG(_BASE) ((fb_ant_local_isync_bfn_cnt_sync_reg_t*) FB_ANT_LOCAL_ISYNC_BFN_CNT_SYNC_ADR(_BASE))
#define FB_ANT_LOCAL_ISYNC_BFN_CNT_REG(_BASE) ((fb_ant_local_isync_bfn_cnt_reg_t*) FB_ANT_LOCAL_ISYNC_BFN_CNT_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_REG(_BASE) ((fb_ant_local_ul_rxm_ena_live0_reg_t*) FB_ANT_LOCAL_UL_RXM_ENA_LIVE0_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE0_REG(_BASE) ((fb_ant_local_ul_rxm_ps_live0_reg_t*) FB_ANT_LOCAL_UL_RXM_PS_LIVE0_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_REG(_BASE) ((fb_ant_local_ul_rxm_ena_live1_reg_t*) FB_ANT_LOCAL_UL_RXM_ENA_LIVE1_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_PS_LIVE1_REG(_BASE) ((fb_ant_local_ul_rxm_ps_live1_reg_t*) FB_ANT_LOCAL_UL_RXM_PS_LIVE1_ADR(_BASE))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_REG(_BASE) ((fb_ant_local_ul_nleq_zero_stuff_live0_reg_t*) FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE0_ADR(_BASE))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_REG(_BASE) ((fb_ant_local_ul_nleq_zero_stuff_live1_reg_t*) FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_LIVE1_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_REG(_BASE) ((fb_ant_local_ul_rxm_ena_shdw0_reg_t*) FB_ANT_LOCAL_UL_RXM_ENA_SHDW0_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW0_REG(_BASE) ((fb_ant_local_ul_rxm_ps_shdw0_reg_t*) FB_ANT_LOCAL_UL_RXM_PS_SHDW0_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_REG(_BASE) ((fb_ant_local_ul_rxm_ena_shdw1_reg_t*) FB_ANT_LOCAL_UL_RXM_ENA_SHDW1_ADR(_BASE))
#define FB_ANT_LOCAL_UL_RXM_PS_SHDW1_REG(_BASE) ((fb_ant_local_ul_rxm_ps_shdw1_reg_t*) FB_ANT_LOCAL_UL_RXM_PS_SHDW1_ADR(_BASE))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_REG(_BASE) ((fb_ant_local_ul_nleq_zero_stuff_shdw0_reg_t*) FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW0_ADR(_BASE))
#define FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_REG(_BASE) ((fb_ant_local_ul_nleq_zero_stuff_shdw1_reg_t*) FB_ANT_LOCAL_UL_NLEQ_ZERO_STUFF_SHDW1_ADR(_BASE))
#define FB_ANT_LOCAL_ULDL_STAT_REG(_BASE) ((fb_ant_local_uldl_stat_reg_t*) FB_ANT_LOCAL_ULDL_STAT_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG0_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG0_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG1_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG1_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG2_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG2_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG3_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG3_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG4_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG4_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG5_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG5_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG6_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG6_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG7_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG7_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG8_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG8_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG9_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG9_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG10_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG10_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG11_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG11_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG12_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG12_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG13_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG13_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG14_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG14_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG15_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG15_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG16_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG16_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG17_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG17_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG18_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG18_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG19_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG19_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG20_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG20_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_CFG21_REG(_BASE) ((fb_ant_local_bfne_cfg_reg_t*) FB_ANT_LOCAL_BFNE_CFG21_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR0_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR0_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR1_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR1_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR2_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR2_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR3_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR3_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR4_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR4_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR5_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR5_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR6_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR6_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR7_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR7_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR8_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR8_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR9_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR9_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR10_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR10_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR11_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR11_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR12_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR12_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR13_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR13_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR14_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR14_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR15_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR15_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR16_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR16_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR17_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR17_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR18_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR18_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR19_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR19_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR20_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR20_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_INCR21_REG(_BASE) ((fb_ant_local_bfne_incr_reg_t*) FB_ANT_LOCAL_BFNE_INCR21_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START0_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START0_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START1_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START1_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START2_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START2_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START3_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START3_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START4_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START4_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START5_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START5_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START6_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START6_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START7_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START7_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START8_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START8_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START9_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START9_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START10_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START10_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START11_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START11_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START12_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START12_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START13_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START13_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START14_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START14_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START15_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START15_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START16_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START16_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START17_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START17_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START18_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START18_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START19_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START19_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START20_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START20_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_START21_REG(_BASE) ((fb_ant_local_bfne_start_reg_t*) FB_ANT_LOCAL_BFNE_START21_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT0_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT0_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT1_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT1_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT2_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT2_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT3_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT3_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT4_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT4_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT5_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT5_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT6_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT6_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT7_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT7_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT8_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT8_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT9_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT9_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT10_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT10_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT11_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT11_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT12_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT12_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT13_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT13_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT14_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT14_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT15_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT15_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT16_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT16_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT17_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT17_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT18_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT18_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT19_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT19_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT20_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT20_ADR(_BASE))
#define FB_ANT_LOCAL_BFNE_STAT21_REG(_BASE) ((fb_ant_local_bfne_stat_reg_t*) FB_ANT_LOCAL_BFNE_STAT21_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    fb_ant_local_ant_rate_0_reg_t ANT_RATE_0;      /*< Address offset = 0x0 */
    fb_ant_local_ant_rate_1_reg_t ANT_RATE_1;      /*< Address offset = 0x4 */
    fb_ant_local_int_hi_stat_reg_t INT_HI_STAT;     /*< Address offset = 0x8 */
    fb_ant_local_int_lo_stat_reg_t INT_LO_STAT;     /*< Address offset = 0xc */
    fb_ant_local_brdg_stat_reg_t BRDG_STAT;   /*< Address offset = 0x10 */
    fb_ant_local_smc_ctlt_reg_t SMC_CTLT;        /*< Address offset = 0x14 */
    fb_ant_local_smc_ctlb_reg_t SMC_CTLB;        /*< Address offset = 0x18 */
    fb_ant_local_dig_lpk_reg_t DIG_LPK;         /*< Address offset = 0x1c */
    fb_ant_local_dp_init_reg_t DP_INIT;         /*< Address offset = 0x20 */
    const uint8_t        reservedArea0 [28];  /*< Address offset = 0x24 */
    fb_ant_local_isync_ctrl_reg_t ISYNC_CTRL; /*< Address offset = 0x40 */
    fb_ant_local_isync_lcnt_inc_reg_t ISYNC_LCNT_INC; /*< Address offset = 0x44 */
    fb_ant_local_isync_ten_ms_cnt_reg_t ISYNC_TEN_MS_CNT; /*< Address offset = 0x48 */
    fb_ant_local_isync_inc_pre_reg_t ISYNC_INC_PRE; /*< Address offset = 0x4c */
    fb_ant_local_isync_cnt_adj_reg_t ISYNC_CNT_ADJ; /*< Address offset = 0x50 */
    fb_ant_local_isync_bfn_cnt_sync_reg_t ISYNC_BFN_CNT_SYNC; /*< Address offset = 0x54 */
    fb_ant_local_isync_bfn_cnt_reg_t ISYNC_BFN_CNT; /*< Address offset = 0x58 */
    const uint8_t        reservedArea1 [164]; /*< Address offset = 0x5c */
    fb_ant_local_ul_rxm_ena_live0_reg_t UL_RXM_ENA_LIVE0; /*< Address offset = 0x100 */
    fb_ant_local_ul_rxm_ps_live0_reg_t UL_RXM_PS_LIVE0; /*< Address offset = 0x104 */
    fb_ant_local_ul_rxm_ena_live1_reg_t UL_RXM_ENA_LIVE1; /*< Address offset = 0x108 */
    fb_ant_local_ul_rxm_ps_live1_reg_t UL_RXM_PS_LIVE1; /*< Address offset = 0x10c */
    fb_ant_local_ul_nleq_zero_stuff_live0_reg_t UL_NLEQ_ZERO_STUFF_LIVE0; /*< Address offset = 0x110 */
    fb_ant_local_ul_nleq_zero_stuff_live1_reg_t UL_NLEQ_ZERO_STUFF_LIVE1; /*< Address offset = 0x114 */
    fb_ant_local_ul_rxm_ena_shdw0_reg_t UL_RXM_ENA_SHDW0; /*< Address offset = 0x118 */
    fb_ant_local_ul_rxm_ps_shdw0_reg_t UL_RXM_PS_SHDW0; /*< Address offset = 0x11c */
    fb_ant_local_ul_rxm_ena_shdw1_reg_t UL_RXM_ENA_SHDW1; /*< Address offset = 0x120 */
    fb_ant_local_ul_rxm_ps_shdw1_reg_t UL_RXM_PS_SHDW1; /*< Address offset = 0x124 */
    fb_ant_local_ul_nleq_zero_stuff_shdw0_reg_t UL_NLEQ_ZERO_STUFF_SHDW0; /*< Address offset = 0x128 */
    fb_ant_local_ul_nleq_zero_stuff_shdw1_reg_t UL_NLEQ_ZERO_STUFF_SHDW1; /*< Address offset = 0x12c */
    fb_ant_local_uldl_stat_reg_t ULDL_STAT;     /*< Address offset = 0x130 */
    const uint8_t        reservedArea2 [716]; /*< Address offset = 0x134 */
    fb_ant_local_bfne_cfg_reg_t BFNE_CFG[22]; /*< Address offset = 0x400 */
    const uint8_t        reservedArea3 [40];  /*< Address offset = 0x458 */
    fb_ant_local_bfne_incr_reg_t BFNE_INCR[22]; /*< Address offset = 0x480 */
    const uint8_t        reservedArea4 [40];  /*< Address offset = 0x4d8 */
    fb_ant_local_bfne_start_reg_t BFNE_START[22]; /*< Address offset = 0x500 */
    const uint8_t        reservedArea5 [40];  /*< Address offset = 0x558 */
    fb_ant_local_bfne_stat_reg_t BFNE_STAT[22]; /*< Address offset = 0x580 */
} fb_ant_local_t;     // size: 0x0084

// AddressSpace struct pointer
//
#define FB_ANT0_CSR      ((fb_ant_local_t*) FB_ANT0_CSR_BASE)
#define FB_ANT1_CSR      ((fb_ant_local_t*) FB_ANT1_CSR_BASE)

// ******************************************* /Address Space

#endif      // _FB_ANT_LOCAL_H_

