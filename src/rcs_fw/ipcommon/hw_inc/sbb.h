#ifndef _SBB_H_
#define _SBB_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_SBB_MODULE_BASE  ( 0x01e20000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define SBB_SEMAPHORE_OFFSET ( 0x00000800U )
#define SBB_FUNCTION_OFFSET ( 0x00000804U )
#define SBB_AUTH_STAT_PARAM_OFFSET ( 0x00000808U )
#define SBB_AUTH_STAT_OFFSET ( 0x0000080cU )
#define SBB_STAT0_OFFSET ( 0x00000810U )
#define SBB_STAT1_OFFSET ( 0x00000814U )
#define SBB_DBG0_OFFSET ( 0x00000818U )
#define SBB_DBG1_OFFSET ( 0x0000081cU )
#define SBB_VENDOR0_OFFSET ( 0x00000820U )
#define SBB_VENDOR1_OFFSET ( 0x00000824U )
#define SBB_RSLT0_OFFSET ( 0x00000828U )
#define SBB_RSLT1_OFFSET ( 0x0000082cU )
#define SBB_MEAS_ACTRL_VERIF_OFFSET ( 0x00000830U )
#define SBB_MEAS_ACTRL_SBB_OFFSET ( 0x00000834U )
#define SBB_MEAS_ACTRL_EXT_OFFSET ( 0x00000838U )
#define SBB_MEAS_ACTRL_CLR_OFFSET ( 0x0000083cU )
#define SBB_UNIQUE_ID0_OFFSET ( 0x00000840U )
#define SBB_UNIQUE_ID1_OFFSET ( 0x00000844U )
#define SBB_HW_VER0_OFFSET ( 0x00000848U )
#define SBB_HW_VER1_OFFSET ( 0x0000084cU )
#define SBB_MEAS_H0_OFFSET ( 0x00000880U )
#define SBB_MEAS_L0_OFFSET ( 0x00000884U )
#define SBB_MEAS_H1_OFFSET ( 0x00000888U )
#define SBB_MEAS_L1_OFFSET ( 0x0000088cU )
#define SBB_MEAS_H2_OFFSET ( 0x00000890U )
#define SBB_MEAS_L2_OFFSET ( 0x00000894U )
#define SBB_MEAS_H3_OFFSET ( 0x00000898U )
#define SBB_MEAS_L3_OFFSET ( 0x0000089cU )
#define SBB_MEAS_H4_OFFSET ( 0x000008a0U )
#define SBB_MEAS_L4_OFFSET ( 0x000008a4U )
#define SBB_MEAS_H5_OFFSET ( 0x000008a8U )
#define SBB_MEAS_L5_OFFSET ( 0x000008acU )
#define SBB_MEAS_H6_OFFSET ( 0x000008b0U )
#define SBB_MEAS_L6_OFFSET ( 0x000008b4U )
#define SBB_MEAS_H7_OFFSET ( 0x000008b8U )
#define SBB_MEAS_L7_OFFSET ( 0x000008bcU )
#define SBB_MEAS_H8_OFFSET ( 0x000008c0U )
#define SBB_MEAS_L8_OFFSET ( 0x000008c4U )
#define SBB_MEAS_H9_OFFSET ( 0x000008c8U )
#define SBB_MEAS_L9_OFFSET ( 0x000008ccU )
#define SBB_MEAS_H10_OFFSET ( 0x000008d0U )
#define SBB_MEAS_L10_OFFSET ( 0x000008d4U )
#define SBB_MEAS_H11_OFFSET ( 0x000008d8U )
#define SBB_MEAS_L11_OFFSET ( 0x000008dcU )
#define SBB_MEAS_H12_OFFSET ( 0x000008e0U )
#define SBB_MEAS_L12_OFFSET ( 0x000008e4U )
#define SBB_MEAS_H13_OFFSET ( 0x000008e8U )
#define SBB_MEAS_L13_OFFSET ( 0x000008ecU )
#define SBB_MEAS_H14_OFFSET ( 0x000008f0U )
#define SBB_MEAS_L14_OFFSET ( 0x000008f4U )
#define SBB_MEAS_H15_OFFSET ( 0x000008f8U )
#define SBB_MEAS_L15_OFFSET ( 0x000008fcU )
#define SBB_MEAS_H16_OFFSET ( 0x00000900U )
#define SBB_MEAS_L16_OFFSET ( 0x00000904U )
#define SBB_MEAS_H17_OFFSET ( 0x00000908U )
#define SBB_MEAS_L17_OFFSET ( 0x0000090cU )
#define SBB_MEAS_H18_OFFSET ( 0x00000910U )
#define SBB_MEAS_L18_OFFSET ( 0x00000914U )
#define SBB_MEAS_H19_OFFSET ( 0x00000918U )
#define SBB_MEAS_L19_OFFSET ( 0x0000091cU )
#define SBB_MEAS_H20_OFFSET ( 0x00000920U )
#define SBB_MEAS_L20_OFFSET ( 0x00000924U )
#define SBB_MEAS_H21_OFFSET ( 0x00000928U )
#define SBB_MEAS_L21_OFFSET ( 0x0000092cU )
#define SBB_MEAS_H22_OFFSET ( 0x00000930U )
#define SBB_MEAS_L22_OFFSET ( 0x00000934U )
#define SBB_MEAS_H23_OFFSET ( 0x00000938U )
#define SBB_MEAS_L23_OFFSET ( 0x0000093cU )
#define SBB_MEAS_H24_OFFSET ( 0x00000940U )
#define SBB_MEAS_L24_OFFSET ( 0x00000944U )
#define SBB_MEAS_H25_OFFSET ( 0x00000948U )
#define SBB_MEAS_L25_OFFSET ( 0x0000094cU )
#define SBB_MEAS_H26_OFFSET ( 0x00000950U )
#define SBB_MEAS_L26_OFFSET ( 0x00000954U )
#define SBB_MEAS_H27_OFFSET ( 0x00000958U )
#define SBB_MEAS_L27_OFFSET ( 0x0000095cU )
#define SBB_MEAS_H28_OFFSET ( 0x00000960U )
#define SBB_MEAS_L28_OFFSET ( 0x00000964U )
#define SBB_MEAS_H29_OFFSET ( 0x00000968U )
#define SBB_MEAS_L29_OFFSET ( 0x0000096cU )
#define SBB_MEAS_H30_OFFSET ( 0x00000970U )
#define SBB_MEAS_L30_OFFSET ( 0x00000974U )
#define SBB_MEAS_H31_OFFSET ( 0x00000978U )
#define SBB_MEAS_L31_OFFSET ( 0x0000097cU )
#define SBB_MEAS_H32_OFFSET ( 0x00000980U )
#define SBB_MEAS_L32_OFFSET ( 0x00000984U )
#define SBB_MEAS_H33_OFFSET ( 0x00000988U )
#define SBB_MEAS_L33_OFFSET ( 0x0000098cU )
#define SBB_MEAS_H34_OFFSET ( 0x00000990U )
#define SBB_MEAS_L34_OFFSET ( 0x00000994U )
#define SBB_MEAS_H35_OFFSET ( 0x00000998U )
#define SBB_MEAS_L35_OFFSET ( 0x0000099cU )
#define SBB_MEAS_H36_OFFSET ( 0x000009a0U )
#define SBB_MEAS_L36_OFFSET ( 0x000009a4U )
#define SBB_MEAS_H37_OFFSET ( 0x000009a8U )
#define SBB_MEAS_L37_OFFSET ( 0x000009acU )
#define SBB_MEAS_H38_OFFSET ( 0x000009b0U )
#define SBB_MEAS_L38_OFFSET ( 0x000009b4U )
#define SBB_MEAS_H39_OFFSET ( 0x000009b8U )
#define SBB_MEAS_L39_OFFSET ( 0x000009bcU )
#define SBB_MEAS_H40_OFFSET ( 0x000009c0U )
#define SBB_MEAS_L40_OFFSET ( 0x000009c4U )
#define SBB_MEAS_H41_OFFSET ( 0x000009c8U )
#define SBB_MEAS_L41_OFFSET ( 0x000009ccU )
#define SBB_MEAS_H42_OFFSET ( 0x000009d0U )
#define SBB_MEAS_L42_OFFSET ( 0x000009d4U )
#define SBB_MEAS_H43_OFFSET ( 0x000009d8U )
#define SBB_MEAS_L43_OFFSET ( 0x000009dcU )
#define SBB_MEAS_H44_OFFSET ( 0x000009e0U )
#define SBB_MEAS_L44_OFFSET ( 0x000009e4U )
#define SBB_MEAS_H45_OFFSET ( 0x000009e8U )
#define SBB_MEAS_L45_OFFSET ( 0x000009ecU )
#define SBB_MEAS_H46_OFFSET ( 0x000009f0U )
#define SBB_MEAS_L46_OFFSET ( 0x000009f4U )
#define SBB_MEAS_H47_OFFSET ( 0x000009f8U )
#define SBB_MEAS_L47_OFFSET ( 0x000009fcU )
#define SBB_MEAS_H48_OFFSET ( 0x00000a00U )
#define SBB_MEAS_L48_OFFSET ( 0x00000a04U )
#define SBB_MEAS_H49_OFFSET ( 0x00000a08U )
#define SBB_MEAS_L49_OFFSET ( 0x00000a0cU )
#define SBB_MEAS_H50_OFFSET ( 0x00000a10U )
#define SBB_MEAS_L50_OFFSET ( 0x00000a14U )
#define SBB_MEAS_H51_OFFSET ( 0x00000a18U )
#define SBB_MEAS_L51_OFFSET ( 0x00000a1cU )
#define SBB_MEAS_H52_OFFSET ( 0x00000a20U )
#define SBB_MEAS_L52_OFFSET ( 0x00000a24U )
#define SBB_MEAS_H53_OFFSET ( 0x00000a28U )
#define SBB_MEAS_L53_OFFSET ( 0x00000a2cU )
#define SBB_MEAS_H54_OFFSET ( 0x00000a30U )
#define SBB_MEAS_L54_OFFSET ( 0x00000a34U )
#define SBB_MEAS_H55_OFFSET ( 0x00000a38U )
#define SBB_MEAS_L55_OFFSET ( 0x00000a3cU )
#define SBB_MEAS_H56_OFFSET ( 0x00000a40U )
#define SBB_MEAS_L56_OFFSET ( 0x00000a44U )
#define SBB_MEAS_H57_OFFSET ( 0x00000a48U )
#define SBB_MEAS_L57_OFFSET ( 0x00000a4cU )
#define SBB_MEAS_H58_OFFSET ( 0x00000a50U )
#define SBB_MEAS_L58_OFFSET ( 0x00000a54U )
#define SBB_MEAS_H59_OFFSET ( 0x00000a58U )
#define SBB_MEAS_L59_OFFSET ( 0x00000a5cU )
#define SBB_MEAS_H60_OFFSET ( 0x00000a60U )
#define SBB_MEAS_L60_OFFSET ( 0x00000a64U )
#define SBB_MEAS_H61_OFFSET ( 0x00000a68U )
#define SBB_MEAS_L61_OFFSET ( 0x00000a6cU )
#define SBB_MEAS_H62_OFFSET ( 0x00000a70U )
#define SBB_MEAS_L62_OFFSET ( 0x00000a74U )
#define SBB_MEAS_H63_OFFSET ( 0x00000a78U )
#define SBB_MEAS_L63_OFFSET ( 0x00000a7cU )
#define SBB_MEAS_H64_OFFSET ( 0x00000a80U )
#define SBB_MEAS_L64_OFFSET ( 0x00000a84U )
#define SBB_MEAS_H65_OFFSET ( 0x00000a88U )
#define SBB_MEAS_L65_OFFSET ( 0x00000a8cU )
#define SBB_MEAS_H66_OFFSET ( 0x00000a90U )
#define SBB_MEAS_L66_OFFSET ( 0x00000a94U )
#define SBB_MEAS_H67_OFFSET ( 0x00000a98U )
#define SBB_MEAS_L67_OFFSET ( 0x00000a9cU )
#define SBB_MEAS_H68_OFFSET ( 0x00000aa0U )
#define SBB_MEAS_L68_OFFSET ( 0x00000aa4U )
#define SBB_MEAS_H69_OFFSET ( 0x00000aa8U )
#define SBB_MEAS_L69_OFFSET ( 0x00000aacU )
#define SBB_MEAS_H70_OFFSET ( 0x00000ab0U )
#define SBB_MEAS_L70_OFFSET ( 0x00000ab4U )
#define SBB_MEAS_H71_OFFSET ( 0x00000ab8U )
#define SBB_MEAS_L71_OFFSET ( 0x00000abcU )
#define SBB_MEAS_H72_OFFSET ( 0x00000ac0U )
#define SBB_MEAS_L72_OFFSET ( 0x00000ac4U )
#define SBB_MEAS_H73_OFFSET ( 0x00000ac8U )
#define SBB_MEAS_L73_OFFSET ( 0x00000accU )
#define SBB_MEAS_H74_OFFSET ( 0x00000ad0U )
#define SBB_MEAS_L74_OFFSET ( 0x00000ad4U )
#define SBB_MEAS_H75_OFFSET ( 0x00000ad8U )
#define SBB_MEAS_L75_OFFSET ( 0x00000adcU )
#define SBB_MEAS_H76_OFFSET ( 0x00000ae0U )
#define SBB_MEAS_L76_OFFSET ( 0x00000ae4U )
#define SBB_MEAS_H77_OFFSET ( 0x00000ae8U )
#define SBB_MEAS_L77_OFFSET ( 0x00000aecU )
#define SBB_MEAS_H78_OFFSET ( 0x00000af0U )
#define SBB_MEAS_L78_OFFSET ( 0x00000af4U )
#define SBB_MEAS_H79_OFFSET ( 0x00000af8U )
#define SBB_MEAS_L79_OFFSET ( 0x00000afcU )
#define SBB_MEAS_H80_OFFSET ( 0x00000b00U )
#define SBB_MEAS_L80_OFFSET ( 0x00000b04U )
#define SBB_MEAS_H81_OFFSET ( 0x00000b08U )
#define SBB_MEAS_L81_OFFSET ( 0x00000b0cU )
#define SBB_MEAS_H82_OFFSET ( 0x00000b10U )
#define SBB_MEAS_L82_OFFSET ( 0x00000b14U )
#define SBB_MEAS_H83_OFFSET ( 0x00000b18U )
#define SBB_MEAS_L83_OFFSET ( 0x00000b1cU )
#define SBB_MEAS_H84_OFFSET ( 0x00000b20U )
#define SBB_MEAS_L84_OFFSET ( 0x00000b24U )
#define SBB_MEAS_H85_OFFSET ( 0x00000b28U )
#define SBB_MEAS_L85_OFFSET ( 0x00000b2cU )
#define SBB_MEAS_H86_OFFSET ( 0x00000b30U )
#define SBB_MEAS_L86_OFFSET ( 0x00000b34U )
#define SBB_MEAS_H87_OFFSET ( 0x00000b38U )
#define SBB_MEAS_L87_OFFSET ( 0x00000b3cU )
#define SBB_MEAS_H88_OFFSET ( 0x00000b40U )
#define SBB_MEAS_L88_OFFSET ( 0x00000b44U )
#define SBB_MEAS_H89_OFFSET ( 0x00000b48U )
#define SBB_MEAS_L89_OFFSET ( 0x00000b4cU )
#define SBB_MEAS_H90_OFFSET ( 0x00000b50U )
#define SBB_MEAS_L90_OFFSET ( 0x00000b54U )
#define SBB_MEAS_H91_OFFSET ( 0x00000b58U )
#define SBB_MEAS_L91_OFFSET ( 0x00000b5cU )
#define SBB_MEAS_H92_OFFSET ( 0x00000b60U )
#define SBB_MEAS_L92_OFFSET ( 0x00000b64U )
#define SBB_MEAS_H93_OFFSET ( 0x00000b68U )
#define SBB_MEAS_L93_OFFSET ( 0x00000b6cU )
#define SBB_MEAS_H94_OFFSET ( 0x00000b70U )
#define SBB_MEAS_L94_OFFSET ( 0x00000b74U )
#define SBB_MEAS_H95_OFFSET ( 0x00000b78U )
#define SBB_MEAS_L95_OFFSET ( 0x00000b7cU )
#define SBB_MEAS_H96_OFFSET ( 0x00000b80U )
#define SBB_MEAS_L96_OFFSET ( 0x00000b84U )
#define SBB_MEAS_H97_OFFSET ( 0x00000b88U )
#define SBB_MEAS_L97_OFFSET ( 0x00000b8cU )
#define SBB_MEAS_H98_OFFSET ( 0x00000b90U )
#define SBB_MEAS_L98_OFFSET ( 0x00000b94U )
#define SBB_MEAS_H99_OFFSET ( 0x00000b98U )
#define SBB_MEAS_L99_OFFSET ( 0x00000b9cU )
#define SBB_MEAS_H100_OFFSET ( 0x00000ba0U )
#define SBB_MEAS_L100_OFFSET ( 0x00000ba4U )
#define SBB_MEAS_H101_OFFSET ( 0x00000ba8U )
#define SBB_MEAS_L101_OFFSET ( 0x00000bacU )
#define SBB_MEAS_H102_OFFSET ( 0x00000bb0U )
#define SBB_MEAS_L102_OFFSET ( 0x00000bb4U )
#define SBB_MEAS_H103_OFFSET ( 0x00000bb8U )
#define SBB_MEAS_L103_OFFSET ( 0x00000bbcU )
#define SBB_MEAS_H104_OFFSET ( 0x00000bc0U )
#define SBB_MEAS_L104_OFFSET ( 0x00000bc4U )
#define SBB_MEAS_H105_OFFSET ( 0x00000bc8U )
#define SBB_MEAS_L105_OFFSET ( 0x00000bccU )
#define SBB_MEAS_H106_OFFSET ( 0x00000bd0U )
#define SBB_MEAS_L106_OFFSET ( 0x00000bd4U )
#define SBB_MEAS_H107_OFFSET ( 0x00000bd8U )
#define SBB_MEAS_L107_OFFSET ( 0x00000bdcU )
#define SBB_MEAS_H108_OFFSET ( 0x00000be0U )
#define SBB_MEAS_L108_OFFSET ( 0x00000be4U )
#define SBB_MEAS_H109_OFFSET ( 0x00000be8U )
#define SBB_MEAS_L109_OFFSET ( 0x00000becU )
#define SBB_MEAS_H110_OFFSET ( 0x00000bf0U )
#define SBB_MEAS_L110_OFFSET ( 0x00000bf4U )
#define SBB_MEAS_H111_OFFSET ( 0x00000bf8U )
#define SBB_MEAS_L111_OFFSET ( 0x00000bfcU )
#define SBB_MEAS_H112_OFFSET ( 0x00000c00U )
#define SBB_MEAS_L112_OFFSET ( 0x00000c04U )
#define SBB_MEAS_H113_OFFSET ( 0x00000c08U )
#define SBB_MEAS_L113_OFFSET ( 0x00000c0cU )
#define SBB_MEAS_H114_OFFSET ( 0x00000c10U )
#define SBB_MEAS_L114_OFFSET ( 0x00000c14U )
#define SBB_MEAS_H115_OFFSET ( 0x00000c18U )
#define SBB_MEAS_L115_OFFSET ( 0x00000c1cU )
#define SBB_MEAS_H116_OFFSET ( 0x00000c20U )
#define SBB_MEAS_L116_OFFSET ( 0x00000c24U )
#define SBB_MEAS_H117_OFFSET ( 0x00000c28U )
#define SBB_MEAS_L117_OFFSET ( 0x00000c2cU )
#define SBB_MEAS_H118_OFFSET ( 0x00000c30U )
#define SBB_MEAS_L118_OFFSET ( 0x00000c34U )
#define SBB_MEAS_H119_OFFSET ( 0x00000c38U )
#define SBB_MEAS_L119_OFFSET ( 0x00000c3cU )
#define SBB_MEAS_H120_OFFSET ( 0x00000c40U )
#define SBB_MEAS_L120_OFFSET ( 0x00000c44U )
#define SBB_MEAS_H121_OFFSET ( 0x00000c48U )
#define SBB_MEAS_L121_OFFSET ( 0x00000c4cU )
#define SBB_MEAS_H122_OFFSET ( 0x00000c50U )
#define SBB_MEAS_L122_OFFSET ( 0x00000c54U )
#define SBB_MEAS_H123_OFFSET ( 0x00000c58U )
#define SBB_MEAS_L123_OFFSET ( 0x00000c5cU )
#define SBB_MEAS_H124_OFFSET ( 0x00000c60U )
#define SBB_MEAS_L124_OFFSET ( 0x00000c64U )
#define SBB_MEAS_H125_OFFSET ( 0x00000c68U )
#define SBB_MEAS_L125_OFFSET ( 0x00000c6cU )
#define SBB_MEAS_H126_OFFSET ( 0x00000c70U )
#define SBB_MEAS_L126_OFFSET ( 0x00000c74U )
#define SBB_MEAS_H127_OFFSET ( 0x00000c78U )
#define SBB_MEAS_L127_OFFSET ( 0x00000c7cU )
#define SBB_MEAS_H128_OFFSET ( 0x00000c80U )
#define SBB_MEAS_L128_OFFSET ( 0x00000c84U )
#define SBB_MEAS_H129_OFFSET ( 0x00000c88U )
#define SBB_MEAS_L129_OFFSET ( 0x00000c8cU )
#define SBB_MEAS_H130_OFFSET ( 0x00000c90U )
#define SBB_MEAS_L130_OFFSET ( 0x00000c94U )
#define SBB_MEAS_H131_OFFSET ( 0x00000c98U )
#define SBB_MEAS_L131_OFFSET ( 0x00000c9cU )
#define SBB_MEAS_H132_OFFSET ( 0x00000ca0U )
#define SBB_MEAS_L132_OFFSET ( 0x00000ca4U )
#define SBB_MEAS_H133_OFFSET ( 0x00000ca8U )
#define SBB_MEAS_L133_OFFSET ( 0x00000cacU )
#define SBB_MEAS_H134_OFFSET ( 0x00000cb0U )
#define SBB_MEAS_L134_OFFSET ( 0x00000cb4U )
#define SBB_MEAS_H135_OFFSET ( 0x00000cb8U )
#define SBB_MEAS_L135_OFFSET ( 0x00000cbcU )
#define SBB_MEAS_H136_OFFSET ( 0x00000cc0U )
#define SBB_MEAS_L136_OFFSET ( 0x00000cc4U )
#define SBB_MEAS_H137_OFFSET ( 0x00000cc8U )
#define SBB_MEAS_L137_OFFSET ( 0x00000cccU )
#define SBB_MEAS_H138_OFFSET ( 0x00000cd0U )
#define SBB_MEAS_L138_OFFSET ( 0x00000cd4U )
#define SBB_MEAS_H139_OFFSET ( 0x00000cd8U )
#define SBB_MEAS_L139_OFFSET ( 0x00000cdcU )
#define SBB_MEAS_H140_OFFSET ( 0x00000ce0U )
#define SBB_MEAS_L140_OFFSET ( 0x00000ce4U )
#define SBB_MEAS_H141_OFFSET ( 0x00000ce8U )
#define SBB_MEAS_L141_OFFSET ( 0x00000cecU )
#define SBB_MEAS_H142_OFFSET ( 0x00000cf0U )
#define SBB_MEAS_L142_OFFSET ( 0x00000cf4U )
#define SBB_MEAS_H143_OFFSET ( 0x00000cf8U )
#define SBB_MEAS_L143_OFFSET ( 0x00000cfcU )
#define SBB_PCR_H0_OFFSET ( 0x00000d00U )
#define SBB_PCR_L0_OFFSET ( 0x00000d04U )
#define SBB_PCR_H1_OFFSET ( 0x00000d08U )
#define SBB_PCR_L1_OFFSET ( 0x00000d0cU )
#define SBB_PCR_H2_OFFSET ( 0x00000d10U )
#define SBB_PCR_L2_OFFSET ( 0x00000d14U )
#define SBB_PCR_H3_OFFSET ( 0x00000d18U )
#define SBB_PCR_L3_OFFSET ( 0x00000d1cU )
#define SBB_PCR_H4_OFFSET ( 0x00000d20U )
#define SBB_PCR_L4_OFFSET ( 0x00000d24U )
#define SBB_PCR_H5_OFFSET ( 0x00000d28U )
#define SBB_PCR_L5_OFFSET ( 0x00000d2cU )
#define SBB_PCR_H6_OFFSET ( 0x00000d30U )
#define SBB_PCR_L6_OFFSET ( 0x00000d34U )
#define SBB_PCR_H7_OFFSET ( 0x00000d38U )
#define SBB_PCR_L7_OFFSET ( 0x00000d3cU )
#define SBB_PCR_H8_OFFSET ( 0x00000d40U )
#define SBB_PCR_L8_OFFSET ( 0x00000d44U )
#define SBB_INT_STS_OFFSET ( 0x00000e04U )
#define SBB_INT_EN_OFFSET ( 0x00000e0cU )
#define SBB_INT_FRC_OFFSET ( 0x00000e14U )
#define SBB_VER_H0_OFFSET ( 0x00001000U )
#define SBB_VER_L0_OFFSET ( 0x00001004U )
#define SBB_VER_H1_OFFSET ( 0x00001008U )
#define SBB_VER_L1_OFFSET ( 0x0000100cU )
#define SBB_VER_H2_OFFSET ( 0x00001010U )
#define SBB_VER_L2_OFFSET ( 0x00001014U )
#define SBB_VER_H3_OFFSET ( 0x00001018U )
#define SBB_VER_L3_OFFSET ( 0x0000101cU )
#define SBB_EFUSE_H0_OFFSET ( 0x00001020U )
#define SBB_EFUSE_L0_OFFSET ( 0x00001024U )
#define SBB_EFUSE_H1_OFFSET ( 0x00001028U )
#define SBB_EFUSE_L1_OFFSET ( 0x0000102cU )
#define SBB_EFUSE_H2_OFFSET ( 0x00001030U )
#define SBB_EFUSE_L2_OFFSET ( 0x00001034U )
#define SBB_EFUSE_H3_OFFSET ( 0x00001038U )
#define SBB_EFUSE_L3_OFFSET ( 0x0000103cU )
#define SBB_EFUSE_H4_OFFSET ( 0x00001040U )
#define SBB_EFUSE_L4_OFFSET ( 0x00001044U )
#define SBB_EFUSE_H5_OFFSET ( 0x00001048U )
#define SBB_EFUSE_L5_OFFSET ( 0x0000104cU )
#define SBB_EFUSE_H6_OFFSET ( 0x00001050U )
#define SBB_EFUSE_L6_OFFSET ( 0x00001054U )
#define SBB_EFUSE_H7_OFFSET ( 0x00001058U )
#define SBB_EFUSE_L7_OFFSET ( 0x0000105cU )
#define SBB_EFUSE_H8_OFFSET ( 0x00001060U )
#define SBB_EFUSE_L8_OFFSET ( 0x00001064U )
#define SBB_EFUSE_H9_OFFSET ( 0x00001068U )
#define SBB_EFUSE_L9_OFFSET ( 0x0000106cU )
#define SBB_EFUSE_H10_OFFSET ( 0x00001070U )
#define SBB_EFUSE_L10_OFFSET ( 0x00001074U )
#define SBB_EFUSE_H11_OFFSET ( 0x00001078U )
#define SBB_EFUSE_L11_OFFSET ( 0x0000107cU )
#define SBB_EFUSE_H12_OFFSET ( 0x00001080U )
#define SBB_EFUSE_L12_OFFSET ( 0x00001084U )
#define SBB_EFUSE_H13_OFFSET ( 0x00001088U )
#define SBB_EFUSE_L13_OFFSET ( 0x0000108cU )
#define SBB_EFUSE_H14_OFFSET ( 0x00001090U )
#define SBB_EFUSE_L14_OFFSET ( 0x00001094U )
#define SBB_EFUSE_H15_OFFSET ( 0x00001098U )
#define SBB_EFUSE_L15_OFFSET ( 0x0000109cU )
#define SBB_EFUSE_H16_OFFSET ( 0x000010a0U )
#define SBB_EFUSE_L16_OFFSET ( 0x000010a4U )
#define SBB_EFUSE_H17_OFFSET ( 0x000010a8U )
#define SBB_EFUSE_L17_OFFSET ( 0x000010acU )
#define SBB_EFUSE_H18_OFFSET ( 0x000010b0U )
#define SBB_EFUSE_L18_OFFSET ( 0x000010b4U )
#define SBB_EFUSE_H19_OFFSET ( 0x000010b8U )
#define SBB_EFUSE_L19_OFFSET ( 0x000010bcU )
#define SBB_EFUSE_H20_OFFSET ( 0x000010c0U )
#define SBB_EFUSE_L20_OFFSET ( 0x000010c4U )
#define SBB_EFUSE_H21_OFFSET ( 0x000010c8U )
#define SBB_EFUSE_L21_OFFSET ( 0x000010ccU )
#define SBB_EFUSE_H22_OFFSET ( 0x000010d0U )
#define SBB_EFUSE_L22_OFFSET ( 0x000010d4U )
#define SBB_EFUSE_H23_OFFSET ( 0x000010d8U )
#define SBB_EFUSE_L23_OFFSET ( 0x000010dcU )
#define SBB_EFUSE_H24_OFFSET ( 0x000010e0U )
#define SBB_EFUSE_L24_OFFSET ( 0x000010e4U )
#define SBB_EFUSE_H25_OFFSET ( 0x000010e8U )
#define SBB_EFUSE_L25_OFFSET ( 0x000010ecU )
#define SBB_EFUSE_H26_OFFSET ( 0x000010f0U )
#define SBB_EFUSE_L26_OFFSET ( 0x000010f4U )
#define SBB_EFUSE_H27_OFFSET ( 0x000010f8U )
#define SBB_EFUSE_L27_OFFSET ( 0x000010fcU )
#define SBB_EFUSE_H28_OFFSET ( 0x00001100U )
#define SBB_EFUSE_L28_OFFSET ( 0x00001104U )
#define SBB_EFUSE_H29_OFFSET ( 0x00001108U )
#define SBB_EFUSE_L29_OFFSET ( 0x0000110cU )
#define SBB_EFUSE_H30_OFFSET ( 0x00001110U )
#define SBB_EFUSE_L30_OFFSET ( 0x00001114U )
#define SBB_EFUSE_H31_OFFSET ( 0x00001118U )
#define SBB_EFUSE_L31_OFFSET ( 0x0000111cU )
#define SBB_EFUSE_H32_OFFSET ( 0x00001120U )
#define SBB_EFUSE_L32_OFFSET ( 0x00001124U )
#define SBB_EFUSE_H33_OFFSET ( 0x00001128U )
#define SBB_EFUSE_L33_OFFSET ( 0x0000112cU )
#define SBB_EFUSE_H34_OFFSET ( 0x00001130U )
#define SBB_EFUSE_L34_OFFSET ( 0x00001134U )
#define SBB_EFUSE_H35_OFFSET ( 0x00001138U )
#define SBB_EFUSE_L35_OFFSET ( 0x0000113cU )
#define SBB_EFUSE_H36_OFFSET ( 0x00001140U )
#define SBB_EFUSE_L36_OFFSET ( 0x00001144U )
#define SBB_EFUSE_H37_OFFSET ( 0x00001148U )
#define SBB_EFUSE_L37_OFFSET ( 0x0000114cU )
#define SBB_EFUSE_H38_OFFSET ( 0x00001150U )
#define SBB_EFUSE_L38_OFFSET ( 0x00001154U )
#define SBB_EFUSE_H39_OFFSET ( 0x00001158U )
#define SBB_EFUSE_L39_OFFSET ( 0x0000115cU )
#define SBB_EFUSE_H40_OFFSET ( 0x00001160U )
#define SBB_EFUSE_L40_OFFSET ( 0x00001164U )
#define SBB_EFUSE_H41_OFFSET ( 0x00001168U )
#define SBB_EFUSE_L41_OFFSET ( 0x0000116cU )
#define SBB_EFUSE_H42_OFFSET ( 0x00001170U )
#define SBB_EFUSE_L42_OFFSET ( 0x00001174U )
#define SBB_EFUSE_H43_OFFSET ( 0x00001178U )
#define SBB_EFUSE_L43_OFFSET ( 0x0000117cU )
#define SBB_EFUSE_H44_OFFSET ( 0x00001180U )
#define SBB_EFUSE_L44_OFFSET ( 0x00001184U )
#define SBB_EFUSE_H45_OFFSET ( 0x00001188U )
#define SBB_EFUSE_L45_OFFSET ( 0x0000118cU )
#define SBB_EFUSE_H46_OFFSET ( 0x00001190U )
#define SBB_EFUSE_L46_OFFSET ( 0x00001194U )
#define SBB_EFUSE_H47_OFFSET ( 0x00001198U )
#define SBB_EFUSE_L47_OFFSET ( 0x0000119cU )
#define SBB_EFUSE_H48_OFFSET ( 0x000011a0U )
#define SBB_EFUSE_L48_OFFSET ( 0x000011a4U )
#define SBB_EFUSE_H49_OFFSET ( 0x000011a8U )
#define SBB_EFUSE_L49_OFFSET ( 0x000011acU )
#define SBB_EFUSE_H50_OFFSET ( 0x000011b0U )
#define SBB_EFUSE_L50_OFFSET ( 0x000011b4U )
#define SBB_EFUSE_H51_OFFSET ( 0x000011b8U )
#define SBB_EFUSE_L51_OFFSET ( 0x000011bcU )
#define SBB_EFUSE_H52_OFFSET ( 0x000011c0U )
#define SBB_EFUSE_L52_OFFSET ( 0x000011c4U )
#define SBB_EFUSE_H53_OFFSET ( 0x000011c8U )
#define SBB_EFUSE_L53_OFFSET ( 0x000011ccU )
#define SBB_EFUSE_H54_OFFSET ( 0x000011d0U )
#define SBB_EFUSE_L54_OFFSET ( 0x000011d4U )
#define SBB_EFUSE_H55_OFFSET ( 0x000011d8U )
#define SBB_EFUSE_L55_OFFSET ( 0x000011dcU )
#define SBB_EFUSE_H56_OFFSET ( 0x000011e0U )
#define SBB_EFUSE_L56_OFFSET ( 0x000011e4U )
#define SBB_EFUSE_H57_OFFSET ( 0x000011e8U )
#define SBB_EFUSE_L57_OFFSET ( 0x000011ecU )
#define SBB_EFUSE_H58_OFFSET ( 0x000011f0U )
#define SBB_EFUSE_L58_OFFSET ( 0x000011f4U )
#define SBB_EFUSE_H59_OFFSET ( 0x000011f8U )
#define SBB_EFUSE_L59_OFFSET ( 0x000011fcU )
#define SBB_EFUSE_H60_OFFSET ( 0x00001200U )
#define SBB_EFUSE_L60_OFFSET ( 0x00001204U )
#define SBB_EFUSE_H61_OFFSET ( 0x00001208U )
#define SBB_EFUSE_L61_OFFSET ( 0x0000120cU )
#define SBB_EFUSE_H62_OFFSET ( 0x00001210U )
#define SBB_EFUSE_L62_OFFSET ( 0x00001214U )
#define SBB_EFUSE_H63_OFFSET ( 0x00001218U )
#define SBB_EFUSE_L63_OFFSET ( 0x0000121cU )
#define SBB_EFUSE_H64_OFFSET ( 0x00001220U )
#define SBB_EFUSE_L64_OFFSET ( 0x00001224U )
#define SBB_EFUSE_H65_OFFSET ( 0x00001228U )
#define SBB_EFUSE_L65_OFFSET ( 0x0000122cU )
#define SBB_EFUSE_H66_OFFSET ( 0x00001230U )
#define SBB_EFUSE_L66_OFFSET ( 0x00001234U )
#define SBB_EFUSE_H67_OFFSET ( 0x00001238U )
#define SBB_EFUSE_L67_OFFSET ( 0x0000123cU )
#define SBB_EFUSE_H68_OFFSET ( 0x00001240U )
#define SBB_EFUSE_L68_OFFSET ( 0x00001244U )
#define SBB_EFUSE_H69_OFFSET ( 0x00001248U )
#define SBB_EFUSE_L69_OFFSET ( 0x0000124cU )
#define SBB_EFUSE_H70_OFFSET ( 0x00001250U )
#define SBB_EFUSE_L70_OFFSET ( 0x00001254U )
#define SBB_EFUSE_H71_OFFSET ( 0x00001258U )
#define SBB_EFUSE_L71_OFFSET ( 0x0000125cU )
#define SBB_EFUSE_H72_OFFSET ( 0x00001260U )
#define SBB_EFUSE_L72_OFFSET ( 0x00001264U )
#define SBB_EFUSE_H73_OFFSET ( 0x00001268U )
#define SBB_EFUSE_L73_OFFSET ( 0x0000126cU )
#define SBB_EFUSE_H74_OFFSET ( 0x00001270U )
#define SBB_EFUSE_L74_OFFSET ( 0x00001274U )
#define SBB_EFUSE_H75_OFFSET ( 0x00001278U )
#define SBB_EFUSE_L75_OFFSET ( 0x0000127cU )
#define SBB_EFUSE_H76_OFFSET ( 0x00001280U )
#define SBB_EFUSE_L76_OFFSET ( 0x00001284U )
#define SBB_EFUSE_H77_OFFSET ( 0x00001288U )
#define SBB_EFUSE_L77_OFFSET ( 0x0000128cU )
#define SBB_EFUSE_H78_OFFSET ( 0x00001290U )
#define SBB_EFUSE_L78_OFFSET ( 0x00001294U )
#define SBB_EFUSE_H79_OFFSET ( 0x00001298U )
#define SBB_EFUSE_L79_OFFSET ( 0x0000129cU )
#define SBB_EFUSE_H80_OFFSET ( 0x000012a0U )
#define SBB_EFUSE_L80_OFFSET ( 0x000012a4U )
#define SBB_EFUSE_H81_OFFSET ( 0x000012a8U )
#define SBB_EFUSE_L81_OFFSET ( 0x000012acU )
#define SBB_EFUSE_H82_OFFSET ( 0x000012b0U )
#define SBB_EFUSE_L82_OFFSET ( 0x000012b4U )
#define SBB_EFUSE_H83_OFFSET ( 0x000012b8U )
#define SBB_EFUSE_L83_OFFSET ( 0x000012bcU )
#define SBB_EFUSE_H84_OFFSET ( 0x000012c0U )
#define SBB_EFUSE_L84_OFFSET ( 0x000012c4U )
#define SBB_EFUSE_H85_OFFSET ( 0x000012c8U )
#define SBB_EFUSE_L85_OFFSET ( 0x000012ccU )
#define SBB_EFUSE_H86_OFFSET ( 0x000012d0U )
#define SBB_EFUSE_L86_OFFSET ( 0x000012d4U )
#define SBB_EFUSE_H87_OFFSET ( 0x000012d8U )
#define SBB_EFUSE_L87_OFFSET ( 0x000012dcU )
#define SBB_EFUSE_H88_OFFSET ( 0x000012e0U )
#define SBB_EFUSE_L88_OFFSET ( 0x000012e4U )
#define SBB_EFUSE_H89_OFFSET ( 0x000012e8U )
#define SBB_EFUSE_L89_OFFSET ( 0x000012ecU )
#define SBB_EFUSE_H90_OFFSET ( 0x000012f0U )
#define SBB_EFUSE_L90_OFFSET ( 0x000012f4U )
#define SBB_EFUSE_H91_OFFSET ( 0x000012f8U )
#define SBB_EFUSE_L91_OFFSET ( 0x000012fcU )
#define SBB_EFUSE_H92_OFFSET ( 0x00001300U )
#define SBB_EFUSE_L92_OFFSET ( 0x00001304U )
#define SBB_EFUSE_H93_OFFSET ( 0x00001308U )
#define SBB_EFUSE_L93_OFFSET ( 0x0000130cU )
#define SBB_EFUSE_H94_OFFSET ( 0x00001310U )
#define SBB_EFUSE_L94_OFFSET ( 0x00001314U )
#define SBB_EFUSE_H95_OFFSET ( 0x00001318U )
#define SBB_EFUSE_L95_OFFSET ( 0x0000131cU )
#define SBB_EFUSE_H96_OFFSET ( 0x00001320U )
#define SBB_EFUSE_L96_OFFSET ( 0x00001324U )
#define SBB_EFUSE_H97_OFFSET ( 0x00001328U )
#define SBB_EFUSE_L97_OFFSET ( 0x0000132cU )
#define SBB_EFUSE_H98_OFFSET ( 0x00001330U )
#define SBB_EFUSE_L98_OFFSET ( 0x00001334U )
#define SBB_EFUSE_H99_OFFSET ( 0x00001338U )
#define SBB_EFUSE_L99_OFFSET ( 0x0000133cU )
#define SBB_EFUSE_H100_OFFSET ( 0x00001340U )
#define SBB_EFUSE_L100_OFFSET ( 0x00001344U )
#define SBB_EFUSE_H101_OFFSET ( 0x00001348U )
#define SBB_EFUSE_L101_OFFSET ( 0x0000134cU )
#define SBB_EFUSE_H102_OFFSET ( 0x00001350U )
#define SBB_EFUSE_L102_OFFSET ( 0x00001354U )
#define SBB_EFUSE_H103_OFFSET ( 0x00001358U )
#define SBB_EFUSE_L103_OFFSET ( 0x0000135cU )
#define SBB_EFUSE_H104_OFFSET ( 0x00001360U )
#define SBB_EFUSE_L104_OFFSET ( 0x00001364U )
#define SBB_EFUSE_H105_OFFSET ( 0x00001368U )
#define SBB_EFUSE_L105_OFFSET ( 0x0000136cU )
#define SBB_EFUSE_H106_OFFSET ( 0x00001370U )
#define SBB_EFUSE_L106_OFFSET ( 0x00001374U )
#define SBB_EFUSE_H107_OFFSET ( 0x00001378U )
#define SBB_EFUSE_L107_OFFSET ( 0x0000137cU )
#define SBB_EFUSE_H108_OFFSET ( 0x00001380U )
#define SBB_EFUSE_L108_OFFSET ( 0x00001384U )
#define SBB_EFUSE_H109_OFFSET ( 0x00001388U )
#define SBB_EFUSE_L109_OFFSET ( 0x0000138cU )
#define SBB_EFUSE_H110_OFFSET ( 0x00001390U )
#define SBB_EFUSE_L110_OFFSET ( 0x00001394U )
#define SBB_EFUSE_H111_OFFSET ( 0x00001398U )
#define SBB_EFUSE_L111_OFFSET ( 0x0000139cU )
#define SBB_PARAM_EXT_H0_OFFSET ( 0x00001600U )
#define SBB_PARAM_EXT_L0_OFFSET ( 0x00001604U )
#define SBB_PARAM_EXT_H1_OFFSET ( 0x00001608U )
#define SBB_PARAM_EXT_L1_OFFSET ( 0x0000160cU )
#define SBB_PARAM_EXT_H2_OFFSET ( 0x00001610U )
#define SBB_PARAM_EXT_L2_OFFSET ( 0x00001614U )
#define SBB_PARAM_EXT_H3_OFFSET ( 0x00001618U )
#define SBB_PARAM_EXT_L3_OFFSET ( 0x0000161cU )
#define SBB_PARAM_EXT_H4_OFFSET ( 0x00001620U )
#define SBB_PARAM_EXT_L4_OFFSET ( 0x00001624U )
#define SBB_PARAM_EXT_H5_OFFSET ( 0x00001628U )
#define SBB_PARAM_EXT_L5_OFFSET ( 0x0000162cU )
#define SBB_PARAM_EXT_H6_OFFSET ( 0x00001630U )
#define SBB_PARAM_EXT_L6_OFFSET ( 0x00001634U )
#define SBB_PARAM_EXT_H7_OFFSET ( 0x00001638U )
#define SBB_PARAM_EXT_L7_OFFSET ( 0x0000163cU )
#define SBB_PARAM_EXT_H8_OFFSET ( 0x00001640U )
#define SBB_PARAM_EXT_L8_OFFSET ( 0x00001644U )
#define SBB_PARAM_EXT_H9_OFFSET ( 0x00001648U )
#define SBB_PARAM_EXT_L9_OFFSET ( 0x0000164cU )
#define SBB_PARAM_EXT_H10_OFFSET ( 0x00001650U )
#define SBB_PARAM_EXT_L10_OFFSET ( 0x00001654U )
#define SBB_PARAM_EXT_H11_OFFSET ( 0x00001658U )
#define SBB_PARAM_EXT_L11_OFFSET ( 0x0000165cU )
#define SBB_PARAM_EXT_H12_OFFSET ( 0x00001660U )
#define SBB_PARAM_EXT_L12_OFFSET ( 0x00001664U )
#define SBB_PARAM_EXT_H13_OFFSET ( 0x00001668U )
#define SBB_PARAM_EXT_L13_OFFSET ( 0x0000166cU )
#define SBB_PARAM_EXT_H14_OFFSET ( 0x00001670U )
#define SBB_PARAM_EXT_L14_OFFSET ( 0x00001674U )
#define SBB_PARAM_EXT_H15_OFFSET ( 0x00001678U )
#define SBB_PARAM_EXT_L15_OFFSET ( 0x0000167cU )
#define SBB_PARAM_EXT_H16_OFFSET ( 0x00001680U )
#define SBB_PARAM_EXT_L16_OFFSET ( 0x00001684U )
#define SBB_PARAM_EXT_H17_OFFSET ( 0x00001688U )
#define SBB_PARAM_EXT_L17_OFFSET ( 0x0000168cU )
#define SBB_PARAM_EXT_H18_OFFSET ( 0x00001690U )
#define SBB_PARAM_EXT_L18_OFFSET ( 0x00001694U )
#define SBB_PARAM_EXT_H19_OFFSET ( 0x00001698U )
#define SBB_PARAM_EXT_L19_OFFSET ( 0x0000169cU )
#define SBB_PARAM_EXT_H20_OFFSET ( 0x000016a0U )
#define SBB_PARAM_EXT_L20_OFFSET ( 0x000016a4U )
#define SBB_PARAM_EXT_H21_OFFSET ( 0x000016a8U )
#define SBB_PARAM_EXT_L21_OFFSET ( 0x000016acU )
#define SBB_PARAM_EXT_H22_OFFSET ( 0x000016b0U )
#define SBB_PARAM_EXT_L22_OFFSET ( 0x000016b4U )
#define SBB_PARAM_EXT_H23_OFFSET ( 0x000016b8U )
#define SBB_PARAM_EXT_L23_OFFSET ( 0x000016bcU )
#define SBB_PARAM_EXT_H24_OFFSET ( 0x000016c0U )
#define SBB_PARAM_EXT_L24_OFFSET ( 0x000016c4U )
#define SBB_PARAM_EXT_H25_OFFSET ( 0x000016c8U )
#define SBB_PARAM_EXT_L25_OFFSET ( 0x000016ccU )
#define SBB_PARAM_EXT_H26_OFFSET ( 0x000016d0U )
#define SBB_PARAM_EXT_L26_OFFSET ( 0x000016d4U )
#define SBB_PARAM_EXT_H27_OFFSET ( 0x000016d8U )
#define SBB_PARAM_EXT_L27_OFFSET ( 0x000016dcU )
#define SBB_PARAM_EXT_H28_OFFSET ( 0x000016e0U )
#define SBB_PARAM_EXT_L28_OFFSET ( 0x000016e4U )
#define SBB_PARAM_EXT_H29_OFFSET ( 0x000016e8U )
#define SBB_PARAM_EXT_L29_OFFSET ( 0x000016ecU )
#define SBB_PARAM_EXT_H30_OFFSET ( 0x000016f0U )
#define SBB_PARAM_EXT_L30_OFFSET ( 0x000016f4U )
#define SBB_PARAM_EXT_H31_OFFSET ( 0x000016f8U )
#define SBB_PARAM_EXT_L31_OFFSET ( 0x000016fcU )
#define SBB_PARAM_EXT_H32_OFFSET ( 0x00001700U )
#define SBB_PARAM_EXT_L32_OFFSET ( 0x00001704U )
#define SBB_PARAM_EXT_H33_OFFSET ( 0x00001708U )
#define SBB_PARAM_EXT_L33_OFFSET ( 0x0000170cU )
#define SBB_PARAM_EXT_H34_OFFSET ( 0x00001710U )
#define SBB_PARAM_EXT_L34_OFFSET ( 0x00001714U )
#define SBB_PARAM_EXT_H35_OFFSET ( 0x00001718U )
#define SBB_PARAM_EXT_L35_OFFSET ( 0x0000171cU )
#define SBB_PARAM_EXT_H36_OFFSET ( 0x00001720U )
#define SBB_PARAM_EXT_L36_OFFSET ( 0x00001724U )
#define SBB_PARAM_EXT_H37_OFFSET ( 0x00001728U )
#define SBB_PARAM_EXT_L37_OFFSET ( 0x0000172cU )
#define SBB_PARAM_EXT_H38_OFFSET ( 0x00001730U )
#define SBB_PARAM_EXT_L38_OFFSET ( 0x00001734U )
#define SBB_PARAM_EXT_H39_OFFSET ( 0x00001738U )
#define SBB_PARAM_EXT_L39_OFFSET ( 0x0000173cU )
#define SBB_PARAM_EXT_H40_OFFSET ( 0x00001740U )
#define SBB_PARAM_EXT_L40_OFFSET ( 0x00001744U )
#define SBB_PARAM_EXT_H41_OFFSET ( 0x00001748U )
#define SBB_PARAM_EXT_L41_OFFSET ( 0x0000174cU )
#define SBB_PARAM_EXT_H42_OFFSET ( 0x00001750U )
#define SBB_PARAM_EXT_L42_OFFSET ( 0x00001754U )
#define SBB_PARAM_EXT_H43_OFFSET ( 0x00001758U )
#define SBB_PARAM_EXT_L43_OFFSET ( 0x0000175cU )
#define SBB_PARAM_EXT_H44_OFFSET ( 0x00001760U )
#define SBB_PARAM_EXT_L44_OFFSET ( 0x00001764U )
#define SBB_PARAM_EXT_H45_OFFSET ( 0x00001768U )
#define SBB_PARAM_EXT_L45_OFFSET ( 0x0000176cU )
#define SBB_PARAM_EXT_H46_OFFSET ( 0x00001770U )
#define SBB_PARAM_EXT_L46_OFFSET ( 0x00001774U )
#define SBB_PARAM_EXT_H47_OFFSET ( 0x00001778U )
#define SBB_PARAM_EXT_L47_OFFSET ( 0x0000177cU )
#define SBB_PARAM_EXT_H48_OFFSET ( 0x00001780U )
#define SBB_PARAM_EXT_L48_OFFSET ( 0x00001784U )
#define SBB_PARAM_EXT_H49_OFFSET ( 0x00001788U )
#define SBB_PARAM_EXT_L49_OFFSET ( 0x0000178cU )
#define SBB_PARAM_EXT_H50_OFFSET ( 0x00001790U )
#define SBB_PARAM_EXT_L50_OFFSET ( 0x00001794U )
#define SBB_PARAM_EXT_H51_OFFSET ( 0x00001798U )
#define SBB_PARAM_EXT_L51_OFFSET ( 0x0000179cU )
#define SBB_PARAM_EXT_H52_OFFSET ( 0x000017a0U )
#define SBB_PARAM_EXT_L52_OFFSET ( 0x000017a4U )
#define SBB_PARAM_EXT_H53_OFFSET ( 0x000017a8U )
#define SBB_PARAM_EXT_L53_OFFSET ( 0x000017acU )
#define SBB_PARAM_EXT_H54_OFFSET ( 0x000017b0U )
#define SBB_PARAM_EXT_L54_OFFSET ( 0x000017b4U )
#define SBB_PARAM_EXT_H55_OFFSET ( 0x000017b8U )
#define SBB_PARAM_EXT_L55_OFFSET ( 0x000017bcU )
#define SBB_PARAM_EXT_H56_OFFSET ( 0x000017c0U )
#define SBB_PARAM_EXT_L56_OFFSET ( 0x000017c4U )
#define SBB_PARAM_EXT_H57_OFFSET ( 0x000017c8U )
#define SBB_PARAM_EXT_L57_OFFSET ( 0x000017ccU )
#define SBB_PARAM_EXT_H58_OFFSET ( 0x000017d0U )
#define SBB_PARAM_EXT_L58_OFFSET ( 0x000017d4U )
#define SBB_PARAM_EXT_H59_OFFSET ( 0x000017d8U )
#define SBB_PARAM_EXT_L59_OFFSET ( 0x000017dcU )
#define SBB_PARAM_EXT_H60_OFFSET ( 0x000017e0U )
#define SBB_PARAM_EXT_L60_OFFSET ( 0x000017e4U )
#define SBB_PARAM_EXT_H61_OFFSET ( 0x000017e8U )
#define SBB_PARAM_EXT_L61_OFFSET ( 0x000017ecU )
#define SBB_PARAM_EXT_H62_OFFSET ( 0x000017f0U )
#define SBB_PARAM_EXT_L62_OFFSET ( 0x000017f4U )
#define SBB_PARAM_EXT_H63_OFFSET ( 0x000017f8U )
#define SBB_PARAM_EXT_L63_OFFSET ( 0x000017fcU )
#define SBB_PARAM_H0_OFFSET ( 0x00001800U )
#define SBB_PARAM_L0_OFFSET ( 0x00001804U )
#define SBB_PARAM_H1_OFFSET ( 0x00001808U )
#define SBB_PARAM_L1_OFFSET ( 0x0000180cU )
#define SBB_PARAM_H2_OFFSET ( 0x00001810U )
#define SBB_PARAM_L2_OFFSET ( 0x00001814U )
#define SBB_PARAM_H3_OFFSET ( 0x00001818U )
#define SBB_PARAM_L3_OFFSET ( 0x0000181cU )
#define SBB_PARAM_H4_OFFSET ( 0x00001820U )
#define SBB_PARAM_L4_OFFSET ( 0x00001824U )
#define SBB_PARAM_H5_OFFSET ( 0x00001828U )
#define SBB_PARAM_L5_OFFSET ( 0x0000182cU )
#define SBB_PARAM_H6_OFFSET ( 0x00001830U )
#define SBB_PARAM_L6_OFFSET ( 0x00001834U )
#define SBB_PARAM_H7_OFFSET ( 0x00001838U )
#define SBB_PARAM_L7_OFFSET ( 0x0000183cU )
#define SBB_PARAM_H8_OFFSET ( 0x00001840U )
#define SBB_PARAM_L8_OFFSET ( 0x00001844U )
#define SBB_PARAM_H9_OFFSET ( 0x00001848U )
#define SBB_PARAM_L9_OFFSET ( 0x0000184cU )
#define SBB_PARAM_H10_OFFSET ( 0x00001850U )
#define SBB_PARAM_L10_OFFSET ( 0x00001854U )
#define SBB_PARAM_H11_OFFSET ( 0x00001858U )
#define SBB_PARAM_L11_OFFSET ( 0x0000185cU )
#define SBB_PARAM_H12_OFFSET ( 0x00001860U )
#define SBB_PARAM_L12_OFFSET ( 0x00001864U )
#define SBB_PARAM_H13_OFFSET ( 0x00001868U )
#define SBB_PARAM_L13_OFFSET ( 0x0000186cU )
#define SBB_PARAM_H14_OFFSET ( 0x00001870U )
#define SBB_PARAM_L14_OFFSET ( 0x00001874U )
#define SBB_PARAM_H15_OFFSET ( 0x00001878U )
#define SBB_PARAM_L15_OFFSET ( 0x0000187cU )
#define SBB_PARAM_H16_OFFSET ( 0x00001880U )
#define SBB_PARAM_L16_OFFSET ( 0x00001884U )
#define SBB_PARAM_H17_OFFSET ( 0x00001888U )
#define SBB_PARAM_L17_OFFSET ( 0x0000188cU )
#define SBB_PARAM_H18_OFFSET ( 0x00001890U )
#define SBB_PARAM_L18_OFFSET ( 0x00001894U )
#define SBB_PARAM_H19_OFFSET ( 0x00001898U )
#define SBB_PARAM_L19_OFFSET ( 0x0000189cU )
#define SBB_PARAM_H20_OFFSET ( 0x000018a0U )
#define SBB_PARAM_L20_OFFSET ( 0x000018a4U )
#define SBB_PARAM_H21_OFFSET ( 0x000018a8U )
#define SBB_PARAM_L21_OFFSET ( 0x000018acU )
#define SBB_PARAM_H22_OFFSET ( 0x000018b0U )
#define SBB_PARAM_L22_OFFSET ( 0x000018b4U )
#define SBB_PARAM_H23_OFFSET ( 0x000018b8U )
#define SBB_PARAM_L23_OFFSET ( 0x000018bcU )
#define SBB_PARAM_H24_OFFSET ( 0x000018c0U )
#define SBB_PARAM_L24_OFFSET ( 0x000018c4U )
#define SBB_PARAM_H25_OFFSET ( 0x000018c8U )
#define SBB_PARAM_L25_OFFSET ( 0x000018ccU )
#define SBB_PARAM_H26_OFFSET ( 0x000018d0U )
#define SBB_PARAM_L26_OFFSET ( 0x000018d4U )
#define SBB_PARAM_H27_OFFSET ( 0x000018d8U )
#define SBB_PARAM_L27_OFFSET ( 0x000018dcU )
#define SBB_PARAM_H28_OFFSET ( 0x000018e0U )
#define SBB_PARAM_L28_OFFSET ( 0x000018e4U )
#define SBB_PARAM_H29_OFFSET ( 0x000018e8U )
#define SBB_PARAM_L29_OFFSET ( 0x000018ecU )
#define SBB_PARAM_H30_OFFSET ( 0x000018f0U )
#define SBB_PARAM_L30_OFFSET ( 0x000018f4U )
#define SBB_PARAM_H31_OFFSET ( 0x000018f8U )
#define SBB_PARAM_L31_OFFSET ( 0x000018fcU )
#define SBB_PARAM_H32_OFFSET ( 0x00001900U )
#define SBB_PARAM_L32_OFFSET ( 0x00001904U )
#define SBB_PARAM_H33_OFFSET ( 0x00001908U )
#define SBB_PARAM_L33_OFFSET ( 0x0000190cU )
#define SBB_PARAM_H34_OFFSET ( 0x00001910U )
#define SBB_PARAM_L34_OFFSET ( 0x00001914U )
#define SBB_PARAM_H35_OFFSET ( 0x00001918U )
#define SBB_PARAM_L35_OFFSET ( 0x0000191cU )
#define SBB_PARAM_H36_OFFSET ( 0x00001920U )
#define SBB_PARAM_L36_OFFSET ( 0x00001924U )
#define SBB_PARAM_H37_OFFSET ( 0x00001928U )
#define SBB_PARAM_L37_OFFSET ( 0x0000192cU )
#define SBB_PARAM_H38_OFFSET ( 0x00001930U )
#define SBB_PARAM_L38_OFFSET ( 0x00001934U )
#define SBB_PARAM_H39_OFFSET ( 0x00001938U )
#define SBB_PARAM_L39_OFFSET ( 0x0000193cU )
#define SBB_PARAM_H40_OFFSET ( 0x00001940U )
#define SBB_PARAM_L40_OFFSET ( 0x00001944U )
#define SBB_PARAM_H41_OFFSET ( 0x00001948U )
#define SBB_PARAM_L41_OFFSET ( 0x0000194cU )
#define SBB_PARAM_H42_OFFSET ( 0x00001950U )
#define SBB_PARAM_L42_OFFSET ( 0x00001954U )
#define SBB_PARAM_H43_OFFSET ( 0x00001958U )
#define SBB_PARAM_L43_OFFSET ( 0x0000195cU )
#define SBB_PARAM_H44_OFFSET ( 0x00001960U )
#define SBB_PARAM_L44_OFFSET ( 0x00001964U )
#define SBB_PARAM_H45_OFFSET ( 0x00001968U )
#define SBB_PARAM_L45_OFFSET ( 0x0000196cU )
#define SBB_PARAM_H46_OFFSET ( 0x00001970U )
#define SBB_PARAM_L46_OFFSET ( 0x00001974U )
#define SBB_PARAM_H47_OFFSET ( 0x00001978U )
#define SBB_PARAM_L47_OFFSET ( 0x0000197cU )
#define SBB_PARAM_H48_OFFSET ( 0x00001980U )
#define SBB_PARAM_L48_OFFSET ( 0x00001984U )
#define SBB_PARAM_H49_OFFSET ( 0x00001988U )
#define SBB_PARAM_L49_OFFSET ( 0x0000198cU )
#define SBB_PARAM_H50_OFFSET ( 0x00001990U )
#define SBB_PARAM_L50_OFFSET ( 0x00001994U )
#define SBB_PARAM_H51_OFFSET ( 0x00001998U )
#define SBB_PARAM_L51_OFFSET ( 0x0000199cU )
#define SBB_PARAM_H52_OFFSET ( 0x000019a0U )
#define SBB_PARAM_L52_OFFSET ( 0x000019a4U )
#define SBB_PARAM_H53_OFFSET ( 0x000019a8U )
#define SBB_PARAM_L53_OFFSET ( 0x000019acU )
#define SBB_PARAM_H54_OFFSET ( 0x000019b0U )
#define SBB_PARAM_L54_OFFSET ( 0x000019b4U )
#define SBB_PARAM_H55_OFFSET ( 0x000019b8U )
#define SBB_PARAM_L55_OFFSET ( 0x000019bcU )
#define SBB_PARAM_H56_OFFSET ( 0x000019c0U )
#define SBB_PARAM_L56_OFFSET ( 0x000019c4U )
#define SBB_PARAM_H57_OFFSET ( 0x000019c8U )
#define SBB_PARAM_L57_OFFSET ( 0x000019ccU )
#define SBB_PARAM_H58_OFFSET ( 0x000019d0U )
#define SBB_PARAM_L58_OFFSET ( 0x000019d4U )
#define SBB_PARAM_H59_OFFSET ( 0x000019d8U )
#define SBB_PARAM_L59_OFFSET ( 0x000019dcU )
#define SBB_PARAM_H60_OFFSET ( 0x000019e0U )
#define SBB_PARAM_L60_OFFSET ( 0x000019e4U )
#define SBB_PARAM_H61_OFFSET ( 0x000019e8U )
#define SBB_PARAM_L61_OFFSET ( 0x000019ecU )
#define SBB_PARAM_H62_OFFSET ( 0x000019f0U )
#define SBB_PARAM_L62_OFFSET ( 0x000019f4U )
#define SBB_PARAM_H63_OFFSET ( 0x000019f8U )
#define SBB_PARAM_L63_OFFSET ( 0x000019fcU )
#define SBB_PARAM_H64_OFFSET ( 0x00001a00U )
#define SBB_PARAM_L64_OFFSET ( 0x00001a04U )
#define SBB_PARAM_H65_OFFSET ( 0x00001a08U )
#define SBB_PARAM_L65_OFFSET ( 0x00001a0cU )
#define SBB_PARAM_H66_OFFSET ( 0x00001a10U )
#define SBB_PARAM_L66_OFFSET ( 0x00001a14U )
#define SBB_PARAM_H67_OFFSET ( 0x00001a18U )
#define SBB_PARAM_L67_OFFSET ( 0x00001a1cU )
#define SBB_PARAM_H68_OFFSET ( 0x00001a20U )
#define SBB_PARAM_L68_OFFSET ( 0x00001a24U )
#define SBB_PARAM_H69_OFFSET ( 0x00001a28U )
#define SBB_PARAM_L69_OFFSET ( 0x00001a2cU )
#define SBB_PARAM_H70_OFFSET ( 0x00001a30U )
#define SBB_PARAM_L70_OFFSET ( 0x00001a34U )
#define SBB_PARAM_H71_OFFSET ( 0x00001a38U )
#define SBB_PARAM_L71_OFFSET ( 0x00001a3cU )
#define SBB_PARAM_H72_OFFSET ( 0x00001a40U )
#define SBB_PARAM_L72_OFFSET ( 0x00001a44U )
#define SBB_PARAM_H73_OFFSET ( 0x00001a48U )
#define SBB_PARAM_L73_OFFSET ( 0x00001a4cU )
#define SBB_PARAM_H74_OFFSET ( 0x00001a50U )
#define SBB_PARAM_L74_OFFSET ( 0x00001a54U )
#define SBB_PARAM_H75_OFFSET ( 0x00001a58U )
#define SBB_PARAM_L75_OFFSET ( 0x00001a5cU )
#define SBB_PARAM_H76_OFFSET ( 0x00001a60U )
#define SBB_PARAM_L76_OFFSET ( 0x00001a64U )
#define SBB_PARAM_H77_OFFSET ( 0x00001a68U )
#define SBB_PARAM_L77_OFFSET ( 0x00001a6cU )
#define SBB_PARAM_H78_OFFSET ( 0x00001a70U )
#define SBB_PARAM_L78_OFFSET ( 0x00001a74U )
#define SBB_PARAM_H79_OFFSET ( 0x00001a78U )
#define SBB_PARAM_L79_OFFSET ( 0x00001a7cU )
#define SBB_PARAM_H80_OFFSET ( 0x00001a80U )
#define SBB_PARAM_L80_OFFSET ( 0x00001a84U )
#define SBB_PARAM_H81_OFFSET ( 0x00001a88U )
#define SBB_PARAM_L81_OFFSET ( 0x00001a8cU )
#define SBB_PARAM_H82_OFFSET ( 0x00001a90U )
#define SBB_PARAM_L82_OFFSET ( 0x00001a94U )
#define SBB_PARAM_H83_OFFSET ( 0x00001a98U )
#define SBB_PARAM_L83_OFFSET ( 0x00001a9cU )
#define SBB_PARAM_H84_OFFSET ( 0x00001aa0U )
#define SBB_PARAM_L84_OFFSET ( 0x00001aa4U )
#define SBB_PARAM_H85_OFFSET ( 0x00001aa8U )
#define SBB_PARAM_L85_OFFSET ( 0x00001aacU )
#define SBB_PARAM_H86_OFFSET ( 0x00001ab0U )
#define SBB_PARAM_L86_OFFSET ( 0x00001ab4U )
#define SBB_PARAM_H87_OFFSET ( 0x00001ab8U )
#define SBB_PARAM_L87_OFFSET ( 0x00001abcU )
#define SBB_PARAM_H88_OFFSET ( 0x00001ac0U )
#define SBB_PARAM_L88_OFFSET ( 0x00001ac4U )
#define SBB_PARAM_H89_OFFSET ( 0x00001ac8U )
#define SBB_PARAM_L89_OFFSET ( 0x00001accU )
#define SBB_PARAM_H90_OFFSET ( 0x00001ad0U )
#define SBB_PARAM_L90_OFFSET ( 0x00001ad4U )
#define SBB_PARAM_H91_OFFSET ( 0x00001ad8U )
#define SBB_PARAM_L91_OFFSET ( 0x00001adcU )
#define SBB_PARAM_H92_OFFSET ( 0x00001ae0U )
#define SBB_PARAM_L92_OFFSET ( 0x00001ae4U )
#define SBB_PARAM_H93_OFFSET ( 0x00001ae8U )
#define SBB_PARAM_L93_OFFSET ( 0x00001aecU )
#define SBB_PARAM_H94_OFFSET ( 0x00001af0U )
#define SBB_PARAM_L94_OFFSET ( 0x00001af4U )
#define SBB_PARAM_H95_OFFSET ( 0x00001af8U )
#define SBB_PARAM_L95_OFFSET ( 0x00001afcU )
#define SBB_PARAM_H96_OFFSET ( 0x00001b00U )
#define SBB_PARAM_L96_OFFSET ( 0x00001b04U )
#define SBB_PARAM_H97_OFFSET ( 0x00001b08U )
#define SBB_PARAM_L97_OFFSET ( 0x00001b0cU )
#define SBB_PARAM_H98_OFFSET ( 0x00001b10U )
#define SBB_PARAM_L98_OFFSET ( 0x00001b14U )
#define SBB_PARAM_H99_OFFSET ( 0x00001b18U )
#define SBB_PARAM_L99_OFFSET ( 0x00001b1cU )
#define SBB_PARAM_H100_OFFSET ( 0x00001b20U )
#define SBB_PARAM_L100_OFFSET ( 0x00001b24U )
#define SBB_PARAM_H101_OFFSET ( 0x00001b28U )
#define SBB_PARAM_L101_OFFSET ( 0x00001b2cU )
#define SBB_PARAM_H102_OFFSET ( 0x00001b30U )
#define SBB_PARAM_L102_OFFSET ( 0x00001b34U )
#define SBB_PARAM_H103_OFFSET ( 0x00001b38U )
#define SBB_PARAM_L103_OFFSET ( 0x00001b3cU )
#define SBB_PARAM_H104_OFFSET ( 0x00001b40U )
#define SBB_PARAM_L104_OFFSET ( 0x00001b44U )
#define SBB_PARAM_H105_OFFSET ( 0x00001b48U )
#define SBB_PARAM_L105_OFFSET ( 0x00001b4cU )
#define SBB_PARAM_H106_OFFSET ( 0x00001b50U )
#define SBB_PARAM_L106_OFFSET ( 0x00001b54U )
#define SBB_PARAM_H107_OFFSET ( 0x00001b58U )
#define SBB_PARAM_L107_OFFSET ( 0x00001b5cU )
#define SBB_PARAM_H108_OFFSET ( 0x00001b60U )
#define SBB_PARAM_L108_OFFSET ( 0x00001b64U )
#define SBB_PARAM_H109_OFFSET ( 0x00001b68U )
#define SBB_PARAM_L109_OFFSET ( 0x00001b6cU )
#define SBB_PARAM_H110_OFFSET ( 0x00001b70U )
#define SBB_PARAM_L110_OFFSET ( 0x00001b74U )
#define SBB_PARAM_H111_OFFSET ( 0x00001b78U )
#define SBB_PARAM_L111_OFFSET ( 0x00001b7cU )
#define SBB_PARAM_H112_OFFSET ( 0x00001b80U )
#define SBB_PARAM_L112_OFFSET ( 0x00001b84U )
#define SBB_PARAM_H113_OFFSET ( 0x00001b88U )
#define SBB_PARAM_L113_OFFSET ( 0x00001b8cU )
#define SBB_PARAM_H114_OFFSET ( 0x00001b90U )
#define SBB_PARAM_L114_OFFSET ( 0x00001b94U )
#define SBB_PARAM_H115_OFFSET ( 0x00001b98U )
#define SBB_PARAM_L115_OFFSET ( 0x00001b9cU )
#define SBB_PARAM_H116_OFFSET ( 0x00001ba0U )
#define SBB_PARAM_L116_OFFSET ( 0x00001ba4U )
#define SBB_PARAM_H117_OFFSET ( 0x00001ba8U )
#define SBB_PARAM_L117_OFFSET ( 0x00001bacU )
#define SBB_PARAM_H118_OFFSET ( 0x00001bb0U )
#define SBB_PARAM_L118_OFFSET ( 0x00001bb4U )
#define SBB_PARAM_H119_OFFSET ( 0x00001bb8U )
#define SBB_PARAM_L119_OFFSET ( 0x00001bbcU )
#define SBB_PARAM_H120_OFFSET ( 0x00001bc0U )
#define SBB_PARAM_L120_OFFSET ( 0x00001bc4U )
#define SBB_PARAM_H121_OFFSET ( 0x00001bc8U )
#define SBB_PARAM_L121_OFFSET ( 0x00001bccU )
#define SBB_PARAM_H122_OFFSET ( 0x00001bd0U )
#define SBB_PARAM_L122_OFFSET ( 0x00001bd4U )
#define SBB_PARAM_H123_OFFSET ( 0x00001bd8U )
#define SBB_PARAM_L123_OFFSET ( 0x00001bdcU )
#define SBB_PARAM_H124_OFFSET ( 0x00001be0U )
#define SBB_PARAM_L124_OFFSET ( 0x00001be4U )
#define SBB_PARAM_H125_OFFSET ( 0x00001be8U )
#define SBB_PARAM_L125_OFFSET ( 0x00001becU )
#define SBB_PARAM_H126_OFFSET ( 0x00001bf0U )
#define SBB_PARAM_L126_OFFSET ( 0x00001bf4U )
#define SBB_PARAM_H127_OFFSET ( 0x00001bf8U )
#define SBB_PARAM_L127_OFFSET ( 0x00001bfcU )
#define SBB_PARAM_H128_OFFSET ( 0x00001c00U )
#define SBB_PARAM_L128_OFFSET ( 0x00001c04U )
#define SBB_PARAM_H129_OFFSET ( 0x00001c08U )
#define SBB_PARAM_L129_OFFSET ( 0x00001c0cU )
#define SBB_PARAM_H130_OFFSET ( 0x00001c10U )
#define SBB_PARAM_L130_OFFSET ( 0x00001c14U )
#define SBB_PARAM_H131_OFFSET ( 0x00001c18U )
#define SBB_PARAM_L131_OFFSET ( 0x00001c1cU )
#define SBB_PARAM_H132_OFFSET ( 0x00001c20U )
#define SBB_PARAM_L132_OFFSET ( 0x00001c24U )
#define SBB_PARAM_H133_OFFSET ( 0x00001c28U )
#define SBB_PARAM_L133_OFFSET ( 0x00001c2cU )
#define SBB_PARAM_H134_OFFSET ( 0x00001c30U )
#define SBB_PARAM_L134_OFFSET ( 0x00001c34U )
#define SBB_PARAM_H135_OFFSET ( 0x00001c38U )
#define SBB_PARAM_L135_OFFSET ( 0x00001c3cU )
#define SBB_PARAM_H136_OFFSET ( 0x00001c40U )
#define SBB_PARAM_L136_OFFSET ( 0x00001c44U )
#define SBB_PARAM_H137_OFFSET ( 0x00001c48U )
#define SBB_PARAM_L137_OFFSET ( 0x00001c4cU )
#define SBB_PARAM_H138_OFFSET ( 0x00001c50U )
#define SBB_PARAM_L138_OFFSET ( 0x00001c54U )
#define SBB_PARAM_H139_OFFSET ( 0x00001c58U )
#define SBB_PARAM_L139_OFFSET ( 0x00001c5cU )
#define SBB_PARAM_H140_OFFSET ( 0x00001c60U )
#define SBB_PARAM_L140_OFFSET ( 0x00001c64U )
#define SBB_PARAM_H141_OFFSET ( 0x00001c68U )
#define SBB_PARAM_L141_OFFSET ( 0x00001c6cU )
#define SBB_PARAM_H142_OFFSET ( 0x00001c70U )
#define SBB_PARAM_L142_OFFSET ( 0x00001c74U )
#define SBB_PARAM_H143_OFFSET ( 0x00001c78U )
#define SBB_PARAM_L143_OFFSET ( 0x00001c7cU )
#define SBB_PARAM_H144_OFFSET ( 0x00001c80U )
#define SBB_PARAM_L144_OFFSET ( 0x00001c84U )
#define SBB_PARAM_H145_OFFSET ( 0x00001c88U )
#define SBB_PARAM_L145_OFFSET ( 0x00001c8cU )
#define SBB_PARAM_H146_OFFSET ( 0x00001c90U )
#define SBB_PARAM_L146_OFFSET ( 0x00001c94U )
#define SBB_PARAM_H147_OFFSET ( 0x00001c98U )
#define SBB_PARAM_L147_OFFSET ( 0x00001c9cU )
#define SBB_PARAM_H148_OFFSET ( 0x00001ca0U )
#define SBB_PARAM_L148_OFFSET ( 0x00001ca4U )
#define SBB_PARAM_H149_OFFSET ( 0x00001ca8U )
#define SBB_PARAM_L149_OFFSET ( 0x00001cacU )
#define SBB_PARAM_H150_OFFSET ( 0x00001cb0U )
#define SBB_PARAM_L150_OFFSET ( 0x00001cb4U )
#define SBB_PARAM_H151_OFFSET ( 0x00001cb8U )
#define SBB_PARAM_L151_OFFSET ( 0x00001cbcU )
#define SBB_PARAM_H152_OFFSET ( 0x00001cc0U )
#define SBB_PARAM_L152_OFFSET ( 0x00001cc4U )
#define SBB_PARAM_H153_OFFSET ( 0x00001cc8U )
#define SBB_PARAM_L153_OFFSET ( 0x00001cccU )
#define SBB_PARAM_H154_OFFSET ( 0x00001cd0U )
#define SBB_PARAM_L154_OFFSET ( 0x00001cd4U )
#define SBB_PARAM_H155_OFFSET ( 0x00001cd8U )
#define SBB_PARAM_L155_OFFSET ( 0x00001cdcU )
#define SBB_PARAM_H156_OFFSET ( 0x00001ce0U )
#define SBB_PARAM_L156_OFFSET ( 0x00001ce4U )
#define SBB_PARAM_H157_OFFSET ( 0x00001ce8U )
#define SBB_PARAM_L157_OFFSET ( 0x00001cecU )
#define SBB_PARAM_H158_OFFSET ( 0x00001cf0U )
#define SBB_PARAM_L158_OFFSET ( 0x00001cf4U )
#define SBB_PARAM_H159_OFFSET ( 0x00001cf8U )
#define SBB_PARAM_L159_OFFSET ( 0x00001cfcU )
#define SBB_PARAM_H160_OFFSET ( 0x00001d00U )
#define SBB_PARAM_L160_OFFSET ( 0x00001d04U )
#define SBB_PARAM_H161_OFFSET ( 0x00001d08U )
#define SBB_PARAM_L161_OFFSET ( 0x00001d0cU )
#define SBB_PARAM_H162_OFFSET ( 0x00001d10U )
#define SBB_PARAM_L162_OFFSET ( 0x00001d14U )
#define SBB_PARAM_H163_OFFSET ( 0x00001d18U )
#define SBB_PARAM_L163_OFFSET ( 0x00001d1cU )
#define SBB_PARAM_H164_OFFSET ( 0x00001d20U )
#define SBB_PARAM_L164_OFFSET ( 0x00001d24U )
#define SBB_PARAM_H165_OFFSET ( 0x00001d28U )
#define SBB_PARAM_L165_OFFSET ( 0x00001d2cU )
#define SBB_PARAM_H166_OFFSET ( 0x00001d30U )
#define SBB_PARAM_L166_OFFSET ( 0x00001d34U )
#define SBB_PARAM_H167_OFFSET ( 0x00001d38U )
#define SBB_PARAM_L167_OFFSET ( 0x00001d3cU )
#define SBB_PARAM_H168_OFFSET ( 0x00001d40U )
#define SBB_PARAM_L168_OFFSET ( 0x00001d44U )
#define SBB_PARAM_H169_OFFSET ( 0x00001d48U )
#define SBB_PARAM_L169_OFFSET ( 0x00001d4cU )
#define SBB_PARAM_H170_OFFSET ( 0x00001d50U )
#define SBB_PARAM_L170_OFFSET ( 0x00001d54U )
#define SBB_PARAM_H171_OFFSET ( 0x00001d58U )
#define SBB_PARAM_L171_OFFSET ( 0x00001d5cU )
#define SBB_PARAM_H172_OFFSET ( 0x00001d60U )
#define SBB_PARAM_L172_OFFSET ( 0x00001d64U )
#define SBB_PARAM_H173_OFFSET ( 0x00001d68U )
#define SBB_PARAM_L173_OFFSET ( 0x00001d6cU )
#define SBB_PARAM_H174_OFFSET ( 0x00001d70U )
#define SBB_PARAM_L174_OFFSET ( 0x00001d74U )
#define SBB_PARAM_H175_OFFSET ( 0x00001d78U )
#define SBB_PARAM_L175_OFFSET ( 0x00001d7cU )
#define SBB_PARAM_H176_OFFSET ( 0x00001d80U )
#define SBB_PARAM_L176_OFFSET ( 0x00001d84U )
#define SBB_PARAM_H177_OFFSET ( 0x00001d88U )
#define SBB_PARAM_L177_OFFSET ( 0x00001d8cU )
#define SBB_PARAM_H178_OFFSET ( 0x00001d90U )
#define SBB_PARAM_L178_OFFSET ( 0x00001d94U )
#define SBB_PARAM_H179_OFFSET ( 0x00001d98U )
#define SBB_PARAM_L179_OFFSET ( 0x00001d9cU )
#define SBB_PARAM_H180_OFFSET ( 0x00001da0U )
#define SBB_PARAM_L180_OFFSET ( 0x00001da4U )
#define SBB_PARAM_H181_OFFSET ( 0x00001da8U )
#define SBB_PARAM_L181_OFFSET ( 0x00001dacU )
#define SBB_PARAM_H182_OFFSET ( 0x00001db0U )
#define SBB_PARAM_L182_OFFSET ( 0x00001db4U )
#define SBB_PARAM_H183_OFFSET ( 0x00001db8U )
#define SBB_PARAM_L183_OFFSET ( 0x00001dbcU )
#define SBB_PARAM_H184_OFFSET ( 0x00001dc0U )
#define SBB_PARAM_L184_OFFSET ( 0x00001dc4U )
#define SBB_PARAM_H185_OFFSET ( 0x00001dc8U )
#define SBB_PARAM_L185_OFFSET ( 0x00001dccU )
#define SBB_PARAM_H186_OFFSET ( 0x00001dd0U )
#define SBB_PARAM_L186_OFFSET ( 0x00001dd4U )
#define SBB_PARAM_H187_OFFSET ( 0x00001dd8U )
#define SBB_PARAM_L187_OFFSET ( 0x00001ddcU )
#define SBB_PARAM_H188_OFFSET ( 0x00001de0U )
#define SBB_PARAM_L188_OFFSET ( 0x00001de4U )
#define SBB_PARAM_H189_OFFSET ( 0x00001de8U )
#define SBB_PARAM_L189_OFFSET ( 0x00001decU )
#define SBB_PARAM_H190_OFFSET ( 0x00001df0U )
#define SBB_PARAM_L190_OFFSET ( 0x00001df4U )
#define SBB_PARAM_H191_OFFSET ( 0x00001df8U )
#define SBB_PARAM_L191_OFFSET ( 0x00001dfcU )
#define SBB_PARAM_H192_OFFSET ( 0x00001e00U )
#define SBB_PARAM_L192_OFFSET ( 0x00001e04U )
#define SBB_PARAM_H193_OFFSET ( 0x00001e08U )
#define SBB_PARAM_L193_OFFSET ( 0x00001e0cU )
#define SBB_PARAM_H194_OFFSET ( 0x00001e10U )
#define SBB_PARAM_L194_OFFSET ( 0x00001e14U )
#define SBB_PARAM_H195_OFFSET ( 0x00001e18U )
#define SBB_PARAM_L195_OFFSET ( 0x00001e1cU )
#define SBB_PARAM_H196_OFFSET ( 0x00001e20U )
#define SBB_PARAM_L196_OFFSET ( 0x00001e24U )
#define SBB_PARAM_H197_OFFSET ( 0x00001e28U )
#define SBB_PARAM_L197_OFFSET ( 0x00001e2cU )
#define SBB_PARAM_H198_OFFSET ( 0x00001e30U )
#define SBB_PARAM_L198_OFFSET ( 0x00001e34U )
#define SBB_PARAM_H199_OFFSET ( 0x00001e38U )
#define SBB_PARAM_L199_OFFSET ( 0x00001e3cU )
#define SBB_PARAM_H200_OFFSET ( 0x00001e40U )
#define SBB_PARAM_L200_OFFSET ( 0x00001e44U )
#define SBB_PARAM_H201_OFFSET ( 0x00001e48U )
#define SBB_PARAM_L201_OFFSET ( 0x00001e4cU )
#define SBB_PARAM_H202_OFFSET ( 0x00001e50U )
#define SBB_PARAM_L202_OFFSET ( 0x00001e54U )
#define SBB_PARAM_H203_OFFSET ( 0x00001e58U )
#define SBB_PARAM_L203_OFFSET ( 0x00001e5cU )
#define SBB_PARAM_H204_OFFSET ( 0x00001e60U )
#define SBB_PARAM_L204_OFFSET ( 0x00001e64U )
#define SBB_PARAM_H205_OFFSET ( 0x00001e68U )
#define SBB_PARAM_L205_OFFSET ( 0x00001e6cU )
#define SBB_PARAM_H206_OFFSET ( 0x00001e70U )
#define SBB_PARAM_L206_OFFSET ( 0x00001e74U )
#define SBB_PARAM_H207_OFFSET ( 0x00001e78U )
#define SBB_PARAM_L207_OFFSET ( 0x00001e7cU )
#define SBB_PARAM_H208_OFFSET ( 0x00001e80U )
#define SBB_PARAM_L208_OFFSET ( 0x00001e84U )
#define SBB_PARAM_H209_OFFSET ( 0x00001e88U )
#define SBB_PARAM_L209_OFFSET ( 0x00001e8cU )
#define SBB_PARAM_H210_OFFSET ( 0x00001e90U )
#define SBB_PARAM_L210_OFFSET ( 0x00001e94U )
#define SBB_PARAM_H211_OFFSET ( 0x00001e98U )
#define SBB_PARAM_L211_OFFSET ( 0x00001e9cU )
#define SBB_PARAM_H212_OFFSET ( 0x00001ea0U )
#define SBB_PARAM_L212_OFFSET ( 0x00001ea4U )
#define SBB_PARAM_H213_OFFSET ( 0x00001ea8U )
#define SBB_PARAM_L213_OFFSET ( 0x00001eacU )
#define SBB_PARAM_H214_OFFSET ( 0x00001eb0U )
#define SBB_PARAM_L214_OFFSET ( 0x00001eb4U )
#define SBB_PARAM_H215_OFFSET ( 0x00001eb8U )
#define SBB_PARAM_L215_OFFSET ( 0x00001ebcU )
#define SBB_PARAM_H216_OFFSET ( 0x00001ec0U )
#define SBB_PARAM_L216_OFFSET ( 0x00001ec4U )
#define SBB_PARAM_H217_OFFSET ( 0x00001ec8U )
#define SBB_PARAM_L217_OFFSET ( 0x00001eccU )
#define SBB_PARAM_H218_OFFSET ( 0x00001ed0U )
#define SBB_PARAM_L218_OFFSET ( 0x00001ed4U )
#define SBB_PARAM_H219_OFFSET ( 0x00001ed8U )
#define SBB_PARAM_L219_OFFSET ( 0x00001edcU )
#define SBB_PARAM_H220_OFFSET ( 0x00001ee0U )
#define SBB_PARAM_L220_OFFSET ( 0x00001ee4U )
#define SBB_PARAM_H221_OFFSET ( 0x00001ee8U )
#define SBB_PARAM_L221_OFFSET ( 0x00001eecU )
#define SBB_PARAM_H222_OFFSET ( 0x00001ef0U )
#define SBB_PARAM_L222_OFFSET ( 0x00001ef4U )
#define SBB_PARAM_H223_OFFSET ( 0x00001ef8U )
#define SBB_PARAM_L223_OFFSET ( 0x00001efcU )
#define SBB_PARAM_H224_OFFSET ( 0x00001f00U )
#define SBB_PARAM_L224_OFFSET ( 0x00001f04U )
#define SBB_PARAM_H225_OFFSET ( 0x00001f08U )
#define SBB_PARAM_L225_OFFSET ( 0x00001f0cU )
#define SBB_PARAM_H226_OFFSET ( 0x00001f10U )
#define SBB_PARAM_L226_OFFSET ( 0x00001f14U )
#define SBB_PARAM_H227_OFFSET ( 0x00001f18U )
#define SBB_PARAM_L227_OFFSET ( 0x00001f1cU )
#define SBB_PARAM_H228_OFFSET ( 0x00001f20U )
#define SBB_PARAM_L228_OFFSET ( 0x00001f24U )
#define SBB_PARAM_H229_OFFSET ( 0x00001f28U )
#define SBB_PARAM_L229_OFFSET ( 0x00001f2cU )
#define SBB_PARAM_H230_OFFSET ( 0x00001f30U )
#define SBB_PARAM_L230_OFFSET ( 0x00001f34U )
#define SBB_PARAM_H231_OFFSET ( 0x00001f38U )
#define SBB_PARAM_L231_OFFSET ( 0x00001f3cU )
#define SBB_PARAM_H232_OFFSET ( 0x00001f40U )
#define SBB_PARAM_L232_OFFSET ( 0x00001f44U )
#define SBB_PARAM_H233_OFFSET ( 0x00001f48U )
#define SBB_PARAM_L233_OFFSET ( 0x00001f4cU )
#define SBB_PARAM_H234_OFFSET ( 0x00001f50U )
#define SBB_PARAM_L234_OFFSET ( 0x00001f54U )
#define SBB_PARAM_H235_OFFSET ( 0x00001f58U )
#define SBB_PARAM_L235_OFFSET ( 0x00001f5cU )
#define SBB_PARAM_H236_OFFSET ( 0x00001f60U )
#define SBB_PARAM_L236_OFFSET ( 0x00001f64U )
#define SBB_PARAM_H237_OFFSET ( 0x00001f68U )
#define SBB_PARAM_L237_OFFSET ( 0x00001f6cU )
#define SBB_PARAM_H238_OFFSET ( 0x00001f70U )
#define SBB_PARAM_L238_OFFSET ( 0x00001f74U )
#define SBB_PARAM_H239_OFFSET ( 0x00001f78U )
#define SBB_PARAM_L239_OFFSET ( 0x00001f7cU )
#define SBB_PARAM_H240_OFFSET ( 0x00001f80U )
#define SBB_PARAM_L240_OFFSET ( 0x00001f84U )
#define SBB_PARAM_H241_OFFSET ( 0x00001f88U )
#define SBB_PARAM_L241_OFFSET ( 0x00001f8cU )
#define SBB_PARAM_H242_OFFSET ( 0x00001f90U )
#define SBB_PARAM_L242_OFFSET ( 0x00001f94U )
#define SBB_PARAM_H243_OFFSET ( 0x00001f98U )
#define SBB_PARAM_L243_OFFSET ( 0x00001f9cU )
#define SBB_PARAM_H244_OFFSET ( 0x00001fa0U )
#define SBB_PARAM_L244_OFFSET ( 0x00001fa4U )
#define SBB_PARAM_H245_OFFSET ( 0x00001fa8U )
#define SBB_PARAM_L245_OFFSET ( 0x00001facU )
#define SBB_PARAM_H246_OFFSET ( 0x00001fb0U )
#define SBB_PARAM_L246_OFFSET ( 0x00001fb4U )
#define SBB_PARAM_H247_OFFSET ( 0x00001fb8U )
#define SBB_PARAM_L247_OFFSET ( 0x00001fbcU )
#define SBB_PARAM_H248_OFFSET ( 0x00001fc0U )
#define SBB_PARAM_L248_OFFSET ( 0x00001fc4U )
#define SBB_PARAM_H249_OFFSET ( 0x00001fc8U )
#define SBB_PARAM_L249_OFFSET ( 0x00001fccU )
#define SBB_PARAM_H250_OFFSET ( 0x00001fd0U )
#define SBB_PARAM_L250_OFFSET ( 0x00001fd4U )
#define SBB_PARAM_H251_OFFSET ( 0x00001fd8U )
#define SBB_PARAM_L251_OFFSET ( 0x00001fdcU )
#define SBB_PARAM_H252_OFFSET ( 0x00001fe0U )
#define SBB_PARAM_L252_OFFSET ( 0x00001fe4U )
#define SBB_PARAM_H253_OFFSET ( 0x00001fe8U )
#define SBB_PARAM_L253_OFFSET ( 0x00001fecU )
#define SBB_PARAM_H254_OFFSET ( 0x00001ff0U )
#define SBB_PARAM_L254_OFFSET ( 0x00001ff4U )
#define SBB_PARAM_H255_OFFSET ( 0x00001ff8U )
#define SBB_PARAM_L255_OFFSET ( 0x00001ffcU )
#define SBB_PARAM_H256_OFFSET ( 0x00002000U )
#define SBB_PARAM_L256_OFFSET ( 0x00002004U )
#define SBB_PARAM_H257_OFFSET ( 0x00002008U )
#define SBB_PARAM_L257_OFFSET ( 0x0000200cU )
#define SBB_PARAM_H258_OFFSET ( 0x00002010U )
#define SBB_PARAM_L258_OFFSET ( 0x00002014U )
#define SBB_PARAM_H259_OFFSET ( 0x00002018U )
#define SBB_PARAM_L259_OFFSET ( 0x0000201cU )
#define SBB_PARAM_H260_OFFSET ( 0x00002020U )
#define SBB_PARAM_L260_OFFSET ( 0x00002024U )
#define SBB_PARAM_H261_OFFSET ( 0x00002028U )
#define SBB_PARAM_L261_OFFSET ( 0x0000202cU )
#define SBB_PARAM_H262_OFFSET ( 0x00002030U )
#define SBB_PARAM_L262_OFFSET ( 0x00002034U )
#define SBB_PARAM_H263_OFFSET ( 0x00002038U )
#define SBB_PARAM_L263_OFFSET ( 0x0000203cU )
#define SBB_PARAM_H264_OFFSET ( 0x00002040U )
#define SBB_PARAM_L264_OFFSET ( 0x00002044U )
#define SBB_PARAM_H265_OFFSET ( 0x00002048U )
#define SBB_PARAM_L265_OFFSET ( 0x0000204cU )
#define SBB_PARAM_H266_OFFSET ( 0x00002050U )
#define SBB_PARAM_L266_OFFSET ( 0x00002054U )
#define SBB_PARAM_H267_OFFSET ( 0x00002058U )
#define SBB_PARAM_L267_OFFSET ( 0x0000205cU )
#define SBB_PARAM_H268_OFFSET ( 0x00002060U )
#define SBB_PARAM_L268_OFFSET ( 0x00002064U )
#define SBB_PARAM_H269_OFFSET ( 0x00002068U )
#define SBB_PARAM_L269_OFFSET ( 0x0000206cU )
#define SBB_PARAM_H270_OFFSET ( 0x00002070U )
#define SBB_PARAM_L270_OFFSET ( 0x00002074U )
#define SBB_PARAM_H271_OFFSET ( 0x00002078U )
#define SBB_PARAM_L271_OFFSET ( 0x0000207cU )
#define SBB_PARAM_H272_OFFSET ( 0x00002080U )
#define SBB_PARAM_L272_OFFSET ( 0x00002084U )
#define SBB_PARAM_H273_OFFSET ( 0x00002088U )
#define SBB_PARAM_L273_OFFSET ( 0x0000208cU )
#define SBB_PARAM_H274_OFFSET ( 0x00002090U )
#define SBB_PARAM_L274_OFFSET ( 0x00002094U )
#define SBB_PARAM_H275_OFFSET ( 0x00002098U )
#define SBB_PARAM_L275_OFFSET ( 0x0000209cU )
#define SBB_PARAM_H276_OFFSET ( 0x000020a0U )
#define SBB_PARAM_L276_OFFSET ( 0x000020a4U )
#define SBB_PARAM_H277_OFFSET ( 0x000020a8U )
#define SBB_PARAM_L277_OFFSET ( 0x000020acU )
#define SBB_PARAM_H278_OFFSET ( 0x000020b0U )
#define SBB_PARAM_L278_OFFSET ( 0x000020b4U )
#define SBB_PARAM_H279_OFFSET ( 0x000020b8U )
#define SBB_PARAM_L279_OFFSET ( 0x000020bcU )
#define SBB_PARAM_H280_OFFSET ( 0x000020c0U )
#define SBB_PARAM_L280_OFFSET ( 0x000020c4U )
#define SBB_PARAM_H281_OFFSET ( 0x000020c8U )
#define SBB_PARAM_L281_OFFSET ( 0x000020ccU )
#define SBB_PARAM_H282_OFFSET ( 0x000020d0U )
#define SBB_PARAM_L282_OFFSET ( 0x000020d4U )
#define SBB_PARAM_H283_OFFSET ( 0x000020d8U )
#define SBB_PARAM_L283_OFFSET ( 0x000020dcU )
#define SBB_PARAM_H284_OFFSET ( 0x000020e0U )
#define SBB_PARAM_L284_OFFSET ( 0x000020e4U )
#define SBB_PARAM_H285_OFFSET ( 0x000020e8U )
#define SBB_PARAM_L285_OFFSET ( 0x000020ecU )
#define SBB_PARAM_H286_OFFSET ( 0x000020f0U )
#define SBB_PARAM_L286_OFFSET ( 0x000020f4U )
#define SBB_PARAM_H287_OFFSET ( 0x000020f8U )
#define SBB_PARAM_L287_OFFSET ( 0x000020fcU )
#define SBB_PARAM_H288_OFFSET ( 0x00002100U )
#define SBB_PARAM_L288_OFFSET ( 0x00002104U )
#define SBB_PARAM_H289_OFFSET ( 0x00002108U )
#define SBB_PARAM_L289_OFFSET ( 0x0000210cU )
#define SBB_PARAM_H290_OFFSET ( 0x00002110U )
#define SBB_PARAM_L290_OFFSET ( 0x00002114U )
#define SBB_PARAM_H291_OFFSET ( 0x00002118U )
#define SBB_PARAM_L291_OFFSET ( 0x0000211cU )
#define SBB_PARAM_H292_OFFSET ( 0x00002120U )
#define SBB_PARAM_L292_OFFSET ( 0x00002124U )
#define SBB_PARAM_H293_OFFSET ( 0x00002128U )
#define SBB_PARAM_L293_OFFSET ( 0x0000212cU )
#define SBB_PARAM_H294_OFFSET ( 0x00002130U )
#define SBB_PARAM_L294_OFFSET ( 0x00002134U )
#define SBB_PARAM_H295_OFFSET ( 0x00002138U )
#define SBB_PARAM_L295_OFFSET ( 0x0000213cU )
#define SBB_PARAM_H296_OFFSET ( 0x00002140U )
#define SBB_PARAM_L296_OFFSET ( 0x00002144U )
#define SBB_PARAM_H297_OFFSET ( 0x00002148U )
#define SBB_PARAM_L297_OFFSET ( 0x0000214cU )
#define SBB_PARAM_H298_OFFSET ( 0x00002150U )
#define SBB_PARAM_L298_OFFSET ( 0x00002154U )
#define SBB_PARAM_H299_OFFSET ( 0x00002158U )
#define SBB_PARAM_L299_OFFSET ( 0x0000215cU )
#define SBB_PARAM_H300_OFFSET ( 0x00002160U )
#define SBB_PARAM_L300_OFFSET ( 0x00002164U )
#define SBB_PARAM_H301_OFFSET ( 0x00002168U )
#define SBB_PARAM_L301_OFFSET ( 0x0000216cU )
#define SBB_PARAM_H302_OFFSET ( 0x00002170U )
#define SBB_PARAM_L302_OFFSET ( 0x00002174U )
#define SBB_PARAM_H303_OFFSET ( 0x00002178U )
#define SBB_PARAM_L303_OFFSET ( 0x0000217cU )
#define SBB_PARAM_H304_OFFSET ( 0x00002180U )
#define SBB_PARAM_L304_OFFSET ( 0x00002184U )
#define SBB_PARAM_H305_OFFSET ( 0x00002188U )
#define SBB_PARAM_L305_OFFSET ( 0x0000218cU )
#define SBB_PARAM_H306_OFFSET ( 0x00002190U )
#define SBB_PARAM_L306_OFFSET ( 0x00002194U )
#define SBB_PARAM_H307_OFFSET ( 0x00002198U )
#define SBB_PARAM_L307_OFFSET ( 0x0000219cU )
#define SBB_PARAM_H308_OFFSET ( 0x000021a0U )
#define SBB_PARAM_L308_OFFSET ( 0x000021a4U )
#define SBB_PARAM_H309_OFFSET ( 0x000021a8U )
#define SBB_PARAM_L309_OFFSET ( 0x000021acU )
#define SBB_PARAM_H310_OFFSET ( 0x000021b0U )
#define SBB_PARAM_L310_OFFSET ( 0x000021b4U )
#define SBB_PARAM_H311_OFFSET ( 0x000021b8U )
#define SBB_PARAM_L311_OFFSET ( 0x000021bcU )
#define SBB_PARAM_H312_OFFSET ( 0x000021c0U )
#define SBB_PARAM_L312_OFFSET ( 0x000021c4U )
#define SBB_PARAM_H313_OFFSET ( 0x000021c8U )
#define SBB_PARAM_L313_OFFSET ( 0x000021ccU )
#define SBB_PARAM_H314_OFFSET ( 0x000021d0U )
#define SBB_PARAM_L314_OFFSET ( 0x000021d4U )
#define SBB_PARAM_H315_OFFSET ( 0x000021d8U )
#define SBB_PARAM_L315_OFFSET ( 0x000021dcU )
#define SBB_PARAM_H316_OFFSET ( 0x000021e0U )
#define SBB_PARAM_L316_OFFSET ( 0x000021e4U )
#define SBB_PARAM_H317_OFFSET ( 0x000021e8U )
#define SBB_PARAM_L317_OFFSET ( 0x000021ecU )
#define SBB_PARAM_H318_OFFSET ( 0x000021f0U )
#define SBB_PARAM_L318_OFFSET ( 0x000021f4U )
#define SBB_PARAM_H319_OFFSET ( 0x000021f8U )
#define SBB_PARAM_L319_OFFSET ( 0x000021fcU )
#define SBB_PARAM_H320_OFFSET ( 0x00002200U )
#define SBB_PARAM_L320_OFFSET ( 0x00002204U )
#define SBB_PARAM_H321_OFFSET ( 0x00002208U )
#define SBB_PARAM_L321_OFFSET ( 0x0000220cU )
#define SBB_PARAM_H322_OFFSET ( 0x00002210U )
#define SBB_PARAM_L322_OFFSET ( 0x00002214U )
#define SBB_PARAM_H323_OFFSET ( 0x00002218U )
#define SBB_PARAM_L323_OFFSET ( 0x0000221cU )
#define SBB_PARAM_H324_OFFSET ( 0x00002220U )
#define SBB_PARAM_L324_OFFSET ( 0x00002224U )
#define SBB_PARAM_H325_OFFSET ( 0x00002228U )
#define SBB_PARAM_L325_OFFSET ( 0x0000222cU )
#define SBB_PARAM_H326_OFFSET ( 0x00002230U )
#define SBB_PARAM_L326_OFFSET ( 0x00002234U )
#define SBB_PARAM_H327_OFFSET ( 0x00002238U )
#define SBB_PARAM_L327_OFFSET ( 0x0000223cU )
#define SBB_PARAM_H328_OFFSET ( 0x00002240U )
#define SBB_PARAM_L328_OFFSET ( 0x00002244U )
#define SBB_PARAM_H329_OFFSET ( 0x00002248U )
#define SBB_PARAM_L329_OFFSET ( 0x0000224cU )
#define SBB_PARAM_H330_OFFSET ( 0x00002250U )
#define SBB_PARAM_L330_OFFSET ( 0x00002254U )
#define SBB_PARAM_H331_OFFSET ( 0x00002258U )
#define SBB_PARAM_L331_OFFSET ( 0x0000225cU )
#define SBB_PARAM_H332_OFFSET ( 0x00002260U )
#define SBB_PARAM_L332_OFFSET ( 0x00002264U )
#define SBB_PARAM_H333_OFFSET ( 0x00002268U )
#define SBB_PARAM_L333_OFFSET ( 0x0000226cU )
#define SBB_PARAM_H334_OFFSET ( 0x00002270U )
#define SBB_PARAM_L334_OFFSET ( 0x00002274U )
#define SBB_PARAM_H335_OFFSET ( 0x00002278U )
#define SBB_PARAM_L335_OFFSET ( 0x0000227cU )
#define SBB_PARAM_H336_OFFSET ( 0x00002280U )
#define SBB_PARAM_L336_OFFSET ( 0x00002284U )
#define SBB_PARAM_H337_OFFSET ( 0x00002288U )
#define SBB_PARAM_L337_OFFSET ( 0x0000228cU )
#define SBB_PARAM_H338_OFFSET ( 0x00002290U )
#define SBB_PARAM_L338_OFFSET ( 0x00002294U )
#define SBB_PARAM_H339_OFFSET ( 0x00002298U )
#define SBB_PARAM_L339_OFFSET ( 0x0000229cU )
#define SBB_PARAM_H340_OFFSET ( 0x000022a0U )
#define SBB_PARAM_L340_OFFSET ( 0x000022a4U )
#define SBB_PARAM_H341_OFFSET ( 0x000022a8U )
#define SBB_PARAM_L341_OFFSET ( 0x000022acU )
#define SBB_PARAM_H342_OFFSET ( 0x000022b0U )
#define SBB_PARAM_L342_OFFSET ( 0x000022b4U )
#define SBB_PARAM_H343_OFFSET ( 0x000022b8U )
#define SBB_PARAM_L343_OFFSET ( 0x000022bcU )
#define SBB_PARAM_H344_OFFSET ( 0x000022c0U )
#define SBB_PARAM_L344_OFFSET ( 0x000022c4U )
#define SBB_PARAM_H345_OFFSET ( 0x000022c8U )
#define SBB_PARAM_L345_OFFSET ( 0x000022ccU )
#define SBB_PARAM_H346_OFFSET ( 0x000022d0U )
#define SBB_PARAM_L346_OFFSET ( 0x000022d4U )
#define SBB_PARAM_H347_OFFSET ( 0x000022d8U )
#define SBB_PARAM_L347_OFFSET ( 0x000022dcU )
#define SBB_PARAM_H348_OFFSET ( 0x000022e0U )
#define SBB_PARAM_L348_OFFSET ( 0x000022e4U )
#define SBB_PARAM_H349_OFFSET ( 0x000022e8U )
#define SBB_PARAM_L349_OFFSET ( 0x000022ecU )
#define SBB_PARAM_H350_OFFSET ( 0x000022f0U )
#define SBB_PARAM_L350_OFFSET ( 0x000022f4U )
#define SBB_PARAM_H351_OFFSET ( 0x000022f8U )
#define SBB_PARAM_L351_OFFSET ( 0x000022fcU )
#define SBB_PARAM_H352_OFFSET ( 0x00002300U )
#define SBB_PARAM_L352_OFFSET ( 0x00002304U )
#define SBB_PARAM_H353_OFFSET ( 0x00002308U )
#define SBB_PARAM_L353_OFFSET ( 0x0000230cU )
#define SBB_PARAM_H354_OFFSET ( 0x00002310U )
#define SBB_PARAM_L354_OFFSET ( 0x00002314U )
#define SBB_PARAM_H355_OFFSET ( 0x00002318U )
#define SBB_PARAM_L355_OFFSET ( 0x0000231cU )
#define SBB_PARAM_H356_OFFSET ( 0x00002320U )
#define SBB_PARAM_L356_OFFSET ( 0x00002324U )
#define SBB_PARAM_H357_OFFSET ( 0x00002328U )
#define SBB_PARAM_L357_OFFSET ( 0x0000232cU )
#define SBB_PARAM_H358_OFFSET ( 0x00002330U )
#define SBB_PARAM_L358_OFFSET ( 0x00002334U )
#define SBB_PARAM_H359_OFFSET ( 0x00002338U )
#define SBB_PARAM_L359_OFFSET ( 0x0000233cU )
#define SBB_PARAM_H360_OFFSET ( 0x00002340U )
#define SBB_PARAM_L360_OFFSET ( 0x00002344U )
#define SBB_PARAM_H361_OFFSET ( 0x00002348U )
#define SBB_PARAM_L361_OFFSET ( 0x0000234cU )
#define SBB_PARAM_H362_OFFSET ( 0x00002350U )
#define SBB_PARAM_L362_OFFSET ( 0x00002354U )
#define SBB_PARAM_H363_OFFSET ( 0x00002358U )
#define SBB_PARAM_L363_OFFSET ( 0x0000235cU )
#define SBB_PARAM_H364_OFFSET ( 0x00002360U )
#define SBB_PARAM_L364_OFFSET ( 0x00002364U )
#define SBB_PARAM_H365_OFFSET ( 0x00002368U )
#define SBB_PARAM_L365_OFFSET ( 0x0000236cU )
#define SBB_PARAM_H366_OFFSET ( 0x00002370U )
#define SBB_PARAM_L366_OFFSET ( 0x00002374U )
#define SBB_PARAM_H367_OFFSET ( 0x00002378U )
#define SBB_PARAM_L367_OFFSET ( 0x0000237cU )
#define SBB_PARAM_H368_OFFSET ( 0x00002380U )
#define SBB_PARAM_L368_OFFSET ( 0x00002384U )
#define SBB_PARAM_H369_OFFSET ( 0x00002388U )
#define SBB_PARAM_L369_OFFSET ( 0x0000238cU )
#define SBB_PARAM_H370_OFFSET ( 0x00002390U )
#define SBB_PARAM_L370_OFFSET ( 0x00002394U )
#define SBB_PARAM_H371_OFFSET ( 0x00002398U )
#define SBB_PARAM_L371_OFFSET ( 0x0000239cU )
#define SBB_PARAM_H372_OFFSET ( 0x000023a0U )
#define SBB_PARAM_L372_OFFSET ( 0x000023a4U )
#define SBB_PARAM_H373_OFFSET ( 0x000023a8U )
#define SBB_PARAM_L373_OFFSET ( 0x000023acU )
#define SBB_PARAM_H374_OFFSET ( 0x000023b0U )
#define SBB_PARAM_L374_OFFSET ( 0x000023b4U )
#define SBB_PARAM_H375_OFFSET ( 0x000023b8U )
#define SBB_PARAM_L375_OFFSET ( 0x000023bcU )
#define SBB_PARAM_H376_OFFSET ( 0x000023c0U )
#define SBB_PARAM_L376_OFFSET ( 0x000023c4U )
#define SBB_PARAM_H377_OFFSET ( 0x000023c8U )
#define SBB_PARAM_L377_OFFSET ( 0x000023ccU )
#define SBB_PARAM_H378_OFFSET ( 0x000023d0U )
#define SBB_PARAM_L378_OFFSET ( 0x000023d4U )
#define SBB_PARAM_H379_OFFSET ( 0x000023d8U )
#define SBB_PARAM_L379_OFFSET ( 0x000023dcU )
#define SBB_PARAM_H380_OFFSET ( 0x000023e0U )
#define SBB_PARAM_L380_OFFSET ( 0x000023e4U )
#define SBB_PARAM_H381_OFFSET ( 0x000023e8U )
#define SBB_PARAM_L381_OFFSET ( 0x000023ecU )
#define SBB_PARAM_H382_OFFSET ( 0x000023f0U )
#define SBB_PARAM_L382_OFFSET ( 0x000023f4U )
#define SBB_PARAM_H383_OFFSET ( 0x000023f8U )
#define SBB_PARAM_L383_OFFSET ( 0x000023fcU )
#define SBB_PARAM_H384_OFFSET ( 0x00002400U )
#define SBB_PARAM_L384_OFFSET ( 0x00002404U )
#define SBB_PARAM_H385_OFFSET ( 0x00002408U )
#define SBB_PARAM_L385_OFFSET ( 0x0000240cU )
#define SBB_PARAM_H386_OFFSET ( 0x00002410U )
#define SBB_PARAM_L386_OFFSET ( 0x00002414U )
#define SBB_PARAM_H387_OFFSET ( 0x00002418U )
#define SBB_PARAM_L387_OFFSET ( 0x0000241cU )
#define SBB_PARAM_H388_OFFSET ( 0x00002420U )
#define SBB_PARAM_L388_OFFSET ( 0x00002424U )
#define SBB_PARAM_H389_OFFSET ( 0x00002428U )
#define SBB_PARAM_L389_OFFSET ( 0x0000242cU )
#define SBB_PARAM_H390_OFFSET ( 0x00002430U )
#define SBB_PARAM_L390_OFFSET ( 0x00002434U )
#define SBB_PARAM_H391_OFFSET ( 0x00002438U )
#define SBB_PARAM_L391_OFFSET ( 0x0000243cU )
#define SBB_PARAM_H392_OFFSET ( 0x00002440U )
#define SBB_PARAM_L392_OFFSET ( 0x00002444U )
#define SBB_PARAM_H393_OFFSET ( 0x00002448U )
#define SBB_PARAM_L393_OFFSET ( 0x0000244cU )
#define SBB_PARAM_H394_OFFSET ( 0x00002450U )
#define SBB_PARAM_L394_OFFSET ( 0x00002454U )
#define SBB_PARAM_H395_OFFSET ( 0x00002458U )
#define SBB_PARAM_L395_OFFSET ( 0x0000245cU )
#define SBB_PARAM_H396_OFFSET ( 0x00002460U )
#define SBB_PARAM_L396_OFFSET ( 0x00002464U )
#define SBB_PARAM_H397_OFFSET ( 0x00002468U )
#define SBB_PARAM_L397_OFFSET ( 0x0000246cU )
#define SBB_PARAM_H398_OFFSET ( 0x00002470U )
#define SBB_PARAM_L398_OFFSET ( 0x00002474U )
#define SBB_PARAM_H399_OFFSET ( 0x00002478U )
#define SBB_PARAM_L399_OFFSET ( 0x0000247cU )
#define SBB_PARAM_H400_OFFSET ( 0x00002480U )
#define SBB_PARAM_L400_OFFSET ( 0x00002484U )
#define SBB_PARAM_H401_OFFSET ( 0x00002488U )
#define SBB_PARAM_L401_OFFSET ( 0x0000248cU )
#define SBB_PARAM_H402_OFFSET ( 0x00002490U )
#define SBB_PARAM_L402_OFFSET ( 0x00002494U )
#define SBB_PARAM_H403_OFFSET ( 0x00002498U )
#define SBB_PARAM_L403_OFFSET ( 0x0000249cU )
#define SBB_PARAM_H404_OFFSET ( 0x000024a0U )
#define SBB_PARAM_L404_OFFSET ( 0x000024a4U )
#define SBB_PARAM_H405_OFFSET ( 0x000024a8U )
#define SBB_PARAM_L405_OFFSET ( 0x000024acU )
#define SBB_PARAM_H406_OFFSET ( 0x000024b0U )
#define SBB_PARAM_L406_OFFSET ( 0x000024b4U )
#define SBB_PARAM_H407_OFFSET ( 0x000024b8U )
#define SBB_PARAM_L407_OFFSET ( 0x000024bcU )
#define SBB_PARAM_H408_OFFSET ( 0x000024c0U )
#define SBB_PARAM_L408_OFFSET ( 0x000024c4U )
#define SBB_PARAM_H409_OFFSET ( 0x000024c8U )
#define SBB_PARAM_L409_OFFSET ( 0x000024ccU )
#define SBB_PARAM_H410_OFFSET ( 0x000024d0U )
#define SBB_PARAM_L410_OFFSET ( 0x000024d4U )
#define SBB_PARAM_H411_OFFSET ( 0x000024d8U )
#define SBB_PARAM_L411_OFFSET ( 0x000024dcU )
#define SBB_PARAM_H412_OFFSET ( 0x000024e0U )
#define SBB_PARAM_L412_OFFSET ( 0x000024e4U )
#define SBB_PARAM_H413_OFFSET ( 0x000024e8U )
#define SBB_PARAM_L413_OFFSET ( 0x000024ecU )
#define SBB_PARAM_H414_OFFSET ( 0x000024f0U )
#define SBB_PARAM_L414_OFFSET ( 0x000024f4U )
#define SBB_PARAM_H415_OFFSET ( 0x000024f8U )
#define SBB_PARAM_L415_OFFSET ( 0x000024fcU )
#define SBB_PARAM_H416_OFFSET ( 0x00002500U )
#define SBB_PARAM_L416_OFFSET ( 0x00002504U )
#define SBB_PARAM_H417_OFFSET ( 0x00002508U )
#define SBB_PARAM_L417_OFFSET ( 0x0000250cU )
#define SBB_PARAM_H418_OFFSET ( 0x00002510U )
#define SBB_PARAM_L418_OFFSET ( 0x00002514U )
#define SBB_PARAM_H419_OFFSET ( 0x00002518U )
#define SBB_PARAM_L419_OFFSET ( 0x0000251cU )
#define SBB_PARAM_H420_OFFSET ( 0x00002520U )
#define SBB_PARAM_L420_OFFSET ( 0x00002524U )
#define SBB_PARAM_H421_OFFSET ( 0x00002528U )
#define SBB_PARAM_L421_OFFSET ( 0x0000252cU )
#define SBB_PARAM_H422_OFFSET ( 0x00002530U )
#define SBB_PARAM_L422_OFFSET ( 0x00002534U )
#define SBB_PARAM_H423_OFFSET ( 0x00002538U )
#define SBB_PARAM_L423_OFFSET ( 0x0000253cU )
#define SBB_PARAM_H424_OFFSET ( 0x00002540U )
#define SBB_PARAM_L424_OFFSET ( 0x00002544U )
#define SBB_PARAM_H425_OFFSET ( 0x00002548U )
#define SBB_PARAM_L425_OFFSET ( 0x0000254cU )
#define SBB_PARAM_H426_OFFSET ( 0x00002550U )
#define SBB_PARAM_L426_OFFSET ( 0x00002554U )
#define SBB_PARAM_H427_OFFSET ( 0x00002558U )
#define SBB_PARAM_L427_OFFSET ( 0x0000255cU )
#define SBB_PARAM_H428_OFFSET ( 0x00002560U )
#define SBB_PARAM_L428_OFFSET ( 0x00002564U )
#define SBB_PARAM_H429_OFFSET ( 0x00002568U )
#define SBB_PARAM_L429_OFFSET ( 0x0000256cU )
#define SBB_PARAM_H430_OFFSET ( 0x00002570U )
#define SBB_PARAM_L430_OFFSET ( 0x00002574U )
#define SBB_PARAM_H431_OFFSET ( 0x00002578U )
#define SBB_PARAM_L431_OFFSET ( 0x0000257cU )
#define SBB_PARAM_H432_OFFSET ( 0x00002580U )
#define SBB_PARAM_L432_OFFSET ( 0x00002584U )
#define SBB_PARAM_H433_OFFSET ( 0x00002588U )
#define SBB_PARAM_L433_OFFSET ( 0x0000258cU )
#define SBB_PARAM_H434_OFFSET ( 0x00002590U )
#define SBB_PARAM_L434_OFFSET ( 0x00002594U )
#define SBB_PARAM_H435_OFFSET ( 0x00002598U )
#define SBB_PARAM_L435_OFFSET ( 0x0000259cU )
#define SBB_PARAM_H436_OFFSET ( 0x000025a0U )
#define SBB_PARAM_L436_OFFSET ( 0x000025a4U )
#define SBB_PARAM_H437_OFFSET ( 0x000025a8U )
#define SBB_PARAM_L437_OFFSET ( 0x000025acU )
#define SBB_PARAM_H438_OFFSET ( 0x000025b0U )
#define SBB_PARAM_L438_OFFSET ( 0x000025b4U )
#define SBB_PARAM_H439_OFFSET ( 0x000025b8U )
#define SBB_PARAM_L439_OFFSET ( 0x000025bcU )
#define SBB_PARAM_H440_OFFSET ( 0x000025c0U )
#define SBB_PARAM_L440_OFFSET ( 0x000025c4U )
#define SBB_PARAM_H441_OFFSET ( 0x000025c8U )
#define SBB_PARAM_L441_OFFSET ( 0x000025ccU )
#define SBB_PARAM_H442_OFFSET ( 0x000025d0U )
#define SBB_PARAM_L442_OFFSET ( 0x000025d4U )
#define SBB_PARAM_H443_OFFSET ( 0x000025d8U )
#define SBB_PARAM_L443_OFFSET ( 0x000025dcU )
#define SBB_PARAM_H444_OFFSET ( 0x000025e0U )
#define SBB_PARAM_L444_OFFSET ( 0x000025e4U )
#define SBB_PARAM_H445_OFFSET ( 0x000025e8U )
#define SBB_PARAM_L445_OFFSET ( 0x000025ecU )
#define SBB_PARAM_H446_OFFSET ( 0x000025f0U )
#define SBB_PARAM_L446_OFFSET ( 0x000025f4U )
#define SBB_PARAM_H447_OFFSET ( 0x000025f8U )
#define SBB_PARAM_L447_OFFSET ( 0x000025fcU )
#define SBB_PARAM_H448_OFFSET ( 0x00002600U )
#define SBB_PARAM_L448_OFFSET ( 0x00002604U )
#define SBB_PARAM_H449_OFFSET ( 0x00002608U )
#define SBB_PARAM_L449_OFFSET ( 0x0000260cU )
#define SBB_PARAM_H450_OFFSET ( 0x00002610U )
#define SBB_PARAM_L450_OFFSET ( 0x00002614U )
#define SBB_PARAM_H451_OFFSET ( 0x00002618U )
#define SBB_PARAM_L451_OFFSET ( 0x0000261cU )
#define SBB_PARAM_H452_OFFSET ( 0x00002620U )
#define SBB_PARAM_L452_OFFSET ( 0x00002624U )
#define SBB_PARAM_H453_OFFSET ( 0x00002628U )
#define SBB_PARAM_L453_OFFSET ( 0x0000262cU )
#define SBB_PARAM_H454_OFFSET ( 0x00002630U )
#define SBB_PARAM_L454_OFFSET ( 0x00002634U )
#define SBB_PARAM_H455_OFFSET ( 0x00002638U )
#define SBB_PARAM_L455_OFFSET ( 0x0000263cU )
#define SBB_PARAM_H456_OFFSET ( 0x00002640U )
#define SBB_PARAM_L456_OFFSET ( 0x00002644U )
#define SBB_PARAM_H457_OFFSET ( 0x00002648U )
#define SBB_PARAM_L457_OFFSET ( 0x0000264cU )
#define SBB_PARAM_H458_OFFSET ( 0x00002650U )
#define SBB_PARAM_L458_OFFSET ( 0x00002654U )
#define SBB_PARAM_H459_OFFSET ( 0x00002658U )
#define SBB_PARAM_L459_OFFSET ( 0x0000265cU )
#define SBB_PARAM_H460_OFFSET ( 0x00002660U )
#define SBB_PARAM_L460_OFFSET ( 0x00002664U )
#define SBB_PARAM_H461_OFFSET ( 0x00002668U )
#define SBB_PARAM_L461_OFFSET ( 0x0000266cU )
#define SBB_PARAM_H462_OFFSET ( 0x00002670U )
#define SBB_PARAM_L462_OFFSET ( 0x00002674U )
#define SBB_PARAM_H463_OFFSET ( 0x00002678U )
#define SBB_PARAM_L463_OFFSET ( 0x0000267cU )
#define SBB_PARAM_H464_OFFSET ( 0x00002680U )
#define SBB_PARAM_L464_OFFSET ( 0x00002684U )
#define SBB_PARAM_H465_OFFSET ( 0x00002688U )
#define SBB_PARAM_L465_OFFSET ( 0x0000268cU )
#define SBB_PARAM_H466_OFFSET ( 0x00002690U )
#define SBB_PARAM_L466_OFFSET ( 0x00002694U )
#define SBB_PARAM_H467_OFFSET ( 0x00002698U )
#define SBB_PARAM_L467_OFFSET ( 0x0000269cU )
#define SBB_PARAM_H468_OFFSET ( 0x000026a0U )
#define SBB_PARAM_L468_OFFSET ( 0x000026a4U )
#define SBB_PARAM_H469_OFFSET ( 0x000026a8U )
#define SBB_PARAM_L469_OFFSET ( 0x000026acU )
#define SBB_PARAM_H470_OFFSET ( 0x000026b0U )
#define SBB_PARAM_L470_OFFSET ( 0x000026b4U )
#define SBB_PARAM_H471_OFFSET ( 0x000026b8U )
#define SBB_PARAM_L471_OFFSET ( 0x000026bcU )
#define SBB_PARAM_H472_OFFSET ( 0x000026c0U )
#define SBB_PARAM_L472_OFFSET ( 0x000026c4U )
#define SBB_PARAM_H473_OFFSET ( 0x000026c8U )
#define SBB_PARAM_L473_OFFSET ( 0x000026ccU )
#define SBB_PARAM_H474_OFFSET ( 0x000026d0U )
#define SBB_PARAM_L474_OFFSET ( 0x000026d4U )
#define SBB_PARAM_H475_OFFSET ( 0x000026d8U )
#define SBB_PARAM_L475_OFFSET ( 0x000026dcU )
#define SBB_PARAM_H476_OFFSET ( 0x000026e0U )
#define SBB_PARAM_L476_OFFSET ( 0x000026e4U )
#define SBB_PARAM_H477_OFFSET ( 0x000026e8U )
#define SBB_PARAM_L477_OFFSET ( 0x000026ecU )
#define SBB_PARAM_H478_OFFSET ( 0x000026f0U )
#define SBB_PARAM_L478_OFFSET ( 0x000026f4U )
#define SBB_PARAM_H479_OFFSET ( 0x000026f8U )
#define SBB_PARAM_L479_OFFSET ( 0x000026fcU )
#define SBB_PARAM_H480_OFFSET ( 0x00002700U )
#define SBB_PARAM_L480_OFFSET ( 0x00002704U )
#define SBB_PARAM_H481_OFFSET ( 0x00002708U )
#define SBB_PARAM_L481_OFFSET ( 0x0000270cU )
#define SBB_PARAM_H482_OFFSET ( 0x00002710U )
#define SBB_PARAM_L482_OFFSET ( 0x00002714U )
#define SBB_PARAM_H483_OFFSET ( 0x00002718U )
#define SBB_PARAM_L483_OFFSET ( 0x0000271cU )
#define SBB_PARAM_H484_OFFSET ( 0x00002720U )
#define SBB_PARAM_L484_OFFSET ( 0x00002724U )
#define SBB_PARAM_H485_OFFSET ( 0x00002728U )
#define SBB_PARAM_L485_OFFSET ( 0x0000272cU )
#define SBB_PARAM_H486_OFFSET ( 0x00002730U )
#define SBB_PARAM_L486_OFFSET ( 0x00002734U )
#define SBB_PARAM_H487_OFFSET ( 0x00002738U )
#define SBB_PARAM_L487_OFFSET ( 0x0000273cU )
#define SBB_PARAM_H488_OFFSET ( 0x00002740U )
#define SBB_PARAM_L488_OFFSET ( 0x00002744U )
#define SBB_PARAM_H489_OFFSET ( 0x00002748U )
#define SBB_PARAM_L489_OFFSET ( 0x0000274cU )
#define SBB_PARAM_H490_OFFSET ( 0x00002750U )
#define SBB_PARAM_L490_OFFSET ( 0x00002754U )
#define SBB_PARAM_H491_OFFSET ( 0x00002758U )
#define SBB_PARAM_L491_OFFSET ( 0x0000275cU )
#define SBB_PARAM_H492_OFFSET ( 0x00002760U )
#define SBB_PARAM_L492_OFFSET ( 0x00002764U )
#define SBB_PARAM_H493_OFFSET ( 0x00002768U )
#define SBB_PARAM_L493_OFFSET ( 0x0000276cU )
#define SBB_PARAM_H494_OFFSET ( 0x00002770U )
#define SBB_PARAM_L494_OFFSET ( 0x00002774U )
#define SBB_PARAM_H495_OFFSET ( 0x00002778U )
#define SBB_PARAM_L495_OFFSET ( 0x0000277cU )
#define SBB_PARAM_H496_OFFSET ( 0x00002780U )
#define SBB_PARAM_L496_OFFSET ( 0x00002784U )
#define SBB_PARAM_H497_OFFSET ( 0x00002788U )
#define SBB_PARAM_L497_OFFSET ( 0x0000278cU )
#define SBB_PARAM_H498_OFFSET ( 0x00002790U )
#define SBB_PARAM_L498_OFFSET ( 0x00002794U )
#define SBB_PARAM_H499_OFFSET ( 0x00002798U )
#define SBB_PARAM_L499_OFFSET ( 0x0000279cU )
#define SBB_PARAM_H500_OFFSET ( 0x000027a0U )
#define SBB_PARAM_L500_OFFSET ( 0x000027a4U )
#define SBB_PARAM_H501_OFFSET ( 0x000027a8U )
#define SBB_PARAM_L501_OFFSET ( 0x000027acU )
#define SBB_PARAM_H502_OFFSET ( 0x000027b0U )
#define SBB_PARAM_L502_OFFSET ( 0x000027b4U )
#define SBB_PARAM_H503_OFFSET ( 0x000027b8U )
#define SBB_PARAM_L503_OFFSET ( 0x000027bcU )
#define SBB_PARAM_H504_OFFSET ( 0x000027c0U )
#define SBB_PARAM_L504_OFFSET ( 0x000027c4U )
#define SBB_PARAM_H505_OFFSET ( 0x000027c8U )
#define SBB_PARAM_L505_OFFSET ( 0x000027ccU )
#define SBB_PARAM_H506_OFFSET ( 0x000027d0U )
#define SBB_PARAM_L506_OFFSET ( 0x000027d4U )
#define SBB_PARAM_H507_OFFSET ( 0x000027d8U )
#define SBB_PARAM_L507_OFFSET ( 0x000027dcU )
#define SBB_PARAM_H508_OFFSET ( 0x000027e0U )
#define SBB_PARAM_L508_OFFSET ( 0x000027e4U )
#define SBB_PARAM_H509_OFFSET ( 0x000027e8U )
#define SBB_PARAM_L509_OFFSET ( 0x000027ecU )
#define SBB_PARAM_H510_OFFSET ( 0x000027f0U )
#define SBB_PARAM_L510_OFFSET ( 0x000027f4U )
#define SBB_PARAM_H511_OFFSET ( 0x000027f8U )
#define SBB_PARAM_L511_OFFSET ( 0x000027fcU )
#define SBB_DBG_STAT_OFFSET ( 0x00004004U )
#define SBB_INVLD_INST_ADDR_OFFSET ( 0x0000400cU )
#define SBB_PC_DATA_ADDR_OFFSET ( 0x00004010U )
#define SBB_DEC_STG_PC_OFFSET ( 0x00004014U )
#define SBB_DEC_STG_OPCODE_OFFSET ( 0x00004018U )
#define SBB_ISS_STG_PC_OFFSET ( 0x0000401cU )
#define SBB_ISS_STG_OPCODE_OFFSET ( 0x00004020U )
#define SBB_STG_STAT_OFFSET ( 0x00004024U )
#define SBB_FREG_HEADPTR_OFFSET ( 0x00004028U )
#define SBB_FREG_TAILPTR_OFFSET ( 0x0000402cU )
#define SBB_IN_FIFO_HEADPTR_OFFSET ( 0x00004030U )
#define SBB_IN_FIFO_TAILPTR_OFFSET ( 0x00004034U )
#define SBB_OUT_FIFO_HEADPTR_OFFSET ( 0x00004038U )
#define SBB_OUT_FIFO_TAILPTR_OFFSET ( 0x0000403cU )
#define SBB_STGMEM_FIFO_HEADPTR_OFFSET ( 0x00004040U )
#define SBB_STGMEM_FIFO_TAILPTR_OFFSET ( 0x00004044U )
#define SBB_CPI_H_OFFSET ( 0x00004048U )
#define SBB_CPI_L_OFFSET ( 0x0000404cU )
#define SBB_IREG_H_OFFSET ( 0x00004050U )
#define SBB_IREG_L_OFFSET ( 0x00004054U )
#define SBB_IN_FIFO_HOF_H_OFFSET ( 0x00004060U )
#define SBB_IN_FIFO_HOF_L_OFFSET ( 0x00004064U )
#define SBB_OUT_FIFO_HOF_H_OFFSET ( 0x00004068U )
#define SBB_OUT_FIFO_HOF_L_OFFSET ( 0x0000406cU )
#define SBB_FIFO_OU_STS_OFFSET ( 0x00004078U )
#define SBB_FIFO_FE_STS_OFFSET ( 0x00004084U )
#define SBB_GENERAL_STAT_OFFSET ( 0x00004088U )
#define SBB_CLR_MEM_OFFSET ( 0x0000408cU )
#define SBB_AXI_CTRL_OFFSET ( 0x00004090U )
#define SBB_NS_RESEED_CNTER_OFFSET ( 0x000040a0U )
#define SBB_IN_FIFO_H0_OFFSET ( 0x00005800U )
#define SBB_IN_FIFO_L0_OFFSET ( 0x00005804U )
#define SBB_IN_FIFO_H1_OFFSET ( 0x00005808U )
#define SBB_IN_FIFO_L1_OFFSET ( 0x0000580cU )
#define SBB_IN_FIFO_H2_OFFSET ( 0x00005810U )
#define SBB_IN_FIFO_L2_OFFSET ( 0x00005814U )
#define SBB_IN_FIFO_H3_OFFSET ( 0x00005818U )
#define SBB_IN_FIFO_L3_OFFSET ( 0x0000581cU )
#define SBB_IN_FIFO_H4_OFFSET ( 0x00005820U )
#define SBB_IN_FIFO_L4_OFFSET ( 0x00005824U )
#define SBB_IN_FIFO_H5_OFFSET ( 0x00005828U )
#define SBB_IN_FIFO_L5_OFFSET ( 0x0000582cU )
#define SBB_IN_FIFO_H6_OFFSET ( 0x00005830U )
#define SBB_IN_FIFO_L6_OFFSET ( 0x00005834U )
#define SBB_IN_FIFO_H7_OFFSET ( 0x00005838U )
#define SBB_IN_FIFO_L7_OFFSET ( 0x0000583cU )
#define SBB_OUT_FIFO_H0_OFFSET ( 0x00006000U )
#define SBB_OUT_FIFO_L0_OFFSET ( 0x00006004U )
#define SBB_OUT_FIFO_H1_OFFSET ( 0x00006008U )
#define SBB_OUT_FIFO_L1_OFFSET ( 0x0000600cU )
#define SBB_OUT_FIFO_H2_OFFSET ( 0x00006010U )
#define SBB_OUT_FIFO_L2_OFFSET ( 0x00006014U )
#define SBB_OUT_FIFO_H3_OFFSET ( 0x00006018U )
#define SBB_OUT_FIFO_L3_OFFSET ( 0x0000601cU )
#define SBB_OUT_FIFO_H4_OFFSET ( 0x00006020U )
#define SBB_OUT_FIFO_L4_OFFSET ( 0x00006024U )
#define SBB_OUT_FIFO_H5_OFFSET ( 0x00006028U )
#define SBB_OUT_FIFO_L5_OFFSET ( 0x0000602cU )
#define SBB_OUT_FIFO_H6_OFFSET ( 0x00006030U )
#define SBB_OUT_FIFO_L6_OFFSET ( 0x00006034U )
#define SBB_OUT_FIFO_H7_OFFSET ( 0x00006038U )
#define SBB_OUT_FIFO_L7_OFFSET ( 0x0000603cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define SBB_SEMAPHORE_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_SEMAPHORE_OFFSET ) ))
#define SBB_FUNCTION_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_FUNCTION_OFFSET ) ))
#define SBB_AUTH_STAT_PARAM_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_AUTH_STAT_PARAM_OFFSET ) ))
#define SBB_AUTH_STAT_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_AUTH_STAT_OFFSET ) ))
#define SBB_STAT0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_STAT0_OFFSET ) ))
#define SBB_STAT1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_STAT1_OFFSET ) ))
#define SBB_DBG0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_DBG0_OFFSET ) ))
#define SBB_DBG1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_DBG1_OFFSET ) ))
#define SBB_VENDOR0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VENDOR0_OFFSET ) ))
#define SBB_VENDOR1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VENDOR1_OFFSET ) ))
#define SBB_RSLT0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_RSLT0_OFFSET ) ))
#define SBB_RSLT1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_RSLT1_OFFSET ) ))
#define SBB_MEAS_ACTRL_VERIF_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_ACTRL_VERIF_OFFSET ) ))
#define SBB_MEAS_ACTRL_SBB_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_ACTRL_SBB_OFFSET ) ))
#define SBB_MEAS_ACTRL_EXT_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_ACTRL_EXT_OFFSET ) ))
#define SBB_MEAS_ACTRL_CLR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_ACTRL_CLR_OFFSET ) ))
#define SBB_UNIQUE_ID0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_UNIQUE_ID0_OFFSET ) ))
#define SBB_UNIQUE_ID1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_UNIQUE_ID1_OFFSET ) ))
#define SBB_HW_VER0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_HW_VER0_OFFSET ) ))
#define SBB_HW_VER1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_HW_VER1_OFFSET ) ))
#define SBB_MEAS_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H0_OFFSET ) ))
#define SBB_MEAS_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L0_OFFSET ) ))
#define SBB_MEAS_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H1_OFFSET ) ))
#define SBB_MEAS_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L1_OFFSET ) ))
#define SBB_MEAS_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H2_OFFSET ) ))
#define SBB_MEAS_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L2_OFFSET ) ))
#define SBB_MEAS_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H3_OFFSET ) ))
#define SBB_MEAS_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L3_OFFSET ) ))
#define SBB_MEAS_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H4_OFFSET ) ))
#define SBB_MEAS_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L4_OFFSET ) ))
#define SBB_MEAS_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H5_OFFSET ) ))
#define SBB_MEAS_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L5_OFFSET ) ))
#define SBB_MEAS_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H6_OFFSET ) ))
#define SBB_MEAS_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L6_OFFSET ) ))
#define SBB_MEAS_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H7_OFFSET ) ))
#define SBB_MEAS_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L7_OFFSET ) ))
#define SBB_MEAS_H8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H8_OFFSET ) ))
#define SBB_MEAS_L8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L8_OFFSET ) ))
#define SBB_MEAS_H9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H9_OFFSET ) ))
#define SBB_MEAS_L9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L9_OFFSET ) ))
#define SBB_MEAS_H10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H10_OFFSET ) ))
#define SBB_MEAS_L10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L10_OFFSET ) ))
#define SBB_MEAS_H11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H11_OFFSET ) ))
#define SBB_MEAS_L11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L11_OFFSET ) ))
#define SBB_MEAS_H12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H12_OFFSET ) ))
#define SBB_MEAS_L12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L12_OFFSET ) ))
#define SBB_MEAS_H13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H13_OFFSET ) ))
#define SBB_MEAS_L13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L13_OFFSET ) ))
#define SBB_MEAS_H14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H14_OFFSET ) ))
#define SBB_MEAS_L14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L14_OFFSET ) ))
#define SBB_MEAS_H15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H15_OFFSET ) ))
#define SBB_MEAS_L15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L15_OFFSET ) ))
#define SBB_MEAS_H16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H16_OFFSET ) ))
#define SBB_MEAS_L16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L16_OFFSET ) ))
#define SBB_MEAS_H17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H17_OFFSET ) ))
#define SBB_MEAS_L17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L17_OFFSET ) ))
#define SBB_MEAS_H18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H18_OFFSET ) ))
#define SBB_MEAS_L18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L18_OFFSET ) ))
#define SBB_MEAS_H19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H19_OFFSET ) ))
#define SBB_MEAS_L19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L19_OFFSET ) ))
#define SBB_MEAS_H20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H20_OFFSET ) ))
#define SBB_MEAS_L20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L20_OFFSET ) ))
#define SBB_MEAS_H21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H21_OFFSET ) ))
#define SBB_MEAS_L21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L21_OFFSET ) ))
#define SBB_MEAS_H22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H22_OFFSET ) ))
#define SBB_MEAS_L22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L22_OFFSET ) ))
#define SBB_MEAS_H23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H23_OFFSET ) ))
#define SBB_MEAS_L23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L23_OFFSET ) ))
#define SBB_MEAS_H24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H24_OFFSET ) ))
#define SBB_MEAS_L24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L24_OFFSET ) ))
#define SBB_MEAS_H25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H25_OFFSET ) ))
#define SBB_MEAS_L25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L25_OFFSET ) ))
#define SBB_MEAS_H26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H26_OFFSET ) ))
#define SBB_MEAS_L26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L26_OFFSET ) ))
#define SBB_MEAS_H27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H27_OFFSET ) ))
#define SBB_MEAS_L27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L27_OFFSET ) ))
#define SBB_MEAS_H28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H28_OFFSET ) ))
#define SBB_MEAS_L28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L28_OFFSET ) ))
#define SBB_MEAS_H29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H29_OFFSET ) ))
#define SBB_MEAS_L29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L29_OFFSET ) ))
#define SBB_MEAS_H30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H30_OFFSET ) ))
#define SBB_MEAS_L30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L30_OFFSET ) ))
#define SBB_MEAS_H31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H31_OFFSET ) ))
#define SBB_MEAS_L31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L31_OFFSET ) ))
#define SBB_MEAS_H32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H32_OFFSET ) ))
#define SBB_MEAS_L32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L32_OFFSET ) ))
#define SBB_MEAS_H33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H33_OFFSET ) ))
#define SBB_MEAS_L33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L33_OFFSET ) ))
#define SBB_MEAS_H34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H34_OFFSET ) ))
#define SBB_MEAS_L34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L34_OFFSET ) ))
#define SBB_MEAS_H35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H35_OFFSET ) ))
#define SBB_MEAS_L35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L35_OFFSET ) ))
#define SBB_MEAS_H36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H36_OFFSET ) ))
#define SBB_MEAS_L36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L36_OFFSET ) ))
#define SBB_MEAS_H37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H37_OFFSET ) ))
#define SBB_MEAS_L37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L37_OFFSET ) ))
#define SBB_MEAS_H38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H38_OFFSET ) ))
#define SBB_MEAS_L38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L38_OFFSET ) ))
#define SBB_MEAS_H39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H39_OFFSET ) ))
#define SBB_MEAS_L39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L39_OFFSET ) ))
#define SBB_MEAS_H40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H40_OFFSET ) ))
#define SBB_MEAS_L40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L40_OFFSET ) ))
#define SBB_MEAS_H41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H41_OFFSET ) ))
#define SBB_MEAS_L41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L41_OFFSET ) ))
#define SBB_MEAS_H42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H42_OFFSET ) ))
#define SBB_MEAS_L42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L42_OFFSET ) ))
#define SBB_MEAS_H43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H43_OFFSET ) ))
#define SBB_MEAS_L43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L43_OFFSET ) ))
#define SBB_MEAS_H44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H44_OFFSET ) ))
#define SBB_MEAS_L44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L44_OFFSET ) ))
#define SBB_MEAS_H45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H45_OFFSET ) ))
#define SBB_MEAS_L45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L45_OFFSET ) ))
#define SBB_MEAS_H46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H46_OFFSET ) ))
#define SBB_MEAS_L46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L46_OFFSET ) ))
#define SBB_MEAS_H47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H47_OFFSET ) ))
#define SBB_MEAS_L47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L47_OFFSET ) ))
#define SBB_MEAS_H48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H48_OFFSET ) ))
#define SBB_MEAS_L48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L48_OFFSET ) ))
#define SBB_MEAS_H49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H49_OFFSET ) ))
#define SBB_MEAS_L49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L49_OFFSET ) ))
#define SBB_MEAS_H50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H50_OFFSET ) ))
#define SBB_MEAS_L50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L50_OFFSET ) ))
#define SBB_MEAS_H51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H51_OFFSET ) ))
#define SBB_MEAS_L51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L51_OFFSET ) ))
#define SBB_MEAS_H52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H52_OFFSET ) ))
#define SBB_MEAS_L52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L52_OFFSET ) ))
#define SBB_MEAS_H53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H53_OFFSET ) ))
#define SBB_MEAS_L53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L53_OFFSET ) ))
#define SBB_MEAS_H54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H54_OFFSET ) ))
#define SBB_MEAS_L54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L54_OFFSET ) ))
#define SBB_MEAS_H55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H55_OFFSET ) ))
#define SBB_MEAS_L55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L55_OFFSET ) ))
#define SBB_MEAS_H56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H56_OFFSET ) ))
#define SBB_MEAS_L56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L56_OFFSET ) ))
#define SBB_MEAS_H57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H57_OFFSET ) ))
#define SBB_MEAS_L57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L57_OFFSET ) ))
#define SBB_MEAS_H58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H58_OFFSET ) ))
#define SBB_MEAS_L58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L58_OFFSET ) ))
#define SBB_MEAS_H59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H59_OFFSET ) ))
#define SBB_MEAS_L59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L59_OFFSET ) ))
#define SBB_MEAS_H60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H60_OFFSET ) ))
#define SBB_MEAS_L60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L60_OFFSET ) ))
#define SBB_MEAS_H61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H61_OFFSET ) ))
#define SBB_MEAS_L61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L61_OFFSET ) ))
#define SBB_MEAS_H62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H62_OFFSET ) ))
#define SBB_MEAS_L62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L62_OFFSET ) ))
#define SBB_MEAS_H63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H63_OFFSET ) ))
#define SBB_MEAS_L63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L63_OFFSET ) ))
#define SBB_MEAS_H64_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H64_OFFSET ) ))
#define SBB_MEAS_L64_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L64_OFFSET ) ))
#define SBB_MEAS_H65_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H65_OFFSET ) ))
#define SBB_MEAS_L65_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L65_OFFSET ) ))
#define SBB_MEAS_H66_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H66_OFFSET ) ))
#define SBB_MEAS_L66_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L66_OFFSET ) ))
#define SBB_MEAS_H67_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H67_OFFSET ) ))
#define SBB_MEAS_L67_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L67_OFFSET ) ))
#define SBB_MEAS_H68_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H68_OFFSET ) ))
#define SBB_MEAS_L68_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L68_OFFSET ) ))
#define SBB_MEAS_H69_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H69_OFFSET ) ))
#define SBB_MEAS_L69_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L69_OFFSET ) ))
#define SBB_MEAS_H70_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H70_OFFSET ) ))
#define SBB_MEAS_L70_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L70_OFFSET ) ))
#define SBB_MEAS_H71_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H71_OFFSET ) ))
#define SBB_MEAS_L71_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L71_OFFSET ) ))
#define SBB_MEAS_H72_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H72_OFFSET ) ))
#define SBB_MEAS_L72_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L72_OFFSET ) ))
#define SBB_MEAS_H73_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H73_OFFSET ) ))
#define SBB_MEAS_L73_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L73_OFFSET ) ))
#define SBB_MEAS_H74_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H74_OFFSET ) ))
#define SBB_MEAS_L74_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L74_OFFSET ) ))
#define SBB_MEAS_H75_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H75_OFFSET ) ))
#define SBB_MEAS_L75_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L75_OFFSET ) ))
#define SBB_MEAS_H76_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H76_OFFSET ) ))
#define SBB_MEAS_L76_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L76_OFFSET ) ))
#define SBB_MEAS_H77_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H77_OFFSET ) ))
#define SBB_MEAS_L77_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L77_OFFSET ) ))
#define SBB_MEAS_H78_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H78_OFFSET ) ))
#define SBB_MEAS_L78_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L78_OFFSET ) ))
#define SBB_MEAS_H79_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H79_OFFSET ) ))
#define SBB_MEAS_L79_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L79_OFFSET ) ))
#define SBB_MEAS_H80_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H80_OFFSET ) ))
#define SBB_MEAS_L80_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L80_OFFSET ) ))
#define SBB_MEAS_H81_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H81_OFFSET ) ))
#define SBB_MEAS_L81_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L81_OFFSET ) ))
#define SBB_MEAS_H82_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H82_OFFSET ) ))
#define SBB_MEAS_L82_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L82_OFFSET ) ))
#define SBB_MEAS_H83_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H83_OFFSET ) ))
#define SBB_MEAS_L83_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L83_OFFSET ) ))
#define SBB_MEAS_H84_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H84_OFFSET ) ))
#define SBB_MEAS_L84_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L84_OFFSET ) ))
#define SBB_MEAS_H85_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H85_OFFSET ) ))
#define SBB_MEAS_L85_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L85_OFFSET ) ))
#define SBB_MEAS_H86_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H86_OFFSET ) ))
#define SBB_MEAS_L86_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L86_OFFSET ) ))
#define SBB_MEAS_H87_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H87_OFFSET ) ))
#define SBB_MEAS_L87_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L87_OFFSET ) ))
#define SBB_MEAS_H88_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H88_OFFSET ) ))
#define SBB_MEAS_L88_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L88_OFFSET ) ))
#define SBB_MEAS_H89_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H89_OFFSET ) ))
#define SBB_MEAS_L89_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L89_OFFSET ) ))
#define SBB_MEAS_H90_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H90_OFFSET ) ))
#define SBB_MEAS_L90_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L90_OFFSET ) ))
#define SBB_MEAS_H91_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H91_OFFSET ) ))
#define SBB_MEAS_L91_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L91_OFFSET ) ))
#define SBB_MEAS_H92_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H92_OFFSET ) ))
#define SBB_MEAS_L92_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L92_OFFSET ) ))
#define SBB_MEAS_H93_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H93_OFFSET ) ))
#define SBB_MEAS_L93_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L93_OFFSET ) ))
#define SBB_MEAS_H94_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H94_OFFSET ) ))
#define SBB_MEAS_L94_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L94_OFFSET ) ))
#define SBB_MEAS_H95_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H95_OFFSET ) ))
#define SBB_MEAS_L95_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L95_OFFSET ) ))
#define SBB_MEAS_H96_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H96_OFFSET ) ))
#define SBB_MEAS_L96_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L96_OFFSET ) ))
#define SBB_MEAS_H97_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H97_OFFSET ) ))
#define SBB_MEAS_L97_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L97_OFFSET ) ))
#define SBB_MEAS_H98_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H98_OFFSET ) ))
#define SBB_MEAS_L98_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L98_OFFSET ) ))
#define SBB_MEAS_H99_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H99_OFFSET ) ))
#define SBB_MEAS_L99_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L99_OFFSET ) ))
#define SBB_MEAS_H100_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H100_OFFSET ) ))
#define SBB_MEAS_L100_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L100_OFFSET ) ))
#define SBB_MEAS_H101_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H101_OFFSET ) ))
#define SBB_MEAS_L101_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L101_OFFSET ) ))
#define SBB_MEAS_H102_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H102_OFFSET ) ))
#define SBB_MEAS_L102_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L102_OFFSET ) ))
#define SBB_MEAS_H103_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H103_OFFSET ) ))
#define SBB_MEAS_L103_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L103_OFFSET ) ))
#define SBB_MEAS_H104_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H104_OFFSET ) ))
#define SBB_MEAS_L104_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L104_OFFSET ) ))
#define SBB_MEAS_H105_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H105_OFFSET ) ))
#define SBB_MEAS_L105_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L105_OFFSET ) ))
#define SBB_MEAS_H106_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H106_OFFSET ) ))
#define SBB_MEAS_L106_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L106_OFFSET ) ))
#define SBB_MEAS_H107_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H107_OFFSET ) ))
#define SBB_MEAS_L107_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L107_OFFSET ) ))
#define SBB_MEAS_H108_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H108_OFFSET ) ))
#define SBB_MEAS_L108_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L108_OFFSET ) ))
#define SBB_MEAS_H109_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H109_OFFSET ) ))
#define SBB_MEAS_L109_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L109_OFFSET ) ))
#define SBB_MEAS_H110_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H110_OFFSET ) ))
#define SBB_MEAS_L110_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L110_OFFSET ) ))
#define SBB_MEAS_H111_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H111_OFFSET ) ))
#define SBB_MEAS_L111_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L111_OFFSET ) ))
#define SBB_MEAS_H112_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H112_OFFSET ) ))
#define SBB_MEAS_L112_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L112_OFFSET ) ))
#define SBB_MEAS_H113_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H113_OFFSET ) ))
#define SBB_MEAS_L113_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L113_OFFSET ) ))
#define SBB_MEAS_H114_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H114_OFFSET ) ))
#define SBB_MEAS_L114_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L114_OFFSET ) ))
#define SBB_MEAS_H115_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H115_OFFSET ) ))
#define SBB_MEAS_L115_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L115_OFFSET ) ))
#define SBB_MEAS_H116_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H116_OFFSET ) ))
#define SBB_MEAS_L116_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L116_OFFSET ) ))
#define SBB_MEAS_H117_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H117_OFFSET ) ))
#define SBB_MEAS_L117_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L117_OFFSET ) ))
#define SBB_MEAS_H118_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H118_OFFSET ) ))
#define SBB_MEAS_L118_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L118_OFFSET ) ))
#define SBB_MEAS_H119_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H119_OFFSET ) ))
#define SBB_MEAS_L119_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L119_OFFSET ) ))
#define SBB_MEAS_H120_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H120_OFFSET ) ))
#define SBB_MEAS_L120_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L120_OFFSET ) ))
#define SBB_MEAS_H121_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H121_OFFSET ) ))
#define SBB_MEAS_L121_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L121_OFFSET ) ))
#define SBB_MEAS_H122_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H122_OFFSET ) ))
#define SBB_MEAS_L122_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L122_OFFSET ) ))
#define SBB_MEAS_H123_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H123_OFFSET ) ))
#define SBB_MEAS_L123_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L123_OFFSET ) ))
#define SBB_MEAS_H124_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H124_OFFSET ) ))
#define SBB_MEAS_L124_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L124_OFFSET ) ))
#define SBB_MEAS_H125_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H125_OFFSET ) ))
#define SBB_MEAS_L125_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L125_OFFSET ) ))
#define SBB_MEAS_H126_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H126_OFFSET ) ))
#define SBB_MEAS_L126_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L126_OFFSET ) ))
#define SBB_MEAS_H127_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H127_OFFSET ) ))
#define SBB_MEAS_L127_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L127_OFFSET ) ))
#define SBB_MEAS_H128_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H128_OFFSET ) ))
#define SBB_MEAS_L128_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L128_OFFSET ) ))
#define SBB_MEAS_H129_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H129_OFFSET ) ))
#define SBB_MEAS_L129_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L129_OFFSET ) ))
#define SBB_MEAS_H130_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H130_OFFSET ) ))
#define SBB_MEAS_L130_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L130_OFFSET ) ))
#define SBB_MEAS_H131_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H131_OFFSET ) ))
#define SBB_MEAS_L131_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L131_OFFSET ) ))
#define SBB_MEAS_H132_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H132_OFFSET ) ))
#define SBB_MEAS_L132_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L132_OFFSET ) ))
#define SBB_MEAS_H133_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H133_OFFSET ) ))
#define SBB_MEAS_L133_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L133_OFFSET ) ))
#define SBB_MEAS_H134_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H134_OFFSET ) ))
#define SBB_MEAS_L134_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L134_OFFSET ) ))
#define SBB_MEAS_H135_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H135_OFFSET ) ))
#define SBB_MEAS_L135_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L135_OFFSET ) ))
#define SBB_MEAS_H136_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H136_OFFSET ) ))
#define SBB_MEAS_L136_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L136_OFFSET ) ))
#define SBB_MEAS_H137_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H137_OFFSET ) ))
#define SBB_MEAS_L137_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L137_OFFSET ) ))
#define SBB_MEAS_H138_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H138_OFFSET ) ))
#define SBB_MEAS_L138_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L138_OFFSET ) ))
#define SBB_MEAS_H139_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H139_OFFSET ) ))
#define SBB_MEAS_L139_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L139_OFFSET ) ))
#define SBB_MEAS_H140_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H140_OFFSET ) ))
#define SBB_MEAS_L140_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L140_OFFSET ) ))
#define SBB_MEAS_H141_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H141_OFFSET ) ))
#define SBB_MEAS_L141_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L141_OFFSET ) ))
#define SBB_MEAS_H142_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H142_OFFSET ) ))
#define SBB_MEAS_L142_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L142_OFFSET ) ))
#define SBB_MEAS_H143_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_H143_OFFSET ) ))
#define SBB_MEAS_L143_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_MEAS_L143_OFFSET ) ))
#define SBB_PCR_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H0_OFFSET ) ))
#define SBB_PCR_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L0_OFFSET ) ))
#define SBB_PCR_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H1_OFFSET ) ))
#define SBB_PCR_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L1_OFFSET ) ))
#define SBB_PCR_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H2_OFFSET ) ))
#define SBB_PCR_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L2_OFFSET ) ))
#define SBB_PCR_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H3_OFFSET ) ))
#define SBB_PCR_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L3_OFFSET ) ))
#define SBB_PCR_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H4_OFFSET ) ))
#define SBB_PCR_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L4_OFFSET ) ))
#define SBB_PCR_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H5_OFFSET ) ))
#define SBB_PCR_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L5_OFFSET ) ))
#define SBB_PCR_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H6_OFFSET ) ))
#define SBB_PCR_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L6_OFFSET ) ))
#define SBB_PCR_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H7_OFFSET ) ))
#define SBB_PCR_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L7_OFFSET ) ))
#define SBB_PCR_H8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_H8_OFFSET ) ))
#define SBB_PCR_L8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PCR_L8_OFFSET ) ))
#define SBB_INT_STS_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_INT_STS_OFFSET ) ))
#define SBB_INT_EN_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_INT_EN_OFFSET ) ))
#define SBB_INT_FRC_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_INT_FRC_OFFSET ) ))
#define SBB_VER_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_H0_OFFSET ) ))
#define SBB_VER_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_L0_OFFSET ) ))
#define SBB_VER_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_H1_OFFSET ) ))
#define SBB_VER_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_L1_OFFSET ) ))
#define SBB_VER_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_H2_OFFSET ) ))
#define SBB_VER_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_L2_OFFSET ) ))
#define SBB_VER_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_H3_OFFSET ) ))
#define SBB_VER_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_VER_L3_OFFSET ) ))
#define SBB_EFUSE_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H0_OFFSET ) ))
#define SBB_EFUSE_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L0_OFFSET ) ))
#define SBB_EFUSE_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H1_OFFSET ) ))
#define SBB_EFUSE_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L1_OFFSET ) ))
#define SBB_EFUSE_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H2_OFFSET ) ))
#define SBB_EFUSE_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L2_OFFSET ) ))
#define SBB_EFUSE_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H3_OFFSET ) ))
#define SBB_EFUSE_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L3_OFFSET ) ))
#define SBB_EFUSE_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H4_OFFSET ) ))
#define SBB_EFUSE_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L4_OFFSET ) ))
#define SBB_EFUSE_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H5_OFFSET ) ))
#define SBB_EFUSE_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L5_OFFSET ) ))
#define SBB_EFUSE_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H6_OFFSET ) ))
#define SBB_EFUSE_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L6_OFFSET ) ))
#define SBB_EFUSE_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H7_OFFSET ) ))
#define SBB_EFUSE_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L7_OFFSET ) ))
#define SBB_EFUSE_H8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H8_OFFSET ) ))
#define SBB_EFUSE_L8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L8_OFFSET ) ))
#define SBB_EFUSE_H9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H9_OFFSET ) ))
#define SBB_EFUSE_L9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L9_OFFSET ) ))
#define SBB_EFUSE_H10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H10_OFFSET ) ))
#define SBB_EFUSE_L10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L10_OFFSET ) ))
#define SBB_EFUSE_H11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H11_OFFSET ) ))
#define SBB_EFUSE_L11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L11_OFFSET ) ))
#define SBB_EFUSE_H12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H12_OFFSET ) ))
#define SBB_EFUSE_L12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L12_OFFSET ) ))
#define SBB_EFUSE_H13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H13_OFFSET ) ))
#define SBB_EFUSE_L13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L13_OFFSET ) ))
#define SBB_EFUSE_H14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H14_OFFSET ) ))
#define SBB_EFUSE_L14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L14_OFFSET ) ))
#define SBB_EFUSE_H15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H15_OFFSET ) ))
#define SBB_EFUSE_L15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L15_OFFSET ) ))
#define SBB_EFUSE_H16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H16_OFFSET ) ))
#define SBB_EFUSE_L16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L16_OFFSET ) ))
#define SBB_EFUSE_H17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H17_OFFSET ) ))
#define SBB_EFUSE_L17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L17_OFFSET ) ))
#define SBB_EFUSE_H18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H18_OFFSET ) ))
#define SBB_EFUSE_L18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L18_OFFSET ) ))
#define SBB_EFUSE_H19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H19_OFFSET ) ))
#define SBB_EFUSE_L19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L19_OFFSET ) ))
#define SBB_EFUSE_H20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H20_OFFSET ) ))
#define SBB_EFUSE_L20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L20_OFFSET ) ))
#define SBB_EFUSE_H21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H21_OFFSET ) ))
#define SBB_EFUSE_L21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L21_OFFSET ) ))
#define SBB_EFUSE_H22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H22_OFFSET ) ))
#define SBB_EFUSE_L22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L22_OFFSET ) ))
#define SBB_EFUSE_H23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H23_OFFSET ) ))
#define SBB_EFUSE_L23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L23_OFFSET ) ))
#define SBB_EFUSE_H24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H24_OFFSET ) ))
#define SBB_EFUSE_L24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L24_OFFSET ) ))
#define SBB_EFUSE_H25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H25_OFFSET ) ))
#define SBB_EFUSE_L25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L25_OFFSET ) ))
#define SBB_EFUSE_H26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H26_OFFSET ) ))
#define SBB_EFUSE_L26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L26_OFFSET ) ))
#define SBB_EFUSE_H27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H27_OFFSET ) ))
#define SBB_EFUSE_L27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L27_OFFSET ) ))
#define SBB_EFUSE_H28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H28_OFFSET ) ))
#define SBB_EFUSE_L28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L28_OFFSET ) ))
#define SBB_EFUSE_H29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H29_OFFSET ) ))
#define SBB_EFUSE_L29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L29_OFFSET ) ))
#define SBB_EFUSE_H30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H30_OFFSET ) ))
#define SBB_EFUSE_L30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L30_OFFSET ) ))
#define SBB_EFUSE_H31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H31_OFFSET ) ))
#define SBB_EFUSE_L31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L31_OFFSET ) ))
#define SBB_EFUSE_H32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H32_OFFSET ) ))
#define SBB_EFUSE_L32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L32_OFFSET ) ))
#define SBB_EFUSE_H33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H33_OFFSET ) ))
#define SBB_EFUSE_L33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L33_OFFSET ) ))
#define SBB_EFUSE_H34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H34_OFFSET ) ))
#define SBB_EFUSE_L34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L34_OFFSET ) ))
#define SBB_EFUSE_H35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H35_OFFSET ) ))
#define SBB_EFUSE_L35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L35_OFFSET ) ))
#define SBB_EFUSE_H36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H36_OFFSET ) ))
#define SBB_EFUSE_L36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L36_OFFSET ) ))
#define SBB_EFUSE_H37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H37_OFFSET ) ))
#define SBB_EFUSE_L37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L37_OFFSET ) ))
#define SBB_EFUSE_H38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H38_OFFSET ) ))
#define SBB_EFUSE_L38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L38_OFFSET ) ))
#define SBB_EFUSE_H39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H39_OFFSET ) ))
#define SBB_EFUSE_L39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L39_OFFSET ) ))
#define SBB_EFUSE_H40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H40_OFFSET ) ))
#define SBB_EFUSE_L40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L40_OFFSET ) ))
#define SBB_EFUSE_H41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H41_OFFSET ) ))
#define SBB_EFUSE_L41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L41_OFFSET ) ))
#define SBB_EFUSE_H42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H42_OFFSET ) ))
#define SBB_EFUSE_L42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L42_OFFSET ) ))
#define SBB_EFUSE_H43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H43_OFFSET ) ))
#define SBB_EFUSE_L43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L43_OFFSET ) ))
#define SBB_EFUSE_H44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H44_OFFSET ) ))
#define SBB_EFUSE_L44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L44_OFFSET ) ))
#define SBB_EFUSE_H45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H45_OFFSET ) ))
#define SBB_EFUSE_L45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L45_OFFSET ) ))
#define SBB_EFUSE_H46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H46_OFFSET ) ))
#define SBB_EFUSE_L46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L46_OFFSET ) ))
#define SBB_EFUSE_H47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H47_OFFSET ) ))
#define SBB_EFUSE_L47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L47_OFFSET ) ))
#define SBB_EFUSE_H48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H48_OFFSET ) ))
#define SBB_EFUSE_L48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L48_OFFSET ) ))
#define SBB_EFUSE_H49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H49_OFFSET ) ))
#define SBB_EFUSE_L49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L49_OFFSET ) ))
#define SBB_EFUSE_H50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H50_OFFSET ) ))
#define SBB_EFUSE_L50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L50_OFFSET ) ))
#define SBB_EFUSE_H51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H51_OFFSET ) ))
#define SBB_EFUSE_L51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L51_OFFSET ) ))
#define SBB_EFUSE_H52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H52_OFFSET ) ))
#define SBB_EFUSE_L52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L52_OFFSET ) ))
#define SBB_EFUSE_H53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H53_OFFSET ) ))
#define SBB_EFUSE_L53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L53_OFFSET ) ))
#define SBB_EFUSE_H54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H54_OFFSET ) ))
#define SBB_EFUSE_L54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L54_OFFSET ) ))
#define SBB_EFUSE_H55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H55_OFFSET ) ))
#define SBB_EFUSE_L55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L55_OFFSET ) ))
#define SBB_EFUSE_H56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H56_OFFSET ) ))
#define SBB_EFUSE_L56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L56_OFFSET ) ))
#define SBB_EFUSE_H57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H57_OFFSET ) ))
#define SBB_EFUSE_L57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L57_OFFSET ) ))
#define SBB_EFUSE_H58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H58_OFFSET ) ))
#define SBB_EFUSE_L58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L58_OFFSET ) ))
#define SBB_EFUSE_H59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H59_OFFSET ) ))
#define SBB_EFUSE_L59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L59_OFFSET ) ))
#define SBB_EFUSE_H60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H60_OFFSET ) ))
#define SBB_EFUSE_L60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L60_OFFSET ) ))
#define SBB_EFUSE_H61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H61_OFFSET ) ))
#define SBB_EFUSE_L61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L61_OFFSET ) ))
#define SBB_EFUSE_H62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H62_OFFSET ) ))
#define SBB_EFUSE_L62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L62_OFFSET ) ))
#define SBB_EFUSE_H63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H63_OFFSET ) ))
#define SBB_EFUSE_L63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L63_OFFSET ) ))
#define SBB_EFUSE_H64_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H64_OFFSET ) ))
#define SBB_EFUSE_L64_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L64_OFFSET ) ))
#define SBB_EFUSE_H65_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H65_OFFSET ) ))
#define SBB_EFUSE_L65_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L65_OFFSET ) ))
#define SBB_EFUSE_H66_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H66_OFFSET ) ))
#define SBB_EFUSE_L66_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L66_OFFSET ) ))
#define SBB_EFUSE_H67_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H67_OFFSET ) ))
#define SBB_EFUSE_L67_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L67_OFFSET ) ))
#define SBB_EFUSE_H68_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H68_OFFSET ) ))
#define SBB_EFUSE_L68_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L68_OFFSET ) ))
#define SBB_EFUSE_H69_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H69_OFFSET ) ))
#define SBB_EFUSE_L69_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L69_OFFSET ) ))
#define SBB_EFUSE_H70_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H70_OFFSET ) ))
#define SBB_EFUSE_L70_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L70_OFFSET ) ))
#define SBB_EFUSE_H71_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H71_OFFSET ) ))
#define SBB_EFUSE_L71_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L71_OFFSET ) ))
#define SBB_EFUSE_H72_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H72_OFFSET ) ))
#define SBB_EFUSE_L72_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L72_OFFSET ) ))
#define SBB_EFUSE_H73_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H73_OFFSET ) ))
#define SBB_EFUSE_L73_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L73_OFFSET ) ))
#define SBB_EFUSE_H74_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H74_OFFSET ) ))
#define SBB_EFUSE_L74_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L74_OFFSET ) ))
#define SBB_EFUSE_H75_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H75_OFFSET ) ))
#define SBB_EFUSE_L75_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L75_OFFSET ) ))
#define SBB_EFUSE_H76_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H76_OFFSET ) ))
#define SBB_EFUSE_L76_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L76_OFFSET ) ))
#define SBB_EFUSE_H77_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H77_OFFSET ) ))
#define SBB_EFUSE_L77_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L77_OFFSET ) ))
#define SBB_EFUSE_H78_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H78_OFFSET ) ))
#define SBB_EFUSE_L78_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L78_OFFSET ) ))
#define SBB_EFUSE_H79_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H79_OFFSET ) ))
#define SBB_EFUSE_L79_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L79_OFFSET ) ))
#define SBB_EFUSE_H80_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H80_OFFSET ) ))
#define SBB_EFUSE_L80_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L80_OFFSET ) ))
#define SBB_EFUSE_H81_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H81_OFFSET ) ))
#define SBB_EFUSE_L81_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L81_OFFSET ) ))
#define SBB_EFUSE_H82_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H82_OFFSET ) ))
#define SBB_EFUSE_L82_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L82_OFFSET ) ))
#define SBB_EFUSE_H83_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H83_OFFSET ) ))
#define SBB_EFUSE_L83_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L83_OFFSET ) ))
#define SBB_EFUSE_H84_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H84_OFFSET ) ))
#define SBB_EFUSE_L84_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L84_OFFSET ) ))
#define SBB_EFUSE_H85_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H85_OFFSET ) ))
#define SBB_EFUSE_L85_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L85_OFFSET ) ))
#define SBB_EFUSE_H86_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H86_OFFSET ) ))
#define SBB_EFUSE_L86_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L86_OFFSET ) ))
#define SBB_EFUSE_H87_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H87_OFFSET ) ))
#define SBB_EFUSE_L87_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L87_OFFSET ) ))
#define SBB_EFUSE_H88_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H88_OFFSET ) ))
#define SBB_EFUSE_L88_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L88_OFFSET ) ))
#define SBB_EFUSE_H89_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H89_OFFSET ) ))
#define SBB_EFUSE_L89_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L89_OFFSET ) ))
#define SBB_EFUSE_H90_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H90_OFFSET ) ))
#define SBB_EFUSE_L90_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L90_OFFSET ) ))
#define SBB_EFUSE_H91_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H91_OFFSET ) ))
#define SBB_EFUSE_L91_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L91_OFFSET ) ))
#define SBB_EFUSE_H92_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H92_OFFSET ) ))
#define SBB_EFUSE_L92_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L92_OFFSET ) ))
#define SBB_EFUSE_H93_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H93_OFFSET ) ))
#define SBB_EFUSE_L93_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L93_OFFSET ) ))
#define SBB_EFUSE_H94_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H94_OFFSET ) ))
#define SBB_EFUSE_L94_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L94_OFFSET ) ))
#define SBB_EFUSE_H95_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H95_OFFSET ) ))
#define SBB_EFUSE_L95_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L95_OFFSET ) ))
#define SBB_EFUSE_H96_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H96_OFFSET ) ))
#define SBB_EFUSE_L96_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L96_OFFSET ) ))
#define SBB_EFUSE_H97_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H97_OFFSET ) ))
#define SBB_EFUSE_L97_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L97_OFFSET ) ))
#define SBB_EFUSE_H98_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H98_OFFSET ) ))
#define SBB_EFUSE_L98_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L98_OFFSET ) ))
#define SBB_EFUSE_H99_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H99_OFFSET ) ))
#define SBB_EFUSE_L99_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L99_OFFSET ) ))
#define SBB_EFUSE_H100_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H100_OFFSET ) ))
#define SBB_EFUSE_L100_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L100_OFFSET ) ))
#define SBB_EFUSE_H101_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H101_OFFSET ) ))
#define SBB_EFUSE_L101_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L101_OFFSET ) ))
#define SBB_EFUSE_H102_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H102_OFFSET ) ))
#define SBB_EFUSE_L102_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L102_OFFSET ) ))
#define SBB_EFUSE_H103_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H103_OFFSET ) ))
#define SBB_EFUSE_L103_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L103_OFFSET ) ))
#define SBB_EFUSE_H104_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H104_OFFSET ) ))
#define SBB_EFUSE_L104_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L104_OFFSET ) ))
#define SBB_EFUSE_H105_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H105_OFFSET ) ))
#define SBB_EFUSE_L105_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L105_OFFSET ) ))
#define SBB_EFUSE_H106_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H106_OFFSET ) ))
#define SBB_EFUSE_L106_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L106_OFFSET ) ))
#define SBB_EFUSE_H107_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H107_OFFSET ) ))
#define SBB_EFUSE_L107_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L107_OFFSET ) ))
#define SBB_EFUSE_H108_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H108_OFFSET ) ))
#define SBB_EFUSE_L108_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L108_OFFSET ) ))
#define SBB_EFUSE_H109_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H109_OFFSET ) ))
#define SBB_EFUSE_L109_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L109_OFFSET ) ))
#define SBB_EFUSE_H110_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H110_OFFSET ) ))
#define SBB_EFUSE_L110_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L110_OFFSET ) ))
#define SBB_EFUSE_H111_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_H111_OFFSET ) ))
#define SBB_EFUSE_L111_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_EFUSE_L111_OFFSET ) ))
#define SBB_PARAM_EXT_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H0_OFFSET ) ))
#define SBB_PARAM_EXT_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L0_OFFSET ) ))
#define SBB_PARAM_EXT_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H1_OFFSET ) ))
#define SBB_PARAM_EXT_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L1_OFFSET ) ))
#define SBB_PARAM_EXT_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H2_OFFSET ) ))
#define SBB_PARAM_EXT_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L2_OFFSET ) ))
#define SBB_PARAM_EXT_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H3_OFFSET ) ))
#define SBB_PARAM_EXT_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L3_OFFSET ) ))
#define SBB_PARAM_EXT_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H4_OFFSET ) ))
#define SBB_PARAM_EXT_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L4_OFFSET ) ))
#define SBB_PARAM_EXT_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H5_OFFSET ) ))
#define SBB_PARAM_EXT_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L5_OFFSET ) ))
#define SBB_PARAM_EXT_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H6_OFFSET ) ))
#define SBB_PARAM_EXT_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L6_OFFSET ) ))
#define SBB_PARAM_EXT_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H7_OFFSET ) ))
#define SBB_PARAM_EXT_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L7_OFFSET ) ))
#define SBB_PARAM_EXT_H8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H8_OFFSET ) ))
#define SBB_PARAM_EXT_L8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L8_OFFSET ) ))
#define SBB_PARAM_EXT_H9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H9_OFFSET ) ))
#define SBB_PARAM_EXT_L9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L9_OFFSET ) ))
#define SBB_PARAM_EXT_H10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H10_OFFSET ) ))
#define SBB_PARAM_EXT_L10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L10_OFFSET ) ))
#define SBB_PARAM_EXT_H11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H11_OFFSET ) ))
#define SBB_PARAM_EXT_L11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L11_OFFSET ) ))
#define SBB_PARAM_EXT_H12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H12_OFFSET ) ))
#define SBB_PARAM_EXT_L12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L12_OFFSET ) ))
#define SBB_PARAM_EXT_H13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H13_OFFSET ) ))
#define SBB_PARAM_EXT_L13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L13_OFFSET ) ))
#define SBB_PARAM_EXT_H14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H14_OFFSET ) ))
#define SBB_PARAM_EXT_L14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L14_OFFSET ) ))
#define SBB_PARAM_EXT_H15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H15_OFFSET ) ))
#define SBB_PARAM_EXT_L15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L15_OFFSET ) ))
#define SBB_PARAM_EXT_H16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H16_OFFSET ) ))
#define SBB_PARAM_EXT_L16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L16_OFFSET ) ))
#define SBB_PARAM_EXT_H17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H17_OFFSET ) ))
#define SBB_PARAM_EXT_L17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L17_OFFSET ) ))
#define SBB_PARAM_EXT_H18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H18_OFFSET ) ))
#define SBB_PARAM_EXT_L18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L18_OFFSET ) ))
#define SBB_PARAM_EXT_H19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H19_OFFSET ) ))
#define SBB_PARAM_EXT_L19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L19_OFFSET ) ))
#define SBB_PARAM_EXT_H20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H20_OFFSET ) ))
#define SBB_PARAM_EXT_L20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L20_OFFSET ) ))
#define SBB_PARAM_EXT_H21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H21_OFFSET ) ))
#define SBB_PARAM_EXT_L21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L21_OFFSET ) ))
#define SBB_PARAM_EXT_H22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H22_OFFSET ) ))
#define SBB_PARAM_EXT_L22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L22_OFFSET ) ))
#define SBB_PARAM_EXT_H23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H23_OFFSET ) ))
#define SBB_PARAM_EXT_L23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L23_OFFSET ) ))
#define SBB_PARAM_EXT_H24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H24_OFFSET ) ))
#define SBB_PARAM_EXT_L24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L24_OFFSET ) ))
#define SBB_PARAM_EXT_H25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H25_OFFSET ) ))
#define SBB_PARAM_EXT_L25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L25_OFFSET ) ))
#define SBB_PARAM_EXT_H26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H26_OFFSET ) ))
#define SBB_PARAM_EXT_L26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L26_OFFSET ) ))
#define SBB_PARAM_EXT_H27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H27_OFFSET ) ))
#define SBB_PARAM_EXT_L27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L27_OFFSET ) ))
#define SBB_PARAM_EXT_H28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H28_OFFSET ) ))
#define SBB_PARAM_EXT_L28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L28_OFFSET ) ))
#define SBB_PARAM_EXT_H29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H29_OFFSET ) ))
#define SBB_PARAM_EXT_L29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L29_OFFSET ) ))
#define SBB_PARAM_EXT_H30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H30_OFFSET ) ))
#define SBB_PARAM_EXT_L30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L30_OFFSET ) ))
#define SBB_PARAM_EXT_H31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H31_OFFSET ) ))
#define SBB_PARAM_EXT_L31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L31_OFFSET ) ))
#define SBB_PARAM_EXT_H32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H32_OFFSET ) ))
#define SBB_PARAM_EXT_L32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L32_OFFSET ) ))
#define SBB_PARAM_EXT_H33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H33_OFFSET ) ))
#define SBB_PARAM_EXT_L33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L33_OFFSET ) ))
#define SBB_PARAM_EXT_H34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H34_OFFSET ) ))
#define SBB_PARAM_EXT_L34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L34_OFFSET ) ))
#define SBB_PARAM_EXT_H35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H35_OFFSET ) ))
#define SBB_PARAM_EXT_L35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L35_OFFSET ) ))
#define SBB_PARAM_EXT_H36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H36_OFFSET ) ))
#define SBB_PARAM_EXT_L36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L36_OFFSET ) ))
#define SBB_PARAM_EXT_H37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H37_OFFSET ) ))
#define SBB_PARAM_EXT_L37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L37_OFFSET ) ))
#define SBB_PARAM_EXT_H38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H38_OFFSET ) ))
#define SBB_PARAM_EXT_L38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L38_OFFSET ) ))
#define SBB_PARAM_EXT_H39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H39_OFFSET ) ))
#define SBB_PARAM_EXT_L39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L39_OFFSET ) ))
#define SBB_PARAM_EXT_H40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H40_OFFSET ) ))
#define SBB_PARAM_EXT_L40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L40_OFFSET ) ))
#define SBB_PARAM_EXT_H41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H41_OFFSET ) ))
#define SBB_PARAM_EXT_L41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L41_OFFSET ) ))
#define SBB_PARAM_EXT_H42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H42_OFFSET ) ))
#define SBB_PARAM_EXT_L42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L42_OFFSET ) ))
#define SBB_PARAM_EXT_H43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H43_OFFSET ) ))
#define SBB_PARAM_EXT_L43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L43_OFFSET ) ))
#define SBB_PARAM_EXT_H44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H44_OFFSET ) ))
#define SBB_PARAM_EXT_L44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L44_OFFSET ) ))
#define SBB_PARAM_EXT_H45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H45_OFFSET ) ))
#define SBB_PARAM_EXT_L45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L45_OFFSET ) ))
#define SBB_PARAM_EXT_H46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H46_OFFSET ) ))
#define SBB_PARAM_EXT_L46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L46_OFFSET ) ))
#define SBB_PARAM_EXT_H47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H47_OFFSET ) ))
#define SBB_PARAM_EXT_L47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L47_OFFSET ) ))
#define SBB_PARAM_EXT_H48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H48_OFFSET ) ))
#define SBB_PARAM_EXT_L48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L48_OFFSET ) ))
#define SBB_PARAM_EXT_H49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H49_OFFSET ) ))
#define SBB_PARAM_EXT_L49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L49_OFFSET ) ))
#define SBB_PARAM_EXT_H50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H50_OFFSET ) ))
#define SBB_PARAM_EXT_L50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L50_OFFSET ) ))
#define SBB_PARAM_EXT_H51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H51_OFFSET ) ))
#define SBB_PARAM_EXT_L51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L51_OFFSET ) ))
#define SBB_PARAM_EXT_H52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H52_OFFSET ) ))
#define SBB_PARAM_EXT_L52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L52_OFFSET ) ))
#define SBB_PARAM_EXT_H53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H53_OFFSET ) ))
#define SBB_PARAM_EXT_L53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L53_OFFSET ) ))
#define SBB_PARAM_EXT_H54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H54_OFFSET ) ))
#define SBB_PARAM_EXT_L54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L54_OFFSET ) ))
#define SBB_PARAM_EXT_H55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H55_OFFSET ) ))
#define SBB_PARAM_EXT_L55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L55_OFFSET ) ))
#define SBB_PARAM_EXT_H56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H56_OFFSET ) ))
#define SBB_PARAM_EXT_L56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L56_OFFSET ) ))
#define SBB_PARAM_EXT_H57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H57_OFFSET ) ))
#define SBB_PARAM_EXT_L57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L57_OFFSET ) ))
#define SBB_PARAM_EXT_H58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H58_OFFSET ) ))
#define SBB_PARAM_EXT_L58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L58_OFFSET ) ))
#define SBB_PARAM_EXT_H59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H59_OFFSET ) ))
#define SBB_PARAM_EXT_L59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L59_OFFSET ) ))
#define SBB_PARAM_EXT_H60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H60_OFFSET ) ))
#define SBB_PARAM_EXT_L60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L60_OFFSET ) ))
#define SBB_PARAM_EXT_H61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H61_OFFSET ) ))
#define SBB_PARAM_EXT_L61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L61_OFFSET ) ))
#define SBB_PARAM_EXT_H62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H62_OFFSET ) ))
#define SBB_PARAM_EXT_L62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L62_OFFSET ) ))
#define SBB_PARAM_EXT_H63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_H63_OFFSET ) ))
#define SBB_PARAM_EXT_L63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_EXT_L63_OFFSET ) ))
#define SBB_PARAM_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H0_OFFSET ) ))
#define SBB_PARAM_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L0_OFFSET ) ))
#define SBB_PARAM_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H1_OFFSET ) ))
#define SBB_PARAM_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L1_OFFSET ) ))
#define SBB_PARAM_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H2_OFFSET ) ))
#define SBB_PARAM_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L2_OFFSET ) ))
#define SBB_PARAM_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H3_OFFSET ) ))
#define SBB_PARAM_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L3_OFFSET ) ))
#define SBB_PARAM_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H4_OFFSET ) ))
#define SBB_PARAM_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L4_OFFSET ) ))
#define SBB_PARAM_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H5_OFFSET ) ))
#define SBB_PARAM_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L5_OFFSET ) ))
#define SBB_PARAM_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H6_OFFSET ) ))
#define SBB_PARAM_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L6_OFFSET ) ))
#define SBB_PARAM_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H7_OFFSET ) ))
#define SBB_PARAM_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L7_OFFSET ) ))
#define SBB_PARAM_H8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H8_OFFSET ) ))
#define SBB_PARAM_L8_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L8_OFFSET ) ))
#define SBB_PARAM_H9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H9_OFFSET ) ))
#define SBB_PARAM_L9_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L9_OFFSET ) ))
#define SBB_PARAM_H10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H10_OFFSET ) ))
#define SBB_PARAM_L10_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L10_OFFSET ) ))
#define SBB_PARAM_H11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H11_OFFSET ) ))
#define SBB_PARAM_L11_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L11_OFFSET ) ))
#define SBB_PARAM_H12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H12_OFFSET ) ))
#define SBB_PARAM_L12_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L12_OFFSET ) ))
#define SBB_PARAM_H13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H13_OFFSET ) ))
#define SBB_PARAM_L13_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L13_OFFSET ) ))
#define SBB_PARAM_H14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H14_OFFSET ) ))
#define SBB_PARAM_L14_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L14_OFFSET ) ))
#define SBB_PARAM_H15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H15_OFFSET ) ))
#define SBB_PARAM_L15_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L15_OFFSET ) ))
#define SBB_PARAM_H16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H16_OFFSET ) ))
#define SBB_PARAM_L16_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L16_OFFSET ) ))
#define SBB_PARAM_H17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H17_OFFSET ) ))
#define SBB_PARAM_L17_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L17_OFFSET ) ))
#define SBB_PARAM_H18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H18_OFFSET ) ))
#define SBB_PARAM_L18_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L18_OFFSET ) ))
#define SBB_PARAM_H19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H19_OFFSET ) ))
#define SBB_PARAM_L19_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L19_OFFSET ) ))
#define SBB_PARAM_H20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H20_OFFSET ) ))
#define SBB_PARAM_L20_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L20_OFFSET ) ))
#define SBB_PARAM_H21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H21_OFFSET ) ))
#define SBB_PARAM_L21_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L21_OFFSET ) ))
#define SBB_PARAM_H22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H22_OFFSET ) ))
#define SBB_PARAM_L22_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L22_OFFSET ) ))
#define SBB_PARAM_H23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H23_OFFSET ) ))
#define SBB_PARAM_L23_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L23_OFFSET ) ))
#define SBB_PARAM_H24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H24_OFFSET ) ))
#define SBB_PARAM_L24_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L24_OFFSET ) ))
#define SBB_PARAM_H25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H25_OFFSET ) ))
#define SBB_PARAM_L25_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L25_OFFSET ) ))
#define SBB_PARAM_H26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H26_OFFSET ) ))
#define SBB_PARAM_L26_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L26_OFFSET ) ))
#define SBB_PARAM_H27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H27_OFFSET ) ))
#define SBB_PARAM_L27_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L27_OFFSET ) ))
#define SBB_PARAM_H28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H28_OFFSET ) ))
#define SBB_PARAM_L28_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L28_OFFSET ) ))
#define SBB_PARAM_H29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H29_OFFSET ) ))
#define SBB_PARAM_L29_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L29_OFFSET ) ))
#define SBB_PARAM_H30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H30_OFFSET ) ))
#define SBB_PARAM_L30_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L30_OFFSET ) ))
#define SBB_PARAM_H31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H31_OFFSET ) ))
#define SBB_PARAM_L31_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L31_OFFSET ) ))
#define SBB_PARAM_H32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H32_OFFSET ) ))
#define SBB_PARAM_L32_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L32_OFFSET ) ))
#define SBB_PARAM_H33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H33_OFFSET ) ))
#define SBB_PARAM_L33_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L33_OFFSET ) ))
#define SBB_PARAM_H34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H34_OFFSET ) ))
#define SBB_PARAM_L34_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L34_OFFSET ) ))
#define SBB_PARAM_H35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H35_OFFSET ) ))
#define SBB_PARAM_L35_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L35_OFFSET ) ))
#define SBB_PARAM_H36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H36_OFFSET ) ))
#define SBB_PARAM_L36_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L36_OFFSET ) ))
#define SBB_PARAM_H37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H37_OFFSET ) ))
#define SBB_PARAM_L37_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L37_OFFSET ) ))
#define SBB_PARAM_H38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H38_OFFSET ) ))
#define SBB_PARAM_L38_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L38_OFFSET ) ))
#define SBB_PARAM_H39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H39_OFFSET ) ))
#define SBB_PARAM_L39_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L39_OFFSET ) ))
#define SBB_PARAM_H40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H40_OFFSET ) ))
#define SBB_PARAM_L40_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L40_OFFSET ) ))
#define SBB_PARAM_H41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H41_OFFSET ) ))
#define SBB_PARAM_L41_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L41_OFFSET ) ))
#define SBB_PARAM_H42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H42_OFFSET ) ))
#define SBB_PARAM_L42_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L42_OFFSET ) ))
#define SBB_PARAM_H43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H43_OFFSET ) ))
#define SBB_PARAM_L43_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L43_OFFSET ) ))
#define SBB_PARAM_H44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H44_OFFSET ) ))
#define SBB_PARAM_L44_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L44_OFFSET ) ))
#define SBB_PARAM_H45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H45_OFFSET ) ))
#define SBB_PARAM_L45_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L45_OFFSET ) ))
#define SBB_PARAM_H46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H46_OFFSET ) ))
#define SBB_PARAM_L46_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L46_OFFSET ) ))
#define SBB_PARAM_H47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H47_OFFSET ) ))
#define SBB_PARAM_L47_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L47_OFFSET ) ))
#define SBB_PARAM_H48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H48_OFFSET ) ))
#define SBB_PARAM_L48_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L48_OFFSET ) ))
#define SBB_PARAM_H49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H49_OFFSET ) ))
#define SBB_PARAM_L49_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L49_OFFSET ) ))
#define SBB_PARAM_H50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H50_OFFSET ) ))
#define SBB_PARAM_L50_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L50_OFFSET ) ))
#define SBB_PARAM_H51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H51_OFFSET ) ))
#define SBB_PARAM_L51_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L51_OFFSET ) ))
#define SBB_PARAM_H52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H52_OFFSET ) ))
#define SBB_PARAM_L52_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L52_OFFSET ) ))
#define SBB_PARAM_H53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H53_OFFSET ) ))
#define SBB_PARAM_L53_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L53_OFFSET ) ))
#define SBB_PARAM_H54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H54_OFFSET ) ))
#define SBB_PARAM_L54_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L54_OFFSET ) ))
#define SBB_PARAM_H55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H55_OFFSET ) ))
#define SBB_PARAM_L55_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L55_OFFSET ) ))
#define SBB_PARAM_H56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H56_OFFSET ) ))
#define SBB_PARAM_L56_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L56_OFFSET ) ))
#define SBB_PARAM_H57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H57_OFFSET ) ))
#define SBB_PARAM_L57_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L57_OFFSET ) ))
#define SBB_PARAM_H58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H58_OFFSET ) ))
#define SBB_PARAM_L58_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L58_OFFSET ) ))
#define SBB_PARAM_H59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H59_OFFSET ) ))
#define SBB_PARAM_L59_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L59_OFFSET ) ))
#define SBB_PARAM_H60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H60_OFFSET ) ))
#define SBB_PARAM_L60_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L60_OFFSET ) ))
#define SBB_PARAM_H61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H61_OFFSET ) ))
#define SBB_PARAM_L61_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L61_OFFSET ) ))
#define SBB_PARAM_H62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H62_OFFSET ) ))
#define SBB_PARAM_L62_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L62_OFFSET ) ))
#define SBB_PARAM_H63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H63_OFFSET ) ))
#define SBB_PARAM_L63_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L63_OFFSET ) ))
#define SBB_PARAM_H64_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H64_OFFSET ) ))
#define SBB_PARAM_L64_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L64_OFFSET ) ))
#define SBB_PARAM_H65_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H65_OFFSET ) ))
#define SBB_PARAM_L65_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L65_OFFSET ) ))
#define SBB_PARAM_H66_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H66_OFFSET ) ))
#define SBB_PARAM_L66_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L66_OFFSET ) ))
#define SBB_PARAM_H67_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H67_OFFSET ) ))
#define SBB_PARAM_L67_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L67_OFFSET ) ))
#define SBB_PARAM_H68_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H68_OFFSET ) ))
#define SBB_PARAM_L68_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L68_OFFSET ) ))
#define SBB_PARAM_H69_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H69_OFFSET ) ))
#define SBB_PARAM_L69_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L69_OFFSET ) ))
#define SBB_PARAM_H70_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H70_OFFSET ) ))
#define SBB_PARAM_L70_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L70_OFFSET ) ))
#define SBB_PARAM_H71_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H71_OFFSET ) ))
#define SBB_PARAM_L71_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L71_OFFSET ) ))
#define SBB_PARAM_H72_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H72_OFFSET ) ))
#define SBB_PARAM_L72_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L72_OFFSET ) ))
#define SBB_PARAM_H73_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H73_OFFSET ) ))
#define SBB_PARAM_L73_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L73_OFFSET ) ))
#define SBB_PARAM_H74_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H74_OFFSET ) ))
#define SBB_PARAM_L74_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L74_OFFSET ) ))
#define SBB_PARAM_H75_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H75_OFFSET ) ))
#define SBB_PARAM_L75_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L75_OFFSET ) ))
#define SBB_PARAM_H76_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H76_OFFSET ) ))
#define SBB_PARAM_L76_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L76_OFFSET ) ))
#define SBB_PARAM_H77_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H77_OFFSET ) ))
#define SBB_PARAM_L77_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L77_OFFSET ) ))
#define SBB_PARAM_H78_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H78_OFFSET ) ))
#define SBB_PARAM_L78_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L78_OFFSET ) ))
#define SBB_PARAM_H79_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H79_OFFSET ) ))
#define SBB_PARAM_L79_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L79_OFFSET ) ))
#define SBB_PARAM_H80_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H80_OFFSET ) ))
#define SBB_PARAM_L80_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L80_OFFSET ) ))
#define SBB_PARAM_H81_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H81_OFFSET ) ))
#define SBB_PARAM_L81_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L81_OFFSET ) ))
#define SBB_PARAM_H82_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H82_OFFSET ) ))
#define SBB_PARAM_L82_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L82_OFFSET ) ))
#define SBB_PARAM_H83_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H83_OFFSET ) ))
#define SBB_PARAM_L83_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L83_OFFSET ) ))
#define SBB_PARAM_H84_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H84_OFFSET ) ))
#define SBB_PARAM_L84_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L84_OFFSET ) ))
#define SBB_PARAM_H85_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H85_OFFSET ) ))
#define SBB_PARAM_L85_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L85_OFFSET ) ))
#define SBB_PARAM_H86_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H86_OFFSET ) ))
#define SBB_PARAM_L86_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L86_OFFSET ) ))
#define SBB_PARAM_H87_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H87_OFFSET ) ))
#define SBB_PARAM_L87_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L87_OFFSET ) ))
#define SBB_PARAM_H88_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H88_OFFSET ) ))
#define SBB_PARAM_L88_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L88_OFFSET ) ))
#define SBB_PARAM_H89_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H89_OFFSET ) ))
#define SBB_PARAM_L89_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L89_OFFSET ) ))
#define SBB_PARAM_H90_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H90_OFFSET ) ))
#define SBB_PARAM_L90_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L90_OFFSET ) ))
#define SBB_PARAM_H91_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H91_OFFSET ) ))
#define SBB_PARAM_L91_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L91_OFFSET ) ))
#define SBB_PARAM_H92_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H92_OFFSET ) ))
#define SBB_PARAM_L92_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L92_OFFSET ) ))
#define SBB_PARAM_H93_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H93_OFFSET ) ))
#define SBB_PARAM_L93_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L93_OFFSET ) ))
#define SBB_PARAM_H94_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H94_OFFSET ) ))
#define SBB_PARAM_L94_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L94_OFFSET ) ))
#define SBB_PARAM_H95_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H95_OFFSET ) ))
#define SBB_PARAM_L95_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L95_OFFSET ) ))
#define SBB_PARAM_H96_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H96_OFFSET ) ))
#define SBB_PARAM_L96_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L96_OFFSET ) ))
#define SBB_PARAM_H97_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H97_OFFSET ) ))
#define SBB_PARAM_L97_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L97_OFFSET ) ))
#define SBB_PARAM_H98_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H98_OFFSET ) ))
#define SBB_PARAM_L98_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L98_OFFSET ) ))
#define SBB_PARAM_H99_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H99_OFFSET ) ))
#define SBB_PARAM_L99_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L99_OFFSET ) ))
#define SBB_PARAM_H100_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H100_OFFSET ) ))
#define SBB_PARAM_L100_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L100_OFFSET ) ))
#define SBB_PARAM_H101_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H101_OFFSET ) ))
#define SBB_PARAM_L101_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L101_OFFSET ) ))
#define SBB_PARAM_H102_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H102_OFFSET ) ))
#define SBB_PARAM_L102_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L102_OFFSET ) ))
#define SBB_PARAM_H103_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H103_OFFSET ) ))
#define SBB_PARAM_L103_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L103_OFFSET ) ))
#define SBB_PARAM_H104_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H104_OFFSET ) ))
#define SBB_PARAM_L104_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L104_OFFSET ) ))
#define SBB_PARAM_H105_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H105_OFFSET ) ))
#define SBB_PARAM_L105_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L105_OFFSET ) ))
#define SBB_PARAM_H106_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H106_OFFSET ) ))
#define SBB_PARAM_L106_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L106_OFFSET ) ))
#define SBB_PARAM_H107_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H107_OFFSET ) ))
#define SBB_PARAM_L107_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L107_OFFSET ) ))
#define SBB_PARAM_H108_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H108_OFFSET ) ))
#define SBB_PARAM_L108_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L108_OFFSET ) ))
#define SBB_PARAM_H109_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H109_OFFSET ) ))
#define SBB_PARAM_L109_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L109_OFFSET ) ))
#define SBB_PARAM_H110_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H110_OFFSET ) ))
#define SBB_PARAM_L110_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L110_OFFSET ) ))
#define SBB_PARAM_H111_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H111_OFFSET ) ))
#define SBB_PARAM_L111_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L111_OFFSET ) ))
#define SBB_PARAM_H112_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H112_OFFSET ) ))
#define SBB_PARAM_L112_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L112_OFFSET ) ))
#define SBB_PARAM_H113_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H113_OFFSET ) ))
#define SBB_PARAM_L113_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L113_OFFSET ) ))
#define SBB_PARAM_H114_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H114_OFFSET ) ))
#define SBB_PARAM_L114_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L114_OFFSET ) ))
#define SBB_PARAM_H115_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H115_OFFSET ) ))
#define SBB_PARAM_L115_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L115_OFFSET ) ))
#define SBB_PARAM_H116_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H116_OFFSET ) ))
#define SBB_PARAM_L116_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L116_OFFSET ) ))
#define SBB_PARAM_H117_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H117_OFFSET ) ))
#define SBB_PARAM_L117_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L117_OFFSET ) ))
#define SBB_PARAM_H118_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H118_OFFSET ) ))
#define SBB_PARAM_L118_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L118_OFFSET ) ))
#define SBB_PARAM_H119_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H119_OFFSET ) ))
#define SBB_PARAM_L119_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L119_OFFSET ) ))
#define SBB_PARAM_H120_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H120_OFFSET ) ))
#define SBB_PARAM_L120_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L120_OFFSET ) ))
#define SBB_PARAM_H121_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H121_OFFSET ) ))
#define SBB_PARAM_L121_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L121_OFFSET ) ))
#define SBB_PARAM_H122_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H122_OFFSET ) ))
#define SBB_PARAM_L122_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L122_OFFSET ) ))
#define SBB_PARAM_H123_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H123_OFFSET ) ))
#define SBB_PARAM_L123_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L123_OFFSET ) ))
#define SBB_PARAM_H124_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H124_OFFSET ) ))
#define SBB_PARAM_L124_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L124_OFFSET ) ))
#define SBB_PARAM_H125_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H125_OFFSET ) ))
#define SBB_PARAM_L125_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L125_OFFSET ) ))
#define SBB_PARAM_H126_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H126_OFFSET ) ))
#define SBB_PARAM_L126_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L126_OFFSET ) ))
#define SBB_PARAM_H127_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H127_OFFSET ) ))
#define SBB_PARAM_L127_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L127_OFFSET ) ))
#define SBB_PARAM_H128_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H128_OFFSET ) ))
#define SBB_PARAM_L128_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L128_OFFSET ) ))
#define SBB_PARAM_H129_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H129_OFFSET ) ))
#define SBB_PARAM_L129_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L129_OFFSET ) ))
#define SBB_PARAM_H130_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H130_OFFSET ) ))
#define SBB_PARAM_L130_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L130_OFFSET ) ))
#define SBB_PARAM_H131_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H131_OFFSET ) ))
#define SBB_PARAM_L131_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L131_OFFSET ) ))
#define SBB_PARAM_H132_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H132_OFFSET ) ))
#define SBB_PARAM_L132_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L132_OFFSET ) ))
#define SBB_PARAM_H133_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H133_OFFSET ) ))
#define SBB_PARAM_L133_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L133_OFFSET ) ))
#define SBB_PARAM_H134_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H134_OFFSET ) ))
#define SBB_PARAM_L134_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L134_OFFSET ) ))
#define SBB_PARAM_H135_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H135_OFFSET ) ))
#define SBB_PARAM_L135_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L135_OFFSET ) ))
#define SBB_PARAM_H136_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H136_OFFSET ) ))
#define SBB_PARAM_L136_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L136_OFFSET ) ))
#define SBB_PARAM_H137_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H137_OFFSET ) ))
#define SBB_PARAM_L137_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L137_OFFSET ) ))
#define SBB_PARAM_H138_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H138_OFFSET ) ))
#define SBB_PARAM_L138_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L138_OFFSET ) ))
#define SBB_PARAM_H139_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H139_OFFSET ) ))
#define SBB_PARAM_L139_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L139_OFFSET ) ))
#define SBB_PARAM_H140_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H140_OFFSET ) ))
#define SBB_PARAM_L140_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L140_OFFSET ) ))
#define SBB_PARAM_H141_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H141_OFFSET ) ))
#define SBB_PARAM_L141_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L141_OFFSET ) ))
#define SBB_PARAM_H142_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H142_OFFSET ) ))
#define SBB_PARAM_L142_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L142_OFFSET ) ))
#define SBB_PARAM_H143_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H143_OFFSET ) ))
#define SBB_PARAM_L143_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L143_OFFSET ) ))
#define SBB_PARAM_H144_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H144_OFFSET ) ))
#define SBB_PARAM_L144_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L144_OFFSET ) ))
#define SBB_PARAM_H145_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H145_OFFSET ) ))
#define SBB_PARAM_L145_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L145_OFFSET ) ))
#define SBB_PARAM_H146_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H146_OFFSET ) ))
#define SBB_PARAM_L146_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L146_OFFSET ) ))
#define SBB_PARAM_H147_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H147_OFFSET ) ))
#define SBB_PARAM_L147_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L147_OFFSET ) ))
#define SBB_PARAM_H148_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H148_OFFSET ) ))
#define SBB_PARAM_L148_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L148_OFFSET ) ))
#define SBB_PARAM_H149_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H149_OFFSET ) ))
#define SBB_PARAM_L149_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L149_OFFSET ) ))
#define SBB_PARAM_H150_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H150_OFFSET ) ))
#define SBB_PARAM_L150_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L150_OFFSET ) ))
#define SBB_PARAM_H151_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H151_OFFSET ) ))
#define SBB_PARAM_L151_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L151_OFFSET ) ))
#define SBB_PARAM_H152_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H152_OFFSET ) ))
#define SBB_PARAM_L152_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L152_OFFSET ) ))
#define SBB_PARAM_H153_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H153_OFFSET ) ))
#define SBB_PARAM_L153_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L153_OFFSET ) ))
#define SBB_PARAM_H154_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H154_OFFSET ) ))
#define SBB_PARAM_L154_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L154_OFFSET ) ))
#define SBB_PARAM_H155_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H155_OFFSET ) ))
#define SBB_PARAM_L155_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L155_OFFSET ) ))
#define SBB_PARAM_H156_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H156_OFFSET ) ))
#define SBB_PARAM_L156_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L156_OFFSET ) ))
#define SBB_PARAM_H157_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H157_OFFSET ) ))
#define SBB_PARAM_L157_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L157_OFFSET ) ))
#define SBB_PARAM_H158_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H158_OFFSET ) ))
#define SBB_PARAM_L158_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L158_OFFSET ) ))
#define SBB_PARAM_H159_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H159_OFFSET ) ))
#define SBB_PARAM_L159_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L159_OFFSET ) ))
#define SBB_PARAM_H160_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H160_OFFSET ) ))
#define SBB_PARAM_L160_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L160_OFFSET ) ))
#define SBB_PARAM_H161_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H161_OFFSET ) ))
#define SBB_PARAM_L161_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L161_OFFSET ) ))
#define SBB_PARAM_H162_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H162_OFFSET ) ))
#define SBB_PARAM_L162_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L162_OFFSET ) ))
#define SBB_PARAM_H163_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H163_OFFSET ) ))
#define SBB_PARAM_L163_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L163_OFFSET ) ))
#define SBB_PARAM_H164_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H164_OFFSET ) ))
#define SBB_PARAM_L164_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L164_OFFSET ) ))
#define SBB_PARAM_H165_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H165_OFFSET ) ))
#define SBB_PARAM_L165_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L165_OFFSET ) ))
#define SBB_PARAM_H166_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H166_OFFSET ) ))
#define SBB_PARAM_L166_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L166_OFFSET ) ))
#define SBB_PARAM_H167_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H167_OFFSET ) ))
#define SBB_PARAM_L167_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L167_OFFSET ) ))
#define SBB_PARAM_H168_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H168_OFFSET ) ))
#define SBB_PARAM_L168_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L168_OFFSET ) ))
#define SBB_PARAM_H169_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H169_OFFSET ) ))
#define SBB_PARAM_L169_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L169_OFFSET ) ))
#define SBB_PARAM_H170_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H170_OFFSET ) ))
#define SBB_PARAM_L170_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L170_OFFSET ) ))
#define SBB_PARAM_H171_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H171_OFFSET ) ))
#define SBB_PARAM_L171_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L171_OFFSET ) ))
#define SBB_PARAM_H172_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H172_OFFSET ) ))
#define SBB_PARAM_L172_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L172_OFFSET ) ))
#define SBB_PARAM_H173_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H173_OFFSET ) ))
#define SBB_PARAM_L173_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L173_OFFSET ) ))
#define SBB_PARAM_H174_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H174_OFFSET ) ))
#define SBB_PARAM_L174_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L174_OFFSET ) ))
#define SBB_PARAM_H175_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H175_OFFSET ) ))
#define SBB_PARAM_L175_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L175_OFFSET ) ))
#define SBB_PARAM_H176_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H176_OFFSET ) ))
#define SBB_PARAM_L176_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L176_OFFSET ) ))
#define SBB_PARAM_H177_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H177_OFFSET ) ))
#define SBB_PARAM_L177_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L177_OFFSET ) ))
#define SBB_PARAM_H178_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H178_OFFSET ) ))
#define SBB_PARAM_L178_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L178_OFFSET ) ))
#define SBB_PARAM_H179_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H179_OFFSET ) ))
#define SBB_PARAM_L179_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L179_OFFSET ) ))
#define SBB_PARAM_H180_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H180_OFFSET ) ))
#define SBB_PARAM_L180_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L180_OFFSET ) ))
#define SBB_PARAM_H181_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H181_OFFSET ) ))
#define SBB_PARAM_L181_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L181_OFFSET ) ))
#define SBB_PARAM_H182_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H182_OFFSET ) ))
#define SBB_PARAM_L182_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L182_OFFSET ) ))
#define SBB_PARAM_H183_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H183_OFFSET ) ))
#define SBB_PARAM_L183_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L183_OFFSET ) ))
#define SBB_PARAM_H184_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H184_OFFSET ) ))
#define SBB_PARAM_L184_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L184_OFFSET ) ))
#define SBB_PARAM_H185_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H185_OFFSET ) ))
#define SBB_PARAM_L185_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L185_OFFSET ) ))
#define SBB_PARAM_H186_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H186_OFFSET ) ))
#define SBB_PARAM_L186_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L186_OFFSET ) ))
#define SBB_PARAM_H187_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H187_OFFSET ) ))
#define SBB_PARAM_L187_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L187_OFFSET ) ))
#define SBB_PARAM_H188_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H188_OFFSET ) ))
#define SBB_PARAM_L188_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L188_OFFSET ) ))
#define SBB_PARAM_H189_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H189_OFFSET ) ))
#define SBB_PARAM_L189_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L189_OFFSET ) ))
#define SBB_PARAM_H190_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H190_OFFSET ) ))
#define SBB_PARAM_L190_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L190_OFFSET ) ))
#define SBB_PARAM_H191_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H191_OFFSET ) ))
#define SBB_PARAM_L191_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L191_OFFSET ) ))
#define SBB_PARAM_H192_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H192_OFFSET ) ))
#define SBB_PARAM_L192_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L192_OFFSET ) ))
#define SBB_PARAM_H193_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H193_OFFSET ) ))
#define SBB_PARAM_L193_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L193_OFFSET ) ))
#define SBB_PARAM_H194_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H194_OFFSET ) ))
#define SBB_PARAM_L194_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L194_OFFSET ) ))
#define SBB_PARAM_H195_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H195_OFFSET ) ))
#define SBB_PARAM_L195_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L195_OFFSET ) ))
#define SBB_PARAM_H196_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H196_OFFSET ) ))
#define SBB_PARAM_L196_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L196_OFFSET ) ))
#define SBB_PARAM_H197_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H197_OFFSET ) ))
#define SBB_PARAM_L197_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L197_OFFSET ) ))
#define SBB_PARAM_H198_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H198_OFFSET ) ))
#define SBB_PARAM_L198_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L198_OFFSET ) ))
#define SBB_PARAM_H199_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H199_OFFSET ) ))
#define SBB_PARAM_L199_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L199_OFFSET ) ))
#define SBB_PARAM_H200_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H200_OFFSET ) ))
#define SBB_PARAM_L200_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L200_OFFSET ) ))
#define SBB_PARAM_H201_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H201_OFFSET ) ))
#define SBB_PARAM_L201_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L201_OFFSET ) ))
#define SBB_PARAM_H202_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H202_OFFSET ) ))
#define SBB_PARAM_L202_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L202_OFFSET ) ))
#define SBB_PARAM_H203_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H203_OFFSET ) ))
#define SBB_PARAM_L203_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L203_OFFSET ) ))
#define SBB_PARAM_H204_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H204_OFFSET ) ))
#define SBB_PARAM_L204_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L204_OFFSET ) ))
#define SBB_PARAM_H205_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H205_OFFSET ) ))
#define SBB_PARAM_L205_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L205_OFFSET ) ))
#define SBB_PARAM_H206_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H206_OFFSET ) ))
#define SBB_PARAM_L206_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L206_OFFSET ) ))
#define SBB_PARAM_H207_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H207_OFFSET ) ))
#define SBB_PARAM_L207_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L207_OFFSET ) ))
#define SBB_PARAM_H208_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H208_OFFSET ) ))
#define SBB_PARAM_L208_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L208_OFFSET ) ))
#define SBB_PARAM_H209_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H209_OFFSET ) ))
#define SBB_PARAM_L209_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L209_OFFSET ) ))
#define SBB_PARAM_H210_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H210_OFFSET ) ))
#define SBB_PARAM_L210_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L210_OFFSET ) ))
#define SBB_PARAM_H211_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H211_OFFSET ) ))
#define SBB_PARAM_L211_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L211_OFFSET ) ))
#define SBB_PARAM_H212_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H212_OFFSET ) ))
#define SBB_PARAM_L212_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L212_OFFSET ) ))
#define SBB_PARAM_H213_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H213_OFFSET ) ))
#define SBB_PARAM_L213_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L213_OFFSET ) ))
#define SBB_PARAM_H214_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H214_OFFSET ) ))
#define SBB_PARAM_L214_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L214_OFFSET ) ))
#define SBB_PARAM_H215_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H215_OFFSET ) ))
#define SBB_PARAM_L215_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L215_OFFSET ) ))
#define SBB_PARAM_H216_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H216_OFFSET ) ))
#define SBB_PARAM_L216_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L216_OFFSET ) ))
#define SBB_PARAM_H217_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H217_OFFSET ) ))
#define SBB_PARAM_L217_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L217_OFFSET ) ))
#define SBB_PARAM_H218_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H218_OFFSET ) ))
#define SBB_PARAM_L218_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L218_OFFSET ) ))
#define SBB_PARAM_H219_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H219_OFFSET ) ))
#define SBB_PARAM_L219_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L219_OFFSET ) ))
#define SBB_PARAM_H220_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H220_OFFSET ) ))
#define SBB_PARAM_L220_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L220_OFFSET ) ))
#define SBB_PARAM_H221_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H221_OFFSET ) ))
#define SBB_PARAM_L221_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L221_OFFSET ) ))
#define SBB_PARAM_H222_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H222_OFFSET ) ))
#define SBB_PARAM_L222_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L222_OFFSET ) ))
#define SBB_PARAM_H223_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H223_OFFSET ) ))
#define SBB_PARAM_L223_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L223_OFFSET ) ))
#define SBB_PARAM_H224_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H224_OFFSET ) ))
#define SBB_PARAM_L224_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L224_OFFSET ) ))
#define SBB_PARAM_H225_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H225_OFFSET ) ))
#define SBB_PARAM_L225_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L225_OFFSET ) ))
#define SBB_PARAM_H226_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H226_OFFSET ) ))
#define SBB_PARAM_L226_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L226_OFFSET ) ))
#define SBB_PARAM_H227_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H227_OFFSET ) ))
#define SBB_PARAM_L227_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L227_OFFSET ) ))
#define SBB_PARAM_H228_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H228_OFFSET ) ))
#define SBB_PARAM_L228_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L228_OFFSET ) ))
#define SBB_PARAM_H229_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H229_OFFSET ) ))
#define SBB_PARAM_L229_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L229_OFFSET ) ))
#define SBB_PARAM_H230_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H230_OFFSET ) ))
#define SBB_PARAM_L230_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L230_OFFSET ) ))
#define SBB_PARAM_H231_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H231_OFFSET ) ))
#define SBB_PARAM_L231_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L231_OFFSET ) ))
#define SBB_PARAM_H232_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H232_OFFSET ) ))
#define SBB_PARAM_L232_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L232_OFFSET ) ))
#define SBB_PARAM_H233_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H233_OFFSET ) ))
#define SBB_PARAM_L233_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L233_OFFSET ) ))
#define SBB_PARAM_H234_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H234_OFFSET ) ))
#define SBB_PARAM_L234_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L234_OFFSET ) ))
#define SBB_PARAM_H235_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H235_OFFSET ) ))
#define SBB_PARAM_L235_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L235_OFFSET ) ))
#define SBB_PARAM_H236_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H236_OFFSET ) ))
#define SBB_PARAM_L236_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L236_OFFSET ) ))
#define SBB_PARAM_H237_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H237_OFFSET ) ))
#define SBB_PARAM_L237_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L237_OFFSET ) ))
#define SBB_PARAM_H238_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H238_OFFSET ) ))
#define SBB_PARAM_L238_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L238_OFFSET ) ))
#define SBB_PARAM_H239_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H239_OFFSET ) ))
#define SBB_PARAM_L239_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L239_OFFSET ) ))
#define SBB_PARAM_H240_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H240_OFFSET ) ))
#define SBB_PARAM_L240_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L240_OFFSET ) ))
#define SBB_PARAM_H241_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H241_OFFSET ) ))
#define SBB_PARAM_L241_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L241_OFFSET ) ))
#define SBB_PARAM_H242_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H242_OFFSET ) ))
#define SBB_PARAM_L242_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L242_OFFSET ) ))
#define SBB_PARAM_H243_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H243_OFFSET ) ))
#define SBB_PARAM_L243_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L243_OFFSET ) ))
#define SBB_PARAM_H244_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H244_OFFSET ) ))
#define SBB_PARAM_L244_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L244_OFFSET ) ))
#define SBB_PARAM_H245_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H245_OFFSET ) ))
#define SBB_PARAM_L245_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L245_OFFSET ) ))
#define SBB_PARAM_H246_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H246_OFFSET ) ))
#define SBB_PARAM_L246_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L246_OFFSET ) ))
#define SBB_PARAM_H247_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H247_OFFSET ) ))
#define SBB_PARAM_L247_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L247_OFFSET ) ))
#define SBB_PARAM_H248_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H248_OFFSET ) ))
#define SBB_PARAM_L248_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L248_OFFSET ) ))
#define SBB_PARAM_H249_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H249_OFFSET ) ))
#define SBB_PARAM_L249_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L249_OFFSET ) ))
#define SBB_PARAM_H250_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H250_OFFSET ) ))
#define SBB_PARAM_L250_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L250_OFFSET ) ))
#define SBB_PARAM_H251_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H251_OFFSET ) ))
#define SBB_PARAM_L251_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L251_OFFSET ) ))
#define SBB_PARAM_H252_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H252_OFFSET ) ))
#define SBB_PARAM_L252_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L252_OFFSET ) ))
#define SBB_PARAM_H253_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H253_OFFSET ) ))
#define SBB_PARAM_L253_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L253_OFFSET ) ))
#define SBB_PARAM_H254_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H254_OFFSET ) ))
#define SBB_PARAM_L254_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L254_OFFSET ) ))
#define SBB_PARAM_H255_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H255_OFFSET ) ))
#define SBB_PARAM_L255_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L255_OFFSET ) ))
#define SBB_PARAM_H256_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H256_OFFSET ) ))
#define SBB_PARAM_L256_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L256_OFFSET ) ))
#define SBB_PARAM_H257_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H257_OFFSET ) ))
#define SBB_PARAM_L257_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L257_OFFSET ) ))
#define SBB_PARAM_H258_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H258_OFFSET ) ))
#define SBB_PARAM_L258_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L258_OFFSET ) ))
#define SBB_PARAM_H259_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H259_OFFSET ) ))
#define SBB_PARAM_L259_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L259_OFFSET ) ))
#define SBB_PARAM_H260_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H260_OFFSET ) ))
#define SBB_PARAM_L260_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L260_OFFSET ) ))
#define SBB_PARAM_H261_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H261_OFFSET ) ))
#define SBB_PARAM_L261_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L261_OFFSET ) ))
#define SBB_PARAM_H262_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H262_OFFSET ) ))
#define SBB_PARAM_L262_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L262_OFFSET ) ))
#define SBB_PARAM_H263_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H263_OFFSET ) ))
#define SBB_PARAM_L263_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L263_OFFSET ) ))
#define SBB_PARAM_H264_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H264_OFFSET ) ))
#define SBB_PARAM_L264_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L264_OFFSET ) ))
#define SBB_PARAM_H265_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H265_OFFSET ) ))
#define SBB_PARAM_L265_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L265_OFFSET ) ))
#define SBB_PARAM_H266_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H266_OFFSET ) ))
#define SBB_PARAM_L266_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L266_OFFSET ) ))
#define SBB_PARAM_H267_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H267_OFFSET ) ))
#define SBB_PARAM_L267_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L267_OFFSET ) ))
#define SBB_PARAM_H268_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H268_OFFSET ) ))
#define SBB_PARAM_L268_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L268_OFFSET ) ))
#define SBB_PARAM_H269_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H269_OFFSET ) ))
#define SBB_PARAM_L269_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L269_OFFSET ) ))
#define SBB_PARAM_H270_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H270_OFFSET ) ))
#define SBB_PARAM_L270_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L270_OFFSET ) ))
#define SBB_PARAM_H271_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H271_OFFSET ) ))
#define SBB_PARAM_L271_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L271_OFFSET ) ))
#define SBB_PARAM_H272_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H272_OFFSET ) ))
#define SBB_PARAM_L272_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L272_OFFSET ) ))
#define SBB_PARAM_H273_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H273_OFFSET ) ))
#define SBB_PARAM_L273_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L273_OFFSET ) ))
#define SBB_PARAM_H274_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H274_OFFSET ) ))
#define SBB_PARAM_L274_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L274_OFFSET ) ))
#define SBB_PARAM_H275_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H275_OFFSET ) ))
#define SBB_PARAM_L275_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L275_OFFSET ) ))
#define SBB_PARAM_H276_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H276_OFFSET ) ))
#define SBB_PARAM_L276_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L276_OFFSET ) ))
#define SBB_PARAM_H277_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H277_OFFSET ) ))
#define SBB_PARAM_L277_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L277_OFFSET ) ))
#define SBB_PARAM_H278_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H278_OFFSET ) ))
#define SBB_PARAM_L278_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L278_OFFSET ) ))
#define SBB_PARAM_H279_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H279_OFFSET ) ))
#define SBB_PARAM_L279_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L279_OFFSET ) ))
#define SBB_PARAM_H280_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H280_OFFSET ) ))
#define SBB_PARAM_L280_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L280_OFFSET ) ))
#define SBB_PARAM_H281_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H281_OFFSET ) ))
#define SBB_PARAM_L281_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L281_OFFSET ) ))
#define SBB_PARAM_H282_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H282_OFFSET ) ))
#define SBB_PARAM_L282_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L282_OFFSET ) ))
#define SBB_PARAM_H283_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H283_OFFSET ) ))
#define SBB_PARAM_L283_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L283_OFFSET ) ))
#define SBB_PARAM_H284_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H284_OFFSET ) ))
#define SBB_PARAM_L284_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L284_OFFSET ) ))
#define SBB_PARAM_H285_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H285_OFFSET ) ))
#define SBB_PARAM_L285_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L285_OFFSET ) ))
#define SBB_PARAM_H286_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H286_OFFSET ) ))
#define SBB_PARAM_L286_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L286_OFFSET ) ))
#define SBB_PARAM_H287_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H287_OFFSET ) ))
#define SBB_PARAM_L287_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L287_OFFSET ) ))
#define SBB_PARAM_H288_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H288_OFFSET ) ))
#define SBB_PARAM_L288_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L288_OFFSET ) ))
#define SBB_PARAM_H289_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H289_OFFSET ) ))
#define SBB_PARAM_L289_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L289_OFFSET ) ))
#define SBB_PARAM_H290_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H290_OFFSET ) ))
#define SBB_PARAM_L290_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L290_OFFSET ) ))
#define SBB_PARAM_H291_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H291_OFFSET ) ))
#define SBB_PARAM_L291_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L291_OFFSET ) ))
#define SBB_PARAM_H292_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H292_OFFSET ) ))
#define SBB_PARAM_L292_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L292_OFFSET ) ))
#define SBB_PARAM_H293_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H293_OFFSET ) ))
#define SBB_PARAM_L293_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L293_OFFSET ) ))
#define SBB_PARAM_H294_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H294_OFFSET ) ))
#define SBB_PARAM_L294_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L294_OFFSET ) ))
#define SBB_PARAM_H295_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H295_OFFSET ) ))
#define SBB_PARAM_L295_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L295_OFFSET ) ))
#define SBB_PARAM_H296_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H296_OFFSET ) ))
#define SBB_PARAM_L296_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L296_OFFSET ) ))
#define SBB_PARAM_H297_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H297_OFFSET ) ))
#define SBB_PARAM_L297_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L297_OFFSET ) ))
#define SBB_PARAM_H298_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H298_OFFSET ) ))
#define SBB_PARAM_L298_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L298_OFFSET ) ))
#define SBB_PARAM_H299_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H299_OFFSET ) ))
#define SBB_PARAM_L299_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L299_OFFSET ) ))
#define SBB_PARAM_H300_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H300_OFFSET ) ))
#define SBB_PARAM_L300_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L300_OFFSET ) ))
#define SBB_PARAM_H301_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H301_OFFSET ) ))
#define SBB_PARAM_L301_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L301_OFFSET ) ))
#define SBB_PARAM_H302_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H302_OFFSET ) ))
#define SBB_PARAM_L302_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L302_OFFSET ) ))
#define SBB_PARAM_H303_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H303_OFFSET ) ))
#define SBB_PARAM_L303_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L303_OFFSET ) ))
#define SBB_PARAM_H304_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H304_OFFSET ) ))
#define SBB_PARAM_L304_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L304_OFFSET ) ))
#define SBB_PARAM_H305_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H305_OFFSET ) ))
#define SBB_PARAM_L305_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L305_OFFSET ) ))
#define SBB_PARAM_H306_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H306_OFFSET ) ))
#define SBB_PARAM_L306_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L306_OFFSET ) ))
#define SBB_PARAM_H307_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H307_OFFSET ) ))
#define SBB_PARAM_L307_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L307_OFFSET ) ))
#define SBB_PARAM_H308_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H308_OFFSET ) ))
#define SBB_PARAM_L308_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L308_OFFSET ) ))
#define SBB_PARAM_H309_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H309_OFFSET ) ))
#define SBB_PARAM_L309_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L309_OFFSET ) ))
#define SBB_PARAM_H310_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H310_OFFSET ) ))
#define SBB_PARAM_L310_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L310_OFFSET ) ))
#define SBB_PARAM_H311_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H311_OFFSET ) ))
#define SBB_PARAM_L311_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L311_OFFSET ) ))
#define SBB_PARAM_H312_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H312_OFFSET ) ))
#define SBB_PARAM_L312_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L312_OFFSET ) ))
#define SBB_PARAM_H313_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H313_OFFSET ) ))
#define SBB_PARAM_L313_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L313_OFFSET ) ))
#define SBB_PARAM_H314_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H314_OFFSET ) ))
#define SBB_PARAM_L314_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L314_OFFSET ) ))
#define SBB_PARAM_H315_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H315_OFFSET ) ))
#define SBB_PARAM_L315_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L315_OFFSET ) ))
#define SBB_PARAM_H316_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H316_OFFSET ) ))
#define SBB_PARAM_L316_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L316_OFFSET ) ))
#define SBB_PARAM_H317_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H317_OFFSET ) ))
#define SBB_PARAM_L317_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L317_OFFSET ) ))
#define SBB_PARAM_H318_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H318_OFFSET ) ))
#define SBB_PARAM_L318_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L318_OFFSET ) ))
#define SBB_PARAM_H319_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H319_OFFSET ) ))
#define SBB_PARAM_L319_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L319_OFFSET ) ))
#define SBB_PARAM_H320_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H320_OFFSET ) ))
#define SBB_PARAM_L320_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L320_OFFSET ) ))
#define SBB_PARAM_H321_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H321_OFFSET ) ))
#define SBB_PARAM_L321_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L321_OFFSET ) ))
#define SBB_PARAM_H322_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H322_OFFSET ) ))
#define SBB_PARAM_L322_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L322_OFFSET ) ))
#define SBB_PARAM_H323_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H323_OFFSET ) ))
#define SBB_PARAM_L323_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L323_OFFSET ) ))
#define SBB_PARAM_H324_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H324_OFFSET ) ))
#define SBB_PARAM_L324_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L324_OFFSET ) ))
#define SBB_PARAM_H325_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H325_OFFSET ) ))
#define SBB_PARAM_L325_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L325_OFFSET ) ))
#define SBB_PARAM_H326_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H326_OFFSET ) ))
#define SBB_PARAM_L326_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L326_OFFSET ) ))
#define SBB_PARAM_H327_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H327_OFFSET ) ))
#define SBB_PARAM_L327_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L327_OFFSET ) ))
#define SBB_PARAM_H328_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H328_OFFSET ) ))
#define SBB_PARAM_L328_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L328_OFFSET ) ))
#define SBB_PARAM_H329_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H329_OFFSET ) ))
#define SBB_PARAM_L329_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L329_OFFSET ) ))
#define SBB_PARAM_H330_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H330_OFFSET ) ))
#define SBB_PARAM_L330_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L330_OFFSET ) ))
#define SBB_PARAM_H331_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H331_OFFSET ) ))
#define SBB_PARAM_L331_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L331_OFFSET ) ))
#define SBB_PARAM_H332_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H332_OFFSET ) ))
#define SBB_PARAM_L332_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L332_OFFSET ) ))
#define SBB_PARAM_H333_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H333_OFFSET ) ))
#define SBB_PARAM_L333_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L333_OFFSET ) ))
#define SBB_PARAM_H334_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H334_OFFSET ) ))
#define SBB_PARAM_L334_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L334_OFFSET ) ))
#define SBB_PARAM_H335_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H335_OFFSET ) ))
#define SBB_PARAM_L335_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L335_OFFSET ) ))
#define SBB_PARAM_H336_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H336_OFFSET ) ))
#define SBB_PARAM_L336_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L336_OFFSET ) ))
#define SBB_PARAM_H337_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H337_OFFSET ) ))
#define SBB_PARAM_L337_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L337_OFFSET ) ))
#define SBB_PARAM_H338_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H338_OFFSET ) ))
#define SBB_PARAM_L338_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L338_OFFSET ) ))
#define SBB_PARAM_H339_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H339_OFFSET ) ))
#define SBB_PARAM_L339_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L339_OFFSET ) ))
#define SBB_PARAM_H340_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H340_OFFSET ) ))
#define SBB_PARAM_L340_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L340_OFFSET ) ))
#define SBB_PARAM_H341_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H341_OFFSET ) ))
#define SBB_PARAM_L341_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L341_OFFSET ) ))
#define SBB_PARAM_H342_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H342_OFFSET ) ))
#define SBB_PARAM_L342_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L342_OFFSET ) ))
#define SBB_PARAM_H343_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H343_OFFSET ) ))
#define SBB_PARAM_L343_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L343_OFFSET ) ))
#define SBB_PARAM_H344_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H344_OFFSET ) ))
#define SBB_PARAM_L344_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L344_OFFSET ) ))
#define SBB_PARAM_H345_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H345_OFFSET ) ))
#define SBB_PARAM_L345_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L345_OFFSET ) ))
#define SBB_PARAM_H346_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H346_OFFSET ) ))
#define SBB_PARAM_L346_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L346_OFFSET ) ))
#define SBB_PARAM_H347_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H347_OFFSET ) ))
#define SBB_PARAM_L347_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L347_OFFSET ) ))
#define SBB_PARAM_H348_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H348_OFFSET ) ))
#define SBB_PARAM_L348_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L348_OFFSET ) ))
#define SBB_PARAM_H349_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H349_OFFSET ) ))
#define SBB_PARAM_L349_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L349_OFFSET ) ))
#define SBB_PARAM_H350_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H350_OFFSET ) ))
#define SBB_PARAM_L350_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L350_OFFSET ) ))
#define SBB_PARAM_H351_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H351_OFFSET ) ))
#define SBB_PARAM_L351_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L351_OFFSET ) ))
#define SBB_PARAM_H352_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H352_OFFSET ) ))
#define SBB_PARAM_L352_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L352_OFFSET ) ))
#define SBB_PARAM_H353_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H353_OFFSET ) ))
#define SBB_PARAM_L353_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L353_OFFSET ) ))
#define SBB_PARAM_H354_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H354_OFFSET ) ))
#define SBB_PARAM_L354_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L354_OFFSET ) ))
#define SBB_PARAM_H355_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H355_OFFSET ) ))
#define SBB_PARAM_L355_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L355_OFFSET ) ))
#define SBB_PARAM_H356_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H356_OFFSET ) ))
#define SBB_PARAM_L356_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L356_OFFSET ) ))
#define SBB_PARAM_H357_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H357_OFFSET ) ))
#define SBB_PARAM_L357_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L357_OFFSET ) ))
#define SBB_PARAM_H358_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H358_OFFSET ) ))
#define SBB_PARAM_L358_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L358_OFFSET ) ))
#define SBB_PARAM_H359_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H359_OFFSET ) ))
#define SBB_PARAM_L359_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L359_OFFSET ) ))
#define SBB_PARAM_H360_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H360_OFFSET ) ))
#define SBB_PARAM_L360_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L360_OFFSET ) ))
#define SBB_PARAM_H361_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H361_OFFSET ) ))
#define SBB_PARAM_L361_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L361_OFFSET ) ))
#define SBB_PARAM_H362_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H362_OFFSET ) ))
#define SBB_PARAM_L362_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L362_OFFSET ) ))
#define SBB_PARAM_H363_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H363_OFFSET ) ))
#define SBB_PARAM_L363_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L363_OFFSET ) ))
#define SBB_PARAM_H364_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H364_OFFSET ) ))
#define SBB_PARAM_L364_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L364_OFFSET ) ))
#define SBB_PARAM_H365_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H365_OFFSET ) ))
#define SBB_PARAM_L365_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L365_OFFSET ) ))
#define SBB_PARAM_H366_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H366_OFFSET ) ))
#define SBB_PARAM_L366_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L366_OFFSET ) ))
#define SBB_PARAM_H367_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H367_OFFSET ) ))
#define SBB_PARAM_L367_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L367_OFFSET ) ))
#define SBB_PARAM_H368_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H368_OFFSET ) ))
#define SBB_PARAM_L368_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L368_OFFSET ) ))
#define SBB_PARAM_H369_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H369_OFFSET ) ))
#define SBB_PARAM_L369_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L369_OFFSET ) ))
#define SBB_PARAM_H370_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H370_OFFSET ) ))
#define SBB_PARAM_L370_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L370_OFFSET ) ))
#define SBB_PARAM_H371_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H371_OFFSET ) ))
#define SBB_PARAM_L371_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L371_OFFSET ) ))
#define SBB_PARAM_H372_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H372_OFFSET ) ))
#define SBB_PARAM_L372_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L372_OFFSET ) ))
#define SBB_PARAM_H373_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H373_OFFSET ) ))
#define SBB_PARAM_L373_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L373_OFFSET ) ))
#define SBB_PARAM_H374_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H374_OFFSET ) ))
#define SBB_PARAM_L374_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L374_OFFSET ) ))
#define SBB_PARAM_H375_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H375_OFFSET ) ))
#define SBB_PARAM_L375_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L375_OFFSET ) ))
#define SBB_PARAM_H376_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H376_OFFSET ) ))
#define SBB_PARAM_L376_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L376_OFFSET ) ))
#define SBB_PARAM_H377_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H377_OFFSET ) ))
#define SBB_PARAM_L377_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L377_OFFSET ) ))
#define SBB_PARAM_H378_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H378_OFFSET ) ))
#define SBB_PARAM_L378_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L378_OFFSET ) ))
#define SBB_PARAM_H379_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H379_OFFSET ) ))
#define SBB_PARAM_L379_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L379_OFFSET ) ))
#define SBB_PARAM_H380_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H380_OFFSET ) ))
#define SBB_PARAM_L380_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L380_OFFSET ) ))
#define SBB_PARAM_H381_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H381_OFFSET ) ))
#define SBB_PARAM_L381_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L381_OFFSET ) ))
#define SBB_PARAM_H382_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H382_OFFSET ) ))
#define SBB_PARAM_L382_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L382_OFFSET ) ))
#define SBB_PARAM_H383_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H383_OFFSET ) ))
#define SBB_PARAM_L383_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L383_OFFSET ) ))
#define SBB_PARAM_H384_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H384_OFFSET ) ))
#define SBB_PARAM_L384_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L384_OFFSET ) ))
#define SBB_PARAM_H385_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H385_OFFSET ) ))
#define SBB_PARAM_L385_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L385_OFFSET ) ))
#define SBB_PARAM_H386_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H386_OFFSET ) ))
#define SBB_PARAM_L386_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L386_OFFSET ) ))
#define SBB_PARAM_H387_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H387_OFFSET ) ))
#define SBB_PARAM_L387_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L387_OFFSET ) ))
#define SBB_PARAM_H388_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H388_OFFSET ) ))
#define SBB_PARAM_L388_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L388_OFFSET ) ))
#define SBB_PARAM_H389_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H389_OFFSET ) ))
#define SBB_PARAM_L389_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L389_OFFSET ) ))
#define SBB_PARAM_H390_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H390_OFFSET ) ))
#define SBB_PARAM_L390_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L390_OFFSET ) ))
#define SBB_PARAM_H391_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H391_OFFSET ) ))
#define SBB_PARAM_L391_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L391_OFFSET ) ))
#define SBB_PARAM_H392_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H392_OFFSET ) ))
#define SBB_PARAM_L392_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L392_OFFSET ) ))
#define SBB_PARAM_H393_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H393_OFFSET ) ))
#define SBB_PARAM_L393_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L393_OFFSET ) ))
#define SBB_PARAM_H394_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H394_OFFSET ) ))
#define SBB_PARAM_L394_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L394_OFFSET ) ))
#define SBB_PARAM_H395_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H395_OFFSET ) ))
#define SBB_PARAM_L395_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L395_OFFSET ) ))
#define SBB_PARAM_H396_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H396_OFFSET ) ))
#define SBB_PARAM_L396_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L396_OFFSET ) ))
#define SBB_PARAM_H397_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H397_OFFSET ) ))
#define SBB_PARAM_L397_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L397_OFFSET ) ))
#define SBB_PARAM_H398_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H398_OFFSET ) ))
#define SBB_PARAM_L398_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L398_OFFSET ) ))
#define SBB_PARAM_H399_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H399_OFFSET ) ))
#define SBB_PARAM_L399_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L399_OFFSET ) ))
#define SBB_PARAM_H400_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H400_OFFSET ) ))
#define SBB_PARAM_L400_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L400_OFFSET ) ))
#define SBB_PARAM_H401_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H401_OFFSET ) ))
#define SBB_PARAM_L401_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L401_OFFSET ) ))
#define SBB_PARAM_H402_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H402_OFFSET ) ))
#define SBB_PARAM_L402_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L402_OFFSET ) ))
#define SBB_PARAM_H403_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H403_OFFSET ) ))
#define SBB_PARAM_L403_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L403_OFFSET ) ))
#define SBB_PARAM_H404_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H404_OFFSET ) ))
#define SBB_PARAM_L404_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L404_OFFSET ) ))
#define SBB_PARAM_H405_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H405_OFFSET ) ))
#define SBB_PARAM_L405_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L405_OFFSET ) ))
#define SBB_PARAM_H406_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H406_OFFSET ) ))
#define SBB_PARAM_L406_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L406_OFFSET ) ))
#define SBB_PARAM_H407_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H407_OFFSET ) ))
#define SBB_PARAM_L407_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L407_OFFSET ) ))
#define SBB_PARAM_H408_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H408_OFFSET ) ))
#define SBB_PARAM_L408_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L408_OFFSET ) ))
#define SBB_PARAM_H409_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H409_OFFSET ) ))
#define SBB_PARAM_L409_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L409_OFFSET ) ))
#define SBB_PARAM_H410_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H410_OFFSET ) ))
#define SBB_PARAM_L410_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L410_OFFSET ) ))
#define SBB_PARAM_H411_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H411_OFFSET ) ))
#define SBB_PARAM_L411_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L411_OFFSET ) ))
#define SBB_PARAM_H412_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H412_OFFSET ) ))
#define SBB_PARAM_L412_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L412_OFFSET ) ))
#define SBB_PARAM_H413_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H413_OFFSET ) ))
#define SBB_PARAM_L413_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L413_OFFSET ) ))
#define SBB_PARAM_H414_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H414_OFFSET ) ))
#define SBB_PARAM_L414_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L414_OFFSET ) ))
#define SBB_PARAM_H415_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H415_OFFSET ) ))
#define SBB_PARAM_L415_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L415_OFFSET ) ))
#define SBB_PARAM_H416_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H416_OFFSET ) ))
#define SBB_PARAM_L416_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L416_OFFSET ) ))
#define SBB_PARAM_H417_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H417_OFFSET ) ))
#define SBB_PARAM_L417_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L417_OFFSET ) ))
#define SBB_PARAM_H418_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H418_OFFSET ) ))
#define SBB_PARAM_L418_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L418_OFFSET ) ))
#define SBB_PARAM_H419_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H419_OFFSET ) ))
#define SBB_PARAM_L419_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L419_OFFSET ) ))
#define SBB_PARAM_H420_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H420_OFFSET ) ))
#define SBB_PARAM_L420_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L420_OFFSET ) ))
#define SBB_PARAM_H421_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H421_OFFSET ) ))
#define SBB_PARAM_L421_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L421_OFFSET ) ))
#define SBB_PARAM_H422_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H422_OFFSET ) ))
#define SBB_PARAM_L422_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L422_OFFSET ) ))
#define SBB_PARAM_H423_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H423_OFFSET ) ))
#define SBB_PARAM_L423_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L423_OFFSET ) ))
#define SBB_PARAM_H424_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H424_OFFSET ) ))
#define SBB_PARAM_L424_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L424_OFFSET ) ))
#define SBB_PARAM_H425_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H425_OFFSET ) ))
#define SBB_PARAM_L425_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L425_OFFSET ) ))
#define SBB_PARAM_H426_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H426_OFFSET ) ))
#define SBB_PARAM_L426_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L426_OFFSET ) ))
#define SBB_PARAM_H427_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H427_OFFSET ) ))
#define SBB_PARAM_L427_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L427_OFFSET ) ))
#define SBB_PARAM_H428_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H428_OFFSET ) ))
#define SBB_PARAM_L428_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L428_OFFSET ) ))
#define SBB_PARAM_H429_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H429_OFFSET ) ))
#define SBB_PARAM_L429_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L429_OFFSET ) ))
#define SBB_PARAM_H430_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H430_OFFSET ) ))
#define SBB_PARAM_L430_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L430_OFFSET ) ))
#define SBB_PARAM_H431_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H431_OFFSET ) ))
#define SBB_PARAM_L431_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L431_OFFSET ) ))
#define SBB_PARAM_H432_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H432_OFFSET ) ))
#define SBB_PARAM_L432_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L432_OFFSET ) ))
#define SBB_PARAM_H433_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H433_OFFSET ) ))
#define SBB_PARAM_L433_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L433_OFFSET ) ))
#define SBB_PARAM_H434_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H434_OFFSET ) ))
#define SBB_PARAM_L434_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L434_OFFSET ) ))
#define SBB_PARAM_H435_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H435_OFFSET ) ))
#define SBB_PARAM_L435_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L435_OFFSET ) ))
#define SBB_PARAM_H436_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H436_OFFSET ) ))
#define SBB_PARAM_L436_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L436_OFFSET ) ))
#define SBB_PARAM_H437_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H437_OFFSET ) ))
#define SBB_PARAM_L437_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L437_OFFSET ) ))
#define SBB_PARAM_H438_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H438_OFFSET ) ))
#define SBB_PARAM_L438_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L438_OFFSET ) ))
#define SBB_PARAM_H439_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H439_OFFSET ) ))
#define SBB_PARAM_L439_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L439_OFFSET ) ))
#define SBB_PARAM_H440_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H440_OFFSET ) ))
#define SBB_PARAM_L440_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L440_OFFSET ) ))
#define SBB_PARAM_H441_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H441_OFFSET ) ))
#define SBB_PARAM_L441_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L441_OFFSET ) ))
#define SBB_PARAM_H442_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H442_OFFSET ) ))
#define SBB_PARAM_L442_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L442_OFFSET ) ))
#define SBB_PARAM_H443_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H443_OFFSET ) ))
#define SBB_PARAM_L443_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L443_OFFSET ) ))
#define SBB_PARAM_H444_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H444_OFFSET ) ))
#define SBB_PARAM_L444_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L444_OFFSET ) ))
#define SBB_PARAM_H445_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H445_OFFSET ) ))
#define SBB_PARAM_L445_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L445_OFFSET ) ))
#define SBB_PARAM_H446_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H446_OFFSET ) ))
#define SBB_PARAM_L446_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L446_OFFSET ) ))
#define SBB_PARAM_H447_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H447_OFFSET ) ))
#define SBB_PARAM_L447_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L447_OFFSET ) ))
#define SBB_PARAM_H448_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H448_OFFSET ) ))
#define SBB_PARAM_L448_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L448_OFFSET ) ))
#define SBB_PARAM_H449_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H449_OFFSET ) ))
#define SBB_PARAM_L449_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L449_OFFSET ) ))
#define SBB_PARAM_H450_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H450_OFFSET ) ))
#define SBB_PARAM_L450_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L450_OFFSET ) ))
#define SBB_PARAM_H451_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H451_OFFSET ) ))
#define SBB_PARAM_L451_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L451_OFFSET ) ))
#define SBB_PARAM_H452_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H452_OFFSET ) ))
#define SBB_PARAM_L452_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L452_OFFSET ) ))
#define SBB_PARAM_H453_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H453_OFFSET ) ))
#define SBB_PARAM_L453_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L453_OFFSET ) ))
#define SBB_PARAM_H454_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H454_OFFSET ) ))
#define SBB_PARAM_L454_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L454_OFFSET ) ))
#define SBB_PARAM_H455_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H455_OFFSET ) ))
#define SBB_PARAM_L455_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L455_OFFSET ) ))
#define SBB_PARAM_H456_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H456_OFFSET ) ))
#define SBB_PARAM_L456_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L456_OFFSET ) ))
#define SBB_PARAM_H457_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H457_OFFSET ) ))
#define SBB_PARAM_L457_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L457_OFFSET ) ))
#define SBB_PARAM_H458_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H458_OFFSET ) ))
#define SBB_PARAM_L458_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L458_OFFSET ) ))
#define SBB_PARAM_H459_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H459_OFFSET ) ))
#define SBB_PARAM_L459_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L459_OFFSET ) ))
#define SBB_PARAM_H460_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H460_OFFSET ) ))
#define SBB_PARAM_L460_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L460_OFFSET ) ))
#define SBB_PARAM_H461_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H461_OFFSET ) ))
#define SBB_PARAM_L461_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L461_OFFSET ) ))
#define SBB_PARAM_H462_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H462_OFFSET ) ))
#define SBB_PARAM_L462_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L462_OFFSET ) ))
#define SBB_PARAM_H463_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H463_OFFSET ) ))
#define SBB_PARAM_L463_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L463_OFFSET ) ))
#define SBB_PARAM_H464_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H464_OFFSET ) ))
#define SBB_PARAM_L464_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L464_OFFSET ) ))
#define SBB_PARAM_H465_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H465_OFFSET ) ))
#define SBB_PARAM_L465_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L465_OFFSET ) ))
#define SBB_PARAM_H466_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H466_OFFSET ) ))
#define SBB_PARAM_L466_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L466_OFFSET ) ))
#define SBB_PARAM_H467_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H467_OFFSET ) ))
#define SBB_PARAM_L467_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L467_OFFSET ) ))
#define SBB_PARAM_H468_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H468_OFFSET ) ))
#define SBB_PARAM_L468_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L468_OFFSET ) ))
#define SBB_PARAM_H469_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H469_OFFSET ) ))
#define SBB_PARAM_L469_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L469_OFFSET ) ))
#define SBB_PARAM_H470_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H470_OFFSET ) ))
#define SBB_PARAM_L470_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L470_OFFSET ) ))
#define SBB_PARAM_H471_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H471_OFFSET ) ))
#define SBB_PARAM_L471_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L471_OFFSET ) ))
#define SBB_PARAM_H472_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H472_OFFSET ) ))
#define SBB_PARAM_L472_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L472_OFFSET ) ))
#define SBB_PARAM_H473_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H473_OFFSET ) ))
#define SBB_PARAM_L473_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L473_OFFSET ) ))
#define SBB_PARAM_H474_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H474_OFFSET ) ))
#define SBB_PARAM_L474_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L474_OFFSET ) ))
#define SBB_PARAM_H475_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H475_OFFSET ) ))
#define SBB_PARAM_L475_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L475_OFFSET ) ))
#define SBB_PARAM_H476_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H476_OFFSET ) ))
#define SBB_PARAM_L476_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L476_OFFSET ) ))
#define SBB_PARAM_H477_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H477_OFFSET ) ))
#define SBB_PARAM_L477_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L477_OFFSET ) ))
#define SBB_PARAM_H478_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H478_OFFSET ) ))
#define SBB_PARAM_L478_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L478_OFFSET ) ))
#define SBB_PARAM_H479_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H479_OFFSET ) ))
#define SBB_PARAM_L479_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L479_OFFSET ) ))
#define SBB_PARAM_H480_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H480_OFFSET ) ))
#define SBB_PARAM_L480_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L480_OFFSET ) ))
#define SBB_PARAM_H481_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H481_OFFSET ) ))
#define SBB_PARAM_L481_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L481_OFFSET ) ))
#define SBB_PARAM_H482_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H482_OFFSET ) ))
#define SBB_PARAM_L482_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L482_OFFSET ) ))
#define SBB_PARAM_H483_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H483_OFFSET ) ))
#define SBB_PARAM_L483_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L483_OFFSET ) ))
#define SBB_PARAM_H484_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H484_OFFSET ) ))
#define SBB_PARAM_L484_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L484_OFFSET ) ))
#define SBB_PARAM_H485_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H485_OFFSET ) ))
#define SBB_PARAM_L485_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L485_OFFSET ) ))
#define SBB_PARAM_H486_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H486_OFFSET ) ))
#define SBB_PARAM_L486_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L486_OFFSET ) ))
#define SBB_PARAM_H487_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H487_OFFSET ) ))
#define SBB_PARAM_L487_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L487_OFFSET ) ))
#define SBB_PARAM_H488_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H488_OFFSET ) ))
#define SBB_PARAM_L488_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L488_OFFSET ) ))
#define SBB_PARAM_H489_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H489_OFFSET ) ))
#define SBB_PARAM_L489_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L489_OFFSET ) ))
#define SBB_PARAM_H490_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H490_OFFSET ) ))
#define SBB_PARAM_L490_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L490_OFFSET ) ))
#define SBB_PARAM_H491_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H491_OFFSET ) ))
#define SBB_PARAM_L491_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L491_OFFSET ) ))
#define SBB_PARAM_H492_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H492_OFFSET ) ))
#define SBB_PARAM_L492_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L492_OFFSET ) ))
#define SBB_PARAM_H493_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H493_OFFSET ) ))
#define SBB_PARAM_L493_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L493_OFFSET ) ))
#define SBB_PARAM_H494_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H494_OFFSET ) ))
#define SBB_PARAM_L494_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L494_OFFSET ) ))
#define SBB_PARAM_H495_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H495_OFFSET ) ))
#define SBB_PARAM_L495_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L495_OFFSET ) ))
#define SBB_PARAM_H496_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H496_OFFSET ) ))
#define SBB_PARAM_L496_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L496_OFFSET ) ))
#define SBB_PARAM_H497_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H497_OFFSET ) ))
#define SBB_PARAM_L497_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L497_OFFSET ) ))
#define SBB_PARAM_H498_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H498_OFFSET ) ))
#define SBB_PARAM_L498_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L498_OFFSET ) ))
#define SBB_PARAM_H499_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H499_OFFSET ) ))
#define SBB_PARAM_L499_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L499_OFFSET ) ))
#define SBB_PARAM_H500_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H500_OFFSET ) ))
#define SBB_PARAM_L500_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L500_OFFSET ) ))
#define SBB_PARAM_H501_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H501_OFFSET ) ))
#define SBB_PARAM_L501_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L501_OFFSET ) ))
#define SBB_PARAM_H502_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H502_OFFSET ) ))
#define SBB_PARAM_L502_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L502_OFFSET ) ))
#define SBB_PARAM_H503_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H503_OFFSET ) ))
#define SBB_PARAM_L503_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L503_OFFSET ) ))
#define SBB_PARAM_H504_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H504_OFFSET ) ))
#define SBB_PARAM_L504_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L504_OFFSET ) ))
#define SBB_PARAM_H505_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H505_OFFSET ) ))
#define SBB_PARAM_L505_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L505_OFFSET ) ))
#define SBB_PARAM_H506_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H506_OFFSET ) ))
#define SBB_PARAM_L506_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L506_OFFSET ) ))
#define SBB_PARAM_H507_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H507_OFFSET ) ))
#define SBB_PARAM_L507_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L507_OFFSET ) ))
#define SBB_PARAM_H508_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H508_OFFSET ) ))
#define SBB_PARAM_L508_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L508_OFFSET ) ))
#define SBB_PARAM_H509_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H509_OFFSET ) ))
#define SBB_PARAM_L509_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L509_OFFSET ) ))
#define SBB_PARAM_H510_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H510_OFFSET ) ))
#define SBB_PARAM_L510_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L510_OFFSET ) ))
#define SBB_PARAM_H511_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_H511_OFFSET ) ))
#define SBB_PARAM_L511_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PARAM_L511_OFFSET ) ))
#define SBB_DBG_STAT_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_DBG_STAT_OFFSET ) ))
#define SBB_INVLD_INST_ADDR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_INVLD_INST_ADDR_OFFSET ) ))
#define SBB_PC_DATA_ADDR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_PC_DATA_ADDR_OFFSET ) ))
#define SBB_DEC_STG_PC_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_DEC_STG_PC_OFFSET ) ))
#define SBB_DEC_STG_OPCODE_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_DEC_STG_OPCODE_OFFSET ) ))
#define SBB_ISS_STG_PC_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_ISS_STG_PC_OFFSET ) ))
#define SBB_ISS_STG_OPCODE_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_ISS_STG_OPCODE_OFFSET ) ))
#define SBB_STG_STAT_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_STG_STAT_OFFSET ) ))
#define SBB_FREG_HEADPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_FREG_HEADPTR_OFFSET ) ))
#define SBB_FREG_TAILPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_FREG_TAILPTR_OFFSET ) ))
#define SBB_IN_FIFO_HEADPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_HEADPTR_OFFSET ) ))
#define SBB_IN_FIFO_TAILPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_TAILPTR_OFFSET ) ))
#define SBB_OUT_FIFO_HEADPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_HEADPTR_OFFSET ) ))
#define SBB_OUT_FIFO_TAILPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_TAILPTR_OFFSET ) ))
#define SBB_STGMEM_FIFO_HEADPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_STGMEM_FIFO_HEADPTR_OFFSET ) ))
#define SBB_STGMEM_FIFO_TAILPTR_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_STGMEM_FIFO_TAILPTR_OFFSET ) ))
#define SBB_CPI_H_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_CPI_H_OFFSET ) ))
#define SBB_CPI_L_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_CPI_L_OFFSET ) ))
#define SBB_IREG_H_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IREG_H_OFFSET ) ))
#define SBB_IREG_L_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IREG_L_OFFSET ) ))
#define SBB_IN_FIFO_HOF_H_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_HOF_H_OFFSET ) ))
#define SBB_IN_FIFO_HOF_L_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_HOF_L_OFFSET ) ))
#define SBB_OUT_FIFO_HOF_H_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_HOF_H_OFFSET ) ))
#define SBB_OUT_FIFO_HOF_L_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_HOF_L_OFFSET ) ))
#define SBB_FIFO_OU_STS_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_FIFO_OU_STS_OFFSET ) ))
#define SBB_FIFO_FE_STS_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_FIFO_FE_STS_OFFSET ) ))
#define SBB_GENERAL_STAT_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_GENERAL_STAT_OFFSET ) ))
#define SBB_CLR_MEM_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_CLR_MEM_OFFSET ) ))
#define SBB_AXI_CTRL_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_AXI_CTRL_OFFSET ) ))
#define SBB_NS_RESEED_CNTER_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_NS_RESEED_CNTER_OFFSET ) ))
#define SBB_IN_FIFO_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H0_OFFSET ) ))
#define SBB_IN_FIFO_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L0_OFFSET ) ))
#define SBB_IN_FIFO_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H1_OFFSET ) ))
#define SBB_IN_FIFO_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L1_OFFSET ) ))
#define SBB_IN_FIFO_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H2_OFFSET ) ))
#define SBB_IN_FIFO_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L2_OFFSET ) ))
#define SBB_IN_FIFO_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H3_OFFSET ) ))
#define SBB_IN_FIFO_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L3_OFFSET ) ))
#define SBB_IN_FIFO_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H4_OFFSET ) ))
#define SBB_IN_FIFO_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L4_OFFSET ) ))
#define SBB_IN_FIFO_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H5_OFFSET ) ))
#define SBB_IN_FIFO_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L5_OFFSET ) ))
#define SBB_IN_FIFO_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H6_OFFSET ) ))
#define SBB_IN_FIFO_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L6_OFFSET ) ))
#define SBB_IN_FIFO_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_H7_OFFSET ) ))
#define SBB_IN_FIFO_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_IN_FIFO_L7_OFFSET ) ))
#define SBB_OUT_FIFO_H0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H0_OFFSET ) ))
#define SBB_OUT_FIFO_L0_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L0_OFFSET ) ))
#define SBB_OUT_FIFO_H1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H1_OFFSET ) ))
#define SBB_OUT_FIFO_L1_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L1_OFFSET ) ))
#define SBB_OUT_FIFO_H2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H2_OFFSET ) ))
#define SBB_OUT_FIFO_L2_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L2_OFFSET ) ))
#define SBB_OUT_FIFO_H3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H3_OFFSET ) ))
#define SBB_OUT_FIFO_L3_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L3_OFFSET ) ))
#define SBB_OUT_FIFO_H4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H4_OFFSET ) ))
#define SBB_OUT_FIFO_L4_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L4_OFFSET ) ))
#define SBB_OUT_FIFO_H5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H5_OFFSET ) ))
#define SBB_OUT_FIFO_L5_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L5_OFFSET ) ))
#define SBB_OUT_FIFO_H6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H6_OFFSET ) ))
#define SBB_OUT_FIFO_L6_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L6_OFFSET ) ))
#define SBB_OUT_FIFO_H7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_H7_OFFSET ) ))
#define SBB_OUT_FIFO_L7_ADR (( ( SYSCON_SBB_MODULE_BASE ) + ( SBB_OUT_FIFO_L7_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief SBB_COMPONENT_SBB_REGS_SEMAPHORE_REG register description at address offset 0x800
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/semaphore_reg
  * Semaphore Register
  */

typedef union {
  struct {
    uint32_t RESERVEDSEM : 16;
    ///< Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SEMVAL : 16;
    ///< Semaphore value - port and lock indicaction if locked else zero for
    ///< unlock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_semaphore_reg_t;

#define SBB_SEMAPHORE_DEFAULT (0x00000000U)
#define SBB_SEMAPHORE_RD_MASK (0xffffffffU)
#define SBB_SEMAPHORE_WR_MASK (0xffffffffU)


///< Reserved
#define SBB_SEMAPHORE_RESERVEDSEM_BF_OFF ( 0)
#define SBB_SEMAPHORE_RESERVEDSEM_BF_WID (16)
#define SBB_SEMAPHORE_RESERVEDSEM_BF_MSK (0x0000FFFF)
#define SBB_SEMAPHORE_RESERVEDSEM_BF_DEF (0x00000000)

///< Semaphore value - port and lock indicaction if locked else zero for
///< unlock
#define SBB_SEMAPHORE_SEMVAL_BF_OFF (16)
#define SBB_SEMAPHORE_SEMVAL_BF_WID (16)
#define SBB_SEMAPHORE_SEMVAL_BF_MSK (0xFFFF0000)
#define SBB_SEMAPHORE_SEMVAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_FUNCTION_REG register description at address offset 0x804
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/function_reg
  * Function Control Register
  */

typedef union {
  struct {
    uint32_t FCN : 32;
    ///< Function code
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_function_reg_t;

#define SBB_FUNCTION_DEFAULT (0x00000000U)
#define SBB_FUNCTION_RD_MASK (0xffffffffU)
#define SBB_FUNCTION_WR_MASK (0xffffffffU)


///< Function code
#define SBB_FUNCTION_FCN_BF_OFF ( 0)
#define SBB_FUNCTION_FCN_BF_WID (32)
#define SBB_FUNCTION_FCN_BF_MSK (0xFFFFFFFF)
#define SBB_FUNCTION_FCN_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_AUTH_STATUS_PARAM_REG register description at address offset 0x808
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/auth_status_param_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_auth_stat_param_reg_t;

#define SBB_AUTH_STAT_PARAM_DEFAULT (0x00000000U)
#define SBB_AUTH_STAT_PARAM_RD_MASK (0xffffffffU)
#define SBB_AUTH_STAT_PARAM_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_AUTH_STAT_PARAM_VAL_BF_OFF ( 0)
#define SBB_AUTH_STAT_PARAM_VAL_BF_WID (32)
#define SBB_AUTH_STAT_PARAM_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_AUTH_STAT_PARAM_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_AUTH_STATUS_REG register description at address offset 0x80c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/auth_status_reg
  * Authentication Status Register
  */

typedef union {
  struct {
    uint32_t DONE : 1;
    ///< Authentication done
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SUCCEDED : 1;
    ///< Authentication succeeded
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t FAILED : 1;
    ///< Authentication failed
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CLOSED : 1;
    ///< Authentication closed
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t READY : 1;
    ///< Authentication challenge ready
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RESERVED0 : 2;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t ERROR : 1;
    ///< Authentication module error
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t ID : 2;
    ///< Service ID
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} sbb_auth_stat_reg_t;

#define SBB_AUTH_STAT_DEFAULT (0x00000000U)
#define SBB_AUTH_STAT_RD_MASK (0x000003ffU)
#define SBB_AUTH_STAT_WR_MASK (0x00000000U)


///< Authentication done
#define SBB_AUTH_STAT_DONE_BF_OFF ( 0)
#define SBB_AUTH_STAT_DONE_BF_WID ( 1)
#define SBB_AUTH_STAT_DONE_BF_MSK (0x00000001)
#define SBB_AUTH_STAT_DONE_BF_DEF (0x00000000)

///< Authentication succeeded
#define SBB_AUTH_STAT_SUCCEDED_BF_OFF ( 1)
#define SBB_AUTH_STAT_SUCCEDED_BF_WID ( 1)
#define SBB_AUTH_STAT_SUCCEDED_BF_MSK (0x00000002)
#define SBB_AUTH_STAT_SUCCEDED_BF_DEF (0x00000000)

///< Authentication failed
#define SBB_AUTH_STAT_FAILED_BF_OFF ( 2)
#define SBB_AUTH_STAT_FAILED_BF_WID ( 1)
#define SBB_AUTH_STAT_FAILED_BF_MSK (0x00000004)
#define SBB_AUTH_STAT_FAILED_BF_DEF (0x00000000)

///< Authentication closed
#define SBB_AUTH_STAT_CLOSED_BF_OFF ( 3)
#define SBB_AUTH_STAT_CLOSED_BF_WID ( 1)
#define SBB_AUTH_STAT_CLOSED_BF_MSK (0x00000008)
#define SBB_AUTH_STAT_CLOSED_BF_DEF (0x00000000)

///< Authentication challenge ready
#define SBB_AUTH_STAT_READY_BF_OFF ( 4)
#define SBB_AUTH_STAT_READY_BF_WID ( 1)
#define SBB_AUTH_STAT_READY_BF_MSK (0x00000010)
#define SBB_AUTH_STAT_READY_BF_DEF (0x00000000)

///< RESERVED
#define SBB_AUTH_STAT_RESERVED0_BF_OFF ( 5)
#define SBB_AUTH_STAT_RESERVED0_BF_WID ( 2)
#define SBB_AUTH_STAT_RESERVED0_BF_MSK (0x00000060)
#define SBB_AUTH_STAT_RESERVED0_BF_DEF (0x00000000)

///< Authentication module error
#define SBB_AUTH_STAT_ERR_BF_OFF ( 7)
#define SBB_AUTH_STAT_ERR_BF_WID ( 1)
#define SBB_AUTH_STAT_ERR_BF_MSK (0x00000080)
#define SBB_AUTH_STAT_ERR_BF_DEF (0x00000000)

///< Service ID
#define SBB_AUTH_STAT_ID_BF_OFF ( 8)
#define SBB_AUTH_STAT_ID_BF_WID ( 2)
#define SBB_AUTH_STAT_ID_BF_MSK (0x00000300)
#define SBB_AUTH_STAT_ID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_STATUS0_REG register description at address offset 0x810
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/status0_reg
  * Status Register 0
  */

typedef union {
  struct {
    uint32_t RELOAD_EFUSES : 1;
    ///< Reload eFuses
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RUN_TRNG : 1;
    ///< Run TRNG even if output FIFO full
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t FIPS_TEST_FAILED : 1;
    ///< FIPS test failed
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t FIPS_TEST_DONE : 1;
    ///< FIPS test finished
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t INTEGRITY_CHECK_FAILED : 1;
    ///< Integrity check failed
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RESERVED0 : 6;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t HASH_OEM_KAKPUB0_NOT_PROGRAMMED : 1;
    ///< Hash OEM Key Authentication Key Copy 0 is not programmed
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t HASH_OEM_KAKPUB1_NOT_PROGRAMMED : 1;
    ///< Hash OEM Key Authentication Key Copy 1 is not programmed
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t HASH_OEM_KAKPUB2_NOT_PROGRAMMED : 1;
    ///< Hash OEM Key Authentication Key Copy 2 is not programmed
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t UDS_NOT_PROGRAMMED : 1;
    ///< UDS is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t UDS_INVALID : 1;
    ///< UDS is invalid
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t HASH_KAKPUB0_NOT_PROGRAMMED : 1;
    ///< Hash Key Authentication Key Copy 0 is not programmed
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t HASH_KAKPUB1_NOT_PROGRAMMED : 1;
    ///< Hash Key Authentication Key Copy 1 is not programmed
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t HASH_KAKPUB2_NOT_PROGRAMMED : 1;
    ///< Hash Key Authentication Key Copy 2 is not programmed
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t SRK0_NOT_PROGRAMMED : 1;
    ///< Storage Root Key Copy 0 is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t SRK0_INVALID : 1;
    ///< Storage Root Key Copy 0 is invalid
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t SRK1_NOT_PROGRAMMED : 1;
    ///< Storage Root Key Copy 1 is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t SRK1_INVALID : 1;
    ///< Storage Root Key Copy 1 is invalid
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t SRK2_NOT_PROGRAMMED : 1;
    ///< Storage Root Key Copy 2 is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t SRK2_INVALID : 1;
    ///< Storage Root Key Copy 2 is invalid
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t SBKEK0_NOT_PROGRAMMED : 1;
    ///< Secure Boot Key Encryption Key Copy 0 is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t SBKEK0_INVALID : 1;
    ///< Secure Boot Key Encryption Key Copy 0 is invalid
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t SBKEK1_NOT_PROGRAMMED : 1;
    ///< Secure Boot Key Encryption Key Copy 1 is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t SBKEK1_INVALID : 1;
    ///< Secure Boot Key Encryption Key Copy 1 is invalid
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t SBKEK2_NOT_PROGRAMMED : 1;
    ///< Secure Boot Key Encryption Key Copy 2 is revoked or not programmed
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t SBKEK2_INVALID : 1;
    ///< Secure Boot Key Encryption Key Copy 2 is invalid
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} sbb_stat0_reg_t;

#define SBB_STAT0_DEFAULT (0x00000000U)
#define SBB_STAT0_RD_MASK (0x7fffffffU)
#define SBB_STAT0_WR_MASK (0x00000000U)


///< Reload eFuses
#define SBB_STAT0_RELOAD_EFUSES_BF_OFF ( 0)
#define SBB_STAT0_RELOAD_EFUSES_BF_WID ( 1)
#define SBB_STAT0_RELOAD_EFUSES_BF_MSK (0x00000001)
#define SBB_STAT0_RELOAD_EFUSES_BF_DEF (0x00000000)

///< Run TRNG even if output FIFO full
#define SBB_STAT0_RUN_TRNG_BF_OFF ( 1)
#define SBB_STAT0_RUN_TRNG_BF_WID ( 1)
#define SBB_STAT0_RUN_TRNG_BF_MSK (0x00000002)
#define SBB_STAT0_RUN_TRNG_BF_DEF (0x00000000)

///< FIPS test failed
#define SBB_STAT0_FIPS_TEST_FAILED_BF_OFF ( 2)
#define SBB_STAT0_FIPS_TEST_FAILED_BF_WID ( 1)
#define SBB_STAT0_FIPS_TEST_FAILED_BF_MSK (0x00000004)
#define SBB_STAT0_FIPS_TEST_FAILED_BF_DEF (0x00000000)

///< FIPS test finished
#define SBB_STAT0_FIPS_TEST_DONE_BF_OFF ( 3)
#define SBB_STAT0_FIPS_TEST_DONE_BF_WID ( 1)
#define SBB_STAT0_FIPS_TEST_DONE_BF_MSK (0x00000008)
#define SBB_STAT0_FIPS_TEST_DONE_BF_DEF (0x00000000)

///< Integrity check failed
#define SBB_STAT0_INTEGRITY_CHECK_FAILED_BF_OFF ( 4)
#define SBB_STAT0_INTEGRITY_CHECK_FAILED_BF_WID ( 1)
#define SBB_STAT0_INTEGRITY_CHECK_FAILED_BF_MSK (0x00000010)
#define SBB_STAT0_INTEGRITY_CHECK_FAILED_BF_DEF (0x00000000)

///< RESERVED
#define SBB_STAT0_RESERVED0_BF_OFF ( 5)
#define SBB_STAT0_RESERVED0_BF_WID ( 6)
#define SBB_STAT0_RESERVED0_BF_MSK (0x000007E0)
#define SBB_STAT0_RESERVED0_BF_DEF (0x00000000)

///< Hash OEM Key Authentication Key Copy 0 is not programmed
#define SBB_STAT0_HASH_OEM_KAKPUB0_NOT_PROGRAMMED_BF_OFF (11)
#define SBB_STAT0_HASH_OEM_KAKPUB0_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_HASH_OEM_KAKPUB0_NOT_PROGRAMMED_BF_MSK (0x00000800)
#define SBB_STAT0_HASH_OEM_KAKPUB0_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Hash OEM Key Authentication Key Copy 1 is not programmed
#define SBB_STAT0_HASH_OEM_KAKPUB1_NOT_PROGRAMMED_BF_OFF (12)
#define SBB_STAT0_HASH_OEM_KAKPUB1_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_HASH_OEM_KAKPUB1_NOT_PROGRAMMED_BF_MSK (0x00001000)
#define SBB_STAT0_HASH_OEM_KAKPUB1_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Hash OEM Key Authentication Key Copy 2 is not programmed
#define SBB_STAT0_HASH_OEM_KAKPUB2_NOT_PROGRAMMED_BF_OFF (13)
#define SBB_STAT0_HASH_OEM_KAKPUB2_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_HASH_OEM_KAKPUB2_NOT_PROGRAMMED_BF_MSK (0x00002000)
#define SBB_STAT0_HASH_OEM_KAKPUB2_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< UDS is revoked or not programmed
#define SBB_STAT0_UDS_NOT_PROGRAMMED_BF_OFF (14)
#define SBB_STAT0_UDS_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_UDS_NOT_PROGRAMMED_BF_MSK (0x00004000)
#define SBB_STAT0_UDS_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< UDS is invalid
#define SBB_STAT0_UDS_INVALID_BF_OFF (15)
#define SBB_STAT0_UDS_INVALID_BF_WID ( 1)
#define SBB_STAT0_UDS_INVALID_BF_MSK (0x00008000)
#define SBB_STAT0_UDS_INVALID_BF_DEF (0x00000000)

///< Hash Key Authentication Key Copy 0 is not programmed
#define SBB_STAT0_HASH_KAKPUB0_NOT_PROGRAMMED_BF_OFF (16)
#define SBB_STAT0_HASH_KAKPUB0_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_HASH_KAKPUB0_NOT_PROGRAMMED_BF_MSK (0x00010000)
#define SBB_STAT0_HASH_KAKPUB0_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Hash Key Authentication Key Copy 1 is not programmed
#define SBB_STAT0_HASH_KAKPUB1_NOT_PROGRAMMED_BF_OFF (17)
#define SBB_STAT0_HASH_KAKPUB1_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_HASH_KAKPUB1_NOT_PROGRAMMED_BF_MSK (0x00020000)
#define SBB_STAT0_HASH_KAKPUB1_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Hash Key Authentication Key Copy 2 is not programmed
#define SBB_STAT0_HASH_KAKPUB2_NOT_PROGRAMMED_BF_OFF (18)
#define SBB_STAT0_HASH_KAKPUB2_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_HASH_KAKPUB2_NOT_PROGRAMMED_BF_MSK (0x00040000)
#define SBB_STAT0_HASH_KAKPUB2_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Storage Root Key Copy 0 is revoked or not programmed
#define SBB_STAT0_SRK0_NOT_PROGRAMMED_BF_OFF (19)
#define SBB_STAT0_SRK0_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_SRK0_NOT_PROGRAMMED_BF_MSK (0x00080000)
#define SBB_STAT0_SRK0_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Storage Root Key Copy 0 is invalid
#define SBB_STAT0_SRK0_INVALID_BF_OFF (20)
#define SBB_STAT0_SRK0_INVALID_BF_WID ( 1)
#define SBB_STAT0_SRK0_INVALID_BF_MSK (0x00100000)
#define SBB_STAT0_SRK0_INVALID_BF_DEF (0x00000000)

///< Storage Root Key Copy 1 is revoked or not programmed
#define SBB_STAT0_SRK1_NOT_PROGRAMMED_BF_OFF (21)
#define SBB_STAT0_SRK1_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_SRK1_NOT_PROGRAMMED_BF_MSK (0x00200000)
#define SBB_STAT0_SRK1_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Storage Root Key Copy 1 is invalid
#define SBB_STAT0_SRK1_INVALID_BF_OFF (22)
#define SBB_STAT0_SRK1_INVALID_BF_WID ( 1)
#define SBB_STAT0_SRK1_INVALID_BF_MSK (0x00400000)
#define SBB_STAT0_SRK1_INVALID_BF_DEF (0x00000000)

///< Storage Root Key Copy 2 is revoked or not programmed
#define SBB_STAT0_SRK2_NOT_PROGRAMMED_BF_OFF (23)
#define SBB_STAT0_SRK2_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_SRK2_NOT_PROGRAMMED_BF_MSK (0x00800000)
#define SBB_STAT0_SRK2_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Storage Root Key Copy 2 is invalid
#define SBB_STAT0_SRK2_INVALID_BF_OFF (24)
#define SBB_STAT0_SRK2_INVALID_BF_WID ( 1)
#define SBB_STAT0_SRK2_INVALID_BF_MSK (0x01000000)
#define SBB_STAT0_SRK2_INVALID_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key Copy 0 is revoked or not programmed
#define SBB_STAT0_SBKEK0_NOT_PROGRAMMED_BF_OFF (25)
#define SBB_STAT0_SBKEK0_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_SBKEK0_NOT_PROGRAMMED_BF_MSK (0x02000000)
#define SBB_STAT0_SBKEK0_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key Copy 0 is invalid
#define SBB_STAT0_SBKEK0_INVALID_BF_OFF (26)
#define SBB_STAT0_SBKEK0_INVALID_BF_WID ( 1)
#define SBB_STAT0_SBKEK0_INVALID_BF_MSK (0x04000000)
#define SBB_STAT0_SBKEK0_INVALID_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key Copy 1 is revoked or not programmed
#define SBB_STAT0_SBKEK1_NOT_PROGRAMMED_BF_OFF (27)
#define SBB_STAT0_SBKEK1_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_SBKEK1_NOT_PROGRAMMED_BF_MSK (0x08000000)
#define SBB_STAT0_SBKEK1_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key Copy 1 is invalid
#define SBB_STAT0_SBKEK1_INVALID_BF_OFF (28)
#define SBB_STAT0_SBKEK1_INVALID_BF_WID ( 1)
#define SBB_STAT0_SBKEK1_INVALID_BF_MSK (0x10000000)
#define SBB_STAT0_SBKEK1_INVALID_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key Copy 2 is revoked or not programmed
#define SBB_STAT0_SBKEK2_NOT_PROGRAMMED_BF_OFF (29)
#define SBB_STAT0_SBKEK2_NOT_PROGRAMMED_BF_WID ( 1)
#define SBB_STAT0_SBKEK2_NOT_PROGRAMMED_BF_MSK (0x20000000)
#define SBB_STAT0_SBKEK2_NOT_PROGRAMMED_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key Copy 2 is invalid
#define SBB_STAT0_SBKEK2_INVALID_BF_OFF (30)
#define SBB_STAT0_SBKEK2_INVALID_BF_WID ( 1)
#define SBB_STAT0_SBKEK2_INVALID_BF_MSK (0x40000000)
#define SBB_STAT0_SBKEK2_INVALID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_STATUS1_REG register description at address offset 0x814
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/status1_reg
  * Status Register 1
  */

typedef union {
  struct {
    uint32_t MEMORY_DED : 1;
    ///< Double memory error detected
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t EFUSES_COPY_FAILED : 1;
    ///< Copy of fuses failed
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EFUSES_COPY_DONE : 1;
    ///< Copy of fuses done
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t STATIC_FUSES_LOADED : 1;
    ///< Load of static fuses done
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t DMA_WR_ERR : 1;
    ///< Out of range request for write DMA
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMA_RD_ERR : 1;
    ///< Out of range request for read DMA
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t INVALID_INSTR : 1;
    ///< Invalid instruction
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t ENABLE_FIPS_TEST : 1;
    ///< Enable FIPS self-test
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t MEMORY_CLEARED : 1;
    ///< Memory zeroization completed
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t TRNG_TIMOUT : 1;
    ///< Constant sent to fuse controler
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t USE_DEBUG_SECRETS : 1;
    ///< Using debug secrets
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t MODULE_ZEROIZED : 1;
    ///< Module is working in post-zeroization mode
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t AES_DPA_FI_ERR : 2;
    ///< AES DPA FI error status
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED3 : 2;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t TRNG_ALARM_FIELD : 4;
    ///< TRNG Alarm  FAILED_TEST_ID[3:0]
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TRNG_ALARM_ST : 2;
    ///< TRNG Alarm  failed_seed_st_ht, illegal_cmd_seq
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t TRNG_FIFO_EMPTY : 1;
    ///< TRNG TRNG FIFO empty
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t TRNG_TEST_MODE : 1;
    ///< TRNG entropy collection mode
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t TRNG_STATUS : 8;
    ///< TRNG status
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_stat1_reg_t;

#define SBB_STAT1_DEFAULT (0x00000000U)
#define SBB_STAT1_RD_MASK (0xffffffffU)
#define SBB_STAT1_WR_MASK (0x00000000U)


///< Double memory error detected
#define SBB_STAT1_MEMORY_DED_BF_OFF ( 0)
#define SBB_STAT1_MEMORY_DED_BF_WID ( 1)
#define SBB_STAT1_MEMORY_DED_BF_MSK (0x00000001)
#define SBB_STAT1_MEMORY_DED_BF_DEF (0x00000000)

///< Copy of fuses failed
#define SBB_STAT1_EFUSES_COPY_FAILED_BF_OFF ( 1)
#define SBB_STAT1_EFUSES_COPY_FAILED_BF_WID ( 1)
#define SBB_STAT1_EFUSES_COPY_FAILED_BF_MSK (0x00000002)
#define SBB_STAT1_EFUSES_COPY_FAILED_BF_DEF (0x00000000)

///< Copy of fuses done
#define SBB_STAT1_EFUSES_COPY_DONE_BF_OFF ( 2)
#define SBB_STAT1_EFUSES_COPY_DONE_BF_WID ( 1)
#define SBB_STAT1_EFUSES_COPY_DONE_BF_MSK (0x00000004)
#define SBB_STAT1_EFUSES_COPY_DONE_BF_DEF (0x00000000)

///< Load of static fuses done
#define SBB_STAT1_STATIC_FUSES_LOADED_BF_OFF ( 3)
#define SBB_STAT1_STATIC_FUSES_LOADED_BF_WID ( 1)
#define SBB_STAT1_STATIC_FUSES_LOADED_BF_MSK (0x00000008)
#define SBB_STAT1_STATIC_FUSES_LOADED_BF_DEF (0x00000000)

///< Out of range request for write DMA
#define SBB_STAT1_DMA_WR_ERR_BF_OFF ( 4)
#define SBB_STAT1_DMA_WR_ERR_BF_WID ( 1)
#define SBB_STAT1_DMA_WR_ERR_BF_MSK (0x00000010)
#define SBB_STAT1_DMA_WR_ERR_BF_DEF (0x00000000)

///< Out of range request for read DMA
#define SBB_STAT1_DMA_RD_ERR_BF_OFF ( 5)
#define SBB_STAT1_DMA_RD_ERR_BF_WID ( 1)
#define SBB_STAT1_DMA_RD_ERR_BF_MSK (0x00000020)
#define SBB_STAT1_DMA_RD_ERR_BF_DEF (0x00000000)

///< Invalid instruction
#define SBB_STAT1_INVALID_INSTR_BF_OFF ( 6)
#define SBB_STAT1_INVALID_INSTR_BF_WID ( 1)
#define SBB_STAT1_INVALID_INSTR_BF_MSK (0x00000040)
#define SBB_STAT1_INVALID_INSTR_BF_DEF (0x00000000)

///< Enable FIPS self-test
#define SBB_STAT1_EN_FIPS_TEST_BF_OFF ( 7)
#define SBB_STAT1_EN_FIPS_TEST_BF_WID ( 1)
#define SBB_STAT1_EN_FIPS_TEST_BF_MSK (0x00000080)
#define SBB_STAT1_EN_FIPS_TEST_BF_DEF (0x00000000)

///< Memory zeroization completed
#define SBB_STAT1_MEMORY_CLRED_BF_OFF ( 8)
#define SBB_STAT1_MEMORY_CLRED_BF_WID ( 1)
#define SBB_STAT1_MEMORY_CLRED_BF_MSK (0x00000100)
#define SBB_STAT1_MEMORY_CLRED_BF_DEF (0x00000000)

///< Constant sent to fuse controler
#define SBB_STAT1_TRNG_TIMOUT_BF_OFF ( 9)
#define SBB_STAT1_TRNG_TIMOUT_BF_WID ( 1)
#define SBB_STAT1_TRNG_TIMOUT_BF_MSK (0x00000200)
#define SBB_STAT1_TRNG_TIMOUT_BF_DEF (0x00000000)

///< Using debug secrets
#define SBB_STAT1_USE_DBG_SECRETS_BF_OFF (10)
#define SBB_STAT1_USE_DBG_SECRETS_BF_WID ( 1)
#define SBB_STAT1_USE_DBG_SECRETS_BF_MSK (0x00000400)
#define SBB_STAT1_USE_DBG_SECRETS_BF_DEF (0x00000000)

///< Module is working in post-zeroization mode
#define SBB_STAT1_MODULE_ZEROIZED_BF_OFF (11)
#define SBB_STAT1_MODULE_ZEROIZED_BF_WID ( 1)
#define SBB_STAT1_MODULE_ZEROIZED_BF_MSK (0x00000800)
#define SBB_STAT1_MODULE_ZEROIZED_BF_DEF (0x00000000)

///< AES DPA FI error status
#define SBB_STAT1_AES_DPA_FI_ERR_BF_OFF (12)
#define SBB_STAT1_AES_DPA_FI_ERR_BF_WID ( 2)
#define SBB_STAT1_AES_DPA_FI_ERR_BF_MSK (0x00003000)
#define SBB_STAT1_AES_DPA_FI_ERR_BF_DEF (0x00000000)

///< RESERVED
#define SBB_STAT1_RESERVED3_BF_OFF (14)
#define SBB_STAT1_RESERVED3_BF_WID ( 2)
#define SBB_STAT1_RESERVED3_BF_MSK (0x0000C000)
#define SBB_STAT1_RESERVED3_BF_DEF (0x00000000)

///< TRNG Alarm  FAILED_TEST_ID[3:0]
#define SBB_STAT1_TRNG_ALARM_FIELD_BF_OFF (16)
#define SBB_STAT1_TRNG_ALARM_FIELD_BF_WID ( 4)
#define SBB_STAT1_TRNG_ALARM_FIELD_BF_MSK (0x000F0000)
#define SBB_STAT1_TRNG_ALARM_FIELD_BF_DEF (0x00000000)

///< TRNG Alarm  failed_seed_st_ht, illegal_cmd_seq
#define SBB_STAT1_TRNG_ALARM_ST_BF_OFF (20)
#define SBB_STAT1_TRNG_ALARM_ST_BF_WID ( 2)
#define SBB_STAT1_TRNG_ALARM_ST_BF_MSK (0x00300000)
#define SBB_STAT1_TRNG_ALARM_ST_BF_DEF (0x00000000)

///< TRNG TRNG FIFO empty
#define SBB_STAT1_TRNG_FIFO_EMPTY_BF_OFF (22)
#define SBB_STAT1_TRNG_FIFO_EMPTY_BF_WID ( 1)
#define SBB_STAT1_TRNG_FIFO_EMPTY_BF_MSK (0x00400000)
#define SBB_STAT1_TRNG_FIFO_EMPTY_BF_DEF (0x00000000)

///< TRNG entropy collection mode
#define SBB_STAT1_TRNG_TEST_MODE_BF_OFF (23)
#define SBB_STAT1_TRNG_TEST_MODE_BF_WID ( 1)
#define SBB_STAT1_TRNG_TEST_MODE_BF_MSK (0x00800000)
#define SBB_STAT1_TRNG_TEST_MODE_BF_DEF (0x00000000)

///< TRNG status
#define SBB_STAT1_TRNG_STAT_BF_OFF (24)
#define SBB_STAT1_TRNG_STAT_BF_WID ( 8)
#define SBB_STAT1_TRNG_STAT_BF_MSK (0xFF000000)
#define SBB_STAT1_TRNG_STAT_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_DEBUG0_REG register description at address offset 0x818
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/debug0_reg
  * Debug Register 0
  */

typedef union {
  struct {
    uint32_t KAKPUB_USED : 8;
    ///< Index of last used KAKpub
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SBKEK_USED : 4;
    ///< Index of last used SBKEK
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} sbb_dbg0_reg_t;

#define SBB_DBG0_DEFAULT (0x00000000U)
#define SBB_DBG0_RD_MASK (0x00000fffU)
#define SBB_DBG0_WR_MASK (0x00000000U)


///< Index of last used KAKpub
#define SBB_DBG0_KAKPUB_USED_BF_OFF ( 0)
#define SBB_DBG0_KAKPUB_USED_BF_WID ( 8)
#define SBB_DBG0_KAKPUB_USED_BF_MSK (0x000000FF)
#define SBB_DBG0_KAKPUB_USED_BF_DEF (0x00000000)

///< Index of last used SBKEK
#define SBB_DBG0_SBKEK_USED_BF_OFF ( 8)
#define SBB_DBG0_SBKEK_USED_BF_WID ( 4)
#define SBB_DBG0_SBKEK_USED_BF_MSK (0x00000F00)
#define SBB_DBG0_SBKEK_USED_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_DEBUG1_REG register description at address offset 0x81c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/debug1_reg
  * Debug Register 1
  */

typedef union {
  struct {
    uint32_t SBB_STAGE : 16;
    ///< SBB execution stage
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SBB_STAGE_INFO : 16;
    ///< SBB execution stage info
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_dbg1_reg_t;

#define SBB_DBG1_DEFAULT (0x00000000U)
#define SBB_DBG1_RD_MASK (0xffffffffU)
#define SBB_DBG1_WR_MASK (0x00000000U)


///< SBB execution stage
#define SBB_DBG1_SBB_STAGE_BF_OFF ( 0)
#define SBB_DBG1_SBB_STAGE_BF_WID (16)
#define SBB_DBG1_SBB_STAGE_BF_MSK (0x0000FFFF)
#define SBB_DBG1_SBB_STAGE_BF_DEF (0x00000000)

///< SBB execution stage info
#define SBB_DBG1_SBB_STAGE_INFO_BF_OFF (16)
#define SBB_DBG1_SBB_STAGE_INFO_BF_WID (16)
#define SBB_DBG1_SBB_STAGE_INFO_BF_MSK (0xFFFF0000)
#define SBB_DBG1_SBB_STAGE_INFO_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VENDOR0_REG register description at address offset 0x820
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/vendor0_reg
  * Vendor Info Register
  */

typedef union {
  struct {
    uint32_t ID : 32;
    ///< Vendor ID
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_vendor0_reg_t;

#define SBB_VENDOR0_DEFAULT (0x00000000U)
#define SBB_VENDOR0_RD_MASK (0xffffffffU)
#define SBB_VENDOR0_WR_MASK (0x00000000U)


///< Vendor ID
#define SBB_VENDOR0_ID_BF_OFF ( 0)
#define SBB_VENDOR0_ID_BF_WID (32)
#define SBB_VENDOR0_ID_BF_MSK (0xFFFFFFFF)
#define SBB_VENDOR0_ID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VENDOR1_REG register description at address offset 0x824
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/vendor1_reg
  * Vendor Info Register
  */

typedef union {
  struct {
    uint32_t ID : 32;
    ///< Vendor ID
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_vendor1_reg_t;

#define SBB_VENDOR1_DEFAULT (0x00000000U)
#define SBB_VENDOR1_RD_MASK (0xffffffffU)
#define SBB_VENDOR1_WR_MASK (0x00000000U)


///< Vendor ID
#define SBB_VENDOR1_ID_BF_OFF ( 0)
#define SBB_VENDOR1_ID_BF_WID (32)
#define SBB_VENDOR1_ID_BF_MSK (0xFFFFFFFF)
#define SBB_VENDOR1_ID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_RESULT0_REG register description at address offset 0x828
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/result0_reg
  * Result Register
  */

typedef union {
  struct {
    uint32_t RESULT_INFO : 32;
    ///< Function return information
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_rslt0_reg_t;

#define SBB_RSLT0_DEFAULT (0x00000000U)
#define SBB_RSLT0_RD_MASK (0xffffffffU)
#define SBB_RSLT0_WR_MASK (0x00000000U)


///< Function return information
#define SBB_RSLT0_RSLT_INFO_BF_OFF ( 0)
#define SBB_RSLT0_RSLT_INFO_BF_WID (32)
#define SBB_RSLT0_RSLT_INFO_BF_MSK (0xFFFFFFFF)
#define SBB_RSLT0_RSLT_INFO_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_RESULT1_REG register description at address offset 0x82c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/result1_reg
  * Result Register
  */

typedef union {
  struct {
    uint32_t RESULT_INFO : 32;
    ///< Function return information
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_rslt1_reg_t;

#define SBB_RSLT1_DEFAULT (0x00000000U)
#define SBB_RSLT1_RD_MASK (0xffffffffU)
#define SBB_RSLT1_WR_MASK (0x00000000U)


///< Function return information
#define SBB_RSLT1_RSLT_INFO_BF_OFF ( 0)
#define SBB_RSLT1_RSLT_INFO_BF_WID (32)
#define SBB_RSLT1_RSLT_INFO_BF_MSK (0xFFFFFFFF)
#define SBB_RSLT1_RSLT_INFO_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEAS_ACTRL_VERIF_REG register description at address offset 0x830
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/meas_actrl_verif_reg
  * Measurement Access Control Register
  */

typedef union {
  struct {
    uint32_t ACTRL : 16;
    ///< Semaphore value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} sbb_meas_actrl_verif_reg_t;

#define SBB_MEAS_ACTRL_VERIF_DEFAULT (0x00000000U)
#define SBB_MEAS_ACTRL_VERIF_RD_MASK (0x0000ffffU)
#define SBB_MEAS_ACTRL_VERIF_WR_MASK (0x00000000U)


///< Semaphore value
#define SBB_MEAS_ACTRL_VERIF_ACTRL_BF_OFF ( 0)
#define SBB_MEAS_ACTRL_VERIF_ACTRL_BF_WID (16)
#define SBB_MEAS_ACTRL_VERIF_ACTRL_BF_MSK (0x0000FFFF)
#define SBB_MEAS_ACTRL_VERIF_ACTRL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEAS_ACTRL_SBB_REG register description at address offset 0x834
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/meas_actrl_sbb_reg
  * Measurement Access Control Register
  */

typedef union {
  struct {
    uint32_t ACTRL : 16;
    ///< Semaphore value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} sbb_meas_actrl_sbb_reg_t;

#define SBB_MEAS_ACTRL_SBB_DEFAULT (0x00000000U)
#define SBB_MEAS_ACTRL_SBB_RD_MASK (0x0000ffffU)
#define SBB_MEAS_ACTRL_SBB_WR_MASK (0x00000000U)


///< Semaphore value
#define SBB_MEAS_ACTRL_SBB_ACTRL_BF_OFF ( 0)
#define SBB_MEAS_ACTRL_SBB_ACTRL_BF_WID (16)
#define SBB_MEAS_ACTRL_SBB_ACTRL_BF_MSK (0x0000FFFF)
#define SBB_MEAS_ACTRL_SBB_ACTRL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEAS_ACTRL_EXT_REG register description at address offset 0x838
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/meas_actrl_ext_reg
  * Measurement Access Control Register
  */

typedef union {
  struct {
    uint32_t ACTRL : 16;
    ///< Semaphore value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} sbb_meas_actrl_ext_reg_t;

#define SBB_MEAS_ACTRL_EXT_DEFAULT (0x00000000U)
#define SBB_MEAS_ACTRL_EXT_RD_MASK (0x0000ffffU)
#define SBB_MEAS_ACTRL_EXT_WR_MASK (0x00000000U)


///< Semaphore value
#define SBB_MEAS_ACTRL_EXT_ACTRL_BF_OFF ( 0)
#define SBB_MEAS_ACTRL_EXT_ACTRL_BF_WID (16)
#define SBB_MEAS_ACTRL_EXT_ACTRL_BF_MSK (0x0000FFFF)
#define SBB_MEAS_ACTRL_EXT_ACTRL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEAS_ACTRL_CLEAR_REG register description at address offset 0x83c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/meas_actrl_clear_reg
  * Measurement Access Control Register
  */

typedef union {
  struct {
    uint32_t ACTRL : 16;
    ///< Semaphore value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} sbb_meas_actrl_clr_reg_t;

#define SBB_MEAS_ACTRL_CLR_DEFAULT (0x00000000U)
#define SBB_MEAS_ACTRL_CLR_RD_MASK (0x0000ffffU)
#define SBB_MEAS_ACTRL_CLR_WR_MASK (0x00000000U)


///< Semaphore value
#define SBB_MEAS_ACTRL_CLR_ACTRL_BF_OFF ( 0)
#define SBB_MEAS_ACTRL_CLR_ACTRL_BF_WID (16)
#define SBB_MEAS_ACTRL_CLR_ACTRL_BF_MSK (0x0000FFFF)
#define SBB_MEAS_ACTRL_CLR_ACTRL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_UNIQUE_ID0_REG register description at address offset 0x840
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/unique_id0_reg
  * Register containing SOC unique ID
  */

typedef union {
  struct {
    uint32_t ID : 32;
    ///< Unique ID
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_unique_id0_reg_t;

#define SBB_UNIQUE_ID0_DEFAULT (0x00000000U)
#define SBB_UNIQUE_ID0_RD_MASK (0xffffffffU)
#define SBB_UNIQUE_ID0_WR_MASK (0x00000000U)


///< Unique ID
#define SBB_UNIQUE_ID0_ID_BF_OFF ( 0)
#define SBB_UNIQUE_ID0_ID_BF_WID (32)
#define SBB_UNIQUE_ID0_ID_BF_MSK (0xFFFFFFFF)
#define SBB_UNIQUE_ID0_ID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_UNIQUE_ID1_REG register description at address offset 0x844
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/unique_id1_reg
  * Register containing SOC unique ID
  */

typedef union {
  struct {
    uint32_t ID : 32;
    ///< Unique ID
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_unique_id1_reg_t;

#define SBB_UNIQUE_ID1_DEFAULT (0x00000000U)
#define SBB_UNIQUE_ID1_RD_MASK (0xffffffffU)
#define SBB_UNIQUE_ID1_WR_MASK (0x00000000U)


///< Unique ID
#define SBB_UNIQUE_ID1_ID_BF_OFF ( 0)
#define SBB_UNIQUE_ID1_ID_BF_WID (32)
#define SBB_UNIQUE_ID1_ID_BF_MSK (0xFFFFFFFF)
#define SBB_UNIQUE_ID1_ID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_HW_VERSION0_REG register description at address offset 0x848
  *
  * Register default value:        0x00050001
  * Register full path in IP: sbb_component/sbb_regs/hw_version0_reg
  * Register containing SBB RTL version number
  */

typedef union {
  struct {
    uint32_t MINOR : 16;
    ///< Minor
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x1"
    uint32_t MAJOR : 16;
    ///< Major
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x5"
  } ;
  uint32_t value;
} sbb_hw_ver0_reg_t;

#define SBB_HW_VER0_DEFAULT (0x00050001U)
#define SBB_HW_VER0_RD_MASK (0xffffffffU)
#define SBB_HW_VER0_WR_MASK (0x00000000U)


///< Minor
#define SBB_HW_VER0_MINOR_BF_OFF ( 0)
#define SBB_HW_VER0_MINOR_BF_WID (16)
#define SBB_HW_VER0_MINOR_BF_MSK (0x0000FFFF)
#define SBB_HW_VER0_MINOR_BF_DEF (0x00000001)

///< Major
#define SBB_HW_VER0_MAJOR_BF_OFF (16)
#define SBB_HW_VER0_MAJOR_BF_WID (16)
#define SBB_HW_VER0_MAJOR_BF_MSK (0xFFFF0000)
#define SBB_HW_VER0_MAJOR_BF_DEF (0x00050000)


/** @brief SBB_COMPONENT_SBB_REGS_HW_VERSION1_REG register description at address offset 0x84c
  *
  * Register default value:        0x0000000A
  * Register full path in IP: sbb_component/sbb_regs/hw_version1_reg
  * Register containing SBB RTL version number
  */

typedef union {
  struct {
    uint32_t PATCH : 32;
    ///< Patch
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0xA"
  } ;
  uint32_t value;
} sbb_hw_ver1_reg_t;

#define SBB_HW_VER1_DEFAULT (0x0000000aU)
#define SBB_HW_VER1_RD_MASK (0xffffffffU)
#define SBB_HW_VER1_WR_MASK (0x00000000U)


///< Patch
#define SBB_HW_VER1_PATCH_BF_OFF ( 0)
#define SBB_HW_VER1_PATCH_BF_WID (32)
#define SBB_HW_VER1_PATCH_BF_MSK (0xFFFFFFFF)
#define SBB_HW_VER1_PATCH_BF_DEF (0x0000000A)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H0_REG register description at address offset 0x880
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h0_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h0_reg_t;

#define SBB_MEAS_H0_DEFAULT (0x00000000U)
#define SBB_MEAS_H0_RD_MASK (0xffffffffU)
#define SBB_MEAS_H0_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H0_VAL_BF_OFF ( 0)
#define SBB_MEAS_H0_VAL_BF_WID (32)
#define SBB_MEAS_H0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L0_REG register description at address offset 0x884
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l0_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l0_reg_t;

#define SBB_MEAS_L0_DEFAULT (0x00000000U)
#define SBB_MEAS_L0_RD_MASK (0xffffffffU)
#define SBB_MEAS_L0_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L0_VAL_BF_OFF ( 0)
#define SBB_MEAS_L0_VAL_BF_WID (32)
#define SBB_MEAS_L0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H1_REG register description at address offset 0x888
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h1_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h1_reg_t;

#define SBB_MEAS_H1_DEFAULT (0x00000000U)
#define SBB_MEAS_H1_RD_MASK (0xffffffffU)
#define SBB_MEAS_H1_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H1_VAL_BF_OFF ( 0)
#define SBB_MEAS_H1_VAL_BF_WID (32)
#define SBB_MEAS_H1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L1_REG register description at address offset 0x88c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l1_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l1_reg_t;

#define SBB_MEAS_L1_DEFAULT (0x00000000U)
#define SBB_MEAS_L1_RD_MASK (0xffffffffU)
#define SBB_MEAS_L1_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L1_VAL_BF_OFF ( 0)
#define SBB_MEAS_L1_VAL_BF_WID (32)
#define SBB_MEAS_L1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H2_REG register description at address offset 0x890
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h2_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h2_reg_t;

#define SBB_MEAS_H2_DEFAULT (0x00000000U)
#define SBB_MEAS_H2_RD_MASK (0xffffffffU)
#define SBB_MEAS_H2_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H2_VAL_BF_OFF ( 0)
#define SBB_MEAS_H2_VAL_BF_WID (32)
#define SBB_MEAS_H2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L2_REG register description at address offset 0x894
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l2_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l2_reg_t;

#define SBB_MEAS_L2_DEFAULT (0x00000000U)
#define SBB_MEAS_L2_RD_MASK (0xffffffffU)
#define SBB_MEAS_L2_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L2_VAL_BF_OFF ( 0)
#define SBB_MEAS_L2_VAL_BF_WID (32)
#define SBB_MEAS_L2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H3_REG register description at address offset 0x898
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h3_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h3_reg_t;

#define SBB_MEAS_H3_DEFAULT (0x00000000U)
#define SBB_MEAS_H3_RD_MASK (0xffffffffU)
#define SBB_MEAS_H3_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H3_VAL_BF_OFF ( 0)
#define SBB_MEAS_H3_VAL_BF_WID (32)
#define SBB_MEAS_H3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L3_REG register description at address offset 0x89c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l3_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l3_reg_t;

#define SBB_MEAS_L3_DEFAULT (0x00000000U)
#define SBB_MEAS_L3_RD_MASK (0xffffffffU)
#define SBB_MEAS_L3_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L3_VAL_BF_OFF ( 0)
#define SBB_MEAS_L3_VAL_BF_WID (32)
#define SBB_MEAS_L3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H4_REG register description at address offset 0x8a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h4_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h4_reg_t;

#define SBB_MEAS_H4_DEFAULT (0x00000000U)
#define SBB_MEAS_H4_RD_MASK (0xffffffffU)
#define SBB_MEAS_H4_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H4_VAL_BF_OFF ( 0)
#define SBB_MEAS_H4_VAL_BF_WID (32)
#define SBB_MEAS_H4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L4_REG register description at address offset 0x8a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l4_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l4_reg_t;

#define SBB_MEAS_L4_DEFAULT (0x00000000U)
#define SBB_MEAS_L4_RD_MASK (0xffffffffU)
#define SBB_MEAS_L4_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L4_VAL_BF_OFF ( 0)
#define SBB_MEAS_L4_VAL_BF_WID (32)
#define SBB_MEAS_L4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H5_REG register description at address offset 0x8a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h5_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h5_reg_t;

#define SBB_MEAS_H5_DEFAULT (0x00000000U)
#define SBB_MEAS_H5_RD_MASK (0xffffffffU)
#define SBB_MEAS_H5_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H5_VAL_BF_OFF ( 0)
#define SBB_MEAS_H5_VAL_BF_WID (32)
#define SBB_MEAS_H5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L5_REG register description at address offset 0x8ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l5_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l5_reg_t;

#define SBB_MEAS_L5_DEFAULT (0x00000000U)
#define SBB_MEAS_L5_RD_MASK (0xffffffffU)
#define SBB_MEAS_L5_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L5_VAL_BF_OFF ( 0)
#define SBB_MEAS_L5_VAL_BF_WID (32)
#define SBB_MEAS_L5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H6_REG register description at address offset 0x8b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h6_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h6_reg_t;

#define SBB_MEAS_H6_DEFAULT (0x00000000U)
#define SBB_MEAS_H6_RD_MASK (0xffffffffU)
#define SBB_MEAS_H6_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H6_VAL_BF_OFF ( 0)
#define SBB_MEAS_H6_VAL_BF_WID (32)
#define SBB_MEAS_H6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L6_REG register description at address offset 0x8b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l6_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l6_reg_t;

#define SBB_MEAS_L6_DEFAULT (0x00000000U)
#define SBB_MEAS_L6_RD_MASK (0xffffffffU)
#define SBB_MEAS_L6_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L6_VAL_BF_OFF ( 0)
#define SBB_MEAS_L6_VAL_BF_WID (32)
#define SBB_MEAS_L6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H7_REG register description at address offset 0x8b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h7_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h7_reg_t;

#define SBB_MEAS_H7_DEFAULT (0x00000000U)
#define SBB_MEAS_H7_RD_MASK (0xffffffffU)
#define SBB_MEAS_H7_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H7_VAL_BF_OFF ( 0)
#define SBB_MEAS_H7_VAL_BF_WID (32)
#define SBB_MEAS_H7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L7_REG register description at address offset 0x8bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l7_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l7_reg_t;

#define SBB_MEAS_L7_DEFAULT (0x00000000U)
#define SBB_MEAS_L7_RD_MASK (0xffffffffU)
#define SBB_MEAS_L7_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L7_VAL_BF_OFF ( 0)
#define SBB_MEAS_L7_VAL_BF_WID (32)
#define SBB_MEAS_L7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H8_REG register description at address offset 0x8c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h8_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h8_reg_t;

#define SBB_MEAS_H8_DEFAULT (0x00000000U)
#define SBB_MEAS_H8_RD_MASK (0xffffffffU)
#define SBB_MEAS_H8_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H8_VAL_BF_OFF ( 0)
#define SBB_MEAS_H8_VAL_BF_WID (32)
#define SBB_MEAS_H8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L8_REG register description at address offset 0x8c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l8_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l8_reg_t;

#define SBB_MEAS_L8_DEFAULT (0x00000000U)
#define SBB_MEAS_L8_RD_MASK (0xffffffffU)
#define SBB_MEAS_L8_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L8_VAL_BF_OFF ( 0)
#define SBB_MEAS_L8_VAL_BF_WID (32)
#define SBB_MEAS_L8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H9_REG register description at address offset 0x8c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h9_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h9_reg_t;

#define SBB_MEAS_H9_DEFAULT (0x00000000U)
#define SBB_MEAS_H9_RD_MASK (0xffffffffU)
#define SBB_MEAS_H9_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H9_VAL_BF_OFF ( 0)
#define SBB_MEAS_H9_VAL_BF_WID (32)
#define SBB_MEAS_H9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L9_REG register description at address offset 0x8cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l9_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l9_reg_t;

#define SBB_MEAS_L9_DEFAULT (0x00000000U)
#define SBB_MEAS_L9_RD_MASK (0xffffffffU)
#define SBB_MEAS_L9_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L9_VAL_BF_OFF ( 0)
#define SBB_MEAS_L9_VAL_BF_WID (32)
#define SBB_MEAS_L9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H10_REG register description at address offset 0x8d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h10_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h10_reg_t;

#define SBB_MEAS_H10_DEFAULT (0x00000000U)
#define SBB_MEAS_H10_RD_MASK (0xffffffffU)
#define SBB_MEAS_H10_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H10_VAL_BF_OFF ( 0)
#define SBB_MEAS_H10_VAL_BF_WID (32)
#define SBB_MEAS_H10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L10_REG register description at address offset 0x8d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l10_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l10_reg_t;

#define SBB_MEAS_L10_DEFAULT (0x00000000U)
#define SBB_MEAS_L10_RD_MASK (0xffffffffU)
#define SBB_MEAS_L10_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L10_VAL_BF_OFF ( 0)
#define SBB_MEAS_L10_VAL_BF_WID (32)
#define SBB_MEAS_L10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H11_REG register description at address offset 0x8d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h11_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h11_reg_t;

#define SBB_MEAS_H11_DEFAULT (0x00000000U)
#define SBB_MEAS_H11_RD_MASK (0xffffffffU)
#define SBB_MEAS_H11_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H11_VAL_BF_OFF ( 0)
#define SBB_MEAS_H11_VAL_BF_WID (32)
#define SBB_MEAS_H11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L11_REG register description at address offset 0x8dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l11_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l11_reg_t;

#define SBB_MEAS_L11_DEFAULT (0x00000000U)
#define SBB_MEAS_L11_RD_MASK (0xffffffffU)
#define SBB_MEAS_L11_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L11_VAL_BF_OFF ( 0)
#define SBB_MEAS_L11_VAL_BF_WID (32)
#define SBB_MEAS_L11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H12_REG register description at address offset 0x8e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h12_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h12_reg_t;

#define SBB_MEAS_H12_DEFAULT (0x00000000U)
#define SBB_MEAS_H12_RD_MASK (0xffffffffU)
#define SBB_MEAS_H12_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H12_VAL_BF_OFF ( 0)
#define SBB_MEAS_H12_VAL_BF_WID (32)
#define SBB_MEAS_H12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L12_REG register description at address offset 0x8e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l12_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l12_reg_t;

#define SBB_MEAS_L12_DEFAULT (0x00000000U)
#define SBB_MEAS_L12_RD_MASK (0xffffffffU)
#define SBB_MEAS_L12_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L12_VAL_BF_OFF ( 0)
#define SBB_MEAS_L12_VAL_BF_WID (32)
#define SBB_MEAS_L12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H13_REG register description at address offset 0x8e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h13_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h13_reg_t;

#define SBB_MEAS_H13_DEFAULT (0x00000000U)
#define SBB_MEAS_H13_RD_MASK (0xffffffffU)
#define SBB_MEAS_H13_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H13_VAL_BF_OFF ( 0)
#define SBB_MEAS_H13_VAL_BF_WID (32)
#define SBB_MEAS_H13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L13_REG register description at address offset 0x8ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l13_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l13_reg_t;

#define SBB_MEAS_L13_DEFAULT (0x00000000U)
#define SBB_MEAS_L13_RD_MASK (0xffffffffU)
#define SBB_MEAS_L13_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L13_VAL_BF_OFF ( 0)
#define SBB_MEAS_L13_VAL_BF_WID (32)
#define SBB_MEAS_L13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H14_REG register description at address offset 0x8f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h14_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h14_reg_t;

#define SBB_MEAS_H14_DEFAULT (0x00000000U)
#define SBB_MEAS_H14_RD_MASK (0xffffffffU)
#define SBB_MEAS_H14_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H14_VAL_BF_OFF ( 0)
#define SBB_MEAS_H14_VAL_BF_WID (32)
#define SBB_MEAS_H14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L14_REG register description at address offset 0x8f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l14_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l14_reg_t;

#define SBB_MEAS_L14_DEFAULT (0x00000000U)
#define SBB_MEAS_L14_RD_MASK (0xffffffffU)
#define SBB_MEAS_L14_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L14_VAL_BF_OFF ( 0)
#define SBB_MEAS_L14_VAL_BF_WID (32)
#define SBB_MEAS_L14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H15_REG register description at address offset 0x8f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h15_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h15_reg_t;

#define SBB_MEAS_H15_DEFAULT (0x00000000U)
#define SBB_MEAS_H15_RD_MASK (0xffffffffU)
#define SBB_MEAS_H15_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H15_VAL_BF_OFF ( 0)
#define SBB_MEAS_H15_VAL_BF_WID (32)
#define SBB_MEAS_H15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L15_REG register description at address offset 0x8fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l15_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l15_reg_t;

#define SBB_MEAS_L15_DEFAULT (0x00000000U)
#define SBB_MEAS_L15_RD_MASK (0xffffffffU)
#define SBB_MEAS_L15_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L15_VAL_BF_OFF ( 0)
#define SBB_MEAS_L15_VAL_BF_WID (32)
#define SBB_MEAS_L15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H16_REG register description at address offset 0x900
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h16_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h16_reg_t;

#define SBB_MEAS_H16_DEFAULT (0x00000000U)
#define SBB_MEAS_H16_RD_MASK (0xffffffffU)
#define SBB_MEAS_H16_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H16_VAL_BF_OFF ( 0)
#define SBB_MEAS_H16_VAL_BF_WID (32)
#define SBB_MEAS_H16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L16_REG register description at address offset 0x904
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l16_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l16_reg_t;

#define SBB_MEAS_L16_DEFAULT (0x00000000U)
#define SBB_MEAS_L16_RD_MASK (0xffffffffU)
#define SBB_MEAS_L16_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L16_VAL_BF_OFF ( 0)
#define SBB_MEAS_L16_VAL_BF_WID (32)
#define SBB_MEAS_L16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H17_REG register description at address offset 0x908
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h17_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h17_reg_t;

#define SBB_MEAS_H17_DEFAULT (0x00000000U)
#define SBB_MEAS_H17_RD_MASK (0xffffffffU)
#define SBB_MEAS_H17_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H17_VAL_BF_OFF ( 0)
#define SBB_MEAS_H17_VAL_BF_WID (32)
#define SBB_MEAS_H17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L17_REG register description at address offset 0x90c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l17_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l17_reg_t;

#define SBB_MEAS_L17_DEFAULT (0x00000000U)
#define SBB_MEAS_L17_RD_MASK (0xffffffffU)
#define SBB_MEAS_L17_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L17_VAL_BF_OFF ( 0)
#define SBB_MEAS_L17_VAL_BF_WID (32)
#define SBB_MEAS_L17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H18_REG register description at address offset 0x910
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h18_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h18_reg_t;

#define SBB_MEAS_H18_DEFAULT (0x00000000U)
#define SBB_MEAS_H18_RD_MASK (0xffffffffU)
#define SBB_MEAS_H18_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H18_VAL_BF_OFF ( 0)
#define SBB_MEAS_H18_VAL_BF_WID (32)
#define SBB_MEAS_H18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L18_REG register description at address offset 0x914
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l18_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l18_reg_t;

#define SBB_MEAS_L18_DEFAULT (0x00000000U)
#define SBB_MEAS_L18_RD_MASK (0xffffffffU)
#define SBB_MEAS_L18_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L18_VAL_BF_OFF ( 0)
#define SBB_MEAS_L18_VAL_BF_WID (32)
#define SBB_MEAS_L18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H19_REG register description at address offset 0x918
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h19_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h19_reg_t;

#define SBB_MEAS_H19_DEFAULT (0x00000000U)
#define SBB_MEAS_H19_RD_MASK (0xffffffffU)
#define SBB_MEAS_H19_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H19_VAL_BF_OFF ( 0)
#define SBB_MEAS_H19_VAL_BF_WID (32)
#define SBB_MEAS_H19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L19_REG register description at address offset 0x91c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l19_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l19_reg_t;

#define SBB_MEAS_L19_DEFAULT (0x00000000U)
#define SBB_MEAS_L19_RD_MASK (0xffffffffU)
#define SBB_MEAS_L19_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L19_VAL_BF_OFF ( 0)
#define SBB_MEAS_L19_VAL_BF_WID (32)
#define SBB_MEAS_L19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H20_REG register description at address offset 0x920
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h20_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h20_reg_t;

#define SBB_MEAS_H20_DEFAULT (0x00000000U)
#define SBB_MEAS_H20_RD_MASK (0xffffffffU)
#define SBB_MEAS_H20_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H20_VAL_BF_OFF ( 0)
#define SBB_MEAS_H20_VAL_BF_WID (32)
#define SBB_MEAS_H20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L20_REG register description at address offset 0x924
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l20_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l20_reg_t;

#define SBB_MEAS_L20_DEFAULT (0x00000000U)
#define SBB_MEAS_L20_RD_MASK (0xffffffffU)
#define SBB_MEAS_L20_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L20_VAL_BF_OFF ( 0)
#define SBB_MEAS_L20_VAL_BF_WID (32)
#define SBB_MEAS_L20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H21_REG register description at address offset 0x928
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h21_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h21_reg_t;

#define SBB_MEAS_H21_DEFAULT (0x00000000U)
#define SBB_MEAS_H21_RD_MASK (0xffffffffU)
#define SBB_MEAS_H21_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H21_VAL_BF_OFF ( 0)
#define SBB_MEAS_H21_VAL_BF_WID (32)
#define SBB_MEAS_H21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L21_REG register description at address offset 0x92c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l21_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l21_reg_t;

#define SBB_MEAS_L21_DEFAULT (0x00000000U)
#define SBB_MEAS_L21_RD_MASK (0xffffffffU)
#define SBB_MEAS_L21_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L21_VAL_BF_OFF ( 0)
#define SBB_MEAS_L21_VAL_BF_WID (32)
#define SBB_MEAS_L21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H22_REG register description at address offset 0x930
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h22_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h22_reg_t;

#define SBB_MEAS_H22_DEFAULT (0x00000000U)
#define SBB_MEAS_H22_RD_MASK (0xffffffffU)
#define SBB_MEAS_H22_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H22_VAL_BF_OFF ( 0)
#define SBB_MEAS_H22_VAL_BF_WID (32)
#define SBB_MEAS_H22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L22_REG register description at address offset 0x934
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l22_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l22_reg_t;

#define SBB_MEAS_L22_DEFAULT (0x00000000U)
#define SBB_MEAS_L22_RD_MASK (0xffffffffU)
#define SBB_MEAS_L22_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L22_VAL_BF_OFF ( 0)
#define SBB_MEAS_L22_VAL_BF_WID (32)
#define SBB_MEAS_L22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H23_REG register description at address offset 0x938
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h23_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h23_reg_t;

#define SBB_MEAS_H23_DEFAULT (0x00000000U)
#define SBB_MEAS_H23_RD_MASK (0xffffffffU)
#define SBB_MEAS_H23_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H23_VAL_BF_OFF ( 0)
#define SBB_MEAS_H23_VAL_BF_WID (32)
#define SBB_MEAS_H23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L23_REG register description at address offset 0x93c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l23_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l23_reg_t;

#define SBB_MEAS_L23_DEFAULT (0x00000000U)
#define SBB_MEAS_L23_RD_MASK (0xffffffffU)
#define SBB_MEAS_L23_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L23_VAL_BF_OFF ( 0)
#define SBB_MEAS_L23_VAL_BF_WID (32)
#define SBB_MEAS_L23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H24_REG register description at address offset 0x940
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h24_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h24_reg_t;

#define SBB_MEAS_H24_DEFAULT (0x00000000U)
#define SBB_MEAS_H24_RD_MASK (0xffffffffU)
#define SBB_MEAS_H24_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H24_VAL_BF_OFF ( 0)
#define SBB_MEAS_H24_VAL_BF_WID (32)
#define SBB_MEAS_H24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L24_REG register description at address offset 0x944
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l24_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l24_reg_t;

#define SBB_MEAS_L24_DEFAULT (0x00000000U)
#define SBB_MEAS_L24_RD_MASK (0xffffffffU)
#define SBB_MEAS_L24_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L24_VAL_BF_OFF ( 0)
#define SBB_MEAS_L24_VAL_BF_WID (32)
#define SBB_MEAS_L24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H25_REG register description at address offset 0x948
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h25_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h25_reg_t;

#define SBB_MEAS_H25_DEFAULT (0x00000000U)
#define SBB_MEAS_H25_RD_MASK (0xffffffffU)
#define SBB_MEAS_H25_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H25_VAL_BF_OFF ( 0)
#define SBB_MEAS_H25_VAL_BF_WID (32)
#define SBB_MEAS_H25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L25_REG register description at address offset 0x94c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l25_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l25_reg_t;

#define SBB_MEAS_L25_DEFAULT (0x00000000U)
#define SBB_MEAS_L25_RD_MASK (0xffffffffU)
#define SBB_MEAS_L25_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L25_VAL_BF_OFF ( 0)
#define SBB_MEAS_L25_VAL_BF_WID (32)
#define SBB_MEAS_L25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H26_REG register description at address offset 0x950
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h26_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h26_reg_t;

#define SBB_MEAS_H26_DEFAULT (0x00000000U)
#define SBB_MEAS_H26_RD_MASK (0xffffffffU)
#define SBB_MEAS_H26_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H26_VAL_BF_OFF ( 0)
#define SBB_MEAS_H26_VAL_BF_WID (32)
#define SBB_MEAS_H26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L26_REG register description at address offset 0x954
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l26_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l26_reg_t;

#define SBB_MEAS_L26_DEFAULT (0x00000000U)
#define SBB_MEAS_L26_RD_MASK (0xffffffffU)
#define SBB_MEAS_L26_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L26_VAL_BF_OFF ( 0)
#define SBB_MEAS_L26_VAL_BF_WID (32)
#define SBB_MEAS_L26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H27_REG register description at address offset 0x958
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h27_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h27_reg_t;

#define SBB_MEAS_H27_DEFAULT (0x00000000U)
#define SBB_MEAS_H27_RD_MASK (0xffffffffU)
#define SBB_MEAS_H27_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H27_VAL_BF_OFF ( 0)
#define SBB_MEAS_H27_VAL_BF_WID (32)
#define SBB_MEAS_H27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L27_REG register description at address offset 0x95c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l27_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l27_reg_t;

#define SBB_MEAS_L27_DEFAULT (0x00000000U)
#define SBB_MEAS_L27_RD_MASK (0xffffffffU)
#define SBB_MEAS_L27_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L27_VAL_BF_OFF ( 0)
#define SBB_MEAS_L27_VAL_BF_WID (32)
#define SBB_MEAS_L27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H28_REG register description at address offset 0x960
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h28_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h28_reg_t;

#define SBB_MEAS_H28_DEFAULT (0x00000000U)
#define SBB_MEAS_H28_RD_MASK (0xffffffffU)
#define SBB_MEAS_H28_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H28_VAL_BF_OFF ( 0)
#define SBB_MEAS_H28_VAL_BF_WID (32)
#define SBB_MEAS_H28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L28_REG register description at address offset 0x964
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l28_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l28_reg_t;

#define SBB_MEAS_L28_DEFAULT (0x00000000U)
#define SBB_MEAS_L28_RD_MASK (0xffffffffU)
#define SBB_MEAS_L28_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L28_VAL_BF_OFF ( 0)
#define SBB_MEAS_L28_VAL_BF_WID (32)
#define SBB_MEAS_L28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H29_REG register description at address offset 0x968
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h29_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h29_reg_t;

#define SBB_MEAS_H29_DEFAULT (0x00000000U)
#define SBB_MEAS_H29_RD_MASK (0xffffffffU)
#define SBB_MEAS_H29_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H29_VAL_BF_OFF ( 0)
#define SBB_MEAS_H29_VAL_BF_WID (32)
#define SBB_MEAS_H29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L29_REG register description at address offset 0x96c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l29_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l29_reg_t;

#define SBB_MEAS_L29_DEFAULT (0x00000000U)
#define SBB_MEAS_L29_RD_MASK (0xffffffffU)
#define SBB_MEAS_L29_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L29_VAL_BF_OFF ( 0)
#define SBB_MEAS_L29_VAL_BF_WID (32)
#define SBB_MEAS_L29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H30_REG register description at address offset 0x970
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h30_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h30_reg_t;

#define SBB_MEAS_H30_DEFAULT (0x00000000U)
#define SBB_MEAS_H30_RD_MASK (0xffffffffU)
#define SBB_MEAS_H30_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H30_VAL_BF_OFF ( 0)
#define SBB_MEAS_H30_VAL_BF_WID (32)
#define SBB_MEAS_H30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L30_REG register description at address offset 0x974
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l30_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l30_reg_t;

#define SBB_MEAS_L30_DEFAULT (0x00000000U)
#define SBB_MEAS_L30_RD_MASK (0xffffffffU)
#define SBB_MEAS_L30_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L30_VAL_BF_OFF ( 0)
#define SBB_MEAS_L30_VAL_BF_WID (32)
#define SBB_MEAS_L30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H31_REG register description at address offset 0x978
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h31_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h31_reg_t;

#define SBB_MEAS_H31_DEFAULT (0x00000000U)
#define SBB_MEAS_H31_RD_MASK (0xffffffffU)
#define SBB_MEAS_H31_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H31_VAL_BF_OFF ( 0)
#define SBB_MEAS_H31_VAL_BF_WID (32)
#define SBB_MEAS_H31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L31_REG register description at address offset 0x97c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l31_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l31_reg_t;

#define SBB_MEAS_L31_DEFAULT (0x00000000U)
#define SBB_MEAS_L31_RD_MASK (0xffffffffU)
#define SBB_MEAS_L31_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L31_VAL_BF_OFF ( 0)
#define SBB_MEAS_L31_VAL_BF_WID (32)
#define SBB_MEAS_L31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H32_REG register description at address offset 0x980
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h32_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h32_reg_t;

#define SBB_MEAS_H32_DEFAULT (0x00000000U)
#define SBB_MEAS_H32_RD_MASK (0xffffffffU)
#define SBB_MEAS_H32_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H32_VAL_BF_OFF ( 0)
#define SBB_MEAS_H32_VAL_BF_WID (32)
#define SBB_MEAS_H32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L32_REG register description at address offset 0x984
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l32_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l32_reg_t;

#define SBB_MEAS_L32_DEFAULT (0x00000000U)
#define SBB_MEAS_L32_RD_MASK (0xffffffffU)
#define SBB_MEAS_L32_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L32_VAL_BF_OFF ( 0)
#define SBB_MEAS_L32_VAL_BF_WID (32)
#define SBB_MEAS_L32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H33_REG register description at address offset 0x988
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h33_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h33_reg_t;

#define SBB_MEAS_H33_DEFAULT (0x00000000U)
#define SBB_MEAS_H33_RD_MASK (0xffffffffU)
#define SBB_MEAS_H33_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H33_VAL_BF_OFF ( 0)
#define SBB_MEAS_H33_VAL_BF_WID (32)
#define SBB_MEAS_H33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L33_REG register description at address offset 0x98c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l33_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l33_reg_t;

#define SBB_MEAS_L33_DEFAULT (0x00000000U)
#define SBB_MEAS_L33_RD_MASK (0xffffffffU)
#define SBB_MEAS_L33_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L33_VAL_BF_OFF ( 0)
#define SBB_MEAS_L33_VAL_BF_WID (32)
#define SBB_MEAS_L33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H34_REG register description at address offset 0x990
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h34_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h34_reg_t;

#define SBB_MEAS_H34_DEFAULT (0x00000000U)
#define SBB_MEAS_H34_RD_MASK (0xffffffffU)
#define SBB_MEAS_H34_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H34_VAL_BF_OFF ( 0)
#define SBB_MEAS_H34_VAL_BF_WID (32)
#define SBB_MEAS_H34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L34_REG register description at address offset 0x994
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l34_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l34_reg_t;

#define SBB_MEAS_L34_DEFAULT (0x00000000U)
#define SBB_MEAS_L34_RD_MASK (0xffffffffU)
#define SBB_MEAS_L34_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L34_VAL_BF_OFF ( 0)
#define SBB_MEAS_L34_VAL_BF_WID (32)
#define SBB_MEAS_L34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H35_REG register description at address offset 0x998
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h35_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h35_reg_t;

#define SBB_MEAS_H35_DEFAULT (0x00000000U)
#define SBB_MEAS_H35_RD_MASK (0xffffffffU)
#define SBB_MEAS_H35_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H35_VAL_BF_OFF ( 0)
#define SBB_MEAS_H35_VAL_BF_WID (32)
#define SBB_MEAS_H35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L35_REG register description at address offset 0x99c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l35_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l35_reg_t;

#define SBB_MEAS_L35_DEFAULT (0x00000000U)
#define SBB_MEAS_L35_RD_MASK (0xffffffffU)
#define SBB_MEAS_L35_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L35_VAL_BF_OFF ( 0)
#define SBB_MEAS_L35_VAL_BF_WID (32)
#define SBB_MEAS_L35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H36_REG register description at address offset 0x9a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h36_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h36_reg_t;

#define SBB_MEAS_H36_DEFAULT (0x00000000U)
#define SBB_MEAS_H36_RD_MASK (0xffffffffU)
#define SBB_MEAS_H36_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H36_VAL_BF_OFF ( 0)
#define SBB_MEAS_H36_VAL_BF_WID (32)
#define SBB_MEAS_H36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L36_REG register description at address offset 0x9a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l36_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l36_reg_t;

#define SBB_MEAS_L36_DEFAULT (0x00000000U)
#define SBB_MEAS_L36_RD_MASK (0xffffffffU)
#define SBB_MEAS_L36_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L36_VAL_BF_OFF ( 0)
#define SBB_MEAS_L36_VAL_BF_WID (32)
#define SBB_MEAS_L36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H37_REG register description at address offset 0x9a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h37_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h37_reg_t;

#define SBB_MEAS_H37_DEFAULT (0x00000000U)
#define SBB_MEAS_H37_RD_MASK (0xffffffffU)
#define SBB_MEAS_H37_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H37_VAL_BF_OFF ( 0)
#define SBB_MEAS_H37_VAL_BF_WID (32)
#define SBB_MEAS_H37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L37_REG register description at address offset 0x9ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l37_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l37_reg_t;

#define SBB_MEAS_L37_DEFAULT (0x00000000U)
#define SBB_MEAS_L37_RD_MASK (0xffffffffU)
#define SBB_MEAS_L37_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L37_VAL_BF_OFF ( 0)
#define SBB_MEAS_L37_VAL_BF_WID (32)
#define SBB_MEAS_L37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H38_REG register description at address offset 0x9b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h38_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h38_reg_t;

#define SBB_MEAS_H38_DEFAULT (0x00000000U)
#define SBB_MEAS_H38_RD_MASK (0xffffffffU)
#define SBB_MEAS_H38_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H38_VAL_BF_OFF ( 0)
#define SBB_MEAS_H38_VAL_BF_WID (32)
#define SBB_MEAS_H38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L38_REG register description at address offset 0x9b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l38_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l38_reg_t;

#define SBB_MEAS_L38_DEFAULT (0x00000000U)
#define SBB_MEAS_L38_RD_MASK (0xffffffffU)
#define SBB_MEAS_L38_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L38_VAL_BF_OFF ( 0)
#define SBB_MEAS_L38_VAL_BF_WID (32)
#define SBB_MEAS_L38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H39_REG register description at address offset 0x9b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h39_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h39_reg_t;

#define SBB_MEAS_H39_DEFAULT (0x00000000U)
#define SBB_MEAS_H39_RD_MASK (0xffffffffU)
#define SBB_MEAS_H39_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H39_VAL_BF_OFF ( 0)
#define SBB_MEAS_H39_VAL_BF_WID (32)
#define SBB_MEAS_H39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L39_REG register description at address offset 0x9bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l39_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l39_reg_t;

#define SBB_MEAS_L39_DEFAULT (0x00000000U)
#define SBB_MEAS_L39_RD_MASK (0xffffffffU)
#define SBB_MEAS_L39_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L39_VAL_BF_OFF ( 0)
#define SBB_MEAS_L39_VAL_BF_WID (32)
#define SBB_MEAS_L39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H40_REG register description at address offset 0x9c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h40_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h40_reg_t;

#define SBB_MEAS_H40_DEFAULT (0x00000000U)
#define SBB_MEAS_H40_RD_MASK (0xffffffffU)
#define SBB_MEAS_H40_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H40_VAL_BF_OFF ( 0)
#define SBB_MEAS_H40_VAL_BF_WID (32)
#define SBB_MEAS_H40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L40_REG register description at address offset 0x9c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l40_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l40_reg_t;

#define SBB_MEAS_L40_DEFAULT (0x00000000U)
#define SBB_MEAS_L40_RD_MASK (0xffffffffU)
#define SBB_MEAS_L40_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L40_VAL_BF_OFF ( 0)
#define SBB_MEAS_L40_VAL_BF_WID (32)
#define SBB_MEAS_L40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H41_REG register description at address offset 0x9c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h41_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h41_reg_t;

#define SBB_MEAS_H41_DEFAULT (0x00000000U)
#define SBB_MEAS_H41_RD_MASK (0xffffffffU)
#define SBB_MEAS_H41_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H41_VAL_BF_OFF ( 0)
#define SBB_MEAS_H41_VAL_BF_WID (32)
#define SBB_MEAS_H41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L41_REG register description at address offset 0x9cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l41_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l41_reg_t;

#define SBB_MEAS_L41_DEFAULT (0x00000000U)
#define SBB_MEAS_L41_RD_MASK (0xffffffffU)
#define SBB_MEAS_L41_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L41_VAL_BF_OFF ( 0)
#define SBB_MEAS_L41_VAL_BF_WID (32)
#define SBB_MEAS_L41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H42_REG register description at address offset 0x9d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h42_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h42_reg_t;

#define SBB_MEAS_H42_DEFAULT (0x00000000U)
#define SBB_MEAS_H42_RD_MASK (0xffffffffU)
#define SBB_MEAS_H42_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H42_VAL_BF_OFF ( 0)
#define SBB_MEAS_H42_VAL_BF_WID (32)
#define SBB_MEAS_H42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L42_REG register description at address offset 0x9d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l42_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l42_reg_t;

#define SBB_MEAS_L42_DEFAULT (0x00000000U)
#define SBB_MEAS_L42_RD_MASK (0xffffffffU)
#define SBB_MEAS_L42_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L42_VAL_BF_OFF ( 0)
#define SBB_MEAS_L42_VAL_BF_WID (32)
#define SBB_MEAS_L42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H43_REG register description at address offset 0x9d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h43_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h43_reg_t;

#define SBB_MEAS_H43_DEFAULT (0x00000000U)
#define SBB_MEAS_H43_RD_MASK (0xffffffffU)
#define SBB_MEAS_H43_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H43_VAL_BF_OFF ( 0)
#define SBB_MEAS_H43_VAL_BF_WID (32)
#define SBB_MEAS_H43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L43_REG register description at address offset 0x9dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l43_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l43_reg_t;

#define SBB_MEAS_L43_DEFAULT (0x00000000U)
#define SBB_MEAS_L43_RD_MASK (0xffffffffU)
#define SBB_MEAS_L43_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L43_VAL_BF_OFF ( 0)
#define SBB_MEAS_L43_VAL_BF_WID (32)
#define SBB_MEAS_L43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H44_REG register description at address offset 0x9e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h44_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h44_reg_t;

#define SBB_MEAS_H44_DEFAULT (0x00000000U)
#define SBB_MEAS_H44_RD_MASK (0xffffffffU)
#define SBB_MEAS_H44_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H44_VAL_BF_OFF ( 0)
#define SBB_MEAS_H44_VAL_BF_WID (32)
#define SBB_MEAS_H44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L44_REG register description at address offset 0x9e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l44_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l44_reg_t;

#define SBB_MEAS_L44_DEFAULT (0x00000000U)
#define SBB_MEAS_L44_RD_MASK (0xffffffffU)
#define SBB_MEAS_L44_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L44_VAL_BF_OFF ( 0)
#define SBB_MEAS_L44_VAL_BF_WID (32)
#define SBB_MEAS_L44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H45_REG register description at address offset 0x9e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h45_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h45_reg_t;

#define SBB_MEAS_H45_DEFAULT (0x00000000U)
#define SBB_MEAS_H45_RD_MASK (0xffffffffU)
#define SBB_MEAS_H45_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H45_VAL_BF_OFF ( 0)
#define SBB_MEAS_H45_VAL_BF_WID (32)
#define SBB_MEAS_H45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L45_REG register description at address offset 0x9ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l45_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l45_reg_t;

#define SBB_MEAS_L45_DEFAULT (0x00000000U)
#define SBB_MEAS_L45_RD_MASK (0xffffffffU)
#define SBB_MEAS_L45_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L45_VAL_BF_OFF ( 0)
#define SBB_MEAS_L45_VAL_BF_WID (32)
#define SBB_MEAS_L45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H46_REG register description at address offset 0x9f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h46_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h46_reg_t;

#define SBB_MEAS_H46_DEFAULT (0x00000000U)
#define SBB_MEAS_H46_RD_MASK (0xffffffffU)
#define SBB_MEAS_H46_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H46_VAL_BF_OFF ( 0)
#define SBB_MEAS_H46_VAL_BF_WID (32)
#define SBB_MEAS_H46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L46_REG register description at address offset 0x9f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l46_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l46_reg_t;

#define SBB_MEAS_L46_DEFAULT (0x00000000U)
#define SBB_MEAS_L46_RD_MASK (0xffffffffU)
#define SBB_MEAS_L46_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L46_VAL_BF_OFF ( 0)
#define SBB_MEAS_L46_VAL_BF_WID (32)
#define SBB_MEAS_L46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H47_REG register description at address offset 0x9f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h47_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h47_reg_t;

#define SBB_MEAS_H47_DEFAULT (0x00000000U)
#define SBB_MEAS_H47_RD_MASK (0xffffffffU)
#define SBB_MEAS_H47_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H47_VAL_BF_OFF ( 0)
#define SBB_MEAS_H47_VAL_BF_WID (32)
#define SBB_MEAS_H47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L47_REG register description at address offset 0x9fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l47_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l47_reg_t;

#define SBB_MEAS_L47_DEFAULT (0x00000000U)
#define SBB_MEAS_L47_RD_MASK (0xffffffffU)
#define SBB_MEAS_L47_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L47_VAL_BF_OFF ( 0)
#define SBB_MEAS_L47_VAL_BF_WID (32)
#define SBB_MEAS_L47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H48_REG register description at address offset 0xa00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h48_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h48_reg_t;

#define SBB_MEAS_H48_DEFAULT (0x00000000U)
#define SBB_MEAS_H48_RD_MASK (0xffffffffU)
#define SBB_MEAS_H48_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H48_VAL_BF_OFF ( 0)
#define SBB_MEAS_H48_VAL_BF_WID (32)
#define SBB_MEAS_H48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L48_REG register description at address offset 0xa04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l48_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l48_reg_t;

#define SBB_MEAS_L48_DEFAULT (0x00000000U)
#define SBB_MEAS_L48_RD_MASK (0xffffffffU)
#define SBB_MEAS_L48_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L48_VAL_BF_OFF ( 0)
#define SBB_MEAS_L48_VAL_BF_WID (32)
#define SBB_MEAS_L48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H49_REG register description at address offset 0xa08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h49_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h49_reg_t;

#define SBB_MEAS_H49_DEFAULT (0x00000000U)
#define SBB_MEAS_H49_RD_MASK (0xffffffffU)
#define SBB_MEAS_H49_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H49_VAL_BF_OFF ( 0)
#define SBB_MEAS_H49_VAL_BF_WID (32)
#define SBB_MEAS_H49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L49_REG register description at address offset 0xa0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l49_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l49_reg_t;

#define SBB_MEAS_L49_DEFAULT (0x00000000U)
#define SBB_MEAS_L49_RD_MASK (0xffffffffU)
#define SBB_MEAS_L49_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L49_VAL_BF_OFF ( 0)
#define SBB_MEAS_L49_VAL_BF_WID (32)
#define SBB_MEAS_L49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H50_REG register description at address offset 0xa10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h50_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h50_reg_t;

#define SBB_MEAS_H50_DEFAULT (0x00000000U)
#define SBB_MEAS_H50_RD_MASK (0xffffffffU)
#define SBB_MEAS_H50_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H50_VAL_BF_OFF ( 0)
#define SBB_MEAS_H50_VAL_BF_WID (32)
#define SBB_MEAS_H50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L50_REG register description at address offset 0xa14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l50_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l50_reg_t;

#define SBB_MEAS_L50_DEFAULT (0x00000000U)
#define SBB_MEAS_L50_RD_MASK (0xffffffffU)
#define SBB_MEAS_L50_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L50_VAL_BF_OFF ( 0)
#define SBB_MEAS_L50_VAL_BF_WID (32)
#define SBB_MEAS_L50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H51_REG register description at address offset 0xa18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h51_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h51_reg_t;

#define SBB_MEAS_H51_DEFAULT (0x00000000U)
#define SBB_MEAS_H51_RD_MASK (0xffffffffU)
#define SBB_MEAS_H51_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H51_VAL_BF_OFF ( 0)
#define SBB_MEAS_H51_VAL_BF_WID (32)
#define SBB_MEAS_H51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L51_REG register description at address offset 0xa1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l51_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l51_reg_t;

#define SBB_MEAS_L51_DEFAULT (0x00000000U)
#define SBB_MEAS_L51_RD_MASK (0xffffffffU)
#define SBB_MEAS_L51_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L51_VAL_BF_OFF ( 0)
#define SBB_MEAS_L51_VAL_BF_WID (32)
#define SBB_MEAS_L51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H52_REG register description at address offset 0xa20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h52_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h52_reg_t;

#define SBB_MEAS_H52_DEFAULT (0x00000000U)
#define SBB_MEAS_H52_RD_MASK (0xffffffffU)
#define SBB_MEAS_H52_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H52_VAL_BF_OFF ( 0)
#define SBB_MEAS_H52_VAL_BF_WID (32)
#define SBB_MEAS_H52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L52_REG register description at address offset 0xa24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l52_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l52_reg_t;

#define SBB_MEAS_L52_DEFAULT (0x00000000U)
#define SBB_MEAS_L52_RD_MASK (0xffffffffU)
#define SBB_MEAS_L52_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L52_VAL_BF_OFF ( 0)
#define SBB_MEAS_L52_VAL_BF_WID (32)
#define SBB_MEAS_L52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H53_REG register description at address offset 0xa28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h53_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h53_reg_t;

#define SBB_MEAS_H53_DEFAULT (0x00000000U)
#define SBB_MEAS_H53_RD_MASK (0xffffffffU)
#define SBB_MEAS_H53_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H53_VAL_BF_OFF ( 0)
#define SBB_MEAS_H53_VAL_BF_WID (32)
#define SBB_MEAS_H53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L53_REG register description at address offset 0xa2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l53_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l53_reg_t;

#define SBB_MEAS_L53_DEFAULT (0x00000000U)
#define SBB_MEAS_L53_RD_MASK (0xffffffffU)
#define SBB_MEAS_L53_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L53_VAL_BF_OFF ( 0)
#define SBB_MEAS_L53_VAL_BF_WID (32)
#define SBB_MEAS_L53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H54_REG register description at address offset 0xa30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h54_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h54_reg_t;

#define SBB_MEAS_H54_DEFAULT (0x00000000U)
#define SBB_MEAS_H54_RD_MASK (0xffffffffU)
#define SBB_MEAS_H54_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H54_VAL_BF_OFF ( 0)
#define SBB_MEAS_H54_VAL_BF_WID (32)
#define SBB_MEAS_H54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L54_REG register description at address offset 0xa34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l54_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l54_reg_t;

#define SBB_MEAS_L54_DEFAULT (0x00000000U)
#define SBB_MEAS_L54_RD_MASK (0xffffffffU)
#define SBB_MEAS_L54_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L54_VAL_BF_OFF ( 0)
#define SBB_MEAS_L54_VAL_BF_WID (32)
#define SBB_MEAS_L54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H55_REG register description at address offset 0xa38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h55_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h55_reg_t;

#define SBB_MEAS_H55_DEFAULT (0x00000000U)
#define SBB_MEAS_H55_RD_MASK (0xffffffffU)
#define SBB_MEAS_H55_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H55_VAL_BF_OFF ( 0)
#define SBB_MEAS_H55_VAL_BF_WID (32)
#define SBB_MEAS_H55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L55_REG register description at address offset 0xa3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l55_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l55_reg_t;

#define SBB_MEAS_L55_DEFAULT (0x00000000U)
#define SBB_MEAS_L55_RD_MASK (0xffffffffU)
#define SBB_MEAS_L55_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L55_VAL_BF_OFF ( 0)
#define SBB_MEAS_L55_VAL_BF_WID (32)
#define SBB_MEAS_L55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H56_REG register description at address offset 0xa40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h56_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h56_reg_t;

#define SBB_MEAS_H56_DEFAULT (0x00000000U)
#define SBB_MEAS_H56_RD_MASK (0xffffffffU)
#define SBB_MEAS_H56_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H56_VAL_BF_OFF ( 0)
#define SBB_MEAS_H56_VAL_BF_WID (32)
#define SBB_MEAS_H56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L56_REG register description at address offset 0xa44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l56_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l56_reg_t;

#define SBB_MEAS_L56_DEFAULT (0x00000000U)
#define SBB_MEAS_L56_RD_MASK (0xffffffffU)
#define SBB_MEAS_L56_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L56_VAL_BF_OFF ( 0)
#define SBB_MEAS_L56_VAL_BF_WID (32)
#define SBB_MEAS_L56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H57_REG register description at address offset 0xa48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h57_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h57_reg_t;

#define SBB_MEAS_H57_DEFAULT (0x00000000U)
#define SBB_MEAS_H57_RD_MASK (0xffffffffU)
#define SBB_MEAS_H57_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H57_VAL_BF_OFF ( 0)
#define SBB_MEAS_H57_VAL_BF_WID (32)
#define SBB_MEAS_H57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L57_REG register description at address offset 0xa4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l57_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l57_reg_t;

#define SBB_MEAS_L57_DEFAULT (0x00000000U)
#define SBB_MEAS_L57_RD_MASK (0xffffffffU)
#define SBB_MEAS_L57_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L57_VAL_BF_OFF ( 0)
#define SBB_MEAS_L57_VAL_BF_WID (32)
#define SBB_MEAS_L57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H58_REG register description at address offset 0xa50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h58_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h58_reg_t;

#define SBB_MEAS_H58_DEFAULT (0x00000000U)
#define SBB_MEAS_H58_RD_MASK (0xffffffffU)
#define SBB_MEAS_H58_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H58_VAL_BF_OFF ( 0)
#define SBB_MEAS_H58_VAL_BF_WID (32)
#define SBB_MEAS_H58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L58_REG register description at address offset 0xa54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l58_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l58_reg_t;

#define SBB_MEAS_L58_DEFAULT (0x00000000U)
#define SBB_MEAS_L58_RD_MASK (0xffffffffU)
#define SBB_MEAS_L58_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L58_VAL_BF_OFF ( 0)
#define SBB_MEAS_L58_VAL_BF_WID (32)
#define SBB_MEAS_L58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H59_REG register description at address offset 0xa58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h59_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h59_reg_t;

#define SBB_MEAS_H59_DEFAULT (0x00000000U)
#define SBB_MEAS_H59_RD_MASK (0xffffffffU)
#define SBB_MEAS_H59_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H59_VAL_BF_OFF ( 0)
#define SBB_MEAS_H59_VAL_BF_WID (32)
#define SBB_MEAS_H59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L59_REG register description at address offset 0xa5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l59_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l59_reg_t;

#define SBB_MEAS_L59_DEFAULT (0x00000000U)
#define SBB_MEAS_L59_RD_MASK (0xffffffffU)
#define SBB_MEAS_L59_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L59_VAL_BF_OFF ( 0)
#define SBB_MEAS_L59_VAL_BF_WID (32)
#define SBB_MEAS_L59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H60_REG register description at address offset 0xa60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h60_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h60_reg_t;

#define SBB_MEAS_H60_DEFAULT (0x00000000U)
#define SBB_MEAS_H60_RD_MASK (0xffffffffU)
#define SBB_MEAS_H60_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H60_VAL_BF_OFF ( 0)
#define SBB_MEAS_H60_VAL_BF_WID (32)
#define SBB_MEAS_H60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L60_REG register description at address offset 0xa64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l60_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l60_reg_t;

#define SBB_MEAS_L60_DEFAULT (0x00000000U)
#define SBB_MEAS_L60_RD_MASK (0xffffffffU)
#define SBB_MEAS_L60_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L60_VAL_BF_OFF ( 0)
#define SBB_MEAS_L60_VAL_BF_WID (32)
#define SBB_MEAS_L60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H61_REG register description at address offset 0xa68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h61_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h61_reg_t;

#define SBB_MEAS_H61_DEFAULT (0x00000000U)
#define SBB_MEAS_H61_RD_MASK (0xffffffffU)
#define SBB_MEAS_H61_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H61_VAL_BF_OFF ( 0)
#define SBB_MEAS_H61_VAL_BF_WID (32)
#define SBB_MEAS_H61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L61_REG register description at address offset 0xa6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l61_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l61_reg_t;

#define SBB_MEAS_L61_DEFAULT (0x00000000U)
#define SBB_MEAS_L61_RD_MASK (0xffffffffU)
#define SBB_MEAS_L61_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L61_VAL_BF_OFF ( 0)
#define SBB_MEAS_L61_VAL_BF_WID (32)
#define SBB_MEAS_L61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H62_REG register description at address offset 0xa70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h62_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h62_reg_t;

#define SBB_MEAS_H62_DEFAULT (0x00000000U)
#define SBB_MEAS_H62_RD_MASK (0xffffffffU)
#define SBB_MEAS_H62_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H62_VAL_BF_OFF ( 0)
#define SBB_MEAS_H62_VAL_BF_WID (32)
#define SBB_MEAS_H62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L62_REG register description at address offset 0xa74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l62_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l62_reg_t;

#define SBB_MEAS_L62_DEFAULT (0x00000000U)
#define SBB_MEAS_L62_RD_MASK (0xffffffffU)
#define SBB_MEAS_L62_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L62_VAL_BF_OFF ( 0)
#define SBB_MEAS_L62_VAL_BF_WID (32)
#define SBB_MEAS_L62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H63_REG register description at address offset 0xa78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h63_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h63_reg_t;

#define SBB_MEAS_H63_DEFAULT (0x00000000U)
#define SBB_MEAS_H63_RD_MASK (0xffffffffU)
#define SBB_MEAS_H63_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H63_VAL_BF_OFF ( 0)
#define SBB_MEAS_H63_VAL_BF_WID (32)
#define SBB_MEAS_H63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L63_REG register description at address offset 0xa7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l63_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l63_reg_t;

#define SBB_MEAS_L63_DEFAULT (0x00000000U)
#define SBB_MEAS_L63_RD_MASK (0xffffffffU)
#define SBB_MEAS_L63_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L63_VAL_BF_OFF ( 0)
#define SBB_MEAS_L63_VAL_BF_WID (32)
#define SBB_MEAS_L63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H64_REG register description at address offset 0xa80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h64_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h64_reg_t;

#define SBB_MEAS_H64_DEFAULT (0x00000000U)
#define SBB_MEAS_H64_RD_MASK (0xffffffffU)
#define SBB_MEAS_H64_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H64_VAL_BF_OFF ( 0)
#define SBB_MEAS_H64_VAL_BF_WID (32)
#define SBB_MEAS_H64_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H64_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L64_REG register description at address offset 0xa84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l64_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l64_reg_t;

#define SBB_MEAS_L64_DEFAULT (0x00000000U)
#define SBB_MEAS_L64_RD_MASK (0xffffffffU)
#define SBB_MEAS_L64_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L64_VAL_BF_OFF ( 0)
#define SBB_MEAS_L64_VAL_BF_WID (32)
#define SBB_MEAS_L64_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L64_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H65_REG register description at address offset 0xa88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h65_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h65_reg_t;

#define SBB_MEAS_H65_DEFAULT (0x00000000U)
#define SBB_MEAS_H65_RD_MASK (0xffffffffU)
#define SBB_MEAS_H65_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H65_VAL_BF_OFF ( 0)
#define SBB_MEAS_H65_VAL_BF_WID (32)
#define SBB_MEAS_H65_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H65_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L65_REG register description at address offset 0xa8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l65_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l65_reg_t;

#define SBB_MEAS_L65_DEFAULT (0x00000000U)
#define SBB_MEAS_L65_RD_MASK (0xffffffffU)
#define SBB_MEAS_L65_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L65_VAL_BF_OFF ( 0)
#define SBB_MEAS_L65_VAL_BF_WID (32)
#define SBB_MEAS_L65_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L65_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H66_REG register description at address offset 0xa90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h66_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h66_reg_t;

#define SBB_MEAS_H66_DEFAULT (0x00000000U)
#define SBB_MEAS_H66_RD_MASK (0xffffffffU)
#define SBB_MEAS_H66_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H66_VAL_BF_OFF ( 0)
#define SBB_MEAS_H66_VAL_BF_WID (32)
#define SBB_MEAS_H66_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H66_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L66_REG register description at address offset 0xa94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l66_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l66_reg_t;

#define SBB_MEAS_L66_DEFAULT (0x00000000U)
#define SBB_MEAS_L66_RD_MASK (0xffffffffU)
#define SBB_MEAS_L66_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L66_VAL_BF_OFF ( 0)
#define SBB_MEAS_L66_VAL_BF_WID (32)
#define SBB_MEAS_L66_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L66_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H67_REG register description at address offset 0xa98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h67_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h67_reg_t;

#define SBB_MEAS_H67_DEFAULT (0x00000000U)
#define SBB_MEAS_H67_RD_MASK (0xffffffffU)
#define SBB_MEAS_H67_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H67_VAL_BF_OFF ( 0)
#define SBB_MEAS_H67_VAL_BF_WID (32)
#define SBB_MEAS_H67_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H67_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L67_REG register description at address offset 0xa9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l67_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l67_reg_t;

#define SBB_MEAS_L67_DEFAULT (0x00000000U)
#define SBB_MEAS_L67_RD_MASK (0xffffffffU)
#define SBB_MEAS_L67_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L67_VAL_BF_OFF ( 0)
#define SBB_MEAS_L67_VAL_BF_WID (32)
#define SBB_MEAS_L67_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L67_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H68_REG register description at address offset 0xaa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h68_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h68_reg_t;

#define SBB_MEAS_H68_DEFAULT (0x00000000U)
#define SBB_MEAS_H68_RD_MASK (0xffffffffU)
#define SBB_MEAS_H68_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H68_VAL_BF_OFF ( 0)
#define SBB_MEAS_H68_VAL_BF_WID (32)
#define SBB_MEAS_H68_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H68_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L68_REG register description at address offset 0xaa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l68_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l68_reg_t;

#define SBB_MEAS_L68_DEFAULT (0x00000000U)
#define SBB_MEAS_L68_RD_MASK (0xffffffffU)
#define SBB_MEAS_L68_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L68_VAL_BF_OFF ( 0)
#define SBB_MEAS_L68_VAL_BF_WID (32)
#define SBB_MEAS_L68_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L68_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H69_REG register description at address offset 0xaa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h69_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h69_reg_t;

#define SBB_MEAS_H69_DEFAULT (0x00000000U)
#define SBB_MEAS_H69_RD_MASK (0xffffffffU)
#define SBB_MEAS_H69_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H69_VAL_BF_OFF ( 0)
#define SBB_MEAS_H69_VAL_BF_WID (32)
#define SBB_MEAS_H69_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H69_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L69_REG register description at address offset 0xaac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l69_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l69_reg_t;

#define SBB_MEAS_L69_DEFAULT (0x00000000U)
#define SBB_MEAS_L69_RD_MASK (0xffffffffU)
#define SBB_MEAS_L69_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L69_VAL_BF_OFF ( 0)
#define SBB_MEAS_L69_VAL_BF_WID (32)
#define SBB_MEAS_L69_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L69_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H70_REG register description at address offset 0xab0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h70_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h70_reg_t;

#define SBB_MEAS_H70_DEFAULT (0x00000000U)
#define SBB_MEAS_H70_RD_MASK (0xffffffffU)
#define SBB_MEAS_H70_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H70_VAL_BF_OFF ( 0)
#define SBB_MEAS_H70_VAL_BF_WID (32)
#define SBB_MEAS_H70_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H70_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L70_REG register description at address offset 0xab4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l70_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l70_reg_t;

#define SBB_MEAS_L70_DEFAULT (0x00000000U)
#define SBB_MEAS_L70_RD_MASK (0xffffffffU)
#define SBB_MEAS_L70_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L70_VAL_BF_OFF ( 0)
#define SBB_MEAS_L70_VAL_BF_WID (32)
#define SBB_MEAS_L70_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L70_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H71_REG register description at address offset 0xab8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h71_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h71_reg_t;

#define SBB_MEAS_H71_DEFAULT (0x00000000U)
#define SBB_MEAS_H71_RD_MASK (0xffffffffU)
#define SBB_MEAS_H71_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H71_VAL_BF_OFF ( 0)
#define SBB_MEAS_H71_VAL_BF_WID (32)
#define SBB_MEAS_H71_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H71_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L71_REG register description at address offset 0xabc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l71_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l71_reg_t;

#define SBB_MEAS_L71_DEFAULT (0x00000000U)
#define SBB_MEAS_L71_RD_MASK (0xffffffffU)
#define SBB_MEAS_L71_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L71_VAL_BF_OFF ( 0)
#define SBB_MEAS_L71_VAL_BF_WID (32)
#define SBB_MEAS_L71_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L71_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H72_REG register description at address offset 0xac0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h72_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h72_reg_t;

#define SBB_MEAS_H72_DEFAULT (0x00000000U)
#define SBB_MEAS_H72_RD_MASK (0xffffffffU)
#define SBB_MEAS_H72_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H72_VAL_BF_OFF ( 0)
#define SBB_MEAS_H72_VAL_BF_WID (32)
#define SBB_MEAS_H72_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H72_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L72_REG register description at address offset 0xac4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l72_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l72_reg_t;

#define SBB_MEAS_L72_DEFAULT (0x00000000U)
#define SBB_MEAS_L72_RD_MASK (0xffffffffU)
#define SBB_MEAS_L72_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L72_VAL_BF_OFF ( 0)
#define SBB_MEAS_L72_VAL_BF_WID (32)
#define SBB_MEAS_L72_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L72_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H73_REG register description at address offset 0xac8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h73_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h73_reg_t;

#define SBB_MEAS_H73_DEFAULT (0x00000000U)
#define SBB_MEAS_H73_RD_MASK (0xffffffffU)
#define SBB_MEAS_H73_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H73_VAL_BF_OFF ( 0)
#define SBB_MEAS_H73_VAL_BF_WID (32)
#define SBB_MEAS_H73_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H73_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L73_REG register description at address offset 0xacc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l73_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l73_reg_t;

#define SBB_MEAS_L73_DEFAULT (0x00000000U)
#define SBB_MEAS_L73_RD_MASK (0xffffffffU)
#define SBB_MEAS_L73_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L73_VAL_BF_OFF ( 0)
#define SBB_MEAS_L73_VAL_BF_WID (32)
#define SBB_MEAS_L73_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L73_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H74_REG register description at address offset 0xad0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h74_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h74_reg_t;

#define SBB_MEAS_H74_DEFAULT (0x00000000U)
#define SBB_MEAS_H74_RD_MASK (0xffffffffU)
#define SBB_MEAS_H74_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H74_VAL_BF_OFF ( 0)
#define SBB_MEAS_H74_VAL_BF_WID (32)
#define SBB_MEAS_H74_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H74_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L74_REG register description at address offset 0xad4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l74_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l74_reg_t;

#define SBB_MEAS_L74_DEFAULT (0x00000000U)
#define SBB_MEAS_L74_RD_MASK (0xffffffffU)
#define SBB_MEAS_L74_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L74_VAL_BF_OFF ( 0)
#define SBB_MEAS_L74_VAL_BF_WID (32)
#define SBB_MEAS_L74_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L74_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H75_REG register description at address offset 0xad8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h75_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h75_reg_t;

#define SBB_MEAS_H75_DEFAULT (0x00000000U)
#define SBB_MEAS_H75_RD_MASK (0xffffffffU)
#define SBB_MEAS_H75_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H75_VAL_BF_OFF ( 0)
#define SBB_MEAS_H75_VAL_BF_WID (32)
#define SBB_MEAS_H75_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H75_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L75_REG register description at address offset 0xadc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l75_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l75_reg_t;

#define SBB_MEAS_L75_DEFAULT (0x00000000U)
#define SBB_MEAS_L75_RD_MASK (0xffffffffU)
#define SBB_MEAS_L75_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L75_VAL_BF_OFF ( 0)
#define SBB_MEAS_L75_VAL_BF_WID (32)
#define SBB_MEAS_L75_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L75_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H76_REG register description at address offset 0xae0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h76_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h76_reg_t;

#define SBB_MEAS_H76_DEFAULT (0x00000000U)
#define SBB_MEAS_H76_RD_MASK (0xffffffffU)
#define SBB_MEAS_H76_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H76_VAL_BF_OFF ( 0)
#define SBB_MEAS_H76_VAL_BF_WID (32)
#define SBB_MEAS_H76_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H76_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L76_REG register description at address offset 0xae4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l76_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l76_reg_t;

#define SBB_MEAS_L76_DEFAULT (0x00000000U)
#define SBB_MEAS_L76_RD_MASK (0xffffffffU)
#define SBB_MEAS_L76_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L76_VAL_BF_OFF ( 0)
#define SBB_MEAS_L76_VAL_BF_WID (32)
#define SBB_MEAS_L76_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L76_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H77_REG register description at address offset 0xae8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h77_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h77_reg_t;

#define SBB_MEAS_H77_DEFAULT (0x00000000U)
#define SBB_MEAS_H77_RD_MASK (0xffffffffU)
#define SBB_MEAS_H77_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H77_VAL_BF_OFF ( 0)
#define SBB_MEAS_H77_VAL_BF_WID (32)
#define SBB_MEAS_H77_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H77_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L77_REG register description at address offset 0xaec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l77_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l77_reg_t;

#define SBB_MEAS_L77_DEFAULT (0x00000000U)
#define SBB_MEAS_L77_RD_MASK (0xffffffffU)
#define SBB_MEAS_L77_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L77_VAL_BF_OFF ( 0)
#define SBB_MEAS_L77_VAL_BF_WID (32)
#define SBB_MEAS_L77_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L77_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H78_REG register description at address offset 0xaf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h78_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h78_reg_t;

#define SBB_MEAS_H78_DEFAULT (0x00000000U)
#define SBB_MEAS_H78_RD_MASK (0xffffffffU)
#define SBB_MEAS_H78_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H78_VAL_BF_OFF ( 0)
#define SBB_MEAS_H78_VAL_BF_WID (32)
#define SBB_MEAS_H78_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H78_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L78_REG register description at address offset 0xaf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l78_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l78_reg_t;

#define SBB_MEAS_L78_DEFAULT (0x00000000U)
#define SBB_MEAS_L78_RD_MASK (0xffffffffU)
#define SBB_MEAS_L78_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L78_VAL_BF_OFF ( 0)
#define SBB_MEAS_L78_VAL_BF_WID (32)
#define SBB_MEAS_L78_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L78_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H79_REG register description at address offset 0xaf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h79_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h79_reg_t;

#define SBB_MEAS_H79_DEFAULT (0x00000000U)
#define SBB_MEAS_H79_RD_MASK (0xffffffffU)
#define SBB_MEAS_H79_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H79_VAL_BF_OFF ( 0)
#define SBB_MEAS_H79_VAL_BF_WID (32)
#define SBB_MEAS_H79_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H79_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L79_REG register description at address offset 0xafc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l79_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l79_reg_t;

#define SBB_MEAS_L79_DEFAULT (0x00000000U)
#define SBB_MEAS_L79_RD_MASK (0xffffffffU)
#define SBB_MEAS_L79_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L79_VAL_BF_OFF ( 0)
#define SBB_MEAS_L79_VAL_BF_WID (32)
#define SBB_MEAS_L79_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L79_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H80_REG register description at address offset 0xb00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h80_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h80_reg_t;

#define SBB_MEAS_H80_DEFAULT (0x00000000U)
#define SBB_MEAS_H80_RD_MASK (0xffffffffU)
#define SBB_MEAS_H80_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H80_VAL_BF_OFF ( 0)
#define SBB_MEAS_H80_VAL_BF_WID (32)
#define SBB_MEAS_H80_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H80_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L80_REG register description at address offset 0xb04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l80_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l80_reg_t;

#define SBB_MEAS_L80_DEFAULT (0x00000000U)
#define SBB_MEAS_L80_RD_MASK (0xffffffffU)
#define SBB_MEAS_L80_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L80_VAL_BF_OFF ( 0)
#define SBB_MEAS_L80_VAL_BF_WID (32)
#define SBB_MEAS_L80_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L80_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H81_REG register description at address offset 0xb08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h81_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h81_reg_t;

#define SBB_MEAS_H81_DEFAULT (0x00000000U)
#define SBB_MEAS_H81_RD_MASK (0xffffffffU)
#define SBB_MEAS_H81_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H81_VAL_BF_OFF ( 0)
#define SBB_MEAS_H81_VAL_BF_WID (32)
#define SBB_MEAS_H81_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H81_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L81_REG register description at address offset 0xb0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l81_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l81_reg_t;

#define SBB_MEAS_L81_DEFAULT (0x00000000U)
#define SBB_MEAS_L81_RD_MASK (0xffffffffU)
#define SBB_MEAS_L81_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L81_VAL_BF_OFF ( 0)
#define SBB_MEAS_L81_VAL_BF_WID (32)
#define SBB_MEAS_L81_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L81_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H82_REG register description at address offset 0xb10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h82_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h82_reg_t;

#define SBB_MEAS_H82_DEFAULT (0x00000000U)
#define SBB_MEAS_H82_RD_MASK (0xffffffffU)
#define SBB_MEAS_H82_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H82_VAL_BF_OFF ( 0)
#define SBB_MEAS_H82_VAL_BF_WID (32)
#define SBB_MEAS_H82_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H82_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L82_REG register description at address offset 0xb14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l82_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l82_reg_t;

#define SBB_MEAS_L82_DEFAULT (0x00000000U)
#define SBB_MEAS_L82_RD_MASK (0xffffffffU)
#define SBB_MEAS_L82_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L82_VAL_BF_OFF ( 0)
#define SBB_MEAS_L82_VAL_BF_WID (32)
#define SBB_MEAS_L82_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L82_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H83_REG register description at address offset 0xb18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h83_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h83_reg_t;

#define SBB_MEAS_H83_DEFAULT (0x00000000U)
#define SBB_MEAS_H83_RD_MASK (0xffffffffU)
#define SBB_MEAS_H83_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H83_VAL_BF_OFF ( 0)
#define SBB_MEAS_H83_VAL_BF_WID (32)
#define SBB_MEAS_H83_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H83_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L83_REG register description at address offset 0xb1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l83_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l83_reg_t;

#define SBB_MEAS_L83_DEFAULT (0x00000000U)
#define SBB_MEAS_L83_RD_MASK (0xffffffffU)
#define SBB_MEAS_L83_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L83_VAL_BF_OFF ( 0)
#define SBB_MEAS_L83_VAL_BF_WID (32)
#define SBB_MEAS_L83_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L83_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H84_REG register description at address offset 0xb20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h84_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h84_reg_t;

#define SBB_MEAS_H84_DEFAULT (0x00000000U)
#define SBB_MEAS_H84_RD_MASK (0xffffffffU)
#define SBB_MEAS_H84_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H84_VAL_BF_OFF ( 0)
#define SBB_MEAS_H84_VAL_BF_WID (32)
#define SBB_MEAS_H84_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H84_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L84_REG register description at address offset 0xb24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l84_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l84_reg_t;

#define SBB_MEAS_L84_DEFAULT (0x00000000U)
#define SBB_MEAS_L84_RD_MASK (0xffffffffU)
#define SBB_MEAS_L84_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L84_VAL_BF_OFF ( 0)
#define SBB_MEAS_L84_VAL_BF_WID (32)
#define SBB_MEAS_L84_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L84_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H85_REG register description at address offset 0xb28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h85_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h85_reg_t;

#define SBB_MEAS_H85_DEFAULT (0x00000000U)
#define SBB_MEAS_H85_RD_MASK (0xffffffffU)
#define SBB_MEAS_H85_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H85_VAL_BF_OFF ( 0)
#define SBB_MEAS_H85_VAL_BF_WID (32)
#define SBB_MEAS_H85_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H85_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L85_REG register description at address offset 0xb2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l85_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l85_reg_t;

#define SBB_MEAS_L85_DEFAULT (0x00000000U)
#define SBB_MEAS_L85_RD_MASK (0xffffffffU)
#define SBB_MEAS_L85_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L85_VAL_BF_OFF ( 0)
#define SBB_MEAS_L85_VAL_BF_WID (32)
#define SBB_MEAS_L85_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L85_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H86_REG register description at address offset 0xb30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h86_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h86_reg_t;

#define SBB_MEAS_H86_DEFAULT (0x00000000U)
#define SBB_MEAS_H86_RD_MASK (0xffffffffU)
#define SBB_MEAS_H86_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H86_VAL_BF_OFF ( 0)
#define SBB_MEAS_H86_VAL_BF_WID (32)
#define SBB_MEAS_H86_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H86_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L86_REG register description at address offset 0xb34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l86_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l86_reg_t;

#define SBB_MEAS_L86_DEFAULT (0x00000000U)
#define SBB_MEAS_L86_RD_MASK (0xffffffffU)
#define SBB_MEAS_L86_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L86_VAL_BF_OFF ( 0)
#define SBB_MEAS_L86_VAL_BF_WID (32)
#define SBB_MEAS_L86_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L86_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H87_REG register description at address offset 0xb38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h87_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h87_reg_t;

#define SBB_MEAS_H87_DEFAULT (0x00000000U)
#define SBB_MEAS_H87_RD_MASK (0xffffffffU)
#define SBB_MEAS_H87_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H87_VAL_BF_OFF ( 0)
#define SBB_MEAS_H87_VAL_BF_WID (32)
#define SBB_MEAS_H87_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H87_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L87_REG register description at address offset 0xb3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l87_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l87_reg_t;

#define SBB_MEAS_L87_DEFAULT (0x00000000U)
#define SBB_MEAS_L87_RD_MASK (0xffffffffU)
#define SBB_MEAS_L87_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L87_VAL_BF_OFF ( 0)
#define SBB_MEAS_L87_VAL_BF_WID (32)
#define SBB_MEAS_L87_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L87_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H88_REG register description at address offset 0xb40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h88_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h88_reg_t;

#define SBB_MEAS_H88_DEFAULT (0x00000000U)
#define SBB_MEAS_H88_RD_MASK (0xffffffffU)
#define SBB_MEAS_H88_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H88_VAL_BF_OFF ( 0)
#define SBB_MEAS_H88_VAL_BF_WID (32)
#define SBB_MEAS_H88_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H88_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L88_REG register description at address offset 0xb44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l88_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l88_reg_t;

#define SBB_MEAS_L88_DEFAULT (0x00000000U)
#define SBB_MEAS_L88_RD_MASK (0xffffffffU)
#define SBB_MEAS_L88_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L88_VAL_BF_OFF ( 0)
#define SBB_MEAS_L88_VAL_BF_WID (32)
#define SBB_MEAS_L88_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L88_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H89_REG register description at address offset 0xb48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h89_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h89_reg_t;

#define SBB_MEAS_H89_DEFAULT (0x00000000U)
#define SBB_MEAS_H89_RD_MASK (0xffffffffU)
#define SBB_MEAS_H89_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H89_VAL_BF_OFF ( 0)
#define SBB_MEAS_H89_VAL_BF_WID (32)
#define SBB_MEAS_H89_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H89_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L89_REG register description at address offset 0xb4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l89_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l89_reg_t;

#define SBB_MEAS_L89_DEFAULT (0x00000000U)
#define SBB_MEAS_L89_RD_MASK (0xffffffffU)
#define SBB_MEAS_L89_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L89_VAL_BF_OFF ( 0)
#define SBB_MEAS_L89_VAL_BF_WID (32)
#define SBB_MEAS_L89_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L89_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H90_REG register description at address offset 0xb50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h90_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h90_reg_t;

#define SBB_MEAS_H90_DEFAULT (0x00000000U)
#define SBB_MEAS_H90_RD_MASK (0xffffffffU)
#define SBB_MEAS_H90_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H90_VAL_BF_OFF ( 0)
#define SBB_MEAS_H90_VAL_BF_WID (32)
#define SBB_MEAS_H90_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H90_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L90_REG register description at address offset 0xb54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l90_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l90_reg_t;

#define SBB_MEAS_L90_DEFAULT (0x00000000U)
#define SBB_MEAS_L90_RD_MASK (0xffffffffU)
#define SBB_MEAS_L90_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L90_VAL_BF_OFF ( 0)
#define SBB_MEAS_L90_VAL_BF_WID (32)
#define SBB_MEAS_L90_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L90_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H91_REG register description at address offset 0xb58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h91_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h91_reg_t;

#define SBB_MEAS_H91_DEFAULT (0x00000000U)
#define SBB_MEAS_H91_RD_MASK (0xffffffffU)
#define SBB_MEAS_H91_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H91_VAL_BF_OFF ( 0)
#define SBB_MEAS_H91_VAL_BF_WID (32)
#define SBB_MEAS_H91_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H91_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L91_REG register description at address offset 0xb5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l91_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l91_reg_t;

#define SBB_MEAS_L91_DEFAULT (0x00000000U)
#define SBB_MEAS_L91_RD_MASK (0xffffffffU)
#define SBB_MEAS_L91_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L91_VAL_BF_OFF ( 0)
#define SBB_MEAS_L91_VAL_BF_WID (32)
#define SBB_MEAS_L91_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L91_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H92_REG register description at address offset 0xb60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h92_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h92_reg_t;

#define SBB_MEAS_H92_DEFAULT (0x00000000U)
#define SBB_MEAS_H92_RD_MASK (0xffffffffU)
#define SBB_MEAS_H92_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H92_VAL_BF_OFF ( 0)
#define SBB_MEAS_H92_VAL_BF_WID (32)
#define SBB_MEAS_H92_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H92_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L92_REG register description at address offset 0xb64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l92_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l92_reg_t;

#define SBB_MEAS_L92_DEFAULT (0x00000000U)
#define SBB_MEAS_L92_RD_MASK (0xffffffffU)
#define SBB_MEAS_L92_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L92_VAL_BF_OFF ( 0)
#define SBB_MEAS_L92_VAL_BF_WID (32)
#define SBB_MEAS_L92_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L92_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H93_REG register description at address offset 0xb68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h93_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h93_reg_t;

#define SBB_MEAS_H93_DEFAULT (0x00000000U)
#define SBB_MEAS_H93_RD_MASK (0xffffffffU)
#define SBB_MEAS_H93_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H93_VAL_BF_OFF ( 0)
#define SBB_MEAS_H93_VAL_BF_WID (32)
#define SBB_MEAS_H93_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H93_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L93_REG register description at address offset 0xb6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l93_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l93_reg_t;

#define SBB_MEAS_L93_DEFAULT (0x00000000U)
#define SBB_MEAS_L93_RD_MASK (0xffffffffU)
#define SBB_MEAS_L93_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L93_VAL_BF_OFF ( 0)
#define SBB_MEAS_L93_VAL_BF_WID (32)
#define SBB_MEAS_L93_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L93_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H94_REG register description at address offset 0xb70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h94_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h94_reg_t;

#define SBB_MEAS_H94_DEFAULT (0x00000000U)
#define SBB_MEAS_H94_RD_MASK (0xffffffffU)
#define SBB_MEAS_H94_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H94_VAL_BF_OFF ( 0)
#define SBB_MEAS_H94_VAL_BF_WID (32)
#define SBB_MEAS_H94_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H94_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L94_REG register description at address offset 0xb74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l94_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l94_reg_t;

#define SBB_MEAS_L94_DEFAULT (0x00000000U)
#define SBB_MEAS_L94_RD_MASK (0xffffffffU)
#define SBB_MEAS_L94_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L94_VAL_BF_OFF ( 0)
#define SBB_MEAS_L94_VAL_BF_WID (32)
#define SBB_MEAS_L94_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L94_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H95_REG register description at address offset 0xb78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h95_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h95_reg_t;

#define SBB_MEAS_H95_DEFAULT (0x00000000U)
#define SBB_MEAS_H95_RD_MASK (0xffffffffU)
#define SBB_MEAS_H95_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H95_VAL_BF_OFF ( 0)
#define SBB_MEAS_H95_VAL_BF_WID (32)
#define SBB_MEAS_H95_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H95_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L95_REG register description at address offset 0xb7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l95_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l95_reg_t;

#define SBB_MEAS_L95_DEFAULT (0x00000000U)
#define SBB_MEAS_L95_RD_MASK (0xffffffffU)
#define SBB_MEAS_L95_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L95_VAL_BF_OFF ( 0)
#define SBB_MEAS_L95_VAL_BF_WID (32)
#define SBB_MEAS_L95_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L95_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H96_REG register description at address offset 0xb80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h96_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h96_reg_t;

#define SBB_MEAS_H96_DEFAULT (0x00000000U)
#define SBB_MEAS_H96_RD_MASK (0xffffffffU)
#define SBB_MEAS_H96_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H96_VAL_BF_OFF ( 0)
#define SBB_MEAS_H96_VAL_BF_WID (32)
#define SBB_MEAS_H96_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H96_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L96_REG register description at address offset 0xb84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l96_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l96_reg_t;

#define SBB_MEAS_L96_DEFAULT (0x00000000U)
#define SBB_MEAS_L96_RD_MASK (0xffffffffU)
#define SBB_MEAS_L96_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L96_VAL_BF_OFF ( 0)
#define SBB_MEAS_L96_VAL_BF_WID (32)
#define SBB_MEAS_L96_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L96_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H97_REG register description at address offset 0xb88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h97_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h97_reg_t;

#define SBB_MEAS_H97_DEFAULT (0x00000000U)
#define SBB_MEAS_H97_RD_MASK (0xffffffffU)
#define SBB_MEAS_H97_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H97_VAL_BF_OFF ( 0)
#define SBB_MEAS_H97_VAL_BF_WID (32)
#define SBB_MEAS_H97_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H97_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L97_REG register description at address offset 0xb8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l97_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l97_reg_t;

#define SBB_MEAS_L97_DEFAULT (0x00000000U)
#define SBB_MEAS_L97_RD_MASK (0xffffffffU)
#define SBB_MEAS_L97_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L97_VAL_BF_OFF ( 0)
#define SBB_MEAS_L97_VAL_BF_WID (32)
#define SBB_MEAS_L97_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L97_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H98_REG register description at address offset 0xb90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h98_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h98_reg_t;

#define SBB_MEAS_H98_DEFAULT (0x00000000U)
#define SBB_MEAS_H98_RD_MASK (0xffffffffU)
#define SBB_MEAS_H98_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H98_VAL_BF_OFF ( 0)
#define SBB_MEAS_H98_VAL_BF_WID (32)
#define SBB_MEAS_H98_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H98_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L98_REG register description at address offset 0xb94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l98_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l98_reg_t;

#define SBB_MEAS_L98_DEFAULT (0x00000000U)
#define SBB_MEAS_L98_RD_MASK (0xffffffffU)
#define SBB_MEAS_L98_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L98_VAL_BF_OFF ( 0)
#define SBB_MEAS_L98_VAL_BF_WID (32)
#define SBB_MEAS_L98_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L98_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H99_REG register description at address offset 0xb98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h99_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h99_reg_t;

#define SBB_MEAS_H99_DEFAULT (0x00000000U)
#define SBB_MEAS_H99_RD_MASK (0xffffffffU)
#define SBB_MEAS_H99_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H99_VAL_BF_OFF ( 0)
#define SBB_MEAS_H99_VAL_BF_WID (32)
#define SBB_MEAS_H99_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H99_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L99_REG register description at address offset 0xb9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l99_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l99_reg_t;

#define SBB_MEAS_L99_DEFAULT (0x00000000U)
#define SBB_MEAS_L99_RD_MASK (0xffffffffU)
#define SBB_MEAS_L99_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L99_VAL_BF_OFF ( 0)
#define SBB_MEAS_L99_VAL_BF_WID (32)
#define SBB_MEAS_L99_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L99_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H100_REG register description at address offset 0xba0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h100_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h100_reg_t;

#define SBB_MEAS_H100_DEFAULT (0x00000000U)
#define SBB_MEAS_H100_RD_MASK (0xffffffffU)
#define SBB_MEAS_H100_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H100_VAL_BF_OFF ( 0)
#define SBB_MEAS_H100_VAL_BF_WID (32)
#define SBB_MEAS_H100_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H100_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L100_REG register description at address offset 0xba4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l100_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l100_reg_t;

#define SBB_MEAS_L100_DEFAULT (0x00000000U)
#define SBB_MEAS_L100_RD_MASK (0xffffffffU)
#define SBB_MEAS_L100_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L100_VAL_BF_OFF ( 0)
#define SBB_MEAS_L100_VAL_BF_WID (32)
#define SBB_MEAS_L100_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L100_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H101_REG register description at address offset 0xba8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h101_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h101_reg_t;

#define SBB_MEAS_H101_DEFAULT (0x00000000U)
#define SBB_MEAS_H101_RD_MASK (0xffffffffU)
#define SBB_MEAS_H101_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H101_VAL_BF_OFF ( 0)
#define SBB_MEAS_H101_VAL_BF_WID (32)
#define SBB_MEAS_H101_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H101_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L101_REG register description at address offset 0xbac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l101_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l101_reg_t;

#define SBB_MEAS_L101_DEFAULT (0x00000000U)
#define SBB_MEAS_L101_RD_MASK (0xffffffffU)
#define SBB_MEAS_L101_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L101_VAL_BF_OFF ( 0)
#define SBB_MEAS_L101_VAL_BF_WID (32)
#define SBB_MEAS_L101_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L101_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H102_REG register description at address offset 0xbb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h102_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h102_reg_t;

#define SBB_MEAS_H102_DEFAULT (0x00000000U)
#define SBB_MEAS_H102_RD_MASK (0xffffffffU)
#define SBB_MEAS_H102_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H102_VAL_BF_OFF ( 0)
#define SBB_MEAS_H102_VAL_BF_WID (32)
#define SBB_MEAS_H102_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H102_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L102_REG register description at address offset 0xbb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l102_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l102_reg_t;

#define SBB_MEAS_L102_DEFAULT (0x00000000U)
#define SBB_MEAS_L102_RD_MASK (0xffffffffU)
#define SBB_MEAS_L102_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L102_VAL_BF_OFF ( 0)
#define SBB_MEAS_L102_VAL_BF_WID (32)
#define SBB_MEAS_L102_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L102_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H103_REG register description at address offset 0xbb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h103_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h103_reg_t;

#define SBB_MEAS_H103_DEFAULT (0x00000000U)
#define SBB_MEAS_H103_RD_MASK (0xffffffffU)
#define SBB_MEAS_H103_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H103_VAL_BF_OFF ( 0)
#define SBB_MEAS_H103_VAL_BF_WID (32)
#define SBB_MEAS_H103_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H103_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L103_REG register description at address offset 0xbbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l103_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l103_reg_t;

#define SBB_MEAS_L103_DEFAULT (0x00000000U)
#define SBB_MEAS_L103_RD_MASK (0xffffffffU)
#define SBB_MEAS_L103_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L103_VAL_BF_OFF ( 0)
#define SBB_MEAS_L103_VAL_BF_WID (32)
#define SBB_MEAS_L103_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L103_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H104_REG register description at address offset 0xbc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h104_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h104_reg_t;

#define SBB_MEAS_H104_DEFAULT (0x00000000U)
#define SBB_MEAS_H104_RD_MASK (0xffffffffU)
#define SBB_MEAS_H104_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H104_VAL_BF_OFF ( 0)
#define SBB_MEAS_H104_VAL_BF_WID (32)
#define SBB_MEAS_H104_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H104_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L104_REG register description at address offset 0xbc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l104_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l104_reg_t;

#define SBB_MEAS_L104_DEFAULT (0x00000000U)
#define SBB_MEAS_L104_RD_MASK (0xffffffffU)
#define SBB_MEAS_L104_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L104_VAL_BF_OFF ( 0)
#define SBB_MEAS_L104_VAL_BF_WID (32)
#define SBB_MEAS_L104_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L104_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H105_REG register description at address offset 0xbc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h105_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h105_reg_t;

#define SBB_MEAS_H105_DEFAULT (0x00000000U)
#define SBB_MEAS_H105_RD_MASK (0xffffffffU)
#define SBB_MEAS_H105_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H105_VAL_BF_OFF ( 0)
#define SBB_MEAS_H105_VAL_BF_WID (32)
#define SBB_MEAS_H105_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H105_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L105_REG register description at address offset 0xbcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l105_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l105_reg_t;

#define SBB_MEAS_L105_DEFAULT (0x00000000U)
#define SBB_MEAS_L105_RD_MASK (0xffffffffU)
#define SBB_MEAS_L105_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L105_VAL_BF_OFF ( 0)
#define SBB_MEAS_L105_VAL_BF_WID (32)
#define SBB_MEAS_L105_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L105_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H106_REG register description at address offset 0xbd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h106_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h106_reg_t;

#define SBB_MEAS_H106_DEFAULT (0x00000000U)
#define SBB_MEAS_H106_RD_MASK (0xffffffffU)
#define SBB_MEAS_H106_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H106_VAL_BF_OFF ( 0)
#define SBB_MEAS_H106_VAL_BF_WID (32)
#define SBB_MEAS_H106_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H106_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L106_REG register description at address offset 0xbd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l106_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l106_reg_t;

#define SBB_MEAS_L106_DEFAULT (0x00000000U)
#define SBB_MEAS_L106_RD_MASK (0xffffffffU)
#define SBB_MEAS_L106_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L106_VAL_BF_OFF ( 0)
#define SBB_MEAS_L106_VAL_BF_WID (32)
#define SBB_MEAS_L106_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L106_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H107_REG register description at address offset 0xbd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h107_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h107_reg_t;

#define SBB_MEAS_H107_DEFAULT (0x00000000U)
#define SBB_MEAS_H107_RD_MASK (0xffffffffU)
#define SBB_MEAS_H107_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H107_VAL_BF_OFF ( 0)
#define SBB_MEAS_H107_VAL_BF_WID (32)
#define SBB_MEAS_H107_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H107_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L107_REG register description at address offset 0xbdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l107_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l107_reg_t;

#define SBB_MEAS_L107_DEFAULT (0x00000000U)
#define SBB_MEAS_L107_RD_MASK (0xffffffffU)
#define SBB_MEAS_L107_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L107_VAL_BF_OFF ( 0)
#define SBB_MEAS_L107_VAL_BF_WID (32)
#define SBB_MEAS_L107_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L107_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H108_REG register description at address offset 0xbe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h108_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h108_reg_t;

#define SBB_MEAS_H108_DEFAULT (0x00000000U)
#define SBB_MEAS_H108_RD_MASK (0xffffffffU)
#define SBB_MEAS_H108_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H108_VAL_BF_OFF ( 0)
#define SBB_MEAS_H108_VAL_BF_WID (32)
#define SBB_MEAS_H108_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H108_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L108_REG register description at address offset 0xbe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l108_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l108_reg_t;

#define SBB_MEAS_L108_DEFAULT (0x00000000U)
#define SBB_MEAS_L108_RD_MASK (0xffffffffU)
#define SBB_MEAS_L108_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L108_VAL_BF_OFF ( 0)
#define SBB_MEAS_L108_VAL_BF_WID (32)
#define SBB_MEAS_L108_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L108_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H109_REG register description at address offset 0xbe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h109_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h109_reg_t;

#define SBB_MEAS_H109_DEFAULT (0x00000000U)
#define SBB_MEAS_H109_RD_MASK (0xffffffffU)
#define SBB_MEAS_H109_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H109_VAL_BF_OFF ( 0)
#define SBB_MEAS_H109_VAL_BF_WID (32)
#define SBB_MEAS_H109_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H109_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L109_REG register description at address offset 0xbec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l109_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l109_reg_t;

#define SBB_MEAS_L109_DEFAULT (0x00000000U)
#define SBB_MEAS_L109_RD_MASK (0xffffffffU)
#define SBB_MEAS_L109_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L109_VAL_BF_OFF ( 0)
#define SBB_MEAS_L109_VAL_BF_WID (32)
#define SBB_MEAS_L109_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L109_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H110_REG register description at address offset 0xbf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h110_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h110_reg_t;

#define SBB_MEAS_H110_DEFAULT (0x00000000U)
#define SBB_MEAS_H110_RD_MASK (0xffffffffU)
#define SBB_MEAS_H110_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H110_VAL_BF_OFF ( 0)
#define SBB_MEAS_H110_VAL_BF_WID (32)
#define SBB_MEAS_H110_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H110_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L110_REG register description at address offset 0xbf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l110_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l110_reg_t;

#define SBB_MEAS_L110_DEFAULT (0x00000000U)
#define SBB_MEAS_L110_RD_MASK (0xffffffffU)
#define SBB_MEAS_L110_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L110_VAL_BF_OFF ( 0)
#define SBB_MEAS_L110_VAL_BF_WID (32)
#define SBB_MEAS_L110_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L110_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H111_REG register description at address offset 0xbf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h111_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h111_reg_t;

#define SBB_MEAS_H111_DEFAULT (0x00000000U)
#define SBB_MEAS_H111_RD_MASK (0xffffffffU)
#define SBB_MEAS_H111_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H111_VAL_BF_OFF ( 0)
#define SBB_MEAS_H111_VAL_BF_WID (32)
#define SBB_MEAS_H111_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H111_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L111_REG register description at address offset 0xbfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l111_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l111_reg_t;

#define SBB_MEAS_L111_DEFAULT (0x00000000U)
#define SBB_MEAS_L111_RD_MASK (0xffffffffU)
#define SBB_MEAS_L111_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L111_VAL_BF_OFF ( 0)
#define SBB_MEAS_L111_VAL_BF_WID (32)
#define SBB_MEAS_L111_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L111_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H112_REG register description at address offset 0xc00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h112_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h112_reg_t;

#define SBB_MEAS_H112_DEFAULT (0x00000000U)
#define SBB_MEAS_H112_RD_MASK (0xffffffffU)
#define SBB_MEAS_H112_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H112_VAL_BF_OFF ( 0)
#define SBB_MEAS_H112_VAL_BF_WID (32)
#define SBB_MEAS_H112_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H112_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L112_REG register description at address offset 0xc04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l112_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l112_reg_t;

#define SBB_MEAS_L112_DEFAULT (0x00000000U)
#define SBB_MEAS_L112_RD_MASK (0xffffffffU)
#define SBB_MEAS_L112_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L112_VAL_BF_OFF ( 0)
#define SBB_MEAS_L112_VAL_BF_WID (32)
#define SBB_MEAS_L112_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L112_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H113_REG register description at address offset 0xc08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h113_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h113_reg_t;

#define SBB_MEAS_H113_DEFAULT (0x00000000U)
#define SBB_MEAS_H113_RD_MASK (0xffffffffU)
#define SBB_MEAS_H113_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H113_VAL_BF_OFF ( 0)
#define SBB_MEAS_H113_VAL_BF_WID (32)
#define SBB_MEAS_H113_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H113_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L113_REG register description at address offset 0xc0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l113_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l113_reg_t;

#define SBB_MEAS_L113_DEFAULT (0x00000000U)
#define SBB_MEAS_L113_RD_MASK (0xffffffffU)
#define SBB_MEAS_L113_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L113_VAL_BF_OFF ( 0)
#define SBB_MEAS_L113_VAL_BF_WID (32)
#define SBB_MEAS_L113_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L113_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H114_REG register description at address offset 0xc10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h114_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h114_reg_t;

#define SBB_MEAS_H114_DEFAULT (0x00000000U)
#define SBB_MEAS_H114_RD_MASK (0xffffffffU)
#define SBB_MEAS_H114_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H114_VAL_BF_OFF ( 0)
#define SBB_MEAS_H114_VAL_BF_WID (32)
#define SBB_MEAS_H114_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H114_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L114_REG register description at address offset 0xc14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l114_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l114_reg_t;

#define SBB_MEAS_L114_DEFAULT (0x00000000U)
#define SBB_MEAS_L114_RD_MASK (0xffffffffU)
#define SBB_MEAS_L114_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L114_VAL_BF_OFF ( 0)
#define SBB_MEAS_L114_VAL_BF_WID (32)
#define SBB_MEAS_L114_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L114_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H115_REG register description at address offset 0xc18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h115_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h115_reg_t;

#define SBB_MEAS_H115_DEFAULT (0x00000000U)
#define SBB_MEAS_H115_RD_MASK (0xffffffffU)
#define SBB_MEAS_H115_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H115_VAL_BF_OFF ( 0)
#define SBB_MEAS_H115_VAL_BF_WID (32)
#define SBB_MEAS_H115_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H115_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L115_REG register description at address offset 0xc1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l115_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l115_reg_t;

#define SBB_MEAS_L115_DEFAULT (0x00000000U)
#define SBB_MEAS_L115_RD_MASK (0xffffffffU)
#define SBB_MEAS_L115_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L115_VAL_BF_OFF ( 0)
#define SBB_MEAS_L115_VAL_BF_WID (32)
#define SBB_MEAS_L115_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L115_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H116_REG register description at address offset 0xc20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h116_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h116_reg_t;

#define SBB_MEAS_H116_DEFAULT (0x00000000U)
#define SBB_MEAS_H116_RD_MASK (0xffffffffU)
#define SBB_MEAS_H116_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H116_VAL_BF_OFF ( 0)
#define SBB_MEAS_H116_VAL_BF_WID (32)
#define SBB_MEAS_H116_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H116_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L116_REG register description at address offset 0xc24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l116_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l116_reg_t;

#define SBB_MEAS_L116_DEFAULT (0x00000000U)
#define SBB_MEAS_L116_RD_MASK (0xffffffffU)
#define SBB_MEAS_L116_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L116_VAL_BF_OFF ( 0)
#define SBB_MEAS_L116_VAL_BF_WID (32)
#define SBB_MEAS_L116_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L116_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H117_REG register description at address offset 0xc28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h117_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h117_reg_t;

#define SBB_MEAS_H117_DEFAULT (0x00000000U)
#define SBB_MEAS_H117_RD_MASK (0xffffffffU)
#define SBB_MEAS_H117_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H117_VAL_BF_OFF ( 0)
#define SBB_MEAS_H117_VAL_BF_WID (32)
#define SBB_MEAS_H117_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H117_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L117_REG register description at address offset 0xc2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l117_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l117_reg_t;

#define SBB_MEAS_L117_DEFAULT (0x00000000U)
#define SBB_MEAS_L117_RD_MASK (0xffffffffU)
#define SBB_MEAS_L117_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L117_VAL_BF_OFF ( 0)
#define SBB_MEAS_L117_VAL_BF_WID (32)
#define SBB_MEAS_L117_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L117_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H118_REG register description at address offset 0xc30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h118_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h118_reg_t;

#define SBB_MEAS_H118_DEFAULT (0x00000000U)
#define SBB_MEAS_H118_RD_MASK (0xffffffffU)
#define SBB_MEAS_H118_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H118_VAL_BF_OFF ( 0)
#define SBB_MEAS_H118_VAL_BF_WID (32)
#define SBB_MEAS_H118_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H118_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L118_REG register description at address offset 0xc34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l118_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l118_reg_t;

#define SBB_MEAS_L118_DEFAULT (0x00000000U)
#define SBB_MEAS_L118_RD_MASK (0xffffffffU)
#define SBB_MEAS_L118_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L118_VAL_BF_OFF ( 0)
#define SBB_MEAS_L118_VAL_BF_WID (32)
#define SBB_MEAS_L118_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L118_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H119_REG register description at address offset 0xc38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h119_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h119_reg_t;

#define SBB_MEAS_H119_DEFAULT (0x00000000U)
#define SBB_MEAS_H119_RD_MASK (0xffffffffU)
#define SBB_MEAS_H119_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H119_VAL_BF_OFF ( 0)
#define SBB_MEAS_H119_VAL_BF_WID (32)
#define SBB_MEAS_H119_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H119_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L119_REG register description at address offset 0xc3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l119_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l119_reg_t;

#define SBB_MEAS_L119_DEFAULT (0x00000000U)
#define SBB_MEAS_L119_RD_MASK (0xffffffffU)
#define SBB_MEAS_L119_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L119_VAL_BF_OFF ( 0)
#define SBB_MEAS_L119_VAL_BF_WID (32)
#define SBB_MEAS_L119_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L119_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H120_REG register description at address offset 0xc40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h120_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h120_reg_t;

#define SBB_MEAS_H120_DEFAULT (0x00000000U)
#define SBB_MEAS_H120_RD_MASK (0xffffffffU)
#define SBB_MEAS_H120_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H120_VAL_BF_OFF ( 0)
#define SBB_MEAS_H120_VAL_BF_WID (32)
#define SBB_MEAS_H120_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H120_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L120_REG register description at address offset 0xc44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l120_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l120_reg_t;

#define SBB_MEAS_L120_DEFAULT (0x00000000U)
#define SBB_MEAS_L120_RD_MASK (0xffffffffU)
#define SBB_MEAS_L120_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L120_VAL_BF_OFF ( 0)
#define SBB_MEAS_L120_VAL_BF_WID (32)
#define SBB_MEAS_L120_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L120_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H121_REG register description at address offset 0xc48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h121_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h121_reg_t;

#define SBB_MEAS_H121_DEFAULT (0x00000000U)
#define SBB_MEAS_H121_RD_MASK (0xffffffffU)
#define SBB_MEAS_H121_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H121_VAL_BF_OFF ( 0)
#define SBB_MEAS_H121_VAL_BF_WID (32)
#define SBB_MEAS_H121_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H121_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L121_REG register description at address offset 0xc4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l121_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l121_reg_t;

#define SBB_MEAS_L121_DEFAULT (0x00000000U)
#define SBB_MEAS_L121_RD_MASK (0xffffffffU)
#define SBB_MEAS_L121_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L121_VAL_BF_OFF ( 0)
#define SBB_MEAS_L121_VAL_BF_WID (32)
#define SBB_MEAS_L121_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L121_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H122_REG register description at address offset 0xc50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h122_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h122_reg_t;

#define SBB_MEAS_H122_DEFAULT (0x00000000U)
#define SBB_MEAS_H122_RD_MASK (0xffffffffU)
#define SBB_MEAS_H122_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H122_VAL_BF_OFF ( 0)
#define SBB_MEAS_H122_VAL_BF_WID (32)
#define SBB_MEAS_H122_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H122_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L122_REG register description at address offset 0xc54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l122_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l122_reg_t;

#define SBB_MEAS_L122_DEFAULT (0x00000000U)
#define SBB_MEAS_L122_RD_MASK (0xffffffffU)
#define SBB_MEAS_L122_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L122_VAL_BF_OFF ( 0)
#define SBB_MEAS_L122_VAL_BF_WID (32)
#define SBB_MEAS_L122_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L122_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H123_REG register description at address offset 0xc58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h123_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h123_reg_t;

#define SBB_MEAS_H123_DEFAULT (0x00000000U)
#define SBB_MEAS_H123_RD_MASK (0xffffffffU)
#define SBB_MEAS_H123_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H123_VAL_BF_OFF ( 0)
#define SBB_MEAS_H123_VAL_BF_WID (32)
#define SBB_MEAS_H123_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H123_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L123_REG register description at address offset 0xc5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l123_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l123_reg_t;

#define SBB_MEAS_L123_DEFAULT (0x00000000U)
#define SBB_MEAS_L123_RD_MASK (0xffffffffU)
#define SBB_MEAS_L123_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L123_VAL_BF_OFF ( 0)
#define SBB_MEAS_L123_VAL_BF_WID (32)
#define SBB_MEAS_L123_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L123_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H124_REG register description at address offset 0xc60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h124_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h124_reg_t;

#define SBB_MEAS_H124_DEFAULT (0x00000000U)
#define SBB_MEAS_H124_RD_MASK (0xffffffffU)
#define SBB_MEAS_H124_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H124_VAL_BF_OFF ( 0)
#define SBB_MEAS_H124_VAL_BF_WID (32)
#define SBB_MEAS_H124_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H124_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L124_REG register description at address offset 0xc64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l124_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l124_reg_t;

#define SBB_MEAS_L124_DEFAULT (0x00000000U)
#define SBB_MEAS_L124_RD_MASK (0xffffffffU)
#define SBB_MEAS_L124_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L124_VAL_BF_OFF ( 0)
#define SBB_MEAS_L124_VAL_BF_WID (32)
#define SBB_MEAS_L124_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L124_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H125_REG register description at address offset 0xc68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h125_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h125_reg_t;

#define SBB_MEAS_H125_DEFAULT (0x00000000U)
#define SBB_MEAS_H125_RD_MASK (0xffffffffU)
#define SBB_MEAS_H125_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H125_VAL_BF_OFF ( 0)
#define SBB_MEAS_H125_VAL_BF_WID (32)
#define SBB_MEAS_H125_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H125_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L125_REG register description at address offset 0xc6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l125_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l125_reg_t;

#define SBB_MEAS_L125_DEFAULT (0x00000000U)
#define SBB_MEAS_L125_RD_MASK (0xffffffffU)
#define SBB_MEAS_L125_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L125_VAL_BF_OFF ( 0)
#define SBB_MEAS_L125_VAL_BF_WID (32)
#define SBB_MEAS_L125_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L125_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H126_REG register description at address offset 0xc70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h126_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h126_reg_t;

#define SBB_MEAS_H126_DEFAULT (0x00000000U)
#define SBB_MEAS_H126_RD_MASK (0xffffffffU)
#define SBB_MEAS_H126_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H126_VAL_BF_OFF ( 0)
#define SBB_MEAS_H126_VAL_BF_WID (32)
#define SBB_MEAS_H126_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H126_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L126_REG register description at address offset 0xc74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l126_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l126_reg_t;

#define SBB_MEAS_L126_DEFAULT (0x00000000U)
#define SBB_MEAS_L126_RD_MASK (0xffffffffU)
#define SBB_MEAS_L126_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L126_VAL_BF_OFF ( 0)
#define SBB_MEAS_L126_VAL_BF_WID (32)
#define SBB_MEAS_L126_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L126_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H127_REG register description at address offset 0xc78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h127_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h127_reg_t;

#define SBB_MEAS_H127_DEFAULT (0x00000000U)
#define SBB_MEAS_H127_RD_MASK (0xffffffffU)
#define SBB_MEAS_H127_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H127_VAL_BF_OFF ( 0)
#define SBB_MEAS_H127_VAL_BF_WID (32)
#define SBB_MEAS_H127_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H127_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L127_REG register description at address offset 0xc7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l127_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l127_reg_t;

#define SBB_MEAS_L127_DEFAULT (0x00000000U)
#define SBB_MEAS_L127_RD_MASK (0xffffffffU)
#define SBB_MEAS_L127_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L127_VAL_BF_OFF ( 0)
#define SBB_MEAS_L127_VAL_BF_WID (32)
#define SBB_MEAS_L127_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L127_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H128_REG register description at address offset 0xc80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h128_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h128_reg_t;

#define SBB_MEAS_H128_DEFAULT (0x00000000U)
#define SBB_MEAS_H128_RD_MASK (0xffffffffU)
#define SBB_MEAS_H128_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H128_VAL_BF_OFF ( 0)
#define SBB_MEAS_H128_VAL_BF_WID (32)
#define SBB_MEAS_H128_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H128_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L128_REG register description at address offset 0xc84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l128_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l128_reg_t;

#define SBB_MEAS_L128_DEFAULT (0x00000000U)
#define SBB_MEAS_L128_RD_MASK (0xffffffffU)
#define SBB_MEAS_L128_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L128_VAL_BF_OFF ( 0)
#define SBB_MEAS_L128_VAL_BF_WID (32)
#define SBB_MEAS_L128_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L128_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H129_REG register description at address offset 0xc88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h129_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h129_reg_t;

#define SBB_MEAS_H129_DEFAULT (0x00000000U)
#define SBB_MEAS_H129_RD_MASK (0xffffffffU)
#define SBB_MEAS_H129_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H129_VAL_BF_OFF ( 0)
#define SBB_MEAS_H129_VAL_BF_WID (32)
#define SBB_MEAS_H129_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H129_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L129_REG register description at address offset 0xc8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l129_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l129_reg_t;

#define SBB_MEAS_L129_DEFAULT (0x00000000U)
#define SBB_MEAS_L129_RD_MASK (0xffffffffU)
#define SBB_MEAS_L129_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L129_VAL_BF_OFF ( 0)
#define SBB_MEAS_L129_VAL_BF_WID (32)
#define SBB_MEAS_L129_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L129_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H130_REG register description at address offset 0xc90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h130_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h130_reg_t;

#define SBB_MEAS_H130_DEFAULT (0x00000000U)
#define SBB_MEAS_H130_RD_MASK (0xffffffffU)
#define SBB_MEAS_H130_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H130_VAL_BF_OFF ( 0)
#define SBB_MEAS_H130_VAL_BF_WID (32)
#define SBB_MEAS_H130_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H130_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L130_REG register description at address offset 0xc94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l130_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l130_reg_t;

#define SBB_MEAS_L130_DEFAULT (0x00000000U)
#define SBB_MEAS_L130_RD_MASK (0xffffffffU)
#define SBB_MEAS_L130_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L130_VAL_BF_OFF ( 0)
#define SBB_MEAS_L130_VAL_BF_WID (32)
#define SBB_MEAS_L130_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L130_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H131_REG register description at address offset 0xc98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h131_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h131_reg_t;

#define SBB_MEAS_H131_DEFAULT (0x00000000U)
#define SBB_MEAS_H131_RD_MASK (0xffffffffU)
#define SBB_MEAS_H131_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H131_VAL_BF_OFF ( 0)
#define SBB_MEAS_H131_VAL_BF_WID (32)
#define SBB_MEAS_H131_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H131_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L131_REG register description at address offset 0xc9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l131_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l131_reg_t;

#define SBB_MEAS_L131_DEFAULT (0x00000000U)
#define SBB_MEAS_L131_RD_MASK (0xffffffffU)
#define SBB_MEAS_L131_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L131_VAL_BF_OFF ( 0)
#define SBB_MEAS_L131_VAL_BF_WID (32)
#define SBB_MEAS_L131_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L131_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H132_REG register description at address offset 0xca0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h132_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h132_reg_t;

#define SBB_MEAS_H132_DEFAULT (0x00000000U)
#define SBB_MEAS_H132_RD_MASK (0xffffffffU)
#define SBB_MEAS_H132_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H132_VAL_BF_OFF ( 0)
#define SBB_MEAS_H132_VAL_BF_WID (32)
#define SBB_MEAS_H132_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H132_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L132_REG register description at address offset 0xca4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l132_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l132_reg_t;

#define SBB_MEAS_L132_DEFAULT (0x00000000U)
#define SBB_MEAS_L132_RD_MASK (0xffffffffU)
#define SBB_MEAS_L132_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L132_VAL_BF_OFF ( 0)
#define SBB_MEAS_L132_VAL_BF_WID (32)
#define SBB_MEAS_L132_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L132_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H133_REG register description at address offset 0xca8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h133_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h133_reg_t;

#define SBB_MEAS_H133_DEFAULT (0x00000000U)
#define SBB_MEAS_H133_RD_MASK (0xffffffffU)
#define SBB_MEAS_H133_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H133_VAL_BF_OFF ( 0)
#define SBB_MEAS_H133_VAL_BF_WID (32)
#define SBB_MEAS_H133_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H133_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L133_REG register description at address offset 0xcac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l133_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l133_reg_t;

#define SBB_MEAS_L133_DEFAULT (0x00000000U)
#define SBB_MEAS_L133_RD_MASK (0xffffffffU)
#define SBB_MEAS_L133_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L133_VAL_BF_OFF ( 0)
#define SBB_MEAS_L133_VAL_BF_WID (32)
#define SBB_MEAS_L133_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L133_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H134_REG register description at address offset 0xcb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h134_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h134_reg_t;

#define SBB_MEAS_H134_DEFAULT (0x00000000U)
#define SBB_MEAS_H134_RD_MASK (0xffffffffU)
#define SBB_MEAS_H134_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H134_VAL_BF_OFF ( 0)
#define SBB_MEAS_H134_VAL_BF_WID (32)
#define SBB_MEAS_H134_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H134_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L134_REG register description at address offset 0xcb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l134_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l134_reg_t;

#define SBB_MEAS_L134_DEFAULT (0x00000000U)
#define SBB_MEAS_L134_RD_MASK (0xffffffffU)
#define SBB_MEAS_L134_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L134_VAL_BF_OFF ( 0)
#define SBB_MEAS_L134_VAL_BF_WID (32)
#define SBB_MEAS_L134_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L134_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H135_REG register description at address offset 0xcb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h135_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h135_reg_t;

#define SBB_MEAS_H135_DEFAULT (0x00000000U)
#define SBB_MEAS_H135_RD_MASK (0xffffffffU)
#define SBB_MEAS_H135_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H135_VAL_BF_OFF ( 0)
#define SBB_MEAS_H135_VAL_BF_WID (32)
#define SBB_MEAS_H135_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H135_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L135_REG register description at address offset 0xcbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l135_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l135_reg_t;

#define SBB_MEAS_L135_DEFAULT (0x00000000U)
#define SBB_MEAS_L135_RD_MASK (0xffffffffU)
#define SBB_MEAS_L135_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L135_VAL_BF_OFF ( 0)
#define SBB_MEAS_L135_VAL_BF_WID (32)
#define SBB_MEAS_L135_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L135_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H136_REG register description at address offset 0xcc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h136_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h136_reg_t;

#define SBB_MEAS_H136_DEFAULT (0x00000000U)
#define SBB_MEAS_H136_RD_MASK (0xffffffffU)
#define SBB_MEAS_H136_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H136_VAL_BF_OFF ( 0)
#define SBB_MEAS_H136_VAL_BF_WID (32)
#define SBB_MEAS_H136_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H136_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L136_REG register description at address offset 0xcc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l136_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l136_reg_t;

#define SBB_MEAS_L136_DEFAULT (0x00000000U)
#define SBB_MEAS_L136_RD_MASK (0xffffffffU)
#define SBB_MEAS_L136_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L136_VAL_BF_OFF ( 0)
#define SBB_MEAS_L136_VAL_BF_WID (32)
#define SBB_MEAS_L136_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L136_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H137_REG register description at address offset 0xcc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h137_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h137_reg_t;

#define SBB_MEAS_H137_DEFAULT (0x00000000U)
#define SBB_MEAS_H137_RD_MASK (0xffffffffU)
#define SBB_MEAS_H137_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H137_VAL_BF_OFF ( 0)
#define SBB_MEAS_H137_VAL_BF_WID (32)
#define SBB_MEAS_H137_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H137_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L137_REG register description at address offset 0xccc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l137_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l137_reg_t;

#define SBB_MEAS_L137_DEFAULT (0x00000000U)
#define SBB_MEAS_L137_RD_MASK (0xffffffffU)
#define SBB_MEAS_L137_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L137_VAL_BF_OFF ( 0)
#define SBB_MEAS_L137_VAL_BF_WID (32)
#define SBB_MEAS_L137_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L137_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H138_REG register description at address offset 0xcd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h138_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h138_reg_t;

#define SBB_MEAS_H138_DEFAULT (0x00000000U)
#define SBB_MEAS_H138_RD_MASK (0xffffffffU)
#define SBB_MEAS_H138_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H138_VAL_BF_OFF ( 0)
#define SBB_MEAS_H138_VAL_BF_WID (32)
#define SBB_MEAS_H138_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H138_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L138_REG register description at address offset 0xcd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l138_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l138_reg_t;

#define SBB_MEAS_L138_DEFAULT (0x00000000U)
#define SBB_MEAS_L138_RD_MASK (0xffffffffU)
#define SBB_MEAS_L138_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L138_VAL_BF_OFF ( 0)
#define SBB_MEAS_L138_VAL_BF_WID (32)
#define SBB_MEAS_L138_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L138_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H139_REG register description at address offset 0xcd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h139_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h139_reg_t;

#define SBB_MEAS_H139_DEFAULT (0x00000000U)
#define SBB_MEAS_H139_RD_MASK (0xffffffffU)
#define SBB_MEAS_H139_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H139_VAL_BF_OFF ( 0)
#define SBB_MEAS_H139_VAL_BF_WID (32)
#define SBB_MEAS_H139_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H139_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L139_REG register description at address offset 0xcdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l139_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l139_reg_t;

#define SBB_MEAS_L139_DEFAULT (0x00000000U)
#define SBB_MEAS_L139_RD_MASK (0xffffffffU)
#define SBB_MEAS_L139_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L139_VAL_BF_OFF ( 0)
#define SBB_MEAS_L139_VAL_BF_WID (32)
#define SBB_MEAS_L139_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L139_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H140_REG register description at address offset 0xce0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h140_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h140_reg_t;

#define SBB_MEAS_H140_DEFAULT (0x00000000U)
#define SBB_MEAS_H140_RD_MASK (0xffffffffU)
#define SBB_MEAS_H140_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H140_VAL_BF_OFF ( 0)
#define SBB_MEAS_H140_VAL_BF_WID (32)
#define SBB_MEAS_H140_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H140_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L140_REG register description at address offset 0xce4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l140_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l140_reg_t;

#define SBB_MEAS_L140_DEFAULT (0x00000000U)
#define SBB_MEAS_L140_RD_MASK (0xffffffffU)
#define SBB_MEAS_L140_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L140_VAL_BF_OFF ( 0)
#define SBB_MEAS_L140_VAL_BF_WID (32)
#define SBB_MEAS_L140_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L140_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H141_REG register description at address offset 0xce8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h141_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h141_reg_t;

#define SBB_MEAS_H141_DEFAULT (0x00000000U)
#define SBB_MEAS_H141_RD_MASK (0xffffffffU)
#define SBB_MEAS_H141_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H141_VAL_BF_OFF ( 0)
#define SBB_MEAS_H141_VAL_BF_WID (32)
#define SBB_MEAS_H141_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H141_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L141_REG register description at address offset 0xcec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l141_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l141_reg_t;

#define SBB_MEAS_L141_DEFAULT (0x00000000U)
#define SBB_MEAS_L141_RD_MASK (0xffffffffU)
#define SBB_MEAS_L141_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L141_VAL_BF_OFF ( 0)
#define SBB_MEAS_L141_VAL_BF_WID (32)
#define SBB_MEAS_L141_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L141_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H142_REG register description at address offset 0xcf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h142_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h142_reg_t;

#define SBB_MEAS_H142_DEFAULT (0x00000000U)
#define SBB_MEAS_H142_RD_MASK (0xffffffffU)
#define SBB_MEAS_H142_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H142_VAL_BF_OFF ( 0)
#define SBB_MEAS_H142_VAL_BF_WID (32)
#define SBB_MEAS_H142_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H142_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L142_REG register description at address offset 0xcf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l142_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l142_reg_t;

#define SBB_MEAS_L142_DEFAULT (0x00000000U)
#define SBB_MEAS_L142_RD_MASK (0xffffffffU)
#define SBB_MEAS_L142_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L142_VAL_BF_OFF ( 0)
#define SBB_MEAS_L142_VAL_BF_WID (32)
#define SBB_MEAS_L142_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L142_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_H143_REG register description at address offset 0xcf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_h143_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_h143_reg_t;

#define SBB_MEAS_H143_DEFAULT (0x00000000U)
#define SBB_MEAS_H143_RD_MASK (0xffffffffU)
#define SBB_MEAS_H143_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_H143_VAL_BF_OFF ( 0)
#define SBB_MEAS_H143_VAL_BF_WID (32)
#define SBB_MEAS_H143_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_H143_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_MEASURE_L143_REG register description at address offset 0xcfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/measure_l143_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_meas_l143_reg_t;

#define SBB_MEAS_L143_DEFAULT (0x00000000U)
#define SBB_MEAS_L143_RD_MASK (0xffffffffU)
#define SBB_MEAS_L143_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_MEAS_L143_VAL_BF_OFF ( 0)
#define SBB_MEAS_L143_VAL_BF_WID (32)
#define SBB_MEAS_L143_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_MEAS_L143_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H0_REG register description at address offset 0xd00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h0_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h0_reg_t;

#define SBB_PCR_H0_DEFAULT (0x00000000U)
#define SBB_PCR_H0_RD_MASK (0xffffffffU)
#define SBB_PCR_H0_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H0_VAL_BF_OFF ( 0)
#define SBB_PCR_H0_VAL_BF_WID (32)
#define SBB_PCR_H0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L0_REG register description at address offset 0xd04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l0_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l0_reg_t;

#define SBB_PCR_L0_DEFAULT (0x00000000U)
#define SBB_PCR_L0_RD_MASK (0xffffffffU)
#define SBB_PCR_L0_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L0_VAL_BF_OFF ( 0)
#define SBB_PCR_L0_VAL_BF_WID (32)
#define SBB_PCR_L0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H1_REG register description at address offset 0xd08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h1_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h1_reg_t;

#define SBB_PCR_H1_DEFAULT (0x00000000U)
#define SBB_PCR_H1_RD_MASK (0xffffffffU)
#define SBB_PCR_H1_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H1_VAL_BF_OFF ( 0)
#define SBB_PCR_H1_VAL_BF_WID (32)
#define SBB_PCR_H1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L1_REG register description at address offset 0xd0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l1_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l1_reg_t;

#define SBB_PCR_L1_DEFAULT (0x00000000U)
#define SBB_PCR_L1_RD_MASK (0xffffffffU)
#define SBB_PCR_L1_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L1_VAL_BF_OFF ( 0)
#define SBB_PCR_L1_VAL_BF_WID (32)
#define SBB_PCR_L1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H2_REG register description at address offset 0xd10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h2_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h2_reg_t;

#define SBB_PCR_H2_DEFAULT (0x00000000U)
#define SBB_PCR_H2_RD_MASK (0xffffffffU)
#define SBB_PCR_H2_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H2_VAL_BF_OFF ( 0)
#define SBB_PCR_H2_VAL_BF_WID (32)
#define SBB_PCR_H2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L2_REG register description at address offset 0xd14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l2_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l2_reg_t;

#define SBB_PCR_L2_DEFAULT (0x00000000U)
#define SBB_PCR_L2_RD_MASK (0xffffffffU)
#define SBB_PCR_L2_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L2_VAL_BF_OFF ( 0)
#define SBB_PCR_L2_VAL_BF_WID (32)
#define SBB_PCR_L2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H3_REG register description at address offset 0xd18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h3_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h3_reg_t;

#define SBB_PCR_H3_DEFAULT (0x00000000U)
#define SBB_PCR_H3_RD_MASK (0xffffffffU)
#define SBB_PCR_H3_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H3_VAL_BF_OFF ( 0)
#define SBB_PCR_H3_VAL_BF_WID (32)
#define SBB_PCR_H3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L3_REG register description at address offset 0xd1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l3_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l3_reg_t;

#define SBB_PCR_L3_DEFAULT (0x00000000U)
#define SBB_PCR_L3_RD_MASK (0xffffffffU)
#define SBB_PCR_L3_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L3_VAL_BF_OFF ( 0)
#define SBB_PCR_L3_VAL_BF_WID (32)
#define SBB_PCR_L3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H4_REG register description at address offset 0xd20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h4_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h4_reg_t;

#define SBB_PCR_H4_DEFAULT (0x00000000U)
#define SBB_PCR_H4_RD_MASK (0xffffffffU)
#define SBB_PCR_H4_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H4_VAL_BF_OFF ( 0)
#define SBB_PCR_H4_VAL_BF_WID (32)
#define SBB_PCR_H4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L4_REG register description at address offset 0xd24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l4_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l4_reg_t;

#define SBB_PCR_L4_DEFAULT (0x00000000U)
#define SBB_PCR_L4_RD_MASK (0xffffffffU)
#define SBB_PCR_L4_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L4_VAL_BF_OFF ( 0)
#define SBB_PCR_L4_VAL_BF_WID (32)
#define SBB_PCR_L4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H5_REG register description at address offset 0xd28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h5_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h5_reg_t;

#define SBB_PCR_H5_DEFAULT (0x00000000U)
#define SBB_PCR_H5_RD_MASK (0xffffffffU)
#define SBB_PCR_H5_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H5_VAL_BF_OFF ( 0)
#define SBB_PCR_H5_VAL_BF_WID (32)
#define SBB_PCR_H5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L5_REG register description at address offset 0xd2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l5_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l5_reg_t;

#define SBB_PCR_L5_DEFAULT (0x00000000U)
#define SBB_PCR_L5_RD_MASK (0xffffffffU)
#define SBB_PCR_L5_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L5_VAL_BF_OFF ( 0)
#define SBB_PCR_L5_VAL_BF_WID (32)
#define SBB_PCR_L5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H6_REG register description at address offset 0xd30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h6_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h6_reg_t;

#define SBB_PCR_H6_DEFAULT (0x00000000U)
#define SBB_PCR_H6_RD_MASK (0xffffffffU)
#define SBB_PCR_H6_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H6_VAL_BF_OFF ( 0)
#define SBB_PCR_H6_VAL_BF_WID (32)
#define SBB_PCR_H6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L6_REG register description at address offset 0xd34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l6_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l6_reg_t;

#define SBB_PCR_L6_DEFAULT (0x00000000U)
#define SBB_PCR_L6_RD_MASK (0xffffffffU)
#define SBB_PCR_L6_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L6_VAL_BF_OFF ( 0)
#define SBB_PCR_L6_VAL_BF_WID (32)
#define SBB_PCR_L6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H7_REG register description at address offset 0xd38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h7_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h7_reg_t;

#define SBB_PCR_H7_DEFAULT (0x00000000U)
#define SBB_PCR_H7_RD_MASK (0xffffffffU)
#define SBB_PCR_H7_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H7_VAL_BF_OFF ( 0)
#define SBB_PCR_H7_VAL_BF_WID (32)
#define SBB_PCR_H7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L7_REG register description at address offset 0xd3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l7_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l7_reg_t;

#define SBB_PCR_L7_DEFAULT (0x00000000U)
#define SBB_PCR_L7_RD_MASK (0xffffffffU)
#define SBB_PCR_L7_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L7_VAL_BF_OFF ( 0)
#define SBB_PCR_L7_VAL_BF_WID (32)
#define SBB_PCR_L7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_H8_REG register description at address offset 0xd40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_h8_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_h8_reg_t;

#define SBB_PCR_H8_DEFAULT (0x00000000U)
#define SBB_PCR_H8_RD_MASK (0xffffffffU)
#define SBB_PCR_H8_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_H8_VAL_BF_OFF ( 0)
#define SBB_PCR_H8_VAL_BF_WID (32)
#define SBB_PCR_H8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_H8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PCR_L8_REG register description at address offset 0xd44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pcr_l8_reg
  * Measurement Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_pcr_l8_reg_t;

#define SBB_PCR_L8_DEFAULT (0x00000000U)
#define SBB_PCR_L8_RD_MASK (0xffffffffU)
#define SBB_PCR_L8_WR_MASK (0x00000000U)


///< Value of parameter
#define SBB_PCR_L8_VAL_BF_OFF ( 0)
#define SBB_PCR_L8_VAL_BF_WID (32)
#define SBB_PCR_L8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PCR_L8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_INT_STS_REG register description at address offset 0xe04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/int_sts_reg
  * Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t DONE : 1;
    ///< Done.
    ///< AccessType="RW/1C/V/P" BitOffset="0" ResetValue="0x0"
    uint32_t NEED_UPDATE_VERSION : 1;
    ///< Version number update needed
    ///< AccessType="RW/1C/V/P" BitOffset="1" ResetValue="0x0"
    uint32_t HW_ERR : 1;
    ///< HW error
    ///< AccessType="RW/1C/V/P" BitOffset="2" ResetValue="0x0"
    uint32_t INVALID_SBKEK : 1;
    ///< Secure Boot Key Encryption Key is invalid
    ///< AccessType="RW/1C/V/P" BitOffset="3" ResetValue="0x0"
    uint32_t INVALID_SRK : 1;
    ///< Storage Root Key is invalid
    ///< AccessType="RW/1C/V/P" BitOffset="4" ResetValue="0x0"
    uint32_t SECURE_BOOT_DISABLED : 1;
    ///< Secure boot is disabled
    ///< AccessType="RW/1C/V/P" BitOffset="5" ResetValue="0x0"
    uint32_t INVALID_FUNCTION : 1;
    ///< Invalid function
    ///< AccessType="RW/1C/V/P" BitOffset="6" ResetValue="0x0"
    uint32_t INVALID_OBJECT_ID : 1;
    ///< Invalid Object ID
    ///< AccessType="RW/1C/V/P" BitOffset="7" ResetValue="0x0"
    uint32_t INVALID_LENGTH : 1;
    ///< Invalid length
    ///< AccessType="RW/1C/V/P" BitOffset="8" ResetValue="0x0"
    uint32_t INVALID_PADDING : 1;
    ///< Invalid padding
    ///< AccessType="RW/1C/V/P" BitOffset="9" ResetValue="0x0"
    uint32_t UNALIGNED_DATA : 1;
    ///< Unaligned data
    ///< AccessType="RW/1C/V/P" BitOffset="10" ResetValue="0x0"
    uint32_t SDO_AUTH_FAILED : 1;
    ///< SDO authentication failed
    ///< AccessType="RW/1C/V/P" BitOffset="11" ResetValue="0x0"
    uint32_t INVALID_BOOT_IMAGE : 1;
    ///< Invalid boot image or Invalid ECDSA signature
    ///< AccessType="RW/1C/V/P" BitOffset="12" ResetValue="0x0"
    uint32_t SPDM_ACCESS_VIOLATION : 1;
    ///< SPDM access violation
    ///< AccessType="RW/1C/V/P" BitOffset="13" ResetValue="0x0"
    uint32_t INVALID_VERSION_NUMBER : 1;
    ///< Invalid version number
    ///< AccessType="RW/1C/V/P" BitOffset="14" ResetValue="0x0"
    uint32_t UNALIGNED_ADDR : 1;
    ///< Unaligned address was specified
    ///< AccessType="RW/1C/V/P" BitOffset="15" ResetValue="0x0"
    uint32_t AUTH_DONE : 1;
    ///< Authentication DONE
    ///< AccessType="RW/1C/V/P" BitOffset="16" ResetValue="0x0"
    uint32_t SELF_TEST_FAILED : 1;
    ///< SBB self test failed
    ///< AccessType="RW/1C/V/P" BitOffset="17" ResetValue="0x0"
    uint32_t INVALID_KEY_ID : 1;
    ///< Invalid key ID
    ///< AccessType="RW/1C/V/P" BitOffset="18" ResetValue="0x0"
    uint32_t INVALID_CRYPTO_CFG : 1;
    ///< Invalid crypto configuration
    ///< AccessType="RW/1C/V/P" BitOffset="19" ResetValue="0x0"
    uint32_t INVALID_CRYPTO_MODE : 1;
    ///< Crypto mode is not supported
    ///< AccessType="RW/1C/V/P" BitOffset="20" ResetValue="0x0"
    uint32_t INVALID_KEY : 1;
    ///< Invalid key or key parameters
    ///< AccessType="RW/1C/V/P" BitOffset="21" ResetValue="0x0"
    uint32_t INVALID_HASH_LEN : 1;
    ///< Invalid hash length
    ///< AccessType="RW/1C/V/P" BitOffset="22" ResetValue="0x0"
    uint32_t INVALID_KAKPUB : 1;
    ///< Invalid KAK
    ///< AccessType="RW/1C/V/P" BitOffset="23" ResetValue="0x0"
    uint32_t CANNOT_GEN_SIG : 1;
    ///< Signature generation function timeout
    ///< AccessType="RW/1C/V/P" BitOffset="24" ResetValue="0x0"
    uint32_t INVALID_KEY_TYPE : 1;
    ///< Invalid key object type
    ///< AccessType="RW/1C/V/P" BitOffset="25" ResetValue="0x0"
    uint32_t EXPIRED_KEY : 1;
    ///< Expired key object
    ///< AccessType="RW/1C/V/P" BitOffset="26" ResetValue="0x0"
    uint32_t TOO_MANY_INVOCATIONS : 1;
    ///< Function invocked too many times
    ///< AccessType="RW/1C/V/P" BitOffset="27" ResetValue="0x0"
    uint32_t NOISE_SOURCE_ERROR : 1;
    ///< Noise source error
    ///< AccessType="RW/1C/V/P" BitOffset="28" ResetValue="0x0"
    uint32_t AXI_READ_OR_WRITE_ERROR : 1;
    ///< Error while reading or writing data
    ///< AccessType="RW/1C/V/P" BitOffset="29" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RW/1C/V/P" BitOffset="30" ResetValue="0x0"
    uint32_t MORE_DATA_NEEEDED : 1;
    ///< More function calls neeed to provide additiona data
    ///< AccessType="RW/1C/V/P" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_int_sts_reg_t;

#define SBB_INT_STS_DEFAULT (0x00000000U)
#define SBB_INT_STS_RD_MASK (0xffffffffU)
#define SBB_INT_STS_WR_MASK (0xffffffffU)


///< Done.
#define SBB_INT_STS_DONE_BF_OFF ( 0)
#define SBB_INT_STS_DONE_BF_WID ( 1)
#define SBB_INT_STS_DONE_BF_MSK (0x00000001)
#define SBB_INT_STS_DONE_BF_DEF (0x00000000)

///< Version number update needed
#define SBB_INT_STS_NEED_UPDATE_VER_BF_OFF ( 1)
#define SBB_INT_STS_NEED_UPDATE_VER_BF_WID ( 1)
#define SBB_INT_STS_NEED_UPDATE_VER_BF_MSK (0x00000002)
#define SBB_INT_STS_NEED_UPDATE_VER_BF_DEF (0x00000000)

///< HW error
#define SBB_INT_STS_HW_ERR_BF_OFF ( 2)
#define SBB_INT_STS_HW_ERR_BF_WID ( 1)
#define SBB_INT_STS_HW_ERR_BF_MSK (0x00000004)
#define SBB_INT_STS_HW_ERR_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key is invalid
#define SBB_INT_STS_INVALID_SBKEK_BF_OFF ( 3)
#define SBB_INT_STS_INVALID_SBKEK_BF_WID ( 1)
#define SBB_INT_STS_INVALID_SBKEK_BF_MSK (0x00000008)
#define SBB_INT_STS_INVALID_SBKEK_BF_DEF (0x00000000)

///< Storage Root Key is invalid
#define SBB_INT_STS_INVALID_SRK_BF_OFF ( 4)
#define SBB_INT_STS_INVALID_SRK_BF_WID ( 1)
#define SBB_INT_STS_INVALID_SRK_BF_MSK (0x00000010)
#define SBB_INT_STS_INVALID_SRK_BF_DEF (0x00000000)

///< Secure boot is disabled
#define SBB_INT_STS_SECURE_BOOT_DISD_BF_OFF ( 5)
#define SBB_INT_STS_SECURE_BOOT_DISD_BF_WID ( 1)
#define SBB_INT_STS_SECURE_BOOT_DISD_BF_MSK (0x00000020)
#define SBB_INT_STS_SECURE_BOOT_DISD_BF_DEF (0x00000000)

///< Invalid function
#define SBB_INT_STS_INVALID_FUNCTION_BF_OFF ( 6)
#define SBB_INT_STS_INVALID_FUNCTION_BF_WID ( 1)
#define SBB_INT_STS_INVALID_FUNCTION_BF_MSK (0x00000040)
#define SBB_INT_STS_INVALID_FUNCTION_BF_DEF (0x00000000)

///< Invalid Object ID
#define SBB_INT_STS_INVALID_OBJECT_ID_BF_OFF ( 7)
#define SBB_INT_STS_INVALID_OBJECT_ID_BF_WID ( 1)
#define SBB_INT_STS_INVALID_OBJECT_ID_BF_MSK (0x00000080)
#define SBB_INT_STS_INVALID_OBJECT_ID_BF_DEF (0x00000000)

///< Invalid length
#define SBB_INT_STS_INVALID_LENGTH_BF_OFF ( 8)
#define SBB_INT_STS_INVALID_LENGTH_BF_WID ( 1)
#define SBB_INT_STS_INVALID_LENGTH_BF_MSK (0x00000100)
#define SBB_INT_STS_INVALID_LENGTH_BF_DEF (0x00000000)

///< Invalid padding
#define SBB_INT_STS_INVALID_PADDING_BF_OFF ( 9)
#define SBB_INT_STS_INVALID_PADDING_BF_WID ( 1)
#define SBB_INT_STS_INVALID_PADDING_BF_MSK (0x00000200)
#define SBB_INT_STS_INVALID_PADDING_BF_DEF (0x00000000)

///< Unaligned data
#define SBB_INT_STS_UNALIGNED_DATA_BF_OFF (10)
#define SBB_INT_STS_UNALIGNED_DATA_BF_WID ( 1)
#define SBB_INT_STS_UNALIGNED_DATA_BF_MSK (0x00000400)
#define SBB_INT_STS_UNALIGNED_DATA_BF_DEF (0x00000000)

///< SDO authentication failed
#define SBB_INT_STS_SDO_AUTH_FAILED_BF_OFF (11)
#define SBB_INT_STS_SDO_AUTH_FAILED_BF_WID ( 1)
#define SBB_INT_STS_SDO_AUTH_FAILED_BF_MSK (0x00000800)
#define SBB_INT_STS_SDO_AUTH_FAILED_BF_DEF (0x00000000)

///< Invalid boot image or Invalid ECDSA signature
#define SBB_INT_STS_INVALID_BOOT_IMAGE_BF_OFF (12)
#define SBB_INT_STS_INVALID_BOOT_IMAGE_BF_WID ( 1)
#define SBB_INT_STS_INVALID_BOOT_IMAGE_BF_MSK (0x00001000)
#define SBB_INT_STS_INVALID_BOOT_IMAGE_BF_DEF (0x00000000)

///< SPDM access violation
#define SBB_INT_STS_SPDM_ACCESS_VIOLATION_BF_OFF (13)
#define SBB_INT_STS_SPDM_ACCESS_VIOLATION_BF_WID ( 1)
#define SBB_INT_STS_SPDM_ACCESS_VIOLATION_BF_MSK (0x00002000)
#define SBB_INT_STS_SPDM_ACCESS_VIOLATION_BF_DEF (0x00000000)

///< Invalid version number
#define SBB_INT_STS_INVALID_VER_NUMBER_BF_OFF (14)
#define SBB_INT_STS_INVALID_VER_NUMBER_BF_WID ( 1)
#define SBB_INT_STS_INVALID_VER_NUMBER_BF_MSK (0x00004000)
#define SBB_INT_STS_INVALID_VER_NUMBER_BF_DEF (0x00000000)

///< Unaligned address was specified
#define SBB_INT_STS_UNALIGNED_ADDR_BF_OFF (15)
#define SBB_INT_STS_UNALIGNED_ADDR_BF_WID ( 1)
#define SBB_INT_STS_UNALIGNED_ADDR_BF_MSK (0x00008000)
#define SBB_INT_STS_UNALIGNED_ADDR_BF_DEF (0x00000000)

///< Authentication DONE
#define SBB_INT_STS_AUTH_DONE_BF_OFF (16)
#define SBB_INT_STS_AUTH_DONE_BF_WID ( 1)
#define SBB_INT_STS_AUTH_DONE_BF_MSK (0x00010000)
#define SBB_INT_STS_AUTH_DONE_BF_DEF (0x00000000)

///< SBB self test failed
#define SBB_INT_STS_SELF_TEST_FAILED_BF_OFF (17)
#define SBB_INT_STS_SELF_TEST_FAILED_BF_WID ( 1)
#define SBB_INT_STS_SELF_TEST_FAILED_BF_MSK (0x00020000)
#define SBB_INT_STS_SELF_TEST_FAILED_BF_DEF (0x00000000)

///< Invalid key ID
#define SBB_INT_STS_INVALID_KEY_ID_BF_OFF (18)
#define SBB_INT_STS_INVALID_KEY_ID_BF_WID ( 1)
#define SBB_INT_STS_INVALID_KEY_ID_BF_MSK (0x00040000)
#define SBB_INT_STS_INVALID_KEY_ID_BF_DEF (0x00000000)

///< Invalid crypto configuration
#define SBB_INT_STS_INVALID_CRYPTO_CFG_BF_OFF (19)
#define SBB_INT_STS_INVALID_CRYPTO_CFG_BF_WID ( 1)
#define SBB_INT_STS_INVALID_CRYPTO_CFG_BF_MSK (0x00080000)
#define SBB_INT_STS_INVALID_CRYPTO_CFG_BF_DEF (0x00000000)

///< Crypto mode is not supported
#define SBB_INT_STS_INVALID_CRYPTO_MODE_BF_OFF (20)
#define SBB_INT_STS_INVALID_CRYPTO_MODE_BF_WID ( 1)
#define SBB_INT_STS_INVALID_CRYPTO_MODE_BF_MSK (0x00100000)
#define SBB_INT_STS_INVALID_CRYPTO_MODE_BF_DEF (0x00000000)

///< Invalid key or key parameters
#define SBB_INT_STS_INVALID_KEY_BF_OFF (21)
#define SBB_INT_STS_INVALID_KEY_BF_WID ( 1)
#define SBB_INT_STS_INVALID_KEY_BF_MSK (0x00200000)
#define SBB_INT_STS_INVALID_KEY_BF_DEF (0x00000000)

///< Invalid hash length
#define SBB_INT_STS_INVALID_HASH_LEN_BF_OFF (22)
#define SBB_INT_STS_INVALID_HASH_LEN_BF_WID ( 1)
#define SBB_INT_STS_INVALID_HASH_LEN_BF_MSK (0x00400000)
#define SBB_INT_STS_INVALID_HASH_LEN_BF_DEF (0x00000000)

///< Invalid KAK
#define SBB_INT_STS_INVALID_KAKPUB_BF_OFF (23)
#define SBB_INT_STS_INVALID_KAKPUB_BF_WID ( 1)
#define SBB_INT_STS_INVALID_KAKPUB_BF_MSK (0x00800000)
#define SBB_INT_STS_INVALID_KAKPUB_BF_DEF (0x00000000)

///< Signature generation function timeout
#define SBB_INT_STS_CANNOT_GEN_SIG_BF_OFF (24)
#define SBB_INT_STS_CANNOT_GEN_SIG_BF_WID ( 1)
#define SBB_INT_STS_CANNOT_GEN_SIG_BF_MSK (0x01000000)
#define SBB_INT_STS_CANNOT_GEN_SIG_BF_DEF (0x00000000)

///< Invalid key object type
#define SBB_INT_STS_INVALID_KEY_TYPE_BF_OFF (25)
#define SBB_INT_STS_INVALID_KEY_TYPE_BF_WID ( 1)
#define SBB_INT_STS_INVALID_KEY_TYPE_BF_MSK (0x02000000)
#define SBB_INT_STS_INVALID_KEY_TYPE_BF_DEF (0x00000000)

///< Expired key object
#define SBB_INT_STS_EXPIRED_KEY_BF_OFF (26)
#define SBB_INT_STS_EXPIRED_KEY_BF_WID ( 1)
#define SBB_INT_STS_EXPIRED_KEY_BF_MSK (0x04000000)
#define SBB_INT_STS_EXPIRED_KEY_BF_DEF (0x00000000)

///< Function invocked too many times
#define SBB_INT_STS_TOO_MANY_INVOCATIONS_BF_OFF (27)
#define SBB_INT_STS_TOO_MANY_INVOCATIONS_BF_WID ( 1)
#define SBB_INT_STS_TOO_MANY_INVOCATIONS_BF_MSK (0x08000000)
#define SBB_INT_STS_TOO_MANY_INVOCATIONS_BF_DEF (0x00000000)

///< Noise source error
#define SBB_INT_STS_NOISE_SOURCE_ERR_BF_OFF (28)
#define SBB_INT_STS_NOISE_SOURCE_ERR_BF_WID ( 1)
#define SBB_INT_STS_NOISE_SOURCE_ERR_BF_MSK (0x10000000)
#define SBB_INT_STS_NOISE_SOURCE_ERR_BF_DEF (0x00000000)

///< Error while reading or writing data
#define SBB_INT_STS_AXI_READ_OR_WRITE_ERR_BF_OFF (29)
#define SBB_INT_STS_AXI_READ_OR_WRITE_ERR_BF_WID ( 1)
#define SBB_INT_STS_AXI_READ_OR_WRITE_ERR_BF_MSK (0x20000000)
#define SBB_INT_STS_AXI_READ_OR_WRITE_ERR_BF_DEF (0x00000000)

///< Reserved
#define SBB_INT_STS_RESERVED0_BF_OFF (30)
#define SBB_INT_STS_RESERVED0_BF_WID ( 1)
#define SBB_INT_STS_RESERVED0_BF_MSK (0x40000000)
#define SBB_INT_STS_RESERVED0_BF_DEF (0x00000000)

///< More function calls neeed to provide additiona data
#define SBB_INT_STS_MORE_DATA_NEEEDED_BF_OFF (31)
#define SBB_INT_STS_MORE_DATA_NEEEDED_BF_WID ( 1)
#define SBB_INT_STS_MORE_DATA_NEEEDED_BF_MSK (0x80000000)
#define SBB_INT_STS_MORE_DATA_NEEEDED_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_INT_EN_REG register description at address offset 0xe0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/int_en_reg
  * Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t DONE : 1;
    ///< Done.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t NEED_UPDATE_VERSION : 1;
    ///< Version number update needed
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t HW_ERR : 1;
    ///< HW error
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INVALID_SBKEK : 1;
    ///< Secure Boot Key Encryption Key is invalid
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t INVALID_SRK : 1;
    ///< Storage Root Key is invalid
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SECURE_BOOT_DISABLED : 1;
    ///< Secure boot is disabled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INVALID_FUNCTION : 1;
    ///< Invalid function
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INVALID_OBJECT_ID : 1;
    ///< Invalid Object ID
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INVALID_LENGTH : 1;
    ///< Invalid length
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INVALID_PADDING : 1;
    ///< Invalid padding
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNALIGNED_DATA : 1;
    ///< Unaligned data
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t SDO_AUTH_FAILED : 1;
    ///< SDO authentication failed
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INVALID_BOOT_IMAGE : 1;
    ///< Invalid boot image or Invalid ECDSA signature
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t SPDM_ACCESS_VIOLATION : 1;
    ///< SPDM access violation
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t INVALID_VERSION_NUMBER : 1;
    ///< Invalid version number
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t UNALIGNED_ADDR : 1;
    ///< Unaligned address was specified
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t AUTH_DONE : 1;
    ///< Authentication DONE
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t SELF_TEST_FAILED : 1;
    ///< SBB self test failed
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t INVALID_KEY_ID : 1;
    ///< Invalid key ID
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t INVALID_CRYPTO_CFG : 1;
    ///< Invalid crypto configuration
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t INVALID_CRYPTO_MODE : 1;
    ///< Crypto mode is not supported
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INVALID_KEY : 1;
    ///< Invalid key or key parameters
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t INVALID_HASH_LEN : 1;
    ///< Invalid hash length
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t INVALID_KAKPUB : 1;
    ///< Invalid KAK
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CANNOT_GEN_SIG : 1;
    ///< Signature generation function timeout
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t INVALID_KEY_TYPE : 1;
    ///< Invalid key object type
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t EXPIRED_KEY : 1;
    ///< Expired key object
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t TOO_MANY_INVOCATIONS : 1;
    ///< Function invocked too many times
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t NOISE_SOURCE_ERROR : 1;
    ///< Noise source error
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t AXI_READ_OR_WRITE_ERROR : 1;
    ///< Error while reading or writing data
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t MORE_DATA_NEEEDED : 1;
    ///< More function calls neeed to provide additiona data
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_int_en_reg_t;

#define SBB_INT_EN_DEFAULT (0x00000000U)
#define SBB_INT_EN_RD_MASK (0xffffffffU)
#define SBB_INT_EN_WR_MASK (0xffffffffU)


///< Done.
#define SBB_INT_EN_DONE_BF_OFF ( 0)
#define SBB_INT_EN_DONE_BF_WID ( 1)
#define SBB_INT_EN_DONE_BF_MSK (0x00000001)
#define SBB_INT_EN_DONE_BF_DEF (0x00000000)

///< Version number update needed
#define SBB_INT_EN_NEED_UPDATE_VER_BF_OFF ( 1)
#define SBB_INT_EN_NEED_UPDATE_VER_BF_WID ( 1)
#define SBB_INT_EN_NEED_UPDATE_VER_BF_MSK (0x00000002)
#define SBB_INT_EN_NEED_UPDATE_VER_BF_DEF (0x00000000)

///< HW error
#define SBB_INT_EN_HW_ERR_BF_OFF ( 2)
#define SBB_INT_EN_HW_ERR_BF_WID ( 1)
#define SBB_INT_EN_HW_ERR_BF_MSK (0x00000004)
#define SBB_INT_EN_HW_ERR_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key is invalid
#define SBB_INT_EN_INVALID_SBKEK_BF_OFF ( 3)
#define SBB_INT_EN_INVALID_SBKEK_BF_WID ( 1)
#define SBB_INT_EN_INVALID_SBKEK_BF_MSK (0x00000008)
#define SBB_INT_EN_INVALID_SBKEK_BF_DEF (0x00000000)

///< Storage Root Key is invalid
#define SBB_INT_EN_INVALID_SRK_BF_OFF ( 4)
#define SBB_INT_EN_INVALID_SRK_BF_WID ( 1)
#define SBB_INT_EN_INVALID_SRK_BF_MSK (0x00000010)
#define SBB_INT_EN_INVALID_SRK_BF_DEF (0x00000000)

///< Secure boot is disabled
#define SBB_INT_EN_SECURE_BOOT_DISD_BF_OFF ( 5)
#define SBB_INT_EN_SECURE_BOOT_DISD_BF_WID ( 1)
#define SBB_INT_EN_SECURE_BOOT_DISD_BF_MSK (0x00000020)
#define SBB_INT_EN_SECURE_BOOT_DISD_BF_DEF (0x00000000)

///< Invalid function
#define SBB_INT_EN_INVALID_FUNCTION_BF_OFF ( 6)
#define SBB_INT_EN_INVALID_FUNCTION_BF_WID ( 1)
#define SBB_INT_EN_INVALID_FUNCTION_BF_MSK (0x00000040)
#define SBB_INT_EN_INVALID_FUNCTION_BF_DEF (0x00000000)

///< Invalid Object ID
#define SBB_INT_EN_INVALID_OBJECT_ID_BF_OFF ( 7)
#define SBB_INT_EN_INVALID_OBJECT_ID_BF_WID ( 1)
#define SBB_INT_EN_INVALID_OBJECT_ID_BF_MSK (0x00000080)
#define SBB_INT_EN_INVALID_OBJECT_ID_BF_DEF (0x00000000)

///< Invalid length
#define SBB_INT_EN_INVALID_LENGTH_BF_OFF ( 8)
#define SBB_INT_EN_INVALID_LENGTH_BF_WID ( 1)
#define SBB_INT_EN_INVALID_LENGTH_BF_MSK (0x00000100)
#define SBB_INT_EN_INVALID_LENGTH_BF_DEF (0x00000000)

///< Invalid padding
#define SBB_INT_EN_INVALID_PADDING_BF_OFF ( 9)
#define SBB_INT_EN_INVALID_PADDING_BF_WID ( 1)
#define SBB_INT_EN_INVALID_PADDING_BF_MSK (0x00000200)
#define SBB_INT_EN_INVALID_PADDING_BF_DEF (0x00000000)

///< Unaligned data
#define SBB_INT_EN_UNALIGNED_DATA_BF_OFF (10)
#define SBB_INT_EN_UNALIGNED_DATA_BF_WID ( 1)
#define SBB_INT_EN_UNALIGNED_DATA_BF_MSK (0x00000400)
#define SBB_INT_EN_UNALIGNED_DATA_BF_DEF (0x00000000)

///< SDO authentication failed
#define SBB_INT_EN_SDO_AUTH_FAILED_BF_OFF (11)
#define SBB_INT_EN_SDO_AUTH_FAILED_BF_WID ( 1)
#define SBB_INT_EN_SDO_AUTH_FAILED_BF_MSK (0x00000800)
#define SBB_INT_EN_SDO_AUTH_FAILED_BF_DEF (0x00000000)

///< Invalid boot image or Invalid ECDSA signature
#define SBB_INT_EN_INVALID_BOOT_IMAGE_BF_OFF (12)
#define SBB_INT_EN_INVALID_BOOT_IMAGE_BF_WID ( 1)
#define SBB_INT_EN_INVALID_BOOT_IMAGE_BF_MSK (0x00001000)
#define SBB_INT_EN_INVALID_BOOT_IMAGE_BF_DEF (0x00000000)

///< SPDM access violation
#define SBB_INT_EN_SPDM_ACCESS_VIOLATION_BF_OFF (13)
#define SBB_INT_EN_SPDM_ACCESS_VIOLATION_BF_WID ( 1)
#define SBB_INT_EN_SPDM_ACCESS_VIOLATION_BF_MSK (0x00002000)
#define SBB_INT_EN_SPDM_ACCESS_VIOLATION_BF_DEF (0x00000000)

///< Invalid version number
#define SBB_INT_EN_INVALID_VER_NUMBER_BF_OFF (14)
#define SBB_INT_EN_INVALID_VER_NUMBER_BF_WID ( 1)
#define SBB_INT_EN_INVALID_VER_NUMBER_BF_MSK (0x00004000)
#define SBB_INT_EN_INVALID_VER_NUMBER_BF_DEF (0x00000000)

///< Unaligned address was specified
#define SBB_INT_EN_UNALIGNED_ADDR_BF_OFF (15)
#define SBB_INT_EN_UNALIGNED_ADDR_BF_WID ( 1)
#define SBB_INT_EN_UNALIGNED_ADDR_BF_MSK (0x00008000)
#define SBB_INT_EN_UNALIGNED_ADDR_BF_DEF (0x00000000)

///< Authentication DONE
#define SBB_INT_EN_AUTH_DONE_BF_OFF (16)
#define SBB_INT_EN_AUTH_DONE_BF_WID ( 1)
#define SBB_INT_EN_AUTH_DONE_BF_MSK (0x00010000)
#define SBB_INT_EN_AUTH_DONE_BF_DEF (0x00000000)

///< SBB self test failed
#define SBB_INT_EN_SELF_TEST_FAILED_BF_OFF (17)
#define SBB_INT_EN_SELF_TEST_FAILED_BF_WID ( 1)
#define SBB_INT_EN_SELF_TEST_FAILED_BF_MSK (0x00020000)
#define SBB_INT_EN_SELF_TEST_FAILED_BF_DEF (0x00000000)

///< Invalid key ID
#define SBB_INT_EN_INVALID_KEY_ID_BF_OFF (18)
#define SBB_INT_EN_INVALID_KEY_ID_BF_WID ( 1)
#define SBB_INT_EN_INVALID_KEY_ID_BF_MSK (0x00040000)
#define SBB_INT_EN_INVALID_KEY_ID_BF_DEF (0x00000000)

///< Invalid crypto configuration
#define SBB_INT_EN_INVALID_CRYPTO_CFG_BF_OFF (19)
#define SBB_INT_EN_INVALID_CRYPTO_CFG_BF_WID ( 1)
#define SBB_INT_EN_INVALID_CRYPTO_CFG_BF_MSK (0x00080000)
#define SBB_INT_EN_INVALID_CRYPTO_CFG_BF_DEF (0x00000000)

///< Crypto mode is not supported
#define SBB_INT_EN_INVALID_CRYPTO_MODE_BF_OFF (20)
#define SBB_INT_EN_INVALID_CRYPTO_MODE_BF_WID ( 1)
#define SBB_INT_EN_INVALID_CRYPTO_MODE_BF_MSK (0x00100000)
#define SBB_INT_EN_INVALID_CRYPTO_MODE_BF_DEF (0x00000000)

///< Invalid key or key parameters
#define SBB_INT_EN_INVALID_KEY_BF_OFF (21)
#define SBB_INT_EN_INVALID_KEY_BF_WID ( 1)
#define SBB_INT_EN_INVALID_KEY_BF_MSK (0x00200000)
#define SBB_INT_EN_INVALID_KEY_BF_DEF (0x00000000)

///< Invalid hash length
#define SBB_INT_EN_INVALID_HASH_LEN_BF_OFF (22)
#define SBB_INT_EN_INVALID_HASH_LEN_BF_WID ( 1)
#define SBB_INT_EN_INVALID_HASH_LEN_BF_MSK (0x00400000)
#define SBB_INT_EN_INVALID_HASH_LEN_BF_DEF (0x00000000)

///< Invalid KAK
#define SBB_INT_EN_INVALID_KAKPUB_BF_OFF (23)
#define SBB_INT_EN_INVALID_KAKPUB_BF_WID ( 1)
#define SBB_INT_EN_INVALID_KAKPUB_BF_MSK (0x00800000)
#define SBB_INT_EN_INVALID_KAKPUB_BF_DEF (0x00000000)

///< Signature generation function timeout
#define SBB_INT_EN_CANNOT_GEN_SIG_BF_OFF (24)
#define SBB_INT_EN_CANNOT_GEN_SIG_BF_WID ( 1)
#define SBB_INT_EN_CANNOT_GEN_SIG_BF_MSK (0x01000000)
#define SBB_INT_EN_CANNOT_GEN_SIG_BF_DEF (0x00000000)

///< Invalid key object type
#define SBB_INT_EN_INVALID_KEY_TYPE_BF_OFF (25)
#define SBB_INT_EN_INVALID_KEY_TYPE_BF_WID ( 1)
#define SBB_INT_EN_INVALID_KEY_TYPE_BF_MSK (0x02000000)
#define SBB_INT_EN_INVALID_KEY_TYPE_BF_DEF (0x00000000)

///< Expired key object
#define SBB_INT_EN_EXPIRED_KEY_BF_OFF (26)
#define SBB_INT_EN_EXPIRED_KEY_BF_WID ( 1)
#define SBB_INT_EN_EXPIRED_KEY_BF_MSK (0x04000000)
#define SBB_INT_EN_EXPIRED_KEY_BF_DEF (0x00000000)

///< Function invocked too many times
#define SBB_INT_EN_TOO_MANY_INVOCATIONS_BF_OFF (27)
#define SBB_INT_EN_TOO_MANY_INVOCATIONS_BF_WID ( 1)
#define SBB_INT_EN_TOO_MANY_INVOCATIONS_BF_MSK (0x08000000)
#define SBB_INT_EN_TOO_MANY_INVOCATIONS_BF_DEF (0x00000000)

///< Noise source error
#define SBB_INT_EN_NOISE_SOURCE_ERR_BF_OFF (28)
#define SBB_INT_EN_NOISE_SOURCE_ERR_BF_WID ( 1)
#define SBB_INT_EN_NOISE_SOURCE_ERR_BF_MSK (0x10000000)
#define SBB_INT_EN_NOISE_SOURCE_ERR_BF_DEF (0x00000000)

///< Error while reading or writing data
#define SBB_INT_EN_AXI_READ_OR_WRITE_ERR_BF_OFF (29)
#define SBB_INT_EN_AXI_READ_OR_WRITE_ERR_BF_WID ( 1)
#define SBB_INT_EN_AXI_READ_OR_WRITE_ERR_BF_MSK (0x20000000)
#define SBB_INT_EN_AXI_READ_OR_WRITE_ERR_BF_DEF (0x00000000)

///< Reserved
#define SBB_INT_EN_RESERVED0_BF_OFF (30)
#define SBB_INT_EN_RESERVED0_BF_WID ( 1)
#define SBB_INT_EN_RESERVED0_BF_MSK (0x40000000)
#define SBB_INT_EN_RESERVED0_BF_DEF (0x00000000)

///< More function calls neeed to provide additiona data
#define SBB_INT_EN_MORE_DATA_NEEEDED_BF_OFF (31)
#define SBB_INT_EN_MORE_DATA_NEEEDED_BF_WID ( 1)
#define SBB_INT_EN_MORE_DATA_NEEEDED_BF_MSK (0x80000000)
#define SBB_INT_EN_MORE_DATA_NEEEDED_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_INT_FRC_REG register description at address offset 0xe14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/int_frc_reg
  * Interrupt Status Test Register
  */

typedef union {
  struct {
    uint32_t DONE : 1;
    ///< Done.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t NEED_UPDATE_VERSION : 1;
    ///< Version number update needed
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t HW_ERR : 1;
    ///< HW error
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t INVALID_SBKEK : 1;
    ///< Secure Boot Key Encryption Key is invalid
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t INVALID_SRK : 1;
    ///< Storage Root Key is invalid
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SECURE_BOOT_DISABLED : 1;
    ///< Secure boot is disabled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t INVALID_FUNCTION : 1;
    ///< Invalid function
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t INVALID_OBJECT_ID : 1;
    ///< Invalid Object ID
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t INVALID_LENGTH : 1;
    ///< Invalid length
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t INVALID_PADDING : 1;
    ///< Invalid padding
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNALIGNED_DATA : 1;
    ///< Unaligned data
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t SDO_AUTH_FAILED : 1;
    ///< SDO authentication failed
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t INVALID_BOOT_IMAGE : 1;
    ///< Invalid boot image or Invalid ECDSA signature
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t SPDM_ACCESS_VIOLATION : 1;
    ///< SPDM access violation
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t INVALID_VERSION_NUMBER : 1;
    ///< Invalid version number
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t UNALIGNED_ADDR : 1;
    ///< Unaligned address was specified
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t AUTH_DONE : 1;
    ///< Authentication DONE
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t SELF_TEST_FAILED : 1;
    ///< SBB self test failed
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t INVALID_KEY_ID : 1;
    ///< Invalid key ID
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t INVALID_CRYPTO_CFG : 1;
    ///< Invalid crypto configuration
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t INVALID_CRYPTO_MODE : 1;
    ///< Crypto mode is not supported
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t INVALID_KEY : 1;
    ///< Invalid key or key parameters
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t INVALID_HASH_LEN : 1;
    ///< Invalid hash length
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t INVALID_KAKPUB : 1;
    ///< Invalid KAK
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CANNOT_GEN_SIG : 1;
    ///< Signature generation function timeout
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t INVALID_KEY_TYPE : 1;
    ///< Invalid key object type
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t EXPIRED_KEY : 1;
    ///< Expired key object
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t TOO_MANY_INVOCATIONS : 1;
    ///< Function invocked too many times
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t NOISE_SOURCE_ERROR : 1;
    ///< Noise source error
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t AXI_READ_OR_WRITE_ERROR : 1;
    ///< Error while reading or writing data
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t MORE_DATA_NEEEDED : 1;
    ///< More function calls neeed to provide additiona data
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_int_frc_reg_t;

#define SBB_INT_FRC_DEFAULT (0x00000000U)
#define SBB_INT_FRC_RD_MASK (0xffffffffU)
#define SBB_INT_FRC_WR_MASK (0xffffffffU)


///< Done.
#define SBB_INT_FRC_DONE_BF_OFF ( 0)
#define SBB_INT_FRC_DONE_BF_WID ( 1)
#define SBB_INT_FRC_DONE_BF_MSK (0x00000001)
#define SBB_INT_FRC_DONE_BF_DEF (0x00000000)

///< Version number update needed
#define SBB_INT_FRC_NEED_UPDATE_VER_BF_OFF ( 1)
#define SBB_INT_FRC_NEED_UPDATE_VER_BF_WID ( 1)
#define SBB_INT_FRC_NEED_UPDATE_VER_BF_MSK (0x00000002)
#define SBB_INT_FRC_NEED_UPDATE_VER_BF_DEF (0x00000000)

///< HW error
#define SBB_INT_FRC_HW_ERR_BF_OFF ( 2)
#define SBB_INT_FRC_HW_ERR_BF_WID ( 1)
#define SBB_INT_FRC_HW_ERR_BF_MSK (0x00000004)
#define SBB_INT_FRC_HW_ERR_BF_DEF (0x00000000)

///< Secure Boot Key Encryption Key is invalid
#define SBB_INT_FRC_INVALID_SBKEK_BF_OFF ( 3)
#define SBB_INT_FRC_INVALID_SBKEK_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_SBKEK_BF_MSK (0x00000008)
#define SBB_INT_FRC_INVALID_SBKEK_BF_DEF (0x00000000)

///< Storage Root Key is invalid
#define SBB_INT_FRC_INVALID_SRK_BF_OFF ( 4)
#define SBB_INT_FRC_INVALID_SRK_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_SRK_BF_MSK (0x00000010)
#define SBB_INT_FRC_INVALID_SRK_BF_DEF (0x00000000)

///< Secure boot is disabled
#define SBB_INT_FRC_SECURE_BOOT_DISD_BF_OFF ( 5)
#define SBB_INT_FRC_SECURE_BOOT_DISD_BF_WID ( 1)
#define SBB_INT_FRC_SECURE_BOOT_DISD_BF_MSK (0x00000020)
#define SBB_INT_FRC_SECURE_BOOT_DISD_BF_DEF (0x00000000)

///< Invalid function
#define SBB_INT_FRC_INVALID_FUNCTION_BF_OFF ( 6)
#define SBB_INT_FRC_INVALID_FUNCTION_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_FUNCTION_BF_MSK (0x00000040)
#define SBB_INT_FRC_INVALID_FUNCTION_BF_DEF (0x00000000)

///< Invalid Object ID
#define SBB_INT_FRC_INVALID_OBJECT_ID_BF_OFF ( 7)
#define SBB_INT_FRC_INVALID_OBJECT_ID_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_OBJECT_ID_BF_MSK (0x00000080)
#define SBB_INT_FRC_INVALID_OBJECT_ID_BF_DEF (0x00000000)

///< Invalid length
#define SBB_INT_FRC_INVALID_LENGTH_BF_OFF ( 8)
#define SBB_INT_FRC_INVALID_LENGTH_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_LENGTH_BF_MSK (0x00000100)
#define SBB_INT_FRC_INVALID_LENGTH_BF_DEF (0x00000000)

///< Invalid padding
#define SBB_INT_FRC_INVALID_PADDING_BF_OFF ( 9)
#define SBB_INT_FRC_INVALID_PADDING_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_PADDING_BF_MSK (0x00000200)
#define SBB_INT_FRC_INVALID_PADDING_BF_DEF (0x00000000)

///< Unaligned data
#define SBB_INT_FRC_UNALIGNED_DATA_BF_OFF (10)
#define SBB_INT_FRC_UNALIGNED_DATA_BF_WID ( 1)
#define SBB_INT_FRC_UNALIGNED_DATA_BF_MSK (0x00000400)
#define SBB_INT_FRC_UNALIGNED_DATA_BF_DEF (0x00000000)

///< SDO authentication failed
#define SBB_INT_FRC_SDO_AUTH_FAILED_BF_OFF (11)
#define SBB_INT_FRC_SDO_AUTH_FAILED_BF_WID ( 1)
#define SBB_INT_FRC_SDO_AUTH_FAILED_BF_MSK (0x00000800)
#define SBB_INT_FRC_SDO_AUTH_FAILED_BF_DEF (0x00000000)

///< Invalid boot image or Invalid ECDSA signature
#define SBB_INT_FRC_INVALID_BOOT_IMAGE_BF_OFF (12)
#define SBB_INT_FRC_INVALID_BOOT_IMAGE_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_BOOT_IMAGE_BF_MSK (0x00001000)
#define SBB_INT_FRC_INVALID_BOOT_IMAGE_BF_DEF (0x00000000)

///< SPDM access violation
#define SBB_INT_FRC_SPDM_ACCESS_VIOLATION_BF_OFF (13)
#define SBB_INT_FRC_SPDM_ACCESS_VIOLATION_BF_WID ( 1)
#define SBB_INT_FRC_SPDM_ACCESS_VIOLATION_BF_MSK (0x00002000)
#define SBB_INT_FRC_SPDM_ACCESS_VIOLATION_BF_DEF (0x00000000)

///< Invalid version number
#define SBB_INT_FRC_INVALID_VER_NUMBER_BF_OFF (14)
#define SBB_INT_FRC_INVALID_VER_NUMBER_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_VER_NUMBER_BF_MSK (0x00004000)
#define SBB_INT_FRC_INVALID_VER_NUMBER_BF_DEF (0x00000000)

///< Unaligned address was specified
#define SBB_INT_FRC_UNALIGNED_ADDR_BF_OFF (15)
#define SBB_INT_FRC_UNALIGNED_ADDR_BF_WID ( 1)
#define SBB_INT_FRC_UNALIGNED_ADDR_BF_MSK (0x00008000)
#define SBB_INT_FRC_UNALIGNED_ADDR_BF_DEF (0x00000000)

///< Authentication DONE
#define SBB_INT_FRC_AUTH_DONE_BF_OFF (16)
#define SBB_INT_FRC_AUTH_DONE_BF_WID ( 1)
#define SBB_INT_FRC_AUTH_DONE_BF_MSK (0x00010000)
#define SBB_INT_FRC_AUTH_DONE_BF_DEF (0x00000000)

///< SBB self test failed
#define SBB_INT_FRC_SELF_TEST_FAILED_BF_OFF (17)
#define SBB_INT_FRC_SELF_TEST_FAILED_BF_WID ( 1)
#define SBB_INT_FRC_SELF_TEST_FAILED_BF_MSK (0x00020000)
#define SBB_INT_FRC_SELF_TEST_FAILED_BF_DEF (0x00000000)

///< Invalid key ID
#define SBB_INT_FRC_INVALID_KEY_ID_BF_OFF (18)
#define SBB_INT_FRC_INVALID_KEY_ID_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_KEY_ID_BF_MSK (0x00040000)
#define SBB_INT_FRC_INVALID_KEY_ID_BF_DEF (0x00000000)

///< Invalid crypto configuration
#define SBB_INT_FRC_INVALID_CRYPTO_CFG_BF_OFF (19)
#define SBB_INT_FRC_INVALID_CRYPTO_CFG_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_CRYPTO_CFG_BF_MSK (0x00080000)
#define SBB_INT_FRC_INVALID_CRYPTO_CFG_BF_DEF (0x00000000)

///< Crypto mode is not supported
#define SBB_INT_FRC_INVALID_CRYPTO_MODE_BF_OFF (20)
#define SBB_INT_FRC_INVALID_CRYPTO_MODE_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_CRYPTO_MODE_BF_MSK (0x00100000)
#define SBB_INT_FRC_INVALID_CRYPTO_MODE_BF_DEF (0x00000000)

///< Invalid key or key parameters
#define SBB_INT_FRC_INVALID_KEY_BF_OFF (21)
#define SBB_INT_FRC_INVALID_KEY_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_KEY_BF_MSK (0x00200000)
#define SBB_INT_FRC_INVALID_KEY_BF_DEF (0x00000000)

///< Invalid hash length
#define SBB_INT_FRC_INVALID_HASH_LEN_BF_OFF (22)
#define SBB_INT_FRC_INVALID_HASH_LEN_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_HASH_LEN_BF_MSK (0x00400000)
#define SBB_INT_FRC_INVALID_HASH_LEN_BF_DEF (0x00000000)

///< Invalid KAK
#define SBB_INT_FRC_INVALID_KAKPUB_BF_OFF (23)
#define SBB_INT_FRC_INVALID_KAKPUB_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_KAKPUB_BF_MSK (0x00800000)
#define SBB_INT_FRC_INVALID_KAKPUB_BF_DEF (0x00000000)

///< Signature generation function timeout
#define SBB_INT_FRC_CANNOT_GEN_SIG_BF_OFF (24)
#define SBB_INT_FRC_CANNOT_GEN_SIG_BF_WID ( 1)
#define SBB_INT_FRC_CANNOT_GEN_SIG_BF_MSK (0x01000000)
#define SBB_INT_FRC_CANNOT_GEN_SIG_BF_DEF (0x00000000)

///< Invalid key object type
#define SBB_INT_FRC_INVALID_KEY_TYPE_BF_OFF (25)
#define SBB_INT_FRC_INVALID_KEY_TYPE_BF_WID ( 1)
#define SBB_INT_FRC_INVALID_KEY_TYPE_BF_MSK (0x02000000)
#define SBB_INT_FRC_INVALID_KEY_TYPE_BF_DEF (0x00000000)

///< Expired key object
#define SBB_INT_FRC_EXPIRED_KEY_BF_OFF (26)
#define SBB_INT_FRC_EXPIRED_KEY_BF_WID ( 1)
#define SBB_INT_FRC_EXPIRED_KEY_BF_MSK (0x04000000)
#define SBB_INT_FRC_EXPIRED_KEY_BF_DEF (0x00000000)

///< Function invocked too many times
#define SBB_INT_FRC_TOO_MANY_INVOCATIONS_BF_OFF (27)
#define SBB_INT_FRC_TOO_MANY_INVOCATIONS_BF_WID ( 1)
#define SBB_INT_FRC_TOO_MANY_INVOCATIONS_BF_MSK (0x08000000)
#define SBB_INT_FRC_TOO_MANY_INVOCATIONS_BF_DEF (0x00000000)

///< Noise source error
#define SBB_INT_FRC_NOISE_SOURCE_ERR_BF_OFF (28)
#define SBB_INT_FRC_NOISE_SOURCE_ERR_BF_WID ( 1)
#define SBB_INT_FRC_NOISE_SOURCE_ERR_BF_MSK (0x10000000)
#define SBB_INT_FRC_NOISE_SOURCE_ERR_BF_DEF (0x00000000)

///< Error while reading or writing data
#define SBB_INT_FRC_AXI_READ_OR_WRITE_ERR_BF_OFF (29)
#define SBB_INT_FRC_AXI_READ_OR_WRITE_ERR_BF_WID ( 1)
#define SBB_INT_FRC_AXI_READ_OR_WRITE_ERR_BF_MSK (0x20000000)
#define SBB_INT_FRC_AXI_READ_OR_WRITE_ERR_BF_DEF (0x00000000)

///< Reserved
#define SBB_INT_FRC_RESERVED0_BF_OFF (30)
#define SBB_INT_FRC_RESERVED0_BF_WID ( 1)
#define SBB_INT_FRC_RESERVED0_BF_MSK (0x40000000)
#define SBB_INT_FRC_RESERVED0_BF_DEF (0x00000000)

///< More function calls neeed to provide additiona data
#define SBB_INT_FRC_MORE_DATA_NEEEDED_BF_OFF (31)
#define SBB_INT_FRC_MORE_DATA_NEEEDED_BF_WID ( 1)
#define SBB_INT_FRC_MORE_DATA_NEEEDED_BF_MSK (0x80000000)
#define SBB_INT_FRC_MORE_DATA_NEEEDED_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_H0_REG register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_h0_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_h0_reg_t;

#define SBB_VER_H0_DEFAULT (0x00000000U)
#define SBB_VER_H0_RD_MASK (0xffffffffU)
#define SBB_VER_H0_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_H0_VER_NUM_BF_OFF ( 0)
#define SBB_VER_H0_VER_NUM_BF_WID (32)
#define SBB_VER_H0_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_H0_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_L0_REG register description at address offset 0x1004
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_l0_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_l0_reg_t;

#define SBB_VER_L0_DEFAULT (0x00000000U)
#define SBB_VER_L0_RD_MASK (0xffffffffU)
#define SBB_VER_L0_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_L0_VER_NUM_BF_OFF ( 0)
#define SBB_VER_L0_VER_NUM_BF_WID (32)
#define SBB_VER_L0_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_L0_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_H1_REG register description at address offset 0x1008
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_h1_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_h1_reg_t;

#define SBB_VER_H1_DEFAULT (0x00000000U)
#define SBB_VER_H1_RD_MASK (0xffffffffU)
#define SBB_VER_H1_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_H1_VER_NUM_BF_OFF ( 0)
#define SBB_VER_H1_VER_NUM_BF_WID (32)
#define SBB_VER_H1_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_H1_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_L1_REG register description at address offset 0x100c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_l1_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_l1_reg_t;

#define SBB_VER_L1_DEFAULT (0x00000000U)
#define SBB_VER_L1_RD_MASK (0xffffffffU)
#define SBB_VER_L1_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_L1_VER_NUM_BF_OFF ( 0)
#define SBB_VER_L1_VER_NUM_BF_WID (32)
#define SBB_VER_L1_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_L1_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_H2_REG register description at address offset 0x1010
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_h2_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_h2_reg_t;

#define SBB_VER_H2_DEFAULT (0x00000000U)
#define SBB_VER_H2_RD_MASK (0xffffffffU)
#define SBB_VER_H2_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_H2_VER_NUM_BF_OFF ( 0)
#define SBB_VER_H2_VER_NUM_BF_WID (32)
#define SBB_VER_H2_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_H2_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_L2_REG register description at address offset 0x1014
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_l2_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_l2_reg_t;

#define SBB_VER_L2_DEFAULT (0x00000000U)
#define SBB_VER_L2_RD_MASK (0xffffffffU)
#define SBB_VER_L2_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_L2_VER_NUM_BF_OFF ( 0)
#define SBB_VER_L2_VER_NUM_BF_WID (32)
#define SBB_VER_L2_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_L2_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_H3_REG register description at address offset 0x1018
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_h3_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_h3_reg_t;

#define SBB_VER_H3_DEFAULT (0x00000000U)
#define SBB_VER_H3_RD_MASK (0xffffffffU)
#define SBB_VER_H3_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_H3_VER_NUM_BF_OFF ( 0)
#define SBB_VER_H3_VER_NUM_BF_WID (32)
#define SBB_VER_H3_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_H3_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_VERSION_L3_REG register description at address offset 0x101c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/version_l3_reg
  * Version Number Register
  */

typedef union {
  struct {
    uint32_t VER_NUM : 32;
    ///< Version number
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ver_l3_reg_t;

#define SBB_VER_L3_DEFAULT (0x00000000U)
#define SBB_VER_L3_RD_MASK (0xffffffffU)
#define SBB_VER_L3_WR_MASK (0x00000000U)


///< Version number
#define SBB_VER_L3_VER_NUM_BF_OFF ( 0)
#define SBB_VER_L3_VER_NUM_BF_WID (32)
#define SBB_VER_L3_VER_NUM_BF_MSK (0xFFFFFFFF)
#define SBB_VER_L3_VER_NUM_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H0_REG register description at address offset 0x1020
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h0_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h0_reg_t;

#define SBB_EFUSE_H0_DEFAULT (0x00000000U)
#define SBB_EFUSE_H0_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H0_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H0_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H0_VAL_BF_WID (32)
#define SBB_EFUSE_H0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L0_REG register description at address offset 0x1024
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l0_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l0_reg_t;

#define SBB_EFUSE_L0_DEFAULT (0x00000000U)
#define SBB_EFUSE_L0_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L0_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L0_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L0_VAL_BF_WID (32)
#define SBB_EFUSE_L0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H1_REG register description at address offset 0x1028
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h1_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h1_reg_t;

#define SBB_EFUSE_H1_DEFAULT (0x00000000U)
#define SBB_EFUSE_H1_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H1_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H1_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H1_VAL_BF_WID (32)
#define SBB_EFUSE_H1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L1_REG register description at address offset 0x102c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l1_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l1_reg_t;

#define SBB_EFUSE_L1_DEFAULT (0x00000000U)
#define SBB_EFUSE_L1_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L1_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L1_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L1_VAL_BF_WID (32)
#define SBB_EFUSE_L1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H2_REG register description at address offset 0x1030
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h2_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h2_reg_t;

#define SBB_EFUSE_H2_DEFAULT (0x00000000U)
#define SBB_EFUSE_H2_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H2_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H2_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H2_VAL_BF_WID (32)
#define SBB_EFUSE_H2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L2_REG register description at address offset 0x1034
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l2_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l2_reg_t;

#define SBB_EFUSE_L2_DEFAULT (0x00000000U)
#define SBB_EFUSE_L2_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L2_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L2_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L2_VAL_BF_WID (32)
#define SBB_EFUSE_L2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H3_REG register description at address offset 0x1038
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h3_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h3_reg_t;

#define SBB_EFUSE_H3_DEFAULT (0x00000000U)
#define SBB_EFUSE_H3_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H3_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H3_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H3_VAL_BF_WID (32)
#define SBB_EFUSE_H3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L3_REG register description at address offset 0x103c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l3_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l3_reg_t;

#define SBB_EFUSE_L3_DEFAULT (0x00000000U)
#define SBB_EFUSE_L3_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L3_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L3_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L3_VAL_BF_WID (32)
#define SBB_EFUSE_L3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H4_REG register description at address offset 0x1040
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h4_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h4_reg_t;

#define SBB_EFUSE_H4_DEFAULT (0x00000000U)
#define SBB_EFUSE_H4_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H4_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H4_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H4_VAL_BF_WID (32)
#define SBB_EFUSE_H4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L4_REG register description at address offset 0x1044
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l4_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l4_reg_t;

#define SBB_EFUSE_L4_DEFAULT (0x00000000U)
#define SBB_EFUSE_L4_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L4_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L4_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L4_VAL_BF_WID (32)
#define SBB_EFUSE_L4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H5_REG register description at address offset 0x1048
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h5_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h5_reg_t;

#define SBB_EFUSE_H5_DEFAULT (0x00000000U)
#define SBB_EFUSE_H5_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H5_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H5_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H5_VAL_BF_WID (32)
#define SBB_EFUSE_H5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L5_REG register description at address offset 0x104c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l5_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l5_reg_t;

#define SBB_EFUSE_L5_DEFAULT (0x00000000U)
#define SBB_EFUSE_L5_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L5_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L5_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L5_VAL_BF_WID (32)
#define SBB_EFUSE_L5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H6_REG register description at address offset 0x1050
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h6_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h6_reg_t;

#define SBB_EFUSE_H6_DEFAULT (0x00000000U)
#define SBB_EFUSE_H6_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H6_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H6_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H6_VAL_BF_WID (32)
#define SBB_EFUSE_H6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L6_REG register description at address offset 0x1054
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l6_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l6_reg_t;

#define SBB_EFUSE_L6_DEFAULT (0x00000000U)
#define SBB_EFUSE_L6_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L6_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L6_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L6_VAL_BF_WID (32)
#define SBB_EFUSE_L6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H7_REG register description at address offset 0x1058
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h7_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h7_reg_t;

#define SBB_EFUSE_H7_DEFAULT (0x00000000U)
#define SBB_EFUSE_H7_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H7_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H7_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H7_VAL_BF_WID (32)
#define SBB_EFUSE_H7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L7_REG register description at address offset 0x105c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l7_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l7_reg_t;

#define SBB_EFUSE_L7_DEFAULT (0x00000000U)
#define SBB_EFUSE_L7_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L7_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L7_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L7_VAL_BF_WID (32)
#define SBB_EFUSE_L7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H8_REG register description at address offset 0x1060
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h8_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h8_reg_t;

#define SBB_EFUSE_H8_DEFAULT (0x00000000U)
#define SBB_EFUSE_H8_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H8_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H8_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H8_VAL_BF_WID (32)
#define SBB_EFUSE_H8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L8_REG register description at address offset 0x1064
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l8_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l8_reg_t;

#define SBB_EFUSE_L8_DEFAULT (0x00000000U)
#define SBB_EFUSE_L8_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L8_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L8_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L8_VAL_BF_WID (32)
#define SBB_EFUSE_L8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H9_REG register description at address offset 0x1068
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h9_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h9_reg_t;

#define SBB_EFUSE_H9_DEFAULT (0x00000000U)
#define SBB_EFUSE_H9_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H9_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H9_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H9_VAL_BF_WID (32)
#define SBB_EFUSE_H9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L9_REG register description at address offset 0x106c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l9_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l9_reg_t;

#define SBB_EFUSE_L9_DEFAULT (0x00000000U)
#define SBB_EFUSE_L9_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L9_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L9_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L9_VAL_BF_WID (32)
#define SBB_EFUSE_L9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H10_REG register description at address offset 0x1070
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h10_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h10_reg_t;

#define SBB_EFUSE_H10_DEFAULT (0x00000000U)
#define SBB_EFUSE_H10_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H10_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H10_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H10_VAL_BF_WID (32)
#define SBB_EFUSE_H10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L10_REG register description at address offset 0x1074
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l10_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l10_reg_t;

#define SBB_EFUSE_L10_DEFAULT (0x00000000U)
#define SBB_EFUSE_L10_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L10_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L10_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L10_VAL_BF_WID (32)
#define SBB_EFUSE_L10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H11_REG register description at address offset 0x1078
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h11_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h11_reg_t;

#define SBB_EFUSE_H11_DEFAULT (0x00000000U)
#define SBB_EFUSE_H11_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H11_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H11_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H11_VAL_BF_WID (32)
#define SBB_EFUSE_H11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L11_REG register description at address offset 0x107c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l11_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l11_reg_t;

#define SBB_EFUSE_L11_DEFAULT (0x00000000U)
#define SBB_EFUSE_L11_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L11_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L11_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L11_VAL_BF_WID (32)
#define SBB_EFUSE_L11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H12_REG register description at address offset 0x1080
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h12_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h12_reg_t;

#define SBB_EFUSE_H12_DEFAULT (0x00000000U)
#define SBB_EFUSE_H12_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H12_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H12_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H12_VAL_BF_WID (32)
#define SBB_EFUSE_H12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L12_REG register description at address offset 0x1084
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l12_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l12_reg_t;

#define SBB_EFUSE_L12_DEFAULT (0x00000000U)
#define SBB_EFUSE_L12_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L12_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L12_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L12_VAL_BF_WID (32)
#define SBB_EFUSE_L12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H13_REG register description at address offset 0x1088
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h13_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h13_reg_t;

#define SBB_EFUSE_H13_DEFAULT (0x00000000U)
#define SBB_EFUSE_H13_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H13_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H13_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H13_VAL_BF_WID (32)
#define SBB_EFUSE_H13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L13_REG register description at address offset 0x108c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l13_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l13_reg_t;

#define SBB_EFUSE_L13_DEFAULT (0x00000000U)
#define SBB_EFUSE_L13_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L13_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L13_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L13_VAL_BF_WID (32)
#define SBB_EFUSE_L13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H14_REG register description at address offset 0x1090
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h14_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h14_reg_t;

#define SBB_EFUSE_H14_DEFAULT (0x00000000U)
#define SBB_EFUSE_H14_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H14_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H14_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H14_VAL_BF_WID (32)
#define SBB_EFUSE_H14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L14_REG register description at address offset 0x1094
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l14_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l14_reg_t;

#define SBB_EFUSE_L14_DEFAULT (0x00000000U)
#define SBB_EFUSE_L14_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L14_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L14_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L14_VAL_BF_WID (32)
#define SBB_EFUSE_L14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H15_REG register description at address offset 0x1098
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h15_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h15_reg_t;

#define SBB_EFUSE_H15_DEFAULT (0x00000000U)
#define SBB_EFUSE_H15_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H15_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H15_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H15_VAL_BF_WID (32)
#define SBB_EFUSE_H15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L15_REG register description at address offset 0x109c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l15_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l15_reg_t;

#define SBB_EFUSE_L15_DEFAULT (0x00000000U)
#define SBB_EFUSE_L15_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L15_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L15_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L15_VAL_BF_WID (32)
#define SBB_EFUSE_L15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H16_REG register description at address offset 0x10a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h16_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h16_reg_t;

#define SBB_EFUSE_H16_DEFAULT (0x00000000U)
#define SBB_EFUSE_H16_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H16_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H16_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H16_VAL_BF_WID (32)
#define SBB_EFUSE_H16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L16_REG register description at address offset 0x10a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l16_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l16_reg_t;

#define SBB_EFUSE_L16_DEFAULT (0x00000000U)
#define SBB_EFUSE_L16_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L16_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L16_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L16_VAL_BF_WID (32)
#define SBB_EFUSE_L16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H17_REG register description at address offset 0x10a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h17_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h17_reg_t;

#define SBB_EFUSE_H17_DEFAULT (0x00000000U)
#define SBB_EFUSE_H17_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H17_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H17_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H17_VAL_BF_WID (32)
#define SBB_EFUSE_H17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L17_REG register description at address offset 0x10ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l17_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l17_reg_t;

#define SBB_EFUSE_L17_DEFAULT (0x00000000U)
#define SBB_EFUSE_L17_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L17_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L17_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L17_VAL_BF_WID (32)
#define SBB_EFUSE_L17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H18_REG register description at address offset 0x10b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h18_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h18_reg_t;

#define SBB_EFUSE_H18_DEFAULT (0x00000000U)
#define SBB_EFUSE_H18_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H18_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H18_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H18_VAL_BF_WID (32)
#define SBB_EFUSE_H18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L18_REG register description at address offset 0x10b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l18_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l18_reg_t;

#define SBB_EFUSE_L18_DEFAULT (0x00000000U)
#define SBB_EFUSE_L18_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L18_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L18_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L18_VAL_BF_WID (32)
#define SBB_EFUSE_L18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H19_REG register description at address offset 0x10b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h19_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h19_reg_t;

#define SBB_EFUSE_H19_DEFAULT (0x00000000U)
#define SBB_EFUSE_H19_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H19_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H19_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H19_VAL_BF_WID (32)
#define SBB_EFUSE_H19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L19_REG register description at address offset 0x10bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l19_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l19_reg_t;

#define SBB_EFUSE_L19_DEFAULT (0x00000000U)
#define SBB_EFUSE_L19_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L19_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L19_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L19_VAL_BF_WID (32)
#define SBB_EFUSE_L19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H20_REG register description at address offset 0x10c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h20_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h20_reg_t;

#define SBB_EFUSE_H20_DEFAULT (0x00000000U)
#define SBB_EFUSE_H20_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H20_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H20_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H20_VAL_BF_WID (32)
#define SBB_EFUSE_H20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L20_REG register description at address offset 0x10c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l20_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l20_reg_t;

#define SBB_EFUSE_L20_DEFAULT (0x00000000U)
#define SBB_EFUSE_L20_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L20_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L20_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L20_VAL_BF_WID (32)
#define SBB_EFUSE_L20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H21_REG register description at address offset 0x10c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h21_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h21_reg_t;

#define SBB_EFUSE_H21_DEFAULT (0x00000000U)
#define SBB_EFUSE_H21_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H21_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H21_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H21_VAL_BF_WID (32)
#define SBB_EFUSE_H21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L21_REG register description at address offset 0x10cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l21_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l21_reg_t;

#define SBB_EFUSE_L21_DEFAULT (0x00000000U)
#define SBB_EFUSE_L21_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L21_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L21_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L21_VAL_BF_WID (32)
#define SBB_EFUSE_L21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H22_REG register description at address offset 0x10d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h22_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h22_reg_t;

#define SBB_EFUSE_H22_DEFAULT (0x00000000U)
#define SBB_EFUSE_H22_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H22_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H22_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H22_VAL_BF_WID (32)
#define SBB_EFUSE_H22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L22_REG register description at address offset 0x10d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l22_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l22_reg_t;

#define SBB_EFUSE_L22_DEFAULT (0x00000000U)
#define SBB_EFUSE_L22_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L22_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L22_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L22_VAL_BF_WID (32)
#define SBB_EFUSE_L22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H23_REG register description at address offset 0x10d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h23_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h23_reg_t;

#define SBB_EFUSE_H23_DEFAULT (0x00000000U)
#define SBB_EFUSE_H23_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H23_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H23_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H23_VAL_BF_WID (32)
#define SBB_EFUSE_H23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L23_REG register description at address offset 0x10dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l23_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l23_reg_t;

#define SBB_EFUSE_L23_DEFAULT (0x00000000U)
#define SBB_EFUSE_L23_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L23_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L23_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L23_VAL_BF_WID (32)
#define SBB_EFUSE_L23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H24_REG register description at address offset 0x10e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h24_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h24_reg_t;

#define SBB_EFUSE_H24_DEFAULT (0x00000000U)
#define SBB_EFUSE_H24_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H24_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H24_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H24_VAL_BF_WID (32)
#define SBB_EFUSE_H24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L24_REG register description at address offset 0x10e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l24_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l24_reg_t;

#define SBB_EFUSE_L24_DEFAULT (0x00000000U)
#define SBB_EFUSE_L24_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L24_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L24_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L24_VAL_BF_WID (32)
#define SBB_EFUSE_L24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H25_REG register description at address offset 0x10e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h25_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h25_reg_t;

#define SBB_EFUSE_H25_DEFAULT (0x00000000U)
#define SBB_EFUSE_H25_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H25_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H25_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H25_VAL_BF_WID (32)
#define SBB_EFUSE_H25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L25_REG register description at address offset 0x10ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l25_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l25_reg_t;

#define SBB_EFUSE_L25_DEFAULT (0x00000000U)
#define SBB_EFUSE_L25_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L25_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L25_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L25_VAL_BF_WID (32)
#define SBB_EFUSE_L25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H26_REG register description at address offset 0x10f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h26_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h26_reg_t;

#define SBB_EFUSE_H26_DEFAULT (0x00000000U)
#define SBB_EFUSE_H26_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H26_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H26_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H26_VAL_BF_WID (32)
#define SBB_EFUSE_H26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L26_REG register description at address offset 0x10f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l26_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l26_reg_t;

#define SBB_EFUSE_L26_DEFAULT (0x00000000U)
#define SBB_EFUSE_L26_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L26_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L26_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L26_VAL_BF_WID (32)
#define SBB_EFUSE_L26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H27_REG register description at address offset 0x10f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h27_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h27_reg_t;

#define SBB_EFUSE_H27_DEFAULT (0x00000000U)
#define SBB_EFUSE_H27_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H27_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H27_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H27_VAL_BF_WID (32)
#define SBB_EFUSE_H27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L27_REG register description at address offset 0x10fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l27_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l27_reg_t;

#define SBB_EFUSE_L27_DEFAULT (0x00000000U)
#define SBB_EFUSE_L27_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L27_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L27_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L27_VAL_BF_WID (32)
#define SBB_EFUSE_L27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H28_REG register description at address offset 0x1100
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h28_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h28_reg_t;

#define SBB_EFUSE_H28_DEFAULT (0x00000000U)
#define SBB_EFUSE_H28_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H28_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H28_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H28_VAL_BF_WID (32)
#define SBB_EFUSE_H28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L28_REG register description at address offset 0x1104
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l28_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l28_reg_t;

#define SBB_EFUSE_L28_DEFAULT (0x00000000U)
#define SBB_EFUSE_L28_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L28_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L28_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L28_VAL_BF_WID (32)
#define SBB_EFUSE_L28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H29_REG register description at address offset 0x1108
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h29_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h29_reg_t;

#define SBB_EFUSE_H29_DEFAULT (0x00000000U)
#define SBB_EFUSE_H29_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H29_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H29_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H29_VAL_BF_WID (32)
#define SBB_EFUSE_H29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L29_REG register description at address offset 0x110c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l29_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l29_reg_t;

#define SBB_EFUSE_L29_DEFAULT (0x00000000U)
#define SBB_EFUSE_L29_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L29_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L29_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L29_VAL_BF_WID (32)
#define SBB_EFUSE_L29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H30_REG register description at address offset 0x1110
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h30_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h30_reg_t;

#define SBB_EFUSE_H30_DEFAULT (0x00000000U)
#define SBB_EFUSE_H30_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H30_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H30_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H30_VAL_BF_WID (32)
#define SBB_EFUSE_H30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L30_REG register description at address offset 0x1114
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l30_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l30_reg_t;

#define SBB_EFUSE_L30_DEFAULT (0x00000000U)
#define SBB_EFUSE_L30_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L30_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L30_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L30_VAL_BF_WID (32)
#define SBB_EFUSE_L30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H31_REG register description at address offset 0x1118
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h31_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h31_reg_t;

#define SBB_EFUSE_H31_DEFAULT (0x00000000U)
#define SBB_EFUSE_H31_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H31_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H31_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H31_VAL_BF_WID (32)
#define SBB_EFUSE_H31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L31_REG register description at address offset 0x111c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l31_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l31_reg_t;

#define SBB_EFUSE_L31_DEFAULT (0x00000000U)
#define SBB_EFUSE_L31_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L31_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L31_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L31_VAL_BF_WID (32)
#define SBB_EFUSE_L31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H32_REG register description at address offset 0x1120
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h32_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h32_reg_t;

#define SBB_EFUSE_H32_DEFAULT (0x00000000U)
#define SBB_EFUSE_H32_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H32_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H32_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H32_VAL_BF_WID (32)
#define SBB_EFUSE_H32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L32_REG register description at address offset 0x1124
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l32_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l32_reg_t;

#define SBB_EFUSE_L32_DEFAULT (0x00000000U)
#define SBB_EFUSE_L32_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L32_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L32_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L32_VAL_BF_WID (32)
#define SBB_EFUSE_L32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H33_REG register description at address offset 0x1128
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h33_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h33_reg_t;

#define SBB_EFUSE_H33_DEFAULT (0x00000000U)
#define SBB_EFUSE_H33_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H33_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H33_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H33_VAL_BF_WID (32)
#define SBB_EFUSE_H33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L33_REG register description at address offset 0x112c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l33_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l33_reg_t;

#define SBB_EFUSE_L33_DEFAULT (0x00000000U)
#define SBB_EFUSE_L33_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L33_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L33_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L33_VAL_BF_WID (32)
#define SBB_EFUSE_L33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H34_REG register description at address offset 0x1130
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h34_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h34_reg_t;

#define SBB_EFUSE_H34_DEFAULT (0x00000000U)
#define SBB_EFUSE_H34_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H34_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H34_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H34_VAL_BF_WID (32)
#define SBB_EFUSE_H34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L34_REG register description at address offset 0x1134
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l34_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l34_reg_t;

#define SBB_EFUSE_L34_DEFAULT (0x00000000U)
#define SBB_EFUSE_L34_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L34_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L34_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L34_VAL_BF_WID (32)
#define SBB_EFUSE_L34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H35_REG register description at address offset 0x1138
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h35_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h35_reg_t;

#define SBB_EFUSE_H35_DEFAULT (0x00000000U)
#define SBB_EFUSE_H35_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H35_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H35_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H35_VAL_BF_WID (32)
#define SBB_EFUSE_H35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L35_REG register description at address offset 0x113c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l35_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l35_reg_t;

#define SBB_EFUSE_L35_DEFAULT (0x00000000U)
#define SBB_EFUSE_L35_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L35_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L35_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L35_VAL_BF_WID (32)
#define SBB_EFUSE_L35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H36_REG register description at address offset 0x1140
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h36_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h36_reg_t;

#define SBB_EFUSE_H36_DEFAULT (0x00000000U)
#define SBB_EFUSE_H36_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H36_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H36_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H36_VAL_BF_WID (32)
#define SBB_EFUSE_H36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L36_REG register description at address offset 0x1144
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l36_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l36_reg_t;

#define SBB_EFUSE_L36_DEFAULT (0x00000000U)
#define SBB_EFUSE_L36_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L36_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L36_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L36_VAL_BF_WID (32)
#define SBB_EFUSE_L36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H37_REG register description at address offset 0x1148
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h37_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h37_reg_t;

#define SBB_EFUSE_H37_DEFAULT (0x00000000U)
#define SBB_EFUSE_H37_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H37_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H37_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H37_VAL_BF_WID (32)
#define SBB_EFUSE_H37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L37_REG register description at address offset 0x114c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l37_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l37_reg_t;

#define SBB_EFUSE_L37_DEFAULT (0x00000000U)
#define SBB_EFUSE_L37_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L37_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L37_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L37_VAL_BF_WID (32)
#define SBB_EFUSE_L37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H38_REG register description at address offset 0x1150
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h38_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h38_reg_t;

#define SBB_EFUSE_H38_DEFAULT (0x00000000U)
#define SBB_EFUSE_H38_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H38_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H38_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H38_VAL_BF_WID (32)
#define SBB_EFUSE_H38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L38_REG register description at address offset 0x1154
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l38_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l38_reg_t;

#define SBB_EFUSE_L38_DEFAULT (0x00000000U)
#define SBB_EFUSE_L38_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L38_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L38_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L38_VAL_BF_WID (32)
#define SBB_EFUSE_L38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H39_REG register description at address offset 0x1158
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h39_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h39_reg_t;

#define SBB_EFUSE_H39_DEFAULT (0x00000000U)
#define SBB_EFUSE_H39_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H39_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H39_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H39_VAL_BF_WID (32)
#define SBB_EFUSE_H39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L39_REG register description at address offset 0x115c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l39_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l39_reg_t;

#define SBB_EFUSE_L39_DEFAULT (0x00000000U)
#define SBB_EFUSE_L39_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L39_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L39_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L39_VAL_BF_WID (32)
#define SBB_EFUSE_L39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H40_REG register description at address offset 0x1160
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h40_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h40_reg_t;

#define SBB_EFUSE_H40_DEFAULT (0x00000000U)
#define SBB_EFUSE_H40_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H40_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H40_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H40_VAL_BF_WID (32)
#define SBB_EFUSE_H40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L40_REG register description at address offset 0x1164
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l40_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l40_reg_t;

#define SBB_EFUSE_L40_DEFAULT (0x00000000U)
#define SBB_EFUSE_L40_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L40_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L40_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L40_VAL_BF_WID (32)
#define SBB_EFUSE_L40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H41_REG register description at address offset 0x1168
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h41_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h41_reg_t;

#define SBB_EFUSE_H41_DEFAULT (0x00000000U)
#define SBB_EFUSE_H41_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H41_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H41_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H41_VAL_BF_WID (32)
#define SBB_EFUSE_H41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L41_REG register description at address offset 0x116c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l41_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l41_reg_t;

#define SBB_EFUSE_L41_DEFAULT (0x00000000U)
#define SBB_EFUSE_L41_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L41_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L41_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L41_VAL_BF_WID (32)
#define SBB_EFUSE_L41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H42_REG register description at address offset 0x1170
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h42_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h42_reg_t;

#define SBB_EFUSE_H42_DEFAULT (0x00000000U)
#define SBB_EFUSE_H42_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H42_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H42_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H42_VAL_BF_WID (32)
#define SBB_EFUSE_H42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L42_REG register description at address offset 0x1174
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l42_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l42_reg_t;

#define SBB_EFUSE_L42_DEFAULT (0x00000000U)
#define SBB_EFUSE_L42_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L42_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L42_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L42_VAL_BF_WID (32)
#define SBB_EFUSE_L42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H43_REG register description at address offset 0x1178
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h43_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h43_reg_t;

#define SBB_EFUSE_H43_DEFAULT (0x00000000U)
#define SBB_EFUSE_H43_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H43_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H43_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H43_VAL_BF_WID (32)
#define SBB_EFUSE_H43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L43_REG register description at address offset 0x117c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l43_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l43_reg_t;

#define SBB_EFUSE_L43_DEFAULT (0x00000000U)
#define SBB_EFUSE_L43_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L43_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L43_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L43_VAL_BF_WID (32)
#define SBB_EFUSE_L43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H44_REG register description at address offset 0x1180
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h44_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h44_reg_t;

#define SBB_EFUSE_H44_DEFAULT (0x00000000U)
#define SBB_EFUSE_H44_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H44_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H44_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H44_VAL_BF_WID (32)
#define SBB_EFUSE_H44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L44_REG register description at address offset 0x1184
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l44_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l44_reg_t;

#define SBB_EFUSE_L44_DEFAULT (0x00000000U)
#define SBB_EFUSE_L44_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L44_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L44_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L44_VAL_BF_WID (32)
#define SBB_EFUSE_L44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H45_REG register description at address offset 0x1188
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h45_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h45_reg_t;

#define SBB_EFUSE_H45_DEFAULT (0x00000000U)
#define SBB_EFUSE_H45_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H45_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H45_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H45_VAL_BF_WID (32)
#define SBB_EFUSE_H45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L45_REG register description at address offset 0x118c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l45_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l45_reg_t;

#define SBB_EFUSE_L45_DEFAULT (0x00000000U)
#define SBB_EFUSE_L45_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L45_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L45_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L45_VAL_BF_WID (32)
#define SBB_EFUSE_L45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H46_REG register description at address offset 0x1190
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h46_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h46_reg_t;

#define SBB_EFUSE_H46_DEFAULT (0x00000000U)
#define SBB_EFUSE_H46_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H46_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H46_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H46_VAL_BF_WID (32)
#define SBB_EFUSE_H46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L46_REG register description at address offset 0x1194
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l46_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l46_reg_t;

#define SBB_EFUSE_L46_DEFAULT (0x00000000U)
#define SBB_EFUSE_L46_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L46_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L46_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L46_VAL_BF_WID (32)
#define SBB_EFUSE_L46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H47_REG register description at address offset 0x1198
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h47_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h47_reg_t;

#define SBB_EFUSE_H47_DEFAULT (0x00000000U)
#define SBB_EFUSE_H47_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H47_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H47_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H47_VAL_BF_WID (32)
#define SBB_EFUSE_H47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L47_REG register description at address offset 0x119c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l47_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l47_reg_t;

#define SBB_EFUSE_L47_DEFAULT (0x00000000U)
#define SBB_EFUSE_L47_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L47_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L47_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L47_VAL_BF_WID (32)
#define SBB_EFUSE_L47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H48_REG register description at address offset 0x11a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h48_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h48_reg_t;

#define SBB_EFUSE_H48_DEFAULT (0x00000000U)
#define SBB_EFUSE_H48_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H48_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H48_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H48_VAL_BF_WID (32)
#define SBB_EFUSE_H48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L48_REG register description at address offset 0x11a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l48_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l48_reg_t;

#define SBB_EFUSE_L48_DEFAULT (0x00000000U)
#define SBB_EFUSE_L48_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L48_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L48_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L48_VAL_BF_WID (32)
#define SBB_EFUSE_L48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H49_REG register description at address offset 0x11a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h49_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h49_reg_t;

#define SBB_EFUSE_H49_DEFAULT (0x00000000U)
#define SBB_EFUSE_H49_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H49_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H49_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H49_VAL_BF_WID (32)
#define SBB_EFUSE_H49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L49_REG register description at address offset 0x11ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l49_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l49_reg_t;

#define SBB_EFUSE_L49_DEFAULT (0x00000000U)
#define SBB_EFUSE_L49_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L49_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L49_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L49_VAL_BF_WID (32)
#define SBB_EFUSE_L49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H50_REG register description at address offset 0x11b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h50_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h50_reg_t;

#define SBB_EFUSE_H50_DEFAULT (0x00000000U)
#define SBB_EFUSE_H50_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H50_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H50_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H50_VAL_BF_WID (32)
#define SBB_EFUSE_H50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L50_REG register description at address offset 0x11b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l50_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l50_reg_t;

#define SBB_EFUSE_L50_DEFAULT (0x00000000U)
#define SBB_EFUSE_L50_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L50_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L50_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L50_VAL_BF_WID (32)
#define SBB_EFUSE_L50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H51_REG register description at address offset 0x11b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h51_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h51_reg_t;

#define SBB_EFUSE_H51_DEFAULT (0x00000000U)
#define SBB_EFUSE_H51_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H51_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H51_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H51_VAL_BF_WID (32)
#define SBB_EFUSE_H51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L51_REG register description at address offset 0x11bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l51_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l51_reg_t;

#define SBB_EFUSE_L51_DEFAULT (0x00000000U)
#define SBB_EFUSE_L51_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L51_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L51_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L51_VAL_BF_WID (32)
#define SBB_EFUSE_L51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H52_REG register description at address offset 0x11c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h52_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h52_reg_t;

#define SBB_EFUSE_H52_DEFAULT (0x00000000U)
#define SBB_EFUSE_H52_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H52_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H52_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H52_VAL_BF_WID (32)
#define SBB_EFUSE_H52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L52_REG register description at address offset 0x11c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l52_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l52_reg_t;

#define SBB_EFUSE_L52_DEFAULT (0x00000000U)
#define SBB_EFUSE_L52_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L52_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L52_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L52_VAL_BF_WID (32)
#define SBB_EFUSE_L52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H53_REG register description at address offset 0x11c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h53_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h53_reg_t;

#define SBB_EFUSE_H53_DEFAULT (0x00000000U)
#define SBB_EFUSE_H53_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H53_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H53_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H53_VAL_BF_WID (32)
#define SBB_EFUSE_H53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L53_REG register description at address offset 0x11cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l53_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l53_reg_t;

#define SBB_EFUSE_L53_DEFAULT (0x00000000U)
#define SBB_EFUSE_L53_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L53_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L53_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L53_VAL_BF_WID (32)
#define SBB_EFUSE_L53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H54_REG register description at address offset 0x11d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h54_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h54_reg_t;

#define SBB_EFUSE_H54_DEFAULT (0x00000000U)
#define SBB_EFUSE_H54_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H54_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H54_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H54_VAL_BF_WID (32)
#define SBB_EFUSE_H54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L54_REG register description at address offset 0x11d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l54_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l54_reg_t;

#define SBB_EFUSE_L54_DEFAULT (0x00000000U)
#define SBB_EFUSE_L54_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L54_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L54_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L54_VAL_BF_WID (32)
#define SBB_EFUSE_L54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H55_REG register description at address offset 0x11d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h55_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h55_reg_t;

#define SBB_EFUSE_H55_DEFAULT (0x00000000U)
#define SBB_EFUSE_H55_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H55_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H55_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H55_VAL_BF_WID (32)
#define SBB_EFUSE_H55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L55_REG register description at address offset 0x11dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l55_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l55_reg_t;

#define SBB_EFUSE_L55_DEFAULT (0x00000000U)
#define SBB_EFUSE_L55_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L55_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L55_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L55_VAL_BF_WID (32)
#define SBB_EFUSE_L55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H56_REG register description at address offset 0x11e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h56_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h56_reg_t;

#define SBB_EFUSE_H56_DEFAULT (0x00000000U)
#define SBB_EFUSE_H56_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H56_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H56_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H56_VAL_BF_WID (32)
#define SBB_EFUSE_H56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L56_REG register description at address offset 0x11e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l56_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l56_reg_t;

#define SBB_EFUSE_L56_DEFAULT (0x00000000U)
#define SBB_EFUSE_L56_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L56_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L56_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L56_VAL_BF_WID (32)
#define SBB_EFUSE_L56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H57_REG register description at address offset 0x11e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h57_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h57_reg_t;

#define SBB_EFUSE_H57_DEFAULT (0x00000000U)
#define SBB_EFUSE_H57_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H57_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H57_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H57_VAL_BF_WID (32)
#define SBB_EFUSE_H57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L57_REG register description at address offset 0x11ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l57_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l57_reg_t;

#define SBB_EFUSE_L57_DEFAULT (0x00000000U)
#define SBB_EFUSE_L57_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L57_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L57_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L57_VAL_BF_WID (32)
#define SBB_EFUSE_L57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H58_REG register description at address offset 0x11f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h58_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h58_reg_t;

#define SBB_EFUSE_H58_DEFAULT (0x00000000U)
#define SBB_EFUSE_H58_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H58_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H58_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H58_VAL_BF_WID (32)
#define SBB_EFUSE_H58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L58_REG register description at address offset 0x11f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l58_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l58_reg_t;

#define SBB_EFUSE_L58_DEFAULT (0x00000000U)
#define SBB_EFUSE_L58_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L58_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L58_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L58_VAL_BF_WID (32)
#define SBB_EFUSE_L58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H59_REG register description at address offset 0x11f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h59_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h59_reg_t;

#define SBB_EFUSE_H59_DEFAULT (0x00000000U)
#define SBB_EFUSE_H59_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H59_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H59_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H59_VAL_BF_WID (32)
#define SBB_EFUSE_H59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L59_REG register description at address offset 0x11fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l59_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l59_reg_t;

#define SBB_EFUSE_L59_DEFAULT (0x00000000U)
#define SBB_EFUSE_L59_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L59_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L59_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L59_VAL_BF_WID (32)
#define SBB_EFUSE_L59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H60_REG register description at address offset 0x1200
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h60_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h60_reg_t;

#define SBB_EFUSE_H60_DEFAULT (0x00000000U)
#define SBB_EFUSE_H60_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H60_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H60_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H60_VAL_BF_WID (32)
#define SBB_EFUSE_H60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L60_REG register description at address offset 0x1204
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l60_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l60_reg_t;

#define SBB_EFUSE_L60_DEFAULT (0x00000000U)
#define SBB_EFUSE_L60_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L60_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L60_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L60_VAL_BF_WID (32)
#define SBB_EFUSE_L60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H61_REG register description at address offset 0x1208
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h61_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h61_reg_t;

#define SBB_EFUSE_H61_DEFAULT (0x00000000U)
#define SBB_EFUSE_H61_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H61_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H61_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H61_VAL_BF_WID (32)
#define SBB_EFUSE_H61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L61_REG register description at address offset 0x120c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l61_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l61_reg_t;

#define SBB_EFUSE_L61_DEFAULT (0x00000000U)
#define SBB_EFUSE_L61_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L61_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L61_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L61_VAL_BF_WID (32)
#define SBB_EFUSE_L61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H62_REG register description at address offset 0x1210
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h62_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h62_reg_t;

#define SBB_EFUSE_H62_DEFAULT (0x00000000U)
#define SBB_EFUSE_H62_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H62_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H62_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H62_VAL_BF_WID (32)
#define SBB_EFUSE_H62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L62_REG register description at address offset 0x1214
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l62_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l62_reg_t;

#define SBB_EFUSE_L62_DEFAULT (0x00000000U)
#define SBB_EFUSE_L62_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L62_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L62_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L62_VAL_BF_WID (32)
#define SBB_EFUSE_L62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H63_REG register description at address offset 0x1218
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h63_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h63_reg_t;

#define SBB_EFUSE_H63_DEFAULT (0x00000000U)
#define SBB_EFUSE_H63_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H63_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H63_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H63_VAL_BF_WID (32)
#define SBB_EFUSE_H63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L63_REG register description at address offset 0x121c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l63_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l63_reg_t;

#define SBB_EFUSE_L63_DEFAULT (0x00000000U)
#define SBB_EFUSE_L63_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L63_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L63_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L63_VAL_BF_WID (32)
#define SBB_EFUSE_L63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H64_REG register description at address offset 0x1220
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h64_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h64_reg_t;

#define SBB_EFUSE_H64_DEFAULT (0x00000000U)
#define SBB_EFUSE_H64_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H64_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H64_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H64_VAL_BF_WID (32)
#define SBB_EFUSE_H64_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H64_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L64_REG register description at address offset 0x1224
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l64_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l64_reg_t;

#define SBB_EFUSE_L64_DEFAULT (0x00000000U)
#define SBB_EFUSE_L64_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L64_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L64_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L64_VAL_BF_WID (32)
#define SBB_EFUSE_L64_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L64_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H65_REG register description at address offset 0x1228
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h65_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h65_reg_t;

#define SBB_EFUSE_H65_DEFAULT (0x00000000U)
#define SBB_EFUSE_H65_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H65_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H65_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H65_VAL_BF_WID (32)
#define SBB_EFUSE_H65_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H65_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L65_REG register description at address offset 0x122c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l65_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l65_reg_t;

#define SBB_EFUSE_L65_DEFAULT (0x00000000U)
#define SBB_EFUSE_L65_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L65_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L65_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L65_VAL_BF_WID (32)
#define SBB_EFUSE_L65_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L65_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H66_REG register description at address offset 0x1230
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h66_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h66_reg_t;

#define SBB_EFUSE_H66_DEFAULT (0x00000000U)
#define SBB_EFUSE_H66_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H66_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H66_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H66_VAL_BF_WID (32)
#define SBB_EFUSE_H66_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H66_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L66_REG register description at address offset 0x1234
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l66_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l66_reg_t;

#define SBB_EFUSE_L66_DEFAULT (0x00000000U)
#define SBB_EFUSE_L66_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L66_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L66_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L66_VAL_BF_WID (32)
#define SBB_EFUSE_L66_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L66_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H67_REG register description at address offset 0x1238
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h67_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h67_reg_t;

#define SBB_EFUSE_H67_DEFAULT (0x00000000U)
#define SBB_EFUSE_H67_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H67_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H67_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H67_VAL_BF_WID (32)
#define SBB_EFUSE_H67_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H67_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L67_REG register description at address offset 0x123c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l67_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l67_reg_t;

#define SBB_EFUSE_L67_DEFAULT (0x00000000U)
#define SBB_EFUSE_L67_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L67_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L67_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L67_VAL_BF_WID (32)
#define SBB_EFUSE_L67_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L67_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H68_REG register description at address offset 0x1240
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h68_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h68_reg_t;

#define SBB_EFUSE_H68_DEFAULT (0x00000000U)
#define SBB_EFUSE_H68_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H68_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H68_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H68_VAL_BF_WID (32)
#define SBB_EFUSE_H68_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H68_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L68_REG register description at address offset 0x1244
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l68_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l68_reg_t;

#define SBB_EFUSE_L68_DEFAULT (0x00000000U)
#define SBB_EFUSE_L68_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L68_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L68_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L68_VAL_BF_WID (32)
#define SBB_EFUSE_L68_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L68_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H69_REG register description at address offset 0x1248
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h69_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h69_reg_t;

#define SBB_EFUSE_H69_DEFAULT (0x00000000U)
#define SBB_EFUSE_H69_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H69_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H69_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H69_VAL_BF_WID (32)
#define SBB_EFUSE_H69_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H69_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L69_REG register description at address offset 0x124c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l69_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l69_reg_t;

#define SBB_EFUSE_L69_DEFAULT (0x00000000U)
#define SBB_EFUSE_L69_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L69_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L69_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L69_VAL_BF_WID (32)
#define SBB_EFUSE_L69_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L69_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H70_REG register description at address offset 0x1250
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h70_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h70_reg_t;

#define SBB_EFUSE_H70_DEFAULT (0x00000000U)
#define SBB_EFUSE_H70_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H70_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H70_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H70_VAL_BF_WID (32)
#define SBB_EFUSE_H70_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H70_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L70_REG register description at address offset 0x1254
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l70_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l70_reg_t;

#define SBB_EFUSE_L70_DEFAULT (0x00000000U)
#define SBB_EFUSE_L70_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L70_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L70_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L70_VAL_BF_WID (32)
#define SBB_EFUSE_L70_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L70_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H71_REG register description at address offset 0x1258
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h71_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h71_reg_t;

#define SBB_EFUSE_H71_DEFAULT (0x00000000U)
#define SBB_EFUSE_H71_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H71_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H71_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H71_VAL_BF_WID (32)
#define SBB_EFUSE_H71_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H71_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L71_REG register description at address offset 0x125c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l71_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l71_reg_t;

#define SBB_EFUSE_L71_DEFAULT (0x00000000U)
#define SBB_EFUSE_L71_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L71_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L71_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L71_VAL_BF_WID (32)
#define SBB_EFUSE_L71_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L71_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H72_REG register description at address offset 0x1260
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h72_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h72_reg_t;

#define SBB_EFUSE_H72_DEFAULT (0x00000000U)
#define SBB_EFUSE_H72_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H72_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H72_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H72_VAL_BF_WID (32)
#define SBB_EFUSE_H72_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H72_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L72_REG register description at address offset 0x1264
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l72_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l72_reg_t;

#define SBB_EFUSE_L72_DEFAULT (0x00000000U)
#define SBB_EFUSE_L72_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L72_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L72_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L72_VAL_BF_WID (32)
#define SBB_EFUSE_L72_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L72_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H73_REG register description at address offset 0x1268
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h73_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h73_reg_t;

#define SBB_EFUSE_H73_DEFAULT (0x00000000U)
#define SBB_EFUSE_H73_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H73_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H73_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H73_VAL_BF_WID (32)
#define SBB_EFUSE_H73_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H73_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L73_REG register description at address offset 0x126c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l73_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l73_reg_t;

#define SBB_EFUSE_L73_DEFAULT (0x00000000U)
#define SBB_EFUSE_L73_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L73_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L73_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L73_VAL_BF_WID (32)
#define SBB_EFUSE_L73_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L73_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H74_REG register description at address offset 0x1270
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h74_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h74_reg_t;

#define SBB_EFUSE_H74_DEFAULT (0x00000000U)
#define SBB_EFUSE_H74_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H74_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H74_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H74_VAL_BF_WID (32)
#define SBB_EFUSE_H74_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H74_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L74_REG register description at address offset 0x1274
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l74_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l74_reg_t;

#define SBB_EFUSE_L74_DEFAULT (0x00000000U)
#define SBB_EFUSE_L74_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L74_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L74_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L74_VAL_BF_WID (32)
#define SBB_EFUSE_L74_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L74_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H75_REG register description at address offset 0x1278
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h75_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h75_reg_t;

#define SBB_EFUSE_H75_DEFAULT (0x00000000U)
#define SBB_EFUSE_H75_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H75_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H75_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H75_VAL_BF_WID (32)
#define SBB_EFUSE_H75_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H75_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L75_REG register description at address offset 0x127c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l75_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l75_reg_t;

#define SBB_EFUSE_L75_DEFAULT (0x00000000U)
#define SBB_EFUSE_L75_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L75_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L75_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L75_VAL_BF_WID (32)
#define SBB_EFUSE_L75_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L75_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H76_REG register description at address offset 0x1280
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h76_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h76_reg_t;

#define SBB_EFUSE_H76_DEFAULT (0x00000000U)
#define SBB_EFUSE_H76_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H76_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H76_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H76_VAL_BF_WID (32)
#define SBB_EFUSE_H76_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H76_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L76_REG register description at address offset 0x1284
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l76_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l76_reg_t;

#define SBB_EFUSE_L76_DEFAULT (0x00000000U)
#define SBB_EFUSE_L76_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L76_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L76_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L76_VAL_BF_WID (32)
#define SBB_EFUSE_L76_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L76_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H77_REG register description at address offset 0x1288
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h77_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h77_reg_t;

#define SBB_EFUSE_H77_DEFAULT (0x00000000U)
#define SBB_EFUSE_H77_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H77_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H77_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H77_VAL_BF_WID (32)
#define SBB_EFUSE_H77_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H77_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L77_REG register description at address offset 0x128c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l77_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l77_reg_t;

#define SBB_EFUSE_L77_DEFAULT (0x00000000U)
#define SBB_EFUSE_L77_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L77_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L77_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L77_VAL_BF_WID (32)
#define SBB_EFUSE_L77_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L77_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H78_REG register description at address offset 0x1290
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h78_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h78_reg_t;

#define SBB_EFUSE_H78_DEFAULT (0x00000000U)
#define SBB_EFUSE_H78_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H78_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H78_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H78_VAL_BF_WID (32)
#define SBB_EFUSE_H78_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H78_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L78_REG register description at address offset 0x1294
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l78_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l78_reg_t;

#define SBB_EFUSE_L78_DEFAULT (0x00000000U)
#define SBB_EFUSE_L78_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L78_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L78_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L78_VAL_BF_WID (32)
#define SBB_EFUSE_L78_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L78_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H79_REG register description at address offset 0x1298
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h79_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h79_reg_t;

#define SBB_EFUSE_H79_DEFAULT (0x00000000U)
#define SBB_EFUSE_H79_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H79_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H79_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H79_VAL_BF_WID (32)
#define SBB_EFUSE_H79_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H79_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L79_REG register description at address offset 0x129c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l79_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l79_reg_t;

#define SBB_EFUSE_L79_DEFAULT (0x00000000U)
#define SBB_EFUSE_L79_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L79_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L79_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L79_VAL_BF_WID (32)
#define SBB_EFUSE_L79_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L79_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H80_REG register description at address offset 0x12a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h80_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h80_reg_t;

#define SBB_EFUSE_H80_DEFAULT (0x00000000U)
#define SBB_EFUSE_H80_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H80_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H80_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H80_VAL_BF_WID (32)
#define SBB_EFUSE_H80_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H80_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L80_REG register description at address offset 0x12a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l80_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l80_reg_t;

#define SBB_EFUSE_L80_DEFAULT (0x00000000U)
#define SBB_EFUSE_L80_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L80_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L80_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L80_VAL_BF_WID (32)
#define SBB_EFUSE_L80_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L80_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H81_REG register description at address offset 0x12a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h81_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h81_reg_t;

#define SBB_EFUSE_H81_DEFAULT (0x00000000U)
#define SBB_EFUSE_H81_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H81_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H81_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H81_VAL_BF_WID (32)
#define SBB_EFUSE_H81_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H81_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L81_REG register description at address offset 0x12ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l81_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l81_reg_t;

#define SBB_EFUSE_L81_DEFAULT (0x00000000U)
#define SBB_EFUSE_L81_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L81_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L81_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L81_VAL_BF_WID (32)
#define SBB_EFUSE_L81_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L81_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H82_REG register description at address offset 0x12b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h82_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h82_reg_t;

#define SBB_EFUSE_H82_DEFAULT (0x00000000U)
#define SBB_EFUSE_H82_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H82_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H82_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H82_VAL_BF_WID (32)
#define SBB_EFUSE_H82_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H82_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L82_REG register description at address offset 0x12b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l82_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l82_reg_t;

#define SBB_EFUSE_L82_DEFAULT (0x00000000U)
#define SBB_EFUSE_L82_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L82_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L82_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L82_VAL_BF_WID (32)
#define SBB_EFUSE_L82_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L82_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H83_REG register description at address offset 0x12b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h83_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h83_reg_t;

#define SBB_EFUSE_H83_DEFAULT (0x00000000U)
#define SBB_EFUSE_H83_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H83_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H83_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H83_VAL_BF_WID (32)
#define SBB_EFUSE_H83_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H83_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L83_REG register description at address offset 0x12bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l83_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l83_reg_t;

#define SBB_EFUSE_L83_DEFAULT (0x00000000U)
#define SBB_EFUSE_L83_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L83_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L83_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L83_VAL_BF_WID (32)
#define SBB_EFUSE_L83_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L83_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H84_REG register description at address offset 0x12c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h84_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h84_reg_t;

#define SBB_EFUSE_H84_DEFAULT (0x00000000U)
#define SBB_EFUSE_H84_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H84_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H84_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H84_VAL_BF_WID (32)
#define SBB_EFUSE_H84_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H84_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L84_REG register description at address offset 0x12c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l84_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l84_reg_t;

#define SBB_EFUSE_L84_DEFAULT (0x00000000U)
#define SBB_EFUSE_L84_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L84_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L84_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L84_VAL_BF_WID (32)
#define SBB_EFUSE_L84_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L84_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H85_REG register description at address offset 0x12c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h85_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h85_reg_t;

#define SBB_EFUSE_H85_DEFAULT (0x00000000U)
#define SBB_EFUSE_H85_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H85_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H85_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H85_VAL_BF_WID (32)
#define SBB_EFUSE_H85_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H85_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L85_REG register description at address offset 0x12cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l85_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l85_reg_t;

#define SBB_EFUSE_L85_DEFAULT (0x00000000U)
#define SBB_EFUSE_L85_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L85_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L85_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L85_VAL_BF_WID (32)
#define SBB_EFUSE_L85_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L85_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H86_REG register description at address offset 0x12d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h86_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h86_reg_t;

#define SBB_EFUSE_H86_DEFAULT (0x00000000U)
#define SBB_EFUSE_H86_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H86_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H86_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H86_VAL_BF_WID (32)
#define SBB_EFUSE_H86_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H86_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L86_REG register description at address offset 0x12d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l86_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l86_reg_t;

#define SBB_EFUSE_L86_DEFAULT (0x00000000U)
#define SBB_EFUSE_L86_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L86_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L86_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L86_VAL_BF_WID (32)
#define SBB_EFUSE_L86_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L86_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H87_REG register description at address offset 0x12d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h87_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h87_reg_t;

#define SBB_EFUSE_H87_DEFAULT (0x00000000U)
#define SBB_EFUSE_H87_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H87_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H87_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H87_VAL_BF_WID (32)
#define SBB_EFUSE_H87_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H87_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L87_REG register description at address offset 0x12dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l87_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l87_reg_t;

#define SBB_EFUSE_L87_DEFAULT (0x00000000U)
#define SBB_EFUSE_L87_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L87_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L87_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L87_VAL_BF_WID (32)
#define SBB_EFUSE_L87_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L87_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H88_REG register description at address offset 0x12e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h88_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h88_reg_t;

#define SBB_EFUSE_H88_DEFAULT (0x00000000U)
#define SBB_EFUSE_H88_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H88_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H88_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H88_VAL_BF_WID (32)
#define SBB_EFUSE_H88_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H88_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L88_REG register description at address offset 0x12e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l88_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l88_reg_t;

#define SBB_EFUSE_L88_DEFAULT (0x00000000U)
#define SBB_EFUSE_L88_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L88_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L88_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L88_VAL_BF_WID (32)
#define SBB_EFUSE_L88_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L88_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H89_REG register description at address offset 0x12e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h89_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h89_reg_t;

#define SBB_EFUSE_H89_DEFAULT (0x00000000U)
#define SBB_EFUSE_H89_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H89_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H89_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H89_VAL_BF_WID (32)
#define SBB_EFUSE_H89_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H89_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L89_REG register description at address offset 0x12ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l89_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l89_reg_t;

#define SBB_EFUSE_L89_DEFAULT (0x00000000U)
#define SBB_EFUSE_L89_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L89_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L89_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L89_VAL_BF_WID (32)
#define SBB_EFUSE_L89_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L89_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H90_REG register description at address offset 0x12f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h90_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h90_reg_t;

#define SBB_EFUSE_H90_DEFAULT (0x00000000U)
#define SBB_EFUSE_H90_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H90_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H90_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H90_VAL_BF_WID (32)
#define SBB_EFUSE_H90_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H90_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L90_REG register description at address offset 0x12f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l90_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l90_reg_t;

#define SBB_EFUSE_L90_DEFAULT (0x00000000U)
#define SBB_EFUSE_L90_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L90_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L90_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L90_VAL_BF_WID (32)
#define SBB_EFUSE_L90_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L90_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H91_REG register description at address offset 0x12f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h91_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h91_reg_t;

#define SBB_EFUSE_H91_DEFAULT (0x00000000U)
#define SBB_EFUSE_H91_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H91_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H91_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H91_VAL_BF_WID (32)
#define SBB_EFUSE_H91_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H91_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L91_REG register description at address offset 0x12fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l91_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l91_reg_t;

#define SBB_EFUSE_L91_DEFAULT (0x00000000U)
#define SBB_EFUSE_L91_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L91_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L91_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L91_VAL_BF_WID (32)
#define SBB_EFUSE_L91_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L91_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H92_REG register description at address offset 0x1300
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h92_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h92_reg_t;

#define SBB_EFUSE_H92_DEFAULT (0x00000000U)
#define SBB_EFUSE_H92_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H92_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H92_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H92_VAL_BF_WID (32)
#define SBB_EFUSE_H92_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H92_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L92_REG register description at address offset 0x1304
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l92_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l92_reg_t;

#define SBB_EFUSE_L92_DEFAULT (0x00000000U)
#define SBB_EFUSE_L92_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L92_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L92_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L92_VAL_BF_WID (32)
#define SBB_EFUSE_L92_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L92_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H93_REG register description at address offset 0x1308
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h93_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h93_reg_t;

#define SBB_EFUSE_H93_DEFAULT (0x00000000U)
#define SBB_EFUSE_H93_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H93_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H93_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H93_VAL_BF_WID (32)
#define SBB_EFUSE_H93_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H93_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L93_REG register description at address offset 0x130c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l93_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l93_reg_t;

#define SBB_EFUSE_L93_DEFAULT (0x00000000U)
#define SBB_EFUSE_L93_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L93_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L93_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L93_VAL_BF_WID (32)
#define SBB_EFUSE_L93_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L93_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H94_REG register description at address offset 0x1310
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h94_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h94_reg_t;

#define SBB_EFUSE_H94_DEFAULT (0x00000000U)
#define SBB_EFUSE_H94_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H94_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H94_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H94_VAL_BF_WID (32)
#define SBB_EFUSE_H94_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H94_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L94_REG register description at address offset 0x1314
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l94_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l94_reg_t;

#define SBB_EFUSE_L94_DEFAULT (0x00000000U)
#define SBB_EFUSE_L94_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L94_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L94_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L94_VAL_BF_WID (32)
#define SBB_EFUSE_L94_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L94_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H95_REG register description at address offset 0x1318
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h95_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h95_reg_t;

#define SBB_EFUSE_H95_DEFAULT (0x00000000U)
#define SBB_EFUSE_H95_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H95_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H95_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H95_VAL_BF_WID (32)
#define SBB_EFUSE_H95_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H95_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L95_REG register description at address offset 0x131c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l95_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l95_reg_t;

#define SBB_EFUSE_L95_DEFAULT (0x00000000U)
#define SBB_EFUSE_L95_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L95_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L95_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L95_VAL_BF_WID (32)
#define SBB_EFUSE_L95_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L95_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H96_REG register description at address offset 0x1320
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h96_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h96_reg_t;

#define SBB_EFUSE_H96_DEFAULT (0x00000000U)
#define SBB_EFUSE_H96_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H96_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H96_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H96_VAL_BF_WID (32)
#define SBB_EFUSE_H96_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H96_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L96_REG register description at address offset 0x1324
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l96_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l96_reg_t;

#define SBB_EFUSE_L96_DEFAULT (0x00000000U)
#define SBB_EFUSE_L96_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L96_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L96_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L96_VAL_BF_WID (32)
#define SBB_EFUSE_L96_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L96_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H97_REG register description at address offset 0x1328
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h97_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h97_reg_t;

#define SBB_EFUSE_H97_DEFAULT (0x00000000U)
#define SBB_EFUSE_H97_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H97_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H97_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H97_VAL_BF_WID (32)
#define SBB_EFUSE_H97_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H97_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L97_REG register description at address offset 0x132c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l97_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l97_reg_t;

#define SBB_EFUSE_L97_DEFAULT (0x00000000U)
#define SBB_EFUSE_L97_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L97_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L97_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L97_VAL_BF_WID (32)
#define SBB_EFUSE_L97_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L97_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H98_REG register description at address offset 0x1330
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h98_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h98_reg_t;

#define SBB_EFUSE_H98_DEFAULT (0x00000000U)
#define SBB_EFUSE_H98_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H98_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H98_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H98_VAL_BF_WID (32)
#define SBB_EFUSE_H98_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H98_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L98_REG register description at address offset 0x1334
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l98_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l98_reg_t;

#define SBB_EFUSE_L98_DEFAULT (0x00000000U)
#define SBB_EFUSE_L98_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L98_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L98_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L98_VAL_BF_WID (32)
#define SBB_EFUSE_L98_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L98_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H99_REG register description at address offset 0x1338
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h99_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h99_reg_t;

#define SBB_EFUSE_H99_DEFAULT (0x00000000U)
#define SBB_EFUSE_H99_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H99_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H99_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H99_VAL_BF_WID (32)
#define SBB_EFUSE_H99_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H99_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L99_REG register description at address offset 0x133c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l99_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l99_reg_t;

#define SBB_EFUSE_L99_DEFAULT (0x00000000U)
#define SBB_EFUSE_L99_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L99_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L99_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L99_VAL_BF_WID (32)
#define SBB_EFUSE_L99_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L99_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H100_REG register description at address offset 0x1340
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h100_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h100_reg_t;

#define SBB_EFUSE_H100_DEFAULT (0x00000000U)
#define SBB_EFUSE_H100_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H100_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H100_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H100_VAL_BF_WID (32)
#define SBB_EFUSE_H100_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H100_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L100_REG register description at address offset 0x1344
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l100_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l100_reg_t;

#define SBB_EFUSE_L100_DEFAULT (0x00000000U)
#define SBB_EFUSE_L100_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L100_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L100_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L100_VAL_BF_WID (32)
#define SBB_EFUSE_L100_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L100_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H101_REG register description at address offset 0x1348
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h101_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h101_reg_t;

#define SBB_EFUSE_H101_DEFAULT (0x00000000U)
#define SBB_EFUSE_H101_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H101_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H101_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H101_VAL_BF_WID (32)
#define SBB_EFUSE_H101_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H101_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L101_REG register description at address offset 0x134c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l101_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l101_reg_t;

#define SBB_EFUSE_L101_DEFAULT (0x00000000U)
#define SBB_EFUSE_L101_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L101_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L101_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L101_VAL_BF_WID (32)
#define SBB_EFUSE_L101_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L101_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H102_REG register description at address offset 0x1350
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h102_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h102_reg_t;

#define SBB_EFUSE_H102_DEFAULT (0x00000000U)
#define SBB_EFUSE_H102_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H102_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H102_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H102_VAL_BF_WID (32)
#define SBB_EFUSE_H102_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H102_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L102_REG register description at address offset 0x1354
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l102_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l102_reg_t;

#define SBB_EFUSE_L102_DEFAULT (0x00000000U)
#define SBB_EFUSE_L102_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L102_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L102_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L102_VAL_BF_WID (32)
#define SBB_EFUSE_L102_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L102_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H103_REG register description at address offset 0x1358
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h103_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h103_reg_t;

#define SBB_EFUSE_H103_DEFAULT (0x00000000U)
#define SBB_EFUSE_H103_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H103_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H103_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H103_VAL_BF_WID (32)
#define SBB_EFUSE_H103_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H103_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L103_REG register description at address offset 0x135c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l103_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l103_reg_t;

#define SBB_EFUSE_L103_DEFAULT (0x00000000U)
#define SBB_EFUSE_L103_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L103_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L103_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L103_VAL_BF_WID (32)
#define SBB_EFUSE_L103_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L103_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H104_REG register description at address offset 0x1360
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h104_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h104_reg_t;

#define SBB_EFUSE_H104_DEFAULT (0x00000000U)
#define SBB_EFUSE_H104_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H104_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H104_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H104_VAL_BF_WID (32)
#define SBB_EFUSE_H104_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H104_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L104_REG register description at address offset 0x1364
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l104_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l104_reg_t;

#define SBB_EFUSE_L104_DEFAULT (0x00000000U)
#define SBB_EFUSE_L104_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L104_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L104_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L104_VAL_BF_WID (32)
#define SBB_EFUSE_L104_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L104_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H105_REG register description at address offset 0x1368
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h105_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h105_reg_t;

#define SBB_EFUSE_H105_DEFAULT (0x00000000U)
#define SBB_EFUSE_H105_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H105_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H105_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H105_VAL_BF_WID (32)
#define SBB_EFUSE_H105_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H105_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L105_REG register description at address offset 0x136c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l105_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l105_reg_t;

#define SBB_EFUSE_L105_DEFAULT (0x00000000U)
#define SBB_EFUSE_L105_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L105_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L105_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L105_VAL_BF_WID (32)
#define SBB_EFUSE_L105_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L105_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H106_REG register description at address offset 0x1370
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h106_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h106_reg_t;

#define SBB_EFUSE_H106_DEFAULT (0x00000000U)
#define SBB_EFUSE_H106_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H106_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H106_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H106_VAL_BF_WID (32)
#define SBB_EFUSE_H106_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H106_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L106_REG register description at address offset 0x1374
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l106_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l106_reg_t;

#define SBB_EFUSE_L106_DEFAULT (0x00000000U)
#define SBB_EFUSE_L106_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L106_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L106_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L106_VAL_BF_WID (32)
#define SBB_EFUSE_L106_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L106_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H107_REG register description at address offset 0x1378
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h107_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h107_reg_t;

#define SBB_EFUSE_H107_DEFAULT (0x00000000U)
#define SBB_EFUSE_H107_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H107_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H107_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H107_VAL_BF_WID (32)
#define SBB_EFUSE_H107_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H107_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L107_REG register description at address offset 0x137c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l107_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l107_reg_t;

#define SBB_EFUSE_L107_DEFAULT (0x00000000U)
#define SBB_EFUSE_L107_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L107_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L107_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L107_VAL_BF_WID (32)
#define SBB_EFUSE_L107_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L107_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H108_REG register description at address offset 0x1380
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h108_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h108_reg_t;

#define SBB_EFUSE_H108_DEFAULT (0x00000000U)
#define SBB_EFUSE_H108_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H108_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H108_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H108_VAL_BF_WID (32)
#define SBB_EFUSE_H108_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H108_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L108_REG register description at address offset 0x1384
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l108_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l108_reg_t;

#define SBB_EFUSE_L108_DEFAULT (0x00000000U)
#define SBB_EFUSE_L108_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L108_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L108_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L108_VAL_BF_WID (32)
#define SBB_EFUSE_L108_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L108_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H109_REG register description at address offset 0x1388
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h109_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h109_reg_t;

#define SBB_EFUSE_H109_DEFAULT (0x00000000U)
#define SBB_EFUSE_H109_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H109_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H109_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H109_VAL_BF_WID (32)
#define SBB_EFUSE_H109_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H109_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L109_REG register description at address offset 0x138c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l109_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l109_reg_t;

#define SBB_EFUSE_L109_DEFAULT (0x00000000U)
#define SBB_EFUSE_L109_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L109_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L109_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L109_VAL_BF_WID (32)
#define SBB_EFUSE_L109_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L109_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H110_REG register description at address offset 0x1390
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h110_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h110_reg_t;

#define SBB_EFUSE_H110_DEFAULT (0x00000000U)
#define SBB_EFUSE_H110_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H110_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H110_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H110_VAL_BF_WID (32)
#define SBB_EFUSE_H110_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H110_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L110_REG register description at address offset 0x1394
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l110_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l110_reg_t;

#define SBB_EFUSE_L110_DEFAULT (0x00000000U)
#define SBB_EFUSE_L110_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L110_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L110_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L110_VAL_BF_WID (32)
#define SBB_EFUSE_L110_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L110_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_H111_REG register description at address offset 0x1398
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_h111_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_h111_reg_t;

#define SBB_EFUSE_H111_DEFAULT (0x00000000U)
#define SBB_EFUSE_H111_RD_MASK (0xffffffffU)
#define SBB_EFUSE_H111_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_H111_VAL_BF_OFF ( 0)
#define SBB_EFUSE_H111_VAL_BF_WID (32)
#define SBB_EFUSE_H111_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_H111_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_EFUSE_L111_REG register description at address offset 0x139c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/efuse_l111_reg
  * Efuse Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of eFuse register. If register is secured value 0 is returned.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_efuse_l111_reg_t;

#define SBB_EFUSE_L111_DEFAULT (0x00000000U)
#define SBB_EFUSE_L111_RD_MASK (0xffffffffU)
#define SBB_EFUSE_L111_WR_MASK (0x00000000U)


///< Value of eFuse register. If register is secured value 0 is returned.
#define SBB_EFUSE_L111_VAL_BF_OFF ( 0)
#define SBB_EFUSE_L111_VAL_BF_WID (32)
#define SBB_EFUSE_L111_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_EFUSE_L111_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H0_REG register description at address offset 0x1600
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h0_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h0_reg_t;

#define SBB_PARAM_EXT_H0_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H0_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H0_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H0_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H0_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L0_REG register description at address offset 0x1604
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l0_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l0_reg_t;

#define SBB_PARAM_EXT_L0_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L0_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L0_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L0_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L0_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H1_REG register description at address offset 0x1608
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h1_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h1_reg_t;

#define SBB_PARAM_EXT_H1_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H1_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H1_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H1_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H1_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L1_REG register description at address offset 0x160c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l1_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l1_reg_t;

#define SBB_PARAM_EXT_L1_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L1_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L1_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L1_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L1_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H2_REG register description at address offset 0x1610
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h2_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h2_reg_t;

#define SBB_PARAM_EXT_H2_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H2_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H2_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H2_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H2_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L2_REG register description at address offset 0x1614
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l2_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l2_reg_t;

#define SBB_PARAM_EXT_L2_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L2_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L2_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L2_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L2_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H3_REG register description at address offset 0x1618
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h3_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h3_reg_t;

#define SBB_PARAM_EXT_H3_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H3_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H3_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H3_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H3_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L3_REG register description at address offset 0x161c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l3_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l3_reg_t;

#define SBB_PARAM_EXT_L3_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L3_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L3_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L3_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L3_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H4_REG register description at address offset 0x1620
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h4_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h4_reg_t;

#define SBB_PARAM_EXT_H4_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H4_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H4_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H4_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H4_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L4_REG register description at address offset 0x1624
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l4_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l4_reg_t;

#define SBB_PARAM_EXT_L4_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L4_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L4_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L4_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L4_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H5_REG register description at address offset 0x1628
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h5_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h5_reg_t;

#define SBB_PARAM_EXT_H5_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H5_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H5_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H5_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H5_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L5_REG register description at address offset 0x162c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l5_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l5_reg_t;

#define SBB_PARAM_EXT_L5_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L5_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L5_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L5_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L5_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H6_REG register description at address offset 0x1630
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h6_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h6_reg_t;

#define SBB_PARAM_EXT_H6_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H6_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H6_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H6_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H6_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L6_REG register description at address offset 0x1634
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l6_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l6_reg_t;

#define SBB_PARAM_EXT_L6_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L6_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L6_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L6_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L6_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H7_REG register description at address offset 0x1638
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h7_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h7_reg_t;

#define SBB_PARAM_EXT_H7_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H7_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H7_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H7_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H7_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L7_REG register description at address offset 0x163c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l7_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l7_reg_t;

#define SBB_PARAM_EXT_L7_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L7_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L7_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L7_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L7_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H8_REG register description at address offset 0x1640
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h8_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h8_reg_t;

#define SBB_PARAM_EXT_H8_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H8_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H8_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H8_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H8_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L8_REG register description at address offset 0x1644
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l8_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l8_reg_t;

#define SBB_PARAM_EXT_L8_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L8_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L8_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L8_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L8_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H9_REG register description at address offset 0x1648
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h9_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h9_reg_t;

#define SBB_PARAM_EXT_H9_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H9_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H9_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H9_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H9_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L9_REG register description at address offset 0x164c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l9_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l9_reg_t;

#define SBB_PARAM_EXT_L9_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L9_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L9_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L9_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L9_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H10_REG register description at address offset 0x1650
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h10_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h10_reg_t;

#define SBB_PARAM_EXT_H10_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H10_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H10_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H10_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H10_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L10_REG register description at address offset 0x1654
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l10_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l10_reg_t;

#define SBB_PARAM_EXT_L10_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L10_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L10_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L10_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L10_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H11_REG register description at address offset 0x1658
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h11_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h11_reg_t;

#define SBB_PARAM_EXT_H11_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H11_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H11_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H11_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H11_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L11_REG register description at address offset 0x165c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l11_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l11_reg_t;

#define SBB_PARAM_EXT_L11_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L11_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L11_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L11_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L11_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H12_REG register description at address offset 0x1660
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h12_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h12_reg_t;

#define SBB_PARAM_EXT_H12_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H12_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H12_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H12_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H12_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L12_REG register description at address offset 0x1664
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l12_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l12_reg_t;

#define SBB_PARAM_EXT_L12_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L12_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L12_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L12_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L12_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H13_REG register description at address offset 0x1668
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h13_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h13_reg_t;

#define SBB_PARAM_EXT_H13_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H13_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H13_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H13_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H13_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L13_REG register description at address offset 0x166c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l13_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l13_reg_t;

#define SBB_PARAM_EXT_L13_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L13_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L13_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L13_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L13_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H14_REG register description at address offset 0x1670
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h14_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h14_reg_t;

#define SBB_PARAM_EXT_H14_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H14_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H14_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H14_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H14_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L14_REG register description at address offset 0x1674
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l14_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l14_reg_t;

#define SBB_PARAM_EXT_L14_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L14_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L14_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L14_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L14_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H15_REG register description at address offset 0x1678
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h15_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h15_reg_t;

#define SBB_PARAM_EXT_H15_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H15_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H15_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H15_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H15_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L15_REG register description at address offset 0x167c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l15_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l15_reg_t;

#define SBB_PARAM_EXT_L15_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L15_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L15_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L15_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L15_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H16_REG register description at address offset 0x1680
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h16_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h16_reg_t;

#define SBB_PARAM_EXT_H16_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H16_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H16_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H16_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H16_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L16_REG register description at address offset 0x1684
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l16_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l16_reg_t;

#define SBB_PARAM_EXT_L16_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L16_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L16_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L16_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L16_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H17_REG register description at address offset 0x1688
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h17_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h17_reg_t;

#define SBB_PARAM_EXT_H17_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H17_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H17_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H17_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H17_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L17_REG register description at address offset 0x168c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l17_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l17_reg_t;

#define SBB_PARAM_EXT_L17_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L17_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L17_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L17_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L17_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H18_REG register description at address offset 0x1690
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h18_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h18_reg_t;

#define SBB_PARAM_EXT_H18_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H18_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H18_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H18_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H18_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L18_REG register description at address offset 0x1694
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l18_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l18_reg_t;

#define SBB_PARAM_EXT_L18_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L18_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L18_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L18_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L18_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H19_REG register description at address offset 0x1698
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h19_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h19_reg_t;

#define SBB_PARAM_EXT_H19_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H19_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H19_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H19_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H19_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L19_REG register description at address offset 0x169c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l19_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l19_reg_t;

#define SBB_PARAM_EXT_L19_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L19_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L19_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L19_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L19_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H20_REG register description at address offset 0x16a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h20_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h20_reg_t;

#define SBB_PARAM_EXT_H20_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H20_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H20_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H20_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H20_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L20_REG register description at address offset 0x16a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l20_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l20_reg_t;

#define SBB_PARAM_EXT_L20_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L20_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L20_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L20_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L20_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H21_REG register description at address offset 0x16a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h21_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h21_reg_t;

#define SBB_PARAM_EXT_H21_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H21_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H21_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H21_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H21_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L21_REG register description at address offset 0x16ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l21_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l21_reg_t;

#define SBB_PARAM_EXT_L21_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L21_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L21_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L21_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L21_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H22_REG register description at address offset 0x16b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h22_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h22_reg_t;

#define SBB_PARAM_EXT_H22_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H22_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H22_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H22_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H22_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L22_REG register description at address offset 0x16b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l22_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l22_reg_t;

#define SBB_PARAM_EXT_L22_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L22_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L22_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L22_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L22_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H23_REG register description at address offset 0x16b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h23_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h23_reg_t;

#define SBB_PARAM_EXT_H23_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H23_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H23_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H23_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H23_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L23_REG register description at address offset 0x16bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l23_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l23_reg_t;

#define SBB_PARAM_EXT_L23_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L23_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L23_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L23_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L23_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H24_REG register description at address offset 0x16c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h24_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h24_reg_t;

#define SBB_PARAM_EXT_H24_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H24_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H24_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H24_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H24_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L24_REG register description at address offset 0x16c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l24_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l24_reg_t;

#define SBB_PARAM_EXT_L24_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L24_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L24_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L24_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L24_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H25_REG register description at address offset 0x16c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h25_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h25_reg_t;

#define SBB_PARAM_EXT_H25_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H25_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H25_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H25_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H25_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L25_REG register description at address offset 0x16cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l25_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l25_reg_t;

#define SBB_PARAM_EXT_L25_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L25_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L25_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L25_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L25_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H26_REG register description at address offset 0x16d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h26_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h26_reg_t;

#define SBB_PARAM_EXT_H26_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H26_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H26_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H26_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H26_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L26_REG register description at address offset 0x16d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l26_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l26_reg_t;

#define SBB_PARAM_EXT_L26_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L26_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L26_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L26_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L26_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H27_REG register description at address offset 0x16d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h27_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h27_reg_t;

#define SBB_PARAM_EXT_H27_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H27_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H27_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H27_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H27_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L27_REG register description at address offset 0x16dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l27_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l27_reg_t;

#define SBB_PARAM_EXT_L27_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L27_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L27_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L27_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L27_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H28_REG register description at address offset 0x16e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h28_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h28_reg_t;

#define SBB_PARAM_EXT_H28_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H28_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H28_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H28_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H28_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L28_REG register description at address offset 0x16e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l28_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l28_reg_t;

#define SBB_PARAM_EXT_L28_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L28_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L28_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L28_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L28_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H29_REG register description at address offset 0x16e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h29_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h29_reg_t;

#define SBB_PARAM_EXT_H29_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H29_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H29_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H29_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H29_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L29_REG register description at address offset 0x16ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l29_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l29_reg_t;

#define SBB_PARAM_EXT_L29_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L29_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L29_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L29_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L29_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H30_REG register description at address offset 0x16f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h30_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h30_reg_t;

#define SBB_PARAM_EXT_H30_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H30_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H30_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H30_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H30_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L30_REG register description at address offset 0x16f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l30_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l30_reg_t;

#define SBB_PARAM_EXT_L30_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L30_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L30_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L30_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L30_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H31_REG register description at address offset 0x16f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h31_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h31_reg_t;

#define SBB_PARAM_EXT_H31_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H31_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H31_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H31_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H31_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L31_REG register description at address offset 0x16fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l31_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l31_reg_t;

#define SBB_PARAM_EXT_L31_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L31_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L31_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L31_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L31_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H32_REG register description at address offset 0x1700
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h32_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h32_reg_t;

#define SBB_PARAM_EXT_H32_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H32_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H32_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H32_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H32_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L32_REG register description at address offset 0x1704
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l32_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l32_reg_t;

#define SBB_PARAM_EXT_L32_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L32_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L32_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L32_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L32_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H33_REG register description at address offset 0x1708
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h33_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h33_reg_t;

#define SBB_PARAM_EXT_H33_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H33_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H33_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H33_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H33_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L33_REG register description at address offset 0x170c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l33_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l33_reg_t;

#define SBB_PARAM_EXT_L33_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L33_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L33_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L33_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L33_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H34_REG register description at address offset 0x1710
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h34_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h34_reg_t;

#define SBB_PARAM_EXT_H34_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H34_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H34_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H34_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H34_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L34_REG register description at address offset 0x1714
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l34_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l34_reg_t;

#define SBB_PARAM_EXT_L34_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L34_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L34_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L34_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L34_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H35_REG register description at address offset 0x1718
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h35_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h35_reg_t;

#define SBB_PARAM_EXT_H35_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H35_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H35_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H35_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H35_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L35_REG register description at address offset 0x171c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l35_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l35_reg_t;

#define SBB_PARAM_EXT_L35_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L35_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L35_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L35_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L35_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H36_REG register description at address offset 0x1720
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h36_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h36_reg_t;

#define SBB_PARAM_EXT_H36_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H36_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H36_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H36_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H36_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L36_REG register description at address offset 0x1724
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l36_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l36_reg_t;

#define SBB_PARAM_EXT_L36_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L36_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L36_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L36_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L36_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H37_REG register description at address offset 0x1728
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h37_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h37_reg_t;

#define SBB_PARAM_EXT_H37_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H37_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H37_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H37_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H37_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L37_REG register description at address offset 0x172c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l37_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l37_reg_t;

#define SBB_PARAM_EXT_L37_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L37_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L37_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L37_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L37_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H38_REG register description at address offset 0x1730
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h38_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h38_reg_t;

#define SBB_PARAM_EXT_H38_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H38_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H38_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H38_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H38_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L38_REG register description at address offset 0x1734
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l38_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l38_reg_t;

#define SBB_PARAM_EXT_L38_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L38_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L38_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L38_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L38_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H39_REG register description at address offset 0x1738
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h39_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h39_reg_t;

#define SBB_PARAM_EXT_H39_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H39_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H39_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H39_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H39_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L39_REG register description at address offset 0x173c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l39_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l39_reg_t;

#define SBB_PARAM_EXT_L39_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L39_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L39_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L39_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L39_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H40_REG register description at address offset 0x1740
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h40_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h40_reg_t;

#define SBB_PARAM_EXT_H40_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H40_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H40_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H40_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H40_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L40_REG register description at address offset 0x1744
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l40_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l40_reg_t;

#define SBB_PARAM_EXT_L40_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L40_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L40_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L40_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L40_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H41_REG register description at address offset 0x1748
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h41_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h41_reg_t;

#define SBB_PARAM_EXT_H41_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H41_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H41_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H41_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H41_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L41_REG register description at address offset 0x174c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l41_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l41_reg_t;

#define SBB_PARAM_EXT_L41_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L41_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L41_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L41_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L41_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H42_REG register description at address offset 0x1750
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h42_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h42_reg_t;

#define SBB_PARAM_EXT_H42_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H42_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H42_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H42_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H42_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L42_REG register description at address offset 0x1754
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l42_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l42_reg_t;

#define SBB_PARAM_EXT_L42_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L42_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L42_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L42_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L42_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H43_REG register description at address offset 0x1758
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h43_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h43_reg_t;

#define SBB_PARAM_EXT_H43_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H43_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H43_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H43_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H43_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L43_REG register description at address offset 0x175c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l43_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l43_reg_t;

#define SBB_PARAM_EXT_L43_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L43_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L43_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L43_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L43_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H44_REG register description at address offset 0x1760
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h44_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h44_reg_t;

#define SBB_PARAM_EXT_H44_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H44_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H44_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H44_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H44_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L44_REG register description at address offset 0x1764
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l44_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l44_reg_t;

#define SBB_PARAM_EXT_L44_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L44_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L44_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L44_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L44_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H45_REG register description at address offset 0x1768
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h45_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h45_reg_t;

#define SBB_PARAM_EXT_H45_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H45_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H45_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H45_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H45_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L45_REG register description at address offset 0x176c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l45_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l45_reg_t;

#define SBB_PARAM_EXT_L45_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L45_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L45_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L45_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L45_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H46_REG register description at address offset 0x1770
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h46_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h46_reg_t;

#define SBB_PARAM_EXT_H46_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H46_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H46_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H46_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H46_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L46_REG register description at address offset 0x1774
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l46_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l46_reg_t;

#define SBB_PARAM_EXT_L46_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L46_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L46_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L46_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L46_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H47_REG register description at address offset 0x1778
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h47_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h47_reg_t;

#define SBB_PARAM_EXT_H47_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H47_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H47_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H47_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H47_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L47_REG register description at address offset 0x177c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l47_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l47_reg_t;

#define SBB_PARAM_EXT_L47_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L47_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L47_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L47_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L47_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H48_REG register description at address offset 0x1780
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h48_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h48_reg_t;

#define SBB_PARAM_EXT_H48_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H48_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H48_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H48_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H48_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L48_REG register description at address offset 0x1784
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l48_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l48_reg_t;

#define SBB_PARAM_EXT_L48_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L48_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L48_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L48_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L48_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H49_REG register description at address offset 0x1788
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h49_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h49_reg_t;

#define SBB_PARAM_EXT_H49_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H49_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H49_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H49_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H49_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L49_REG register description at address offset 0x178c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l49_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l49_reg_t;

#define SBB_PARAM_EXT_L49_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L49_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L49_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L49_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L49_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H50_REG register description at address offset 0x1790
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h50_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h50_reg_t;

#define SBB_PARAM_EXT_H50_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H50_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H50_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H50_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H50_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L50_REG register description at address offset 0x1794
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l50_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l50_reg_t;

#define SBB_PARAM_EXT_L50_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L50_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L50_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L50_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L50_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H51_REG register description at address offset 0x1798
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h51_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h51_reg_t;

#define SBB_PARAM_EXT_H51_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H51_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H51_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H51_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H51_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L51_REG register description at address offset 0x179c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l51_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l51_reg_t;

#define SBB_PARAM_EXT_L51_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L51_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L51_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L51_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L51_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H52_REG register description at address offset 0x17a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h52_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h52_reg_t;

#define SBB_PARAM_EXT_H52_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H52_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H52_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H52_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H52_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L52_REG register description at address offset 0x17a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l52_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l52_reg_t;

#define SBB_PARAM_EXT_L52_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L52_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L52_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L52_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L52_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H53_REG register description at address offset 0x17a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h53_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h53_reg_t;

#define SBB_PARAM_EXT_H53_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H53_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H53_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H53_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H53_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L53_REG register description at address offset 0x17ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l53_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l53_reg_t;

#define SBB_PARAM_EXT_L53_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L53_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L53_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L53_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L53_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H54_REG register description at address offset 0x17b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h54_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h54_reg_t;

#define SBB_PARAM_EXT_H54_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H54_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H54_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H54_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H54_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L54_REG register description at address offset 0x17b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l54_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l54_reg_t;

#define SBB_PARAM_EXT_L54_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L54_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L54_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L54_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L54_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H55_REG register description at address offset 0x17b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h55_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h55_reg_t;

#define SBB_PARAM_EXT_H55_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H55_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H55_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H55_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H55_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L55_REG register description at address offset 0x17bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l55_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l55_reg_t;

#define SBB_PARAM_EXT_L55_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L55_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L55_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L55_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L55_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H56_REG register description at address offset 0x17c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h56_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h56_reg_t;

#define SBB_PARAM_EXT_H56_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H56_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H56_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H56_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H56_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L56_REG register description at address offset 0x17c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l56_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l56_reg_t;

#define SBB_PARAM_EXT_L56_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L56_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L56_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L56_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L56_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H57_REG register description at address offset 0x17c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h57_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h57_reg_t;

#define SBB_PARAM_EXT_H57_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H57_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H57_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H57_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H57_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L57_REG register description at address offset 0x17cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l57_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l57_reg_t;

#define SBB_PARAM_EXT_L57_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L57_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L57_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L57_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L57_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H58_REG register description at address offset 0x17d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h58_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h58_reg_t;

#define SBB_PARAM_EXT_H58_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H58_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H58_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H58_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H58_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L58_REG register description at address offset 0x17d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l58_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l58_reg_t;

#define SBB_PARAM_EXT_L58_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L58_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L58_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L58_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L58_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H59_REG register description at address offset 0x17d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h59_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h59_reg_t;

#define SBB_PARAM_EXT_H59_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H59_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H59_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H59_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H59_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L59_REG register description at address offset 0x17dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l59_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l59_reg_t;

#define SBB_PARAM_EXT_L59_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L59_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L59_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L59_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L59_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H60_REG register description at address offset 0x17e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h60_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h60_reg_t;

#define SBB_PARAM_EXT_H60_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H60_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H60_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H60_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H60_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L60_REG register description at address offset 0x17e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l60_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l60_reg_t;

#define SBB_PARAM_EXT_L60_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L60_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L60_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L60_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L60_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H61_REG register description at address offset 0x17e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h61_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h61_reg_t;

#define SBB_PARAM_EXT_H61_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H61_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H61_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H61_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H61_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L61_REG register description at address offset 0x17ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l61_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l61_reg_t;

#define SBB_PARAM_EXT_L61_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L61_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L61_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L61_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L61_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H62_REG register description at address offset 0x17f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h62_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h62_reg_t;

#define SBB_PARAM_EXT_H62_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H62_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H62_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H62_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H62_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L62_REG register description at address offset 0x17f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l62_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l62_reg_t;

#define SBB_PARAM_EXT_L62_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L62_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L62_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L62_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L62_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_H63_REG register description at address offset 0x17f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_h63_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_h63_reg_t;

#define SBB_PARAM_EXT_H63_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_H63_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_H63_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_H63_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_H63_VAL_BF_WID (32)
#define SBB_PARAM_EXT_H63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_H63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_EXT_L63_REG register description at address offset 0x17fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_ext_l63_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_ext_l63_reg_t;

#define SBB_PARAM_EXT_L63_DEFAULT (0x00000000U)
#define SBB_PARAM_EXT_L63_RD_MASK (0xffffffffU)
#define SBB_PARAM_EXT_L63_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_EXT_L63_VAL_BF_OFF ( 0)
#define SBB_PARAM_EXT_L63_VAL_BF_WID (32)
#define SBB_PARAM_EXT_L63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_EXT_L63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H0_REG register description at address offset 0x1800
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h0_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h0_reg_t;

#define SBB_PARAM_H0_DEFAULT (0x00000000U)
#define SBB_PARAM_H0_RD_MASK (0xffffffffU)
#define SBB_PARAM_H0_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H0_VAL_BF_OFF ( 0)
#define SBB_PARAM_H0_VAL_BF_WID (32)
#define SBB_PARAM_H0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L0_REG register description at address offset 0x1804
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l0_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l0_reg_t;

#define SBB_PARAM_L0_DEFAULT (0x00000000U)
#define SBB_PARAM_L0_RD_MASK (0xffffffffU)
#define SBB_PARAM_L0_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L0_VAL_BF_OFF ( 0)
#define SBB_PARAM_L0_VAL_BF_WID (32)
#define SBB_PARAM_L0_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L0_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H1_REG register description at address offset 0x1808
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h1_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h1_reg_t;

#define SBB_PARAM_H1_DEFAULT (0x00000000U)
#define SBB_PARAM_H1_RD_MASK (0xffffffffU)
#define SBB_PARAM_H1_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H1_VAL_BF_OFF ( 0)
#define SBB_PARAM_H1_VAL_BF_WID (32)
#define SBB_PARAM_H1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L1_REG register description at address offset 0x180c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l1_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l1_reg_t;

#define SBB_PARAM_L1_DEFAULT (0x00000000U)
#define SBB_PARAM_L1_RD_MASK (0xffffffffU)
#define SBB_PARAM_L1_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L1_VAL_BF_OFF ( 0)
#define SBB_PARAM_L1_VAL_BF_WID (32)
#define SBB_PARAM_L1_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L1_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H2_REG register description at address offset 0x1810
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h2_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h2_reg_t;

#define SBB_PARAM_H2_DEFAULT (0x00000000U)
#define SBB_PARAM_H2_RD_MASK (0xffffffffU)
#define SBB_PARAM_H2_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H2_VAL_BF_OFF ( 0)
#define SBB_PARAM_H2_VAL_BF_WID (32)
#define SBB_PARAM_H2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L2_REG register description at address offset 0x1814
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l2_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l2_reg_t;

#define SBB_PARAM_L2_DEFAULT (0x00000000U)
#define SBB_PARAM_L2_RD_MASK (0xffffffffU)
#define SBB_PARAM_L2_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L2_VAL_BF_OFF ( 0)
#define SBB_PARAM_L2_VAL_BF_WID (32)
#define SBB_PARAM_L2_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L2_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H3_REG register description at address offset 0x1818
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h3_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h3_reg_t;

#define SBB_PARAM_H3_DEFAULT (0x00000000U)
#define SBB_PARAM_H3_RD_MASK (0xffffffffU)
#define SBB_PARAM_H3_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H3_VAL_BF_OFF ( 0)
#define SBB_PARAM_H3_VAL_BF_WID (32)
#define SBB_PARAM_H3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L3_REG register description at address offset 0x181c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l3_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l3_reg_t;

#define SBB_PARAM_L3_DEFAULT (0x00000000U)
#define SBB_PARAM_L3_RD_MASK (0xffffffffU)
#define SBB_PARAM_L3_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L3_VAL_BF_OFF ( 0)
#define SBB_PARAM_L3_VAL_BF_WID (32)
#define SBB_PARAM_L3_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L3_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H4_REG register description at address offset 0x1820
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h4_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h4_reg_t;

#define SBB_PARAM_H4_DEFAULT (0x00000000U)
#define SBB_PARAM_H4_RD_MASK (0xffffffffU)
#define SBB_PARAM_H4_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H4_VAL_BF_OFF ( 0)
#define SBB_PARAM_H4_VAL_BF_WID (32)
#define SBB_PARAM_H4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L4_REG register description at address offset 0x1824
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l4_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l4_reg_t;

#define SBB_PARAM_L4_DEFAULT (0x00000000U)
#define SBB_PARAM_L4_RD_MASK (0xffffffffU)
#define SBB_PARAM_L4_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L4_VAL_BF_OFF ( 0)
#define SBB_PARAM_L4_VAL_BF_WID (32)
#define SBB_PARAM_L4_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L4_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H5_REG register description at address offset 0x1828
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h5_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h5_reg_t;

#define SBB_PARAM_H5_DEFAULT (0x00000000U)
#define SBB_PARAM_H5_RD_MASK (0xffffffffU)
#define SBB_PARAM_H5_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H5_VAL_BF_OFF ( 0)
#define SBB_PARAM_H5_VAL_BF_WID (32)
#define SBB_PARAM_H5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L5_REG register description at address offset 0x182c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l5_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l5_reg_t;

#define SBB_PARAM_L5_DEFAULT (0x00000000U)
#define SBB_PARAM_L5_RD_MASK (0xffffffffU)
#define SBB_PARAM_L5_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L5_VAL_BF_OFF ( 0)
#define SBB_PARAM_L5_VAL_BF_WID (32)
#define SBB_PARAM_L5_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L5_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H6_REG register description at address offset 0x1830
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h6_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h6_reg_t;

#define SBB_PARAM_H6_DEFAULT (0x00000000U)
#define SBB_PARAM_H6_RD_MASK (0xffffffffU)
#define SBB_PARAM_H6_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H6_VAL_BF_OFF ( 0)
#define SBB_PARAM_H6_VAL_BF_WID (32)
#define SBB_PARAM_H6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L6_REG register description at address offset 0x1834
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l6_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l6_reg_t;

#define SBB_PARAM_L6_DEFAULT (0x00000000U)
#define SBB_PARAM_L6_RD_MASK (0xffffffffU)
#define SBB_PARAM_L6_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L6_VAL_BF_OFF ( 0)
#define SBB_PARAM_L6_VAL_BF_WID (32)
#define SBB_PARAM_L6_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L6_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H7_REG register description at address offset 0x1838
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h7_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h7_reg_t;

#define SBB_PARAM_H7_DEFAULT (0x00000000U)
#define SBB_PARAM_H7_RD_MASK (0xffffffffU)
#define SBB_PARAM_H7_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H7_VAL_BF_OFF ( 0)
#define SBB_PARAM_H7_VAL_BF_WID (32)
#define SBB_PARAM_H7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L7_REG register description at address offset 0x183c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l7_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l7_reg_t;

#define SBB_PARAM_L7_DEFAULT (0x00000000U)
#define SBB_PARAM_L7_RD_MASK (0xffffffffU)
#define SBB_PARAM_L7_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L7_VAL_BF_OFF ( 0)
#define SBB_PARAM_L7_VAL_BF_WID (32)
#define SBB_PARAM_L7_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L7_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H8_REG register description at address offset 0x1840
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h8_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h8_reg_t;

#define SBB_PARAM_H8_DEFAULT (0x00000000U)
#define SBB_PARAM_H8_RD_MASK (0xffffffffU)
#define SBB_PARAM_H8_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H8_VAL_BF_OFF ( 0)
#define SBB_PARAM_H8_VAL_BF_WID (32)
#define SBB_PARAM_H8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L8_REG register description at address offset 0x1844
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l8_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l8_reg_t;

#define SBB_PARAM_L8_DEFAULT (0x00000000U)
#define SBB_PARAM_L8_RD_MASK (0xffffffffU)
#define SBB_PARAM_L8_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L8_VAL_BF_OFF ( 0)
#define SBB_PARAM_L8_VAL_BF_WID (32)
#define SBB_PARAM_L8_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L8_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H9_REG register description at address offset 0x1848
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h9_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h9_reg_t;

#define SBB_PARAM_H9_DEFAULT (0x00000000U)
#define SBB_PARAM_H9_RD_MASK (0xffffffffU)
#define SBB_PARAM_H9_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H9_VAL_BF_OFF ( 0)
#define SBB_PARAM_H9_VAL_BF_WID (32)
#define SBB_PARAM_H9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L9_REG register description at address offset 0x184c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l9_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l9_reg_t;

#define SBB_PARAM_L9_DEFAULT (0x00000000U)
#define SBB_PARAM_L9_RD_MASK (0xffffffffU)
#define SBB_PARAM_L9_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L9_VAL_BF_OFF ( 0)
#define SBB_PARAM_L9_VAL_BF_WID (32)
#define SBB_PARAM_L9_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L9_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H10_REG register description at address offset 0x1850
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h10_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h10_reg_t;

#define SBB_PARAM_H10_DEFAULT (0x00000000U)
#define SBB_PARAM_H10_RD_MASK (0xffffffffU)
#define SBB_PARAM_H10_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H10_VAL_BF_OFF ( 0)
#define SBB_PARAM_H10_VAL_BF_WID (32)
#define SBB_PARAM_H10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L10_REG register description at address offset 0x1854
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l10_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l10_reg_t;

#define SBB_PARAM_L10_DEFAULT (0x00000000U)
#define SBB_PARAM_L10_RD_MASK (0xffffffffU)
#define SBB_PARAM_L10_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L10_VAL_BF_OFF ( 0)
#define SBB_PARAM_L10_VAL_BF_WID (32)
#define SBB_PARAM_L10_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L10_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H11_REG register description at address offset 0x1858
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h11_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h11_reg_t;

#define SBB_PARAM_H11_DEFAULT (0x00000000U)
#define SBB_PARAM_H11_RD_MASK (0xffffffffU)
#define SBB_PARAM_H11_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H11_VAL_BF_OFF ( 0)
#define SBB_PARAM_H11_VAL_BF_WID (32)
#define SBB_PARAM_H11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L11_REG register description at address offset 0x185c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l11_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l11_reg_t;

#define SBB_PARAM_L11_DEFAULT (0x00000000U)
#define SBB_PARAM_L11_RD_MASK (0xffffffffU)
#define SBB_PARAM_L11_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L11_VAL_BF_OFF ( 0)
#define SBB_PARAM_L11_VAL_BF_WID (32)
#define SBB_PARAM_L11_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L11_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H12_REG register description at address offset 0x1860
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h12_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h12_reg_t;

#define SBB_PARAM_H12_DEFAULT (0x00000000U)
#define SBB_PARAM_H12_RD_MASK (0xffffffffU)
#define SBB_PARAM_H12_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H12_VAL_BF_OFF ( 0)
#define SBB_PARAM_H12_VAL_BF_WID (32)
#define SBB_PARAM_H12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L12_REG register description at address offset 0x1864
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l12_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l12_reg_t;

#define SBB_PARAM_L12_DEFAULT (0x00000000U)
#define SBB_PARAM_L12_RD_MASK (0xffffffffU)
#define SBB_PARAM_L12_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L12_VAL_BF_OFF ( 0)
#define SBB_PARAM_L12_VAL_BF_WID (32)
#define SBB_PARAM_L12_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L12_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H13_REG register description at address offset 0x1868
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h13_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h13_reg_t;

#define SBB_PARAM_H13_DEFAULT (0x00000000U)
#define SBB_PARAM_H13_RD_MASK (0xffffffffU)
#define SBB_PARAM_H13_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H13_VAL_BF_OFF ( 0)
#define SBB_PARAM_H13_VAL_BF_WID (32)
#define SBB_PARAM_H13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L13_REG register description at address offset 0x186c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l13_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l13_reg_t;

#define SBB_PARAM_L13_DEFAULT (0x00000000U)
#define SBB_PARAM_L13_RD_MASK (0xffffffffU)
#define SBB_PARAM_L13_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L13_VAL_BF_OFF ( 0)
#define SBB_PARAM_L13_VAL_BF_WID (32)
#define SBB_PARAM_L13_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L13_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H14_REG register description at address offset 0x1870
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h14_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h14_reg_t;

#define SBB_PARAM_H14_DEFAULT (0x00000000U)
#define SBB_PARAM_H14_RD_MASK (0xffffffffU)
#define SBB_PARAM_H14_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H14_VAL_BF_OFF ( 0)
#define SBB_PARAM_H14_VAL_BF_WID (32)
#define SBB_PARAM_H14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L14_REG register description at address offset 0x1874
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l14_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l14_reg_t;

#define SBB_PARAM_L14_DEFAULT (0x00000000U)
#define SBB_PARAM_L14_RD_MASK (0xffffffffU)
#define SBB_PARAM_L14_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L14_VAL_BF_OFF ( 0)
#define SBB_PARAM_L14_VAL_BF_WID (32)
#define SBB_PARAM_L14_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L14_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H15_REG register description at address offset 0x1878
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h15_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h15_reg_t;

#define SBB_PARAM_H15_DEFAULT (0x00000000U)
#define SBB_PARAM_H15_RD_MASK (0xffffffffU)
#define SBB_PARAM_H15_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H15_VAL_BF_OFF ( 0)
#define SBB_PARAM_H15_VAL_BF_WID (32)
#define SBB_PARAM_H15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L15_REG register description at address offset 0x187c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l15_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l15_reg_t;

#define SBB_PARAM_L15_DEFAULT (0x00000000U)
#define SBB_PARAM_L15_RD_MASK (0xffffffffU)
#define SBB_PARAM_L15_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L15_VAL_BF_OFF ( 0)
#define SBB_PARAM_L15_VAL_BF_WID (32)
#define SBB_PARAM_L15_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L15_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H16_REG register description at address offset 0x1880
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h16_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h16_reg_t;

#define SBB_PARAM_H16_DEFAULT (0x00000000U)
#define SBB_PARAM_H16_RD_MASK (0xffffffffU)
#define SBB_PARAM_H16_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H16_VAL_BF_OFF ( 0)
#define SBB_PARAM_H16_VAL_BF_WID (32)
#define SBB_PARAM_H16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L16_REG register description at address offset 0x1884
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l16_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l16_reg_t;

#define SBB_PARAM_L16_DEFAULT (0x00000000U)
#define SBB_PARAM_L16_RD_MASK (0xffffffffU)
#define SBB_PARAM_L16_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L16_VAL_BF_OFF ( 0)
#define SBB_PARAM_L16_VAL_BF_WID (32)
#define SBB_PARAM_L16_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L16_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H17_REG register description at address offset 0x1888
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h17_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h17_reg_t;

#define SBB_PARAM_H17_DEFAULT (0x00000000U)
#define SBB_PARAM_H17_RD_MASK (0xffffffffU)
#define SBB_PARAM_H17_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H17_VAL_BF_OFF ( 0)
#define SBB_PARAM_H17_VAL_BF_WID (32)
#define SBB_PARAM_H17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L17_REG register description at address offset 0x188c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l17_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l17_reg_t;

#define SBB_PARAM_L17_DEFAULT (0x00000000U)
#define SBB_PARAM_L17_RD_MASK (0xffffffffU)
#define SBB_PARAM_L17_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L17_VAL_BF_OFF ( 0)
#define SBB_PARAM_L17_VAL_BF_WID (32)
#define SBB_PARAM_L17_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L17_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H18_REG register description at address offset 0x1890
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h18_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h18_reg_t;

#define SBB_PARAM_H18_DEFAULT (0x00000000U)
#define SBB_PARAM_H18_RD_MASK (0xffffffffU)
#define SBB_PARAM_H18_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H18_VAL_BF_OFF ( 0)
#define SBB_PARAM_H18_VAL_BF_WID (32)
#define SBB_PARAM_H18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L18_REG register description at address offset 0x1894
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l18_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l18_reg_t;

#define SBB_PARAM_L18_DEFAULT (0x00000000U)
#define SBB_PARAM_L18_RD_MASK (0xffffffffU)
#define SBB_PARAM_L18_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L18_VAL_BF_OFF ( 0)
#define SBB_PARAM_L18_VAL_BF_WID (32)
#define SBB_PARAM_L18_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L18_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H19_REG register description at address offset 0x1898
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h19_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h19_reg_t;

#define SBB_PARAM_H19_DEFAULT (0x00000000U)
#define SBB_PARAM_H19_RD_MASK (0xffffffffU)
#define SBB_PARAM_H19_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H19_VAL_BF_OFF ( 0)
#define SBB_PARAM_H19_VAL_BF_WID (32)
#define SBB_PARAM_H19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L19_REG register description at address offset 0x189c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l19_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l19_reg_t;

#define SBB_PARAM_L19_DEFAULT (0x00000000U)
#define SBB_PARAM_L19_RD_MASK (0xffffffffU)
#define SBB_PARAM_L19_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L19_VAL_BF_OFF ( 0)
#define SBB_PARAM_L19_VAL_BF_WID (32)
#define SBB_PARAM_L19_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L19_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H20_REG register description at address offset 0x18a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h20_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h20_reg_t;

#define SBB_PARAM_H20_DEFAULT (0x00000000U)
#define SBB_PARAM_H20_RD_MASK (0xffffffffU)
#define SBB_PARAM_H20_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H20_VAL_BF_OFF ( 0)
#define SBB_PARAM_H20_VAL_BF_WID (32)
#define SBB_PARAM_H20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L20_REG register description at address offset 0x18a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l20_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l20_reg_t;

#define SBB_PARAM_L20_DEFAULT (0x00000000U)
#define SBB_PARAM_L20_RD_MASK (0xffffffffU)
#define SBB_PARAM_L20_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L20_VAL_BF_OFF ( 0)
#define SBB_PARAM_L20_VAL_BF_WID (32)
#define SBB_PARAM_L20_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L20_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H21_REG register description at address offset 0x18a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h21_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h21_reg_t;

#define SBB_PARAM_H21_DEFAULT (0x00000000U)
#define SBB_PARAM_H21_RD_MASK (0xffffffffU)
#define SBB_PARAM_H21_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H21_VAL_BF_OFF ( 0)
#define SBB_PARAM_H21_VAL_BF_WID (32)
#define SBB_PARAM_H21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L21_REG register description at address offset 0x18ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l21_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l21_reg_t;

#define SBB_PARAM_L21_DEFAULT (0x00000000U)
#define SBB_PARAM_L21_RD_MASK (0xffffffffU)
#define SBB_PARAM_L21_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L21_VAL_BF_OFF ( 0)
#define SBB_PARAM_L21_VAL_BF_WID (32)
#define SBB_PARAM_L21_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L21_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H22_REG register description at address offset 0x18b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h22_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h22_reg_t;

#define SBB_PARAM_H22_DEFAULT (0x00000000U)
#define SBB_PARAM_H22_RD_MASK (0xffffffffU)
#define SBB_PARAM_H22_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H22_VAL_BF_OFF ( 0)
#define SBB_PARAM_H22_VAL_BF_WID (32)
#define SBB_PARAM_H22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L22_REG register description at address offset 0x18b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l22_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l22_reg_t;

#define SBB_PARAM_L22_DEFAULT (0x00000000U)
#define SBB_PARAM_L22_RD_MASK (0xffffffffU)
#define SBB_PARAM_L22_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L22_VAL_BF_OFF ( 0)
#define SBB_PARAM_L22_VAL_BF_WID (32)
#define SBB_PARAM_L22_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L22_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H23_REG register description at address offset 0x18b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h23_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h23_reg_t;

#define SBB_PARAM_H23_DEFAULT (0x00000000U)
#define SBB_PARAM_H23_RD_MASK (0xffffffffU)
#define SBB_PARAM_H23_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H23_VAL_BF_OFF ( 0)
#define SBB_PARAM_H23_VAL_BF_WID (32)
#define SBB_PARAM_H23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L23_REG register description at address offset 0x18bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l23_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l23_reg_t;

#define SBB_PARAM_L23_DEFAULT (0x00000000U)
#define SBB_PARAM_L23_RD_MASK (0xffffffffU)
#define SBB_PARAM_L23_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L23_VAL_BF_OFF ( 0)
#define SBB_PARAM_L23_VAL_BF_WID (32)
#define SBB_PARAM_L23_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L23_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H24_REG register description at address offset 0x18c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h24_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h24_reg_t;

#define SBB_PARAM_H24_DEFAULT (0x00000000U)
#define SBB_PARAM_H24_RD_MASK (0xffffffffU)
#define SBB_PARAM_H24_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H24_VAL_BF_OFF ( 0)
#define SBB_PARAM_H24_VAL_BF_WID (32)
#define SBB_PARAM_H24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L24_REG register description at address offset 0x18c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l24_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l24_reg_t;

#define SBB_PARAM_L24_DEFAULT (0x00000000U)
#define SBB_PARAM_L24_RD_MASK (0xffffffffU)
#define SBB_PARAM_L24_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L24_VAL_BF_OFF ( 0)
#define SBB_PARAM_L24_VAL_BF_WID (32)
#define SBB_PARAM_L24_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L24_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H25_REG register description at address offset 0x18c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h25_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h25_reg_t;

#define SBB_PARAM_H25_DEFAULT (0x00000000U)
#define SBB_PARAM_H25_RD_MASK (0xffffffffU)
#define SBB_PARAM_H25_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H25_VAL_BF_OFF ( 0)
#define SBB_PARAM_H25_VAL_BF_WID (32)
#define SBB_PARAM_H25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L25_REG register description at address offset 0x18cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l25_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l25_reg_t;

#define SBB_PARAM_L25_DEFAULT (0x00000000U)
#define SBB_PARAM_L25_RD_MASK (0xffffffffU)
#define SBB_PARAM_L25_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L25_VAL_BF_OFF ( 0)
#define SBB_PARAM_L25_VAL_BF_WID (32)
#define SBB_PARAM_L25_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L25_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H26_REG register description at address offset 0x18d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h26_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h26_reg_t;

#define SBB_PARAM_H26_DEFAULT (0x00000000U)
#define SBB_PARAM_H26_RD_MASK (0xffffffffU)
#define SBB_PARAM_H26_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H26_VAL_BF_OFF ( 0)
#define SBB_PARAM_H26_VAL_BF_WID (32)
#define SBB_PARAM_H26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L26_REG register description at address offset 0x18d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l26_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l26_reg_t;

#define SBB_PARAM_L26_DEFAULT (0x00000000U)
#define SBB_PARAM_L26_RD_MASK (0xffffffffU)
#define SBB_PARAM_L26_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L26_VAL_BF_OFF ( 0)
#define SBB_PARAM_L26_VAL_BF_WID (32)
#define SBB_PARAM_L26_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L26_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H27_REG register description at address offset 0x18d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h27_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h27_reg_t;

#define SBB_PARAM_H27_DEFAULT (0x00000000U)
#define SBB_PARAM_H27_RD_MASK (0xffffffffU)
#define SBB_PARAM_H27_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H27_VAL_BF_OFF ( 0)
#define SBB_PARAM_H27_VAL_BF_WID (32)
#define SBB_PARAM_H27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L27_REG register description at address offset 0x18dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l27_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l27_reg_t;

#define SBB_PARAM_L27_DEFAULT (0x00000000U)
#define SBB_PARAM_L27_RD_MASK (0xffffffffU)
#define SBB_PARAM_L27_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L27_VAL_BF_OFF ( 0)
#define SBB_PARAM_L27_VAL_BF_WID (32)
#define SBB_PARAM_L27_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L27_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H28_REG register description at address offset 0x18e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h28_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h28_reg_t;

#define SBB_PARAM_H28_DEFAULT (0x00000000U)
#define SBB_PARAM_H28_RD_MASK (0xffffffffU)
#define SBB_PARAM_H28_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H28_VAL_BF_OFF ( 0)
#define SBB_PARAM_H28_VAL_BF_WID (32)
#define SBB_PARAM_H28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L28_REG register description at address offset 0x18e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l28_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l28_reg_t;

#define SBB_PARAM_L28_DEFAULT (0x00000000U)
#define SBB_PARAM_L28_RD_MASK (0xffffffffU)
#define SBB_PARAM_L28_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L28_VAL_BF_OFF ( 0)
#define SBB_PARAM_L28_VAL_BF_WID (32)
#define SBB_PARAM_L28_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L28_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H29_REG register description at address offset 0x18e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h29_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h29_reg_t;

#define SBB_PARAM_H29_DEFAULT (0x00000000U)
#define SBB_PARAM_H29_RD_MASK (0xffffffffU)
#define SBB_PARAM_H29_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H29_VAL_BF_OFF ( 0)
#define SBB_PARAM_H29_VAL_BF_WID (32)
#define SBB_PARAM_H29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L29_REG register description at address offset 0x18ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l29_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l29_reg_t;

#define SBB_PARAM_L29_DEFAULT (0x00000000U)
#define SBB_PARAM_L29_RD_MASK (0xffffffffU)
#define SBB_PARAM_L29_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L29_VAL_BF_OFF ( 0)
#define SBB_PARAM_L29_VAL_BF_WID (32)
#define SBB_PARAM_L29_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L29_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H30_REG register description at address offset 0x18f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h30_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h30_reg_t;

#define SBB_PARAM_H30_DEFAULT (0x00000000U)
#define SBB_PARAM_H30_RD_MASK (0xffffffffU)
#define SBB_PARAM_H30_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H30_VAL_BF_OFF ( 0)
#define SBB_PARAM_H30_VAL_BF_WID (32)
#define SBB_PARAM_H30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L30_REG register description at address offset 0x18f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l30_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l30_reg_t;

#define SBB_PARAM_L30_DEFAULT (0x00000000U)
#define SBB_PARAM_L30_RD_MASK (0xffffffffU)
#define SBB_PARAM_L30_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L30_VAL_BF_OFF ( 0)
#define SBB_PARAM_L30_VAL_BF_WID (32)
#define SBB_PARAM_L30_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L30_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H31_REG register description at address offset 0x18f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h31_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h31_reg_t;

#define SBB_PARAM_H31_DEFAULT (0x00000000U)
#define SBB_PARAM_H31_RD_MASK (0xffffffffU)
#define SBB_PARAM_H31_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H31_VAL_BF_OFF ( 0)
#define SBB_PARAM_H31_VAL_BF_WID (32)
#define SBB_PARAM_H31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L31_REG register description at address offset 0x18fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l31_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l31_reg_t;

#define SBB_PARAM_L31_DEFAULT (0x00000000U)
#define SBB_PARAM_L31_RD_MASK (0xffffffffU)
#define SBB_PARAM_L31_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L31_VAL_BF_OFF ( 0)
#define SBB_PARAM_L31_VAL_BF_WID (32)
#define SBB_PARAM_L31_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L31_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H32_REG register description at address offset 0x1900
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h32_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h32_reg_t;

#define SBB_PARAM_H32_DEFAULT (0x00000000U)
#define SBB_PARAM_H32_RD_MASK (0xffffffffU)
#define SBB_PARAM_H32_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H32_VAL_BF_OFF ( 0)
#define SBB_PARAM_H32_VAL_BF_WID (32)
#define SBB_PARAM_H32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L32_REG register description at address offset 0x1904
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l32_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l32_reg_t;

#define SBB_PARAM_L32_DEFAULT (0x00000000U)
#define SBB_PARAM_L32_RD_MASK (0xffffffffU)
#define SBB_PARAM_L32_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L32_VAL_BF_OFF ( 0)
#define SBB_PARAM_L32_VAL_BF_WID (32)
#define SBB_PARAM_L32_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L32_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H33_REG register description at address offset 0x1908
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h33_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h33_reg_t;

#define SBB_PARAM_H33_DEFAULT (0x00000000U)
#define SBB_PARAM_H33_RD_MASK (0xffffffffU)
#define SBB_PARAM_H33_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H33_VAL_BF_OFF ( 0)
#define SBB_PARAM_H33_VAL_BF_WID (32)
#define SBB_PARAM_H33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L33_REG register description at address offset 0x190c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l33_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l33_reg_t;

#define SBB_PARAM_L33_DEFAULT (0x00000000U)
#define SBB_PARAM_L33_RD_MASK (0xffffffffU)
#define SBB_PARAM_L33_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L33_VAL_BF_OFF ( 0)
#define SBB_PARAM_L33_VAL_BF_WID (32)
#define SBB_PARAM_L33_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L33_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H34_REG register description at address offset 0x1910
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h34_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h34_reg_t;

#define SBB_PARAM_H34_DEFAULT (0x00000000U)
#define SBB_PARAM_H34_RD_MASK (0xffffffffU)
#define SBB_PARAM_H34_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H34_VAL_BF_OFF ( 0)
#define SBB_PARAM_H34_VAL_BF_WID (32)
#define SBB_PARAM_H34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L34_REG register description at address offset 0x1914
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l34_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l34_reg_t;

#define SBB_PARAM_L34_DEFAULT (0x00000000U)
#define SBB_PARAM_L34_RD_MASK (0xffffffffU)
#define SBB_PARAM_L34_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L34_VAL_BF_OFF ( 0)
#define SBB_PARAM_L34_VAL_BF_WID (32)
#define SBB_PARAM_L34_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L34_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H35_REG register description at address offset 0x1918
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h35_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h35_reg_t;

#define SBB_PARAM_H35_DEFAULT (0x00000000U)
#define SBB_PARAM_H35_RD_MASK (0xffffffffU)
#define SBB_PARAM_H35_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H35_VAL_BF_OFF ( 0)
#define SBB_PARAM_H35_VAL_BF_WID (32)
#define SBB_PARAM_H35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L35_REG register description at address offset 0x191c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l35_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l35_reg_t;

#define SBB_PARAM_L35_DEFAULT (0x00000000U)
#define SBB_PARAM_L35_RD_MASK (0xffffffffU)
#define SBB_PARAM_L35_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L35_VAL_BF_OFF ( 0)
#define SBB_PARAM_L35_VAL_BF_WID (32)
#define SBB_PARAM_L35_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L35_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H36_REG register description at address offset 0x1920
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h36_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h36_reg_t;

#define SBB_PARAM_H36_DEFAULT (0x00000000U)
#define SBB_PARAM_H36_RD_MASK (0xffffffffU)
#define SBB_PARAM_H36_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H36_VAL_BF_OFF ( 0)
#define SBB_PARAM_H36_VAL_BF_WID (32)
#define SBB_PARAM_H36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L36_REG register description at address offset 0x1924
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l36_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l36_reg_t;

#define SBB_PARAM_L36_DEFAULT (0x00000000U)
#define SBB_PARAM_L36_RD_MASK (0xffffffffU)
#define SBB_PARAM_L36_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L36_VAL_BF_OFF ( 0)
#define SBB_PARAM_L36_VAL_BF_WID (32)
#define SBB_PARAM_L36_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L36_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H37_REG register description at address offset 0x1928
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h37_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h37_reg_t;

#define SBB_PARAM_H37_DEFAULT (0x00000000U)
#define SBB_PARAM_H37_RD_MASK (0xffffffffU)
#define SBB_PARAM_H37_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H37_VAL_BF_OFF ( 0)
#define SBB_PARAM_H37_VAL_BF_WID (32)
#define SBB_PARAM_H37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L37_REG register description at address offset 0x192c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l37_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l37_reg_t;

#define SBB_PARAM_L37_DEFAULT (0x00000000U)
#define SBB_PARAM_L37_RD_MASK (0xffffffffU)
#define SBB_PARAM_L37_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L37_VAL_BF_OFF ( 0)
#define SBB_PARAM_L37_VAL_BF_WID (32)
#define SBB_PARAM_L37_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L37_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H38_REG register description at address offset 0x1930
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h38_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h38_reg_t;

#define SBB_PARAM_H38_DEFAULT (0x00000000U)
#define SBB_PARAM_H38_RD_MASK (0xffffffffU)
#define SBB_PARAM_H38_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H38_VAL_BF_OFF ( 0)
#define SBB_PARAM_H38_VAL_BF_WID (32)
#define SBB_PARAM_H38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L38_REG register description at address offset 0x1934
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l38_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l38_reg_t;

#define SBB_PARAM_L38_DEFAULT (0x00000000U)
#define SBB_PARAM_L38_RD_MASK (0xffffffffU)
#define SBB_PARAM_L38_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L38_VAL_BF_OFF ( 0)
#define SBB_PARAM_L38_VAL_BF_WID (32)
#define SBB_PARAM_L38_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L38_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H39_REG register description at address offset 0x1938
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h39_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h39_reg_t;

#define SBB_PARAM_H39_DEFAULT (0x00000000U)
#define SBB_PARAM_H39_RD_MASK (0xffffffffU)
#define SBB_PARAM_H39_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H39_VAL_BF_OFF ( 0)
#define SBB_PARAM_H39_VAL_BF_WID (32)
#define SBB_PARAM_H39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L39_REG register description at address offset 0x193c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l39_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l39_reg_t;

#define SBB_PARAM_L39_DEFAULT (0x00000000U)
#define SBB_PARAM_L39_RD_MASK (0xffffffffU)
#define SBB_PARAM_L39_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L39_VAL_BF_OFF ( 0)
#define SBB_PARAM_L39_VAL_BF_WID (32)
#define SBB_PARAM_L39_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L39_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H40_REG register description at address offset 0x1940
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h40_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h40_reg_t;

#define SBB_PARAM_H40_DEFAULT (0x00000000U)
#define SBB_PARAM_H40_RD_MASK (0xffffffffU)
#define SBB_PARAM_H40_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H40_VAL_BF_OFF ( 0)
#define SBB_PARAM_H40_VAL_BF_WID (32)
#define SBB_PARAM_H40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L40_REG register description at address offset 0x1944
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l40_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l40_reg_t;

#define SBB_PARAM_L40_DEFAULT (0x00000000U)
#define SBB_PARAM_L40_RD_MASK (0xffffffffU)
#define SBB_PARAM_L40_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L40_VAL_BF_OFF ( 0)
#define SBB_PARAM_L40_VAL_BF_WID (32)
#define SBB_PARAM_L40_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L40_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H41_REG register description at address offset 0x1948
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h41_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h41_reg_t;

#define SBB_PARAM_H41_DEFAULT (0x00000000U)
#define SBB_PARAM_H41_RD_MASK (0xffffffffU)
#define SBB_PARAM_H41_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H41_VAL_BF_OFF ( 0)
#define SBB_PARAM_H41_VAL_BF_WID (32)
#define SBB_PARAM_H41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L41_REG register description at address offset 0x194c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l41_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l41_reg_t;

#define SBB_PARAM_L41_DEFAULT (0x00000000U)
#define SBB_PARAM_L41_RD_MASK (0xffffffffU)
#define SBB_PARAM_L41_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L41_VAL_BF_OFF ( 0)
#define SBB_PARAM_L41_VAL_BF_WID (32)
#define SBB_PARAM_L41_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L41_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H42_REG register description at address offset 0x1950
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h42_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h42_reg_t;

#define SBB_PARAM_H42_DEFAULT (0x00000000U)
#define SBB_PARAM_H42_RD_MASK (0xffffffffU)
#define SBB_PARAM_H42_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H42_VAL_BF_OFF ( 0)
#define SBB_PARAM_H42_VAL_BF_WID (32)
#define SBB_PARAM_H42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L42_REG register description at address offset 0x1954
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l42_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l42_reg_t;

#define SBB_PARAM_L42_DEFAULT (0x00000000U)
#define SBB_PARAM_L42_RD_MASK (0xffffffffU)
#define SBB_PARAM_L42_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L42_VAL_BF_OFF ( 0)
#define SBB_PARAM_L42_VAL_BF_WID (32)
#define SBB_PARAM_L42_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L42_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H43_REG register description at address offset 0x1958
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h43_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h43_reg_t;

#define SBB_PARAM_H43_DEFAULT (0x00000000U)
#define SBB_PARAM_H43_RD_MASK (0xffffffffU)
#define SBB_PARAM_H43_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H43_VAL_BF_OFF ( 0)
#define SBB_PARAM_H43_VAL_BF_WID (32)
#define SBB_PARAM_H43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L43_REG register description at address offset 0x195c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l43_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l43_reg_t;

#define SBB_PARAM_L43_DEFAULT (0x00000000U)
#define SBB_PARAM_L43_RD_MASK (0xffffffffU)
#define SBB_PARAM_L43_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L43_VAL_BF_OFF ( 0)
#define SBB_PARAM_L43_VAL_BF_WID (32)
#define SBB_PARAM_L43_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L43_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H44_REG register description at address offset 0x1960
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h44_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h44_reg_t;

#define SBB_PARAM_H44_DEFAULT (0x00000000U)
#define SBB_PARAM_H44_RD_MASK (0xffffffffU)
#define SBB_PARAM_H44_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H44_VAL_BF_OFF ( 0)
#define SBB_PARAM_H44_VAL_BF_WID (32)
#define SBB_PARAM_H44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L44_REG register description at address offset 0x1964
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l44_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l44_reg_t;

#define SBB_PARAM_L44_DEFAULT (0x00000000U)
#define SBB_PARAM_L44_RD_MASK (0xffffffffU)
#define SBB_PARAM_L44_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L44_VAL_BF_OFF ( 0)
#define SBB_PARAM_L44_VAL_BF_WID (32)
#define SBB_PARAM_L44_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L44_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H45_REG register description at address offset 0x1968
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h45_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h45_reg_t;

#define SBB_PARAM_H45_DEFAULT (0x00000000U)
#define SBB_PARAM_H45_RD_MASK (0xffffffffU)
#define SBB_PARAM_H45_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H45_VAL_BF_OFF ( 0)
#define SBB_PARAM_H45_VAL_BF_WID (32)
#define SBB_PARAM_H45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L45_REG register description at address offset 0x196c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l45_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l45_reg_t;

#define SBB_PARAM_L45_DEFAULT (0x00000000U)
#define SBB_PARAM_L45_RD_MASK (0xffffffffU)
#define SBB_PARAM_L45_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L45_VAL_BF_OFF ( 0)
#define SBB_PARAM_L45_VAL_BF_WID (32)
#define SBB_PARAM_L45_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L45_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H46_REG register description at address offset 0x1970
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h46_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h46_reg_t;

#define SBB_PARAM_H46_DEFAULT (0x00000000U)
#define SBB_PARAM_H46_RD_MASK (0xffffffffU)
#define SBB_PARAM_H46_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H46_VAL_BF_OFF ( 0)
#define SBB_PARAM_H46_VAL_BF_WID (32)
#define SBB_PARAM_H46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L46_REG register description at address offset 0x1974
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l46_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l46_reg_t;

#define SBB_PARAM_L46_DEFAULT (0x00000000U)
#define SBB_PARAM_L46_RD_MASK (0xffffffffU)
#define SBB_PARAM_L46_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L46_VAL_BF_OFF ( 0)
#define SBB_PARAM_L46_VAL_BF_WID (32)
#define SBB_PARAM_L46_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L46_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H47_REG register description at address offset 0x1978
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h47_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h47_reg_t;

#define SBB_PARAM_H47_DEFAULT (0x00000000U)
#define SBB_PARAM_H47_RD_MASK (0xffffffffU)
#define SBB_PARAM_H47_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H47_VAL_BF_OFF ( 0)
#define SBB_PARAM_H47_VAL_BF_WID (32)
#define SBB_PARAM_H47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L47_REG register description at address offset 0x197c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l47_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l47_reg_t;

#define SBB_PARAM_L47_DEFAULT (0x00000000U)
#define SBB_PARAM_L47_RD_MASK (0xffffffffU)
#define SBB_PARAM_L47_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L47_VAL_BF_OFF ( 0)
#define SBB_PARAM_L47_VAL_BF_WID (32)
#define SBB_PARAM_L47_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L47_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H48_REG register description at address offset 0x1980
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h48_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h48_reg_t;

#define SBB_PARAM_H48_DEFAULT (0x00000000U)
#define SBB_PARAM_H48_RD_MASK (0xffffffffU)
#define SBB_PARAM_H48_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H48_VAL_BF_OFF ( 0)
#define SBB_PARAM_H48_VAL_BF_WID (32)
#define SBB_PARAM_H48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L48_REG register description at address offset 0x1984
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l48_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l48_reg_t;

#define SBB_PARAM_L48_DEFAULT (0x00000000U)
#define SBB_PARAM_L48_RD_MASK (0xffffffffU)
#define SBB_PARAM_L48_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L48_VAL_BF_OFF ( 0)
#define SBB_PARAM_L48_VAL_BF_WID (32)
#define SBB_PARAM_L48_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L48_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H49_REG register description at address offset 0x1988
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h49_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h49_reg_t;

#define SBB_PARAM_H49_DEFAULT (0x00000000U)
#define SBB_PARAM_H49_RD_MASK (0xffffffffU)
#define SBB_PARAM_H49_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H49_VAL_BF_OFF ( 0)
#define SBB_PARAM_H49_VAL_BF_WID (32)
#define SBB_PARAM_H49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L49_REG register description at address offset 0x198c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l49_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l49_reg_t;

#define SBB_PARAM_L49_DEFAULT (0x00000000U)
#define SBB_PARAM_L49_RD_MASK (0xffffffffU)
#define SBB_PARAM_L49_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L49_VAL_BF_OFF ( 0)
#define SBB_PARAM_L49_VAL_BF_WID (32)
#define SBB_PARAM_L49_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L49_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H50_REG register description at address offset 0x1990
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h50_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h50_reg_t;

#define SBB_PARAM_H50_DEFAULT (0x00000000U)
#define SBB_PARAM_H50_RD_MASK (0xffffffffU)
#define SBB_PARAM_H50_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H50_VAL_BF_OFF ( 0)
#define SBB_PARAM_H50_VAL_BF_WID (32)
#define SBB_PARAM_H50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L50_REG register description at address offset 0x1994
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l50_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l50_reg_t;

#define SBB_PARAM_L50_DEFAULT (0x00000000U)
#define SBB_PARAM_L50_RD_MASK (0xffffffffU)
#define SBB_PARAM_L50_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L50_VAL_BF_OFF ( 0)
#define SBB_PARAM_L50_VAL_BF_WID (32)
#define SBB_PARAM_L50_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L50_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H51_REG register description at address offset 0x1998
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h51_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h51_reg_t;

#define SBB_PARAM_H51_DEFAULT (0x00000000U)
#define SBB_PARAM_H51_RD_MASK (0xffffffffU)
#define SBB_PARAM_H51_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H51_VAL_BF_OFF ( 0)
#define SBB_PARAM_H51_VAL_BF_WID (32)
#define SBB_PARAM_H51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L51_REG register description at address offset 0x199c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l51_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l51_reg_t;

#define SBB_PARAM_L51_DEFAULT (0x00000000U)
#define SBB_PARAM_L51_RD_MASK (0xffffffffU)
#define SBB_PARAM_L51_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L51_VAL_BF_OFF ( 0)
#define SBB_PARAM_L51_VAL_BF_WID (32)
#define SBB_PARAM_L51_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L51_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H52_REG register description at address offset 0x19a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h52_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h52_reg_t;

#define SBB_PARAM_H52_DEFAULT (0x00000000U)
#define SBB_PARAM_H52_RD_MASK (0xffffffffU)
#define SBB_PARAM_H52_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H52_VAL_BF_OFF ( 0)
#define SBB_PARAM_H52_VAL_BF_WID (32)
#define SBB_PARAM_H52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L52_REG register description at address offset 0x19a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l52_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l52_reg_t;

#define SBB_PARAM_L52_DEFAULT (0x00000000U)
#define SBB_PARAM_L52_RD_MASK (0xffffffffU)
#define SBB_PARAM_L52_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L52_VAL_BF_OFF ( 0)
#define SBB_PARAM_L52_VAL_BF_WID (32)
#define SBB_PARAM_L52_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L52_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H53_REG register description at address offset 0x19a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h53_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h53_reg_t;

#define SBB_PARAM_H53_DEFAULT (0x00000000U)
#define SBB_PARAM_H53_RD_MASK (0xffffffffU)
#define SBB_PARAM_H53_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H53_VAL_BF_OFF ( 0)
#define SBB_PARAM_H53_VAL_BF_WID (32)
#define SBB_PARAM_H53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L53_REG register description at address offset 0x19ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l53_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l53_reg_t;

#define SBB_PARAM_L53_DEFAULT (0x00000000U)
#define SBB_PARAM_L53_RD_MASK (0xffffffffU)
#define SBB_PARAM_L53_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L53_VAL_BF_OFF ( 0)
#define SBB_PARAM_L53_VAL_BF_WID (32)
#define SBB_PARAM_L53_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L53_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H54_REG register description at address offset 0x19b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h54_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h54_reg_t;

#define SBB_PARAM_H54_DEFAULT (0x00000000U)
#define SBB_PARAM_H54_RD_MASK (0xffffffffU)
#define SBB_PARAM_H54_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H54_VAL_BF_OFF ( 0)
#define SBB_PARAM_H54_VAL_BF_WID (32)
#define SBB_PARAM_H54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L54_REG register description at address offset 0x19b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l54_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l54_reg_t;

#define SBB_PARAM_L54_DEFAULT (0x00000000U)
#define SBB_PARAM_L54_RD_MASK (0xffffffffU)
#define SBB_PARAM_L54_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L54_VAL_BF_OFF ( 0)
#define SBB_PARAM_L54_VAL_BF_WID (32)
#define SBB_PARAM_L54_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L54_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H55_REG register description at address offset 0x19b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h55_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h55_reg_t;

#define SBB_PARAM_H55_DEFAULT (0x00000000U)
#define SBB_PARAM_H55_RD_MASK (0xffffffffU)
#define SBB_PARAM_H55_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H55_VAL_BF_OFF ( 0)
#define SBB_PARAM_H55_VAL_BF_WID (32)
#define SBB_PARAM_H55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L55_REG register description at address offset 0x19bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l55_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l55_reg_t;

#define SBB_PARAM_L55_DEFAULT (0x00000000U)
#define SBB_PARAM_L55_RD_MASK (0xffffffffU)
#define SBB_PARAM_L55_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L55_VAL_BF_OFF ( 0)
#define SBB_PARAM_L55_VAL_BF_WID (32)
#define SBB_PARAM_L55_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L55_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H56_REG register description at address offset 0x19c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h56_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h56_reg_t;

#define SBB_PARAM_H56_DEFAULT (0x00000000U)
#define SBB_PARAM_H56_RD_MASK (0xffffffffU)
#define SBB_PARAM_H56_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H56_VAL_BF_OFF ( 0)
#define SBB_PARAM_H56_VAL_BF_WID (32)
#define SBB_PARAM_H56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L56_REG register description at address offset 0x19c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l56_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l56_reg_t;

#define SBB_PARAM_L56_DEFAULT (0x00000000U)
#define SBB_PARAM_L56_RD_MASK (0xffffffffU)
#define SBB_PARAM_L56_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L56_VAL_BF_OFF ( 0)
#define SBB_PARAM_L56_VAL_BF_WID (32)
#define SBB_PARAM_L56_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L56_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H57_REG register description at address offset 0x19c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h57_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h57_reg_t;

#define SBB_PARAM_H57_DEFAULT (0x00000000U)
#define SBB_PARAM_H57_RD_MASK (0xffffffffU)
#define SBB_PARAM_H57_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H57_VAL_BF_OFF ( 0)
#define SBB_PARAM_H57_VAL_BF_WID (32)
#define SBB_PARAM_H57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L57_REG register description at address offset 0x19cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l57_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l57_reg_t;

#define SBB_PARAM_L57_DEFAULT (0x00000000U)
#define SBB_PARAM_L57_RD_MASK (0xffffffffU)
#define SBB_PARAM_L57_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L57_VAL_BF_OFF ( 0)
#define SBB_PARAM_L57_VAL_BF_WID (32)
#define SBB_PARAM_L57_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L57_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H58_REG register description at address offset 0x19d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h58_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h58_reg_t;

#define SBB_PARAM_H58_DEFAULT (0x00000000U)
#define SBB_PARAM_H58_RD_MASK (0xffffffffU)
#define SBB_PARAM_H58_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H58_VAL_BF_OFF ( 0)
#define SBB_PARAM_H58_VAL_BF_WID (32)
#define SBB_PARAM_H58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L58_REG register description at address offset 0x19d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l58_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l58_reg_t;

#define SBB_PARAM_L58_DEFAULT (0x00000000U)
#define SBB_PARAM_L58_RD_MASK (0xffffffffU)
#define SBB_PARAM_L58_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L58_VAL_BF_OFF ( 0)
#define SBB_PARAM_L58_VAL_BF_WID (32)
#define SBB_PARAM_L58_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L58_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H59_REG register description at address offset 0x19d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h59_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h59_reg_t;

#define SBB_PARAM_H59_DEFAULT (0x00000000U)
#define SBB_PARAM_H59_RD_MASK (0xffffffffU)
#define SBB_PARAM_H59_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H59_VAL_BF_OFF ( 0)
#define SBB_PARAM_H59_VAL_BF_WID (32)
#define SBB_PARAM_H59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L59_REG register description at address offset 0x19dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l59_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l59_reg_t;

#define SBB_PARAM_L59_DEFAULT (0x00000000U)
#define SBB_PARAM_L59_RD_MASK (0xffffffffU)
#define SBB_PARAM_L59_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L59_VAL_BF_OFF ( 0)
#define SBB_PARAM_L59_VAL_BF_WID (32)
#define SBB_PARAM_L59_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L59_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H60_REG register description at address offset 0x19e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h60_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h60_reg_t;

#define SBB_PARAM_H60_DEFAULT (0x00000000U)
#define SBB_PARAM_H60_RD_MASK (0xffffffffU)
#define SBB_PARAM_H60_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H60_VAL_BF_OFF ( 0)
#define SBB_PARAM_H60_VAL_BF_WID (32)
#define SBB_PARAM_H60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L60_REG register description at address offset 0x19e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l60_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l60_reg_t;

#define SBB_PARAM_L60_DEFAULT (0x00000000U)
#define SBB_PARAM_L60_RD_MASK (0xffffffffU)
#define SBB_PARAM_L60_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L60_VAL_BF_OFF ( 0)
#define SBB_PARAM_L60_VAL_BF_WID (32)
#define SBB_PARAM_L60_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L60_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H61_REG register description at address offset 0x19e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h61_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h61_reg_t;

#define SBB_PARAM_H61_DEFAULT (0x00000000U)
#define SBB_PARAM_H61_RD_MASK (0xffffffffU)
#define SBB_PARAM_H61_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H61_VAL_BF_OFF ( 0)
#define SBB_PARAM_H61_VAL_BF_WID (32)
#define SBB_PARAM_H61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L61_REG register description at address offset 0x19ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l61_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l61_reg_t;

#define SBB_PARAM_L61_DEFAULT (0x00000000U)
#define SBB_PARAM_L61_RD_MASK (0xffffffffU)
#define SBB_PARAM_L61_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L61_VAL_BF_OFF ( 0)
#define SBB_PARAM_L61_VAL_BF_WID (32)
#define SBB_PARAM_L61_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L61_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H62_REG register description at address offset 0x19f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h62_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h62_reg_t;

#define SBB_PARAM_H62_DEFAULT (0x00000000U)
#define SBB_PARAM_H62_RD_MASK (0xffffffffU)
#define SBB_PARAM_H62_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H62_VAL_BF_OFF ( 0)
#define SBB_PARAM_H62_VAL_BF_WID (32)
#define SBB_PARAM_H62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L62_REG register description at address offset 0x19f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l62_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l62_reg_t;

#define SBB_PARAM_L62_DEFAULT (0x00000000U)
#define SBB_PARAM_L62_RD_MASK (0xffffffffU)
#define SBB_PARAM_L62_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L62_VAL_BF_OFF ( 0)
#define SBB_PARAM_L62_VAL_BF_WID (32)
#define SBB_PARAM_L62_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L62_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H63_REG register description at address offset 0x19f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h63_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h63_reg_t;

#define SBB_PARAM_H63_DEFAULT (0x00000000U)
#define SBB_PARAM_H63_RD_MASK (0xffffffffU)
#define SBB_PARAM_H63_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H63_VAL_BF_OFF ( 0)
#define SBB_PARAM_H63_VAL_BF_WID (32)
#define SBB_PARAM_H63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L63_REG register description at address offset 0x19fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l63_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l63_reg_t;

#define SBB_PARAM_L63_DEFAULT (0x00000000U)
#define SBB_PARAM_L63_RD_MASK (0xffffffffU)
#define SBB_PARAM_L63_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L63_VAL_BF_OFF ( 0)
#define SBB_PARAM_L63_VAL_BF_WID (32)
#define SBB_PARAM_L63_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L63_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H64_REG register description at address offset 0x1a00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h64_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h64_reg_t;

#define SBB_PARAM_H64_DEFAULT (0x00000000U)
#define SBB_PARAM_H64_RD_MASK (0xffffffffU)
#define SBB_PARAM_H64_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H64_VAL_BF_OFF ( 0)
#define SBB_PARAM_H64_VAL_BF_WID (32)
#define SBB_PARAM_H64_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H64_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L64_REG register description at address offset 0x1a04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l64_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l64_reg_t;

#define SBB_PARAM_L64_DEFAULT (0x00000000U)
#define SBB_PARAM_L64_RD_MASK (0xffffffffU)
#define SBB_PARAM_L64_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L64_VAL_BF_OFF ( 0)
#define SBB_PARAM_L64_VAL_BF_WID (32)
#define SBB_PARAM_L64_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L64_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H65_REG register description at address offset 0x1a08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h65_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h65_reg_t;

#define SBB_PARAM_H65_DEFAULT (0x00000000U)
#define SBB_PARAM_H65_RD_MASK (0xffffffffU)
#define SBB_PARAM_H65_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H65_VAL_BF_OFF ( 0)
#define SBB_PARAM_H65_VAL_BF_WID (32)
#define SBB_PARAM_H65_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H65_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L65_REG register description at address offset 0x1a0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l65_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l65_reg_t;

#define SBB_PARAM_L65_DEFAULT (0x00000000U)
#define SBB_PARAM_L65_RD_MASK (0xffffffffU)
#define SBB_PARAM_L65_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L65_VAL_BF_OFF ( 0)
#define SBB_PARAM_L65_VAL_BF_WID (32)
#define SBB_PARAM_L65_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L65_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H66_REG register description at address offset 0x1a10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h66_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h66_reg_t;

#define SBB_PARAM_H66_DEFAULT (0x00000000U)
#define SBB_PARAM_H66_RD_MASK (0xffffffffU)
#define SBB_PARAM_H66_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H66_VAL_BF_OFF ( 0)
#define SBB_PARAM_H66_VAL_BF_WID (32)
#define SBB_PARAM_H66_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H66_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L66_REG register description at address offset 0x1a14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l66_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l66_reg_t;

#define SBB_PARAM_L66_DEFAULT (0x00000000U)
#define SBB_PARAM_L66_RD_MASK (0xffffffffU)
#define SBB_PARAM_L66_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L66_VAL_BF_OFF ( 0)
#define SBB_PARAM_L66_VAL_BF_WID (32)
#define SBB_PARAM_L66_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L66_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H67_REG register description at address offset 0x1a18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h67_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h67_reg_t;

#define SBB_PARAM_H67_DEFAULT (0x00000000U)
#define SBB_PARAM_H67_RD_MASK (0xffffffffU)
#define SBB_PARAM_H67_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H67_VAL_BF_OFF ( 0)
#define SBB_PARAM_H67_VAL_BF_WID (32)
#define SBB_PARAM_H67_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H67_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L67_REG register description at address offset 0x1a1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l67_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l67_reg_t;

#define SBB_PARAM_L67_DEFAULT (0x00000000U)
#define SBB_PARAM_L67_RD_MASK (0xffffffffU)
#define SBB_PARAM_L67_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L67_VAL_BF_OFF ( 0)
#define SBB_PARAM_L67_VAL_BF_WID (32)
#define SBB_PARAM_L67_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L67_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H68_REG register description at address offset 0x1a20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h68_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h68_reg_t;

#define SBB_PARAM_H68_DEFAULT (0x00000000U)
#define SBB_PARAM_H68_RD_MASK (0xffffffffU)
#define SBB_PARAM_H68_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H68_VAL_BF_OFF ( 0)
#define SBB_PARAM_H68_VAL_BF_WID (32)
#define SBB_PARAM_H68_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H68_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L68_REG register description at address offset 0x1a24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l68_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l68_reg_t;

#define SBB_PARAM_L68_DEFAULT (0x00000000U)
#define SBB_PARAM_L68_RD_MASK (0xffffffffU)
#define SBB_PARAM_L68_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L68_VAL_BF_OFF ( 0)
#define SBB_PARAM_L68_VAL_BF_WID (32)
#define SBB_PARAM_L68_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L68_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H69_REG register description at address offset 0x1a28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h69_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h69_reg_t;

#define SBB_PARAM_H69_DEFAULT (0x00000000U)
#define SBB_PARAM_H69_RD_MASK (0xffffffffU)
#define SBB_PARAM_H69_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H69_VAL_BF_OFF ( 0)
#define SBB_PARAM_H69_VAL_BF_WID (32)
#define SBB_PARAM_H69_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H69_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L69_REG register description at address offset 0x1a2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l69_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l69_reg_t;

#define SBB_PARAM_L69_DEFAULT (0x00000000U)
#define SBB_PARAM_L69_RD_MASK (0xffffffffU)
#define SBB_PARAM_L69_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L69_VAL_BF_OFF ( 0)
#define SBB_PARAM_L69_VAL_BF_WID (32)
#define SBB_PARAM_L69_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L69_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H70_REG register description at address offset 0x1a30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h70_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h70_reg_t;

#define SBB_PARAM_H70_DEFAULT (0x00000000U)
#define SBB_PARAM_H70_RD_MASK (0xffffffffU)
#define SBB_PARAM_H70_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H70_VAL_BF_OFF ( 0)
#define SBB_PARAM_H70_VAL_BF_WID (32)
#define SBB_PARAM_H70_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H70_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L70_REG register description at address offset 0x1a34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l70_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l70_reg_t;

#define SBB_PARAM_L70_DEFAULT (0x00000000U)
#define SBB_PARAM_L70_RD_MASK (0xffffffffU)
#define SBB_PARAM_L70_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L70_VAL_BF_OFF ( 0)
#define SBB_PARAM_L70_VAL_BF_WID (32)
#define SBB_PARAM_L70_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L70_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H71_REG register description at address offset 0x1a38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h71_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h71_reg_t;

#define SBB_PARAM_H71_DEFAULT (0x00000000U)
#define SBB_PARAM_H71_RD_MASK (0xffffffffU)
#define SBB_PARAM_H71_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H71_VAL_BF_OFF ( 0)
#define SBB_PARAM_H71_VAL_BF_WID (32)
#define SBB_PARAM_H71_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H71_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L71_REG register description at address offset 0x1a3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l71_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l71_reg_t;

#define SBB_PARAM_L71_DEFAULT (0x00000000U)
#define SBB_PARAM_L71_RD_MASK (0xffffffffU)
#define SBB_PARAM_L71_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L71_VAL_BF_OFF ( 0)
#define SBB_PARAM_L71_VAL_BF_WID (32)
#define SBB_PARAM_L71_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L71_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H72_REG register description at address offset 0x1a40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h72_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h72_reg_t;

#define SBB_PARAM_H72_DEFAULT (0x00000000U)
#define SBB_PARAM_H72_RD_MASK (0xffffffffU)
#define SBB_PARAM_H72_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H72_VAL_BF_OFF ( 0)
#define SBB_PARAM_H72_VAL_BF_WID (32)
#define SBB_PARAM_H72_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H72_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L72_REG register description at address offset 0x1a44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l72_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l72_reg_t;

#define SBB_PARAM_L72_DEFAULT (0x00000000U)
#define SBB_PARAM_L72_RD_MASK (0xffffffffU)
#define SBB_PARAM_L72_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L72_VAL_BF_OFF ( 0)
#define SBB_PARAM_L72_VAL_BF_WID (32)
#define SBB_PARAM_L72_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L72_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H73_REG register description at address offset 0x1a48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h73_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h73_reg_t;

#define SBB_PARAM_H73_DEFAULT (0x00000000U)
#define SBB_PARAM_H73_RD_MASK (0xffffffffU)
#define SBB_PARAM_H73_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H73_VAL_BF_OFF ( 0)
#define SBB_PARAM_H73_VAL_BF_WID (32)
#define SBB_PARAM_H73_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H73_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L73_REG register description at address offset 0x1a4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l73_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l73_reg_t;

#define SBB_PARAM_L73_DEFAULT (0x00000000U)
#define SBB_PARAM_L73_RD_MASK (0xffffffffU)
#define SBB_PARAM_L73_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L73_VAL_BF_OFF ( 0)
#define SBB_PARAM_L73_VAL_BF_WID (32)
#define SBB_PARAM_L73_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L73_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H74_REG register description at address offset 0x1a50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h74_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h74_reg_t;

#define SBB_PARAM_H74_DEFAULT (0x00000000U)
#define SBB_PARAM_H74_RD_MASK (0xffffffffU)
#define SBB_PARAM_H74_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H74_VAL_BF_OFF ( 0)
#define SBB_PARAM_H74_VAL_BF_WID (32)
#define SBB_PARAM_H74_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H74_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L74_REG register description at address offset 0x1a54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l74_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l74_reg_t;

#define SBB_PARAM_L74_DEFAULT (0x00000000U)
#define SBB_PARAM_L74_RD_MASK (0xffffffffU)
#define SBB_PARAM_L74_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L74_VAL_BF_OFF ( 0)
#define SBB_PARAM_L74_VAL_BF_WID (32)
#define SBB_PARAM_L74_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L74_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H75_REG register description at address offset 0x1a58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h75_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h75_reg_t;

#define SBB_PARAM_H75_DEFAULT (0x00000000U)
#define SBB_PARAM_H75_RD_MASK (0xffffffffU)
#define SBB_PARAM_H75_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H75_VAL_BF_OFF ( 0)
#define SBB_PARAM_H75_VAL_BF_WID (32)
#define SBB_PARAM_H75_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H75_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L75_REG register description at address offset 0x1a5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l75_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l75_reg_t;

#define SBB_PARAM_L75_DEFAULT (0x00000000U)
#define SBB_PARAM_L75_RD_MASK (0xffffffffU)
#define SBB_PARAM_L75_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L75_VAL_BF_OFF ( 0)
#define SBB_PARAM_L75_VAL_BF_WID (32)
#define SBB_PARAM_L75_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L75_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H76_REG register description at address offset 0x1a60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h76_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h76_reg_t;

#define SBB_PARAM_H76_DEFAULT (0x00000000U)
#define SBB_PARAM_H76_RD_MASK (0xffffffffU)
#define SBB_PARAM_H76_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H76_VAL_BF_OFF ( 0)
#define SBB_PARAM_H76_VAL_BF_WID (32)
#define SBB_PARAM_H76_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H76_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L76_REG register description at address offset 0x1a64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l76_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l76_reg_t;

#define SBB_PARAM_L76_DEFAULT (0x00000000U)
#define SBB_PARAM_L76_RD_MASK (0xffffffffU)
#define SBB_PARAM_L76_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L76_VAL_BF_OFF ( 0)
#define SBB_PARAM_L76_VAL_BF_WID (32)
#define SBB_PARAM_L76_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L76_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H77_REG register description at address offset 0x1a68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h77_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h77_reg_t;

#define SBB_PARAM_H77_DEFAULT (0x00000000U)
#define SBB_PARAM_H77_RD_MASK (0xffffffffU)
#define SBB_PARAM_H77_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H77_VAL_BF_OFF ( 0)
#define SBB_PARAM_H77_VAL_BF_WID (32)
#define SBB_PARAM_H77_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H77_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L77_REG register description at address offset 0x1a6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l77_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l77_reg_t;

#define SBB_PARAM_L77_DEFAULT (0x00000000U)
#define SBB_PARAM_L77_RD_MASK (0xffffffffU)
#define SBB_PARAM_L77_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L77_VAL_BF_OFF ( 0)
#define SBB_PARAM_L77_VAL_BF_WID (32)
#define SBB_PARAM_L77_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L77_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H78_REG register description at address offset 0x1a70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h78_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h78_reg_t;

#define SBB_PARAM_H78_DEFAULT (0x00000000U)
#define SBB_PARAM_H78_RD_MASK (0xffffffffU)
#define SBB_PARAM_H78_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H78_VAL_BF_OFF ( 0)
#define SBB_PARAM_H78_VAL_BF_WID (32)
#define SBB_PARAM_H78_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H78_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L78_REG register description at address offset 0x1a74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l78_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l78_reg_t;

#define SBB_PARAM_L78_DEFAULT (0x00000000U)
#define SBB_PARAM_L78_RD_MASK (0xffffffffU)
#define SBB_PARAM_L78_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L78_VAL_BF_OFF ( 0)
#define SBB_PARAM_L78_VAL_BF_WID (32)
#define SBB_PARAM_L78_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L78_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H79_REG register description at address offset 0x1a78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h79_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h79_reg_t;

#define SBB_PARAM_H79_DEFAULT (0x00000000U)
#define SBB_PARAM_H79_RD_MASK (0xffffffffU)
#define SBB_PARAM_H79_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H79_VAL_BF_OFF ( 0)
#define SBB_PARAM_H79_VAL_BF_WID (32)
#define SBB_PARAM_H79_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H79_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L79_REG register description at address offset 0x1a7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l79_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l79_reg_t;

#define SBB_PARAM_L79_DEFAULT (0x00000000U)
#define SBB_PARAM_L79_RD_MASK (0xffffffffU)
#define SBB_PARAM_L79_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L79_VAL_BF_OFF ( 0)
#define SBB_PARAM_L79_VAL_BF_WID (32)
#define SBB_PARAM_L79_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L79_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H80_REG register description at address offset 0x1a80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h80_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h80_reg_t;

#define SBB_PARAM_H80_DEFAULT (0x00000000U)
#define SBB_PARAM_H80_RD_MASK (0xffffffffU)
#define SBB_PARAM_H80_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H80_VAL_BF_OFF ( 0)
#define SBB_PARAM_H80_VAL_BF_WID (32)
#define SBB_PARAM_H80_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H80_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L80_REG register description at address offset 0x1a84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l80_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l80_reg_t;

#define SBB_PARAM_L80_DEFAULT (0x00000000U)
#define SBB_PARAM_L80_RD_MASK (0xffffffffU)
#define SBB_PARAM_L80_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L80_VAL_BF_OFF ( 0)
#define SBB_PARAM_L80_VAL_BF_WID (32)
#define SBB_PARAM_L80_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L80_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H81_REG register description at address offset 0x1a88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h81_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h81_reg_t;

#define SBB_PARAM_H81_DEFAULT (0x00000000U)
#define SBB_PARAM_H81_RD_MASK (0xffffffffU)
#define SBB_PARAM_H81_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H81_VAL_BF_OFF ( 0)
#define SBB_PARAM_H81_VAL_BF_WID (32)
#define SBB_PARAM_H81_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H81_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L81_REG register description at address offset 0x1a8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l81_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l81_reg_t;

#define SBB_PARAM_L81_DEFAULT (0x00000000U)
#define SBB_PARAM_L81_RD_MASK (0xffffffffU)
#define SBB_PARAM_L81_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L81_VAL_BF_OFF ( 0)
#define SBB_PARAM_L81_VAL_BF_WID (32)
#define SBB_PARAM_L81_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L81_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H82_REG register description at address offset 0x1a90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h82_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h82_reg_t;

#define SBB_PARAM_H82_DEFAULT (0x00000000U)
#define SBB_PARAM_H82_RD_MASK (0xffffffffU)
#define SBB_PARAM_H82_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H82_VAL_BF_OFF ( 0)
#define SBB_PARAM_H82_VAL_BF_WID (32)
#define SBB_PARAM_H82_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H82_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L82_REG register description at address offset 0x1a94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l82_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l82_reg_t;

#define SBB_PARAM_L82_DEFAULT (0x00000000U)
#define SBB_PARAM_L82_RD_MASK (0xffffffffU)
#define SBB_PARAM_L82_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L82_VAL_BF_OFF ( 0)
#define SBB_PARAM_L82_VAL_BF_WID (32)
#define SBB_PARAM_L82_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L82_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H83_REG register description at address offset 0x1a98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h83_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h83_reg_t;

#define SBB_PARAM_H83_DEFAULT (0x00000000U)
#define SBB_PARAM_H83_RD_MASK (0xffffffffU)
#define SBB_PARAM_H83_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H83_VAL_BF_OFF ( 0)
#define SBB_PARAM_H83_VAL_BF_WID (32)
#define SBB_PARAM_H83_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H83_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L83_REG register description at address offset 0x1a9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l83_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l83_reg_t;

#define SBB_PARAM_L83_DEFAULT (0x00000000U)
#define SBB_PARAM_L83_RD_MASK (0xffffffffU)
#define SBB_PARAM_L83_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L83_VAL_BF_OFF ( 0)
#define SBB_PARAM_L83_VAL_BF_WID (32)
#define SBB_PARAM_L83_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L83_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H84_REG register description at address offset 0x1aa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h84_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h84_reg_t;

#define SBB_PARAM_H84_DEFAULT (0x00000000U)
#define SBB_PARAM_H84_RD_MASK (0xffffffffU)
#define SBB_PARAM_H84_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H84_VAL_BF_OFF ( 0)
#define SBB_PARAM_H84_VAL_BF_WID (32)
#define SBB_PARAM_H84_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H84_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L84_REG register description at address offset 0x1aa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l84_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l84_reg_t;

#define SBB_PARAM_L84_DEFAULT (0x00000000U)
#define SBB_PARAM_L84_RD_MASK (0xffffffffU)
#define SBB_PARAM_L84_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L84_VAL_BF_OFF ( 0)
#define SBB_PARAM_L84_VAL_BF_WID (32)
#define SBB_PARAM_L84_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L84_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H85_REG register description at address offset 0x1aa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h85_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h85_reg_t;

#define SBB_PARAM_H85_DEFAULT (0x00000000U)
#define SBB_PARAM_H85_RD_MASK (0xffffffffU)
#define SBB_PARAM_H85_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H85_VAL_BF_OFF ( 0)
#define SBB_PARAM_H85_VAL_BF_WID (32)
#define SBB_PARAM_H85_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H85_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L85_REG register description at address offset 0x1aac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l85_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l85_reg_t;

#define SBB_PARAM_L85_DEFAULT (0x00000000U)
#define SBB_PARAM_L85_RD_MASK (0xffffffffU)
#define SBB_PARAM_L85_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L85_VAL_BF_OFF ( 0)
#define SBB_PARAM_L85_VAL_BF_WID (32)
#define SBB_PARAM_L85_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L85_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H86_REG register description at address offset 0x1ab0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h86_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h86_reg_t;

#define SBB_PARAM_H86_DEFAULT (0x00000000U)
#define SBB_PARAM_H86_RD_MASK (0xffffffffU)
#define SBB_PARAM_H86_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H86_VAL_BF_OFF ( 0)
#define SBB_PARAM_H86_VAL_BF_WID (32)
#define SBB_PARAM_H86_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H86_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L86_REG register description at address offset 0x1ab4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l86_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l86_reg_t;

#define SBB_PARAM_L86_DEFAULT (0x00000000U)
#define SBB_PARAM_L86_RD_MASK (0xffffffffU)
#define SBB_PARAM_L86_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L86_VAL_BF_OFF ( 0)
#define SBB_PARAM_L86_VAL_BF_WID (32)
#define SBB_PARAM_L86_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L86_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H87_REG register description at address offset 0x1ab8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h87_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h87_reg_t;

#define SBB_PARAM_H87_DEFAULT (0x00000000U)
#define SBB_PARAM_H87_RD_MASK (0xffffffffU)
#define SBB_PARAM_H87_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H87_VAL_BF_OFF ( 0)
#define SBB_PARAM_H87_VAL_BF_WID (32)
#define SBB_PARAM_H87_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H87_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L87_REG register description at address offset 0x1abc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l87_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l87_reg_t;

#define SBB_PARAM_L87_DEFAULT (0x00000000U)
#define SBB_PARAM_L87_RD_MASK (0xffffffffU)
#define SBB_PARAM_L87_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L87_VAL_BF_OFF ( 0)
#define SBB_PARAM_L87_VAL_BF_WID (32)
#define SBB_PARAM_L87_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L87_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H88_REG register description at address offset 0x1ac0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h88_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h88_reg_t;

#define SBB_PARAM_H88_DEFAULT (0x00000000U)
#define SBB_PARAM_H88_RD_MASK (0xffffffffU)
#define SBB_PARAM_H88_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H88_VAL_BF_OFF ( 0)
#define SBB_PARAM_H88_VAL_BF_WID (32)
#define SBB_PARAM_H88_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H88_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L88_REG register description at address offset 0x1ac4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l88_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l88_reg_t;

#define SBB_PARAM_L88_DEFAULT (0x00000000U)
#define SBB_PARAM_L88_RD_MASK (0xffffffffU)
#define SBB_PARAM_L88_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L88_VAL_BF_OFF ( 0)
#define SBB_PARAM_L88_VAL_BF_WID (32)
#define SBB_PARAM_L88_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L88_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H89_REG register description at address offset 0x1ac8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h89_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h89_reg_t;

#define SBB_PARAM_H89_DEFAULT (0x00000000U)
#define SBB_PARAM_H89_RD_MASK (0xffffffffU)
#define SBB_PARAM_H89_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H89_VAL_BF_OFF ( 0)
#define SBB_PARAM_H89_VAL_BF_WID (32)
#define SBB_PARAM_H89_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H89_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L89_REG register description at address offset 0x1acc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l89_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l89_reg_t;

#define SBB_PARAM_L89_DEFAULT (0x00000000U)
#define SBB_PARAM_L89_RD_MASK (0xffffffffU)
#define SBB_PARAM_L89_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L89_VAL_BF_OFF ( 0)
#define SBB_PARAM_L89_VAL_BF_WID (32)
#define SBB_PARAM_L89_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L89_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H90_REG register description at address offset 0x1ad0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h90_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h90_reg_t;

#define SBB_PARAM_H90_DEFAULT (0x00000000U)
#define SBB_PARAM_H90_RD_MASK (0xffffffffU)
#define SBB_PARAM_H90_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H90_VAL_BF_OFF ( 0)
#define SBB_PARAM_H90_VAL_BF_WID (32)
#define SBB_PARAM_H90_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H90_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L90_REG register description at address offset 0x1ad4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l90_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l90_reg_t;

#define SBB_PARAM_L90_DEFAULT (0x00000000U)
#define SBB_PARAM_L90_RD_MASK (0xffffffffU)
#define SBB_PARAM_L90_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L90_VAL_BF_OFF ( 0)
#define SBB_PARAM_L90_VAL_BF_WID (32)
#define SBB_PARAM_L90_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L90_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H91_REG register description at address offset 0x1ad8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h91_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h91_reg_t;

#define SBB_PARAM_H91_DEFAULT (0x00000000U)
#define SBB_PARAM_H91_RD_MASK (0xffffffffU)
#define SBB_PARAM_H91_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H91_VAL_BF_OFF ( 0)
#define SBB_PARAM_H91_VAL_BF_WID (32)
#define SBB_PARAM_H91_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H91_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L91_REG register description at address offset 0x1adc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l91_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l91_reg_t;

#define SBB_PARAM_L91_DEFAULT (0x00000000U)
#define SBB_PARAM_L91_RD_MASK (0xffffffffU)
#define SBB_PARAM_L91_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L91_VAL_BF_OFF ( 0)
#define SBB_PARAM_L91_VAL_BF_WID (32)
#define SBB_PARAM_L91_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L91_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H92_REG register description at address offset 0x1ae0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h92_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h92_reg_t;

#define SBB_PARAM_H92_DEFAULT (0x00000000U)
#define SBB_PARAM_H92_RD_MASK (0xffffffffU)
#define SBB_PARAM_H92_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H92_VAL_BF_OFF ( 0)
#define SBB_PARAM_H92_VAL_BF_WID (32)
#define SBB_PARAM_H92_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H92_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L92_REG register description at address offset 0x1ae4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l92_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l92_reg_t;

#define SBB_PARAM_L92_DEFAULT (0x00000000U)
#define SBB_PARAM_L92_RD_MASK (0xffffffffU)
#define SBB_PARAM_L92_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L92_VAL_BF_OFF ( 0)
#define SBB_PARAM_L92_VAL_BF_WID (32)
#define SBB_PARAM_L92_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L92_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H93_REG register description at address offset 0x1ae8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h93_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h93_reg_t;

#define SBB_PARAM_H93_DEFAULT (0x00000000U)
#define SBB_PARAM_H93_RD_MASK (0xffffffffU)
#define SBB_PARAM_H93_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H93_VAL_BF_OFF ( 0)
#define SBB_PARAM_H93_VAL_BF_WID (32)
#define SBB_PARAM_H93_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H93_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L93_REG register description at address offset 0x1aec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l93_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l93_reg_t;

#define SBB_PARAM_L93_DEFAULT (0x00000000U)
#define SBB_PARAM_L93_RD_MASK (0xffffffffU)
#define SBB_PARAM_L93_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L93_VAL_BF_OFF ( 0)
#define SBB_PARAM_L93_VAL_BF_WID (32)
#define SBB_PARAM_L93_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L93_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H94_REG register description at address offset 0x1af0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h94_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h94_reg_t;

#define SBB_PARAM_H94_DEFAULT (0x00000000U)
#define SBB_PARAM_H94_RD_MASK (0xffffffffU)
#define SBB_PARAM_H94_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H94_VAL_BF_OFF ( 0)
#define SBB_PARAM_H94_VAL_BF_WID (32)
#define SBB_PARAM_H94_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H94_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L94_REG register description at address offset 0x1af4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l94_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l94_reg_t;

#define SBB_PARAM_L94_DEFAULT (0x00000000U)
#define SBB_PARAM_L94_RD_MASK (0xffffffffU)
#define SBB_PARAM_L94_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L94_VAL_BF_OFF ( 0)
#define SBB_PARAM_L94_VAL_BF_WID (32)
#define SBB_PARAM_L94_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L94_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H95_REG register description at address offset 0x1af8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h95_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h95_reg_t;

#define SBB_PARAM_H95_DEFAULT (0x00000000U)
#define SBB_PARAM_H95_RD_MASK (0xffffffffU)
#define SBB_PARAM_H95_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H95_VAL_BF_OFF ( 0)
#define SBB_PARAM_H95_VAL_BF_WID (32)
#define SBB_PARAM_H95_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H95_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L95_REG register description at address offset 0x1afc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l95_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l95_reg_t;

#define SBB_PARAM_L95_DEFAULT (0x00000000U)
#define SBB_PARAM_L95_RD_MASK (0xffffffffU)
#define SBB_PARAM_L95_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L95_VAL_BF_OFF ( 0)
#define SBB_PARAM_L95_VAL_BF_WID (32)
#define SBB_PARAM_L95_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L95_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H96_REG register description at address offset 0x1b00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h96_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h96_reg_t;

#define SBB_PARAM_H96_DEFAULT (0x00000000U)
#define SBB_PARAM_H96_RD_MASK (0xffffffffU)
#define SBB_PARAM_H96_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H96_VAL_BF_OFF ( 0)
#define SBB_PARAM_H96_VAL_BF_WID (32)
#define SBB_PARAM_H96_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H96_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L96_REG register description at address offset 0x1b04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l96_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l96_reg_t;

#define SBB_PARAM_L96_DEFAULT (0x00000000U)
#define SBB_PARAM_L96_RD_MASK (0xffffffffU)
#define SBB_PARAM_L96_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L96_VAL_BF_OFF ( 0)
#define SBB_PARAM_L96_VAL_BF_WID (32)
#define SBB_PARAM_L96_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L96_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H97_REG register description at address offset 0x1b08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h97_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h97_reg_t;

#define SBB_PARAM_H97_DEFAULT (0x00000000U)
#define SBB_PARAM_H97_RD_MASK (0xffffffffU)
#define SBB_PARAM_H97_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H97_VAL_BF_OFF ( 0)
#define SBB_PARAM_H97_VAL_BF_WID (32)
#define SBB_PARAM_H97_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H97_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L97_REG register description at address offset 0x1b0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l97_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l97_reg_t;

#define SBB_PARAM_L97_DEFAULT (0x00000000U)
#define SBB_PARAM_L97_RD_MASK (0xffffffffU)
#define SBB_PARAM_L97_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L97_VAL_BF_OFF ( 0)
#define SBB_PARAM_L97_VAL_BF_WID (32)
#define SBB_PARAM_L97_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L97_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H98_REG register description at address offset 0x1b10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h98_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h98_reg_t;

#define SBB_PARAM_H98_DEFAULT (0x00000000U)
#define SBB_PARAM_H98_RD_MASK (0xffffffffU)
#define SBB_PARAM_H98_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H98_VAL_BF_OFF ( 0)
#define SBB_PARAM_H98_VAL_BF_WID (32)
#define SBB_PARAM_H98_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H98_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L98_REG register description at address offset 0x1b14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l98_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l98_reg_t;

#define SBB_PARAM_L98_DEFAULT (0x00000000U)
#define SBB_PARAM_L98_RD_MASK (0xffffffffU)
#define SBB_PARAM_L98_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L98_VAL_BF_OFF ( 0)
#define SBB_PARAM_L98_VAL_BF_WID (32)
#define SBB_PARAM_L98_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L98_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H99_REG register description at address offset 0x1b18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h99_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h99_reg_t;

#define SBB_PARAM_H99_DEFAULT (0x00000000U)
#define SBB_PARAM_H99_RD_MASK (0xffffffffU)
#define SBB_PARAM_H99_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H99_VAL_BF_OFF ( 0)
#define SBB_PARAM_H99_VAL_BF_WID (32)
#define SBB_PARAM_H99_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H99_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L99_REG register description at address offset 0x1b1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l99_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l99_reg_t;

#define SBB_PARAM_L99_DEFAULT (0x00000000U)
#define SBB_PARAM_L99_RD_MASK (0xffffffffU)
#define SBB_PARAM_L99_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L99_VAL_BF_OFF ( 0)
#define SBB_PARAM_L99_VAL_BF_WID (32)
#define SBB_PARAM_L99_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L99_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H100_REG register description at address offset 0x1b20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h100_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h100_reg_t;

#define SBB_PARAM_H100_DEFAULT (0x00000000U)
#define SBB_PARAM_H100_RD_MASK (0xffffffffU)
#define SBB_PARAM_H100_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H100_VAL_BF_OFF ( 0)
#define SBB_PARAM_H100_VAL_BF_WID (32)
#define SBB_PARAM_H100_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H100_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L100_REG register description at address offset 0x1b24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l100_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l100_reg_t;

#define SBB_PARAM_L100_DEFAULT (0x00000000U)
#define SBB_PARAM_L100_RD_MASK (0xffffffffU)
#define SBB_PARAM_L100_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L100_VAL_BF_OFF ( 0)
#define SBB_PARAM_L100_VAL_BF_WID (32)
#define SBB_PARAM_L100_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L100_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H101_REG register description at address offset 0x1b28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h101_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h101_reg_t;

#define SBB_PARAM_H101_DEFAULT (0x00000000U)
#define SBB_PARAM_H101_RD_MASK (0xffffffffU)
#define SBB_PARAM_H101_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H101_VAL_BF_OFF ( 0)
#define SBB_PARAM_H101_VAL_BF_WID (32)
#define SBB_PARAM_H101_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H101_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L101_REG register description at address offset 0x1b2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l101_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l101_reg_t;

#define SBB_PARAM_L101_DEFAULT (0x00000000U)
#define SBB_PARAM_L101_RD_MASK (0xffffffffU)
#define SBB_PARAM_L101_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L101_VAL_BF_OFF ( 0)
#define SBB_PARAM_L101_VAL_BF_WID (32)
#define SBB_PARAM_L101_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L101_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H102_REG register description at address offset 0x1b30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h102_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h102_reg_t;

#define SBB_PARAM_H102_DEFAULT (0x00000000U)
#define SBB_PARAM_H102_RD_MASK (0xffffffffU)
#define SBB_PARAM_H102_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H102_VAL_BF_OFF ( 0)
#define SBB_PARAM_H102_VAL_BF_WID (32)
#define SBB_PARAM_H102_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H102_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L102_REG register description at address offset 0x1b34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l102_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l102_reg_t;

#define SBB_PARAM_L102_DEFAULT (0x00000000U)
#define SBB_PARAM_L102_RD_MASK (0xffffffffU)
#define SBB_PARAM_L102_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L102_VAL_BF_OFF ( 0)
#define SBB_PARAM_L102_VAL_BF_WID (32)
#define SBB_PARAM_L102_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L102_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H103_REG register description at address offset 0x1b38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h103_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h103_reg_t;

#define SBB_PARAM_H103_DEFAULT (0x00000000U)
#define SBB_PARAM_H103_RD_MASK (0xffffffffU)
#define SBB_PARAM_H103_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H103_VAL_BF_OFF ( 0)
#define SBB_PARAM_H103_VAL_BF_WID (32)
#define SBB_PARAM_H103_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H103_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L103_REG register description at address offset 0x1b3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l103_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l103_reg_t;

#define SBB_PARAM_L103_DEFAULT (0x00000000U)
#define SBB_PARAM_L103_RD_MASK (0xffffffffU)
#define SBB_PARAM_L103_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L103_VAL_BF_OFF ( 0)
#define SBB_PARAM_L103_VAL_BF_WID (32)
#define SBB_PARAM_L103_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L103_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H104_REG register description at address offset 0x1b40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h104_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h104_reg_t;

#define SBB_PARAM_H104_DEFAULT (0x00000000U)
#define SBB_PARAM_H104_RD_MASK (0xffffffffU)
#define SBB_PARAM_H104_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H104_VAL_BF_OFF ( 0)
#define SBB_PARAM_H104_VAL_BF_WID (32)
#define SBB_PARAM_H104_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H104_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L104_REG register description at address offset 0x1b44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l104_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l104_reg_t;

#define SBB_PARAM_L104_DEFAULT (0x00000000U)
#define SBB_PARAM_L104_RD_MASK (0xffffffffU)
#define SBB_PARAM_L104_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L104_VAL_BF_OFF ( 0)
#define SBB_PARAM_L104_VAL_BF_WID (32)
#define SBB_PARAM_L104_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L104_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H105_REG register description at address offset 0x1b48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h105_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h105_reg_t;

#define SBB_PARAM_H105_DEFAULT (0x00000000U)
#define SBB_PARAM_H105_RD_MASK (0xffffffffU)
#define SBB_PARAM_H105_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H105_VAL_BF_OFF ( 0)
#define SBB_PARAM_H105_VAL_BF_WID (32)
#define SBB_PARAM_H105_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H105_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L105_REG register description at address offset 0x1b4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l105_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l105_reg_t;

#define SBB_PARAM_L105_DEFAULT (0x00000000U)
#define SBB_PARAM_L105_RD_MASK (0xffffffffU)
#define SBB_PARAM_L105_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L105_VAL_BF_OFF ( 0)
#define SBB_PARAM_L105_VAL_BF_WID (32)
#define SBB_PARAM_L105_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L105_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H106_REG register description at address offset 0x1b50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h106_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h106_reg_t;

#define SBB_PARAM_H106_DEFAULT (0x00000000U)
#define SBB_PARAM_H106_RD_MASK (0xffffffffU)
#define SBB_PARAM_H106_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H106_VAL_BF_OFF ( 0)
#define SBB_PARAM_H106_VAL_BF_WID (32)
#define SBB_PARAM_H106_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H106_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L106_REG register description at address offset 0x1b54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l106_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l106_reg_t;

#define SBB_PARAM_L106_DEFAULT (0x00000000U)
#define SBB_PARAM_L106_RD_MASK (0xffffffffU)
#define SBB_PARAM_L106_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L106_VAL_BF_OFF ( 0)
#define SBB_PARAM_L106_VAL_BF_WID (32)
#define SBB_PARAM_L106_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L106_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H107_REG register description at address offset 0x1b58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h107_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h107_reg_t;

#define SBB_PARAM_H107_DEFAULT (0x00000000U)
#define SBB_PARAM_H107_RD_MASK (0xffffffffU)
#define SBB_PARAM_H107_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H107_VAL_BF_OFF ( 0)
#define SBB_PARAM_H107_VAL_BF_WID (32)
#define SBB_PARAM_H107_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H107_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L107_REG register description at address offset 0x1b5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l107_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l107_reg_t;

#define SBB_PARAM_L107_DEFAULT (0x00000000U)
#define SBB_PARAM_L107_RD_MASK (0xffffffffU)
#define SBB_PARAM_L107_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L107_VAL_BF_OFF ( 0)
#define SBB_PARAM_L107_VAL_BF_WID (32)
#define SBB_PARAM_L107_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L107_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H108_REG register description at address offset 0x1b60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h108_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h108_reg_t;

#define SBB_PARAM_H108_DEFAULT (0x00000000U)
#define SBB_PARAM_H108_RD_MASK (0xffffffffU)
#define SBB_PARAM_H108_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H108_VAL_BF_OFF ( 0)
#define SBB_PARAM_H108_VAL_BF_WID (32)
#define SBB_PARAM_H108_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H108_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L108_REG register description at address offset 0x1b64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l108_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l108_reg_t;

#define SBB_PARAM_L108_DEFAULT (0x00000000U)
#define SBB_PARAM_L108_RD_MASK (0xffffffffU)
#define SBB_PARAM_L108_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L108_VAL_BF_OFF ( 0)
#define SBB_PARAM_L108_VAL_BF_WID (32)
#define SBB_PARAM_L108_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L108_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H109_REG register description at address offset 0x1b68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h109_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h109_reg_t;

#define SBB_PARAM_H109_DEFAULT (0x00000000U)
#define SBB_PARAM_H109_RD_MASK (0xffffffffU)
#define SBB_PARAM_H109_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H109_VAL_BF_OFF ( 0)
#define SBB_PARAM_H109_VAL_BF_WID (32)
#define SBB_PARAM_H109_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H109_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L109_REG register description at address offset 0x1b6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l109_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l109_reg_t;

#define SBB_PARAM_L109_DEFAULT (0x00000000U)
#define SBB_PARAM_L109_RD_MASK (0xffffffffU)
#define SBB_PARAM_L109_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L109_VAL_BF_OFF ( 0)
#define SBB_PARAM_L109_VAL_BF_WID (32)
#define SBB_PARAM_L109_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L109_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H110_REG register description at address offset 0x1b70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h110_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h110_reg_t;

#define SBB_PARAM_H110_DEFAULT (0x00000000U)
#define SBB_PARAM_H110_RD_MASK (0xffffffffU)
#define SBB_PARAM_H110_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H110_VAL_BF_OFF ( 0)
#define SBB_PARAM_H110_VAL_BF_WID (32)
#define SBB_PARAM_H110_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H110_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L110_REG register description at address offset 0x1b74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l110_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l110_reg_t;

#define SBB_PARAM_L110_DEFAULT (0x00000000U)
#define SBB_PARAM_L110_RD_MASK (0xffffffffU)
#define SBB_PARAM_L110_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L110_VAL_BF_OFF ( 0)
#define SBB_PARAM_L110_VAL_BF_WID (32)
#define SBB_PARAM_L110_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L110_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H111_REG register description at address offset 0x1b78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h111_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h111_reg_t;

#define SBB_PARAM_H111_DEFAULT (0x00000000U)
#define SBB_PARAM_H111_RD_MASK (0xffffffffU)
#define SBB_PARAM_H111_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H111_VAL_BF_OFF ( 0)
#define SBB_PARAM_H111_VAL_BF_WID (32)
#define SBB_PARAM_H111_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H111_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L111_REG register description at address offset 0x1b7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l111_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l111_reg_t;

#define SBB_PARAM_L111_DEFAULT (0x00000000U)
#define SBB_PARAM_L111_RD_MASK (0xffffffffU)
#define SBB_PARAM_L111_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L111_VAL_BF_OFF ( 0)
#define SBB_PARAM_L111_VAL_BF_WID (32)
#define SBB_PARAM_L111_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L111_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H112_REG register description at address offset 0x1b80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h112_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h112_reg_t;

#define SBB_PARAM_H112_DEFAULT (0x00000000U)
#define SBB_PARAM_H112_RD_MASK (0xffffffffU)
#define SBB_PARAM_H112_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H112_VAL_BF_OFF ( 0)
#define SBB_PARAM_H112_VAL_BF_WID (32)
#define SBB_PARAM_H112_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H112_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L112_REG register description at address offset 0x1b84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l112_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l112_reg_t;

#define SBB_PARAM_L112_DEFAULT (0x00000000U)
#define SBB_PARAM_L112_RD_MASK (0xffffffffU)
#define SBB_PARAM_L112_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L112_VAL_BF_OFF ( 0)
#define SBB_PARAM_L112_VAL_BF_WID (32)
#define SBB_PARAM_L112_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L112_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H113_REG register description at address offset 0x1b88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h113_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h113_reg_t;

#define SBB_PARAM_H113_DEFAULT (0x00000000U)
#define SBB_PARAM_H113_RD_MASK (0xffffffffU)
#define SBB_PARAM_H113_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H113_VAL_BF_OFF ( 0)
#define SBB_PARAM_H113_VAL_BF_WID (32)
#define SBB_PARAM_H113_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H113_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L113_REG register description at address offset 0x1b8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l113_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l113_reg_t;

#define SBB_PARAM_L113_DEFAULT (0x00000000U)
#define SBB_PARAM_L113_RD_MASK (0xffffffffU)
#define SBB_PARAM_L113_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L113_VAL_BF_OFF ( 0)
#define SBB_PARAM_L113_VAL_BF_WID (32)
#define SBB_PARAM_L113_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L113_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H114_REG register description at address offset 0x1b90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h114_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h114_reg_t;

#define SBB_PARAM_H114_DEFAULT (0x00000000U)
#define SBB_PARAM_H114_RD_MASK (0xffffffffU)
#define SBB_PARAM_H114_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H114_VAL_BF_OFF ( 0)
#define SBB_PARAM_H114_VAL_BF_WID (32)
#define SBB_PARAM_H114_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H114_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L114_REG register description at address offset 0x1b94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l114_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l114_reg_t;

#define SBB_PARAM_L114_DEFAULT (0x00000000U)
#define SBB_PARAM_L114_RD_MASK (0xffffffffU)
#define SBB_PARAM_L114_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L114_VAL_BF_OFF ( 0)
#define SBB_PARAM_L114_VAL_BF_WID (32)
#define SBB_PARAM_L114_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L114_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H115_REG register description at address offset 0x1b98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h115_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h115_reg_t;

#define SBB_PARAM_H115_DEFAULT (0x00000000U)
#define SBB_PARAM_H115_RD_MASK (0xffffffffU)
#define SBB_PARAM_H115_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H115_VAL_BF_OFF ( 0)
#define SBB_PARAM_H115_VAL_BF_WID (32)
#define SBB_PARAM_H115_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H115_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L115_REG register description at address offset 0x1b9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l115_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l115_reg_t;

#define SBB_PARAM_L115_DEFAULT (0x00000000U)
#define SBB_PARAM_L115_RD_MASK (0xffffffffU)
#define SBB_PARAM_L115_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L115_VAL_BF_OFF ( 0)
#define SBB_PARAM_L115_VAL_BF_WID (32)
#define SBB_PARAM_L115_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L115_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H116_REG register description at address offset 0x1ba0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h116_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h116_reg_t;

#define SBB_PARAM_H116_DEFAULT (0x00000000U)
#define SBB_PARAM_H116_RD_MASK (0xffffffffU)
#define SBB_PARAM_H116_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H116_VAL_BF_OFF ( 0)
#define SBB_PARAM_H116_VAL_BF_WID (32)
#define SBB_PARAM_H116_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H116_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L116_REG register description at address offset 0x1ba4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l116_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l116_reg_t;

#define SBB_PARAM_L116_DEFAULT (0x00000000U)
#define SBB_PARAM_L116_RD_MASK (0xffffffffU)
#define SBB_PARAM_L116_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L116_VAL_BF_OFF ( 0)
#define SBB_PARAM_L116_VAL_BF_WID (32)
#define SBB_PARAM_L116_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L116_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H117_REG register description at address offset 0x1ba8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h117_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h117_reg_t;

#define SBB_PARAM_H117_DEFAULT (0x00000000U)
#define SBB_PARAM_H117_RD_MASK (0xffffffffU)
#define SBB_PARAM_H117_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H117_VAL_BF_OFF ( 0)
#define SBB_PARAM_H117_VAL_BF_WID (32)
#define SBB_PARAM_H117_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H117_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L117_REG register description at address offset 0x1bac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l117_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l117_reg_t;

#define SBB_PARAM_L117_DEFAULT (0x00000000U)
#define SBB_PARAM_L117_RD_MASK (0xffffffffU)
#define SBB_PARAM_L117_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L117_VAL_BF_OFF ( 0)
#define SBB_PARAM_L117_VAL_BF_WID (32)
#define SBB_PARAM_L117_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L117_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H118_REG register description at address offset 0x1bb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h118_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h118_reg_t;

#define SBB_PARAM_H118_DEFAULT (0x00000000U)
#define SBB_PARAM_H118_RD_MASK (0xffffffffU)
#define SBB_PARAM_H118_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H118_VAL_BF_OFF ( 0)
#define SBB_PARAM_H118_VAL_BF_WID (32)
#define SBB_PARAM_H118_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H118_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L118_REG register description at address offset 0x1bb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l118_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l118_reg_t;

#define SBB_PARAM_L118_DEFAULT (0x00000000U)
#define SBB_PARAM_L118_RD_MASK (0xffffffffU)
#define SBB_PARAM_L118_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L118_VAL_BF_OFF ( 0)
#define SBB_PARAM_L118_VAL_BF_WID (32)
#define SBB_PARAM_L118_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L118_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H119_REG register description at address offset 0x1bb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h119_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h119_reg_t;

#define SBB_PARAM_H119_DEFAULT (0x00000000U)
#define SBB_PARAM_H119_RD_MASK (0xffffffffU)
#define SBB_PARAM_H119_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H119_VAL_BF_OFF ( 0)
#define SBB_PARAM_H119_VAL_BF_WID (32)
#define SBB_PARAM_H119_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H119_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L119_REG register description at address offset 0x1bbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l119_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l119_reg_t;

#define SBB_PARAM_L119_DEFAULT (0x00000000U)
#define SBB_PARAM_L119_RD_MASK (0xffffffffU)
#define SBB_PARAM_L119_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L119_VAL_BF_OFF ( 0)
#define SBB_PARAM_L119_VAL_BF_WID (32)
#define SBB_PARAM_L119_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L119_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H120_REG register description at address offset 0x1bc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h120_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h120_reg_t;

#define SBB_PARAM_H120_DEFAULT (0x00000000U)
#define SBB_PARAM_H120_RD_MASK (0xffffffffU)
#define SBB_PARAM_H120_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H120_VAL_BF_OFF ( 0)
#define SBB_PARAM_H120_VAL_BF_WID (32)
#define SBB_PARAM_H120_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H120_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L120_REG register description at address offset 0x1bc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l120_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l120_reg_t;

#define SBB_PARAM_L120_DEFAULT (0x00000000U)
#define SBB_PARAM_L120_RD_MASK (0xffffffffU)
#define SBB_PARAM_L120_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L120_VAL_BF_OFF ( 0)
#define SBB_PARAM_L120_VAL_BF_WID (32)
#define SBB_PARAM_L120_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L120_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H121_REG register description at address offset 0x1bc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h121_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h121_reg_t;

#define SBB_PARAM_H121_DEFAULT (0x00000000U)
#define SBB_PARAM_H121_RD_MASK (0xffffffffU)
#define SBB_PARAM_H121_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H121_VAL_BF_OFF ( 0)
#define SBB_PARAM_H121_VAL_BF_WID (32)
#define SBB_PARAM_H121_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H121_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L121_REG register description at address offset 0x1bcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l121_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l121_reg_t;

#define SBB_PARAM_L121_DEFAULT (0x00000000U)
#define SBB_PARAM_L121_RD_MASK (0xffffffffU)
#define SBB_PARAM_L121_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L121_VAL_BF_OFF ( 0)
#define SBB_PARAM_L121_VAL_BF_WID (32)
#define SBB_PARAM_L121_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L121_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H122_REG register description at address offset 0x1bd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h122_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h122_reg_t;

#define SBB_PARAM_H122_DEFAULT (0x00000000U)
#define SBB_PARAM_H122_RD_MASK (0xffffffffU)
#define SBB_PARAM_H122_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H122_VAL_BF_OFF ( 0)
#define SBB_PARAM_H122_VAL_BF_WID (32)
#define SBB_PARAM_H122_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H122_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L122_REG register description at address offset 0x1bd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l122_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l122_reg_t;

#define SBB_PARAM_L122_DEFAULT (0x00000000U)
#define SBB_PARAM_L122_RD_MASK (0xffffffffU)
#define SBB_PARAM_L122_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L122_VAL_BF_OFF ( 0)
#define SBB_PARAM_L122_VAL_BF_WID (32)
#define SBB_PARAM_L122_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L122_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H123_REG register description at address offset 0x1bd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h123_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h123_reg_t;

#define SBB_PARAM_H123_DEFAULT (0x00000000U)
#define SBB_PARAM_H123_RD_MASK (0xffffffffU)
#define SBB_PARAM_H123_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H123_VAL_BF_OFF ( 0)
#define SBB_PARAM_H123_VAL_BF_WID (32)
#define SBB_PARAM_H123_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H123_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L123_REG register description at address offset 0x1bdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l123_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l123_reg_t;

#define SBB_PARAM_L123_DEFAULT (0x00000000U)
#define SBB_PARAM_L123_RD_MASK (0xffffffffU)
#define SBB_PARAM_L123_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L123_VAL_BF_OFF ( 0)
#define SBB_PARAM_L123_VAL_BF_WID (32)
#define SBB_PARAM_L123_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L123_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H124_REG register description at address offset 0x1be0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h124_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h124_reg_t;

#define SBB_PARAM_H124_DEFAULT (0x00000000U)
#define SBB_PARAM_H124_RD_MASK (0xffffffffU)
#define SBB_PARAM_H124_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H124_VAL_BF_OFF ( 0)
#define SBB_PARAM_H124_VAL_BF_WID (32)
#define SBB_PARAM_H124_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H124_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L124_REG register description at address offset 0x1be4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l124_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l124_reg_t;

#define SBB_PARAM_L124_DEFAULT (0x00000000U)
#define SBB_PARAM_L124_RD_MASK (0xffffffffU)
#define SBB_PARAM_L124_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L124_VAL_BF_OFF ( 0)
#define SBB_PARAM_L124_VAL_BF_WID (32)
#define SBB_PARAM_L124_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L124_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H125_REG register description at address offset 0x1be8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h125_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h125_reg_t;

#define SBB_PARAM_H125_DEFAULT (0x00000000U)
#define SBB_PARAM_H125_RD_MASK (0xffffffffU)
#define SBB_PARAM_H125_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H125_VAL_BF_OFF ( 0)
#define SBB_PARAM_H125_VAL_BF_WID (32)
#define SBB_PARAM_H125_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H125_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L125_REG register description at address offset 0x1bec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l125_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l125_reg_t;

#define SBB_PARAM_L125_DEFAULT (0x00000000U)
#define SBB_PARAM_L125_RD_MASK (0xffffffffU)
#define SBB_PARAM_L125_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L125_VAL_BF_OFF ( 0)
#define SBB_PARAM_L125_VAL_BF_WID (32)
#define SBB_PARAM_L125_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L125_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H126_REG register description at address offset 0x1bf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h126_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h126_reg_t;

#define SBB_PARAM_H126_DEFAULT (0x00000000U)
#define SBB_PARAM_H126_RD_MASK (0xffffffffU)
#define SBB_PARAM_H126_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H126_VAL_BF_OFF ( 0)
#define SBB_PARAM_H126_VAL_BF_WID (32)
#define SBB_PARAM_H126_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H126_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L126_REG register description at address offset 0x1bf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l126_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l126_reg_t;

#define SBB_PARAM_L126_DEFAULT (0x00000000U)
#define SBB_PARAM_L126_RD_MASK (0xffffffffU)
#define SBB_PARAM_L126_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L126_VAL_BF_OFF ( 0)
#define SBB_PARAM_L126_VAL_BF_WID (32)
#define SBB_PARAM_L126_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L126_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H127_REG register description at address offset 0x1bf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h127_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h127_reg_t;

#define SBB_PARAM_H127_DEFAULT (0x00000000U)
#define SBB_PARAM_H127_RD_MASK (0xffffffffU)
#define SBB_PARAM_H127_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H127_VAL_BF_OFF ( 0)
#define SBB_PARAM_H127_VAL_BF_WID (32)
#define SBB_PARAM_H127_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H127_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L127_REG register description at address offset 0x1bfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l127_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l127_reg_t;

#define SBB_PARAM_L127_DEFAULT (0x00000000U)
#define SBB_PARAM_L127_RD_MASK (0xffffffffU)
#define SBB_PARAM_L127_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L127_VAL_BF_OFF ( 0)
#define SBB_PARAM_L127_VAL_BF_WID (32)
#define SBB_PARAM_L127_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L127_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H128_REG register description at address offset 0x1c00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h128_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h128_reg_t;

#define SBB_PARAM_H128_DEFAULT (0x00000000U)
#define SBB_PARAM_H128_RD_MASK (0xffffffffU)
#define SBB_PARAM_H128_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H128_VAL_BF_OFF ( 0)
#define SBB_PARAM_H128_VAL_BF_WID (32)
#define SBB_PARAM_H128_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H128_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L128_REG register description at address offset 0x1c04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l128_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l128_reg_t;

#define SBB_PARAM_L128_DEFAULT (0x00000000U)
#define SBB_PARAM_L128_RD_MASK (0xffffffffU)
#define SBB_PARAM_L128_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L128_VAL_BF_OFF ( 0)
#define SBB_PARAM_L128_VAL_BF_WID (32)
#define SBB_PARAM_L128_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L128_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H129_REG register description at address offset 0x1c08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h129_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h129_reg_t;

#define SBB_PARAM_H129_DEFAULT (0x00000000U)
#define SBB_PARAM_H129_RD_MASK (0xffffffffU)
#define SBB_PARAM_H129_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H129_VAL_BF_OFF ( 0)
#define SBB_PARAM_H129_VAL_BF_WID (32)
#define SBB_PARAM_H129_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H129_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L129_REG register description at address offset 0x1c0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l129_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l129_reg_t;

#define SBB_PARAM_L129_DEFAULT (0x00000000U)
#define SBB_PARAM_L129_RD_MASK (0xffffffffU)
#define SBB_PARAM_L129_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L129_VAL_BF_OFF ( 0)
#define SBB_PARAM_L129_VAL_BF_WID (32)
#define SBB_PARAM_L129_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L129_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H130_REG register description at address offset 0x1c10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h130_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h130_reg_t;

#define SBB_PARAM_H130_DEFAULT (0x00000000U)
#define SBB_PARAM_H130_RD_MASK (0xffffffffU)
#define SBB_PARAM_H130_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H130_VAL_BF_OFF ( 0)
#define SBB_PARAM_H130_VAL_BF_WID (32)
#define SBB_PARAM_H130_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H130_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L130_REG register description at address offset 0x1c14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l130_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l130_reg_t;

#define SBB_PARAM_L130_DEFAULT (0x00000000U)
#define SBB_PARAM_L130_RD_MASK (0xffffffffU)
#define SBB_PARAM_L130_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L130_VAL_BF_OFF ( 0)
#define SBB_PARAM_L130_VAL_BF_WID (32)
#define SBB_PARAM_L130_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L130_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H131_REG register description at address offset 0x1c18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h131_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h131_reg_t;

#define SBB_PARAM_H131_DEFAULT (0x00000000U)
#define SBB_PARAM_H131_RD_MASK (0xffffffffU)
#define SBB_PARAM_H131_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H131_VAL_BF_OFF ( 0)
#define SBB_PARAM_H131_VAL_BF_WID (32)
#define SBB_PARAM_H131_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H131_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L131_REG register description at address offset 0x1c1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l131_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l131_reg_t;

#define SBB_PARAM_L131_DEFAULT (0x00000000U)
#define SBB_PARAM_L131_RD_MASK (0xffffffffU)
#define SBB_PARAM_L131_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L131_VAL_BF_OFF ( 0)
#define SBB_PARAM_L131_VAL_BF_WID (32)
#define SBB_PARAM_L131_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L131_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H132_REG register description at address offset 0x1c20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h132_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h132_reg_t;

#define SBB_PARAM_H132_DEFAULT (0x00000000U)
#define SBB_PARAM_H132_RD_MASK (0xffffffffU)
#define SBB_PARAM_H132_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H132_VAL_BF_OFF ( 0)
#define SBB_PARAM_H132_VAL_BF_WID (32)
#define SBB_PARAM_H132_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H132_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L132_REG register description at address offset 0x1c24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l132_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l132_reg_t;

#define SBB_PARAM_L132_DEFAULT (0x00000000U)
#define SBB_PARAM_L132_RD_MASK (0xffffffffU)
#define SBB_PARAM_L132_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L132_VAL_BF_OFF ( 0)
#define SBB_PARAM_L132_VAL_BF_WID (32)
#define SBB_PARAM_L132_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L132_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H133_REG register description at address offset 0x1c28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h133_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h133_reg_t;

#define SBB_PARAM_H133_DEFAULT (0x00000000U)
#define SBB_PARAM_H133_RD_MASK (0xffffffffU)
#define SBB_PARAM_H133_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H133_VAL_BF_OFF ( 0)
#define SBB_PARAM_H133_VAL_BF_WID (32)
#define SBB_PARAM_H133_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H133_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L133_REG register description at address offset 0x1c2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l133_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l133_reg_t;

#define SBB_PARAM_L133_DEFAULT (0x00000000U)
#define SBB_PARAM_L133_RD_MASK (0xffffffffU)
#define SBB_PARAM_L133_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L133_VAL_BF_OFF ( 0)
#define SBB_PARAM_L133_VAL_BF_WID (32)
#define SBB_PARAM_L133_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L133_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H134_REG register description at address offset 0x1c30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h134_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h134_reg_t;

#define SBB_PARAM_H134_DEFAULT (0x00000000U)
#define SBB_PARAM_H134_RD_MASK (0xffffffffU)
#define SBB_PARAM_H134_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H134_VAL_BF_OFF ( 0)
#define SBB_PARAM_H134_VAL_BF_WID (32)
#define SBB_PARAM_H134_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H134_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L134_REG register description at address offset 0x1c34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l134_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l134_reg_t;

#define SBB_PARAM_L134_DEFAULT (0x00000000U)
#define SBB_PARAM_L134_RD_MASK (0xffffffffU)
#define SBB_PARAM_L134_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L134_VAL_BF_OFF ( 0)
#define SBB_PARAM_L134_VAL_BF_WID (32)
#define SBB_PARAM_L134_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L134_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H135_REG register description at address offset 0x1c38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h135_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h135_reg_t;

#define SBB_PARAM_H135_DEFAULT (0x00000000U)
#define SBB_PARAM_H135_RD_MASK (0xffffffffU)
#define SBB_PARAM_H135_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H135_VAL_BF_OFF ( 0)
#define SBB_PARAM_H135_VAL_BF_WID (32)
#define SBB_PARAM_H135_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H135_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L135_REG register description at address offset 0x1c3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l135_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l135_reg_t;

#define SBB_PARAM_L135_DEFAULT (0x00000000U)
#define SBB_PARAM_L135_RD_MASK (0xffffffffU)
#define SBB_PARAM_L135_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L135_VAL_BF_OFF ( 0)
#define SBB_PARAM_L135_VAL_BF_WID (32)
#define SBB_PARAM_L135_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L135_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H136_REG register description at address offset 0x1c40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h136_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h136_reg_t;

#define SBB_PARAM_H136_DEFAULT (0x00000000U)
#define SBB_PARAM_H136_RD_MASK (0xffffffffU)
#define SBB_PARAM_H136_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H136_VAL_BF_OFF ( 0)
#define SBB_PARAM_H136_VAL_BF_WID (32)
#define SBB_PARAM_H136_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H136_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L136_REG register description at address offset 0x1c44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l136_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l136_reg_t;

#define SBB_PARAM_L136_DEFAULT (0x00000000U)
#define SBB_PARAM_L136_RD_MASK (0xffffffffU)
#define SBB_PARAM_L136_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L136_VAL_BF_OFF ( 0)
#define SBB_PARAM_L136_VAL_BF_WID (32)
#define SBB_PARAM_L136_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L136_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H137_REG register description at address offset 0x1c48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h137_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h137_reg_t;

#define SBB_PARAM_H137_DEFAULT (0x00000000U)
#define SBB_PARAM_H137_RD_MASK (0xffffffffU)
#define SBB_PARAM_H137_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H137_VAL_BF_OFF ( 0)
#define SBB_PARAM_H137_VAL_BF_WID (32)
#define SBB_PARAM_H137_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H137_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L137_REG register description at address offset 0x1c4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l137_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l137_reg_t;

#define SBB_PARAM_L137_DEFAULT (0x00000000U)
#define SBB_PARAM_L137_RD_MASK (0xffffffffU)
#define SBB_PARAM_L137_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L137_VAL_BF_OFF ( 0)
#define SBB_PARAM_L137_VAL_BF_WID (32)
#define SBB_PARAM_L137_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L137_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H138_REG register description at address offset 0x1c50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h138_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h138_reg_t;

#define SBB_PARAM_H138_DEFAULT (0x00000000U)
#define SBB_PARAM_H138_RD_MASK (0xffffffffU)
#define SBB_PARAM_H138_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H138_VAL_BF_OFF ( 0)
#define SBB_PARAM_H138_VAL_BF_WID (32)
#define SBB_PARAM_H138_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H138_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L138_REG register description at address offset 0x1c54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l138_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l138_reg_t;

#define SBB_PARAM_L138_DEFAULT (0x00000000U)
#define SBB_PARAM_L138_RD_MASK (0xffffffffU)
#define SBB_PARAM_L138_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L138_VAL_BF_OFF ( 0)
#define SBB_PARAM_L138_VAL_BF_WID (32)
#define SBB_PARAM_L138_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L138_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H139_REG register description at address offset 0x1c58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h139_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h139_reg_t;

#define SBB_PARAM_H139_DEFAULT (0x00000000U)
#define SBB_PARAM_H139_RD_MASK (0xffffffffU)
#define SBB_PARAM_H139_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H139_VAL_BF_OFF ( 0)
#define SBB_PARAM_H139_VAL_BF_WID (32)
#define SBB_PARAM_H139_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H139_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L139_REG register description at address offset 0x1c5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l139_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l139_reg_t;

#define SBB_PARAM_L139_DEFAULT (0x00000000U)
#define SBB_PARAM_L139_RD_MASK (0xffffffffU)
#define SBB_PARAM_L139_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L139_VAL_BF_OFF ( 0)
#define SBB_PARAM_L139_VAL_BF_WID (32)
#define SBB_PARAM_L139_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L139_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H140_REG register description at address offset 0x1c60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h140_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h140_reg_t;

#define SBB_PARAM_H140_DEFAULT (0x00000000U)
#define SBB_PARAM_H140_RD_MASK (0xffffffffU)
#define SBB_PARAM_H140_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H140_VAL_BF_OFF ( 0)
#define SBB_PARAM_H140_VAL_BF_WID (32)
#define SBB_PARAM_H140_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H140_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L140_REG register description at address offset 0x1c64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l140_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l140_reg_t;

#define SBB_PARAM_L140_DEFAULT (0x00000000U)
#define SBB_PARAM_L140_RD_MASK (0xffffffffU)
#define SBB_PARAM_L140_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L140_VAL_BF_OFF ( 0)
#define SBB_PARAM_L140_VAL_BF_WID (32)
#define SBB_PARAM_L140_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L140_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H141_REG register description at address offset 0x1c68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h141_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h141_reg_t;

#define SBB_PARAM_H141_DEFAULT (0x00000000U)
#define SBB_PARAM_H141_RD_MASK (0xffffffffU)
#define SBB_PARAM_H141_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H141_VAL_BF_OFF ( 0)
#define SBB_PARAM_H141_VAL_BF_WID (32)
#define SBB_PARAM_H141_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H141_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L141_REG register description at address offset 0x1c6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l141_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l141_reg_t;

#define SBB_PARAM_L141_DEFAULT (0x00000000U)
#define SBB_PARAM_L141_RD_MASK (0xffffffffU)
#define SBB_PARAM_L141_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L141_VAL_BF_OFF ( 0)
#define SBB_PARAM_L141_VAL_BF_WID (32)
#define SBB_PARAM_L141_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L141_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H142_REG register description at address offset 0x1c70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h142_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h142_reg_t;

#define SBB_PARAM_H142_DEFAULT (0x00000000U)
#define SBB_PARAM_H142_RD_MASK (0xffffffffU)
#define SBB_PARAM_H142_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H142_VAL_BF_OFF ( 0)
#define SBB_PARAM_H142_VAL_BF_WID (32)
#define SBB_PARAM_H142_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H142_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L142_REG register description at address offset 0x1c74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l142_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l142_reg_t;

#define SBB_PARAM_L142_DEFAULT (0x00000000U)
#define SBB_PARAM_L142_RD_MASK (0xffffffffU)
#define SBB_PARAM_L142_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L142_VAL_BF_OFF ( 0)
#define SBB_PARAM_L142_VAL_BF_WID (32)
#define SBB_PARAM_L142_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L142_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H143_REG register description at address offset 0x1c78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h143_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h143_reg_t;

#define SBB_PARAM_H143_DEFAULT (0x00000000U)
#define SBB_PARAM_H143_RD_MASK (0xffffffffU)
#define SBB_PARAM_H143_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H143_VAL_BF_OFF ( 0)
#define SBB_PARAM_H143_VAL_BF_WID (32)
#define SBB_PARAM_H143_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H143_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L143_REG register description at address offset 0x1c7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l143_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l143_reg_t;

#define SBB_PARAM_L143_DEFAULT (0x00000000U)
#define SBB_PARAM_L143_RD_MASK (0xffffffffU)
#define SBB_PARAM_L143_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L143_VAL_BF_OFF ( 0)
#define SBB_PARAM_L143_VAL_BF_WID (32)
#define SBB_PARAM_L143_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L143_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H144_REG register description at address offset 0x1c80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h144_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h144_reg_t;

#define SBB_PARAM_H144_DEFAULT (0x00000000U)
#define SBB_PARAM_H144_RD_MASK (0xffffffffU)
#define SBB_PARAM_H144_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H144_VAL_BF_OFF ( 0)
#define SBB_PARAM_H144_VAL_BF_WID (32)
#define SBB_PARAM_H144_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H144_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L144_REG register description at address offset 0x1c84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l144_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l144_reg_t;

#define SBB_PARAM_L144_DEFAULT (0x00000000U)
#define SBB_PARAM_L144_RD_MASK (0xffffffffU)
#define SBB_PARAM_L144_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L144_VAL_BF_OFF ( 0)
#define SBB_PARAM_L144_VAL_BF_WID (32)
#define SBB_PARAM_L144_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L144_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H145_REG register description at address offset 0x1c88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h145_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h145_reg_t;

#define SBB_PARAM_H145_DEFAULT (0x00000000U)
#define SBB_PARAM_H145_RD_MASK (0xffffffffU)
#define SBB_PARAM_H145_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H145_VAL_BF_OFF ( 0)
#define SBB_PARAM_H145_VAL_BF_WID (32)
#define SBB_PARAM_H145_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H145_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L145_REG register description at address offset 0x1c8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l145_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l145_reg_t;

#define SBB_PARAM_L145_DEFAULT (0x00000000U)
#define SBB_PARAM_L145_RD_MASK (0xffffffffU)
#define SBB_PARAM_L145_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L145_VAL_BF_OFF ( 0)
#define SBB_PARAM_L145_VAL_BF_WID (32)
#define SBB_PARAM_L145_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L145_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H146_REG register description at address offset 0x1c90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h146_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h146_reg_t;

#define SBB_PARAM_H146_DEFAULT (0x00000000U)
#define SBB_PARAM_H146_RD_MASK (0xffffffffU)
#define SBB_PARAM_H146_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H146_VAL_BF_OFF ( 0)
#define SBB_PARAM_H146_VAL_BF_WID (32)
#define SBB_PARAM_H146_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H146_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L146_REG register description at address offset 0x1c94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l146_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l146_reg_t;

#define SBB_PARAM_L146_DEFAULT (0x00000000U)
#define SBB_PARAM_L146_RD_MASK (0xffffffffU)
#define SBB_PARAM_L146_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L146_VAL_BF_OFF ( 0)
#define SBB_PARAM_L146_VAL_BF_WID (32)
#define SBB_PARAM_L146_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L146_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H147_REG register description at address offset 0x1c98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h147_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h147_reg_t;

#define SBB_PARAM_H147_DEFAULT (0x00000000U)
#define SBB_PARAM_H147_RD_MASK (0xffffffffU)
#define SBB_PARAM_H147_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H147_VAL_BF_OFF ( 0)
#define SBB_PARAM_H147_VAL_BF_WID (32)
#define SBB_PARAM_H147_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H147_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L147_REG register description at address offset 0x1c9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l147_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l147_reg_t;

#define SBB_PARAM_L147_DEFAULT (0x00000000U)
#define SBB_PARAM_L147_RD_MASK (0xffffffffU)
#define SBB_PARAM_L147_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L147_VAL_BF_OFF ( 0)
#define SBB_PARAM_L147_VAL_BF_WID (32)
#define SBB_PARAM_L147_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L147_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H148_REG register description at address offset 0x1ca0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h148_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h148_reg_t;

#define SBB_PARAM_H148_DEFAULT (0x00000000U)
#define SBB_PARAM_H148_RD_MASK (0xffffffffU)
#define SBB_PARAM_H148_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H148_VAL_BF_OFF ( 0)
#define SBB_PARAM_H148_VAL_BF_WID (32)
#define SBB_PARAM_H148_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H148_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L148_REG register description at address offset 0x1ca4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l148_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l148_reg_t;

#define SBB_PARAM_L148_DEFAULT (0x00000000U)
#define SBB_PARAM_L148_RD_MASK (0xffffffffU)
#define SBB_PARAM_L148_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L148_VAL_BF_OFF ( 0)
#define SBB_PARAM_L148_VAL_BF_WID (32)
#define SBB_PARAM_L148_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L148_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H149_REG register description at address offset 0x1ca8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h149_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h149_reg_t;

#define SBB_PARAM_H149_DEFAULT (0x00000000U)
#define SBB_PARAM_H149_RD_MASK (0xffffffffU)
#define SBB_PARAM_H149_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H149_VAL_BF_OFF ( 0)
#define SBB_PARAM_H149_VAL_BF_WID (32)
#define SBB_PARAM_H149_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H149_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L149_REG register description at address offset 0x1cac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l149_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l149_reg_t;

#define SBB_PARAM_L149_DEFAULT (0x00000000U)
#define SBB_PARAM_L149_RD_MASK (0xffffffffU)
#define SBB_PARAM_L149_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L149_VAL_BF_OFF ( 0)
#define SBB_PARAM_L149_VAL_BF_WID (32)
#define SBB_PARAM_L149_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L149_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H150_REG register description at address offset 0x1cb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h150_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h150_reg_t;

#define SBB_PARAM_H150_DEFAULT (0x00000000U)
#define SBB_PARAM_H150_RD_MASK (0xffffffffU)
#define SBB_PARAM_H150_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H150_VAL_BF_OFF ( 0)
#define SBB_PARAM_H150_VAL_BF_WID (32)
#define SBB_PARAM_H150_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H150_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L150_REG register description at address offset 0x1cb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l150_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l150_reg_t;

#define SBB_PARAM_L150_DEFAULT (0x00000000U)
#define SBB_PARAM_L150_RD_MASK (0xffffffffU)
#define SBB_PARAM_L150_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L150_VAL_BF_OFF ( 0)
#define SBB_PARAM_L150_VAL_BF_WID (32)
#define SBB_PARAM_L150_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L150_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H151_REG register description at address offset 0x1cb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h151_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h151_reg_t;

#define SBB_PARAM_H151_DEFAULT (0x00000000U)
#define SBB_PARAM_H151_RD_MASK (0xffffffffU)
#define SBB_PARAM_H151_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H151_VAL_BF_OFF ( 0)
#define SBB_PARAM_H151_VAL_BF_WID (32)
#define SBB_PARAM_H151_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H151_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L151_REG register description at address offset 0x1cbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l151_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l151_reg_t;

#define SBB_PARAM_L151_DEFAULT (0x00000000U)
#define SBB_PARAM_L151_RD_MASK (0xffffffffU)
#define SBB_PARAM_L151_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L151_VAL_BF_OFF ( 0)
#define SBB_PARAM_L151_VAL_BF_WID (32)
#define SBB_PARAM_L151_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L151_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H152_REG register description at address offset 0x1cc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h152_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h152_reg_t;

#define SBB_PARAM_H152_DEFAULT (0x00000000U)
#define SBB_PARAM_H152_RD_MASK (0xffffffffU)
#define SBB_PARAM_H152_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H152_VAL_BF_OFF ( 0)
#define SBB_PARAM_H152_VAL_BF_WID (32)
#define SBB_PARAM_H152_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H152_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L152_REG register description at address offset 0x1cc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l152_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l152_reg_t;

#define SBB_PARAM_L152_DEFAULT (0x00000000U)
#define SBB_PARAM_L152_RD_MASK (0xffffffffU)
#define SBB_PARAM_L152_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L152_VAL_BF_OFF ( 0)
#define SBB_PARAM_L152_VAL_BF_WID (32)
#define SBB_PARAM_L152_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L152_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H153_REG register description at address offset 0x1cc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h153_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h153_reg_t;

#define SBB_PARAM_H153_DEFAULT (0x00000000U)
#define SBB_PARAM_H153_RD_MASK (0xffffffffU)
#define SBB_PARAM_H153_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H153_VAL_BF_OFF ( 0)
#define SBB_PARAM_H153_VAL_BF_WID (32)
#define SBB_PARAM_H153_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H153_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L153_REG register description at address offset 0x1ccc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l153_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l153_reg_t;

#define SBB_PARAM_L153_DEFAULT (0x00000000U)
#define SBB_PARAM_L153_RD_MASK (0xffffffffU)
#define SBB_PARAM_L153_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L153_VAL_BF_OFF ( 0)
#define SBB_PARAM_L153_VAL_BF_WID (32)
#define SBB_PARAM_L153_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L153_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H154_REG register description at address offset 0x1cd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h154_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h154_reg_t;

#define SBB_PARAM_H154_DEFAULT (0x00000000U)
#define SBB_PARAM_H154_RD_MASK (0xffffffffU)
#define SBB_PARAM_H154_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H154_VAL_BF_OFF ( 0)
#define SBB_PARAM_H154_VAL_BF_WID (32)
#define SBB_PARAM_H154_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H154_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L154_REG register description at address offset 0x1cd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l154_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l154_reg_t;

#define SBB_PARAM_L154_DEFAULT (0x00000000U)
#define SBB_PARAM_L154_RD_MASK (0xffffffffU)
#define SBB_PARAM_L154_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L154_VAL_BF_OFF ( 0)
#define SBB_PARAM_L154_VAL_BF_WID (32)
#define SBB_PARAM_L154_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L154_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H155_REG register description at address offset 0x1cd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h155_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h155_reg_t;

#define SBB_PARAM_H155_DEFAULT (0x00000000U)
#define SBB_PARAM_H155_RD_MASK (0xffffffffU)
#define SBB_PARAM_H155_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H155_VAL_BF_OFF ( 0)
#define SBB_PARAM_H155_VAL_BF_WID (32)
#define SBB_PARAM_H155_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H155_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L155_REG register description at address offset 0x1cdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l155_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l155_reg_t;

#define SBB_PARAM_L155_DEFAULT (0x00000000U)
#define SBB_PARAM_L155_RD_MASK (0xffffffffU)
#define SBB_PARAM_L155_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L155_VAL_BF_OFF ( 0)
#define SBB_PARAM_L155_VAL_BF_WID (32)
#define SBB_PARAM_L155_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L155_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H156_REG register description at address offset 0x1ce0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h156_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h156_reg_t;

#define SBB_PARAM_H156_DEFAULT (0x00000000U)
#define SBB_PARAM_H156_RD_MASK (0xffffffffU)
#define SBB_PARAM_H156_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H156_VAL_BF_OFF ( 0)
#define SBB_PARAM_H156_VAL_BF_WID (32)
#define SBB_PARAM_H156_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H156_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L156_REG register description at address offset 0x1ce4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l156_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l156_reg_t;

#define SBB_PARAM_L156_DEFAULT (0x00000000U)
#define SBB_PARAM_L156_RD_MASK (0xffffffffU)
#define SBB_PARAM_L156_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L156_VAL_BF_OFF ( 0)
#define SBB_PARAM_L156_VAL_BF_WID (32)
#define SBB_PARAM_L156_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L156_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H157_REG register description at address offset 0x1ce8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h157_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h157_reg_t;

#define SBB_PARAM_H157_DEFAULT (0x00000000U)
#define SBB_PARAM_H157_RD_MASK (0xffffffffU)
#define SBB_PARAM_H157_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H157_VAL_BF_OFF ( 0)
#define SBB_PARAM_H157_VAL_BF_WID (32)
#define SBB_PARAM_H157_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H157_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L157_REG register description at address offset 0x1cec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l157_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l157_reg_t;

#define SBB_PARAM_L157_DEFAULT (0x00000000U)
#define SBB_PARAM_L157_RD_MASK (0xffffffffU)
#define SBB_PARAM_L157_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L157_VAL_BF_OFF ( 0)
#define SBB_PARAM_L157_VAL_BF_WID (32)
#define SBB_PARAM_L157_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L157_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H158_REG register description at address offset 0x1cf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h158_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h158_reg_t;

#define SBB_PARAM_H158_DEFAULT (0x00000000U)
#define SBB_PARAM_H158_RD_MASK (0xffffffffU)
#define SBB_PARAM_H158_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H158_VAL_BF_OFF ( 0)
#define SBB_PARAM_H158_VAL_BF_WID (32)
#define SBB_PARAM_H158_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H158_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L158_REG register description at address offset 0x1cf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l158_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l158_reg_t;

#define SBB_PARAM_L158_DEFAULT (0x00000000U)
#define SBB_PARAM_L158_RD_MASK (0xffffffffU)
#define SBB_PARAM_L158_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L158_VAL_BF_OFF ( 0)
#define SBB_PARAM_L158_VAL_BF_WID (32)
#define SBB_PARAM_L158_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L158_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H159_REG register description at address offset 0x1cf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h159_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h159_reg_t;

#define SBB_PARAM_H159_DEFAULT (0x00000000U)
#define SBB_PARAM_H159_RD_MASK (0xffffffffU)
#define SBB_PARAM_H159_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H159_VAL_BF_OFF ( 0)
#define SBB_PARAM_H159_VAL_BF_WID (32)
#define SBB_PARAM_H159_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H159_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L159_REG register description at address offset 0x1cfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l159_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l159_reg_t;

#define SBB_PARAM_L159_DEFAULT (0x00000000U)
#define SBB_PARAM_L159_RD_MASK (0xffffffffU)
#define SBB_PARAM_L159_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L159_VAL_BF_OFF ( 0)
#define SBB_PARAM_L159_VAL_BF_WID (32)
#define SBB_PARAM_L159_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L159_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H160_REG register description at address offset 0x1d00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h160_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h160_reg_t;

#define SBB_PARAM_H160_DEFAULT (0x00000000U)
#define SBB_PARAM_H160_RD_MASK (0xffffffffU)
#define SBB_PARAM_H160_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H160_VAL_BF_OFF ( 0)
#define SBB_PARAM_H160_VAL_BF_WID (32)
#define SBB_PARAM_H160_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H160_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L160_REG register description at address offset 0x1d04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l160_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l160_reg_t;

#define SBB_PARAM_L160_DEFAULT (0x00000000U)
#define SBB_PARAM_L160_RD_MASK (0xffffffffU)
#define SBB_PARAM_L160_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L160_VAL_BF_OFF ( 0)
#define SBB_PARAM_L160_VAL_BF_WID (32)
#define SBB_PARAM_L160_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L160_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H161_REG register description at address offset 0x1d08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h161_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h161_reg_t;

#define SBB_PARAM_H161_DEFAULT (0x00000000U)
#define SBB_PARAM_H161_RD_MASK (0xffffffffU)
#define SBB_PARAM_H161_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H161_VAL_BF_OFF ( 0)
#define SBB_PARAM_H161_VAL_BF_WID (32)
#define SBB_PARAM_H161_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H161_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L161_REG register description at address offset 0x1d0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l161_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l161_reg_t;

#define SBB_PARAM_L161_DEFAULT (0x00000000U)
#define SBB_PARAM_L161_RD_MASK (0xffffffffU)
#define SBB_PARAM_L161_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L161_VAL_BF_OFF ( 0)
#define SBB_PARAM_L161_VAL_BF_WID (32)
#define SBB_PARAM_L161_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L161_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H162_REG register description at address offset 0x1d10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h162_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h162_reg_t;

#define SBB_PARAM_H162_DEFAULT (0x00000000U)
#define SBB_PARAM_H162_RD_MASK (0xffffffffU)
#define SBB_PARAM_H162_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H162_VAL_BF_OFF ( 0)
#define SBB_PARAM_H162_VAL_BF_WID (32)
#define SBB_PARAM_H162_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H162_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L162_REG register description at address offset 0x1d14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l162_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l162_reg_t;

#define SBB_PARAM_L162_DEFAULT (0x00000000U)
#define SBB_PARAM_L162_RD_MASK (0xffffffffU)
#define SBB_PARAM_L162_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L162_VAL_BF_OFF ( 0)
#define SBB_PARAM_L162_VAL_BF_WID (32)
#define SBB_PARAM_L162_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L162_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H163_REG register description at address offset 0x1d18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h163_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h163_reg_t;

#define SBB_PARAM_H163_DEFAULT (0x00000000U)
#define SBB_PARAM_H163_RD_MASK (0xffffffffU)
#define SBB_PARAM_H163_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H163_VAL_BF_OFF ( 0)
#define SBB_PARAM_H163_VAL_BF_WID (32)
#define SBB_PARAM_H163_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H163_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L163_REG register description at address offset 0x1d1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l163_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l163_reg_t;

#define SBB_PARAM_L163_DEFAULT (0x00000000U)
#define SBB_PARAM_L163_RD_MASK (0xffffffffU)
#define SBB_PARAM_L163_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L163_VAL_BF_OFF ( 0)
#define SBB_PARAM_L163_VAL_BF_WID (32)
#define SBB_PARAM_L163_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L163_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H164_REG register description at address offset 0x1d20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h164_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h164_reg_t;

#define SBB_PARAM_H164_DEFAULT (0x00000000U)
#define SBB_PARAM_H164_RD_MASK (0xffffffffU)
#define SBB_PARAM_H164_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H164_VAL_BF_OFF ( 0)
#define SBB_PARAM_H164_VAL_BF_WID (32)
#define SBB_PARAM_H164_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H164_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L164_REG register description at address offset 0x1d24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l164_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l164_reg_t;

#define SBB_PARAM_L164_DEFAULT (0x00000000U)
#define SBB_PARAM_L164_RD_MASK (0xffffffffU)
#define SBB_PARAM_L164_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L164_VAL_BF_OFF ( 0)
#define SBB_PARAM_L164_VAL_BF_WID (32)
#define SBB_PARAM_L164_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L164_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H165_REG register description at address offset 0x1d28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h165_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h165_reg_t;

#define SBB_PARAM_H165_DEFAULT (0x00000000U)
#define SBB_PARAM_H165_RD_MASK (0xffffffffU)
#define SBB_PARAM_H165_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H165_VAL_BF_OFF ( 0)
#define SBB_PARAM_H165_VAL_BF_WID (32)
#define SBB_PARAM_H165_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H165_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L165_REG register description at address offset 0x1d2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l165_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l165_reg_t;

#define SBB_PARAM_L165_DEFAULT (0x00000000U)
#define SBB_PARAM_L165_RD_MASK (0xffffffffU)
#define SBB_PARAM_L165_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L165_VAL_BF_OFF ( 0)
#define SBB_PARAM_L165_VAL_BF_WID (32)
#define SBB_PARAM_L165_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L165_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H166_REG register description at address offset 0x1d30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h166_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h166_reg_t;

#define SBB_PARAM_H166_DEFAULT (0x00000000U)
#define SBB_PARAM_H166_RD_MASK (0xffffffffU)
#define SBB_PARAM_H166_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H166_VAL_BF_OFF ( 0)
#define SBB_PARAM_H166_VAL_BF_WID (32)
#define SBB_PARAM_H166_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H166_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L166_REG register description at address offset 0x1d34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l166_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l166_reg_t;

#define SBB_PARAM_L166_DEFAULT (0x00000000U)
#define SBB_PARAM_L166_RD_MASK (0xffffffffU)
#define SBB_PARAM_L166_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L166_VAL_BF_OFF ( 0)
#define SBB_PARAM_L166_VAL_BF_WID (32)
#define SBB_PARAM_L166_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L166_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H167_REG register description at address offset 0x1d38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h167_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h167_reg_t;

#define SBB_PARAM_H167_DEFAULT (0x00000000U)
#define SBB_PARAM_H167_RD_MASK (0xffffffffU)
#define SBB_PARAM_H167_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H167_VAL_BF_OFF ( 0)
#define SBB_PARAM_H167_VAL_BF_WID (32)
#define SBB_PARAM_H167_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H167_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L167_REG register description at address offset 0x1d3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l167_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l167_reg_t;

#define SBB_PARAM_L167_DEFAULT (0x00000000U)
#define SBB_PARAM_L167_RD_MASK (0xffffffffU)
#define SBB_PARAM_L167_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L167_VAL_BF_OFF ( 0)
#define SBB_PARAM_L167_VAL_BF_WID (32)
#define SBB_PARAM_L167_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L167_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H168_REG register description at address offset 0x1d40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h168_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h168_reg_t;

#define SBB_PARAM_H168_DEFAULT (0x00000000U)
#define SBB_PARAM_H168_RD_MASK (0xffffffffU)
#define SBB_PARAM_H168_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H168_VAL_BF_OFF ( 0)
#define SBB_PARAM_H168_VAL_BF_WID (32)
#define SBB_PARAM_H168_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H168_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L168_REG register description at address offset 0x1d44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l168_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l168_reg_t;

#define SBB_PARAM_L168_DEFAULT (0x00000000U)
#define SBB_PARAM_L168_RD_MASK (0xffffffffU)
#define SBB_PARAM_L168_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L168_VAL_BF_OFF ( 0)
#define SBB_PARAM_L168_VAL_BF_WID (32)
#define SBB_PARAM_L168_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L168_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H169_REG register description at address offset 0x1d48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h169_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h169_reg_t;

#define SBB_PARAM_H169_DEFAULT (0x00000000U)
#define SBB_PARAM_H169_RD_MASK (0xffffffffU)
#define SBB_PARAM_H169_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H169_VAL_BF_OFF ( 0)
#define SBB_PARAM_H169_VAL_BF_WID (32)
#define SBB_PARAM_H169_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H169_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L169_REG register description at address offset 0x1d4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l169_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l169_reg_t;

#define SBB_PARAM_L169_DEFAULT (0x00000000U)
#define SBB_PARAM_L169_RD_MASK (0xffffffffU)
#define SBB_PARAM_L169_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L169_VAL_BF_OFF ( 0)
#define SBB_PARAM_L169_VAL_BF_WID (32)
#define SBB_PARAM_L169_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L169_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H170_REG register description at address offset 0x1d50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h170_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h170_reg_t;

#define SBB_PARAM_H170_DEFAULT (0x00000000U)
#define SBB_PARAM_H170_RD_MASK (0xffffffffU)
#define SBB_PARAM_H170_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H170_VAL_BF_OFF ( 0)
#define SBB_PARAM_H170_VAL_BF_WID (32)
#define SBB_PARAM_H170_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H170_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L170_REG register description at address offset 0x1d54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l170_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l170_reg_t;

#define SBB_PARAM_L170_DEFAULT (0x00000000U)
#define SBB_PARAM_L170_RD_MASK (0xffffffffU)
#define SBB_PARAM_L170_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L170_VAL_BF_OFF ( 0)
#define SBB_PARAM_L170_VAL_BF_WID (32)
#define SBB_PARAM_L170_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L170_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H171_REG register description at address offset 0x1d58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h171_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h171_reg_t;

#define SBB_PARAM_H171_DEFAULT (0x00000000U)
#define SBB_PARAM_H171_RD_MASK (0xffffffffU)
#define SBB_PARAM_H171_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H171_VAL_BF_OFF ( 0)
#define SBB_PARAM_H171_VAL_BF_WID (32)
#define SBB_PARAM_H171_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H171_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L171_REG register description at address offset 0x1d5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l171_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l171_reg_t;

#define SBB_PARAM_L171_DEFAULT (0x00000000U)
#define SBB_PARAM_L171_RD_MASK (0xffffffffU)
#define SBB_PARAM_L171_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L171_VAL_BF_OFF ( 0)
#define SBB_PARAM_L171_VAL_BF_WID (32)
#define SBB_PARAM_L171_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L171_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H172_REG register description at address offset 0x1d60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h172_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h172_reg_t;

#define SBB_PARAM_H172_DEFAULT (0x00000000U)
#define SBB_PARAM_H172_RD_MASK (0xffffffffU)
#define SBB_PARAM_H172_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H172_VAL_BF_OFF ( 0)
#define SBB_PARAM_H172_VAL_BF_WID (32)
#define SBB_PARAM_H172_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H172_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L172_REG register description at address offset 0x1d64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l172_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l172_reg_t;

#define SBB_PARAM_L172_DEFAULT (0x00000000U)
#define SBB_PARAM_L172_RD_MASK (0xffffffffU)
#define SBB_PARAM_L172_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L172_VAL_BF_OFF ( 0)
#define SBB_PARAM_L172_VAL_BF_WID (32)
#define SBB_PARAM_L172_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L172_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H173_REG register description at address offset 0x1d68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h173_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h173_reg_t;

#define SBB_PARAM_H173_DEFAULT (0x00000000U)
#define SBB_PARAM_H173_RD_MASK (0xffffffffU)
#define SBB_PARAM_H173_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H173_VAL_BF_OFF ( 0)
#define SBB_PARAM_H173_VAL_BF_WID (32)
#define SBB_PARAM_H173_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H173_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L173_REG register description at address offset 0x1d6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l173_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l173_reg_t;

#define SBB_PARAM_L173_DEFAULT (0x00000000U)
#define SBB_PARAM_L173_RD_MASK (0xffffffffU)
#define SBB_PARAM_L173_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L173_VAL_BF_OFF ( 0)
#define SBB_PARAM_L173_VAL_BF_WID (32)
#define SBB_PARAM_L173_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L173_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H174_REG register description at address offset 0x1d70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h174_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h174_reg_t;

#define SBB_PARAM_H174_DEFAULT (0x00000000U)
#define SBB_PARAM_H174_RD_MASK (0xffffffffU)
#define SBB_PARAM_H174_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H174_VAL_BF_OFF ( 0)
#define SBB_PARAM_H174_VAL_BF_WID (32)
#define SBB_PARAM_H174_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H174_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L174_REG register description at address offset 0x1d74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l174_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l174_reg_t;

#define SBB_PARAM_L174_DEFAULT (0x00000000U)
#define SBB_PARAM_L174_RD_MASK (0xffffffffU)
#define SBB_PARAM_L174_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L174_VAL_BF_OFF ( 0)
#define SBB_PARAM_L174_VAL_BF_WID (32)
#define SBB_PARAM_L174_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L174_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H175_REG register description at address offset 0x1d78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h175_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h175_reg_t;

#define SBB_PARAM_H175_DEFAULT (0x00000000U)
#define SBB_PARAM_H175_RD_MASK (0xffffffffU)
#define SBB_PARAM_H175_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H175_VAL_BF_OFF ( 0)
#define SBB_PARAM_H175_VAL_BF_WID (32)
#define SBB_PARAM_H175_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H175_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L175_REG register description at address offset 0x1d7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l175_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l175_reg_t;

#define SBB_PARAM_L175_DEFAULT (0x00000000U)
#define SBB_PARAM_L175_RD_MASK (0xffffffffU)
#define SBB_PARAM_L175_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L175_VAL_BF_OFF ( 0)
#define SBB_PARAM_L175_VAL_BF_WID (32)
#define SBB_PARAM_L175_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L175_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H176_REG register description at address offset 0x1d80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h176_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h176_reg_t;

#define SBB_PARAM_H176_DEFAULT (0x00000000U)
#define SBB_PARAM_H176_RD_MASK (0xffffffffU)
#define SBB_PARAM_H176_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H176_VAL_BF_OFF ( 0)
#define SBB_PARAM_H176_VAL_BF_WID (32)
#define SBB_PARAM_H176_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H176_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L176_REG register description at address offset 0x1d84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l176_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l176_reg_t;

#define SBB_PARAM_L176_DEFAULT (0x00000000U)
#define SBB_PARAM_L176_RD_MASK (0xffffffffU)
#define SBB_PARAM_L176_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L176_VAL_BF_OFF ( 0)
#define SBB_PARAM_L176_VAL_BF_WID (32)
#define SBB_PARAM_L176_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L176_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H177_REG register description at address offset 0x1d88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h177_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h177_reg_t;

#define SBB_PARAM_H177_DEFAULT (0x00000000U)
#define SBB_PARAM_H177_RD_MASK (0xffffffffU)
#define SBB_PARAM_H177_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H177_VAL_BF_OFF ( 0)
#define SBB_PARAM_H177_VAL_BF_WID (32)
#define SBB_PARAM_H177_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H177_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L177_REG register description at address offset 0x1d8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l177_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l177_reg_t;

#define SBB_PARAM_L177_DEFAULT (0x00000000U)
#define SBB_PARAM_L177_RD_MASK (0xffffffffU)
#define SBB_PARAM_L177_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L177_VAL_BF_OFF ( 0)
#define SBB_PARAM_L177_VAL_BF_WID (32)
#define SBB_PARAM_L177_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L177_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H178_REG register description at address offset 0x1d90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h178_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h178_reg_t;

#define SBB_PARAM_H178_DEFAULT (0x00000000U)
#define SBB_PARAM_H178_RD_MASK (0xffffffffU)
#define SBB_PARAM_H178_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H178_VAL_BF_OFF ( 0)
#define SBB_PARAM_H178_VAL_BF_WID (32)
#define SBB_PARAM_H178_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H178_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L178_REG register description at address offset 0x1d94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l178_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l178_reg_t;

#define SBB_PARAM_L178_DEFAULT (0x00000000U)
#define SBB_PARAM_L178_RD_MASK (0xffffffffU)
#define SBB_PARAM_L178_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L178_VAL_BF_OFF ( 0)
#define SBB_PARAM_L178_VAL_BF_WID (32)
#define SBB_PARAM_L178_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L178_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H179_REG register description at address offset 0x1d98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h179_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h179_reg_t;

#define SBB_PARAM_H179_DEFAULT (0x00000000U)
#define SBB_PARAM_H179_RD_MASK (0xffffffffU)
#define SBB_PARAM_H179_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H179_VAL_BF_OFF ( 0)
#define SBB_PARAM_H179_VAL_BF_WID (32)
#define SBB_PARAM_H179_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H179_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L179_REG register description at address offset 0x1d9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l179_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l179_reg_t;

#define SBB_PARAM_L179_DEFAULT (0x00000000U)
#define SBB_PARAM_L179_RD_MASK (0xffffffffU)
#define SBB_PARAM_L179_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L179_VAL_BF_OFF ( 0)
#define SBB_PARAM_L179_VAL_BF_WID (32)
#define SBB_PARAM_L179_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L179_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H180_REG register description at address offset 0x1da0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h180_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h180_reg_t;

#define SBB_PARAM_H180_DEFAULT (0x00000000U)
#define SBB_PARAM_H180_RD_MASK (0xffffffffU)
#define SBB_PARAM_H180_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H180_VAL_BF_OFF ( 0)
#define SBB_PARAM_H180_VAL_BF_WID (32)
#define SBB_PARAM_H180_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H180_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L180_REG register description at address offset 0x1da4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l180_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l180_reg_t;

#define SBB_PARAM_L180_DEFAULT (0x00000000U)
#define SBB_PARAM_L180_RD_MASK (0xffffffffU)
#define SBB_PARAM_L180_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L180_VAL_BF_OFF ( 0)
#define SBB_PARAM_L180_VAL_BF_WID (32)
#define SBB_PARAM_L180_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L180_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H181_REG register description at address offset 0x1da8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h181_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h181_reg_t;

#define SBB_PARAM_H181_DEFAULT (0x00000000U)
#define SBB_PARAM_H181_RD_MASK (0xffffffffU)
#define SBB_PARAM_H181_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H181_VAL_BF_OFF ( 0)
#define SBB_PARAM_H181_VAL_BF_WID (32)
#define SBB_PARAM_H181_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H181_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L181_REG register description at address offset 0x1dac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l181_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l181_reg_t;

#define SBB_PARAM_L181_DEFAULT (0x00000000U)
#define SBB_PARAM_L181_RD_MASK (0xffffffffU)
#define SBB_PARAM_L181_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L181_VAL_BF_OFF ( 0)
#define SBB_PARAM_L181_VAL_BF_WID (32)
#define SBB_PARAM_L181_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L181_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H182_REG register description at address offset 0x1db0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h182_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h182_reg_t;

#define SBB_PARAM_H182_DEFAULT (0x00000000U)
#define SBB_PARAM_H182_RD_MASK (0xffffffffU)
#define SBB_PARAM_H182_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H182_VAL_BF_OFF ( 0)
#define SBB_PARAM_H182_VAL_BF_WID (32)
#define SBB_PARAM_H182_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H182_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L182_REG register description at address offset 0x1db4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l182_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l182_reg_t;

#define SBB_PARAM_L182_DEFAULT (0x00000000U)
#define SBB_PARAM_L182_RD_MASK (0xffffffffU)
#define SBB_PARAM_L182_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L182_VAL_BF_OFF ( 0)
#define SBB_PARAM_L182_VAL_BF_WID (32)
#define SBB_PARAM_L182_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L182_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H183_REG register description at address offset 0x1db8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h183_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h183_reg_t;

#define SBB_PARAM_H183_DEFAULT (0x00000000U)
#define SBB_PARAM_H183_RD_MASK (0xffffffffU)
#define SBB_PARAM_H183_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H183_VAL_BF_OFF ( 0)
#define SBB_PARAM_H183_VAL_BF_WID (32)
#define SBB_PARAM_H183_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H183_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L183_REG register description at address offset 0x1dbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l183_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l183_reg_t;

#define SBB_PARAM_L183_DEFAULT (0x00000000U)
#define SBB_PARAM_L183_RD_MASK (0xffffffffU)
#define SBB_PARAM_L183_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L183_VAL_BF_OFF ( 0)
#define SBB_PARAM_L183_VAL_BF_WID (32)
#define SBB_PARAM_L183_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L183_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H184_REG register description at address offset 0x1dc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h184_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h184_reg_t;

#define SBB_PARAM_H184_DEFAULT (0x00000000U)
#define SBB_PARAM_H184_RD_MASK (0xffffffffU)
#define SBB_PARAM_H184_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H184_VAL_BF_OFF ( 0)
#define SBB_PARAM_H184_VAL_BF_WID (32)
#define SBB_PARAM_H184_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H184_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L184_REG register description at address offset 0x1dc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l184_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l184_reg_t;

#define SBB_PARAM_L184_DEFAULT (0x00000000U)
#define SBB_PARAM_L184_RD_MASK (0xffffffffU)
#define SBB_PARAM_L184_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L184_VAL_BF_OFF ( 0)
#define SBB_PARAM_L184_VAL_BF_WID (32)
#define SBB_PARAM_L184_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L184_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H185_REG register description at address offset 0x1dc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h185_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h185_reg_t;

#define SBB_PARAM_H185_DEFAULT (0x00000000U)
#define SBB_PARAM_H185_RD_MASK (0xffffffffU)
#define SBB_PARAM_H185_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H185_VAL_BF_OFF ( 0)
#define SBB_PARAM_H185_VAL_BF_WID (32)
#define SBB_PARAM_H185_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H185_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L185_REG register description at address offset 0x1dcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l185_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l185_reg_t;

#define SBB_PARAM_L185_DEFAULT (0x00000000U)
#define SBB_PARAM_L185_RD_MASK (0xffffffffU)
#define SBB_PARAM_L185_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L185_VAL_BF_OFF ( 0)
#define SBB_PARAM_L185_VAL_BF_WID (32)
#define SBB_PARAM_L185_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L185_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H186_REG register description at address offset 0x1dd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h186_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h186_reg_t;

#define SBB_PARAM_H186_DEFAULT (0x00000000U)
#define SBB_PARAM_H186_RD_MASK (0xffffffffU)
#define SBB_PARAM_H186_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H186_VAL_BF_OFF ( 0)
#define SBB_PARAM_H186_VAL_BF_WID (32)
#define SBB_PARAM_H186_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H186_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L186_REG register description at address offset 0x1dd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l186_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l186_reg_t;

#define SBB_PARAM_L186_DEFAULT (0x00000000U)
#define SBB_PARAM_L186_RD_MASK (0xffffffffU)
#define SBB_PARAM_L186_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L186_VAL_BF_OFF ( 0)
#define SBB_PARAM_L186_VAL_BF_WID (32)
#define SBB_PARAM_L186_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L186_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H187_REG register description at address offset 0x1dd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h187_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h187_reg_t;

#define SBB_PARAM_H187_DEFAULT (0x00000000U)
#define SBB_PARAM_H187_RD_MASK (0xffffffffU)
#define SBB_PARAM_H187_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H187_VAL_BF_OFF ( 0)
#define SBB_PARAM_H187_VAL_BF_WID (32)
#define SBB_PARAM_H187_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H187_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L187_REG register description at address offset 0x1ddc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l187_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l187_reg_t;

#define SBB_PARAM_L187_DEFAULT (0x00000000U)
#define SBB_PARAM_L187_RD_MASK (0xffffffffU)
#define SBB_PARAM_L187_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L187_VAL_BF_OFF ( 0)
#define SBB_PARAM_L187_VAL_BF_WID (32)
#define SBB_PARAM_L187_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L187_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H188_REG register description at address offset 0x1de0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h188_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h188_reg_t;

#define SBB_PARAM_H188_DEFAULT (0x00000000U)
#define SBB_PARAM_H188_RD_MASK (0xffffffffU)
#define SBB_PARAM_H188_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H188_VAL_BF_OFF ( 0)
#define SBB_PARAM_H188_VAL_BF_WID (32)
#define SBB_PARAM_H188_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H188_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L188_REG register description at address offset 0x1de4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l188_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l188_reg_t;

#define SBB_PARAM_L188_DEFAULT (0x00000000U)
#define SBB_PARAM_L188_RD_MASK (0xffffffffU)
#define SBB_PARAM_L188_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L188_VAL_BF_OFF ( 0)
#define SBB_PARAM_L188_VAL_BF_WID (32)
#define SBB_PARAM_L188_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L188_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H189_REG register description at address offset 0x1de8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h189_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h189_reg_t;

#define SBB_PARAM_H189_DEFAULT (0x00000000U)
#define SBB_PARAM_H189_RD_MASK (0xffffffffU)
#define SBB_PARAM_H189_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H189_VAL_BF_OFF ( 0)
#define SBB_PARAM_H189_VAL_BF_WID (32)
#define SBB_PARAM_H189_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H189_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L189_REG register description at address offset 0x1dec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l189_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l189_reg_t;

#define SBB_PARAM_L189_DEFAULT (0x00000000U)
#define SBB_PARAM_L189_RD_MASK (0xffffffffU)
#define SBB_PARAM_L189_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L189_VAL_BF_OFF ( 0)
#define SBB_PARAM_L189_VAL_BF_WID (32)
#define SBB_PARAM_L189_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L189_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H190_REG register description at address offset 0x1df0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h190_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h190_reg_t;

#define SBB_PARAM_H190_DEFAULT (0x00000000U)
#define SBB_PARAM_H190_RD_MASK (0xffffffffU)
#define SBB_PARAM_H190_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H190_VAL_BF_OFF ( 0)
#define SBB_PARAM_H190_VAL_BF_WID (32)
#define SBB_PARAM_H190_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H190_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L190_REG register description at address offset 0x1df4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l190_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l190_reg_t;

#define SBB_PARAM_L190_DEFAULT (0x00000000U)
#define SBB_PARAM_L190_RD_MASK (0xffffffffU)
#define SBB_PARAM_L190_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L190_VAL_BF_OFF ( 0)
#define SBB_PARAM_L190_VAL_BF_WID (32)
#define SBB_PARAM_L190_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L190_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H191_REG register description at address offset 0x1df8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h191_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h191_reg_t;

#define SBB_PARAM_H191_DEFAULT (0x00000000U)
#define SBB_PARAM_H191_RD_MASK (0xffffffffU)
#define SBB_PARAM_H191_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H191_VAL_BF_OFF ( 0)
#define SBB_PARAM_H191_VAL_BF_WID (32)
#define SBB_PARAM_H191_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H191_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L191_REG register description at address offset 0x1dfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l191_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l191_reg_t;

#define SBB_PARAM_L191_DEFAULT (0x00000000U)
#define SBB_PARAM_L191_RD_MASK (0xffffffffU)
#define SBB_PARAM_L191_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L191_VAL_BF_OFF ( 0)
#define SBB_PARAM_L191_VAL_BF_WID (32)
#define SBB_PARAM_L191_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L191_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H192_REG register description at address offset 0x1e00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h192_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h192_reg_t;

#define SBB_PARAM_H192_DEFAULT (0x00000000U)
#define SBB_PARAM_H192_RD_MASK (0xffffffffU)
#define SBB_PARAM_H192_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H192_VAL_BF_OFF ( 0)
#define SBB_PARAM_H192_VAL_BF_WID (32)
#define SBB_PARAM_H192_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H192_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L192_REG register description at address offset 0x1e04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l192_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l192_reg_t;

#define SBB_PARAM_L192_DEFAULT (0x00000000U)
#define SBB_PARAM_L192_RD_MASK (0xffffffffU)
#define SBB_PARAM_L192_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L192_VAL_BF_OFF ( 0)
#define SBB_PARAM_L192_VAL_BF_WID (32)
#define SBB_PARAM_L192_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L192_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H193_REG register description at address offset 0x1e08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h193_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h193_reg_t;

#define SBB_PARAM_H193_DEFAULT (0x00000000U)
#define SBB_PARAM_H193_RD_MASK (0xffffffffU)
#define SBB_PARAM_H193_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H193_VAL_BF_OFF ( 0)
#define SBB_PARAM_H193_VAL_BF_WID (32)
#define SBB_PARAM_H193_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H193_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L193_REG register description at address offset 0x1e0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l193_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l193_reg_t;

#define SBB_PARAM_L193_DEFAULT (0x00000000U)
#define SBB_PARAM_L193_RD_MASK (0xffffffffU)
#define SBB_PARAM_L193_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L193_VAL_BF_OFF ( 0)
#define SBB_PARAM_L193_VAL_BF_WID (32)
#define SBB_PARAM_L193_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L193_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H194_REG register description at address offset 0x1e10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h194_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h194_reg_t;

#define SBB_PARAM_H194_DEFAULT (0x00000000U)
#define SBB_PARAM_H194_RD_MASK (0xffffffffU)
#define SBB_PARAM_H194_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H194_VAL_BF_OFF ( 0)
#define SBB_PARAM_H194_VAL_BF_WID (32)
#define SBB_PARAM_H194_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H194_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L194_REG register description at address offset 0x1e14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l194_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l194_reg_t;

#define SBB_PARAM_L194_DEFAULT (0x00000000U)
#define SBB_PARAM_L194_RD_MASK (0xffffffffU)
#define SBB_PARAM_L194_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L194_VAL_BF_OFF ( 0)
#define SBB_PARAM_L194_VAL_BF_WID (32)
#define SBB_PARAM_L194_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L194_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H195_REG register description at address offset 0x1e18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h195_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h195_reg_t;

#define SBB_PARAM_H195_DEFAULT (0x00000000U)
#define SBB_PARAM_H195_RD_MASK (0xffffffffU)
#define SBB_PARAM_H195_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H195_VAL_BF_OFF ( 0)
#define SBB_PARAM_H195_VAL_BF_WID (32)
#define SBB_PARAM_H195_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H195_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L195_REG register description at address offset 0x1e1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l195_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l195_reg_t;

#define SBB_PARAM_L195_DEFAULT (0x00000000U)
#define SBB_PARAM_L195_RD_MASK (0xffffffffU)
#define SBB_PARAM_L195_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L195_VAL_BF_OFF ( 0)
#define SBB_PARAM_L195_VAL_BF_WID (32)
#define SBB_PARAM_L195_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L195_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H196_REG register description at address offset 0x1e20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h196_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h196_reg_t;

#define SBB_PARAM_H196_DEFAULT (0x00000000U)
#define SBB_PARAM_H196_RD_MASK (0xffffffffU)
#define SBB_PARAM_H196_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H196_VAL_BF_OFF ( 0)
#define SBB_PARAM_H196_VAL_BF_WID (32)
#define SBB_PARAM_H196_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H196_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L196_REG register description at address offset 0x1e24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l196_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l196_reg_t;

#define SBB_PARAM_L196_DEFAULT (0x00000000U)
#define SBB_PARAM_L196_RD_MASK (0xffffffffU)
#define SBB_PARAM_L196_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L196_VAL_BF_OFF ( 0)
#define SBB_PARAM_L196_VAL_BF_WID (32)
#define SBB_PARAM_L196_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L196_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H197_REG register description at address offset 0x1e28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h197_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h197_reg_t;

#define SBB_PARAM_H197_DEFAULT (0x00000000U)
#define SBB_PARAM_H197_RD_MASK (0xffffffffU)
#define SBB_PARAM_H197_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H197_VAL_BF_OFF ( 0)
#define SBB_PARAM_H197_VAL_BF_WID (32)
#define SBB_PARAM_H197_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H197_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L197_REG register description at address offset 0x1e2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l197_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l197_reg_t;

#define SBB_PARAM_L197_DEFAULT (0x00000000U)
#define SBB_PARAM_L197_RD_MASK (0xffffffffU)
#define SBB_PARAM_L197_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L197_VAL_BF_OFF ( 0)
#define SBB_PARAM_L197_VAL_BF_WID (32)
#define SBB_PARAM_L197_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L197_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H198_REG register description at address offset 0x1e30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h198_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h198_reg_t;

#define SBB_PARAM_H198_DEFAULT (0x00000000U)
#define SBB_PARAM_H198_RD_MASK (0xffffffffU)
#define SBB_PARAM_H198_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H198_VAL_BF_OFF ( 0)
#define SBB_PARAM_H198_VAL_BF_WID (32)
#define SBB_PARAM_H198_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H198_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L198_REG register description at address offset 0x1e34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l198_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l198_reg_t;

#define SBB_PARAM_L198_DEFAULT (0x00000000U)
#define SBB_PARAM_L198_RD_MASK (0xffffffffU)
#define SBB_PARAM_L198_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L198_VAL_BF_OFF ( 0)
#define SBB_PARAM_L198_VAL_BF_WID (32)
#define SBB_PARAM_L198_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L198_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H199_REG register description at address offset 0x1e38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h199_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h199_reg_t;

#define SBB_PARAM_H199_DEFAULT (0x00000000U)
#define SBB_PARAM_H199_RD_MASK (0xffffffffU)
#define SBB_PARAM_H199_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H199_VAL_BF_OFF ( 0)
#define SBB_PARAM_H199_VAL_BF_WID (32)
#define SBB_PARAM_H199_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H199_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L199_REG register description at address offset 0x1e3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l199_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l199_reg_t;

#define SBB_PARAM_L199_DEFAULT (0x00000000U)
#define SBB_PARAM_L199_RD_MASK (0xffffffffU)
#define SBB_PARAM_L199_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L199_VAL_BF_OFF ( 0)
#define SBB_PARAM_L199_VAL_BF_WID (32)
#define SBB_PARAM_L199_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L199_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H200_REG register description at address offset 0x1e40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h200_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h200_reg_t;

#define SBB_PARAM_H200_DEFAULT (0x00000000U)
#define SBB_PARAM_H200_RD_MASK (0xffffffffU)
#define SBB_PARAM_H200_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H200_VAL_BF_OFF ( 0)
#define SBB_PARAM_H200_VAL_BF_WID (32)
#define SBB_PARAM_H200_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H200_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L200_REG register description at address offset 0x1e44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l200_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l200_reg_t;

#define SBB_PARAM_L200_DEFAULT (0x00000000U)
#define SBB_PARAM_L200_RD_MASK (0xffffffffU)
#define SBB_PARAM_L200_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L200_VAL_BF_OFF ( 0)
#define SBB_PARAM_L200_VAL_BF_WID (32)
#define SBB_PARAM_L200_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L200_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H201_REG register description at address offset 0x1e48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h201_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h201_reg_t;

#define SBB_PARAM_H201_DEFAULT (0x00000000U)
#define SBB_PARAM_H201_RD_MASK (0xffffffffU)
#define SBB_PARAM_H201_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H201_VAL_BF_OFF ( 0)
#define SBB_PARAM_H201_VAL_BF_WID (32)
#define SBB_PARAM_H201_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H201_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L201_REG register description at address offset 0x1e4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l201_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l201_reg_t;

#define SBB_PARAM_L201_DEFAULT (0x00000000U)
#define SBB_PARAM_L201_RD_MASK (0xffffffffU)
#define SBB_PARAM_L201_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L201_VAL_BF_OFF ( 0)
#define SBB_PARAM_L201_VAL_BF_WID (32)
#define SBB_PARAM_L201_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L201_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H202_REG register description at address offset 0x1e50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h202_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h202_reg_t;

#define SBB_PARAM_H202_DEFAULT (0x00000000U)
#define SBB_PARAM_H202_RD_MASK (0xffffffffU)
#define SBB_PARAM_H202_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H202_VAL_BF_OFF ( 0)
#define SBB_PARAM_H202_VAL_BF_WID (32)
#define SBB_PARAM_H202_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H202_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L202_REG register description at address offset 0x1e54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l202_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l202_reg_t;

#define SBB_PARAM_L202_DEFAULT (0x00000000U)
#define SBB_PARAM_L202_RD_MASK (0xffffffffU)
#define SBB_PARAM_L202_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L202_VAL_BF_OFF ( 0)
#define SBB_PARAM_L202_VAL_BF_WID (32)
#define SBB_PARAM_L202_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L202_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H203_REG register description at address offset 0x1e58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h203_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h203_reg_t;

#define SBB_PARAM_H203_DEFAULT (0x00000000U)
#define SBB_PARAM_H203_RD_MASK (0xffffffffU)
#define SBB_PARAM_H203_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H203_VAL_BF_OFF ( 0)
#define SBB_PARAM_H203_VAL_BF_WID (32)
#define SBB_PARAM_H203_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H203_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L203_REG register description at address offset 0x1e5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l203_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l203_reg_t;

#define SBB_PARAM_L203_DEFAULT (0x00000000U)
#define SBB_PARAM_L203_RD_MASK (0xffffffffU)
#define SBB_PARAM_L203_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L203_VAL_BF_OFF ( 0)
#define SBB_PARAM_L203_VAL_BF_WID (32)
#define SBB_PARAM_L203_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L203_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H204_REG register description at address offset 0x1e60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h204_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h204_reg_t;

#define SBB_PARAM_H204_DEFAULT (0x00000000U)
#define SBB_PARAM_H204_RD_MASK (0xffffffffU)
#define SBB_PARAM_H204_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H204_VAL_BF_OFF ( 0)
#define SBB_PARAM_H204_VAL_BF_WID (32)
#define SBB_PARAM_H204_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H204_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L204_REG register description at address offset 0x1e64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l204_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l204_reg_t;

#define SBB_PARAM_L204_DEFAULT (0x00000000U)
#define SBB_PARAM_L204_RD_MASK (0xffffffffU)
#define SBB_PARAM_L204_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L204_VAL_BF_OFF ( 0)
#define SBB_PARAM_L204_VAL_BF_WID (32)
#define SBB_PARAM_L204_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L204_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H205_REG register description at address offset 0x1e68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h205_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h205_reg_t;

#define SBB_PARAM_H205_DEFAULT (0x00000000U)
#define SBB_PARAM_H205_RD_MASK (0xffffffffU)
#define SBB_PARAM_H205_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H205_VAL_BF_OFF ( 0)
#define SBB_PARAM_H205_VAL_BF_WID (32)
#define SBB_PARAM_H205_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H205_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L205_REG register description at address offset 0x1e6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l205_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l205_reg_t;

#define SBB_PARAM_L205_DEFAULT (0x00000000U)
#define SBB_PARAM_L205_RD_MASK (0xffffffffU)
#define SBB_PARAM_L205_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L205_VAL_BF_OFF ( 0)
#define SBB_PARAM_L205_VAL_BF_WID (32)
#define SBB_PARAM_L205_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L205_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H206_REG register description at address offset 0x1e70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h206_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h206_reg_t;

#define SBB_PARAM_H206_DEFAULT (0x00000000U)
#define SBB_PARAM_H206_RD_MASK (0xffffffffU)
#define SBB_PARAM_H206_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H206_VAL_BF_OFF ( 0)
#define SBB_PARAM_H206_VAL_BF_WID (32)
#define SBB_PARAM_H206_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H206_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L206_REG register description at address offset 0x1e74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l206_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l206_reg_t;

#define SBB_PARAM_L206_DEFAULT (0x00000000U)
#define SBB_PARAM_L206_RD_MASK (0xffffffffU)
#define SBB_PARAM_L206_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L206_VAL_BF_OFF ( 0)
#define SBB_PARAM_L206_VAL_BF_WID (32)
#define SBB_PARAM_L206_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L206_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H207_REG register description at address offset 0x1e78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h207_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h207_reg_t;

#define SBB_PARAM_H207_DEFAULT (0x00000000U)
#define SBB_PARAM_H207_RD_MASK (0xffffffffU)
#define SBB_PARAM_H207_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H207_VAL_BF_OFF ( 0)
#define SBB_PARAM_H207_VAL_BF_WID (32)
#define SBB_PARAM_H207_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H207_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L207_REG register description at address offset 0x1e7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l207_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l207_reg_t;

#define SBB_PARAM_L207_DEFAULT (0x00000000U)
#define SBB_PARAM_L207_RD_MASK (0xffffffffU)
#define SBB_PARAM_L207_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L207_VAL_BF_OFF ( 0)
#define SBB_PARAM_L207_VAL_BF_WID (32)
#define SBB_PARAM_L207_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L207_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H208_REG register description at address offset 0x1e80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h208_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h208_reg_t;

#define SBB_PARAM_H208_DEFAULT (0x00000000U)
#define SBB_PARAM_H208_RD_MASK (0xffffffffU)
#define SBB_PARAM_H208_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H208_VAL_BF_OFF ( 0)
#define SBB_PARAM_H208_VAL_BF_WID (32)
#define SBB_PARAM_H208_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H208_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L208_REG register description at address offset 0x1e84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l208_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l208_reg_t;

#define SBB_PARAM_L208_DEFAULT (0x00000000U)
#define SBB_PARAM_L208_RD_MASK (0xffffffffU)
#define SBB_PARAM_L208_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L208_VAL_BF_OFF ( 0)
#define SBB_PARAM_L208_VAL_BF_WID (32)
#define SBB_PARAM_L208_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L208_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H209_REG register description at address offset 0x1e88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h209_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h209_reg_t;

#define SBB_PARAM_H209_DEFAULT (0x00000000U)
#define SBB_PARAM_H209_RD_MASK (0xffffffffU)
#define SBB_PARAM_H209_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H209_VAL_BF_OFF ( 0)
#define SBB_PARAM_H209_VAL_BF_WID (32)
#define SBB_PARAM_H209_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H209_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L209_REG register description at address offset 0x1e8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l209_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l209_reg_t;

#define SBB_PARAM_L209_DEFAULT (0x00000000U)
#define SBB_PARAM_L209_RD_MASK (0xffffffffU)
#define SBB_PARAM_L209_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L209_VAL_BF_OFF ( 0)
#define SBB_PARAM_L209_VAL_BF_WID (32)
#define SBB_PARAM_L209_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L209_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H210_REG register description at address offset 0x1e90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h210_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h210_reg_t;

#define SBB_PARAM_H210_DEFAULT (0x00000000U)
#define SBB_PARAM_H210_RD_MASK (0xffffffffU)
#define SBB_PARAM_H210_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H210_VAL_BF_OFF ( 0)
#define SBB_PARAM_H210_VAL_BF_WID (32)
#define SBB_PARAM_H210_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H210_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L210_REG register description at address offset 0x1e94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l210_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l210_reg_t;

#define SBB_PARAM_L210_DEFAULT (0x00000000U)
#define SBB_PARAM_L210_RD_MASK (0xffffffffU)
#define SBB_PARAM_L210_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L210_VAL_BF_OFF ( 0)
#define SBB_PARAM_L210_VAL_BF_WID (32)
#define SBB_PARAM_L210_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L210_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H211_REG register description at address offset 0x1e98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h211_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h211_reg_t;

#define SBB_PARAM_H211_DEFAULT (0x00000000U)
#define SBB_PARAM_H211_RD_MASK (0xffffffffU)
#define SBB_PARAM_H211_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H211_VAL_BF_OFF ( 0)
#define SBB_PARAM_H211_VAL_BF_WID (32)
#define SBB_PARAM_H211_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H211_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L211_REG register description at address offset 0x1e9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l211_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l211_reg_t;

#define SBB_PARAM_L211_DEFAULT (0x00000000U)
#define SBB_PARAM_L211_RD_MASK (0xffffffffU)
#define SBB_PARAM_L211_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L211_VAL_BF_OFF ( 0)
#define SBB_PARAM_L211_VAL_BF_WID (32)
#define SBB_PARAM_L211_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L211_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H212_REG register description at address offset 0x1ea0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h212_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h212_reg_t;

#define SBB_PARAM_H212_DEFAULT (0x00000000U)
#define SBB_PARAM_H212_RD_MASK (0xffffffffU)
#define SBB_PARAM_H212_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H212_VAL_BF_OFF ( 0)
#define SBB_PARAM_H212_VAL_BF_WID (32)
#define SBB_PARAM_H212_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H212_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L212_REG register description at address offset 0x1ea4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l212_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l212_reg_t;

#define SBB_PARAM_L212_DEFAULT (0x00000000U)
#define SBB_PARAM_L212_RD_MASK (0xffffffffU)
#define SBB_PARAM_L212_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L212_VAL_BF_OFF ( 0)
#define SBB_PARAM_L212_VAL_BF_WID (32)
#define SBB_PARAM_L212_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L212_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H213_REG register description at address offset 0x1ea8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h213_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h213_reg_t;

#define SBB_PARAM_H213_DEFAULT (0x00000000U)
#define SBB_PARAM_H213_RD_MASK (0xffffffffU)
#define SBB_PARAM_H213_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H213_VAL_BF_OFF ( 0)
#define SBB_PARAM_H213_VAL_BF_WID (32)
#define SBB_PARAM_H213_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H213_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L213_REG register description at address offset 0x1eac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l213_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l213_reg_t;

#define SBB_PARAM_L213_DEFAULT (0x00000000U)
#define SBB_PARAM_L213_RD_MASK (0xffffffffU)
#define SBB_PARAM_L213_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L213_VAL_BF_OFF ( 0)
#define SBB_PARAM_L213_VAL_BF_WID (32)
#define SBB_PARAM_L213_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L213_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H214_REG register description at address offset 0x1eb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h214_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h214_reg_t;

#define SBB_PARAM_H214_DEFAULT (0x00000000U)
#define SBB_PARAM_H214_RD_MASK (0xffffffffU)
#define SBB_PARAM_H214_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H214_VAL_BF_OFF ( 0)
#define SBB_PARAM_H214_VAL_BF_WID (32)
#define SBB_PARAM_H214_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H214_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L214_REG register description at address offset 0x1eb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l214_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l214_reg_t;

#define SBB_PARAM_L214_DEFAULT (0x00000000U)
#define SBB_PARAM_L214_RD_MASK (0xffffffffU)
#define SBB_PARAM_L214_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L214_VAL_BF_OFF ( 0)
#define SBB_PARAM_L214_VAL_BF_WID (32)
#define SBB_PARAM_L214_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L214_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H215_REG register description at address offset 0x1eb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h215_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h215_reg_t;

#define SBB_PARAM_H215_DEFAULT (0x00000000U)
#define SBB_PARAM_H215_RD_MASK (0xffffffffU)
#define SBB_PARAM_H215_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H215_VAL_BF_OFF ( 0)
#define SBB_PARAM_H215_VAL_BF_WID (32)
#define SBB_PARAM_H215_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H215_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L215_REG register description at address offset 0x1ebc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l215_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l215_reg_t;

#define SBB_PARAM_L215_DEFAULT (0x00000000U)
#define SBB_PARAM_L215_RD_MASK (0xffffffffU)
#define SBB_PARAM_L215_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L215_VAL_BF_OFF ( 0)
#define SBB_PARAM_L215_VAL_BF_WID (32)
#define SBB_PARAM_L215_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L215_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H216_REG register description at address offset 0x1ec0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h216_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h216_reg_t;

#define SBB_PARAM_H216_DEFAULT (0x00000000U)
#define SBB_PARAM_H216_RD_MASK (0xffffffffU)
#define SBB_PARAM_H216_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H216_VAL_BF_OFF ( 0)
#define SBB_PARAM_H216_VAL_BF_WID (32)
#define SBB_PARAM_H216_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H216_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L216_REG register description at address offset 0x1ec4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l216_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l216_reg_t;

#define SBB_PARAM_L216_DEFAULT (0x00000000U)
#define SBB_PARAM_L216_RD_MASK (0xffffffffU)
#define SBB_PARAM_L216_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L216_VAL_BF_OFF ( 0)
#define SBB_PARAM_L216_VAL_BF_WID (32)
#define SBB_PARAM_L216_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L216_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H217_REG register description at address offset 0x1ec8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h217_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h217_reg_t;

#define SBB_PARAM_H217_DEFAULT (0x00000000U)
#define SBB_PARAM_H217_RD_MASK (0xffffffffU)
#define SBB_PARAM_H217_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H217_VAL_BF_OFF ( 0)
#define SBB_PARAM_H217_VAL_BF_WID (32)
#define SBB_PARAM_H217_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H217_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L217_REG register description at address offset 0x1ecc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l217_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l217_reg_t;

#define SBB_PARAM_L217_DEFAULT (0x00000000U)
#define SBB_PARAM_L217_RD_MASK (0xffffffffU)
#define SBB_PARAM_L217_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L217_VAL_BF_OFF ( 0)
#define SBB_PARAM_L217_VAL_BF_WID (32)
#define SBB_PARAM_L217_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L217_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H218_REG register description at address offset 0x1ed0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h218_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h218_reg_t;

#define SBB_PARAM_H218_DEFAULT (0x00000000U)
#define SBB_PARAM_H218_RD_MASK (0xffffffffU)
#define SBB_PARAM_H218_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H218_VAL_BF_OFF ( 0)
#define SBB_PARAM_H218_VAL_BF_WID (32)
#define SBB_PARAM_H218_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H218_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L218_REG register description at address offset 0x1ed4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l218_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l218_reg_t;

#define SBB_PARAM_L218_DEFAULT (0x00000000U)
#define SBB_PARAM_L218_RD_MASK (0xffffffffU)
#define SBB_PARAM_L218_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L218_VAL_BF_OFF ( 0)
#define SBB_PARAM_L218_VAL_BF_WID (32)
#define SBB_PARAM_L218_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L218_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H219_REG register description at address offset 0x1ed8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h219_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h219_reg_t;

#define SBB_PARAM_H219_DEFAULT (0x00000000U)
#define SBB_PARAM_H219_RD_MASK (0xffffffffU)
#define SBB_PARAM_H219_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H219_VAL_BF_OFF ( 0)
#define SBB_PARAM_H219_VAL_BF_WID (32)
#define SBB_PARAM_H219_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H219_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L219_REG register description at address offset 0x1edc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l219_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l219_reg_t;

#define SBB_PARAM_L219_DEFAULT (0x00000000U)
#define SBB_PARAM_L219_RD_MASK (0xffffffffU)
#define SBB_PARAM_L219_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L219_VAL_BF_OFF ( 0)
#define SBB_PARAM_L219_VAL_BF_WID (32)
#define SBB_PARAM_L219_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L219_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H220_REG register description at address offset 0x1ee0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h220_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h220_reg_t;

#define SBB_PARAM_H220_DEFAULT (0x00000000U)
#define SBB_PARAM_H220_RD_MASK (0xffffffffU)
#define SBB_PARAM_H220_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H220_VAL_BF_OFF ( 0)
#define SBB_PARAM_H220_VAL_BF_WID (32)
#define SBB_PARAM_H220_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H220_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L220_REG register description at address offset 0x1ee4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l220_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l220_reg_t;

#define SBB_PARAM_L220_DEFAULT (0x00000000U)
#define SBB_PARAM_L220_RD_MASK (0xffffffffU)
#define SBB_PARAM_L220_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L220_VAL_BF_OFF ( 0)
#define SBB_PARAM_L220_VAL_BF_WID (32)
#define SBB_PARAM_L220_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L220_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H221_REG register description at address offset 0x1ee8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h221_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h221_reg_t;

#define SBB_PARAM_H221_DEFAULT (0x00000000U)
#define SBB_PARAM_H221_RD_MASK (0xffffffffU)
#define SBB_PARAM_H221_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H221_VAL_BF_OFF ( 0)
#define SBB_PARAM_H221_VAL_BF_WID (32)
#define SBB_PARAM_H221_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H221_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L221_REG register description at address offset 0x1eec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l221_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l221_reg_t;

#define SBB_PARAM_L221_DEFAULT (0x00000000U)
#define SBB_PARAM_L221_RD_MASK (0xffffffffU)
#define SBB_PARAM_L221_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L221_VAL_BF_OFF ( 0)
#define SBB_PARAM_L221_VAL_BF_WID (32)
#define SBB_PARAM_L221_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L221_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H222_REG register description at address offset 0x1ef0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h222_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h222_reg_t;

#define SBB_PARAM_H222_DEFAULT (0x00000000U)
#define SBB_PARAM_H222_RD_MASK (0xffffffffU)
#define SBB_PARAM_H222_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H222_VAL_BF_OFF ( 0)
#define SBB_PARAM_H222_VAL_BF_WID (32)
#define SBB_PARAM_H222_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H222_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L222_REG register description at address offset 0x1ef4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l222_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l222_reg_t;

#define SBB_PARAM_L222_DEFAULT (0x00000000U)
#define SBB_PARAM_L222_RD_MASK (0xffffffffU)
#define SBB_PARAM_L222_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L222_VAL_BF_OFF ( 0)
#define SBB_PARAM_L222_VAL_BF_WID (32)
#define SBB_PARAM_L222_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L222_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H223_REG register description at address offset 0x1ef8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h223_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h223_reg_t;

#define SBB_PARAM_H223_DEFAULT (0x00000000U)
#define SBB_PARAM_H223_RD_MASK (0xffffffffU)
#define SBB_PARAM_H223_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H223_VAL_BF_OFF ( 0)
#define SBB_PARAM_H223_VAL_BF_WID (32)
#define SBB_PARAM_H223_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H223_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L223_REG register description at address offset 0x1efc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l223_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l223_reg_t;

#define SBB_PARAM_L223_DEFAULT (0x00000000U)
#define SBB_PARAM_L223_RD_MASK (0xffffffffU)
#define SBB_PARAM_L223_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L223_VAL_BF_OFF ( 0)
#define SBB_PARAM_L223_VAL_BF_WID (32)
#define SBB_PARAM_L223_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L223_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H224_REG register description at address offset 0x1f00
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h224_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h224_reg_t;

#define SBB_PARAM_H224_DEFAULT (0x00000000U)
#define SBB_PARAM_H224_RD_MASK (0xffffffffU)
#define SBB_PARAM_H224_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H224_VAL_BF_OFF ( 0)
#define SBB_PARAM_H224_VAL_BF_WID (32)
#define SBB_PARAM_H224_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H224_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L224_REG register description at address offset 0x1f04
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l224_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l224_reg_t;

#define SBB_PARAM_L224_DEFAULT (0x00000000U)
#define SBB_PARAM_L224_RD_MASK (0xffffffffU)
#define SBB_PARAM_L224_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L224_VAL_BF_OFF ( 0)
#define SBB_PARAM_L224_VAL_BF_WID (32)
#define SBB_PARAM_L224_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L224_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H225_REG register description at address offset 0x1f08
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h225_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h225_reg_t;

#define SBB_PARAM_H225_DEFAULT (0x00000000U)
#define SBB_PARAM_H225_RD_MASK (0xffffffffU)
#define SBB_PARAM_H225_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H225_VAL_BF_OFF ( 0)
#define SBB_PARAM_H225_VAL_BF_WID (32)
#define SBB_PARAM_H225_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H225_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L225_REG register description at address offset 0x1f0c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l225_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l225_reg_t;

#define SBB_PARAM_L225_DEFAULT (0x00000000U)
#define SBB_PARAM_L225_RD_MASK (0xffffffffU)
#define SBB_PARAM_L225_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L225_VAL_BF_OFF ( 0)
#define SBB_PARAM_L225_VAL_BF_WID (32)
#define SBB_PARAM_L225_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L225_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H226_REG register description at address offset 0x1f10
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h226_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h226_reg_t;

#define SBB_PARAM_H226_DEFAULT (0x00000000U)
#define SBB_PARAM_H226_RD_MASK (0xffffffffU)
#define SBB_PARAM_H226_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H226_VAL_BF_OFF ( 0)
#define SBB_PARAM_H226_VAL_BF_WID (32)
#define SBB_PARAM_H226_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H226_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L226_REG register description at address offset 0x1f14
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l226_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l226_reg_t;

#define SBB_PARAM_L226_DEFAULT (0x00000000U)
#define SBB_PARAM_L226_RD_MASK (0xffffffffU)
#define SBB_PARAM_L226_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L226_VAL_BF_OFF ( 0)
#define SBB_PARAM_L226_VAL_BF_WID (32)
#define SBB_PARAM_L226_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L226_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H227_REG register description at address offset 0x1f18
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h227_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h227_reg_t;

#define SBB_PARAM_H227_DEFAULT (0x00000000U)
#define SBB_PARAM_H227_RD_MASK (0xffffffffU)
#define SBB_PARAM_H227_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H227_VAL_BF_OFF ( 0)
#define SBB_PARAM_H227_VAL_BF_WID (32)
#define SBB_PARAM_H227_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H227_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L227_REG register description at address offset 0x1f1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l227_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l227_reg_t;

#define SBB_PARAM_L227_DEFAULT (0x00000000U)
#define SBB_PARAM_L227_RD_MASK (0xffffffffU)
#define SBB_PARAM_L227_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L227_VAL_BF_OFF ( 0)
#define SBB_PARAM_L227_VAL_BF_WID (32)
#define SBB_PARAM_L227_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L227_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H228_REG register description at address offset 0x1f20
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h228_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h228_reg_t;

#define SBB_PARAM_H228_DEFAULT (0x00000000U)
#define SBB_PARAM_H228_RD_MASK (0xffffffffU)
#define SBB_PARAM_H228_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H228_VAL_BF_OFF ( 0)
#define SBB_PARAM_H228_VAL_BF_WID (32)
#define SBB_PARAM_H228_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H228_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L228_REG register description at address offset 0x1f24
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l228_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l228_reg_t;

#define SBB_PARAM_L228_DEFAULT (0x00000000U)
#define SBB_PARAM_L228_RD_MASK (0xffffffffU)
#define SBB_PARAM_L228_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L228_VAL_BF_OFF ( 0)
#define SBB_PARAM_L228_VAL_BF_WID (32)
#define SBB_PARAM_L228_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L228_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H229_REG register description at address offset 0x1f28
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h229_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h229_reg_t;

#define SBB_PARAM_H229_DEFAULT (0x00000000U)
#define SBB_PARAM_H229_RD_MASK (0xffffffffU)
#define SBB_PARAM_H229_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H229_VAL_BF_OFF ( 0)
#define SBB_PARAM_H229_VAL_BF_WID (32)
#define SBB_PARAM_H229_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H229_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L229_REG register description at address offset 0x1f2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l229_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l229_reg_t;

#define SBB_PARAM_L229_DEFAULT (0x00000000U)
#define SBB_PARAM_L229_RD_MASK (0xffffffffU)
#define SBB_PARAM_L229_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L229_VAL_BF_OFF ( 0)
#define SBB_PARAM_L229_VAL_BF_WID (32)
#define SBB_PARAM_L229_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L229_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H230_REG register description at address offset 0x1f30
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h230_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h230_reg_t;

#define SBB_PARAM_H230_DEFAULT (0x00000000U)
#define SBB_PARAM_H230_RD_MASK (0xffffffffU)
#define SBB_PARAM_H230_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H230_VAL_BF_OFF ( 0)
#define SBB_PARAM_H230_VAL_BF_WID (32)
#define SBB_PARAM_H230_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H230_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L230_REG register description at address offset 0x1f34
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l230_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l230_reg_t;

#define SBB_PARAM_L230_DEFAULT (0x00000000U)
#define SBB_PARAM_L230_RD_MASK (0xffffffffU)
#define SBB_PARAM_L230_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L230_VAL_BF_OFF ( 0)
#define SBB_PARAM_L230_VAL_BF_WID (32)
#define SBB_PARAM_L230_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L230_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H231_REG register description at address offset 0x1f38
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h231_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h231_reg_t;

#define SBB_PARAM_H231_DEFAULT (0x00000000U)
#define SBB_PARAM_H231_RD_MASK (0xffffffffU)
#define SBB_PARAM_H231_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H231_VAL_BF_OFF ( 0)
#define SBB_PARAM_H231_VAL_BF_WID (32)
#define SBB_PARAM_H231_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H231_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L231_REG register description at address offset 0x1f3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l231_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l231_reg_t;

#define SBB_PARAM_L231_DEFAULT (0x00000000U)
#define SBB_PARAM_L231_RD_MASK (0xffffffffU)
#define SBB_PARAM_L231_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L231_VAL_BF_OFF ( 0)
#define SBB_PARAM_L231_VAL_BF_WID (32)
#define SBB_PARAM_L231_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L231_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H232_REG register description at address offset 0x1f40
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h232_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h232_reg_t;

#define SBB_PARAM_H232_DEFAULT (0x00000000U)
#define SBB_PARAM_H232_RD_MASK (0xffffffffU)
#define SBB_PARAM_H232_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H232_VAL_BF_OFF ( 0)
#define SBB_PARAM_H232_VAL_BF_WID (32)
#define SBB_PARAM_H232_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H232_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L232_REG register description at address offset 0x1f44
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l232_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l232_reg_t;

#define SBB_PARAM_L232_DEFAULT (0x00000000U)
#define SBB_PARAM_L232_RD_MASK (0xffffffffU)
#define SBB_PARAM_L232_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L232_VAL_BF_OFF ( 0)
#define SBB_PARAM_L232_VAL_BF_WID (32)
#define SBB_PARAM_L232_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L232_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H233_REG register description at address offset 0x1f48
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h233_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h233_reg_t;

#define SBB_PARAM_H233_DEFAULT (0x00000000U)
#define SBB_PARAM_H233_RD_MASK (0xffffffffU)
#define SBB_PARAM_H233_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H233_VAL_BF_OFF ( 0)
#define SBB_PARAM_H233_VAL_BF_WID (32)
#define SBB_PARAM_H233_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H233_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L233_REG register description at address offset 0x1f4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l233_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l233_reg_t;

#define SBB_PARAM_L233_DEFAULT (0x00000000U)
#define SBB_PARAM_L233_RD_MASK (0xffffffffU)
#define SBB_PARAM_L233_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L233_VAL_BF_OFF ( 0)
#define SBB_PARAM_L233_VAL_BF_WID (32)
#define SBB_PARAM_L233_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L233_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H234_REG register description at address offset 0x1f50
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h234_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h234_reg_t;

#define SBB_PARAM_H234_DEFAULT (0x00000000U)
#define SBB_PARAM_H234_RD_MASK (0xffffffffU)
#define SBB_PARAM_H234_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H234_VAL_BF_OFF ( 0)
#define SBB_PARAM_H234_VAL_BF_WID (32)
#define SBB_PARAM_H234_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H234_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L234_REG register description at address offset 0x1f54
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l234_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l234_reg_t;

#define SBB_PARAM_L234_DEFAULT (0x00000000U)
#define SBB_PARAM_L234_RD_MASK (0xffffffffU)
#define SBB_PARAM_L234_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L234_VAL_BF_OFF ( 0)
#define SBB_PARAM_L234_VAL_BF_WID (32)
#define SBB_PARAM_L234_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L234_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H235_REG register description at address offset 0x1f58
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h235_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h235_reg_t;

#define SBB_PARAM_H235_DEFAULT (0x00000000U)
#define SBB_PARAM_H235_RD_MASK (0xffffffffU)
#define SBB_PARAM_H235_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H235_VAL_BF_OFF ( 0)
#define SBB_PARAM_H235_VAL_BF_WID (32)
#define SBB_PARAM_H235_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H235_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L235_REG register description at address offset 0x1f5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l235_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l235_reg_t;

#define SBB_PARAM_L235_DEFAULT (0x00000000U)
#define SBB_PARAM_L235_RD_MASK (0xffffffffU)
#define SBB_PARAM_L235_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L235_VAL_BF_OFF ( 0)
#define SBB_PARAM_L235_VAL_BF_WID (32)
#define SBB_PARAM_L235_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L235_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H236_REG register description at address offset 0x1f60
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h236_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h236_reg_t;

#define SBB_PARAM_H236_DEFAULT (0x00000000U)
#define SBB_PARAM_H236_RD_MASK (0xffffffffU)
#define SBB_PARAM_H236_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H236_VAL_BF_OFF ( 0)
#define SBB_PARAM_H236_VAL_BF_WID (32)
#define SBB_PARAM_H236_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H236_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L236_REG register description at address offset 0x1f64
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l236_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l236_reg_t;

#define SBB_PARAM_L236_DEFAULT (0x00000000U)
#define SBB_PARAM_L236_RD_MASK (0xffffffffU)
#define SBB_PARAM_L236_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L236_VAL_BF_OFF ( 0)
#define SBB_PARAM_L236_VAL_BF_WID (32)
#define SBB_PARAM_L236_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L236_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H237_REG register description at address offset 0x1f68
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h237_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h237_reg_t;

#define SBB_PARAM_H237_DEFAULT (0x00000000U)
#define SBB_PARAM_H237_RD_MASK (0xffffffffU)
#define SBB_PARAM_H237_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H237_VAL_BF_OFF ( 0)
#define SBB_PARAM_H237_VAL_BF_WID (32)
#define SBB_PARAM_H237_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H237_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L237_REG register description at address offset 0x1f6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l237_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l237_reg_t;

#define SBB_PARAM_L237_DEFAULT (0x00000000U)
#define SBB_PARAM_L237_RD_MASK (0xffffffffU)
#define SBB_PARAM_L237_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L237_VAL_BF_OFF ( 0)
#define SBB_PARAM_L237_VAL_BF_WID (32)
#define SBB_PARAM_L237_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L237_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H238_REG register description at address offset 0x1f70
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h238_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h238_reg_t;

#define SBB_PARAM_H238_DEFAULT (0x00000000U)
#define SBB_PARAM_H238_RD_MASK (0xffffffffU)
#define SBB_PARAM_H238_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H238_VAL_BF_OFF ( 0)
#define SBB_PARAM_H238_VAL_BF_WID (32)
#define SBB_PARAM_H238_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H238_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L238_REG register description at address offset 0x1f74
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l238_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l238_reg_t;

#define SBB_PARAM_L238_DEFAULT (0x00000000U)
#define SBB_PARAM_L238_RD_MASK (0xffffffffU)
#define SBB_PARAM_L238_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L238_VAL_BF_OFF ( 0)
#define SBB_PARAM_L238_VAL_BF_WID (32)
#define SBB_PARAM_L238_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L238_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H239_REG register description at address offset 0x1f78
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h239_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h239_reg_t;

#define SBB_PARAM_H239_DEFAULT (0x00000000U)
#define SBB_PARAM_H239_RD_MASK (0xffffffffU)
#define SBB_PARAM_H239_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H239_VAL_BF_OFF ( 0)
#define SBB_PARAM_H239_VAL_BF_WID (32)
#define SBB_PARAM_H239_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H239_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L239_REG register description at address offset 0x1f7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l239_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l239_reg_t;

#define SBB_PARAM_L239_DEFAULT (0x00000000U)
#define SBB_PARAM_L239_RD_MASK (0xffffffffU)
#define SBB_PARAM_L239_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L239_VAL_BF_OFF ( 0)
#define SBB_PARAM_L239_VAL_BF_WID (32)
#define SBB_PARAM_L239_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L239_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H240_REG register description at address offset 0x1f80
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h240_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h240_reg_t;

#define SBB_PARAM_H240_DEFAULT (0x00000000U)
#define SBB_PARAM_H240_RD_MASK (0xffffffffU)
#define SBB_PARAM_H240_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H240_VAL_BF_OFF ( 0)
#define SBB_PARAM_H240_VAL_BF_WID (32)
#define SBB_PARAM_H240_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H240_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L240_REG register description at address offset 0x1f84
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l240_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l240_reg_t;

#define SBB_PARAM_L240_DEFAULT (0x00000000U)
#define SBB_PARAM_L240_RD_MASK (0xffffffffU)
#define SBB_PARAM_L240_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L240_VAL_BF_OFF ( 0)
#define SBB_PARAM_L240_VAL_BF_WID (32)
#define SBB_PARAM_L240_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L240_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H241_REG register description at address offset 0x1f88
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h241_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h241_reg_t;

#define SBB_PARAM_H241_DEFAULT (0x00000000U)
#define SBB_PARAM_H241_RD_MASK (0xffffffffU)
#define SBB_PARAM_H241_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H241_VAL_BF_OFF ( 0)
#define SBB_PARAM_H241_VAL_BF_WID (32)
#define SBB_PARAM_H241_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H241_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L241_REG register description at address offset 0x1f8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l241_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l241_reg_t;

#define SBB_PARAM_L241_DEFAULT (0x00000000U)
#define SBB_PARAM_L241_RD_MASK (0xffffffffU)
#define SBB_PARAM_L241_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L241_VAL_BF_OFF ( 0)
#define SBB_PARAM_L241_VAL_BF_WID (32)
#define SBB_PARAM_L241_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L241_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H242_REG register description at address offset 0x1f90
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h242_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h242_reg_t;

#define SBB_PARAM_H242_DEFAULT (0x00000000U)
#define SBB_PARAM_H242_RD_MASK (0xffffffffU)
#define SBB_PARAM_H242_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H242_VAL_BF_OFF ( 0)
#define SBB_PARAM_H242_VAL_BF_WID (32)
#define SBB_PARAM_H242_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H242_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L242_REG register description at address offset 0x1f94
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l242_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l242_reg_t;

#define SBB_PARAM_L242_DEFAULT (0x00000000U)
#define SBB_PARAM_L242_RD_MASK (0xffffffffU)
#define SBB_PARAM_L242_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L242_VAL_BF_OFF ( 0)
#define SBB_PARAM_L242_VAL_BF_WID (32)
#define SBB_PARAM_L242_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L242_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H243_REG register description at address offset 0x1f98
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h243_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h243_reg_t;

#define SBB_PARAM_H243_DEFAULT (0x00000000U)
#define SBB_PARAM_H243_RD_MASK (0xffffffffU)
#define SBB_PARAM_H243_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H243_VAL_BF_OFF ( 0)
#define SBB_PARAM_H243_VAL_BF_WID (32)
#define SBB_PARAM_H243_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H243_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L243_REG register description at address offset 0x1f9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l243_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l243_reg_t;

#define SBB_PARAM_L243_DEFAULT (0x00000000U)
#define SBB_PARAM_L243_RD_MASK (0xffffffffU)
#define SBB_PARAM_L243_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L243_VAL_BF_OFF ( 0)
#define SBB_PARAM_L243_VAL_BF_WID (32)
#define SBB_PARAM_L243_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L243_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H244_REG register description at address offset 0x1fa0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h244_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h244_reg_t;

#define SBB_PARAM_H244_DEFAULT (0x00000000U)
#define SBB_PARAM_H244_RD_MASK (0xffffffffU)
#define SBB_PARAM_H244_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H244_VAL_BF_OFF ( 0)
#define SBB_PARAM_H244_VAL_BF_WID (32)
#define SBB_PARAM_H244_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H244_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L244_REG register description at address offset 0x1fa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l244_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l244_reg_t;

#define SBB_PARAM_L244_DEFAULT (0x00000000U)
#define SBB_PARAM_L244_RD_MASK (0xffffffffU)
#define SBB_PARAM_L244_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L244_VAL_BF_OFF ( 0)
#define SBB_PARAM_L244_VAL_BF_WID (32)
#define SBB_PARAM_L244_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L244_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H245_REG register description at address offset 0x1fa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h245_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h245_reg_t;

#define SBB_PARAM_H245_DEFAULT (0x00000000U)
#define SBB_PARAM_H245_RD_MASK (0xffffffffU)
#define SBB_PARAM_H245_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H245_VAL_BF_OFF ( 0)
#define SBB_PARAM_H245_VAL_BF_WID (32)
#define SBB_PARAM_H245_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H245_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L245_REG register description at address offset 0x1fac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l245_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l245_reg_t;

#define SBB_PARAM_L245_DEFAULT (0x00000000U)
#define SBB_PARAM_L245_RD_MASK (0xffffffffU)
#define SBB_PARAM_L245_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L245_VAL_BF_OFF ( 0)
#define SBB_PARAM_L245_VAL_BF_WID (32)
#define SBB_PARAM_L245_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L245_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H246_REG register description at address offset 0x1fb0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h246_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h246_reg_t;

#define SBB_PARAM_H246_DEFAULT (0x00000000U)
#define SBB_PARAM_H246_RD_MASK (0xffffffffU)
#define SBB_PARAM_H246_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H246_VAL_BF_OFF ( 0)
#define SBB_PARAM_H246_VAL_BF_WID (32)
#define SBB_PARAM_H246_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H246_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L246_REG register description at address offset 0x1fb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l246_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l246_reg_t;

#define SBB_PARAM_L246_DEFAULT (0x00000000U)
#define SBB_PARAM_L246_RD_MASK (0xffffffffU)
#define SBB_PARAM_L246_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L246_VAL_BF_OFF ( 0)
#define SBB_PARAM_L246_VAL_BF_WID (32)
#define SBB_PARAM_L246_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L246_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H247_REG register description at address offset 0x1fb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h247_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h247_reg_t;

#define SBB_PARAM_H247_DEFAULT (0x00000000U)
#define SBB_PARAM_H247_RD_MASK (0xffffffffU)
#define SBB_PARAM_H247_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H247_VAL_BF_OFF ( 0)
#define SBB_PARAM_H247_VAL_BF_WID (32)
#define SBB_PARAM_H247_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H247_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L247_REG register description at address offset 0x1fbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l247_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l247_reg_t;

#define SBB_PARAM_L247_DEFAULT (0x00000000U)
#define SBB_PARAM_L247_RD_MASK (0xffffffffU)
#define SBB_PARAM_L247_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L247_VAL_BF_OFF ( 0)
#define SBB_PARAM_L247_VAL_BF_WID (32)
#define SBB_PARAM_L247_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L247_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H248_REG register description at address offset 0x1fc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h248_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h248_reg_t;

#define SBB_PARAM_H248_DEFAULT (0x00000000U)
#define SBB_PARAM_H248_RD_MASK (0xffffffffU)
#define SBB_PARAM_H248_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H248_VAL_BF_OFF ( 0)
#define SBB_PARAM_H248_VAL_BF_WID (32)
#define SBB_PARAM_H248_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H248_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L248_REG register description at address offset 0x1fc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l248_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l248_reg_t;

#define SBB_PARAM_L248_DEFAULT (0x00000000U)
#define SBB_PARAM_L248_RD_MASK (0xffffffffU)
#define SBB_PARAM_L248_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L248_VAL_BF_OFF ( 0)
#define SBB_PARAM_L248_VAL_BF_WID (32)
#define SBB_PARAM_L248_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L248_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H249_REG register description at address offset 0x1fc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h249_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h249_reg_t;

#define SBB_PARAM_H249_DEFAULT (0x00000000U)
#define SBB_PARAM_H249_RD_MASK (0xffffffffU)
#define SBB_PARAM_H249_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H249_VAL_BF_OFF ( 0)
#define SBB_PARAM_H249_VAL_BF_WID (32)
#define SBB_PARAM_H249_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H249_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L249_REG register description at address offset 0x1fcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l249_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l249_reg_t;

#define SBB_PARAM_L249_DEFAULT (0x00000000U)
#define SBB_PARAM_L249_RD_MASK (0xffffffffU)
#define SBB_PARAM_L249_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L249_VAL_BF_OFF ( 0)
#define SBB_PARAM_L249_VAL_BF_WID (32)
#define SBB_PARAM_L249_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L249_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H250_REG register description at address offset 0x1fd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h250_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h250_reg_t;

#define SBB_PARAM_H250_DEFAULT (0x00000000U)
#define SBB_PARAM_H250_RD_MASK (0xffffffffU)
#define SBB_PARAM_H250_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H250_VAL_BF_OFF ( 0)
#define SBB_PARAM_H250_VAL_BF_WID (32)
#define SBB_PARAM_H250_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H250_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L250_REG register description at address offset 0x1fd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l250_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l250_reg_t;

#define SBB_PARAM_L250_DEFAULT (0x00000000U)
#define SBB_PARAM_L250_RD_MASK (0xffffffffU)
#define SBB_PARAM_L250_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L250_VAL_BF_OFF ( 0)
#define SBB_PARAM_L250_VAL_BF_WID (32)
#define SBB_PARAM_L250_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L250_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H251_REG register description at address offset 0x1fd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h251_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h251_reg_t;

#define SBB_PARAM_H251_DEFAULT (0x00000000U)
#define SBB_PARAM_H251_RD_MASK (0xffffffffU)
#define SBB_PARAM_H251_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H251_VAL_BF_OFF ( 0)
#define SBB_PARAM_H251_VAL_BF_WID (32)
#define SBB_PARAM_H251_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H251_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L251_REG register description at address offset 0x1fdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l251_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l251_reg_t;

#define SBB_PARAM_L251_DEFAULT (0x00000000U)
#define SBB_PARAM_L251_RD_MASK (0xffffffffU)
#define SBB_PARAM_L251_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L251_VAL_BF_OFF ( 0)
#define SBB_PARAM_L251_VAL_BF_WID (32)
#define SBB_PARAM_L251_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L251_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H252_REG register description at address offset 0x1fe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h252_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h252_reg_t;

#define SBB_PARAM_H252_DEFAULT (0x00000000U)
#define SBB_PARAM_H252_RD_MASK (0xffffffffU)
#define SBB_PARAM_H252_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H252_VAL_BF_OFF ( 0)
#define SBB_PARAM_H252_VAL_BF_WID (32)
#define SBB_PARAM_H252_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H252_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L252_REG register description at address offset 0x1fe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l252_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l252_reg_t;

#define SBB_PARAM_L252_DEFAULT (0x00000000U)
#define SBB_PARAM_L252_RD_MASK (0xffffffffU)
#define SBB_PARAM_L252_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L252_VAL_BF_OFF ( 0)
#define SBB_PARAM_L252_VAL_BF_WID (32)
#define SBB_PARAM_L252_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L252_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H253_REG register description at address offset 0x1fe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h253_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h253_reg_t;

#define SBB_PARAM_H253_DEFAULT (0x00000000U)
#define SBB_PARAM_H253_RD_MASK (0xffffffffU)
#define SBB_PARAM_H253_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H253_VAL_BF_OFF ( 0)
#define SBB_PARAM_H253_VAL_BF_WID (32)
#define SBB_PARAM_H253_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H253_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L253_REG register description at address offset 0x1fec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l253_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l253_reg_t;

#define SBB_PARAM_L253_DEFAULT (0x00000000U)
#define SBB_PARAM_L253_RD_MASK (0xffffffffU)
#define SBB_PARAM_L253_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L253_VAL_BF_OFF ( 0)
#define SBB_PARAM_L253_VAL_BF_WID (32)
#define SBB_PARAM_L253_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L253_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H254_REG register description at address offset 0x1ff0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h254_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h254_reg_t;

#define SBB_PARAM_H254_DEFAULT (0x00000000U)
#define SBB_PARAM_H254_RD_MASK (0xffffffffU)
#define SBB_PARAM_H254_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H254_VAL_BF_OFF ( 0)
#define SBB_PARAM_H254_VAL_BF_WID (32)
#define SBB_PARAM_H254_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H254_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L254_REG register description at address offset 0x1ff4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l254_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l254_reg_t;

#define SBB_PARAM_L254_DEFAULT (0x00000000U)
#define SBB_PARAM_L254_RD_MASK (0xffffffffU)
#define SBB_PARAM_L254_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L254_VAL_BF_OFF ( 0)
#define SBB_PARAM_L254_VAL_BF_WID (32)
#define SBB_PARAM_L254_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L254_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H255_REG register description at address offset 0x1ff8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h255_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h255_reg_t;

#define SBB_PARAM_H255_DEFAULT (0x00000000U)
#define SBB_PARAM_H255_RD_MASK (0xffffffffU)
#define SBB_PARAM_H255_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H255_VAL_BF_OFF ( 0)
#define SBB_PARAM_H255_VAL_BF_WID (32)
#define SBB_PARAM_H255_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H255_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L255_REG register description at address offset 0x1ffc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l255_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l255_reg_t;

#define SBB_PARAM_L255_DEFAULT (0x00000000U)
#define SBB_PARAM_L255_RD_MASK (0xffffffffU)
#define SBB_PARAM_L255_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L255_VAL_BF_OFF ( 0)
#define SBB_PARAM_L255_VAL_BF_WID (32)
#define SBB_PARAM_L255_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L255_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H256_REG register description at address offset 0x2000
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h256_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h256_reg_t;

#define SBB_PARAM_H256_DEFAULT (0x00000000U)
#define SBB_PARAM_H256_RD_MASK (0xffffffffU)
#define SBB_PARAM_H256_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H256_VAL_BF_OFF ( 0)
#define SBB_PARAM_H256_VAL_BF_WID (32)
#define SBB_PARAM_H256_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H256_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L256_REG register description at address offset 0x2004
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l256_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l256_reg_t;

#define SBB_PARAM_L256_DEFAULT (0x00000000U)
#define SBB_PARAM_L256_RD_MASK (0xffffffffU)
#define SBB_PARAM_L256_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L256_VAL_BF_OFF ( 0)
#define SBB_PARAM_L256_VAL_BF_WID (32)
#define SBB_PARAM_L256_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L256_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H257_REG register description at address offset 0x2008
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h257_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h257_reg_t;

#define SBB_PARAM_H257_DEFAULT (0x00000000U)
#define SBB_PARAM_H257_RD_MASK (0xffffffffU)
#define SBB_PARAM_H257_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H257_VAL_BF_OFF ( 0)
#define SBB_PARAM_H257_VAL_BF_WID (32)
#define SBB_PARAM_H257_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H257_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L257_REG register description at address offset 0x200c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l257_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l257_reg_t;

#define SBB_PARAM_L257_DEFAULT (0x00000000U)
#define SBB_PARAM_L257_RD_MASK (0xffffffffU)
#define SBB_PARAM_L257_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L257_VAL_BF_OFF ( 0)
#define SBB_PARAM_L257_VAL_BF_WID (32)
#define SBB_PARAM_L257_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L257_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H258_REG register description at address offset 0x2010
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h258_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h258_reg_t;

#define SBB_PARAM_H258_DEFAULT (0x00000000U)
#define SBB_PARAM_H258_RD_MASK (0xffffffffU)
#define SBB_PARAM_H258_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H258_VAL_BF_OFF ( 0)
#define SBB_PARAM_H258_VAL_BF_WID (32)
#define SBB_PARAM_H258_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H258_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L258_REG register description at address offset 0x2014
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l258_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l258_reg_t;

#define SBB_PARAM_L258_DEFAULT (0x00000000U)
#define SBB_PARAM_L258_RD_MASK (0xffffffffU)
#define SBB_PARAM_L258_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L258_VAL_BF_OFF ( 0)
#define SBB_PARAM_L258_VAL_BF_WID (32)
#define SBB_PARAM_L258_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L258_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H259_REG register description at address offset 0x2018
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h259_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h259_reg_t;

#define SBB_PARAM_H259_DEFAULT (0x00000000U)
#define SBB_PARAM_H259_RD_MASK (0xffffffffU)
#define SBB_PARAM_H259_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H259_VAL_BF_OFF ( 0)
#define SBB_PARAM_H259_VAL_BF_WID (32)
#define SBB_PARAM_H259_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H259_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L259_REG register description at address offset 0x201c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l259_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l259_reg_t;

#define SBB_PARAM_L259_DEFAULT (0x00000000U)
#define SBB_PARAM_L259_RD_MASK (0xffffffffU)
#define SBB_PARAM_L259_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L259_VAL_BF_OFF ( 0)
#define SBB_PARAM_L259_VAL_BF_WID (32)
#define SBB_PARAM_L259_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L259_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H260_REG register description at address offset 0x2020
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h260_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h260_reg_t;

#define SBB_PARAM_H260_DEFAULT (0x00000000U)
#define SBB_PARAM_H260_RD_MASK (0xffffffffU)
#define SBB_PARAM_H260_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H260_VAL_BF_OFF ( 0)
#define SBB_PARAM_H260_VAL_BF_WID (32)
#define SBB_PARAM_H260_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H260_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L260_REG register description at address offset 0x2024
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l260_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l260_reg_t;

#define SBB_PARAM_L260_DEFAULT (0x00000000U)
#define SBB_PARAM_L260_RD_MASK (0xffffffffU)
#define SBB_PARAM_L260_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L260_VAL_BF_OFF ( 0)
#define SBB_PARAM_L260_VAL_BF_WID (32)
#define SBB_PARAM_L260_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L260_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H261_REG register description at address offset 0x2028
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h261_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h261_reg_t;

#define SBB_PARAM_H261_DEFAULT (0x00000000U)
#define SBB_PARAM_H261_RD_MASK (0xffffffffU)
#define SBB_PARAM_H261_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H261_VAL_BF_OFF ( 0)
#define SBB_PARAM_H261_VAL_BF_WID (32)
#define SBB_PARAM_H261_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H261_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L261_REG register description at address offset 0x202c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l261_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l261_reg_t;

#define SBB_PARAM_L261_DEFAULT (0x00000000U)
#define SBB_PARAM_L261_RD_MASK (0xffffffffU)
#define SBB_PARAM_L261_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L261_VAL_BF_OFF ( 0)
#define SBB_PARAM_L261_VAL_BF_WID (32)
#define SBB_PARAM_L261_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L261_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H262_REG register description at address offset 0x2030
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h262_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h262_reg_t;

#define SBB_PARAM_H262_DEFAULT (0x00000000U)
#define SBB_PARAM_H262_RD_MASK (0xffffffffU)
#define SBB_PARAM_H262_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H262_VAL_BF_OFF ( 0)
#define SBB_PARAM_H262_VAL_BF_WID (32)
#define SBB_PARAM_H262_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H262_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L262_REG register description at address offset 0x2034
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l262_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l262_reg_t;

#define SBB_PARAM_L262_DEFAULT (0x00000000U)
#define SBB_PARAM_L262_RD_MASK (0xffffffffU)
#define SBB_PARAM_L262_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L262_VAL_BF_OFF ( 0)
#define SBB_PARAM_L262_VAL_BF_WID (32)
#define SBB_PARAM_L262_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L262_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H263_REG register description at address offset 0x2038
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h263_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h263_reg_t;

#define SBB_PARAM_H263_DEFAULT (0x00000000U)
#define SBB_PARAM_H263_RD_MASK (0xffffffffU)
#define SBB_PARAM_H263_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H263_VAL_BF_OFF ( 0)
#define SBB_PARAM_H263_VAL_BF_WID (32)
#define SBB_PARAM_H263_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H263_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L263_REG register description at address offset 0x203c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l263_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l263_reg_t;

#define SBB_PARAM_L263_DEFAULT (0x00000000U)
#define SBB_PARAM_L263_RD_MASK (0xffffffffU)
#define SBB_PARAM_L263_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L263_VAL_BF_OFF ( 0)
#define SBB_PARAM_L263_VAL_BF_WID (32)
#define SBB_PARAM_L263_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L263_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H264_REG register description at address offset 0x2040
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h264_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h264_reg_t;

#define SBB_PARAM_H264_DEFAULT (0x00000000U)
#define SBB_PARAM_H264_RD_MASK (0xffffffffU)
#define SBB_PARAM_H264_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H264_VAL_BF_OFF ( 0)
#define SBB_PARAM_H264_VAL_BF_WID (32)
#define SBB_PARAM_H264_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H264_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L264_REG register description at address offset 0x2044
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l264_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l264_reg_t;

#define SBB_PARAM_L264_DEFAULT (0x00000000U)
#define SBB_PARAM_L264_RD_MASK (0xffffffffU)
#define SBB_PARAM_L264_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L264_VAL_BF_OFF ( 0)
#define SBB_PARAM_L264_VAL_BF_WID (32)
#define SBB_PARAM_L264_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L264_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H265_REG register description at address offset 0x2048
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h265_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h265_reg_t;

#define SBB_PARAM_H265_DEFAULT (0x00000000U)
#define SBB_PARAM_H265_RD_MASK (0xffffffffU)
#define SBB_PARAM_H265_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H265_VAL_BF_OFF ( 0)
#define SBB_PARAM_H265_VAL_BF_WID (32)
#define SBB_PARAM_H265_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H265_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L265_REG register description at address offset 0x204c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l265_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l265_reg_t;

#define SBB_PARAM_L265_DEFAULT (0x00000000U)
#define SBB_PARAM_L265_RD_MASK (0xffffffffU)
#define SBB_PARAM_L265_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L265_VAL_BF_OFF ( 0)
#define SBB_PARAM_L265_VAL_BF_WID (32)
#define SBB_PARAM_L265_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L265_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H266_REG register description at address offset 0x2050
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h266_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h266_reg_t;

#define SBB_PARAM_H266_DEFAULT (0x00000000U)
#define SBB_PARAM_H266_RD_MASK (0xffffffffU)
#define SBB_PARAM_H266_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H266_VAL_BF_OFF ( 0)
#define SBB_PARAM_H266_VAL_BF_WID (32)
#define SBB_PARAM_H266_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H266_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L266_REG register description at address offset 0x2054
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l266_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l266_reg_t;

#define SBB_PARAM_L266_DEFAULT (0x00000000U)
#define SBB_PARAM_L266_RD_MASK (0xffffffffU)
#define SBB_PARAM_L266_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L266_VAL_BF_OFF ( 0)
#define SBB_PARAM_L266_VAL_BF_WID (32)
#define SBB_PARAM_L266_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L266_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H267_REG register description at address offset 0x2058
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h267_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h267_reg_t;

#define SBB_PARAM_H267_DEFAULT (0x00000000U)
#define SBB_PARAM_H267_RD_MASK (0xffffffffU)
#define SBB_PARAM_H267_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H267_VAL_BF_OFF ( 0)
#define SBB_PARAM_H267_VAL_BF_WID (32)
#define SBB_PARAM_H267_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H267_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L267_REG register description at address offset 0x205c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l267_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l267_reg_t;

#define SBB_PARAM_L267_DEFAULT (0x00000000U)
#define SBB_PARAM_L267_RD_MASK (0xffffffffU)
#define SBB_PARAM_L267_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L267_VAL_BF_OFF ( 0)
#define SBB_PARAM_L267_VAL_BF_WID (32)
#define SBB_PARAM_L267_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L267_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H268_REG register description at address offset 0x2060
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h268_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h268_reg_t;

#define SBB_PARAM_H268_DEFAULT (0x00000000U)
#define SBB_PARAM_H268_RD_MASK (0xffffffffU)
#define SBB_PARAM_H268_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H268_VAL_BF_OFF ( 0)
#define SBB_PARAM_H268_VAL_BF_WID (32)
#define SBB_PARAM_H268_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H268_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L268_REG register description at address offset 0x2064
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l268_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l268_reg_t;

#define SBB_PARAM_L268_DEFAULT (0x00000000U)
#define SBB_PARAM_L268_RD_MASK (0xffffffffU)
#define SBB_PARAM_L268_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L268_VAL_BF_OFF ( 0)
#define SBB_PARAM_L268_VAL_BF_WID (32)
#define SBB_PARAM_L268_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L268_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H269_REG register description at address offset 0x2068
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h269_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h269_reg_t;

#define SBB_PARAM_H269_DEFAULT (0x00000000U)
#define SBB_PARAM_H269_RD_MASK (0xffffffffU)
#define SBB_PARAM_H269_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H269_VAL_BF_OFF ( 0)
#define SBB_PARAM_H269_VAL_BF_WID (32)
#define SBB_PARAM_H269_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H269_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L269_REG register description at address offset 0x206c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l269_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l269_reg_t;

#define SBB_PARAM_L269_DEFAULT (0x00000000U)
#define SBB_PARAM_L269_RD_MASK (0xffffffffU)
#define SBB_PARAM_L269_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L269_VAL_BF_OFF ( 0)
#define SBB_PARAM_L269_VAL_BF_WID (32)
#define SBB_PARAM_L269_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L269_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H270_REG register description at address offset 0x2070
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h270_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h270_reg_t;

#define SBB_PARAM_H270_DEFAULT (0x00000000U)
#define SBB_PARAM_H270_RD_MASK (0xffffffffU)
#define SBB_PARAM_H270_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H270_VAL_BF_OFF ( 0)
#define SBB_PARAM_H270_VAL_BF_WID (32)
#define SBB_PARAM_H270_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H270_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L270_REG register description at address offset 0x2074
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l270_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l270_reg_t;

#define SBB_PARAM_L270_DEFAULT (0x00000000U)
#define SBB_PARAM_L270_RD_MASK (0xffffffffU)
#define SBB_PARAM_L270_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L270_VAL_BF_OFF ( 0)
#define SBB_PARAM_L270_VAL_BF_WID (32)
#define SBB_PARAM_L270_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L270_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H271_REG register description at address offset 0x2078
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h271_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h271_reg_t;

#define SBB_PARAM_H271_DEFAULT (0x00000000U)
#define SBB_PARAM_H271_RD_MASK (0xffffffffU)
#define SBB_PARAM_H271_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H271_VAL_BF_OFF ( 0)
#define SBB_PARAM_H271_VAL_BF_WID (32)
#define SBB_PARAM_H271_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H271_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L271_REG register description at address offset 0x207c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l271_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l271_reg_t;

#define SBB_PARAM_L271_DEFAULT (0x00000000U)
#define SBB_PARAM_L271_RD_MASK (0xffffffffU)
#define SBB_PARAM_L271_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L271_VAL_BF_OFF ( 0)
#define SBB_PARAM_L271_VAL_BF_WID (32)
#define SBB_PARAM_L271_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L271_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H272_REG register description at address offset 0x2080
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h272_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h272_reg_t;

#define SBB_PARAM_H272_DEFAULT (0x00000000U)
#define SBB_PARAM_H272_RD_MASK (0xffffffffU)
#define SBB_PARAM_H272_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H272_VAL_BF_OFF ( 0)
#define SBB_PARAM_H272_VAL_BF_WID (32)
#define SBB_PARAM_H272_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H272_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L272_REG register description at address offset 0x2084
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l272_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l272_reg_t;

#define SBB_PARAM_L272_DEFAULT (0x00000000U)
#define SBB_PARAM_L272_RD_MASK (0xffffffffU)
#define SBB_PARAM_L272_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L272_VAL_BF_OFF ( 0)
#define SBB_PARAM_L272_VAL_BF_WID (32)
#define SBB_PARAM_L272_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L272_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H273_REG register description at address offset 0x2088
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h273_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h273_reg_t;

#define SBB_PARAM_H273_DEFAULT (0x00000000U)
#define SBB_PARAM_H273_RD_MASK (0xffffffffU)
#define SBB_PARAM_H273_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H273_VAL_BF_OFF ( 0)
#define SBB_PARAM_H273_VAL_BF_WID (32)
#define SBB_PARAM_H273_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H273_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L273_REG register description at address offset 0x208c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l273_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l273_reg_t;

#define SBB_PARAM_L273_DEFAULT (0x00000000U)
#define SBB_PARAM_L273_RD_MASK (0xffffffffU)
#define SBB_PARAM_L273_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L273_VAL_BF_OFF ( 0)
#define SBB_PARAM_L273_VAL_BF_WID (32)
#define SBB_PARAM_L273_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L273_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H274_REG register description at address offset 0x2090
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h274_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h274_reg_t;

#define SBB_PARAM_H274_DEFAULT (0x00000000U)
#define SBB_PARAM_H274_RD_MASK (0xffffffffU)
#define SBB_PARAM_H274_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H274_VAL_BF_OFF ( 0)
#define SBB_PARAM_H274_VAL_BF_WID (32)
#define SBB_PARAM_H274_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H274_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L274_REG register description at address offset 0x2094
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l274_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l274_reg_t;

#define SBB_PARAM_L274_DEFAULT (0x00000000U)
#define SBB_PARAM_L274_RD_MASK (0xffffffffU)
#define SBB_PARAM_L274_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L274_VAL_BF_OFF ( 0)
#define SBB_PARAM_L274_VAL_BF_WID (32)
#define SBB_PARAM_L274_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L274_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H275_REG register description at address offset 0x2098
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h275_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h275_reg_t;

#define SBB_PARAM_H275_DEFAULT (0x00000000U)
#define SBB_PARAM_H275_RD_MASK (0xffffffffU)
#define SBB_PARAM_H275_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H275_VAL_BF_OFF ( 0)
#define SBB_PARAM_H275_VAL_BF_WID (32)
#define SBB_PARAM_H275_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H275_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L275_REG register description at address offset 0x209c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l275_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l275_reg_t;

#define SBB_PARAM_L275_DEFAULT (0x00000000U)
#define SBB_PARAM_L275_RD_MASK (0xffffffffU)
#define SBB_PARAM_L275_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L275_VAL_BF_OFF ( 0)
#define SBB_PARAM_L275_VAL_BF_WID (32)
#define SBB_PARAM_L275_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L275_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H276_REG register description at address offset 0x20a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h276_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h276_reg_t;

#define SBB_PARAM_H276_DEFAULT (0x00000000U)
#define SBB_PARAM_H276_RD_MASK (0xffffffffU)
#define SBB_PARAM_H276_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H276_VAL_BF_OFF ( 0)
#define SBB_PARAM_H276_VAL_BF_WID (32)
#define SBB_PARAM_H276_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H276_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L276_REG register description at address offset 0x20a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l276_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l276_reg_t;

#define SBB_PARAM_L276_DEFAULT (0x00000000U)
#define SBB_PARAM_L276_RD_MASK (0xffffffffU)
#define SBB_PARAM_L276_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L276_VAL_BF_OFF ( 0)
#define SBB_PARAM_L276_VAL_BF_WID (32)
#define SBB_PARAM_L276_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L276_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H277_REG register description at address offset 0x20a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h277_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h277_reg_t;

#define SBB_PARAM_H277_DEFAULT (0x00000000U)
#define SBB_PARAM_H277_RD_MASK (0xffffffffU)
#define SBB_PARAM_H277_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H277_VAL_BF_OFF ( 0)
#define SBB_PARAM_H277_VAL_BF_WID (32)
#define SBB_PARAM_H277_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H277_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L277_REG register description at address offset 0x20ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l277_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l277_reg_t;

#define SBB_PARAM_L277_DEFAULT (0x00000000U)
#define SBB_PARAM_L277_RD_MASK (0xffffffffU)
#define SBB_PARAM_L277_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L277_VAL_BF_OFF ( 0)
#define SBB_PARAM_L277_VAL_BF_WID (32)
#define SBB_PARAM_L277_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L277_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H278_REG register description at address offset 0x20b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h278_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h278_reg_t;

#define SBB_PARAM_H278_DEFAULT (0x00000000U)
#define SBB_PARAM_H278_RD_MASK (0xffffffffU)
#define SBB_PARAM_H278_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H278_VAL_BF_OFF ( 0)
#define SBB_PARAM_H278_VAL_BF_WID (32)
#define SBB_PARAM_H278_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H278_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L278_REG register description at address offset 0x20b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l278_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l278_reg_t;

#define SBB_PARAM_L278_DEFAULT (0x00000000U)
#define SBB_PARAM_L278_RD_MASK (0xffffffffU)
#define SBB_PARAM_L278_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L278_VAL_BF_OFF ( 0)
#define SBB_PARAM_L278_VAL_BF_WID (32)
#define SBB_PARAM_L278_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L278_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H279_REG register description at address offset 0x20b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h279_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h279_reg_t;

#define SBB_PARAM_H279_DEFAULT (0x00000000U)
#define SBB_PARAM_H279_RD_MASK (0xffffffffU)
#define SBB_PARAM_H279_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H279_VAL_BF_OFF ( 0)
#define SBB_PARAM_H279_VAL_BF_WID (32)
#define SBB_PARAM_H279_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H279_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L279_REG register description at address offset 0x20bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l279_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l279_reg_t;

#define SBB_PARAM_L279_DEFAULT (0x00000000U)
#define SBB_PARAM_L279_RD_MASK (0xffffffffU)
#define SBB_PARAM_L279_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L279_VAL_BF_OFF ( 0)
#define SBB_PARAM_L279_VAL_BF_WID (32)
#define SBB_PARAM_L279_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L279_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H280_REG register description at address offset 0x20c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h280_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h280_reg_t;

#define SBB_PARAM_H280_DEFAULT (0x00000000U)
#define SBB_PARAM_H280_RD_MASK (0xffffffffU)
#define SBB_PARAM_H280_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H280_VAL_BF_OFF ( 0)
#define SBB_PARAM_H280_VAL_BF_WID (32)
#define SBB_PARAM_H280_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H280_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L280_REG register description at address offset 0x20c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l280_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l280_reg_t;

#define SBB_PARAM_L280_DEFAULT (0x00000000U)
#define SBB_PARAM_L280_RD_MASK (0xffffffffU)
#define SBB_PARAM_L280_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L280_VAL_BF_OFF ( 0)
#define SBB_PARAM_L280_VAL_BF_WID (32)
#define SBB_PARAM_L280_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L280_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H281_REG register description at address offset 0x20c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h281_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h281_reg_t;

#define SBB_PARAM_H281_DEFAULT (0x00000000U)
#define SBB_PARAM_H281_RD_MASK (0xffffffffU)
#define SBB_PARAM_H281_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H281_VAL_BF_OFF ( 0)
#define SBB_PARAM_H281_VAL_BF_WID (32)
#define SBB_PARAM_H281_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H281_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L281_REG register description at address offset 0x20cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l281_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l281_reg_t;

#define SBB_PARAM_L281_DEFAULT (0x00000000U)
#define SBB_PARAM_L281_RD_MASK (0xffffffffU)
#define SBB_PARAM_L281_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L281_VAL_BF_OFF ( 0)
#define SBB_PARAM_L281_VAL_BF_WID (32)
#define SBB_PARAM_L281_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L281_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H282_REG register description at address offset 0x20d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h282_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h282_reg_t;

#define SBB_PARAM_H282_DEFAULT (0x00000000U)
#define SBB_PARAM_H282_RD_MASK (0xffffffffU)
#define SBB_PARAM_H282_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H282_VAL_BF_OFF ( 0)
#define SBB_PARAM_H282_VAL_BF_WID (32)
#define SBB_PARAM_H282_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H282_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L282_REG register description at address offset 0x20d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l282_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l282_reg_t;

#define SBB_PARAM_L282_DEFAULT (0x00000000U)
#define SBB_PARAM_L282_RD_MASK (0xffffffffU)
#define SBB_PARAM_L282_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L282_VAL_BF_OFF ( 0)
#define SBB_PARAM_L282_VAL_BF_WID (32)
#define SBB_PARAM_L282_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L282_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H283_REG register description at address offset 0x20d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h283_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h283_reg_t;

#define SBB_PARAM_H283_DEFAULT (0x00000000U)
#define SBB_PARAM_H283_RD_MASK (0xffffffffU)
#define SBB_PARAM_H283_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H283_VAL_BF_OFF ( 0)
#define SBB_PARAM_H283_VAL_BF_WID (32)
#define SBB_PARAM_H283_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H283_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L283_REG register description at address offset 0x20dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l283_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l283_reg_t;

#define SBB_PARAM_L283_DEFAULT (0x00000000U)
#define SBB_PARAM_L283_RD_MASK (0xffffffffU)
#define SBB_PARAM_L283_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L283_VAL_BF_OFF ( 0)
#define SBB_PARAM_L283_VAL_BF_WID (32)
#define SBB_PARAM_L283_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L283_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H284_REG register description at address offset 0x20e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h284_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h284_reg_t;

#define SBB_PARAM_H284_DEFAULT (0x00000000U)
#define SBB_PARAM_H284_RD_MASK (0xffffffffU)
#define SBB_PARAM_H284_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H284_VAL_BF_OFF ( 0)
#define SBB_PARAM_H284_VAL_BF_WID (32)
#define SBB_PARAM_H284_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H284_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L284_REG register description at address offset 0x20e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l284_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l284_reg_t;

#define SBB_PARAM_L284_DEFAULT (0x00000000U)
#define SBB_PARAM_L284_RD_MASK (0xffffffffU)
#define SBB_PARAM_L284_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L284_VAL_BF_OFF ( 0)
#define SBB_PARAM_L284_VAL_BF_WID (32)
#define SBB_PARAM_L284_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L284_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H285_REG register description at address offset 0x20e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h285_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h285_reg_t;

#define SBB_PARAM_H285_DEFAULT (0x00000000U)
#define SBB_PARAM_H285_RD_MASK (0xffffffffU)
#define SBB_PARAM_H285_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H285_VAL_BF_OFF ( 0)
#define SBB_PARAM_H285_VAL_BF_WID (32)
#define SBB_PARAM_H285_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H285_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L285_REG register description at address offset 0x20ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l285_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l285_reg_t;

#define SBB_PARAM_L285_DEFAULT (0x00000000U)
#define SBB_PARAM_L285_RD_MASK (0xffffffffU)
#define SBB_PARAM_L285_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L285_VAL_BF_OFF ( 0)
#define SBB_PARAM_L285_VAL_BF_WID (32)
#define SBB_PARAM_L285_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L285_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H286_REG register description at address offset 0x20f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h286_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h286_reg_t;

#define SBB_PARAM_H286_DEFAULT (0x00000000U)
#define SBB_PARAM_H286_RD_MASK (0xffffffffU)
#define SBB_PARAM_H286_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H286_VAL_BF_OFF ( 0)
#define SBB_PARAM_H286_VAL_BF_WID (32)
#define SBB_PARAM_H286_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H286_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L286_REG register description at address offset 0x20f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l286_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l286_reg_t;

#define SBB_PARAM_L286_DEFAULT (0x00000000U)
#define SBB_PARAM_L286_RD_MASK (0xffffffffU)
#define SBB_PARAM_L286_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L286_VAL_BF_OFF ( 0)
#define SBB_PARAM_L286_VAL_BF_WID (32)
#define SBB_PARAM_L286_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L286_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H287_REG register description at address offset 0x20f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h287_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h287_reg_t;

#define SBB_PARAM_H287_DEFAULT (0x00000000U)
#define SBB_PARAM_H287_RD_MASK (0xffffffffU)
#define SBB_PARAM_H287_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H287_VAL_BF_OFF ( 0)
#define SBB_PARAM_H287_VAL_BF_WID (32)
#define SBB_PARAM_H287_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H287_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L287_REG register description at address offset 0x20fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l287_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l287_reg_t;

#define SBB_PARAM_L287_DEFAULT (0x00000000U)
#define SBB_PARAM_L287_RD_MASK (0xffffffffU)
#define SBB_PARAM_L287_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L287_VAL_BF_OFF ( 0)
#define SBB_PARAM_L287_VAL_BF_WID (32)
#define SBB_PARAM_L287_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L287_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H288_REG register description at address offset 0x2100
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h288_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h288_reg_t;

#define SBB_PARAM_H288_DEFAULT (0x00000000U)
#define SBB_PARAM_H288_RD_MASK (0xffffffffU)
#define SBB_PARAM_H288_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H288_VAL_BF_OFF ( 0)
#define SBB_PARAM_H288_VAL_BF_WID (32)
#define SBB_PARAM_H288_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H288_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L288_REG register description at address offset 0x2104
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l288_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l288_reg_t;

#define SBB_PARAM_L288_DEFAULT (0x00000000U)
#define SBB_PARAM_L288_RD_MASK (0xffffffffU)
#define SBB_PARAM_L288_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L288_VAL_BF_OFF ( 0)
#define SBB_PARAM_L288_VAL_BF_WID (32)
#define SBB_PARAM_L288_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L288_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H289_REG register description at address offset 0x2108
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h289_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h289_reg_t;

#define SBB_PARAM_H289_DEFAULT (0x00000000U)
#define SBB_PARAM_H289_RD_MASK (0xffffffffU)
#define SBB_PARAM_H289_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H289_VAL_BF_OFF ( 0)
#define SBB_PARAM_H289_VAL_BF_WID (32)
#define SBB_PARAM_H289_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H289_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L289_REG register description at address offset 0x210c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l289_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l289_reg_t;

#define SBB_PARAM_L289_DEFAULT (0x00000000U)
#define SBB_PARAM_L289_RD_MASK (0xffffffffU)
#define SBB_PARAM_L289_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L289_VAL_BF_OFF ( 0)
#define SBB_PARAM_L289_VAL_BF_WID (32)
#define SBB_PARAM_L289_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L289_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H290_REG register description at address offset 0x2110
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h290_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h290_reg_t;

#define SBB_PARAM_H290_DEFAULT (0x00000000U)
#define SBB_PARAM_H290_RD_MASK (0xffffffffU)
#define SBB_PARAM_H290_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H290_VAL_BF_OFF ( 0)
#define SBB_PARAM_H290_VAL_BF_WID (32)
#define SBB_PARAM_H290_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H290_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L290_REG register description at address offset 0x2114
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l290_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l290_reg_t;

#define SBB_PARAM_L290_DEFAULT (0x00000000U)
#define SBB_PARAM_L290_RD_MASK (0xffffffffU)
#define SBB_PARAM_L290_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L290_VAL_BF_OFF ( 0)
#define SBB_PARAM_L290_VAL_BF_WID (32)
#define SBB_PARAM_L290_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L290_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H291_REG register description at address offset 0x2118
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h291_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h291_reg_t;

#define SBB_PARAM_H291_DEFAULT (0x00000000U)
#define SBB_PARAM_H291_RD_MASK (0xffffffffU)
#define SBB_PARAM_H291_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H291_VAL_BF_OFF ( 0)
#define SBB_PARAM_H291_VAL_BF_WID (32)
#define SBB_PARAM_H291_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H291_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L291_REG register description at address offset 0x211c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l291_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l291_reg_t;

#define SBB_PARAM_L291_DEFAULT (0x00000000U)
#define SBB_PARAM_L291_RD_MASK (0xffffffffU)
#define SBB_PARAM_L291_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L291_VAL_BF_OFF ( 0)
#define SBB_PARAM_L291_VAL_BF_WID (32)
#define SBB_PARAM_L291_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L291_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H292_REG register description at address offset 0x2120
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h292_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h292_reg_t;

#define SBB_PARAM_H292_DEFAULT (0x00000000U)
#define SBB_PARAM_H292_RD_MASK (0xffffffffU)
#define SBB_PARAM_H292_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H292_VAL_BF_OFF ( 0)
#define SBB_PARAM_H292_VAL_BF_WID (32)
#define SBB_PARAM_H292_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H292_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L292_REG register description at address offset 0x2124
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l292_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l292_reg_t;

#define SBB_PARAM_L292_DEFAULT (0x00000000U)
#define SBB_PARAM_L292_RD_MASK (0xffffffffU)
#define SBB_PARAM_L292_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L292_VAL_BF_OFF ( 0)
#define SBB_PARAM_L292_VAL_BF_WID (32)
#define SBB_PARAM_L292_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L292_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H293_REG register description at address offset 0x2128
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h293_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h293_reg_t;

#define SBB_PARAM_H293_DEFAULT (0x00000000U)
#define SBB_PARAM_H293_RD_MASK (0xffffffffU)
#define SBB_PARAM_H293_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H293_VAL_BF_OFF ( 0)
#define SBB_PARAM_H293_VAL_BF_WID (32)
#define SBB_PARAM_H293_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H293_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L293_REG register description at address offset 0x212c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l293_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l293_reg_t;

#define SBB_PARAM_L293_DEFAULT (0x00000000U)
#define SBB_PARAM_L293_RD_MASK (0xffffffffU)
#define SBB_PARAM_L293_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L293_VAL_BF_OFF ( 0)
#define SBB_PARAM_L293_VAL_BF_WID (32)
#define SBB_PARAM_L293_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L293_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H294_REG register description at address offset 0x2130
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h294_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h294_reg_t;

#define SBB_PARAM_H294_DEFAULT (0x00000000U)
#define SBB_PARAM_H294_RD_MASK (0xffffffffU)
#define SBB_PARAM_H294_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H294_VAL_BF_OFF ( 0)
#define SBB_PARAM_H294_VAL_BF_WID (32)
#define SBB_PARAM_H294_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H294_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L294_REG register description at address offset 0x2134
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l294_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l294_reg_t;

#define SBB_PARAM_L294_DEFAULT (0x00000000U)
#define SBB_PARAM_L294_RD_MASK (0xffffffffU)
#define SBB_PARAM_L294_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L294_VAL_BF_OFF ( 0)
#define SBB_PARAM_L294_VAL_BF_WID (32)
#define SBB_PARAM_L294_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L294_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H295_REG register description at address offset 0x2138
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h295_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h295_reg_t;

#define SBB_PARAM_H295_DEFAULT (0x00000000U)
#define SBB_PARAM_H295_RD_MASK (0xffffffffU)
#define SBB_PARAM_H295_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H295_VAL_BF_OFF ( 0)
#define SBB_PARAM_H295_VAL_BF_WID (32)
#define SBB_PARAM_H295_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H295_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L295_REG register description at address offset 0x213c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l295_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l295_reg_t;

#define SBB_PARAM_L295_DEFAULT (0x00000000U)
#define SBB_PARAM_L295_RD_MASK (0xffffffffU)
#define SBB_PARAM_L295_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L295_VAL_BF_OFF ( 0)
#define SBB_PARAM_L295_VAL_BF_WID (32)
#define SBB_PARAM_L295_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L295_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H296_REG register description at address offset 0x2140
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h296_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h296_reg_t;

#define SBB_PARAM_H296_DEFAULT (0x00000000U)
#define SBB_PARAM_H296_RD_MASK (0xffffffffU)
#define SBB_PARAM_H296_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H296_VAL_BF_OFF ( 0)
#define SBB_PARAM_H296_VAL_BF_WID (32)
#define SBB_PARAM_H296_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H296_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L296_REG register description at address offset 0x2144
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l296_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l296_reg_t;

#define SBB_PARAM_L296_DEFAULT (0x00000000U)
#define SBB_PARAM_L296_RD_MASK (0xffffffffU)
#define SBB_PARAM_L296_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L296_VAL_BF_OFF ( 0)
#define SBB_PARAM_L296_VAL_BF_WID (32)
#define SBB_PARAM_L296_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L296_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H297_REG register description at address offset 0x2148
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h297_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h297_reg_t;

#define SBB_PARAM_H297_DEFAULT (0x00000000U)
#define SBB_PARAM_H297_RD_MASK (0xffffffffU)
#define SBB_PARAM_H297_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H297_VAL_BF_OFF ( 0)
#define SBB_PARAM_H297_VAL_BF_WID (32)
#define SBB_PARAM_H297_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H297_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L297_REG register description at address offset 0x214c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l297_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l297_reg_t;

#define SBB_PARAM_L297_DEFAULT (0x00000000U)
#define SBB_PARAM_L297_RD_MASK (0xffffffffU)
#define SBB_PARAM_L297_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L297_VAL_BF_OFF ( 0)
#define SBB_PARAM_L297_VAL_BF_WID (32)
#define SBB_PARAM_L297_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L297_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H298_REG register description at address offset 0x2150
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h298_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h298_reg_t;

#define SBB_PARAM_H298_DEFAULT (0x00000000U)
#define SBB_PARAM_H298_RD_MASK (0xffffffffU)
#define SBB_PARAM_H298_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H298_VAL_BF_OFF ( 0)
#define SBB_PARAM_H298_VAL_BF_WID (32)
#define SBB_PARAM_H298_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H298_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L298_REG register description at address offset 0x2154
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l298_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l298_reg_t;

#define SBB_PARAM_L298_DEFAULT (0x00000000U)
#define SBB_PARAM_L298_RD_MASK (0xffffffffU)
#define SBB_PARAM_L298_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L298_VAL_BF_OFF ( 0)
#define SBB_PARAM_L298_VAL_BF_WID (32)
#define SBB_PARAM_L298_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L298_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H299_REG register description at address offset 0x2158
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h299_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h299_reg_t;

#define SBB_PARAM_H299_DEFAULT (0x00000000U)
#define SBB_PARAM_H299_RD_MASK (0xffffffffU)
#define SBB_PARAM_H299_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H299_VAL_BF_OFF ( 0)
#define SBB_PARAM_H299_VAL_BF_WID (32)
#define SBB_PARAM_H299_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H299_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L299_REG register description at address offset 0x215c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l299_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l299_reg_t;

#define SBB_PARAM_L299_DEFAULT (0x00000000U)
#define SBB_PARAM_L299_RD_MASK (0xffffffffU)
#define SBB_PARAM_L299_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L299_VAL_BF_OFF ( 0)
#define SBB_PARAM_L299_VAL_BF_WID (32)
#define SBB_PARAM_L299_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L299_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H300_REG register description at address offset 0x2160
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h300_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h300_reg_t;

#define SBB_PARAM_H300_DEFAULT (0x00000000U)
#define SBB_PARAM_H300_RD_MASK (0xffffffffU)
#define SBB_PARAM_H300_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H300_VAL_BF_OFF ( 0)
#define SBB_PARAM_H300_VAL_BF_WID (32)
#define SBB_PARAM_H300_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H300_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L300_REG register description at address offset 0x2164
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l300_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l300_reg_t;

#define SBB_PARAM_L300_DEFAULT (0x00000000U)
#define SBB_PARAM_L300_RD_MASK (0xffffffffU)
#define SBB_PARAM_L300_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L300_VAL_BF_OFF ( 0)
#define SBB_PARAM_L300_VAL_BF_WID (32)
#define SBB_PARAM_L300_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L300_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H301_REG register description at address offset 0x2168
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h301_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h301_reg_t;

#define SBB_PARAM_H301_DEFAULT (0x00000000U)
#define SBB_PARAM_H301_RD_MASK (0xffffffffU)
#define SBB_PARAM_H301_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H301_VAL_BF_OFF ( 0)
#define SBB_PARAM_H301_VAL_BF_WID (32)
#define SBB_PARAM_H301_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H301_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L301_REG register description at address offset 0x216c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l301_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l301_reg_t;

#define SBB_PARAM_L301_DEFAULT (0x00000000U)
#define SBB_PARAM_L301_RD_MASK (0xffffffffU)
#define SBB_PARAM_L301_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L301_VAL_BF_OFF ( 0)
#define SBB_PARAM_L301_VAL_BF_WID (32)
#define SBB_PARAM_L301_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L301_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H302_REG register description at address offset 0x2170
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h302_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h302_reg_t;

#define SBB_PARAM_H302_DEFAULT (0x00000000U)
#define SBB_PARAM_H302_RD_MASK (0xffffffffU)
#define SBB_PARAM_H302_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H302_VAL_BF_OFF ( 0)
#define SBB_PARAM_H302_VAL_BF_WID (32)
#define SBB_PARAM_H302_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H302_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L302_REG register description at address offset 0x2174
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l302_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l302_reg_t;

#define SBB_PARAM_L302_DEFAULT (0x00000000U)
#define SBB_PARAM_L302_RD_MASK (0xffffffffU)
#define SBB_PARAM_L302_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L302_VAL_BF_OFF ( 0)
#define SBB_PARAM_L302_VAL_BF_WID (32)
#define SBB_PARAM_L302_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L302_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H303_REG register description at address offset 0x2178
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h303_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h303_reg_t;

#define SBB_PARAM_H303_DEFAULT (0x00000000U)
#define SBB_PARAM_H303_RD_MASK (0xffffffffU)
#define SBB_PARAM_H303_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H303_VAL_BF_OFF ( 0)
#define SBB_PARAM_H303_VAL_BF_WID (32)
#define SBB_PARAM_H303_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H303_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L303_REG register description at address offset 0x217c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l303_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l303_reg_t;

#define SBB_PARAM_L303_DEFAULT (0x00000000U)
#define SBB_PARAM_L303_RD_MASK (0xffffffffU)
#define SBB_PARAM_L303_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L303_VAL_BF_OFF ( 0)
#define SBB_PARAM_L303_VAL_BF_WID (32)
#define SBB_PARAM_L303_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L303_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H304_REG register description at address offset 0x2180
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h304_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h304_reg_t;

#define SBB_PARAM_H304_DEFAULT (0x00000000U)
#define SBB_PARAM_H304_RD_MASK (0xffffffffU)
#define SBB_PARAM_H304_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H304_VAL_BF_OFF ( 0)
#define SBB_PARAM_H304_VAL_BF_WID (32)
#define SBB_PARAM_H304_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H304_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L304_REG register description at address offset 0x2184
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l304_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l304_reg_t;

#define SBB_PARAM_L304_DEFAULT (0x00000000U)
#define SBB_PARAM_L304_RD_MASK (0xffffffffU)
#define SBB_PARAM_L304_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L304_VAL_BF_OFF ( 0)
#define SBB_PARAM_L304_VAL_BF_WID (32)
#define SBB_PARAM_L304_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L304_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H305_REG register description at address offset 0x2188
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h305_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h305_reg_t;

#define SBB_PARAM_H305_DEFAULT (0x00000000U)
#define SBB_PARAM_H305_RD_MASK (0xffffffffU)
#define SBB_PARAM_H305_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H305_VAL_BF_OFF ( 0)
#define SBB_PARAM_H305_VAL_BF_WID (32)
#define SBB_PARAM_H305_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H305_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L305_REG register description at address offset 0x218c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l305_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l305_reg_t;

#define SBB_PARAM_L305_DEFAULT (0x00000000U)
#define SBB_PARAM_L305_RD_MASK (0xffffffffU)
#define SBB_PARAM_L305_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L305_VAL_BF_OFF ( 0)
#define SBB_PARAM_L305_VAL_BF_WID (32)
#define SBB_PARAM_L305_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L305_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H306_REG register description at address offset 0x2190
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h306_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h306_reg_t;

#define SBB_PARAM_H306_DEFAULT (0x00000000U)
#define SBB_PARAM_H306_RD_MASK (0xffffffffU)
#define SBB_PARAM_H306_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H306_VAL_BF_OFF ( 0)
#define SBB_PARAM_H306_VAL_BF_WID (32)
#define SBB_PARAM_H306_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H306_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L306_REG register description at address offset 0x2194
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l306_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l306_reg_t;

#define SBB_PARAM_L306_DEFAULT (0x00000000U)
#define SBB_PARAM_L306_RD_MASK (0xffffffffU)
#define SBB_PARAM_L306_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L306_VAL_BF_OFF ( 0)
#define SBB_PARAM_L306_VAL_BF_WID (32)
#define SBB_PARAM_L306_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L306_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H307_REG register description at address offset 0x2198
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h307_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h307_reg_t;

#define SBB_PARAM_H307_DEFAULT (0x00000000U)
#define SBB_PARAM_H307_RD_MASK (0xffffffffU)
#define SBB_PARAM_H307_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H307_VAL_BF_OFF ( 0)
#define SBB_PARAM_H307_VAL_BF_WID (32)
#define SBB_PARAM_H307_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H307_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L307_REG register description at address offset 0x219c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l307_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l307_reg_t;

#define SBB_PARAM_L307_DEFAULT (0x00000000U)
#define SBB_PARAM_L307_RD_MASK (0xffffffffU)
#define SBB_PARAM_L307_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L307_VAL_BF_OFF ( 0)
#define SBB_PARAM_L307_VAL_BF_WID (32)
#define SBB_PARAM_L307_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L307_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H308_REG register description at address offset 0x21a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h308_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h308_reg_t;

#define SBB_PARAM_H308_DEFAULT (0x00000000U)
#define SBB_PARAM_H308_RD_MASK (0xffffffffU)
#define SBB_PARAM_H308_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H308_VAL_BF_OFF ( 0)
#define SBB_PARAM_H308_VAL_BF_WID (32)
#define SBB_PARAM_H308_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H308_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L308_REG register description at address offset 0x21a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l308_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l308_reg_t;

#define SBB_PARAM_L308_DEFAULT (0x00000000U)
#define SBB_PARAM_L308_RD_MASK (0xffffffffU)
#define SBB_PARAM_L308_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L308_VAL_BF_OFF ( 0)
#define SBB_PARAM_L308_VAL_BF_WID (32)
#define SBB_PARAM_L308_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L308_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H309_REG register description at address offset 0x21a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h309_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h309_reg_t;

#define SBB_PARAM_H309_DEFAULT (0x00000000U)
#define SBB_PARAM_H309_RD_MASK (0xffffffffU)
#define SBB_PARAM_H309_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H309_VAL_BF_OFF ( 0)
#define SBB_PARAM_H309_VAL_BF_WID (32)
#define SBB_PARAM_H309_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H309_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L309_REG register description at address offset 0x21ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l309_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l309_reg_t;

#define SBB_PARAM_L309_DEFAULT (0x00000000U)
#define SBB_PARAM_L309_RD_MASK (0xffffffffU)
#define SBB_PARAM_L309_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L309_VAL_BF_OFF ( 0)
#define SBB_PARAM_L309_VAL_BF_WID (32)
#define SBB_PARAM_L309_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L309_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H310_REG register description at address offset 0x21b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h310_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h310_reg_t;

#define SBB_PARAM_H310_DEFAULT (0x00000000U)
#define SBB_PARAM_H310_RD_MASK (0xffffffffU)
#define SBB_PARAM_H310_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H310_VAL_BF_OFF ( 0)
#define SBB_PARAM_H310_VAL_BF_WID (32)
#define SBB_PARAM_H310_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H310_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L310_REG register description at address offset 0x21b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l310_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l310_reg_t;

#define SBB_PARAM_L310_DEFAULT (0x00000000U)
#define SBB_PARAM_L310_RD_MASK (0xffffffffU)
#define SBB_PARAM_L310_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L310_VAL_BF_OFF ( 0)
#define SBB_PARAM_L310_VAL_BF_WID (32)
#define SBB_PARAM_L310_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L310_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H311_REG register description at address offset 0x21b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h311_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h311_reg_t;

#define SBB_PARAM_H311_DEFAULT (0x00000000U)
#define SBB_PARAM_H311_RD_MASK (0xffffffffU)
#define SBB_PARAM_H311_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H311_VAL_BF_OFF ( 0)
#define SBB_PARAM_H311_VAL_BF_WID (32)
#define SBB_PARAM_H311_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H311_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L311_REG register description at address offset 0x21bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l311_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l311_reg_t;

#define SBB_PARAM_L311_DEFAULT (0x00000000U)
#define SBB_PARAM_L311_RD_MASK (0xffffffffU)
#define SBB_PARAM_L311_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L311_VAL_BF_OFF ( 0)
#define SBB_PARAM_L311_VAL_BF_WID (32)
#define SBB_PARAM_L311_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L311_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H312_REG register description at address offset 0x21c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h312_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h312_reg_t;

#define SBB_PARAM_H312_DEFAULT (0x00000000U)
#define SBB_PARAM_H312_RD_MASK (0xffffffffU)
#define SBB_PARAM_H312_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H312_VAL_BF_OFF ( 0)
#define SBB_PARAM_H312_VAL_BF_WID (32)
#define SBB_PARAM_H312_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H312_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L312_REG register description at address offset 0x21c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l312_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l312_reg_t;

#define SBB_PARAM_L312_DEFAULT (0x00000000U)
#define SBB_PARAM_L312_RD_MASK (0xffffffffU)
#define SBB_PARAM_L312_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L312_VAL_BF_OFF ( 0)
#define SBB_PARAM_L312_VAL_BF_WID (32)
#define SBB_PARAM_L312_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L312_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H313_REG register description at address offset 0x21c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h313_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h313_reg_t;

#define SBB_PARAM_H313_DEFAULT (0x00000000U)
#define SBB_PARAM_H313_RD_MASK (0xffffffffU)
#define SBB_PARAM_H313_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H313_VAL_BF_OFF ( 0)
#define SBB_PARAM_H313_VAL_BF_WID (32)
#define SBB_PARAM_H313_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H313_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L313_REG register description at address offset 0x21cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l313_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l313_reg_t;

#define SBB_PARAM_L313_DEFAULT (0x00000000U)
#define SBB_PARAM_L313_RD_MASK (0xffffffffU)
#define SBB_PARAM_L313_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L313_VAL_BF_OFF ( 0)
#define SBB_PARAM_L313_VAL_BF_WID (32)
#define SBB_PARAM_L313_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L313_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H314_REG register description at address offset 0x21d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h314_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h314_reg_t;

#define SBB_PARAM_H314_DEFAULT (0x00000000U)
#define SBB_PARAM_H314_RD_MASK (0xffffffffU)
#define SBB_PARAM_H314_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H314_VAL_BF_OFF ( 0)
#define SBB_PARAM_H314_VAL_BF_WID (32)
#define SBB_PARAM_H314_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H314_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L314_REG register description at address offset 0x21d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l314_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l314_reg_t;

#define SBB_PARAM_L314_DEFAULT (0x00000000U)
#define SBB_PARAM_L314_RD_MASK (0xffffffffU)
#define SBB_PARAM_L314_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L314_VAL_BF_OFF ( 0)
#define SBB_PARAM_L314_VAL_BF_WID (32)
#define SBB_PARAM_L314_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L314_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H315_REG register description at address offset 0x21d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h315_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h315_reg_t;

#define SBB_PARAM_H315_DEFAULT (0x00000000U)
#define SBB_PARAM_H315_RD_MASK (0xffffffffU)
#define SBB_PARAM_H315_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H315_VAL_BF_OFF ( 0)
#define SBB_PARAM_H315_VAL_BF_WID (32)
#define SBB_PARAM_H315_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H315_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L315_REG register description at address offset 0x21dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l315_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l315_reg_t;

#define SBB_PARAM_L315_DEFAULT (0x00000000U)
#define SBB_PARAM_L315_RD_MASK (0xffffffffU)
#define SBB_PARAM_L315_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L315_VAL_BF_OFF ( 0)
#define SBB_PARAM_L315_VAL_BF_WID (32)
#define SBB_PARAM_L315_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L315_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H316_REG register description at address offset 0x21e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h316_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h316_reg_t;

#define SBB_PARAM_H316_DEFAULT (0x00000000U)
#define SBB_PARAM_H316_RD_MASK (0xffffffffU)
#define SBB_PARAM_H316_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H316_VAL_BF_OFF ( 0)
#define SBB_PARAM_H316_VAL_BF_WID (32)
#define SBB_PARAM_H316_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H316_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L316_REG register description at address offset 0x21e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l316_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l316_reg_t;

#define SBB_PARAM_L316_DEFAULT (0x00000000U)
#define SBB_PARAM_L316_RD_MASK (0xffffffffU)
#define SBB_PARAM_L316_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L316_VAL_BF_OFF ( 0)
#define SBB_PARAM_L316_VAL_BF_WID (32)
#define SBB_PARAM_L316_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L316_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H317_REG register description at address offset 0x21e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h317_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h317_reg_t;

#define SBB_PARAM_H317_DEFAULT (0x00000000U)
#define SBB_PARAM_H317_RD_MASK (0xffffffffU)
#define SBB_PARAM_H317_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H317_VAL_BF_OFF ( 0)
#define SBB_PARAM_H317_VAL_BF_WID (32)
#define SBB_PARAM_H317_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H317_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L317_REG register description at address offset 0x21ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l317_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l317_reg_t;

#define SBB_PARAM_L317_DEFAULT (0x00000000U)
#define SBB_PARAM_L317_RD_MASK (0xffffffffU)
#define SBB_PARAM_L317_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L317_VAL_BF_OFF ( 0)
#define SBB_PARAM_L317_VAL_BF_WID (32)
#define SBB_PARAM_L317_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L317_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H318_REG register description at address offset 0x21f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h318_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h318_reg_t;

#define SBB_PARAM_H318_DEFAULT (0x00000000U)
#define SBB_PARAM_H318_RD_MASK (0xffffffffU)
#define SBB_PARAM_H318_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H318_VAL_BF_OFF ( 0)
#define SBB_PARAM_H318_VAL_BF_WID (32)
#define SBB_PARAM_H318_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H318_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L318_REG register description at address offset 0x21f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l318_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l318_reg_t;

#define SBB_PARAM_L318_DEFAULT (0x00000000U)
#define SBB_PARAM_L318_RD_MASK (0xffffffffU)
#define SBB_PARAM_L318_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L318_VAL_BF_OFF ( 0)
#define SBB_PARAM_L318_VAL_BF_WID (32)
#define SBB_PARAM_L318_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L318_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H319_REG register description at address offset 0x21f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h319_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h319_reg_t;

#define SBB_PARAM_H319_DEFAULT (0x00000000U)
#define SBB_PARAM_H319_RD_MASK (0xffffffffU)
#define SBB_PARAM_H319_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H319_VAL_BF_OFF ( 0)
#define SBB_PARAM_H319_VAL_BF_WID (32)
#define SBB_PARAM_H319_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H319_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L319_REG register description at address offset 0x21fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l319_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l319_reg_t;

#define SBB_PARAM_L319_DEFAULT (0x00000000U)
#define SBB_PARAM_L319_RD_MASK (0xffffffffU)
#define SBB_PARAM_L319_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L319_VAL_BF_OFF ( 0)
#define SBB_PARAM_L319_VAL_BF_WID (32)
#define SBB_PARAM_L319_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L319_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H320_REG register description at address offset 0x2200
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h320_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h320_reg_t;

#define SBB_PARAM_H320_DEFAULT (0x00000000U)
#define SBB_PARAM_H320_RD_MASK (0xffffffffU)
#define SBB_PARAM_H320_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H320_VAL_BF_OFF ( 0)
#define SBB_PARAM_H320_VAL_BF_WID (32)
#define SBB_PARAM_H320_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H320_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L320_REG register description at address offset 0x2204
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l320_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l320_reg_t;

#define SBB_PARAM_L320_DEFAULT (0x00000000U)
#define SBB_PARAM_L320_RD_MASK (0xffffffffU)
#define SBB_PARAM_L320_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L320_VAL_BF_OFF ( 0)
#define SBB_PARAM_L320_VAL_BF_WID (32)
#define SBB_PARAM_L320_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L320_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H321_REG register description at address offset 0x2208
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h321_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h321_reg_t;

#define SBB_PARAM_H321_DEFAULT (0x00000000U)
#define SBB_PARAM_H321_RD_MASK (0xffffffffU)
#define SBB_PARAM_H321_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H321_VAL_BF_OFF ( 0)
#define SBB_PARAM_H321_VAL_BF_WID (32)
#define SBB_PARAM_H321_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H321_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L321_REG register description at address offset 0x220c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l321_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l321_reg_t;

#define SBB_PARAM_L321_DEFAULT (0x00000000U)
#define SBB_PARAM_L321_RD_MASK (0xffffffffU)
#define SBB_PARAM_L321_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L321_VAL_BF_OFF ( 0)
#define SBB_PARAM_L321_VAL_BF_WID (32)
#define SBB_PARAM_L321_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L321_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H322_REG register description at address offset 0x2210
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h322_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h322_reg_t;

#define SBB_PARAM_H322_DEFAULT (0x00000000U)
#define SBB_PARAM_H322_RD_MASK (0xffffffffU)
#define SBB_PARAM_H322_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H322_VAL_BF_OFF ( 0)
#define SBB_PARAM_H322_VAL_BF_WID (32)
#define SBB_PARAM_H322_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H322_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L322_REG register description at address offset 0x2214
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l322_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l322_reg_t;

#define SBB_PARAM_L322_DEFAULT (0x00000000U)
#define SBB_PARAM_L322_RD_MASK (0xffffffffU)
#define SBB_PARAM_L322_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L322_VAL_BF_OFF ( 0)
#define SBB_PARAM_L322_VAL_BF_WID (32)
#define SBB_PARAM_L322_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L322_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H323_REG register description at address offset 0x2218
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h323_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h323_reg_t;

#define SBB_PARAM_H323_DEFAULT (0x00000000U)
#define SBB_PARAM_H323_RD_MASK (0xffffffffU)
#define SBB_PARAM_H323_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H323_VAL_BF_OFF ( 0)
#define SBB_PARAM_H323_VAL_BF_WID (32)
#define SBB_PARAM_H323_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H323_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L323_REG register description at address offset 0x221c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l323_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l323_reg_t;

#define SBB_PARAM_L323_DEFAULT (0x00000000U)
#define SBB_PARAM_L323_RD_MASK (0xffffffffU)
#define SBB_PARAM_L323_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L323_VAL_BF_OFF ( 0)
#define SBB_PARAM_L323_VAL_BF_WID (32)
#define SBB_PARAM_L323_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L323_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H324_REG register description at address offset 0x2220
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h324_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h324_reg_t;

#define SBB_PARAM_H324_DEFAULT (0x00000000U)
#define SBB_PARAM_H324_RD_MASK (0xffffffffU)
#define SBB_PARAM_H324_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H324_VAL_BF_OFF ( 0)
#define SBB_PARAM_H324_VAL_BF_WID (32)
#define SBB_PARAM_H324_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H324_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L324_REG register description at address offset 0x2224
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l324_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l324_reg_t;

#define SBB_PARAM_L324_DEFAULT (0x00000000U)
#define SBB_PARAM_L324_RD_MASK (0xffffffffU)
#define SBB_PARAM_L324_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L324_VAL_BF_OFF ( 0)
#define SBB_PARAM_L324_VAL_BF_WID (32)
#define SBB_PARAM_L324_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L324_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H325_REG register description at address offset 0x2228
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h325_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h325_reg_t;

#define SBB_PARAM_H325_DEFAULT (0x00000000U)
#define SBB_PARAM_H325_RD_MASK (0xffffffffU)
#define SBB_PARAM_H325_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H325_VAL_BF_OFF ( 0)
#define SBB_PARAM_H325_VAL_BF_WID (32)
#define SBB_PARAM_H325_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H325_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L325_REG register description at address offset 0x222c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l325_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l325_reg_t;

#define SBB_PARAM_L325_DEFAULT (0x00000000U)
#define SBB_PARAM_L325_RD_MASK (0xffffffffU)
#define SBB_PARAM_L325_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L325_VAL_BF_OFF ( 0)
#define SBB_PARAM_L325_VAL_BF_WID (32)
#define SBB_PARAM_L325_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L325_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H326_REG register description at address offset 0x2230
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h326_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h326_reg_t;

#define SBB_PARAM_H326_DEFAULT (0x00000000U)
#define SBB_PARAM_H326_RD_MASK (0xffffffffU)
#define SBB_PARAM_H326_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H326_VAL_BF_OFF ( 0)
#define SBB_PARAM_H326_VAL_BF_WID (32)
#define SBB_PARAM_H326_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H326_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L326_REG register description at address offset 0x2234
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l326_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l326_reg_t;

#define SBB_PARAM_L326_DEFAULT (0x00000000U)
#define SBB_PARAM_L326_RD_MASK (0xffffffffU)
#define SBB_PARAM_L326_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L326_VAL_BF_OFF ( 0)
#define SBB_PARAM_L326_VAL_BF_WID (32)
#define SBB_PARAM_L326_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L326_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H327_REG register description at address offset 0x2238
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h327_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h327_reg_t;

#define SBB_PARAM_H327_DEFAULT (0x00000000U)
#define SBB_PARAM_H327_RD_MASK (0xffffffffU)
#define SBB_PARAM_H327_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H327_VAL_BF_OFF ( 0)
#define SBB_PARAM_H327_VAL_BF_WID (32)
#define SBB_PARAM_H327_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H327_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L327_REG register description at address offset 0x223c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l327_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l327_reg_t;

#define SBB_PARAM_L327_DEFAULT (0x00000000U)
#define SBB_PARAM_L327_RD_MASK (0xffffffffU)
#define SBB_PARAM_L327_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L327_VAL_BF_OFF ( 0)
#define SBB_PARAM_L327_VAL_BF_WID (32)
#define SBB_PARAM_L327_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L327_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H328_REG register description at address offset 0x2240
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h328_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h328_reg_t;

#define SBB_PARAM_H328_DEFAULT (0x00000000U)
#define SBB_PARAM_H328_RD_MASK (0xffffffffU)
#define SBB_PARAM_H328_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H328_VAL_BF_OFF ( 0)
#define SBB_PARAM_H328_VAL_BF_WID (32)
#define SBB_PARAM_H328_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H328_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L328_REG register description at address offset 0x2244
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l328_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l328_reg_t;

#define SBB_PARAM_L328_DEFAULT (0x00000000U)
#define SBB_PARAM_L328_RD_MASK (0xffffffffU)
#define SBB_PARAM_L328_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L328_VAL_BF_OFF ( 0)
#define SBB_PARAM_L328_VAL_BF_WID (32)
#define SBB_PARAM_L328_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L328_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H329_REG register description at address offset 0x2248
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h329_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h329_reg_t;

#define SBB_PARAM_H329_DEFAULT (0x00000000U)
#define SBB_PARAM_H329_RD_MASK (0xffffffffU)
#define SBB_PARAM_H329_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H329_VAL_BF_OFF ( 0)
#define SBB_PARAM_H329_VAL_BF_WID (32)
#define SBB_PARAM_H329_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H329_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L329_REG register description at address offset 0x224c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l329_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l329_reg_t;

#define SBB_PARAM_L329_DEFAULT (0x00000000U)
#define SBB_PARAM_L329_RD_MASK (0xffffffffU)
#define SBB_PARAM_L329_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L329_VAL_BF_OFF ( 0)
#define SBB_PARAM_L329_VAL_BF_WID (32)
#define SBB_PARAM_L329_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L329_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H330_REG register description at address offset 0x2250
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h330_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h330_reg_t;

#define SBB_PARAM_H330_DEFAULT (0x00000000U)
#define SBB_PARAM_H330_RD_MASK (0xffffffffU)
#define SBB_PARAM_H330_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H330_VAL_BF_OFF ( 0)
#define SBB_PARAM_H330_VAL_BF_WID (32)
#define SBB_PARAM_H330_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H330_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L330_REG register description at address offset 0x2254
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l330_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l330_reg_t;

#define SBB_PARAM_L330_DEFAULT (0x00000000U)
#define SBB_PARAM_L330_RD_MASK (0xffffffffU)
#define SBB_PARAM_L330_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L330_VAL_BF_OFF ( 0)
#define SBB_PARAM_L330_VAL_BF_WID (32)
#define SBB_PARAM_L330_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L330_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H331_REG register description at address offset 0x2258
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h331_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h331_reg_t;

#define SBB_PARAM_H331_DEFAULT (0x00000000U)
#define SBB_PARAM_H331_RD_MASK (0xffffffffU)
#define SBB_PARAM_H331_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H331_VAL_BF_OFF ( 0)
#define SBB_PARAM_H331_VAL_BF_WID (32)
#define SBB_PARAM_H331_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H331_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L331_REG register description at address offset 0x225c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l331_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l331_reg_t;

#define SBB_PARAM_L331_DEFAULT (0x00000000U)
#define SBB_PARAM_L331_RD_MASK (0xffffffffU)
#define SBB_PARAM_L331_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L331_VAL_BF_OFF ( 0)
#define SBB_PARAM_L331_VAL_BF_WID (32)
#define SBB_PARAM_L331_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L331_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H332_REG register description at address offset 0x2260
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h332_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h332_reg_t;

#define SBB_PARAM_H332_DEFAULT (0x00000000U)
#define SBB_PARAM_H332_RD_MASK (0xffffffffU)
#define SBB_PARAM_H332_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H332_VAL_BF_OFF ( 0)
#define SBB_PARAM_H332_VAL_BF_WID (32)
#define SBB_PARAM_H332_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H332_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L332_REG register description at address offset 0x2264
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l332_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l332_reg_t;

#define SBB_PARAM_L332_DEFAULT (0x00000000U)
#define SBB_PARAM_L332_RD_MASK (0xffffffffU)
#define SBB_PARAM_L332_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L332_VAL_BF_OFF ( 0)
#define SBB_PARAM_L332_VAL_BF_WID (32)
#define SBB_PARAM_L332_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L332_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H333_REG register description at address offset 0x2268
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h333_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h333_reg_t;

#define SBB_PARAM_H333_DEFAULT (0x00000000U)
#define SBB_PARAM_H333_RD_MASK (0xffffffffU)
#define SBB_PARAM_H333_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H333_VAL_BF_OFF ( 0)
#define SBB_PARAM_H333_VAL_BF_WID (32)
#define SBB_PARAM_H333_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H333_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L333_REG register description at address offset 0x226c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l333_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l333_reg_t;

#define SBB_PARAM_L333_DEFAULT (0x00000000U)
#define SBB_PARAM_L333_RD_MASK (0xffffffffU)
#define SBB_PARAM_L333_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L333_VAL_BF_OFF ( 0)
#define SBB_PARAM_L333_VAL_BF_WID (32)
#define SBB_PARAM_L333_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L333_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H334_REG register description at address offset 0x2270
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h334_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h334_reg_t;

#define SBB_PARAM_H334_DEFAULT (0x00000000U)
#define SBB_PARAM_H334_RD_MASK (0xffffffffU)
#define SBB_PARAM_H334_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H334_VAL_BF_OFF ( 0)
#define SBB_PARAM_H334_VAL_BF_WID (32)
#define SBB_PARAM_H334_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H334_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L334_REG register description at address offset 0x2274
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l334_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l334_reg_t;

#define SBB_PARAM_L334_DEFAULT (0x00000000U)
#define SBB_PARAM_L334_RD_MASK (0xffffffffU)
#define SBB_PARAM_L334_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L334_VAL_BF_OFF ( 0)
#define SBB_PARAM_L334_VAL_BF_WID (32)
#define SBB_PARAM_L334_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L334_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H335_REG register description at address offset 0x2278
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h335_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h335_reg_t;

#define SBB_PARAM_H335_DEFAULT (0x00000000U)
#define SBB_PARAM_H335_RD_MASK (0xffffffffU)
#define SBB_PARAM_H335_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H335_VAL_BF_OFF ( 0)
#define SBB_PARAM_H335_VAL_BF_WID (32)
#define SBB_PARAM_H335_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H335_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L335_REG register description at address offset 0x227c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l335_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l335_reg_t;

#define SBB_PARAM_L335_DEFAULT (0x00000000U)
#define SBB_PARAM_L335_RD_MASK (0xffffffffU)
#define SBB_PARAM_L335_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L335_VAL_BF_OFF ( 0)
#define SBB_PARAM_L335_VAL_BF_WID (32)
#define SBB_PARAM_L335_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L335_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H336_REG register description at address offset 0x2280
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h336_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h336_reg_t;

#define SBB_PARAM_H336_DEFAULT (0x00000000U)
#define SBB_PARAM_H336_RD_MASK (0xffffffffU)
#define SBB_PARAM_H336_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H336_VAL_BF_OFF ( 0)
#define SBB_PARAM_H336_VAL_BF_WID (32)
#define SBB_PARAM_H336_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H336_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L336_REG register description at address offset 0x2284
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l336_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l336_reg_t;

#define SBB_PARAM_L336_DEFAULT (0x00000000U)
#define SBB_PARAM_L336_RD_MASK (0xffffffffU)
#define SBB_PARAM_L336_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L336_VAL_BF_OFF ( 0)
#define SBB_PARAM_L336_VAL_BF_WID (32)
#define SBB_PARAM_L336_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L336_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H337_REG register description at address offset 0x2288
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h337_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h337_reg_t;

#define SBB_PARAM_H337_DEFAULT (0x00000000U)
#define SBB_PARAM_H337_RD_MASK (0xffffffffU)
#define SBB_PARAM_H337_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H337_VAL_BF_OFF ( 0)
#define SBB_PARAM_H337_VAL_BF_WID (32)
#define SBB_PARAM_H337_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H337_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L337_REG register description at address offset 0x228c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l337_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l337_reg_t;

#define SBB_PARAM_L337_DEFAULT (0x00000000U)
#define SBB_PARAM_L337_RD_MASK (0xffffffffU)
#define SBB_PARAM_L337_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L337_VAL_BF_OFF ( 0)
#define SBB_PARAM_L337_VAL_BF_WID (32)
#define SBB_PARAM_L337_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L337_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H338_REG register description at address offset 0x2290
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h338_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h338_reg_t;

#define SBB_PARAM_H338_DEFAULT (0x00000000U)
#define SBB_PARAM_H338_RD_MASK (0xffffffffU)
#define SBB_PARAM_H338_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H338_VAL_BF_OFF ( 0)
#define SBB_PARAM_H338_VAL_BF_WID (32)
#define SBB_PARAM_H338_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H338_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L338_REG register description at address offset 0x2294
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l338_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l338_reg_t;

#define SBB_PARAM_L338_DEFAULT (0x00000000U)
#define SBB_PARAM_L338_RD_MASK (0xffffffffU)
#define SBB_PARAM_L338_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L338_VAL_BF_OFF ( 0)
#define SBB_PARAM_L338_VAL_BF_WID (32)
#define SBB_PARAM_L338_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L338_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H339_REG register description at address offset 0x2298
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h339_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h339_reg_t;

#define SBB_PARAM_H339_DEFAULT (0x00000000U)
#define SBB_PARAM_H339_RD_MASK (0xffffffffU)
#define SBB_PARAM_H339_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H339_VAL_BF_OFF ( 0)
#define SBB_PARAM_H339_VAL_BF_WID (32)
#define SBB_PARAM_H339_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H339_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L339_REG register description at address offset 0x229c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l339_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l339_reg_t;

#define SBB_PARAM_L339_DEFAULT (0x00000000U)
#define SBB_PARAM_L339_RD_MASK (0xffffffffU)
#define SBB_PARAM_L339_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L339_VAL_BF_OFF ( 0)
#define SBB_PARAM_L339_VAL_BF_WID (32)
#define SBB_PARAM_L339_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L339_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H340_REG register description at address offset 0x22a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h340_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h340_reg_t;

#define SBB_PARAM_H340_DEFAULT (0x00000000U)
#define SBB_PARAM_H340_RD_MASK (0xffffffffU)
#define SBB_PARAM_H340_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H340_VAL_BF_OFF ( 0)
#define SBB_PARAM_H340_VAL_BF_WID (32)
#define SBB_PARAM_H340_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H340_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L340_REG register description at address offset 0x22a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l340_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l340_reg_t;

#define SBB_PARAM_L340_DEFAULT (0x00000000U)
#define SBB_PARAM_L340_RD_MASK (0xffffffffU)
#define SBB_PARAM_L340_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L340_VAL_BF_OFF ( 0)
#define SBB_PARAM_L340_VAL_BF_WID (32)
#define SBB_PARAM_L340_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L340_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H341_REG register description at address offset 0x22a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h341_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h341_reg_t;

#define SBB_PARAM_H341_DEFAULT (0x00000000U)
#define SBB_PARAM_H341_RD_MASK (0xffffffffU)
#define SBB_PARAM_H341_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H341_VAL_BF_OFF ( 0)
#define SBB_PARAM_H341_VAL_BF_WID (32)
#define SBB_PARAM_H341_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H341_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L341_REG register description at address offset 0x22ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l341_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l341_reg_t;

#define SBB_PARAM_L341_DEFAULT (0x00000000U)
#define SBB_PARAM_L341_RD_MASK (0xffffffffU)
#define SBB_PARAM_L341_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L341_VAL_BF_OFF ( 0)
#define SBB_PARAM_L341_VAL_BF_WID (32)
#define SBB_PARAM_L341_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L341_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H342_REG register description at address offset 0x22b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h342_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h342_reg_t;

#define SBB_PARAM_H342_DEFAULT (0x00000000U)
#define SBB_PARAM_H342_RD_MASK (0xffffffffU)
#define SBB_PARAM_H342_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H342_VAL_BF_OFF ( 0)
#define SBB_PARAM_H342_VAL_BF_WID (32)
#define SBB_PARAM_H342_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H342_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L342_REG register description at address offset 0x22b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l342_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l342_reg_t;

#define SBB_PARAM_L342_DEFAULT (0x00000000U)
#define SBB_PARAM_L342_RD_MASK (0xffffffffU)
#define SBB_PARAM_L342_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L342_VAL_BF_OFF ( 0)
#define SBB_PARAM_L342_VAL_BF_WID (32)
#define SBB_PARAM_L342_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L342_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H343_REG register description at address offset 0x22b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h343_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h343_reg_t;

#define SBB_PARAM_H343_DEFAULT (0x00000000U)
#define SBB_PARAM_H343_RD_MASK (0xffffffffU)
#define SBB_PARAM_H343_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H343_VAL_BF_OFF ( 0)
#define SBB_PARAM_H343_VAL_BF_WID (32)
#define SBB_PARAM_H343_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H343_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L343_REG register description at address offset 0x22bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l343_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l343_reg_t;

#define SBB_PARAM_L343_DEFAULT (0x00000000U)
#define SBB_PARAM_L343_RD_MASK (0xffffffffU)
#define SBB_PARAM_L343_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L343_VAL_BF_OFF ( 0)
#define SBB_PARAM_L343_VAL_BF_WID (32)
#define SBB_PARAM_L343_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L343_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H344_REG register description at address offset 0x22c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h344_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h344_reg_t;

#define SBB_PARAM_H344_DEFAULT (0x00000000U)
#define SBB_PARAM_H344_RD_MASK (0xffffffffU)
#define SBB_PARAM_H344_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H344_VAL_BF_OFF ( 0)
#define SBB_PARAM_H344_VAL_BF_WID (32)
#define SBB_PARAM_H344_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H344_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L344_REG register description at address offset 0x22c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l344_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l344_reg_t;

#define SBB_PARAM_L344_DEFAULT (0x00000000U)
#define SBB_PARAM_L344_RD_MASK (0xffffffffU)
#define SBB_PARAM_L344_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L344_VAL_BF_OFF ( 0)
#define SBB_PARAM_L344_VAL_BF_WID (32)
#define SBB_PARAM_L344_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L344_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H345_REG register description at address offset 0x22c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h345_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h345_reg_t;

#define SBB_PARAM_H345_DEFAULT (0x00000000U)
#define SBB_PARAM_H345_RD_MASK (0xffffffffU)
#define SBB_PARAM_H345_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H345_VAL_BF_OFF ( 0)
#define SBB_PARAM_H345_VAL_BF_WID (32)
#define SBB_PARAM_H345_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H345_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L345_REG register description at address offset 0x22cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l345_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l345_reg_t;

#define SBB_PARAM_L345_DEFAULT (0x00000000U)
#define SBB_PARAM_L345_RD_MASK (0xffffffffU)
#define SBB_PARAM_L345_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L345_VAL_BF_OFF ( 0)
#define SBB_PARAM_L345_VAL_BF_WID (32)
#define SBB_PARAM_L345_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L345_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H346_REG register description at address offset 0x22d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h346_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h346_reg_t;

#define SBB_PARAM_H346_DEFAULT (0x00000000U)
#define SBB_PARAM_H346_RD_MASK (0xffffffffU)
#define SBB_PARAM_H346_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H346_VAL_BF_OFF ( 0)
#define SBB_PARAM_H346_VAL_BF_WID (32)
#define SBB_PARAM_H346_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H346_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L346_REG register description at address offset 0x22d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l346_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l346_reg_t;

#define SBB_PARAM_L346_DEFAULT (0x00000000U)
#define SBB_PARAM_L346_RD_MASK (0xffffffffU)
#define SBB_PARAM_L346_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L346_VAL_BF_OFF ( 0)
#define SBB_PARAM_L346_VAL_BF_WID (32)
#define SBB_PARAM_L346_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L346_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H347_REG register description at address offset 0x22d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h347_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h347_reg_t;

#define SBB_PARAM_H347_DEFAULT (0x00000000U)
#define SBB_PARAM_H347_RD_MASK (0xffffffffU)
#define SBB_PARAM_H347_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H347_VAL_BF_OFF ( 0)
#define SBB_PARAM_H347_VAL_BF_WID (32)
#define SBB_PARAM_H347_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H347_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L347_REG register description at address offset 0x22dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l347_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l347_reg_t;

#define SBB_PARAM_L347_DEFAULT (0x00000000U)
#define SBB_PARAM_L347_RD_MASK (0xffffffffU)
#define SBB_PARAM_L347_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L347_VAL_BF_OFF ( 0)
#define SBB_PARAM_L347_VAL_BF_WID (32)
#define SBB_PARAM_L347_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L347_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H348_REG register description at address offset 0x22e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h348_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h348_reg_t;

#define SBB_PARAM_H348_DEFAULT (0x00000000U)
#define SBB_PARAM_H348_RD_MASK (0xffffffffU)
#define SBB_PARAM_H348_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H348_VAL_BF_OFF ( 0)
#define SBB_PARAM_H348_VAL_BF_WID (32)
#define SBB_PARAM_H348_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H348_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L348_REG register description at address offset 0x22e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l348_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l348_reg_t;

#define SBB_PARAM_L348_DEFAULT (0x00000000U)
#define SBB_PARAM_L348_RD_MASK (0xffffffffU)
#define SBB_PARAM_L348_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L348_VAL_BF_OFF ( 0)
#define SBB_PARAM_L348_VAL_BF_WID (32)
#define SBB_PARAM_L348_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L348_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H349_REG register description at address offset 0x22e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h349_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h349_reg_t;

#define SBB_PARAM_H349_DEFAULT (0x00000000U)
#define SBB_PARAM_H349_RD_MASK (0xffffffffU)
#define SBB_PARAM_H349_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H349_VAL_BF_OFF ( 0)
#define SBB_PARAM_H349_VAL_BF_WID (32)
#define SBB_PARAM_H349_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H349_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L349_REG register description at address offset 0x22ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l349_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l349_reg_t;

#define SBB_PARAM_L349_DEFAULT (0x00000000U)
#define SBB_PARAM_L349_RD_MASK (0xffffffffU)
#define SBB_PARAM_L349_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L349_VAL_BF_OFF ( 0)
#define SBB_PARAM_L349_VAL_BF_WID (32)
#define SBB_PARAM_L349_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L349_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H350_REG register description at address offset 0x22f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h350_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h350_reg_t;

#define SBB_PARAM_H350_DEFAULT (0x00000000U)
#define SBB_PARAM_H350_RD_MASK (0xffffffffU)
#define SBB_PARAM_H350_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H350_VAL_BF_OFF ( 0)
#define SBB_PARAM_H350_VAL_BF_WID (32)
#define SBB_PARAM_H350_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H350_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L350_REG register description at address offset 0x22f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l350_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l350_reg_t;

#define SBB_PARAM_L350_DEFAULT (0x00000000U)
#define SBB_PARAM_L350_RD_MASK (0xffffffffU)
#define SBB_PARAM_L350_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L350_VAL_BF_OFF ( 0)
#define SBB_PARAM_L350_VAL_BF_WID (32)
#define SBB_PARAM_L350_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L350_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H351_REG register description at address offset 0x22f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h351_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h351_reg_t;

#define SBB_PARAM_H351_DEFAULT (0x00000000U)
#define SBB_PARAM_H351_RD_MASK (0xffffffffU)
#define SBB_PARAM_H351_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H351_VAL_BF_OFF ( 0)
#define SBB_PARAM_H351_VAL_BF_WID (32)
#define SBB_PARAM_H351_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H351_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L351_REG register description at address offset 0x22fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l351_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l351_reg_t;

#define SBB_PARAM_L351_DEFAULT (0x00000000U)
#define SBB_PARAM_L351_RD_MASK (0xffffffffU)
#define SBB_PARAM_L351_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L351_VAL_BF_OFF ( 0)
#define SBB_PARAM_L351_VAL_BF_WID (32)
#define SBB_PARAM_L351_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L351_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H352_REG register description at address offset 0x2300
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h352_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h352_reg_t;

#define SBB_PARAM_H352_DEFAULT (0x00000000U)
#define SBB_PARAM_H352_RD_MASK (0xffffffffU)
#define SBB_PARAM_H352_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H352_VAL_BF_OFF ( 0)
#define SBB_PARAM_H352_VAL_BF_WID (32)
#define SBB_PARAM_H352_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H352_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L352_REG register description at address offset 0x2304
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l352_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l352_reg_t;

#define SBB_PARAM_L352_DEFAULT (0x00000000U)
#define SBB_PARAM_L352_RD_MASK (0xffffffffU)
#define SBB_PARAM_L352_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L352_VAL_BF_OFF ( 0)
#define SBB_PARAM_L352_VAL_BF_WID (32)
#define SBB_PARAM_L352_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L352_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H353_REG register description at address offset 0x2308
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h353_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h353_reg_t;

#define SBB_PARAM_H353_DEFAULT (0x00000000U)
#define SBB_PARAM_H353_RD_MASK (0xffffffffU)
#define SBB_PARAM_H353_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H353_VAL_BF_OFF ( 0)
#define SBB_PARAM_H353_VAL_BF_WID (32)
#define SBB_PARAM_H353_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H353_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L353_REG register description at address offset 0x230c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l353_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l353_reg_t;

#define SBB_PARAM_L353_DEFAULT (0x00000000U)
#define SBB_PARAM_L353_RD_MASK (0xffffffffU)
#define SBB_PARAM_L353_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L353_VAL_BF_OFF ( 0)
#define SBB_PARAM_L353_VAL_BF_WID (32)
#define SBB_PARAM_L353_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L353_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H354_REG register description at address offset 0x2310
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h354_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h354_reg_t;

#define SBB_PARAM_H354_DEFAULT (0x00000000U)
#define SBB_PARAM_H354_RD_MASK (0xffffffffU)
#define SBB_PARAM_H354_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H354_VAL_BF_OFF ( 0)
#define SBB_PARAM_H354_VAL_BF_WID (32)
#define SBB_PARAM_H354_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H354_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L354_REG register description at address offset 0x2314
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l354_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l354_reg_t;

#define SBB_PARAM_L354_DEFAULT (0x00000000U)
#define SBB_PARAM_L354_RD_MASK (0xffffffffU)
#define SBB_PARAM_L354_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L354_VAL_BF_OFF ( 0)
#define SBB_PARAM_L354_VAL_BF_WID (32)
#define SBB_PARAM_L354_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L354_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H355_REG register description at address offset 0x2318
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h355_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h355_reg_t;

#define SBB_PARAM_H355_DEFAULT (0x00000000U)
#define SBB_PARAM_H355_RD_MASK (0xffffffffU)
#define SBB_PARAM_H355_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H355_VAL_BF_OFF ( 0)
#define SBB_PARAM_H355_VAL_BF_WID (32)
#define SBB_PARAM_H355_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H355_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L355_REG register description at address offset 0x231c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l355_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l355_reg_t;

#define SBB_PARAM_L355_DEFAULT (0x00000000U)
#define SBB_PARAM_L355_RD_MASK (0xffffffffU)
#define SBB_PARAM_L355_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L355_VAL_BF_OFF ( 0)
#define SBB_PARAM_L355_VAL_BF_WID (32)
#define SBB_PARAM_L355_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L355_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H356_REG register description at address offset 0x2320
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h356_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h356_reg_t;

#define SBB_PARAM_H356_DEFAULT (0x00000000U)
#define SBB_PARAM_H356_RD_MASK (0xffffffffU)
#define SBB_PARAM_H356_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H356_VAL_BF_OFF ( 0)
#define SBB_PARAM_H356_VAL_BF_WID (32)
#define SBB_PARAM_H356_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H356_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L356_REG register description at address offset 0x2324
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l356_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l356_reg_t;

#define SBB_PARAM_L356_DEFAULT (0x00000000U)
#define SBB_PARAM_L356_RD_MASK (0xffffffffU)
#define SBB_PARAM_L356_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L356_VAL_BF_OFF ( 0)
#define SBB_PARAM_L356_VAL_BF_WID (32)
#define SBB_PARAM_L356_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L356_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H357_REG register description at address offset 0x2328
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h357_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h357_reg_t;

#define SBB_PARAM_H357_DEFAULT (0x00000000U)
#define SBB_PARAM_H357_RD_MASK (0xffffffffU)
#define SBB_PARAM_H357_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H357_VAL_BF_OFF ( 0)
#define SBB_PARAM_H357_VAL_BF_WID (32)
#define SBB_PARAM_H357_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H357_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L357_REG register description at address offset 0x232c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l357_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l357_reg_t;

#define SBB_PARAM_L357_DEFAULT (0x00000000U)
#define SBB_PARAM_L357_RD_MASK (0xffffffffU)
#define SBB_PARAM_L357_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L357_VAL_BF_OFF ( 0)
#define SBB_PARAM_L357_VAL_BF_WID (32)
#define SBB_PARAM_L357_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L357_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H358_REG register description at address offset 0x2330
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h358_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h358_reg_t;

#define SBB_PARAM_H358_DEFAULT (0x00000000U)
#define SBB_PARAM_H358_RD_MASK (0xffffffffU)
#define SBB_PARAM_H358_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H358_VAL_BF_OFF ( 0)
#define SBB_PARAM_H358_VAL_BF_WID (32)
#define SBB_PARAM_H358_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H358_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L358_REG register description at address offset 0x2334
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l358_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l358_reg_t;

#define SBB_PARAM_L358_DEFAULT (0x00000000U)
#define SBB_PARAM_L358_RD_MASK (0xffffffffU)
#define SBB_PARAM_L358_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L358_VAL_BF_OFF ( 0)
#define SBB_PARAM_L358_VAL_BF_WID (32)
#define SBB_PARAM_L358_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L358_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H359_REG register description at address offset 0x2338
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h359_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h359_reg_t;

#define SBB_PARAM_H359_DEFAULT (0x00000000U)
#define SBB_PARAM_H359_RD_MASK (0xffffffffU)
#define SBB_PARAM_H359_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H359_VAL_BF_OFF ( 0)
#define SBB_PARAM_H359_VAL_BF_WID (32)
#define SBB_PARAM_H359_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H359_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L359_REG register description at address offset 0x233c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l359_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l359_reg_t;

#define SBB_PARAM_L359_DEFAULT (0x00000000U)
#define SBB_PARAM_L359_RD_MASK (0xffffffffU)
#define SBB_PARAM_L359_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L359_VAL_BF_OFF ( 0)
#define SBB_PARAM_L359_VAL_BF_WID (32)
#define SBB_PARAM_L359_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L359_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H360_REG register description at address offset 0x2340
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h360_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h360_reg_t;

#define SBB_PARAM_H360_DEFAULT (0x00000000U)
#define SBB_PARAM_H360_RD_MASK (0xffffffffU)
#define SBB_PARAM_H360_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H360_VAL_BF_OFF ( 0)
#define SBB_PARAM_H360_VAL_BF_WID (32)
#define SBB_PARAM_H360_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H360_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L360_REG register description at address offset 0x2344
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l360_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l360_reg_t;

#define SBB_PARAM_L360_DEFAULT (0x00000000U)
#define SBB_PARAM_L360_RD_MASK (0xffffffffU)
#define SBB_PARAM_L360_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L360_VAL_BF_OFF ( 0)
#define SBB_PARAM_L360_VAL_BF_WID (32)
#define SBB_PARAM_L360_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L360_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H361_REG register description at address offset 0x2348
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h361_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h361_reg_t;

#define SBB_PARAM_H361_DEFAULT (0x00000000U)
#define SBB_PARAM_H361_RD_MASK (0xffffffffU)
#define SBB_PARAM_H361_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H361_VAL_BF_OFF ( 0)
#define SBB_PARAM_H361_VAL_BF_WID (32)
#define SBB_PARAM_H361_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H361_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L361_REG register description at address offset 0x234c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l361_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l361_reg_t;

#define SBB_PARAM_L361_DEFAULT (0x00000000U)
#define SBB_PARAM_L361_RD_MASK (0xffffffffU)
#define SBB_PARAM_L361_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L361_VAL_BF_OFF ( 0)
#define SBB_PARAM_L361_VAL_BF_WID (32)
#define SBB_PARAM_L361_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L361_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H362_REG register description at address offset 0x2350
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h362_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h362_reg_t;

#define SBB_PARAM_H362_DEFAULT (0x00000000U)
#define SBB_PARAM_H362_RD_MASK (0xffffffffU)
#define SBB_PARAM_H362_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H362_VAL_BF_OFF ( 0)
#define SBB_PARAM_H362_VAL_BF_WID (32)
#define SBB_PARAM_H362_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H362_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L362_REG register description at address offset 0x2354
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l362_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l362_reg_t;

#define SBB_PARAM_L362_DEFAULT (0x00000000U)
#define SBB_PARAM_L362_RD_MASK (0xffffffffU)
#define SBB_PARAM_L362_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L362_VAL_BF_OFF ( 0)
#define SBB_PARAM_L362_VAL_BF_WID (32)
#define SBB_PARAM_L362_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L362_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H363_REG register description at address offset 0x2358
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h363_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h363_reg_t;

#define SBB_PARAM_H363_DEFAULT (0x00000000U)
#define SBB_PARAM_H363_RD_MASK (0xffffffffU)
#define SBB_PARAM_H363_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H363_VAL_BF_OFF ( 0)
#define SBB_PARAM_H363_VAL_BF_WID (32)
#define SBB_PARAM_H363_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H363_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L363_REG register description at address offset 0x235c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l363_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l363_reg_t;

#define SBB_PARAM_L363_DEFAULT (0x00000000U)
#define SBB_PARAM_L363_RD_MASK (0xffffffffU)
#define SBB_PARAM_L363_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L363_VAL_BF_OFF ( 0)
#define SBB_PARAM_L363_VAL_BF_WID (32)
#define SBB_PARAM_L363_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L363_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H364_REG register description at address offset 0x2360
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h364_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h364_reg_t;

#define SBB_PARAM_H364_DEFAULT (0x00000000U)
#define SBB_PARAM_H364_RD_MASK (0xffffffffU)
#define SBB_PARAM_H364_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H364_VAL_BF_OFF ( 0)
#define SBB_PARAM_H364_VAL_BF_WID (32)
#define SBB_PARAM_H364_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H364_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L364_REG register description at address offset 0x2364
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l364_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l364_reg_t;

#define SBB_PARAM_L364_DEFAULT (0x00000000U)
#define SBB_PARAM_L364_RD_MASK (0xffffffffU)
#define SBB_PARAM_L364_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L364_VAL_BF_OFF ( 0)
#define SBB_PARAM_L364_VAL_BF_WID (32)
#define SBB_PARAM_L364_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L364_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H365_REG register description at address offset 0x2368
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h365_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h365_reg_t;

#define SBB_PARAM_H365_DEFAULT (0x00000000U)
#define SBB_PARAM_H365_RD_MASK (0xffffffffU)
#define SBB_PARAM_H365_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H365_VAL_BF_OFF ( 0)
#define SBB_PARAM_H365_VAL_BF_WID (32)
#define SBB_PARAM_H365_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H365_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L365_REG register description at address offset 0x236c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l365_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l365_reg_t;

#define SBB_PARAM_L365_DEFAULT (0x00000000U)
#define SBB_PARAM_L365_RD_MASK (0xffffffffU)
#define SBB_PARAM_L365_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L365_VAL_BF_OFF ( 0)
#define SBB_PARAM_L365_VAL_BF_WID (32)
#define SBB_PARAM_L365_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L365_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H366_REG register description at address offset 0x2370
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h366_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h366_reg_t;

#define SBB_PARAM_H366_DEFAULT (0x00000000U)
#define SBB_PARAM_H366_RD_MASK (0xffffffffU)
#define SBB_PARAM_H366_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H366_VAL_BF_OFF ( 0)
#define SBB_PARAM_H366_VAL_BF_WID (32)
#define SBB_PARAM_H366_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H366_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L366_REG register description at address offset 0x2374
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l366_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l366_reg_t;

#define SBB_PARAM_L366_DEFAULT (0x00000000U)
#define SBB_PARAM_L366_RD_MASK (0xffffffffU)
#define SBB_PARAM_L366_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L366_VAL_BF_OFF ( 0)
#define SBB_PARAM_L366_VAL_BF_WID (32)
#define SBB_PARAM_L366_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L366_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H367_REG register description at address offset 0x2378
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h367_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h367_reg_t;

#define SBB_PARAM_H367_DEFAULT (0x00000000U)
#define SBB_PARAM_H367_RD_MASK (0xffffffffU)
#define SBB_PARAM_H367_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H367_VAL_BF_OFF ( 0)
#define SBB_PARAM_H367_VAL_BF_WID (32)
#define SBB_PARAM_H367_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H367_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L367_REG register description at address offset 0x237c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l367_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l367_reg_t;

#define SBB_PARAM_L367_DEFAULT (0x00000000U)
#define SBB_PARAM_L367_RD_MASK (0xffffffffU)
#define SBB_PARAM_L367_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L367_VAL_BF_OFF ( 0)
#define SBB_PARAM_L367_VAL_BF_WID (32)
#define SBB_PARAM_L367_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L367_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H368_REG register description at address offset 0x2380
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h368_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h368_reg_t;

#define SBB_PARAM_H368_DEFAULT (0x00000000U)
#define SBB_PARAM_H368_RD_MASK (0xffffffffU)
#define SBB_PARAM_H368_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H368_VAL_BF_OFF ( 0)
#define SBB_PARAM_H368_VAL_BF_WID (32)
#define SBB_PARAM_H368_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H368_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L368_REG register description at address offset 0x2384
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l368_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l368_reg_t;

#define SBB_PARAM_L368_DEFAULT (0x00000000U)
#define SBB_PARAM_L368_RD_MASK (0xffffffffU)
#define SBB_PARAM_L368_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L368_VAL_BF_OFF ( 0)
#define SBB_PARAM_L368_VAL_BF_WID (32)
#define SBB_PARAM_L368_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L368_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H369_REG register description at address offset 0x2388
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h369_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h369_reg_t;

#define SBB_PARAM_H369_DEFAULT (0x00000000U)
#define SBB_PARAM_H369_RD_MASK (0xffffffffU)
#define SBB_PARAM_H369_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H369_VAL_BF_OFF ( 0)
#define SBB_PARAM_H369_VAL_BF_WID (32)
#define SBB_PARAM_H369_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H369_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L369_REG register description at address offset 0x238c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l369_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l369_reg_t;

#define SBB_PARAM_L369_DEFAULT (0x00000000U)
#define SBB_PARAM_L369_RD_MASK (0xffffffffU)
#define SBB_PARAM_L369_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L369_VAL_BF_OFF ( 0)
#define SBB_PARAM_L369_VAL_BF_WID (32)
#define SBB_PARAM_L369_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L369_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H370_REG register description at address offset 0x2390
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h370_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h370_reg_t;

#define SBB_PARAM_H370_DEFAULT (0x00000000U)
#define SBB_PARAM_H370_RD_MASK (0xffffffffU)
#define SBB_PARAM_H370_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H370_VAL_BF_OFF ( 0)
#define SBB_PARAM_H370_VAL_BF_WID (32)
#define SBB_PARAM_H370_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H370_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L370_REG register description at address offset 0x2394
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l370_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l370_reg_t;

#define SBB_PARAM_L370_DEFAULT (0x00000000U)
#define SBB_PARAM_L370_RD_MASK (0xffffffffU)
#define SBB_PARAM_L370_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L370_VAL_BF_OFF ( 0)
#define SBB_PARAM_L370_VAL_BF_WID (32)
#define SBB_PARAM_L370_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L370_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H371_REG register description at address offset 0x2398
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h371_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h371_reg_t;

#define SBB_PARAM_H371_DEFAULT (0x00000000U)
#define SBB_PARAM_H371_RD_MASK (0xffffffffU)
#define SBB_PARAM_H371_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H371_VAL_BF_OFF ( 0)
#define SBB_PARAM_H371_VAL_BF_WID (32)
#define SBB_PARAM_H371_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H371_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L371_REG register description at address offset 0x239c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l371_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l371_reg_t;

#define SBB_PARAM_L371_DEFAULT (0x00000000U)
#define SBB_PARAM_L371_RD_MASK (0xffffffffU)
#define SBB_PARAM_L371_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L371_VAL_BF_OFF ( 0)
#define SBB_PARAM_L371_VAL_BF_WID (32)
#define SBB_PARAM_L371_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L371_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H372_REG register description at address offset 0x23a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h372_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h372_reg_t;

#define SBB_PARAM_H372_DEFAULT (0x00000000U)
#define SBB_PARAM_H372_RD_MASK (0xffffffffU)
#define SBB_PARAM_H372_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H372_VAL_BF_OFF ( 0)
#define SBB_PARAM_H372_VAL_BF_WID (32)
#define SBB_PARAM_H372_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H372_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L372_REG register description at address offset 0x23a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l372_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l372_reg_t;

#define SBB_PARAM_L372_DEFAULT (0x00000000U)
#define SBB_PARAM_L372_RD_MASK (0xffffffffU)
#define SBB_PARAM_L372_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L372_VAL_BF_OFF ( 0)
#define SBB_PARAM_L372_VAL_BF_WID (32)
#define SBB_PARAM_L372_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L372_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H373_REG register description at address offset 0x23a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h373_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h373_reg_t;

#define SBB_PARAM_H373_DEFAULT (0x00000000U)
#define SBB_PARAM_H373_RD_MASK (0xffffffffU)
#define SBB_PARAM_H373_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H373_VAL_BF_OFF ( 0)
#define SBB_PARAM_H373_VAL_BF_WID (32)
#define SBB_PARAM_H373_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H373_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L373_REG register description at address offset 0x23ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l373_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l373_reg_t;

#define SBB_PARAM_L373_DEFAULT (0x00000000U)
#define SBB_PARAM_L373_RD_MASK (0xffffffffU)
#define SBB_PARAM_L373_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L373_VAL_BF_OFF ( 0)
#define SBB_PARAM_L373_VAL_BF_WID (32)
#define SBB_PARAM_L373_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L373_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H374_REG register description at address offset 0x23b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h374_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h374_reg_t;

#define SBB_PARAM_H374_DEFAULT (0x00000000U)
#define SBB_PARAM_H374_RD_MASK (0xffffffffU)
#define SBB_PARAM_H374_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H374_VAL_BF_OFF ( 0)
#define SBB_PARAM_H374_VAL_BF_WID (32)
#define SBB_PARAM_H374_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H374_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L374_REG register description at address offset 0x23b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l374_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l374_reg_t;

#define SBB_PARAM_L374_DEFAULT (0x00000000U)
#define SBB_PARAM_L374_RD_MASK (0xffffffffU)
#define SBB_PARAM_L374_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L374_VAL_BF_OFF ( 0)
#define SBB_PARAM_L374_VAL_BF_WID (32)
#define SBB_PARAM_L374_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L374_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H375_REG register description at address offset 0x23b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h375_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h375_reg_t;

#define SBB_PARAM_H375_DEFAULT (0x00000000U)
#define SBB_PARAM_H375_RD_MASK (0xffffffffU)
#define SBB_PARAM_H375_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H375_VAL_BF_OFF ( 0)
#define SBB_PARAM_H375_VAL_BF_WID (32)
#define SBB_PARAM_H375_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H375_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L375_REG register description at address offset 0x23bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l375_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l375_reg_t;

#define SBB_PARAM_L375_DEFAULT (0x00000000U)
#define SBB_PARAM_L375_RD_MASK (0xffffffffU)
#define SBB_PARAM_L375_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L375_VAL_BF_OFF ( 0)
#define SBB_PARAM_L375_VAL_BF_WID (32)
#define SBB_PARAM_L375_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L375_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H376_REG register description at address offset 0x23c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h376_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h376_reg_t;

#define SBB_PARAM_H376_DEFAULT (0x00000000U)
#define SBB_PARAM_H376_RD_MASK (0xffffffffU)
#define SBB_PARAM_H376_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H376_VAL_BF_OFF ( 0)
#define SBB_PARAM_H376_VAL_BF_WID (32)
#define SBB_PARAM_H376_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H376_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L376_REG register description at address offset 0x23c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l376_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l376_reg_t;

#define SBB_PARAM_L376_DEFAULT (0x00000000U)
#define SBB_PARAM_L376_RD_MASK (0xffffffffU)
#define SBB_PARAM_L376_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L376_VAL_BF_OFF ( 0)
#define SBB_PARAM_L376_VAL_BF_WID (32)
#define SBB_PARAM_L376_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L376_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H377_REG register description at address offset 0x23c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h377_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h377_reg_t;

#define SBB_PARAM_H377_DEFAULT (0x00000000U)
#define SBB_PARAM_H377_RD_MASK (0xffffffffU)
#define SBB_PARAM_H377_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H377_VAL_BF_OFF ( 0)
#define SBB_PARAM_H377_VAL_BF_WID (32)
#define SBB_PARAM_H377_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H377_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L377_REG register description at address offset 0x23cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l377_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l377_reg_t;

#define SBB_PARAM_L377_DEFAULT (0x00000000U)
#define SBB_PARAM_L377_RD_MASK (0xffffffffU)
#define SBB_PARAM_L377_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L377_VAL_BF_OFF ( 0)
#define SBB_PARAM_L377_VAL_BF_WID (32)
#define SBB_PARAM_L377_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L377_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H378_REG register description at address offset 0x23d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h378_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h378_reg_t;

#define SBB_PARAM_H378_DEFAULT (0x00000000U)
#define SBB_PARAM_H378_RD_MASK (0xffffffffU)
#define SBB_PARAM_H378_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H378_VAL_BF_OFF ( 0)
#define SBB_PARAM_H378_VAL_BF_WID (32)
#define SBB_PARAM_H378_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H378_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L378_REG register description at address offset 0x23d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l378_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l378_reg_t;

#define SBB_PARAM_L378_DEFAULT (0x00000000U)
#define SBB_PARAM_L378_RD_MASK (0xffffffffU)
#define SBB_PARAM_L378_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L378_VAL_BF_OFF ( 0)
#define SBB_PARAM_L378_VAL_BF_WID (32)
#define SBB_PARAM_L378_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L378_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H379_REG register description at address offset 0x23d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h379_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h379_reg_t;

#define SBB_PARAM_H379_DEFAULT (0x00000000U)
#define SBB_PARAM_H379_RD_MASK (0xffffffffU)
#define SBB_PARAM_H379_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H379_VAL_BF_OFF ( 0)
#define SBB_PARAM_H379_VAL_BF_WID (32)
#define SBB_PARAM_H379_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H379_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L379_REG register description at address offset 0x23dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l379_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l379_reg_t;

#define SBB_PARAM_L379_DEFAULT (0x00000000U)
#define SBB_PARAM_L379_RD_MASK (0xffffffffU)
#define SBB_PARAM_L379_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L379_VAL_BF_OFF ( 0)
#define SBB_PARAM_L379_VAL_BF_WID (32)
#define SBB_PARAM_L379_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L379_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H380_REG register description at address offset 0x23e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h380_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h380_reg_t;

#define SBB_PARAM_H380_DEFAULT (0x00000000U)
#define SBB_PARAM_H380_RD_MASK (0xffffffffU)
#define SBB_PARAM_H380_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H380_VAL_BF_OFF ( 0)
#define SBB_PARAM_H380_VAL_BF_WID (32)
#define SBB_PARAM_H380_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H380_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L380_REG register description at address offset 0x23e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l380_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l380_reg_t;

#define SBB_PARAM_L380_DEFAULT (0x00000000U)
#define SBB_PARAM_L380_RD_MASK (0xffffffffU)
#define SBB_PARAM_L380_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L380_VAL_BF_OFF ( 0)
#define SBB_PARAM_L380_VAL_BF_WID (32)
#define SBB_PARAM_L380_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L380_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H381_REG register description at address offset 0x23e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h381_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h381_reg_t;

#define SBB_PARAM_H381_DEFAULT (0x00000000U)
#define SBB_PARAM_H381_RD_MASK (0xffffffffU)
#define SBB_PARAM_H381_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H381_VAL_BF_OFF ( 0)
#define SBB_PARAM_H381_VAL_BF_WID (32)
#define SBB_PARAM_H381_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H381_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L381_REG register description at address offset 0x23ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l381_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l381_reg_t;

#define SBB_PARAM_L381_DEFAULT (0x00000000U)
#define SBB_PARAM_L381_RD_MASK (0xffffffffU)
#define SBB_PARAM_L381_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L381_VAL_BF_OFF ( 0)
#define SBB_PARAM_L381_VAL_BF_WID (32)
#define SBB_PARAM_L381_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L381_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H382_REG register description at address offset 0x23f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h382_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h382_reg_t;

#define SBB_PARAM_H382_DEFAULT (0x00000000U)
#define SBB_PARAM_H382_RD_MASK (0xffffffffU)
#define SBB_PARAM_H382_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H382_VAL_BF_OFF ( 0)
#define SBB_PARAM_H382_VAL_BF_WID (32)
#define SBB_PARAM_H382_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H382_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L382_REG register description at address offset 0x23f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l382_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l382_reg_t;

#define SBB_PARAM_L382_DEFAULT (0x00000000U)
#define SBB_PARAM_L382_RD_MASK (0xffffffffU)
#define SBB_PARAM_L382_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L382_VAL_BF_OFF ( 0)
#define SBB_PARAM_L382_VAL_BF_WID (32)
#define SBB_PARAM_L382_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L382_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H383_REG register description at address offset 0x23f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h383_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h383_reg_t;

#define SBB_PARAM_H383_DEFAULT (0x00000000U)
#define SBB_PARAM_H383_RD_MASK (0xffffffffU)
#define SBB_PARAM_H383_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H383_VAL_BF_OFF ( 0)
#define SBB_PARAM_H383_VAL_BF_WID (32)
#define SBB_PARAM_H383_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H383_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L383_REG register description at address offset 0x23fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l383_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l383_reg_t;

#define SBB_PARAM_L383_DEFAULT (0x00000000U)
#define SBB_PARAM_L383_RD_MASK (0xffffffffU)
#define SBB_PARAM_L383_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L383_VAL_BF_OFF ( 0)
#define SBB_PARAM_L383_VAL_BF_WID (32)
#define SBB_PARAM_L383_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L383_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H384_REG register description at address offset 0x2400
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h384_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h384_reg_t;

#define SBB_PARAM_H384_DEFAULT (0x00000000U)
#define SBB_PARAM_H384_RD_MASK (0xffffffffU)
#define SBB_PARAM_H384_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H384_VAL_BF_OFF ( 0)
#define SBB_PARAM_H384_VAL_BF_WID (32)
#define SBB_PARAM_H384_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H384_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L384_REG register description at address offset 0x2404
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l384_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l384_reg_t;

#define SBB_PARAM_L384_DEFAULT (0x00000000U)
#define SBB_PARAM_L384_RD_MASK (0xffffffffU)
#define SBB_PARAM_L384_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L384_VAL_BF_OFF ( 0)
#define SBB_PARAM_L384_VAL_BF_WID (32)
#define SBB_PARAM_L384_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L384_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H385_REG register description at address offset 0x2408
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h385_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h385_reg_t;

#define SBB_PARAM_H385_DEFAULT (0x00000000U)
#define SBB_PARAM_H385_RD_MASK (0xffffffffU)
#define SBB_PARAM_H385_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H385_VAL_BF_OFF ( 0)
#define SBB_PARAM_H385_VAL_BF_WID (32)
#define SBB_PARAM_H385_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H385_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L385_REG register description at address offset 0x240c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l385_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l385_reg_t;

#define SBB_PARAM_L385_DEFAULT (0x00000000U)
#define SBB_PARAM_L385_RD_MASK (0xffffffffU)
#define SBB_PARAM_L385_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L385_VAL_BF_OFF ( 0)
#define SBB_PARAM_L385_VAL_BF_WID (32)
#define SBB_PARAM_L385_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L385_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H386_REG register description at address offset 0x2410
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h386_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h386_reg_t;

#define SBB_PARAM_H386_DEFAULT (0x00000000U)
#define SBB_PARAM_H386_RD_MASK (0xffffffffU)
#define SBB_PARAM_H386_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H386_VAL_BF_OFF ( 0)
#define SBB_PARAM_H386_VAL_BF_WID (32)
#define SBB_PARAM_H386_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H386_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L386_REG register description at address offset 0x2414
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l386_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l386_reg_t;

#define SBB_PARAM_L386_DEFAULT (0x00000000U)
#define SBB_PARAM_L386_RD_MASK (0xffffffffU)
#define SBB_PARAM_L386_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L386_VAL_BF_OFF ( 0)
#define SBB_PARAM_L386_VAL_BF_WID (32)
#define SBB_PARAM_L386_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L386_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H387_REG register description at address offset 0x2418
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h387_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h387_reg_t;

#define SBB_PARAM_H387_DEFAULT (0x00000000U)
#define SBB_PARAM_H387_RD_MASK (0xffffffffU)
#define SBB_PARAM_H387_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H387_VAL_BF_OFF ( 0)
#define SBB_PARAM_H387_VAL_BF_WID (32)
#define SBB_PARAM_H387_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H387_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L387_REG register description at address offset 0x241c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l387_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l387_reg_t;

#define SBB_PARAM_L387_DEFAULT (0x00000000U)
#define SBB_PARAM_L387_RD_MASK (0xffffffffU)
#define SBB_PARAM_L387_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L387_VAL_BF_OFF ( 0)
#define SBB_PARAM_L387_VAL_BF_WID (32)
#define SBB_PARAM_L387_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L387_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H388_REG register description at address offset 0x2420
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h388_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h388_reg_t;

#define SBB_PARAM_H388_DEFAULT (0x00000000U)
#define SBB_PARAM_H388_RD_MASK (0xffffffffU)
#define SBB_PARAM_H388_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H388_VAL_BF_OFF ( 0)
#define SBB_PARAM_H388_VAL_BF_WID (32)
#define SBB_PARAM_H388_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H388_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L388_REG register description at address offset 0x2424
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l388_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l388_reg_t;

#define SBB_PARAM_L388_DEFAULT (0x00000000U)
#define SBB_PARAM_L388_RD_MASK (0xffffffffU)
#define SBB_PARAM_L388_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L388_VAL_BF_OFF ( 0)
#define SBB_PARAM_L388_VAL_BF_WID (32)
#define SBB_PARAM_L388_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L388_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H389_REG register description at address offset 0x2428
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h389_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h389_reg_t;

#define SBB_PARAM_H389_DEFAULT (0x00000000U)
#define SBB_PARAM_H389_RD_MASK (0xffffffffU)
#define SBB_PARAM_H389_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H389_VAL_BF_OFF ( 0)
#define SBB_PARAM_H389_VAL_BF_WID (32)
#define SBB_PARAM_H389_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H389_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L389_REG register description at address offset 0x242c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l389_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l389_reg_t;

#define SBB_PARAM_L389_DEFAULT (0x00000000U)
#define SBB_PARAM_L389_RD_MASK (0xffffffffU)
#define SBB_PARAM_L389_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L389_VAL_BF_OFF ( 0)
#define SBB_PARAM_L389_VAL_BF_WID (32)
#define SBB_PARAM_L389_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L389_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H390_REG register description at address offset 0x2430
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h390_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h390_reg_t;

#define SBB_PARAM_H390_DEFAULT (0x00000000U)
#define SBB_PARAM_H390_RD_MASK (0xffffffffU)
#define SBB_PARAM_H390_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H390_VAL_BF_OFF ( 0)
#define SBB_PARAM_H390_VAL_BF_WID (32)
#define SBB_PARAM_H390_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H390_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L390_REG register description at address offset 0x2434
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l390_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l390_reg_t;

#define SBB_PARAM_L390_DEFAULT (0x00000000U)
#define SBB_PARAM_L390_RD_MASK (0xffffffffU)
#define SBB_PARAM_L390_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L390_VAL_BF_OFF ( 0)
#define SBB_PARAM_L390_VAL_BF_WID (32)
#define SBB_PARAM_L390_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L390_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H391_REG register description at address offset 0x2438
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h391_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h391_reg_t;

#define SBB_PARAM_H391_DEFAULT (0x00000000U)
#define SBB_PARAM_H391_RD_MASK (0xffffffffU)
#define SBB_PARAM_H391_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H391_VAL_BF_OFF ( 0)
#define SBB_PARAM_H391_VAL_BF_WID (32)
#define SBB_PARAM_H391_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H391_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L391_REG register description at address offset 0x243c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l391_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l391_reg_t;

#define SBB_PARAM_L391_DEFAULT (0x00000000U)
#define SBB_PARAM_L391_RD_MASK (0xffffffffU)
#define SBB_PARAM_L391_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L391_VAL_BF_OFF ( 0)
#define SBB_PARAM_L391_VAL_BF_WID (32)
#define SBB_PARAM_L391_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L391_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H392_REG register description at address offset 0x2440
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h392_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h392_reg_t;

#define SBB_PARAM_H392_DEFAULT (0x00000000U)
#define SBB_PARAM_H392_RD_MASK (0xffffffffU)
#define SBB_PARAM_H392_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H392_VAL_BF_OFF ( 0)
#define SBB_PARAM_H392_VAL_BF_WID (32)
#define SBB_PARAM_H392_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H392_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L392_REG register description at address offset 0x2444
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l392_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l392_reg_t;

#define SBB_PARAM_L392_DEFAULT (0x00000000U)
#define SBB_PARAM_L392_RD_MASK (0xffffffffU)
#define SBB_PARAM_L392_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L392_VAL_BF_OFF ( 0)
#define SBB_PARAM_L392_VAL_BF_WID (32)
#define SBB_PARAM_L392_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L392_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H393_REG register description at address offset 0x2448
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h393_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h393_reg_t;

#define SBB_PARAM_H393_DEFAULT (0x00000000U)
#define SBB_PARAM_H393_RD_MASK (0xffffffffU)
#define SBB_PARAM_H393_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H393_VAL_BF_OFF ( 0)
#define SBB_PARAM_H393_VAL_BF_WID (32)
#define SBB_PARAM_H393_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H393_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L393_REG register description at address offset 0x244c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l393_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l393_reg_t;

#define SBB_PARAM_L393_DEFAULT (0x00000000U)
#define SBB_PARAM_L393_RD_MASK (0xffffffffU)
#define SBB_PARAM_L393_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L393_VAL_BF_OFF ( 0)
#define SBB_PARAM_L393_VAL_BF_WID (32)
#define SBB_PARAM_L393_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L393_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H394_REG register description at address offset 0x2450
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h394_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h394_reg_t;

#define SBB_PARAM_H394_DEFAULT (0x00000000U)
#define SBB_PARAM_H394_RD_MASK (0xffffffffU)
#define SBB_PARAM_H394_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H394_VAL_BF_OFF ( 0)
#define SBB_PARAM_H394_VAL_BF_WID (32)
#define SBB_PARAM_H394_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H394_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L394_REG register description at address offset 0x2454
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l394_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l394_reg_t;

#define SBB_PARAM_L394_DEFAULT (0x00000000U)
#define SBB_PARAM_L394_RD_MASK (0xffffffffU)
#define SBB_PARAM_L394_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L394_VAL_BF_OFF ( 0)
#define SBB_PARAM_L394_VAL_BF_WID (32)
#define SBB_PARAM_L394_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L394_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H395_REG register description at address offset 0x2458
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h395_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h395_reg_t;

#define SBB_PARAM_H395_DEFAULT (0x00000000U)
#define SBB_PARAM_H395_RD_MASK (0xffffffffU)
#define SBB_PARAM_H395_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H395_VAL_BF_OFF ( 0)
#define SBB_PARAM_H395_VAL_BF_WID (32)
#define SBB_PARAM_H395_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H395_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L395_REG register description at address offset 0x245c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l395_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l395_reg_t;

#define SBB_PARAM_L395_DEFAULT (0x00000000U)
#define SBB_PARAM_L395_RD_MASK (0xffffffffU)
#define SBB_PARAM_L395_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L395_VAL_BF_OFF ( 0)
#define SBB_PARAM_L395_VAL_BF_WID (32)
#define SBB_PARAM_L395_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L395_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H396_REG register description at address offset 0x2460
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h396_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h396_reg_t;

#define SBB_PARAM_H396_DEFAULT (0x00000000U)
#define SBB_PARAM_H396_RD_MASK (0xffffffffU)
#define SBB_PARAM_H396_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H396_VAL_BF_OFF ( 0)
#define SBB_PARAM_H396_VAL_BF_WID (32)
#define SBB_PARAM_H396_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H396_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L396_REG register description at address offset 0x2464
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l396_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l396_reg_t;

#define SBB_PARAM_L396_DEFAULT (0x00000000U)
#define SBB_PARAM_L396_RD_MASK (0xffffffffU)
#define SBB_PARAM_L396_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L396_VAL_BF_OFF ( 0)
#define SBB_PARAM_L396_VAL_BF_WID (32)
#define SBB_PARAM_L396_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L396_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H397_REG register description at address offset 0x2468
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h397_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h397_reg_t;

#define SBB_PARAM_H397_DEFAULT (0x00000000U)
#define SBB_PARAM_H397_RD_MASK (0xffffffffU)
#define SBB_PARAM_H397_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H397_VAL_BF_OFF ( 0)
#define SBB_PARAM_H397_VAL_BF_WID (32)
#define SBB_PARAM_H397_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H397_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L397_REG register description at address offset 0x246c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l397_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l397_reg_t;

#define SBB_PARAM_L397_DEFAULT (0x00000000U)
#define SBB_PARAM_L397_RD_MASK (0xffffffffU)
#define SBB_PARAM_L397_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L397_VAL_BF_OFF ( 0)
#define SBB_PARAM_L397_VAL_BF_WID (32)
#define SBB_PARAM_L397_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L397_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H398_REG register description at address offset 0x2470
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h398_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h398_reg_t;

#define SBB_PARAM_H398_DEFAULT (0x00000000U)
#define SBB_PARAM_H398_RD_MASK (0xffffffffU)
#define SBB_PARAM_H398_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H398_VAL_BF_OFF ( 0)
#define SBB_PARAM_H398_VAL_BF_WID (32)
#define SBB_PARAM_H398_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H398_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L398_REG register description at address offset 0x2474
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l398_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l398_reg_t;

#define SBB_PARAM_L398_DEFAULT (0x00000000U)
#define SBB_PARAM_L398_RD_MASK (0xffffffffU)
#define SBB_PARAM_L398_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L398_VAL_BF_OFF ( 0)
#define SBB_PARAM_L398_VAL_BF_WID (32)
#define SBB_PARAM_L398_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L398_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H399_REG register description at address offset 0x2478
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h399_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h399_reg_t;

#define SBB_PARAM_H399_DEFAULT (0x00000000U)
#define SBB_PARAM_H399_RD_MASK (0xffffffffU)
#define SBB_PARAM_H399_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H399_VAL_BF_OFF ( 0)
#define SBB_PARAM_H399_VAL_BF_WID (32)
#define SBB_PARAM_H399_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H399_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L399_REG register description at address offset 0x247c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l399_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l399_reg_t;

#define SBB_PARAM_L399_DEFAULT (0x00000000U)
#define SBB_PARAM_L399_RD_MASK (0xffffffffU)
#define SBB_PARAM_L399_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L399_VAL_BF_OFF ( 0)
#define SBB_PARAM_L399_VAL_BF_WID (32)
#define SBB_PARAM_L399_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L399_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H400_REG register description at address offset 0x2480
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h400_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h400_reg_t;

#define SBB_PARAM_H400_DEFAULT (0x00000000U)
#define SBB_PARAM_H400_RD_MASK (0xffffffffU)
#define SBB_PARAM_H400_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H400_VAL_BF_OFF ( 0)
#define SBB_PARAM_H400_VAL_BF_WID (32)
#define SBB_PARAM_H400_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H400_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L400_REG register description at address offset 0x2484
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l400_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l400_reg_t;

#define SBB_PARAM_L400_DEFAULT (0x00000000U)
#define SBB_PARAM_L400_RD_MASK (0xffffffffU)
#define SBB_PARAM_L400_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L400_VAL_BF_OFF ( 0)
#define SBB_PARAM_L400_VAL_BF_WID (32)
#define SBB_PARAM_L400_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L400_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H401_REG register description at address offset 0x2488
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h401_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h401_reg_t;

#define SBB_PARAM_H401_DEFAULT (0x00000000U)
#define SBB_PARAM_H401_RD_MASK (0xffffffffU)
#define SBB_PARAM_H401_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H401_VAL_BF_OFF ( 0)
#define SBB_PARAM_H401_VAL_BF_WID (32)
#define SBB_PARAM_H401_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H401_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L401_REG register description at address offset 0x248c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l401_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l401_reg_t;

#define SBB_PARAM_L401_DEFAULT (0x00000000U)
#define SBB_PARAM_L401_RD_MASK (0xffffffffU)
#define SBB_PARAM_L401_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L401_VAL_BF_OFF ( 0)
#define SBB_PARAM_L401_VAL_BF_WID (32)
#define SBB_PARAM_L401_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L401_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H402_REG register description at address offset 0x2490
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h402_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h402_reg_t;

#define SBB_PARAM_H402_DEFAULT (0x00000000U)
#define SBB_PARAM_H402_RD_MASK (0xffffffffU)
#define SBB_PARAM_H402_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H402_VAL_BF_OFF ( 0)
#define SBB_PARAM_H402_VAL_BF_WID (32)
#define SBB_PARAM_H402_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H402_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L402_REG register description at address offset 0x2494
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l402_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l402_reg_t;

#define SBB_PARAM_L402_DEFAULT (0x00000000U)
#define SBB_PARAM_L402_RD_MASK (0xffffffffU)
#define SBB_PARAM_L402_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L402_VAL_BF_OFF ( 0)
#define SBB_PARAM_L402_VAL_BF_WID (32)
#define SBB_PARAM_L402_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L402_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H403_REG register description at address offset 0x2498
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h403_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h403_reg_t;

#define SBB_PARAM_H403_DEFAULT (0x00000000U)
#define SBB_PARAM_H403_RD_MASK (0xffffffffU)
#define SBB_PARAM_H403_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H403_VAL_BF_OFF ( 0)
#define SBB_PARAM_H403_VAL_BF_WID (32)
#define SBB_PARAM_H403_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H403_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L403_REG register description at address offset 0x249c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l403_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l403_reg_t;

#define SBB_PARAM_L403_DEFAULT (0x00000000U)
#define SBB_PARAM_L403_RD_MASK (0xffffffffU)
#define SBB_PARAM_L403_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L403_VAL_BF_OFF ( 0)
#define SBB_PARAM_L403_VAL_BF_WID (32)
#define SBB_PARAM_L403_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L403_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H404_REG register description at address offset 0x24a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h404_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h404_reg_t;

#define SBB_PARAM_H404_DEFAULT (0x00000000U)
#define SBB_PARAM_H404_RD_MASK (0xffffffffU)
#define SBB_PARAM_H404_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H404_VAL_BF_OFF ( 0)
#define SBB_PARAM_H404_VAL_BF_WID (32)
#define SBB_PARAM_H404_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H404_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L404_REG register description at address offset 0x24a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l404_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l404_reg_t;

#define SBB_PARAM_L404_DEFAULT (0x00000000U)
#define SBB_PARAM_L404_RD_MASK (0xffffffffU)
#define SBB_PARAM_L404_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L404_VAL_BF_OFF ( 0)
#define SBB_PARAM_L404_VAL_BF_WID (32)
#define SBB_PARAM_L404_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L404_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H405_REG register description at address offset 0x24a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h405_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h405_reg_t;

#define SBB_PARAM_H405_DEFAULT (0x00000000U)
#define SBB_PARAM_H405_RD_MASK (0xffffffffU)
#define SBB_PARAM_H405_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H405_VAL_BF_OFF ( 0)
#define SBB_PARAM_H405_VAL_BF_WID (32)
#define SBB_PARAM_H405_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H405_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L405_REG register description at address offset 0x24ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l405_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l405_reg_t;

#define SBB_PARAM_L405_DEFAULT (0x00000000U)
#define SBB_PARAM_L405_RD_MASK (0xffffffffU)
#define SBB_PARAM_L405_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L405_VAL_BF_OFF ( 0)
#define SBB_PARAM_L405_VAL_BF_WID (32)
#define SBB_PARAM_L405_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L405_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H406_REG register description at address offset 0x24b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h406_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h406_reg_t;

#define SBB_PARAM_H406_DEFAULT (0x00000000U)
#define SBB_PARAM_H406_RD_MASK (0xffffffffU)
#define SBB_PARAM_H406_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H406_VAL_BF_OFF ( 0)
#define SBB_PARAM_H406_VAL_BF_WID (32)
#define SBB_PARAM_H406_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H406_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L406_REG register description at address offset 0x24b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l406_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l406_reg_t;

#define SBB_PARAM_L406_DEFAULT (0x00000000U)
#define SBB_PARAM_L406_RD_MASK (0xffffffffU)
#define SBB_PARAM_L406_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L406_VAL_BF_OFF ( 0)
#define SBB_PARAM_L406_VAL_BF_WID (32)
#define SBB_PARAM_L406_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L406_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H407_REG register description at address offset 0x24b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h407_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h407_reg_t;

#define SBB_PARAM_H407_DEFAULT (0x00000000U)
#define SBB_PARAM_H407_RD_MASK (0xffffffffU)
#define SBB_PARAM_H407_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H407_VAL_BF_OFF ( 0)
#define SBB_PARAM_H407_VAL_BF_WID (32)
#define SBB_PARAM_H407_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H407_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L407_REG register description at address offset 0x24bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l407_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l407_reg_t;

#define SBB_PARAM_L407_DEFAULT (0x00000000U)
#define SBB_PARAM_L407_RD_MASK (0xffffffffU)
#define SBB_PARAM_L407_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L407_VAL_BF_OFF ( 0)
#define SBB_PARAM_L407_VAL_BF_WID (32)
#define SBB_PARAM_L407_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L407_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H408_REG register description at address offset 0x24c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h408_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h408_reg_t;

#define SBB_PARAM_H408_DEFAULT (0x00000000U)
#define SBB_PARAM_H408_RD_MASK (0xffffffffU)
#define SBB_PARAM_H408_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H408_VAL_BF_OFF ( 0)
#define SBB_PARAM_H408_VAL_BF_WID (32)
#define SBB_PARAM_H408_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H408_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L408_REG register description at address offset 0x24c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l408_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l408_reg_t;

#define SBB_PARAM_L408_DEFAULT (0x00000000U)
#define SBB_PARAM_L408_RD_MASK (0xffffffffU)
#define SBB_PARAM_L408_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L408_VAL_BF_OFF ( 0)
#define SBB_PARAM_L408_VAL_BF_WID (32)
#define SBB_PARAM_L408_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L408_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H409_REG register description at address offset 0x24c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h409_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h409_reg_t;

#define SBB_PARAM_H409_DEFAULT (0x00000000U)
#define SBB_PARAM_H409_RD_MASK (0xffffffffU)
#define SBB_PARAM_H409_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H409_VAL_BF_OFF ( 0)
#define SBB_PARAM_H409_VAL_BF_WID (32)
#define SBB_PARAM_H409_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H409_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L409_REG register description at address offset 0x24cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l409_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l409_reg_t;

#define SBB_PARAM_L409_DEFAULT (0x00000000U)
#define SBB_PARAM_L409_RD_MASK (0xffffffffU)
#define SBB_PARAM_L409_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L409_VAL_BF_OFF ( 0)
#define SBB_PARAM_L409_VAL_BF_WID (32)
#define SBB_PARAM_L409_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L409_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H410_REG register description at address offset 0x24d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h410_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h410_reg_t;

#define SBB_PARAM_H410_DEFAULT (0x00000000U)
#define SBB_PARAM_H410_RD_MASK (0xffffffffU)
#define SBB_PARAM_H410_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H410_VAL_BF_OFF ( 0)
#define SBB_PARAM_H410_VAL_BF_WID (32)
#define SBB_PARAM_H410_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H410_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L410_REG register description at address offset 0x24d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l410_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l410_reg_t;

#define SBB_PARAM_L410_DEFAULT (0x00000000U)
#define SBB_PARAM_L410_RD_MASK (0xffffffffU)
#define SBB_PARAM_L410_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L410_VAL_BF_OFF ( 0)
#define SBB_PARAM_L410_VAL_BF_WID (32)
#define SBB_PARAM_L410_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L410_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H411_REG register description at address offset 0x24d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h411_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h411_reg_t;

#define SBB_PARAM_H411_DEFAULT (0x00000000U)
#define SBB_PARAM_H411_RD_MASK (0xffffffffU)
#define SBB_PARAM_H411_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H411_VAL_BF_OFF ( 0)
#define SBB_PARAM_H411_VAL_BF_WID (32)
#define SBB_PARAM_H411_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H411_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L411_REG register description at address offset 0x24dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l411_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l411_reg_t;

#define SBB_PARAM_L411_DEFAULT (0x00000000U)
#define SBB_PARAM_L411_RD_MASK (0xffffffffU)
#define SBB_PARAM_L411_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L411_VAL_BF_OFF ( 0)
#define SBB_PARAM_L411_VAL_BF_WID (32)
#define SBB_PARAM_L411_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L411_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H412_REG register description at address offset 0x24e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h412_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h412_reg_t;

#define SBB_PARAM_H412_DEFAULT (0x00000000U)
#define SBB_PARAM_H412_RD_MASK (0xffffffffU)
#define SBB_PARAM_H412_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H412_VAL_BF_OFF ( 0)
#define SBB_PARAM_H412_VAL_BF_WID (32)
#define SBB_PARAM_H412_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H412_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L412_REG register description at address offset 0x24e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l412_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l412_reg_t;

#define SBB_PARAM_L412_DEFAULT (0x00000000U)
#define SBB_PARAM_L412_RD_MASK (0xffffffffU)
#define SBB_PARAM_L412_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L412_VAL_BF_OFF ( 0)
#define SBB_PARAM_L412_VAL_BF_WID (32)
#define SBB_PARAM_L412_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L412_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H413_REG register description at address offset 0x24e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h413_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h413_reg_t;

#define SBB_PARAM_H413_DEFAULT (0x00000000U)
#define SBB_PARAM_H413_RD_MASK (0xffffffffU)
#define SBB_PARAM_H413_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H413_VAL_BF_OFF ( 0)
#define SBB_PARAM_H413_VAL_BF_WID (32)
#define SBB_PARAM_H413_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H413_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L413_REG register description at address offset 0x24ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l413_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l413_reg_t;

#define SBB_PARAM_L413_DEFAULT (0x00000000U)
#define SBB_PARAM_L413_RD_MASK (0xffffffffU)
#define SBB_PARAM_L413_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L413_VAL_BF_OFF ( 0)
#define SBB_PARAM_L413_VAL_BF_WID (32)
#define SBB_PARAM_L413_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L413_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H414_REG register description at address offset 0x24f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h414_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h414_reg_t;

#define SBB_PARAM_H414_DEFAULT (0x00000000U)
#define SBB_PARAM_H414_RD_MASK (0xffffffffU)
#define SBB_PARAM_H414_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H414_VAL_BF_OFF ( 0)
#define SBB_PARAM_H414_VAL_BF_WID (32)
#define SBB_PARAM_H414_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H414_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L414_REG register description at address offset 0x24f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l414_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l414_reg_t;

#define SBB_PARAM_L414_DEFAULT (0x00000000U)
#define SBB_PARAM_L414_RD_MASK (0xffffffffU)
#define SBB_PARAM_L414_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L414_VAL_BF_OFF ( 0)
#define SBB_PARAM_L414_VAL_BF_WID (32)
#define SBB_PARAM_L414_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L414_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H415_REG register description at address offset 0x24f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h415_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h415_reg_t;

#define SBB_PARAM_H415_DEFAULT (0x00000000U)
#define SBB_PARAM_H415_RD_MASK (0xffffffffU)
#define SBB_PARAM_H415_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H415_VAL_BF_OFF ( 0)
#define SBB_PARAM_H415_VAL_BF_WID (32)
#define SBB_PARAM_H415_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H415_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L415_REG register description at address offset 0x24fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l415_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l415_reg_t;

#define SBB_PARAM_L415_DEFAULT (0x00000000U)
#define SBB_PARAM_L415_RD_MASK (0xffffffffU)
#define SBB_PARAM_L415_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L415_VAL_BF_OFF ( 0)
#define SBB_PARAM_L415_VAL_BF_WID (32)
#define SBB_PARAM_L415_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L415_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H416_REG register description at address offset 0x2500
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h416_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h416_reg_t;

#define SBB_PARAM_H416_DEFAULT (0x00000000U)
#define SBB_PARAM_H416_RD_MASK (0xffffffffU)
#define SBB_PARAM_H416_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H416_VAL_BF_OFF ( 0)
#define SBB_PARAM_H416_VAL_BF_WID (32)
#define SBB_PARAM_H416_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H416_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L416_REG register description at address offset 0x2504
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l416_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l416_reg_t;

#define SBB_PARAM_L416_DEFAULT (0x00000000U)
#define SBB_PARAM_L416_RD_MASK (0xffffffffU)
#define SBB_PARAM_L416_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L416_VAL_BF_OFF ( 0)
#define SBB_PARAM_L416_VAL_BF_WID (32)
#define SBB_PARAM_L416_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L416_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H417_REG register description at address offset 0x2508
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h417_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h417_reg_t;

#define SBB_PARAM_H417_DEFAULT (0x00000000U)
#define SBB_PARAM_H417_RD_MASK (0xffffffffU)
#define SBB_PARAM_H417_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H417_VAL_BF_OFF ( 0)
#define SBB_PARAM_H417_VAL_BF_WID (32)
#define SBB_PARAM_H417_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H417_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L417_REG register description at address offset 0x250c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l417_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l417_reg_t;

#define SBB_PARAM_L417_DEFAULT (0x00000000U)
#define SBB_PARAM_L417_RD_MASK (0xffffffffU)
#define SBB_PARAM_L417_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L417_VAL_BF_OFF ( 0)
#define SBB_PARAM_L417_VAL_BF_WID (32)
#define SBB_PARAM_L417_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L417_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H418_REG register description at address offset 0x2510
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h418_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h418_reg_t;

#define SBB_PARAM_H418_DEFAULT (0x00000000U)
#define SBB_PARAM_H418_RD_MASK (0xffffffffU)
#define SBB_PARAM_H418_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H418_VAL_BF_OFF ( 0)
#define SBB_PARAM_H418_VAL_BF_WID (32)
#define SBB_PARAM_H418_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H418_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L418_REG register description at address offset 0x2514
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l418_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l418_reg_t;

#define SBB_PARAM_L418_DEFAULT (0x00000000U)
#define SBB_PARAM_L418_RD_MASK (0xffffffffU)
#define SBB_PARAM_L418_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L418_VAL_BF_OFF ( 0)
#define SBB_PARAM_L418_VAL_BF_WID (32)
#define SBB_PARAM_L418_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L418_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H419_REG register description at address offset 0x2518
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h419_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h419_reg_t;

#define SBB_PARAM_H419_DEFAULT (0x00000000U)
#define SBB_PARAM_H419_RD_MASK (0xffffffffU)
#define SBB_PARAM_H419_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H419_VAL_BF_OFF ( 0)
#define SBB_PARAM_H419_VAL_BF_WID (32)
#define SBB_PARAM_H419_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H419_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L419_REG register description at address offset 0x251c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l419_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l419_reg_t;

#define SBB_PARAM_L419_DEFAULT (0x00000000U)
#define SBB_PARAM_L419_RD_MASK (0xffffffffU)
#define SBB_PARAM_L419_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L419_VAL_BF_OFF ( 0)
#define SBB_PARAM_L419_VAL_BF_WID (32)
#define SBB_PARAM_L419_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L419_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H420_REG register description at address offset 0x2520
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h420_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h420_reg_t;

#define SBB_PARAM_H420_DEFAULT (0x00000000U)
#define SBB_PARAM_H420_RD_MASK (0xffffffffU)
#define SBB_PARAM_H420_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H420_VAL_BF_OFF ( 0)
#define SBB_PARAM_H420_VAL_BF_WID (32)
#define SBB_PARAM_H420_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H420_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L420_REG register description at address offset 0x2524
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l420_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l420_reg_t;

#define SBB_PARAM_L420_DEFAULT (0x00000000U)
#define SBB_PARAM_L420_RD_MASK (0xffffffffU)
#define SBB_PARAM_L420_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L420_VAL_BF_OFF ( 0)
#define SBB_PARAM_L420_VAL_BF_WID (32)
#define SBB_PARAM_L420_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L420_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H421_REG register description at address offset 0x2528
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h421_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h421_reg_t;

#define SBB_PARAM_H421_DEFAULT (0x00000000U)
#define SBB_PARAM_H421_RD_MASK (0xffffffffU)
#define SBB_PARAM_H421_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H421_VAL_BF_OFF ( 0)
#define SBB_PARAM_H421_VAL_BF_WID (32)
#define SBB_PARAM_H421_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H421_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L421_REG register description at address offset 0x252c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l421_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l421_reg_t;

#define SBB_PARAM_L421_DEFAULT (0x00000000U)
#define SBB_PARAM_L421_RD_MASK (0xffffffffU)
#define SBB_PARAM_L421_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L421_VAL_BF_OFF ( 0)
#define SBB_PARAM_L421_VAL_BF_WID (32)
#define SBB_PARAM_L421_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L421_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H422_REG register description at address offset 0x2530
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h422_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h422_reg_t;

#define SBB_PARAM_H422_DEFAULT (0x00000000U)
#define SBB_PARAM_H422_RD_MASK (0xffffffffU)
#define SBB_PARAM_H422_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H422_VAL_BF_OFF ( 0)
#define SBB_PARAM_H422_VAL_BF_WID (32)
#define SBB_PARAM_H422_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H422_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L422_REG register description at address offset 0x2534
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l422_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l422_reg_t;

#define SBB_PARAM_L422_DEFAULT (0x00000000U)
#define SBB_PARAM_L422_RD_MASK (0xffffffffU)
#define SBB_PARAM_L422_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L422_VAL_BF_OFF ( 0)
#define SBB_PARAM_L422_VAL_BF_WID (32)
#define SBB_PARAM_L422_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L422_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H423_REG register description at address offset 0x2538
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h423_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h423_reg_t;

#define SBB_PARAM_H423_DEFAULT (0x00000000U)
#define SBB_PARAM_H423_RD_MASK (0xffffffffU)
#define SBB_PARAM_H423_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H423_VAL_BF_OFF ( 0)
#define SBB_PARAM_H423_VAL_BF_WID (32)
#define SBB_PARAM_H423_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H423_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L423_REG register description at address offset 0x253c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l423_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l423_reg_t;

#define SBB_PARAM_L423_DEFAULT (0x00000000U)
#define SBB_PARAM_L423_RD_MASK (0xffffffffU)
#define SBB_PARAM_L423_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L423_VAL_BF_OFF ( 0)
#define SBB_PARAM_L423_VAL_BF_WID (32)
#define SBB_PARAM_L423_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L423_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H424_REG register description at address offset 0x2540
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h424_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h424_reg_t;

#define SBB_PARAM_H424_DEFAULT (0x00000000U)
#define SBB_PARAM_H424_RD_MASK (0xffffffffU)
#define SBB_PARAM_H424_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H424_VAL_BF_OFF ( 0)
#define SBB_PARAM_H424_VAL_BF_WID (32)
#define SBB_PARAM_H424_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H424_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L424_REG register description at address offset 0x2544
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l424_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l424_reg_t;

#define SBB_PARAM_L424_DEFAULT (0x00000000U)
#define SBB_PARAM_L424_RD_MASK (0xffffffffU)
#define SBB_PARAM_L424_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L424_VAL_BF_OFF ( 0)
#define SBB_PARAM_L424_VAL_BF_WID (32)
#define SBB_PARAM_L424_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L424_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H425_REG register description at address offset 0x2548
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h425_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h425_reg_t;

#define SBB_PARAM_H425_DEFAULT (0x00000000U)
#define SBB_PARAM_H425_RD_MASK (0xffffffffU)
#define SBB_PARAM_H425_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H425_VAL_BF_OFF ( 0)
#define SBB_PARAM_H425_VAL_BF_WID (32)
#define SBB_PARAM_H425_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H425_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L425_REG register description at address offset 0x254c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l425_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l425_reg_t;

#define SBB_PARAM_L425_DEFAULT (0x00000000U)
#define SBB_PARAM_L425_RD_MASK (0xffffffffU)
#define SBB_PARAM_L425_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L425_VAL_BF_OFF ( 0)
#define SBB_PARAM_L425_VAL_BF_WID (32)
#define SBB_PARAM_L425_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L425_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H426_REG register description at address offset 0x2550
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h426_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h426_reg_t;

#define SBB_PARAM_H426_DEFAULT (0x00000000U)
#define SBB_PARAM_H426_RD_MASK (0xffffffffU)
#define SBB_PARAM_H426_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H426_VAL_BF_OFF ( 0)
#define SBB_PARAM_H426_VAL_BF_WID (32)
#define SBB_PARAM_H426_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H426_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L426_REG register description at address offset 0x2554
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l426_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l426_reg_t;

#define SBB_PARAM_L426_DEFAULT (0x00000000U)
#define SBB_PARAM_L426_RD_MASK (0xffffffffU)
#define SBB_PARAM_L426_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L426_VAL_BF_OFF ( 0)
#define SBB_PARAM_L426_VAL_BF_WID (32)
#define SBB_PARAM_L426_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L426_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H427_REG register description at address offset 0x2558
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h427_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h427_reg_t;

#define SBB_PARAM_H427_DEFAULT (0x00000000U)
#define SBB_PARAM_H427_RD_MASK (0xffffffffU)
#define SBB_PARAM_H427_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H427_VAL_BF_OFF ( 0)
#define SBB_PARAM_H427_VAL_BF_WID (32)
#define SBB_PARAM_H427_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H427_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L427_REG register description at address offset 0x255c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l427_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l427_reg_t;

#define SBB_PARAM_L427_DEFAULT (0x00000000U)
#define SBB_PARAM_L427_RD_MASK (0xffffffffU)
#define SBB_PARAM_L427_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L427_VAL_BF_OFF ( 0)
#define SBB_PARAM_L427_VAL_BF_WID (32)
#define SBB_PARAM_L427_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L427_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H428_REG register description at address offset 0x2560
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h428_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h428_reg_t;

#define SBB_PARAM_H428_DEFAULT (0x00000000U)
#define SBB_PARAM_H428_RD_MASK (0xffffffffU)
#define SBB_PARAM_H428_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H428_VAL_BF_OFF ( 0)
#define SBB_PARAM_H428_VAL_BF_WID (32)
#define SBB_PARAM_H428_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H428_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L428_REG register description at address offset 0x2564
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l428_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l428_reg_t;

#define SBB_PARAM_L428_DEFAULT (0x00000000U)
#define SBB_PARAM_L428_RD_MASK (0xffffffffU)
#define SBB_PARAM_L428_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L428_VAL_BF_OFF ( 0)
#define SBB_PARAM_L428_VAL_BF_WID (32)
#define SBB_PARAM_L428_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L428_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H429_REG register description at address offset 0x2568
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h429_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h429_reg_t;

#define SBB_PARAM_H429_DEFAULT (0x00000000U)
#define SBB_PARAM_H429_RD_MASK (0xffffffffU)
#define SBB_PARAM_H429_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H429_VAL_BF_OFF ( 0)
#define SBB_PARAM_H429_VAL_BF_WID (32)
#define SBB_PARAM_H429_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H429_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L429_REG register description at address offset 0x256c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l429_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l429_reg_t;

#define SBB_PARAM_L429_DEFAULT (0x00000000U)
#define SBB_PARAM_L429_RD_MASK (0xffffffffU)
#define SBB_PARAM_L429_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L429_VAL_BF_OFF ( 0)
#define SBB_PARAM_L429_VAL_BF_WID (32)
#define SBB_PARAM_L429_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L429_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H430_REG register description at address offset 0x2570
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h430_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h430_reg_t;

#define SBB_PARAM_H430_DEFAULT (0x00000000U)
#define SBB_PARAM_H430_RD_MASK (0xffffffffU)
#define SBB_PARAM_H430_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H430_VAL_BF_OFF ( 0)
#define SBB_PARAM_H430_VAL_BF_WID (32)
#define SBB_PARAM_H430_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H430_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L430_REG register description at address offset 0x2574
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l430_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l430_reg_t;

#define SBB_PARAM_L430_DEFAULT (0x00000000U)
#define SBB_PARAM_L430_RD_MASK (0xffffffffU)
#define SBB_PARAM_L430_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L430_VAL_BF_OFF ( 0)
#define SBB_PARAM_L430_VAL_BF_WID (32)
#define SBB_PARAM_L430_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L430_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H431_REG register description at address offset 0x2578
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h431_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h431_reg_t;

#define SBB_PARAM_H431_DEFAULT (0x00000000U)
#define SBB_PARAM_H431_RD_MASK (0xffffffffU)
#define SBB_PARAM_H431_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H431_VAL_BF_OFF ( 0)
#define SBB_PARAM_H431_VAL_BF_WID (32)
#define SBB_PARAM_H431_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H431_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L431_REG register description at address offset 0x257c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l431_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l431_reg_t;

#define SBB_PARAM_L431_DEFAULT (0x00000000U)
#define SBB_PARAM_L431_RD_MASK (0xffffffffU)
#define SBB_PARAM_L431_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L431_VAL_BF_OFF ( 0)
#define SBB_PARAM_L431_VAL_BF_WID (32)
#define SBB_PARAM_L431_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L431_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H432_REG register description at address offset 0x2580
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h432_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h432_reg_t;

#define SBB_PARAM_H432_DEFAULT (0x00000000U)
#define SBB_PARAM_H432_RD_MASK (0xffffffffU)
#define SBB_PARAM_H432_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H432_VAL_BF_OFF ( 0)
#define SBB_PARAM_H432_VAL_BF_WID (32)
#define SBB_PARAM_H432_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H432_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L432_REG register description at address offset 0x2584
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l432_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l432_reg_t;

#define SBB_PARAM_L432_DEFAULT (0x00000000U)
#define SBB_PARAM_L432_RD_MASK (0xffffffffU)
#define SBB_PARAM_L432_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L432_VAL_BF_OFF ( 0)
#define SBB_PARAM_L432_VAL_BF_WID (32)
#define SBB_PARAM_L432_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L432_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H433_REG register description at address offset 0x2588
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h433_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h433_reg_t;

#define SBB_PARAM_H433_DEFAULT (0x00000000U)
#define SBB_PARAM_H433_RD_MASK (0xffffffffU)
#define SBB_PARAM_H433_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H433_VAL_BF_OFF ( 0)
#define SBB_PARAM_H433_VAL_BF_WID (32)
#define SBB_PARAM_H433_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H433_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L433_REG register description at address offset 0x258c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l433_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l433_reg_t;

#define SBB_PARAM_L433_DEFAULT (0x00000000U)
#define SBB_PARAM_L433_RD_MASK (0xffffffffU)
#define SBB_PARAM_L433_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L433_VAL_BF_OFF ( 0)
#define SBB_PARAM_L433_VAL_BF_WID (32)
#define SBB_PARAM_L433_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L433_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H434_REG register description at address offset 0x2590
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h434_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h434_reg_t;

#define SBB_PARAM_H434_DEFAULT (0x00000000U)
#define SBB_PARAM_H434_RD_MASK (0xffffffffU)
#define SBB_PARAM_H434_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H434_VAL_BF_OFF ( 0)
#define SBB_PARAM_H434_VAL_BF_WID (32)
#define SBB_PARAM_H434_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H434_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L434_REG register description at address offset 0x2594
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l434_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l434_reg_t;

#define SBB_PARAM_L434_DEFAULT (0x00000000U)
#define SBB_PARAM_L434_RD_MASK (0xffffffffU)
#define SBB_PARAM_L434_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L434_VAL_BF_OFF ( 0)
#define SBB_PARAM_L434_VAL_BF_WID (32)
#define SBB_PARAM_L434_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L434_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H435_REG register description at address offset 0x2598
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h435_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h435_reg_t;

#define SBB_PARAM_H435_DEFAULT (0x00000000U)
#define SBB_PARAM_H435_RD_MASK (0xffffffffU)
#define SBB_PARAM_H435_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H435_VAL_BF_OFF ( 0)
#define SBB_PARAM_H435_VAL_BF_WID (32)
#define SBB_PARAM_H435_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H435_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L435_REG register description at address offset 0x259c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l435_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l435_reg_t;

#define SBB_PARAM_L435_DEFAULT (0x00000000U)
#define SBB_PARAM_L435_RD_MASK (0xffffffffU)
#define SBB_PARAM_L435_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L435_VAL_BF_OFF ( 0)
#define SBB_PARAM_L435_VAL_BF_WID (32)
#define SBB_PARAM_L435_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L435_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H436_REG register description at address offset 0x25a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h436_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h436_reg_t;

#define SBB_PARAM_H436_DEFAULT (0x00000000U)
#define SBB_PARAM_H436_RD_MASK (0xffffffffU)
#define SBB_PARAM_H436_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H436_VAL_BF_OFF ( 0)
#define SBB_PARAM_H436_VAL_BF_WID (32)
#define SBB_PARAM_H436_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H436_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L436_REG register description at address offset 0x25a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l436_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l436_reg_t;

#define SBB_PARAM_L436_DEFAULT (0x00000000U)
#define SBB_PARAM_L436_RD_MASK (0xffffffffU)
#define SBB_PARAM_L436_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L436_VAL_BF_OFF ( 0)
#define SBB_PARAM_L436_VAL_BF_WID (32)
#define SBB_PARAM_L436_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L436_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H437_REG register description at address offset 0x25a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h437_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h437_reg_t;

#define SBB_PARAM_H437_DEFAULT (0x00000000U)
#define SBB_PARAM_H437_RD_MASK (0xffffffffU)
#define SBB_PARAM_H437_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H437_VAL_BF_OFF ( 0)
#define SBB_PARAM_H437_VAL_BF_WID (32)
#define SBB_PARAM_H437_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H437_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L437_REG register description at address offset 0x25ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l437_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l437_reg_t;

#define SBB_PARAM_L437_DEFAULT (0x00000000U)
#define SBB_PARAM_L437_RD_MASK (0xffffffffU)
#define SBB_PARAM_L437_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L437_VAL_BF_OFF ( 0)
#define SBB_PARAM_L437_VAL_BF_WID (32)
#define SBB_PARAM_L437_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L437_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H438_REG register description at address offset 0x25b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h438_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h438_reg_t;

#define SBB_PARAM_H438_DEFAULT (0x00000000U)
#define SBB_PARAM_H438_RD_MASK (0xffffffffU)
#define SBB_PARAM_H438_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H438_VAL_BF_OFF ( 0)
#define SBB_PARAM_H438_VAL_BF_WID (32)
#define SBB_PARAM_H438_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H438_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L438_REG register description at address offset 0x25b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l438_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l438_reg_t;

#define SBB_PARAM_L438_DEFAULT (0x00000000U)
#define SBB_PARAM_L438_RD_MASK (0xffffffffU)
#define SBB_PARAM_L438_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L438_VAL_BF_OFF ( 0)
#define SBB_PARAM_L438_VAL_BF_WID (32)
#define SBB_PARAM_L438_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L438_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H439_REG register description at address offset 0x25b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h439_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h439_reg_t;

#define SBB_PARAM_H439_DEFAULT (0x00000000U)
#define SBB_PARAM_H439_RD_MASK (0xffffffffU)
#define SBB_PARAM_H439_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H439_VAL_BF_OFF ( 0)
#define SBB_PARAM_H439_VAL_BF_WID (32)
#define SBB_PARAM_H439_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H439_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L439_REG register description at address offset 0x25bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l439_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l439_reg_t;

#define SBB_PARAM_L439_DEFAULT (0x00000000U)
#define SBB_PARAM_L439_RD_MASK (0xffffffffU)
#define SBB_PARAM_L439_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L439_VAL_BF_OFF ( 0)
#define SBB_PARAM_L439_VAL_BF_WID (32)
#define SBB_PARAM_L439_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L439_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H440_REG register description at address offset 0x25c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h440_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h440_reg_t;

#define SBB_PARAM_H440_DEFAULT (0x00000000U)
#define SBB_PARAM_H440_RD_MASK (0xffffffffU)
#define SBB_PARAM_H440_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H440_VAL_BF_OFF ( 0)
#define SBB_PARAM_H440_VAL_BF_WID (32)
#define SBB_PARAM_H440_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H440_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L440_REG register description at address offset 0x25c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l440_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l440_reg_t;

#define SBB_PARAM_L440_DEFAULT (0x00000000U)
#define SBB_PARAM_L440_RD_MASK (0xffffffffU)
#define SBB_PARAM_L440_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L440_VAL_BF_OFF ( 0)
#define SBB_PARAM_L440_VAL_BF_WID (32)
#define SBB_PARAM_L440_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L440_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H441_REG register description at address offset 0x25c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h441_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h441_reg_t;

#define SBB_PARAM_H441_DEFAULT (0x00000000U)
#define SBB_PARAM_H441_RD_MASK (0xffffffffU)
#define SBB_PARAM_H441_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H441_VAL_BF_OFF ( 0)
#define SBB_PARAM_H441_VAL_BF_WID (32)
#define SBB_PARAM_H441_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H441_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L441_REG register description at address offset 0x25cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l441_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l441_reg_t;

#define SBB_PARAM_L441_DEFAULT (0x00000000U)
#define SBB_PARAM_L441_RD_MASK (0xffffffffU)
#define SBB_PARAM_L441_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L441_VAL_BF_OFF ( 0)
#define SBB_PARAM_L441_VAL_BF_WID (32)
#define SBB_PARAM_L441_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L441_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H442_REG register description at address offset 0x25d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h442_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h442_reg_t;

#define SBB_PARAM_H442_DEFAULT (0x00000000U)
#define SBB_PARAM_H442_RD_MASK (0xffffffffU)
#define SBB_PARAM_H442_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H442_VAL_BF_OFF ( 0)
#define SBB_PARAM_H442_VAL_BF_WID (32)
#define SBB_PARAM_H442_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H442_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L442_REG register description at address offset 0x25d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l442_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l442_reg_t;

#define SBB_PARAM_L442_DEFAULT (0x00000000U)
#define SBB_PARAM_L442_RD_MASK (0xffffffffU)
#define SBB_PARAM_L442_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L442_VAL_BF_OFF ( 0)
#define SBB_PARAM_L442_VAL_BF_WID (32)
#define SBB_PARAM_L442_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L442_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H443_REG register description at address offset 0x25d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h443_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h443_reg_t;

#define SBB_PARAM_H443_DEFAULT (0x00000000U)
#define SBB_PARAM_H443_RD_MASK (0xffffffffU)
#define SBB_PARAM_H443_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H443_VAL_BF_OFF ( 0)
#define SBB_PARAM_H443_VAL_BF_WID (32)
#define SBB_PARAM_H443_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H443_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L443_REG register description at address offset 0x25dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l443_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l443_reg_t;

#define SBB_PARAM_L443_DEFAULT (0x00000000U)
#define SBB_PARAM_L443_RD_MASK (0xffffffffU)
#define SBB_PARAM_L443_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L443_VAL_BF_OFF ( 0)
#define SBB_PARAM_L443_VAL_BF_WID (32)
#define SBB_PARAM_L443_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L443_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H444_REG register description at address offset 0x25e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h444_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h444_reg_t;

#define SBB_PARAM_H444_DEFAULT (0x00000000U)
#define SBB_PARAM_H444_RD_MASK (0xffffffffU)
#define SBB_PARAM_H444_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H444_VAL_BF_OFF ( 0)
#define SBB_PARAM_H444_VAL_BF_WID (32)
#define SBB_PARAM_H444_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H444_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L444_REG register description at address offset 0x25e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l444_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l444_reg_t;

#define SBB_PARAM_L444_DEFAULT (0x00000000U)
#define SBB_PARAM_L444_RD_MASK (0xffffffffU)
#define SBB_PARAM_L444_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L444_VAL_BF_OFF ( 0)
#define SBB_PARAM_L444_VAL_BF_WID (32)
#define SBB_PARAM_L444_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L444_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H445_REG register description at address offset 0x25e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h445_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h445_reg_t;

#define SBB_PARAM_H445_DEFAULT (0x00000000U)
#define SBB_PARAM_H445_RD_MASK (0xffffffffU)
#define SBB_PARAM_H445_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H445_VAL_BF_OFF ( 0)
#define SBB_PARAM_H445_VAL_BF_WID (32)
#define SBB_PARAM_H445_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H445_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L445_REG register description at address offset 0x25ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l445_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l445_reg_t;

#define SBB_PARAM_L445_DEFAULT (0x00000000U)
#define SBB_PARAM_L445_RD_MASK (0xffffffffU)
#define SBB_PARAM_L445_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L445_VAL_BF_OFF ( 0)
#define SBB_PARAM_L445_VAL_BF_WID (32)
#define SBB_PARAM_L445_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L445_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H446_REG register description at address offset 0x25f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h446_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h446_reg_t;

#define SBB_PARAM_H446_DEFAULT (0x00000000U)
#define SBB_PARAM_H446_RD_MASK (0xffffffffU)
#define SBB_PARAM_H446_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H446_VAL_BF_OFF ( 0)
#define SBB_PARAM_H446_VAL_BF_WID (32)
#define SBB_PARAM_H446_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H446_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L446_REG register description at address offset 0x25f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l446_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l446_reg_t;

#define SBB_PARAM_L446_DEFAULT (0x00000000U)
#define SBB_PARAM_L446_RD_MASK (0xffffffffU)
#define SBB_PARAM_L446_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L446_VAL_BF_OFF ( 0)
#define SBB_PARAM_L446_VAL_BF_WID (32)
#define SBB_PARAM_L446_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L446_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H447_REG register description at address offset 0x25f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h447_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h447_reg_t;

#define SBB_PARAM_H447_DEFAULT (0x00000000U)
#define SBB_PARAM_H447_RD_MASK (0xffffffffU)
#define SBB_PARAM_H447_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H447_VAL_BF_OFF ( 0)
#define SBB_PARAM_H447_VAL_BF_WID (32)
#define SBB_PARAM_H447_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H447_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L447_REG register description at address offset 0x25fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l447_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l447_reg_t;

#define SBB_PARAM_L447_DEFAULT (0x00000000U)
#define SBB_PARAM_L447_RD_MASK (0xffffffffU)
#define SBB_PARAM_L447_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L447_VAL_BF_OFF ( 0)
#define SBB_PARAM_L447_VAL_BF_WID (32)
#define SBB_PARAM_L447_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L447_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H448_REG register description at address offset 0x2600
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h448_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h448_reg_t;

#define SBB_PARAM_H448_DEFAULT (0x00000000U)
#define SBB_PARAM_H448_RD_MASK (0xffffffffU)
#define SBB_PARAM_H448_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H448_VAL_BF_OFF ( 0)
#define SBB_PARAM_H448_VAL_BF_WID (32)
#define SBB_PARAM_H448_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H448_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L448_REG register description at address offset 0x2604
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l448_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l448_reg_t;

#define SBB_PARAM_L448_DEFAULT (0x00000000U)
#define SBB_PARAM_L448_RD_MASK (0xffffffffU)
#define SBB_PARAM_L448_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L448_VAL_BF_OFF ( 0)
#define SBB_PARAM_L448_VAL_BF_WID (32)
#define SBB_PARAM_L448_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L448_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H449_REG register description at address offset 0x2608
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h449_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h449_reg_t;

#define SBB_PARAM_H449_DEFAULT (0x00000000U)
#define SBB_PARAM_H449_RD_MASK (0xffffffffU)
#define SBB_PARAM_H449_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H449_VAL_BF_OFF ( 0)
#define SBB_PARAM_H449_VAL_BF_WID (32)
#define SBB_PARAM_H449_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H449_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L449_REG register description at address offset 0x260c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l449_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l449_reg_t;

#define SBB_PARAM_L449_DEFAULT (0x00000000U)
#define SBB_PARAM_L449_RD_MASK (0xffffffffU)
#define SBB_PARAM_L449_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L449_VAL_BF_OFF ( 0)
#define SBB_PARAM_L449_VAL_BF_WID (32)
#define SBB_PARAM_L449_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L449_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H450_REG register description at address offset 0x2610
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h450_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h450_reg_t;

#define SBB_PARAM_H450_DEFAULT (0x00000000U)
#define SBB_PARAM_H450_RD_MASK (0xffffffffU)
#define SBB_PARAM_H450_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H450_VAL_BF_OFF ( 0)
#define SBB_PARAM_H450_VAL_BF_WID (32)
#define SBB_PARAM_H450_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H450_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L450_REG register description at address offset 0x2614
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l450_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l450_reg_t;

#define SBB_PARAM_L450_DEFAULT (0x00000000U)
#define SBB_PARAM_L450_RD_MASK (0xffffffffU)
#define SBB_PARAM_L450_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L450_VAL_BF_OFF ( 0)
#define SBB_PARAM_L450_VAL_BF_WID (32)
#define SBB_PARAM_L450_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L450_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H451_REG register description at address offset 0x2618
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h451_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h451_reg_t;

#define SBB_PARAM_H451_DEFAULT (0x00000000U)
#define SBB_PARAM_H451_RD_MASK (0xffffffffU)
#define SBB_PARAM_H451_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H451_VAL_BF_OFF ( 0)
#define SBB_PARAM_H451_VAL_BF_WID (32)
#define SBB_PARAM_H451_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H451_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L451_REG register description at address offset 0x261c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l451_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l451_reg_t;

#define SBB_PARAM_L451_DEFAULT (0x00000000U)
#define SBB_PARAM_L451_RD_MASK (0xffffffffU)
#define SBB_PARAM_L451_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L451_VAL_BF_OFF ( 0)
#define SBB_PARAM_L451_VAL_BF_WID (32)
#define SBB_PARAM_L451_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L451_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H452_REG register description at address offset 0x2620
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h452_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h452_reg_t;

#define SBB_PARAM_H452_DEFAULT (0x00000000U)
#define SBB_PARAM_H452_RD_MASK (0xffffffffU)
#define SBB_PARAM_H452_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H452_VAL_BF_OFF ( 0)
#define SBB_PARAM_H452_VAL_BF_WID (32)
#define SBB_PARAM_H452_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H452_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L452_REG register description at address offset 0x2624
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l452_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l452_reg_t;

#define SBB_PARAM_L452_DEFAULT (0x00000000U)
#define SBB_PARAM_L452_RD_MASK (0xffffffffU)
#define SBB_PARAM_L452_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L452_VAL_BF_OFF ( 0)
#define SBB_PARAM_L452_VAL_BF_WID (32)
#define SBB_PARAM_L452_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L452_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H453_REG register description at address offset 0x2628
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h453_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h453_reg_t;

#define SBB_PARAM_H453_DEFAULT (0x00000000U)
#define SBB_PARAM_H453_RD_MASK (0xffffffffU)
#define SBB_PARAM_H453_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H453_VAL_BF_OFF ( 0)
#define SBB_PARAM_H453_VAL_BF_WID (32)
#define SBB_PARAM_H453_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H453_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L453_REG register description at address offset 0x262c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l453_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l453_reg_t;

#define SBB_PARAM_L453_DEFAULT (0x00000000U)
#define SBB_PARAM_L453_RD_MASK (0xffffffffU)
#define SBB_PARAM_L453_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L453_VAL_BF_OFF ( 0)
#define SBB_PARAM_L453_VAL_BF_WID (32)
#define SBB_PARAM_L453_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L453_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H454_REG register description at address offset 0x2630
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h454_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h454_reg_t;

#define SBB_PARAM_H454_DEFAULT (0x00000000U)
#define SBB_PARAM_H454_RD_MASK (0xffffffffU)
#define SBB_PARAM_H454_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H454_VAL_BF_OFF ( 0)
#define SBB_PARAM_H454_VAL_BF_WID (32)
#define SBB_PARAM_H454_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H454_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L454_REG register description at address offset 0x2634
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l454_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l454_reg_t;

#define SBB_PARAM_L454_DEFAULT (0x00000000U)
#define SBB_PARAM_L454_RD_MASK (0xffffffffU)
#define SBB_PARAM_L454_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L454_VAL_BF_OFF ( 0)
#define SBB_PARAM_L454_VAL_BF_WID (32)
#define SBB_PARAM_L454_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L454_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H455_REG register description at address offset 0x2638
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h455_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h455_reg_t;

#define SBB_PARAM_H455_DEFAULT (0x00000000U)
#define SBB_PARAM_H455_RD_MASK (0xffffffffU)
#define SBB_PARAM_H455_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H455_VAL_BF_OFF ( 0)
#define SBB_PARAM_H455_VAL_BF_WID (32)
#define SBB_PARAM_H455_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H455_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L455_REG register description at address offset 0x263c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l455_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l455_reg_t;

#define SBB_PARAM_L455_DEFAULT (0x00000000U)
#define SBB_PARAM_L455_RD_MASK (0xffffffffU)
#define SBB_PARAM_L455_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L455_VAL_BF_OFF ( 0)
#define SBB_PARAM_L455_VAL_BF_WID (32)
#define SBB_PARAM_L455_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L455_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H456_REG register description at address offset 0x2640
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h456_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h456_reg_t;

#define SBB_PARAM_H456_DEFAULT (0x00000000U)
#define SBB_PARAM_H456_RD_MASK (0xffffffffU)
#define SBB_PARAM_H456_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H456_VAL_BF_OFF ( 0)
#define SBB_PARAM_H456_VAL_BF_WID (32)
#define SBB_PARAM_H456_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H456_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L456_REG register description at address offset 0x2644
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l456_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l456_reg_t;

#define SBB_PARAM_L456_DEFAULT (0x00000000U)
#define SBB_PARAM_L456_RD_MASK (0xffffffffU)
#define SBB_PARAM_L456_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L456_VAL_BF_OFF ( 0)
#define SBB_PARAM_L456_VAL_BF_WID (32)
#define SBB_PARAM_L456_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L456_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H457_REG register description at address offset 0x2648
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h457_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h457_reg_t;

#define SBB_PARAM_H457_DEFAULT (0x00000000U)
#define SBB_PARAM_H457_RD_MASK (0xffffffffU)
#define SBB_PARAM_H457_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H457_VAL_BF_OFF ( 0)
#define SBB_PARAM_H457_VAL_BF_WID (32)
#define SBB_PARAM_H457_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H457_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L457_REG register description at address offset 0x264c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l457_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l457_reg_t;

#define SBB_PARAM_L457_DEFAULT (0x00000000U)
#define SBB_PARAM_L457_RD_MASK (0xffffffffU)
#define SBB_PARAM_L457_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L457_VAL_BF_OFF ( 0)
#define SBB_PARAM_L457_VAL_BF_WID (32)
#define SBB_PARAM_L457_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L457_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H458_REG register description at address offset 0x2650
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h458_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h458_reg_t;

#define SBB_PARAM_H458_DEFAULT (0x00000000U)
#define SBB_PARAM_H458_RD_MASK (0xffffffffU)
#define SBB_PARAM_H458_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H458_VAL_BF_OFF ( 0)
#define SBB_PARAM_H458_VAL_BF_WID (32)
#define SBB_PARAM_H458_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H458_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L458_REG register description at address offset 0x2654
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l458_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l458_reg_t;

#define SBB_PARAM_L458_DEFAULT (0x00000000U)
#define SBB_PARAM_L458_RD_MASK (0xffffffffU)
#define SBB_PARAM_L458_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L458_VAL_BF_OFF ( 0)
#define SBB_PARAM_L458_VAL_BF_WID (32)
#define SBB_PARAM_L458_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L458_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H459_REG register description at address offset 0x2658
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h459_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h459_reg_t;

#define SBB_PARAM_H459_DEFAULT (0x00000000U)
#define SBB_PARAM_H459_RD_MASK (0xffffffffU)
#define SBB_PARAM_H459_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H459_VAL_BF_OFF ( 0)
#define SBB_PARAM_H459_VAL_BF_WID (32)
#define SBB_PARAM_H459_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H459_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L459_REG register description at address offset 0x265c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l459_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l459_reg_t;

#define SBB_PARAM_L459_DEFAULT (0x00000000U)
#define SBB_PARAM_L459_RD_MASK (0xffffffffU)
#define SBB_PARAM_L459_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L459_VAL_BF_OFF ( 0)
#define SBB_PARAM_L459_VAL_BF_WID (32)
#define SBB_PARAM_L459_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L459_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H460_REG register description at address offset 0x2660
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h460_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h460_reg_t;

#define SBB_PARAM_H460_DEFAULT (0x00000000U)
#define SBB_PARAM_H460_RD_MASK (0xffffffffU)
#define SBB_PARAM_H460_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H460_VAL_BF_OFF ( 0)
#define SBB_PARAM_H460_VAL_BF_WID (32)
#define SBB_PARAM_H460_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H460_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L460_REG register description at address offset 0x2664
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l460_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l460_reg_t;

#define SBB_PARAM_L460_DEFAULT (0x00000000U)
#define SBB_PARAM_L460_RD_MASK (0xffffffffU)
#define SBB_PARAM_L460_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L460_VAL_BF_OFF ( 0)
#define SBB_PARAM_L460_VAL_BF_WID (32)
#define SBB_PARAM_L460_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L460_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H461_REG register description at address offset 0x2668
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h461_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h461_reg_t;

#define SBB_PARAM_H461_DEFAULT (0x00000000U)
#define SBB_PARAM_H461_RD_MASK (0xffffffffU)
#define SBB_PARAM_H461_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H461_VAL_BF_OFF ( 0)
#define SBB_PARAM_H461_VAL_BF_WID (32)
#define SBB_PARAM_H461_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H461_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L461_REG register description at address offset 0x266c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l461_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l461_reg_t;

#define SBB_PARAM_L461_DEFAULT (0x00000000U)
#define SBB_PARAM_L461_RD_MASK (0xffffffffU)
#define SBB_PARAM_L461_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L461_VAL_BF_OFF ( 0)
#define SBB_PARAM_L461_VAL_BF_WID (32)
#define SBB_PARAM_L461_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L461_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H462_REG register description at address offset 0x2670
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h462_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h462_reg_t;

#define SBB_PARAM_H462_DEFAULT (0x00000000U)
#define SBB_PARAM_H462_RD_MASK (0xffffffffU)
#define SBB_PARAM_H462_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H462_VAL_BF_OFF ( 0)
#define SBB_PARAM_H462_VAL_BF_WID (32)
#define SBB_PARAM_H462_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H462_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L462_REG register description at address offset 0x2674
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l462_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l462_reg_t;

#define SBB_PARAM_L462_DEFAULT (0x00000000U)
#define SBB_PARAM_L462_RD_MASK (0xffffffffU)
#define SBB_PARAM_L462_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L462_VAL_BF_OFF ( 0)
#define SBB_PARAM_L462_VAL_BF_WID (32)
#define SBB_PARAM_L462_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L462_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H463_REG register description at address offset 0x2678
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h463_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h463_reg_t;

#define SBB_PARAM_H463_DEFAULT (0x00000000U)
#define SBB_PARAM_H463_RD_MASK (0xffffffffU)
#define SBB_PARAM_H463_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H463_VAL_BF_OFF ( 0)
#define SBB_PARAM_H463_VAL_BF_WID (32)
#define SBB_PARAM_H463_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H463_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L463_REG register description at address offset 0x267c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l463_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l463_reg_t;

#define SBB_PARAM_L463_DEFAULT (0x00000000U)
#define SBB_PARAM_L463_RD_MASK (0xffffffffU)
#define SBB_PARAM_L463_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L463_VAL_BF_OFF ( 0)
#define SBB_PARAM_L463_VAL_BF_WID (32)
#define SBB_PARAM_L463_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L463_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H464_REG register description at address offset 0x2680
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h464_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h464_reg_t;

#define SBB_PARAM_H464_DEFAULT (0x00000000U)
#define SBB_PARAM_H464_RD_MASK (0xffffffffU)
#define SBB_PARAM_H464_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H464_VAL_BF_OFF ( 0)
#define SBB_PARAM_H464_VAL_BF_WID (32)
#define SBB_PARAM_H464_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H464_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L464_REG register description at address offset 0x2684
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l464_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l464_reg_t;

#define SBB_PARAM_L464_DEFAULT (0x00000000U)
#define SBB_PARAM_L464_RD_MASK (0xffffffffU)
#define SBB_PARAM_L464_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L464_VAL_BF_OFF ( 0)
#define SBB_PARAM_L464_VAL_BF_WID (32)
#define SBB_PARAM_L464_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L464_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H465_REG register description at address offset 0x2688
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h465_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h465_reg_t;

#define SBB_PARAM_H465_DEFAULT (0x00000000U)
#define SBB_PARAM_H465_RD_MASK (0xffffffffU)
#define SBB_PARAM_H465_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H465_VAL_BF_OFF ( 0)
#define SBB_PARAM_H465_VAL_BF_WID (32)
#define SBB_PARAM_H465_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H465_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L465_REG register description at address offset 0x268c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l465_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l465_reg_t;

#define SBB_PARAM_L465_DEFAULT (0x00000000U)
#define SBB_PARAM_L465_RD_MASK (0xffffffffU)
#define SBB_PARAM_L465_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L465_VAL_BF_OFF ( 0)
#define SBB_PARAM_L465_VAL_BF_WID (32)
#define SBB_PARAM_L465_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L465_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H466_REG register description at address offset 0x2690
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h466_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h466_reg_t;

#define SBB_PARAM_H466_DEFAULT (0x00000000U)
#define SBB_PARAM_H466_RD_MASK (0xffffffffU)
#define SBB_PARAM_H466_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H466_VAL_BF_OFF ( 0)
#define SBB_PARAM_H466_VAL_BF_WID (32)
#define SBB_PARAM_H466_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H466_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L466_REG register description at address offset 0x2694
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l466_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l466_reg_t;

#define SBB_PARAM_L466_DEFAULT (0x00000000U)
#define SBB_PARAM_L466_RD_MASK (0xffffffffU)
#define SBB_PARAM_L466_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L466_VAL_BF_OFF ( 0)
#define SBB_PARAM_L466_VAL_BF_WID (32)
#define SBB_PARAM_L466_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L466_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H467_REG register description at address offset 0x2698
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h467_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h467_reg_t;

#define SBB_PARAM_H467_DEFAULT (0x00000000U)
#define SBB_PARAM_H467_RD_MASK (0xffffffffU)
#define SBB_PARAM_H467_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H467_VAL_BF_OFF ( 0)
#define SBB_PARAM_H467_VAL_BF_WID (32)
#define SBB_PARAM_H467_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H467_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L467_REG register description at address offset 0x269c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l467_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l467_reg_t;

#define SBB_PARAM_L467_DEFAULT (0x00000000U)
#define SBB_PARAM_L467_RD_MASK (0xffffffffU)
#define SBB_PARAM_L467_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L467_VAL_BF_OFF ( 0)
#define SBB_PARAM_L467_VAL_BF_WID (32)
#define SBB_PARAM_L467_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L467_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H468_REG register description at address offset 0x26a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h468_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h468_reg_t;

#define SBB_PARAM_H468_DEFAULT (0x00000000U)
#define SBB_PARAM_H468_RD_MASK (0xffffffffU)
#define SBB_PARAM_H468_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H468_VAL_BF_OFF ( 0)
#define SBB_PARAM_H468_VAL_BF_WID (32)
#define SBB_PARAM_H468_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H468_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L468_REG register description at address offset 0x26a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l468_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l468_reg_t;

#define SBB_PARAM_L468_DEFAULT (0x00000000U)
#define SBB_PARAM_L468_RD_MASK (0xffffffffU)
#define SBB_PARAM_L468_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L468_VAL_BF_OFF ( 0)
#define SBB_PARAM_L468_VAL_BF_WID (32)
#define SBB_PARAM_L468_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L468_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H469_REG register description at address offset 0x26a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h469_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h469_reg_t;

#define SBB_PARAM_H469_DEFAULT (0x00000000U)
#define SBB_PARAM_H469_RD_MASK (0xffffffffU)
#define SBB_PARAM_H469_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H469_VAL_BF_OFF ( 0)
#define SBB_PARAM_H469_VAL_BF_WID (32)
#define SBB_PARAM_H469_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H469_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L469_REG register description at address offset 0x26ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l469_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l469_reg_t;

#define SBB_PARAM_L469_DEFAULT (0x00000000U)
#define SBB_PARAM_L469_RD_MASK (0xffffffffU)
#define SBB_PARAM_L469_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L469_VAL_BF_OFF ( 0)
#define SBB_PARAM_L469_VAL_BF_WID (32)
#define SBB_PARAM_L469_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L469_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H470_REG register description at address offset 0x26b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h470_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h470_reg_t;

#define SBB_PARAM_H470_DEFAULT (0x00000000U)
#define SBB_PARAM_H470_RD_MASK (0xffffffffU)
#define SBB_PARAM_H470_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H470_VAL_BF_OFF ( 0)
#define SBB_PARAM_H470_VAL_BF_WID (32)
#define SBB_PARAM_H470_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H470_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L470_REG register description at address offset 0x26b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l470_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l470_reg_t;

#define SBB_PARAM_L470_DEFAULT (0x00000000U)
#define SBB_PARAM_L470_RD_MASK (0xffffffffU)
#define SBB_PARAM_L470_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L470_VAL_BF_OFF ( 0)
#define SBB_PARAM_L470_VAL_BF_WID (32)
#define SBB_PARAM_L470_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L470_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H471_REG register description at address offset 0x26b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h471_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h471_reg_t;

#define SBB_PARAM_H471_DEFAULT (0x00000000U)
#define SBB_PARAM_H471_RD_MASK (0xffffffffU)
#define SBB_PARAM_H471_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H471_VAL_BF_OFF ( 0)
#define SBB_PARAM_H471_VAL_BF_WID (32)
#define SBB_PARAM_H471_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H471_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L471_REG register description at address offset 0x26bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l471_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l471_reg_t;

#define SBB_PARAM_L471_DEFAULT (0x00000000U)
#define SBB_PARAM_L471_RD_MASK (0xffffffffU)
#define SBB_PARAM_L471_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L471_VAL_BF_OFF ( 0)
#define SBB_PARAM_L471_VAL_BF_WID (32)
#define SBB_PARAM_L471_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L471_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H472_REG register description at address offset 0x26c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h472_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h472_reg_t;

#define SBB_PARAM_H472_DEFAULT (0x00000000U)
#define SBB_PARAM_H472_RD_MASK (0xffffffffU)
#define SBB_PARAM_H472_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H472_VAL_BF_OFF ( 0)
#define SBB_PARAM_H472_VAL_BF_WID (32)
#define SBB_PARAM_H472_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H472_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L472_REG register description at address offset 0x26c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l472_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l472_reg_t;

#define SBB_PARAM_L472_DEFAULT (0x00000000U)
#define SBB_PARAM_L472_RD_MASK (0xffffffffU)
#define SBB_PARAM_L472_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L472_VAL_BF_OFF ( 0)
#define SBB_PARAM_L472_VAL_BF_WID (32)
#define SBB_PARAM_L472_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L472_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H473_REG register description at address offset 0x26c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h473_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h473_reg_t;

#define SBB_PARAM_H473_DEFAULT (0x00000000U)
#define SBB_PARAM_H473_RD_MASK (0xffffffffU)
#define SBB_PARAM_H473_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H473_VAL_BF_OFF ( 0)
#define SBB_PARAM_H473_VAL_BF_WID (32)
#define SBB_PARAM_H473_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H473_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L473_REG register description at address offset 0x26cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l473_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l473_reg_t;

#define SBB_PARAM_L473_DEFAULT (0x00000000U)
#define SBB_PARAM_L473_RD_MASK (0xffffffffU)
#define SBB_PARAM_L473_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L473_VAL_BF_OFF ( 0)
#define SBB_PARAM_L473_VAL_BF_WID (32)
#define SBB_PARAM_L473_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L473_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H474_REG register description at address offset 0x26d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h474_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h474_reg_t;

#define SBB_PARAM_H474_DEFAULT (0x00000000U)
#define SBB_PARAM_H474_RD_MASK (0xffffffffU)
#define SBB_PARAM_H474_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H474_VAL_BF_OFF ( 0)
#define SBB_PARAM_H474_VAL_BF_WID (32)
#define SBB_PARAM_H474_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H474_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L474_REG register description at address offset 0x26d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l474_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l474_reg_t;

#define SBB_PARAM_L474_DEFAULT (0x00000000U)
#define SBB_PARAM_L474_RD_MASK (0xffffffffU)
#define SBB_PARAM_L474_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L474_VAL_BF_OFF ( 0)
#define SBB_PARAM_L474_VAL_BF_WID (32)
#define SBB_PARAM_L474_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L474_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H475_REG register description at address offset 0x26d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h475_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h475_reg_t;

#define SBB_PARAM_H475_DEFAULT (0x00000000U)
#define SBB_PARAM_H475_RD_MASK (0xffffffffU)
#define SBB_PARAM_H475_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H475_VAL_BF_OFF ( 0)
#define SBB_PARAM_H475_VAL_BF_WID (32)
#define SBB_PARAM_H475_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H475_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L475_REG register description at address offset 0x26dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l475_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l475_reg_t;

#define SBB_PARAM_L475_DEFAULT (0x00000000U)
#define SBB_PARAM_L475_RD_MASK (0xffffffffU)
#define SBB_PARAM_L475_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L475_VAL_BF_OFF ( 0)
#define SBB_PARAM_L475_VAL_BF_WID (32)
#define SBB_PARAM_L475_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L475_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H476_REG register description at address offset 0x26e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h476_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h476_reg_t;

#define SBB_PARAM_H476_DEFAULT (0x00000000U)
#define SBB_PARAM_H476_RD_MASK (0xffffffffU)
#define SBB_PARAM_H476_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H476_VAL_BF_OFF ( 0)
#define SBB_PARAM_H476_VAL_BF_WID (32)
#define SBB_PARAM_H476_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H476_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L476_REG register description at address offset 0x26e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l476_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l476_reg_t;

#define SBB_PARAM_L476_DEFAULT (0x00000000U)
#define SBB_PARAM_L476_RD_MASK (0xffffffffU)
#define SBB_PARAM_L476_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L476_VAL_BF_OFF ( 0)
#define SBB_PARAM_L476_VAL_BF_WID (32)
#define SBB_PARAM_L476_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L476_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H477_REG register description at address offset 0x26e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h477_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h477_reg_t;

#define SBB_PARAM_H477_DEFAULT (0x00000000U)
#define SBB_PARAM_H477_RD_MASK (0xffffffffU)
#define SBB_PARAM_H477_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H477_VAL_BF_OFF ( 0)
#define SBB_PARAM_H477_VAL_BF_WID (32)
#define SBB_PARAM_H477_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H477_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L477_REG register description at address offset 0x26ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l477_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l477_reg_t;

#define SBB_PARAM_L477_DEFAULT (0x00000000U)
#define SBB_PARAM_L477_RD_MASK (0xffffffffU)
#define SBB_PARAM_L477_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L477_VAL_BF_OFF ( 0)
#define SBB_PARAM_L477_VAL_BF_WID (32)
#define SBB_PARAM_L477_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L477_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H478_REG register description at address offset 0x26f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h478_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h478_reg_t;

#define SBB_PARAM_H478_DEFAULT (0x00000000U)
#define SBB_PARAM_H478_RD_MASK (0xffffffffU)
#define SBB_PARAM_H478_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H478_VAL_BF_OFF ( 0)
#define SBB_PARAM_H478_VAL_BF_WID (32)
#define SBB_PARAM_H478_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H478_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L478_REG register description at address offset 0x26f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l478_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l478_reg_t;

#define SBB_PARAM_L478_DEFAULT (0x00000000U)
#define SBB_PARAM_L478_RD_MASK (0xffffffffU)
#define SBB_PARAM_L478_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L478_VAL_BF_OFF ( 0)
#define SBB_PARAM_L478_VAL_BF_WID (32)
#define SBB_PARAM_L478_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L478_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H479_REG register description at address offset 0x26f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h479_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h479_reg_t;

#define SBB_PARAM_H479_DEFAULT (0x00000000U)
#define SBB_PARAM_H479_RD_MASK (0xffffffffU)
#define SBB_PARAM_H479_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H479_VAL_BF_OFF ( 0)
#define SBB_PARAM_H479_VAL_BF_WID (32)
#define SBB_PARAM_H479_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H479_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L479_REG register description at address offset 0x26fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l479_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l479_reg_t;

#define SBB_PARAM_L479_DEFAULT (0x00000000U)
#define SBB_PARAM_L479_RD_MASK (0xffffffffU)
#define SBB_PARAM_L479_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L479_VAL_BF_OFF ( 0)
#define SBB_PARAM_L479_VAL_BF_WID (32)
#define SBB_PARAM_L479_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L479_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H480_REG register description at address offset 0x2700
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h480_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h480_reg_t;

#define SBB_PARAM_H480_DEFAULT (0x00000000U)
#define SBB_PARAM_H480_RD_MASK (0xffffffffU)
#define SBB_PARAM_H480_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H480_VAL_BF_OFF ( 0)
#define SBB_PARAM_H480_VAL_BF_WID (32)
#define SBB_PARAM_H480_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H480_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L480_REG register description at address offset 0x2704
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l480_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l480_reg_t;

#define SBB_PARAM_L480_DEFAULT (0x00000000U)
#define SBB_PARAM_L480_RD_MASK (0xffffffffU)
#define SBB_PARAM_L480_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L480_VAL_BF_OFF ( 0)
#define SBB_PARAM_L480_VAL_BF_WID (32)
#define SBB_PARAM_L480_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L480_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H481_REG register description at address offset 0x2708
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h481_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h481_reg_t;

#define SBB_PARAM_H481_DEFAULT (0x00000000U)
#define SBB_PARAM_H481_RD_MASK (0xffffffffU)
#define SBB_PARAM_H481_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H481_VAL_BF_OFF ( 0)
#define SBB_PARAM_H481_VAL_BF_WID (32)
#define SBB_PARAM_H481_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H481_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L481_REG register description at address offset 0x270c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l481_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l481_reg_t;

#define SBB_PARAM_L481_DEFAULT (0x00000000U)
#define SBB_PARAM_L481_RD_MASK (0xffffffffU)
#define SBB_PARAM_L481_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L481_VAL_BF_OFF ( 0)
#define SBB_PARAM_L481_VAL_BF_WID (32)
#define SBB_PARAM_L481_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L481_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H482_REG register description at address offset 0x2710
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h482_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h482_reg_t;

#define SBB_PARAM_H482_DEFAULT (0x00000000U)
#define SBB_PARAM_H482_RD_MASK (0xffffffffU)
#define SBB_PARAM_H482_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H482_VAL_BF_OFF ( 0)
#define SBB_PARAM_H482_VAL_BF_WID (32)
#define SBB_PARAM_H482_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H482_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L482_REG register description at address offset 0x2714
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l482_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l482_reg_t;

#define SBB_PARAM_L482_DEFAULT (0x00000000U)
#define SBB_PARAM_L482_RD_MASK (0xffffffffU)
#define SBB_PARAM_L482_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L482_VAL_BF_OFF ( 0)
#define SBB_PARAM_L482_VAL_BF_WID (32)
#define SBB_PARAM_L482_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L482_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H483_REG register description at address offset 0x2718
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h483_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h483_reg_t;

#define SBB_PARAM_H483_DEFAULT (0x00000000U)
#define SBB_PARAM_H483_RD_MASK (0xffffffffU)
#define SBB_PARAM_H483_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H483_VAL_BF_OFF ( 0)
#define SBB_PARAM_H483_VAL_BF_WID (32)
#define SBB_PARAM_H483_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H483_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L483_REG register description at address offset 0x271c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l483_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l483_reg_t;

#define SBB_PARAM_L483_DEFAULT (0x00000000U)
#define SBB_PARAM_L483_RD_MASK (0xffffffffU)
#define SBB_PARAM_L483_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L483_VAL_BF_OFF ( 0)
#define SBB_PARAM_L483_VAL_BF_WID (32)
#define SBB_PARAM_L483_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L483_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H484_REG register description at address offset 0x2720
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h484_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h484_reg_t;

#define SBB_PARAM_H484_DEFAULT (0x00000000U)
#define SBB_PARAM_H484_RD_MASK (0xffffffffU)
#define SBB_PARAM_H484_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H484_VAL_BF_OFF ( 0)
#define SBB_PARAM_H484_VAL_BF_WID (32)
#define SBB_PARAM_H484_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H484_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L484_REG register description at address offset 0x2724
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l484_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l484_reg_t;

#define SBB_PARAM_L484_DEFAULT (0x00000000U)
#define SBB_PARAM_L484_RD_MASK (0xffffffffU)
#define SBB_PARAM_L484_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L484_VAL_BF_OFF ( 0)
#define SBB_PARAM_L484_VAL_BF_WID (32)
#define SBB_PARAM_L484_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L484_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H485_REG register description at address offset 0x2728
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h485_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h485_reg_t;

#define SBB_PARAM_H485_DEFAULT (0x00000000U)
#define SBB_PARAM_H485_RD_MASK (0xffffffffU)
#define SBB_PARAM_H485_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H485_VAL_BF_OFF ( 0)
#define SBB_PARAM_H485_VAL_BF_WID (32)
#define SBB_PARAM_H485_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H485_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L485_REG register description at address offset 0x272c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l485_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l485_reg_t;

#define SBB_PARAM_L485_DEFAULT (0x00000000U)
#define SBB_PARAM_L485_RD_MASK (0xffffffffU)
#define SBB_PARAM_L485_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L485_VAL_BF_OFF ( 0)
#define SBB_PARAM_L485_VAL_BF_WID (32)
#define SBB_PARAM_L485_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L485_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H486_REG register description at address offset 0x2730
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h486_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h486_reg_t;

#define SBB_PARAM_H486_DEFAULT (0x00000000U)
#define SBB_PARAM_H486_RD_MASK (0xffffffffU)
#define SBB_PARAM_H486_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H486_VAL_BF_OFF ( 0)
#define SBB_PARAM_H486_VAL_BF_WID (32)
#define SBB_PARAM_H486_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H486_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L486_REG register description at address offset 0x2734
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l486_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l486_reg_t;

#define SBB_PARAM_L486_DEFAULT (0x00000000U)
#define SBB_PARAM_L486_RD_MASK (0xffffffffU)
#define SBB_PARAM_L486_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L486_VAL_BF_OFF ( 0)
#define SBB_PARAM_L486_VAL_BF_WID (32)
#define SBB_PARAM_L486_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L486_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H487_REG register description at address offset 0x2738
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h487_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h487_reg_t;

#define SBB_PARAM_H487_DEFAULT (0x00000000U)
#define SBB_PARAM_H487_RD_MASK (0xffffffffU)
#define SBB_PARAM_H487_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H487_VAL_BF_OFF ( 0)
#define SBB_PARAM_H487_VAL_BF_WID (32)
#define SBB_PARAM_H487_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H487_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L487_REG register description at address offset 0x273c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l487_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l487_reg_t;

#define SBB_PARAM_L487_DEFAULT (0x00000000U)
#define SBB_PARAM_L487_RD_MASK (0xffffffffU)
#define SBB_PARAM_L487_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L487_VAL_BF_OFF ( 0)
#define SBB_PARAM_L487_VAL_BF_WID (32)
#define SBB_PARAM_L487_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L487_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H488_REG register description at address offset 0x2740
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h488_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h488_reg_t;

#define SBB_PARAM_H488_DEFAULT (0x00000000U)
#define SBB_PARAM_H488_RD_MASK (0xffffffffU)
#define SBB_PARAM_H488_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H488_VAL_BF_OFF ( 0)
#define SBB_PARAM_H488_VAL_BF_WID (32)
#define SBB_PARAM_H488_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H488_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L488_REG register description at address offset 0x2744
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l488_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l488_reg_t;

#define SBB_PARAM_L488_DEFAULT (0x00000000U)
#define SBB_PARAM_L488_RD_MASK (0xffffffffU)
#define SBB_PARAM_L488_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L488_VAL_BF_OFF ( 0)
#define SBB_PARAM_L488_VAL_BF_WID (32)
#define SBB_PARAM_L488_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L488_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H489_REG register description at address offset 0x2748
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h489_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h489_reg_t;

#define SBB_PARAM_H489_DEFAULT (0x00000000U)
#define SBB_PARAM_H489_RD_MASK (0xffffffffU)
#define SBB_PARAM_H489_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H489_VAL_BF_OFF ( 0)
#define SBB_PARAM_H489_VAL_BF_WID (32)
#define SBB_PARAM_H489_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H489_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L489_REG register description at address offset 0x274c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l489_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l489_reg_t;

#define SBB_PARAM_L489_DEFAULT (0x00000000U)
#define SBB_PARAM_L489_RD_MASK (0xffffffffU)
#define SBB_PARAM_L489_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L489_VAL_BF_OFF ( 0)
#define SBB_PARAM_L489_VAL_BF_WID (32)
#define SBB_PARAM_L489_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L489_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H490_REG register description at address offset 0x2750
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h490_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h490_reg_t;

#define SBB_PARAM_H490_DEFAULT (0x00000000U)
#define SBB_PARAM_H490_RD_MASK (0xffffffffU)
#define SBB_PARAM_H490_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H490_VAL_BF_OFF ( 0)
#define SBB_PARAM_H490_VAL_BF_WID (32)
#define SBB_PARAM_H490_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H490_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L490_REG register description at address offset 0x2754
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l490_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l490_reg_t;

#define SBB_PARAM_L490_DEFAULT (0x00000000U)
#define SBB_PARAM_L490_RD_MASK (0xffffffffU)
#define SBB_PARAM_L490_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L490_VAL_BF_OFF ( 0)
#define SBB_PARAM_L490_VAL_BF_WID (32)
#define SBB_PARAM_L490_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L490_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H491_REG register description at address offset 0x2758
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h491_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h491_reg_t;

#define SBB_PARAM_H491_DEFAULT (0x00000000U)
#define SBB_PARAM_H491_RD_MASK (0xffffffffU)
#define SBB_PARAM_H491_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H491_VAL_BF_OFF ( 0)
#define SBB_PARAM_H491_VAL_BF_WID (32)
#define SBB_PARAM_H491_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H491_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L491_REG register description at address offset 0x275c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l491_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l491_reg_t;

#define SBB_PARAM_L491_DEFAULT (0x00000000U)
#define SBB_PARAM_L491_RD_MASK (0xffffffffU)
#define SBB_PARAM_L491_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L491_VAL_BF_OFF ( 0)
#define SBB_PARAM_L491_VAL_BF_WID (32)
#define SBB_PARAM_L491_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L491_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H492_REG register description at address offset 0x2760
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h492_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h492_reg_t;

#define SBB_PARAM_H492_DEFAULT (0x00000000U)
#define SBB_PARAM_H492_RD_MASK (0xffffffffU)
#define SBB_PARAM_H492_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H492_VAL_BF_OFF ( 0)
#define SBB_PARAM_H492_VAL_BF_WID (32)
#define SBB_PARAM_H492_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H492_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L492_REG register description at address offset 0x2764
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l492_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l492_reg_t;

#define SBB_PARAM_L492_DEFAULT (0x00000000U)
#define SBB_PARAM_L492_RD_MASK (0xffffffffU)
#define SBB_PARAM_L492_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L492_VAL_BF_OFF ( 0)
#define SBB_PARAM_L492_VAL_BF_WID (32)
#define SBB_PARAM_L492_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L492_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H493_REG register description at address offset 0x2768
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h493_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h493_reg_t;

#define SBB_PARAM_H493_DEFAULT (0x00000000U)
#define SBB_PARAM_H493_RD_MASK (0xffffffffU)
#define SBB_PARAM_H493_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H493_VAL_BF_OFF ( 0)
#define SBB_PARAM_H493_VAL_BF_WID (32)
#define SBB_PARAM_H493_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H493_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L493_REG register description at address offset 0x276c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l493_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l493_reg_t;

#define SBB_PARAM_L493_DEFAULT (0x00000000U)
#define SBB_PARAM_L493_RD_MASK (0xffffffffU)
#define SBB_PARAM_L493_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L493_VAL_BF_OFF ( 0)
#define SBB_PARAM_L493_VAL_BF_WID (32)
#define SBB_PARAM_L493_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L493_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H494_REG register description at address offset 0x2770
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h494_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h494_reg_t;

#define SBB_PARAM_H494_DEFAULT (0x00000000U)
#define SBB_PARAM_H494_RD_MASK (0xffffffffU)
#define SBB_PARAM_H494_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H494_VAL_BF_OFF ( 0)
#define SBB_PARAM_H494_VAL_BF_WID (32)
#define SBB_PARAM_H494_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H494_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L494_REG register description at address offset 0x2774
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l494_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l494_reg_t;

#define SBB_PARAM_L494_DEFAULT (0x00000000U)
#define SBB_PARAM_L494_RD_MASK (0xffffffffU)
#define SBB_PARAM_L494_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L494_VAL_BF_OFF ( 0)
#define SBB_PARAM_L494_VAL_BF_WID (32)
#define SBB_PARAM_L494_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L494_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H495_REG register description at address offset 0x2778
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h495_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h495_reg_t;

#define SBB_PARAM_H495_DEFAULT (0x00000000U)
#define SBB_PARAM_H495_RD_MASK (0xffffffffU)
#define SBB_PARAM_H495_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H495_VAL_BF_OFF ( 0)
#define SBB_PARAM_H495_VAL_BF_WID (32)
#define SBB_PARAM_H495_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H495_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L495_REG register description at address offset 0x277c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l495_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l495_reg_t;

#define SBB_PARAM_L495_DEFAULT (0x00000000U)
#define SBB_PARAM_L495_RD_MASK (0xffffffffU)
#define SBB_PARAM_L495_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L495_VAL_BF_OFF ( 0)
#define SBB_PARAM_L495_VAL_BF_WID (32)
#define SBB_PARAM_L495_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L495_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H496_REG register description at address offset 0x2780
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h496_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h496_reg_t;

#define SBB_PARAM_H496_DEFAULT (0x00000000U)
#define SBB_PARAM_H496_RD_MASK (0xffffffffU)
#define SBB_PARAM_H496_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H496_VAL_BF_OFF ( 0)
#define SBB_PARAM_H496_VAL_BF_WID (32)
#define SBB_PARAM_H496_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H496_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L496_REG register description at address offset 0x2784
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l496_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l496_reg_t;

#define SBB_PARAM_L496_DEFAULT (0x00000000U)
#define SBB_PARAM_L496_RD_MASK (0xffffffffU)
#define SBB_PARAM_L496_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L496_VAL_BF_OFF ( 0)
#define SBB_PARAM_L496_VAL_BF_WID (32)
#define SBB_PARAM_L496_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L496_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H497_REG register description at address offset 0x2788
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h497_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h497_reg_t;

#define SBB_PARAM_H497_DEFAULT (0x00000000U)
#define SBB_PARAM_H497_RD_MASK (0xffffffffU)
#define SBB_PARAM_H497_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H497_VAL_BF_OFF ( 0)
#define SBB_PARAM_H497_VAL_BF_WID (32)
#define SBB_PARAM_H497_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H497_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L497_REG register description at address offset 0x278c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l497_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l497_reg_t;

#define SBB_PARAM_L497_DEFAULT (0x00000000U)
#define SBB_PARAM_L497_RD_MASK (0xffffffffU)
#define SBB_PARAM_L497_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L497_VAL_BF_OFF ( 0)
#define SBB_PARAM_L497_VAL_BF_WID (32)
#define SBB_PARAM_L497_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L497_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H498_REG register description at address offset 0x2790
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h498_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h498_reg_t;

#define SBB_PARAM_H498_DEFAULT (0x00000000U)
#define SBB_PARAM_H498_RD_MASK (0xffffffffU)
#define SBB_PARAM_H498_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H498_VAL_BF_OFF ( 0)
#define SBB_PARAM_H498_VAL_BF_WID (32)
#define SBB_PARAM_H498_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H498_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L498_REG register description at address offset 0x2794
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l498_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l498_reg_t;

#define SBB_PARAM_L498_DEFAULT (0x00000000U)
#define SBB_PARAM_L498_RD_MASK (0xffffffffU)
#define SBB_PARAM_L498_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L498_VAL_BF_OFF ( 0)
#define SBB_PARAM_L498_VAL_BF_WID (32)
#define SBB_PARAM_L498_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L498_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H499_REG register description at address offset 0x2798
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h499_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h499_reg_t;

#define SBB_PARAM_H499_DEFAULT (0x00000000U)
#define SBB_PARAM_H499_RD_MASK (0xffffffffU)
#define SBB_PARAM_H499_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H499_VAL_BF_OFF ( 0)
#define SBB_PARAM_H499_VAL_BF_WID (32)
#define SBB_PARAM_H499_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H499_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L499_REG register description at address offset 0x279c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l499_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l499_reg_t;

#define SBB_PARAM_L499_DEFAULT (0x00000000U)
#define SBB_PARAM_L499_RD_MASK (0xffffffffU)
#define SBB_PARAM_L499_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L499_VAL_BF_OFF ( 0)
#define SBB_PARAM_L499_VAL_BF_WID (32)
#define SBB_PARAM_L499_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L499_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H500_REG register description at address offset 0x27a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h500_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h500_reg_t;

#define SBB_PARAM_H500_DEFAULT (0x00000000U)
#define SBB_PARAM_H500_RD_MASK (0xffffffffU)
#define SBB_PARAM_H500_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H500_VAL_BF_OFF ( 0)
#define SBB_PARAM_H500_VAL_BF_WID (32)
#define SBB_PARAM_H500_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H500_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L500_REG register description at address offset 0x27a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l500_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l500_reg_t;

#define SBB_PARAM_L500_DEFAULT (0x00000000U)
#define SBB_PARAM_L500_RD_MASK (0xffffffffU)
#define SBB_PARAM_L500_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L500_VAL_BF_OFF ( 0)
#define SBB_PARAM_L500_VAL_BF_WID (32)
#define SBB_PARAM_L500_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L500_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H501_REG register description at address offset 0x27a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h501_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h501_reg_t;

#define SBB_PARAM_H501_DEFAULT (0x00000000U)
#define SBB_PARAM_H501_RD_MASK (0xffffffffU)
#define SBB_PARAM_H501_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H501_VAL_BF_OFF ( 0)
#define SBB_PARAM_H501_VAL_BF_WID (32)
#define SBB_PARAM_H501_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H501_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L501_REG register description at address offset 0x27ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l501_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l501_reg_t;

#define SBB_PARAM_L501_DEFAULT (0x00000000U)
#define SBB_PARAM_L501_RD_MASK (0xffffffffU)
#define SBB_PARAM_L501_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L501_VAL_BF_OFF ( 0)
#define SBB_PARAM_L501_VAL_BF_WID (32)
#define SBB_PARAM_L501_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L501_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H502_REG register description at address offset 0x27b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h502_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h502_reg_t;

#define SBB_PARAM_H502_DEFAULT (0x00000000U)
#define SBB_PARAM_H502_RD_MASK (0xffffffffU)
#define SBB_PARAM_H502_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H502_VAL_BF_OFF ( 0)
#define SBB_PARAM_H502_VAL_BF_WID (32)
#define SBB_PARAM_H502_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H502_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L502_REG register description at address offset 0x27b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l502_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l502_reg_t;

#define SBB_PARAM_L502_DEFAULT (0x00000000U)
#define SBB_PARAM_L502_RD_MASK (0xffffffffU)
#define SBB_PARAM_L502_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L502_VAL_BF_OFF ( 0)
#define SBB_PARAM_L502_VAL_BF_WID (32)
#define SBB_PARAM_L502_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L502_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H503_REG register description at address offset 0x27b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h503_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h503_reg_t;

#define SBB_PARAM_H503_DEFAULT (0x00000000U)
#define SBB_PARAM_H503_RD_MASK (0xffffffffU)
#define SBB_PARAM_H503_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H503_VAL_BF_OFF ( 0)
#define SBB_PARAM_H503_VAL_BF_WID (32)
#define SBB_PARAM_H503_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H503_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L503_REG register description at address offset 0x27bc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l503_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l503_reg_t;

#define SBB_PARAM_L503_DEFAULT (0x00000000U)
#define SBB_PARAM_L503_RD_MASK (0xffffffffU)
#define SBB_PARAM_L503_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L503_VAL_BF_OFF ( 0)
#define SBB_PARAM_L503_VAL_BF_WID (32)
#define SBB_PARAM_L503_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L503_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H504_REG register description at address offset 0x27c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h504_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h504_reg_t;

#define SBB_PARAM_H504_DEFAULT (0x00000000U)
#define SBB_PARAM_H504_RD_MASK (0xffffffffU)
#define SBB_PARAM_H504_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H504_VAL_BF_OFF ( 0)
#define SBB_PARAM_H504_VAL_BF_WID (32)
#define SBB_PARAM_H504_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H504_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L504_REG register description at address offset 0x27c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l504_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l504_reg_t;

#define SBB_PARAM_L504_DEFAULT (0x00000000U)
#define SBB_PARAM_L504_RD_MASK (0xffffffffU)
#define SBB_PARAM_L504_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L504_VAL_BF_OFF ( 0)
#define SBB_PARAM_L504_VAL_BF_WID (32)
#define SBB_PARAM_L504_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L504_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H505_REG register description at address offset 0x27c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h505_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h505_reg_t;

#define SBB_PARAM_H505_DEFAULT (0x00000000U)
#define SBB_PARAM_H505_RD_MASK (0xffffffffU)
#define SBB_PARAM_H505_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H505_VAL_BF_OFF ( 0)
#define SBB_PARAM_H505_VAL_BF_WID (32)
#define SBB_PARAM_H505_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H505_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L505_REG register description at address offset 0x27cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l505_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l505_reg_t;

#define SBB_PARAM_L505_DEFAULT (0x00000000U)
#define SBB_PARAM_L505_RD_MASK (0xffffffffU)
#define SBB_PARAM_L505_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L505_VAL_BF_OFF ( 0)
#define SBB_PARAM_L505_VAL_BF_WID (32)
#define SBB_PARAM_L505_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L505_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H506_REG register description at address offset 0x27d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h506_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h506_reg_t;

#define SBB_PARAM_H506_DEFAULT (0x00000000U)
#define SBB_PARAM_H506_RD_MASK (0xffffffffU)
#define SBB_PARAM_H506_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H506_VAL_BF_OFF ( 0)
#define SBB_PARAM_H506_VAL_BF_WID (32)
#define SBB_PARAM_H506_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H506_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L506_REG register description at address offset 0x27d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l506_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l506_reg_t;

#define SBB_PARAM_L506_DEFAULT (0x00000000U)
#define SBB_PARAM_L506_RD_MASK (0xffffffffU)
#define SBB_PARAM_L506_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L506_VAL_BF_OFF ( 0)
#define SBB_PARAM_L506_VAL_BF_WID (32)
#define SBB_PARAM_L506_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L506_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H507_REG register description at address offset 0x27d8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h507_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h507_reg_t;

#define SBB_PARAM_H507_DEFAULT (0x00000000U)
#define SBB_PARAM_H507_RD_MASK (0xffffffffU)
#define SBB_PARAM_H507_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H507_VAL_BF_OFF ( 0)
#define SBB_PARAM_H507_VAL_BF_WID (32)
#define SBB_PARAM_H507_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H507_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L507_REG register description at address offset 0x27dc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l507_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l507_reg_t;

#define SBB_PARAM_L507_DEFAULT (0x00000000U)
#define SBB_PARAM_L507_RD_MASK (0xffffffffU)
#define SBB_PARAM_L507_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L507_VAL_BF_OFF ( 0)
#define SBB_PARAM_L507_VAL_BF_WID (32)
#define SBB_PARAM_L507_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L507_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H508_REG register description at address offset 0x27e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h508_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h508_reg_t;

#define SBB_PARAM_H508_DEFAULT (0x00000000U)
#define SBB_PARAM_H508_RD_MASK (0xffffffffU)
#define SBB_PARAM_H508_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H508_VAL_BF_OFF ( 0)
#define SBB_PARAM_H508_VAL_BF_WID (32)
#define SBB_PARAM_H508_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H508_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L508_REG register description at address offset 0x27e4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l508_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l508_reg_t;

#define SBB_PARAM_L508_DEFAULT (0x00000000U)
#define SBB_PARAM_L508_RD_MASK (0xffffffffU)
#define SBB_PARAM_L508_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L508_VAL_BF_OFF ( 0)
#define SBB_PARAM_L508_VAL_BF_WID (32)
#define SBB_PARAM_L508_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L508_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H509_REG register description at address offset 0x27e8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h509_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h509_reg_t;

#define SBB_PARAM_H509_DEFAULT (0x00000000U)
#define SBB_PARAM_H509_RD_MASK (0xffffffffU)
#define SBB_PARAM_H509_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H509_VAL_BF_OFF ( 0)
#define SBB_PARAM_H509_VAL_BF_WID (32)
#define SBB_PARAM_H509_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H509_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L509_REG register description at address offset 0x27ec
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l509_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l509_reg_t;

#define SBB_PARAM_L509_DEFAULT (0x00000000U)
#define SBB_PARAM_L509_RD_MASK (0xffffffffU)
#define SBB_PARAM_L509_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L509_VAL_BF_OFF ( 0)
#define SBB_PARAM_L509_VAL_BF_WID (32)
#define SBB_PARAM_L509_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L509_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H510_REG register description at address offset 0x27f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h510_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h510_reg_t;

#define SBB_PARAM_H510_DEFAULT (0x00000000U)
#define SBB_PARAM_H510_RD_MASK (0xffffffffU)
#define SBB_PARAM_H510_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H510_VAL_BF_OFF ( 0)
#define SBB_PARAM_H510_VAL_BF_WID (32)
#define SBB_PARAM_H510_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H510_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L510_REG register description at address offset 0x27f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l510_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l510_reg_t;

#define SBB_PARAM_L510_DEFAULT (0x00000000U)
#define SBB_PARAM_L510_RD_MASK (0xffffffffU)
#define SBB_PARAM_L510_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L510_VAL_BF_OFF ( 0)
#define SBB_PARAM_L510_VAL_BF_WID (32)
#define SBB_PARAM_L510_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L510_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_H511_REG register description at address offset 0x27f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_h511_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_h511_reg_t;

#define SBB_PARAM_H511_DEFAULT (0x00000000U)
#define SBB_PARAM_H511_RD_MASK (0xffffffffU)
#define SBB_PARAM_H511_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_H511_VAL_BF_OFF ( 0)
#define SBB_PARAM_H511_VAL_BF_WID (32)
#define SBB_PARAM_H511_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_H511_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PARAM_L511_REG register description at address offset 0x27fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/param_l511_reg
  * Parameter Register
  */

typedef union {
  struct {
    uint32_t VAL : 32;
    ///< Value of parameter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_param_l511_reg_t;

#define SBB_PARAM_L511_DEFAULT (0x00000000U)
#define SBB_PARAM_L511_RD_MASK (0xffffffffU)
#define SBB_PARAM_L511_WR_MASK (0xffffffffU)


///< Value of parameter
#define SBB_PARAM_L511_VAL_BF_OFF ( 0)
#define SBB_PARAM_L511_VAL_BF_WID (32)
#define SBB_PARAM_L511_VAL_BF_MSK (0xFFFFFFFF)
#define SBB_PARAM_L511_VAL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_DEBUG_STATUS_REG register description at address offset 0x4004
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/debug_status_reg
  * Debug Status Register
  */

typedef union {
  struct {
    uint32_t RUN_BUSY : 1;
    ///< Debug Status. When 1, processor is executing one of run actions. When
    ///< the action is finished it goes to 0.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} sbb_dbg_stat_reg_t;

#define SBB_DBG_STAT_DEFAULT (0x00000000U)
#define SBB_DBG_STAT_RD_MASK (0x00000001U)
#define SBB_DBG_STAT_WR_MASK (0x00000000U)


///< Debug Status. When 1, processor is executing one of run actions. When
///< the action is finished it goes to 0.
#define SBB_DBG_STAT_RUN_BUSY_BF_OFF ( 0)
#define SBB_DBG_STAT_RUN_BUSY_BF_WID ( 1)
#define SBB_DBG_STAT_RUN_BUSY_BF_MSK (0x00000001)
#define SBB_DBG_STAT_RUN_BUSY_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_INVLD_INST_ADDR_REG register description at address offset 0x400c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/invld_inst_addr_reg
  * Invalid Instruction Address Register
  */

typedef union {
  struct {
    uint32_t ADDR : 15;
    ///< Invalid Instruction Address. The address containing the offending
    ///< instruction.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} sbb_invld_inst_addr_reg_t;

#define SBB_INVLD_INST_ADDR_DEFAULT (0x00000000U)
#define SBB_INVLD_INST_ADDR_RD_MASK (0x00007fffU)
#define SBB_INVLD_INST_ADDR_WR_MASK (0x00000000U)


///< Invalid Instruction Address. The address containing the offending
///< instruction.
#define SBB_INVLD_INST_ADDR_BF_OFF ( 0)
#define SBB_INVLD_INST_ADDR_BF_WID (15)
#define SBB_INVLD_INST_ADDR_BF_MSK (0x00007FFF)
#define SBB_INVLD_INST_ADDR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_PC_DATA_ADDR_REG register description at address offset 0x4010
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/pc_data_addr_reg
  * Program Counter Address Register
  */

typedef union {
  struct {
    uint32_t PC_DATA : 15;
    ///< CCU program counter.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} sbb_pc_data_addr_reg_t;

#define SBB_PC_DATA_ADDR_DEFAULT (0x00000000U)
#define SBB_PC_DATA_ADDR_RD_MASK (0x00007fffU)
#define SBB_PC_DATA_ADDR_WR_MASK (0x00000000U)


///< CCU program counter.
#define SBB_PC_DATA_ADDR_PC_DATA_BF_OFF ( 0)
#define SBB_PC_DATA_ADDR_PC_DATA_BF_WID (15)
#define SBB_PC_DATA_ADDR_PC_DATA_BF_MSK (0x00007FFF)
#define SBB_PC_DATA_ADDR_PC_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_DEC_STG_PC_REG register description at address offset 0x4014
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/dec_stg_pc_reg
  * Decode Stage Program Counter Register
  */

typedef union {
  struct {
    uint32_t ADDR : 15;
    ///< Program Counter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} sbb_dec_stg_pc_reg_t;

#define SBB_DEC_STG_PC_DEFAULT (0x00000000U)
#define SBB_DEC_STG_PC_RD_MASK (0x00007fffU)
#define SBB_DEC_STG_PC_WR_MASK (0x00000000U)


///< Program Counter
#define SBB_DEC_STG_PC_ADDR_BF_OFF ( 0)
#define SBB_DEC_STG_PC_ADDR_BF_WID (15)
#define SBB_DEC_STG_PC_ADDR_BF_MSK (0x00007FFF)
#define SBB_DEC_STG_PC_ADDR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_DEC_STG_OPCODE_REG register description at address offset 0x4018
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/dec_stg_opcode_reg
  * Decode Stage Op-Code Register
  */

typedef union {
  struct {
    uint32_t OPCODE : 8;
    ///< Op-Code
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sbb_dec_stg_opcode_reg_t;

#define SBB_DEC_STG_OPCODE_DEFAULT (0x00000000U)
#define SBB_DEC_STG_OPCODE_RD_MASK (0x000000ffU)
#define SBB_DEC_STG_OPCODE_WR_MASK (0x00000000U)


///< Op-Code
#define SBB_DEC_STG_OPCODE_BF_OFF ( 0)
#define SBB_DEC_STG_OPCODE_BF_WID ( 8)
#define SBB_DEC_STG_OPCODE_BF_MSK (0x000000FF)
#define SBB_DEC_STG_OPCODE_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_ISS_STG_PC_REG register description at address offset 0x401c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/iss_stg_pc_reg
  * Issue Stage Program Counter Register
  */

typedef union {
  struct {
    uint32_t ADDR : 15;
    ///< Program Counter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} sbb_iss_stg_pc_reg_t;

#define SBB_ISS_STG_PC_DEFAULT (0x00000000U)
#define SBB_ISS_STG_PC_RD_MASK (0x00007fffU)
#define SBB_ISS_STG_PC_WR_MASK (0x00000000U)


///< Program Counter
#define SBB_ISS_STG_PC_ADDR_BF_OFF ( 0)
#define SBB_ISS_STG_PC_ADDR_BF_WID (15)
#define SBB_ISS_STG_PC_ADDR_BF_MSK (0x00007FFF)
#define SBB_ISS_STG_PC_ADDR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_ISS_STG_OPCODE_REG register description at address offset 0x4020
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/iss_stg_opcode_reg
  * Issue Stage Op-Code Register
  */

typedef union {
  struct {
    uint32_t DO_CMD : 4;
    ///< DATA_OUT command.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DO_VALID : 1;
    ///< DATA_OUT valid.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t ARW_CMD : 3;
    ///< Anti-Replay Window command.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t DM_CMD : 4;
    ///< Data Mover command.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ALU_CMD : 5;
    ///< ALU command.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t DM_VALID : 1;
    ///< Data Mover command valid.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} sbb_iss_stg_opcode_reg_t;

#define SBB_ISS_STG_OPCODE_DEFAULT (0x00000000U)
#define SBB_ISS_STG_OPCODE_RD_MASK (0x011ff71fU)
#define SBB_ISS_STG_OPCODE_WR_MASK (0x00000000U)


///< DATA_OUT command.
#define SBB_ISS_STG_OPCODE_DO_CMD_BF_OFF ( 0)
#define SBB_ISS_STG_OPCODE_DO_CMD_BF_WID ( 4)
#define SBB_ISS_STG_OPCODE_DO_CMD_BF_MSK (0x0000000F)
#define SBB_ISS_STG_OPCODE_DO_CMD_BF_DEF (0x00000000)

///< DATA_OUT valid.
#define SBB_ISS_STG_OPCODE_DO_VALID_BF_OFF ( 4)
#define SBB_ISS_STG_OPCODE_DO_VALID_BF_WID ( 1)
#define SBB_ISS_STG_OPCODE_DO_VALID_BF_MSK (0x00000010)
#define SBB_ISS_STG_OPCODE_DO_VALID_BF_DEF (0x00000000)

///< Anti-Replay Window command.
#define SBB_ISS_STG_OPCODE_ARW_CMD_BF_OFF ( 8)
#define SBB_ISS_STG_OPCODE_ARW_CMD_BF_WID ( 3)
#define SBB_ISS_STG_OPCODE_ARW_CMD_BF_MSK (0x00000700)
#define SBB_ISS_STG_OPCODE_ARW_CMD_BF_DEF (0x00000000)

///< Data Mover command.
#define SBB_ISS_STG_OPCODE_DM_CMD_BF_OFF (12)
#define SBB_ISS_STG_OPCODE_DM_CMD_BF_WID ( 4)
#define SBB_ISS_STG_OPCODE_DM_CMD_BF_MSK (0x0000F000)
#define SBB_ISS_STG_OPCODE_DM_CMD_BF_DEF (0x00000000)

///< ALU command.
#define SBB_ISS_STG_OPCODE_ALU_CMD_BF_OFF (16)
#define SBB_ISS_STG_OPCODE_ALU_CMD_BF_WID ( 5)
#define SBB_ISS_STG_OPCODE_ALU_CMD_BF_MSK (0x001F0000)
#define SBB_ISS_STG_OPCODE_ALU_CMD_BF_DEF (0x00000000)

///< Data Mover command valid.
#define SBB_ISS_STG_OPCODE_DM_VALID_BF_OFF (24)
#define SBB_ISS_STG_OPCODE_DM_VALID_BF_WID ( 1)
#define SBB_ISS_STG_OPCODE_DM_VALID_BF_MSK (0x01000000)
#define SBB_ISS_STG_OPCODE_DM_VALID_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_STG_STATUS_REG register description at address offset 0x4024
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/stg_status_reg
  * Stage Status Register
  */

typedef union {
  struct {
    uint32_t DEC_STG_IVAL : 1;
    ///< Decode Stage Instruction Valid.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DEC_STG_STALL : 1;
    ///< Decode Stage Instruction Stall.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t ISS_STG_IVAL : 1;
    ///< Issue Stage Instruction Valid.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t ISSC_STG_STALL : 1;
    ///< Issue Stage Instruction Stall.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} sbb_stg_stat_reg_t;

#define SBB_STG_STAT_DEFAULT (0x00000000U)
#define SBB_STG_STAT_RD_MASK (0x0000000fU)
#define SBB_STG_STAT_WR_MASK (0x00000000U)


///< Decode Stage Instruction Valid.
#define SBB_STG_STAT_DEC_STG_IVAL_BF_OFF ( 0)
#define SBB_STG_STAT_DEC_STG_IVAL_BF_WID ( 1)
#define SBB_STG_STAT_DEC_STG_IVAL_BF_MSK (0x00000001)
#define SBB_STG_STAT_DEC_STG_IVAL_BF_DEF (0x00000000)

///< Decode Stage Instruction Stall.
#define SBB_STG_STAT_DEC_STG_STALL_BF_OFF ( 1)
#define SBB_STG_STAT_DEC_STG_STALL_BF_WID ( 1)
#define SBB_STG_STAT_DEC_STG_STALL_BF_MSK (0x00000002)
#define SBB_STG_STAT_DEC_STG_STALL_BF_DEF (0x00000000)

///< Issue Stage Instruction Valid.
#define SBB_STG_STAT_ISS_STG_IVAL_BF_OFF ( 2)
#define SBB_STG_STAT_ISS_STG_IVAL_BF_WID ( 1)
#define SBB_STG_STAT_ISS_STG_IVAL_BF_MSK (0x00000004)
#define SBB_STG_STAT_ISS_STG_IVAL_BF_DEF (0x00000000)

///< Issue Stage Instruction Stall.
#define SBB_STG_STAT_ISSC_STG_STALL_BF_OFF ( 3)
#define SBB_STG_STAT_ISSC_STG_STALL_BF_WID ( 1)
#define SBB_STG_STAT_ISSC_STG_STALL_BF_MSK (0x00000008)
#define SBB_STG_STAT_ISSC_STG_STALL_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_FREG_HEADPTR_REG register description at address offset 0x4028
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/freg_headptr_reg
  * CCU Padding Storage FIFO Head Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 3;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} sbb_freg_headptr_reg_t;

#define SBB_FREG_HEADPTR_DEFAULT (0x00000000U)
#define SBB_FREG_HEADPTR_RD_MASK (0x00000007U)
#define SBB_FREG_HEADPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_FREG_HEADPTR_PNTR_BF_OFF ( 0)
#define SBB_FREG_HEADPTR_PNTR_BF_WID ( 3)
#define SBB_FREG_HEADPTR_PNTR_BF_MSK (0x00000007)
#define SBB_FREG_HEADPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_FREG_TAILPTR_REG register description at address offset 0x402c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/freg_tailptr_reg
  * CCU Padding Storage FIFO Tail Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 3;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} sbb_freg_tailptr_reg_t;

#define SBB_FREG_TAILPTR_DEFAULT (0x00000000U)
#define SBB_FREG_TAILPTR_RD_MASK (0x00000007U)
#define SBB_FREG_TAILPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_FREG_TAILPTR_PNTR_BF_OFF ( 0)
#define SBB_FREG_TAILPTR_PNTR_BF_WID ( 3)
#define SBB_FREG_TAILPTR_PNTR_BF_MSK (0x00000007)
#define SBB_FREG_TAILPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_HEADPTR_REG register description at address offset 0x4030
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_headptr_reg
  * CCU Input FIFO Head Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 9;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sbb_in_fifo_headptr_reg_t;

#define SBB_IN_FIFO_HEADPTR_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_HEADPTR_RD_MASK (0x000001ffU)
#define SBB_IN_FIFO_HEADPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_IN_FIFO_HEADPTR_PNTR_BF_OFF ( 0)
#define SBB_IN_FIFO_HEADPTR_PNTR_BF_WID ( 9)
#define SBB_IN_FIFO_HEADPTR_PNTR_BF_MSK (0x000001FF)
#define SBB_IN_FIFO_HEADPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_TAILPTR_REG register description at address offset 0x4034
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_tailptr_reg
  * CCU Input FIFO Tail Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 9;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sbb_in_fifo_tailptr_reg_t;

#define SBB_IN_FIFO_TAILPTR_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_TAILPTR_RD_MASK (0x000001ffU)
#define SBB_IN_FIFO_TAILPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_IN_FIFO_TAILPTR_PNTR_BF_OFF ( 0)
#define SBB_IN_FIFO_TAILPTR_PNTR_BF_WID ( 9)
#define SBB_IN_FIFO_TAILPTR_PNTR_BF_MSK (0x000001FF)
#define SBB_IN_FIFO_TAILPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_HEADPTR_REG register description at address offset 0x4038
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_headptr_reg
  * CCU Output FIFO Head Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 9;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sbb_out_fifo_headptr_reg_t;

#define SBB_OUT_FIFO_HEADPTR_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_HEADPTR_RD_MASK (0x000001ffU)
#define SBB_OUT_FIFO_HEADPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_OUT_FIFO_HEADPTR_PNTR_BF_OFF ( 0)
#define SBB_OUT_FIFO_HEADPTR_PNTR_BF_WID ( 9)
#define SBB_OUT_FIFO_HEADPTR_PNTR_BF_MSK (0x000001FF)
#define SBB_OUT_FIFO_HEADPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_TAILPTR_REG register description at address offset 0x403c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_tailptr_reg
  * CCU Output FIFO Tail Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 9;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sbb_out_fifo_tailptr_reg_t;

#define SBB_OUT_FIFO_TAILPTR_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_TAILPTR_RD_MASK (0x000001ffU)
#define SBB_OUT_FIFO_TAILPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_OUT_FIFO_TAILPTR_PNTR_BF_OFF ( 0)
#define SBB_OUT_FIFO_TAILPTR_PNTR_BF_WID ( 9)
#define SBB_OUT_FIFO_TAILPTR_PNTR_BF_MSK (0x000001FF)
#define SBB_OUT_FIFO_TAILPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_STGMEM_FIFO_HEADPTR_REG register description at address offset 0x4040
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/stgmem_fifo_headptr_reg
  * CCU Stage Memory FIFO Head Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 9;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sbb_stgmem_fifo_headptr_reg_t;

#define SBB_STGMEM_FIFO_HEADPTR_DEFAULT (0x00000000U)
#define SBB_STGMEM_FIFO_HEADPTR_RD_MASK (0x000001ffU)
#define SBB_STGMEM_FIFO_HEADPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_STGMEM_FIFO_HEADPTR_PNTR_BF_OFF ( 0)
#define SBB_STGMEM_FIFO_HEADPTR_PNTR_BF_WID ( 9)
#define SBB_STGMEM_FIFO_HEADPTR_PNTR_BF_MSK (0x000001FF)
#define SBB_STGMEM_FIFO_HEADPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_STGMEM_FIFO_TAILPTR_REG register description at address offset 0x4044
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/stgmem_fifo_tailptr_reg
  * CCU Stage Memory FIFO Tail Pointer Register.
  */

typedef union {
  struct {
    uint32_t PNTR : 9;
    ///< Pointer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sbb_stgmem_fifo_tailptr_reg_t;

#define SBB_STGMEM_FIFO_TAILPTR_DEFAULT (0x00000000U)
#define SBB_STGMEM_FIFO_TAILPTR_RD_MASK (0x000001ffU)
#define SBB_STGMEM_FIFO_TAILPTR_WR_MASK (0x00000000U)


///< Pointer.
#define SBB_STGMEM_FIFO_TAILPTR_PNTR_BF_OFF ( 0)
#define SBB_STGMEM_FIFO_TAILPTR_PNTR_BF_WID ( 9)
#define SBB_STGMEM_FIFO_TAILPTR_PNTR_BF_MSK (0x000001FF)
#define SBB_STGMEM_FIFO_TAILPTR_PNTR_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_CPI_H_REG register description at address offset 0x4048
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/cpi_h_reg
  * CCU Critical Packet Information (CPI) Low bits Register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Critical packet information.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_cpi_h_reg_t;

#define SBB_CPI_H_DEFAULT (0x00000000U)
#define SBB_CPI_H_RD_MASK (0xffffffffU)
#define SBB_CPI_H_WR_MASK (0x00000000U)


///< Critical packet information.
#define SBB_CPI_H_DATA_BF_OFF ( 0)
#define SBB_CPI_H_DATA_BF_WID (32)
#define SBB_CPI_H_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_CPI_H_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_CPI_L_REG register description at address offset 0x404c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/cpi_l_reg
  * CCU Critical Packet Information (CPI) High bits Register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Critical packet information.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_cpi_l_reg_t;

#define SBB_CPI_L_DEFAULT (0x00000000U)
#define SBB_CPI_L_RD_MASK (0xffffffffU)
#define SBB_CPI_L_WR_MASK (0x00000000U)


///< Critical packet information.
#define SBB_CPI_L_DATA_BF_OFF ( 0)
#define SBB_CPI_L_DATA_BF_WID (32)
#define SBB_CPI_L_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_CPI_L_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IREG_H_REG register description at address offset 0x4050
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/ireg_h_reg
  * CCU Padding Increment High bits Register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ireg_h_reg_t;

#define SBB_IREG_H_DEFAULT (0x00000000U)
#define SBB_IREG_H_RD_MASK (0xffffffffU)
#define SBB_IREG_H_WR_MASK (0x00000000U)


///< Data.
#define SBB_IREG_H_DATA_BF_OFF ( 0)
#define SBB_IREG_H_DATA_BF_WID (32)
#define SBB_IREG_H_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IREG_H_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IREG_L_REG register description at address offset 0x4054
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/ireg_l_reg
  * CCU Padding Increment Low bits Register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ireg_l_reg_t;

#define SBB_IREG_L_DEFAULT (0x00000000U)
#define SBB_IREG_L_RD_MASK (0xffffffffU)
#define SBB_IREG_L_WR_MASK (0x00000000U)


///< Data.
#define SBB_IREG_L_DATA_BF_OFF ( 0)
#define SBB_IREG_L_DATA_BF_WID (32)
#define SBB_IREG_L_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IREG_L_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_HOF_H_REG register description at address offset 0x4060
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_hof_h_reg
  * CCU Input FIFO Head-of-FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_hof_h_reg_t;

#define SBB_IN_FIFO_HOF_H_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_HOF_H_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_HOF_H_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_HOF_H_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_HOF_H_DATA_BF_WID (32)
#define SBB_IN_FIFO_HOF_H_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_HOF_H_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_HOF_L_REG register description at address offset 0x4064
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_hof_l_reg
  * CCU Input FIFO Head-of-FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_hof_l_reg_t;

#define SBB_IN_FIFO_HOF_L_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_HOF_L_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_HOF_L_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_HOF_L_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_HOF_L_DATA_BF_WID (32)
#define SBB_IN_FIFO_HOF_L_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_HOF_L_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_HOF_H_REG register description at address offset 0x4068
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_hof_h_reg
  * CCU Output FIFO Head-of-FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_hof_h_reg_t;

#define SBB_OUT_FIFO_HOF_H_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_HOF_H_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_HOF_H_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_HOF_H_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_HOF_H_DATA_BF_WID (32)
#define SBB_OUT_FIFO_HOF_H_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_HOF_H_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_HOF_L_REG register description at address offset 0x406c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_hof_l_reg
  * CCU Output FIFO Head-of-FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_hof_l_reg_t;

#define SBB_OUT_FIFO_HOF_L_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_HOF_L_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_HOF_L_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_HOF_L_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_HOF_L_DATA_BF_WID (32)
#define SBB_OUT_FIFO_HOF_L_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_HOF_L_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_FIFO_OU_STS_REG register description at address offset 0x4078
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/fifo_ou_sts_reg
  * FIFO Overflow/Underflow Register.
  */

typedef union {
  struct {
    uint32_t STGMEM_FIFO_U : 1;
    ///< Stage Memory FIFO Underflow.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t STGMEM_FIFO_O : 1;
    ///< Stage Memory FIFO Overflow.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t OUT_FIFO_U : 1;
    ///< Output FIFO Underflow.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t OUT_FIFO_O : 1;
    ///< Output FIFO Overflow.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t IN_FIFO_U : 1;
    ///< Input FIFO Underflow.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t IN_FIFO_O : 1;
    ///< Input FIFO Overflow.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t FREG_U : 1;
    ///< Padding FIFO Underflow.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t FREG_O : 1;
    ///< Padding FIFO Overflow.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sbb_fifo_ou_sts_reg_t;

#define SBB_FIFO_OU_STS_DEFAULT (0x00000000U)
#define SBB_FIFO_OU_STS_RD_MASK (0x000000ffU)
#define SBB_FIFO_OU_STS_WR_MASK (0x00000000U)


///< Stage Memory FIFO Underflow.
#define SBB_FIFO_OU_STS_STGMEM_FIFO_U_BF_OFF ( 0)
#define SBB_FIFO_OU_STS_STGMEM_FIFO_U_BF_WID ( 1)
#define SBB_FIFO_OU_STS_STGMEM_FIFO_U_BF_MSK (0x00000001)
#define SBB_FIFO_OU_STS_STGMEM_FIFO_U_BF_DEF (0x00000000)

///< Stage Memory FIFO Overflow.
#define SBB_FIFO_OU_STS_STGMEM_FIFO_O_BF_OFF ( 1)
#define SBB_FIFO_OU_STS_STGMEM_FIFO_O_BF_WID ( 1)
#define SBB_FIFO_OU_STS_STGMEM_FIFO_O_BF_MSK (0x00000002)
#define SBB_FIFO_OU_STS_STGMEM_FIFO_O_BF_DEF (0x00000000)

///< Output FIFO Underflow.
#define SBB_FIFO_OU_STS_OUT_FIFO_U_BF_OFF ( 2)
#define SBB_FIFO_OU_STS_OUT_FIFO_U_BF_WID ( 1)
#define SBB_FIFO_OU_STS_OUT_FIFO_U_BF_MSK (0x00000004)
#define SBB_FIFO_OU_STS_OUT_FIFO_U_BF_DEF (0x00000000)

///< Output FIFO Overflow.
#define SBB_FIFO_OU_STS_OUT_FIFO_O_BF_OFF ( 3)
#define SBB_FIFO_OU_STS_OUT_FIFO_O_BF_WID ( 1)
#define SBB_FIFO_OU_STS_OUT_FIFO_O_BF_MSK (0x00000008)
#define SBB_FIFO_OU_STS_OUT_FIFO_O_BF_DEF (0x00000000)

///< Input FIFO Underflow.
#define SBB_FIFO_OU_STS_IN_FIFO_U_BF_OFF ( 4)
#define SBB_FIFO_OU_STS_IN_FIFO_U_BF_WID ( 1)
#define SBB_FIFO_OU_STS_IN_FIFO_U_BF_MSK (0x00000010)
#define SBB_FIFO_OU_STS_IN_FIFO_U_BF_DEF (0x00000000)

///< Input FIFO Overflow.
#define SBB_FIFO_OU_STS_IN_FIFO_O_BF_OFF ( 5)
#define SBB_FIFO_OU_STS_IN_FIFO_O_BF_WID ( 1)
#define SBB_FIFO_OU_STS_IN_FIFO_O_BF_MSK (0x00000020)
#define SBB_FIFO_OU_STS_IN_FIFO_O_BF_DEF (0x00000000)

///< Padding FIFO Underflow.
#define SBB_FIFO_OU_STS_FREG_U_BF_OFF ( 6)
#define SBB_FIFO_OU_STS_FREG_U_BF_WID ( 1)
#define SBB_FIFO_OU_STS_FREG_U_BF_MSK (0x00000040)
#define SBB_FIFO_OU_STS_FREG_U_BF_DEF (0x00000000)

///< Padding FIFO Overflow.
#define SBB_FIFO_OU_STS_FREG_O_BF_OFF ( 7)
#define SBB_FIFO_OU_STS_FREG_O_BF_WID ( 1)
#define SBB_FIFO_OU_STS_FREG_O_BF_MSK (0x00000080)
#define SBB_FIFO_OU_STS_FREG_O_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_FIFO_FE_STS_REG register description at address offset 0x4084
  *
  * Register default value:        0x00000055
  * Register full path in IP: sbb_component/sbb_regs/fifo_fe_sts_reg
  * FIFO Full/Empty Status Register.
  */

typedef union {
  struct {
    uint32_t STGMEM_FIFO_EF : 2;
    ///< Stage Memory FIFO Empty/Full.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x1"
    uint32_t OUT_FIFO_EF : 2;
    ///< Output FIFO Empty/Full.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t IN_FIFO_EF : 2;
    ///< Input  FIFO Empty/Full.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x1"
    uint32_t FREG_EF : 2;
    ///< Padding FIFO Empty/Full.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x1"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} sbb_fifo_fe_sts_reg_t;

#define SBB_FIFO_FE_STS_DEFAULT (0x00000055U)
#define SBB_FIFO_FE_STS_RD_MASK (0x000000ffU)
#define SBB_FIFO_FE_STS_WR_MASK (0x00000000U)


///< Stage Memory FIFO Empty/Full.
#define SBB_FIFO_FE_STS_STGMEM_FIFO_EF_BF_OFF ( 0)
#define SBB_FIFO_FE_STS_STGMEM_FIFO_EF_BF_WID ( 2)
#define SBB_FIFO_FE_STS_STGMEM_FIFO_EF_BF_MSK (0x00000003)
#define SBB_FIFO_FE_STS_STGMEM_FIFO_EF_BF_DEF (0x00000001)

///< Output FIFO Empty/Full.
#define SBB_FIFO_FE_STS_OUT_FIFO_EF_BF_OFF ( 2)
#define SBB_FIFO_FE_STS_OUT_FIFO_EF_BF_WID ( 2)
#define SBB_FIFO_FE_STS_OUT_FIFO_EF_BF_MSK (0x0000000C)
#define SBB_FIFO_FE_STS_OUT_FIFO_EF_BF_DEF (0x00000004)

///< Input  FIFO Empty/Full.
#define SBB_FIFO_FE_STS_IN_FIFO_EF_BF_OFF ( 4)
#define SBB_FIFO_FE_STS_IN_FIFO_EF_BF_WID ( 2)
#define SBB_FIFO_FE_STS_IN_FIFO_EF_BF_MSK (0x00000030)
#define SBB_FIFO_FE_STS_IN_FIFO_EF_BF_DEF (0x00000010)

///< Padding FIFO Empty/Full.
#define SBB_FIFO_FE_STS_FREG_EF_BF_OFF ( 6)
#define SBB_FIFO_FE_STS_FREG_EF_BF_WID ( 2)
#define SBB_FIFO_FE_STS_FREG_EF_BF_MSK (0x000000C0)
#define SBB_FIFO_FE_STS_FREG_EF_BF_DEF (0x00000040)


/** @brief SBB_COMPONENT_SBB_REGS_GENERAL_STATUS_REG register description at address offset 0x4088
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/general_status_reg
  * Status Register
  */

typedef union {
  struct {
    uint32_t MEM_CLEARED : 1;
    ///< Memory Cleared. When 1, zeroization process is done and memory is
    ///< clear.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} sbb_general_stat_reg_t;

#define SBB_GENERAL_STAT_DEFAULT (0x00000000U)
#define SBB_GENERAL_STAT_RD_MASK (0x00000001U)
#define SBB_GENERAL_STAT_WR_MASK (0x00000000U)


///< Memory Cleared. When 1, zeroization process is done and memory is
///< clear.
#define SBB_GENERAL_STAT_MEM_CLRED_BF_OFF ( 0)
#define SBB_GENERAL_STAT_MEM_CLRED_BF_WID ( 1)
#define SBB_GENERAL_STAT_MEM_CLRED_BF_MSK (0x00000001)
#define SBB_GENERAL_STAT_MEM_CLRED_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_CLR_MEM_REG register description at address offset 0x408c
  *
  * Register default value:        0x00000001
  * Register full path in IP: sbb_component/sbb_regs/clr_mem_reg
  * Clear Memory Register
  */

typedef union {
  struct {
    uint32_t REQ : 1;
    ///< Request to clear memory. Write 1 to start zeroization. The value become
    ///< 0 when zeroization done.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} sbb_clr_mem_reg_t;

#define SBB_CLR_MEM_DEFAULT (0x00000001U)
#define SBB_CLR_MEM_RD_MASK (0x00000001U)
#define SBB_CLR_MEM_WR_MASK (0x00000001U)


///< Request to clear memory. Write 1 to start zeroization. The value become
///< 0 when zeroization done.
#define SBB_CLR_MEM_REQ_BF_OFF ( 0)
#define SBB_CLR_MEM_REQ_BF_WID ( 1)
#define SBB_CLR_MEM_REQ_BF_MSK (0x00000001)
#define SBB_CLR_MEM_REQ_BF_DEF (0x00000001)


/** @brief SBB_COMPONENT_SBB_REGS_AXI_CTRL_REG register description at address offset 0x4090
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/axi_ctrl_reg
  * AXI Control Register
  */

typedef union {
  struct {
    uint32_t AWCACHE_M_SBB : 4;
    ///< SBB Master awcache value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t ARCACHE_M_SBB : 4;
    ///< SBB Master arcache value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} sbb_axi_ctrl_reg_t;

#define SBB_AXI_CTRL_DEFAULT (0x00000000U)
#define SBB_AXI_CTRL_RD_MASK (0x000f000fU)
#define SBB_AXI_CTRL_WR_MASK (0x000f000fU)


///< SBB Master awcache value
#define SBB_AXI_CTRL_AWCACHE_M_SBB_BF_OFF ( 0)
#define SBB_AXI_CTRL_AWCACHE_M_SBB_BF_WID ( 4)
#define SBB_AXI_CTRL_AWCACHE_M_SBB_BF_MSK (0x0000000F)
#define SBB_AXI_CTRL_AWCACHE_M_SBB_BF_DEF (0x00000000)

///< SBB Master arcache value
#define SBB_AXI_CTRL_ARCACHE_M_SBB_BF_OFF (16)
#define SBB_AXI_CTRL_ARCACHE_M_SBB_BF_WID ( 4)
#define SBB_AXI_CTRL_ARCACHE_M_SBB_BF_MSK (0x000F0000)
#define SBB_AXI_CTRL_ARCACHE_M_SBB_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_NS_RESEED_COUNTER_REG register description at address offset 0x40a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/ns_reseed_counter_reg
  * Noise Source Reseed Counter Register
  */

typedef union {
  struct {
    uint32_t RESEED_COUNTER : 31;
    ///< Reseed counter
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESEED_COUNTER_OVERFLOW : 1;
    ///< Reseed counter overflow
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_ns_reseed_cnter_reg_t;

#define SBB_NS_RESEED_CNTER_DEFAULT (0x00000000U)
#define SBB_NS_RESEED_CNTER_RD_MASK (0xffffffffU)
#define SBB_NS_RESEED_CNTER_WR_MASK (0x00000000U)


///< Reseed counter
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_BF_OFF ( 0)
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_BF_WID (31)
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_BF_MSK (0x7FFFFFFF)
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_BF_DEF (0x00000000)

///< Reseed counter overflow
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_OVERFLOW_BF_OFF (31)
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_OVERFLOW_BF_WID ( 1)
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_OVERFLOW_BF_MSK (0x80000000)
#define SBB_NS_RESEED_CNTER_RESEED_CNTER_OVERFLOW_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H0_REG register description at address offset 0x5800
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h0_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h0_reg_t;

#define SBB_IN_FIFO_H0_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H0_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H0_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H0_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H0_DATA_BF_WID (32)
#define SBB_IN_FIFO_H0_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H0_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L0_REG register description at address offset 0x5804
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l0_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l0_reg_t;

#define SBB_IN_FIFO_L0_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L0_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L0_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L0_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L0_DATA_BF_WID (32)
#define SBB_IN_FIFO_L0_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L0_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H1_REG register description at address offset 0x5808
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h1_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h1_reg_t;

#define SBB_IN_FIFO_H1_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H1_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H1_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H1_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H1_DATA_BF_WID (32)
#define SBB_IN_FIFO_H1_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H1_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L1_REG register description at address offset 0x580c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l1_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l1_reg_t;

#define SBB_IN_FIFO_L1_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L1_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L1_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L1_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L1_DATA_BF_WID (32)
#define SBB_IN_FIFO_L1_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L1_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H2_REG register description at address offset 0x5810
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h2_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h2_reg_t;

#define SBB_IN_FIFO_H2_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H2_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H2_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H2_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H2_DATA_BF_WID (32)
#define SBB_IN_FIFO_H2_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H2_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L2_REG register description at address offset 0x5814
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l2_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l2_reg_t;

#define SBB_IN_FIFO_L2_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L2_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L2_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L2_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L2_DATA_BF_WID (32)
#define SBB_IN_FIFO_L2_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L2_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H3_REG register description at address offset 0x5818
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h3_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h3_reg_t;

#define SBB_IN_FIFO_H3_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H3_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H3_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H3_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H3_DATA_BF_WID (32)
#define SBB_IN_FIFO_H3_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H3_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L3_REG register description at address offset 0x581c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l3_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l3_reg_t;

#define SBB_IN_FIFO_L3_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L3_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L3_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L3_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L3_DATA_BF_WID (32)
#define SBB_IN_FIFO_L3_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L3_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H4_REG register description at address offset 0x5820
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h4_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h4_reg_t;

#define SBB_IN_FIFO_H4_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H4_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H4_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H4_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H4_DATA_BF_WID (32)
#define SBB_IN_FIFO_H4_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H4_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L4_REG register description at address offset 0x5824
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l4_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l4_reg_t;

#define SBB_IN_FIFO_L4_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L4_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L4_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L4_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L4_DATA_BF_WID (32)
#define SBB_IN_FIFO_L4_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L4_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H5_REG register description at address offset 0x5828
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h5_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h5_reg_t;

#define SBB_IN_FIFO_H5_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H5_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H5_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H5_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H5_DATA_BF_WID (32)
#define SBB_IN_FIFO_H5_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H5_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L5_REG register description at address offset 0x582c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l5_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l5_reg_t;

#define SBB_IN_FIFO_L5_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L5_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L5_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L5_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L5_DATA_BF_WID (32)
#define SBB_IN_FIFO_L5_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L5_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H6_REG register description at address offset 0x5830
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h6_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h6_reg_t;

#define SBB_IN_FIFO_H6_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H6_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H6_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H6_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H6_DATA_BF_WID (32)
#define SBB_IN_FIFO_H6_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H6_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L6_REG register description at address offset 0x5834
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l6_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l6_reg_t;

#define SBB_IN_FIFO_L6_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L6_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L6_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L6_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L6_DATA_BF_WID (32)
#define SBB_IN_FIFO_L6_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L6_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_H7_REG register description at address offset 0x5838
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_h7_reg
  * CCU Input FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_h7_reg_t;

#define SBB_IN_FIFO_H7_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_H7_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_H7_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_H7_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_H7_DATA_BF_WID (32)
#define SBB_IN_FIFO_H7_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_H7_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_IN_FIFO_L7_REG register description at address offset 0x583c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/in_fifo_l7_reg
  * CCU Input FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_in_fifo_l7_reg_t;

#define SBB_IN_FIFO_L7_DEFAULT (0x00000000U)
#define SBB_IN_FIFO_L7_RD_MASK (0xffffffffU)
#define SBB_IN_FIFO_L7_WR_MASK (0x00000000U)


///< Data.
#define SBB_IN_FIFO_L7_DATA_BF_OFF ( 0)
#define SBB_IN_FIFO_L7_DATA_BF_WID (32)
#define SBB_IN_FIFO_L7_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_IN_FIFO_L7_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H0_REG register description at address offset 0x6000
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h0_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h0_reg_t;

#define SBB_OUT_FIFO_H0_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H0_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H0_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H0_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H0_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H0_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H0_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L0_REG register description at address offset 0x6004
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l0_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l0_reg_t;

#define SBB_OUT_FIFO_L0_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L0_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L0_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L0_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L0_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L0_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L0_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H1_REG register description at address offset 0x6008
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h1_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h1_reg_t;

#define SBB_OUT_FIFO_H1_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H1_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H1_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H1_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H1_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H1_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H1_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L1_REG register description at address offset 0x600c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l1_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l1_reg_t;

#define SBB_OUT_FIFO_L1_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L1_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L1_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L1_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L1_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L1_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L1_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H2_REG register description at address offset 0x6010
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h2_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h2_reg_t;

#define SBB_OUT_FIFO_H2_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H2_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H2_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H2_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H2_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H2_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H2_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L2_REG register description at address offset 0x6014
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l2_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l2_reg_t;

#define SBB_OUT_FIFO_L2_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L2_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L2_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L2_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L2_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L2_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L2_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H3_REG register description at address offset 0x6018
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h3_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h3_reg_t;

#define SBB_OUT_FIFO_H3_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H3_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H3_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H3_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H3_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H3_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H3_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L3_REG register description at address offset 0x601c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l3_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l3_reg_t;

#define SBB_OUT_FIFO_L3_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L3_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L3_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L3_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L3_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L3_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L3_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H4_REG register description at address offset 0x6020
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h4_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h4_reg_t;

#define SBB_OUT_FIFO_H4_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H4_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H4_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H4_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H4_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H4_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H4_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L4_REG register description at address offset 0x6024
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l4_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l4_reg_t;

#define SBB_OUT_FIFO_L4_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L4_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L4_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L4_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L4_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L4_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L4_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H5_REG register description at address offset 0x6028
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h5_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h5_reg_t;

#define SBB_OUT_FIFO_H5_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H5_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H5_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H5_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H5_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H5_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H5_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L5_REG register description at address offset 0x602c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l5_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l5_reg_t;

#define SBB_OUT_FIFO_L5_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L5_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L5_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L5_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L5_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L5_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L5_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H6_REG register description at address offset 0x6030
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h6_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h6_reg_t;

#define SBB_OUT_FIFO_H6_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H6_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H6_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H6_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H6_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H6_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H6_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L6_REG register description at address offset 0x6034
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l6_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l6_reg_t;

#define SBB_OUT_FIFO_L6_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L6_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L6_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L6_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L6_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L6_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L6_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_H7_REG register description at address offset 0x6038
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_h7_reg
  * CCU Output FIFO High bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_h7_reg_t;

#define SBB_OUT_FIFO_H7_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_H7_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_H7_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_H7_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_H7_DATA_BF_WID (32)
#define SBB_OUT_FIFO_H7_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_H7_DATA_BF_DEF (0x00000000)


/** @brief SBB_COMPONENT_SBB_REGS_OUT_FIFO_L7_REG register description at address offset 0x603c
  *
  * Register default value:        0x00000000
  * Register full path in IP: sbb_component/sbb_regs/out_fifo_l7_reg
  * CCU Output FIFO Low bits Register
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sbb_out_fifo_l7_reg_t;

#define SBB_OUT_FIFO_L7_DEFAULT (0x00000000U)
#define SBB_OUT_FIFO_L7_RD_MASK (0xffffffffU)
#define SBB_OUT_FIFO_L7_WR_MASK (0x00000000U)


///< Data.
#define SBB_OUT_FIFO_L7_DATA_BF_OFF ( 0)
#define SBB_OUT_FIFO_L7_DATA_BF_WID (32)
#define SBB_OUT_FIFO_L7_DATA_BF_MSK (0xFFFFFFFF)
#define SBB_OUT_FIFO_L7_DATA_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define SBB_SEMAPHORE_REG ((sbb_semaphore_reg_t*) SBB_SEMAPHORE_ADR)
#define SBB_FUNCTION_REG ((sbb_function_reg_t*) SBB_FUNCTION_ADR)
#define SBB_AUTH_STAT_PARAM_REG ((sbb_auth_stat_param_reg_t*) SBB_AUTH_STAT_PARAM_ADR)
#define SBB_AUTH_STAT_REG ((sbb_auth_stat_reg_t*) SBB_AUTH_STAT_ADR)
#define SBB_STAT0_REG ((sbb_stat0_reg_t*) SBB_STAT0_ADR)
#define SBB_STAT1_REG ((sbb_stat1_reg_t*) SBB_STAT1_ADR)
#define SBB_DBG0_REG ((sbb_dbg0_reg_t*) SBB_DBG0_ADR)
#define SBB_DBG1_REG ((sbb_dbg1_reg_t*) SBB_DBG1_ADR)
#define SBB_VENDOR0_REG ((sbb_vendor0_reg_t*) SBB_VENDOR0_ADR)
#define SBB_VENDOR1_REG ((sbb_vendor1_reg_t*) SBB_VENDOR1_ADR)
#define SBB_RSLT0_REG ((sbb_rslt0_reg_t*) SBB_RSLT0_ADR)
#define SBB_RSLT1_REG ((sbb_rslt1_reg_t*) SBB_RSLT1_ADR)
#define SBB_MEAS_ACTRL_VERIF_REG ((sbb_meas_actrl_verif_reg_t*) SBB_MEAS_ACTRL_VERIF_ADR)
#define SBB_MEAS_ACTRL_SBB_REG ((sbb_meas_actrl_sbb_reg_t*) SBB_MEAS_ACTRL_SBB_ADR)
#define SBB_MEAS_ACTRL_EXT_REG ((sbb_meas_actrl_ext_reg_t*) SBB_MEAS_ACTRL_EXT_ADR)
#define SBB_MEAS_ACTRL_CLR_REG ((sbb_meas_actrl_clr_reg_t*) SBB_MEAS_ACTRL_CLR_ADR)
#define SBB_UNIQUE_ID0_REG ((sbb_unique_id0_reg_t*) SBB_UNIQUE_ID0_ADR)
#define SBB_UNIQUE_ID1_REG ((sbb_unique_id1_reg_t*) SBB_UNIQUE_ID1_ADR)
#define SBB_HW_VER0_REG ((sbb_hw_ver0_reg_t*) SBB_HW_VER0_ADR)
#define SBB_HW_VER1_REG ((sbb_hw_ver1_reg_t*) SBB_HW_VER1_ADR)
#define SBB_MEAS_H0_REG ((sbb_meas_h0_reg_t*) SBB_MEAS_H0_ADR)
#define SBB_MEAS_L0_REG ((sbb_meas_l0_reg_t*) SBB_MEAS_L0_ADR)
#define SBB_MEAS_H1_REG ((sbb_meas_h1_reg_t*) SBB_MEAS_H1_ADR)
#define SBB_MEAS_L1_REG ((sbb_meas_l1_reg_t*) SBB_MEAS_L1_ADR)
#define SBB_MEAS_H2_REG ((sbb_meas_h2_reg_t*) SBB_MEAS_H2_ADR)
#define SBB_MEAS_L2_REG ((sbb_meas_l2_reg_t*) SBB_MEAS_L2_ADR)
#define SBB_MEAS_H3_REG ((sbb_meas_h3_reg_t*) SBB_MEAS_H3_ADR)
#define SBB_MEAS_L3_REG ((sbb_meas_l3_reg_t*) SBB_MEAS_L3_ADR)
#define SBB_MEAS_H4_REG ((sbb_meas_h4_reg_t*) SBB_MEAS_H4_ADR)
#define SBB_MEAS_L4_REG ((sbb_meas_l4_reg_t*) SBB_MEAS_L4_ADR)
#define SBB_MEAS_H5_REG ((sbb_meas_h5_reg_t*) SBB_MEAS_H5_ADR)
#define SBB_MEAS_L5_REG ((sbb_meas_l5_reg_t*) SBB_MEAS_L5_ADR)
#define SBB_MEAS_H6_REG ((sbb_meas_h6_reg_t*) SBB_MEAS_H6_ADR)
#define SBB_MEAS_L6_REG ((sbb_meas_l6_reg_t*) SBB_MEAS_L6_ADR)
#define SBB_MEAS_H7_REG ((sbb_meas_h7_reg_t*) SBB_MEAS_H7_ADR)
#define SBB_MEAS_L7_REG ((sbb_meas_l7_reg_t*) SBB_MEAS_L7_ADR)
#define SBB_MEAS_H8_REG ((sbb_meas_h8_reg_t*) SBB_MEAS_H8_ADR)
#define SBB_MEAS_L8_REG ((sbb_meas_l8_reg_t*) SBB_MEAS_L8_ADR)
#define SBB_MEAS_H9_REG ((sbb_meas_h9_reg_t*) SBB_MEAS_H9_ADR)
#define SBB_MEAS_L9_REG ((sbb_meas_l9_reg_t*) SBB_MEAS_L9_ADR)
#define SBB_MEAS_H10_REG ((sbb_meas_h10_reg_t*) SBB_MEAS_H10_ADR)
#define SBB_MEAS_L10_REG ((sbb_meas_l10_reg_t*) SBB_MEAS_L10_ADR)
#define SBB_MEAS_H11_REG ((sbb_meas_h11_reg_t*) SBB_MEAS_H11_ADR)
#define SBB_MEAS_L11_REG ((sbb_meas_l11_reg_t*) SBB_MEAS_L11_ADR)
#define SBB_MEAS_H12_REG ((sbb_meas_h12_reg_t*) SBB_MEAS_H12_ADR)
#define SBB_MEAS_L12_REG ((sbb_meas_l12_reg_t*) SBB_MEAS_L12_ADR)
#define SBB_MEAS_H13_REG ((sbb_meas_h13_reg_t*) SBB_MEAS_H13_ADR)
#define SBB_MEAS_L13_REG ((sbb_meas_l13_reg_t*) SBB_MEAS_L13_ADR)
#define SBB_MEAS_H14_REG ((sbb_meas_h14_reg_t*) SBB_MEAS_H14_ADR)
#define SBB_MEAS_L14_REG ((sbb_meas_l14_reg_t*) SBB_MEAS_L14_ADR)
#define SBB_MEAS_H15_REG ((sbb_meas_h15_reg_t*) SBB_MEAS_H15_ADR)
#define SBB_MEAS_L15_REG ((sbb_meas_l15_reg_t*) SBB_MEAS_L15_ADR)
#define SBB_MEAS_H16_REG ((sbb_meas_h16_reg_t*) SBB_MEAS_H16_ADR)
#define SBB_MEAS_L16_REG ((sbb_meas_l16_reg_t*) SBB_MEAS_L16_ADR)
#define SBB_MEAS_H17_REG ((sbb_meas_h17_reg_t*) SBB_MEAS_H17_ADR)
#define SBB_MEAS_L17_REG ((sbb_meas_l17_reg_t*) SBB_MEAS_L17_ADR)
#define SBB_MEAS_H18_REG ((sbb_meas_h18_reg_t*) SBB_MEAS_H18_ADR)
#define SBB_MEAS_L18_REG ((sbb_meas_l18_reg_t*) SBB_MEAS_L18_ADR)
#define SBB_MEAS_H19_REG ((sbb_meas_h19_reg_t*) SBB_MEAS_H19_ADR)
#define SBB_MEAS_L19_REG ((sbb_meas_l19_reg_t*) SBB_MEAS_L19_ADR)
#define SBB_MEAS_H20_REG ((sbb_meas_h20_reg_t*) SBB_MEAS_H20_ADR)
#define SBB_MEAS_L20_REG ((sbb_meas_l20_reg_t*) SBB_MEAS_L20_ADR)
#define SBB_MEAS_H21_REG ((sbb_meas_h21_reg_t*) SBB_MEAS_H21_ADR)
#define SBB_MEAS_L21_REG ((sbb_meas_l21_reg_t*) SBB_MEAS_L21_ADR)
#define SBB_MEAS_H22_REG ((sbb_meas_h22_reg_t*) SBB_MEAS_H22_ADR)
#define SBB_MEAS_L22_REG ((sbb_meas_l22_reg_t*) SBB_MEAS_L22_ADR)
#define SBB_MEAS_H23_REG ((sbb_meas_h23_reg_t*) SBB_MEAS_H23_ADR)
#define SBB_MEAS_L23_REG ((sbb_meas_l23_reg_t*) SBB_MEAS_L23_ADR)
#define SBB_MEAS_H24_REG ((sbb_meas_h24_reg_t*) SBB_MEAS_H24_ADR)
#define SBB_MEAS_L24_REG ((sbb_meas_l24_reg_t*) SBB_MEAS_L24_ADR)
#define SBB_MEAS_H25_REG ((sbb_meas_h25_reg_t*) SBB_MEAS_H25_ADR)
#define SBB_MEAS_L25_REG ((sbb_meas_l25_reg_t*) SBB_MEAS_L25_ADR)
#define SBB_MEAS_H26_REG ((sbb_meas_h26_reg_t*) SBB_MEAS_H26_ADR)
#define SBB_MEAS_L26_REG ((sbb_meas_l26_reg_t*) SBB_MEAS_L26_ADR)
#define SBB_MEAS_H27_REG ((sbb_meas_h27_reg_t*) SBB_MEAS_H27_ADR)
#define SBB_MEAS_L27_REG ((sbb_meas_l27_reg_t*) SBB_MEAS_L27_ADR)
#define SBB_MEAS_H28_REG ((sbb_meas_h28_reg_t*) SBB_MEAS_H28_ADR)
#define SBB_MEAS_L28_REG ((sbb_meas_l28_reg_t*) SBB_MEAS_L28_ADR)
#define SBB_MEAS_H29_REG ((sbb_meas_h29_reg_t*) SBB_MEAS_H29_ADR)
#define SBB_MEAS_L29_REG ((sbb_meas_l29_reg_t*) SBB_MEAS_L29_ADR)
#define SBB_MEAS_H30_REG ((sbb_meas_h30_reg_t*) SBB_MEAS_H30_ADR)
#define SBB_MEAS_L30_REG ((sbb_meas_l30_reg_t*) SBB_MEAS_L30_ADR)
#define SBB_MEAS_H31_REG ((sbb_meas_h31_reg_t*) SBB_MEAS_H31_ADR)
#define SBB_MEAS_L31_REG ((sbb_meas_l31_reg_t*) SBB_MEAS_L31_ADR)
#define SBB_MEAS_H32_REG ((sbb_meas_h32_reg_t*) SBB_MEAS_H32_ADR)
#define SBB_MEAS_L32_REG ((sbb_meas_l32_reg_t*) SBB_MEAS_L32_ADR)
#define SBB_MEAS_H33_REG ((sbb_meas_h33_reg_t*) SBB_MEAS_H33_ADR)
#define SBB_MEAS_L33_REG ((sbb_meas_l33_reg_t*) SBB_MEAS_L33_ADR)
#define SBB_MEAS_H34_REG ((sbb_meas_h34_reg_t*) SBB_MEAS_H34_ADR)
#define SBB_MEAS_L34_REG ((sbb_meas_l34_reg_t*) SBB_MEAS_L34_ADR)
#define SBB_MEAS_H35_REG ((sbb_meas_h35_reg_t*) SBB_MEAS_H35_ADR)
#define SBB_MEAS_L35_REG ((sbb_meas_l35_reg_t*) SBB_MEAS_L35_ADR)
#define SBB_MEAS_H36_REG ((sbb_meas_h36_reg_t*) SBB_MEAS_H36_ADR)
#define SBB_MEAS_L36_REG ((sbb_meas_l36_reg_t*) SBB_MEAS_L36_ADR)
#define SBB_MEAS_H37_REG ((sbb_meas_h37_reg_t*) SBB_MEAS_H37_ADR)
#define SBB_MEAS_L37_REG ((sbb_meas_l37_reg_t*) SBB_MEAS_L37_ADR)
#define SBB_MEAS_H38_REG ((sbb_meas_h38_reg_t*) SBB_MEAS_H38_ADR)
#define SBB_MEAS_L38_REG ((sbb_meas_l38_reg_t*) SBB_MEAS_L38_ADR)
#define SBB_MEAS_H39_REG ((sbb_meas_h39_reg_t*) SBB_MEAS_H39_ADR)
#define SBB_MEAS_L39_REG ((sbb_meas_l39_reg_t*) SBB_MEAS_L39_ADR)
#define SBB_MEAS_H40_REG ((sbb_meas_h40_reg_t*) SBB_MEAS_H40_ADR)
#define SBB_MEAS_L40_REG ((sbb_meas_l40_reg_t*) SBB_MEAS_L40_ADR)
#define SBB_MEAS_H41_REG ((sbb_meas_h41_reg_t*) SBB_MEAS_H41_ADR)
#define SBB_MEAS_L41_REG ((sbb_meas_l41_reg_t*) SBB_MEAS_L41_ADR)
#define SBB_MEAS_H42_REG ((sbb_meas_h42_reg_t*) SBB_MEAS_H42_ADR)
#define SBB_MEAS_L42_REG ((sbb_meas_l42_reg_t*) SBB_MEAS_L42_ADR)
#define SBB_MEAS_H43_REG ((sbb_meas_h43_reg_t*) SBB_MEAS_H43_ADR)
#define SBB_MEAS_L43_REG ((sbb_meas_l43_reg_t*) SBB_MEAS_L43_ADR)
#define SBB_MEAS_H44_REG ((sbb_meas_h44_reg_t*) SBB_MEAS_H44_ADR)
#define SBB_MEAS_L44_REG ((sbb_meas_l44_reg_t*) SBB_MEAS_L44_ADR)
#define SBB_MEAS_H45_REG ((sbb_meas_h45_reg_t*) SBB_MEAS_H45_ADR)
#define SBB_MEAS_L45_REG ((sbb_meas_l45_reg_t*) SBB_MEAS_L45_ADR)
#define SBB_MEAS_H46_REG ((sbb_meas_h46_reg_t*) SBB_MEAS_H46_ADR)
#define SBB_MEAS_L46_REG ((sbb_meas_l46_reg_t*) SBB_MEAS_L46_ADR)
#define SBB_MEAS_H47_REG ((sbb_meas_h47_reg_t*) SBB_MEAS_H47_ADR)
#define SBB_MEAS_L47_REG ((sbb_meas_l47_reg_t*) SBB_MEAS_L47_ADR)
#define SBB_MEAS_H48_REG ((sbb_meas_h48_reg_t*) SBB_MEAS_H48_ADR)
#define SBB_MEAS_L48_REG ((sbb_meas_l48_reg_t*) SBB_MEAS_L48_ADR)
#define SBB_MEAS_H49_REG ((sbb_meas_h49_reg_t*) SBB_MEAS_H49_ADR)
#define SBB_MEAS_L49_REG ((sbb_meas_l49_reg_t*) SBB_MEAS_L49_ADR)
#define SBB_MEAS_H50_REG ((sbb_meas_h50_reg_t*) SBB_MEAS_H50_ADR)
#define SBB_MEAS_L50_REG ((sbb_meas_l50_reg_t*) SBB_MEAS_L50_ADR)
#define SBB_MEAS_H51_REG ((sbb_meas_h51_reg_t*) SBB_MEAS_H51_ADR)
#define SBB_MEAS_L51_REG ((sbb_meas_l51_reg_t*) SBB_MEAS_L51_ADR)
#define SBB_MEAS_H52_REG ((sbb_meas_h52_reg_t*) SBB_MEAS_H52_ADR)
#define SBB_MEAS_L52_REG ((sbb_meas_l52_reg_t*) SBB_MEAS_L52_ADR)
#define SBB_MEAS_H53_REG ((sbb_meas_h53_reg_t*) SBB_MEAS_H53_ADR)
#define SBB_MEAS_L53_REG ((sbb_meas_l53_reg_t*) SBB_MEAS_L53_ADR)
#define SBB_MEAS_H54_REG ((sbb_meas_h54_reg_t*) SBB_MEAS_H54_ADR)
#define SBB_MEAS_L54_REG ((sbb_meas_l54_reg_t*) SBB_MEAS_L54_ADR)
#define SBB_MEAS_H55_REG ((sbb_meas_h55_reg_t*) SBB_MEAS_H55_ADR)
#define SBB_MEAS_L55_REG ((sbb_meas_l55_reg_t*) SBB_MEAS_L55_ADR)
#define SBB_MEAS_H56_REG ((sbb_meas_h56_reg_t*) SBB_MEAS_H56_ADR)
#define SBB_MEAS_L56_REG ((sbb_meas_l56_reg_t*) SBB_MEAS_L56_ADR)
#define SBB_MEAS_H57_REG ((sbb_meas_h57_reg_t*) SBB_MEAS_H57_ADR)
#define SBB_MEAS_L57_REG ((sbb_meas_l57_reg_t*) SBB_MEAS_L57_ADR)
#define SBB_MEAS_H58_REG ((sbb_meas_h58_reg_t*) SBB_MEAS_H58_ADR)
#define SBB_MEAS_L58_REG ((sbb_meas_l58_reg_t*) SBB_MEAS_L58_ADR)
#define SBB_MEAS_H59_REG ((sbb_meas_h59_reg_t*) SBB_MEAS_H59_ADR)
#define SBB_MEAS_L59_REG ((sbb_meas_l59_reg_t*) SBB_MEAS_L59_ADR)
#define SBB_MEAS_H60_REG ((sbb_meas_h60_reg_t*) SBB_MEAS_H60_ADR)
#define SBB_MEAS_L60_REG ((sbb_meas_l60_reg_t*) SBB_MEAS_L60_ADR)
#define SBB_MEAS_H61_REG ((sbb_meas_h61_reg_t*) SBB_MEAS_H61_ADR)
#define SBB_MEAS_L61_REG ((sbb_meas_l61_reg_t*) SBB_MEAS_L61_ADR)
#define SBB_MEAS_H62_REG ((sbb_meas_h62_reg_t*) SBB_MEAS_H62_ADR)
#define SBB_MEAS_L62_REG ((sbb_meas_l62_reg_t*) SBB_MEAS_L62_ADR)
#define SBB_MEAS_H63_REG ((sbb_meas_h63_reg_t*) SBB_MEAS_H63_ADR)
#define SBB_MEAS_L63_REG ((sbb_meas_l63_reg_t*) SBB_MEAS_L63_ADR)
#define SBB_MEAS_H64_REG ((sbb_meas_h64_reg_t*) SBB_MEAS_H64_ADR)
#define SBB_MEAS_L64_REG ((sbb_meas_l64_reg_t*) SBB_MEAS_L64_ADR)
#define SBB_MEAS_H65_REG ((sbb_meas_h65_reg_t*) SBB_MEAS_H65_ADR)
#define SBB_MEAS_L65_REG ((sbb_meas_l65_reg_t*) SBB_MEAS_L65_ADR)
#define SBB_MEAS_H66_REG ((sbb_meas_h66_reg_t*) SBB_MEAS_H66_ADR)
#define SBB_MEAS_L66_REG ((sbb_meas_l66_reg_t*) SBB_MEAS_L66_ADR)
#define SBB_MEAS_H67_REG ((sbb_meas_h67_reg_t*) SBB_MEAS_H67_ADR)
#define SBB_MEAS_L67_REG ((sbb_meas_l67_reg_t*) SBB_MEAS_L67_ADR)
#define SBB_MEAS_H68_REG ((sbb_meas_h68_reg_t*) SBB_MEAS_H68_ADR)
#define SBB_MEAS_L68_REG ((sbb_meas_l68_reg_t*) SBB_MEAS_L68_ADR)
#define SBB_MEAS_H69_REG ((sbb_meas_h69_reg_t*) SBB_MEAS_H69_ADR)
#define SBB_MEAS_L69_REG ((sbb_meas_l69_reg_t*) SBB_MEAS_L69_ADR)
#define SBB_MEAS_H70_REG ((sbb_meas_h70_reg_t*) SBB_MEAS_H70_ADR)
#define SBB_MEAS_L70_REG ((sbb_meas_l70_reg_t*) SBB_MEAS_L70_ADR)
#define SBB_MEAS_H71_REG ((sbb_meas_h71_reg_t*) SBB_MEAS_H71_ADR)
#define SBB_MEAS_L71_REG ((sbb_meas_l71_reg_t*) SBB_MEAS_L71_ADR)
#define SBB_MEAS_H72_REG ((sbb_meas_h72_reg_t*) SBB_MEAS_H72_ADR)
#define SBB_MEAS_L72_REG ((sbb_meas_l72_reg_t*) SBB_MEAS_L72_ADR)
#define SBB_MEAS_H73_REG ((sbb_meas_h73_reg_t*) SBB_MEAS_H73_ADR)
#define SBB_MEAS_L73_REG ((sbb_meas_l73_reg_t*) SBB_MEAS_L73_ADR)
#define SBB_MEAS_H74_REG ((sbb_meas_h74_reg_t*) SBB_MEAS_H74_ADR)
#define SBB_MEAS_L74_REG ((sbb_meas_l74_reg_t*) SBB_MEAS_L74_ADR)
#define SBB_MEAS_H75_REG ((sbb_meas_h75_reg_t*) SBB_MEAS_H75_ADR)
#define SBB_MEAS_L75_REG ((sbb_meas_l75_reg_t*) SBB_MEAS_L75_ADR)
#define SBB_MEAS_H76_REG ((sbb_meas_h76_reg_t*) SBB_MEAS_H76_ADR)
#define SBB_MEAS_L76_REG ((sbb_meas_l76_reg_t*) SBB_MEAS_L76_ADR)
#define SBB_MEAS_H77_REG ((sbb_meas_h77_reg_t*) SBB_MEAS_H77_ADR)
#define SBB_MEAS_L77_REG ((sbb_meas_l77_reg_t*) SBB_MEAS_L77_ADR)
#define SBB_MEAS_H78_REG ((sbb_meas_h78_reg_t*) SBB_MEAS_H78_ADR)
#define SBB_MEAS_L78_REG ((sbb_meas_l78_reg_t*) SBB_MEAS_L78_ADR)
#define SBB_MEAS_H79_REG ((sbb_meas_h79_reg_t*) SBB_MEAS_H79_ADR)
#define SBB_MEAS_L79_REG ((sbb_meas_l79_reg_t*) SBB_MEAS_L79_ADR)
#define SBB_MEAS_H80_REG ((sbb_meas_h80_reg_t*) SBB_MEAS_H80_ADR)
#define SBB_MEAS_L80_REG ((sbb_meas_l80_reg_t*) SBB_MEAS_L80_ADR)
#define SBB_MEAS_H81_REG ((sbb_meas_h81_reg_t*) SBB_MEAS_H81_ADR)
#define SBB_MEAS_L81_REG ((sbb_meas_l81_reg_t*) SBB_MEAS_L81_ADR)
#define SBB_MEAS_H82_REG ((sbb_meas_h82_reg_t*) SBB_MEAS_H82_ADR)
#define SBB_MEAS_L82_REG ((sbb_meas_l82_reg_t*) SBB_MEAS_L82_ADR)
#define SBB_MEAS_H83_REG ((sbb_meas_h83_reg_t*) SBB_MEAS_H83_ADR)
#define SBB_MEAS_L83_REG ((sbb_meas_l83_reg_t*) SBB_MEAS_L83_ADR)
#define SBB_MEAS_H84_REG ((sbb_meas_h84_reg_t*) SBB_MEAS_H84_ADR)
#define SBB_MEAS_L84_REG ((sbb_meas_l84_reg_t*) SBB_MEAS_L84_ADR)
#define SBB_MEAS_H85_REG ((sbb_meas_h85_reg_t*) SBB_MEAS_H85_ADR)
#define SBB_MEAS_L85_REG ((sbb_meas_l85_reg_t*) SBB_MEAS_L85_ADR)
#define SBB_MEAS_H86_REG ((sbb_meas_h86_reg_t*) SBB_MEAS_H86_ADR)
#define SBB_MEAS_L86_REG ((sbb_meas_l86_reg_t*) SBB_MEAS_L86_ADR)
#define SBB_MEAS_H87_REG ((sbb_meas_h87_reg_t*) SBB_MEAS_H87_ADR)
#define SBB_MEAS_L87_REG ((sbb_meas_l87_reg_t*) SBB_MEAS_L87_ADR)
#define SBB_MEAS_H88_REG ((sbb_meas_h88_reg_t*) SBB_MEAS_H88_ADR)
#define SBB_MEAS_L88_REG ((sbb_meas_l88_reg_t*) SBB_MEAS_L88_ADR)
#define SBB_MEAS_H89_REG ((sbb_meas_h89_reg_t*) SBB_MEAS_H89_ADR)
#define SBB_MEAS_L89_REG ((sbb_meas_l89_reg_t*) SBB_MEAS_L89_ADR)
#define SBB_MEAS_H90_REG ((sbb_meas_h90_reg_t*) SBB_MEAS_H90_ADR)
#define SBB_MEAS_L90_REG ((sbb_meas_l90_reg_t*) SBB_MEAS_L90_ADR)
#define SBB_MEAS_H91_REG ((sbb_meas_h91_reg_t*) SBB_MEAS_H91_ADR)
#define SBB_MEAS_L91_REG ((sbb_meas_l91_reg_t*) SBB_MEAS_L91_ADR)
#define SBB_MEAS_H92_REG ((sbb_meas_h92_reg_t*) SBB_MEAS_H92_ADR)
#define SBB_MEAS_L92_REG ((sbb_meas_l92_reg_t*) SBB_MEAS_L92_ADR)
#define SBB_MEAS_H93_REG ((sbb_meas_h93_reg_t*) SBB_MEAS_H93_ADR)
#define SBB_MEAS_L93_REG ((sbb_meas_l93_reg_t*) SBB_MEAS_L93_ADR)
#define SBB_MEAS_H94_REG ((sbb_meas_h94_reg_t*) SBB_MEAS_H94_ADR)
#define SBB_MEAS_L94_REG ((sbb_meas_l94_reg_t*) SBB_MEAS_L94_ADR)
#define SBB_MEAS_H95_REG ((sbb_meas_h95_reg_t*) SBB_MEAS_H95_ADR)
#define SBB_MEAS_L95_REG ((sbb_meas_l95_reg_t*) SBB_MEAS_L95_ADR)
#define SBB_MEAS_H96_REG ((sbb_meas_h96_reg_t*) SBB_MEAS_H96_ADR)
#define SBB_MEAS_L96_REG ((sbb_meas_l96_reg_t*) SBB_MEAS_L96_ADR)
#define SBB_MEAS_H97_REG ((sbb_meas_h97_reg_t*) SBB_MEAS_H97_ADR)
#define SBB_MEAS_L97_REG ((sbb_meas_l97_reg_t*) SBB_MEAS_L97_ADR)
#define SBB_MEAS_H98_REG ((sbb_meas_h98_reg_t*) SBB_MEAS_H98_ADR)
#define SBB_MEAS_L98_REG ((sbb_meas_l98_reg_t*) SBB_MEAS_L98_ADR)
#define SBB_MEAS_H99_REG ((sbb_meas_h99_reg_t*) SBB_MEAS_H99_ADR)
#define SBB_MEAS_L99_REG ((sbb_meas_l99_reg_t*) SBB_MEAS_L99_ADR)
#define SBB_MEAS_H100_REG ((sbb_meas_h100_reg_t*) SBB_MEAS_H100_ADR)
#define SBB_MEAS_L100_REG ((sbb_meas_l100_reg_t*) SBB_MEAS_L100_ADR)
#define SBB_MEAS_H101_REG ((sbb_meas_h101_reg_t*) SBB_MEAS_H101_ADR)
#define SBB_MEAS_L101_REG ((sbb_meas_l101_reg_t*) SBB_MEAS_L101_ADR)
#define SBB_MEAS_H102_REG ((sbb_meas_h102_reg_t*) SBB_MEAS_H102_ADR)
#define SBB_MEAS_L102_REG ((sbb_meas_l102_reg_t*) SBB_MEAS_L102_ADR)
#define SBB_MEAS_H103_REG ((sbb_meas_h103_reg_t*) SBB_MEAS_H103_ADR)
#define SBB_MEAS_L103_REG ((sbb_meas_l103_reg_t*) SBB_MEAS_L103_ADR)
#define SBB_MEAS_H104_REG ((sbb_meas_h104_reg_t*) SBB_MEAS_H104_ADR)
#define SBB_MEAS_L104_REG ((sbb_meas_l104_reg_t*) SBB_MEAS_L104_ADR)
#define SBB_MEAS_H105_REG ((sbb_meas_h105_reg_t*) SBB_MEAS_H105_ADR)
#define SBB_MEAS_L105_REG ((sbb_meas_l105_reg_t*) SBB_MEAS_L105_ADR)
#define SBB_MEAS_H106_REG ((sbb_meas_h106_reg_t*) SBB_MEAS_H106_ADR)
#define SBB_MEAS_L106_REG ((sbb_meas_l106_reg_t*) SBB_MEAS_L106_ADR)
#define SBB_MEAS_H107_REG ((sbb_meas_h107_reg_t*) SBB_MEAS_H107_ADR)
#define SBB_MEAS_L107_REG ((sbb_meas_l107_reg_t*) SBB_MEAS_L107_ADR)
#define SBB_MEAS_H108_REG ((sbb_meas_h108_reg_t*) SBB_MEAS_H108_ADR)
#define SBB_MEAS_L108_REG ((sbb_meas_l108_reg_t*) SBB_MEAS_L108_ADR)
#define SBB_MEAS_H109_REG ((sbb_meas_h109_reg_t*) SBB_MEAS_H109_ADR)
#define SBB_MEAS_L109_REG ((sbb_meas_l109_reg_t*) SBB_MEAS_L109_ADR)
#define SBB_MEAS_H110_REG ((sbb_meas_h110_reg_t*) SBB_MEAS_H110_ADR)
#define SBB_MEAS_L110_REG ((sbb_meas_l110_reg_t*) SBB_MEAS_L110_ADR)
#define SBB_MEAS_H111_REG ((sbb_meas_h111_reg_t*) SBB_MEAS_H111_ADR)
#define SBB_MEAS_L111_REG ((sbb_meas_l111_reg_t*) SBB_MEAS_L111_ADR)
#define SBB_MEAS_H112_REG ((sbb_meas_h112_reg_t*) SBB_MEAS_H112_ADR)
#define SBB_MEAS_L112_REG ((sbb_meas_l112_reg_t*) SBB_MEAS_L112_ADR)
#define SBB_MEAS_H113_REG ((sbb_meas_h113_reg_t*) SBB_MEAS_H113_ADR)
#define SBB_MEAS_L113_REG ((sbb_meas_l113_reg_t*) SBB_MEAS_L113_ADR)
#define SBB_MEAS_H114_REG ((sbb_meas_h114_reg_t*) SBB_MEAS_H114_ADR)
#define SBB_MEAS_L114_REG ((sbb_meas_l114_reg_t*) SBB_MEAS_L114_ADR)
#define SBB_MEAS_H115_REG ((sbb_meas_h115_reg_t*) SBB_MEAS_H115_ADR)
#define SBB_MEAS_L115_REG ((sbb_meas_l115_reg_t*) SBB_MEAS_L115_ADR)
#define SBB_MEAS_H116_REG ((sbb_meas_h116_reg_t*) SBB_MEAS_H116_ADR)
#define SBB_MEAS_L116_REG ((sbb_meas_l116_reg_t*) SBB_MEAS_L116_ADR)
#define SBB_MEAS_H117_REG ((sbb_meas_h117_reg_t*) SBB_MEAS_H117_ADR)
#define SBB_MEAS_L117_REG ((sbb_meas_l117_reg_t*) SBB_MEAS_L117_ADR)
#define SBB_MEAS_H118_REG ((sbb_meas_h118_reg_t*) SBB_MEAS_H118_ADR)
#define SBB_MEAS_L118_REG ((sbb_meas_l118_reg_t*) SBB_MEAS_L118_ADR)
#define SBB_MEAS_H119_REG ((sbb_meas_h119_reg_t*) SBB_MEAS_H119_ADR)
#define SBB_MEAS_L119_REG ((sbb_meas_l119_reg_t*) SBB_MEAS_L119_ADR)
#define SBB_MEAS_H120_REG ((sbb_meas_h120_reg_t*) SBB_MEAS_H120_ADR)
#define SBB_MEAS_L120_REG ((sbb_meas_l120_reg_t*) SBB_MEAS_L120_ADR)
#define SBB_MEAS_H121_REG ((sbb_meas_h121_reg_t*) SBB_MEAS_H121_ADR)
#define SBB_MEAS_L121_REG ((sbb_meas_l121_reg_t*) SBB_MEAS_L121_ADR)
#define SBB_MEAS_H122_REG ((sbb_meas_h122_reg_t*) SBB_MEAS_H122_ADR)
#define SBB_MEAS_L122_REG ((sbb_meas_l122_reg_t*) SBB_MEAS_L122_ADR)
#define SBB_MEAS_H123_REG ((sbb_meas_h123_reg_t*) SBB_MEAS_H123_ADR)
#define SBB_MEAS_L123_REG ((sbb_meas_l123_reg_t*) SBB_MEAS_L123_ADR)
#define SBB_MEAS_H124_REG ((sbb_meas_h124_reg_t*) SBB_MEAS_H124_ADR)
#define SBB_MEAS_L124_REG ((sbb_meas_l124_reg_t*) SBB_MEAS_L124_ADR)
#define SBB_MEAS_H125_REG ((sbb_meas_h125_reg_t*) SBB_MEAS_H125_ADR)
#define SBB_MEAS_L125_REG ((sbb_meas_l125_reg_t*) SBB_MEAS_L125_ADR)
#define SBB_MEAS_H126_REG ((sbb_meas_h126_reg_t*) SBB_MEAS_H126_ADR)
#define SBB_MEAS_L126_REG ((sbb_meas_l126_reg_t*) SBB_MEAS_L126_ADR)
#define SBB_MEAS_H127_REG ((sbb_meas_h127_reg_t*) SBB_MEAS_H127_ADR)
#define SBB_MEAS_L127_REG ((sbb_meas_l127_reg_t*) SBB_MEAS_L127_ADR)
#define SBB_MEAS_H128_REG ((sbb_meas_h128_reg_t*) SBB_MEAS_H128_ADR)
#define SBB_MEAS_L128_REG ((sbb_meas_l128_reg_t*) SBB_MEAS_L128_ADR)
#define SBB_MEAS_H129_REG ((sbb_meas_h129_reg_t*) SBB_MEAS_H129_ADR)
#define SBB_MEAS_L129_REG ((sbb_meas_l129_reg_t*) SBB_MEAS_L129_ADR)
#define SBB_MEAS_H130_REG ((sbb_meas_h130_reg_t*) SBB_MEAS_H130_ADR)
#define SBB_MEAS_L130_REG ((sbb_meas_l130_reg_t*) SBB_MEAS_L130_ADR)
#define SBB_MEAS_H131_REG ((sbb_meas_h131_reg_t*) SBB_MEAS_H131_ADR)
#define SBB_MEAS_L131_REG ((sbb_meas_l131_reg_t*) SBB_MEAS_L131_ADR)
#define SBB_MEAS_H132_REG ((sbb_meas_h132_reg_t*) SBB_MEAS_H132_ADR)
#define SBB_MEAS_L132_REG ((sbb_meas_l132_reg_t*) SBB_MEAS_L132_ADR)
#define SBB_MEAS_H133_REG ((sbb_meas_h133_reg_t*) SBB_MEAS_H133_ADR)
#define SBB_MEAS_L133_REG ((sbb_meas_l133_reg_t*) SBB_MEAS_L133_ADR)
#define SBB_MEAS_H134_REG ((sbb_meas_h134_reg_t*) SBB_MEAS_H134_ADR)
#define SBB_MEAS_L134_REG ((sbb_meas_l134_reg_t*) SBB_MEAS_L134_ADR)
#define SBB_MEAS_H135_REG ((sbb_meas_h135_reg_t*) SBB_MEAS_H135_ADR)
#define SBB_MEAS_L135_REG ((sbb_meas_l135_reg_t*) SBB_MEAS_L135_ADR)
#define SBB_MEAS_H136_REG ((sbb_meas_h136_reg_t*) SBB_MEAS_H136_ADR)
#define SBB_MEAS_L136_REG ((sbb_meas_l136_reg_t*) SBB_MEAS_L136_ADR)
#define SBB_MEAS_H137_REG ((sbb_meas_h137_reg_t*) SBB_MEAS_H137_ADR)
#define SBB_MEAS_L137_REG ((sbb_meas_l137_reg_t*) SBB_MEAS_L137_ADR)
#define SBB_MEAS_H138_REG ((sbb_meas_h138_reg_t*) SBB_MEAS_H138_ADR)
#define SBB_MEAS_L138_REG ((sbb_meas_l138_reg_t*) SBB_MEAS_L138_ADR)
#define SBB_MEAS_H139_REG ((sbb_meas_h139_reg_t*) SBB_MEAS_H139_ADR)
#define SBB_MEAS_L139_REG ((sbb_meas_l139_reg_t*) SBB_MEAS_L139_ADR)
#define SBB_MEAS_H140_REG ((sbb_meas_h140_reg_t*) SBB_MEAS_H140_ADR)
#define SBB_MEAS_L140_REG ((sbb_meas_l140_reg_t*) SBB_MEAS_L140_ADR)
#define SBB_MEAS_H141_REG ((sbb_meas_h141_reg_t*) SBB_MEAS_H141_ADR)
#define SBB_MEAS_L141_REG ((sbb_meas_l141_reg_t*) SBB_MEAS_L141_ADR)
#define SBB_MEAS_H142_REG ((sbb_meas_h142_reg_t*) SBB_MEAS_H142_ADR)
#define SBB_MEAS_L142_REG ((sbb_meas_l142_reg_t*) SBB_MEAS_L142_ADR)
#define SBB_MEAS_H143_REG ((sbb_meas_h143_reg_t*) SBB_MEAS_H143_ADR)
#define SBB_MEAS_L143_REG ((sbb_meas_l143_reg_t*) SBB_MEAS_L143_ADR)
#define SBB_PCR_H0_REG ((sbb_pcr_h0_reg_t*) SBB_PCR_H0_ADR)
#define SBB_PCR_L0_REG ((sbb_pcr_l0_reg_t*) SBB_PCR_L0_ADR)
#define SBB_PCR_H1_REG ((sbb_pcr_h1_reg_t*) SBB_PCR_H1_ADR)
#define SBB_PCR_L1_REG ((sbb_pcr_l1_reg_t*) SBB_PCR_L1_ADR)
#define SBB_PCR_H2_REG ((sbb_pcr_h2_reg_t*) SBB_PCR_H2_ADR)
#define SBB_PCR_L2_REG ((sbb_pcr_l2_reg_t*) SBB_PCR_L2_ADR)
#define SBB_PCR_H3_REG ((sbb_pcr_h3_reg_t*) SBB_PCR_H3_ADR)
#define SBB_PCR_L3_REG ((sbb_pcr_l3_reg_t*) SBB_PCR_L3_ADR)
#define SBB_PCR_H4_REG ((sbb_pcr_h4_reg_t*) SBB_PCR_H4_ADR)
#define SBB_PCR_L4_REG ((sbb_pcr_l4_reg_t*) SBB_PCR_L4_ADR)
#define SBB_PCR_H5_REG ((sbb_pcr_h5_reg_t*) SBB_PCR_H5_ADR)
#define SBB_PCR_L5_REG ((sbb_pcr_l5_reg_t*) SBB_PCR_L5_ADR)
#define SBB_PCR_H6_REG ((sbb_pcr_h6_reg_t*) SBB_PCR_H6_ADR)
#define SBB_PCR_L6_REG ((sbb_pcr_l6_reg_t*) SBB_PCR_L6_ADR)
#define SBB_PCR_H7_REG ((sbb_pcr_h7_reg_t*) SBB_PCR_H7_ADR)
#define SBB_PCR_L7_REG ((sbb_pcr_l7_reg_t*) SBB_PCR_L7_ADR)
#define SBB_PCR_H8_REG ((sbb_pcr_h8_reg_t*) SBB_PCR_H8_ADR)
#define SBB_PCR_L8_REG ((sbb_pcr_l8_reg_t*) SBB_PCR_L8_ADR)
#define SBB_INT_STS_REG ((sbb_int_sts_reg_t*) SBB_INT_STS_ADR)
#define SBB_INT_EN_REG ((sbb_int_en_reg_t*) SBB_INT_EN_ADR)
#define SBB_INT_FRC_REG ((sbb_int_frc_reg_t*) SBB_INT_FRC_ADR)
#define SBB_VER_H0_REG ((sbb_ver_h0_reg_t*) SBB_VER_H0_ADR)
#define SBB_VER_L0_REG ((sbb_ver_l0_reg_t*) SBB_VER_L0_ADR)
#define SBB_VER_H1_REG ((sbb_ver_h1_reg_t*) SBB_VER_H1_ADR)
#define SBB_VER_L1_REG ((sbb_ver_l1_reg_t*) SBB_VER_L1_ADR)
#define SBB_VER_H2_REG ((sbb_ver_h2_reg_t*) SBB_VER_H2_ADR)
#define SBB_VER_L2_REG ((sbb_ver_l2_reg_t*) SBB_VER_L2_ADR)
#define SBB_VER_H3_REG ((sbb_ver_h3_reg_t*) SBB_VER_H3_ADR)
#define SBB_VER_L3_REG ((sbb_ver_l3_reg_t*) SBB_VER_L3_ADR)
#define SBB_EFUSE_H0_REG ((sbb_efuse_h0_reg_t*) SBB_EFUSE_H0_ADR)
#define SBB_EFUSE_L0_REG ((sbb_efuse_l0_reg_t*) SBB_EFUSE_L0_ADR)
#define SBB_EFUSE_H1_REG ((sbb_efuse_h1_reg_t*) SBB_EFUSE_H1_ADR)
#define SBB_EFUSE_L1_REG ((sbb_efuse_l1_reg_t*) SBB_EFUSE_L1_ADR)
#define SBB_EFUSE_H2_REG ((sbb_efuse_h2_reg_t*) SBB_EFUSE_H2_ADR)
#define SBB_EFUSE_L2_REG ((sbb_efuse_l2_reg_t*) SBB_EFUSE_L2_ADR)
#define SBB_EFUSE_H3_REG ((sbb_efuse_h3_reg_t*) SBB_EFUSE_H3_ADR)
#define SBB_EFUSE_L3_REG ((sbb_efuse_l3_reg_t*) SBB_EFUSE_L3_ADR)
#define SBB_EFUSE_H4_REG ((sbb_efuse_h4_reg_t*) SBB_EFUSE_H4_ADR)
#define SBB_EFUSE_L4_REG ((sbb_efuse_l4_reg_t*) SBB_EFUSE_L4_ADR)
#define SBB_EFUSE_H5_REG ((sbb_efuse_h5_reg_t*) SBB_EFUSE_H5_ADR)
#define SBB_EFUSE_L5_REG ((sbb_efuse_l5_reg_t*) SBB_EFUSE_L5_ADR)
#define SBB_EFUSE_H6_REG ((sbb_efuse_h6_reg_t*) SBB_EFUSE_H6_ADR)
#define SBB_EFUSE_L6_REG ((sbb_efuse_l6_reg_t*) SBB_EFUSE_L6_ADR)
#define SBB_EFUSE_H7_REG ((sbb_efuse_h7_reg_t*) SBB_EFUSE_H7_ADR)
#define SBB_EFUSE_L7_REG ((sbb_efuse_l7_reg_t*) SBB_EFUSE_L7_ADR)
#define SBB_EFUSE_H8_REG ((sbb_efuse_h8_reg_t*) SBB_EFUSE_H8_ADR)
#define SBB_EFUSE_L8_REG ((sbb_efuse_l8_reg_t*) SBB_EFUSE_L8_ADR)
#define SBB_EFUSE_H9_REG ((sbb_efuse_h9_reg_t*) SBB_EFUSE_H9_ADR)
#define SBB_EFUSE_L9_REG ((sbb_efuse_l9_reg_t*) SBB_EFUSE_L9_ADR)
#define SBB_EFUSE_H10_REG ((sbb_efuse_h10_reg_t*) SBB_EFUSE_H10_ADR)
#define SBB_EFUSE_L10_REG ((sbb_efuse_l10_reg_t*) SBB_EFUSE_L10_ADR)
#define SBB_EFUSE_H11_REG ((sbb_efuse_h11_reg_t*) SBB_EFUSE_H11_ADR)
#define SBB_EFUSE_L11_REG ((sbb_efuse_l11_reg_t*) SBB_EFUSE_L11_ADR)
#define SBB_EFUSE_H12_REG ((sbb_efuse_h12_reg_t*) SBB_EFUSE_H12_ADR)
#define SBB_EFUSE_L12_REG ((sbb_efuse_l12_reg_t*) SBB_EFUSE_L12_ADR)
#define SBB_EFUSE_H13_REG ((sbb_efuse_h13_reg_t*) SBB_EFUSE_H13_ADR)
#define SBB_EFUSE_L13_REG ((sbb_efuse_l13_reg_t*) SBB_EFUSE_L13_ADR)
#define SBB_EFUSE_H14_REG ((sbb_efuse_h14_reg_t*) SBB_EFUSE_H14_ADR)
#define SBB_EFUSE_L14_REG ((sbb_efuse_l14_reg_t*) SBB_EFUSE_L14_ADR)
#define SBB_EFUSE_H15_REG ((sbb_efuse_h15_reg_t*) SBB_EFUSE_H15_ADR)
#define SBB_EFUSE_L15_REG ((sbb_efuse_l15_reg_t*) SBB_EFUSE_L15_ADR)
#define SBB_EFUSE_H16_REG ((sbb_efuse_h16_reg_t*) SBB_EFUSE_H16_ADR)
#define SBB_EFUSE_L16_REG ((sbb_efuse_l16_reg_t*) SBB_EFUSE_L16_ADR)
#define SBB_EFUSE_H17_REG ((sbb_efuse_h17_reg_t*) SBB_EFUSE_H17_ADR)
#define SBB_EFUSE_L17_REG ((sbb_efuse_l17_reg_t*) SBB_EFUSE_L17_ADR)
#define SBB_EFUSE_H18_REG ((sbb_efuse_h18_reg_t*) SBB_EFUSE_H18_ADR)
#define SBB_EFUSE_L18_REG ((sbb_efuse_l18_reg_t*) SBB_EFUSE_L18_ADR)
#define SBB_EFUSE_H19_REG ((sbb_efuse_h19_reg_t*) SBB_EFUSE_H19_ADR)
#define SBB_EFUSE_L19_REG ((sbb_efuse_l19_reg_t*) SBB_EFUSE_L19_ADR)
#define SBB_EFUSE_H20_REG ((sbb_efuse_h20_reg_t*) SBB_EFUSE_H20_ADR)
#define SBB_EFUSE_L20_REG ((sbb_efuse_l20_reg_t*) SBB_EFUSE_L20_ADR)
#define SBB_EFUSE_H21_REG ((sbb_efuse_h21_reg_t*) SBB_EFUSE_H21_ADR)
#define SBB_EFUSE_L21_REG ((sbb_efuse_l21_reg_t*) SBB_EFUSE_L21_ADR)
#define SBB_EFUSE_H22_REG ((sbb_efuse_h22_reg_t*) SBB_EFUSE_H22_ADR)
#define SBB_EFUSE_L22_REG ((sbb_efuse_l22_reg_t*) SBB_EFUSE_L22_ADR)
#define SBB_EFUSE_H23_REG ((sbb_efuse_h23_reg_t*) SBB_EFUSE_H23_ADR)
#define SBB_EFUSE_L23_REG ((sbb_efuse_l23_reg_t*) SBB_EFUSE_L23_ADR)
#define SBB_EFUSE_H24_REG ((sbb_efuse_h24_reg_t*) SBB_EFUSE_H24_ADR)
#define SBB_EFUSE_L24_REG ((sbb_efuse_l24_reg_t*) SBB_EFUSE_L24_ADR)
#define SBB_EFUSE_H25_REG ((sbb_efuse_h25_reg_t*) SBB_EFUSE_H25_ADR)
#define SBB_EFUSE_L25_REG ((sbb_efuse_l25_reg_t*) SBB_EFUSE_L25_ADR)
#define SBB_EFUSE_H26_REG ((sbb_efuse_h26_reg_t*) SBB_EFUSE_H26_ADR)
#define SBB_EFUSE_L26_REG ((sbb_efuse_l26_reg_t*) SBB_EFUSE_L26_ADR)
#define SBB_EFUSE_H27_REG ((sbb_efuse_h27_reg_t*) SBB_EFUSE_H27_ADR)
#define SBB_EFUSE_L27_REG ((sbb_efuse_l27_reg_t*) SBB_EFUSE_L27_ADR)
#define SBB_EFUSE_H28_REG ((sbb_efuse_h28_reg_t*) SBB_EFUSE_H28_ADR)
#define SBB_EFUSE_L28_REG ((sbb_efuse_l28_reg_t*) SBB_EFUSE_L28_ADR)
#define SBB_EFUSE_H29_REG ((sbb_efuse_h29_reg_t*) SBB_EFUSE_H29_ADR)
#define SBB_EFUSE_L29_REG ((sbb_efuse_l29_reg_t*) SBB_EFUSE_L29_ADR)
#define SBB_EFUSE_H30_REG ((sbb_efuse_h30_reg_t*) SBB_EFUSE_H30_ADR)
#define SBB_EFUSE_L30_REG ((sbb_efuse_l30_reg_t*) SBB_EFUSE_L30_ADR)
#define SBB_EFUSE_H31_REG ((sbb_efuse_h31_reg_t*) SBB_EFUSE_H31_ADR)
#define SBB_EFUSE_L31_REG ((sbb_efuse_l31_reg_t*) SBB_EFUSE_L31_ADR)
#define SBB_EFUSE_H32_REG ((sbb_efuse_h32_reg_t*) SBB_EFUSE_H32_ADR)
#define SBB_EFUSE_L32_REG ((sbb_efuse_l32_reg_t*) SBB_EFUSE_L32_ADR)
#define SBB_EFUSE_H33_REG ((sbb_efuse_h33_reg_t*) SBB_EFUSE_H33_ADR)
#define SBB_EFUSE_L33_REG ((sbb_efuse_l33_reg_t*) SBB_EFUSE_L33_ADR)
#define SBB_EFUSE_H34_REG ((sbb_efuse_h34_reg_t*) SBB_EFUSE_H34_ADR)
#define SBB_EFUSE_L34_REG ((sbb_efuse_l34_reg_t*) SBB_EFUSE_L34_ADR)
#define SBB_EFUSE_H35_REG ((sbb_efuse_h35_reg_t*) SBB_EFUSE_H35_ADR)
#define SBB_EFUSE_L35_REG ((sbb_efuse_l35_reg_t*) SBB_EFUSE_L35_ADR)
#define SBB_EFUSE_H36_REG ((sbb_efuse_h36_reg_t*) SBB_EFUSE_H36_ADR)
#define SBB_EFUSE_L36_REG ((sbb_efuse_l36_reg_t*) SBB_EFUSE_L36_ADR)
#define SBB_EFUSE_H37_REG ((sbb_efuse_h37_reg_t*) SBB_EFUSE_H37_ADR)
#define SBB_EFUSE_L37_REG ((sbb_efuse_l37_reg_t*) SBB_EFUSE_L37_ADR)
#define SBB_EFUSE_H38_REG ((sbb_efuse_h38_reg_t*) SBB_EFUSE_H38_ADR)
#define SBB_EFUSE_L38_REG ((sbb_efuse_l38_reg_t*) SBB_EFUSE_L38_ADR)
#define SBB_EFUSE_H39_REG ((sbb_efuse_h39_reg_t*) SBB_EFUSE_H39_ADR)
#define SBB_EFUSE_L39_REG ((sbb_efuse_l39_reg_t*) SBB_EFUSE_L39_ADR)
#define SBB_EFUSE_H40_REG ((sbb_efuse_h40_reg_t*) SBB_EFUSE_H40_ADR)
#define SBB_EFUSE_L40_REG ((sbb_efuse_l40_reg_t*) SBB_EFUSE_L40_ADR)
#define SBB_EFUSE_H41_REG ((sbb_efuse_h41_reg_t*) SBB_EFUSE_H41_ADR)
#define SBB_EFUSE_L41_REG ((sbb_efuse_l41_reg_t*) SBB_EFUSE_L41_ADR)
#define SBB_EFUSE_H42_REG ((sbb_efuse_h42_reg_t*) SBB_EFUSE_H42_ADR)
#define SBB_EFUSE_L42_REG ((sbb_efuse_l42_reg_t*) SBB_EFUSE_L42_ADR)
#define SBB_EFUSE_H43_REG ((sbb_efuse_h43_reg_t*) SBB_EFUSE_H43_ADR)
#define SBB_EFUSE_L43_REG ((sbb_efuse_l43_reg_t*) SBB_EFUSE_L43_ADR)
#define SBB_EFUSE_H44_REG ((sbb_efuse_h44_reg_t*) SBB_EFUSE_H44_ADR)
#define SBB_EFUSE_L44_REG ((sbb_efuse_l44_reg_t*) SBB_EFUSE_L44_ADR)
#define SBB_EFUSE_H45_REG ((sbb_efuse_h45_reg_t*) SBB_EFUSE_H45_ADR)
#define SBB_EFUSE_L45_REG ((sbb_efuse_l45_reg_t*) SBB_EFUSE_L45_ADR)
#define SBB_EFUSE_H46_REG ((sbb_efuse_h46_reg_t*) SBB_EFUSE_H46_ADR)
#define SBB_EFUSE_L46_REG ((sbb_efuse_l46_reg_t*) SBB_EFUSE_L46_ADR)
#define SBB_EFUSE_H47_REG ((sbb_efuse_h47_reg_t*) SBB_EFUSE_H47_ADR)
#define SBB_EFUSE_L47_REG ((sbb_efuse_l47_reg_t*) SBB_EFUSE_L47_ADR)
#define SBB_EFUSE_H48_REG ((sbb_efuse_h48_reg_t*) SBB_EFUSE_H48_ADR)
#define SBB_EFUSE_L48_REG ((sbb_efuse_l48_reg_t*) SBB_EFUSE_L48_ADR)
#define SBB_EFUSE_H49_REG ((sbb_efuse_h49_reg_t*) SBB_EFUSE_H49_ADR)
#define SBB_EFUSE_L49_REG ((sbb_efuse_l49_reg_t*) SBB_EFUSE_L49_ADR)
#define SBB_EFUSE_H50_REG ((sbb_efuse_h50_reg_t*) SBB_EFUSE_H50_ADR)
#define SBB_EFUSE_L50_REG ((sbb_efuse_l50_reg_t*) SBB_EFUSE_L50_ADR)
#define SBB_EFUSE_H51_REG ((sbb_efuse_h51_reg_t*) SBB_EFUSE_H51_ADR)
#define SBB_EFUSE_L51_REG ((sbb_efuse_l51_reg_t*) SBB_EFUSE_L51_ADR)
#define SBB_EFUSE_H52_REG ((sbb_efuse_h52_reg_t*) SBB_EFUSE_H52_ADR)
#define SBB_EFUSE_L52_REG ((sbb_efuse_l52_reg_t*) SBB_EFUSE_L52_ADR)
#define SBB_EFUSE_H53_REG ((sbb_efuse_h53_reg_t*) SBB_EFUSE_H53_ADR)
#define SBB_EFUSE_L53_REG ((sbb_efuse_l53_reg_t*) SBB_EFUSE_L53_ADR)
#define SBB_EFUSE_H54_REG ((sbb_efuse_h54_reg_t*) SBB_EFUSE_H54_ADR)
#define SBB_EFUSE_L54_REG ((sbb_efuse_l54_reg_t*) SBB_EFUSE_L54_ADR)
#define SBB_EFUSE_H55_REG ((sbb_efuse_h55_reg_t*) SBB_EFUSE_H55_ADR)
#define SBB_EFUSE_L55_REG ((sbb_efuse_l55_reg_t*) SBB_EFUSE_L55_ADR)
#define SBB_EFUSE_H56_REG ((sbb_efuse_h56_reg_t*) SBB_EFUSE_H56_ADR)
#define SBB_EFUSE_L56_REG ((sbb_efuse_l56_reg_t*) SBB_EFUSE_L56_ADR)
#define SBB_EFUSE_H57_REG ((sbb_efuse_h57_reg_t*) SBB_EFUSE_H57_ADR)
#define SBB_EFUSE_L57_REG ((sbb_efuse_l57_reg_t*) SBB_EFUSE_L57_ADR)
#define SBB_EFUSE_H58_REG ((sbb_efuse_h58_reg_t*) SBB_EFUSE_H58_ADR)
#define SBB_EFUSE_L58_REG ((sbb_efuse_l58_reg_t*) SBB_EFUSE_L58_ADR)
#define SBB_EFUSE_H59_REG ((sbb_efuse_h59_reg_t*) SBB_EFUSE_H59_ADR)
#define SBB_EFUSE_L59_REG ((sbb_efuse_l59_reg_t*) SBB_EFUSE_L59_ADR)
#define SBB_EFUSE_H60_REG ((sbb_efuse_h60_reg_t*) SBB_EFUSE_H60_ADR)
#define SBB_EFUSE_L60_REG ((sbb_efuse_l60_reg_t*) SBB_EFUSE_L60_ADR)
#define SBB_EFUSE_H61_REG ((sbb_efuse_h61_reg_t*) SBB_EFUSE_H61_ADR)
#define SBB_EFUSE_L61_REG ((sbb_efuse_l61_reg_t*) SBB_EFUSE_L61_ADR)
#define SBB_EFUSE_H62_REG ((sbb_efuse_h62_reg_t*) SBB_EFUSE_H62_ADR)
#define SBB_EFUSE_L62_REG ((sbb_efuse_l62_reg_t*) SBB_EFUSE_L62_ADR)
#define SBB_EFUSE_H63_REG ((sbb_efuse_h63_reg_t*) SBB_EFUSE_H63_ADR)
#define SBB_EFUSE_L63_REG ((sbb_efuse_l63_reg_t*) SBB_EFUSE_L63_ADR)
#define SBB_EFUSE_H64_REG ((sbb_efuse_h64_reg_t*) SBB_EFUSE_H64_ADR)
#define SBB_EFUSE_L64_REG ((sbb_efuse_l64_reg_t*) SBB_EFUSE_L64_ADR)
#define SBB_EFUSE_H65_REG ((sbb_efuse_h65_reg_t*) SBB_EFUSE_H65_ADR)
#define SBB_EFUSE_L65_REG ((sbb_efuse_l65_reg_t*) SBB_EFUSE_L65_ADR)
#define SBB_EFUSE_H66_REG ((sbb_efuse_h66_reg_t*) SBB_EFUSE_H66_ADR)
#define SBB_EFUSE_L66_REG ((sbb_efuse_l66_reg_t*) SBB_EFUSE_L66_ADR)
#define SBB_EFUSE_H67_REG ((sbb_efuse_h67_reg_t*) SBB_EFUSE_H67_ADR)
#define SBB_EFUSE_L67_REG ((sbb_efuse_l67_reg_t*) SBB_EFUSE_L67_ADR)
#define SBB_EFUSE_H68_REG ((sbb_efuse_h68_reg_t*) SBB_EFUSE_H68_ADR)
#define SBB_EFUSE_L68_REG ((sbb_efuse_l68_reg_t*) SBB_EFUSE_L68_ADR)
#define SBB_EFUSE_H69_REG ((sbb_efuse_h69_reg_t*) SBB_EFUSE_H69_ADR)
#define SBB_EFUSE_L69_REG ((sbb_efuse_l69_reg_t*) SBB_EFUSE_L69_ADR)
#define SBB_EFUSE_H70_REG ((sbb_efuse_h70_reg_t*) SBB_EFUSE_H70_ADR)
#define SBB_EFUSE_L70_REG ((sbb_efuse_l70_reg_t*) SBB_EFUSE_L70_ADR)
#define SBB_EFUSE_H71_REG ((sbb_efuse_h71_reg_t*) SBB_EFUSE_H71_ADR)
#define SBB_EFUSE_L71_REG ((sbb_efuse_l71_reg_t*) SBB_EFUSE_L71_ADR)
#define SBB_EFUSE_H72_REG ((sbb_efuse_h72_reg_t*) SBB_EFUSE_H72_ADR)
#define SBB_EFUSE_L72_REG ((sbb_efuse_l72_reg_t*) SBB_EFUSE_L72_ADR)
#define SBB_EFUSE_H73_REG ((sbb_efuse_h73_reg_t*) SBB_EFUSE_H73_ADR)
#define SBB_EFUSE_L73_REG ((sbb_efuse_l73_reg_t*) SBB_EFUSE_L73_ADR)
#define SBB_EFUSE_H74_REG ((sbb_efuse_h74_reg_t*) SBB_EFUSE_H74_ADR)
#define SBB_EFUSE_L74_REG ((sbb_efuse_l74_reg_t*) SBB_EFUSE_L74_ADR)
#define SBB_EFUSE_H75_REG ((sbb_efuse_h75_reg_t*) SBB_EFUSE_H75_ADR)
#define SBB_EFUSE_L75_REG ((sbb_efuse_l75_reg_t*) SBB_EFUSE_L75_ADR)
#define SBB_EFUSE_H76_REG ((sbb_efuse_h76_reg_t*) SBB_EFUSE_H76_ADR)
#define SBB_EFUSE_L76_REG ((sbb_efuse_l76_reg_t*) SBB_EFUSE_L76_ADR)
#define SBB_EFUSE_H77_REG ((sbb_efuse_h77_reg_t*) SBB_EFUSE_H77_ADR)
#define SBB_EFUSE_L77_REG ((sbb_efuse_l77_reg_t*) SBB_EFUSE_L77_ADR)
#define SBB_EFUSE_H78_REG ((sbb_efuse_h78_reg_t*) SBB_EFUSE_H78_ADR)
#define SBB_EFUSE_L78_REG ((sbb_efuse_l78_reg_t*) SBB_EFUSE_L78_ADR)
#define SBB_EFUSE_H79_REG ((sbb_efuse_h79_reg_t*) SBB_EFUSE_H79_ADR)
#define SBB_EFUSE_L79_REG ((sbb_efuse_l79_reg_t*) SBB_EFUSE_L79_ADR)
#define SBB_EFUSE_H80_REG ((sbb_efuse_h80_reg_t*) SBB_EFUSE_H80_ADR)
#define SBB_EFUSE_L80_REG ((sbb_efuse_l80_reg_t*) SBB_EFUSE_L80_ADR)
#define SBB_EFUSE_H81_REG ((sbb_efuse_h81_reg_t*) SBB_EFUSE_H81_ADR)
#define SBB_EFUSE_L81_REG ((sbb_efuse_l81_reg_t*) SBB_EFUSE_L81_ADR)
#define SBB_EFUSE_H82_REG ((sbb_efuse_h82_reg_t*) SBB_EFUSE_H82_ADR)
#define SBB_EFUSE_L82_REG ((sbb_efuse_l82_reg_t*) SBB_EFUSE_L82_ADR)
#define SBB_EFUSE_H83_REG ((sbb_efuse_h83_reg_t*) SBB_EFUSE_H83_ADR)
#define SBB_EFUSE_L83_REG ((sbb_efuse_l83_reg_t*) SBB_EFUSE_L83_ADR)
#define SBB_EFUSE_H84_REG ((sbb_efuse_h84_reg_t*) SBB_EFUSE_H84_ADR)
#define SBB_EFUSE_L84_REG ((sbb_efuse_l84_reg_t*) SBB_EFUSE_L84_ADR)
#define SBB_EFUSE_H85_REG ((sbb_efuse_h85_reg_t*) SBB_EFUSE_H85_ADR)
#define SBB_EFUSE_L85_REG ((sbb_efuse_l85_reg_t*) SBB_EFUSE_L85_ADR)
#define SBB_EFUSE_H86_REG ((sbb_efuse_h86_reg_t*) SBB_EFUSE_H86_ADR)
#define SBB_EFUSE_L86_REG ((sbb_efuse_l86_reg_t*) SBB_EFUSE_L86_ADR)
#define SBB_EFUSE_H87_REG ((sbb_efuse_h87_reg_t*) SBB_EFUSE_H87_ADR)
#define SBB_EFUSE_L87_REG ((sbb_efuse_l87_reg_t*) SBB_EFUSE_L87_ADR)
#define SBB_EFUSE_H88_REG ((sbb_efuse_h88_reg_t*) SBB_EFUSE_H88_ADR)
#define SBB_EFUSE_L88_REG ((sbb_efuse_l88_reg_t*) SBB_EFUSE_L88_ADR)
#define SBB_EFUSE_H89_REG ((sbb_efuse_h89_reg_t*) SBB_EFUSE_H89_ADR)
#define SBB_EFUSE_L89_REG ((sbb_efuse_l89_reg_t*) SBB_EFUSE_L89_ADR)
#define SBB_EFUSE_H90_REG ((sbb_efuse_h90_reg_t*) SBB_EFUSE_H90_ADR)
#define SBB_EFUSE_L90_REG ((sbb_efuse_l90_reg_t*) SBB_EFUSE_L90_ADR)
#define SBB_EFUSE_H91_REG ((sbb_efuse_h91_reg_t*) SBB_EFUSE_H91_ADR)
#define SBB_EFUSE_L91_REG ((sbb_efuse_l91_reg_t*) SBB_EFUSE_L91_ADR)
#define SBB_EFUSE_H92_REG ((sbb_efuse_h92_reg_t*) SBB_EFUSE_H92_ADR)
#define SBB_EFUSE_L92_REG ((sbb_efuse_l92_reg_t*) SBB_EFUSE_L92_ADR)
#define SBB_EFUSE_H93_REG ((sbb_efuse_h93_reg_t*) SBB_EFUSE_H93_ADR)
#define SBB_EFUSE_L93_REG ((sbb_efuse_l93_reg_t*) SBB_EFUSE_L93_ADR)
#define SBB_EFUSE_H94_REG ((sbb_efuse_h94_reg_t*) SBB_EFUSE_H94_ADR)
#define SBB_EFUSE_L94_REG ((sbb_efuse_l94_reg_t*) SBB_EFUSE_L94_ADR)
#define SBB_EFUSE_H95_REG ((sbb_efuse_h95_reg_t*) SBB_EFUSE_H95_ADR)
#define SBB_EFUSE_L95_REG ((sbb_efuse_l95_reg_t*) SBB_EFUSE_L95_ADR)
#define SBB_EFUSE_H96_REG ((sbb_efuse_h96_reg_t*) SBB_EFUSE_H96_ADR)
#define SBB_EFUSE_L96_REG ((sbb_efuse_l96_reg_t*) SBB_EFUSE_L96_ADR)
#define SBB_EFUSE_H97_REG ((sbb_efuse_h97_reg_t*) SBB_EFUSE_H97_ADR)
#define SBB_EFUSE_L97_REG ((sbb_efuse_l97_reg_t*) SBB_EFUSE_L97_ADR)
#define SBB_EFUSE_H98_REG ((sbb_efuse_h98_reg_t*) SBB_EFUSE_H98_ADR)
#define SBB_EFUSE_L98_REG ((sbb_efuse_l98_reg_t*) SBB_EFUSE_L98_ADR)
#define SBB_EFUSE_H99_REG ((sbb_efuse_h99_reg_t*) SBB_EFUSE_H99_ADR)
#define SBB_EFUSE_L99_REG ((sbb_efuse_l99_reg_t*) SBB_EFUSE_L99_ADR)
#define SBB_EFUSE_H100_REG ((sbb_efuse_h100_reg_t*) SBB_EFUSE_H100_ADR)
#define SBB_EFUSE_L100_REG ((sbb_efuse_l100_reg_t*) SBB_EFUSE_L100_ADR)
#define SBB_EFUSE_H101_REG ((sbb_efuse_h101_reg_t*) SBB_EFUSE_H101_ADR)
#define SBB_EFUSE_L101_REG ((sbb_efuse_l101_reg_t*) SBB_EFUSE_L101_ADR)
#define SBB_EFUSE_H102_REG ((sbb_efuse_h102_reg_t*) SBB_EFUSE_H102_ADR)
#define SBB_EFUSE_L102_REG ((sbb_efuse_l102_reg_t*) SBB_EFUSE_L102_ADR)
#define SBB_EFUSE_H103_REG ((sbb_efuse_h103_reg_t*) SBB_EFUSE_H103_ADR)
#define SBB_EFUSE_L103_REG ((sbb_efuse_l103_reg_t*) SBB_EFUSE_L103_ADR)
#define SBB_EFUSE_H104_REG ((sbb_efuse_h104_reg_t*) SBB_EFUSE_H104_ADR)
#define SBB_EFUSE_L104_REG ((sbb_efuse_l104_reg_t*) SBB_EFUSE_L104_ADR)
#define SBB_EFUSE_H105_REG ((sbb_efuse_h105_reg_t*) SBB_EFUSE_H105_ADR)
#define SBB_EFUSE_L105_REG ((sbb_efuse_l105_reg_t*) SBB_EFUSE_L105_ADR)
#define SBB_EFUSE_H106_REG ((sbb_efuse_h106_reg_t*) SBB_EFUSE_H106_ADR)
#define SBB_EFUSE_L106_REG ((sbb_efuse_l106_reg_t*) SBB_EFUSE_L106_ADR)
#define SBB_EFUSE_H107_REG ((sbb_efuse_h107_reg_t*) SBB_EFUSE_H107_ADR)
#define SBB_EFUSE_L107_REG ((sbb_efuse_l107_reg_t*) SBB_EFUSE_L107_ADR)
#define SBB_EFUSE_H108_REG ((sbb_efuse_h108_reg_t*) SBB_EFUSE_H108_ADR)
#define SBB_EFUSE_L108_REG ((sbb_efuse_l108_reg_t*) SBB_EFUSE_L108_ADR)
#define SBB_EFUSE_H109_REG ((sbb_efuse_h109_reg_t*) SBB_EFUSE_H109_ADR)
#define SBB_EFUSE_L109_REG ((sbb_efuse_l109_reg_t*) SBB_EFUSE_L109_ADR)
#define SBB_EFUSE_H110_REG ((sbb_efuse_h110_reg_t*) SBB_EFUSE_H110_ADR)
#define SBB_EFUSE_L110_REG ((sbb_efuse_l110_reg_t*) SBB_EFUSE_L110_ADR)
#define SBB_EFUSE_H111_REG ((sbb_efuse_h111_reg_t*) SBB_EFUSE_H111_ADR)
#define SBB_EFUSE_L111_REG ((sbb_efuse_l111_reg_t*) SBB_EFUSE_L111_ADR)
#define SBB_PARAM_EXT_H0_REG ((sbb_param_ext_h0_reg_t*) SBB_PARAM_EXT_H0_ADR)
#define SBB_PARAM_EXT_L0_REG ((sbb_param_ext_l0_reg_t*) SBB_PARAM_EXT_L0_ADR)
#define SBB_PARAM_EXT_H1_REG ((sbb_param_ext_h1_reg_t*) SBB_PARAM_EXT_H1_ADR)
#define SBB_PARAM_EXT_L1_REG ((sbb_param_ext_l1_reg_t*) SBB_PARAM_EXT_L1_ADR)
#define SBB_PARAM_EXT_H2_REG ((sbb_param_ext_h2_reg_t*) SBB_PARAM_EXT_H2_ADR)
#define SBB_PARAM_EXT_L2_REG ((sbb_param_ext_l2_reg_t*) SBB_PARAM_EXT_L2_ADR)
#define SBB_PARAM_EXT_H3_REG ((sbb_param_ext_h3_reg_t*) SBB_PARAM_EXT_H3_ADR)
#define SBB_PARAM_EXT_L3_REG ((sbb_param_ext_l3_reg_t*) SBB_PARAM_EXT_L3_ADR)
#define SBB_PARAM_EXT_H4_REG ((sbb_param_ext_h4_reg_t*) SBB_PARAM_EXT_H4_ADR)
#define SBB_PARAM_EXT_L4_REG ((sbb_param_ext_l4_reg_t*) SBB_PARAM_EXT_L4_ADR)
#define SBB_PARAM_EXT_H5_REG ((sbb_param_ext_h5_reg_t*) SBB_PARAM_EXT_H5_ADR)
#define SBB_PARAM_EXT_L5_REG ((sbb_param_ext_l5_reg_t*) SBB_PARAM_EXT_L5_ADR)
#define SBB_PARAM_EXT_H6_REG ((sbb_param_ext_h6_reg_t*) SBB_PARAM_EXT_H6_ADR)
#define SBB_PARAM_EXT_L6_REG ((sbb_param_ext_l6_reg_t*) SBB_PARAM_EXT_L6_ADR)
#define SBB_PARAM_EXT_H7_REG ((sbb_param_ext_h7_reg_t*) SBB_PARAM_EXT_H7_ADR)
#define SBB_PARAM_EXT_L7_REG ((sbb_param_ext_l7_reg_t*) SBB_PARAM_EXT_L7_ADR)
#define SBB_PARAM_EXT_H8_REG ((sbb_param_ext_h8_reg_t*) SBB_PARAM_EXT_H8_ADR)
#define SBB_PARAM_EXT_L8_REG ((sbb_param_ext_l8_reg_t*) SBB_PARAM_EXT_L8_ADR)
#define SBB_PARAM_EXT_H9_REG ((sbb_param_ext_h9_reg_t*) SBB_PARAM_EXT_H9_ADR)
#define SBB_PARAM_EXT_L9_REG ((sbb_param_ext_l9_reg_t*) SBB_PARAM_EXT_L9_ADR)
#define SBB_PARAM_EXT_H10_REG ((sbb_param_ext_h10_reg_t*) SBB_PARAM_EXT_H10_ADR)
#define SBB_PARAM_EXT_L10_REG ((sbb_param_ext_l10_reg_t*) SBB_PARAM_EXT_L10_ADR)
#define SBB_PARAM_EXT_H11_REG ((sbb_param_ext_h11_reg_t*) SBB_PARAM_EXT_H11_ADR)
#define SBB_PARAM_EXT_L11_REG ((sbb_param_ext_l11_reg_t*) SBB_PARAM_EXT_L11_ADR)
#define SBB_PARAM_EXT_H12_REG ((sbb_param_ext_h12_reg_t*) SBB_PARAM_EXT_H12_ADR)
#define SBB_PARAM_EXT_L12_REG ((sbb_param_ext_l12_reg_t*) SBB_PARAM_EXT_L12_ADR)
#define SBB_PARAM_EXT_H13_REG ((sbb_param_ext_h13_reg_t*) SBB_PARAM_EXT_H13_ADR)
#define SBB_PARAM_EXT_L13_REG ((sbb_param_ext_l13_reg_t*) SBB_PARAM_EXT_L13_ADR)
#define SBB_PARAM_EXT_H14_REG ((sbb_param_ext_h14_reg_t*) SBB_PARAM_EXT_H14_ADR)
#define SBB_PARAM_EXT_L14_REG ((sbb_param_ext_l14_reg_t*) SBB_PARAM_EXT_L14_ADR)
#define SBB_PARAM_EXT_H15_REG ((sbb_param_ext_h15_reg_t*) SBB_PARAM_EXT_H15_ADR)
#define SBB_PARAM_EXT_L15_REG ((sbb_param_ext_l15_reg_t*) SBB_PARAM_EXT_L15_ADR)
#define SBB_PARAM_EXT_H16_REG ((sbb_param_ext_h16_reg_t*) SBB_PARAM_EXT_H16_ADR)
#define SBB_PARAM_EXT_L16_REG ((sbb_param_ext_l16_reg_t*) SBB_PARAM_EXT_L16_ADR)
#define SBB_PARAM_EXT_H17_REG ((sbb_param_ext_h17_reg_t*) SBB_PARAM_EXT_H17_ADR)
#define SBB_PARAM_EXT_L17_REG ((sbb_param_ext_l17_reg_t*) SBB_PARAM_EXT_L17_ADR)
#define SBB_PARAM_EXT_H18_REG ((sbb_param_ext_h18_reg_t*) SBB_PARAM_EXT_H18_ADR)
#define SBB_PARAM_EXT_L18_REG ((sbb_param_ext_l18_reg_t*) SBB_PARAM_EXT_L18_ADR)
#define SBB_PARAM_EXT_H19_REG ((sbb_param_ext_h19_reg_t*) SBB_PARAM_EXT_H19_ADR)
#define SBB_PARAM_EXT_L19_REG ((sbb_param_ext_l19_reg_t*) SBB_PARAM_EXT_L19_ADR)
#define SBB_PARAM_EXT_H20_REG ((sbb_param_ext_h20_reg_t*) SBB_PARAM_EXT_H20_ADR)
#define SBB_PARAM_EXT_L20_REG ((sbb_param_ext_l20_reg_t*) SBB_PARAM_EXT_L20_ADR)
#define SBB_PARAM_EXT_H21_REG ((sbb_param_ext_h21_reg_t*) SBB_PARAM_EXT_H21_ADR)
#define SBB_PARAM_EXT_L21_REG ((sbb_param_ext_l21_reg_t*) SBB_PARAM_EXT_L21_ADR)
#define SBB_PARAM_EXT_H22_REG ((sbb_param_ext_h22_reg_t*) SBB_PARAM_EXT_H22_ADR)
#define SBB_PARAM_EXT_L22_REG ((sbb_param_ext_l22_reg_t*) SBB_PARAM_EXT_L22_ADR)
#define SBB_PARAM_EXT_H23_REG ((sbb_param_ext_h23_reg_t*) SBB_PARAM_EXT_H23_ADR)
#define SBB_PARAM_EXT_L23_REG ((sbb_param_ext_l23_reg_t*) SBB_PARAM_EXT_L23_ADR)
#define SBB_PARAM_EXT_H24_REG ((sbb_param_ext_h24_reg_t*) SBB_PARAM_EXT_H24_ADR)
#define SBB_PARAM_EXT_L24_REG ((sbb_param_ext_l24_reg_t*) SBB_PARAM_EXT_L24_ADR)
#define SBB_PARAM_EXT_H25_REG ((sbb_param_ext_h25_reg_t*) SBB_PARAM_EXT_H25_ADR)
#define SBB_PARAM_EXT_L25_REG ((sbb_param_ext_l25_reg_t*) SBB_PARAM_EXT_L25_ADR)
#define SBB_PARAM_EXT_H26_REG ((sbb_param_ext_h26_reg_t*) SBB_PARAM_EXT_H26_ADR)
#define SBB_PARAM_EXT_L26_REG ((sbb_param_ext_l26_reg_t*) SBB_PARAM_EXT_L26_ADR)
#define SBB_PARAM_EXT_H27_REG ((sbb_param_ext_h27_reg_t*) SBB_PARAM_EXT_H27_ADR)
#define SBB_PARAM_EXT_L27_REG ((sbb_param_ext_l27_reg_t*) SBB_PARAM_EXT_L27_ADR)
#define SBB_PARAM_EXT_H28_REG ((sbb_param_ext_h28_reg_t*) SBB_PARAM_EXT_H28_ADR)
#define SBB_PARAM_EXT_L28_REG ((sbb_param_ext_l28_reg_t*) SBB_PARAM_EXT_L28_ADR)
#define SBB_PARAM_EXT_H29_REG ((sbb_param_ext_h29_reg_t*) SBB_PARAM_EXT_H29_ADR)
#define SBB_PARAM_EXT_L29_REG ((sbb_param_ext_l29_reg_t*) SBB_PARAM_EXT_L29_ADR)
#define SBB_PARAM_EXT_H30_REG ((sbb_param_ext_h30_reg_t*) SBB_PARAM_EXT_H30_ADR)
#define SBB_PARAM_EXT_L30_REG ((sbb_param_ext_l30_reg_t*) SBB_PARAM_EXT_L30_ADR)
#define SBB_PARAM_EXT_H31_REG ((sbb_param_ext_h31_reg_t*) SBB_PARAM_EXT_H31_ADR)
#define SBB_PARAM_EXT_L31_REG ((sbb_param_ext_l31_reg_t*) SBB_PARAM_EXT_L31_ADR)
#define SBB_PARAM_EXT_H32_REG ((sbb_param_ext_h32_reg_t*) SBB_PARAM_EXT_H32_ADR)
#define SBB_PARAM_EXT_L32_REG ((sbb_param_ext_l32_reg_t*) SBB_PARAM_EXT_L32_ADR)
#define SBB_PARAM_EXT_H33_REG ((sbb_param_ext_h33_reg_t*) SBB_PARAM_EXT_H33_ADR)
#define SBB_PARAM_EXT_L33_REG ((sbb_param_ext_l33_reg_t*) SBB_PARAM_EXT_L33_ADR)
#define SBB_PARAM_EXT_H34_REG ((sbb_param_ext_h34_reg_t*) SBB_PARAM_EXT_H34_ADR)
#define SBB_PARAM_EXT_L34_REG ((sbb_param_ext_l34_reg_t*) SBB_PARAM_EXT_L34_ADR)
#define SBB_PARAM_EXT_H35_REG ((sbb_param_ext_h35_reg_t*) SBB_PARAM_EXT_H35_ADR)
#define SBB_PARAM_EXT_L35_REG ((sbb_param_ext_l35_reg_t*) SBB_PARAM_EXT_L35_ADR)
#define SBB_PARAM_EXT_H36_REG ((sbb_param_ext_h36_reg_t*) SBB_PARAM_EXT_H36_ADR)
#define SBB_PARAM_EXT_L36_REG ((sbb_param_ext_l36_reg_t*) SBB_PARAM_EXT_L36_ADR)
#define SBB_PARAM_EXT_H37_REG ((sbb_param_ext_h37_reg_t*) SBB_PARAM_EXT_H37_ADR)
#define SBB_PARAM_EXT_L37_REG ((sbb_param_ext_l37_reg_t*) SBB_PARAM_EXT_L37_ADR)
#define SBB_PARAM_EXT_H38_REG ((sbb_param_ext_h38_reg_t*) SBB_PARAM_EXT_H38_ADR)
#define SBB_PARAM_EXT_L38_REG ((sbb_param_ext_l38_reg_t*) SBB_PARAM_EXT_L38_ADR)
#define SBB_PARAM_EXT_H39_REG ((sbb_param_ext_h39_reg_t*) SBB_PARAM_EXT_H39_ADR)
#define SBB_PARAM_EXT_L39_REG ((sbb_param_ext_l39_reg_t*) SBB_PARAM_EXT_L39_ADR)
#define SBB_PARAM_EXT_H40_REG ((sbb_param_ext_h40_reg_t*) SBB_PARAM_EXT_H40_ADR)
#define SBB_PARAM_EXT_L40_REG ((sbb_param_ext_l40_reg_t*) SBB_PARAM_EXT_L40_ADR)
#define SBB_PARAM_EXT_H41_REG ((sbb_param_ext_h41_reg_t*) SBB_PARAM_EXT_H41_ADR)
#define SBB_PARAM_EXT_L41_REG ((sbb_param_ext_l41_reg_t*) SBB_PARAM_EXT_L41_ADR)
#define SBB_PARAM_EXT_H42_REG ((sbb_param_ext_h42_reg_t*) SBB_PARAM_EXT_H42_ADR)
#define SBB_PARAM_EXT_L42_REG ((sbb_param_ext_l42_reg_t*) SBB_PARAM_EXT_L42_ADR)
#define SBB_PARAM_EXT_H43_REG ((sbb_param_ext_h43_reg_t*) SBB_PARAM_EXT_H43_ADR)
#define SBB_PARAM_EXT_L43_REG ((sbb_param_ext_l43_reg_t*) SBB_PARAM_EXT_L43_ADR)
#define SBB_PARAM_EXT_H44_REG ((sbb_param_ext_h44_reg_t*) SBB_PARAM_EXT_H44_ADR)
#define SBB_PARAM_EXT_L44_REG ((sbb_param_ext_l44_reg_t*) SBB_PARAM_EXT_L44_ADR)
#define SBB_PARAM_EXT_H45_REG ((sbb_param_ext_h45_reg_t*) SBB_PARAM_EXT_H45_ADR)
#define SBB_PARAM_EXT_L45_REG ((sbb_param_ext_l45_reg_t*) SBB_PARAM_EXT_L45_ADR)
#define SBB_PARAM_EXT_H46_REG ((sbb_param_ext_h46_reg_t*) SBB_PARAM_EXT_H46_ADR)
#define SBB_PARAM_EXT_L46_REG ((sbb_param_ext_l46_reg_t*) SBB_PARAM_EXT_L46_ADR)
#define SBB_PARAM_EXT_H47_REG ((sbb_param_ext_h47_reg_t*) SBB_PARAM_EXT_H47_ADR)
#define SBB_PARAM_EXT_L47_REG ((sbb_param_ext_l47_reg_t*) SBB_PARAM_EXT_L47_ADR)
#define SBB_PARAM_EXT_H48_REG ((sbb_param_ext_h48_reg_t*) SBB_PARAM_EXT_H48_ADR)
#define SBB_PARAM_EXT_L48_REG ((sbb_param_ext_l48_reg_t*) SBB_PARAM_EXT_L48_ADR)
#define SBB_PARAM_EXT_H49_REG ((sbb_param_ext_h49_reg_t*) SBB_PARAM_EXT_H49_ADR)
#define SBB_PARAM_EXT_L49_REG ((sbb_param_ext_l49_reg_t*) SBB_PARAM_EXT_L49_ADR)
#define SBB_PARAM_EXT_H50_REG ((sbb_param_ext_h50_reg_t*) SBB_PARAM_EXT_H50_ADR)
#define SBB_PARAM_EXT_L50_REG ((sbb_param_ext_l50_reg_t*) SBB_PARAM_EXT_L50_ADR)
#define SBB_PARAM_EXT_H51_REG ((sbb_param_ext_h51_reg_t*) SBB_PARAM_EXT_H51_ADR)
#define SBB_PARAM_EXT_L51_REG ((sbb_param_ext_l51_reg_t*) SBB_PARAM_EXT_L51_ADR)
#define SBB_PARAM_EXT_H52_REG ((sbb_param_ext_h52_reg_t*) SBB_PARAM_EXT_H52_ADR)
#define SBB_PARAM_EXT_L52_REG ((sbb_param_ext_l52_reg_t*) SBB_PARAM_EXT_L52_ADR)
#define SBB_PARAM_EXT_H53_REG ((sbb_param_ext_h53_reg_t*) SBB_PARAM_EXT_H53_ADR)
#define SBB_PARAM_EXT_L53_REG ((sbb_param_ext_l53_reg_t*) SBB_PARAM_EXT_L53_ADR)
#define SBB_PARAM_EXT_H54_REG ((sbb_param_ext_h54_reg_t*) SBB_PARAM_EXT_H54_ADR)
#define SBB_PARAM_EXT_L54_REG ((sbb_param_ext_l54_reg_t*) SBB_PARAM_EXT_L54_ADR)
#define SBB_PARAM_EXT_H55_REG ((sbb_param_ext_h55_reg_t*) SBB_PARAM_EXT_H55_ADR)
#define SBB_PARAM_EXT_L55_REG ((sbb_param_ext_l55_reg_t*) SBB_PARAM_EXT_L55_ADR)
#define SBB_PARAM_EXT_H56_REG ((sbb_param_ext_h56_reg_t*) SBB_PARAM_EXT_H56_ADR)
#define SBB_PARAM_EXT_L56_REG ((sbb_param_ext_l56_reg_t*) SBB_PARAM_EXT_L56_ADR)
#define SBB_PARAM_EXT_H57_REG ((sbb_param_ext_h57_reg_t*) SBB_PARAM_EXT_H57_ADR)
#define SBB_PARAM_EXT_L57_REG ((sbb_param_ext_l57_reg_t*) SBB_PARAM_EXT_L57_ADR)
#define SBB_PARAM_EXT_H58_REG ((sbb_param_ext_h58_reg_t*) SBB_PARAM_EXT_H58_ADR)
#define SBB_PARAM_EXT_L58_REG ((sbb_param_ext_l58_reg_t*) SBB_PARAM_EXT_L58_ADR)
#define SBB_PARAM_EXT_H59_REG ((sbb_param_ext_h59_reg_t*) SBB_PARAM_EXT_H59_ADR)
#define SBB_PARAM_EXT_L59_REG ((sbb_param_ext_l59_reg_t*) SBB_PARAM_EXT_L59_ADR)
#define SBB_PARAM_EXT_H60_REG ((sbb_param_ext_h60_reg_t*) SBB_PARAM_EXT_H60_ADR)
#define SBB_PARAM_EXT_L60_REG ((sbb_param_ext_l60_reg_t*) SBB_PARAM_EXT_L60_ADR)
#define SBB_PARAM_EXT_H61_REG ((sbb_param_ext_h61_reg_t*) SBB_PARAM_EXT_H61_ADR)
#define SBB_PARAM_EXT_L61_REG ((sbb_param_ext_l61_reg_t*) SBB_PARAM_EXT_L61_ADR)
#define SBB_PARAM_EXT_H62_REG ((sbb_param_ext_h62_reg_t*) SBB_PARAM_EXT_H62_ADR)
#define SBB_PARAM_EXT_L62_REG ((sbb_param_ext_l62_reg_t*) SBB_PARAM_EXT_L62_ADR)
#define SBB_PARAM_EXT_H63_REG ((sbb_param_ext_h63_reg_t*) SBB_PARAM_EXT_H63_ADR)
#define SBB_PARAM_EXT_L63_REG ((sbb_param_ext_l63_reg_t*) SBB_PARAM_EXT_L63_ADR)
#define SBB_PARAM_H0_REG ((sbb_param_h0_reg_t*) SBB_PARAM_H0_ADR)
#define SBB_PARAM_L0_REG ((sbb_param_l0_reg_t*) SBB_PARAM_L0_ADR)
#define SBB_PARAM_H1_REG ((sbb_param_h1_reg_t*) SBB_PARAM_H1_ADR)
#define SBB_PARAM_L1_REG ((sbb_param_l1_reg_t*) SBB_PARAM_L1_ADR)
#define SBB_PARAM_H2_REG ((sbb_param_h2_reg_t*) SBB_PARAM_H2_ADR)
#define SBB_PARAM_L2_REG ((sbb_param_l2_reg_t*) SBB_PARAM_L2_ADR)
#define SBB_PARAM_H3_REG ((sbb_param_h3_reg_t*) SBB_PARAM_H3_ADR)
#define SBB_PARAM_L3_REG ((sbb_param_l3_reg_t*) SBB_PARAM_L3_ADR)
#define SBB_PARAM_H4_REG ((sbb_param_h4_reg_t*) SBB_PARAM_H4_ADR)
#define SBB_PARAM_L4_REG ((sbb_param_l4_reg_t*) SBB_PARAM_L4_ADR)
#define SBB_PARAM_H5_REG ((sbb_param_h5_reg_t*) SBB_PARAM_H5_ADR)
#define SBB_PARAM_L5_REG ((sbb_param_l5_reg_t*) SBB_PARAM_L5_ADR)
#define SBB_PARAM_H6_REG ((sbb_param_h6_reg_t*) SBB_PARAM_H6_ADR)
#define SBB_PARAM_L6_REG ((sbb_param_l6_reg_t*) SBB_PARAM_L6_ADR)
#define SBB_PARAM_H7_REG ((sbb_param_h7_reg_t*) SBB_PARAM_H7_ADR)
#define SBB_PARAM_L7_REG ((sbb_param_l7_reg_t*) SBB_PARAM_L7_ADR)
#define SBB_PARAM_H8_REG ((sbb_param_h8_reg_t*) SBB_PARAM_H8_ADR)
#define SBB_PARAM_L8_REG ((sbb_param_l8_reg_t*) SBB_PARAM_L8_ADR)
#define SBB_PARAM_H9_REG ((sbb_param_h9_reg_t*) SBB_PARAM_H9_ADR)
#define SBB_PARAM_L9_REG ((sbb_param_l9_reg_t*) SBB_PARAM_L9_ADR)
#define SBB_PARAM_H10_REG ((sbb_param_h10_reg_t*) SBB_PARAM_H10_ADR)
#define SBB_PARAM_L10_REG ((sbb_param_l10_reg_t*) SBB_PARAM_L10_ADR)
#define SBB_PARAM_H11_REG ((sbb_param_h11_reg_t*) SBB_PARAM_H11_ADR)
#define SBB_PARAM_L11_REG ((sbb_param_l11_reg_t*) SBB_PARAM_L11_ADR)
#define SBB_PARAM_H12_REG ((sbb_param_h12_reg_t*) SBB_PARAM_H12_ADR)
#define SBB_PARAM_L12_REG ((sbb_param_l12_reg_t*) SBB_PARAM_L12_ADR)
#define SBB_PARAM_H13_REG ((sbb_param_h13_reg_t*) SBB_PARAM_H13_ADR)
#define SBB_PARAM_L13_REG ((sbb_param_l13_reg_t*) SBB_PARAM_L13_ADR)
#define SBB_PARAM_H14_REG ((sbb_param_h14_reg_t*) SBB_PARAM_H14_ADR)
#define SBB_PARAM_L14_REG ((sbb_param_l14_reg_t*) SBB_PARAM_L14_ADR)
#define SBB_PARAM_H15_REG ((sbb_param_h15_reg_t*) SBB_PARAM_H15_ADR)
#define SBB_PARAM_L15_REG ((sbb_param_l15_reg_t*) SBB_PARAM_L15_ADR)
#define SBB_PARAM_H16_REG ((sbb_param_h16_reg_t*) SBB_PARAM_H16_ADR)
#define SBB_PARAM_L16_REG ((sbb_param_l16_reg_t*) SBB_PARAM_L16_ADR)
#define SBB_PARAM_H17_REG ((sbb_param_h17_reg_t*) SBB_PARAM_H17_ADR)
#define SBB_PARAM_L17_REG ((sbb_param_l17_reg_t*) SBB_PARAM_L17_ADR)
#define SBB_PARAM_H18_REG ((sbb_param_h18_reg_t*) SBB_PARAM_H18_ADR)
#define SBB_PARAM_L18_REG ((sbb_param_l18_reg_t*) SBB_PARAM_L18_ADR)
#define SBB_PARAM_H19_REG ((sbb_param_h19_reg_t*) SBB_PARAM_H19_ADR)
#define SBB_PARAM_L19_REG ((sbb_param_l19_reg_t*) SBB_PARAM_L19_ADR)
#define SBB_PARAM_H20_REG ((sbb_param_h20_reg_t*) SBB_PARAM_H20_ADR)
#define SBB_PARAM_L20_REG ((sbb_param_l20_reg_t*) SBB_PARAM_L20_ADR)
#define SBB_PARAM_H21_REG ((sbb_param_h21_reg_t*) SBB_PARAM_H21_ADR)
#define SBB_PARAM_L21_REG ((sbb_param_l21_reg_t*) SBB_PARAM_L21_ADR)
#define SBB_PARAM_H22_REG ((sbb_param_h22_reg_t*) SBB_PARAM_H22_ADR)
#define SBB_PARAM_L22_REG ((sbb_param_l22_reg_t*) SBB_PARAM_L22_ADR)
#define SBB_PARAM_H23_REG ((sbb_param_h23_reg_t*) SBB_PARAM_H23_ADR)
#define SBB_PARAM_L23_REG ((sbb_param_l23_reg_t*) SBB_PARAM_L23_ADR)
#define SBB_PARAM_H24_REG ((sbb_param_h24_reg_t*) SBB_PARAM_H24_ADR)
#define SBB_PARAM_L24_REG ((sbb_param_l24_reg_t*) SBB_PARAM_L24_ADR)
#define SBB_PARAM_H25_REG ((sbb_param_h25_reg_t*) SBB_PARAM_H25_ADR)
#define SBB_PARAM_L25_REG ((sbb_param_l25_reg_t*) SBB_PARAM_L25_ADR)
#define SBB_PARAM_H26_REG ((sbb_param_h26_reg_t*) SBB_PARAM_H26_ADR)
#define SBB_PARAM_L26_REG ((sbb_param_l26_reg_t*) SBB_PARAM_L26_ADR)
#define SBB_PARAM_H27_REG ((sbb_param_h27_reg_t*) SBB_PARAM_H27_ADR)
#define SBB_PARAM_L27_REG ((sbb_param_l27_reg_t*) SBB_PARAM_L27_ADR)
#define SBB_PARAM_H28_REG ((sbb_param_h28_reg_t*) SBB_PARAM_H28_ADR)
#define SBB_PARAM_L28_REG ((sbb_param_l28_reg_t*) SBB_PARAM_L28_ADR)
#define SBB_PARAM_H29_REG ((sbb_param_h29_reg_t*) SBB_PARAM_H29_ADR)
#define SBB_PARAM_L29_REG ((sbb_param_l29_reg_t*) SBB_PARAM_L29_ADR)
#define SBB_PARAM_H30_REG ((sbb_param_h30_reg_t*) SBB_PARAM_H30_ADR)
#define SBB_PARAM_L30_REG ((sbb_param_l30_reg_t*) SBB_PARAM_L30_ADR)
#define SBB_PARAM_H31_REG ((sbb_param_h31_reg_t*) SBB_PARAM_H31_ADR)
#define SBB_PARAM_L31_REG ((sbb_param_l31_reg_t*) SBB_PARAM_L31_ADR)
#define SBB_PARAM_H32_REG ((sbb_param_h32_reg_t*) SBB_PARAM_H32_ADR)
#define SBB_PARAM_L32_REG ((sbb_param_l32_reg_t*) SBB_PARAM_L32_ADR)
#define SBB_PARAM_H33_REG ((sbb_param_h33_reg_t*) SBB_PARAM_H33_ADR)
#define SBB_PARAM_L33_REG ((sbb_param_l33_reg_t*) SBB_PARAM_L33_ADR)
#define SBB_PARAM_H34_REG ((sbb_param_h34_reg_t*) SBB_PARAM_H34_ADR)
#define SBB_PARAM_L34_REG ((sbb_param_l34_reg_t*) SBB_PARAM_L34_ADR)
#define SBB_PARAM_H35_REG ((sbb_param_h35_reg_t*) SBB_PARAM_H35_ADR)
#define SBB_PARAM_L35_REG ((sbb_param_l35_reg_t*) SBB_PARAM_L35_ADR)
#define SBB_PARAM_H36_REG ((sbb_param_h36_reg_t*) SBB_PARAM_H36_ADR)
#define SBB_PARAM_L36_REG ((sbb_param_l36_reg_t*) SBB_PARAM_L36_ADR)
#define SBB_PARAM_H37_REG ((sbb_param_h37_reg_t*) SBB_PARAM_H37_ADR)
#define SBB_PARAM_L37_REG ((sbb_param_l37_reg_t*) SBB_PARAM_L37_ADR)
#define SBB_PARAM_H38_REG ((sbb_param_h38_reg_t*) SBB_PARAM_H38_ADR)
#define SBB_PARAM_L38_REG ((sbb_param_l38_reg_t*) SBB_PARAM_L38_ADR)
#define SBB_PARAM_H39_REG ((sbb_param_h39_reg_t*) SBB_PARAM_H39_ADR)
#define SBB_PARAM_L39_REG ((sbb_param_l39_reg_t*) SBB_PARAM_L39_ADR)
#define SBB_PARAM_H40_REG ((sbb_param_h40_reg_t*) SBB_PARAM_H40_ADR)
#define SBB_PARAM_L40_REG ((sbb_param_l40_reg_t*) SBB_PARAM_L40_ADR)
#define SBB_PARAM_H41_REG ((sbb_param_h41_reg_t*) SBB_PARAM_H41_ADR)
#define SBB_PARAM_L41_REG ((sbb_param_l41_reg_t*) SBB_PARAM_L41_ADR)
#define SBB_PARAM_H42_REG ((sbb_param_h42_reg_t*) SBB_PARAM_H42_ADR)
#define SBB_PARAM_L42_REG ((sbb_param_l42_reg_t*) SBB_PARAM_L42_ADR)
#define SBB_PARAM_H43_REG ((sbb_param_h43_reg_t*) SBB_PARAM_H43_ADR)
#define SBB_PARAM_L43_REG ((sbb_param_l43_reg_t*) SBB_PARAM_L43_ADR)
#define SBB_PARAM_H44_REG ((sbb_param_h44_reg_t*) SBB_PARAM_H44_ADR)
#define SBB_PARAM_L44_REG ((sbb_param_l44_reg_t*) SBB_PARAM_L44_ADR)
#define SBB_PARAM_H45_REG ((sbb_param_h45_reg_t*) SBB_PARAM_H45_ADR)
#define SBB_PARAM_L45_REG ((sbb_param_l45_reg_t*) SBB_PARAM_L45_ADR)
#define SBB_PARAM_H46_REG ((sbb_param_h46_reg_t*) SBB_PARAM_H46_ADR)
#define SBB_PARAM_L46_REG ((sbb_param_l46_reg_t*) SBB_PARAM_L46_ADR)
#define SBB_PARAM_H47_REG ((sbb_param_h47_reg_t*) SBB_PARAM_H47_ADR)
#define SBB_PARAM_L47_REG ((sbb_param_l47_reg_t*) SBB_PARAM_L47_ADR)
#define SBB_PARAM_H48_REG ((sbb_param_h48_reg_t*) SBB_PARAM_H48_ADR)
#define SBB_PARAM_L48_REG ((sbb_param_l48_reg_t*) SBB_PARAM_L48_ADR)
#define SBB_PARAM_H49_REG ((sbb_param_h49_reg_t*) SBB_PARAM_H49_ADR)
#define SBB_PARAM_L49_REG ((sbb_param_l49_reg_t*) SBB_PARAM_L49_ADR)
#define SBB_PARAM_H50_REG ((sbb_param_h50_reg_t*) SBB_PARAM_H50_ADR)
#define SBB_PARAM_L50_REG ((sbb_param_l50_reg_t*) SBB_PARAM_L50_ADR)
#define SBB_PARAM_H51_REG ((sbb_param_h51_reg_t*) SBB_PARAM_H51_ADR)
#define SBB_PARAM_L51_REG ((sbb_param_l51_reg_t*) SBB_PARAM_L51_ADR)
#define SBB_PARAM_H52_REG ((sbb_param_h52_reg_t*) SBB_PARAM_H52_ADR)
#define SBB_PARAM_L52_REG ((sbb_param_l52_reg_t*) SBB_PARAM_L52_ADR)
#define SBB_PARAM_H53_REG ((sbb_param_h53_reg_t*) SBB_PARAM_H53_ADR)
#define SBB_PARAM_L53_REG ((sbb_param_l53_reg_t*) SBB_PARAM_L53_ADR)
#define SBB_PARAM_H54_REG ((sbb_param_h54_reg_t*) SBB_PARAM_H54_ADR)
#define SBB_PARAM_L54_REG ((sbb_param_l54_reg_t*) SBB_PARAM_L54_ADR)
#define SBB_PARAM_H55_REG ((sbb_param_h55_reg_t*) SBB_PARAM_H55_ADR)
#define SBB_PARAM_L55_REG ((sbb_param_l55_reg_t*) SBB_PARAM_L55_ADR)
#define SBB_PARAM_H56_REG ((sbb_param_h56_reg_t*) SBB_PARAM_H56_ADR)
#define SBB_PARAM_L56_REG ((sbb_param_l56_reg_t*) SBB_PARAM_L56_ADR)
#define SBB_PARAM_H57_REG ((sbb_param_h57_reg_t*) SBB_PARAM_H57_ADR)
#define SBB_PARAM_L57_REG ((sbb_param_l57_reg_t*) SBB_PARAM_L57_ADR)
#define SBB_PARAM_H58_REG ((sbb_param_h58_reg_t*) SBB_PARAM_H58_ADR)
#define SBB_PARAM_L58_REG ((sbb_param_l58_reg_t*) SBB_PARAM_L58_ADR)
#define SBB_PARAM_H59_REG ((sbb_param_h59_reg_t*) SBB_PARAM_H59_ADR)
#define SBB_PARAM_L59_REG ((sbb_param_l59_reg_t*) SBB_PARAM_L59_ADR)
#define SBB_PARAM_H60_REG ((sbb_param_h60_reg_t*) SBB_PARAM_H60_ADR)
#define SBB_PARAM_L60_REG ((sbb_param_l60_reg_t*) SBB_PARAM_L60_ADR)
#define SBB_PARAM_H61_REG ((sbb_param_h61_reg_t*) SBB_PARAM_H61_ADR)
#define SBB_PARAM_L61_REG ((sbb_param_l61_reg_t*) SBB_PARAM_L61_ADR)
#define SBB_PARAM_H62_REG ((sbb_param_h62_reg_t*) SBB_PARAM_H62_ADR)
#define SBB_PARAM_L62_REG ((sbb_param_l62_reg_t*) SBB_PARAM_L62_ADR)
#define SBB_PARAM_H63_REG ((sbb_param_h63_reg_t*) SBB_PARAM_H63_ADR)
#define SBB_PARAM_L63_REG ((sbb_param_l63_reg_t*) SBB_PARAM_L63_ADR)
#define SBB_PARAM_H64_REG ((sbb_param_h64_reg_t*) SBB_PARAM_H64_ADR)
#define SBB_PARAM_L64_REG ((sbb_param_l64_reg_t*) SBB_PARAM_L64_ADR)
#define SBB_PARAM_H65_REG ((sbb_param_h65_reg_t*) SBB_PARAM_H65_ADR)
#define SBB_PARAM_L65_REG ((sbb_param_l65_reg_t*) SBB_PARAM_L65_ADR)
#define SBB_PARAM_H66_REG ((sbb_param_h66_reg_t*) SBB_PARAM_H66_ADR)
#define SBB_PARAM_L66_REG ((sbb_param_l66_reg_t*) SBB_PARAM_L66_ADR)
#define SBB_PARAM_H67_REG ((sbb_param_h67_reg_t*) SBB_PARAM_H67_ADR)
#define SBB_PARAM_L67_REG ((sbb_param_l67_reg_t*) SBB_PARAM_L67_ADR)
#define SBB_PARAM_H68_REG ((sbb_param_h68_reg_t*) SBB_PARAM_H68_ADR)
#define SBB_PARAM_L68_REG ((sbb_param_l68_reg_t*) SBB_PARAM_L68_ADR)
#define SBB_PARAM_H69_REG ((sbb_param_h69_reg_t*) SBB_PARAM_H69_ADR)
#define SBB_PARAM_L69_REG ((sbb_param_l69_reg_t*) SBB_PARAM_L69_ADR)
#define SBB_PARAM_H70_REG ((sbb_param_h70_reg_t*) SBB_PARAM_H70_ADR)
#define SBB_PARAM_L70_REG ((sbb_param_l70_reg_t*) SBB_PARAM_L70_ADR)
#define SBB_PARAM_H71_REG ((sbb_param_h71_reg_t*) SBB_PARAM_H71_ADR)
#define SBB_PARAM_L71_REG ((sbb_param_l71_reg_t*) SBB_PARAM_L71_ADR)
#define SBB_PARAM_H72_REG ((sbb_param_h72_reg_t*) SBB_PARAM_H72_ADR)
#define SBB_PARAM_L72_REG ((sbb_param_l72_reg_t*) SBB_PARAM_L72_ADR)
#define SBB_PARAM_H73_REG ((sbb_param_h73_reg_t*) SBB_PARAM_H73_ADR)
#define SBB_PARAM_L73_REG ((sbb_param_l73_reg_t*) SBB_PARAM_L73_ADR)
#define SBB_PARAM_H74_REG ((sbb_param_h74_reg_t*) SBB_PARAM_H74_ADR)
#define SBB_PARAM_L74_REG ((sbb_param_l74_reg_t*) SBB_PARAM_L74_ADR)
#define SBB_PARAM_H75_REG ((sbb_param_h75_reg_t*) SBB_PARAM_H75_ADR)
#define SBB_PARAM_L75_REG ((sbb_param_l75_reg_t*) SBB_PARAM_L75_ADR)
#define SBB_PARAM_H76_REG ((sbb_param_h76_reg_t*) SBB_PARAM_H76_ADR)
#define SBB_PARAM_L76_REG ((sbb_param_l76_reg_t*) SBB_PARAM_L76_ADR)
#define SBB_PARAM_H77_REG ((sbb_param_h77_reg_t*) SBB_PARAM_H77_ADR)
#define SBB_PARAM_L77_REG ((sbb_param_l77_reg_t*) SBB_PARAM_L77_ADR)
#define SBB_PARAM_H78_REG ((sbb_param_h78_reg_t*) SBB_PARAM_H78_ADR)
#define SBB_PARAM_L78_REG ((sbb_param_l78_reg_t*) SBB_PARAM_L78_ADR)
#define SBB_PARAM_H79_REG ((sbb_param_h79_reg_t*) SBB_PARAM_H79_ADR)
#define SBB_PARAM_L79_REG ((sbb_param_l79_reg_t*) SBB_PARAM_L79_ADR)
#define SBB_PARAM_H80_REG ((sbb_param_h80_reg_t*) SBB_PARAM_H80_ADR)
#define SBB_PARAM_L80_REG ((sbb_param_l80_reg_t*) SBB_PARAM_L80_ADR)
#define SBB_PARAM_H81_REG ((sbb_param_h81_reg_t*) SBB_PARAM_H81_ADR)
#define SBB_PARAM_L81_REG ((sbb_param_l81_reg_t*) SBB_PARAM_L81_ADR)
#define SBB_PARAM_H82_REG ((sbb_param_h82_reg_t*) SBB_PARAM_H82_ADR)
#define SBB_PARAM_L82_REG ((sbb_param_l82_reg_t*) SBB_PARAM_L82_ADR)
#define SBB_PARAM_H83_REG ((sbb_param_h83_reg_t*) SBB_PARAM_H83_ADR)
#define SBB_PARAM_L83_REG ((sbb_param_l83_reg_t*) SBB_PARAM_L83_ADR)
#define SBB_PARAM_H84_REG ((sbb_param_h84_reg_t*) SBB_PARAM_H84_ADR)
#define SBB_PARAM_L84_REG ((sbb_param_l84_reg_t*) SBB_PARAM_L84_ADR)
#define SBB_PARAM_H85_REG ((sbb_param_h85_reg_t*) SBB_PARAM_H85_ADR)
#define SBB_PARAM_L85_REG ((sbb_param_l85_reg_t*) SBB_PARAM_L85_ADR)
#define SBB_PARAM_H86_REG ((sbb_param_h86_reg_t*) SBB_PARAM_H86_ADR)
#define SBB_PARAM_L86_REG ((sbb_param_l86_reg_t*) SBB_PARAM_L86_ADR)
#define SBB_PARAM_H87_REG ((sbb_param_h87_reg_t*) SBB_PARAM_H87_ADR)
#define SBB_PARAM_L87_REG ((sbb_param_l87_reg_t*) SBB_PARAM_L87_ADR)
#define SBB_PARAM_H88_REG ((sbb_param_h88_reg_t*) SBB_PARAM_H88_ADR)
#define SBB_PARAM_L88_REG ((sbb_param_l88_reg_t*) SBB_PARAM_L88_ADR)
#define SBB_PARAM_H89_REG ((sbb_param_h89_reg_t*) SBB_PARAM_H89_ADR)
#define SBB_PARAM_L89_REG ((sbb_param_l89_reg_t*) SBB_PARAM_L89_ADR)
#define SBB_PARAM_H90_REG ((sbb_param_h90_reg_t*) SBB_PARAM_H90_ADR)
#define SBB_PARAM_L90_REG ((sbb_param_l90_reg_t*) SBB_PARAM_L90_ADR)
#define SBB_PARAM_H91_REG ((sbb_param_h91_reg_t*) SBB_PARAM_H91_ADR)
#define SBB_PARAM_L91_REG ((sbb_param_l91_reg_t*) SBB_PARAM_L91_ADR)
#define SBB_PARAM_H92_REG ((sbb_param_h92_reg_t*) SBB_PARAM_H92_ADR)
#define SBB_PARAM_L92_REG ((sbb_param_l92_reg_t*) SBB_PARAM_L92_ADR)
#define SBB_PARAM_H93_REG ((sbb_param_h93_reg_t*) SBB_PARAM_H93_ADR)
#define SBB_PARAM_L93_REG ((sbb_param_l93_reg_t*) SBB_PARAM_L93_ADR)
#define SBB_PARAM_H94_REG ((sbb_param_h94_reg_t*) SBB_PARAM_H94_ADR)
#define SBB_PARAM_L94_REG ((sbb_param_l94_reg_t*) SBB_PARAM_L94_ADR)
#define SBB_PARAM_H95_REG ((sbb_param_h95_reg_t*) SBB_PARAM_H95_ADR)
#define SBB_PARAM_L95_REG ((sbb_param_l95_reg_t*) SBB_PARAM_L95_ADR)
#define SBB_PARAM_H96_REG ((sbb_param_h96_reg_t*) SBB_PARAM_H96_ADR)
#define SBB_PARAM_L96_REG ((sbb_param_l96_reg_t*) SBB_PARAM_L96_ADR)
#define SBB_PARAM_H97_REG ((sbb_param_h97_reg_t*) SBB_PARAM_H97_ADR)
#define SBB_PARAM_L97_REG ((sbb_param_l97_reg_t*) SBB_PARAM_L97_ADR)
#define SBB_PARAM_H98_REG ((sbb_param_h98_reg_t*) SBB_PARAM_H98_ADR)
#define SBB_PARAM_L98_REG ((sbb_param_l98_reg_t*) SBB_PARAM_L98_ADR)
#define SBB_PARAM_H99_REG ((sbb_param_h99_reg_t*) SBB_PARAM_H99_ADR)
#define SBB_PARAM_L99_REG ((sbb_param_l99_reg_t*) SBB_PARAM_L99_ADR)
#define SBB_PARAM_H100_REG ((sbb_param_h100_reg_t*) SBB_PARAM_H100_ADR)
#define SBB_PARAM_L100_REG ((sbb_param_l100_reg_t*) SBB_PARAM_L100_ADR)
#define SBB_PARAM_H101_REG ((sbb_param_h101_reg_t*) SBB_PARAM_H101_ADR)
#define SBB_PARAM_L101_REG ((sbb_param_l101_reg_t*) SBB_PARAM_L101_ADR)
#define SBB_PARAM_H102_REG ((sbb_param_h102_reg_t*) SBB_PARAM_H102_ADR)
#define SBB_PARAM_L102_REG ((sbb_param_l102_reg_t*) SBB_PARAM_L102_ADR)
#define SBB_PARAM_H103_REG ((sbb_param_h103_reg_t*) SBB_PARAM_H103_ADR)
#define SBB_PARAM_L103_REG ((sbb_param_l103_reg_t*) SBB_PARAM_L103_ADR)
#define SBB_PARAM_H104_REG ((sbb_param_h104_reg_t*) SBB_PARAM_H104_ADR)
#define SBB_PARAM_L104_REG ((sbb_param_l104_reg_t*) SBB_PARAM_L104_ADR)
#define SBB_PARAM_H105_REG ((sbb_param_h105_reg_t*) SBB_PARAM_H105_ADR)
#define SBB_PARAM_L105_REG ((sbb_param_l105_reg_t*) SBB_PARAM_L105_ADR)
#define SBB_PARAM_H106_REG ((sbb_param_h106_reg_t*) SBB_PARAM_H106_ADR)
#define SBB_PARAM_L106_REG ((sbb_param_l106_reg_t*) SBB_PARAM_L106_ADR)
#define SBB_PARAM_H107_REG ((sbb_param_h107_reg_t*) SBB_PARAM_H107_ADR)
#define SBB_PARAM_L107_REG ((sbb_param_l107_reg_t*) SBB_PARAM_L107_ADR)
#define SBB_PARAM_H108_REG ((sbb_param_h108_reg_t*) SBB_PARAM_H108_ADR)
#define SBB_PARAM_L108_REG ((sbb_param_l108_reg_t*) SBB_PARAM_L108_ADR)
#define SBB_PARAM_H109_REG ((sbb_param_h109_reg_t*) SBB_PARAM_H109_ADR)
#define SBB_PARAM_L109_REG ((sbb_param_l109_reg_t*) SBB_PARAM_L109_ADR)
#define SBB_PARAM_H110_REG ((sbb_param_h110_reg_t*) SBB_PARAM_H110_ADR)
#define SBB_PARAM_L110_REG ((sbb_param_l110_reg_t*) SBB_PARAM_L110_ADR)
#define SBB_PARAM_H111_REG ((sbb_param_h111_reg_t*) SBB_PARAM_H111_ADR)
#define SBB_PARAM_L111_REG ((sbb_param_l111_reg_t*) SBB_PARAM_L111_ADR)
#define SBB_PARAM_H112_REG ((sbb_param_h112_reg_t*) SBB_PARAM_H112_ADR)
#define SBB_PARAM_L112_REG ((sbb_param_l112_reg_t*) SBB_PARAM_L112_ADR)
#define SBB_PARAM_H113_REG ((sbb_param_h113_reg_t*) SBB_PARAM_H113_ADR)
#define SBB_PARAM_L113_REG ((sbb_param_l113_reg_t*) SBB_PARAM_L113_ADR)
#define SBB_PARAM_H114_REG ((sbb_param_h114_reg_t*) SBB_PARAM_H114_ADR)
#define SBB_PARAM_L114_REG ((sbb_param_l114_reg_t*) SBB_PARAM_L114_ADR)
#define SBB_PARAM_H115_REG ((sbb_param_h115_reg_t*) SBB_PARAM_H115_ADR)
#define SBB_PARAM_L115_REG ((sbb_param_l115_reg_t*) SBB_PARAM_L115_ADR)
#define SBB_PARAM_H116_REG ((sbb_param_h116_reg_t*) SBB_PARAM_H116_ADR)
#define SBB_PARAM_L116_REG ((sbb_param_l116_reg_t*) SBB_PARAM_L116_ADR)
#define SBB_PARAM_H117_REG ((sbb_param_h117_reg_t*) SBB_PARAM_H117_ADR)
#define SBB_PARAM_L117_REG ((sbb_param_l117_reg_t*) SBB_PARAM_L117_ADR)
#define SBB_PARAM_H118_REG ((sbb_param_h118_reg_t*) SBB_PARAM_H118_ADR)
#define SBB_PARAM_L118_REG ((sbb_param_l118_reg_t*) SBB_PARAM_L118_ADR)
#define SBB_PARAM_H119_REG ((sbb_param_h119_reg_t*) SBB_PARAM_H119_ADR)
#define SBB_PARAM_L119_REG ((sbb_param_l119_reg_t*) SBB_PARAM_L119_ADR)
#define SBB_PARAM_H120_REG ((sbb_param_h120_reg_t*) SBB_PARAM_H120_ADR)
#define SBB_PARAM_L120_REG ((sbb_param_l120_reg_t*) SBB_PARAM_L120_ADR)
#define SBB_PARAM_H121_REG ((sbb_param_h121_reg_t*) SBB_PARAM_H121_ADR)
#define SBB_PARAM_L121_REG ((sbb_param_l121_reg_t*) SBB_PARAM_L121_ADR)
#define SBB_PARAM_H122_REG ((sbb_param_h122_reg_t*) SBB_PARAM_H122_ADR)
#define SBB_PARAM_L122_REG ((sbb_param_l122_reg_t*) SBB_PARAM_L122_ADR)
#define SBB_PARAM_H123_REG ((sbb_param_h123_reg_t*) SBB_PARAM_H123_ADR)
#define SBB_PARAM_L123_REG ((sbb_param_l123_reg_t*) SBB_PARAM_L123_ADR)
#define SBB_PARAM_H124_REG ((sbb_param_h124_reg_t*) SBB_PARAM_H124_ADR)
#define SBB_PARAM_L124_REG ((sbb_param_l124_reg_t*) SBB_PARAM_L124_ADR)
#define SBB_PARAM_H125_REG ((sbb_param_h125_reg_t*) SBB_PARAM_H125_ADR)
#define SBB_PARAM_L125_REG ((sbb_param_l125_reg_t*) SBB_PARAM_L125_ADR)
#define SBB_PARAM_H126_REG ((sbb_param_h126_reg_t*) SBB_PARAM_H126_ADR)
#define SBB_PARAM_L126_REG ((sbb_param_l126_reg_t*) SBB_PARAM_L126_ADR)
#define SBB_PARAM_H127_REG ((sbb_param_h127_reg_t*) SBB_PARAM_H127_ADR)
#define SBB_PARAM_L127_REG ((sbb_param_l127_reg_t*) SBB_PARAM_L127_ADR)
#define SBB_PARAM_H128_REG ((sbb_param_h128_reg_t*) SBB_PARAM_H128_ADR)
#define SBB_PARAM_L128_REG ((sbb_param_l128_reg_t*) SBB_PARAM_L128_ADR)
#define SBB_PARAM_H129_REG ((sbb_param_h129_reg_t*) SBB_PARAM_H129_ADR)
#define SBB_PARAM_L129_REG ((sbb_param_l129_reg_t*) SBB_PARAM_L129_ADR)
#define SBB_PARAM_H130_REG ((sbb_param_h130_reg_t*) SBB_PARAM_H130_ADR)
#define SBB_PARAM_L130_REG ((sbb_param_l130_reg_t*) SBB_PARAM_L130_ADR)
#define SBB_PARAM_H131_REG ((sbb_param_h131_reg_t*) SBB_PARAM_H131_ADR)
#define SBB_PARAM_L131_REG ((sbb_param_l131_reg_t*) SBB_PARAM_L131_ADR)
#define SBB_PARAM_H132_REG ((sbb_param_h132_reg_t*) SBB_PARAM_H132_ADR)
#define SBB_PARAM_L132_REG ((sbb_param_l132_reg_t*) SBB_PARAM_L132_ADR)
#define SBB_PARAM_H133_REG ((sbb_param_h133_reg_t*) SBB_PARAM_H133_ADR)
#define SBB_PARAM_L133_REG ((sbb_param_l133_reg_t*) SBB_PARAM_L133_ADR)
#define SBB_PARAM_H134_REG ((sbb_param_h134_reg_t*) SBB_PARAM_H134_ADR)
#define SBB_PARAM_L134_REG ((sbb_param_l134_reg_t*) SBB_PARAM_L134_ADR)
#define SBB_PARAM_H135_REG ((sbb_param_h135_reg_t*) SBB_PARAM_H135_ADR)
#define SBB_PARAM_L135_REG ((sbb_param_l135_reg_t*) SBB_PARAM_L135_ADR)
#define SBB_PARAM_H136_REG ((sbb_param_h136_reg_t*) SBB_PARAM_H136_ADR)
#define SBB_PARAM_L136_REG ((sbb_param_l136_reg_t*) SBB_PARAM_L136_ADR)
#define SBB_PARAM_H137_REG ((sbb_param_h137_reg_t*) SBB_PARAM_H137_ADR)
#define SBB_PARAM_L137_REG ((sbb_param_l137_reg_t*) SBB_PARAM_L137_ADR)
#define SBB_PARAM_H138_REG ((sbb_param_h138_reg_t*) SBB_PARAM_H138_ADR)
#define SBB_PARAM_L138_REG ((sbb_param_l138_reg_t*) SBB_PARAM_L138_ADR)
#define SBB_PARAM_H139_REG ((sbb_param_h139_reg_t*) SBB_PARAM_H139_ADR)
#define SBB_PARAM_L139_REG ((sbb_param_l139_reg_t*) SBB_PARAM_L139_ADR)
#define SBB_PARAM_H140_REG ((sbb_param_h140_reg_t*) SBB_PARAM_H140_ADR)
#define SBB_PARAM_L140_REG ((sbb_param_l140_reg_t*) SBB_PARAM_L140_ADR)
#define SBB_PARAM_H141_REG ((sbb_param_h141_reg_t*) SBB_PARAM_H141_ADR)
#define SBB_PARAM_L141_REG ((sbb_param_l141_reg_t*) SBB_PARAM_L141_ADR)
#define SBB_PARAM_H142_REG ((sbb_param_h142_reg_t*) SBB_PARAM_H142_ADR)
#define SBB_PARAM_L142_REG ((sbb_param_l142_reg_t*) SBB_PARAM_L142_ADR)
#define SBB_PARAM_H143_REG ((sbb_param_h143_reg_t*) SBB_PARAM_H143_ADR)
#define SBB_PARAM_L143_REG ((sbb_param_l143_reg_t*) SBB_PARAM_L143_ADR)
#define SBB_PARAM_H144_REG ((sbb_param_h144_reg_t*) SBB_PARAM_H144_ADR)
#define SBB_PARAM_L144_REG ((sbb_param_l144_reg_t*) SBB_PARAM_L144_ADR)
#define SBB_PARAM_H145_REG ((sbb_param_h145_reg_t*) SBB_PARAM_H145_ADR)
#define SBB_PARAM_L145_REG ((sbb_param_l145_reg_t*) SBB_PARAM_L145_ADR)
#define SBB_PARAM_H146_REG ((sbb_param_h146_reg_t*) SBB_PARAM_H146_ADR)
#define SBB_PARAM_L146_REG ((sbb_param_l146_reg_t*) SBB_PARAM_L146_ADR)
#define SBB_PARAM_H147_REG ((sbb_param_h147_reg_t*) SBB_PARAM_H147_ADR)
#define SBB_PARAM_L147_REG ((sbb_param_l147_reg_t*) SBB_PARAM_L147_ADR)
#define SBB_PARAM_H148_REG ((sbb_param_h148_reg_t*) SBB_PARAM_H148_ADR)
#define SBB_PARAM_L148_REG ((sbb_param_l148_reg_t*) SBB_PARAM_L148_ADR)
#define SBB_PARAM_H149_REG ((sbb_param_h149_reg_t*) SBB_PARAM_H149_ADR)
#define SBB_PARAM_L149_REG ((sbb_param_l149_reg_t*) SBB_PARAM_L149_ADR)
#define SBB_PARAM_H150_REG ((sbb_param_h150_reg_t*) SBB_PARAM_H150_ADR)
#define SBB_PARAM_L150_REG ((sbb_param_l150_reg_t*) SBB_PARAM_L150_ADR)
#define SBB_PARAM_H151_REG ((sbb_param_h151_reg_t*) SBB_PARAM_H151_ADR)
#define SBB_PARAM_L151_REG ((sbb_param_l151_reg_t*) SBB_PARAM_L151_ADR)
#define SBB_PARAM_H152_REG ((sbb_param_h152_reg_t*) SBB_PARAM_H152_ADR)
#define SBB_PARAM_L152_REG ((sbb_param_l152_reg_t*) SBB_PARAM_L152_ADR)
#define SBB_PARAM_H153_REG ((sbb_param_h153_reg_t*) SBB_PARAM_H153_ADR)
#define SBB_PARAM_L153_REG ((sbb_param_l153_reg_t*) SBB_PARAM_L153_ADR)
#define SBB_PARAM_H154_REG ((sbb_param_h154_reg_t*) SBB_PARAM_H154_ADR)
#define SBB_PARAM_L154_REG ((sbb_param_l154_reg_t*) SBB_PARAM_L154_ADR)
#define SBB_PARAM_H155_REG ((sbb_param_h155_reg_t*) SBB_PARAM_H155_ADR)
#define SBB_PARAM_L155_REG ((sbb_param_l155_reg_t*) SBB_PARAM_L155_ADR)
#define SBB_PARAM_H156_REG ((sbb_param_h156_reg_t*) SBB_PARAM_H156_ADR)
#define SBB_PARAM_L156_REG ((sbb_param_l156_reg_t*) SBB_PARAM_L156_ADR)
#define SBB_PARAM_H157_REG ((sbb_param_h157_reg_t*) SBB_PARAM_H157_ADR)
#define SBB_PARAM_L157_REG ((sbb_param_l157_reg_t*) SBB_PARAM_L157_ADR)
#define SBB_PARAM_H158_REG ((sbb_param_h158_reg_t*) SBB_PARAM_H158_ADR)
#define SBB_PARAM_L158_REG ((sbb_param_l158_reg_t*) SBB_PARAM_L158_ADR)
#define SBB_PARAM_H159_REG ((sbb_param_h159_reg_t*) SBB_PARAM_H159_ADR)
#define SBB_PARAM_L159_REG ((sbb_param_l159_reg_t*) SBB_PARAM_L159_ADR)
#define SBB_PARAM_H160_REG ((sbb_param_h160_reg_t*) SBB_PARAM_H160_ADR)
#define SBB_PARAM_L160_REG ((sbb_param_l160_reg_t*) SBB_PARAM_L160_ADR)
#define SBB_PARAM_H161_REG ((sbb_param_h161_reg_t*) SBB_PARAM_H161_ADR)
#define SBB_PARAM_L161_REG ((sbb_param_l161_reg_t*) SBB_PARAM_L161_ADR)
#define SBB_PARAM_H162_REG ((sbb_param_h162_reg_t*) SBB_PARAM_H162_ADR)
#define SBB_PARAM_L162_REG ((sbb_param_l162_reg_t*) SBB_PARAM_L162_ADR)
#define SBB_PARAM_H163_REG ((sbb_param_h163_reg_t*) SBB_PARAM_H163_ADR)
#define SBB_PARAM_L163_REG ((sbb_param_l163_reg_t*) SBB_PARAM_L163_ADR)
#define SBB_PARAM_H164_REG ((sbb_param_h164_reg_t*) SBB_PARAM_H164_ADR)
#define SBB_PARAM_L164_REG ((sbb_param_l164_reg_t*) SBB_PARAM_L164_ADR)
#define SBB_PARAM_H165_REG ((sbb_param_h165_reg_t*) SBB_PARAM_H165_ADR)
#define SBB_PARAM_L165_REG ((sbb_param_l165_reg_t*) SBB_PARAM_L165_ADR)
#define SBB_PARAM_H166_REG ((sbb_param_h166_reg_t*) SBB_PARAM_H166_ADR)
#define SBB_PARAM_L166_REG ((sbb_param_l166_reg_t*) SBB_PARAM_L166_ADR)
#define SBB_PARAM_H167_REG ((sbb_param_h167_reg_t*) SBB_PARAM_H167_ADR)
#define SBB_PARAM_L167_REG ((sbb_param_l167_reg_t*) SBB_PARAM_L167_ADR)
#define SBB_PARAM_H168_REG ((sbb_param_h168_reg_t*) SBB_PARAM_H168_ADR)
#define SBB_PARAM_L168_REG ((sbb_param_l168_reg_t*) SBB_PARAM_L168_ADR)
#define SBB_PARAM_H169_REG ((sbb_param_h169_reg_t*) SBB_PARAM_H169_ADR)
#define SBB_PARAM_L169_REG ((sbb_param_l169_reg_t*) SBB_PARAM_L169_ADR)
#define SBB_PARAM_H170_REG ((sbb_param_h170_reg_t*) SBB_PARAM_H170_ADR)
#define SBB_PARAM_L170_REG ((sbb_param_l170_reg_t*) SBB_PARAM_L170_ADR)
#define SBB_PARAM_H171_REG ((sbb_param_h171_reg_t*) SBB_PARAM_H171_ADR)
#define SBB_PARAM_L171_REG ((sbb_param_l171_reg_t*) SBB_PARAM_L171_ADR)
#define SBB_PARAM_H172_REG ((sbb_param_h172_reg_t*) SBB_PARAM_H172_ADR)
#define SBB_PARAM_L172_REG ((sbb_param_l172_reg_t*) SBB_PARAM_L172_ADR)
#define SBB_PARAM_H173_REG ((sbb_param_h173_reg_t*) SBB_PARAM_H173_ADR)
#define SBB_PARAM_L173_REG ((sbb_param_l173_reg_t*) SBB_PARAM_L173_ADR)
#define SBB_PARAM_H174_REG ((sbb_param_h174_reg_t*) SBB_PARAM_H174_ADR)
#define SBB_PARAM_L174_REG ((sbb_param_l174_reg_t*) SBB_PARAM_L174_ADR)
#define SBB_PARAM_H175_REG ((sbb_param_h175_reg_t*) SBB_PARAM_H175_ADR)
#define SBB_PARAM_L175_REG ((sbb_param_l175_reg_t*) SBB_PARAM_L175_ADR)
#define SBB_PARAM_H176_REG ((sbb_param_h176_reg_t*) SBB_PARAM_H176_ADR)
#define SBB_PARAM_L176_REG ((sbb_param_l176_reg_t*) SBB_PARAM_L176_ADR)
#define SBB_PARAM_H177_REG ((sbb_param_h177_reg_t*) SBB_PARAM_H177_ADR)
#define SBB_PARAM_L177_REG ((sbb_param_l177_reg_t*) SBB_PARAM_L177_ADR)
#define SBB_PARAM_H178_REG ((sbb_param_h178_reg_t*) SBB_PARAM_H178_ADR)
#define SBB_PARAM_L178_REG ((sbb_param_l178_reg_t*) SBB_PARAM_L178_ADR)
#define SBB_PARAM_H179_REG ((sbb_param_h179_reg_t*) SBB_PARAM_H179_ADR)
#define SBB_PARAM_L179_REG ((sbb_param_l179_reg_t*) SBB_PARAM_L179_ADR)
#define SBB_PARAM_H180_REG ((sbb_param_h180_reg_t*) SBB_PARAM_H180_ADR)
#define SBB_PARAM_L180_REG ((sbb_param_l180_reg_t*) SBB_PARAM_L180_ADR)
#define SBB_PARAM_H181_REG ((sbb_param_h181_reg_t*) SBB_PARAM_H181_ADR)
#define SBB_PARAM_L181_REG ((sbb_param_l181_reg_t*) SBB_PARAM_L181_ADR)
#define SBB_PARAM_H182_REG ((sbb_param_h182_reg_t*) SBB_PARAM_H182_ADR)
#define SBB_PARAM_L182_REG ((sbb_param_l182_reg_t*) SBB_PARAM_L182_ADR)
#define SBB_PARAM_H183_REG ((sbb_param_h183_reg_t*) SBB_PARAM_H183_ADR)
#define SBB_PARAM_L183_REG ((sbb_param_l183_reg_t*) SBB_PARAM_L183_ADR)
#define SBB_PARAM_H184_REG ((sbb_param_h184_reg_t*) SBB_PARAM_H184_ADR)
#define SBB_PARAM_L184_REG ((sbb_param_l184_reg_t*) SBB_PARAM_L184_ADR)
#define SBB_PARAM_H185_REG ((sbb_param_h185_reg_t*) SBB_PARAM_H185_ADR)
#define SBB_PARAM_L185_REG ((sbb_param_l185_reg_t*) SBB_PARAM_L185_ADR)
#define SBB_PARAM_H186_REG ((sbb_param_h186_reg_t*) SBB_PARAM_H186_ADR)
#define SBB_PARAM_L186_REG ((sbb_param_l186_reg_t*) SBB_PARAM_L186_ADR)
#define SBB_PARAM_H187_REG ((sbb_param_h187_reg_t*) SBB_PARAM_H187_ADR)
#define SBB_PARAM_L187_REG ((sbb_param_l187_reg_t*) SBB_PARAM_L187_ADR)
#define SBB_PARAM_H188_REG ((sbb_param_h188_reg_t*) SBB_PARAM_H188_ADR)
#define SBB_PARAM_L188_REG ((sbb_param_l188_reg_t*) SBB_PARAM_L188_ADR)
#define SBB_PARAM_H189_REG ((sbb_param_h189_reg_t*) SBB_PARAM_H189_ADR)
#define SBB_PARAM_L189_REG ((sbb_param_l189_reg_t*) SBB_PARAM_L189_ADR)
#define SBB_PARAM_H190_REG ((sbb_param_h190_reg_t*) SBB_PARAM_H190_ADR)
#define SBB_PARAM_L190_REG ((sbb_param_l190_reg_t*) SBB_PARAM_L190_ADR)
#define SBB_PARAM_H191_REG ((sbb_param_h191_reg_t*) SBB_PARAM_H191_ADR)
#define SBB_PARAM_L191_REG ((sbb_param_l191_reg_t*) SBB_PARAM_L191_ADR)
#define SBB_PARAM_H192_REG ((sbb_param_h192_reg_t*) SBB_PARAM_H192_ADR)
#define SBB_PARAM_L192_REG ((sbb_param_l192_reg_t*) SBB_PARAM_L192_ADR)
#define SBB_PARAM_H193_REG ((sbb_param_h193_reg_t*) SBB_PARAM_H193_ADR)
#define SBB_PARAM_L193_REG ((sbb_param_l193_reg_t*) SBB_PARAM_L193_ADR)
#define SBB_PARAM_H194_REG ((sbb_param_h194_reg_t*) SBB_PARAM_H194_ADR)
#define SBB_PARAM_L194_REG ((sbb_param_l194_reg_t*) SBB_PARAM_L194_ADR)
#define SBB_PARAM_H195_REG ((sbb_param_h195_reg_t*) SBB_PARAM_H195_ADR)
#define SBB_PARAM_L195_REG ((sbb_param_l195_reg_t*) SBB_PARAM_L195_ADR)
#define SBB_PARAM_H196_REG ((sbb_param_h196_reg_t*) SBB_PARAM_H196_ADR)
#define SBB_PARAM_L196_REG ((sbb_param_l196_reg_t*) SBB_PARAM_L196_ADR)
#define SBB_PARAM_H197_REG ((sbb_param_h197_reg_t*) SBB_PARAM_H197_ADR)
#define SBB_PARAM_L197_REG ((sbb_param_l197_reg_t*) SBB_PARAM_L197_ADR)
#define SBB_PARAM_H198_REG ((sbb_param_h198_reg_t*) SBB_PARAM_H198_ADR)
#define SBB_PARAM_L198_REG ((sbb_param_l198_reg_t*) SBB_PARAM_L198_ADR)
#define SBB_PARAM_H199_REG ((sbb_param_h199_reg_t*) SBB_PARAM_H199_ADR)
#define SBB_PARAM_L199_REG ((sbb_param_l199_reg_t*) SBB_PARAM_L199_ADR)
#define SBB_PARAM_H200_REG ((sbb_param_h200_reg_t*) SBB_PARAM_H200_ADR)
#define SBB_PARAM_L200_REG ((sbb_param_l200_reg_t*) SBB_PARAM_L200_ADR)
#define SBB_PARAM_H201_REG ((sbb_param_h201_reg_t*) SBB_PARAM_H201_ADR)
#define SBB_PARAM_L201_REG ((sbb_param_l201_reg_t*) SBB_PARAM_L201_ADR)
#define SBB_PARAM_H202_REG ((sbb_param_h202_reg_t*) SBB_PARAM_H202_ADR)
#define SBB_PARAM_L202_REG ((sbb_param_l202_reg_t*) SBB_PARAM_L202_ADR)
#define SBB_PARAM_H203_REG ((sbb_param_h203_reg_t*) SBB_PARAM_H203_ADR)
#define SBB_PARAM_L203_REG ((sbb_param_l203_reg_t*) SBB_PARAM_L203_ADR)
#define SBB_PARAM_H204_REG ((sbb_param_h204_reg_t*) SBB_PARAM_H204_ADR)
#define SBB_PARAM_L204_REG ((sbb_param_l204_reg_t*) SBB_PARAM_L204_ADR)
#define SBB_PARAM_H205_REG ((sbb_param_h205_reg_t*) SBB_PARAM_H205_ADR)
#define SBB_PARAM_L205_REG ((sbb_param_l205_reg_t*) SBB_PARAM_L205_ADR)
#define SBB_PARAM_H206_REG ((sbb_param_h206_reg_t*) SBB_PARAM_H206_ADR)
#define SBB_PARAM_L206_REG ((sbb_param_l206_reg_t*) SBB_PARAM_L206_ADR)
#define SBB_PARAM_H207_REG ((sbb_param_h207_reg_t*) SBB_PARAM_H207_ADR)
#define SBB_PARAM_L207_REG ((sbb_param_l207_reg_t*) SBB_PARAM_L207_ADR)
#define SBB_PARAM_H208_REG ((sbb_param_h208_reg_t*) SBB_PARAM_H208_ADR)
#define SBB_PARAM_L208_REG ((sbb_param_l208_reg_t*) SBB_PARAM_L208_ADR)
#define SBB_PARAM_H209_REG ((sbb_param_h209_reg_t*) SBB_PARAM_H209_ADR)
#define SBB_PARAM_L209_REG ((sbb_param_l209_reg_t*) SBB_PARAM_L209_ADR)
#define SBB_PARAM_H210_REG ((sbb_param_h210_reg_t*) SBB_PARAM_H210_ADR)
#define SBB_PARAM_L210_REG ((sbb_param_l210_reg_t*) SBB_PARAM_L210_ADR)
#define SBB_PARAM_H211_REG ((sbb_param_h211_reg_t*) SBB_PARAM_H211_ADR)
#define SBB_PARAM_L211_REG ((sbb_param_l211_reg_t*) SBB_PARAM_L211_ADR)
#define SBB_PARAM_H212_REG ((sbb_param_h212_reg_t*) SBB_PARAM_H212_ADR)
#define SBB_PARAM_L212_REG ((sbb_param_l212_reg_t*) SBB_PARAM_L212_ADR)
#define SBB_PARAM_H213_REG ((sbb_param_h213_reg_t*) SBB_PARAM_H213_ADR)
#define SBB_PARAM_L213_REG ((sbb_param_l213_reg_t*) SBB_PARAM_L213_ADR)
#define SBB_PARAM_H214_REG ((sbb_param_h214_reg_t*) SBB_PARAM_H214_ADR)
#define SBB_PARAM_L214_REG ((sbb_param_l214_reg_t*) SBB_PARAM_L214_ADR)
#define SBB_PARAM_H215_REG ((sbb_param_h215_reg_t*) SBB_PARAM_H215_ADR)
#define SBB_PARAM_L215_REG ((sbb_param_l215_reg_t*) SBB_PARAM_L215_ADR)
#define SBB_PARAM_H216_REG ((sbb_param_h216_reg_t*) SBB_PARAM_H216_ADR)
#define SBB_PARAM_L216_REG ((sbb_param_l216_reg_t*) SBB_PARAM_L216_ADR)
#define SBB_PARAM_H217_REG ((sbb_param_h217_reg_t*) SBB_PARAM_H217_ADR)
#define SBB_PARAM_L217_REG ((sbb_param_l217_reg_t*) SBB_PARAM_L217_ADR)
#define SBB_PARAM_H218_REG ((sbb_param_h218_reg_t*) SBB_PARAM_H218_ADR)
#define SBB_PARAM_L218_REG ((sbb_param_l218_reg_t*) SBB_PARAM_L218_ADR)
#define SBB_PARAM_H219_REG ((sbb_param_h219_reg_t*) SBB_PARAM_H219_ADR)
#define SBB_PARAM_L219_REG ((sbb_param_l219_reg_t*) SBB_PARAM_L219_ADR)
#define SBB_PARAM_H220_REG ((sbb_param_h220_reg_t*) SBB_PARAM_H220_ADR)
#define SBB_PARAM_L220_REG ((sbb_param_l220_reg_t*) SBB_PARAM_L220_ADR)
#define SBB_PARAM_H221_REG ((sbb_param_h221_reg_t*) SBB_PARAM_H221_ADR)
#define SBB_PARAM_L221_REG ((sbb_param_l221_reg_t*) SBB_PARAM_L221_ADR)
#define SBB_PARAM_H222_REG ((sbb_param_h222_reg_t*) SBB_PARAM_H222_ADR)
#define SBB_PARAM_L222_REG ((sbb_param_l222_reg_t*) SBB_PARAM_L222_ADR)
#define SBB_PARAM_H223_REG ((sbb_param_h223_reg_t*) SBB_PARAM_H223_ADR)
#define SBB_PARAM_L223_REG ((sbb_param_l223_reg_t*) SBB_PARAM_L223_ADR)
#define SBB_PARAM_H224_REG ((sbb_param_h224_reg_t*) SBB_PARAM_H224_ADR)
#define SBB_PARAM_L224_REG ((sbb_param_l224_reg_t*) SBB_PARAM_L224_ADR)
#define SBB_PARAM_H225_REG ((sbb_param_h225_reg_t*) SBB_PARAM_H225_ADR)
#define SBB_PARAM_L225_REG ((sbb_param_l225_reg_t*) SBB_PARAM_L225_ADR)
#define SBB_PARAM_H226_REG ((sbb_param_h226_reg_t*) SBB_PARAM_H226_ADR)
#define SBB_PARAM_L226_REG ((sbb_param_l226_reg_t*) SBB_PARAM_L226_ADR)
#define SBB_PARAM_H227_REG ((sbb_param_h227_reg_t*) SBB_PARAM_H227_ADR)
#define SBB_PARAM_L227_REG ((sbb_param_l227_reg_t*) SBB_PARAM_L227_ADR)
#define SBB_PARAM_H228_REG ((sbb_param_h228_reg_t*) SBB_PARAM_H228_ADR)
#define SBB_PARAM_L228_REG ((sbb_param_l228_reg_t*) SBB_PARAM_L228_ADR)
#define SBB_PARAM_H229_REG ((sbb_param_h229_reg_t*) SBB_PARAM_H229_ADR)
#define SBB_PARAM_L229_REG ((sbb_param_l229_reg_t*) SBB_PARAM_L229_ADR)
#define SBB_PARAM_H230_REG ((sbb_param_h230_reg_t*) SBB_PARAM_H230_ADR)
#define SBB_PARAM_L230_REG ((sbb_param_l230_reg_t*) SBB_PARAM_L230_ADR)
#define SBB_PARAM_H231_REG ((sbb_param_h231_reg_t*) SBB_PARAM_H231_ADR)
#define SBB_PARAM_L231_REG ((sbb_param_l231_reg_t*) SBB_PARAM_L231_ADR)
#define SBB_PARAM_H232_REG ((sbb_param_h232_reg_t*) SBB_PARAM_H232_ADR)
#define SBB_PARAM_L232_REG ((sbb_param_l232_reg_t*) SBB_PARAM_L232_ADR)
#define SBB_PARAM_H233_REG ((sbb_param_h233_reg_t*) SBB_PARAM_H233_ADR)
#define SBB_PARAM_L233_REG ((sbb_param_l233_reg_t*) SBB_PARAM_L233_ADR)
#define SBB_PARAM_H234_REG ((sbb_param_h234_reg_t*) SBB_PARAM_H234_ADR)
#define SBB_PARAM_L234_REG ((sbb_param_l234_reg_t*) SBB_PARAM_L234_ADR)
#define SBB_PARAM_H235_REG ((sbb_param_h235_reg_t*) SBB_PARAM_H235_ADR)
#define SBB_PARAM_L235_REG ((sbb_param_l235_reg_t*) SBB_PARAM_L235_ADR)
#define SBB_PARAM_H236_REG ((sbb_param_h236_reg_t*) SBB_PARAM_H236_ADR)
#define SBB_PARAM_L236_REG ((sbb_param_l236_reg_t*) SBB_PARAM_L236_ADR)
#define SBB_PARAM_H237_REG ((sbb_param_h237_reg_t*) SBB_PARAM_H237_ADR)
#define SBB_PARAM_L237_REG ((sbb_param_l237_reg_t*) SBB_PARAM_L237_ADR)
#define SBB_PARAM_H238_REG ((sbb_param_h238_reg_t*) SBB_PARAM_H238_ADR)
#define SBB_PARAM_L238_REG ((sbb_param_l238_reg_t*) SBB_PARAM_L238_ADR)
#define SBB_PARAM_H239_REG ((sbb_param_h239_reg_t*) SBB_PARAM_H239_ADR)
#define SBB_PARAM_L239_REG ((sbb_param_l239_reg_t*) SBB_PARAM_L239_ADR)
#define SBB_PARAM_H240_REG ((sbb_param_h240_reg_t*) SBB_PARAM_H240_ADR)
#define SBB_PARAM_L240_REG ((sbb_param_l240_reg_t*) SBB_PARAM_L240_ADR)
#define SBB_PARAM_H241_REG ((sbb_param_h241_reg_t*) SBB_PARAM_H241_ADR)
#define SBB_PARAM_L241_REG ((sbb_param_l241_reg_t*) SBB_PARAM_L241_ADR)
#define SBB_PARAM_H242_REG ((sbb_param_h242_reg_t*) SBB_PARAM_H242_ADR)
#define SBB_PARAM_L242_REG ((sbb_param_l242_reg_t*) SBB_PARAM_L242_ADR)
#define SBB_PARAM_H243_REG ((sbb_param_h243_reg_t*) SBB_PARAM_H243_ADR)
#define SBB_PARAM_L243_REG ((sbb_param_l243_reg_t*) SBB_PARAM_L243_ADR)
#define SBB_PARAM_H244_REG ((sbb_param_h244_reg_t*) SBB_PARAM_H244_ADR)
#define SBB_PARAM_L244_REG ((sbb_param_l244_reg_t*) SBB_PARAM_L244_ADR)
#define SBB_PARAM_H245_REG ((sbb_param_h245_reg_t*) SBB_PARAM_H245_ADR)
#define SBB_PARAM_L245_REG ((sbb_param_l245_reg_t*) SBB_PARAM_L245_ADR)
#define SBB_PARAM_H246_REG ((sbb_param_h246_reg_t*) SBB_PARAM_H246_ADR)
#define SBB_PARAM_L246_REG ((sbb_param_l246_reg_t*) SBB_PARAM_L246_ADR)
#define SBB_PARAM_H247_REG ((sbb_param_h247_reg_t*) SBB_PARAM_H247_ADR)
#define SBB_PARAM_L247_REG ((sbb_param_l247_reg_t*) SBB_PARAM_L247_ADR)
#define SBB_PARAM_H248_REG ((sbb_param_h248_reg_t*) SBB_PARAM_H248_ADR)
#define SBB_PARAM_L248_REG ((sbb_param_l248_reg_t*) SBB_PARAM_L248_ADR)
#define SBB_PARAM_H249_REG ((sbb_param_h249_reg_t*) SBB_PARAM_H249_ADR)
#define SBB_PARAM_L249_REG ((sbb_param_l249_reg_t*) SBB_PARAM_L249_ADR)
#define SBB_PARAM_H250_REG ((sbb_param_h250_reg_t*) SBB_PARAM_H250_ADR)
#define SBB_PARAM_L250_REG ((sbb_param_l250_reg_t*) SBB_PARAM_L250_ADR)
#define SBB_PARAM_H251_REG ((sbb_param_h251_reg_t*) SBB_PARAM_H251_ADR)
#define SBB_PARAM_L251_REG ((sbb_param_l251_reg_t*) SBB_PARAM_L251_ADR)
#define SBB_PARAM_H252_REG ((sbb_param_h252_reg_t*) SBB_PARAM_H252_ADR)
#define SBB_PARAM_L252_REG ((sbb_param_l252_reg_t*) SBB_PARAM_L252_ADR)
#define SBB_PARAM_H253_REG ((sbb_param_h253_reg_t*) SBB_PARAM_H253_ADR)
#define SBB_PARAM_L253_REG ((sbb_param_l253_reg_t*) SBB_PARAM_L253_ADR)
#define SBB_PARAM_H254_REG ((sbb_param_h254_reg_t*) SBB_PARAM_H254_ADR)
#define SBB_PARAM_L254_REG ((sbb_param_l254_reg_t*) SBB_PARAM_L254_ADR)
#define SBB_PARAM_H255_REG ((sbb_param_h255_reg_t*) SBB_PARAM_H255_ADR)
#define SBB_PARAM_L255_REG ((sbb_param_l255_reg_t*) SBB_PARAM_L255_ADR)
#define SBB_PARAM_H256_REG ((sbb_param_h256_reg_t*) SBB_PARAM_H256_ADR)
#define SBB_PARAM_L256_REG ((sbb_param_l256_reg_t*) SBB_PARAM_L256_ADR)
#define SBB_PARAM_H257_REG ((sbb_param_h257_reg_t*) SBB_PARAM_H257_ADR)
#define SBB_PARAM_L257_REG ((sbb_param_l257_reg_t*) SBB_PARAM_L257_ADR)
#define SBB_PARAM_H258_REG ((sbb_param_h258_reg_t*) SBB_PARAM_H258_ADR)
#define SBB_PARAM_L258_REG ((sbb_param_l258_reg_t*) SBB_PARAM_L258_ADR)
#define SBB_PARAM_H259_REG ((sbb_param_h259_reg_t*) SBB_PARAM_H259_ADR)
#define SBB_PARAM_L259_REG ((sbb_param_l259_reg_t*) SBB_PARAM_L259_ADR)
#define SBB_PARAM_H260_REG ((sbb_param_h260_reg_t*) SBB_PARAM_H260_ADR)
#define SBB_PARAM_L260_REG ((sbb_param_l260_reg_t*) SBB_PARAM_L260_ADR)
#define SBB_PARAM_H261_REG ((sbb_param_h261_reg_t*) SBB_PARAM_H261_ADR)
#define SBB_PARAM_L261_REG ((sbb_param_l261_reg_t*) SBB_PARAM_L261_ADR)
#define SBB_PARAM_H262_REG ((sbb_param_h262_reg_t*) SBB_PARAM_H262_ADR)
#define SBB_PARAM_L262_REG ((sbb_param_l262_reg_t*) SBB_PARAM_L262_ADR)
#define SBB_PARAM_H263_REG ((sbb_param_h263_reg_t*) SBB_PARAM_H263_ADR)
#define SBB_PARAM_L263_REG ((sbb_param_l263_reg_t*) SBB_PARAM_L263_ADR)
#define SBB_PARAM_H264_REG ((sbb_param_h264_reg_t*) SBB_PARAM_H264_ADR)
#define SBB_PARAM_L264_REG ((sbb_param_l264_reg_t*) SBB_PARAM_L264_ADR)
#define SBB_PARAM_H265_REG ((sbb_param_h265_reg_t*) SBB_PARAM_H265_ADR)
#define SBB_PARAM_L265_REG ((sbb_param_l265_reg_t*) SBB_PARAM_L265_ADR)
#define SBB_PARAM_H266_REG ((sbb_param_h266_reg_t*) SBB_PARAM_H266_ADR)
#define SBB_PARAM_L266_REG ((sbb_param_l266_reg_t*) SBB_PARAM_L266_ADR)
#define SBB_PARAM_H267_REG ((sbb_param_h267_reg_t*) SBB_PARAM_H267_ADR)
#define SBB_PARAM_L267_REG ((sbb_param_l267_reg_t*) SBB_PARAM_L267_ADR)
#define SBB_PARAM_H268_REG ((sbb_param_h268_reg_t*) SBB_PARAM_H268_ADR)
#define SBB_PARAM_L268_REG ((sbb_param_l268_reg_t*) SBB_PARAM_L268_ADR)
#define SBB_PARAM_H269_REG ((sbb_param_h269_reg_t*) SBB_PARAM_H269_ADR)
#define SBB_PARAM_L269_REG ((sbb_param_l269_reg_t*) SBB_PARAM_L269_ADR)
#define SBB_PARAM_H270_REG ((sbb_param_h270_reg_t*) SBB_PARAM_H270_ADR)
#define SBB_PARAM_L270_REG ((sbb_param_l270_reg_t*) SBB_PARAM_L270_ADR)
#define SBB_PARAM_H271_REG ((sbb_param_h271_reg_t*) SBB_PARAM_H271_ADR)
#define SBB_PARAM_L271_REG ((sbb_param_l271_reg_t*) SBB_PARAM_L271_ADR)
#define SBB_PARAM_H272_REG ((sbb_param_h272_reg_t*) SBB_PARAM_H272_ADR)
#define SBB_PARAM_L272_REG ((sbb_param_l272_reg_t*) SBB_PARAM_L272_ADR)
#define SBB_PARAM_H273_REG ((sbb_param_h273_reg_t*) SBB_PARAM_H273_ADR)
#define SBB_PARAM_L273_REG ((sbb_param_l273_reg_t*) SBB_PARAM_L273_ADR)
#define SBB_PARAM_H274_REG ((sbb_param_h274_reg_t*) SBB_PARAM_H274_ADR)
#define SBB_PARAM_L274_REG ((sbb_param_l274_reg_t*) SBB_PARAM_L274_ADR)
#define SBB_PARAM_H275_REG ((sbb_param_h275_reg_t*) SBB_PARAM_H275_ADR)
#define SBB_PARAM_L275_REG ((sbb_param_l275_reg_t*) SBB_PARAM_L275_ADR)
#define SBB_PARAM_H276_REG ((sbb_param_h276_reg_t*) SBB_PARAM_H276_ADR)
#define SBB_PARAM_L276_REG ((sbb_param_l276_reg_t*) SBB_PARAM_L276_ADR)
#define SBB_PARAM_H277_REG ((sbb_param_h277_reg_t*) SBB_PARAM_H277_ADR)
#define SBB_PARAM_L277_REG ((sbb_param_l277_reg_t*) SBB_PARAM_L277_ADR)
#define SBB_PARAM_H278_REG ((sbb_param_h278_reg_t*) SBB_PARAM_H278_ADR)
#define SBB_PARAM_L278_REG ((sbb_param_l278_reg_t*) SBB_PARAM_L278_ADR)
#define SBB_PARAM_H279_REG ((sbb_param_h279_reg_t*) SBB_PARAM_H279_ADR)
#define SBB_PARAM_L279_REG ((sbb_param_l279_reg_t*) SBB_PARAM_L279_ADR)
#define SBB_PARAM_H280_REG ((sbb_param_h280_reg_t*) SBB_PARAM_H280_ADR)
#define SBB_PARAM_L280_REG ((sbb_param_l280_reg_t*) SBB_PARAM_L280_ADR)
#define SBB_PARAM_H281_REG ((sbb_param_h281_reg_t*) SBB_PARAM_H281_ADR)
#define SBB_PARAM_L281_REG ((sbb_param_l281_reg_t*) SBB_PARAM_L281_ADR)
#define SBB_PARAM_H282_REG ((sbb_param_h282_reg_t*) SBB_PARAM_H282_ADR)
#define SBB_PARAM_L282_REG ((sbb_param_l282_reg_t*) SBB_PARAM_L282_ADR)
#define SBB_PARAM_H283_REG ((sbb_param_h283_reg_t*) SBB_PARAM_H283_ADR)
#define SBB_PARAM_L283_REG ((sbb_param_l283_reg_t*) SBB_PARAM_L283_ADR)
#define SBB_PARAM_H284_REG ((sbb_param_h284_reg_t*) SBB_PARAM_H284_ADR)
#define SBB_PARAM_L284_REG ((sbb_param_l284_reg_t*) SBB_PARAM_L284_ADR)
#define SBB_PARAM_H285_REG ((sbb_param_h285_reg_t*) SBB_PARAM_H285_ADR)
#define SBB_PARAM_L285_REG ((sbb_param_l285_reg_t*) SBB_PARAM_L285_ADR)
#define SBB_PARAM_H286_REG ((sbb_param_h286_reg_t*) SBB_PARAM_H286_ADR)
#define SBB_PARAM_L286_REG ((sbb_param_l286_reg_t*) SBB_PARAM_L286_ADR)
#define SBB_PARAM_H287_REG ((sbb_param_h287_reg_t*) SBB_PARAM_H287_ADR)
#define SBB_PARAM_L287_REG ((sbb_param_l287_reg_t*) SBB_PARAM_L287_ADR)
#define SBB_PARAM_H288_REG ((sbb_param_h288_reg_t*) SBB_PARAM_H288_ADR)
#define SBB_PARAM_L288_REG ((sbb_param_l288_reg_t*) SBB_PARAM_L288_ADR)
#define SBB_PARAM_H289_REG ((sbb_param_h289_reg_t*) SBB_PARAM_H289_ADR)
#define SBB_PARAM_L289_REG ((sbb_param_l289_reg_t*) SBB_PARAM_L289_ADR)
#define SBB_PARAM_H290_REG ((sbb_param_h290_reg_t*) SBB_PARAM_H290_ADR)
#define SBB_PARAM_L290_REG ((sbb_param_l290_reg_t*) SBB_PARAM_L290_ADR)
#define SBB_PARAM_H291_REG ((sbb_param_h291_reg_t*) SBB_PARAM_H291_ADR)
#define SBB_PARAM_L291_REG ((sbb_param_l291_reg_t*) SBB_PARAM_L291_ADR)
#define SBB_PARAM_H292_REG ((sbb_param_h292_reg_t*) SBB_PARAM_H292_ADR)
#define SBB_PARAM_L292_REG ((sbb_param_l292_reg_t*) SBB_PARAM_L292_ADR)
#define SBB_PARAM_H293_REG ((sbb_param_h293_reg_t*) SBB_PARAM_H293_ADR)
#define SBB_PARAM_L293_REG ((sbb_param_l293_reg_t*) SBB_PARAM_L293_ADR)
#define SBB_PARAM_H294_REG ((sbb_param_h294_reg_t*) SBB_PARAM_H294_ADR)
#define SBB_PARAM_L294_REG ((sbb_param_l294_reg_t*) SBB_PARAM_L294_ADR)
#define SBB_PARAM_H295_REG ((sbb_param_h295_reg_t*) SBB_PARAM_H295_ADR)
#define SBB_PARAM_L295_REG ((sbb_param_l295_reg_t*) SBB_PARAM_L295_ADR)
#define SBB_PARAM_H296_REG ((sbb_param_h296_reg_t*) SBB_PARAM_H296_ADR)
#define SBB_PARAM_L296_REG ((sbb_param_l296_reg_t*) SBB_PARAM_L296_ADR)
#define SBB_PARAM_H297_REG ((sbb_param_h297_reg_t*) SBB_PARAM_H297_ADR)
#define SBB_PARAM_L297_REG ((sbb_param_l297_reg_t*) SBB_PARAM_L297_ADR)
#define SBB_PARAM_H298_REG ((sbb_param_h298_reg_t*) SBB_PARAM_H298_ADR)
#define SBB_PARAM_L298_REG ((sbb_param_l298_reg_t*) SBB_PARAM_L298_ADR)
#define SBB_PARAM_H299_REG ((sbb_param_h299_reg_t*) SBB_PARAM_H299_ADR)
#define SBB_PARAM_L299_REG ((sbb_param_l299_reg_t*) SBB_PARAM_L299_ADR)
#define SBB_PARAM_H300_REG ((sbb_param_h300_reg_t*) SBB_PARAM_H300_ADR)
#define SBB_PARAM_L300_REG ((sbb_param_l300_reg_t*) SBB_PARAM_L300_ADR)
#define SBB_PARAM_H301_REG ((sbb_param_h301_reg_t*) SBB_PARAM_H301_ADR)
#define SBB_PARAM_L301_REG ((sbb_param_l301_reg_t*) SBB_PARAM_L301_ADR)
#define SBB_PARAM_H302_REG ((sbb_param_h302_reg_t*) SBB_PARAM_H302_ADR)
#define SBB_PARAM_L302_REG ((sbb_param_l302_reg_t*) SBB_PARAM_L302_ADR)
#define SBB_PARAM_H303_REG ((sbb_param_h303_reg_t*) SBB_PARAM_H303_ADR)
#define SBB_PARAM_L303_REG ((sbb_param_l303_reg_t*) SBB_PARAM_L303_ADR)
#define SBB_PARAM_H304_REG ((sbb_param_h304_reg_t*) SBB_PARAM_H304_ADR)
#define SBB_PARAM_L304_REG ((sbb_param_l304_reg_t*) SBB_PARAM_L304_ADR)
#define SBB_PARAM_H305_REG ((sbb_param_h305_reg_t*) SBB_PARAM_H305_ADR)
#define SBB_PARAM_L305_REG ((sbb_param_l305_reg_t*) SBB_PARAM_L305_ADR)
#define SBB_PARAM_H306_REG ((sbb_param_h306_reg_t*) SBB_PARAM_H306_ADR)
#define SBB_PARAM_L306_REG ((sbb_param_l306_reg_t*) SBB_PARAM_L306_ADR)
#define SBB_PARAM_H307_REG ((sbb_param_h307_reg_t*) SBB_PARAM_H307_ADR)
#define SBB_PARAM_L307_REG ((sbb_param_l307_reg_t*) SBB_PARAM_L307_ADR)
#define SBB_PARAM_H308_REG ((sbb_param_h308_reg_t*) SBB_PARAM_H308_ADR)
#define SBB_PARAM_L308_REG ((sbb_param_l308_reg_t*) SBB_PARAM_L308_ADR)
#define SBB_PARAM_H309_REG ((sbb_param_h309_reg_t*) SBB_PARAM_H309_ADR)
#define SBB_PARAM_L309_REG ((sbb_param_l309_reg_t*) SBB_PARAM_L309_ADR)
#define SBB_PARAM_H310_REG ((sbb_param_h310_reg_t*) SBB_PARAM_H310_ADR)
#define SBB_PARAM_L310_REG ((sbb_param_l310_reg_t*) SBB_PARAM_L310_ADR)
#define SBB_PARAM_H311_REG ((sbb_param_h311_reg_t*) SBB_PARAM_H311_ADR)
#define SBB_PARAM_L311_REG ((sbb_param_l311_reg_t*) SBB_PARAM_L311_ADR)
#define SBB_PARAM_H312_REG ((sbb_param_h312_reg_t*) SBB_PARAM_H312_ADR)
#define SBB_PARAM_L312_REG ((sbb_param_l312_reg_t*) SBB_PARAM_L312_ADR)
#define SBB_PARAM_H313_REG ((sbb_param_h313_reg_t*) SBB_PARAM_H313_ADR)
#define SBB_PARAM_L313_REG ((sbb_param_l313_reg_t*) SBB_PARAM_L313_ADR)
#define SBB_PARAM_H314_REG ((sbb_param_h314_reg_t*) SBB_PARAM_H314_ADR)
#define SBB_PARAM_L314_REG ((sbb_param_l314_reg_t*) SBB_PARAM_L314_ADR)
#define SBB_PARAM_H315_REG ((sbb_param_h315_reg_t*) SBB_PARAM_H315_ADR)
#define SBB_PARAM_L315_REG ((sbb_param_l315_reg_t*) SBB_PARAM_L315_ADR)
#define SBB_PARAM_H316_REG ((sbb_param_h316_reg_t*) SBB_PARAM_H316_ADR)
#define SBB_PARAM_L316_REG ((sbb_param_l316_reg_t*) SBB_PARAM_L316_ADR)
#define SBB_PARAM_H317_REG ((sbb_param_h317_reg_t*) SBB_PARAM_H317_ADR)
#define SBB_PARAM_L317_REG ((sbb_param_l317_reg_t*) SBB_PARAM_L317_ADR)
#define SBB_PARAM_H318_REG ((sbb_param_h318_reg_t*) SBB_PARAM_H318_ADR)
#define SBB_PARAM_L318_REG ((sbb_param_l318_reg_t*) SBB_PARAM_L318_ADR)
#define SBB_PARAM_H319_REG ((sbb_param_h319_reg_t*) SBB_PARAM_H319_ADR)
#define SBB_PARAM_L319_REG ((sbb_param_l319_reg_t*) SBB_PARAM_L319_ADR)
#define SBB_PARAM_H320_REG ((sbb_param_h320_reg_t*) SBB_PARAM_H320_ADR)
#define SBB_PARAM_L320_REG ((sbb_param_l320_reg_t*) SBB_PARAM_L320_ADR)
#define SBB_PARAM_H321_REG ((sbb_param_h321_reg_t*) SBB_PARAM_H321_ADR)
#define SBB_PARAM_L321_REG ((sbb_param_l321_reg_t*) SBB_PARAM_L321_ADR)
#define SBB_PARAM_H322_REG ((sbb_param_h322_reg_t*) SBB_PARAM_H322_ADR)
#define SBB_PARAM_L322_REG ((sbb_param_l322_reg_t*) SBB_PARAM_L322_ADR)
#define SBB_PARAM_H323_REG ((sbb_param_h323_reg_t*) SBB_PARAM_H323_ADR)
#define SBB_PARAM_L323_REG ((sbb_param_l323_reg_t*) SBB_PARAM_L323_ADR)
#define SBB_PARAM_H324_REG ((sbb_param_h324_reg_t*) SBB_PARAM_H324_ADR)
#define SBB_PARAM_L324_REG ((sbb_param_l324_reg_t*) SBB_PARAM_L324_ADR)
#define SBB_PARAM_H325_REG ((sbb_param_h325_reg_t*) SBB_PARAM_H325_ADR)
#define SBB_PARAM_L325_REG ((sbb_param_l325_reg_t*) SBB_PARAM_L325_ADR)
#define SBB_PARAM_H326_REG ((sbb_param_h326_reg_t*) SBB_PARAM_H326_ADR)
#define SBB_PARAM_L326_REG ((sbb_param_l326_reg_t*) SBB_PARAM_L326_ADR)
#define SBB_PARAM_H327_REG ((sbb_param_h327_reg_t*) SBB_PARAM_H327_ADR)
#define SBB_PARAM_L327_REG ((sbb_param_l327_reg_t*) SBB_PARAM_L327_ADR)
#define SBB_PARAM_H328_REG ((sbb_param_h328_reg_t*) SBB_PARAM_H328_ADR)
#define SBB_PARAM_L328_REG ((sbb_param_l328_reg_t*) SBB_PARAM_L328_ADR)
#define SBB_PARAM_H329_REG ((sbb_param_h329_reg_t*) SBB_PARAM_H329_ADR)
#define SBB_PARAM_L329_REG ((sbb_param_l329_reg_t*) SBB_PARAM_L329_ADR)
#define SBB_PARAM_H330_REG ((sbb_param_h330_reg_t*) SBB_PARAM_H330_ADR)
#define SBB_PARAM_L330_REG ((sbb_param_l330_reg_t*) SBB_PARAM_L330_ADR)
#define SBB_PARAM_H331_REG ((sbb_param_h331_reg_t*) SBB_PARAM_H331_ADR)
#define SBB_PARAM_L331_REG ((sbb_param_l331_reg_t*) SBB_PARAM_L331_ADR)
#define SBB_PARAM_H332_REG ((sbb_param_h332_reg_t*) SBB_PARAM_H332_ADR)
#define SBB_PARAM_L332_REG ((sbb_param_l332_reg_t*) SBB_PARAM_L332_ADR)
#define SBB_PARAM_H333_REG ((sbb_param_h333_reg_t*) SBB_PARAM_H333_ADR)
#define SBB_PARAM_L333_REG ((sbb_param_l333_reg_t*) SBB_PARAM_L333_ADR)
#define SBB_PARAM_H334_REG ((sbb_param_h334_reg_t*) SBB_PARAM_H334_ADR)
#define SBB_PARAM_L334_REG ((sbb_param_l334_reg_t*) SBB_PARAM_L334_ADR)
#define SBB_PARAM_H335_REG ((sbb_param_h335_reg_t*) SBB_PARAM_H335_ADR)
#define SBB_PARAM_L335_REG ((sbb_param_l335_reg_t*) SBB_PARAM_L335_ADR)
#define SBB_PARAM_H336_REG ((sbb_param_h336_reg_t*) SBB_PARAM_H336_ADR)
#define SBB_PARAM_L336_REG ((sbb_param_l336_reg_t*) SBB_PARAM_L336_ADR)
#define SBB_PARAM_H337_REG ((sbb_param_h337_reg_t*) SBB_PARAM_H337_ADR)
#define SBB_PARAM_L337_REG ((sbb_param_l337_reg_t*) SBB_PARAM_L337_ADR)
#define SBB_PARAM_H338_REG ((sbb_param_h338_reg_t*) SBB_PARAM_H338_ADR)
#define SBB_PARAM_L338_REG ((sbb_param_l338_reg_t*) SBB_PARAM_L338_ADR)
#define SBB_PARAM_H339_REG ((sbb_param_h339_reg_t*) SBB_PARAM_H339_ADR)
#define SBB_PARAM_L339_REG ((sbb_param_l339_reg_t*) SBB_PARAM_L339_ADR)
#define SBB_PARAM_H340_REG ((sbb_param_h340_reg_t*) SBB_PARAM_H340_ADR)
#define SBB_PARAM_L340_REG ((sbb_param_l340_reg_t*) SBB_PARAM_L340_ADR)
#define SBB_PARAM_H341_REG ((sbb_param_h341_reg_t*) SBB_PARAM_H341_ADR)
#define SBB_PARAM_L341_REG ((sbb_param_l341_reg_t*) SBB_PARAM_L341_ADR)
#define SBB_PARAM_H342_REG ((sbb_param_h342_reg_t*) SBB_PARAM_H342_ADR)
#define SBB_PARAM_L342_REG ((sbb_param_l342_reg_t*) SBB_PARAM_L342_ADR)
#define SBB_PARAM_H343_REG ((sbb_param_h343_reg_t*) SBB_PARAM_H343_ADR)
#define SBB_PARAM_L343_REG ((sbb_param_l343_reg_t*) SBB_PARAM_L343_ADR)
#define SBB_PARAM_H344_REG ((sbb_param_h344_reg_t*) SBB_PARAM_H344_ADR)
#define SBB_PARAM_L344_REG ((sbb_param_l344_reg_t*) SBB_PARAM_L344_ADR)
#define SBB_PARAM_H345_REG ((sbb_param_h345_reg_t*) SBB_PARAM_H345_ADR)
#define SBB_PARAM_L345_REG ((sbb_param_l345_reg_t*) SBB_PARAM_L345_ADR)
#define SBB_PARAM_H346_REG ((sbb_param_h346_reg_t*) SBB_PARAM_H346_ADR)
#define SBB_PARAM_L346_REG ((sbb_param_l346_reg_t*) SBB_PARAM_L346_ADR)
#define SBB_PARAM_H347_REG ((sbb_param_h347_reg_t*) SBB_PARAM_H347_ADR)
#define SBB_PARAM_L347_REG ((sbb_param_l347_reg_t*) SBB_PARAM_L347_ADR)
#define SBB_PARAM_H348_REG ((sbb_param_h348_reg_t*) SBB_PARAM_H348_ADR)
#define SBB_PARAM_L348_REG ((sbb_param_l348_reg_t*) SBB_PARAM_L348_ADR)
#define SBB_PARAM_H349_REG ((sbb_param_h349_reg_t*) SBB_PARAM_H349_ADR)
#define SBB_PARAM_L349_REG ((sbb_param_l349_reg_t*) SBB_PARAM_L349_ADR)
#define SBB_PARAM_H350_REG ((sbb_param_h350_reg_t*) SBB_PARAM_H350_ADR)
#define SBB_PARAM_L350_REG ((sbb_param_l350_reg_t*) SBB_PARAM_L350_ADR)
#define SBB_PARAM_H351_REG ((sbb_param_h351_reg_t*) SBB_PARAM_H351_ADR)
#define SBB_PARAM_L351_REG ((sbb_param_l351_reg_t*) SBB_PARAM_L351_ADR)
#define SBB_PARAM_H352_REG ((sbb_param_h352_reg_t*) SBB_PARAM_H352_ADR)
#define SBB_PARAM_L352_REG ((sbb_param_l352_reg_t*) SBB_PARAM_L352_ADR)
#define SBB_PARAM_H353_REG ((sbb_param_h353_reg_t*) SBB_PARAM_H353_ADR)
#define SBB_PARAM_L353_REG ((sbb_param_l353_reg_t*) SBB_PARAM_L353_ADR)
#define SBB_PARAM_H354_REG ((sbb_param_h354_reg_t*) SBB_PARAM_H354_ADR)
#define SBB_PARAM_L354_REG ((sbb_param_l354_reg_t*) SBB_PARAM_L354_ADR)
#define SBB_PARAM_H355_REG ((sbb_param_h355_reg_t*) SBB_PARAM_H355_ADR)
#define SBB_PARAM_L355_REG ((sbb_param_l355_reg_t*) SBB_PARAM_L355_ADR)
#define SBB_PARAM_H356_REG ((sbb_param_h356_reg_t*) SBB_PARAM_H356_ADR)
#define SBB_PARAM_L356_REG ((sbb_param_l356_reg_t*) SBB_PARAM_L356_ADR)
#define SBB_PARAM_H357_REG ((sbb_param_h357_reg_t*) SBB_PARAM_H357_ADR)
#define SBB_PARAM_L357_REG ((sbb_param_l357_reg_t*) SBB_PARAM_L357_ADR)
#define SBB_PARAM_H358_REG ((sbb_param_h358_reg_t*) SBB_PARAM_H358_ADR)
#define SBB_PARAM_L358_REG ((sbb_param_l358_reg_t*) SBB_PARAM_L358_ADR)
#define SBB_PARAM_H359_REG ((sbb_param_h359_reg_t*) SBB_PARAM_H359_ADR)
#define SBB_PARAM_L359_REG ((sbb_param_l359_reg_t*) SBB_PARAM_L359_ADR)
#define SBB_PARAM_H360_REG ((sbb_param_h360_reg_t*) SBB_PARAM_H360_ADR)
#define SBB_PARAM_L360_REG ((sbb_param_l360_reg_t*) SBB_PARAM_L360_ADR)
#define SBB_PARAM_H361_REG ((sbb_param_h361_reg_t*) SBB_PARAM_H361_ADR)
#define SBB_PARAM_L361_REG ((sbb_param_l361_reg_t*) SBB_PARAM_L361_ADR)
#define SBB_PARAM_H362_REG ((sbb_param_h362_reg_t*) SBB_PARAM_H362_ADR)
#define SBB_PARAM_L362_REG ((sbb_param_l362_reg_t*) SBB_PARAM_L362_ADR)
#define SBB_PARAM_H363_REG ((sbb_param_h363_reg_t*) SBB_PARAM_H363_ADR)
#define SBB_PARAM_L363_REG ((sbb_param_l363_reg_t*) SBB_PARAM_L363_ADR)
#define SBB_PARAM_H364_REG ((sbb_param_h364_reg_t*) SBB_PARAM_H364_ADR)
#define SBB_PARAM_L364_REG ((sbb_param_l364_reg_t*) SBB_PARAM_L364_ADR)
#define SBB_PARAM_H365_REG ((sbb_param_h365_reg_t*) SBB_PARAM_H365_ADR)
#define SBB_PARAM_L365_REG ((sbb_param_l365_reg_t*) SBB_PARAM_L365_ADR)
#define SBB_PARAM_H366_REG ((sbb_param_h366_reg_t*) SBB_PARAM_H366_ADR)
#define SBB_PARAM_L366_REG ((sbb_param_l366_reg_t*) SBB_PARAM_L366_ADR)
#define SBB_PARAM_H367_REG ((sbb_param_h367_reg_t*) SBB_PARAM_H367_ADR)
#define SBB_PARAM_L367_REG ((sbb_param_l367_reg_t*) SBB_PARAM_L367_ADR)
#define SBB_PARAM_H368_REG ((sbb_param_h368_reg_t*) SBB_PARAM_H368_ADR)
#define SBB_PARAM_L368_REG ((sbb_param_l368_reg_t*) SBB_PARAM_L368_ADR)
#define SBB_PARAM_H369_REG ((sbb_param_h369_reg_t*) SBB_PARAM_H369_ADR)
#define SBB_PARAM_L369_REG ((sbb_param_l369_reg_t*) SBB_PARAM_L369_ADR)
#define SBB_PARAM_H370_REG ((sbb_param_h370_reg_t*) SBB_PARAM_H370_ADR)
#define SBB_PARAM_L370_REG ((sbb_param_l370_reg_t*) SBB_PARAM_L370_ADR)
#define SBB_PARAM_H371_REG ((sbb_param_h371_reg_t*) SBB_PARAM_H371_ADR)
#define SBB_PARAM_L371_REG ((sbb_param_l371_reg_t*) SBB_PARAM_L371_ADR)
#define SBB_PARAM_H372_REG ((sbb_param_h372_reg_t*) SBB_PARAM_H372_ADR)
#define SBB_PARAM_L372_REG ((sbb_param_l372_reg_t*) SBB_PARAM_L372_ADR)
#define SBB_PARAM_H373_REG ((sbb_param_h373_reg_t*) SBB_PARAM_H373_ADR)
#define SBB_PARAM_L373_REG ((sbb_param_l373_reg_t*) SBB_PARAM_L373_ADR)
#define SBB_PARAM_H374_REG ((sbb_param_h374_reg_t*) SBB_PARAM_H374_ADR)
#define SBB_PARAM_L374_REG ((sbb_param_l374_reg_t*) SBB_PARAM_L374_ADR)
#define SBB_PARAM_H375_REG ((sbb_param_h375_reg_t*) SBB_PARAM_H375_ADR)
#define SBB_PARAM_L375_REG ((sbb_param_l375_reg_t*) SBB_PARAM_L375_ADR)
#define SBB_PARAM_H376_REG ((sbb_param_h376_reg_t*) SBB_PARAM_H376_ADR)
#define SBB_PARAM_L376_REG ((sbb_param_l376_reg_t*) SBB_PARAM_L376_ADR)
#define SBB_PARAM_H377_REG ((sbb_param_h377_reg_t*) SBB_PARAM_H377_ADR)
#define SBB_PARAM_L377_REG ((sbb_param_l377_reg_t*) SBB_PARAM_L377_ADR)
#define SBB_PARAM_H378_REG ((sbb_param_h378_reg_t*) SBB_PARAM_H378_ADR)
#define SBB_PARAM_L378_REG ((sbb_param_l378_reg_t*) SBB_PARAM_L378_ADR)
#define SBB_PARAM_H379_REG ((sbb_param_h379_reg_t*) SBB_PARAM_H379_ADR)
#define SBB_PARAM_L379_REG ((sbb_param_l379_reg_t*) SBB_PARAM_L379_ADR)
#define SBB_PARAM_H380_REG ((sbb_param_h380_reg_t*) SBB_PARAM_H380_ADR)
#define SBB_PARAM_L380_REG ((sbb_param_l380_reg_t*) SBB_PARAM_L380_ADR)
#define SBB_PARAM_H381_REG ((sbb_param_h381_reg_t*) SBB_PARAM_H381_ADR)
#define SBB_PARAM_L381_REG ((sbb_param_l381_reg_t*) SBB_PARAM_L381_ADR)
#define SBB_PARAM_H382_REG ((sbb_param_h382_reg_t*) SBB_PARAM_H382_ADR)
#define SBB_PARAM_L382_REG ((sbb_param_l382_reg_t*) SBB_PARAM_L382_ADR)
#define SBB_PARAM_H383_REG ((sbb_param_h383_reg_t*) SBB_PARAM_H383_ADR)
#define SBB_PARAM_L383_REG ((sbb_param_l383_reg_t*) SBB_PARAM_L383_ADR)
#define SBB_PARAM_H384_REG ((sbb_param_h384_reg_t*) SBB_PARAM_H384_ADR)
#define SBB_PARAM_L384_REG ((sbb_param_l384_reg_t*) SBB_PARAM_L384_ADR)
#define SBB_PARAM_H385_REG ((sbb_param_h385_reg_t*) SBB_PARAM_H385_ADR)
#define SBB_PARAM_L385_REG ((sbb_param_l385_reg_t*) SBB_PARAM_L385_ADR)
#define SBB_PARAM_H386_REG ((sbb_param_h386_reg_t*) SBB_PARAM_H386_ADR)
#define SBB_PARAM_L386_REG ((sbb_param_l386_reg_t*) SBB_PARAM_L386_ADR)
#define SBB_PARAM_H387_REG ((sbb_param_h387_reg_t*) SBB_PARAM_H387_ADR)
#define SBB_PARAM_L387_REG ((sbb_param_l387_reg_t*) SBB_PARAM_L387_ADR)
#define SBB_PARAM_H388_REG ((sbb_param_h388_reg_t*) SBB_PARAM_H388_ADR)
#define SBB_PARAM_L388_REG ((sbb_param_l388_reg_t*) SBB_PARAM_L388_ADR)
#define SBB_PARAM_H389_REG ((sbb_param_h389_reg_t*) SBB_PARAM_H389_ADR)
#define SBB_PARAM_L389_REG ((sbb_param_l389_reg_t*) SBB_PARAM_L389_ADR)
#define SBB_PARAM_H390_REG ((sbb_param_h390_reg_t*) SBB_PARAM_H390_ADR)
#define SBB_PARAM_L390_REG ((sbb_param_l390_reg_t*) SBB_PARAM_L390_ADR)
#define SBB_PARAM_H391_REG ((sbb_param_h391_reg_t*) SBB_PARAM_H391_ADR)
#define SBB_PARAM_L391_REG ((sbb_param_l391_reg_t*) SBB_PARAM_L391_ADR)
#define SBB_PARAM_H392_REG ((sbb_param_h392_reg_t*) SBB_PARAM_H392_ADR)
#define SBB_PARAM_L392_REG ((sbb_param_l392_reg_t*) SBB_PARAM_L392_ADR)
#define SBB_PARAM_H393_REG ((sbb_param_h393_reg_t*) SBB_PARAM_H393_ADR)
#define SBB_PARAM_L393_REG ((sbb_param_l393_reg_t*) SBB_PARAM_L393_ADR)
#define SBB_PARAM_H394_REG ((sbb_param_h394_reg_t*) SBB_PARAM_H394_ADR)
#define SBB_PARAM_L394_REG ((sbb_param_l394_reg_t*) SBB_PARAM_L394_ADR)
#define SBB_PARAM_H395_REG ((sbb_param_h395_reg_t*) SBB_PARAM_H395_ADR)
#define SBB_PARAM_L395_REG ((sbb_param_l395_reg_t*) SBB_PARAM_L395_ADR)
#define SBB_PARAM_H396_REG ((sbb_param_h396_reg_t*) SBB_PARAM_H396_ADR)
#define SBB_PARAM_L396_REG ((sbb_param_l396_reg_t*) SBB_PARAM_L396_ADR)
#define SBB_PARAM_H397_REG ((sbb_param_h397_reg_t*) SBB_PARAM_H397_ADR)
#define SBB_PARAM_L397_REG ((sbb_param_l397_reg_t*) SBB_PARAM_L397_ADR)
#define SBB_PARAM_H398_REG ((sbb_param_h398_reg_t*) SBB_PARAM_H398_ADR)
#define SBB_PARAM_L398_REG ((sbb_param_l398_reg_t*) SBB_PARAM_L398_ADR)
#define SBB_PARAM_H399_REG ((sbb_param_h399_reg_t*) SBB_PARAM_H399_ADR)
#define SBB_PARAM_L399_REG ((sbb_param_l399_reg_t*) SBB_PARAM_L399_ADR)
#define SBB_PARAM_H400_REG ((sbb_param_h400_reg_t*) SBB_PARAM_H400_ADR)
#define SBB_PARAM_L400_REG ((sbb_param_l400_reg_t*) SBB_PARAM_L400_ADR)
#define SBB_PARAM_H401_REG ((sbb_param_h401_reg_t*) SBB_PARAM_H401_ADR)
#define SBB_PARAM_L401_REG ((sbb_param_l401_reg_t*) SBB_PARAM_L401_ADR)
#define SBB_PARAM_H402_REG ((sbb_param_h402_reg_t*) SBB_PARAM_H402_ADR)
#define SBB_PARAM_L402_REG ((sbb_param_l402_reg_t*) SBB_PARAM_L402_ADR)
#define SBB_PARAM_H403_REG ((sbb_param_h403_reg_t*) SBB_PARAM_H403_ADR)
#define SBB_PARAM_L403_REG ((sbb_param_l403_reg_t*) SBB_PARAM_L403_ADR)
#define SBB_PARAM_H404_REG ((sbb_param_h404_reg_t*) SBB_PARAM_H404_ADR)
#define SBB_PARAM_L404_REG ((sbb_param_l404_reg_t*) SBB_PARAM_L404_ADR)
#define SBB_PARAM_H405_REG ((sbb_param_h405_reg_t*) SBB_PARAM_H405_ADR)
#define SBB_PARAM_L405_REG ((sbb_param_l405_reg_t*) SBB_PARAM_L405_ADR)
#define SBB_PARAM_H406_REG ((sbb_param_h406_reg_t*) SBB_PARAM_H406_ADR)
#define SBB_PARAM_L406_REG ((sbb_param_l406_reg_t*) SBB_PARAM_L406_ADR)
#define SBB_PARAM_H407_REG ((sbb_param_h407_reg_t*) SBB_PARAM_H407_ADR)
#define SBB_PARAM_L407_REG ((sbb_param_l407_reg_t*) SBB_PARAM_L407_ADR)
#define SBB_PARAM_H408_REG ((sbb_param_h408_reg_t*) SBB_PARAM_H408_ADR)
#define SBB_PARAM_L408_REG ((sbb_param_l408_reg_t*) SBB_PARAM_L408_ADR)
#define SBB_PARAM_H409_REG ((sbb_param_h409_reg_t*) SBB_PARAM_H409_ADR)
#define SBB_PARAM_L409_REG ((sbb_param_l409_reg_t*) SBB_PARAM_L409_ADR)
#define SBB_PARAM_H410_REG ((sbb_param_h410_reg_t*) SBB_PARAM_H410_ADR)
#define SBB_PARAM_L410_REG ((sbb_param_l410_reg_t*) SBB_PARAM_L410_ADR)
#define SBB_PARAM_H411_REG ((sbb_param_h411_reg_t*) SBB_PARAM_H411_ADR)
#define SBB_PARAM_L411_REG ((sbb_param_l411_reg_t*) SBB_PARAM_L411_ADR)
#define SBB_PARAM_H412_REG ((sbb_param_h412_reg_t*) SBB_PARAM_H412_ADR)
#define SBB_PARAM_L412_REG ((sbb_param_l412_reg_t*) SBB_PARAM_L412_ADR)
#define SBB_PARAM_H413_REG ((sbb_param_h413_reg_t*) SBB_PARAM_H413_ADR)
#define SBB_PARAM_L413_REG ((sbb_param_l413_reg_t*) SBB_PARAM_L413_ADR)
#define SBB_PARAM_H414_REG ((sbb_param_h414_reg_t*) SBB_PARAM_H414_ADR)
#define SBB_PARAM_L414_REG ((sbb_param_l414_reg_t*) SBB_PARAM_L414_ADR)
#define SBB_PARAM_H415_REG ((sbb_param_h415_reg_t*) SBB_PARAM_H415_ADR)
#define SBB_PARAM_L415_REG ((sbb_param_l415_reg_t*) SBB_PARAM_L415_ADR)
#define SBB_PARAM_H416_REG ((sbb_param_h416_reg_t*) SBB_PARAM_H416_ADR)
#define SBB_PARAM_L416_REG ((sbb_param_l416_reg_t*) SBB_PARAM_L416_ADR)
#define SBB_PARAM_H417_REG ((sbb_param_h417_reg_t*) SBB_PARAM_H417_ADR)
#define SBB_PARAM_L417_REG ((sbb_param_l417_reg_t*) SBB_PARAM_L417_ADR)
#define SBB_PARAM_H418_REG ((sbb_param_h418_reg_t*) SBB_PARAM_H418_ADR)
#define SBB_PARAM_L418_REG ((sbb_param_l418_reg_t*) SBB_PARAM_L418_ADR)
#define SBB_PARAM_H419_REG ((sbb_param_h419_reg_t*) SBB_PARAM_H419_ADR)
#define SBB_PARAM_L419_REG ((sbb_param_l419_reg_t*) SBB_PARAM_L419_ADR)
#define SBB_PARAM_H420_REG ((sbb_param_h420_reg_t*) SBB_PARAM_H420_ADR)
#define SBB_PARAM_L420_REG ((sbb_param_l420_reg_t*) SBB_PARAM_L420_ADR)
#define SBB_PARAM_H421_REG ((sbb_param_h421_reg_t*) SBB_PARAM_H421_ADR)
#define SBB_PARAM_L421_REG ((sbb_param_l421_reg_t*) SBB_PARAM_L421_ADR)
#define SBB_PARAM_H422_REG ((sbb_param_h422_reg_t*) SBB_PARAM_H422_ADR)
#define SBB_PARAM_L422_REG ((sbb_param_l422_reg_t*) SBB_PARAM_L422_ADR)
#define SBB_PARAM_H423_REG ((sbb_param_h423_reg_t*) SBB_PARAM_H423_ADR)
#define SBB_PARAM_L423_REG ((sbb_param_l423_reg_t*) SBB_PARAM_L423_ADR)
#define SBB_PARAM_H424_REG ((sbb_param_h424_reg_t*) SBB_PARAM_H424_ADR)
#define SBB_PARAM_L424_REG ((sbb_param_l424_reg_t*) SBB_PARAM_L424_ADR)
#define SBB_PARAM_H425_REG ((sbb_param_h425_reg_t*) SBB_PARAM_H425_ADR)
#define SBB_PARAM_L425_REG ((sbb_param_l425_reg_t*) SBB_PARAM_L425_ADR)
#define SBB_PARAM_H426_REG ((sbb_param_h426_reg_t*) SBB_PARAM_H426_ADR)
#define SBB_PARAM_L426_REG ((sbb_param_l426_reg_t*) SBB_PARAM_L426_ADR)
#define SBB_PARAM_H427_REG ((sbb_param_h427_reg_t*) SBB_PARAM_H427_ADR)
#define SBB_PARAM_L427_REG ((sbb_param_l427_reg_t*) SBB_PARAM_L427_ADR)
#define SBB_PARAM_H428_REG ((sbb_param_h428_reg_t*) SBB_PARAM_H428_ADR)
#define SBB_PARAM_L428_REG ((sbb_param_l428_reg_t*) SBB_PARAM_L428_ADR)
#define SBB_PARAM_H429_REG ((sbb_param_h429_reg_t*) SBB_PARAM_H429_ADR)
#define SBB_PARAM_L429_REG ((sbb_param_l429_reg_t*) SBB_PARAM_L429_ADR)
#define SBB_PARAM_H430_REG ((sbb_param_h430_reg_t*) SBB_PARAM_H430_ADR)
#define SBB_PARAM_L430_REG ((sbb_param_l430_reg_t*) SBB_PARAM_L430_ADR)
#define SBB_PARAM_H431_REG ((sbb_param_h431_reg_t*) SBB_PARAM_H431_ADR)
#define SBB_PARAM_L431_REG ((sbb_param_l431_reg_t*) SBB_PARAM_L431_ADR)
#define SBB_PARAM_H432_REG ((sbb_param_h432_reg_t*) SBB_PARAM_H432_ADR)
#define SBB_PARAM_L432_REG ((sbb_param_l432_reg_t*) SBB_PARAM_L432_ADR)
#define SBB_PARAM_H433_REG ((sbb_param_h433_reg_t*) SBB_PARAM_H433_ADR)
#define SBB_PARAM_L433_REG ((sbb_param_l433_reg_t*) SBB_PARAM_L433_ADR)
#define SBB_PARAM_H434_REG ((sbb_param_h434_reg_t*) SBB_PARAM_H434_ADR)
#define SBB_PARAM_L434_REG ((sbb_param_l434_reg_t*) SBB_PARAM_L434_ADR)
#define SBB_PARAM_H435_REG ((sbb_param_h435_reg_t*) SBB_PARAM_H435_ADR)
#define SBB_PARAM_L435_REG ((sbb_param_l435_reg_t*) SBB_PARAM_L435_ADR)
#define SBB_PARAM_H436_REG ((sbb_param_h436_reg_t*) SBB_PARAM_H436_ADR)
#define SBB_PARAM_L436_REG ((sbb_param_l436_reg_t*) SBB_PARAM_L436_ADR)
#define SBB_PARAM_H437_REG ((sbb_param_h437_reg_t*) SBB_PARAM_H437_ADR)
#define SBB_PARAM_L437_REG ((sbb_param_l437_reg_t*) SBB_PARAM_L437_ADR)
#define SBB_PARAM_H438_REG ((sbb_param_h438_reg_t*) SBB_PARAM_H438_ADR)
#define SBB_PARAM_L438_REG ((sbb_param_l438_reg_t*) SBB_PARAM_L438_ADR)
#define SBB_PARAM_H439_REG ((sbb_param_h439_reg_t*) SBB_PARAM_H439_ADR)
#define SBB_PARAM_L439_REG ((sbb_param_l439_reg_t*) SBB_PARAM_L439_ADR)
#define SBB_PARAM_H440_REG ((sbb_param_h440_reg_t*) SBB_PARAM_H440_ADR)
#define SBB_PARAM_L440_REG ((sbb_param_l440_reg_t*) SBB_PARAM_L440_ADR)
#define SBB_PARAM_H441_REG ((sbb_param_h441_reg_t*) SBB_PARAM_H441_ADR)
#define SBB_PARAM_L441_REG ((sbb_param_l441_reg_t*) SBB_PARAM_L441_ADR)
#define SBB_PARAM_H442_REG ((sbb_param_h442_reg_t*) SBB_PARAM_H442_ADR)
#define SBB_PARAM_L442_REG ((sbb_param_l442_reg_t*) SBB_PARAM_L442_ADR)
#define SBB_PARAM_H443_REG ((sbb_param_h443_reg_t*) SBB_PARAM_H443_ADR)
#define SBB_PARAM_L443_REG ((sbb_param_l443_reg_t*) SBB_PARAM_L443_ADR)
#define SBB_PARAM_H444_REG ((sbb_param_h444_reg_t*) SBB_PARAM_H444_ADR)
#define SBB_PARAM_L444_REG ((sbb_param_l444_reg_t*) SBB_PARAM_L444_ADR)
#define SBB_PARAM_H445_REG ((sbb_param_h445_reg_t*) SBB_PARAM_H445_ADR)
#define SBB_PARAM_L445_REG ((sbb_param_l445_reg_t*) SBB_PARAM_L445_ADR)
#define SBB_PARAM_H446_REG ((sbb_param_h446_reg_t*) SBB_PARAM_H446_ADR)
#define SBB_PARAM_L446_REG ((sbb_param_l446_reg_t*) SBB_PARAM_L446_ADR)
#define SBB_PARAM_H447_REG ((sbb_param_h447_reg_t*) SBB_PARAM_H447_ADR)
#define SBB_PARAM_L447_REG ((sbb_param_l447_reg_t*) SBB_PARAM_L447_ADR)
#define SBB_PARAM_H448_REG ((sbb_param_h448_reg_t*) SBB_PARAM_H448_ADR)
#define SBB_PARAM_L448_REG ((sbb_param_l448_reg_t*) SBB_PARAM_L448_ADR)
#define SBB_PARAM_H449_REG ((sbb_param_h449_reg_t*) SBB_PARAM_H449_ADR)
#define SBB_PARAM_L449_REG ((sbb_param_l449_reg_t*) SBB_PARAM_L449_ADR)
#define SBB_PARAM_H450_REG ((sbb_param_h450_reg_t*) SBB_PARAM_H450_ADR)
#define SBB_PARAM_L450_REG ((sbb_param_l450_reg_t*) SBB_PARAM_L450_ADR)
#define SBB_PARAM_H451_REG ((sbb_param_h451_reg_t*) SBB_PARAM_H451_ADR)
#define SBB_PARAM_L451_REG ((sbb_param_l451_reg_t*) SBB_PARAM_L451_ADR)
#define SBB_PARAM_H452_REG ((sbb_param_h452_reg_t*) SBB_PARAM_H452_ADR)
#define SBB_PARAM_L452_REG ((sbb_param_l452_reg_t*) SBB_PARAM_L452_ADR)
#define SBB_PARAM_H453_REG ((sbb_param_h453_reg_t*) SBB_PARAM_H453_ADR)
#define SBB_PARAM_L453_REG ((sbb_param_l453_reg_t*) SBB_PARAM_L453_ADR)
#define SBB_PARAM_H454_REG ((sbb_param_h454_reg_t*) SBB_PARAM_H454_ADR)
#define SBB_PARAM_L454_REG ((sbb_param_l454_reg_t*) SBB_PARAM_L454_ADR)
#define SBB_PARAM_H455_REG ((sbb_param_h455_reg_t*) SBB_PARAM_H455_ADR)
#define SBB_PARAM_L455_REG ((sbb_param_l455_reg_t*) SBB_PARAM_L455_ADR)
#define SBB_PARAM_H456_REG ((sbb_param_h456_reg_t*) SBB_PARAM_H456_ADR)
#define SBB_PARAM_L456_REG ((sbb_param_l456_reg_t*) SBB_PARAM_L456_ADR)
#define SBB_PARAM_H457_REG ((sbb_param_h457_reg_t*) SBB_PARAM_H457_ADR)
#define SBB_PARAM_L457_REG ((sbb_param_l457_reg_t*) SBB_PARAM_L457_ADR)
#define SBB_PARAM_H458_REG ((sbb_param_h458_reg_t*) SBB_PARAM_H458_ADR)
#define SBB_PARAM_L458_REG ((sbb_param_l458_reg_t*) SBB_PARAM_L458_ADR)
#define SBB_PARAM_H459_REG ((sbb_param_h459_reg_t*) SBB_PARAM_H459_ADR)
#define SBB_PARAM_L459_REG ((sbb_param_l459_reg_t*) SBB_PARAM_L459_ADR)
#define SBB_PARAM_H460_REG ((sbb_param_h460_reg_t*) SBB_PARAM_H460_ADR)
#define SBB_PARAM_L460_REG ((sbb_param_l460_reg_t*) SBB_PARAM_L460_ADR)
#define SBB_PARAM_H461_REG ((sbb_param_h461_reg_t*) SBB_PARAM_H461_ADR)
#define SBB_PARAM_L461_REG ((sbb_param_l461_reg_t*) SBB_PARAM_L461_ADR)
#define SBB_PARAM_H462_REG ((sbb_param_h462_reg_t*) SBB_PARAM_H462_ADR)
#define SBB_PARAM_L462_REG ((sbb_param_l462_reg_t*) SBB_PARAM_L462_ADR)
#define SBB_PARAM_H463_REG ((sbb_param_h463_reg_t*) SBB_PARAM_H463_ADR)
#define SBB_PARAM_L463_REG ((sbb_param_l463_reg_t*) SBB_PARAM_L463_ADR)
#define SBB_PARAM_H464_REG ((sbb_param_h464_reg_t*) SBB_PARAM_H464_ADR)
#define SBB_PARAM_L464_REG ((sbb_param_l464_reg_t*) SBB_PARAM_L464_ADR)
#define SBB_PARAM_H465_REG ((sbb_param_h465_reg_t*) SBB_PARAM_H465_ADR)
#define SBB_PARAM_L465_REG ((sbb_param_l465_reg_t*) SBB_PARAM_L465_ADR)
#define SBB_PARAM_H466_REG ((sbb_param_h466_reg_t*) SBB_PARAM_H466_ADR)
#define SBB_PARAM_L466_REG ((sbb_param_l466_reg_t*) SBB_PARAM_L466_ADR)
#define SBB_PARAM_H467_REG ((sbb_param_h467_reg_t*) SBB_PARAM_H467_ADR)
#define SBB_PARAM_L467_REG ((sbb_param_l467_reg_t*) SBB_PARAM_L467_ADR)
#define SBB_PARAM_H468_REG ((sbb_param_h468_reg_t*) SBB_PARAM_H468_ADR)
#define SBB_PARAM_L468_REG ((sbb_param_l468_reg_t*) SBB_PARAM_L468_ADR)
#define SBB_PARAM_H469_REG ((sbb_param_h469_reg_t*) SBB_PARAM_H469_ADR)
#define SBB_PARAM_L469_REG ((sbb_param_l469_reg_t*) SBB_PARAM_L469_ADR)
#define SBB_PARAM_H470_REG ((sbb_param_h470_reg_t*) SBB_PARAM_H470_ADR)
#define SBB_PARAM_L470_REG ((sbb_param_l470_reg_t*) SBB_PARAM_L470_ADR)
#define SBB_PARAM_H471_REG ((sbb_param_h471_reg_t*) SBB_PARAM_H471_ADR)
#define SBB_PARAM_L471_REG ((sbb_param_l471_reg_t*) SBB_PARAM_L471_ADR)
#define SBB_PARAM_H472_REG ((sbb_param_h472_reg_t*) SBB_PARAM_H472_ADR)
#define SBB_PARAM_L472_REG ((sbb_param_l472_reg_t*) SBB_PARAM_L472_ADR)
#define SBB_PARAM_H473_REG ((sbb_param_h473_reg_t*) SBB_PARAM_H473_ADR)
#define SBB_PARAM_L473_REG ((sbb_param_l473_reg_t*) SBB_PARAM_L473_ADR)
#define SBB_PARAM_H474_REG ((sbb_param_h474_reg_t*) SBB_PARAM_H474_ADR)
#define SBB_PARAM_L474_REG ((sbb_param_l474_reg_t*) SBB_PARAM_L474_ADR)
#define SBB_PARAM_H475_REG ((sbb_param_h475_reg_t*) SBB_PARAM_H475_ADR)
#define SBB_PARAM_L475_REG ((sbb_param_l475_reg_t*) SBB_PARAM_L475_ADR)
#define SBB_PARAM_H476_REG ((sbb_param_h476_reg_t*) SBB_PARAM_H476_ADR)
#define SBB_PARAM_L476_REG ((sbb_param_l476_reg_t*) SBB_PARAM_L476_ADR)
#define SBB_PARAM_H477_REG ((sbb_param_h477_reg_t*) SBB_PARAM_H477_ADR)
#define SBB_PARAM_L477_REG ((sbb_param_l477_reg_t*) SBB_PARAM_L477_ADR)
#define SBB_PARAM_H478_REG ((sbb_param_h478_reg_t*) SBB_PARAM_H478_ADR)
#define SBB_PARAM_L478_REG ((sbb_param_l478_reg_t*) SBB_PARAM_L478_ADR)
#define SBB_PARAM_H479_REG ((sbb_param_h479_reg_t*) SBB_PARAM_H479_ADR)
#define SBB_PARAM_L479_REG ((sbb_param_l479_reg_t*) SBB_PARAM_L479_ADR)
#define SBB_PARAM_H480_REG ((sbb_param_h480_reg_t*) SBB_PARAM_H480_ADR)
#define SBB_PARAM_L480_REG ((sbb_param_l480_reg_t*) SBB_PARAM_L480_ADR)
#define SBB_PARAM_H481_REG ((sbb_param_h481_reg_t*) SBB_PARAM_H481_ADR)
#define SBB_PARAM_L481_REG ((sbb_param_l481_reg_t*) SBB_PARAM_L481_ADR)
#define SBB_PARAM_H482_REG ((sbb_param_h482_reg_t*) SBB_PARAM_H482_ADR)
#define SBB_PARAM_L482_REG ((sbb_param_l482_reg_t*) SBB_PARAM_L482_ADR)
#define SBB_PARAM_H483_REG ((sbb_param_h483_reg_t*) SBB_PARAM_H483_ADR)
#define SBB_PARAM_L483_REG ((sbb_param_l483_reg_t*) SBB_PARAM_L483_ADR)
#define SBB_PARAM_H484_REG ((sbb_param_h484_reg_t*) SBB_PARAM_H484_ADR)
#define SBB_PARAM_L484_REG ((sbb_param_l484_reg_t*) SBB_PARAM_L484_ADR)
#define SBB_PARAM_H485_REG ((sbb_param_h485_reg_t*) SBB_PARAM_H485_ADR)
#define SBB_PARAM_L485_REG ((sbb_param_l485_reg_t*) SBB_PARAM_L485_ADR)
#define SBB_PARAM_H486_REG ((sbb_param_h486_reg_t*) SBB_PARAM_H486_ADR)
#define SBB_PARAM_L486_REG ((sbb_param_l486_reg_t*) SBB_PARAM_L486_ADR)
#define SBB_PARAM_H487_REG ((sbb_param_h487_reg_t*) SBB_PARAM_H487_ADR)
#define SBB_PARAM_L487_REG ((sbb_param_l487_reg_t*) SBB_PARAM_L487_ADR)
#define SBB_PARAM_H488_REG ((sbb_param_h488_reg_t*) SBB_PARAM_H488_ADR)
#define SBB_PARAM_L488_REG ((sbb_param_l488_reg_t*) SBB_PARAM_L488_ADR)
#define SBB_PARAM_H489_REG ((sbb_param_h489_reg_t*) SBB_PARAM_H489_ADR)
#define SBB_PARAM_L489_REG ((sbb_param_l489_reg_t*) SBB_PARAM_L489_ADR)
#define SBB_PARAM_H490_REG ((sbb_param_h490_reg_t*) SBB_PARAM_H490_ADR)
#define SBB_PARAM_L490_REG ((sbb_param_l490_reg_t*) SBB_PARAM_L490_ADR)
#define SBB_PARAM_H491_REG ((sbb_param_h491_reg_t*) SBB_PARAM_H491_ADR)
#define SBB_PARAM_L491_REG ((sbb_param_l491_reg_t*) SBB_PARAM_L491_ADR)
#define SBB_PARAM_H492_REG ((sbb_param_h492_reg_t*) SBB_PARAM_H492_ADR)
#define SBB_PARAM_L492_REG ((sbb_param_l492_reg_t*) SBB_PARAM_L492_ADR)
#define SBB_PARAM_H493_REG ((sbb_param_h493_reg_t*) SBB_PARAM_H493_ADR)
#define SBB_PARAM_L493_REG ((sbb_param_l493_reg_t*) SBB_PARAM_L493_ADR)
#define SBB_PARAM_H494_REG ((sbb_param_h494_reg_t*) SBB_PARAM_H494_ADR)
#define SBB_PARAM_L494_REG ((sbb_param_l494_reg_t*) SBB_PARAM_L494_ADR)
#define SBB_PARAM_H495_REG ((sbb_param_h495_reg_t*) SBB_PARAM_H495_ADR)
#define SBB_PARAM_L495_REG ((sbb_param_l495_reg_t*) SBB_PARAM_L495_ADR)
#define SBB_PARAM_H496_REG ((sbb_param_h496_reg_t*) SBB_PARAM_H496_ADR)
#define SBB_PARAM_L496_REG ((sbb_param_l496_reg_t*) SBB_PARAM_L496_ADR)
#define SBB_PARAM_H497_REG ((sbb_param_h497_reg_t*) SBB_PARAM_H497_ADR)
#define SBB_PARAM_L497_REG ((sbb_param_l497_reg_t*) SBB_PARAM_L497_ADR)
#define SBB_PARAM_H498_REG ((sbb_param_h498_reg_t*) SBB_PARAM_H498_ADR)
#define SBB_PARAM_L498_REG ((sbb_param_l498_reg_t*) SBB_PARAM_L498_ADR)
#define SBB_PARAM_H499_REG ((sbb_param_h499_reg_t*) SBB_PARAM_H499_ADR)
#define SBB_PARAM_L499_REG ((sbb_param_l499_reg_t*) SBB_PARAM_L499_ADR)
#define SBB_PARAM_H500_REG ((sbb_param_h500_reg_t*) SBB_PARAM_H500_ADR)
#define SBB_PARAM_L500_REG ((sbb_param_l500_reg_t*) SBB_PARAM_L500_ADR)
#define SBB_PARAM_H501_REG ((sbb_param_h501_reg_t*) SBB_PARAM_H501_ADR)
#define SBB_PARAM_L501_REG ((sbb_param_l501_reg_t*) SBB_PARAM_L501_ADR)
#define SBB_PARAM_H502_REG ((sbb_param_h502_reg_t*) SBB_PARAM_H502_ADR)
#define SBB_PARAM_L502_REG ((sbb_param_l502_reg_t*) SBB_PARAM_L502_ADR)
#define SBB_PARAM_H503_REG ((sbb_param_h503_reg_t*) SBB_PARAM_H503_ADR)
#define SBB_PARAM_L503_REG ((sbb_param_l503_reg_t*) SBB_PARAM_L503_ADR)
#define SBB_PARAM_H504_REG ((sbb_param_h504_reg_t*) SBB_PARAM_H504_ADR)
#define SBB_PARAM_L504_REG ((sbb_param_l504_reg_t*) SBB_PARAM_L504_ADR)
#define SBB_PARAM_H505_REG ((sbb_param_h505_reg_t*) SBB_PARAM_H505_ADR)
#define SBB_PARAM_L505_REG ((sbb_param_l505_reg_t*) SBB_PARAM_L505_ADR)
#define SBB_PARAM_H506_REG ((sbb_param_h506_reg_t*) SBB_PARAM_H506_ADR)
#define SBB_PARAM_L506_REG ((sbb_param_l506_reg_t*) SBB_PARAM_L506_ADR)
#define SBB_PARAM_H507_REG ((sbb_param_h507_reg_t*) SBB_PARAM_H507_ADR)
#define SBB_PARAM_L507_REG ((sbb_param_l507_reg_t*) SBB_PARAM_L507_ADR)
#define SBB_PARAM_H508_REG ((sbb_param_h508_reg_t*) SBB_PARAM_H508_ADR)
#define SBB_PARAM_L508_REG ((sbb_param_l508_reg_t*) SBB_PARAM_L508_ADR)
#define SBB_PARAM_H509_REG ((sbb_param_h509_reg_t*) SBB_PARAM_H509_ADR)
#define SBB_PARAM_L509_REG ((sbb_param_l509_reg_t*) SBB_PARAM_L509_ADR)
#define SBB_PARAM_H510_REG ((sbb_param_h510_reg_t*) SBB_PARAM_H510_ADR)
#define SBB_PARAM_L510_REG ((sbb_param_l510_reg_t*) SBB_PARAM_L510_ADR)
#define SBB_PARAM_H511_REG ((sbb_param_h511_reg_t*) SBB_PARAM_H511_ADR)
#define SBB_PARAM_L511_REG ((sbb_param_l511_reg_t*) SBB_PARAM_L511_ADR)
#define SBB_DBG_STAT_REG ((sbb_dbg_stat_reg_t*) SBB_DBG_STAT_ADR)
#define SBB_INVLD_INST_ADDR_REG ((sbb_invld_inst_addr_reg_t*) SBB_INVLD_INST_ADDR_ADR)
#define SBB_PC_DATA_ADDR_REG ((sbb_pc_data_addr_reg_t*) SBB_PC_DATA_ADDR_ADR)
#define SBB_DEC_STG_PC_REG ((sbb_dec_stg_pc_reg_t*) SBB_DEC_STG_PC_ADR)
#define SBB_DEC_STG_OPCODE_REG ((sbb_dec_stg_opcode_reg_t*) SBB_DEC_STG_OPCODE_ADR)
#define SBB_ISS_STG_PC_REG ((sbb_iss_stg_pc_reg_t*) SBB_ISS_STG_PC_ADR)
#define SBB_ISS_STG_OPCODE_REG ((sbb_iss_stg_opcode_reg_t*) SBB_ISS_STG_OPCODE_ADR)
#define SBB_STG_STAT_REG ((sbb_stg_stat_reg_t*) SBB_STG_STAT_ADR)
#define SBB_FREG_HEADPTR_REG ((sbb_freg_headptr_reg_t*) SBB_FREG_HEADPTR_ADR)
#define SBB_FREG_TAILPTR_REG ((sbb_freg_tailptr_reg_t*) SBB_FREG_TAILPTR_ADR)
#define SBB_IN_FIFO_HEADPTR_REG ((sbb_in_fifo_headptr_reg_t*) SBB_IN_FIFO_HEADPTR_ADR)
#define SBB_IN_FIFO_TAILPTR_REG ((sbb_in_fifo_tailptr_reg_t*) SBB_IN_FIFO_TAILPTR_ADR)
#define SBB_OUT_FIFO_HEADPTR_REG ((sbb_out_fifo_headptr_reg_t*) SBB_OUT_FIFO_HEADPTR_ADR)
#define SBB_OUT_FIFO_TAILPTR_REG ((sbb_out_fifo_tailptr_reg_t*) SBB_OUT_FIFO_TAILPTR_ADR)
#define SBB_STGMEM_FIFO_HEADPTR_REG ((sbb_stgmem_fifo_headptr_reg_t*) SBB_STGMEM_FIFO_HEADPTR_ADR)
#define SBB_STGMEM_FIFO_TAILPTR_REG ((sbb_stgmem_fifo_tailptr_reg_t*) SBB_STGMEM_FIFO_TAILPTR_ADR)
#define SBB_CPI_H_REG ((sbb_cpi_h_reg_t*) SBB_CPI_H_ADR)
#define SBB_CPI_L_REG ((sbb_cpi_l_reg_t*) SBB_CPI_L_ADR)
#define SBB_IREG_H_REG ((sbb_ireg_h_reg_t*) SBB_IREG_H_ADR)
#define SBB_IREG_L_REG ((sbb_ireg_l_reg_t*) SBB_IREG_L_ADR)
#define SBB_IN_FIFO_HOF_H_REG ((sbb_in_fifo_hof_h_reg_t*) SBB_IN_FIFO_HOF_H_ADR)
#define SBB_IN_FIFO_HOF_L_REG ((sbb_in_fifo_hof_l_reg_t*) SBB_IN_FIFO_HOF_L_ADR)
#define SBB_OUT_FIFO_HOF_H_REG ((sbb_out_fifo_hof_h_reg_t*) SBB_OUT_FIFO_HOF_H_ADR)
#define SBB_OUT_FIFO_HOF_L_REG ((sbb_out_fifo_hof_l_reg_t*) SBB_OUT_FIFO_HOF_L_ADR)
#define SBB_FIFO_OU_STS_REG ((sbb_fifo_ou_sts_reg_t*) SBB_FIFO_OU_STS_ADR)
#define SBB_FIFO_FE_STS_REG ((sbb_fifo_fe_sts_reg_t*) SBB_FIFO_FE_STS_ADR)
#define SBB_GENERAL_STAT_REG ((sbb_general_stat_reg_t*) SBB_GENERAL_STAT_ADR)
#define SBB_CLR_MEM_REG ((sbb_clr_mem_reg_t*) SBB_CLR_MEM_ADR)
#define SBB_AXI_CTRL_REG ((sbb_axi_ctrl_reg_t*) SBB_AXI_CTRL_ADR)
#define SBB_NS_RESEED_CNTER_REG ((sbb_ns_reseed_cnter_reg_t*) SBB_NS_RESEED_CNTER_ADR)
#define SBB_IN_FIFO_H0_REG ((sbb_in_fifo_h0_reg_t*) SBB_IN_FIFO_H0_ADR)
#define SBB_IN_FIFO_L0_REG ((sbb_in_fifo_l0_reg_t*) SBB_IN_FIFO_L0_ADR)
#define SBB_IN_FIFO_H1_REG ((sbb_in_fifo_h1_reg_t*) SBB_IN_FIFO_H1_ADR)
#define SBB_IN_FIFO_L1_REG ((sbb_in_fifo_l1_reg_t*) SBB_IN_FIFO_L1_ADR)
#define SBB_IN_FIFO_H2_REG ((sbb_in_fifo_h2_reg_t*) SBB_IN_FIFO_H2_ADR)
#define SBB_IN_FIFO_L2_REG ((sbb_in_fifo_l2_reg_t*) SBB_IN_FIFO_L2_ADR)
#define SBB_IN_FIFO_H3_REG ((sbb_in_fifo_h3_reg_t*) SBB_IN_FIFO_H3_ADR)
#define SBB_IN_FIFO_L3_REG ((sbb_in_fifo_l3_reg_t*) SBB_IN_FIFO_L3_ADR)
#define SBB_IN_FIFO_H4_REG ((sbb_in_fifo_h4_reg_t*) SBB_IN_FIFO_H4_ADR)
#define SBB_IN_FIFO_L4_REG ((sbb_in_fifo_l4_reg_t*) SBB_IN_FIFO_L4_ADR)
#define SBB_IN_FIFO_H5_REG ((sbb_in_fifo_h5_reg_t*) SBB_IN_FIFO_H5_ADR)
#define SBB_IN_FIFO_L5_REG ((sbb_in_fifo_l5_reg_t*) SBB_IN_FIFO_L5_ADR)
#define SBB_IN_FIFO_H6_REG ((sbb_in_fifo_h6_reg_t*) SBB_IN_FIFO_H6_ADR)
#define SBB_IN_FIFO_L6_REG ((sbb_in_fifo_l6_reg_t*) SBB_IN_FIFO_L6_ADR)
#define SBB_IN_FIFO_H7_REG ((sbb_in_fifo_h7_reg_t*) SBB_IN_FIFO_H7_ADR)
#define SBB_IN_FIFO_L7_REG ((sbb_in_fifo_l7_reg_t*) SBB_IN_FIFO_L7_ADR)
#define SBB_OUT_FIFO_H0_REG ((sbb_out_fifo_h0_reg_t*) SBB_OUT_FIFO_H0_ADR)
#define SBB_OUT_FIFO_L0_REG ((sbb_out_fifo_l0_reg_t*) SBB_OUT_FIFO_L0_ADR)
#define SBB_OUT_FIFO_H1_REG ((sbb_out_fifo_h1_reg_t*) SBB_OUT_FIFO_H1_ADR)
#define SBB_OUT_FIFO_L1_REG ((sbb_out_fifo_l1_reg_t*) SBB_OUT_FIFO_L1_ADR)
#define SBB_OUT_FIFO_H2_REG ((sbb_out_fifo_h2_reg_t*) SBB_OUT_FIFO_H2_ADR)
#define SBB_OUT_FIFO_L2_REG ((sbb_out_fifo_l2_reg_t*) SBB_OUT_FIFO_L2_ADR)
#define SBB_OUT_FIFO_H3_REG ((sbb_out_fifo_h3_reg_t*) SBB_OUT_FIFO_H3_ADR)
#define SBB_OUT_FIFO_L3_REG ((sbb_out_fifo_l3_reg_t*) SBB_OUT_FIFO_L3_ADR)
#define SBB_OUT_FIFO_H4_REG ((sbb_out_fifo_h4_reg_t*) SBB_OUT_FIFO_H4_ADR)
#define SBB_OUT_FIFO_L4_REG ((sbb_out_fifo_l4_reg_t*) SBB_OUT_FIFO_L4_ADR)
#define SBB_OUT_FIFO_H5_REG ((sbb_out_fifo_h5_reg_t*) SBB_OUT_FIFO_H5_ADR)
#define SBB_OUT_FIFO_L5_REG ((sbb_out_fifo_l5_reg_t*) SBB_OUT_FIFO_L5_ADR)
#define SBB_OUT_FIFO_H6_REG ((sbb_out_fifo_h6_reg_t*) SBB_OUT_FIFO_H6_ADR)
#define SBB_OUT_FIFO_L6_REG ((sbb_out_fifo_l6_reg_t*) SBB_OUT_FIFO_L6_ADR)
#define SBB_OUT_FIFO_H7_REG ((sbb_out_fifo_h7_reg_t*) SBB_OUT_FIFO_H7_ADR)
#define SBB_OUT_FIFO_L7_REG ((sbb_out_fifo_l7_reg_t*) SBB_OUT_FIFO_L7_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    const uint8_t        reservedArea0 [2048]; /*< Address offset = 0x0 */
    sbb_semaphore_reg_t SEMAPHORE; /*< Address offset = 0x800 */
    sbb_function_reg_t FUNCTION; /*< Address offset = 0x804 */
    sbb_auth_stat_param_reg_t AUTH_STAT_PARAM; /*< Address offset = 0x808 */
    sbb_auth_stat_reg_t AUTH_STAT; /*< Address offset = 0x80c */
    sbb_stat0_reg_t STAT0; /*< Address offset = 0x810 */
    sbb_stat1_reg_t STAT1; /*< Address offset = 0x814 */
    sbb_dbg0_reg_t DBG0; /*< Address offset = 0x818 */
    sbb_dbg1_reg_t DBG1; /*< Address offset = 0x81c */
    sbb_vendor0_reg_t VENDOR0; /*< Address offset = 0x820 */
    sbb_vendor1_reg_t VENDOR1; /*< Address offset = 0x824 */
    sbb_rslt0_reg_t RSLT0; /*< Address offset = 0x828 */
    sbb_rslt1_reg_t RSLT1; /*< Address offset = 0x82c */
    sbb_meas_actrl_verif_reg_t MEAS_ACTRL_VERIF; /*< Address offset = 0x830 */
    sbb_meas_actrl_sbb_reg_t MEAS_ACTRL_SBB; /*< Address offset = 0x834 */
    sbb_meas_actrl_ext_reg_t MEAS_ACTRL_EXT; /*< Address offset = 0x838 */
    sbb_meas_actrl_clr_reg_t MEAS_ACTRL_CLR; /*< Address offset = 0x83c */
    sbb_unique_id0_reg_t UNIQUE_ID0; /*< Address offset = 0x840 */
    sbb_unique_id1_reg_t UNIQUE_ID1; /*< Address offset = 0x844 */
    sbb_hw_ver0_reg_t HW_VER0; /*< Address offset = 0x848 */
    sbb_hw_ver1_reg_t HW_VER1; /*< Address offset = 0x84c */
    const uint8_t        reservedArea1 [48];  /*< Address offset = 0x850 */
    sbb_meas_h0_reg_t MEAS_H0; /*< Address offset = 0x880 */
    sbb_meas_l0_reg_t MEAS_L0; /*< Address offset = 0x884 */
    sbb_meas_h1_reg_t MEAS_H1; /*< Address offset = 0x888 */
    sbb_meas_l1_reg_t MEAS_L1; /*< Address offset = 0x88c */
    sbb_meas_h2_reg_t MEAS_H2; /*< Address offset = 0x890 */
    sbb_meas_l2_reg_t MEAS_L2; /*< Address offset = 0x894 */
    sbb_meas_h3_reg_t MEAS_H3; /*< Address offset = 0x898 */
    sbb_meas_l3_reg_t MEAS_L3; /*< Address offset = 0x89c */
    sbb_meas_h4_reg_t MEAS_H4; /*< Address offset = 0x8a0 */
    sbb_meas_l4_reg_t MEAS_L4; /*< Address offset = 0x8a4 */
    sbb_meas_h5_reg_t MEAS_H5; /*< Address offset = 0x8a8 */
    sbb_meas_l5_reg_t MEAS_L5; /*< Address offset = 0x8ac */
    sbb_meas_h6_reg_t MEAS_H6; /*< Address offset = 0x8b0 */
    sbb_meas_l6_reg_t MEAS_L6; /*< Address offset = 0x8b4 */
    sbb_meas_h7_reg_t MEAS_H7; /*< Address offset = 0x8b8 */
    sbb_meas_l7_reg_t MEAS_L7; /*< Address offset = 0x8bc */
    sbb_meas_h8_reg_t MEAS_H8; /*< Address offset = 0x8c0 */
    sbb_meas_l8_reg_t MEAS_L8; /*< Address offset = 0x8c4 */
    sbb_meas_h9_reg_t MEAS_H9; /*< Address offset = 0x8c8 */
    sbb_meas_l9_reg_t MEAS_L9; /*< Address offset = 0x8cc */
    sbb_meas_h10_reg_t MEAS_H10; /*< Address offset = 0x8d0 */
    sbb_meas_l10_reg_t MEAS_L10; /*< Address offset = 0x8d4 */
    sbb_meas_h11_reg_t MEAS_H11; /*< Address offset = 0x8d8 */
    sbb_meas_l11_reg_t MEAS_L11; /*< Address offset = 0x8dc */
    sbb_meas_h12_reg_t MEAS_H12; /*< Address offset = 0x8e0 */
    sbb_meas_l12_reg_t MEAS_L12; /*< Address offset = 0x8e4 */
    sbb_meas_h13_reg_t MEAS_H13; /*< Address offset = 0x8e8 */
    sbb_meas_l13_reg_t MEAS_L13; /*< Address offset = 0x8ec */
    sbb_meas_h14_reg_t MEAS_H14; /*< Address offset = 0x8f0 */
    sbb_meas_l14_reg_t MEAS_L14; /*< Address offset = 0x8f4 */
    sbb_meas_h15_reg_t MEAS_H15; /*< Address offset = 0x8f8 */
    sbb_meas_l15_reg_t MEAS_L15; /*< Address offset = 0x8fc */
    sbb_meas_h16_reg_t MEAS_H16; /*< Address offset = 0x900 */
    sbb_meas_l16_reg_t MEAS_L16; /*< Address offset = 0x904 */
    sbb_meas_h17_reg_t MEAS_H17; /*< Address offset = 0x908 */
    sbb_meas_l17_reg_t MEAS_L17; /*< Address offset = 0x90c */
    sbb_meas_h18_reg_t MEAS_H18; /*< Address offset = 0x910 */
    sbb_meas_l18_reg_t MEAS_L18; /*< Address offset = 0x914 */
    sbb_meas_h19_reg_t MEAS_H19; /*< Address offset = 0x918 */
    sbb_meas_l19_reg_t MEAS_L19; /*< Address offset = 0x91c */
    sbb_meas_h20_reg_t MEAS_H20; /*< Address offset = 0x920 */
    sbb_meas_l20_reg_t MEAS_L20; /*< Address offset = 0x924 */
    sbb_meas_h21_reg_t MEAS_H21; /*< Address offset = 0x928 */
    sbb_meas_l21_reg_t MEAS_L21; /*< Address offset = 0x92c */
    sbb_meas_h22_reg_t MEAS_H22; /*< Address offset = 0x930 */
    sbb_meas_l22_reg_t MEAS_L22; /*< Address offset = 0x934 */
    sbb_meas_h23_reg_t MEAS_H23; /*< Address offset = 0x938 */
    sbb_meas_l23_reg_t MEAS_L23; /*< Address offset = 0x93c */
    sbb_meas_h24_reg_t MEAS_H24; /*< Address offset = 0x940 */
    sbb_meas_l24_reg_t MEAS_L24; /*< Address offset = 0x944 */
    sbb_meas_h25_reg_t MEAS_H25; /*< Address offset = 0x948 */
    sbb_meas_l25_reg_t MEAS_L25; /*< Address offset = 0x94c */
    sbb_meas_h26_reg_t MEAS_H26; /*< Address offset = 0x950 */
    sbb_meas_l26_reg_t MEAS_L26; /*< Address offset = 0x954 */
    sbb_meas_h27_reg_t MEAS_H27; /*< Address offset = 0x958 */
    sbb_meas_l27_reg_t MEAS_L27; /*< Address offset = 0x95c */
    sbb_meas_h28_reg_t MEAS_H28; /*< Address offset = 0x960 */
    sbb_meas_l28_reg_t MEAS_L28; /*< Address offset = 0x964 */
    sbb_meas_h29_reg_t MEAS_H29; /*< Address offset = 0x968 */
    sbb_meas_l29_reg_t MEAS_L29; /*< Address offset = 0x96c */
    sbb_meas_h30_reg_t MEAS_H30; /*< Address offset = 0x970 */
    sbb_meas_l30_reg_t MEAS_L30; /*< Address offset = 0x974 */
    sbb_meas_h31_reg_t MEAS_H31; /*< Address offset = 0x978 */
    sbb_meas_l31_reg_t MEAS_L31; /*< Address offset = 0x97c */
    sbb_meas_h32_reg_t MEAS_H32; /*< Address offset = 0x980 */
    sbb_meas_l32_reg_t MEAS_L32; /*< Address offset = 0x984 */
    sbb_meas_h33_reg_t MEAS_H33; /*< Address offset = 0x988 */
    sbb_meas_l33_reg_t MEAS_L33; /*< Address offset = 0x98c */
    sbb_meas_h34_reg_t MEAS_H34; /*< Address offset = 0x990 */
    sbb_meas_l34_reg_t MEAS_L34; /*< Address offset = 0x994 */
    sbb_meas_h35_reg_t MEAS_H35; /*< Address offset = 0x998 */
    sbb_meas_l35_reg_t MEAS_L35; /*< Address offset = 0x99c */
    sbb_meas_h36_reg_t MEAS_H36; /*< Address offset = 0x9a0 */
    sbb_meas_l36_reg_t MEAS_L36; /*< Address offset = 0x9a4 */
    sbb_meas_h37_reg_t MEAS_H37; /*< Address offset = 0x9a8 */
    sbb_meas_l37_reg_t MEAS_L37; /*< Address offset = 0x9ac */
    sbb_meas_h38_reg_t MEAS_H38; /*< Address offset = 0x9b0 */
    sbb_meas_l38_reg_t MEAS_L38; /*< Address offset = 0x9b4 */
    sbb_meas_h39_reg_t MEAS_H39; /*< Address offset = 0x9b8 */
    sbb_meas_l39_reg_t MEAS_L39; /*< Address offset = 0x9bc */
    sbb_meas_h40_reg_t MEAS_H40; /*< Address offset = 0x9c0 */
    sbb_meas_l40_reg_t MEAS_L40; /*< Address offset = 0x9c4 */
    sbb_meas_h41_reg_t MEAS_H41; /*< Address offset = 0x9c8 */
    sbb_meas_l41_reg_t MEAS_L41; /*< Address offset = 0x9cc */
    sbb_meas_h42_reg_t MEAS_H42; /*< Address offset = 0x9d0 */
    sbb_meas_l42_reg_t MEAS_L42; /*< Address offset = 0x9d4 */
    sbb_meas_h43_reg_t MEAS_H43; /*< Address offset = 0x9d8 */
    sbb_meas_l43_reg_t MEAS_L43; /*< Address offset = 0x9dc */
    sbb_meas_h44_reg_t MEAS_H44; /*< Address offset = 0x9e0 */
    sbb_meas_l44_reg_t MEAS_L44; /*< Address offset = 0x9e4 */
    sbb_meas_h45_reg_t MEAS_H45; /*< Address offset = 0x9e8 */
    sbb_meas_l45_reg_t MEAS_L45; /*< Address offset = 0x9ec */
    sbb_meas_h46_reg_t MEAS_H46; /*< Address offset = 0x9f0 */
    sbb_meas_l46_reg_t MEAS_L46; /*< Address offset = 0x9f4 */
    sbb_meas_h47_reg_t MEAS_H47; /*< Address offset = 0x9f8 */
    sbb_meas_l47_reg_t MEAS_L47; /*< Address offset = 0x9fc */
    sbb_meas_h48_reg_t MEAS_H48; /*< Address offset = 0xa00 */
    sbb_meas_l48_reg_t MEAS_L48; /*< Address offset = 0xa04 */
    sbb_meas_h49_reg_t MEAS_H49; /*< Address offset = 0xa08 */
    sbb_meas_l49_reg_t MEAS_L49; /*< Address offset = 0xa0c */
    sbb_meas_h50_reg_t MEAS_H50; /*< Address offset = 0xa10 */
    sbb_meas_l50_reg_t MEAS_L50; /*< Address offset = 0xa14 */
    sbb_meas_h51_reg_t MEAS_H51; /*< Address offset = 0xa18 */
    sbb_meas_l51_reg_t MEAS_L51; /*< Address offset = 0xa1c */
    sbb_meas_h52_reg_t MEAS_H52; /*< Address offset = 0xa20 */
    sbb_meas_l52_reg_t MEAS_L52; /*< Address offset = 0xa24 */
    sbb_meas_h53_reg_t MEAS_H53; /*< Address offset = 0xa28 */
    sbb_meas_l53_reg_t MEAS_L53; /*< Address offset = 0xa2c */
    sbb_meas_h54_reg_t MEAS_H54; /*< Address offset = 0xa30 */
    sbb_meas_l54_reg_t MEAS_L54; /*< Address offset = 0xa34 */
    sbb_meas_h55_reg_t MEAS_H55; /*< Address offset = 0xa38 */
    sbb_meas_l55_reg_t MEAS_L55; /*< Address offset = 0xa3c */
    sbb_meas_h56_reg_t MEAS_H56; /*< Address offset = 0xa40 */
    sbb_meas_l56_reg_t MEAS_L56; /*< Address offset = 0xa44 */
    sbb_meas_h57_reg_t MEAS_H57; /*< Address offset = 0xa48 */
    sbb_meas_l57_reg_t MEAS_L57; /*< Address offset = 0xa4c */
    sbb_meas_h58_reg_t MEAS_H58; /*< Address offset = 0xa50 */
    sbb_meas_l58_reg_t MEAS_L58; /*< Address offset = 0xa54 */
    sbb_meas_h59_reg_t MEAS_H59; /*< Address offset = 0xa58 */
    sbb_meas_l59_reg_t MEAS_L59; /*< Address offset = 0xa5c */
    sbb_meas_h60_reg_t MEAS_H60; /*< Address offset = 0xa60 */
    sbb_meas_l60_reg_t MEAS_L60; /*< Address offset = 0xa64 */
    sbb_meas_h61_reg_t MEAS_H61; /*< Address offset = 0xa68 */
    sbb_meas_l61_reg_t MEAS_L61; /*< Address offset = 0xa6c */
    sbb_meas_h62_reg_t MEAS_H62; /*< Address offset = 0xa70 */
    sbb_meas_l62_reg_t MEAS_L62; /*< Address offset = 0xa74 */
    sbb_meas_h63_reg_t MEAS_H63; /*< Address offset = 0xa78 */
    sbb_meas_l63_reg_t MEAS_L63; /*< Address offset = 0xa7c */
    sbb_meas_h64_reg_t MEAS_H64; /*< Address offset = 0xa80 */
    sbb_meas_l64_reg_t MEAS_L64; /*< Address offset = 0xa84 */
    sbb_meas_h65_reg_t MEAS_H65; /*< Address offset = 0xa88 */
    sbb_meas_l65_reg_t MEAS_L65; /*< Address offset = 0xa8c */
    sbb_meas_h66_reg_t MEAS_H66; /*< Address offset = 0xa90 */
    sbb_meas_l66_reg_t MEAS_L66; /*< Address offset = 0xa94 */
    sbb_meas_h67_reg_t MEAS_H67; /*< Address offset = 0xa98 */
    sbb_meas_l67_reg_t MEAS_L67; /*< Address offset = 0xa9c */
    sbb_meas_h68_reg_t MEAS_H68; /*< Address offset = 0xaa0 */
    sbb_meas_l68_reg_t MEAS_L68; /*< Address offset = 0xaa4 */
    sbb_meas_h69_reg_t MEAS_H69; /*< Address offset = 0xaa8 */
    sbb_meas_l69_reg_t MEAS_L69; /*< Address offset = 0xaac */
    sbb_meas_h70_reg_t MEAS_H70; /*< Address offset = 0xab0 */
    sbb_meas_l70_reg_t MEAS_L70; /*< Address offset = 0xab4 */
    sbb_meas_h71_reg_t MEAS_H71; /*< Address offset = 0xab8 */
    sbb_meas_l71_reg_t MEAS_L71; /*< Address offset = 0xabc */
    sbb_meas_h72_reg_t MEAS_H72; /*< Address offset = 0xac0 */
    sbb_meas_l72_reg_t MEAS_L72; /*< Address offset = 0xac4 */
    sbb_meas_h73_reg_t MEAS_H73; /*< Address offset = 0xac8 */
    sbb_meas_l73_reg_t MEAS_L73; /*< Address offset = 0xacc */
    sbb_meas_h74_reg_t MEAS_H74; /*< Address offset = 0xad0 */
    sbb_meas_l74_reg_t MEAS_L74; /*< Address offset = 0xad4 */
    sbb_meas_h75_reg_t MEAS_H75; /*< Address offset = 0xad8 */
    sbb_meas_l75_reg_t MEAS_L75; /*< Address offset = 0xadc */
    sbb_meas_h76_reg_t MEAS_H76; /*< Address offset = 0xae0 */
    sbb_meas_l76_reg_t MEAS_L76; /*< Address offset = 0xae4 */
    sbb_meas_h77_reg_t MEAS_H77; /*< Address offset = 0xae8 */
    sbb_meas_l77_reg_t MEAS_L77; /*< Address offset = 0xaec */
    sbb_meas_h78_reg_t MEAS_H78; /*< Address offset = 0xaf0 */
    sbb_meas_l78_reg_t MEAS_L78; /*< Address offset = 0xaf4 */
    sbb_meas_h79_reg_t MEAS_H79; /*< Address offset = 0xaf8 */
    sbb_meas_l79_reg_t MEAS_L79; /*< Address offset = 0xafc */
    sbb_meas_h80_reg_t MEAS_H80; /*< Address offset = 0xb00 */
    sbb_meas_l80_reg_t MEAS_L80; /*< Address offset = 0xb04 */
    sbb_meas_h81_reg_t MEAS_H81; /*< Address offset = 0xb08 */
    sbb_meas_l81_reg_t MEAS_L81; /*< Address offset = 0xb0c */
    sbb_meas_h82_reg_t MEAS_H82; /*< Address offset = 0xb10 */
    sbb_meas_l82_reg_t MEAS_L82; /*< Address offset = 0xb14 */
    sbb_meas_h83_reg_t MEAS_H83; /*< Address offset = 0xb18 */
    sbb_meas_l83_reg_t MEAS_L83; /*< Address offset = 0xb1c */
    sbb_meas_h84_reg_t MEAS_H84; /*< Address offset = 0xb20 */
    sbb_meas_l84_reg_t MEAS_L84; /*< Address offset = 0xb24 */
    sbb_meas_h85_reg_t MEAS_H85; /*< Address offset = 0xb28 */
    sbb_meas_l85_reg_t MEAS_L85; /*< Address offset = 0xb2c */
    sbb_meas_h86_reg_t MEAS_H86; /*< Address offset = 0xb30 */
    sbb_meas_l86_reg_t MEAS_L86; /*< Address offset = 0xb34 */
    sbb_meas_h87_reg_t MEAS_H87; /*< Address offset = 0xb38 */
    sbb_meas_l87_reg_t MEAS_L87; /*< Address offset = 0xb3c */
    sbb_meas_h88_reg_t MEAS_H88; /*< Address offset = 0xb40 */
    sbb_meas_l88_reg_t MEAS_L88; /*< Address offset = 0xb44 */
    sbb_meas_h89_reg_t MEAS_H89; /*< Address offset = 0xb48 */
    sbb_meas_l89_reg_t MEAS_L89; /*< Address offset = 0xb4c */
    sbb_meas_h90_reg_t MEAS_H90; /*< Address offset = 0xb50 */
    sbb_meas_l90_reg_t MEAS_L90; /*< Address offset = 0xb54 */
    sbb_meas_h91_reg_t MEAS_H91; /*< Address offset = 0xb58 */
    sbb_meas_l91_reg_t MEAS_L91; /*< Address offset = 0xb5c */
    sbb_meas_h92_reg_t MEAS_H92; /*< Address offset = 0xb60 */
    sbb_meas_l92_reg_t MEAS_L92; /*< Address offset = 0xb64 */
    sbb_meas_h93_reg_t MEAS_H93; /*< Address offset = 0xb68 */
    sbb_meas_l93_reg_t MEAS_L93; /*< Address offset = 0xb6c */
    sbb_meas_h94_reg_t MEAS_H94; /*< Address offset = 0xb70 */
    sbb_meas_l94_reg_t MEAS_L94; /*< Address offset = 0xb74 */
    sbb_meas_h95_reg_t MEAS_H95; /*< Address offset = 0xb78 */
    sbb_meas_l95_reg_t MEAS_L95; /*< Address offset = 0xb7c */
    sbb_meas_h96_reg_t MEAS_H96; /*< Address offset = 0xb80 */
    sbb_meas_l96_reg_t MEAS_L96; /*< Address offset = 0xb84 */
    sbb_meas_h97_reg_t MEAS_H97; /*< Address offset = 0xb88 */
    sbb_meas_l97_reg_t MEAS_L97; /*< Address offset = 0xb8c */
    sbb_meas_h98_reg_t MEAS_H98; /*< Address offset = 0xb90 */
    sbb_meas_l98_reg_t MEAS_L98; /*< Address offset = 0xb94 */
    sbb_meas_h99_reg_t MEAS_H99; /*< Address offset = 0xb98 */
    sbb_meas_l99_reg_t MEAS_L99; /*< Address offset = 0xb9c */
    sbb_meas_h100_reg_t MEAS_H100; /*< Address offset = 0xba0 */
    sbb_meas_l100_reg_t MEAS_L100; /*< Address offset = 0xba4 */
    sbb_meas_h101_reg_t MEAS_H101; /*< Address offset = 0xba8 */
    sbb_meas_l101_reg_t MEAS_L101; /*< Address offset = 0xbac */
    sbb_meas_h102_reg_t MEAS_H102; /*< Address offset = 0xbb0 */
    sbb_meas_l102_reg_t MEAS_L102; /*< Address offset = 0xbb4 */
    sbb_meas_h103_reg_t MEAS_H103; /*< Address offset = 0xbb8 */
    sbb_meas_l103_reg_t MEAS_L103; /*< Address offset = 0xbbc */
    sbb_meas_h104_reg_t MEAS_H104; /*< Address offset = 0xbc0 */
    sbb_meas_l104_reg_t MEAS_L104; /*< Address offset = 0xbc4 */
    sbb_meas_h105_reg_t MEAS_H105; /*< Address offset = 0xbc8 */
    sbb_meas_l105_reg_t MEAS_L105; /*< Address offset = 0xbcc */
    sbb_meas_h106_reg_t MEAS_H106; /*< Address offset = 0xbd0 */
    sbb_meas_l106_reg_t MEAS_L106; /*< Address offset = 0xbd4 */
    sbb_meas_h107_reg_t MEAS_H107; /*< Address offset = 0xbd8 */
    sbb_meas_l107_reg_t MEAS_L107; /*< Address offset = 0xbdc */
    sbb_meas_h108_reg_t MEAS_H108; /*< Address offset = 0xbe0 */
    sbb_meas_l108_reg_t MEAS_L108; /*< Address offset = 0xbe4 */
    sbb_meas_h109_reg_t MEAS_H109; /*< Address offset = 0xbe8 */
    sbb_meas_l109_reg_t MEAS_L109; /*< Address offset = 0xbec */
    sbb_meas_h110_reg_t MEAS_H110; /*< Address offset = 0xbf0 */
    sbb_meas_l110_reg_t MEAS_L110; /*< Address offset = 0xbf4 */
    sbb_meas_h111_reg_t MEAS_H111; /*< Address offset = 0xbf8 */
    sbb_meas_l111_reg_t MEAS_L111; /*< Address offset = 0xbfc */
    sbb_meas_h112_reg_t MEAS_H112; /*< Address offset = 0xc00 */
    sbb_meas_l112_reg_t MEAS_L112; /*< Address offset = 0xc04 */
    sbb_meas_h113_reg_t MEAS_H113; /*< Address offset = 0xc08 */
    sbb_meas_l113_reg_t MEAS_L113; /*< Address offset = 0xc0c */
    sbb_meas_h114_reg_t MEAS_H114; /*< Address offset = 0xc10 */
    sbb_meas_l114_reg_t MEAS_L114; /*< Address offset = 0xc14 */
    sbb_meas_h115_reg_t MEAS_H115; /*< Address offset = 0xc18 */
    sbb_meas_l115_reg_t MEAS_L115; /*< Address offset = 0xc1c */
    sbb_meas_h116_reg_t MEAS_H116; /*< Address offset = 0xc20 */
    sbb_meas_l116_reg_t MEAS_L116; /*< Address offset = 0xc24 */
    sbb_meas_h117_reg_t MEAS_H117; /*< Address offset = 0xc28 */
    sbb_meas_l117_reg_t MEAS_L117; /*< Address offset = 0xc2c */
    sbb_meas_h118_reg_t MEAS_H118; /*< Address offset = 0xc30 */
    sbb_meas_l118_reg_t MEAS_L118; /*< Address offset = 0xc34 */
    sbb_meas_h119_reg_t MEAS_H119; /*< Address offset = 0xc38 */
    sbb_meas_l119_reg_t MEAS_L119; /*< Address offset = 0xc3c */
    sbb_meas_h120_reg_t MEAS_H120; /*< Address offset = 0xc40 */
    sbb_meas_l120_reg_t MEAS_L120; /*< Address offset = 0xc44 */
    sbb_meas_h121_reg_t MEAS_H121; /*< Address offset = 0xc48 */
    sbb_meas_l121_reg_t MEAS_L121; /*< Address offset = 0xc4c */
    sbb_meas_h122_reg_t MEAS_H122; /*< Address offset = 0xc50 */
    sbb_meas_l122_reg_t MEAS_L122; /*< Address offset = 0xc54 */
    sbb_meas_h123_reg_t MEAS_H123; /*< Address offset = 0xc58 */
    sbb_meas_l123_reg_t MEAS_L123; /*< Address offset = 0xc5c */
    sbb_meas_h124_reg_t MEAS_H124; /*< Address offset = 0xc60 */
    sbb_meas_l124_reg_t MEAS_L124; /*< Address offset = 0xc64 */
    sbb_meas_h125_reg_t MEAS_H125; /*< Address offset = 0xc68 */
    sbb_meas_l125_reg_t MEAS_L125; /*< Address offset = 0xc6c */
    sbb_meas_h126_reg_t MEAS_H126; /*< Address offset = 0xc70 */
    sbb_meas_l126_reg_t MEAS_L126; /*< Address offset = 0xc74 */
    sbb_meas_h127_reg_t MEAS_H127; /*< Address offset = 0xc78 */
    sbb_meas_l127_reg_t MEAS_L127; /*< Address offset = 0xc7c */
    sbb_meas_h128_reg_t MEAS_H128; /*< Address offset = 0xc80 */
    sbb_meas_l128_reg_t MEAS_L128; /*< Address offset = 0xc84 */
    sbb_meas_h129_reg_t MEAS_H129; /*< Address offset = 0xc88 */
    sbb_meas_l129_reg_t MEAS_L129; /*< Address offset = 0xc8c */
    sbb_meas_h130_reg_t MEAS_H130; /*< Address offset = 0xc90 */
    sbb_meas_l130_reg_t MEAS_L130; /*< Address offset = 0xc94 */
    sbb_meas_h131_reg_t MEAS_H131; /*< Address offset = 0xc98 */
    sbb_meas_l131_reg_t MEAS_L131; /*< Address offset = 0xc9c */
    sbb_meas_h132_reg_t MEAS_H132; /*< Address offset = 0xca0 */
    sbb_meas_l132_reg_t MEAS_L132; /*< Address offset = 0xca4 */
    sbb_meas_h133_reg_t MEAS_H133; /*< Address offset = 0xca8 */
    sbb_meas_l133_reg_t MEAS_L133; /*< Address offset = 0xcac */
    sbb_meas_h134_reg_t MEAS_H134; /*< Address offset = 0xcb0 */
    sbb_meas_l134_reg_t MEAS_L134; /*< Address offset = 0xcb4 */
    sbb_meas_h135_reg_t MEAS_H135; /*< Address offset = 0xcb8 */
    sbb_meas_l135_reg_t MEAS_L135; /*< Address offset = 0xcbc */
    sbb_meas_h136_reg_t MEAS_H136; /*< Address offset = 0xcc0 */
    sbb_meas_l136_reg_t MEAS_L136; /*< Address offset = 0xcc4 */
    sbb_meas_h137_reg_t MEAS_H137; /*< Address offset = 0xcc8 */
    sbb_meas_l137_reg_t MEAS_L137; /*< Address offset = 0xccc */
    sbb_meas_h138_reg_t MEAS_H138; /*< Address offset = 0xcd0 */
    sbb_meas_l138_reg_t MEAS_L138; /*< Address offset = 0xcd4 */
    sbb_meas_h139_reg_t MEAS_H139; /*< Address offset = 0xcd8 */
    sbb_meas_l139_reg_t MEAS_L139; /*< Address offset = 0xcdc */
    sbb_meas_h140_reg_t MEAS_H140; /*< Address offset = 0xce0 */
    sbb_meas_l140_reg_t MEAS_L140; /*< Address offset = 0xce4 */
    sbb_meas_h141_reg_t MEAS_H141; /*< Address offset = 0xce8 */
    sbb_meas_l141_reg_t MEAS_L141; /*< Address offset = 0xcec */
    sbb_meas_h142_reg_t MEAS_H142; /*< Address offset = 0xcf0 */
    sbb_meas_l142_reg_t MEAS_L142; /*< Address offset = 0xcf4 */
    sbb_meas_h143_reg_t MEAS_H143; /*< Address offset = 0xcf8 */
    sbb_meas_l143_reg_t MEAS_L143; /*< Address offset = 0xcfc */
    sbb_pcr_h0_reg_t PCR_H0; /*< Address offset = 0xd00 */
    sbb_pcr_l0_reg_t PCR_L0; /*< Address offset = 0xd04 */
    sbb_pcr_h1_reg_t PCR_H1; /*< Address offset = 0xd08 */
    sbb_pcr_l1_reg_t PCR_L1; /*< Address offset = 0xd0c */
    sbb_pcr_h2_reg_t PCR_H2; /*< Address offset = 0xd10 */
    sbb_pcr_l2_reg_t PCR_L2; /*< Address offset = 0xd14 */
    sbb_pcr_h3_reg_t PCR_H3; /*< Address offset = 0xd18 */
    sbb_pcr_l3_reg_t PCR_L3; /*< Address offset = 0xd1c */
    sbb_pcr_h4_reg_t PCR_H4; /*< Address offset = 0xd20 */
    sbb_pcr_l4_reg_t PCR_L4; /*< Address offset = 0xd24 */
    sbb_pcr_h5_reg_t PCR_H5; /*< Address offset = 0xd28 */
    sbb_pcr_l5_reg_t PCR_L5; /*< Address offset = 0xd2c */
    sbb_pcr_h6_reg_t PCR_H6; /*< Address offset = 0xd30 */
    sbb_pcr_l6_reg_t PCR_L6; /*< Address offset = 0xd34 */
    sbb_pcr_h7_reg_t PCR_H7; /*< Address offset = 0xd38 */
    sbb_pcr_l7_reg_t PCR_L7; /*< Address offset = 0xd3c */
    sbb_pcr_h8_reg_t PCR_H8; /*< Address offset = 0xd40 */
    sbb_pcr_l8_reg_t PCR_L8; /*< Address offset = 0xd44 */
    const uint8_t        reservedArea2 [188]; /*< Address offset = 0xd48 */
    sbb_int_sts_reg_t INT_STS; /*< Address offset = 0xe04 */
    const uint8_t        reservedArea3 [4];   /*< Address offset = 0xe08 */
    sbb_int_en_reg_t INT_EN; /*< Address offset = 0xe0c */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0xe10 */
    sbb_int_frc_reg_t INT_FRC; /*< Address offset = 0xe14 */
    const uint8_t        reservedArea5 [488]; /*< Address offset = 0xe18 */
    sbb_ver_h0_reg_t VER_H0; /*< Address offset = 0x1000 */
    sbb_ver_l0_reg_t VER_L0; /*< Address offset = 0x1004 */
    sbb_ver_h1_reg_t VER_H1; /*< Address offset = 0x1008 */
    sbb_ver_l1_reg_t VER_L1; /*< Address offset = 0x100c */
    sbb_ver_h2_reg_t VER_H2; /*< Address offset = 0x1010 */
    sbb_ver_l2_reg_t VER_L2; /*< Address offset = 0x1014 */
    sbb_ver_h3_reg_t VER_H3; /*< Address offset = 0x1018 */
    sbb_ver_l3_reg_t VER_L3; /*< Address offset = 0x101c */
    sbb_efuse_h0_reg_t EFUSE_H0; /*< Address offset = 0x1020 */
    sbb_efuse_l0_reg_t EFUSE_L0; /*< Address offset = 0x1024 */
    sbb_efuse_h1_reg_t EFUSE_H1; /*< Address offset = 0x1028 */
    sbb_efuse_l1_reg_t EFUSE_L1; /*< Address offset = 0x102c */
    sbb_efuse_h2_reg_t EFUSE_H2; /*< Address offset = 0x1030 */
    sbb_efuse_l2_reg_t EFUSE_L2; /*< Address offset = 0x1034 */
    sbb_efuse_h3_reg_t EFUSE_H3; /*< Address offset = 0x1038 */
    sbb_efuse_l3_reg_t EFUSE_L3; /*< Address offset = 0x103c */
    sbb_efuse_h4_reg_t EFUSE_H4; /*< Address offset = 0x1040 */
    sbb_efuse_l4_reg_t EFUSE_L4; /*< Address offset = 0x1044 */
    sbb_efuse_h5_reg_t EFUSE_H5; /*< Address offset = 0x1048 */
    sbb_efuse_l5_reg_t EFUSE_L5; /*< Address offset = 0x104c */
    sbb_efuse_h6_reg_t EFUSE_H6; /*< Address offset = 0x1050 */
    sbb_efuse_l6_reg_t EFUSE_L6; /*< Address offset = 0x1054 */
    sbb_efuse_h7_reg_t EFUSE_H7; /*< Address offset = 0x1058 */
    sbb_efuse_l7_reg_t EFUSE_L7; /*< Address offset = 0x105c */
    sbb_efuse_h8_reg_t EFUSE_H8; /*< Address offset = 0x1060 */
    sbb_efuse_l8_reg_t EFUSE_L8; /*< Address offset = 0x1064 */
    sbb_efuse_h9_reg_t EFUSE_H9; /*< Address offset = 0x1068 */
    sbb_efuse_l9_reg_t EFUSE_L9; /*< Address offset = 0x106c */
    sbb_efuse_h10_reg_t EFUSE_H10; /*< Address offset = 0x1070 */
    sbb_efuse_l10_reg_t EFUSE_L10; /*< Address offset = 0x1074 */
    sbb_efuse_h11_reg_t EFUSE_H11; /*< Address offset = 0x1078 */
    sbb_efuse_l11_reg_t EFUSE_L11; /*< Address offset = 0x107c */
    sbb_efuse_h12_reg_t EFUSE_H12; /*< Address offset = 0x1080 */
    sbb_efuse_l12_reg_t EFUSE_L12; /*< Address offset = 0x1084 */
    sbb_efuse_h13_reg_t EFUSE_H13; /*< Address offset = 0x1088 */
    sbb_efuse_l13_reg_t EFUSE_L13; /*< Address offset = 0x108c */
    sbb_efuse_h14_reg_t EFUSE_H14; /*< Address offset = 0x1090 */
    sbb_efuse_l14_reg_t EFUSE_L14; /*< Address offset = 0x1094 */
    sbb_efuse_h15_reg_t EFUSE_H15; /*< Address offset = 0x1098 */
    sbb_efuse_l15_reg_t EFUSE_L15; /*< Address offset = 0x109c */
    sbb_efuse_h16_reg_t EFUSE_H16; /*< Address offset = 0x10a0 */
    sbb_efuse_l16_reg_t EFUSE_L16; /*< Address offset = 0x10a4 */
    sbb_efuse_h17_reg_t EFUSE_H17; /*< Address offset = 0x10a8 */
    sbb_efuse_l17_reg_t EFUSE_L17; /*< Address offset = 0x10ac */
    sbb_efuse_h18_reg_t EFUSE_H18; /*< Address offset = 0x10b0 */
    sbb_efuse_l18_reg_t EFUSE_L18; /*< Address offset = 0x10b4 */
    sbb_efuse_h19_reg_t EFUSE_H19; /*< Address offset = 0x10b8 */
    sbb_efuse_l19_reg_t EFUSE_L19; /*< Address offset = 0x10bc */
    sbb_efuse_h20_reg_t EFUSE_H20; /*< Address offset = 0x10c0 */
    sbb_efuse_l20_reg_t EFUSE_L20; /*< Address offset = 0x10c4 */
    sbb_efuse_h21_reg_t EFUSE_H21; /*< Address offset = 0x10c8 */
    sbb_efuse_l21_reg_t EFUSE_L21; /*< Address offset = 0x10cc */
    sbb_efuse_h22_reg_t EFUSE_H22; /*< Address offset = 0x10d0 */
    sbb_efuse_l22_reg_t EFUSE_L22; /*< Address offset = 0x10d4 */
    sbb_efuse_h23_reg_t EFUSE_H23; /*< Address offset = 0x10d8 */
    sbb_efuse_l23_reg_t EFUSE_L23; /*< Address offset = 0x10dc */
    sbb_efuse_h24_reg_t EFUSE_H24; /*< Address offset = 0x10e0 */
    sbb_efuse_l24_reg_t EFUSE_L24; /*< Address offset = 0x10e4 */
    sbb_efuse_h25_reg_t EFUSE_H25; /*< Address offset = 0x10e8 */
    sbb_efuse_l25_reg_t EFUSE_L25; /*< Address offset = 0x10ec */
    sbb_efuse_h26_reg_t EFUSE_H26; /*< Address offset = 0x10f0 */
    sbb_efuse_l26_reg_t EFUSE_L26; /*< Address offset = 0x10f4 */
    sbb_efuse_h27_reg_t EFUSE_H27; /*< Address offset = 0x10f8 */
    sbb_efuse_l27_reg_t EFUSE_L27; /*< Address offset = 0x10fc */
    sbb_efuse_h28_reg_t EFUSE_H28; /*< Address offset = 0x1100 */
    sbb_efuse_l28_reg_t EFUSE_L28; /*< Address offset = 0x1104 */
    sbb_efuse_h29_reg_t EFUSE_H29; /*< Address offset = 0x1108 */
    sbb_efuse_l29_reg_t EFUSE_L29; /*< Address offset = 0x110c */
    sbb_efuse_h30_reg_t EFUSE_H30; /*< Address offset = 0x1110 */
    sbb_efuse_l30_reg_t EFUSE_L30; /*< Address offset = 0x1114 */
    sbb_efuse_h31_reg_t EFUSE_H31; /*< Address offset = 0x1118 */
    sbb_efuse_l31_reg_t EFUSE_L31; /*< Address offset = 0x111c */
    sbb_efuse_h32_reg_t EFUSE_H32; /*< Address offset = 0x1120 */
    sbb_efuse_l32_reg_t EFUSE_L32; /*< Address offset = 0x1124 */
    sbb_efuse_h33_reg_t EFUSE_H33; /*< Address offset = 0x1128 */
    sbb_efuse_l33_reg_t EFUSE_L33; /*< Address offset = 0x112c */
    sbb_efuse_h34_reg_t EFUSE_H34; /*< Address offset = 0x1130 */
    sbb_efuse_l34_reg_t EFUSE_L34; /*< Address offset = 0x1134 */
    sbb_efuse_h35_reg_t EFUSE_H35; /*< Address offset = 0x1138 */
    sbb_efuse_l35_reg_t EFUSE_L35; /*< Address offset = 0x113c */
    sbb_efuse_h36_reg_t EFUSE_H36; /*< Address offset = 0x1140 */
    sbb_efuse_l36_reg_t EFUSE_L36; /*< Address offset = 0x1144 */
    sbb_efuse_h37_reg_t EFUSE_H37; /*< Address offset = 0x1148 */
    sbb_efuse_l37_reg_t EFUSE_L37; /*< Address offset = 0x114c */
    sbb_efuse_h38_reg_t EFUSE_H38; /*< Address offset = 0x1150 */
    sbb_efuse_l38_reg_t EFUSE_L38; /*< Address offset = 0x1154 */
    sbb_efuse_h39_reg_t EFUSE_H39; /*< Address offset = 0x1158 */
    sbb_efuse_l39_reg_t EFUSE_L39; /*< Address offset = 0x115c */
    sbb_efuse_h40_reg_t EFUSE_H40; /*< Address offset = 0x1160 */
    sbb_efuse_l40_reg_t EFUSE_L40; /*< Address offset = 0x1164 */
    sbb_efuse_h41_reg_t EFUSE_H41; /*< Address offset = 0x1168 */
    sbb_efuse_l41_reg_t EFUSE_L41; /*< Address offset = 0x116c */
    sbb_efuse_h42_reg_t EFUSE_H42; /*< Address offset = 0x1170 */
    sbb_efuse_l42_reg_t EFUSE_L42; /*< Address offset = 0x1174 */
    sbb_efuse_h43_reg_t EFUSE_H43; /*< Address offset = 0x1178 */
    sbb_efuse_l43_reg_t EFUSE_L43; /*< Address offset = 0x117c */
    sbb_efuse_h44_reg_t EFUSE_H44; /*< Address offset = 0x1180 */
    sbb_efuse_l44_reg_t EFUSE_L44; /*< Address offset = 0x1184 */
    sbb_efuse_h45_reg_t EFUSE_H45; /*< Address offset = 0x1188 */
    sbb_efuse_l45_reg_t EFUSE_L45; /*< Address offset = 0x118c */
    sbb_efuse_h46_reg_t EFUSE_H46; /*< Address offset = 0x1190 */
    sbb_efuse_l46_reg_t EFUSE_L46; /*< Address offset = 0x1194 */
    sbb_efuse_h47_reg_t EFUSE_H47; /*< Address offset = 0x1198 */
    sbb_efuse_l47_reg_t EFUSE_L47; /*< Address offset = 0x119c */
    sbb_efuse_h48_reg_t EFUSE_H48; /*< Address offset = 0x11a0 */
    sbb_efuse_l48_reg_t EFUSE_L48; /*< Address offset = 0x11a4 */
    sbb_efuse_h49_reg_t EFUSE_H49; /*< Address offset = 0x11a8 */
    sbb_efuse_l49_reg_t EFUSE_L49; /*< Address offset = 0x11ac */
    sbb_efuse_h50_reg_t EFUSE_H50; /*< Address offset = 0x11b0 */
    sbb_efuse_l50_reg_t EFUSE_L50; /*< Address offset = 0x11b4 */
    sbb_efuse_h51_reg_t EFUSE_H51; /*< Address offset = 0x11b8 */
    sbb_efuse_l51_reg_t EFUSE_L51; /*< Address offset = 0x11bc */
    sbb_efuse_h52_reg_t EFUSE_H52; /*< Address offset = 0x11c0 */
    sbb_efuse_l52_reg_t EFUSE_L52; /*< Address offset = 0x11c4 */
    sbb_efuse_h53_reg_t EFUSE_H53; /*< Address offset = 0x11c8 */
    sbb_efuse_l53_reg_t EFUSE_L53; /*< Address offset = 0x11cc */
    sbb_efuse_h54_reg_t EFUSE_H54; /*< Address offset = 0x11d0 */
    sbb_efuse_l54_reg_t EFUSE_L54; /*< Address offset = 0x11d4 */
    sbb_efuse_h55_reg_t EFUSE_H55; /*< Address offset = 0x11d8 */
    sbb_efuse_l55_reg_t EFUSE_L55; /*< Address offset = 0x11dc */
    sbb_efuse_h56_reg_t EFUSE_H56; /*< Address offset = 0x11e0 */
    sbb_efuse_l56_reg_t EFUSE_L56; /*< Address offset = 0x11e4 */
    sbb_efuse_h57_reg_t EFUSE_H57; /*< Address offset = 0x11e8 */
    sbb_efuse_l57_reg_t EFUSE_L57; /*< Address offset = 0x11ec */
    sbb_efuse_h58_reg_t EFUSE_H58; /*< Address offset = 0x11f0 */
    sbb_efuse_l58_reg_t EFUSE_L58; /*< Address offset = 0x11f4 */
    sbb_efuse_h59_reg_t EFUSE_H59; /*< Address offset = 0x11f8 */
    sbb_efuse_l59_reg_t EFUSE_L59; /*< Address offset = 0x11fc */
    sbb_efuse_h60_reg_t EFUSE_H60; /*< Address offset = 0x1200 */
    sbb_efuse_l60_reg_t EFUSE_L60; /*< Address offset = 0x1204 */
    sbb_efuse_h61_reg_t EFUSE_H61; /*< Address offset = 0x1208 */
    sbb_efuse_l61_reg_t EFUSE_L61; /*< Address offset = 0x120c */
    sbb_efuse_h62_reg_t EFUSE_H62; /*< Address offset = 0x1210 */
    sbb_efuse_l62_reg_t EFUSE_L62; /*< Address offset = 0x1214 */
    sbb_efuse_h63_reg_t EFUSE_H63; /*< Address offset = 0x1218 */
    sbb_efuse_l63_reg_t EFUSE_L63; /*< Address offset = 0x121c */
    sbb_efuse_h64_reg_t EFUSE_H64; /*< Address offset = 0x1220 */
    sbb_efuse_l64_reg_t EFUSE_L64; /*< Address offset = 0x1224 */
    sbb_efuse_h65_reg_t EFUSE_H65; /*< Address offset = 0x1228 */
    sbb_efuse_l65_reg_t EFUSE_L65; /*< Address offset = 0x122c */
    sbb_efuse_h66_reg_t EFUSE_H66; /*< Address offset = 0x1230 */
    sbb_efuse_l66_reg_t EFUSE_L66; /*< Address offset = 0x1234 */
    sbb_efuse_h67_reg_t EFUSE_H67; /*< Address offset = 0x1238 */
    sbb_efuse_l67_reg_t EFUSE_L67; /*< Address offset = 0x123c */
    sbb_efuse_h68_reg_t EFUSE_H68; /*< Address offset = 0x1240 */
    sbb_efuse_l68_reg_t EFUSE_L68; /*< Address offset = 0x1244 */
    sbb_efuse_h69_reg_t EFUSE_H69; /*< Address offset = 0x1248 */
    sbb_efuse_l69_reg_t EFUSE_L69; /*< Address offset = 0x124c */
    sbb_efuse_h70_reg_t EFUSE_H70; /*< Address offset = 0x1250 */
    sbb_efuse_l70_reg_t EFUSE_L70; /*< Address offset = 0x1254 */
    sbb_efuse_h71_reg_t EFUSE_H71; /*< Address offset = 0x1258 */
    sbb_efuse_l71_reg_t EFUSE_L71; /*< Address offset = 0x125c */
    sbb_efuse_h72_reg_t EFUSE_H72; /*< Address offset = 0x1260 */
    sbb_efuse_l72_reg_t EFUSE_L72; /*< Address offset = 0x1264 */
    sbb_efuse_h73_reg_t EFUSE_H73; /*< Address offset = 0x1268 */
    sbb_efuse_l73_reg_t EFUSE_L73; /*< Address offset = 0x126c */
    sbb_efuse_h74_reg_t EFUSE_H74; /*< Address offset = 0x1270 */
    sbb_efuse_l74_reg_t EFUSE_L74; /*< Address offset = 0x1274 */
    sbb_efuse_h75_reg_t EFUSE_H75; /*< Address offset = 0x1278 */
    sbb_efuse_l75_reg_t EFUSE_L75; /*< Address offset = 0x127c */
    sbb_efuse_h76_reg_t EFUSE_H76; /*< Address offset = 0x1280 */
    sbb_efuse_l76_reg_t EFUSE_L76; /*< Address offset = 0x1284 */
    sbb_efuse_h77_reg_t EFUSE_H77; /*< Address offset = 0x1288 */
    sbb_efuse_l77_reg_t EFUSE_L77; /*< Address offset = 0x128c */
    sbb_efuse_h78_reg_t EFUSE_H78; /*< Address offset = 0x1290 */
    sbb_efuse_l78_reg_t EFUSE_L78; /*< Address offset = 0x1294 */
    sbb_efuse_h79_reg_t EFUSE_H79; /*< Address offset = 0x1298 */
    sbb_efuse_l79_reg_t EFUSE_L79; /*< Address offset = 0x129c */
    sbb_efuse_h80_reg_t EFUSE_H80; /*< Address offset = 0x12a0 */
    sbb_efuse_l80_reg_t EFUSE_L80; /*< Address offset = 0x12a4 */
    sbb_efuse_h81_reg_t EFUSE_H81; /*< Address offset = 0x12a8 */
    sbb_efuse_l81_reg_t EFUSE_L81; /*< Address offset = 0x12ac */
    sbb_efuse_h82_reg_t EFUSE_H82; /*< Address offset = 0x12b0 */
    sbb_efuse_l82_reg_t EFUSE_L82; /*< Address offset = 0x12b4 */
    sbb_efuse_h83_reg_t EFUSE_H83; /*< Address offset = 0x12b8 */
    sbb_efuse_l83_reg_t EFUSE_L83; /*< Address offset = 0x12bc */
    sbb_efuse_h84_reg_t EFUSE_H84; /*< Address offset = 0x12c0 */
    sbb_efuse_l84_reg_t EFUSE_L84; /*< Address offset = 0x12c4 */
    sbb_efuse_h85_reg_t EFUSE_H85; /*< Address offset = 0x12c8 */
    sbb_efuse_l85_reg_t EFUSE_L85; /*< Address offset = 0x12cc */
    sbb_efuse_h86_reg_t EFUSE_H86; /*< Address offset = 0x12d0 */
    sbb_efuse_l86_reg_t EFUSE_L86; /*< Address offset = 0x12d4 */
    sbb_efuse_h87_reg_t EFUSE_H87; /*< Address offset = 0x12d8 */
    sbb_efuse_l87_reg_t EFUSE_L87; /*< Address offset = 0x12dc */
    sbb_efuse_h88_reg_t EFUSE_H88; /*< Address offset = 0x12e0 */
    sbb_efuse_l88_reg_t EFUSE_L88; /*< Address offset = 0x12e4 */
    sbb_efuse_h89_reg_t EFUSE_H89; /*< Address offset = 0x12e8 */
    sbb_efuse_l89_reg_t EFUSE_L89; /*< Address offset = 0x12ec */
    sbb_efuse_h90_reg_t EFUSE_H90; /*< Address offset = 0x12f0 */
    sbb_efuse_l90_reg_t EFUSE_L90; /*< Address offset = 0x12f4 */
    sbb_efuse_h91_reg_t EFUSE_H91; /*< Address offset = 0x12f8 */
    sbb_efuse_l91_reg_t EFUSE_L91; /*< Address offset = 0x12fc */
    sbb_efuse_h92_reg_t EFUSE_H92; /*< Address offset = 0x1300 */
    sbb_efuse_l92_reg_t EFUSE_L92; /*< Address offset = 0x1304 */
    sbb_efuse_h93_reg_t EFUSE_H93; /*< Address offset = 0x1308 */
    sbb_efuse_l93_reg_t EFUSE_L93; /*< Address offset = 0x130c */
    sbb_efuse_h94_reg_t EFUSE_H94; /*< Address offset = 0x1310 */
    sbb_efuse_l94_reg_t EFUSE_L94; /*< Address offset = 0x1314 */
    sbb_efuse_h95_reg_t EFUSE_H95; /*< Address offset = 0x1318 */
    sbb_efuse_l95_reg_t EFUSE_L95; /*< Address offset = 0x131c */
    sbb_efuse_h96_reg_t EFUSE_H96; /*< Address offset = 0x1320 */
    sbb_efuse_l96_reg_t EFUSE_L96; /*< Address offset = 0x1324 */
    sbb_efuse_h97_reg_t EFUSE_H97; /*< Address offset = 0x1328 */
    sbb_efuse_l97_reg_t EFUSE_L97; /*< Address offset = 0x132c */
    sbb_efuse_h98_reg_t EFUSE_H98; /*< Address offset = 0x1330 */
    sbb_efuse_l98_reg_t EFUSE_L98; /*< Address offset = 0x1334 */
    sbb_efuse_h99_reg_t EFUSE_H99; /*< Address offset = 0x1338 */
    sbb_efuse_l99_reg_t EFUSE_L99; /*< Address offset = 0x133c */
    sbb_efuse_h100_reg_t EFUSE_H100; /*< Address offset = 0x1340 */
    sbb_efuse_l100_reg_t EFUSE_L100; /*< Address offset = 0x1344 */
    sbb_efuse_h101_reg_t EFUSE_H101; /*< Address offset = 0x1348 */
    sbb_efuse_l101_reg_t EFUSE_L101; /*< Address offset = 0x134c */
    sbb_efuse_h102_reg_t EFUSE_H102; /*< Address offset = 0x1350 */
    sbb_efuse_l102_reg_t EFUSE_L102; /*< Address offset = 0x1354 */
    sbb_efuse_h103_reg_t EFUSE_H103; /*< Address offset = 0x1358 */
    sbb_efuse_l103_reg_t EFUSE_L103; /*< Address offset = 0x135c */
    sbb_efuse_h104_reg_t EFUSE_H104; /*< Address offset = 0x1360 */
    sbb_efuse_l104_reg_t EFUSE_L104; /*< Address offset = 0x1364 */
    sbb_efuse_h105_reg_t EFUSE_H105; /*< Address offset = 0x1368 */
    sbb_efuse_l105_reg_t EFUSE_L105; /*< Address offset = 0x136c */
    sbb_efuse_h106_reg_t EFUSE_H106; /*< Address offset = 0x1370 */
    sbb_efuse_l106_reg_t EFUSE_L106; /*< Address offset = 0x1374 */
    sbb_efuse_h107_reg_t EFUSE_H107; /*< Address offset = 0x1378 */
    sbb_efuse_l107_reg_t EFUSE_L107; /*< Address offset = 0x137c */
    sbb_efuse_h108_reg_t EFUSE_H108; /*< Address offset = 0x1380 */
    sbb_efuse_l108_reg_t EFUSE_L108; /*< Address offset = 0x1384 */
    sbb_efuse_h109_reg_t EFUSE_H109; /*< Address offset = 0x1388 */
    sbb_efuse_l109_reg_t EFUSE_L109; /*< Address offset = 0x138c */
    sbb_efuse_h110_reg_t EFUSE_H110; /*< Address offset = 0x1390 */
    sbb_efuse_l110_reg_t EFUSE_L110; /*< Address offset = 0x1394 */
    sbb_efuse_h111_reg_t EFUSE_H111; /*< Address offset = 0x1398 */
    sbb_efuse_l111_reg_t EFUSE_L111; /*< Address offset = 0x139c */
    const uint8_t        reservedArea6 [608]; /*< Address offset = 0x13a0 */
    sbb_param_ext_h0_reg_t PARAM_EXT_H0; /*< Address offset = 0x1600 */
    sbb_param_ext_l0_reg_t PARAM_EXT_L0; /*< Address offset = 0x1604 */
    sbb_param_ext_h1_reg_t PARAM_EXT_H1; /*< Address offset = 0x1608 */
    sbb_param_ext_l1_reg_t PARAM_EXT_L1; /*< Address offset = 0x160c */
    sbb_param_ext_h2_reg_t PARAM_EXT_H2; /*< Address offset = 0x1610 */
    sbb_param_ext_l2_reg_t PARAM_EXT_L2; /*< Address offset = 0x1614 */
    sbb_param_ext_h3_reg_t PARAM_EXT_H3; /*< Address offset = 0x1618 */
    sbb_param_ext_l3_reg_t PARAM_EXT_L3; /*< Address offset = 0x161c */
    sbb_param_ext_h4_reg_t PARAM_EXT_H4; /*< Address offset = 0x1620 */
    sbb_param_ext_l4_reg_t PARAM_EXT_L4; /*< Address offset = 0x1624 */
    sbb_param_ext_h5_reg_t PARAM_EXT_H5; /*< Address offset = 0x1628 */
    sbb_param_ext_l5_reg_t PARAM_EXT_L5; /*< Address offset = 0x162c */
    sbb_param_ext_h6_reg_t PARAM_EXT_H6; /*< Address offset = 0x1630 */
    sbb_param_ext_l6_reg_t PARAM_EXT_L6; /*< Address offset = 0x1634 */
    sbb_param_ext_h7_reg_t PARAM_EXT_H7; /*< Address offset = 0x1638 */
    sbb_param_ext_l7_reg_t PARAM_EXT_L7; /*< Address offset = 0x163c */
    sbb_param_ext_h8_reg_t PARAM_EXT_H8; /*< Address offset = 0x1640 */
    sbb_param_ext_l8_reg_t PARAM_EXT_L8; /*< Address offset = 0x1644 */
    sbb_param_ext_h9_reg_t PARAM_EXT_H9; /*< Address offset = 0x1648 */
    sbb_param_ext_l9_reg_t PARAM_EXT_L9; /*< Address offset = 0x164c */
    sbb_param_ext_h10_reg_t PARAM_EXT_H10; /*< Address offset = 0x1650 */
    sbb_param_ext_l10_reg_t PARAM_EXT_L10; /*< Address offset = 0x1654 */
    sbb_param_ext_h11_reg_t PARAM_EXT_H11; /*< Address offset = 0x1658 */
    sbb_param_ext_l11_reg_t PARAM_EXT_L11; /*< Address offset = 0x165c */
    sbb_param_ext_h12_reg_t PARAM_EXT_H12; /*< Address offset = 0x1660 */
    sbb_param_ext_l12_reg_t PARAM_EXT_L12; /*< Address offset = 0x1664 */
    sbb_param_ext_h13_reg_t PARAM_EXT_H13; /*< Address offset = 0x1668 */
    sbb_param_ext_l13_reg_t PARAM_EXT_L13; /*< Address offset = 0x166c */
    sbb_param_ext_h14_reg_t PARAM_EXT_H14; /*< Address offset = 0x1670 */
    sbb_param_ext_l14_reg_t PARAM_EXT_L14; /*< Address offset = 0x1674 */
    sbb_param_ext_h15_reg_t PARAM_EXT_H15; /*< Address offset = 0x1678 */
    sbb_param_ext_l15_reg_t PARAM_EXT_L15; /*< Address offset = 0x167c */
    sbb_param_ext_h16_reg_t PARAM_EXT_H16; /*< Address offset = 0x1680 */
    sbb_param_ext_l16_reg_t PARAM_EXT_L16; /*< Address offset = 0x1684 */
    sbb_param_ext_h17_reg_t PARAM_EXT_H17; /*< Address offset = 0x1688 */
    sbb_param_ext_l17_reg_t PARAM_EXT_L17; /*< Address offset = 0x168c */
    sbb_param_ext_h18_reg_t PARAM_EXT_H18; /*< Address offset = 0x1690 */
    sbb_param_ext_l18_reg_t PARAM_EXT_L18; /*< Address offset = 0x1694 */
    sbb_param_ext_h19_reg_t PARAM_EXT_H19; /*< Address offset = 0x1698 */
    sbb_param_ext_l19_reg_t PARAM_EXT_L19; /*< Address offset = 0x169c */
    sbb_param_ext_h20_reg_t PARAM_EXT_H20; /*< Address offset = 0x16a0 */
    sbb_param_ext_l20_reg_t PARAM_EXT_L20; /*< Address offset = 0x16a4 */
    sbb_param_ext_h21_reg_t PARAM_EXT_H21; /*< Address offset = 0x16a8 */
    sbb_param_ext_l21_reg_t PARAM_EXT_L21; /*< Address offset = 0x16ac */
    sbb_param_ext_h22_reg_t PARAM_EXT_H22; /*< Address offset = 0x16b0 */
    sbb_param_ext_l22_reg_t PARAM_EXT_L22; /*< Address offset = 0x16b4 */
    sbb_param_ext_h23_reg_t PARAM_EXT_H23; /*< Address offset = 0x16b8 */
    sbb_param_ext_l23_reg_t PARAM_EXT_L23; /*< Address offset = 0x16bc */
    sbb_param_ext_h24_reg_t PARAM_EXT_H24; /*< Address offset = 0x16c0 */
    sbb_param_ext_l24_reg_t PARAM_EXT_L24; /*< Address offset = 0x16c4 */
    sbb_param_ext_h25_reg_t PARAM_EXT_H25; /*< Address offset = 0x16c8 */
    sbb_param_ext_l25_reg_t PARAM_EXT_L25; /*< Address offset = 0x16cc */
    sbb_param_ext_h26_reg_t PARAM_EXT_H26; /*< Address offset = 0x16d0 */
    sbb_param_ext_l26_reg_t PARAM_EXT_L26; /*< Address offset = 0x16d4 */
    sbb_param_ext_h27_reg_t PARAM_EXT_H27; /*< Address offset = 0x16d8 */
    sbb_param_ext_l27_reg_t PARAM_EXT_L27; /*< Address offset = 0x16dc */
    sbb_param_ext_h28_reg_t PARAM_EXT_H28; /*< Address offset = 0x16e0 */
    sbb_param_ext_l28_reg_t PARAM_EXT_L28; /*< Address offset = 0x16e4 */
    sbb_param_ext_h29_reg_t PARAM_EXT_H29; /*< Address offset = 0x16e8 */
    sbb_param_ext_l29_reg_t PARAM_EXT_L29; /*< Address offset = 0x16ec */
    sbb_param_ext_h30_reg_t PARAM_EXT_H30; /*< Address offset = 0x16f0 */
    sbb_param_ext_l30_reg_t PARAM_EXT_L30; /*< Address offset = 0x16f4 */
    sbb_param_ext_h31_reg_t PARAM_EXT_H31; /*< Address offset = 0x16f8 */
    sbb_param_ext_l31_reg_t PARAM_EXT_L31; /*< Address offset = 0x16fc */
    sbb_param_ext_h32_reg_t PARAM_EXT_H32; /*< Address offset = 0x1700 */
    sbb_param_ext_l32_reg_t PARAM_EXT_L32; /*< Address offset = 0x1704 */
    sbb_param_ext_h33_reg_t PARAM_EXT_H33; /*< Address offset = 0x1708 */
    sbb_param_ext_l33_reg_t PARAM_EXT_L33; /*< Address offset = 0x170c */
    sbb_param_ext_h34_reg_t PARAM_EXT_H34; /*< Address offset = 0x1710 */
    sbb_param_ext_l34_reg_t PARAM_EXT_L34; /*< Address offset = 0x1714 */
    sbb_param_ext_h35_reg_t PARAM_EXT_H35; /*< Address offset = 0x1718 */
    sbb_param_ext_l35_reg_t PARAM_EXT_L35; /*< Address offset = 0x171c */
    sbb_param_ext_h36_reg_t PARAM_EXT_H36; /*< Address offset = 0x1720 */
    sbb_param_ext_l36_reg_t PARAM_EXT_L36; /*< Address offset = 0x1724 */
    sbb_param_ext_h37_reg_t PARAM_EXT_H37; /*< Address offset = 0x1728 */
    sbb_param_ext_l37_reg_t PARAM_EXT_L37; /*< Address offset = 0x172c */
    sbb_param_ext_h38_reg_t PARAM_EXT_H38; /*< Address offset = 0x1730 */
    sbb_param_ext_l38_reg_t PARAM_EXT_L38; /*< Address offset = 0x1734 */
    sbb_param_ext_h39_reg_t PARAM_EXT_H39; /*< Address offset = 0x1738 */
    sbb_param_ext_l39_reg_t PARAM_EXT_L39; /*< Address offset = 0x173c */
    sbb_param_ext_h40_reg_t PARAM_EXT_H40; /*< Address offset = 0x1740 */
    sbb_param_ext_l40_reg_t PARAM_EXT_L40; /*< Address offset = 0x1744 */
    sbb_param_ext_h41_reg_t PARAM_EXT_H41; /*< Address offset = 0x1748 */
    sbb_param_ext_l41_reg_t PARAM_EXT_L41; /*< Address offset = 0x174c */
    sbb_param_ext_h42_reg_t PARAM_EXT_H42; /*< Address offset = 0x1750 */
    sbb_param_ext_l42_reg_t PARAM_EXT_L42; /*< Address offset = 0x1754 */
    sbb_param_ext_h43_reg_t PARAM_EXT_H43; /*< Address offset = 0x1758 */
    sbb_param_ext_l43_reg_t PARAM_EXT_L43; /*< Address offset = 0x175c */
    sbb_param_ext_h44_reg_t PARAM_EXT_H44; /*< Address offset = 0x1760 */
    sbb_param_ext_l44_reg_t PARAM_EXT_L44; /*< Address offset = 0x1764 */
    sbb_param_ext_h45_reg_t PARAM_EXT_H45; /*< Address offset = 0x1768 */
    sbb_param_ext_l45_reg_t PARAM_EXT_L45; /*< Address offset = 0x176c */
    sbb_param_ext_h46_reg_t PARAM_EXT_H46; /*< Address offset = 0x1770 */
    sbb_param_ext_l46_reg_t PARAM_EXT_L46; /*< Address offset = 0x1774 */
    sbb_param_ext_h47_reg_t PARAM_EXT_H47; /*< Address offset = 0x1778 */
    sbb_param_ext_l47_reg_t PARAM_EXT_L47; /*< Address offset = 0x177c */
    sbb_param_ext_h48_reg_t PARAM_EXT_H48; /*< Address offset = 0x1780 */
    sbb_param_ext_l48_reg_t PARAM_EXT_L48; /*< Address offset = 0x1784 */
    sbb_param_ext_h49_reg_t PARAM_EXT_H49; /*< Address offset = 0x1788 */
    sbb_param_ext_l49_reg_t PARAM_EXT_L49; /*< Address offset = 0x178c */
    sbb_param_ext_h50_reg_t PARAM_EXT_H50; /*< Address offset = 0x1790 */
    sbb_param_ext_l50_reg_t PARAM_EXT_L50; /*< Address offset = 0x1794 */
    sbb_param_ext_h51_reg_t PARAM_EXT_H51; /*< Address offset = 0x1798 */
    sbb_param_ext_l51_reg_t PARAM_EXT_L51; /*< Address offset = 0x179c */
    sbb_param_ext_h52_reg_t PARAM_EXT_H52; /*< Address offset = 0x17a0 */
    sbb_param_ext_l52_reg_t PARAM_EXT_L52; /*< Address offset = 0x17a4 */
    sbb_param_ext_h53_reg_t PARAM_EXT_H53; /*< Address offset = 0x17a8 */
    sbb_param_ext_l53_reg_t PARAM_EXT_L53; /*< Address offset = 0x17ac */
    sbb_param_ext_h54_reg_t PARAM_EXT_H54; /*< Address offset = 0x17b0 */
    sbb_param_ext_l54_reg_t PARAM_EXT_L54; /*< Address offset = 0x17b4 */
    sbb_param_ext_h55_reg_t PARAM_EXT_H55; /*< Address offset = 0x17b8 */
    sbb_param_ext_l55_reg_t PARAM_EXT_L55; /*< Address offset = 0x17bc */
    sbb_param_ext_h56_reg_t PARAM_EXT_H56; /*< Address offset = 0x17c0 */
    sbb_param_ext_l56_reg_t PARAM_EXT_L56; /*< Address offset = 0x17c4 */
    sbb_param_ext_h57_reg_t PARAM_EXT_H57; /*< Address offset = 0x17c8 */
    sbb_param_ext_l57_reg_t PARAM_EXT_L57; /*< Address offset = 0x17cc */
    sbb_param_ext_h58_reg_t PARAM_EXT_H58; /*< Address offset = 0x17d0 */
    sbb_param_ext_l58_reg_t PARAM_EXT_L58; /*< Address offset = 0x17d4 */
    sbb_param_ext_h59_reg_t PARAM_EXT_H59; /*< Address offset = 0x17d8 */
    sbb_param_ext_l59_reg_t PARAM_EXT_L59; /*< Address offset = 0x17dc */
    sbb_param_ext_h60_reg_t PARAM_EXT_H60; /*< Address offset = 0x17e0 */
    sbb_param_ext_l60_reg_t PARAM_EXT_L60; /*< Address offset = 0x17e4 */
    sbb_param_ext_h61_reg_t PARAM_EXT_H61; /*< Address offset = 0x17e8 */
    sbb_param_ext_l61_reg_t PARAM_EXT_L61; /*< Address offset = 0x17ec */
    sbb_param_ext_h62_reg_t PARAM_EXT_H62; /*< Address offset = 0x17f0 */
    sbb_param_ext_l62_reg_t PARAM_EXT_L62; /*< Address offset = 0x17f4 */
    sbb_param_ext_h63_reg_t PARAM_EXT_H63; /*< Address offset = 0x17f8 */
    sbb_param_ext_l63_reg_t PARAM_EXT_L63; /*< Address offset = 0x17fc */
    sbb_param_h0_reg_t PARAM_H0; /*< Address offset = 0x1800 */
    sbb_param_l0_reg_t PARAM_L0; /*< Address offset = 0x1804 */
    sbb_param_h1_reg_t PARAM_H1; /*< Address offset = 0x1808 */
    sbb_param_l1_reg_t PARAM_L1; /*< Address offset = 0x180c */
    sbb_param_h2_reg_t PARAM_H2; /*< Address offset = 0x1810 */
    sbb_param_l2_reg_t PARAM_L2; /*< Address offset = 0x1814 */
    sbb_param_h3_reg_t PARAM_H3; /*< Address offset = 0x1818 */
    sbb_param_l3_reg_t PARAM_L3; /*< Address offset = 0x181c */
    sbb_param_h4_reg_t PARAM_H4; /*< Address offset = 0x1820 */
    sbb_param_l4_reg_t PARAM_L4; /*< Address offset = 0x1824 */
    sbb_param_h5_reg_t PARAM_H5; /*< Address offset = 0x1828 */
    sbb_param_l5_reg_t PARAM_L5; /*< Address offset = 0x182c */
    sbb_param_h6_reg_t PARAM_H6; /*< Address offset = 0x1830 */
    sbb_param_l6_reg_t PARAM_L6; /*< Address offset = 0x1834 */
    sbb_param_h7_reg_t PARAM_H7; /*< Address offset = 0x1838 */
    sbb_param_l7_reg_t PARAM_L7; /*< Address offset = 0x183c */
    sbb_param_h8_reg_t PARAM_H8; /*< Address offset = 0x1840 */
    sbb_param_l8_reg_t PARAM_L8; /*< Address offset = 0x1844 */
    sbb_param_h9_reg_t PARAM_H9; /*< Address offset = 0x1848 */
    sbb_param_l9_reg_t PARAM_L9; /*< Address offset = 0x184c */
    sbb_param_h10_reg_t PARAM_H10; /*< Address offset = 0x1850 */
    sbb_param_l10_reg_t PARAM_L10; /*< Address offset = 0x1854 */
    sbb_param_h11_reg_t PARAM_H11; /*< Address offset = 0x1858 */
    sbb_param_l11_reg_t PARAM_L11; /*< Address offset = 0x185c */
    sbb_param_h12_reg_t PARAM_H12; /*< Address offset = 0x1860 */
    sbb_param_l12_reg_t PARAM_L12; /*< Address offset = 0x1864 */
    sbb_param_h13_reg_t PARAM_H13; /*< Address offset = 0x1868 */
    sbb_param_l13_reg_t PARAM_L13; /*< Address offset = 0x186c */
    sbb_param_h14_reg_t PARAM_H14; /*< Address offset = 0x1870 */
    sbb_param_l14_reg_t PARAM_L14; /*< Address offset = 0x1874 */
    sbb_param_h15_reg_t PARAM_H15; /*< Address offset = 0x1878 */
    sbb_param_l15_reg_t PARAM_L15; /*< Address offset = 0x187c */
    sbb_param_h16_reg_t PARAM_H16; /*< Address offset = 0x1880 */
    sbb_param_l16_reg_t PARAM_L16; /*< Address offset = 0x1884 */
    sbb_param_h17_reg_t PARAM_H17; /*< Address offset = 0x1888 */
    sbb_param_l17_reg_t PARAM_L17; /*< Address offset = 0x188c */
    sbb_param_h18_reg_t PARAM_H18; /*< Address offset = 0x1890 */
    sbb_param_l18_reg_t PARAM_L18; /*< Address offset = 0x1894 */
    sbb_param_h19_reg_t PARAM_H19; /*< Address offset = 0x1898 */
    sbb_param_l19_reg_t PARAM_L19; /*< Address offset = 0x189c */
    sbb_param_h20_reg_t PARAM_H20; /*< Address offset = 0x18a0 */
    sbb_param_l20_reg_t PARAM_L20; /*< Address offset = 0x18a4 */
    sbb_param_h21_reg_t PARAM_H21; /*< Address offset = 0x18a8 */
    sbb_param_l21_reg_t PARAM_L21; /*< Address offset = 0x18ac */
    sbb_param_h22_reg_t PARAM_H22; /*< Address offset = 0x18b0 */
    sbb_param_l22_reg_t PARAM_L22; /*< Address offset = 0x18b4 */
    sbb_param_h23_reg_t PARAM_H23; /*< Address offset = 0x18b8 */
    sbb_param_l23_reg_t PARAM_L23; /*< Address offset = 0x18bc */
    sbb_param_h24_reg_t PARAM_H24; /*< Address offset = 0x18c0 */
    sbb_param_l24_reg_t PARAM_L24; /*< Address offset = 0x18c4 */
    sbb_param_h25_reg_t PARAM_H25; /*< Address offset = 0x18c8 */
    sbb_param_l25_reg_t PARAM_L25; /*< Address offset = 0x18cc */
    sbb_param_h26_reg_t PARAM_H26; /*< Address offset = 0x18d0 */
    sbb_param_l26_reg_t PARAM_L26; /*< Address offset = 0x18d4 */
    sbb_param_h27_reg_t PARAM_H27; /*< Address offset = 0x18d8 */
    sbb_param_l27_reg_t PARAM_L27; /*< Address offset = 0x18dc */
    sbb_param_h28_reg_t PARAM_H28; /*< Address offset = 0x18e0 */
    sbb_param_l28_reg_t PARAM_L28; /*< Address offset = 0x18e4 */
    sbb_param_h29_reg_t PARAM_H29; /*< Address offset = 0x18e8 */
    sbb_param_l29_reg_t PARAM_L29; /*< Address offset = 0x18ec */
    sbb_param_h30_reg_t PARAM_H30; /*< Address offset = 0x18f0 */
    sbb_param_l30_reg_t PARAM_L30; /*< Address offset = 0x18f4 */
    sbb_param_h31_reg_t PARAM_H31; /*< Address offset = 0x18f8 */
    sbb_param_l31_reg_t PARAM_L31; /*< Address offset = 0x18fc */
    sbb_param_h32_reg_t PARAM_H32; /*< Address offset = 0x1900 */
    sbb_param_l32_reg_t PARAM_L32; /*< Address offset = 0x1904 */
    sbb_param_h33_reg_t PARAM_H33; /*< Address offset = 0x1908 */
    sbb_param_l33_reg_t PARAM_L33; /*< Address offset = 0x190c */
    sbb_param_h34_reg_t PARAM_H34; /*< Address offset = 0x1910 */
    sbb_param_l34_reg_t PARAM_L34; /*< Address offset = 0x1914 */
    sbb_param_h35_reg_t PARAM_H35; /*< Address offset = 0x1918 */
    sbb_param_l35_reg_t PARAM_L35; /*< Address offset = 0x191c */
    sbb_param_h36_reg_t PARAM_H36; /*< Address offset = 0x1920 */
    sbb_param_l36_reg_t PARAM_L36; /*< Address offset = 0x1924 */
    sbb_param_h37_reg_t PARAM_H37; /*< Address offset = 0x1928 */
    sbb_param_l37_reg_t PARAM_L37; /*< Address offset = 0x192c */
    sbb_param_h38_reg_t PARAM_H38; /*< Address offset = 0x1930 */
    sbb_param_l38_reg_t PARAM_L38; /*< Address offset = 0x1934 */
    sbb_param_h39_reg_t PARAM_H39; /*< Address offset = 0x1938 */
    sbb_param_l39_reg_t PARAM_L39; /*< Address offset = 0x193c */
    sbb_param_h40_reg_t PARAM_H40; /*< Address offset = 0x1940 */
    sbb_param_l40_reg_t PARAM_L40; /*< Address offset = 0x1944 */
    sbb_param_h41_reg_t PARAM_H41; /*< Address offset = 0x1948 */
    sbb_param_l41_reg_t PARAM_L41; /*< Address offset = 0x194c */
    sbb_param_h42_reg_t PARAM_H42; /*< Address offset = 0x1950 */
    sbb_param_l42_reg_t PARAM_L42; /*< Address offset = 0x1954 */
    sbb_param_h43_reg_t PARAM_H43; /*< Address offset = 0x1958 */
    sbb_param_l43_reg_t PARAM_L43; /*< Address offset = 0x195c */
    sbb_param_h44_reg_t PARAM_H44; /*< Address offset = 0x1960 */
    sbb_param_l44_reg_t PARAM_L44; /*< Address offset = 0x1964 */
    sbb_param_h45_reg_t PARAM_H45; /*< Address offset = 0x1968 */
    sbb_param_l45_reg_t PARAM_L45; /*< Address offset = 0x196c */
    sbb_param_h46_reg_t PARAM_H46; /*< Address offset = 0x1970 */
    sbb_param_l46_reg_t PARAM_L46; /*< Address offset = 0x1974 */
    sbb_param_h47_reg_t PARAM_H47; /*< Address offset = 0x1978 */
    sbb_param_l47_reg_t PARAM_L47; /*< Address offset = 0x197c */
    sbb_param_h48_reg_t PARAM_H48; /*< Address offset = 0x1980 */
    sbb_param_l48_reg_t PARAM_L48; /*< Address offset = 0x1984 */
    sbb_param_h49_reg_t PARAM_H49; /*< Address offset = 0x1988 */
    sbb_param_l49_reg_t PARAM_L49; /*< Address offset = 0x198c */
    sbb_param_h50_reg_t PARAM_H50; /*< Address offset = 0x1990 */
    sbb_param_l50_reg_t PARAM_L50; /*< Address offset = 0x1994 */
    sbb_param_h51_reg_t PARAM_H51; /*< Address offset = 0x1998 */
    sbb_param_l51_reg_t PARAM_L51; /*< Address offset = 0x199c */
    sbb_param_h52_reg_t PARAM_H52; /*< Address offset = 0x19a0 */
    sbb_param_l52_reg_t PARAM_L52; /*< Address offset = 0x19a4 */
    sbb_param_h53_reg_t PARAM_H53; /*< Address offset = 0x19a8 */
    sbb_param_l53_reg_t PARAM_L53; /*< Address offset = 0x19ac */
    sbb_param_h54_reg_t PARAM_H54; /*< Address offset = 0x19b0 */
    sbb_param_l54_reg_t PARAM_L54; /*< Address offset = 0x19b4 */
    sbb_param_h55_reg_t PARAM_H55; /*< Address offset = 0x19b8 */
    sbb_param_l55_reg_t PARAM_L55; /*< Address offset = 0x19bc */
    sbb_param_h56_reg_t PARAM_H56; /*< Address offset = 0x19c0 */
    sbb_param_l56_reg_t PARAM_L56; /*< Address offset = 0x19c4 */
    sbb_param_h57_reg_t PARAM_H57; /*< Address offset = 0x19c8 */
    sbb_param_l57_reg_t PARAM_L57; /*< Address offset = 0x19cc */
    sbb_param_h58_reg_t PARAM_H58; /*< Address offset = 0x19d0 */
    sbb_param_l58_reg_t PARAM_L58; /*< Address offset = 0x19d4 */
    sbb_param_h59_reg_t PARAM_H59; /*< Address offset = 0x19d8 */
    sbb_param_l59_reg_t PARAM_L59; /*< Address offset = 0x19dc */
    sbb_param_h60_reg_t PARAM_H60; /*< Address offset = 0x19e0 */
    sbb_param_l60_reg_t PARAM_L60; /*< Address offset = 0x19e4 */
    sbb_param_h61_reg_t PARAM_H61; /*< Address offset = 0x19e8 */
    sbb_param_l61_reg_t PARAM_L61; /*< Address offset = 0x19ec */
    sbb_param_h62_reg_t PARAM_H62; /*< Address offset = 0x19f0 */
    sbb_param_l62_reg_t PARAM_L62; /*< Address offset = 0x19f4 */
    sbb_param_h63_reg_t PARAM_H63; /*< Address offset = 0x19f8 */
    sbb_param_l63_reg_t PARAM_L63; /*< Address offset = 0x19fc */
    sbb_param_h64_reg_t PARAM_H64; /*< Address offset = 0x1a00 */
    sbb_param_l64_reg_t PARAM_L64; /*< Address offset = 0x1a04 */
    sbb_param_h65_reg_t PARAM_H65; /*< Address offset = 0x1a08 */
    sbb_param_l65_reg_t PARAM_L65; /*< Address offset = 0x1a0c */
    sbb_param_h66_reg_t PARAM_H66; /*< Address offset = 0x1a10 */
    sbb_param_l66_reg_t PARAM_L66; /*< Address offset = 0x1a14 */
    sbb_param_h67_reg_t PARAM_H67; /*< Address offset = 0x1a18 */
    sbb_param_l67_reg_t PARAM_L67; /*< Address offset = 0x1a1c */
    sbb_param_h68_reg_t PARAM_H68; /*< Address offset = 0x1a20 */
    sbb_param_l68_reg_t PARAM_L68; /*< Address offset = 0x1a24 */
    sbb_param_h69_reg_t PARAM_H69; /*< Address offset = 0x1a28 */
    sbb_param_l69_reg_t PARAM_L69; /*< Address offset = 0x1a2c */
    sbb_param_h70_reg_t PARAM_H70; /*< Address offset = 0x1a30 */
    sbb_param_l70_reg_t PARAM_L70; /*< Address offset = 0x1a34 */
    sbb_param_h71_reg_t PARAM_H71; /*< Address offset = 0x1a38 */
    sbb_param_l71_reg_t PARAM_L71; /*< Address offset = 0x1a3c */
    sbb_param_h72_reg_t PARAM_H72; /*< Address offset = 0x1a40 */
    sbb_param_l72_reg_t PARAM_L72; /*< Address offset = 0x1a44 */
    sbb_param_h73_reg_t PARAM_H73; /*< Address offset = 0x1a48 */
    sbb_param_l73_reg_t PARAM_L73; /*< Address offset = 0x1a4c */
    sbb_param_h74_reg_t PARAM_H74; /*< Address offset = 0x1a50 */
    sbb_param_l74_reg_t PARAM_L74; /*< Address offset = 0x1a54 */
    sbb_param_h75_reg_t PARAM_H75; /*< Address offset = 0x1a58 */
    sbb_param_l75_reg_t PARAM_L75; /*< Address offset = 0x1a5c */
    sbb_param_h76_reg_t PARAM_H76; /*< Address offset = 0x1a60 */
    sbb_param_l76_reg_t PARAM_L76; /*< Address offset = 0x1a64 */
    sbb_param_h77_reg_t PARAM_H77; /*< Address offset = 0x1a68 */
    sbb_param_l77_reg_t PARAM_L77; /*< Address offset = 0x1a6c */
    sbb_param_h78_reg_t PARAM_H78; /*< Address offset = 0x1a70 */
    sbb_param_l78_reg_t PARAM_L78; /*< Address offset = 0x1a74 */
    sbb_param_h79_reg_t PARAM_H79; /*< Address offset = 0x1a78 */
    sbb_param_l79_reg_t PARAM_L79; /*< Address offset = 0x1a7c */
    sbb_param_h80_reg_t PARAM_H80; /*< Address offset = 0x1a80 */
    sbb_param_l80_reg_t PARAM_L80; /*< Address offset = 0x1a84 */
    sbb_param_h81_reg_t PARAM_H81; /*< Address offset = 0x1a88 */
    sbb_param_l81_reg_t PARAM_L81; /*< Address offset = 0x1a8c */
    sbb_param_h82_reg_t PARAM_H82; /*< Address offset = 0x1a90 */
    sbb_param_l82_reg_t PARAM_L82; /*< Address offset = 0x1a94 */
    sbb_param_h83_reg_t PARAM_H83; /*< Address offset = 0x1a98 */
    sbb_param_l83_reg_t PARAM_L83; /*< Address offset = 0x1a9c */
    sbb_param_h84_reg_t PARAM_H84; /*< Address offset = 0x1aa0 */
    sbb_param_l84_reg_t PARAM_L84; /*< Address offset = 0x1aa4 */
    sbb_param_h85_reg_t PARAM_H85; /*< Address offset = 0x1aa8 */
    sbb_param_l85_reg_t PARAM_L85; /*< Address offset = 0x1aac */
    sbb_param_h86_reg_t PARAM_H86; /*< Address offset = 0x1ab0 */
    sbb_param_l86_reg_t PARAM_L86; /*< Address offset = 0x1ab4 */
    sbb_param_h87_reg_t PARAM_H87; /*< Address offset = 0x1ab8 */
    sbb_param_l87_reg_t PARAM_L87; /*< Address offset = 0x1abc */
    sbb_param_h88_reg_t PARAM_H88; /*< Address offset = 0x1ac0 */
    sbb_param_l88_reg_t PARAM_L88; /*< Address offset = 0x1ac4 */
    sbb_param_h89_reg_t PARAM_H89; /*< Address offset = 0x1ac8 */
    sbb_param_l89_reg_t PARAM_L89; /*< Address offset = 0x1acc */
    sbb_param_h90_reg_t PARAM_H90; /*< Address offset = 0x1ad0 */
    sbb_param_l90_reg_t PARAM_L90; /*< Address offset = 0x1ad4 */
    sbb_param_h91_reg_t PARAM_H91; /*< Address offset = 0x1ad8 */
    sbb_param_l91_reg_t PARAM_L91; /*< Address offset = 0x1adc */
    sbb_param_h92_reg_t PARAM_H92; /*< Address offset = 0x1ae0 */
    sbb_param_l92_reg_t PARAM_L92; /*< Address offset = 0x1ae4 */
    sbb_param_h93_reg_t PARAM_H93; /*< Address offset = 0x1ae8 */
    sbb_param_l93_reg_t PARAM_L93; /*< Address offset = 0x1aec */
    sbb_param_h94_reg_t PARAM_H94; /*< Address offset = 0x1af0 */
    sbb_param_l94_reg_t PARAM_L94; /*< Address offset = 0x1af4 */
    sbb_param_h95_reg_t PARAM_H95; /*< Address offset = 0x1af8 */
    sbb_param_l95_reg_t PARAM_L95; /*< Address offset = 0x1afc */
    sbb_param_h96_reg_t PARAM_H96; /*< Address offset = 0x1b00 */
    sbb_param_l96_reg_t PARAM_L96; /*< Address offset = 0x1b04 */
    sbb_param_h97_reg_t PARAM_H97; /*< Address offset = 0x1b08 */
    sbb_param_l97_reg_t PARAM_L97; /*< Address offset = 0x1b0c */
    sbb_param_h98_reg_t PARAM_H98; /*< Address offset = 0x1b10 */
    sbb_param_l98_reg_t PARAM_L98; /*< Address offset = 0x1b14 */
    sbb_param_h99_reg_t PARAM_H99; /*< Address offset = 0x1b18 */
    sbb_param_l99_reg_t PARAM_L99; /*< Address offset = 0x1b1c */
    sbb_param_h100_reg_t PARAM_H100; /*< Address offset = 0x1b20 */
    sbb_param_l100_reg_t PARAM_L100; /*< Address offset = 0x1b24 */
    sbb_param_h101_reg_t PARAM_H101; /*< Address offset = 0x1b28 */
    sbb_param_l101_reg_t PARAM_L101; /*< Address offset = 0x1b2c */
    sbb_param_h102_reg_t PARAM_H102; /*< Address offset = 0x1b30 */
    sbb_param_l102_reg_t PARAM_L102; /*< Address offset = 0x1b34 */
    sbb_param_h103_reg_t PARAM_H103; /*< Address offset = 0x1b38 */
    sbb_param_l103_reg_t PARAM_L103; /*< Address offset = 0x1b3c */
    sbb_param_h104_reg_t PARAM_H104; /*< Address offset = 0x1b40 */
    sbb_param_l104_reg_t PARAM_L104; /*< Address offset = 0x1b44 */
    sbb_param_h105_reg_t PARAM_H105; /*< Address offset = 0x1b48 */
    sbb_param_l105_reg_t PARAM_L105; /*< Address offset = 0x1b4c */
    sbb_param_h106_reg_t PARAM_H106; /*< Address offset = 0x1b50 */
    sbb_param_l106_reg_t PARAM_L106; /*< Address offset = 0x1b54 */
    sbb_param_h107_reg_t PARAM_H107; /*< Address offset = 0x1b58 */
    sbb_param_l107_reg_t PARAM_L107; /*< Address offset = 0x1b5c */
    sbb_param_h108_reg_t PARAM_H108; /*< Address offset = 0x1b60 */
    sbb_param_l108_reg_t PARAM_L108; /*< Address offset = 0x1b64 */
    sbb_param_h109_reg_t PARAM_H109; /*< Address offset = 0x1b68 */
    sbb_param_l109_reg_t PARAM_L109; /*< Address offset = 0x1b6c */
    sbb_param_h110_reg_t PARAM_H110; /*< Address offset = 0x1b70 */
    sbb_param_l110_reg_t PARAM_L110; /*< Address offset = 0x1b74 */
    sbb_param_h111_reg_t PARAM_H111; /*< Address offset = 0x1b78 */
    sbb_param_l111_reg_t PARAM_L111; /*< Address offset = 0x1b7c */
    sbb_param_h112_reg_t PARAM_H112; /*< Address offset = 0x1b80 */
    sbb_param_l112_reg_t PARAM_L112; /*< Address offset = 0x1b84 */
    sbb_param_h113_reg_t PARAM_H113; /*< Address offset = 0x1b88 */
    sbb_param_l113_reg_t PARAM_L113; /*< Address offset = 0x1b8c */
    sbb_param_h114_reg_t PARAM_H114; /*< Address offset = 0x1b90 */
    sbb_param_l114_reg_t PARAM_L114; /*< Address offset = 0x1b94 */
    sbb_param_h115_reg_t PARAM_H115; /*< Address offset = 0x1b98 */
    sbb_param_l115_reg_t PARAM_L115; /*< Address offset = 0x1b9c */
    sbb_param_h116_reg_t PARAM_H116; /*< Address offset = 0x1ba0 */
    sbb_param_l116_reg_t PARAM_L116; /*< Address offset = 0x1ba4 */
    sbb_param_h117_reg_t PARAM_H117; /*< Address offset = 0x1ba8 */
    sbb_param_l117_reg_t PARAM_L117; /*< Address offset = 0x1bac */
    sbb_param_h118_reg_t PARAM_H118; /*< Address offset = 0x1bb0 */
    sbb_param_l118_reg_t PARAM_L118; /*< Address offset = 0x1bb4 */
    sbb_param_h119_reg_t PARAM_H119; /*< Address offset = 0x1bb8 */
    sbb_param_l119_reg_t PARAM_L119; /*< Address offset = 0x1bbc */
    sbb_param_h120_reg_t PARAM_H120; /*< Address offset = 0x1bc0 */
    sbb_param_l120_reg_t PARAM_L120; /*< Address offset = 0x1bc4 */
    sbb_param_h121_reg_t PARAM_H121; /*< Address offset = 0x1bc8 */
    sbb_param_l121_reg_t PARAM_L121; /*< Address offset = 0x1bcc */
    sbb_param_h122_reg_t PARAM_H122; /*< Address offset = 0x1bd0 */
    sbb_param_l122_reg_t PARAM_L122; /*< Address offset = 0x1bd4 */
    sbb_param_h123_reg_t PARAM_H123; /*< Address offset = 0x1bd8 */
    sbb_param_l123_reg_t PARAM_L123; /*< Address offset = 0x1bdc */
    sbb_param_h124_reg_t PARAM_H124; /*< Address offset = 0x1be0 */
    sbb_param_l124_reg_t PARAM_L124; /*< Address offset = 0x1be4 */
    sbb_param_h125_reg_t PARAM_H125; /*< Address offset = 0x1be8 */
    sbb_param_l125_reg_t PARAM_L125; /*< Address offset = 0x1bec */
    sbb_param_h126_reg_t PARAM_H126; /*< Address offset = 0x1bf0 */
    sbb_param_l126_reg_t PARAM_L126; /*< Address offset = 0x1bf4 */
    sbb_param_h127_reg_t PARAM_H127; /*< Address offset = 0x1bf8 */
    sbb_param_l127_reg_t PARAM_L127; /*< Address offset = 0x1bfc */
    sbb_param_h128_reg_t PARAM_H128; /*< Address offset = 0x1c00 */
    sbb_param_l128_reg_t PARAM_L128; /*< Address offset = 0x1c04 */
    sbb_param_h129_reg_t PARAM_H129; /*< Address offset = 0x1c08 */
    sbb_param_l129_reg_t PARAM_L129; /*< Address offset = 0x1c0c */
    sbb_param_h130_reg_t PARAM_H130; /*< Address offset = 0x1c10 */
    sbb_param_l130_reg_t PARAM_L130; /*< Address offset = 0x1c14 */
    sbb_param_h131_reg_t PARAM_H131; /*< Address offset = 0x1c18 */
    sbb_param_l131_reg_t PARAM_L131; /*< Address offset = 0x1c1c */
    sbb_param_h132_reg_t PARAM_H132; /*< Address offset = 0x1c20 */
    sbb_param_l132_reg_t PARAM_L132; /*< Address offset = 0x1c24 */
    sbb_param_h133_reg_t PARAM_H133; /*< Address offset = 0x1c28 */
    sbb_param_l133_reg_t PARAM_L133; /*< Address offset = 0x1c2c */
    sbb_param_h134_reg_t PARAM_H134; /*< Address offset = 0x1c30 */
    sbb_param_l134_reg_t PARAM_L134; /*< Address offset = 0x1c34 */
    sbb_param_h135_reg_t PARAM_H135; /*< Address offset = 0x1c38 */
    sbb_param_l135_reg_t PARAM_L135; /*< Address offset = 0x1c3c */
    sbb_param_h136_reg_t PARAM_H136; /*< Address offset = 0x1c40 */
    sbb_param_l136_reg_t PARAM_L136; /*< Address offset = 0x1c44 */
    sbb_param_h137_reg_t PARAM_H137; /*< Address offset = 0x1c48 */
    sbb_param_l137_reg_t PARAM_L137; /*< Address offset = 0x1c4c */
    sbb_param_h138_reg_t PARAM_H138; /*< Address offset = 0x1c50 */
    sbb_param_l138_reg_t PARAM_L138; /*< Address offset = 0x1c54 */
    sbb_param_h139_reg_t PARAM_H139; /*< Address offset = 0x1c58 */
    sbb_param_l139_reg_t PARAM_L139; /*< Address offset = 0x1c5c */
    sbb_param_h140_reg_t PARAM_H140; /*< Address offset = 0x1c60 */
    sbb_param_l140_reg_t PARAM_L140; /*< Address offset = 0x1c64 */
    sbb_param_h141_reg_t PARAM_H141; /*< Address offset = 0x1c68 */
    sbb_param_l141_reg_t PARAM_L141; /*< Address offset = 0x1c6c */
    sbb_param_h142_reg_t PARAM_H142; /*< Address offset = 0x1c70 */
    sbb_param_l142_reg_t PARAM_L142; /*< Address offset = 0x1c74 */
    sbb_param_h143_reg_t PARAM_H143; /*< Address offset = 0x1c78 */
    sbb_param_l143_reg_t PARAM_L143; /*< Address offset = 0x1c7c */
    sbb_param_h144_reg_t PARAM_H144; /*< Address offset = 0x1c80 */
    sbb_param_l144_reg_t PARAM_L144; /*< Address offset = 0x1c84 */
    sbb_param_h145_reg_t PARAM_H145; /*< Address offset = 0x1c88 */
    sbb_param_l145_reg_t PARAM_L145; /*< Address offset = 0x1c8c */
    sbb_param_h146_reg_t PARAM_H146; /*< Address offset = 0x1c90 */
    sbb_param_l146_reg_t PARAM_L146; /*< Address offset = 0x1c94 */
    sbb_param_h147_reg_t PARAM_H147; /*< Address offset = 0x1c98 */
    sbb_param_l147_reg_t PARAM_L147; /*< Address offset = 0x1c9c */
    sbb_param_h148_reg_t PARAM_H148; /*< Address offset = 0x1ca0 */
    sbb_param_l148_reg_t PARAM_L148; /*< Address offset = 0x1ca4 */
    sbb_param_h149_reg_t PARAM_H149; /*< Address offset = 0x1ca8 */
    sbb_param_l149_reg_t PARAM_L149; /*< Address offset = 0x1cac */
    sbb_param_h150_reg_t PARAM_H150; /*< Address offset = 0x1cb0 */
    sbb_param_l150_reg_t PARAM_L150; /*< Address offset = 0x1cb4 */
    sbb_param_h151_reg_t PARAM_H151; /*< Address offset = 0x1cb8 */
    sbb_param_l151_reg_t PARAM_L151; /*< Address offset = 0x1cbc */
    sbb_param_h152_reg_t PARAM_H152; /*< Address offset = 0x1cc0 */
    sbb_param_l152_reg_t PARAM_L152; /*< Address offset = 0x1cc4 */
    sbb_param_h153_reg_t PARAM_H153; /*< Address offset = 0x1cc8 */
    sbb_param_l153_reg_t PARAM_L153; /*< Address offset = 0x1ccc */
    sbb_param_h154_reg_t PARAM_H154; /*< Address offset = 0x1cd0 */
    sbb_param_l154_reg_t PARAM_L154; /*< Address offset = 0x1cd4 */
    sbb_param_h155_reg_t PARAM_H155; /*< Address offset = 0x1cd8 */
    sbb_param_l155_reg_t PARAM_L155; /*< Address offset = 0x1cdc */
    sbb_param_h156_reg_t PARAM_H156; /*< Address offset = 0x1ce0 */
    sbb_param_l156_reg_t PARAM_L156; /*< Address offset = 0x1ce4 */
    sbb_param_h157_reg_t PARAM_H157; /*< Address offset = 0x1ce8 */
    sbb_param_l157_reg_t PARAM_L157; /*< Address offset = 0x1cec */
    sbb_param_h158_reg_t PARAM_H158; /*< Address offset = 0x1cf0 */
    sbb_param_l158_reg_t PARAM_L158; /*< Address offset = 0x1cf4 */
    sbb_param_h159_reg_t PARAM_H159; /*< Address offset = 0x1cf8 */
    sbb_param_l159_reg_t PARAM_L159; /*< Address offset = 0x1cfc */
    sbb_param_h160_reg_t PARAM_H160; /*< Address offset = 0x1d00 */
    sbb_param_l160_reg_t PARAM_L160; /*< Address offset = 0x1d04 */
    sbb_param_h161_reg_t PARAM_H161; /*< Address offset = 0x1d08 */
    sbb_param_l161_reg_t PARAM_L161; /*< Address offset = 0x1d0c */
    sbb_param_h162_reg_t PARAM_H162; /*< Address offset = 0x1d10 */
    sbb_param_l162_reg_t PARAM_L162; /*< Address offset = 0x1d14 */
    sbb_param_h163_reg_t PARAM_H163; /*< Address offset = 0x1d18 */
    sbb_param_l163_reg_t PARAM_L163; /*< Address offset = 0x1d1c */
    sbb_param_h164_reg_t PARAM_H164; /*< Address offset = 0x1d20 */
    sbb_param_l164_reg_t PARAM_L164; /*< Address offset = 0x1d24 */
    sbb_param_h165_reg_t PARAM_H165; /*< Address offset = 0x1d28 */
    sbb_param_l165_reg_t PARAM_L165; /*< Address offset = 0x1d2c */
    sbb_param_h166_reg_t PARAM_H166; /*< Address offset = 0x1d30 */
    sbb_param_l166_reg_t PARAM_L166; /*< Address offset = 0x1d34 */
    sbb_param_h167_reg_t PARAM_H167; /*< Address offset = 0x1d38 */
    sbb_param_l167_reg_t PARAM_L167; /*< Address offset = 0x1d3c */
    sbb_param_h168_reg_t PARAM_H168; /*< Address offset = 0x1d40 */
    sbb_param_l168_reg_t PARAM_L168; /*< Address offset = 0x1d44 */
    sbb_param_h169_reg_t PARAM_H169; /*< Address offset = 0x1d48 */
    sbb_param_l169_reg_t PARAM_L169; /*< Address offset = 0x1d4c */
    sbb_param_h170_reg_t PARAM_H170; /*< Address offset = 0x1d50 */
    sbb_param_l170_reg_t PARAM_L170; /*< Address offset = 0x1d54 */
    sbb_param_h171_reg_t PARAM_H171; /*< Address offset = 0x1d58 */
    sbb_param_l171_reg_t PARAM_L171; /*< Address offset = 0x1d5c */
    sbb_param_h172_reg_t PARAM_H172; /*< Address offset = 0x1d60 */
    sbb_param_l172_reg_t PARAM_L172; /*< Address offset = 0x1d64 */
    sbb_param_h173_reg_t PARAM_H173; /*< Address offset = 0x1d68 */
    sbb_param_l173_reg_t PARAM_L173; /*< Address offset = 0x1d6c */
    sbb_param_h174_reg_t PARAM_H174; /*< Address offset = 0x1d70 */
    sbb_param_l174_reg_t PARAM_L174; /*< Address offset = 0x1d74 */
    sbb_param_h175_reg_t PARAM_H175; /*< Address offset = 0x1d78 */
    sbb_param_l175_reg_t PARAM_L175; /*< Address offset = 0x1d7c */
    sbb_param_h176_reg_t PARAM_H176; /*< Address offset = 0x1d80 */
    sbb_param_l176_reg_t PARAM_L176; /*< Address offset = 0x1d84 */
    sbb_param_h177_reg_t PARAM_H177; /*< Address offset = 0x1d88 */
    sbb_param_l177_reg_t PARAM_L177; /*< Address offset = 0x1d8c */
    sbb_param_h178_reg_t PARAM_H178; /*< Address offset = 0x1d90 */
    sbb_param_l178_reg_t PARAM_L178; /*< Address offset = 0x1d94 */
    sbb_param_h179_reg_t PARAM_H179; /*< Address offset = 0x1d98 */
    sbb_param_l179_reg_t PARAM_L179; /*< Address offset = 0x1d9c */
    sbb_param_h180_reg_t PARAM_H180; /*< Address offset = 0x1da0 */
    sbb_param_l180_reg_t PARAM_L180; /*< Address offset = 0x1da4 */
    sbb_param_h181_reg_t PARAM_H181; /*< Address offset = 0x1da8 */
    sbb_param_l181_reg_t PARAM_L181; /*< Address offset = 0x1dac */
    sbb_param_h182_reg_t PARAM_H182; /*< Address offset = 0x1db0 */
    sbb_param_l182_reg_t PARAM_L182; /*< Address offset = 0x1db4 */
    sbb_param_h183_reg_t PARAM_H183; /*< Address offset = 0x1db8 */
    sbb_param_l183_reg_t PARAM_L183; /*< Address offset = 0x1dbc */
    sbb_param_h184_reg_t PARAM_H184; /*< Address offset = 0x1dc0 */
    sbb_param_l184_reg_t PARAM_L184; /*< Address offset = 0x1dc4 */
    sbb_param_h185_reg_t PARAM_H185; /*< Address offset = 0x1dc8 */
    sbb_param_l185_reg_t PARAM_L185; /*< Address offset = 0x1dcc */
    sbb_param_h186_reg_t PARAM_H186; /*< Address offset = 0x1dd0 */
    sbb_param_l186_reg_t PARAM_L186; /*< Address offset = 0x1dd4 */
    sbb_param_h187_reg_t PARAM_H187; /*< Address offset = 0x1dd8 */
    sbb_param_l187_reg_t PARAM_L187; /*< Address offset = 0x1ddc */
    sbb_param_h188_reg_t PARAM_H188; /*< Address offset = 0x1de0 */
    sbb_param_l188_reg_t PARAM_L188; /*< Address offset = 0x1de4 */
    sbb_param_h189_reg_t PARAM_H189; /*< Address offset = 0x1de8 */
    sbb_param_l189_reg_t PARAM_L189; /*< Address offset = 0x1dec */
    sbb_param_h190_reg_t PARAM_H190; /*< Address offset = 0x1df0 */
    sbb_param_l190_reg_t PARAM_L190; /*< Address offset = 0x1df4 */
    sbb_param_h191_reg_t PARAM_H191; /*< Address offset = 0x1df8 */
    sbb_param_l191_reg_t PARAM_L191; /*< Address offset = 0x1dfc */
    sbb_param_h192_reg_t PARAM_H192; /*< Address offset = 0x1e00 */
    sbb_param_l192_reg_t PARAM_L192; /*< Address offset = 0x1e04 */
    sbb_param_h193_reg_t PARAM_H193; /*< Address offset = 0x1e08 */
    sbb_param_l193_reg_t PARAM_L193; /*< Address offset = 0x1e0c */
    sbb_param_h194_reg_t PARAM_H194; /*< Address offset = 0x1e10 */
    sbb_param_l194_reg_t PARAM_L194; /*< Address offset = 0x1e14 */
    sbb_param_h195_reg_t PARAM_H195; /*< Address offset = 0x1e18 */
    sbb_param_l195_reg_t PARAM_L195; /*< Address offset = 0x1e1c */
    sbb_param_h196_reg_t PARAM_H196; /*< Address offset = 0x1e20 */
    sbb_param_l196_reg_t PARAM_L196; /*< Address offset = 0x1e24 */
    sbb_param_h197_reg_t PARAM_H197; /*< Address offset = 0x1e28 */
    sbb_param_l197_reg_t PARAM_L197; /*< Address offset = 0x1e2c */
    sbb_param_h198_reg_t PARAM_H198; /*< Address offset = 0x1e30 */
    sbb_param_l198_reg_t PARAM_L198; /*< Address offset = 0x1e34 */
    sbb_param_h199_reg_t PARAM_H199; /*< Address offset = 0x1e38 */
    sbb_param_l199_reg_t PARAM_L199; /*< Address offset = 0x1e3c */
    sbb_param_h200_reg_t PARAM_H200; /*< Address offset = 0x1e40 */
    sbb_param_l200_reg_t PARAM_L200; /*< Address offset = 0x1e44 */
    sbb_param_h201_reg_t PARAM_H201; /*< Address offset = 0x1e48 */
    sbb_param_l201_reg_t PARAM_L201; /*< Address offset = 0x1e4c */
    sbb_param_h202_reg_t PARAM_H202; /*< Address offset = 0x1e50 */
    sbb_param_l202_reg_t PARAM_L202; /*< Address offset = 0x1e54 */
    sbb_param_h203_reg_t PARAM_H203; /*< Address offset = 0x1e58 */
    sbb_param_l203_reg_t PARAM_L203; /*< Address offset = 0x1e5c */
    sbb_param_h204_reg_t PARAM_H204; /*< Address offset = 0x1e60 */
    sbb_param_l204_reg_t PARAM_L204; /*< Address offset = 0x1e64 */
    sbb_param_h205_reg_t PARAM_H205; /*< Address offset = 0x1e68 */
    sbb_param_l205_reg_t PARAM_L205; /*< Address offset = 0x1e6c */
    sbb_param_h206_reg_t PARAM_H206; /*< Address offset = 0x1e70 */
    sbb_param_l206_reg_t PARAM_L206; /*< Address offset = 0x1e74 */
    sbb_param_h207_reg_t PARAM_H207; /*< Address offset = 0x1e78 */
    sbb_param_l207_reg_t PARAM_L207; /*< Address offset = 0x1e7c */
    sbb_param_h208_reg_t PARAM_H208; /*< Address offset = 0x1e80 */
    sbb_param_l208_reg_t PARAM_L208; /*< Address offset = 0x1e84 */
    sbb_param_h209_reg_t PARAM_H209; /*< Address offset = 0x1e88 */
    sbb_param_l209_reg_t PARAM_L209; /*< Address offset = 0x1e8c */
    sbb_param_h210_reg_t PARAM_H210; /*< Address offset = 0x1e90 */
    sbb_param_l210_reg_t PARAM_L210; /*< Address offset = 0x1e94 */
    sbb_param_h211_reg_t PARAM_H211; /*< Address offset = 0x1e98 */
    sbb_param_l211_reg_t PARAM_L211; /*< Address offset = 0x1e9c */
    sbb_param_h212_reg_t PARAM_H212; /*< Address offset = 0x1ea0 */
    sbb_param_l212_reg_t PARAM_L212; /*< Address offset = 0x1ea4 */
    sbb_param_h213_reg_t PARAM_H213; /*< Address offset = 0x1ea8 */
    sbb_param_l213_reg_t PARAM_L213; /*< Address offset = 0x1eac */
    sbb_param_h214_reg_t PARAM_H214; /*< Address offset = 0x1eb0 */
    sbb_param_l214_reg_t PARAM_L214; /*< Address offset = 0x1eb4 */
    sbb_param_h215_reg_t PARAM_H215; /*< Address offset = 0x1eb8 */
    sbb_param_l215_reg_t PARAM_L215; /*< Address offset = 0x1ebc */
    sbb_param_h216_reg_t PARAM_H216; /*< Address offset = 0x1ec0 */
    sbb_param_l216_reg_t PARAM_L216; /*< Address offset = 0x1ec4 */
    sbb_param_h217_reg_t PARAM_H217; /*< Address offset = 0x1ec8 */
    sbb_param_l217_reg_t PARAM_L217; /*< Address offset = 0x1ecc */
    sbb_param_h218_reg_t PARAM_H218; /*< Address offset = 0x1ed0 */
    sbb_param_l218_reg_t PARAM_L218; /*< Address offset = 0x1ed4 */
    sbb_param_h219_reg_t PARAM_H219; /*< Address offset = 0x1ed8 */
    sbb_param_l219_reg_t PARAM_L219; /*< Address offset = 0x1edc */
    sbb_param_h220_reg_t PARAM_H220; /*< Address offset = 0x1ee0 */
    sbb_param_l220_reg_t PARAM_L220; /*< Address offset = 0x1ee4 */
    sbb_param_h221_reg_t PARAM_H221; /*< Address offset = 0x1ee8 */
    sbb_param_l221_reg_t PARAM_L221; /*< Address offset = 0x1eec */
    sbb_param_h222_reg_t PARAM_H222; /*< Address offset = 0x1ef0 */
    sbb_param_l222_reg_t PARAM_L222; /*< Address offset = 0x1ef4 */
    sbb_param_h223_reg_t PARAM_H223; /*< Address offset = 0x1ef8 */
    sbb_param_l223_reg_t PARAM_L223; /*< Address offset = 0x1efc */
    sbb_param_h224_reg_t PARAM_H224; /*< Address offset = 0x1f00 */
    sbb_param_l224_reg_t PARAM_L224; /*< Address offset = 0x1f04 */
    sbb_param_h225_reg_t PARAM_H225; /*< Address offset = 0x1f08 */
    sbb_param_l225_reg_t PARAM_L225; /*< Address offset = 0x1f0c */
    sbb_param_h226_reg_t PARAM_H226; /*< Address offset = 0x1f10 */
    sbb_param_l226_reg_t PARAM_L226; /*< Address offset = 0x1f14 */
    sbb_param_h227_reg_t PARAM_H227; /*< Address offset = 0x1f18 */
    sbb_param_l227_reg_t PARAM_L227; /*< Address offset = 0x1f1c */
    sbb_param_h228_reg_t PARAM_H228; /*< Address offset = 0x1f20 */
    sbb_param_l228_reg_t PARAM_L228; /*< Address offset = 0x1f24 */
    sbb_param_h229_reg_t PARAM_H229; /*< Address offset = 0x1f28 */
    sbb_param_l229_reg_t PARAM_L229; /*< Address offset = 0x1f2c */
    sbb_param_h230_reg_t PARAM_H230; /*< Address offset = 0x1f30 */
    sbb_param_l230_reg_t PARAM_L230; /*< Address offset = 0x1f34 */
    sbb_param_h231_reg_t PARAM_H231; /*< Address offset = 0x1f38 */
    sbb_param_l231_reg_t PARAM_L231; /*< Address offset = 0x1f3c */
    sbb_param_h232_reg_t PARAM_H232; /*< Address offset = 0x1f40 */
    sbb_param_l232_reg_t PARAM_L232; /*< Address offset = 0x1f44 */
    sbb_param_h233_reg_t PARAM_H233; /*< Address offset = 0x1f48 */
    sbb_param_l233_reg_t PARAM_L233; /*< Address offset = 0x1f4c */
    sbb_param_h234_reg_t PARAM_H234; /*< Address offset = 0x1f50 */
    sbb_param_l234_reg_t PARAM_L234; /*< Address offset = 0x1f54 */
    sbb_param_h235_reg_t PARAM_H235; /*< Address offset = 0x1f58 */
    sbb_param_l235_reg_t PARAM_L235; /*< Address offset = 0x1f5c */
    sbb_param_h236_reg_t PARAM_H236; /*< Address offset = 0x1f60 */
    sbb_param_l236_reg_t PARAM_L236; /*< Address offset = 0x1f64 */
    sbb_param_h237_reg_t PARAM_H237; /*< Address offset = 0x1f68 */
    sbb_param_l237_reg_t PARAM_L237; /*< Address offset = 0x1f6c */
    sbb_param_h238_reg_t PARAM_H238; /*< Address offset = 0x1f70 */
    sbb_param_l238_reg_t PARAM_L238; /*< Address offset = 0x1f74 */
    sbb_param_h239_reg_t PARAM_H239; /*< Address offset = 0x1f78 */
    sbb_param_l239_reg_t PARAM_L239; /*< Address offset = 0x1f7c */
    sbb_param_h240_reg_t PARAM_H240; /*< Address offset = 0x1f80 */
    sbb_param_l240_reg_t PARAM_L240; /*< Address offset = 0x1f84 */
    sbb_param_h241_reg_t PARAM_H241; /*< Address offset = 0x1f88 */
    sbb_param_l241_reg_t PARAM_L241; /*< Address offset = 0x1f8c */
    sbb_param_h242_reg_t PARAM_H242; /*< Address offset = 0x1f90 */
    sbb_param_l242_reg_t PARAM_L242; /*< Address offset = 0x1f94 */
    sbb_param_h243_reg_t PARAM_H243; /*< Address offset = 0x1f98 */
    sbb_param_l243_reg_t PARAM_L243; /*< Address offset = 0x1f9c */
    sbb_param_h244_reg_t PARAM_H244; /*< Address offset = 0x1fa0 */
    sbb_param_l244_reg_t PARAM_L244; /*< Address offset = 0x1fa4 */
    sbb_param_h245_reg_t PARAM_H245; /*< Address offset = 0x1fa8 */
    sbb_param_l245_reg_t PARAM_L245; /*< Address offset = 0x1fac */
    sbb_param_h246_reg_t PARAM_H246; /*< Address offset = 0x1fb0 */
    sbb_param_l246_reg_t PARAM_L246; /*< Address offset = 0x1fb4 */
    sbb_param_h247_reg_t PARAM_H247; /*< Address offset = 0x1fb8 */
    sbb_param_l247_reg_t PARAM_L247; /*< Address offset = 0x1fbc */
    sbb_param_h248_reg_t PARAM_H248; /*< Address offset = 0x1fc0 */
    sbb_param_l248_reg_t PARAM_L248; /*< Address offset = 0x1fc4 */
    sbb_param_h249_reg_t PARAM_H249; /*< Address offset = 0x1fc8 */
    sbb_param_l249_reg_t PARAM_L249; /*< Address offset = 0x1fcc */
    sbb_param_h250_reg_t PARAM_H250; /*< Address offset = 0x1fd0 */
    sbb_param_l250_reg_t PARAM_L250; /*< Address offset = 0x1fd4 */
    sbb_param_h251_reg_t PARAM_H251; /*< Address offset = 0x1fd8 */
    sbb_param_l251_reg_t PARAM_L251; /*< Address offset = 0x1fdc */
    sbb_param_h252_reg_t PARAM_H252; /*< Address offset = 0x1fe0 */
    sbb_param_l252_reg_t PARAM_L252; /*< Address offset = 0x1fe4 */
    sbb_param_h253_reg_t PARAM_H253; /*< Address offset = 0x1fe8 */
    sbb_param_l253_reg_t PARAM_L253; /*< Address offset = 0x1fec */
    sbb_param_h254_reg_t PARAM_H254; /*< Address offset = 0x1ff0 */
    sbb_param_l254_reg_t PARAM_L254; /*< Address offset = 0x1ff4 */
    sbb_param_h255_reg_t PARAM_H255; /*< Address offset = 0x1ff8 */
    sbb_param_l255_reg_t PARAM_L255; /*< Address offset = 0x1ffc */
    sbb_param_h256_reg_t PARAM_H256; /*< Address offset = 0x2000 */
    sbb_param_l256_reg_t PARAM_L256; /*< Address offset = 0x2004 */
    sbb_param_h257_reg_t PARAM_H257; /*< Address offset = 0x2008 */
    sbb_param_l257_reg_t PARAM_L257; /*< Address offset = 0x200c */
    sbb_param_h258_reg_t PARAM_H258; /*< Address offset = 0x2010 */
    sbb_param_l258_reg_t PARAM_L258; /*< Address offset = 0x2014 */
    sbb_param_h259_reg_t PARAM_H259; /*< Address offset = 0x2018 */
    sbb_param_l259_reg_t PARAM_L259; /*< Address offset = 0x201c */
    sbb_param_h260_reg_t PARAM_H260; /*< Address offset = 0x2020 */
    sbb_param_l260_reg_t PARAM_L260; /*< Address offset = 0x2024 */
    sbb_param_h261_reg_t PARAM_H261; /*< Address offset = 0x2028 */
    sbb_param_l261_reg_t PARAM_L261; /*< Address offset = 0x202c */
    sbb_param_h262_reg_t PARAM_H262; /*< Address offset = 0x2030 */
    sbb_param_l262_reg_t PARAM_L262; /*< Address offset = 0x2034 */
    sbb_param_h263_reg_t PARAM_H263; /*< Address offset = 0x2038 */
    sbb_param_l263_reg_t PARAM_L263; /*< Address offset = 0x203c */
    sbb_param_h264_reg_t PARAM_H264; /*< Address offset = 0x2040 */
    sbb_param_l264_reg_t PARAM_L264; /*< Address offset = 0x2044 */
    sbb_param_h265_reg_t PARAM_H265; /*< Address offset = 0x2048 */
    sbb_param_l265_reg_t PARAM_L265; /*< Address offset = 0x204c */
    sbb_param_h266_reg_t PARAM_H266; /*< Address offset = 0x2050 */
    sbb_param_l266_reg_t PARAM_L266; /*< Address offset = 0x2054 */
    sbb_param_h267_reg_t PARAM_H267; /*< Address offset = 0x2058 */
    sbb_param_l267_reg_t PARAM_L267; /*< Address offset = 0x205c */
    sbb_param_h268_reg_t PARAM_H268; /*< Address offset = 0x2060 */
    sbb_param_l268_reg_t PARAM_L268; /*< Address offset = 0x2064 */
    sbb_param_h269_reg_t PARAM_H269; /*< Address offset = 0x2068 */
    sbb_param_l269_reg_t PARAM_L269; /*< Address offset = 0x206c */
    sbb_param_h270_reg_t PARAM_H270; /*< Address offset = 0x2070 */
    sbb_param_l270_reg_t PARAM_L270; /*< Address offset = 0x2074 */
    sbb_param_h271_reg_t PARAM_H271; /*< Address offset = 0x2078 */
    sbb_param_l271_reg_t PARAM_L271; /*< Address offset = 0x207c */
    sbb_param_h272_reg_t PARAM_H272; /*< Address offset = 0x2080 */
    sbb_param_l272_reg_t PARAM_L272; /*< Address offset = 0x2084 */
    sbb_param_h273_reg_t PARAM_H273; /*< Address offset = 0x2088 */
    sbb_param_l273_reg_t PARAM_L273; /*< Address offset = 0x208c */
    sbb_param_h274_reg_t PARAM_H274; /*< Address offset = 0x2090 */
    sbb_param_l274_reg_t PARAM_L274; /*< Address offset = 0x2094 */
    sbb_param_h275_reg_t PARAM_H275; /*< Address offset = 0x2098 */
    sbb_param_l275_reg_t PARAM_L275; /*< Address offset = 0x209c */
    sbb_param_h276_reg_t PARAM_H276; /*< Address offset = 0x20a0 */
    sbb_param_l276_reg_t PARAM_L276; /*< Address offset = 0x20a4 */
    sbb_param_h277_reg_t PARAM_H277; /*< Address offset = 0x20a8 */
    sbb_param_l277_reg_t PARAM_L277; /*< Address offset = 0x20ac */
    sbb_param_h278_reg_t PARAM_H278; /*< Address offset = 0x20b0 */
    sbb_param_l278_reg_t PARAM_L278; /*< Address offset = 0x20b4 */
    sbb_param_h279_reg_t PARAM_H279; /*< Address offset = 0x20b8 */
    sbb_param_l279_reg_t PARAM_L279; /*< Address offset = 0x20bc */
    sbb_param_h280_reg_t PARAM_H280; /*< Address offset = 0x20c0 */
    sbb_param_l280_reg_t PARAM_L280; /*< Address offset = 0x20c4 */
    sbb_param_h281_reg_t PARAM_H281; /*< Address offset = 0x20c8 */
    sbb_param_l281_reg_t PARAM_L281; /*< Address offset = 0x20cc */
    sbb_param_h282_reg_t PARAM_H282; /*< Address offset = 0x20d0 */
    sbb_param_l282_reg_t PARAM_L282; /*< Address offset = 0x20d4 */
    sbb_param_h283_reg_t PARAM_H283; /*< Address offset = 0x20d8 */
    sbb_param_l283_reg_t PARAM_L283; /*< Address offset = 0x20dc */
    sbb_param_h284_reg_t PARAM_H284; /*< Address offset = 0x20e0 */
    sbb_param_l284_reg_t PARAM_L284; /*< Address offset = 0x20e4 */
    sbb_param_h285_reg_t PARAM_H285; /*< Address offset = 0x20e8 */
    sbb_param_l285_reg_t PARAM_L285; /*< Address offset = 0x20ec */
    sbb_param_h286_reg_t PARAM_H286; /*< Address offset = 0x20f0 */
    sbb_param_l286_reg_t PARAM_L286; /*< Address offset = 0x20f4 */
    sbb_param_h287_reg_t PARAM_H287; /*< Address offset = 0x20f8 */
    sbb_param_l287_reg_t PARAM_L287; /*< Address offset = 0x20fc */
    sbb_param_h288_reg_t PARAM_H288; /*< Address offset = 0x2100 */
    sbb_param_l288_reg_t PARAM_L288; /*< Address offset = 0x2104 */
    sbb_param_h289_reg_t PARAM_H289; /*< Address offset = 0x2108 */
    sbb_param_l289_reg_t PARAM_L289; /*< Address offset = 0x210c */
    sbb_param_h290_reg_t PARAM_H290; /*< Address offset = 0x2110 */
    sbb_param_l290_reg_t PARAM_L290; /*< Address offset = 0x2114 */
    sbb_param_h291_reg_t PARAM_H291; /*< Address offset = 0x2118 */
    sbb_param_l291_reg_t PARAM_L291; /*< Address offset = 0x211c */
    sbb_param_h292_reg_t PARAM_H292; /*< Address offset = 0x2120 */
    sbb_param_l292_reg_t PARAM_L292; /*< Address offset = 0x2124 */
    sbb_param_h293_reg_t PARAM_H293; /*< Address offset = 0x2128 */
    sbb_param_l293_reg_t PARAM_L293; /*< Address offset = 0x212c */
    sbb_param_h294_reg_t PARAM_H294; /*< Address offset = 0x2130 */
    sbb_param_l294_reg_t PARAM_L294; /*< Address offset = 0x2134 */
    sbb_param_h295_reg_t PARAM_H295; /*< Address offset = 0x2138 */
    sbb_param_l295_reg_t PARAM_L295; /*< Address offset = 0x213c */
    sbb_param_h296_reg_t PARAM_H296; /*< Address offset = 0x2140 */
    sbb_param_l296_reg_t PARAM_L296; /*< Address offset = 0x2144 */
    sbb_param_h297_reg_t PARAM_H297; /*< Address offset = 0x2148 */
    sbb_param_l297_reg_t PARAM_L297; /*< Address offset = 0x214c */
    sbb_param_h298_reg_t PARAM_H298; /*< Address offset = 0x2150 */
    sbb_param_l298_reg_t PARAM_L298; /*< Address offset = 0x2154 */
    sbb_param_h299_reg_t PARAM_H299; /*< Address offset = 0x2158 */
    sbb_param_l299_reg_t PARAM_L299; /*< Address offset = 0x215c */
    sbb_param_h300_reg_t PARAM_H300; /*< Address offset = 0x2160 */
    sbb_param_l300_reg_t PARAM_L300; /*< Address offset = 0x2164 */
    sbb_param_h301_reg_t PARAM_H301; /*< Address offset = 0x2168 */
    sbb_param_l301_reg_t PARAM_L301; /*< Address offset = 0x216c */
    sbb_param_h302_reg_t PARAM_H302; /*< Address offset = 0x2170 */
    sbb_param_l302_reg_t PARAM_L302; /*< Address offset = 0x2174 */
    sbb_param_h303_reg_t PARAM_H303; /*< Address offset = 0x2178 */
    sbb_param_l303_reg_t PARAM_L303; /*< Address offset = 0x217c */
    sbb_param_h304_reg_t PARAM_H304; /*< Address offset = 0x2180 */
    sbb_param_l304_reg_t PARAM_L304; /*< Address offset = 0x2184 */
    sbb_param_h305_reg_t PARAM_H305; /*< Address offset = 0x2188 */
    sbb_param_l305_reg_t PARAM_L305; /*< Address offset = 0x218c */
    sbb_param_h306_reg_t PARAM_H306; /*< Address offset = 0x2190 */
    sbb_param_l306_reg_t PARAM_L306; /*< Address offset = 0x2194 */
    sbb_param_h307_reg_t PARAM_H307; /*< Address offset = 0x2198 */
    sbb_param_l307_reg_t PARAM_L307; /*< Address offset = 0x219c */
    sbb_param_h308_reg_t PARAM_H308; /*< Address offset = 0x21a0 */
    sbb_param_l308_reg_t PARAM_L308; /*< Address offset = 0x21a4 */
    sbb_param_h309_reg_t PARAM_H309; /*< Address offset = 0x21a8 */
    sbb_param_l309_reg_t PARAM_L309; /*< Address offset = 0x21ac */
    sbb_param_h310_reg_t PARAM_H310; /*< Address offset = 0x21b0 */
    sbb_param_l310_reg_t PARAM_L310; /*< Address offset = 0x21b4 */
    sbb_param_h311_reg_t PARAM_H311; /*< Address offset = 0x21b8 */
    sbb_param_l311_reg_t PARAM_L311; /*< Address offset = 0x21bc */
    sbb_param_h312_reg_t PARAM_H312; /*< Address offset = 0x21c0 */
    sbb_param_l312_reg_t PARAM_L312; /*< Address offset = 0x21c4 */
    sbb_param_h313_reg_t PARAM_H313; /*< Address offset = 0x21c8 */
    sbb_param_l313_reg_t PARAM_L313; /*< Address offset = 0x21cc */
    sbb_param_h314_reg_t PARAM_H314; /*< Address offset = 0x21d0 */
    sbb_param_l314_reg_t PARAM_L314; /*< Address offset = 0x21d4 */
    sbb_param_h315_reg_t PARAM_H315; /*< Address offset = 0x21d8 */
    sbb_param_l315_reg_t PARAM_L315; /*< Address offset = 0x21dc */
    sbb_param_h316_reg_t PARAM_H316; /*< Address offset = 0x21e0 */
    sbb_param_l316_reg_t PARAM_L316; /*< Address offset = 0x21e4 */
    sbb_param_h317_reg_t PARAM_H317; /*< Address offset = 0x21e8 */
    sbb_param_l317_reg_t PARAM_L317; /*< Address offset = 0x21ec */
    sbb_param_h318_reg_t PARAM_H318; /*< Address offset = 0x21f0 */
    sbb_param_l318_reg_t PARAM_L318; /*< Address offset = 0x21f4 */
    sbb_param_h319_reg_t PARAM_H319; /*< Address offset = 0x21f8 */
    sbb_param_l319_reg_t PARAM_L319; /*< Address offset = 0x21fc */
    sbb_param_h320_reg_t PARAM_H320; /*< Address offset = 0x2200 */
    sbb_param_l320_reg_t PARAM_L320; /*< Address offset = 0x2204 */
    sbb_param_h321_reg_t PARAM_H321; /*< Address offset = 0x2208 */
    sbb_param_l321_reg_t PARAM_L321; /*< Address offset = 0x220c */
    sbb_param_h322_reg_t PARAM_H322; /*< Address offset = 0x2210 */
    sbb_param_l322_reg_t PARAM_L322; /*< Address offset = 0x2214 */
    sbb_param_h323_reg_t PARAM_H323; /*< Address offset = 0x2218 */
    sbb_param_l323_reg_t PARAM_L323; /*< Address offset = 0x221c */
    sbb_param_h324_reg_t PARAM_H324; /*< Address offset = 0x2220 */
    sbb_param_l324_reg_t PARAM_L324; /*< Address offset = 0x2224 */
    sbb_param_h325_reg_t PARAM_H325; /*< Address offset = 0x2228 */
    sbb_param_l325_reg_t PARAM_L325; /*< Address offset = 0x222c */
    sbb_param_h326_reg_t PARAM_H326; /*< Address offset = 0x2230 */
    sbb_param_l326_reg_t PARAM_L326; /*< Address offset = 0x2234 */
    sbb_param_h327_reg_t PARAM_H327; /*< Address offset = 0x2238 */
    sbb_param_l327_reg_t PARAM_L327; /*< Address offset = 0x223c */
    sbb_param_h328_reg_t PARAM_H328; /*< Address offset = 0x2240 */
    sbb_param_l328_reg_t PARAM_L328; /*< Address offset = 0x2244 */
    sbb_param_h329_reg_t PARAM_H329; /*< Address offset = 0x2248 */
    sbb_param_l329_reg_t PARAM_L329; /*< Address offset = 0x224c */
    sbb_param_h330_reg_t PARAM_H330; /*< Address offset = 0x2250 */
    sbb_param_l330_reg_t PARAM_L330; /*< Address offset = 0x2254 */
    sbb_param_h331_reg_t PARAM_H331; /*< Address offset = 0x2258 */
    sbb_param_l331_reg_t PARAM_L331; /*< Address offset = 0x225c */
    sbb_param_h332_reg_t PARAM_H332; /*< Address offset = 0x2260 */
    sbb_param_l332_reg_t PARAM_L332; /*< Address offset = 0x2264 */
    sbb_param_h333_reg_t PARAM_H333; /*< Address offset = 0x2268 */
    sbb_param_l333_reg_t PARAM_L333; /*< Address offset = 0x226c */
    sbb_param_h334_reg_t PARAM_H334; /*< Address offset = 0x2270 */
    sbb_param_l334_reg_t PARAM_L334; /*< Address offset = 0x2274 */
    sbb_param_h335_reg_t PARAM_H335; /*< Address offset = 0x2278 */
    sbb_param_l335_reg_t PARAM_L335; /*< Address offset = 0x227c */
    sbb_param_h336_reg_t PARAM_H336; /*< Address offset = 0x2280 */
    sbb_param_l336_reg_t PARAM_L336; /*< Address offset = 0x2284 */
    sbb_param_h337_reg_t PARAM_H337; /*< Address offset = 0x2288 */
    sbb_param_l337_reg_t PARAM_L337; /*< Address offset = 0x228c */
    sbb_param_h338_reg_t PARAM_H338; /*< Address offset = 0x2290 */
    sbb_param_l338_reg_t PARAM_L338; /*< Address offset = 0x2294 */
    sbb_param_h339_reg_t PARAM_H339; /*< Address offset = 0x2298 */
    sbb_param_l339_reg_t PARAM_L339; /*< Address offset = 0x229c */
    sbb_param_h340_reg_t PARAM_H340; /*< Address offset = 0x22a0 */
    sbb_param_l340_reg_t PARAM_L340; /*< Address offset = 0x22a4 */
    sbb_param_h341_reg_t PARAM_H341; /*< Address offset = 0x22a8 */
    sbb_param_l341_reg_t PARAM_L341; /*< Address offset = 0x22ac */
    sbb_param_h342_reg_t PARAM_H342; /*< Address offset = 0x22b0 */
    sbb_param_l342_reg_t PARAM_L342; /*< Address offset = 0x22b4 */
    sbb_param_h343_reg_t PARAM_H343; /*< Address offset = 0x22b8 */
    sbb_param_l343_reg_t PARAM_L343; /*< Address offset = 0x22bc */
    sbb_param_h344_reg_t PARAM_H344; /*< Address offset = 0x22c0 */
    sbb_param_l344_reg_t PARAM_L344; /*< Address offset = 0x22c4 */
    sbb_param_h345_reg_t PARAM_H345; /*< Address offset = 0x22c8 */
    sbb_param_l345_reg_t PARAM_L345; /*< Address offset = 0x22cc */
    sbb_param_h346_reg_t PARAM_H346; /*< Address offset = 0x22d0 */
    sbb_param_l346_reg_t PARAM_L346; /*< Address offset = 0x22d4 */
    sbb_param_h347_reg_t PARAM_H347; /*< Address offset = 0x22d8 */
    sbb_param_l347_reg_t PARAM_L347; /*< Address offset = 0x22dc */
    sbb_param_h348_reg_t PARAM_H348; /*< Address offset = 0x22e0 */
    sbb_param_l348_reg_t PARAM_L348; /*< Address offset = 0x22e4 */
    sbb_param_h349_reg_t PARAM_H349; /*< Address offset = 0x22e8 */
    sbb_param_l349_reg_t PARAM_L349; /*< Address offset = 0x22ec */
    sbb_param_h350_reg_t PARAM_H350; /*< Address offset = 0x22f0 */
    sbb_param_l350_reg_t PARAM_L350; /*< Address offset = 0x22f4 */
    sbb_param_h351_reg_t PARAM_H351; /*< Address offset = 0x22f8 */
    sbb_param_l351_reg_t PARAM_L351; /*< Address offset = 0x22fc */
    sbb_param_h352_reg_t PARAM_H352; /*< Address offset = 0x2300 */
    sbb_param_l352_reg_t PARAM_L352; /*< Address offset = 0x2304 */
    sbb_param_h353_reg_t PARAM_H353; /*< Address offset = 0x2308 */
    sbb_param_l353_reg_t PARAM_L353; /*< Address offset = 0x230c */
    sbb_param_h354_reg_t PARAM_H354; /*< Address offset = 0x2310 */
    sbb_param_l354_reg_t PARAM_L354; /*< Address offset = 0x2314 */
    sbb_param_h355_reg_t PARAM_H355; /*< Address offset = 0x2318 */
    sbb_param_l355_reg_t PARAM_L355; /*< Address offset = 0x231c */
    sbb_param_h356_reg_t PARAM_H356; /*< Address offset = 0x2320 */
    sbb_param_l356_reg_t PARAM_L356; /*< Address offset = 0x2324 */
    sbb_param_h357_reg_t PARAM_H357; /*< Address offset = 0x2328 */
    sbb_param_l357_reg_t PARAM_L357; /*< Address offset = 0x232c */
    sbb_param_h358_reg_t PARAM_H358; /*< Address offset = 0x2330 */
    sbb_param_l358_reg_t PARAM_L358; /*< Address offset = 0x2334 */
    sbb_param_h359_reg_t PARAM_H359; /*< Address offset = 0x2338 */
    sbb_param_l359_reg_t PARAM_L359; /*< Address offset = 0x233c */
    sbb_param_h360_reg_t PARAM_H360; /*< Address offset = 0x2340 */
    sbb_param_l360_reg_t PARAM_L360; /*< Address offset = 0x2344 */
    sbb_param_h361_reg_t PARAM_H361; /*< Address offset = 0x2348 */
    sbb_param_l361_reg_t PARAM_L361; /*< Address offset = 0x234c */
    sbb_param_h362_reg_t PARAM_H362; /*< Address offset = 0x2350 */
    sbb_param_l362_reg_t PARAM_L362; /*< Address offset = 0x2354 */
    sbb_param_h363_reg_t PARAM_H363; /*< Address offset = 0x2358 */
    sbb_param_l363_reg_t PARAM_L363; /*< Address offset = 0x235c */
    sbb_param_h364_reg_t PARAM_H364; /*< Address offset = 0x2360 */
    sbb_param_l364_reg_t PARAM_L364; /*< Address offset = 0x2364 */
    sbb_param_h365_reg_t PARAM_H365; /*< Address offset = 0x2368 */
    sbb_param_l365_reg_t PARAM_L365; /*< Address offset = 0x236c */
    sbb_param_h366_reg_t PARAM_H366; /*< Address offset = 0x2370 */
    sbb_param_l366_reg_t PARAM_L366; /*< Address offset = 0x2374 */
    sbb_param_h367_reg_t PARAM_H367; /*< Address offset = 0x2378 */
    sbb_param_l367_reg_t PARAM_L367; /*< Address offset = 0x237c */
    sbb_param_h368_reg_t PARAM_H368; /*< Address offset = 0x2380 */
    sbb_param_l368_reg_t PARAM_L368; /*< Address offset = 0x2384 */
    sbb_param_h369_reg_t PARAM_H369; /*< Address offset = 0x2388 */
    sbb_param_l369_reg_t PARAM_L369; /*< Address offset = 0x238c */
    sbb_param_h370_reg_t PARAM_H370; /*< Address offset = 0x2390 */
    sbb_param_l370_reg_t PARAM_L370; /*< Address offset = 0x2394 */
    sbb_param_h371_reg_t PARAM_H371; /*< Address offset = 0x2398 */
    sbb_param_l371_reg_t PARAM_L371; /*< Address offset = 0x239c */
    sbb_param_h372_reg_t PARAM_H372; /*< Address offset = 0x23a0 */
    sbb_param_l372_reg_t PARAM_L372; /*< Address offset = 0x23a4 */
    sbb_param_h373_reg_t PARAM_H373; /*< Address offset = 0x23a8 */
    sbb_param_l373_reg_t PARAM_L373; /*< Address offset = 0x23ac */
    sbb_param_h374_reg_t PARAM_H374; /*< Address offset = 0x23b0 */
    sbb_param_l374_reg_t PARAM_L374; /*< Address offset = 0x23b4 */
    sbb_param_h375_reg_t PARAM_H375; /*< Address offset = 0x23b8 */
    sbb_param_l375_reg_t PARAM_L375; /*< Address offset = 0x23bc */
    sbb_param_h376_reg_t PARAM_H376; /*< Address offset = 0x23c0 */
    sbb_param_l376_reg_t PARAM_L376; /*< Address offset = 0x23c4 */
    sbb_param_h377_reg_t PARAM_H377; /*< Address offset = 0x23c8 */
    sbb_param_l377_reg_t PARAM_L377; /*< Address offset = 0x23cc */
    sbb_param_h378_reg_t PARAM_H378; /*< Address offset = 0x23d0 */
    sbb_param_l378_reg_t PARAM_L378; /*< Address offset = 0x23d4 */
    sbb_param_h379_reg_t PARAM_H379; /*< Address offset = 0x23d8 */
    sbb_param_l379_reg_t PARAM_L379; /*< Address offset = 0x23dc */
    sbb_param_h380_reg_t PARAM_H380; /*< Address offset = 0x23e0 */
    sbb_param_l380_reg_t PARAM_L380; /*< Address offset = 0x23e4 */
    sbb_param_h381_reg_t PARAM_H381; /*< Address offset = 0x23e8 */
    sbb_param_l381_reg_t PARAM_L381; /*< Address offset = 0x23ec */
    sbb_param_h382_reg_t PARAM_H382; /*< Address offset = 0x23f0 */
    sbb_param_l382_reg_t PARAM_L382; /*< Address offset = 0x23f4 */
    sbb_param_h383_reg_t PARAM_H383; /*< Address offset = 0x23f8 */
    sbb_param_l383_reg_t PARAM_L383; /*< Address offset = 0x23fc */
    sbb_param_h384_reg_t PARAM_H384; /*< Address offset = 0x2400 */
    sbb_param_l384_reg_t PARAM_L384; /*< Address offset = 0x2404 */
    sbb_param_h385_reg_t PARAM_H385; /*< Address offset = 0x2408 */
    sbb_param_l385_reg_t PARAM_L385; /*< Address offset = 0x240c */
    sbb_param_h386_reg_t PARAM_H386; /*< Address offset = 0x2410 */
    sbb_param_l386_reg_t PARAM_L386; /*< Address offset = 0x2414 */
    sbb_param_h387_reg_t PARAM_H387; /*< Address offset = 0x2418 */
    sbb_param_l387_reg_t PARAM_L387; /*< Address offset = 0x241c */
    sbb_param_h388_reg_t PARAM_H388; /*< Address offset = 0x2420 */
    sbb_param_l388_reg_t PARAM_L388; /*< Address offset = 0x2424 */
    sbb_param_h389_reg_t PARAM_H389; /*< Address offset = 0x2428 */
    sbb_param_l389_reg_t PARAM_L389; /*< Address offset = 0x242c */
    sbb_param_h390_reg_t PARAM_H390; /*< Address offset = 0x2430 */
    sbb_param_l390_reg_t PARAM_L390; /*< Address offset = 0x2434 */
    sbb_param_h391_reg_t PARAM_H391; /*< Address offset = 0x2438 */
    sbb_param_l391_reg_t PARAM_L391; /*< Address offset = 0x243c */
    sbb_param_h392_reg_t PARAM_H392; /*< Address offset = 0x2440 */
    sbb_param_l392_reg_t PARAM_L392; /*< Address offset = 0x2444 */
    sbb_param_h393_reg_t PARAM_H393; /*< Address offset = 0x2448 */
    sbb_param_l393_reg_t PARAM_L393; /*< Address offset = 0x244c */
    sbb_param_h394_reg_t PARAM_H394; /*< Address offset = 0x2450 */
    sbb_param_l394_reg_t PARAM_L394; /*< Address offset = 0x2454 */
    sbb_param_h395_reg_t PARAM_H395; /*< Address offset = 0x2458 */
    sbb_param_l395_reg_t PARAM_L395; /*< Address offset = 0x245c */
    sbb_param_h396_reg_t PARAM_H396; /*< Address offset = 0x2460 */
    sbb_param_l396_reg_t PARAM_L396; /*< Address offset = 0x2464 */
    sbb_param_h397_reg_t PARAM_H397; /*< Address offset = 0x2468 */
    sbb_param_l397_reg_t PARAM_L397; /*< Address offset = 0x246c */
    sbb_param_h398_reg_t PARAM_H398; /*< Address offset = 0x2470 */
    sbb_param_l398_reg_t PARAM_L398; /*< Address offset = 0x2474 */
    sbb_param_h399_reg_t PARAM_H399; /*< Address offset = 0x2478 */
    sbb_param_l399_reg_t PARAM_L399; /*< Address offset = 0x247c */
    sbb_param_h400_reg_t PARAM_H400; /*< Address offset = 0x2480 */
    sbb_param_l400_reg_t PARAM_L400; /*< Address offset = 0x2484 */
    sbb_param_h401_reg_t PARAM_H401; /*< Address offset = 0x2488 */
    sbb_param_l401_reg_t PARAM_L401; /*< Address offset = 0x248c */
    sbb_param_h402_reg_t PARAM_H402; /*< Address offset = 0x2490 */
    sbb_param_l402_reg_t PARAM_L402; /*< Address offset = 0x2494 */
    sbb_param_h403_reg_t PARAM_H403; /*< Address offset = 0x2498 */
    sbb_param_l403_reg_t PARAM_L403; /*< Address offset = 0x249c */
    sbb_param_h404_reg_t PARAM_H404; /*< Address offset = 0x24a0 */
    sbb_param_l404_reg_t PARAM_L404; /*< Address offset = 0x24a4 */
    sbb_param_h405_reg_t PARAM_H405; /*< Address offset = 0x24a8 */
    sbb_param_l405_reg_t PARAM_L405; /*< Address offset = 0x24ac */
    sbb_param_h406_reg_t PARAM_H406; /*< Address offset = 0x24b0 */
    sbb_param_l406_reg_t PARAM_L406; /*< Address offset = 0x24b4 */
    sbb_param_h407_reg_t PARAM_H407; /*< Address offset = 0x24b8 */
    sbb_param_l407_reg_t PARAM_L407; /*< Address offset = 0x24bc */
    sbb_param_h408_reg_t PARAM_H408; /*< Address offset = 0x24c0 */
    sbb_param_l408_reg_t PARAM_L408; /*< Address offset = 0x24c4 */
    sbb_param_h409_reg_t PARAM_H409; /*< Address offset = 0x24c8 */
    sbb_param_l409_reg_t PARAM_L409; /*< Address offset = 0x24cc */
    sbb_param_h410_reg_t PARAM_H410; /*< Address offset = 0x24d0 */
    sbb_param_l410_reg_t PARAM_L410; /*< Address offset = 0x24d4 */
    sbb_param_h411_reg_t PARAM_H411; /*< Address offset = 0x24d8 */
    sbb_param_l411_reg_t PARAM_L411; /*< Address offset = 0x24dc */
    sbb_param_h412_reg_t PARAM_H412; /*< Address offset = 0x24e0 */
    sbb_param_l412_reg_t PARAM_L412; /*< Address offset = 0x24e4 */
    sbb_param_h413_reg_t PARAM_H413; /*< Address offset = 0x24e8 */
    sbb_param_l413_reg_t PARAM_L413; /*< Address offset = 0x24ec */
    sbb_param_h414_reg_t PARAM_H414; /*< Address offset = 0x24f0 */
    sbb_param_l414_reg_t PARAM_L414; /*< Address offset = 0x24f4 */
    sbb_param_h415_reg_t PARAM_H415; /*< Address offset = 0x24f8 */
    sbb_param_l415_reg_t PARAM_L415; /*< Address offset = 0x24fc */
    sbb_param_h416_reg_t PARAM_H416; /*< Address offset = 0x2500 */
    sbb_param_l416_reg_t PARAM_L416; /*< Address offset = 0x2504 */
    sbb_param_h417_reg_t PARAM_H417; /*< Address offset = 0x2508 */
    sbb_param_l417_reg_t PARAM_L417; /*< Address offset = 0x250c */
    sbb_param_h418_reg_t PARAM_H418; /*< Address offset = 0x2510 */
    sbb_param_l418_reg_t PARAM_L418; /*< Address offset = 0x2514 */
    sbb_param_h419_reg_t PARAM_H419; /*< Address offset = 0x2518 */
    sbb_param_l419_reg_t PARAM_L419; /*< Address offset = 0x251c */
    sbb_param_h420_reg_t PARAM_H420; /*< Address offset = 0x2520 */
    sbb_param_l420_reg_t PARAM_L420; /*< Address offset = 0x2524 */
    sbb_param_h421_reg_t PARAM_H421; /*< Address offset = 0x2528 */
    sbb_param_l421_reg_t PARAM_L421; /*< Address offset = 0x252c */
    sbb_param_h422_reg_t PARAM_H422; /*< Address offset = 0x2530 */
    sbb_param_l422_reg_t PARAM_L422; /*< Address offset = 0x2534 */
    sbb_param_h423_reg_t PARAM_H423; /*< Address offset = 0x2538 */
    sbb_param_l423_reg_t PARAM_L423; /*< Address offset = 0x253c */
    sbb_param_h424_reg_t PARAM_H424; /*< Address offset = 0x2540 */
    sbb_param_l424_reg_t PARAM_L424; /*< Address offset = 0x2544 */
    sbb_param_h425_reg_t PARAM_H425; /*< Address offset = 0x2548 */
    sbb_param_l425_reg_t PARAM_L425; /*< Address offset = 0x254c */
    sbb_param_h426_reg_t PARAM_H426; /*< Address offset = 0x2550 */
    sbb_param_l426_reg_t PARAM_L426; /*< Address offset = 0x2554 */
    sbb_param_h427_reg_t PARAM_H427; /*< Address offset = 0x2558 */
    sbb_param_l427_reg_t PARAM_L427; /*< Address offset = 0x255c */
    sbb_param_h428_reg_t PARAM_H428; /*< Address offset = 0x2560 */
    sbb_param_l428_reg_t PARAM_L428; /*< Address offset = 0x2564 */
    sbb_param_h429_reg_t PARAM_H429; /*< Address offset = 0x2568 */
    sbb_param_l429_reg_t PARAM_L429; /*< Address offset = 0x256c */
    sbb_param_h430_reg_t PARAM_H430; /*< Address offset = 0x2570 */
    sbb_param_l430_reg_t PARAM_L430; /*< Address offset = 0x2574 */
    sbb_param_h431_reg_t PARAM_H431; /*< Address offset = 0x2578 */
    sbb_param_l431_reg_t PARAM_L431; /*< Address offset = 0x257c */
    sbb_param_h432_reg_t PARAM_H432; /*< Address offset = 0x2580 */
    sbb_param_l432_reg_t PARAM_L432; /*< Address offset = 0x2584 */
    sbb_param_h433_reg_t PARAM_H433; /*< Address offset = 0x2588 */
    sbb_param_l433_reg_t PARAM_L433; /*< Address offset = 0x258c */
    sbb_param_h434_reg_t PARAM_H434; /*< Address offset = 0x2590 */
    sbb_param_l434_reg_t PARAM_L434; /*< Address offset = 0x2594 */
    sbb_param_h435_reg_t PARAM_H435; /*< Address offset = 0x2598 */
    sbb_param_l435_reg_t PARAM_L435; /*< Address offset = 0x259c */
    sbb_param_h436_reg_t PARAM_H436; /*< Address offset = 0x25a0 */
    sbb_param_l436_reg_t PARAM_L436; /*< Address offset = 0x25a4 */
    sbb_param_h437_reg_t PARAM_H437; /*< Address offset = 0x25a8 */
    sbb_param_l437_reg_t PARAM_L437; /*< Address offset = 0x25ac */
    sbb_param_h438_reg_t PARAM_H438; /*< Address offset = 0x25b0 */
    sbb_param_l438_reg_t PARAM_L438; /*< Address offset = 0x25b4 */
    sbb_param_h439_reg_t PARAM_H439; /*< Address offset = 0x25b8 */
    sbb_param_l439_reg_t PARAM_L439; /*< Address offset = 0x25bc */
    sbb_param_h440_reg_t PARAM_H440; /*< Address offset = 0x25c0 */
    sbb_param_l440_reg_t PARAM_L440; /*< Address offset = 0x25c4 */
    sbb_param_h441_reg_t PARAM_H441; /*< Address offset = 0x25c8 */
    sbb_param_l441_reg_t PARAM_L441; /*< Address offset = 0x25cc */
    sbb_param_h442_reg_t PARAM_H442; /*< Address offset = 0x25d0 */
    sbb_param_l442_reg_t PARAM_L442; /*< Address offset = 0x25d4 */
    sbb_param_h443_reg_t PARAM_H443; /*< Address offset = 0x25d8 */
    sbb_param_l443_reg_t PARAM_L443; /*< Address offset = 0x25dc */
    sbb_param_h444_reg_t PARAM_H444; /*< Address offset = 0x25e0 */
    sbb_param_l444_reg_t PARAM_L444; /*< Address offset = 0x25e4 */
    sbb_param_h445_reg_t PARAM_H445; /*< Address offset = 0x25e8 */
    sbb_param_l445_reg_t PARAM_L445; /*< Address offset = 0x25ec */
    sbb_param_h446_reg_t PARAM_H446; /*< Address offset = 0x25f0 */
    sbb_param_l446_reg_t PARAM_L446; /*< Address offset = 0x25f4 */
    sbb_param_h447_reg_t PARAM_H447; /*< Address offset = 0x25f8 */
    sbb_param_l447_reg_t PARAM_L447; /*< Address offset = 0x25fc */
    sbb_param_h448_reg_t PARAM_H448; /*< Address offset = 0x2600 */
    sbb_param_l448_reg_t PARAM_L448; /*< Address offset = 0x2604 */
    sbb_param_h449_reg_t PARAM_H449; /*< Address offset = 0x2608 */
    sbb_param_l449_reg_t PARAM_L449; /*< Address offset = 0x260c */
    sbb_param_h450_reg_t PARAM_H450; /*< Address offset = 0x2610 */
    sbb_param_l450_reg_t PARAM_L450; /*< Address offset = 0x2614 */
    sbb_param_h451_reg_t PARAM_H451; /*< Address offset = 0x2618 */
    sbb_param_l451_reg_t PARAM_L451; /*< Address offset = 0x261c */
    sbb_param_h452_reg_t PARAM_H452; /*< Address offset = 0x2620 */
    sbb_param_l452_reg_t PARAM_L452; /*< Address offset = 0x2624 */
    sbb_param_h453_reg_t PARAM_H453; /*< Address offset = 0x2628 */
    sbb_param_l453_reg_t PARAM_L453; /*< Address offset = 0x262c */
    sbb_param_h454_reg_t PARAM_H454; /*< Address offset = 0x2630 */
    sbb_param_l454_reg_t PARAM_L454; /*< Address offset = 0x2634 */
    sbb_param_h455_reg_t PARAM_H455; /*< Address offset = 0x2638 */
    sbb_param_l455_reg_t PARAM_L455; /*< Address offset = 0x263c */
    sbb_param_h456_reg_t PARAM_H456; /*< Address offset = 0x2640 */
    sbb_param_l456_reg_t PARAM_L456; /*< Address offset = 0x2644 */
    sbb_param_h457_reg_t PARAM_H457; /*< Address offset = 0x2648 */
    sbb_param_l457_reg_t PARAM_L457; /*< Address offset = 0x264c */
    sbb_param_h458_reg_t PARAM_H458; /*< Address offset = 0x2650 */
    sbb_param_l458_reg_t PARAM_L458; /*< Address offset = 0x2654 */
    sbb_param_h459_reg_t PARAM_H459; /*< Address offset = 0x2658 */
    sbb_param_l459_reg_t PARAM_L459; /*< Address offset = 0x265c */
    sbb_param_h460_reg_t PARAM_H460; /*< Address offset = 0x2660 */
    sbb_param_l460_reg_t PARAM_L460; /*< Address offset = 0x2664 */
    sbb_param_h461_reg_t PARAM_H461; /*< Address offset = 0x2668 */
    sbb_param_l461_reg_t PARAM_L461; /*< Address offset = 0x266c */
    sbb_param_h462_reg_t PARAM_H462; /*< Address offset = 0x2670 */
    sbb_param_l462_reg_t PARAM_L462; /*< Address offset = 0x2674 */
    sbb_param_h463_reg_t PARAM_H463; /*< Address offset = 0x2678 */
    sbb_param_l463_reg_t PARAM_L463; /*< Address offset = 0x267c */
    sbb_param_h464_reg_t PARAM_H464; /*< Address offset = 0x2680 */
    sbb_param_l464_reg_t PARAM_L464; /*< Address offset = 0x2684 */
    sbb_param_h465_reg_t PARAM_H465; /*< Address offset = 0x2688 */
    sbb_param_l465_reg_t PARAM_L465; /*< Address offset = 0x268c */
    sbb_param_h466_reg_t PARAM_H466; /*< Address offset = 0x2690 */
    sbb_param_l466_reg_t PARAM_L466; /*< Address offset = 0x2694 */
    sbb_param_h467_reg_t PARAM_H467; /*< Address offset = 0x2698 */
    sbb_param_l467_reg_t PARAM_L467; /*< Address offset = 0x269c */
    sbb_param_h468_reg_t PARAM_H468; /*< Address offset = 0x26a0 */
    sbb_param_l468_reg_t PARAM_L468; /*< Address offset = 0x26a4 */
    sbb_param_h469_reg_t PARAM_H469; /*< Address offset = 0x26a8 */
    sbb_param_l469_reg_t PARAM_L469; /*< Address offset = 0x26ac */
    sbb_param_h470_reg_t PARAM_H470; /*< Address offset = 0x26b0 */
    sbb_param_l470_reg_t PARAM_L470; /*< Address offset = 0x26b4 */
    sbb_param_h471_reg_t PARAM_H471; /*< Address offset = 0x26b8 */
    sbb_param_l471_reg_t PARAM_L471; /*< Address offset = 0x26bc */
    sbb_param_h472_reg_t PARAM_H472; /*< Address offset = 0x26c0 */
    sbb_param_l472_reg_t PARAM_L472; /*< Address offset = 0x26c4 */
    sbb_param_h473_reg_t PARAM_H473; /*< Address offset = 0x26c8 */
    sbb_param_l473_reg_t PARAM_L473; /*< Address offset = 0x26cc */
    sbb_param_h474_reg_t PARAM_H474; /*< Address offset = 0x26d0 */
    sbb_param_l474_reg_t PARAM_L474; /*< Address offset = 0x26d4 */
    sbb_param_h475_reg_t PARAM_H475; /*< Address offset = 0x26d8 */
    sbb_param_l475_reg_t PARAM_L475; /*< Address offset = 0x26dc */
    sbb_param_h476_reg_t PARAM_H476; /*< Address offset = 0x26e0 */
    sbb_param_l476_reg_t PARAM_L476; /*< Address offset = 0x26e4 */
    sbb_param_h477_reg_t PARAM_H477; /*< Address offset = 0x26e8 */
    sbb_param_l477_reg_t PARAM_L477; /*< Address offset = 0x26ec */
    sbb_param_h478_reg_t PARAM_H478; /*< Address offset = 0x26f0 */
    sbb_param_l478_reg_t PARAM_L478; /*< Address offset = 0x26f4 */
    sbb_param_h479_reg_t PARAM_H479; /*< Address offset = 0x26f8 */
    sbb_param_l479_reg_t PARAM_L479; /*< Address offset = 0x26fc */
    sbb_param_h480_reg_t PARAM_H480; /*< Address offset = 0x2700 */
    sbb_param_l480_reg_t PARAM_L480; /*< Address offset = 0x2704 */
    sbb_param_h481_reg_t PARAM_H481; /*< Address offset = 0x2708 */
    sbb_param_l481_reg_t PARAM_L481; /*< Address offset = 0x270c */
    sbb_param_h482_reg_t PARAM_H482; /*< Address offset = 0x2710 */
    sbb_param_l482_reg_t PARAM_L482; /*< Address offset = 0x2714 */
    sbb_param_h483_reg_t PARAM_H483; /*< Address offset = 0x2718 */
    sbb_param_l483_reg_t PARAM_L483; /*< Address offset = 0x271c */
    sbb_param_h484_reg_t PARAM_H484; /*< Address offset = 0x2720 */
    sbb_param_l484_reg_t PARAM_L484; /*< Address offset = 0x2724 */
    sbb_param_h485_reg_t PARAM_H485; /*< Address offset = 0x2728 */
    sbb_param_l485_reg_t PARAM_L485; /*< Address offset = 0x272c */
    sbb_param_h486_reg_t PARAM_H486; /*< Address offset = 0x2730 */
    sbb_param_l486_reg_t PARAM_L486; /*< Address offset = 0x2734 */
    sbb_param_h487_reg_t PARAM_H487; /*< Address offset = 0x2738 */
    sbb_param_l487_reg_t PARAM_L487; /*< Address offset = 0x273c */
    sbb_param_h488_reg_t PARAM_H488; /*< Address offset = 0x2740 */
    sbb_param_l488_reg_t PARAM_L488; /*< Address offset = 0x2744 */
    sbb_param_h489_reg_t PARAM_H489; /*< Address offset = 0x2748 */
    sbb_param_l489_reg_t PARAM_L489; /*< Address offset = 0x274c */
    sbb_param_h490_reg_t PARAM_H490; /*< Address offset = 0x2750 */
    sbb_param_l490_reg_t PARAM_L490; /*< Address offset = 0x2754 */
    sbb_param_h491_reg_t PARAM_H491; /*< Address offset = 0x2758 */
    sbb_param_l491_reg_t PARAM_L491; /*< Address offset = 0x275c */
    sbb_param_h492_reg_t PARAM_H492; /*< Address offset = 0x2760 */
    sbb_param_l492_reg_t PARAM_L492; /*< Address offset = 0x2764 */
    sbb_param_h493_reg_t PARAM_H493; /*< Address offset = 0x2768 */
    sbb_param_l493_reg_t PARAM_L493; /*< Address offset = 0x276c */
    sbb_param_h494_reg_t PARAM_H494; /*< Address offset = 0x2770 */
    sbb_param_l494_reg_t PARAM_L494; /*< Address offset = 0x2774 */
    sbb_param_h495_reg_t PARAM_H495; /*< Address offset = 0x2778 */
    sbb_param_l495_reg_t PARAM_L495; /*< Address offset = 0x277c */
    sbb_param_h496_reg_t PARAM_H496; /*< Address offset = 0x2780 */
    sbb_param_l496_reg_t PARAM_L496; /*< Address offset = 0x2784 */
    sbb_param_h497_reg_t PARAM_H497; /*< Address offset = 0x2788 */
    sbb_param_l497_reg_t PARAM_L497; /*< Address offset = 0x278c */
    sbb_param_h498_reg_t PARAM_H498; /*< Address offset = 0x2790 */
    sbb_param_l498_reg_t PARAM_L498; /*< Address offset = 0x2794 */
    sbb_param_h499_reg_t PARAM_H499; /*< Address offset = 0x2798 */
    sbb_param_l499_reg_t PARAM_L499; /*< Address offset = 0x279c */
    sbb_param_h500_reg_t PARAM_H500; /*< Address offset = 0x27a0 */
    sbb_param_l500_reg_t PARAM_L500; /*< Address offset = 0x27a4 */
    sbb_param_h501_reg_t PARAM_H501; /*< Address offset = 0x27a8 */
    sbb_param_l501_reg_t PARAM_L501; /*< Address offset = 0x27ac */
    sbb_param_h502_reg_t PARAM_H502; /*< Address offset = 0x27b0 */
    sbb_param_l502_reg_t PARAM_L502; /*< Address offset = 0x27b4 */
    sbb_param_h503_reg_t PARAM_H503; /*< Address offset = 0x27b8 */
    sbb_param_l503_reg_t PARAM_L503; /*< Address offset = 0x27bc */
    sbb_param_h504_reg_t PARAM_H504; /*< Address offset = 0x27c0 */
    sbb_param_l504_reg_t PARAM_L504; /*< Address offset = 0x27c4 */
    sbb_param_h505_reg_t PARAM_H505; /*< Address offset = 0x27c8 */
    sbb_param_l505_reg_t PARAM_L505; /*< Address offset = 0x27cc */
    sbb_param_h506_reg_t PARAM_H506; /*< Address offset = 0x27d0 */
    sbb_param_l506_reg_t PARAM_L506; /*< Address offset = 0x27d4 */
    sbb_param_h507_reg_t PARAM_H507; /*< Address offset = 0x27d8 */
    sbb_param_l507_reg_t PARAM_L507; /*< Address offset = 0x27dc */
    sbb_param_h508_reg_t PARAM_H508; /*< Address offset = 0x27e0 */
    sbb_param_l508_reg_t PARAM_L508; /*< Address offset = 0x27e4 */
    sbb_param_h509_reg_t PARAM_H509; /*< Address offset = 0x27e8 */
    sbb_param_l509_reg_t PARAM_L509; /*< Address offset = 0x27ec */
    sbb_param_h510_reg_t PARAM_H510; /*< Address offset = 0x27f0 */
    sbb_param_l510_reg_t PARAM_L510; /*< Address offset = 0x27f4 */
    sbb_param_h511_reg_t PARAM_H511; /*< Address offset = 0x27f8 */
    sbb_param_l511_reg_t PARAM_L511; /*< Address offset = 0x27fc */
    const uint8_t        reservedArea7 [6148]; /*< Address offset = 0x2800 */
    sbb_dbg_stat_reg_t DBG_STAT; /*< Address offset = 0x4004 */
    const uint8_t        reservedArea8 [4];   /*< Address offset = 0x4008 */
    sbb_invld_inst_addr_reg_t INVLD_INST_ADDR; /*< Address offset = 0x400c */
    sbb_pc_data_addr_reg_t PC_DATA_ADDR; /*< Address offset = 0x4010 */
    sbb_dec_stg_pc_reg_t DEC_STG_PC; /*< Address offset = 0x4014 */
    sbb_dec_stg_opcode_reg_t DEC_STG_OPCODE; /*< Address offset = 0x4018 */
    sbb_iss_stg_pc_reg_t ISS_STG_PC; /*< Address offset = 0x401c */
    sbb_iss_stg_opcode_reg_t ISS_STG_OPCODE; /*< Address offset = 0x4020 */
    sbb_stg_stat_reg_t STG_STAT; /*< Address offset = 0x4024 */
    sbb_freg_headptr_reg_t FREG_HEADPTR; /*< Address offset = 0x4028 */
    sbb_freg_tailptr_reg_t FREG_TAILPTR; /*< Address offset = 0x402c */
    sbb_in_fifo_headptr_reg_t IN_FIFO_HEADPTR; /*< Address offset = 0x4030 */
    sbb_in_fifo_tailptr_reg_t IN_FIFO_TAILPTR; /*< Address offset = 0x4034 */
    sbb_out_fifo_headptr_reg_t OUT_FIFO_HEADPTR; /*< Address offset = 0x4038 */
    sbb_out_fifo_tailptr_reg_t OUT_FIFO_TAILPTR; /*< Address offset = 0x403c */
    sbb_stgmem_fifo_headptr_reg_t STGMEM_FIFO_HEADPTR; /*< Address offset = 0x4040 */
    sbb_stgmem_fifo_tailptr_reg_t STGMEM_FIFO_TAILPTR; /*< Address offset = 0x4044 */
    sbb_cpi_h_reg_t CPI_H;  /*< Address offset = 0x4048 */
    sbb_cpi_l_reg_t CPI_L;  /*< Address offset = 0x404c */
    sbb_ireg_h_reg_t IREG_H; /*< Address offset = 0x4050 */
    sbb_ireg_l_reg_t IREG_L; /*< Address offset = 0x4054 */
    const uint8_t        reservedArea9 [8];   /*< Address offset = 0x4058 */
    sbb_in_fifo_hof_h_reg_t IN_FIFO_HOF_H; /*< Address offset = 0x4060 */
    sbb_in_fifo_hof_l_reg_t IN_FIFO_HOF_L; /*< Address offset = 0x4064 */
    sbb_out_fifo_hof_h_reg_t OUT_FIFO_HOF_H; /*< Address offset = 0x4068 */
    sbb_out_fifo_hof_l_reg_t OUT_FIFO_HOF_L; /*< Address offset = 0x406c */
    const uint8_t        reservedArea10 [8];  /*< Address offset = 0x4070 */
    sbb_fifo_ou_sts_reg_t FIFO_OU_STS; /*< Address offset = 0x4078 */
    const uint8_t        reservedArea11 [8];  /*< Address offset = 0x407c */
    sbb_fifo_fe_sts_reg_t FIFO_FE_STS; /*< Address offset = 0x4084 */
    sbb_general_stat_reg_t GENERAL_STAT; /*< Address offset = 0x4088 */
    sbb_clr_mem_reg_t CLR_MEM; /*< Address offset = 0x408c */
    sbb_axi_ctrl_reg_t AXI_CTRL; /*< Address offset = 0x4090 */
    const uint8_t        reservedArea12 [12]; /*< Address offset = 0x4094 */
    sbb_ns_reseed_cnter_reg_t NS_RESEED_CNTER; /*< Address offset = 0x40a0 */
    const uint8_t        reservedArea13 [5980]; /*< Address offset = 0x40a4 */
    sbb_in_fifo_h0_reg_t IN_FIFO_H0; /*< Address offset = 0x5800 */
    sbb_in_fifo_l0_reg_t IN_FIFO_L0; /*< Address offset = 0x5804 */
    sbb_in_fifo_h1_reg_t IN_FIFO_H1; /*< Address offset = 0x5808 */
    sbb_in_fifo_l1_reg_t IN_FIFO_L1; /*< Address offset = 0x580c */
    sbb_in_fifo_h2_reg_t IN_FIFO_H2; /*< Address offset = 0x5810 */
    sbb_in_fifo_l2_reg_t IN_FIFO_L2; /*< Address offset = 0x5814 */
    sbb_in_fifo_h3_reg_t IN_FIFO_H3; /*< Address offset = 0x5818 */
    sbb_in_fifo_l3_reg_t IN_FIFO_L3; /*< Address offset = 0x581c */
    sbb_in_fifo_h4_reg_t IN_FIFO_H4; /*< Address offset = 0x5820 */
    sbb_in_fifo_l4_reg_t IN_FIFO_L4; /*< Address offset = 0x5824 */
    sbb_in_fifo_h5_reg_t IN_FIFO_H5; /*< Address offset = 0x5828 */
    sbb_in_fifo_l5_reg_t IN_FIFO_L5; /*< Address offset = 0x582c */
    sbb_in_fifo_h6_reg_t IN_FIFO_H6; /*< Address offset = 0x5830 */
    sbb_in_fifo_l6_reg_t IN_FIFO_L6; /*< Address offset = 0x5834 */
    sbb_in_fifo_h7_reg_t IN_FIFO_H7; /*< Address offset = 0x5838 */
    sbb_in_fifo_l7_reg_t IN_FIFO_L7; /*< Address offset = 0x583c */
    const uint8_t        reservedArea14 [1984]; /*< Address offset = 0x5840 */
    sbb_out_fifo_h0_reg_t OUT_FIFO_H0; /*< Address offset = 0x6000 */
    sbb_out_fifo_l0_reg_t OUT_FIFO_L0; /*< Address offset = 0x6004 */
    sbb_out_fifo_h1_reg_t OUT_FIFO_H1; /*< Address offset = 0x6008 */
    sbb_out_fifo_l1_reg_t OUT_FIFO_L1; /*< Address offset = 0x600c */
    sbb_out_fifo_h2_reg_t OUT_FIFO_H2; /*< Address offset = 0x6010 */
    sbb_out_fifo_l2_reg_t OUT_FIFO_L2; /*< Address offset = 0x6014 */
    sbb_out_fifo_h3_reg_t OUT_FIFO_H3; /*< Address offset = 0x6018 */
    sbb_out_fifo_l3_reg_t OUT_FIFO_L3; /*< Address offset = 0x601c */
    sbb_out_fifo_h4_reg_t OUT_FIFO_H4; /*< Address offset = 0x6020 */
    sbb_out_fifo_l4_reg_t OUT_FIFO_L4; /*< Address offset = 0x6024 */
    sbb_out_fifo_h5_reg_t OUT_FIFO_H5; /*< Address offset = 0x6028 */
    sbb_out_fifo_l5_reg_t OUT_FIFO_L5; /*< Address offset = 0x602c */
    sbb_out_fifo_h6_reg_t OUT_FIFO_H6; /*< Address offset = 0x6030 */
    sbb_out_fifo_l6_reg_t OUT_FIFO_L6; /*< Address offset = 0x6034 */
    sbb_out_fifo_h7_reg_t OUT_FIFO_H7; /*< Address offset = 0x6038 */
    sbb_out_fifo_l7_reg_t OUT_FIFO_L7; /*< Address offset = 0x603c */
} sbb_t;     // size: 0x1bbc

// AddressSpace struct pointer
//
#define SYSCON_SBB_MODULE  ((sbb_t*) SYSCON_SBB_MODULE_BASE)

// ******************************************* /Address Space

#endif      // _SBB_H_

