#ifndef _ADC_DIG_H_
#define _ADC_DIG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#if (CPU_ANA) // from ADC view
#include "adc_addr_offset.h"
#define ANT0_ADC_DIG0_BASE    ( 0x04802000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_ADC_DIG1_BASE    ( 0x04882000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_ADC_DIG2_BASE    ( 0x04902000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_ADC_DIG3_BASE    ( 0x04982000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT0_ADC_DIG_FB_BASE  ( 0x049e2000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT0_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_ADC_DIG0_BASE    ( 0x04a02000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_ADC_DIG1_BASE    ( 0x04a82000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_ADC_DIG2_BASE    ( 0x04b02000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_ADC_DIG3_BASE    ( 0x04b82000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT1_ADC_DIG_FB_BASE  ( 0x04be2000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT1_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_ADC_DIG0_BASE    ( 0x04c02000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_ADC_DIG1_BASE    ( 0x04c82000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_ADC_DIG2_BASE    ( 0x04d02000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_ADC_DIG3_BASE    ( 0x04d82000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT2_ADC_DIG_FB_BASE  ( 0x04de2000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT2_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_ADC_DIG0_BASE    ( 0x04e02000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_ADC_DIG1_BASE    ( 0x04e82000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_ADC_DIG2_BASE    ( 0x04f02000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_ADC_DIG3_BASE    ( 0x04f82000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#define ANT3_ADC_DIG_FB_BASE  ( 0x04fe2000 - WRP_ADC_DIGRF_BASE - WRP_ADC_ANT3_OFFSET + WRP_ADC_DIGRF_OFFSET )
#else // from digRF view
#define ANT0_ADC_DIG0_BASE    ( 0x04802000 )
#define ANT0_ADC_DIG1_BASE    ( 0x04882000 )
#define ANT0_ADC_DIG2_BASE    ( 0x04902000 )
#define ANT0_ADC_DIG3_BASE    ( 0x04982000 )
#define ANT0_ADC_DIG_FB_BASE  ( 0x049e2000 )
#define ANT1_ADC_DIG0_BASE    ( 0x04a02000 )
#define ANT1_ADC_DIG1_BASE    ( 0x04a82000 )
#define ANT1_ADC_DIG2_BASE    ( 0x04b02000 )
#define ANT1_ADC_DIG3_BASE    ( 0x04b82000 )
#define ANT1_ADC_DIG_FB_BASE  ( 0x04be2000 )
#define ANT2_ADC_DIG0_BASE    ( 0x04c02000 )
#define ANT2_ADC_DIG1_BASE    ( 0x04c82000 )
#define ANT2_ADC_DIG2_BASE    ( 0x04d02000 )
#define ANT2_ADC_DIG3_BASE    ( 0x04d82000 )
#define ANT2_ADC_DIG_FB_BASE  ( 0x04de2000 )
#define ANT3_ADC_DIG0_BASE    ( 0x04e02000 )
#define ANT3_ADC_DIG1_BASE    ( 0x04e82000 )
#define ANT3_ADC_DIG2_BASE    ( 0x04f02000 )
#define ANT3_ADC_DIG3_BASE    ( 0x04f82000 )
#define ANT3_ADC_DIG_FB_BASE  ( 0x04fe2000 )
#endif // CPU_ANA

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define ADC_DIG_SEQ0_MEM0_CMD_DATA_OFFSET ( 0x00000000U )
#define ADC_DIG_SEQ0_MEM0_CMD_AW_OFFSET ( 0x00000004U )
#define ADC_DIG_SEQ0_MEM1_CMD_DATA_OFFSET ( 0x00000008U )
#define ADC_DIG_SEQ0_MEM1_CMD_AW_OFFSET ( 0x0000000cU )
#define ADC_DIG_SEQ0_MEM2_CMD_DATA_OFFSET ( 0x00000010U )
#define ADC_DIG_SEQ0_MEM2_CMD_AW_OFFSET ( 0x00000014U )
#define ADC_DIG_SEQ0_MEM3_CMD_DATA_OFFSET ( 0x00000018U )
#define ADC_DIG_SEQ0_MEM3_CMD_AW_OFFSET ( 0x0000001cU )
#define ADC_DIG_SEQ0_MEM4_CMD_DATA_OFFSET ( 0x00000020U )
#define ADC_DIG_SEQ0_MEM4_CMD_AW_OFFSET ( 0x00000024U )
#define ADC_DIG_SEQ0_MEM5_CMD_DATA_OFFSET ( 0x00000028U )
#define ADC_DIG_SEQ0_MEM5_CMD_AW_OFFSET ( 0x0000002cU )
#define ADC_DIG_SEQ0_MEM6_CMD_DATA_OFFSET ( 0x00000030U )
#define ADC_DIG_SEQ0_MEM6_CMD_AW_OFFSET ( 0x00000034U )
#define ADC_DIG_SEQ0_MEM7_CMD_DATA_OFFSET ( 0x00000038U )
#define ADC_DIG_SEQ0_MEM7_CMD_AW_OFFSET ( 0x0000003cU )
#define ADC_DIG_SEQ0_MEM8_CMD_DATA_OFFSET ( 0x00000040U )
#define ADC_DIG_SEQ0_MEM8_CMD_AW_OFFSET ( 0x00000044U )
#define ADC_DIG_SEQ0_MEM9_CMD_DATA_OFFSET ( 0x00000048U )
#define ADC_DIG_SEQ0_MEM9_CMD_AW_OFFSET ( 0x0000004cU )
#define ADC_DIG_SEQ0_MEM10_CMD_DATA_OFFSET ( 0x00000050U )
#define ADC_DIG_SEQ0_MEM10_CMD_AW_OFFSET ( 0x00000054U )
#define ADC_DIG_SEQ0_MEM11_CMD_DATA_OFFSET ( 0x00000058U )
#define ADC_DIG_SEQ0_MEM11_CMD_AW_OFFSET ( 0x0000005cU )
#define ADC_DIG_SEQ0_MEM12_CMD_DATA_OFFSET ( 0x00000060U )
#define ADC_DIG_SEQ0_MEM12_CMD_AW_OFFSET ( 0x00000064U )
#define ADC_DIG_SEQ0_MEM13_CMD_DATA_OFFSET ( 0x00000068U )
#define ADC_DIG_SEQ0_MEM13_CMD_AW_OFFSET ( 0x0000006cU )
#define ADC_DIG_SEQ0_MEM14_CMD_DATA_OFFSET ( 0x00000070U )
#define ADC_DIG_SEQ0_MEM14_CMD_AW_OFFSET ( 0x00000074U )
#define ADC_DIG_SEQ0_MEM15_CMD_DATA_OFFSET ( 0x00000078U )
#define ADC_DIG_SEQ0_MEM15_CMD_AW_OFFSET ( 0x0000007cU )
#define ADC_DIG_SEQ0_MEM16_CMD_DATA_OFFSET ( 0x00000080U )
#define ADC_DIG_SEQ0_MEM16_CMD_AW_OFFSET ( 0x00000084U )
#define ADC_DIG_SEQ0_MEM17_CMD_DATA_OFFSET ( 0x00000088U )
#define ADC_DIG_SEQ0_MEM17_CMD_AW_OFFSET ( 0x0000008cU )
#define ADC_DIG_SEQ0_MEM18_CMD_DATA_OFFSET ( 0x00000090U )
#define ADC_DIG_SEQ0_MEM18_CMD_AW_OFFSET ( 0x00000094U )
#define ADC_DIG_SEQ0_MEM19_CMD_DATA_OFFSET ( 0x00000098U )
#define ADC_DIG_SEQ0_MEM19_CMD_AW_OFFSET ( 0x0000009cU )
#define ADC_DIG_SEQ1_MEM0_CMD_DATA_OFFSET ( 0x00000100U )
#define ADC_DIG_SEQ1_MEM0_CMD_AW_OFFSET ( 0x00000104U )
#define ADC_DIG_SEQ1_MEM1_CMD_DATA_OFFSET ( 0x00000108U )
#define ADC_DIG_SEQ1_MEM1_CMD_AW_OFFSET ( 0x0000010cU )
#define ADC_DIG_SEQ1_MEM2_CMD_DATA_OFFSET ( 0x00000110U )
#define ADC_DIG_SEQ1_MEM2_CMD_AW_OFFSET ( 0x00000114U )
#define ADC_DIG_SEQ1_MEM3_CMD_DATA_OFFSET ( 0x00000118U )
#define ADC_DIG_SEQ1_MEM3_CMD_AW_OFFSET ( 0x0000011cU )
#define ADC_DIG_SEQ1_MEM4_CMD_DATA_OFFSET ( 0x00000120U )
#define ADC_DIG_SEQ1_MEM4_CMD_AW_OFFSET ( 0x00000124U )
#define ADC_DIG_SEQ1_MEM5_CMD_DATA_OFFSET ( 0x00000128U )
#define ADC_DIG_SEQ1_MEM5_CMD_AW_OFFSET ( 0x0000012cU )
#define ADC_DIG_SEQ1_MEM6_CMD_DATA_OFFSET ( 0x00000130U )
#define ADC_DIG_SEQ1_MEM6_CMD_AW_OFFSET ( 0x00000134U )
#define ADC_DIG_SEQ1_MEM7_CMD_DATA_OFFSET ( 0x00000138U )
#define ADC_DIG_SEQ1_MEM7_CMD_AW_OFFSET ( 0x0000013cU )
#define ADC_DIG_SEQ1_MEM8_CMD_DATA_OFFSET ( 0x00000140U )
#define ADC_DIG_SEQ1_MEM8_CMD_AW_OFFSET ( 0x00000144U )
#define ADC_DIG_SEQ1_MEM9_CMD_DATA_OFFSET ( 0x00000148U )
#define ADC_DIG_SEQ1_MEM9_CMD_AW_OFFSET ( 0x0000014cU )
#define ADC_DIG_SEQ1_MEM10_CMD_DATA_OFFSET ( 0x00000150U )
#define ADC_DIG_SEQ1_MEM10_CMD_AW_OFFSET ( 0x00000154U )
#define ADC_DIG_SEQ1_MEM11_CMD_DATA_OFFSET ( 0x00000158U )
#define ADC_DIG_SEQ1_MEM11_CMD_AW_OFFSET ( 0x0000015cU )
#define ADC_DIG_SEQ1_MEM12_CMD_DATA_OFFSET ( 0x00000160U )
#define ADC_DIG_SEQ1_MEM12_CMD_AW_OFFSET ( 0x00000164U )
#define ADC_DIG_SEQ1_MEM13_CMD_DATA_OFFSET ( 0x00000168U )
#define ADC_DIG_SEQ1_MEM13_CMD_AW_OFFSET ( 0x0000016cU )
#define ADC_DIG_SEQ1_MEM14_CMD_DATA_OFFSET ( 0x00000170U )
#define ADC_DIG_SEQ1_MEM14_CMD_AW_OFFSET ( 0x00000174U )
#define ADC_DIG_SEQ1_MEM15_CMD_DATA_OFFSET ( 0x00000178U )
#define ADC_DIG_SEQ1_MEM15_CMD_AW_OFFSET ( 0x0000017cU )
#define ADC_DIG_SEQ1_MEM16_CMD_DATA_OFFSET ( 0x00000180U )
#define ADC_DIG_SEQ1_MEM16_CMD_AW_OFFSET ( 0x00000184U )
#define ADC_DIG_SEQ1_MEM17_CMD_DATA_OFFSET ( 0x00000188U )
#define ADC_DIG_SEQ1_MEM17_CMD_AW_OFFSET ( 0x0000018cU )
#define ADC_DIG_SEQ1_MEM18_CMD_DATA_OFFSET ( 0x00000190U )
#define ADC_DIG_SEQ1_MEM18_CMD_AW_OFFSET ( 0x00000194U )
#define ADC_DIG_SEQ1_MEM19_CMD_DATA_OFFSET ( 0x00000198U )
#define ADC_DIG_SEQ1_MEM19_CMD_AW_OFFSET ( 0x0000019cU )
#define ADC_DIG_SCRATCHPADD_OFFSET ( 0x00000200U )
#define ADC_DIG_CFGD_OFFSET   ( 0x00000204U )
#define ADC_DIG_SEQ_ITER0_OFFSET ( 0x00000208U )
#define ADC_DIG_SEQ_ITER1_OFFSET ( 0x0000020cU )
#define ADC_DIG_SEQ_CTRL0_OFFSET ( 0x00000210U )
#define ADC_DIG_SEQ_CTRL1_OFFSET ( 0x00000214U )
#define ADC_DIG_CFG0_OFFSET ( 0x00000300U )
#define ADC_DIG_CFG1_OFFSET ( 0x00000304U )
#define ADC_DIG_CFG2_OFFSET ( 0x00000308U )
#define ADC_DIG_CFG3_OFFSET ( 0x0000030cU )
#define ADC_DIG_CFG4_OFFSET ( 0x00000310U )
#define ADC_DIG_CFG5_OFFSET ( 0x00000314U )
#define ADC_DIG_CFG6_OFFSET ( 0x00000318U )
#define ADC_DIG_CFG7_OFFSET ( 0x0000031cU )
#define ADC_DIG_CFG8_OFFSET ( 0x00000320U )
#define ADC_DIG_CFG9_OFFSET ( 0x00000324U )
#define ADC_DIG_CFG10_OFFSET ( 0x00000328U )
#define ADC_DIG_CFG11_OFFSET ( 0x0000032cU )
#define ADC_DIG_CFG12_OFFSET ( 0x00000330U )
#define ADC_DIG_CFG13_OFFSET ( 0x00000334U )
#define ADC_DIG_CFG14_OFFSET ( 0x00000338U )
#define ADC_DIG_CFG15_OFFSET ( 0x0000033cU )
#define ADC_DIG_CFG16_OFFSET ( 0x00000340U )
#define ADC_DIG_CFG17_OFFSET ( 0x00000344U )
#define ADC_DIG_CFG18_OFFSET ( 0x00000348U )
#define ADC_DIG_CFG19_OFFSET ( 0x0000034cU )
#define ADC_DIG_CFG20_OFFSET ( 0x00000350U )
#define ADC_DIG_CFG21_OFFSET ( 0x00000354U )
#define ADC_DIG_CFG22_OFFSET ( 0x00000358U )
#define ADC_DIG_CFG23_OFFSET ( 0x0000035cU )
#define ADC_DIG_CFG24_OFFSET ( 0x00000360U )
#define ADC_DIG_APB_BRDG_DCLK_STAT_OFFSET ( 0x0000036cU )
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA0_OFFSET ( 0x00000370U )
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA1_OFFSET ( 0x00000374U )
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW0_OFFSET ( 0x00000378U )
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW1_OFFSET ( 0x0000037cU )
#define ADC_DIG_PROT_STAT_CFG_OFFSET ( 0x00000380U )
#define ADC_DIG_COLLISION_STAT_OFFSET ( 0x00000384U )
#define ADC_DIG_SEQ_STAT0_OFFSET ( 0x00000388U )
#define ADC_DIG_SEQ_STAT1_OFFSET ( 0x0000038cU )
#define ADC_DIG_STAT0_OFFSET ( 0x00000390U )
#define ADC_DIG_STAT1_OFFSET ( 0x00000394U )
#define ADC_DIG_STAT2_OFFSET ( 0x00000398U )
#define ADC_DIG_STAT3_OFFSET ( 0x0000039cU )
#define ADC_DIG_INT_STAT_OFFSET ( 0x000003a0U )
#define ADC_DIG_INT_HIGH_EN_OFFSET ( 0x000003a4U )
#define ADC_DIG_INT_LOW_EN_OFFSET ( 0x000003a8U )
#define ADC_DIG_INT_CLR_OFFSET ( 0x000003acU )
#define ADC_DIG_INT_FORCE_OFFSET ( 0x000003b0U )
#define ADC_DIG_CAL_SEQ_MEM0_CMD_DATA_OFFSET ( 0x00000400U )
#define ADC_DIG_CAL_SEQ_MEM0_CMD_AW_OFFSET ( 0x00000404U )
#define ADC_DIG_CAL_SEQ_MEM1_CMD_DATA_OFFSET ( 0x00000408U )
#define ADC_DIG_CAL_SEQ_MEM1_CMD_AW_OFFSET ( 0x0000040cU )
#define ADC_DIG_CAL_SEQ_MEM2_CMD_DATA_OFFSET ( 0x00000410U )
#define ADC_DIG_CAL_SEQ_MEM2_CMD_AW_OFFSET ( 0x00000414U )
#define ADC_DIG_CAL_SEQ_MEM3_CMD_DATA_OFFSET ( 0x00000418U )
#define ADC_DIG_CAL_SEQ_MEM3_CMD_AW_OFFSET ( 0x0000041cU )
#define ADC_DIG_CAL_SEQ_MEM4_CMD_DATA_OFFSET ( 0x00000420U )
#define ADC_DIG_CAL_SEQ_MEM4_CMD_AW_OFFSET ( 0x00000424U )
#define ADC_DIG_CAL_SEQ_MEM5_CMD_DATA_OFFSET ( 0x00000428U )
#define ADC_DIG_CAL_SEQ_MEM5_CMD_AW_OFFSET ( 0x0000042cU )
#define ADC_DIG_CAL_SEQ_MEM6_CMD_DATA_OFFSET ( 0x00000430U )
#define ADC_DIG_CAL_SEQ_MEM6_CMD_AW_OFFSET ( 0x00000434U )
#define ADC_DIG_CAL_SEQ_MEM7_CMD_DATA_OFFSET ( 0x00000438U )
#define ADC_DIG_CAL_SEQ_MEM7_CMD_AW_OFFSET ( 0x0000043cU )
#define ADC_DIG_CAL_SEQ_MEM8_CMD_DATA_OFFSET ( 0x00000440U )
#define ADC_DIG_CAL_SEQ_MEM8_CMD_AW_OFFSET ( 0x00000444U )
#define ADC_DIG_CAL_SEQ_MEM9_CMD_DATA_OFFSET ( 0x00000448U )
#define ADC_DIG_CAL_SEQ_MEM9_CMD_AW_OFFSET ( 0x0000044cU )
#define ADC_DIG_CAL_SEQ_MEM10_CMD_DATA_OFFSET ( 0x00000450U )
#define ADC_DIG_CAL_SEQ_MEM10_CMD_AW_OFFSET ( 0x00000454U )
#define ADC_DIG_CAL_SEQ_MEM11_CMD_DATA_OFFSET ( 0x00000458U )
#define ADC_DIG_CAL_SEQ_MEM11_CMD_AW_OFFSET ( 0x0000045cU )
#define ADC_DIG_CAL_SEQ_MEM12_CMD_DATA_OFFSET ( 0x00000460U )
#define ADC_DIG_CAL_SEQ_MEM12_CMD_AW_OFFSET ( 0x00000464U )
#define ADC_DIG_CAL_SEQ_MEM13_CMD_DATA_OFFSET ( 0x00000468U )
#define ADC_DIG_CAL_SEQ_MEM13_CMD_AW_OFFSET ( 0x0000046cU )
#define ADC_DIG_CAL_SEQ_MEM14_CMD_DATA_OFFSET ( 0x00000470U )
#define ADC_DIG_CAL_SEQ_MEM14_CMD_AW_OFFSET ( 0x00000474U )
#define ADC_DIG_CAL_SEQ_MEM15_CMD_DATA_OFFSET ( 0x00000478U )
#define ADC_DIG_CAL_SEQ_MEM15_CMD_AW_OFFSET ( 0x0000047cU )
#define ADC_DIG_CAL_SEQ_MEM16_CMD_DATA_OFFSET ( 0x00000480U )
#define ADC_DIG_CAL_SEQ_MEM16_CMD_AW_OFFSET ( 0x00000484U )
#define ADC_DIG_CAL_SEQ_MEM17_CMD_DATA_OFFSET ( 0x00000488U )
#define ADC_DIG_CAL_SEQ_MEM17_CMD_AW_OFFSET ( 0x0000048cU )
#define ADC_DIG_CAL_SEQ_MEM18_CMD_DATA_OFFSET ( 0x00000490U )
#define ADC_DIG_CAL_SEQ_MEM18_CMD_AW_OFFSET ( 0x00000494U )
#define ADC_DIG_CAL_SEQ_MEM19_CMD_DATA_OFFSET ( 0x00000498U )
#define ADC_DIG_CAL_SEQ_MEM19_CMD_AW_OFFSET ( 0x0000049cU )
#define ADC_DIG_CAL_SEQ_MEM20_CMD_DATA_OFFSET ( 0x000004a0U )
#define ADC_DIG_CAL_SEQ_MEM20_CMD_AW_OFFSET ( 0x000004a4U )
#define ADC_DIG_CAL_SEQ_MEM21_CMD_DATA_OFFSET ( 0x000004a8U )
#define ADC_DIG_CAL_SEQ_MEM21_CMD_AW_OFFSET ( 0x000004acU )
#define ADC_DIG_CAL_SEQ_MEM22_CMD_DATA_OFFSET ( 0x000004b0U )
#define ADC_DIG_CAL_SEQ_MEM22_CMD_AW_OFFSET ( 0x000004b4U )
#define ADC_DIG_CAL_SEQ_MEM23_CMD_DATA_OFFSET ( 0x000004b8U )
#define ADC_DIG_CAL_SEQ_MEM23_CMD_AW_OFFSET ( 0x000004bcU )
#define ADC_DIG_CAL_SEQ_MEM24_CMD_DATA_OFFSET ( 0x000004c0U )
#define ADC_DIG_CAL_SEQ_MEM24_CMD_AW_OFFSET ( 0x000004c4U )
#define ADC_DIG_CAL_SEQ_MEM25_CMD_DATA_OFFSET ( 0x000004c8U )
#define ADC_DIG_CAL_SEQ_MEM25_CMD_AW_OFFSET ( 0x000004ccU )
#define ADC_DIG_CAL_SEQ_MEM26_CMD_DATA_OFFSET ( 0x000004d0U )
#define ADC_DIG_CAL_SEQ_MEM26_CMD_AW_OFFSET ( 0x000004d4U )
#define ADC_DIG_CAL_SEQ_MEM27_CMD_DATA_OFFSET ( 0x000004d8U )
#define ADC_DIG_CAL_SEQ_MEM27_CMD_AW_OFFSET ( 0x000004dcU )
#define ADC_DIG_CAL_SEQ_MEM28_CMD_DATA_OFFSET ( 0x000004e0U )
#define ADC_DIG_CAL_SEQ_MEM28_CMD_AW_OFFSET ( 0x000004e4U )
#define ADC_DIG_CAL_SEQ_MEM29_CMD_DATA_OFFSET ( 0x000004e8U )
#define ADC_DIG_CAL_SEQ_MEM29_CMD_AW_OFFSET ( 0x000004ecU )
#define ADC_DIG_CAL_SEQ_MEM30_CMD_DATA_OFFSET ( 0x000004f0U )
#define ADC_DIG_CAL_SEQ_MEM30_CMD_AW_OFFSET ( 0x000004f4U )
#define ADC_DIG_CAL_SEQ_MEM31_CMD_DATA_OFFSET ( 0x000004f8U )
#define ADC_DIG_CAL_SEQ_MEM31_CMD_AW_OFFSET ( 0x000004fcU )
#define ADC_DIG_SCRATCHPAD_OFFSET ( 0x00000500U )
#define ADC_DIG_CFG_OFFSET    ( 0x00000504U )
#define ADC_DIG_CAL_SEQ_ITER_OFFSET ( 0x00000508U )
#define ADC_DIG_OSS_CFG_OFFSET ( 0x0000050cU )
#define ADC_DIG_OSS_CFG2_OFFSET ( 0x00000510U )
#define ADC_DIG_OSS_LFSR_INIT_OFFSET ( 0x00000514U )
#define ADC_DIG_SCHED_CTRL_SHDW_OFFSET ( 0x00000518U )
#define ADC_DIG_DSA_SHDW_OFFSET  ( 0x0000051cU )
#define ADC_DIG_OSS_CTRL_SHDW_OFFSET ( 0x00000520U )
#define ADC_DIG_SCFG0_OFFSET ( 0x00000524U )
#define ADC_DIG_SCFG1_OFFSET ( 0x00000528U )
#define ADC_DIG_SCFG2_OFFSET ( 0x0000052cU )
#define ADC_DIG_SCFG3_OFFSET ( 0x00000530U )
#define ADC_DIG_FIFO_CFG_OFFSET ( 0x00000534U )
#define ADC_DIG_BSG_DC_INCR_OFFSET ( 0x00000538U )
#define ADC_DIG_CAL_SEQ_CTRL_OFFSET ( 0x0000053cU )
#define ADC_DIG_FIFO_CLR_OFFSET  ( 0x00000540U )
#define ADC_DIG_PAUSE_CFG_OFFSET ( 0x00000544U )
#define ADC_DIG_SCHED_CTRL_LIVE_OFFSET ( 0x00000548U )
#define ADC_DIG_DSA_LIVE_OFFSET  ( 0x0000054cU )
#define ADC_DIG_OSS_CTRL_LIVE_OFFSET ( 0x00000550U )
#define ADC_DIG_APB_BRDG_STAT_OFFSET ( 0x00000554U )
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_OFFSET ( 0x00000558U )
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_OFFSET ( 0x0000055cU )
#define ADC_DIG_PROT_STAT_REGISTER_OFFSET ( 0x00000560U )
#define ADC_DIG_CAL_COLLISION_STAT_OFFSET ( 0x00000564U )
#define ADC_DIG_SCHED_STAT_OFFSET ( 0x00000568U )
#define ADC_DIG_PAUSE_STAT_OFFSET ( 0x0000056cU )
#define ADC_DIG_OBS_FIFO_STAT_OFFSET ( 0x00000570U )
#define ADC_DIG_CAL_SEQ_STAT_OFFSET ( 0x00000574U )
#define ADC_DIG_OSS_STAT_OFFSET ( 0x00000578U )
#define ADC_DIG_FIFO_STAT0_OFFSET ( 0x00000580U )
#define ADC_DIG_FIFO_STAT1_OFFSET ( 0x00000584U )
#define ADC_DIG_FIFO_STAT2_OFFSET ( 0x00000588U )
#define ADC_DIG_FIFO_STAT3_OFFSET ( 0x0000058cU )
#define ADC_DIG_FIFO_STAT4_OFFSET ( 0x00000590U )
#define ADC_DIG_FIFO_STAT5_OFFSET ( 0x00000594U )
#define ADC_DIG_FIFO_STAT6_OFFSET ( 0x00000598U )
#define ADC_DIG_FIFO_STAT7_OFFSET ( 0x0000059cU )
#define ADC_DIG_FIFO_STAT8_OFFSET ( 0x000005a0U )
#define ADC_DIG_FIFO_STAT9_OFFSET ( 0x000005a4U )
#define ADC_DIG_FIFO_STAT10_OFFSET ( 0x000005a8U )
#define ADC_DIG_FIFO_STAT11_OFFSET ( 0x000005acU )
#define ADC_DIG_FIFO_STAT12_OFFSET ( 0x000005b0U )
#define ADC_DIG_FIFO_STAT13_OFFSET ( 0x000005b4U )
#define ADC_DIG_FIFO_STAT14_OFFSET ( 0x000005b8U )
#define ADC_DIG_FIFO_STAT15_OFFSET ( 0x000005bcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define ADC_DIG_SEQ0_MEM0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM0_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM0_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM1_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM1_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM2_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM2_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM2_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM2_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM3_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM3_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM3_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM3_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM4_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM4_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM4_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM4_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM5_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM5_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM5_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM5_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM6_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM6_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM6_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM6_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM7_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM7_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM7_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM7_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM8_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM8_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM8_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM8_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM9_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM9_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM9_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM9_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM10_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM10_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM10_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM10_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM11_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM11_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM11_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM11_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM12_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM12_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM12_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM12_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM13_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM13_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM13_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM13_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM14_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM14_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM14_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM14_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM15_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM15_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM15_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM15_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM16_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM16_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM16_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM16_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM17_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM17_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM17_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM17_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM18_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM18_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM18_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM18_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM19_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM19_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ0_MEM19_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ0_MEM19_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM0_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM0_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM1_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM1_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM2_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM2_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM2_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM2_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM3_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM3_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM3_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM3_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM4_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM4_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM4_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM4_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM5_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM5_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM5_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM5_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM6_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM6_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM6_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM6_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM7_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM7_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM7_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM7_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM8_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM8_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM8_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM8_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM9_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM9_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM9_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM9_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM10_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM10_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM10_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM10_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM11_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM11_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM11_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM11_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM12_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM12_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM12_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM12_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM13_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM13_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM13_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM13_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM14_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM14_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM14_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM14_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM15_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM15_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM15_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM15_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM16_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM16_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM16_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM16_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM17_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM17_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM17_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM17_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM18_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM18_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM18_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM18_CMD_AW_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM19_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM19_CMD_DATA_OFFSET ) ))
#define ADC_DIG_SEQ1_MEM19_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SEQ1_MEM19_CMD_AW_OFFSET ) ))
#define ADC_DIG_SCRATCHPADD_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_SCRATCHPADD_OFFSET ) ))
#define ADC_DIG_CFGD_ADR(_BASE)      (( ( _BASE ) + ( ADC_DIG_CFGD_OFFSET ) ))
#define ADC_DIG_SEQ_ITER0_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SEQ_ITER0_OFFSET ) ))
#define ADC_DIG_SEQ_ITER1_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SEQ_ITER1_OFFSET ) ))
#define ADC_DIG_SEQ_CTRL0_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SEQ_CTRL0_OFFSET ) ))
#define ADC_DIG_SEQ_CTRL1_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SEQ_CTRL1_OFFSET ) ))
#define ADC_DIG_CFG0_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG0_OFFSET ) ))
#define ADC_DIG_CFG1_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG1_OFFSET ) ))
#define ADC_DIG_CFG2_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG2_OFFSET ) ))
#define ADC_DIG_CFG3_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG3_OFFSET ) ))
#define ADC_DIG_CFG4_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG4_OFFSET ) ))
#define ADC_DIG_CFG5_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG5_OFFSET ) ))
#define ADC_DIG_CFG6_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG6_OFFSET ) ))
#define ADC_DIG_CFG7_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG7_OFFSET ) ))
#define ADC_DIG_CFG8_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG8_OFFSET ) ))
#define ADC_DIG_CFG9_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_CFG9_OFFSET ) ))
#define ADC_DIG_CFG10_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG10_OFFSET ) ))
#define ADC_DIG_CFG11_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG11_OFFSET ) ))
#define ADC_DIG_CFG12_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG12_OFFSET ) ))
#define ADC_DIG_CFG13_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG13_OFFSET ) ))
#define ADC_DIG_CFG14_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG14_OFFSET ) ))
#define ADC_DIG_CFG15_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG15_OFFSET ) ))
#define ADC_DIG_CFG16_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG16_OFFSET ) ))
#define ADC_DIG_CFG17_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG17_OFFSET ) ))
#define ADC_DIG_CFG18_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG18_OFFSET ) ))
#define ADC_DIG_CFG19_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG19_OFFSET ) ))
#define ADC_DIG_CFG20_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG20_OFFSET ) ))
#define ADC_DIG_CFG21_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG21_OFFSET ) ))
#define ADC_DIG_CFG22_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG22_OFFSET ) ))
#define ADC_DIG_CFG23_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG23_OFFSET ) ))
#define ADC_DIG_CFG24_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CFG24_OFFSET ) ))
#define ADC_DIG_APB_BRDG_DCLK_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_APB_BRDG_DCLK_STAT_OFFSET ) ))
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA0_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_SEQ_CMD_DATA0_OFFSET ) ))
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA1_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_SEQ_CMD_DATA1_OFFSET ) ))
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW0_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_SEQ_CMD_AW0_OFFSET ) ))
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW1_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_SEQ_CMD_AW1_OFFSET ) ))
#define ADC_DIG_PROT_STAT_CFG_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_CFG_OFFSET ) ))
#define ADC_DIG_COLLISION_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_COLLISION_STAT_OFFSET ) ))
#define ADC_DIG_SEQ_STAT0_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_SEQ_STAT0_OFFSET ) ))
#define ADC_DIG_SEQ_STAT1_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_SEQ_STAT1_OFFSET ) ))
#define ADC_DIG_STAT0_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_STAT0_OFFSET ) ))
#define ADC_DIG_STAT1_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_STAT1_OFFSET ) ))
#define ADC_DIG_STAT2_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_STAT2_OFFSET ) ))
#define ADC_DIG_STAT3_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_STAT3_OFFSET ) ))
#define ADC_DIG_INT_STAT_ADR(_BASE)   (( ( _BASE ) + ( ADC_DIG_INT_STAT_OFFSET ) ))
#define ADC_DIG_INT_HIGH_EN_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_INT_HIGH_EN_OFFSET ) ))
#define ADC_DIG_INT_LOW_EN_ADR(_BASE)   (( ( _BASE ) + ( ADC_DIG_INT_LOW_EN_OFFSET ) ))
#define ADC_DIG_INT_CLR_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_INT_CLR_OFFSET ) ))
#define ADC_DIG_INT_FORCE_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_INT_FORCE_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM0_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM0_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM0_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM0_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM1_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM1_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM1_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM1_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM2_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM2_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM2_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM2_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM3_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM3_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM3_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM3_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM4_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM4_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM4_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM4_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM5_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM5_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM5_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM5_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM6_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM6_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM6_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM6_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM7_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM7_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM7_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM7_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM8_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM8_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM8_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM8_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM9_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM9_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM9_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM9_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM10_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM10_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM10_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM10_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM11_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM11_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM11_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM11_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM12_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM12_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM12_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM12_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM13_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM13_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM13_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM13_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM14_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM14_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM14_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM14_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM15_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM15_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM15_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM15_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM16_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM16_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM16_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM16_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM17_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM17_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM17_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM17_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM18_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM18_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM18_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM18_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM19_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM19_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM19_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM19_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM20_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM20_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM20_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM20_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM21_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM21_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM21_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM21_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM22_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM22_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM22_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM22_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM23_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM23_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM23_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM23_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM24_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM24_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM24_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM24_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM25_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM25_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM25_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM25_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM26_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM26_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM26_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM26_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM27_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM27_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM27_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM27_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM28_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM28_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM28_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM28_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM29_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM29_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM29_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM29_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM30_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM30_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM30_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM30_CMD_AW_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM31_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM31_CMD_DATA_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_MEM31_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_MEM31_CMD_AW_OFFSET ) ))
#define ADC_DIG_SCRATCHPAD_ADR(_BASE)   (( ( _BASE ) + ( ADC_DIG_SCRATCHPAD_OFFSET ) ))
#define ADC_DIG_CFG_ADR(_BASE)       (( ( _BASE ) + ( ADC_DIG_CFG_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_ITER_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_ITER_OFFSET ) ))
#define ADC_DIG_OSS_CFG_ADR(_BASE)   (( ( _BASE ) + ( ADC_DIG_OSS_CFG_OFFSET ) ))
#define ADC_DIG_OSS_CFG2_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_OSS_CFG2_OFFSET ) ))
#define ADC_DIG_OSS_LFSR_INIT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_OSS_LFSR_INIT_OFFSET ) ))
#define ADC_DIG_SCHED_CTRL_SHDW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SCHED_CTRL_SHDW_OFFSET ) ))
#define ADC_DIG_DSA_SHDW_ADR(_BASE)     (( ( _BASE ) + ( ADC_DIG_DSA_SHDW_OFFSET ) ))
#define ADC_DIG_OSS_CTRL_SHDW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_OSS_CTRL_SHDW_OFFSET ) ))
#define ADC_DIG_SCFG0_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SCFG0_OFFSET ) ))
#define ADC_DIG_SCFG1_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SCFG1_OFFSET ) ))
#define ADC_DIG_SCFG2_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SCFG2_OFFSET ) ))
#define ADC_DIG_SCFG3_ADR(_BASE)    (( ( _BASE ) + ( ADC_DIG_SCFG3_OFFSET ) ))
#define ADC_DIG_FIFO_CFG_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_FIFO_CFG_OFFSET ) ))
#define ADC_DIG_BSG_DC_INCR_ADR(_BASE)  (( ( _BASE ) + ( ADC_DIG_BSG_DC_INCR_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_CTRL_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_CTRL_OFFSET ) ))
#define ADC_DIG_FIFO_CLR_ADR(_BASE)     (( ( _BASE ) + ( ADC_DIG_FIFO_CLR_OFFSET ) ))
#define ADC_DIG_PAUSE_CFG_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PAUSE_CFG_OFFSET ) ))
#define ADC_DIG_SCHED_CTRL_LIVE_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SCHED_CTRL_LIVE_OFFSET ) ))
#define ADC_DIG_DSA_LIVE_ADR(_BASE)     (( ( _BASE ) + ( ADC_DIG_DSA_LIVE_OFFSET ) ))
#define ADC_DIG_OSS_CTRL_LIVE_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_OSS_CTRL_LIVE_OFFSET ) ))
#define ADC_DIG_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_APB_BRDG_STAT_OFFSET ) ))
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_OFFSET ) ))
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_OFFSET ) ))
#define ADC_DIG_PROT_STAT_REGISTER_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PROT_STAT_REGISTER_OFFSET ) ))
#define ADC_DIG_CAL_COLLISION_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_COLLISION_STAT_OFFSET ) ))
#define ADC_DIG_SCHED_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_SCHED_STAT_OFFSET ) ))
#define ADC_DIG_PAUSE_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_PAUSE_STAT_OFFSET ) ))
#define ADC_DIG_OBS_FIFO_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_OBS_FIFO_STAT_OFFSET ) ))
#define ADC_DIG_CAL_SEQ_STAT_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_CAL_SEQ_STAT_OFFSET ) ))
#define ADC_DIG_OSS_STAT_ADR(_BASE)   (( ( _BASE ) + ( ADC_DIG_OSS_STAT_OFFSET ) ))
#define ADC_DIG_FIFO_STAT0_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT0_OFFSET ) ))
#define ADC_DIG_FIFO_STAT1_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT1_OFFSET ) ))
#define ADC_DIG_FIFO_STAT2_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT2_OFFSET ) ))
#define ADC_DIG_FIFO_STAT3_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT3_OFFSET ) ))
#define ADC_DIG_FIFO_STAT4_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT4_OFFSET ) ))
#define ADC_DIG_FIFO_STAT5_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT5_OFFSET ) ))
#define ADC_DIG_FIFO_STAT6_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT6_OFFSET ) ))
#define ADC_DIG_FIFO_STAT7_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT7_OFFSET ) ))
#define ADC_DIG_FIFO_STAT8_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT8_OFFSET ) ))
#define ADC_DIG_FIFO_STAT9_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT9_OFFSET ) ))
#define ADC_DIG_FIFO_STAT10_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT10_OFFSET ) ))
#define ADC_DIG_FIFO_STAT11_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT11_OFFSET ) ))
#define ADC_DIG_FIFO_STAT12_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT12_OFFSET ) ))
#define ADC_DIG_FIFO_STAT13_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT13_OFFSET ) ))
#define ADC_DIG_FIFO_STAT14_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT14_OFFSET ) ))
#define ADC_DIG_FIFO_STAT15_ADR(_BASE) (( ( _BASE ) + ( ADC_DIG_FIFO_STAT15_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief ADC_DIG_MAP_REG_SEQ0_MEM0_SEQ0_CMD_DATA[20] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SEQ0_MEM0/SEQ0_CMD_DATA
  * Sequencer Command Data Register
  */

typedef union {
  struct {
    uint32_t WDATA : 32;
    ///< Analog control register data to use for this command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_seq0_mem_cmd_data_reg_t;

#define ADC_DIG_SEQ0_MEM_CMD_DATA_DEFAULT (0x00000000U)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_RD_MASK (0xffffffffU)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_WR_MASK (0xffffffffU)


///< Analog control register data to use for this command.
#define ADC_DIG_SEQ0_MEM_CMD_DATA_WDATA_BF_OFF ( 0)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_WDATA_BF_WID (32)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_WDATA_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_WDATA_BF_DEF (0x00000000)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_ARR_SZ0 (20)
#define ADC_DIG_SEQ0_MEM_CMD_DATA_ARRAY_STRIDE0 (0x0008)


/** @brief ADC_DIG_MAP_REG_SEQ0_MEM0_SEQ0_CMD_AW[20] register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SEQ0_MEM0/SEQ0_CMD_AW
  * Sequencer Command Address Register
  */

typedef union {
  struct {
    uint32_t WAIT_CNT : 12;
    ///< Number of clock cycles to wait after executing this command before
    ///< moving</br> to the next command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WADDR : 5;
    ///< Analog control register offset to use for this command.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_seq0_mem_cmd_aw_reg_t;

#define ADC_DIG_SEQ0_MEM_CMD_AW_DEFAULT (0x00000000U)
#define ADC_DIG_SEQ0_MEM_CMD_AW_RD_MASK (0x0001ffffU)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WR_MASK (0x0001ffffU)


///< Number of clock cycles to wait after executing this command before
///< moving</br> to the next command.
#define ADC_DIG_SEQ0_MEM_CMD_AW_WAIT_CNT_BF_OFF ( 0)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WAIT_CNT_BF_WID (12)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WAIT_CNT_BF_MSK (0x00000FFF)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WAIT_CNT_BF_DEF (0x00000000)

///< Analog control register offset to use for this command.
#define ADC_DIG_SEQ0_MEM_CMD_AW_WADDR_BF_OFF (12)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WADDR_BF_WID ( 5)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WADDR_BF_MSK (0x0001F000)
#define ADC_DIG_SEQ0_MEM_CMD_AW_WADDR_BF_DEF (0x00000000)
#define ADC_DIG_SEQ0_MEM_CMD_AW_ARR_SZ0 (20)
#define ADC_DIG_SEQ0_MEM_CMD_AW_ARRAY_STRIDE0 (0x0008)


/** @brief ADC_DIG_MAP_REG_SEQ1_MEM0_SEQ1_CMD_DATA[20] register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SEQ1_MEM0/SEQ1_CMD_DATA
  * Sequencer Command Data Register
  */

typedef union {
  struct {
    uint32_t WDATA : 32;
    ///< Analog control register data to use for this command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_seq1_mem_cmd_data_reg_t;

#define ADC_DIG_SEQ1_MEM_CMD_DATA_DEFAULT (0x00000000U)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_RD_MASK (0xffffffffU)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_WR_MASK (0xffffffffU)


///< Analog control register data to use for this command.
#define ADC_DIG_SEQ1_MEM_CMD_DATA_WDATA_BF_OFF ( 0)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_WDATA_BF_WID (32)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_WDATA_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_WDATA_BF_DEF (0x00000000)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_ARR_SZ0 (20)
#define ADC_DIG_SEQ1_MEM_CMD_DATA_ARRAY_STRIDE0 (0x0008)


/** @brief ADC_DIG_MAP_REG_SEQ1_MEM0_SEQ1_CMD_AW[20] register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SEQ1_MEM0/SEQ1_CMD_AW
  * Sequencer Command Address Register
  */

typedef union {
  struct {
    uint32_t WAIT_CNT : 12;
    ///< Number of clock cycles to wait after executing this command before
    ///< moving</br> to the next command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WADDR : 5;
    ///< Analog control register offset to use for this command.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_seq1_mem_cmd_aw_reg_t;

#define ADC_DIG_SEQ1_MEM_CMD_AW_DEFAULT (0x00000000U)
#define ADC_DIG_SEQ1_MEM_CMD_AW_RD_MASK (0x0001ffffU)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WR_MASK (0x0001ffffU)


///< Number of clock cycles to wait after executing this command before
///< moving</br> to the next command.
#define ADC_DIG_SEQ1_MEM_CMD_AW_WAIT_CNT_BF_OFF ( 0)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WAIT_CNT_BF_WID (12)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WAIT_CNT_BF_MSK (0x00000FFF)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WAIT_CNT_BF_DEF (0x00000000)

///< Analog control register offset to use for this command.
#define ADC_DIG_SEQ1_MEM_CMD_AW_WADDR_BF_OFF (12)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WADDR_BF_WID ( 5)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WADDR_BF_MSK (0x0001F000)
#define ADC_DIG_SEQ1_MEM_CMD_AW_WADDR_BF_DEF (0x00000000)
#define ADC_DIG_SEQ1_MEM_CMD_AW_ARR_SZ0 (20)
#define ADC_DIG_SEQ1_MEM_CMD_AW_ARRAY_STRIDE0 (0x0008)


/** @brief ADC_DIG_MAP_REG_SCRATCHPADD register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SCRATCHPADD
  * ADC_DIG Scratchpad Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Unused by hardware
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_scratchpadd_reg_t;

#define ADC_DIG_SCRATCHPADD_DEFAULT (0x00000000U)
#define ADC_DIG_SCRATCHPADD_RD_MASK (0xffffffffU)
#define ADC_DIG_SCRATCHPADD_WR_MASK (0xffffffffU)


///< Unused by hardware
#define ADC_DIG_SCRATCHPADD_SCRATCHPAD_BF_OFF ( 0)
#define ADC_DIG_SCRATCHPADD_SCRATCHPAD_BF_WID (32)
#define ADC_DIG_SCRATCHPADD_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_SCRATCHPADD_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CONFIGD register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/CONFIGD
  * ADC_DIG Configuration Register
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 1;
    ///< Test Control - enable parity inversion
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cfgd_reg_t;

#define ADC_DIG_CFGD_DEFAULT (0x00000000U)
#define ADC_DIG_CFGD_RD_MASK (0x00000001U)
#define ADC_DIG_CFGD_WR_MASK (0x00000001U)


///< Test Control - enable parity inversion
#define ADC_DIG_CFGD_TEST_CTRL_BF_OFF ( 0)
#define ADC_DIG_CFGD_TEST_CTRL_BF_WID ( 1)
#define ADC_DIG_CFGD_TEST_CTRL_BF_MSK (0x00000001)
#define ADC_DIG_CFGD_TEST_CTRL_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_SEQ_ITER[2] register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SEQ_ITER
  * Sequencer iteration control register.
  */

typedef union {
  struct {
    uint32_t ITER : 14;
    ///< Sequencer number of iterations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_seq_iter_reg_t;

#define ADC_DIG_SEQ_ITER_DEFAULT (0x00000000U)
#define ADC_DIG_SEQ_ITER_RD_MASK (0x00003fffU)
#define ADC_DIG_SEQ_ITER_WR_MASK (0x00003fffU)


///< Sequencer number of iterations.
#define ADC_DIG_SEQ_ITER_BF_OFF ( 0)
#define ADC_DIG_SEQ_ITER_BF_WID (14)
#define ADC_DIG_SEQ_ITER_BF_MSK (0x00003FFF)
#define ADC_DIG_SEQ_ITER_BF_DEF (0x00000000)
#define ADC_DIG_SEQ_ITER_ARR_SZ0 (2)
#define ADC_DIG_SEQ_ITER_ARRAY_STRIDE0 (0x0004)


/** @brief ADC_DIG_MAP_REG_SEQ_CTRL[2] register description at address offset 0x210
  *
  * Register default value:        0x00000002
  * Register full path in IP: adc_dig_map/reg/SEQ_CTRL
  * Sequencer control register.
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< 0: sequencer disabled, 1: sequencer enabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EXT_CTRL : 1;
    ///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t START_ADDR : 5;
    ///< Sequencer start address.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LOOP_START_ADDR : 5;
    ///< Sequencer loop start address.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t LOOP_END_ADDR : 5;
    ///< Sequencer loop end address.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t END_ADDR : 5;
    ///< Sequencer end address.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_seq_ctrl_reg_t;

#define ADC_DIG_SEQ_CTRL_DEFAULT (0x00000002U)
#define ADC_DIG_SEQ_CTRL_RD_MASK (0x003fffffU)
#define ADC_DIG_SEQ_CTRL_WR_MASK (0x003fffffU)


///< 0: sequencer disabled, 1: sequencer enabled.
#define ADC_DIG_SEQ_CTRL_EN_BF_OFF ( 0)
#define ADC_DIG_SEQ_CTRL_EN_BF_WID ( 1)
#define ADC_DIG_SEQ_CTRL_EN_BF_MSK (0x00000001)
#define ADC_DIG_SEQ_CTRL_EN_BF_DEF (0x00000000)

///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
#define ADC_DIG_SEQ_CTRL_EXT_BF_OFF ( 1)
#define ADC_DIG_SEQ_CTRL_EXT_BF_WID ( 1)
#define ADC_DIG_SEQ_CTRL_EXT_BF_MSK (0x00000002)
#define ADC_DIG_SEQ_CTRL_EXT_BF_DEF (0x00000002)

///< Sequencer start address.
#define ADC_DIG_SEQ_CTRL_START_ADDR_BF_OFF ( 2)
#define ADC_DIG_SEQ_CTRL_START_ADDR_BF_WID ( 5)
#define ADC_DIG_SEQ_CTRL_START_ADDR_BF_MSK (0x0000007C)
#define ADC_DIG_SEQ_CTRL_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop start address.
#define ADC_DIG_SEQ_CTRL_LOOP_START_ADDR_BF_OFF ( 7)
#define ADC_DIG_SEQ_CTRL_LOOP_START_ADDR_BF_WID ( 5)
#define ADC_DIG_SEQ_CTRL_LOOP_START_ADDR_BF_MSK (0x00000F80)
#define ADC_DIG_SEQ_CTRL_LOOP_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop end address.
#define ADC_DIG_SEQ_CTRL_LOOP_END_ADDR_BF_OFF (12)
#define ADC_DIG_SEQ_CTRL_LOOP_END_ADDR_BF_WID ( 5)
#define ADC_DIG_SEQ_CTRL_LOOP_END_ADDR_BF_MSK (0x0001F000)
#define ADC_DIG_SEQ_CTRL_LOOP_END_ADDR_BF_DEF (0x00000000)

///< Sequencer end address.
#define ADC_DIG_SEQ_CTRL_END_ADDR_BF_OFF (17)
#define ADC_DIG_SEQ_CTRL_END_ADDR_BF_WID ( 5)
#define ADC_DIG_SEQ_CTRL_END_ADDR_BF_MSK (0x003E0000)
#define ADC_DIG_SEQ_CTRL_END_ADDR_BF_DEF (0x00000000)
#define ADC_DIG_SEQ_CTRL_ARR_SZ0 (2)
#define ADC_DIG_SEQ_CTRL_ARRAY_STRIDE0 (0x0004)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG0 register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG0
  * RX LDO SAR
  */

typedef union {
  struct {
    uint32_t LDOSAR_ENABLE : 1;
    ///< [1] = enable LDO, [0] = split pass-device gates connected to 1.2V
    ///< (upper) and 0.6V (lower)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t LDOSAR_VOUTSEL : 5;
    ///< SAR LDO output voltage setting, values from simulation (prelayout)
    ///< tttt 90 1.2V Vref=0.5V: [00000] = 0.61V [11111] = 0.95V nominal voltage
    ///< step 10.625mV
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t LDOSAR_BYPASS : 1;
    ///< [1] = bypass LDO, both gates of split pass-device connected to 0.6V,
    ///< requires LDO enable = 0
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t LDOSAR_CCOMP : 3;
    ///< Miller compensation capacitor [000] min [001] [010] [011] [100] [101]
    ///< [110] [111] max
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t LDOSAR_RCOMP : 3;
    ///< bypass load current tracking zero-nulling resistor [000] off, load
    ///< current tracking Rzero only [001] [010] [011] [100] [101] [110] [111]
    ///< minimum fixed resistor in parallel to the load current tracking Rzero
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t RESERVED1 : 2;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t LDOSAR_IBERRAMP : 3;
    ///< bias current of error amp stage 1 and stage 2 [000] 20% [001] 40%
    ///< [010] 60% [011] 80% [100] 100% (default) [101] 120% [110] 140% [111]
    ///< 160%
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t LDOSAR_IBPDBUF : 3;
    ///< bias current of pass-device buffer [000] 20% [001] 40% [010] 60% [011]
    ///< 80% [100] 100% (default) [101] 120% [110] 140% [111] 160%
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t LDOSAR_IBIAS : 2;
    ///< central LDO bias current trim [00] 100% [default] [01] 72% [10] 172%
    ///< [11] 132%
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t RESERVED2 : 8;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg0_reg_t;

#define ADC_DIG_CFG0_DEFAULT (0x00000000U)
#define ADC_DIG_CFG0_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG0_WR_MASK (0xffffffffU)


///< [1] = enable LDO, [0] = split pass-device gates connected to 1.2V
///< (upper) and 0.6V (lower)
#define ADC_DIG_CFG0_LDOSAR_EN_BF_OFF ( 0)
#define ADC_DIG_CFG0_LDOSAR_EN_BF_WID ( 1)
#define ADC_DIG_CFG0_LDOSAR_EN_BF_MSK (0x00000001)
#define ADC_DIG_CFG0_LDOSAR_EN_BF_DEF (0x00000000)

///< SAR LDO output voltage setting, values from simulation (prelayout)
///< tttt 90 1.2V Vref=0.5V: [00000] = 0.61V [11111] = 0.95V nominal voltage
///< step 10.625mV
#define ADC_DIG_CFG0_LDOSAR_VOUTSEL_BF_OFF ( 1)
#define ADC_DIG_CFG0_LDOSAR_VOUTSEL_BF_WID ( 5)
#define ADC_DIG_CFG0_LDOSAR_VOUTSEL_BF_MSK (0x0000003E)
#define ADC_DIG_CFG0_LDOSAR_VOUTSEL_BF_DEF (0x00000000)

///< [1] = bypass LDO, both gates of split pass-device connected to 0.6V,
///< requires LDO enable = 0
#define ADC_DIG_CFG0_LDOSAR_BYP_BF_OFF ( 6)
#define ADC_DIG_CFG0_LDOSAR_BYP_BF_WID ( 1)
#define ADC_DIG_CFG0_LDOSAR_BYP_BF_MSK (0x00000040)
#define ADC_DIG_CFG0_LDOSAR_BYP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG0_RESERVED0_BF_OFF ( 7)
#define ADC_DIG_CFG0_RESERVED0_BF_WID ( 1)
#define ADC_DIG_CFG0_RESERVED0_BF_MSK (0x00000080)
#define ADC_DIG_CFG0_RESERVED0_BF_DEF (0x00000000)

///< Miller compensation capacitor [000] min [001] [010] [011] [100] [101]
///< [110] [111] max
#define ADC_DIG_CFG0_LDOSAR_CCOMP_BF_OFF ( 8)
#define ADC_DIG_CFG0_LDOSAR_CCOMP_BF_WID ( 3)
#define ADC_DIG_CFG0_LDOSAR_CCOMP_BF_MSK (0x00000700)
#define ADC_DIG_CFG0_LDOSAR_CCOMP_BF_DEF (0x00000000)

///< bypass load current tracking zero-nulling resistor [000] off, load
///< current tracking Rzero only [001] [010] [011] [100] [101] [110] [111]
///< minimum fixed resistor in parallel to the load current tracking Rzero
#define ADC_DIG_CFG0_LDOSAR_RCOMP_BF_OFF (11)
#define ADC_DIG_CFG0_LDOSAR_RCOMP_BF_WID ( 3)
#define ADC_DIG_CFG0_LDOSAR_RCOMP_BF_MSK (0x00003800)
#define ADC_DIG_CFG0_LDOSAR_RCOMP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG0_RESERVED1_BF_OFF (14)
#define ADC_DIG_CFG0_RESERVED1_BF_WID ( 2)
#define ADC_DIG_CFG0_RESERVED1_BF_MSK (0x0000C000)
#define ADC_DIG_CFG0_RESERVED1_BF_DEF (0x00000000)

///< bias current of error amp stage 1 and stage 2 [000] 20% [001] 40%
///< [010] 60% [011] 80% [100] 100% (default) [101] 120% [110] 140% [111]
///< 160%
#define ADC_DIG_CFG0_LDOSAR_IBERRAMP_BF_OFF (16)
#define ADC_DIG_CFG0_LDOSAR_IBERRAMP_BF_WID ( 3)
#define ADC_DIG_CFG0_LDOSAR_IBERRAMP_BF_MSK (0x00070000)
#define ADC_DIG_CFG0_LDOSAR_IBERRAMP_BF_DEF (0x00000000)

///< bias current of pass-device buffer [000] 20% [001] 40% [010] 60% [011]
///< 80% [100] 100% (default) [101] 120% [110] 140% [111] 160%
#define ADC_DIG_CFG0_LDOSAR_IBPDBUF_BF_OFF (19)
#define ADC_DIG_CFG0_LDOSAR_IBPDBUF_BF_WID ( 3)
#define ADC_DIG_CFG0_LDOSAR_IBPDBUF_BF_MSK (0x00380000)
#define ADC_DIG_CFG0_LDOSAR_IBPDBUF_BF_DEF (0x00000000)

///< central LDO bias current trim [00] 100% [default] [01] 72% [10] 172%
///< [11] 132%
#define ADC_DIG_CFG0_LDOSAR_IBIAS_BF_OFF (22)
#define ADC_DIG_CFG0_LDOSAR_IBIAS_BF_WID ( 2)
#define ADC_DIG_CFG0_LDOSAR_IBIAS_BF_MSK (0x00C00000)
#define ADC_DIG_CFG0_LDOSAR_IBIAS_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG0_RESERVED2_BF_OFF (24)
#define ADC_DIG_CFG0_RESERVED2_BF_WID ( 8)
#define ADC_DIG_CFG0_RESERVED2_BF_MSK (0xFF000000)
#define ADC_DIG_CFG0_RESERVED2_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG1 register description at address offset 0x304
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG1
  * RX LDO CLK
  */

typedef union {
  struct {
    uint32_t LDOCLK_ENABLE : 1;
    ///< [1] = enable LDO, [0] = split pass-device gates connected to 1.2V
    ///< (upper) and 0.6V (lower)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t LDOCLK_VOUTSEL : 5;
    ///< SAR LDO output voltage setting, values from simulation (prelayout)
    ///< tttt 90 1.2V Vref=0.5V: [00000] = 0.61V [11111] = 0.95V nominal voltage
    ///< step 10.625mV
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t LDOCLK_BYPASS : 1;
    ///< [1] = bypass LDO, both gates of split pass-device connected to 0.6V,
    ///< requires LDO enable = 0
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t LDOCLK_CCOMP : 3;
    ///< Miller compensation capacitor [000] min [001] [010] [011] [100] [101]
    ///< [110] [111] max
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t LDOCLK_RCOMP : 3;
    ///< bypass load current tracking zero-nulling resistor [000] off, load
    ///< current tracking Rzero only [001] [010] [011] [100] [101] [110] [111]
    ///< minimum fixed resistor in parallel to the load current tracking Rzero
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t RESERVED1 : 2;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t LDOCLK_IBERRAMP : 3;
    ///< bias current of error amp stage 1 and stage 2 [000] 20% [001] 40%
    ///< [010] 60% [011] 80% [100] 100% (default) [101] 120% [110] 140% [111]
    ///< 160%
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t LDOCLK_IBPDBUF : 3;
    ///< bias current of pass-device buffer [000] 20% [001] 40% [010] 60% [011]
    ///< 80% [100] 100% (default) [101] 120% [110] 140% [111] 160%
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t RESERVED2 : 10;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg1_reg_t;

#define ADC_DIG_CFG1_DEFAULT (0x00000000U)
#define ADC_DIG_CFG1_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG1_WR_MASK (0xffffffffU)


///< [1] = enable LDO, [0] = split pass-device gates connected to 1.2V
///< (upper) and 0.6V (lower)
#define ADC_DIG_CFG1_LDOCLK_EN_BF_OFF ( 0)
#define ADC_DIG_CFG1_LDOCLK_EN_BF_WID ( 1)
#define ADC_DIG_CFG1_LDOCLK_EN_BF_MSK (0x00000001)
#define ADC_DIG_CFG1_LDOCLK_EN_BF_DEF (0x00000000)

///< SAR LDO output voltage setting, values from simulation (prelayout)
///< tttt 90 1.2V Vref=0.5V: [00000] = 0.61V [11111] = 0.95V nominal voltage
///< step 10.625mV
#define ADC_DIG_CFG1_LDOCLK_VOUTSEL_BF_OFF ( 1)
#define ADC_DIG_CFG1_LDOCLK_VOUTSEL_BF_WID ( 5)
#define ADC_DIG_CFG1_LDOCLK_VOUTSEL_BF_MSK (0x0000003E)
#define ADC_DIG_CFG1_LDOCLK_VOUTSEL_BF_DEF (0x00000000)

///< [1] = bypass LDO, both gates of split pass-device connected to 0.6V,
///< requires LDO enable = 0
#define ADC_DIG_CFG1_LDOCLK_BYP_BF_OFF ( 6)
#define ADC_DIG_CFG1_LDOCLK_BYP_BF_WID ( 1)
#define ADC_DIG_CFG1_LDOCLK_BYP_BF_MSK (0x00000040)
#define ADC_DIG_CFG1_LDOCLK_BYP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG1_RESERVED0_BF_OFF ( 7)
#define ADC_DIG_CFG1_RESERVED0_BF_WID ( 1)
#define ADC_DIG_CFG1_RESERVED0_BF_MSK (0x00000080)
#define ADC_DIG_CFG1_RESERVED0_BF_DEF (0x00000000)

///< Miller compensation capacitor [000] min [001] [010] [011] [100] [101]
///< [110] [111] max
#define ADC_DIG_CFG1_LDOCLK_CCOMP_BF_OFF ( 8)
#define ADC_DIG_CFG1_LDOCLK_CCOMP_BF_WID ( 3)
#define ADC_DIG_CFG1_LDOCLK_CCOMP_BF_MSK (0x00000700)
#define ADC_DIG_CFG1_LDOCLK_CCOMP_BF_DEF (0x00000000)

///< bypass load current tracking zero-nulling resistor [000] off, load
///< current tracking Rzero only [001] [010] [011] [100] [101] [110] [111]
///< minimum fixed resistor in parallel to the load current tracking Rzero
#define ADC_DIG_CFG1_LDOCLK_RCOMP_BF_OFF (11)
#define ADC_DIG_CFG1_LDOCLK_RCOMP_BF_WID ( 3)
#define ADC_DIG_CFG1_LDOCLK_RCOMP_BF_MSK (0x00003800)
#define ADC_DIG_CFG1_LDOCLK_RCOMP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG1_RESERVED1_BF_OFF (14)
#define ADC_DIG_CFG1_RESERVED1_BF_WID ( 2)
#define ADC_DIG_CFG1_RESERVED1_BF_MSK (0x0000C000)
#define ADC_DIG_CFG1_RESERVED1_BF_DEF (0x00000000)

///< bias current of error amp stage 1 and stage 2 [000] 20% [001] 40%
///< [010] 60% [011] 80% [100] 100% (default) [101] 120% [110] 140% [111]
///< 160%
#define ADC_DIG_CFG1_LDOCLK_IBERRAMP_BF_OFF (16)
#define ADC_DIG_CFG1_LDOCLK_IBERRAMP_BF_WID ( 3)
#define ADC_DIG_CFG1_LDOCLK_IBERRAMP_BF_MSK (0x00070000)
#define ADC_DIG_CFG1_LDOCLK_IBERRAMP_BF_DEF (0x00000000)

///< bias current of pass-device buffer [000] 20% [001] 40% [010] 60% [011]
///< 80% [100] 100% (default) [101] 120% [110] 140% [111] 160%
#define ADC_DIG_CFG1_LDOCLK_IBPDBUF_BF_OFF (19)
#define ADC_DIG_CFG1_LDOCLK_IBPDBUF_BF_WID ( 3)
#define ADC_DIG_CFG1_LDOCLK_IBPDBUF_BF_MSK (0x00380000)
#define ADC_DIG_CFG1_LDOCLK_IBPDBUF_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG1_RESERVED2_BF_OFF (22)
#define ADC_DIG_CFG1_RESERVED2_BF_WID (10)
#define ADC_DIG_CFG1_RESERVED2_BF_MSK (0xFFC00000)
#define ADC_DIG_CFG1_RESERVED2_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG2 register description at address offset 0x308
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG2
  * RX LDO Reference
  */

typedef union {
  struct {
    uint32_t LDOREF_ENABLE : 1;
    ///< [1] = enable LDO, [0] = split pass-device gates connected to 1.2V
    ///< (upper) and 0.6V (lower)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t LDOREF_VOUTSEL : 5;
    ///< SAR LDO output voltage setting, values from simulation (prelayout)
    ///< tttt 90 1.2V Vref=0.5V: [00000] = 0.61V [11111] = 0.95V nominal voltage
    ///< step 10.625mV
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t LDOREF_BYPASS : 1;
    ///< [1] = bypass LDO, both gates of split pass-device connected to 0.6V,
    ///< requires LDO enable = 0
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t RESERVED0 : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t LDOREF_CCOMP : 3;
    ///< Miller compensation capacitor [000] min [001] [010] [011] [100] [101]
    ///< [110] [111] max
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t LDOREF_RCOMP : 3;
    ///< bypass load current tracking zero-nulling resistor [000] off, load
    ///< current tracking Rzero only [001] [010] [011] [100] [101] [110] [111]
    ///< minimum fixed resistor in parallel to the load current tracking Rzero
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t RESERVED1 : 2;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t LDOREF_IBERRAMP : 3;
    ///< bias current of error amp stage 1 and stage 2 [000] 20% [001] 40%
    ///< [010] 60% [011] 80% [100] 100% (default) [101] 120% [110] 140% [111]
    ///< 160%
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t LDOREF_IBPDBUF : 3;
    ///< bias current of pass-device buffer [000] 20% [001] 40% [010] 60% [011]
    ///< 80% [100] 100% (default) [101] 120% [110] 140% [111] 160%
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t RESERVED2 : 10;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg2_reg_t;

#define ADC_DIG_CFG2_DEFAULT (0x00000000U)
#define ADC_DIG_CFG2_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG2_WR_MASK (0xffffffffU)


///< [1] = enable LDO, [0] = split pass-device gates connected to 1.2V
///< (upper) and 0.6V (lower)
#define ADC_DIG_CFG2_LDOREF_EN_BF_OFF ( 0)
#define ADC_DIG_CFG2_LDOREF_EN_BF_WID ( 1)
#define ADC_DIG_CFG2_LDOREF_EN_BF_MSK (0x00000001)
#define ADC_DIG_CFG2_LDOREF_EN_BF_DEF (0x00000000)

///< SAR LDO output voltage setting, values from simulation (prelayout)
///< tttt 90 1.2V Vref=0.5V: [00000] = 0.61V [11111] = 0.95V nominal voltage
///< step 10.625mV
#define ADC_DIG_CFG2_LDOREF_VOUTSEL_BF_OFF ( 1)
#define ADC_DIG_CFG2_LDOREF_VOUTSEL_BF_WID ( 5)
#define ADC_DIG_CFG2_LDOREF_VOUTSEL_BF_MSK (0x0000003E)
#define ADC_DIG_CFG2_LDOREF_VOUTSEL_BF_DEF (0x00000000)

///< [1] = bypass LDO, both gates of split pass-device connected to 0.6V,
///< requires LDO enable = 0
#define ADC_DIG_CFG2_LDOREF_BYP_BF_OFF ( 6)
#define ADC_DIG_CFG2_LDOREF_BYP_BF_WID ( 1)
#define ADC_DIG_CFG2_LDOREF_BYP_BF_MSK (0x00000040)
#define ADC_DIG_CFG2_LDOREF_BYP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG2_RESERVED0_BF_OFF ( 7)
#define ADC_DIG_CFG2_RESERVED0_BF_WID ( 1)
#define ADC_DIG_CFG2_RESERVED0_BF_MSK (0x00000080)
#define ADC_DIG_CFG2_RESERVED0_BF_DEF (0x00000000)

///< Miller compensation capacitor [000] min [001] [010] [011] [100] [101]
///< [110] [111] max
#define ADC_DIG_CFG2_LDOREF_CCOMP_BF_OFF ( 8)
#define ADC_DIG_CFG2_LDOREF_CCOMP_BF_WID ( 3)
#define ADC_DIG_CFG2_LDOREF_CCOMP_BF_MSK (0x00000700)
#define ADC_DIG_CFG2_LDOREF_CCOMP_BF_DEF (0x00000000)

///< bypass load current tracking zero-nulling resistor [000] off, load
///< current tracking Rzero only [001] [010] [011] [100] [101] [110] [111]
///< minimum fixed resistor in parallel to the load current tracking Rzero
#define ADC_DIG_CFG2_LDOREF_RCOMP_BF_OFF (11)
#define ADC_DIG_CFG2_LDOREF_RCOMP_BF_WID ( 3)
#define ADC_DIG_CFG2_LDOREF_RCOMP_BF_MSK (0x00003800)
#define ADC_DIG_CFG2_LDOREF_RCOMP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG2_RESERVED1_BF_OFF (14)
#define ADC_DIG_CFG2_RESERVED1_BF_WID ( 2)
#define ADC_DIG_CFG2_RESERVED1_BF_MSK (0x0000C000)
#define ADC_DIG_CFG2_RESERVED1_BF_DEF (0x00000000)

///< bias current of error amp stage 1 and stage 2 [000] 20% [001] 40%
///< [010] 60% [011] 80% [100] 100% (default) [101] 120% [110] 140% [111]
///< 160%
#define ADC_DIG_CFG2_LDOREF_IBERRAMP_BF_OFF (16)
#define ADC_DIG_CFG2_LDOREF_IBERRAMP_BF_WID ( 3)
#define ADC_DIG_CFG2_LDOREF_IBERRAMP_BF_MSK (0x00070000)
#define ADC_DIG_CFG2_LDOREF_IBERRAMP_BF_DEF (0x00000000)

///< bias current of pass-device buffer [000] 20% [001] 40% [010] 60% [011]
///< 80% [100] 100% (default) [101] 120% [110] 140% [111] 160%
#define ADC_DIG_CFG2_LDOREF_IBPDBUF_BF_OFF (19)
#define ADC_DIG_CFG2_LDOREF_IBPDBUF_BF_WID ( 3)
#define ADC_DIG_CFG2_LDOREF_IBPDBUF_BF_MSK (0x00380000)
#define ADC_DIG_CFG2_LDOREF_IBPDBUF_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG2_RESERVED2_BF_OFF (22)
#define ADC_DIG_CFG2_RESERVED2_BF_WID (10)
#define ADC_DIG_CFG2_RESERVED2_BF_MSK (0xFFC00000)
#define ADC_DIG_CFG2_RESERVED2_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG3 register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG3
  * RX AMUX
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg3_reg_t;

#define ADC_DIG_CFG3_DEFAULT (0x00000000U)
#define ADC_DIG_CFG3_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG3_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG3_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG3_RESERVED_BF_WID (32)
#define ADC_DIG_CFG3_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG3_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG4 register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG4
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t DI_EN_LDO1 : 1;
    ///< enable of LDO1
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DI_BYPASS_LDO1 : 1;
    ///< connect lna core directly to the external supply rail, bypassing LDO
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t DI_CTRL_LDO1 : 4;
    ///< trimming internal LDO voltage: 1001 - default setting (1V)
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t DI_EN_BIAS1 : 2;
    ///< enable of biasing current generator
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DI_CTRL_BIAS1 : 4;
    ///< trimming open-loop gain with temperature tracking: 0010 - default
    ///< setting for typical process (tttt)
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DI_CTRL_IND1 : 2;
    ///< 00 - highest feedback inductance (peaking)
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t DI_CTRL_MUX1 : 2;
    ///< control input analog mux: 00 - disconnected/isolated from inputs 01
    ///< - connected to antenna (traffic) 10 - connected to caldac (calibration)
    ///< 11 - forbidden state
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t DI_EN_LDO2 : 1;
    ///< enable of LDO2
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DI_BYPASS_LDO2 : 1;
    ///< connect lna core directly to the external supply rail, bypassing LDO
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t DI_CTRL_LDO2 : 4;
    ///< trimming internal LDO voltage: 1001 - default setting (1V)
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t DI_EN_BIAS2 : 2;
    ///< enable of biasing current generator
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t DI_CTRL_BIAS2 : 4;
    ///< trimming open-loop gain with temperature tracking: 0010 - default
    ///< setting for typical process (tttt)
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t DI_CTRL_IND2 : 2;
    ///< 00 - highest feedback inductance (peaking)
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
    uint32_t DI_CTRL_MUX2 : 2;
    ///< control input analog mux: 00 - disconnected/isolated from inputs 01
    ///< - connected to antenna (traffic) 10 - connected to caldac (calibration)
    ///< 11 - forbidden state
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg4_reg_t;

#define ADC_DIG_CFG4_DEFAULT (0x00000000U)
#define ADC_DIG_CFG4_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG4_WR_MASK (0xffffffffU)


///< enable of LDO1
#define ADC_DIG_CFG4_DI_EN_LDO1_BF_OFF ( 0)
#define ADC_DIG_CFG4_DI_EN_LDO1_BF_WID ( 1)
#define ADC_DIG_CFG4_DI_EN_LDO1_BF_MSK (0x00000001)
#define ADC_DIG_CFG4_DI_EN_LDO1_BF_DEF (0x00000000)

///< connect lna core directly to the external supply rail, bypassing LDO
#define ADC_DIG_CFG4_DI_BYP_LDO1_BF_OFF ( 1)
#define ADC_DIG_CFG4_DI_BYP_LDO1_BF_WID ( 1)
#define ADC_DIG_CFG4_DI_BYP_LDO1_BF_MSK (0x00000002)
#define ADC_DIG_CFG4_DI_BYP_LDO1_BF_DEF (0x00000000)

///< trimming internal LDO voltage: 1001 - default setting (1V)
#define ADC_DIG_CFG4_DI_CTRL_LDO1_BF_OFF ( 2)
#define ADC_DIG_CFG4_DI_CTRL_LDO1_BF_WID ( 4)
#define ADC_DIG_CFG4_DI_CTRL_LDO1_BF_MSK (0x0000003C)
#define ADC_DIG_CFG4_DI_CTRL_LDO1_BF_DEF (0x00000000)

///< enable of biasing current generator
#define ADC_DIG_CFG4_DI_EN_BIAS1_BF_OFF ( 6)
#define ADC_DIG_CFG4_DI_EN_BIAS1_BF_WID ( 2)
#define ADC_DIG_CFG4_DI_EN_BIAS1_BF_MSK (0x000000C0)
#define ADC_DIG_CFG4_DI_EN_BIAS1_BF_DEF (0x00000000)

///< trimming open-loop gain with temperature tracking: 0010 - default
///< setting for typical process (tttt)
#define ADC_DIG_CFG4_DI_CTRL_BIAS1_BF_OFF ( 8)
#define ADC_DIG_CFG4_DI_CTRL_BIAS1_BF_WID ( 4)
#define ADC_DIG_CFG4_DI_CTRL_BIAS1_BF_MSK (0x00000F00)
#define ADC_DIG_CFG4_DI_CTRL_BIAS1_BF_DEF (0x00000000)

///< 00 - highest feedback inductance (peaking)
#define ADC_DIG_CFG4_DI_CTRL_IND1_BF_OFF (12)
#define ADC_DIG_CFG4_DI_CTRL_IND1_BF_WID ( 2)
#define ADC_DIG_CFG4_DI_CTRL_IND1_BF_MSK (0x00003000)
#define ADC_DIG_CFG4_DI_CTRL_IND1_BF_DEF (0x00000000)

///< control input analog mux: 00 - disconnected/isolated from inputs 01
///< - connected to antenna (traffic) 10 - connected to caldac (calibration)
///< 11 - forbidden state
#define ADC_DIG_CFG4_DI_CTRL_MUX1_BF_OFF (14)
#define ADC_DIG_CFG4_DI_CTRL_MUX1_BF_WID ( 2)
#define ADC_DIG_CFG4_DI_CTRL_MUX1_BF_MSK (0x0000C000)
#define ADC_DIG_CFG4_DI_CTRL_MUX1_BF_DEF (0x00000000)

///< enable of LDO2
#define ADC_DIG_CFG4_DI_EN_LDO2_BF_OFF (16)
#define ADC_DIG_CFG4_DI_EN_LDO2_BF_WID ( 1)
#define ADC_DIG_CFG4_DI_EN_LDO2_BF_MSK (0x00010000)
#define ADC_DIG_CFG4_DI_EN_LDO2_BF_DEF (0x00000000)

///< connect lna core directly to the external supply rail, bypassing LDO
#define ADC_DIG_CFG4_DI_BYP_LDO2_BF_OFF (17)
#define ADC_DIG_CFG4_DI_BYP_LDO2_BF_WID ( 1)
#define ADC_DIG_CFG4_DI_BYP_LDO2_BF_MSK (0x00020000)
#define ADC_DIG_CFG4_DI_BYP_LDO2_BF_DEF (0x00000000)

///< trimming internal LDO voltage: 1001 - default setting (1V)
#define ADC_DIG_CFG4_DI_CTRL_LDO2_BF_OFF (18)
#define ADC_DIG_CFG4_DI_CTRL_LDO2_BF_WID ( 4)
#define ADC_DIG_CFG4_DI_CTRL_LDO2_BF_MSK (0x003C0000)
#define ADC_DIG_CFG4_DI_CTRL_LDO2_BF_DEF (0x00000000)

///< enable of biasing current generator
#define ADC_DIG_CFG4_DI_EN_BIAS2_BF_OFF (22)
#define ADC_DIG_CFG4_DI_EN_BIAS2_BF_WID ( 2)
#define ADC_DIG_CFG4_DI_EN_BIAS2_BF_MSK (0x00C00000)
#define ADC_DIG_CFG4_DI_EN_BIAS2_BF_DEF (0x00000000)

///< trimming open-loop gain with temperature tracking: 0010 - default
///< setting for typical process (tttt)
#define ADC_DIG_CFG4_DI_CTRL_BIAS2_BF_OFF (24)
#define ADC_DIG_CFG4_DI_CTRL_BIAS2_BF_WID ( 4)
#define ADC_DIG_CFG4_DI_CTRL_BIAS2_BF_MSK (0x0F000000)
#define ADC_DIG_CFG4_DI_CTRL_BIAS2_BF_DEF (0x00000000)

///< 00 - highest feedback inductance (peaking)
#define ADC_DIG_CFG4_DI_CTRL_IND2_BF_OFF (28)
#define ADC_DIG_CFG4_DI_CTRL_IND2_BF_WID ( 2)
#define ADC_DIG_CFG4_DI_CTRL_IND2_BF_MSK (0x30000000)
#define ADC_DIG_CFG4_DI_CTRL_IND2_BF_DEF (0x00000000)

///< control input analog mux: 00 - disconnected/isolated from inputs 01
///< - connected to antenna (traffic) 10 - connected to caldac (calibration)
///< 11 - forbidden state
#define ADC_DIG_CFG4_DI_CTRL_MUX2_BF_OFF (30)
#define ADC_DIG_CFG4_DI_CTRL_MUX2_BF_WID ( 2)
#define ADC_DIG_CFG4_DI_CTRL_MUX2_BF_MSK (0xC0000000)
#define ADC_DIG_CFG4_DI_CTRL_MUX2_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG5 register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG5
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t DI_EN_LDO_OBS : 1;
    ///< enable of LDO
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DI_BYPASS_LDO_OBS : 1;
    ///< connect obs-buffer core directly to the external supply rail, bypassing
    ///< LDO
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t DI_CTRL_LDO_OBS : 4;
    ///< trimming internal LDO voltage: 1001 - default setting (1V)
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t DI_EN_BIAS_OBS : 2;
    ///< enable of OBS biasing current generator
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DI_CTRL_BIAS_OBS : 4;
    ///< trimming biasing of source-follower (obs-buffer): 0010 - default setting
    ///< for typical process (tttt)
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DI_CTRL_MUX_OBS : 2;
    ///< control input analog mux: 00 - disconnected/isolated from inputs 01
    ///< - connected to TX path (feedback) 10 - connected to RX path (antenna)
    ///< 11 - forbidden state
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t RESERVED : 18;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg5_reg_t;

#define ADC_DIG_CFG5_DEFAULT (0x00000000U)
#define ADC_DIG_CFG5_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG5_WR_MASK (0xffffffffU)


///< enable of LDO
#define ADC_DIG_CFG5_DI_EN_LDO_OBS_BF_OFF ( 0)
#define ADC_DIG_CFG5_DI_EN_LDO_OBS_BF_WID ( 1)
#define ADC_DIG_CFG5_DI_EN_LDO_OBS_BF_MSK (0x00000001)
#define ADC_DIG_CFG5_DI_EN_LDO_OBS_BF_DEF (0x00000000)

///< connect obs-buffer core directly to the external supply rail, bypassing
///< LDO
#define ADC_DIG_CFG5_DI_BYP_LDO_OBS_BF_OFF ( 1)
#define ADC_DIG_CFG5_DI_BYP_LDO_OBS_BF_WID ( 1)
#define ADC_DIG_CFG5_DI_BYP_LDO_OBS_BF_MSK (0x00000002)
#define ADC_DIG_CFG5_DI_BYP_LDO_OBS_BF_DEF (0x00000000)

///< trimming internal LDO voltage: 1001 - default setting (1V)
#define ADC_DIG_CFG5_DI_CTRL_LDO_OBS_BF_OFF ( 2)
#define ADC_DIG_CFG5_DI_CTRL_LDO_OBS_BF_WID ( 4)
#define ADC_DIG_CFG5_DI_CTRL_LDO_OBS_BF_MSK (0x0000003C)
#define ADC_DIG_CFG5_DI_CTRL_LDO_OBS_BF_DEF (0x00000000)

///< enable of OBS biasing current generator
#define ADC_DIG_CFG5_DI_EN_BIAS_OBS_BF_OFF ( 6)
#define ADC_DIG_CFG5_DI_EN_BIAS_OBS_BF_WID ( 2)
#define ADC_DIG_CFG5_DI_EN_BIAS_OBS_BF_MSK (0x000000C0)
#define ADC_DIG_CFG5_DI_EN_BIAS_OBS_BF_DEF (0x00000000)

///< trimming biasing of source-follower (obs-buffer): 0010 - default setting
///< for typical process (tttt)
#define ADC_DIG_CFG5_DI_CTRL_BIAS_OBS_BF_OFF ( 8)
#define ADC_DIG_CFG5_DI_CTRL_BIAS_OBS_BF_WID ( 4)
#define ADC_DIG_CFG5_DI_CTRL_BIAS_OBS_BF_MSK (0x00000F00)
#define ADC_DIG_CFG5_DI_CTRL_BIAS_OBS_BF_DEF (0x00000000)

///< control input analog mux: 00 - disconnected/isolated from inputs 01
///< - connected to TX path (feedback) 10 - connected to RX path (antenna)
///< 11 - forbidden state
#define ADC_DIG_CFG5_DI_CTRL_MUX_OBS_BF_OFF (12)
#define ADC_DIG_CFG5_DI_CTRL_MUX_OBS_BF_WID ( 2)
#define ADC_DIG_CFG5_DI_CTRL_MUX_OBS_BF_MSK (0x00003000)
#define ADC_DIG_CFG5_DI_CTRL_MUX_OBS_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG5_RESERVED_BF_OFF (14)
#define ADC_DIG_CFG5_RESERVED_BF_WID (18)
#define ADC_DIG_CFG5_RESERVED_BF_MSK (0xFFFFC000)
#define ADC_DIG_CFG5_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG6 register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG6
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t DI_EN_RFCLAMP_DSA_ANTENNA : 1;
    ///< short differential inputs with a fixed impedance (10Ohm), providing
    ///< an additional attenuation (c.a. 14dB)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DI_ATTN_DSA_ANTENNA : 5;
    ///< programming dsa attenuation setting: 00000 - bypass mode (min. attenuation
    ///< 0dB + IL) ------- 11111 - max attenuation (30dB + IL)
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t DI_EN_DSA_ANTENNA : 1;
    ///< DSA antenna enable: 0 - series/parallel shunt switches kept in OFF
    ///< state (open)  1 - series/parallel shunt switches sensitive to attenuation
    ///< setting
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DI_PWR_UP_DSA_ANTENNA : 1;
    ///< connect to supply rail: 0 - block in power down 1 - block in power
    ///< up
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t RESERVED0 : 8;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DI_EN_RFCLAMP_DSA_CALDAC : 1;
    ///< short differential inputs with a fixed impedance (10Ohm), providing
    ///< an additional attenuation (c.a. 14dB)
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t DI_ATTN_DSA_CALDAC : 5;
    ///< programming dsa attenuation setting: 00000 - bypass mode (min. attenuation
    ///< 0dB + IL) ------- 11111 - max attenuation (30dB + IL)
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t DI_EN_DSA_CALDAC : 1;
    ///< DSA caldac enable: 0 - series/parallel shunt switches kept in OFF
    ///< state (open)  1 - series/parallel shunt switches sensitive to attenuation
    ///< setting
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t DI_PWR_UP_DSA_CALDAC : 1;
    ///< connect to supply rail: 0 - block in power down 1 - block in power
    ///< up
    ///< AccessType="RW/V" BitOffset="23" ResetValue="0x0"
    uint32_t RESERVED1 : 8;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg6_reg_t;

#define ADC_DIG_CFG6_DEFAULT (0x00000000U)
#define ADC_DIG_CFG6_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG6_WR_MASK (0xffffffffU)


///< short differential inputs with a fixed impedance (10Ohm), providing
///< an additional attenuation (c.a. 14dB)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_ANTENNA_BF_OFF ( 0)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_ANTENNA_BF_WID ( 1)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_ANTENNA_BF_MSK (0x00000001)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_ANTENNA_BF_DEF (0x00000000)

///< programming dsa attenuation setting: 00000 - bypass mode (min. attenuation
///< 0dB + IL) ------- 11111 - max attenuation (30dB + IL)
#define ADC_DIG_CFG6_DI_ATTN_DSA_ANTENNA_BF_OFF ( 1)
#define ADC_DIG_CFG6_DI_ATTN_DSA_ANTENNA_BF_WID ( 5)
#define ADC_DIG_CFG6_DI_ATTN_DSA_ANTENNA_BF_MSK (0x0000003E)
#define ADC_DIG_CFG6_DI_ATTN_DSA_ANTENNA_BF_DEF (0x00000000)

///< DSA antenna enable: 0 - series/parallel shunt switches kept in OFF
///< state (open)  1 - series/parallel shunt switches sensitive to attenuation
///< setting
#define ADC_DIG_CFG6_DI_EN_DSA_ANTENNA_BF_OFF ( 6)
#define ADC_DIG_CFG6_DI_EN_DSA_ANTENNA_BF_WID ( 1)
#define ADC_DIG_CFG6_DI_EN_DSA_ANTENNA_BF_MSK (0x00000040)
#define ADC_DIG_CFG6_DI_EN_DSA_ANTENNA_BF_DEF (0x00000000)

///< connect to supply rail: 0 - block in power down 1 - block in power
///< up
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_ANTENNA_BF_OFF ( 7)
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_ANTENNA_BF_WID ( 1)
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_ANTENNA_BF_MSK (0x00000080)
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_ANTENNA_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG6_RESERVED0_BF_OFF ( 8)
#define ADC_DIG_CFG6_RESERVED0_BF_WID ( 8)
#define ADC_DIG_CFG6_RESERVED0_BF_MSK (0x0000FF00)
#define ADC_DIG_CFG6_RESERVED0_BF_DEF (0x00000000)

///< short differential inputs with a fixed impedance (10Ohm), providing
///< an additional attenuation (c.a. 14dB)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_CALDAC_BF_OFF (16)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_CALDAC_BF_WID ( 1)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_CALDAC_BF_MSK (0x00010000)
#define ADC_DIG_CFG6_DI_EN_RFCLAMP_DSA_CALDAC_BF_DEF (0x00000000)

///< programming dsa attenuation setting: 00000 - bypass mode (min. attenuation
///< 0dB + IL) ------- 11111 - max attenuation (30dB + IL)
#define ADC_DIG_CFG6_DI_ATTN_DSA_CALDAC_BF_OFF (17)
#define ADC_DIG_CFG6_DI_ATTN_DSA_CALDAC_BF_WID ( 5)
#define ADC_DIG_CFG6_DI_ATTN_DSA_CALDAC_BF_MSK (0x003E0000)
#define ADC_DIG_CFG6_DI_ATTN_DSA_CALDAC_BF_DEF (0x00000000)

///< DSA caldac enable: 0 - series/parallel shunt switches kept in OFF
///< state (open)  1 - series/parallel shunt switches sensitive to attenuation
///< setting
#define ADC_DIG_CFG6_DI_EN_DSA_CALDAC_BF_OFF (22)
#define ADC_DIG_CFG6_DI_EN_DSA_CALDAC_BF_WID ( 1)
#define ADC_DIG_CFG6_DI_EN_DSA_CALDAC_BF_MSK (0x00400000)
#define ADC_DIG_CFG6_DI_EN_DSA_CALDAC_BF_DEF (0x00000000)

///< connect to supply rail: 0 - block in power down 1 - block in power
///< up
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_CALDAC_BF_OFF (23)
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_CALDAC_BF_WID ( 1)
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_CALDAC_BF_MSK (0x00800000)
#define ADC_DIG_CFG6_DI_PWR_UP_DSA_CALDAC_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG6_RESERVED1_BF_OFF (24)
#define ADC_DIG_CFG6_RESERVED1_BF_WID ( 8)
#define ADC_DIG_CFG6_RESERVED1_BF_MSK (0xFF000000)
#define ADC_DIG_CFG6_RESERVED1_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG7 register description at address offset 0x31c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG7
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg7_reg_t;

#define ADC_DIG_CFG7_DEFAULT (0x00000000U)
#define ADC_DIG_CFG7_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG7_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG7_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG7_RESERVED_BF_WID (32)
#define ADC_DIG_CFG7_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG7_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG8 register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG8
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg8_reg_t;

#define ADC_DIG_CFG8_DEFAULT (0x00000000U)
#define ADC_DIG_CFG8_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG8_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG8_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG8_RESERVED_BF_WID (32)
#define ADC_DIG_CFG8_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG8_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG9 register description at address offset 0x324
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG9
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg9_reg_t;

#define ADC_DIG_CFG9_DEFAULT (0x00000000U)
#define ADC_DIG_CFG9_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG9_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG9_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG9_RESERVED_BF_WID (32)
#define ADC_DIG_CFG9_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG9_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG10 register description at address offset 0x328
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG10
  * RX RF-Frontend
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg10_reg_t;

#define ADC_DIG_CFG10_DEFAULT (0x00000000U)
#define ADC_DIG_CFG10_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG10_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG10_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG10_RESERVED_BF_WID (32)
#define ADC_DIG_CFG10_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG10_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG11 register description at address offset 0x32c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG11
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg11_reg_t;

#define ADC_DIG_CFG11_DEFAULT (0x00000000U)
#define ADC_DIG_CFG11_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG11_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG11_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG11_RESERVED_BF_WID (32)
#define ADC_DIG_CFG11_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG11_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG12 register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG12
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg12_reg_t;

#define ADC_DIG_CFG12_DEFAULT (0x00000000U)
#define ADC_DIG_CFG12_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG12_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG12_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG12_RESERVED_BF_WID (32)
#define ADC_DIG_CFG12_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG12_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG13 register description at address offset 0x334
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG13
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg13_reg_t;

#define ADC_DIG_CFG13_DEFAULT (0x00000000U)
#define ADC_DIG_CFG13_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG13_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG13_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG13_RESERVED_BF_WID (32)
#define ADC_DIG_CFG13_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG13_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG14 register description at address offset 0x338
  *
  * Register default value:        0x0081000F
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG14
  * RX Clock
  */

typedef union {
  struct {
    uint32_t EN_RX_CLK : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x1"
    uint32_t EN_RX_SYNC_CLK : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x1"
    uint32_t EN_FIFO_START : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x1"
    uint32_t EN_ADC_CLK : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x1"
    uint32_t EN_DIV_RF_CLK : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t SEL_ADC_CLK : 1;
    ///< 0: use undivided clk, 1: use divider output
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t RSTN : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t DISABLE_SYNC_CLK : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t DISABLE_SYNC_CLK_FORCE : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t INVERT_SYNC_SAMPLING : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t PROG_DELAY_SYNC : 4;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t ENABLE_MODE3Q : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t ENABLE_DIV6 : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t DISABLE_RF : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x1"
    uint32_t RF_PROG : 2;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t DISABLE_SERHI : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t SERHI_PROG : 2;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t DISABLE_SERLO : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t SERLO_PROG : 2;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="23" ResetValue="0x1"
    uint32_t DISABLE_ENC : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="25" ResetValue="0x0"
    uint32_t RESERVED : 6;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="26" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg14_reg_t;

#define ADC_DIG_CFG14_DEFAULT (0x0081000fU)
#define ADC_DIG_CFG14_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG14_WR_MASK (0xffffffffU)


///< To Be Done
#define ADC_DIG_CFG14_EN_RX_CLK_BF_OFF ( 0)
#define ADC_DIG_CFG14_EN_RX_CLK_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_RX_CLK_BF_MSK (0x00000001)
#define ADC_DIG_CFG14_EN_RX_CLK_BF_DEF (0x00000001)

///< To Be Done
#define ADC_DIG_CFG14_EN_RX_SYNC_CLK_BF_OFF ( 1)
#define ADC_DIG_CFG14_EN_RX_SYNC_CLK_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_RX_SYNC_CLK_BF_MSK (0x00000002)
#define ADC_DIG_CFG14_EN_RX_SYNC_CLK_BF_DEF (0x00000002)

///< To Be Done
#define ADC_DIG_CFG14_EN_FIFO_START_BF_OFF ( 2)
#define ADC_DIG_CFG14_EN_FIFO_START_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_FIFO_START_BF_MSK (0x00000004)
#define ADC_DIG_CFG14_EN_FIFO_START_BF_DEF (0x00000004)

///< To Be Done
#define ADC_DIG_CFG14_EN_CLK_BF_OFF ( 3)
#define ADC_DIG_CFG14_EN_CLK_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_CLK_BF_MSK (0x00000008)
#define ADC_DIG_CFG14_EN_CLK_BF_DEF (0x00000008)

///< To Be Done
#define ADC_DIG_CFG14_EN_DIV_RF_CLK_BF_OFF ( 4)
#define ADC_DIG_CFG14_EN_DIV_RF_CLK_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_DIV_RF_CLK_BF_MSK (0x00000010)
#define ADC_DIG_CFG14_EN_DIV_RF_CLK_BF_DEF (0x00000000)

///< 0: use undivided clk, 1: use divider output
#define ADC_DIG_CFG14_SEL_CLK_BF_OFF ( 5)
#define ADC_DIG_CFG14_SEL_CLK_BF_WID ( 1)
#define ADC_DIG_CFG14_SEL_CLK_BF_MSK (0x00000020)
#define ADC_DIG_CFG14_SEL_CLK_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_RSTN_BF_OFF ( 6)
#define ADC_DIG_CFG14_RSTN_BF_WID ( 1)
#define ADC_DIG_CFG14_RSTN_BF_MSK (0x00000040)
#define ADC_DIG_CFG14_RSTN_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_DIS_SYNC_CLK_BF_OFF ( 7)
#define ADC_DIG_CFG14_DIS_SYNC_CLK_BF_WID ( 1)
#define ADC_DIG_CFG14_DIS_SYNC_CLK_BF_MSK (0x00000080)
#define ADC_DIG_CFG14_DIS_SYNC_CLK_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_DIS_SYNC_CLK_FORCE_BF_OFF ( 8)
#define ADC_DIG_CFG14_DIS_SYNC_CLK_FORCE_BF_WID ( 1)
#define ADC_DIG_CFG14_DIS_SYNC_CLK_FORCE_BF_MSK (0x00000100)
#define ADC_DIG_CFG14_DIS_SYNC_CLK_FORCE_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_INVERT_SYNC_SAMPLING_BF_OFF ( 9)
#define ADC_DIG_CFG14_INVERT_SYNC_SAMPLING_BF_WID ( 1)
#define ADC_DIG_CFG14_INVERT_SYNC_SAMPLING_BF_MSK (0x00000200)
#define ADC_DIG_CFG14_INVERT_SYNC_SAMPLING_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_PROG_DELAY_SYNC_BF_OFF (10)
#define ADC_DIG_CFG14_PROG_DELAY_SYNC_BF_WID ( 4)
#define ADC_DIG_CFG14_PROG_DELAY_SYNC_BF_MSK (0x00003C00)
#define ADC_DIG_CFG14_PROG_DELAY_SYNC_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_EN_MODE3Q_BF_OFF (14)
#define ADC_DIG_CFG14_EN_MODE3Q_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_MODE3Q_BF_MSK (0x00004000)
#define ADC_DIG_CFG14_EN_MODE3Q_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_EN_DIV6_BF_OFF (15)
#define ADC_DIG_CFG14_EN_DIV6_BF_WID ( 1)
#define ADC_DIG_CFG14_EN_DIV6_BF_MSK (0x00008000)
#define ADC_DIG_CFG14_EN_DIV6_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_DIS_RF_BF_OFF (16)
#define ADC_DIG_CFG14_DIS_RF_BF_WID ( 1)
#define ADC_DIG_CFG14_DIS_RF_BF_MSK (0x00010000)
#define ADC_DIG_CFG14_DIS_RF_BF_DEF (0x00010000)

///< To Be Done
#define ADC_DIG_CFG14_RF_PROG_BF_OFF (17)
#define ADC_DIG_CFG14_RF_PROG_BF_WID ( 2)
#define ADC_DIG_CFG14_RF_PROG_BF_MSK (0x00060000)
#define ADC_DIG_CFG14_RF_PROG_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_DIS_SERHI_BF_OFF (19)
#define ADC_DIG_CFG14_DIS_SERHI_BF_WID ( 1)
#define ADC_DIG_CFG14_DIS_SERHI_BF_MSK (0x00080000)
#define ADC_DIG_CFG14_DIS_SERHI_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_SERHI_PROG_BF_OFF (20)
#define ADC_DIG_CFG14_SERHI_PROG_BF_WID ( 2)
#define ADC_DIG_CFG14_SERHI_PROG_BF_MSK (0x00300000)
#define ADC_DIG_CFG14_SERHI_PROG_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_DIS_SERLO_BF_OFF (22)
#define ADC_DIG_CFG14_DIS_SERLO_BF_WID ( 1)
#define ADC_DIG_CFG14_DIS_SERLO_BF_MSK (0x00400000)
#define ADC_DIG_CFG14_DIS_SERLO_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG14_SERLO_PROG_BF_OFF (23)
#define ADC_DIG_CFG14_SERLO_PROG_BF_WID ( 2)
#define ADC_DIG_CFG14_SERLO_PROG_BF_MSK (0x01800000)
#define ADC_DIG_CFG14_SERLO_PROG_BF_DEF (0x00800000)

///< To Be Done
#define ADC_DIG_CFG14_DIS_ENC_BF_OFF (25)
#define ADC_DIG_CFG14_DIS_ENC_BF_WID ( 1)
#define ADC_DIG_CFG14_DIS_ENC_BF_MSK (0x02000000)
#define ADC_DIG_CFG14_DIS_ENC_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG14_RESERVED_BF_OFF (26)
#define ADC_DIG_CFG14_RESERVED_BF_WID ( 6)
#define ADC_DIG_CFG14_RESERVED_BF_MSK (0xFC000000)
#define ADC_DIG_CFG14_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG15 register description at address offset 0x33c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG15
  * RX Sync
  */

typedef union {
  struct {
    uint32_t DISABLE_DIG : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t INV_CLK_DIG : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t PRG_CLK_DIG_DELAY : 2;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t PRG_CLK_SCHED_DELAY : 4;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t EN_RX_CLK_SLOW : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t EN_RX_CLK_TOGGLE : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="9" ResetValue="0x0"
    uint32_t ENABLE_BTICOMP : 1;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t PROG_BTICOMP : 4;
    ///< To Be Done
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t RESERVED : 17;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg15_reg_t;

#define ADC_DIG_CFG15_DEFAULT (0x00000000U)
#define ADC_DIG_CFG15_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG15_WR_MASK (0xffffffffU)


///< To Be Done
#define ADC_DIG_CFG15_DIS_BF_OFF ( 0)
#define ADC_DIG_CFG15_DIS_BF_WID ( 1)
#define ADC_DIG_CFG15_DIS_BF_MSK (0x00000001)
#define ADC_DIG_CFG15_DIS_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_INV_CLK_BF_OFF ( 1)
#define ADC_DIG_CFG15_INV_CLK_BF_WID ( 1)
#define ADC_DIG_CFG15_INV_CLK_BF_MSK (0x00000002)
#define ADC_DIG_CFG15_INV_CLK_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_PRG_CLK_DELAY_BF_OFF ( 2)
#define ADC_DIG_CFG15_PRG_CLK_DELAY_BF_WID ( 2)
#define ADC_DIG_CFG15_PRG_CLK_DELAY_BF_MSK (0x0000000C)
#define ADC_DIG_CFG15_PRG_CLK_DELAY_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_PRG_CLK_SCHED_DELAY_BF_OFF ( 4)
#define ADC_DIG_CFG15_PRG_CLK_SCHED_DELAY_BF_WID ( 4)
#define ADC_DIG_CFG15_PRG_CLK_SCHED_DELAY_BF_MSK (0x000000F0)
#define ADC_DIG_CFG15_PRG_CLK_SCHED_DELAY_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_EN_RX_CLK_SLOW_BF_OFF ( 8)
#define ADC_DIG_CFG15_EN_RX_CLK_SLOW_BF_WID ( 1)
#define ADC_DIG_CFG15_EN_RX_CLK_SLOW_BF_MSK (0x00000100)
#define ADC_DIG_CFG15_EN_RX_CLK_SLOW_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_EN_RX_CLK_TOGGLE_BF_OFF ( 9)
#define ADC_DIG_CFG15_EN_RX_CLK_TOGGLE_BF_WID ( 1)
#define ADC_DIG_CFG15_EN_RX_CLK_TOGGLE_BF_MSK (0x00000200)
#define ADC_DIG_CFG15_EN_RX_CLK_TOGGLE_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_EN_BTICOMP_BF_OFF (10)
#define ADC_DIG_CFG15_EN_BTICOMP_BF_WID ( 1)
#define ADC_DIG_CFG15_EN_BTICOMP_BF_MSK (0x00000400)
#define ADC_DIG_CFG15_EN_BTICOMP_BF_DEF (0x00000000)

///< To Be Done
#define ADC_DIG_CFG15_PROG_BTICOMP_BF_OFF (11)
#define ADC_DIG_CFG15_PROG_BTICOMP_BF_WID ( 4)
#define ADC_DIG_CFG15_PROG_BTICOMP_BF_MSK (0x00007800)
#define ADC_DIG_CFG15_PROG_BTICOMP_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG15_RESERVED_BF_OFF (15)
#define ADC_DIG_CFG15_RESERVED_BF_WID (17)
#define ADC_DIG_CFG15_RESERVED_BF_MSK (0xFFFF8000)
#define ADC_DIG_CFG15_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG16 register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG16
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESETN : 1;
    ///< reset obs serializer active low
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t BYPASS16TO4 : 1;
    ///< Bypass the base rate serializer for observation slice. Refer to programming
    ///< table for individual modes. Default full rate no bypass.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t BYPASS4TO2 : 1;
    ///< Bypass the low-rate serializer for observation slice. Refer to programming
    ///< table for individual modes. Default full rate no bypass
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t RESERVED : 29;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg16_reg_t;

#define ADC_DIG_CFG16_DEFAULT (0x00000000U)
#define ADC_DIG_CFG16_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG16_WR_MASK (0xffffffffU)


///< reset obs serializer active low
#define ADC_DIG_CFG16_RSTN_BF_OFF ( 0)
#define ADC_DIG_CFG16_RSTN_BF_WID ( 1)
#define ADC_DIG_CFG16_RSTN_BF_MSK (0x00000001)
#define ADC_DIG_CFG16_RSTN_BF_DEF (0x00000000)

///< Bypass the base rate serializer for observation slice. Refer to programming
///< table for individual modes. Default full rate no bypass.
#define ADC_DIG_CFG16_BYP16TO4_BF_OFF ( 1)
#define ADC_DIG_CFG16_BYP16TO4_BF_WID ( 1)
#define ADC_DIG_CFG16_BYP16TO4_BF_MSK (0x00000002)
#define ADC_DIG_CFG16_BYP16TO4_BF_DEF (0x00000000)

///< Bypass the low-rate serializer for observation slice. Refer to programming
///< table for individual modes. Default full rate no bypass
#define ADC_DIG_CFG16_BYP4TO2_BF_OFF ( 2)
#define ADC_DIG_CFG16_BYP4TO2_BF_WID ( 1)
#define ADC_DIG_CFG16_BYP4TO2_BF_MSK (0x00000004)
#define ADC_DIG_CFG16_BYP4TO2_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG16_RESERVED_BF_OFF ( 3)
#define ADC_DIG_CFG16_RESERVED_BF_WID (29)
#define ADC_DIG_CFG16_RESERVED_BF_MSK (0xFFFFFFF8)
#define ADC_DIG_CFG16_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG17 register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG17
  * RX Refbias
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg17_reg_t;

#define ADC_DIG_CFG17_DEFAULT (0x00000000U)
#define ADC_DIG_CFG17_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG17_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG17_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG17_RESERVED_BF_WID (32)
#define ADC_DIG_CFG17_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG17_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG18 register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG18
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg18_reg_t;

#define ADC_DIG_CFG18_DEFAULT (0x00000000U)
#define ADC_DIG_CFG18_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG18_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG18_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG18_RESERVED_BF_WID (32)
#define ADC_DIG_CFG18_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG18_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG19 register description at address offset 0x34c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG19
  * RX Scheduler
  */

typedef union {
  struct {
    uint32_t RESERVED : 22;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t SEL_SIMLT_HALFRATE_I : 1;
    ///< halfrate mode shift start even/odd pulse: not needed/implemented
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t SEL_FMODE_I : 2;
    ///< fmode[GHz], 00 16/24, 01 12/18, 10 8. 11 6
    ///< AccessType="RW/V" BitOffset="23" ResetValue="0x0"
    uint32_t SEL_D_DEL_I : 2;
    ///< select 1GHz clock additional delay tbd
    ///< AccessType="RW/V" BitOffset="25" ResetValue="0x0"
    uint32_t SEL_A_DEL_I : 2;
    ///< select 1GHz clock delay tbd
    ///< AccessType="RW/V" BitOffset="27" ResetValue="0x0"
    uint32_t SEL_CLKINV_I : 1;
    ///< select 1GHz clock edge
    ///< AccessType="RW/V" BitOffset="29" ResetValue="0x0"
    uint32_t EN_ODD_I : 1;
    ///< enable odd slices (upper slices)
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
    uint32_t EN_EVEN_I : 1;
    ///< enable even slices (lower slices)
    ///< AccessType="RW/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg19_reg_t;

#define ADC_DIG_CFG19_DEFAULT (0x00000000U)
#define ADC_DIG_CFG19_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG19_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG19_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG19_RESERVED_BF_WID (22)
#define ADC_DIG_CFG19_RESERVED_BF_MSK (0x003FFFFF)
#define ADC_DIG_CFG19_RESERVED_BF_DEF (0x00000000)

///< halfrate mode shift start even/odd pulse: not needed/implemented
#define ADC_DIG_CFG19_SEL_SIMLT_HALFRATE_I_BF_OFF (22)
#define ADC_DIG_CFG19_SEL_SIMLT_HALFRATE_I_BF_WID ( 1)
#define ADC_DIG_CFG19_SEL_SIMLT_HALFRATE_I_BF_MSK (0x00400000)
#define ADC_DIG_CFG19_SEL_SIMLT_HALFRATE_I_BF_DEF (0x00000000)

///< fmode[GHz], 00 16/24, 01 12/18, 10 8. 11 6
#define ADC_DIG_CFG19_SEL_FMODE_I_BF_OFF (23)
#define ADC_DIG_CFG19_SEL_FMODE_I_BF_WID ( 2)
#define ADC_DIG_CFG19_SEL_FMODE_I_BF_MSK (0x01800000)
#define ADC_DIG_CFG19_SEL_FMODE_I_BF_DEF (0x00000000)

///< select 1GHz clock additional delay tbd
#define ADC_DIG_CFG19_SEL_D_DEL_I_BF_OFF (25)
#define ADC_DIG_CFG19_SEL_D_DEL_I_BF_WID ( 2)
#define ADC_DIG_CFG19_SEL_D_DEL_I_BF_MSK (0x06000000)
#define ADC_DIG_CFG19_SEL_D_DEL_I_BF_DEF (0x00000000)

///< select 1GHz clock delay tbd
#define ADC_DIG_CFG19_SEL_A_DEL_I_BF_OFF (27)
#define ADC_DIG_CFG19_SEL_A_DEL_I_BF_WID ( 2)
#define ADC_DIG_CFG19_SEL_A_DEL_I_BF_MSK (0x18000000)
#define ADC_DIG_CFG19_SEL_A_DEL_I_BF_DEF (0x00000000)

///< select 1GHz clock edge
#define ADC_DIG_CFG19_SEL_CLKINV_I_BF_OFF (29)
#define ADC_DIG_CFG19_SEL_CLKINV_I_BF_WID ( 1)
#define ADC_DIG_CFG19_SEL_CLKINV_I_BF_MSK (0x20000000)
#define ADC_DIG_CFG19_SEL_CLKINV_I_BF_DEF (0x00000000)

///< enable odd slices (upper slices)
#define ADC_DIG_CFG19_EN_ODD_I_BF_OFF (30)
#define ADC_DIG_CFG19_EN_ODD_I_BF_WID ( 1)
#define ADC_DIG_CFG19_EN_ODD_I_BF_MSK (0x40000000)
#define ADC_DIG_CFG19_EN_ODD_I_BF_DEF (0x00000000)

///< enable even slices (lower slices)
#define ADC_DIG_CFG19_EN_EVEN_I_BF_OFF (31)
#define ADC_DIG_CFG19_EN_EVEN_I_BF_WID ( 1)
#define ADC_DIG_CFG19_EN_EVEN_I_BF_MSK (0x80000000)
#define ADC_DIG_CFG19_EN_EVEN_I_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG20 register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG20
  * RX Scheduler
  */

typedef union {
  struct {
    uint32_t D_SLICE_ADDRESSED_I : 17;
    ///< Address slice during calibration and test modes. Bit number is equal
    ///< to slice number
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RESERVED : 15;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg20_reg_t;

#define ADC_DIG_CFG20_DEFAULT (0x00000000U)
#define ADC_DIG_CFG20_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG20_WR_MASK (0xffffffffU)


///< Address slice during calibration and test modes. Bit number is equal
///< to slice number
#define ADC_DIG_CFG20_D_SLICE_ADDRED_I_BF_OFF ( 0)
#define ADC_DIG_CFG20_D_SLICE_ADDRED_I_BF_WID (17)
#define ADC_DIG_CFG20_D_SLICE_ADDRED_I_BF_MSK (0x0001FFFF)
#define ADC_DIG_CFG20_D_SLICE_ADDRED_I_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_CFG20_RESERVED_BF_OFF (17)
#define ADC_DIG_CFG20_RESERVED_BF_WID (15)
#define ADC_DIG_CFG20_RESERVED_BF_MSK (0xFFFE0000)
#define ADC_DIG_CFG20_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG21 register description at address offset 0x354
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG21
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg21_reg_t;

#define ADC_DIG_CFG21_DEFAULT (0x00000000U)
#define ADC_DIG_CFG21_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG21_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG21_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG21_RESERVED_BF_WID (32)
#define ADC_DIG_CFG21_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG21_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG22 register description at address offset 0x358
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG22
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg22_reg_t;

#define ADC_DIG_CFG22_DEFAULT (0x00000000U)
#define ADC_DIG_CFG22_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG22_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG22_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG22_RESERVED_BF_WID (32)
#define ADC_DIG_CFG22_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG22_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG23 register description at address offset 0x35c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG23
  * RX Spare
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg23_reg_t;

#define ADC_DIG_CFG23_DEFAULT (0x00000000U)
#define ADC_DIG_CFG23_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG23_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG23_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG23_RESERVED_BF_WID (32)
#define ADC_DIG_CFG23_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG23_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_CONFIG24 register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_CONFIG24
  * RX SAR
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cfg24_reg_t;

#define ADC_DIG_CFG24_DEFAULT (0x00000000U)
#define ADC_DIG_CFG24_RD_MASK (0xffffffffU)
#define ADC_DIG_CFG24_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_CFG24_RESERVED_BF_OFF ( 0)
#define ADC_DIG_CFG24_RESERVED_BF_WID (32)
#define ADC_DIG_CFG24_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CFG24_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_APB_BRIDGE_DCLK_STATUS register description at address offset 0x36c
  *
  * Register default value:        0x00010000
  * Register full path in IP: adc_dig_map/reg/APB_BRIDGE_DCLK_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_apb_brdg_dclk_stat_reg_t;

#define ADC_DIG_APB_BRDG_DCLK_STAT_DEFAULT (0x00010000U)
#define ADC_DIG_APB_BRDG_DCLK_STAT_RD_MASK (0xffffffffU)
#define ADC_DIG_APB_BRDG_DCLK_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_VAL_BF_WID (20)
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define ADC_DIG_APB_BRDG_DCLK_STAT_REVISION_BF_OFF (20)
#define ADC_DIG_APB_BRDG_DCLK_STAT_REVISION_BF_WID ( 8)
#define ADC_DIG_APB_BRDG_DCLK_STAT_REVISION_BF_MSK (0x0FF00000)
#define ADC_DIG_APB_BRDG_DCLK_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define ADC_DIG_APB_BRDG_DCLK_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define ADC_DIG_APB_BRDG_DCLK_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_DCLK_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define ADC_DIG_APB_BRDG_DCLK_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define ADC_DIG_APB_BRDG_DCLK_STAT_UNSOL_ACK_BF_OFF (29)
#define ADC_DIG_APB_BRDG_DCLK_STAT_UNSOL_ACK_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_DCLK_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define ADC_DIG_APB_BRDG_DCLK_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define ADC_DIG_APB_BRDG_DCLK_STAT_ACK_ERR_BF_OFF (30)
#define ADC_DIG_APB_BRDG_DCLK_STAT_ACK_ERR_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_DCLK_STAT_ACK_ERR_BF_MSK (0x40000000)
#define ADC_DIG_APB_BRDG_DCLK_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_BF_OFF (31)
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_BF_MSK (0x80000000)
#define ADC_DIG_APB_BRDG_DCLK_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_PROT_STATUS_SEQ_CMD_DATA[2] register description at address offset 0x370
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PROT_STATUS_SEQ_CMD_DATA
  * ADC_DIG Sequencer Command Protection Status register.
  */

typedef union {
  struct {
    uint32_t ERR : 20;
    ///< A parity error has occurred in the respective sequencer command register
    ///< in the respective sequencer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_prot_stat_seq_cmd_data_reg_t;

#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_DEFAULT (0x00000000U)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_RD_MASK (0x000fffffU)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_WR_MASK (0x00000000U)


///< A parity error has occurred in the respective sequencer command register
///< in the respective sequencer.
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_ERR_BF_OFF ( 0)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_ERR_BF_WID (20)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_ERR_BF_MSK (0x000FFFFF)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_ARR_SZ0 (2)
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA_ARRAY_STRIDE0 (0x0004)


/** @brief ADC_DIG_MAP_REG_PROT_STATUS_SEQ_CMD_AW[2] register description at address offset 0x378
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PROT_STATUS_SEQ_CMD_AW
  * ADC_DIG Sequencer Command Protection Status register.
  */

typedef union {
  struct {
    uint32_t ERR : 20;
    ///< A parity error has occurred in the respective sequencer command register
    ///< in the respective sequencer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_prot_stat_seq_cmd_aw_reg_t;

#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_DEFAULT (0x00000000U)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_RD_MASK (0x000fffffU)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_WR_MASK (0x00000000U)


///< A parity error has occurred in the respective sequencer command register
///< in the respective sequencer.
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_ERR_BF_OFF ( 0)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_ERR_BF_WID (20)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_ERR_BF_MSK (0x000FFFFF)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_ARR_SZ0 (2)
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW_ARRAY_STRIDE0 (0x0004)


/** @brief ADC_DIG_MAP_REG_PROT_STATUS_ADC_CONFIG register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PROT_STATUS_ADC_CONFIG
  * ADC_DIG ADC Config Protection Status register.
  */

typedef union {
  struct {
    uint32_t ADC_CONFIG : 25;
    ///< A parity error has occurred in the respective ADC_CONFIG register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_prot_stat_cfg_reg_t;

#define ADC_DIG_PROT_STAT_CFG_DEFAULT (0x00000000U)
#define ADC_DIG_PROT_STAT_CFG_RD_MASK (0x01ffffffU)
#define ADC_DIG_PROT_STAT_CFG_WR_MASK (0x00000000U)


///< A parity error has occurred in the respective ADC_CONFIG register.
#define ADC_DIG_PROT_STAT_CFG_BF_OFF ( 0)
#define ADC_DIG_PROT_STAT_CFG_BF_WID (25)
#define ADC_DIG_PROT_STAT_CFG_BF_MSK (0x01FFFFFF)
#define ADC_DIG_PROT_STAT_CFG_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_COLLISION_STATUS register description at address offset 0x384
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/COLLISION_STATUS
  * ADC_DIG Collision Status register.
  */

typedef union {
  struct {
    uint32_t ADDRESS : 5;
    ///< A collision (or access to unused space) has occurred at the specified
    ///< address.
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t APB_ACCESS : 1;
    ///< APB was one of the initiators.
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t SEQ_ACCESS : 2;
    ///< The respective sequencer was one of the initiators.
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t BAD_ADDRESS : 1;
    ///< A bad address was referenced.
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_collision_stat_reg_t;

#define ADC_DIG_COLLISION_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_COLLISION_STAT_RD_MASK (0x000001ffU)
#define ADC_DIG_COLLISION_STAT_WR_MASK (0x000001ffU)


///< A collision (or access to unused space) has occurred at the specified
///< address.
#define ADC_DIG_COLLISION_STAT_BF_OFF ( 0)
#define ADC_DIG_COLLISION_STAT_BF_WID ( 5)
#define ADC_DIG_COLLISION_STAT_BF_MSK (0x0000001F)
#define ADC_DIG_COLLISION_STAT_BF_DEF (0x00000000)

///< APB was one of the initiators.
#define ADC_DIG_COLLISION_STAT_APB_ACCESS_BF_OFF ( 5)
#define ADC_DIG_COLLISION_STAT_APB_ACCESS_BF_WID ( 1)
#define ADC_DIG_COLLISION_STAT_APB_ACCESS_BF_MSK (0x00000020)
#define ADC_DIG_COLLISION_STAT_APB_ACCESS_BF_DEF (0x00000000)

///< The respective sequencer was one of the initiators.
#define ADC_DIG_COLLISION_STAT_SEQ_ACCESS_BF_OFF ( 6)
#define ADC_DIG_COLLISION_STAT_SEQ_ACCESS_BF_WID ( 2)
#define ADC_DIG_COLLISION_STAT_SEQ_ACCESS_BF_MSK (0x000000C0)
#define ADC_DIG_COLLISION_STAT_SEQ_ACCESS_BF_DEF (0x00000000)

///< A bad address was referenced.
#define ADC_DIG_COLLISION_STAT_BAD_BF_OFF ( 8)
#define ADC_DIG_COLLISION_STAT_BAD_BF_WID ( 1)
#define ADC_DIG_COLLISION_STAT_BAD_BF_MSK (0x00000100)
#define ADC_DIG_COLLISION_STAT_BAD_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_SEQ_STATUS[2] register description at address offset 0x388
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SEQ_STATUS
  * Sequencer status register.
  */

typedef union {
  struct {
    uint32_t RUNNING : 1;
    ///< Sequencer is running.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< Sequencer is done.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PC : 5;
    ///< Sequencer program count.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t WAIT_CNT : 12;
    ///< Sequencer wait count.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_seq_stat_reg_t;

#define ADC_DIG_SEQ_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_SEQ_STAT_RD_MASK (0x0007ffffU)
#define ADC_DIG_SEQ_STAT_WR_MASK (0x00000000U)


///< Sequencer is running.
#define ADC_DIG_SEQ_STAT_RUNNING_BF_OFF ( 0)
#define ADC_DIG_SEQ_STAT_RUNNING_BF_WID ( 1)
#define ADC_DIG_SEQ_STAT_RUNNING_BF_MSK (0x00000001)
#define ADC_DIG_SEQ_STAT_RUNNING_BF_DEF (0x00000000)

///< Sequencer is done.
#define ADC_DIG_SEQ_STAT_DONE_BF_OFF ( 1)
#define ADC_DIG_SEQ_STAT_DONE_BF_WID ( 1)
#define ADC_DIG_SEQ_STAT_DONE_BF_MSK (0x00000002)
#define ADC_DIG_SEQ_STAT_DONE_BF_DEF (0x00000000)

///< Sequencer program count.
#define ADC_DIG_SEQ_STAT_PC_BF_OFF ( 2)
#define ADC_DIG_SEQ_STAT_PC_BF_WID ( 5)
#define ADC_DIG_SEQ_STAT_PC_BF_MSK (0x0000007C)
#define ADC_DIG_SEQ_STAT_PC_BF_DEF (0x00000000)

///< Sequencer wait count.
#define ADC_DIG_SEQ_STAT_WAIT_CNT_BF_OFF ( 7)
#define ADC_DIG_SEQ_STAT_WAIT_CNT_BF_WID (12)
#define ADC_DIG_SEQ_STAT_WAIT_CNT_BF_MSK (0x0007FF80)
#define ADC_DIG_SEQ_STAT_WAIT_CNT_BF_DEF (0x00000000)
#define ADC_DIG_SEQ_STAT_ARR_SZ0 (2)
#define ADC_DIG_SEQ_STAT_ARRAY_STRIDE0 (0x0004)


/** @brief ADC_DIG_MAP_REG_ADC_STAT0 register description at address offset 0x390
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_STAT0
  * RX SAR status
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_stat0_reg_t;

#define ADC_DIG_STAT0_DEFAULT (0x00000000U)
#define ADC_DIG_STAT0_RD_MASK (0xffffffffU)
#define ADC_DIG_STAT0_WR_MASK (0x00000000U)


///< RESERVED
#define ADC_DIG_STAT0_RESERVED_BF_OFF ( 0)
#define ADC_DIG_STAT0_RESERVED_BF_WID (32)
#define ADC_DIG_STAT0_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_STAT0_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_STAT1 register description at address offset 0x394
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_STAT1
  * RX SAR status
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_stat1_reg_t;

#define ADC_DIG_STAT1_DEFAULT (0x00000000U)
#define ADC_DIG_STAT1_RD_MASK (0xffffffffU)
#define ADC_DIG_STAT1_WR_MASK (0x00000000U)


///< RESERVED
#define ADC_DIG_STAT1_RESERVED_BF_OFF ( 0)
#define ADC_DIG_STAT1_RESERVED_BF_WID (32)
#define ADC_DIG_STAT1_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_STAT1_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_STAT2 register description at address offset 0x398
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_STAT2
  * RX Spare status
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_stat2_reg_t;

#define ADC_DIG_STAT2_DEFAULT (0x00000000U)
#define ADC_DIG_STAT2_RD_MASK (0xffffffffU)
#define ADC_DIG_STAT2_WR_MASK (0x00000000U)


///< RESERVED
#define ADC_DIG_STAT2_RESERVED_BF_OFF ( 0)
#define ADC_DIG_STAT2_RESERVED_BF_WID (32)
#define ADC_DIG_STAT2_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_STAT2_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_STAT3 register description at address offset 0x39c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_STAT3
  * RX spare status
  */

typedef union {
  struct {
    uint32_t RESERVED : 32;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_stat3_reg_t;

#define ADC_DIG_STAT3_DEFAULT (0x00000000U)
#define ADC_DIG_STAT3_RD_MASK (0xffffffffU)
#define ADC_DIG_STAT3_WR_MASK (0x00000000U)


///< RESERVED
#define ADC_DIG_STAT3_RESERVED_BF_OFF ( 0)
#define ADC_DIG_STAT3_RESERVED_BF_WID (32)
#define ADC_DIG_STAT3_RESERVED_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_STAT3_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_INT_STATUS register description at address offset 0x3a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/INT_STATUS
  * ADC_DIG Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t SEQ_CMD_DATA_ERROR : 2;
    ///< Indicates Sequencer Command (Data) error interrupt status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_CMD_AW_ERROR : 2;
    ///< Indicates Sequencer Command (AW) error interrupt status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_CONFIG_ERROR : 1;
    ///< Indicates ADC_CONFIG register error interrupt status
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ_COLLISION_ERROR : 1;
    ///< Indicates a colliision specified in the SEQ_COLLISION register
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_DATA_ERROR : 1;
    ///< Indicates Sequencer Command (Data) error interrupt status
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_AW_ERROR : 1;
    ///< Indicates Sequencer Command (AW) error interrupt status
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t REGISTER_ERROR : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t CAL_SEQ_COLLISION_ERROR : 1;
    ///< Indicates a colliision specified in the CAL_SEQ_COLLISION register.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_int_stat_reg_t;

#define ADC_DIG_INT_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_INT_STAT_RD_MASK (0x000003ffU)
#define ADC_DIG_INT_STAT_WR_MASK (0x00000000U)


///< Indicates Sequencer Command (Data) error interrupt status
#define ADC_DIG_INT_STAT_SEQ_CMD_DATA_ERR_BF_OFF ( 0)
#define ADC_DIG_INT_STAT_SEQ_CMD_DATA_ERR_BF_WID ( 2)
#define ADC_DIG_INT_STAT_SEQ_CMD_DATA_ERR_BF_MSK (0x00000003)
#define ADC_DIG_INT_STAT_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error interrupt status
#define ADC_DIG_INT_STAT_SEQ_CMD_AW_ERR_BF_OFF ( 2)
#define ADC_DIG_INT_STAT_SEQ_CMD_AW_ERR_BF_WID ( 2)
#define ADC_DIG_INT_STAT_SEQ_CMD_AW_ERR_BF_MSK (0x0000000C)
#define ADC_DIG_INT_STAT_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates ADC_CONFIG register error interrupt status
#define ADC_DIG_INT_STAT_CFG_ERR_BF_OFF ( 4)
#define ADC_DIG_INT_STAT_CFG_ERR_BF_WID ( 1)
#define ADC_DIG_INT_STAT_CFG_ERR_BF_MSK (0x00000010)
#define ADC_DIG_INT_STAT_CFG_ERR_BF_DEF (0x00000000)

///< Indicates a colliision specified in the SEQ_COLLISION register
#define ADC_DIG_INT_STAT_SEQ_COLLISION_ERR_BF_OFF ( 5)
#define ADC_DIG_INT_STAT_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_STAT_SEQ_COLLISION_ERR_BF_MSK (0x00000020)
#define ADC_DIG_INT_STAT_SEQ_COLLISION_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (Data) error interrupt status
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_DATA_ERR_BF_OFF ( 6)
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_DATA_ERR_BF_WID ( 1)
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_DATA_ERR_BF_MSK (0x00000040)
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error interrupt status
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_AW_ERR_BF_OFF ( 7)
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_AW_ERR_BF_WID ( 1)
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_AW_ERR_BF_MSK (0x00000080)
#define ADC_DIG_INT_STAT_CAL_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates register error interrupt status
#define ADC_DIG_INT_STAT_REGISTER_ERR_BF_OFF ( 8)
#define ADC_DIG_INT_STAT_REGISTER_ERR_BF_WID ( 1)
#define ADC_DIG_INT_STAT_REGISTER_ERR_BF_MSK (0x00000100)
#define ADC_DIG_INT_STAT_REGISTER_ERR_BF_DEF (0x00000000)

///< Indicates a colliision specified in the CAL_SEQ_COLLISION register.
#define ADC_DIG_INT_STAT_CAL_SEQ_COLLISION_ERR_BF_OFF ( 9)
#define ADC_DIG_INT_STAT_CAL_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_STAT_CAL_SEQ_COLLISION_ERR_BF_MSK (0x00000200)
#define ADC_DIG_INT_STAT_CAL_SEQ_COLLISION_ERR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_INT_HIGH_EN register description at address offset 0x3a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/INT_HIGH_EN
  * ADC_DIG Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t SEQ_CMD_DATA_ERROR : 2;
    ///< Indicates Sequencer Command (Data) error high interrupt enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_CMD_AW_ERROR : 2;
    ///< Indicates Sequencer Command (AW) error high interrupt enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_CONFIG_ERROR : 1;
    ///< Indicates ADC_CONFIG register error high interrupt enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ_COLLISION_ERROR : 1;
    ///< Sequencer Colliision error high interrupt enable
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_DATA_ERROR : 1;
    ///< Indicates Sequencer Command (Data) error high interrupt enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_AW_ERROR : 1;
    ///< Indicates Sequencer Command (AW) error high interrupt enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t REGISTER_ERROR : 1;
    ///< Indicates register error high interrupt enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CAL_SEQ_COLLISION_ERROR : 1;
    ///< Calibration SequencerColliision error high interrupt enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_int_high_en_reg_t;

#define ADC_DIG_INT_HIGH_EN_DEFAULT (0x00000000U)
#define ADC_DIG_INT_HIGH_EN_RD_MASK (0x000003ffU)
#define ADC_DIG_INT_HIGH_EN_WR_MASK (0x000003ffU)


///< Indicates Sequencer Command (Data) error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_DATA_ERR_BF_OFF ( 0)
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_DATA_ERR_BF_WID ( 2)
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_DATA_ERR_BF_MSK (0x00000003)
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_AW_ERR_BF_OFF ( 2)
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_AW_ERR_BF_WID ( 2)
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_AW_ERR_BF_MSK (0x0000000C)
#define ADC_DIG_INT_HIGH_EN_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates ADC_CONFIG register error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_CFG_ERR_BF_OFF ( 4)
#define ADC_DIG_INT_HIGH_EN_CFG_ERR_BF_WID ( 1)
#define ADC_DIG_INT_HIGH_EN_CFG_ERR_BF_MSK (0x00000010)
#define ADC_DIG_INT_HIGH_EN_CFG_ERR_BF_DEF (0x00000000)

///< Sequencer Colliision error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_SEQ_COLLISION_ERR_BF_OFF ( 5)
#define ADC_DIG_INT_HIGH_EN_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_HIGH_EN_SEQ_COLLISION_ERR_BF_MSK (0x00000020)
#define ADC_DIG_INT_HIGH_EN_SEQ_COLLISION_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (Data) error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_DATA_ERR_BF_OFF ( 6)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_DATA_ERR_BF_WID ( 1)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_DATA_ERR_BF_MSK (0x00000040)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_AW_ERR_BF_OFF ( 7)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_AW_ERR_BF_WID ( 1)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_AW_ERR_BF_MSK (0x00000080)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates register error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_REGISTER_ERR_BF_OFF ( 8)
#define ADC_DIG_INT_HIGH_EN_REGISTER_ERR_BF_WID ( 1)
#define ADC_DIG_INT_HIGH_EN_REGISTER_ERR_BF_MSK (0x00000100)
#define ADC_DIG_INT_HIGH_EN_REGISTER_ERR_BF_DEF (0x00000000)

///< Calibration SequencerColliision error high interrupt enable
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_COLLISION_ERR_BF_OFF ( 9)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_COLLISION_ERR_BF_MSK (0x00000200)
#define ADC_DIG_INT_HIGH_EN_CAL_SEQ_COLLISION_ERR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_INT_LOW_EN register description at address offset 0x3a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/INT_LOW_EN
  * ADC_DIG Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t SEQ_CMD_DATA_ERROR : 2;
    ///< Indicates Sequencer Command (Data) error low interrupt enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_CMD_AW_ERROR : 2;
    ///< Indicates Sequencer Command (AW) error low interrupt enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_CONFIG_ERROR : 1;
    ///< Indicates ADC_CONFIG register error low interrupt enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ_COLLISION_ERROR : 1;
    ///< Sequencer Colliision error low interrupt enable
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_DATA_ERROR : 1;
    ///< Indicates Sequencer Command (Data) error low interrupt enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_AW_ERROR : 1;
    ///< Indicates Sequencer Command (AW) error low interrupt enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t REGISTER_ERROR : 1;
    ///< Indicates register error low interrupt enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CAL_SEQ_COLLISION_ERROR : 1;
    ///< Calibration SequencerColliision error low interrupt enable
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_int_low_en_reg_t;

#define ADC_DIG_INT_LOW_EN_DEFAULT (0x00000000U)
#define ADC_DIG_INT_LOW_EN_RD_MASK (0x000003ffU)
#define ADC_DIG_INT_LOW_EN_WR_MASK (0x000003ffU)


///< Indicates Sequencer Command (Data) error low interrupt enable
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_DATA_ERR_BF_OFF ( 0)
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_DATA_ERR_BF_WID ( 2)
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_DATA_ERR_BF_MSK (0x00000003)
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error low interrupt enable
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_AW_ERR_BF_OFF ( 2)
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_AW_ERR_BF_WID ( 2)
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_AW_ERR_BF_MSK (0x0000000C)
#define ADC_DIG_INT_LOW_EN_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates ADC_CONFIG register error low interrupt enable
#define ADC_DIG_INT_LOW_EN_CFG_ERR_BF_OFF ( 4)
#define ADC_DIG_INT_LOW_EN_CFG_ERR_BF_WID ( 1)
#define ADC_DIG_INT_LOW_EN_CFG_ERR_BF_MSK (0x00000010)
#define ADC_DIG_INT_LOW_EN_CFG_ERR_BF_DEF (0x00000000)

///< Sequencer Colliision error low interrupt enable
#define ADC_DIG_INT_LOW_EN_SEQ_COLLISION_ERR_BF_OFF ( 5)
#define ADC_DIG_INT_LOW_EN_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_LOW_EN_SEQ_COLLISION_ERR_BF_MSK (0x00000020)
#define ADC_DIG_INT_LOW_EN_SEQ_COLLISION_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (Data) error low interrupt enable
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_DATA_ERR_BF_OFF ( 6)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_DATA_ERR_BF_WID ( 1)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_DATA_ERR_BF_MSK (0x00000040)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error low interrupt enable
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_AW_ERR_BF_OFF ( 7)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_AW_ERR_BF_WID ( 1)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_AW_ERR_BF_MSK (0x00000080)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates register error low interrupt enable
#define ADC_DIG_INT_LOW_EN_REGISTER_ERR_BF_OFF ( 8)
#define ADC_DIG_INT_LOW_EN_REGISTER_ERR_BF_WID ( 1)
#define ADC_DIG_INT_LOW_EN_REGISTER_ERR_BF_MSK (0x00000100)
#define ADC_DIG_INT_LOW_EN_REGISTER_ERR_BF_DEF (0x00000000)

///< Calibration SequencerColliision error low interrupt enable
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_COLLISION_ERR_BF_OFF ( 9)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_COLLISION_ERR_BF_MSK (0x00000200)
#define ADC_DIG_INT_LOW_EN_CAL_SEQ_COLLISION_ERR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_INT_CLEAR register description at address offset 0x3ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/INT_CLEAR
  * ADC_DIG Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t SEQ_CMD_DATA_ERROR : 2;
    ///< Indicates Sequencer Command (Data) error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_CMD_AW_ERROR : 2;
    ///< Indicates Sequencer Command (AW) error interrupt clear
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_CONFIG_ERROR : 1;
    ///< Indicates ADC_CONFIG register error interrupt clear
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ_COLLISION_ERROR : 1;
    ///< Sequencer Colliision error interrupt clear
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_DATA_ERROR : 1;
    ///< Indicates Sequencer Command (Data) error interrupt clear
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_AW_ERROR : 1;
    ///< Indicates Sequencer Command (AW) error interrupt clear
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t REGISTER_ERROR : 1;
    ///< Indicates register error interrupt clear
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CAL_SEQ_COLLISION_ERROR : 1;
    ///< Calibration SequencerColliision error interrupt clear
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_int_clr_reg_t;

#define ADC_DIG_INT_CLR_DEFAULT (0x00000000U)
#define ADC_DIG_INT_CLR_RD_MASK (0x000003ffU)
#define ADC_DIG_INT_CLR_WR_MASK (0x000003ffU)


///< Indicates Sequencer Command (Data) error interrupt clear
#define ADC_DIG_INT_CLR_SEQ_CMD_DATA_ERR_BF_OFF ( 0)
#define ADC_DIG_INT_CLR_SEQ_CMD_DATA_ERR_BF_WID ( 2)
#define ADC_DIG_INT_CLR_SEQ_CMD_DATA_ERR_BF_MSK (0x00000003)
#define ADC_DIG_INT_CLR_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error interrupt clear
#define ADC_DIG_INT_CLR_SEQ_CMD_AW_ERR_BF_OFF ( 2)
#define ADC_DIG_INT_CLR_SEQ_CMD_AW_ERR_BF_WID ( 2)
#define ADC_DIG_INT_CLR_SEQ_CMD_AW_ERR_BF_MSK (0x0000000C)
#define ADC_DIG_INT_CLR_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates ADC_CONFIG register error interrupt clear
#define ADC_DIG_INT_CLR_CFG_ERR_BF_OFF ( 4)
#define ADC_DIG_INT_CLR_CFG_ERR_BF_WID ( 1)
#define ADC_DIG_INT_CLR_CFG_ERR_BF_MSK (0x00000010)
#define ADC_DIG_INT_CLR_CFG_ERR_BF_DEF (0x00000000)

///< Sequencer Colliision error interrupt clear
#define ADC_DIG_INT_CLR_SEQ_COLLISION_ERR_BF_OFF ( 5)
#define ADC_DIG_INT_CLR_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_CLR_SEQ_COLLISION_ERR_BF_MSK (0x00000020)
#define ADC_DIG_INT_CLR_SEQ_COLLISION_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (Data) error interrupt clear
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_DATA_ERR_BF_OFF ( 6)
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_DATA_ERR_BF_WID ( 1)
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_DATA_ERR_BF_MSK (0x00000040)
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error interrupt clear
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_AW_ERR_BF_OFF ( 7)
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_AW_ERR_BF_WID ( 1)
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_AW_ERR_BF_MSK (0x00000080)
#define ADC_DIG_INT_CLR_CAL_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates register error interrupt clear
#define ADC_DIG_INT_CLR_REGISTER_ERR_BF_OFF ( 8)
#define ADC_DIG_INT_CLR_REGISTER_ERR_BF_WID ( 1)
#define ADC_DIG_INT_CLR_REGISTER_ERR_BF_MSK (0x00000100)
#define ADC_DIG_INT_CLR_REGISTER_ERR_BF_DEF (0x00000000)

///< Calibration SequencerColliision error interrupt clear
#define ADC_DIG_INT_CLR_CAL_SEQ_COLLISION_ERR_BF_OFF ( 9)
#define ADC_DIG_INT_CLR_CAL_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_CLR_CAL_SEQ_COLLISION_ERR_BF_MSK (0x00000200)
#define ADC_DIG_INT_CLR_CAL_SEQ_COLLISION_ERR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_INT_FORCE register description at address offset 0x3b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/INT_FORCE
  * ADC_DIG Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t SEQ_CMD_DATA_ERROR : 2;
    ///< Indicates Sequencer Command (Data) error interruptforce
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SEQ_CMD_AW_ERROR : 2;
    ///< Indicates Sequencer Command (AW) error interrupt force
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ADC_CONFIG_ERROR : 1;
    ///< Indicates ADC_CONFIG register error interrupt force
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SEQ_COLLISION_ERROR : 1;
    ///< Sequencer Colliision error interrupt force
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_DATA_ERROR : 1;
    ///< Indicates Sequencer Command (Data) error interrupt force
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CAL_SEQ_CMD_AW_ERROR : 1;
    ///< Indicates Sequencer Command (AW) error interrupt force
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t REGISTER_ERROR : 1;
    ///< Indicates register error interrupt force
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CAL_SEQ_COLLISION_ERROR : 1;
    ///< Calibration SequencerColliision error interrupt force
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_int_force_reg_t;

#define ADC_DIG_INT_FORCE_DEFAULT (0x00000000U)
#define ADC_DIG_INT_FORCE_RD_MASK (0x000003ffU)
#define ADC_DIG_INT_FORCE_WR_MASK (0x000003ffU)


///< Indicates Sequencer Command (Data) error interruptforce
#define ADC_DIG_INT_FORCE_SEQ_CMD_DATA_ERR_BF_OFF ( 0)
#define ADC_DIG_INT_FORCE_SEQ_CMD_DATA_ERR_BF_WID ( 2)
#define ADC_DIG_INT_FORCE_SEQ_CMD_DATA_ERR_BF_MSK (0x00000003)
#define ADC_DIG_INT_FORCE_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error interrupt force
#define ADC_DIG_INT_FORCE_SEQ_CMD_AW_ERR_BF_OFF ( 2)
#define ADC_DIG_INT_FORCE_SEQ_CMD_AW_ERR_BF_WID ( 2)
#define ADC_DIG_INT_FORCE_SEQ_CMD_AW_ERR_BF_MSK (0x0000000C)
#define ADC_DIG_INT_FORCE_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates ADC_CONFIG register error interrupt force
#define ADC_DIG_INT_FORCE_CFG_ERR_BF_OFF ( 4)
#define ADC_DIG_INT_FORCE_CFG_ERR_BF_WID ( 1)
#define ADC_DIG_INT_FORCE_CFG_ERR_BF_MSK (0x00000010)
#define ADC_DIG_INT_FORCE_CFG_ERR_BF_DEF (0x00000000)

///< Sequencer Colliision error interrupt force
#define ADC_DIG_INT_FORCE_SEQ_COLLISION_ERR_BF_OFF ( 5)
#define ADC_DIG_INT_FORCE_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_FORCE_SEQ_COLLISION_ERR_BF_MSK (0x00000020)
#define ADC_DIG_INT_FORCE_SEQ_COLLISION_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (Data) error interrupt force
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_DATA_ERR_BF_OFF ( 6)
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_DATA_ERR_BF_WID ( 1)
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_DATA_ERR_BF_MSK (0x00000040)
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_DATA_ERR_BF_DEF (0x00000000)

///< Indicates Sequencer Command (AW) error interrupt force
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_AW_ERR_BF_OFF ( 7)
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_AW_ERR_BF_WID ( 1)
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_AW_ERR_BF_MSK (0x00000080)
#define ADC_DIG_INT_FORCE_CAL_SEQ_CMD_AW_ERR_BF_DEF (0x00000000)

///< Indicates register error interrupt force
#define ADC_DIG_INT_FORCE_REGISTER_ERR_BF_OFF ( 8)
#define ADC_DIG_INT_FORCE_REGISTER_ERR_BF_WID ( 1)
#define ADC_DIG_INT_FORCE_REGISTER_ERR_BF_MSK (0x00000100)
#define ADC_DIG_INT_FORCE_REGISTER_ERR_BF_DEF (0x00000000)

///< Calibration SequencerColliision error interrupt force
#define ADC_DIG_INT_FORCE_CAL_SEQ_COLLISION_ERR_BF_OFF ( 9)
#define ADC_DIG_INT_FORCE_CAL_SEQ_COLLISION_ERR_BF_WID ( 1)
#define ADC_DIG_INT_FORCE_CAL_SEQ_COLLISION_ERR_BF_MSK (0x00000200)
#define ADC_DIG_INT_FORCE_CAL_SEQ_COLLISION_ERR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CAL_SEQ_MEM0_CAL_SEQ_CMD_DATA[32] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/CAL_SEQ_MEM0/CAL_SEQ_CMD_DATA
  * Sequencer Command Data Register
  */

typedef union {
  struct {
    uint32_t WDATA : 32;
    ///< Analog control register data to use for this command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_cal_seq_mem_cmd_data_reg_t;

#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_DEFAULT (0x00000000U)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_RD_MASK (0xffffffffU)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_WR_MASK (0xffffffffU)


///< Analog control register data to use for this command.
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_WDATA_BF_OFF ( 0)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_WDATA_BF_WID (32)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_WDATA_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_WDATA_BF_DEF (0x00000000)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_ARR_SZ0 (32)
#define ADC_DIG_CAL_SEQ_MEM_CMD_DATA_ARRAY_STRIDE0 (0x0008)


/** @brief ADC_DIG_MAP_REG_CAL_SEQ_MEM0_CAL_SEQ_CMD_AW[32] register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/CAL_SEQ_MEM0/CAL_SEQ_CMD_AW
  * Sequencer Command Address Register
  */

typedef union {
  struct {
    uint32_t WAIT_CNT : 12;
    ///< Number of clock cycles to wait after executing this command before
    ///< moving</br> to the next command.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t WADDR : 5;
    ///< Analog control register offset to use for this command.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cal_seq_mem_cmd_aw_reg_t;

#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_DEFAULT (0x00000000U)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_RD_MASK (0x0001ffffU)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WR_MASK (0x0001ffffU)


///< Number of clock cycles to wait after executing this command before
///< moving</br> to the next command.
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WAIT_CNT_BF_OFF ( 0)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WAIT_CNT_BF_WID (12)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WAIT_CNT_BF_MSK (0x00000FFF)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WAIT_CNT_BF_DEF (0x00000000)

///< Analog control register offset to use for this command.
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WADDR_BF_OFF (12)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WADDR_BF_WID ( 5)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WADDR_BF_MSK (0x0001F000)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_WADDR_BF_DEF (0x00000000)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_ARR_SZ0 (32)
#define ADC_DIG_CAL_SEQ_MEM_CMD_AW_ARRAY_STRIDE0 (0x0008)


/** @brief ADC_DIG_MAP_REG_SCRATCHPAD register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SCRATCHPAD
  * ADC_DIG Scratchpad Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Unused by hardware
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_scratchpad_reg_t;

#define ADC_DIG_SCRATCHPAD_DEFAULT (0x00000000U)
#define ADC_DIG_SCRATCHPAD_RD_MASK (0xffffffffU)
#define ADC_DIG_SCRATCHPAD_WR_MASK (0xffffffffU)


///< Unused by hardware
#define ADC_DIG_SCRATCHPAD_BF_OFF ( 0)
#define ADC_DIG_SCRATCHPAD_BF_WID (32)
#define ADC_DIG_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CONFIG register description at address offset 0x504
  *
  * Register default value:        0x00000040
  * Register full path in IP: adc_dig_map/reg/CONFIG
  * ADC_DIG Configuration Register
  */

typedef union {
  struct {
    uint32_t ANT_RATE : 3;
    ///< Specifies the Antenna Rate for the adc_dig instance. This determines
    ///< the fifo pop sequence.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ALT_SEQ : 1;
    ///< Selects alternate 8/12Gsps (linear) pattern
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DELAY_ADJUST : 3;
    ///< Reduces the depth of the delay compensation pipelines by the specified
    ///< value
    ///< AccessType="RW" BitOffset="4" ResetValue="0x4"
    uint32_t TEST_CTRL : 1;
    ///< Test Control - enable parity inversion
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cfg_reg_t;

#define ADC_DIG_CFG_DEFAULT (0x00000040U)
#define ADC_DIG_CFG_RD_MASK (0x000000ffU)
#define ADC_DIG_CFG_WR_MASK (0x000000ffU)


///< Specifies the Antenna Rate for the adc_dig instance. This determines
///< the fifo pop sequence.
#define ADC_DIG_CFG_ANT_RATE_BF_OFF ( 0)
#define ADC_DIG_CFG_ANT_RATE_BF_WID ( 3)
#define ADC_DIG_CFG_ANT_RATE_BF_MSK (0x00000007)
#define ADC_DIG_CFG_ANT_RATE_BF_DEF (0x00000000)

///< Selects alternate 8/12Gsps (linear) pattern
#define ADC_DIG_CFG_ALT_SEQ_BF_OFF ( 3)
#define ADC_DIG_CFG_ALT_SEQ_BF_WID ( 1)
#define ADC_DIG_CFG_ALT_SEQ_BF_MSK (0x00000008)
#define ADC_DIG_CFG_ALT_SEQ_BF_DEF (0x00000000)

///< Reduces the depth of the delay compensation pipelines by the specified
///< value
#define ADC_DIG_CFG_DELAY_ADJUST_BF_OFF ( 4)
#define ADC_DIG_CFG_DELAY_ADJUST_BF_WID ( 3)
#define ADC_DIG_CFG_DELAY_ADJUST_BF_MSK (0x00000070)
#define ADC_DIG_CFG_DELAY_ADJUST_BF_DEF (0x00000040)

///< Test Control - enable parity inversion
#define ADC_DIG_CFG_TEST_CTRL_BF_OFF ( 7)
#define ADC_DIG_CFG_TEST_CTRL_BF_WID ( 1)
#define ADC_DIG_CFG_TEST_CTRL_BF_MSK (0x00000080)
#define ADC_DIG_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CAL_SEQ_ITER register description at address offset 0x508
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/CAL_SEQ_ITER
  * Sequencer iteration control register.
  */

typedef union {
  struct {
    uint32_t ITER : 14;
    ///< Sequencer number of iterations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cal_seq_iter_reg_t;

#define ADC_DIG_CAL_SEQ_ITER_DEFAULT (0x00000000U)
#define ADC_DIG_CAL_SEQ_ITER_RD_MASK (0x00003fffU)
#define ADC_DIG_CAL_SEQ_ITER_WR_MASK (0x00003fffU)


///< Sequencer number of iterations.
#define ADC_DIG_CAL_SEQ_ITER_BF_OFF ( 0)
#define ADC_DIG_CAL_SEQ_ITER_BF_WID (14)
#define ADC_DIG_CAL_SEQ_ITER_BF_MSK (0x00003FFF)
#define ADC_DIG_CAL_SEQ_ITER_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OSS_CONFIG register description at address offset 0x50c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/OSS_CONFIG
  * ADC_DIG Observation Slice Scheduler Configuration Register
  */

typedef union {
  struct {
    uint32_t MASK : 6;
    ///< Accumulator update mask.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 1;
    ///< RXOS Mode
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RATE : 2;
    ///< OSS Rate - loop calculations are based on the programmed rate
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t PHASE_REUSE : 16;
    ///< Phase Reuse.  Number of times to reuse the new scheduler phase before
    ///< advancing</br> the LFSR to the next value.  A value of 0 means each
    ///< phase value will be used once.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t SUPPRESS_COUNT : 4;
    ///< Suppress Count.  Number of observation samples to suppress when the
    ///< phase value updates</br> as a result of the PHASE_REUSE setting.
    ///< A value of 0 means no samples will be suppressed.</br> Sample suppression
    ///< is achieved by zeroing the phase vector seen by the Adaptation Engine</br>
    ///< module.
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t SUPPRESS : 1;
    ///< Suppress.  A value of 1 suppresses all observation samples. The Rx
    ///< Observation Slice</br> continues to be triggered according to the
    ///< other settings in this register, but the</br> generated samples are
    ///< ignored by the Adaptation Engine.</br> Sample suppression is achieved
    ///< by zeroing the phase vector seen by the Adaptation Engine</br> module.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_oss_cfg_reg_t;

#define ADC_DIG_OSS_CFG_DEFAULT (0x00000000U)
#define ADC_DIG_OSS_CFG_RD_MASK (0x3fffffffU)
#define ADC_DIG_OSS_CFG_WR_MASK (0x3fffffffU)


///< Accumulator update mask.
#define ADC_DIG_OSS_CFG_MASK_BF_OFF ( 0)
#define ADC_DIG_OSS_CFG_MASK_BF_WID ( 6)
#define ADC_DIG_OSS_CFG_MASK_BF_MSK (0x0000003F)
#define ADC_DIG_OSS_CFG_MASK_BF_DEF (0x00000000)

///< RXOS Mode
#define ADC_DIG_OSS_CFG_MODE_BF_OFF ( 6)
#define ADC_DIG_OSS_CFG_MODE_BF_WID ( 1)
#define ADC_DIG_OSS_CFG_MODE_BF_MSK (0x00000040)
#define ADC_DIG_OSS_CFG_MODE_BF_DEF (0x00000000)

///< OSS Rate - loop calculations are based on the programmed rate
#define ADC_DIG_OSS_CFG_RATE_BF_OFF ( 7)
#define ADC_DIG_OSS_CFG_RATE_BF_WID ( 2)
#define ADC_DIG_OSS_CFG_RATE_BF_MSK (0x00000180)
#define ADC_DIG_OSS_CFG_RATE_BF_DEF (0x00000000)

///< Phase Reuse.  Number of times to reuse the new scheduler phase before
///< advancing</br> the LFSR to the next value.  A value of 0 means each
///< phase value will be used once.
#define ADC_DIG_OSS_CFG_PHASE_REUSE_BF_OFF ( 9)
#define ADC_DIG_OSS_CFG_PHASE_REUSE_BF_WID (16)
#define ADC_DIG_OSS_CFG_PHASE_REUSE_BF_MSK (0x01FFFE00)
#define ADC_DIG_OSS_CFG_PHASE_REUSE_BF_DEF (0x00000000)

///< Suppress Count.  Number of observation samples to suppress when the
///< phase value updates</br> as a result of the PHASE_REUSE setting.
///< A value of 0 means no samples will be suppressed.</br> Sample suppression
///< is achieved by zeroing the phase vector seen by the Adaptation Engine</br>
///< module.
#define ADC_DIG_OSS_CFG_SUPPRESS_CNT_BF_OFF (25)
#define ADC_DIG_OSS_CFG_SUPPRESS_CNT_BF_WID ( 4)
#define ADC_DIG_OSS_CFG_SUPPRESS_CNT_BF_MSK (0x1E000000)
#define ADC_DIG_OSS_CFG_SUPPRESS_CNT_BF_DEF (0x00000000)

///< Suppress.  A value of 1 suppresses all observation samples. The Rx
///< Observation Slice</br> continues to be triggered according to the
///< other settings in this register, but the</br> generated samples are
///< ignored by the Adaptation Engine.</br> Sample suppression is achieved
///< by zeroing the phase vector seen by the Adaptation Engine</br> module.
#define ADC_DIG_OSS_CFG_SUPPRESS_BF_OFF (29)
#define ADC_DIG_OSS_CFG_SUPPRESS_BF_WID ( 1)
#define ADC_DIG_OSS_CFG_SUPPRESS_BF_MSK (0x20000000)
#define ADC_DIG_OSS_CFG_SUPPRESS_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OSS_CONFIG2 register description at address offset 0x510
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/OSS_CONFIG2
  * ADC_DIG Observation Slice Scheduler Configuration 2 Register
  */

typedef union {
  struct {
    uint32_t SAMPLE_DELAY : 4;
    ///< Number of samples to delay the OSS output going to the analog block.
    ///< If non-zero, this results in a rotation of the vector, partially into
    ///< the next cycle.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CONSTANT_INCR : 6;
    ///< When Enabled, this value gets used as the increment, as opposed to
    ///< the LFSR
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CONSTANT_INCR_ENABLE : 1;
    ///< When active, CONSTANT_INCR used as the increment, as opposed to the
    ///< LFSR
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t ACCUM_INIT : 6;
    ///< At the beginning of enablement, the OSS loads this value into the
    ///< Accumulator. The current value of the accumulator can be read from
    ///< the OSS_STATUS register
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t REUSE_INCR : 6;
    ///< This value gets used as the increment during the  phase reuse  loop
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_oss_cfg2_reg_t;

#define ADC_DIG_OSS_CFG2_DEFAULT (0x00000000U)
#define ADC_DIG_OSS_CFG2_RD_MASK (0x007fffffU)
#define ADC_DIG_OSS_CFG2_WR_MASK (0x007fffffU)


///< Number of samples to delay the OSS output going to the analog block.
///< If non-zero, this results in a rotation of the vector, partially into
///< the next cycle.
#define ADC_DIG_OSS_CFG2_SAMPLE_DELAY_BF_OFF ( 0)
#define ADC_DIG_OSS_CFG2_SAMPLE_DELAY_BF_WID ( 4)
#define ADC_DIG_OSS_CFG2_SAMPLE_DELAY_BF_MSK (0x0000000F)
#define ADC_DIG_OSS_CFG2_SAMPLE_DELAY_BF_DEF (0x00000000)

///< When Enabled, this value gets used as the increment, as opposed to
///< the LFSR
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_BF_OFF ( 4)
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_BF_WID ( 6)
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_BF_MSK (0x000003F0)
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_BF_DEF (0x00000000)

///< When active, CONSTANT_INCR used as the increment, as opposed to the
///< LFSR
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_EN_BF_OFF (10)
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_EN_BF_WID ( 1)
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_EN_BF_MSK (0x00000400)
#define ADC_DIG_OSS_CFG2_CONSTANT_INCR_EN_BF_DEF (0x00000000)

///< At the beginning of enablement, the OSS loads this value into the
///< Accumulator. The current value of the accumulator can be read from
///< the OSS_STATUS register
#define ADC_DIG_OSS_CFG2_ACCUM_INIT_BF_OFF (11)
#define ADC_DIG_OSS_CFG2_ACCUM_INIT_BF_WID ( 6)
#define ADC_DIG_OSS_CFG2_ACCUM_INIT_BF_MSK (0x0001F800)
#define ADC_DIG_OSS_CFG2_ACCUM_INIT_BF_DEF (0x00000000)

///< This value gets used as the increment during the  phase reuse  loop
#define ADC_DIG_OSS_CFG2_REUSE_INCR_BF_OFF (17)
#define ADC_DIG_OSS_CFG2_REUSE_INCR_BF_WID ( 6)
#define ADC_DIG_OSS_CFG2_REUSE_INCR_BF_MSK (0x007E0000)
#define ADC_DIG_OSS_CFG2_REUSE_INCR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OSS_LFSR_INIT register description at address offset 0x514
  *
  * Register default value:        0xFFFFFFFF
  * Register full path in IP: adc_dig_map/reg/OSS_LFSR_INIT
  * ADC_DIG Obs. Slice. Scheduler LFSR Initial Value
  */

typedef union {
  struct {
    uint32_t INIT : 32;
    ///< LFSR initial value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFFFFFF"
  } ;
  uint32_t value;
} adc_dig_oss_lfsr_init_reg_t;

#define ADC_DIG_OSS_LFSR_INIT_DEFAULT (0xffffffffU)
#define ADC_DIG_OSS_LFSR_INIT_RD_MASK (0xffffffffU)
#define ADC_DIG_OSS_LFSR_INIT_WR_MASK (0xffffffffU)


///< LFSR initial value.
#define ADC_DIG_OSS_LFSR_INIT_BF_OFF ( 0)
#define ADC_DIG_OSS_LFSR_INIT_BF_WID (32)
#define ADC_DIG_OSS_LFSR_INIT_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_OSS_LFSR_INIT_BF_DEF (0xFFFFFFFF)


/** @brief ADC_DIG_MAP_REG_SCHED_CTRL_SHDW register description at address offset 0x518
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SCHED_CTRL_SHDW
  * ADC_DIG Scheduler Control Shadow Register
  */

typedef union {
  struct {
    uint32_t ODD_EN : 1;
    ///< Enable the dequeuing of the odd FIFO slices.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EVEN_EN : 1;
    ///< Enable the dequeuing of the even FIFO slices.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t SWAP : 1;
    ///< This bit is the swap bit that gets fed to the latency FIFO, and eventually
    ///< to the ASC.
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_sched_ctrl_shdw_reg_t;

#define ADC_DIG_SCHED_CTRL_SHDW_DEFAULT (0x00000000U)
#define ADC_DIG_SCHED_CTRL_SHDW_RD_MASK (0x00000007U)
#define ADC_DIG_SCHED_CTRL_SHDW_WR_MASK (0x00000007U)


///< Enable the dequeuing of the odd FIFO slices.
#define ADC_DIG_SCHED_CTRL_SHDW_ODD_EN_BF_OFF ( 0)
#define ADC_DIG_SCHED_CTRL_SHDW_ODD_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_CTRL_SHDW_ODD_EN_BF_MSK (0x00000001)
#define ADC_DIG_SCHED_CTRL_SHDW_ODD_EN_BF_DEF (0x00000000)

///< Enable the dequeuing of the even FIFO slices.
#define ADC_DIG_SCHED_CTRL_SHDW_EVEN_EN_BF_OFF ( 1)
#define ADC_DIG_SCHED_CTRL_SHDW_EVEN_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_CTRL_SHDW_EVEN_EN_BF_MSK (0x00000002)
#define ADC_DIG_SCHED_CTRL_SHDW_EVEN_EN_BF_DEF (0x00000000)

///< This bit is the swap bit that gets fed to the latency FIFO, and eventually
///< to the ASC.
#define ADC_DIG_SCHED_CTRL_SHDW_SWAP_BF_OFF ( 2)
#define ADC_DIG_SCHED_CTRL_SHDW_SWAP_BF_WID ( 1)
#define ADC_DIG_SCHED_CTRL_SHDW_SWAP_BF_MSK (0x00000004)
#define ADC_DIG_SCHED_CTRL_SHDW_SWAP_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_DSA_SHDW register description at address offset 0x51c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/DSA_SHDW
  * ADC_DIG DSA Shadow Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 6;
    ///< Writing a 1 to this bit enables the ADC_DIG Observation Slice Scheduler,Clearing
    ///< this bit will stop the scheduler. Under normal operation, the Shadow
    ///< copy of this register gets transferred here by the BFN trigger.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_dsa_shdw_reg_t;

#define ADC_DIG_DSA_SHDW_DEFAULT (0x00000000U)
#define ADC_DIG_DSA_SHDW_RD_MASK (0x0000003fU)
#define ADC_DIG_DSA_SHDW_WR_MASK (0x0000003fU)


///< Writing a 1 to this bit enables the ADC_DIG Observation Slice Scheduler,Clearing
///< this bit will stop the scheduler. Under normal operation, the Shadow
///< copy of this register gets transferred here by the BFN trigger.
#define ADC_DIG_DSA_SHDW_EN_BF_OFF ( 0)
#define ADC_DIG_DSA_SHDW_EN_BF_WID ( 6)
#define ADC_DIG_DSA_SHDW_EN_BF_MSK (0x0000003F)
#define ADC_DIG_DSA_SHDW_EN_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OSS_CTRL_SHDW register description at address offset 0x520
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/OSS_CTRL_SHDW
  * ADC_DIG Observation Slice Scheduler Control Shadow Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Writing a 1 to this bit enables the ADC_DIG Observation Slice Scheduler,Clearing
    ///< this bit will stop the scheduler. Under normal operation, the Shadow
    ///< copy of this register gets transferred here by the BFN trigger.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_CLR : 1;
    ///< This register allows for clearing of the Observation Slice FIFO. Setting
    ///< this bit will force the FIFO to immediately discard all data and remain
    ///< empty until the bit is cleared.  This bit needs to be  cleared explicitly
    ///< to allow the FIFO to be used.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_oss_ctrl_shdw_reg_t;

#define ADC_DIG_OSS_CTRL_SHDW_DEFAULT (0x00000000U)
#define ADC_DIG_OSS_CTRL_SHDW_RD_MASK (0x00000003U)
#define ADC_DIG_OSS_CTRL_SHDW_WR_MASK (0x00000003U)


///< Writing a 1 to this bit enables the ADC_DIG Observation Slice Scheduler,Clearing
///< this bit will stop the scheduler. Under normal operation, the Shadow
///< copy of this register gets transferred here by the BFN trigger.
#define ADC_DIG_OSS_CTRL_SHDW_EN_BF_OFF ( 0)
#define ADC_DIG_OSS_CTRL_SHDW_EN_BF_WID ( 1)
#define ADC_DIG_OSS_CTRL_SHDW_EN_BF_MSK (0x00000001)
#define ADC_DIG_OSS_CTRL_SHDW_EN_BF_DEF (0x00000000)

///< This register allows for clearing of the Observation Slice FIFO. Setting
///< this bit will force the FIFO to immediately discard all data and remain
///< empty until the bit is cleared.  This bit needs to be  cleared explicitly
///< to allow the FIFO to be used.
#define ADC_DIG_OSS_CTRL_SHDW_FIFO_CLR_BF_OFF ( 1)
#define ADC_DIG_OSS_CTRL_SHDW_FIFO_CLR_BF_WID ( 1)
#define ADC_DIG_OSS_CTRL_SHDW_FIFO_CLR_BF_MSK (0x00000002)
#define ADC_DIG_OSS_CTRL_SHDW_FIFO_CLR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_SCFG0 register description at address offset 0x524
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_SCFG0
  * RX SAR
  */

typedef union {
  struct {
    uint32_t  : 13;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t D_PD_COMP_TRIM_CHP_I : 1;
    ///< power down for the comparator offset trim charge pump
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t D_SKIP_AZ_PHASE_I : 1;
    ///< Skip auto-zero looop cycle
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t D_SEL_HOSENTRAEGER_I : 2;
    ///< Skip conversion cycles: <00> keep all, <01> skip 1 cycle , <10> skip
    ///< 2 cycles, <11> skip 3 cycles
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t D_RST_N_RESULT_I : 1;
    ///< Reset for the SAR result block
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t D_SEL_DITHER_OUTPUT_I : 2;
    ///< Sel output mode for the dither bits, 00 dither, 01 LFSR sequence,
    ///< 10 slice ID, 11 SAR done
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t D_SEL_DATA_OUTPUT_I : 2;
    ///< Sel output mode for the data bits, 00 data, 01 LFSR sequence, 10 comparator
    ///< trim bits, 11 calibration mode
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t D_SEL_DATA_OUTPUT_COMP_I : 2;
    ///< Select which comparator trim bits that are sent to the data output
    ///< (d_sel_data_output_i)
    ///< AccessType="RW/V" BitOffset="22" ResetValue="0x0"
    uint32_t D_PD_REFBUF_I : 2;
    ///< Power down for the reference buffers in the slices, 00 enabled, 01
    ///< lower slices in PD, 10 upper slices in PD, 11 all slices in PD
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t D_SEL_FORCE : 2;
    ///< Select delay of the comparator force function
    ///< AccessType="RW/V" BitOffset="26" ResetValue="0x0"
    uint32_t D_SLOW_CONVERSION_I : 2;
    ///< Make more comparisons per bit, 00 default, 10 slow conversoin, 11
    ///< even slower conversion
    ///< AccessType="RW/V" BitOffset="28" ResetValue="0x0"
    uint32_t RESERVED : 2;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_scfg0_reg_t;

#define ADC_DIG_SCFG0_DEFAULT (0x00000000U)
#define ADC_DIG_SCFG0_RD_MASK (0xffffffffU)
#define ADC_DIG_SCFG0_WR_MASK (0xffffffffU)


///< RESERVED
#define ADC_DIG_SCFG0_RESERVED_0_BF_OFF ( 0)
#define ADC_DIG_SCFG0_RESERVED_0_BF_WID (13)
#define ADC_DIG_SCFG0_RESERVED_0_BF_MSK (0x00001FFF)
#define ADC_DIG_SCFG0_RESERVED_0_BF_DEF (0x00000000)

///< power down for the comparator offset trim charge pump
#define ADC_DIG_SCFG0_D_PD_COMP_TRIM_CHP_I_BF_OFF (13)
#define ADC_DIG_SCFG0_D_PD_COMP_TRIM_CHP_I_BF_WID ( 1)
#define ADC_DIG_SCFG0_D_PD_COMP_TRIM_CHP_I_BF_MSK (0x00002000)
#define ADC_DIG_SCFG0_D_PD_COMP_TRIM_CHP_I_BF_DEF (0x00000000)

///< Skip auto-zero looop cycle
#define ADC_DIG_SCFG0_D_SKIP_AZ_PHASE_I_BF_OFF (14)
#define ADC_DIG_SCFG0_D_SKIP_AZ_PHASE_I_BF_WID ( 1)
#define ADC_DIG_SCFG0_D_SKIP_AZ_PHASE_I_BF_MSK (0x00004000)
#define ADC_DIG_SCFG0_D_SKIP_AZ_PHASE_I_BF_DEF (0x00000000)

///< Skip conversion cycles: <00> keep all, <01> skip 1 cycle , <10> skip
///< 2 cycles, <11> skip 3 cycles
#define ADC_DIG_SCFG0_D_SEL_HOSENTRAEGER_I_BF_OFF (15)
#define ADC_DIG_SCFG0_D_SEL_HOSENTRAEGER_I_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_SEL_HOSENTRAEGER_I_BF_MSK (0x00018000)
#define ADC_DIG_SCFG0_D_SEL_HOSENTRAEGER_I_BF_DEF (0x00000000)

///< Reset for the SAR result block
#define ADC_DIG_SCFG0_D_RST_N_RSLT_I_BF_OFF (17)
#define ADC_DIG_SCFG0_D_RST_N_RSLT_I_BF_WID ( 1)
#define ADC_DIG_SCFG0_D_RST_N_RSLT_I_BF_MSK (0x00020000)
#define ADC_DIG_SCFG0_D_RST_N_RSLT_I_BF_DEF (0x00000000)

///< Sel output mode for the dither bits, 00 dither, 01 LFSR sequence,
///< 10 slice ID, 11 SAR done
#define ADC_DIG_SCFG0_D_SEL_DITHER_OUTPUT_I_BF_OFF (18)
#define ADC_DIG_SCFG0_D_SEL_DITHER_OUTPUT_I_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_SEL_DITHER_OUTPUT_I_BF_MSK (0x000C0000)
#define ADC_DIG_SCFG0_D_SEL_DITHER_OUTPUT_I_BF_DEF (0x00000000)

///< Sel output mode for the data bits, 00 data, 01 LFSR sequence, 10 comparator
///< trim bits, 11 calibration mode
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_I_BF_OFF (20)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_I_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_I_BF_MSK (0x00300000)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_I_BF_DEF (0x00000000)

///< Select which comparator trim bits that are sent to the data output
///< (d_sel_data_output_i)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_COMP_I_BF_OFF (22)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_COMP_I_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_COMP_I_BF_MSK (0x00C00000)
#define ADC_DIG_SCFG0_D_SEL_DATA_OUTPUT_COMP_I_BF_DEF (0x00000000)

///< Power down for the reference buffers in the slices, 00 enabled, 01
///< lower slices in PD, 10 upper slices in PD, 11 all slices in PD
#define ADC_DIG_SCFG0_D_PD_REFBUF_I_BF_OFF (24)
#define ADC_DIG_SCFG0_D_PD_REFBUF_I_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_PD_REFBUF_I_BF_MSK (0x03000000)
#define ADC_DIG_SCFG0_D_PD_REFBUF_I_BF_DEF (0x00000000)

///< Select delay of the comparator force function
#define ADC_DIG_SCFG0_D_SEL_FORCE_BF_OFF (26)
#define ADC_DIG_SCFG0_D_SEL_FORCE_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_SEL_FORCE_BF_MSK (0x0C000000)
#define ADC_DIG_SCFG0_D_SEL_FORCE_BF_DEF (0x00000000)

///< Make more comparisons per bit, 00 default, 10 slow conversoin, 11
///< even slower conversion
#define ADC_DIG_SCFG0_D_SLOW_CONVER_I_BF_OFF (28)
#define ADC_DIG_SCFG0_D_SLOW_CONVER_I_BF_WID ( 2)
#define ADC_DIG_SCFG0_D_SLOW_CONVER_I_BF_MSK (0x30000000)
#define ADC_DIG_SCFG0_D_SLOW_CONVER_I_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_SCFG0_RESERVED_BF_OFF (30)
#define ADC_DIG_SCFG0_RESERVED_BF_WID ( 2)
#define ADC_DIG_SCFG0_RESERVED_BF_MSK (0xC0000000)
#define ADC_DIG_SCFG0_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_SCFG1 register description at address offset 0x528
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_SCFG1
  * RX OBS
  */

typedef union {
  struct {
    uint32_t D_RST_N_AZLOOP_I : 1;
    ///< Reset the auto zero loops
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t D_PD_COMP_TRIM_LOOP1_I : 2;
    ///< Power down loops for comp low, 00 enabled, 01 fine disabled, 10 coarse
    ///< disabled, 11 both disabled
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t D_PD_COMP_TRIM_LOOP2_I : 2;
    ///< Power down loops for comp middle, 00 enabled, 01 fine disabled, 10
    ///< coarse disabled, 11 both disabled
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t D_PD_COMP_TRIM_LOOP3_I : 2;
    ///< Power down loops for comp high, 00 enabled, 01 fine disabled, 10 coarse
    ///< disabled, 11 both disabled
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t D_RUN_SEARCH_MODE_I : 1;
    ///< Activate the search mode to find the best coarse setting
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t D_SEL_AZ_LOOP_MODE_I : 2;
    ///< Select conversion mode, 00 AZ to 0 on AZ bit, 01 AZ to 0 on LSB, 10
    ///< track middle comp AZ bit, 11 track middle comp LSB bit
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t D_WR_COMP_TRIM_I : 2;
    ///< Write trim values, 00 don't write, 01 write low, 10, write middle,
    ///< 11 write high
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t D_WR_COMP_TRIM_VALUE_I : 18;
    ///< Trim value to write to the selected comparator (d_wr_comp_trim_i)
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t D_EN_RD_COMP_TRIM_VALUE_I : 2;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_scfg1_reg_t;

#define ADC_DIG_SCFG1_DEFAULT (0x00000000U)
#define ADC_DIG_SCFG1_RD_MASK (0xffffffffU)
#define ADC_DIG_SCFG1_WR_MASK (0xffffffffU)


///< Reset the auto zero loops
#define ADC_DIG_SCFG1_D_RST_N_AZLOOP_I_BF_OFF ( 0)
#define ADC_DIG_SCFG1_D_RST_N_AZLOOP_I_BF_WID ( 1)
#define ADC_DIG_SCFG1_D_RST_N_AZLOOP_I_BF_MSK (0x00000001)
#define ADC_DIG_SCFG1_D_RST_N_AZLOOP_I_BF_DEF (0x00000000)

///< Power down loops for comp low, 00 enabled, 01 fine disabled, 10 coarse
///< disabled, 11 both disabled
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP1_I_BF_OFF ( 1)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP1_I_BF_WID ( 2)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP1_I_BF_MSK (0x00000006)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP1_I_BF_DEF (0x00000000)

///< Power down loops for comp middle, 00 enabled, 01 fine disabled, 10
///< coarse disabled, 11 both disabled
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP2_I_BF_OFF ( 3)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP2_I_BF_WID ( 2)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP2_I_BF_MSK (0x00000018)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP2_I_BF_DEF (0x00000000)

///< Power down loops for comp high, 00 enabled, 01 fine disabled, 10 coarse
///< disabled, 11 both disabled
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP3_I_BF_OFF ( 5)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP3_I_BF_WID ( 2)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP3_I_BF_MSK (0x00000060)
#define ADC_DIG_SCFG1_D_PD_COMP_TRIM_LOOP3_I_BF_DEF (0x00000000)

///< Activate the search mode to find the best coarse setting
#define ADC_DIG_SCFG1_D_RUN_SEARCH_MODE_I_BF_OFF ( 7)
#define ADC_DIG_SCFG1_D_RUN_SEARCH_MODE_I_BF_WID ( 1)
#define ADC_DIG_SCFG1_D_RUN_SEARCH_MODE_I_BF_MSK (0x00000080)
#define ADC_DIG_SCFG1_D_RUN_SEARCH_MODE_I_BF_DEF (0x00000000)

///< Select conversion mode, 00 AZ to 0 on AZ bit, 01 AZ to 0 on LSB, 10
///< track middle comp AZ bit, 11 track middle comp LSB bit
#define ADC_DIG_SCFG1_D_SEL_AZ_LOOP_MODE_I_BF_OFF ( 8)
#define ADC_DIG_SCFG1_D_SEL_AZ_LOOP_MODE_I_BF_WID ( 2)
#define ADC_DIG_SCFG1_D_SEL_AZ_LOOP_MODE_I_BF_MSK (0x00000300)
#define ADC_DIG_SCFG1_D_SEL_AZ_LOOP_MODE_I_BF_DEF (0x00000000)

///< Write trim values, 00 don't write, 01 write low, 10, write middle,
///< 11 write high
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_I_BF_OFF (10)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_I_BF_WID ( 2)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_I_BF_MSK (0x00000C00)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_I_BF_DEF (0x00000000)

///< Trim value to write to the selected comparator (d_wr_comp_trim_i)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_VAL_I_BF_OFF (12)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_VAL_I_BF_WID (18)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_VAL_I_BF_MSK (0x3FFFF000)
#define ADC_DIG_SCFG1_D_WR_COMP_TRIM_VAL_I_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_SCFG1_D_EN_RD_COMP_TRIM_VAL_I_BF_OFF (30)
#define ADC_DIG_SCFG1_D_EN_RD_COMP_TRIM_VAL_I_BF_WID ( 2)
#define ADC_DIG_SCFG1_D_EN_RD_COMP_TRIM_VAL_I_BF_MSK (0xC0000000)
#define ADC_DIG_SCFG1_D_EN_RD_COMP_TRIM_VAL_I_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_SCFG2 register description at address offset 0x52c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_SCFG2
  * RX SAR
  */

typedef union {
  struct {
    uint32_t D_RST_N_CORE_I : 1;
    ///< Reset bit for the SAR DAC core
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t D_SEL_5X_2B_I : 1;
    ///< Select conversion mode, 0 4x 2 bits and 3x single bit, 1 5x 2 bits
    ///< and 2x single bit
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t D_SEL_SAR_DONE_I : 2;
    ///< Select the SAR done sent to the output, 0X None, 10 short delay, 11
    ///< long delay
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t D_VDC_SW_I : 2;
    ///< Select DC source for slow sampling
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t D_SHIFT_OFFSET_LSB2_I : 2;
    ///< Fix LSB2 in the DAC
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t D_SHIFT_OFFSET_LSB1_I : 2;
    ///< Fix LSB1 in the DAC
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t D_SLOW_SAMPLE_I : 1;
    ///< Make a slow sample (sample the DC Source voltage)
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t D_SAMPLER_1X_I : 1;
    ///< Use only one clock cycle to sample the input signal (2 clock cycles
    ///< is default)
    ///< AccessType="RW/V" BitOffset="11" ResetValue="0x0"
    uint32_t D_RST_N_DITHER_I : 1;
    ///< Reset bit for the dither
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t D_RST_N_SAMPLER_I : 1;
    ///< Reset bit for the sampler
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t D_EN_SAMPLER_I : 1;
    ///< Enable bit for the sampler
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t D_DITHER_FIX_VALUE_I : 5;
    ///< The value for the bits set to 'fix' (d_dither_fix_i)
    ///< AccessType="RW/V" BitOffset="15" ResetValue="0x0"
    uint32_t D_DITHER_FIX_I : 5;
    ///< Set the dither bits 4:0 to a fixed value
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t D_DITHER_PD_I : 5;
    ///< Set the individual dither bits to common mode
    ///< AccessType="RW/V" BitOffset="25" ResetValue="0x0"
    uint32_t RESERVED : 2;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_scfg2_reg_t;

#define ADC_DIG_SCFG2_DEFAULT (0x00000000U)
#define ADC_DIG_SCFG2_RD_MASK (0xffffffffU)
#define ADC_DIG_SCFG2_WR_MASK (0xffffffffU)


///< Reset bit for the SAR DAC core
#define ADC_DIG_SCFG2_D_RST_N_CORE_I_BF_OFF ( 0)
#define ADC_DIG_SCFG2_D_RST_N_CORE_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_RST_N_CORE_I_BF_MSK (0x00000001)
#define ADC_DIG_SCFG2_D_RST_N_CORE_I_BF_DEF (0x00000000)

///< Select conversion mode, 0 4x 2 bits and 3x single bit, 1 5x 2 bits
///< and 2x single bit
#define ADC_DIG_SCFG2_D_SEL_5X_2B_I_BF_OFF ( 1)
#define ADC_DIG_SCFG2_D_SEL_5X_2B_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_SEL_5X_2B_I_BF_MSK (0x00000002)
#define ADC_DIG_SCFG2_D_SEL_5X_2B_I_BF_DEF (0x00000000)

///< Select the SAR done sent to the output, 0X None, 10 short delay, 11
///< long delay
#define ADC_DIG_SCFG2_D_SEL_SAR_DONE_I_BF_OFF ( 2)
#define ADC_DIG_SCFG2_D_SEL_SAR_DONE_I_BF_WID ( 2)
#define ADC_DIG_SCFG2_D_SEL_SAR_DONE_I_BF_MSK (0x0000000C)
#define ADC_DIG_SCFG2_D_SEL_SAR_DONE_I_BF_DEF (0x00000000)

///< Select DC source for slow sampling
#define ADC_DIG_SCFG2_D_VDC_SW_I_BF_OFF ( 4)
#define ADC_DIG_SCFG2_D_VDC_SW_I_BF_WID ( 2)
#define ADC_DIG_SCFG2_D_VDC_SW_I_BF_MSK (0x00000030)
#define ADC_DIG_SCFG2_D_VDC_SW_I_BF_DEF (0x00000000)

///< Fix LSB2 in the DAC
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB2_I_BF_OFF ( 6)
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB2_I_BF_WID ( 2)
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB2_I_BF_MSK (0x000000C0)
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB2_I_BF_DEF (0x00000000)

///< Fix LSB1 in the DAC
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB1_I_BF_OFF ( 8)
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB1_I_BF_WID ( 2)
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB1_I_BF_MSK (0x00000300)
#define ADC_DIG_SCFG2_D_SHIFT_OFFSET_LSB1_I_BF_DEF (0x00000000)

///< Make a slow sample (sample the DC Source voltage)
#define ADC_DIG_SCFG2_D_SLOW_SAMPLE_I_BF_OFF (10)
#define ADC_DIG_SCFG2_D_SLOW_SAMPLE_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_SLOW_SAMPLE_I_BF_MSK (0x00000400)
#define ADC_DIG_SCFG2_D_SLOW_SAMPLE_I_BF_DEF (0x00000000)

///< Use only one clock cycle to sample the input signal (2 clock cycles
///< is default)
#define ADC_DIG_SCFG2_D_SAMPLER_1X_I_BF_OFF (11)
#define ADC_DIG_SCFG2_D_SAMPLER_1X_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_SAMPLER_1X_I_BF_MSK (0x00000800)
#define ADC_DIG_SCFG2_D_SAMPLER_1X_I_BF_DEF (0x00000000)

///< Reset bit for the dither
#define ADC_DIG_SCFG2_D_RST_N_DITHER_I_BF_OFF (12)
#define ADC_DIG_SCFG2_D_RST_N_DITHER_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_RST_N_DITHER_I_BF_MSK (0x00001000)
#define ADC_DIG_SCFG2_D_RST_N_DITHER_I_BF_DEF (0x00000000)

///< Reset bit for the sampler
#define ADC_DIG_SCFG2_D_RST_N_SAMPLER_I_BF_OFF (13)
#define ADC_DIG_SCFG2_D_RST_N_SAMPLER_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_RST_N_SAMPLER_I_BF_MSK (0x00002000)
#define ADC_DIG_SCFG2_D_RST_N_SAMPLER_I_BF_DEF (0x00000000)

///< Enable bit for the sampler
#define ADC_DIG_SCFG2_D_EN_SAMPLER_I_BF_OFF (14)
#define ADC_DIG_SCFG2_D_EN_SAMPLER_I_BF_WID ( 1)
#define ADC_DIG_SCFG2_D_EN_SAMPLER_I_BF_MSK (0x00004000)
#define ADC_DIG_SCFG2_D_EN_SAMPLER_I_BF_DEF (0x00000000)

///< The value for the bits set to 'fix' (d_dither_fix_i)
#define ADC_DIG_SCFG2_D_DITHER_FIX_VAL_I_BF_OFF (15)
#define ADC_DIG_SCFG2_D_DITHER_FIX_VAL_I_BF_WID ( 5)
#define ADC_DIG_SCFG2_D_DITHER_FIX_VAL_I_BF_MSK (0x000F8000)
#define ADC_DIG_SCFG2_D_DITHER_FIX_VAL_I_BF_DEF (0x00000000)

///< Set the dither bits 4:0 to a fixed value
#define ADC_DIG_SCFG2_D_DITHER_FIX_I_BF_OFF (20)
#define ADC_DIG_SCFG2_D_DITHER_FIX_I_BF_WID ( 5)
#define ADC_DIG_SCFG2_D_DITHER_FIX_I_BF_MSK (0x01F00000)
#define ADC_DIG_SCFG2_D_DITHER_FIX_I_BF_DEF (0x00000000)

///< Set the individual dither bits to common mode
#define ADC_DIG_SCFG2_D_DITHER_PD_I_BF_OFF (25)
#define ADC_DIG_SCFG2_D_DITHER_PD_I_BF_WID ( 5)
#define ADC_DIG_SCFG2_D_DITHER_PD_I_BF_MSK (0x3E000000)
#define ADC_DIG_SCFG2_D_DITHER_PD_I_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_SCFG2_RESERVED_BF_OFF (30)
#define ADC_DIG_SCFG2_RESERVED_BF_WID ( 2)
#define ADC_DIG_SCFG2_RESERVED_BF_MSK (0xC0000000)
#define ADC_DIG_SCFG2_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_ADC_SCFG3 register description at address offset 0x530
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/ADC_SCFG3
  * RX SAR
  */

typedef union {
  struct {
    uint32_t D_RD_COMP_TRIM_VALUE_I : 18;
    ///< initial read value for az_loop readback daisy chain (will be replaced
    ///< with tie 0)
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t D_TRIM_FVF_CAP_I : 3;
    ///< trim value for reference buffer output cap (default = 4)
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t D_TUNE_TAP_I : 3;
    ///< trim value for sampling window (not implemented yet)
    ///< AccessType="RW/V" BitOffset="21" ResetValue="0x0"
    uint32_t D_TUNE_VSMP_I : 2;
    ///< trim value for sampling voltage (default = 2)
    ///< AccessType="RW/V" BitOffset="24" ResetValue="0x0"
    uint32_t D_INV_VALID_I : 1;
    ///< invert polarity of valid signal (0=not inverted, 1=inverted)
    ///< AccessType="RW/V" BitOffset="26" ResetValue="0x0"
    uint32_t D_DEL_VALID_I : 2;
    ///< trim delay of valid signal vs data: <00> = 90ps, <01> = 160ps, <10>
    ///< = 220ps, <11> = 300ps
    ///< AccessType="RW/V" BitOffset="27" ResetValue="0x0"
    uint32_t D_DEL_CAPTURE_I : 2;
    ///< trim pulse width of valid signal  <00> = 130ps, <01> = 200ps, <10>
    ///< = 260ps, <11> = 335ps
    ///< AccessType="RW/V" BitOffset="29" ResetValue="0x0"
    uint32_t RESERVED : 1;
    ///< RESERVED
    ///< AccessType="RW/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_scfg3_reg_t;

#define ADC_DIG_SCFG3_DEFAULT (0x00000000U)
#define ADC_DIG_SCFG3_RD_MASK (0xffffffffU)
#define ADC_DIG_SCFG3_WR_MASK (0xffffffffU)


///< initial read value for az_loop readback daisy chain (will be replaced
///< with tie 0)
#define ADC_DIG_SCFG3_D_RD_COMP_TRIM_VAL_I_BF_OFF ( 0)
#define ADC_DIG_SCFG3_D_RD_COMP_TRIM_VAL_I_BF_WID (18)
#define ADC_DIG_SCFG3_D_RD_COMP_TRIM_VAL_I_BF_MSK (0x0003FFFF)
#define ADC_DIG_SCFG3_D_RD_COMP_TRIM_VAL_I_BF_DEF (0x00000000)

///< trim value for reference buffer output cap (default = 4)
#define ADC_DIG_SCFG3_D_TRIM_FVF_CAP_I_BF_OFF (18)
#define ADC_DIG_SCFG3_D_TRIM_FVF_CAP_I_BF_WID ( 3)
#define ADC_DIG_SCFG3_D_TRIM_FVF_CAP_I_BF_MSK (0x001C0000)
#define ADC_DIG_SCFG3_D_TRIM_FVF_CAP_I_BF_DEF (0x00000000)

///< trim value for sampling window (not implemented yet)
#define ADC_DIG_SCFG3_D_TUNE_TAP_I_BF_OFF (21)
#define ADC_DIG_SCFG3_D_TUNE_TAP_I_BF_WID ( 3)
#define ADC_DIG_SCFG3_D_TUNE_TAP_I_BF_MSK (0x00E00000)
#define ADC_DIG_SCFG3_D_TUNE_TAP_I_BF_DEF (0x00000000)

///< trim value for sampling voltage (default = 2)
#define ADC_DIG_SCFG3_D_TUNE_VSMP_I_BF_OFF (24)
#define ADC_DIG_SCFG3_D_TUNE_VSMP_I_BF_WID ( 2)
#define ADC_DIG_SCFG3_D_TUNE_VSMP_I_BF_MSK (0x03000000)
#define ADC_DIG_SCFG3_D_TUNE_VSMP_I_BF_DEF (0x00000000)

///< invert polarity of valid signal (0=not inverted, 1=inverted)
#define ADC_DIG_SCFG3_D_INV_VALID_I_BF_OFF (26)
#define ADC_DIG_SCFG3_D_INV_VALID_I_BF_WID ( 1)
#define ADC_DIG_SCFG3_D_INV_VALID_I_BF_MSK (0x04000000)
#define ADC_DIG_SCFG3_D_INV_VALID_I_BF_DEF (0x00000000)

///< trim delay of valid signal vs data: <00> = 90ps, <01> = 160ps, <10>
///< = 220ps, <11> = 300ps
#define ADC_DIG_SCFG3_D_DEL_VALID_I_BF_OFF (27)
#define ADC_DIG_SCFG3_D_DEL_VALID_I_BF_WID ( 2)
#define ADC_DIG_SCFG3_D_DEL_VALID_I_BF_MSK (0x18000000)
#define ADC_DIG_SCFG3_D_DEL_VALID_I_BF_DEF (0x00000000)

///< trim pulse width of valid signal  <00> = 130ps, <01> = 200ps, <10>
///< = 260ps, <11> = 335ps
#define ADC_DIG_SCFG3_D_DEL_CAP_I_BF_OFF (29)
#define ADC_DIG_SCFG3_D_DEL_CAP_I_BF_WID ( 2)
#define ADC_DIG_SCFG3_D_DEL_CAP_I_BF_MSK (0x60000000)
#define ADC_DIG_SCFG3_D_DEL_CAP_I_BF_DEF (0x00000000)

///< RESERVED
#define ADC_DIG_SCFG3_RESERVED_BF_OFF (31)
#define ADC_DIG_SCFG3_RESERVED_BF_WID ( 1)
#define ADC_DIG_SCFG3_RESERVED_BF_MSK (0x80000000)
#define ADC_DIG_SCFG3_RESERVED_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_FIFO_CONFIG register description at address offset 0x534
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/FIFO_CONFIG
  * ADC_DIG FIFO Configuration Register
  */

typedef union {
  struct {
    uint32_t SLICE_DEQ_MODE : 16;
    ///< 0: Dequeue respective slice as directed by scheduler            1:
    ///< Dequeue respective slicae whenever data is available
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t OBS_SLICE_DEQ_MODE : 1;
    ///< 0: Dequeue respective slice as directed by scheduler            1:
    ///< Dequeue respective slicae whenever data is available
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_fifo_cfg_reg_t;

#define ADC_DIG_FIFO_CFG_DEFAULT (0x00000000U)
#define ADC_DIG_FIFO_CFG_RD_MASK (0x0001ffffU)
#define ADC_DIG_FIFO_CFG_WR_MASK (0x0001ffffU)


///< 0: Dequeue respective slice as directed by scheduler            1:
///< Dequeue respective slicae whenever data is available
#define ADC_DIG_FIFO_CFG_SLICE_DEQ_MODE_BF_OFF ( 0)
#define ADC_DIG_FIFO_CFG_SLICE_DEQ_MODE_BF_WID (16)
#define ADC_DIG_FIFO_CFG_SLICE_DEQ_MODE_BF_MSK (0x0000FFFF)
#define ADC_DIG_FIFO_CFG_SLICE_DEQ_MODE_BF_DEF (0x00000000)

///< 0: Dequeue respective slice as directed by scheduler            1:
///< Dequeue respective slicae whenever data is available
#define ADC_DIG_FIFO_CFG_OBS_SLICE_DEQ_MODE_BF_OFF (16)
#define ADC_DIG_FIFO_CFG_OBS_SLICE_DEQ_MODE_BF_WID ( 1)
#define ADC_DIG_FIFO_CFG_OBS_SLICE_DEQ_MODE_BF_MSK (0x00010000)
#define ADC_DIG_FIFO_CFG_OBS_SLICE_DEQ_MODE_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_BSG_DC_INCR register description at address offset 0x538
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/BSG_DC_INCR
  * ADC Bitstream Generator DC Value Increment Register
  */

typedef union {
  struct {
    uint32_t DC_INCR : 24;
    ///< DC Value
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_bsg_dc_incr_reg_t;

#define ADC_DIG_BSG_DC_INCR_DEFAULT (0x00000000U)
#define ADC_DIG_BSG_DC_INCR_RD_MASK (0x00ffffffU)
#define ADC_DIG_BSG_DC_INCR_WR_MASK (0x00ffffffU)


///< DC Value
#define ADC_DIG_BSG_DC_INCR_BF_OFF ( 0)
#define ADC_DIG_BSG_DC_INCR_BF_WID (24)
#define ADC_DIG_BSG_DC_INCR_BF_MSK (0x00FFFFFF)
#define ADC_DIG_BSG_DC_INCR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CAL_SEQ_CTRL register description at address offset 0x53c
  *
  * Register default value:        0x00000002
  * Register full path in IP: adc_dig_map/reg/CAL_SEQ_CTRL
  * Sequencer control register.
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< 0: sequencer disabled, 1: sequencer enabled.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EXT_CTRL : 1;
    ///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t START_ADDR : 5;
    ///< Sequencer start address.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LOOP_START_ADDR : 5;
    ///< Sequencer loop start address.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t LOOP_END_ADDR : 5;
    ///< Sequencer loop end address.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t END_ADDR : 5;
    ///< Sequencer end address.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cal_seq_ctrl_reg_t;

#define ADC_DIG_CAL_SEQ_CTRL_DEFAULT (0x00000002U)
#define ADC_DIG_CAL_SEQ_CTRL_RD_MASK (0x003fffffU)
#define ADC_DIG_CAL_SEQ_CTRL_WR_MASK (0x003fffffU)


///< 0: sequencer disabled, 1: sequencer enabled.
#define ADC_DIG_CAL_SEQ_CTRL_EN_BF_OFF ( 0)
#define ADC_DIG_CAL_SEQ_CTRL_EN_BF_WID ( 1)
#define ADC_DIG_CAL_SEQ_CTRL_EN_BF_MSK (0x00000001)
#define ADC_DIG_CAL_SEQ_CTRL_EN_BF_DEF (0x00000000)

///< 0: external control (BFN) disabled, 1: external control (BFN) enabled.
#define ADC_DIG_CAL_SEQ_CTRL_EXT_BF_OFF ( 1)
#define ADC_DIG_CAL_SEQ_CTRL_EXT_BF_WID ( 1)
#define ADC_DIG_CAL_SEQ_CTRL_EXT_BF_MSK (0x00000002)
#define ADC_DIG_CAL_SEQ_CTRL_EXT_BF_DEF (0x00000002)

///< Sequencer start address.
#define ADC_DIG_CAL_SEQ_CTRL_START_ADDR_BF_OFF ( 2)
#define ADC_DIG_CAL_SEQ_CTRL_START_ADDR_BF_WID ( 5)
#define ADC_DIG_CAL_SEQ_CTRL_START_ADDR_BF_MSK (0x0000007C)
#define ADC_DIG_CAL_SEQ_CTRL_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop start address.
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_START_ADDR_BF_OFF ( 7)
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_START_ADDR_BF_WID ( 5)
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_START_ADDR_BF_MSK (0x00000F80)
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_START_ADDR_BF_DEF (0x00000000)

///< Sequencer loop end address.
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_END_ADDR_BF_OFF (12)
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_END_ADDR_BF_WID ( 5)
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_END_ADDR_BF_MSK (0x0001F000)
#define ADC_DIG_CAL_SEQ_CTRL_LOOP_END_ADDR_BF_DEF (0x00000000)

///< Sequencer end address.
#define ADC_DIG_CAL_SEQ_CTRL_END_ADDR_BF_OFF (17)
#define ADC_DIG_CAL_SEQ_CTRL_END_ADDR_BF_WID ( 5)
#define ADC_DIG_CAL_SEQ_CTRL_END_ADDR_BF_MSK (0x003E0000)
#define ADC_DIG_CAL_SEQ_CTRL_END_ADDR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_FIFO_CLR register description at address offset 0x540
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/FIFO_CLR
  * ADC Slice FIFO Clear Register
  */

typedef union {
  struct {
    uint32_t SLICE : 16;
    ///< Rx Slices
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_fifo_clr_reg_t;

#define ADC_DIG_FIFO_CLR_DEFAULT (0x00000000U)
#define ADC_DIG_FIFO_CLR_RD_MASK (0x0000ffffU)
#define ADC_DIG_FIFO_CLR_WR_MASK (0x0000ffffU)


///< Rx Slices
#define ADC_DIG_FIFO_CLR_SLICE_BF_OFF ( 0)
#define ADC_DIG_FIFO_CLR_SLICE_BF_WID (16)
#define ADC_DIG_FIFO_CLR_SLICE_BF_MSK (0x0000FFFF)
#define ADC_DIG_FIFO_CLR_SLICE_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_PAUSE_CONFIG register description at address offset 0x544
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PAUSE_CONFIG
  * ADC Scheduler Pause Config Register
  */

typedef union {
  struct {
    uint32_t FIFO_CLR_SLICE : 16;
    ///< FIFO Clear for each of the Rx Slices
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_CLR_OBS : 1;
    ///< FIFO Clear for the Observation Slices
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t SCHED_ODD_EN : 1;
    ///< Odd_en for the ADC_DIG RX scheduler.
    ///< AccessType="RW/V" BitOffset="17" ResetValue="0x0"
    uint32_t SCHED_EVEN_EN : 1;
    ///< Odd_en for the ADC_DIG RX scheduler.
    ///< AccessType="RW/V" BitOffset="18" ResetValue="0x0"
    uint32_t SCHED_SWAP : 1;
    ///< Odd_en for the ADC_DIG RX scheduler.
    ///< AccessType="RW/V" BitOffset="19" ResetValue="0x0"
    uint32_t PAUSE_ENABLE : 1;
    ///< Disable the Pause Feauter.
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_pause_cfg_reg_t;

#define ADC_DIG_PAUSE_CFG_DEFAULT (0x00000000U)
#define ADC_DIG_PAUSE_CFG_RD_MASK (0x001fffffU)
#define ADC_DIG_PAUSE_CFG_WR_MASK (0x001fffffU)


///< FIFO Clear for each of the Rx Slices
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_SLICE_BF_OFF ( 0)
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_SLICE_BF_WID (16)
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_SLICE_BF_MSK (0x0000FFFF)
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_SLICE_BF_DEF (0x00000000)

///< FIFO Clear for the Observation Slices
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_OBS_BF_OFF (16)
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_OBS_BF_WID ( 1)
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_OBS_BF_MSK (0x00010000)
#define ADC_DIG_PAUSE_CFG_FIFO_CLR_OBS_BF_DEF (0x00000000)

///< Odd_en for the ADC_DIG RX scheduler.
#define ADC_DIG_PAUSE_CFG_SCHED_ODD_EN_BF_OFF (17)
#define ADC_DIG_PAUSE_CFG_SCHED_ODD_EN_BF_WID ( 1)
#define ADC_DIG_PAUSE_CFG_SCHED_ODD_EN_BF_MSK (0x00020000)
#define ADC_DIG_PAUSE_CFG_SCHED_ODD_EN_BF_DEF (0x00000000)

///< Odd_en for the ADC_DIG RX scheduler.
#define ADC_DIG_PAUSE_CFG_SCHED_EVEN_EN_BF_OFF (18)
#define ADC_DIG_PAUSE_CFG_SCHED_EVEN_EN_BF_WID ( 1)
#define ADC_DIG_PAUSE_CFG_SCHED_EVEN_EN_BF_MSK (0x00040000)
#define ADC_DIG_PAUSE_CFG_SCHED_EVEN_EN_BF_DEF (0x00000000)

///< Odd_en for the ADC_DIG RX scheduler.
#define ADC_DIG_PAUSE_CFG_SCHED_SWAP_BF_OFF (19)
#define ADC_DIG_PAUSE_CFG_SCHED_SWAP_BF_WID ( 1)
#define ADC_DIG_PAUSE_CFG_SCHED_SWAP_BF_MSK (0x00080000)
#define ADC_DIG_PAUSE_CFG_SCHED_SWAP_BF_DEF (0x00000000)

///< Disable the Pause Feauter.
#define ADC_DIG_PAUSE_CFG_EN_BF_OFF (20)
#define ADC_DIG_PAUSE_CFG_EN_BF_WID ( 1)
#define ADC_DIG_PAUSE_CFG_EN_BF_MSK (0x00100000)
#define ADC_DIG_PAUSE_CFG_EN_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_SCHED_CTRL_LIVE register description at address offset 0x548
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SCHED_CTRL_LIVE
  * ADC_DIG Scheduler Control Live Register
  */

typedef union {
  struct {
    uint32_t ODD_EN : 1;
    ///< Enable the dequeuing of the odd FIFO slices.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t EVEN_EN : 1;
    ///< Enable the dequeuing of the even FIFO slices.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t SWAP : 1;
    ///< This bit is the swap bit that gets fed to the latency FIFO, and eventually
    ///< to the ASC.
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_sched_ctrl_live_reg_t;

#define ADC_DIG_SCHED_CTRL_LIVE_DEFAULT (0x00000000U)
#define ADC_DIG_SCHED_CTRL_LIVE_RD_MASK (0x00000007U)
#define ADC_DIG_SCHED_CTRL_LIVE_WR_MASK (0x00000007U)


///< Enable the dequeuing of the odd FIFO slices.
#define ADC_DIG_SCHED_CTRL_LIVE_ODD_EN_BF_OFF ( 0)
#define ADC_DIG_SCHED_CTRL_LIVE_ODD_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_CTRL_LIVE_ODD_EN_BF_MSK (0x00000001)
#define ADC_DIG_SCHED_CTRL_LIVE_ODD_EN_BF_DEF (0x00000000)

///< Enable the dequeuing of the even FIFO slices.
#define ADC_DIG_SCHED_CTRL_LIVE_EVEN_EN_BF_OFF ( 1)
#define ADC_DIG_SCHED_CTRL_LIVE_EVEN_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_CTRL_LIVE_EVEN_EN_BF_MSK (0x00000002)
#define ADC_DIG_SCHED_CTRL_LIVE_EVEN_EN_BF_DEF (0x00000000)

///< This bit is the swap bit that gets fed to the latency FIFO, and eventually
///< to the ASC.
#define ADC_DIG_SCHED_CTRL_LIVE_SWAP_BF_OFF ( 2)
#define ADC_DIG_SCHED_CTRL_LIVE_SWAP_BF_WID ( 1)
#define ADC_DIG_SCHED_CTRL_LIVE_SWAP_BF_MSK (0x00000004)
#define ADC_DIG_SCHED_CTRL_LIVE_SWAP_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_DSA_LIVE register description at address offset 0x54c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/DSA_LIVE
  * ADC_DIG DSA Live Register
  */

typedef union {
  struct {
    uint32_t DSA : 6;
    ///< DSA output to ADC. Under normal operation, the Shadow copy of this
    ///< register gets transferred here by the BFN trigger.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_dsa_live_reg_t;

#define ADC_DIG_DSA_LIVE_DEFAULT (0x00000000U)
#define ADC_DIG_DSA_LIVE_RD_MASK (0x0000003fU)
#define ADC_DIG_DSA_LIVE_WR_MASK (0x0000003fU)


///< DSA output to ADC. Under normal operation, the Shadow copy of this
///< register gets transferred here by the BFN trigger.
#define ADC_DIG_DSA_LIVE_BF_OFF ( 0)
#define ADC_DIG_DSA_LIVE_BF_WID ( 6)
#define ADC_DIG_DSA_LIVE_BF_MSK (0x0000003F)
#define ADC_DIG_DSA_LIVE_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OSS_CTRL_LIVE register description at address offset 0x550
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/OSS_CTRL_LIVE
  * ADC_DIG Observation Slice Scheduler Control Live Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Writing a 1 to this bit enables the ADC_DIG Observation Slice Scheduler,Clearing
    ///< this bit will stop the scheduler. Under normal operation, the Shadow
    ///< copy of this register gets transferred here by the BFN trigger.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_CLR : 1;
    ///< This register allows for clearing of the Observation Slice FIFO. Setting
    ///< this bit will force the FIFO to immediately discard all data and remain
    ///< empty until the bit is cleared.  This bit needs to be  cleared explicitly
    ///< to allow the FIFO to be used.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_oss_ctrl_live_reg_t;

#define ADC_DIG_OSS_CTRL_LIVE_DEFAULT (0x00000000U)
#define ADC_DIG_OSS_CTRL_LIVE_RD_MASK (0x00000003U)
#define ADC_DIG_OSS_CTRL_LIVE_WR_MASK (0x00000003U)


///< Writing a 1 to this bit enables the ADC_DIG Observation Slice Scheduler,Clearing
///< this bit will stop the scheduler. Under normal operation, the Shadow
///< copy of this register gets transferred here by the BFN trigger.
#define ADC_DIG_OSS_CTRL_LIVE_EN_BF_OFF ( 0)
#define ADC_DIG_OSS_CTRL_LIVE_EN_BF_WID ( 1)
#define ADC_DIG_OSS_CTRL_LIVE_EN_BF_MSK (0x00000001)
#define ADC_DIG_OSS_CTRL_LIVE_EN_BF_DEF (0x00000000)

///< This register allows for clearing of the Observation Slice FIFO. Setting
///< this bit will force the FIFO to immediately discard all data and remain
///< empty until the bit is cleared.  This bit needs to be  cleared explicitly
///< to allow the FIFO to be used.
#define ADC_DIG_OSS_CTRL_LIVE_FIFO_CLR_BF_OFF ( 1)
#define ADC_DIG_OSS_CTRL_LIVE_FIFO_CLR_BF_WID ( 1)
#define ADC_DIG_OSS_CTRL_LIVE_FIFO_CLR_BF_MSK (0x00000002)
#define ADC_DIG_OSS_CTRL_LIVE_FIFO_CLR_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x554
  *
  * Register default value:        0x00010000
  * Register full path in IP: adc_dig_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_apb_brdg_stat_reg_t;

#define ADC_DIG_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define ADC_DIG_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define ADC_DIG_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define ADC_DIG_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define ADC_DIG_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define ADC_DIG_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define ADC_DIG_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define ADC_DIG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define ADC_DIG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define ADC_DIG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define ADC_DIG_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define ADC_DIG_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define ADC_DIG_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define ADC_DIG_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define ADC_DIG_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define ADC_DIG_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define ADC_DIG_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_PROT_STATUS_CAL_SEQ_CMD_DATA register description at address offset 0x558
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PROT_STATUS_CAL_SEQ_CMD_DATA
  * ADC_DIG Calibration Sequencer Command Protection Status register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< A parity error has occurred in the respective sequencer command register
    ///< in the calibration sequencer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_prot_stat_cal_seq_cmd_data_reg_t;

#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_DEFAULT (0x00000000U)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_RD_MASK (0xffffffffU)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_WR_MASK (0x00000000U)


///< A parity error has occurred in the respective sequencer command register
///< in the calibration sequencer.
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_BF_OFF ( 0)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_BF_WID (32)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_PROT_STATUS_CAL_SEQ_CMD_AW register description at address offset 0x55c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PROT_STATUS_CAL_SEQ_CMD_AW
  * ADC_DIG Calibration Sequencer Command Protection Status register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< A parity error has occurred in the respective sequencer command register
    ///< in the calibration sequencer.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} adc_dig_prot_stat_cal_seq_cmd_aw_reg_t;

#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_DEFAULT (0x00000000U)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_RD_MASK (0xffffffffU)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_WR_MASK (0x00000000U)


///< A parity error has occurred in the respective sequencer command register
///< in the calibration sequencer.
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_DATA_BF_OFF ( 0)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_DATA_BF_WID (32)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_DATA_BF_MSK (0xFFFFFFFF)
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_DATA_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_PROT_STATUS_REGISTER register description at address offset 0x560
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PROT_STATUS_REGISTER
  * ADC_DIG Register Protection Status register.
  */

typedef union {
  struct {
    uint32_t ADC_SCFG : 4;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_CONFIG : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t BSG_DC_INCR : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t DSA_SHDW : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t DSA_LIVE : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t SCHED_CTRL_SHDW : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t SCHED_CTRL_LIVE : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t OSS_CTRL_SHDW : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t OSS_CTRL_LIVE : 1;
    ///< A parity error has occurred in the respective register.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_prot_stat_register_reg_t;

#define ADC_DIG_PROT_STAT_REGISTER_DEFAULT (0x00000000U)
#define ADC_DIG_PROT_STAT_REGISTER_RD_MASK (0x00000fffU)
#define ADC_DIG_PROT_STAT_REGISTER_WR_MASK (0x00000000U)


///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_SCFG_BF_OFF ( 0)
#define ADC_DIG_PROT_STAT_REGISTER_SCFG_BF_WID ( 4)
#define ADC_DIG_PROT_STAT_REGISTER_SCFG_BF_MSK (0x0000000F)
#define ADC_DIG_PROT_STAT_REGISTER_SCFG_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_FIFO_CFG_BF_OFF ( 4)
#define ADC_DIG_PROT_STAT_REGISTER_FIFO_CFG_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_FIFO_CFG_BF_MSK (0x00000010)
#define ADC_DIG_PROT_STAT_REGISTER_FIFO_CFG_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_BSG_DC_INCR_BF_OFF ( 5)
#define ADC_DIG_PROT_STAT_REGISTER_BSG_DC_INCR_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_BSG_DC_INCR_BF_MSK (0x00000020)
#define ADC_DIG_PROT_STAT_REGISTER_BSG_DC_INCR_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_DSA_SHDW_BF_OFF ( 6)
#define ADC_DIG_PROT_STAT_REGISTER_DSA_SHDW_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_DSA_SHDW_BF_MSK (0x00000040)
#define ADC_DIG_PROT_STAT_REGISTER_DSA_SHDW_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_DSA_LIVE_BF_OFF ( 7)
#define ADC_DIG_PROT_STAT_REGISTER_DSA_LIVE_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_DSA_LIVE_BF_MSK (0x00000080)
#define ADC_DIG_PROT_STAT_REGISTER_DSA_LIVE_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_SHDW_BF_OFF ( 8)
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_SHDW_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_SHDW_BF_MSK (0x00000100)
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_SHDW_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_LIVE_BF_OFF ( 9)
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_LIVE_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_LIVE_BF_MSK (0x00000200)
#define ADC_DIG_PROT_STAT_REGISTER_SCHED_CTRL_LIVE_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_SHDW_BF_OFF (10)
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_SHDW_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_SHDW_BF_MSK (0x00000400)
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_SHDW_BF_DEF (0x00000000)

///< A parity error has occurred in the respective register.
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_LIVE_BF_OFF (11)
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_LIVE_BF_WID ( 1)
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_LIVE_BF_MSK (0x00000800)
#define ADC_DIG_PROT_STAT_REGISTER_OSS_CTRL_LIVE_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CAL_COLLISION_STATUS register description at address offset 0x564
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/CAL_COLLISION_STATUS
  * ADC_DIG Calibration Collision Status register.
  */

typedef union {
  struct {
    uint32_t ADDRESS : 5;
    ///< A collision (or access to unused space) has occurred at the specified
    ///< address.
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t APB_ACCESS : 1;
    ///< APB was one of the initiators.
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t SEQ_ACCESS : 1;
    ///< The sequencer was one of the initiators.
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t BAD_ADDRESS : 1;
    ///< A bad address was referenced.
    ///< AccessType="RW/1C/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cal_collision_stat_reg_t;

#define ADC_DIG_CAL_COLLISION_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_CAL_COLLISION_STAT_RD_MASK (0x000000ffU)
#define ADC_DIG_CAL_COLLISION_STAT_WR_MASK (0x000000ffU)


///< A collision (or access to unused space) has occurred at the specified
///< address.
#define ADC_DIG_CAL_COLLISION_STAT_BF_OFF ( 0)
#define ADC_DIG_CAL_COLLISION_STAT_BF_WID ( 5)
#define ADC_DIG_CAL_COLLISION_STAT_BF_MSK (0x0000001F)
#define ADC_DIG_CAL_COLLISION_STAT_BF_DEF (0x00000000)

///< APB was one of the initiators.
#define ADC_DIG_CAL_COLLISION_STAT_APB_ACCESS_BF_OFF ( 5)
#define ADC_DIG_CAL_COLLISION_STAT_APB_ACCESS_BF_WID ( 1)
#define ADC_DIG_CAL_COLLISION_STAT_APB_ACCESS_BF_MSK (0x00000020)
#define ADC_DIG_CAL_COLLISION_STAT_APB_ACCESS_BF_DEF (0x00000000)

///< The sequencer was one of the initiators.
#define ADC_DIG_CAL_COLLISION_STAT_SEQ_ACCESS_BF_OFF ( 6)
#define ADC_DIG_CAL_COLLISION_STAT_SEQ_ACCESS_BF_WID ( 1)
#define ADC_DIG_CAL_COLLISION_STAT_SEQ_ACCESS_BF_MSK (0x00000040)
#define ADC_DIG_CAL_COLLISION_STAT_SEQ_ACCESS_BF_DEF (0x00000000)

///< A bad address was referenced.
#define ADC_DIG_CAL_COLLISION_STAT_BAD_BF_OFF ( 7)
#define ADC_DIG_CAL_COLLISION_STAT_BAD_BF_WID ( 1)
#define ADC_DIG_CAL_COLLISION_STAT_BAD_BF_MSK (0x00000080)
#define ADC_DIG_CAL_COLLISION_STAT_BAD_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_SCHED_STATUS register description at address offset 0x568
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/SCHED_STATUS
  * ADC Scheduler Status Register
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< This represents the Scheduler Control ENABLE value that is being used.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ODD_EN : 1;
    ///< This represents the Scheduler Control ODD_EN value that is being used.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EVEN_EN : 1;
    ///< This represents the Scheduler Control EVEN_EN value that is being
    ///< used.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t SWAP : 1;
    ///< This represents the Scheduler Control SWAP value that is being used.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t COUNT : 3;
    ///< Scheduler counter. In normal operation, this will be changing every
    ///< cycle, so transitions will be difficult to see.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_sched_stat_reg_t;

#define ADC_DIG_SCHED_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_SCHED_STAT_RD_MASK (0x0000007fU)
#define ADC_DIG_SCHED_STAT_WR_MASK (0x00000000U)


///< This represents the Scheduler Control ENABLE value that is being used.
#define ADC_DIG_SCHED_STAT_EN_BF_OFF ( 0)
#define ADC_DIG_SCHED_STAT_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_STAT_EN_BF_MSK (0x00000001)
#define ADC_DIG_SCHED_STAT_EN_BF_DEF (0x00000000)

///< This represents the Scheduler Control ODD_EN value that is being used.
#define ADC_DIG_SCHED_STAT_ODD_EN_BF_OFF ( 1)
#define ADC_DIG_SCHED_STAT_ODD_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_STAT_ODD_EN_BF_MSK (0x00000002)
#define ADC_DIG_SCHED_STAT_ODD_EN_BF_DEF (0x00000000)

///< This represents the Scheduler Control EVEN_EN value that is being
///< used.
#define ADC_DIG_SCHED_STAT_EVEN_EN_BF_OFF ( 2)
#define ADC_DIG_SCHED_STAT_EVEN_EN_BF_WID ( 1)
#define ADC_DIG_SCHED_STAT_EVEN_EN_BF_MSK (0x00000004)
#define ADC_DIG_SCHED_STAT_EVEN_EN_BF_DEF (0x00000000)

///< This represents the Scheduler Control SWAP value that is being used.
#define ADC_DIG_SCHED_STAT_SWAP_BF_OFF ( 3)
#define ADC_DIG_SCHED_STAT_SWAP_BF_WID ( 1)
#define ADC_DIG_SCHED_STAT_SWAP_BF_MSK (0x00000008)
#define ADC_DIG_SCHED_STAT_SWAP_BF_DEF (0x00000000)

///< Scheduler counter. In normal operation, this will be changing every
///< cycle, so transitions will be difficult to see.
#define ADC_DIG_SCHED_STAT_CNT_BF_OFF ( 4)
#define ADC_DIG_SCHED_STAT_CNT_BF_WID ( 3)
#define ADC_DIG_SCHED_STAT_CNT_BF_MSK (0x00000070)
#define ADC_DIG_SCHED_STAT_CNT_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_PAUSE_STATUS register description at address offset 0x56c
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/PAUSE_STATUS
  * ADC Scheduler Pause Status
  */

typedef union {
  struct {
    uint32_t FIFO_CLR_SLICE : 16;
    ///< Shows the instantenous FIFO Clear for each of the Rx Slices
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FIFO_CLR_OBS : 1;
    ///< Shows the instantenous FIFO Clear for the Observation Slices
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t PAUSE : 1;
    ///< Shows the instantenous value of the pause control. This will show
    ///< even if the feature is disabled.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_pause_stat_reg_t;

#define ADC_DIG_PAUSE_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_PAUSE_STAT_RD_MASK (0x0003ffffU)
#define ADC_DIG_PAUSE_STAT_WR_MASK (0x00000000U)


///< Shows the instantenous FIFO Clear for each of the Rx Slices
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_SLICE_BF_OFF ( 0)
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_SLICE_BF_WID (16)
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_SLICE_BF_MSK (0x0000FFFF)
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_SLICE_BF_DEF (0x00000000)

///< Shows the instantenous FIFO Clear for the Observation Slices
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_OBS_BF_OFF (16)
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_OBS_BF_WID ( 1)
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_OBS_BF_MSK (0x00010000)
#define ADC_DIG_PAUSE_STAT_FIFO_CLR_OBS_BF_DEF (0x00000000)

///< Shows the instantenous value of the pause control. This will show
///< even if the feature is disabled.
#define ADC_DIG_PAUSE_STAT_BF_OFF (17)
#define ADC_DIG_PAUSE_STAT_BF_WID ( 1)
#define ADC_DIG_PAUSE_STAT_BF_MSK (0x00020000)
#define ADC_DIG_PAUSE_STAT_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OBS_FIFO_STATUS register description at address offset 0x570
  *
  * Register default value:        0x00000010
  * Register full path in IP: adc_dig_map/reg/OBS_FIFO_STATUS
  * ADC Slice FIFO Status Register
  */

typedef union {
  struct {
    uint32_t DEPTH : 4;
    ///< Current FIFO depth.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< FIFO is empty.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< FIFO is full.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t UFLOW : 1;
    ///< FIFO was popped while it was empty.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_obs_fifo_stat_reg_t;

#define ADC_DIG_OBS_FIFO_STAT_DEFAULT (0x00000010U)
#define ADC_DIG_OBS_FIFO_STAT_RD_MASK (0x0000007fU)
#define ADC_DIG_OBS_FIFO_STAT_WR_MASK (0x00000000U)


///< Current FIFO depth.
#define ADC_DIG_OBS_FIFO_STAT_DEPTH_BF_OFF ( 0)
#define ADC_DIG_OBS_FIFO_STAT_DEPTH_BF_WID ( 4)
#define ADC_DIG_OBS_FIFO_STAT_DEPTH_BF_MSK (0x0000000F)
#define ADC_DIG_OBS_FIFO_STAT_DEPTH_BF_DEF (0x00000000)

///< FIFO is empty.
#define ADC_DIG_OBS_FIFO_STAT_EMPTY_BF_OFF ( 4)
#define ADC_DIG_OBS_FIFO_STAT_EMPTY_BF_WID ( 1)
#define ADC_DIG_OBS_FIFO_STAT_EMPTY_BF_MSK (0x00000010)
#define ADC_DIG_OBS_FIFO_STAT_EMPTY_BF_DEF (0x00000010)

///< FIFO is full.
#define ADC_DIG_OBS_FIFO_STAT_FULL_BF_OFF ( 5)
#define ADC_DIG_OBS_FIFO_STAT_FULL_BF_WID ( 1)
#define ADC_DIG_OBS_FIFO_STAT_FULL_BF_MSK (0x00000020)
#define ADC_DIG_OBS_FIFO_STAT_FULL_BF_DEF (0x00000000)

///< FIFO was popped while it was empty.
#define ADC_DIG_OBS_FIFO_STAT_UFLOW_BF_OFF ( 6)
#define ADC_DIG_OBS_FIFO_STAT_UFLOW_BF_WID ( 1)
#define ADC_DIG_OBS_FIFO_STAT_UFLOW_BF_MSK (0x00000040)
#define ADC_DIG_OBS_FIFO_STAT_UFLOW_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_CAL_SEQ_STATUS register description at address offset 0x574
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/CAL_SEQ_STATUS
  * Sequencer status register.
  */

typedef union {
  struct {
    uint32_t RUNNING : 1;
    ///< Sequencer is running.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DONE : 1;
    ///< Sequencer is done.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PC : 5;
    ///< Sequencer program count.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t WAIT_CNT : 12;
    ///< Sequencer wait count.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_cal_seq_stat_reg_t;

#define ADC_DIG_CAL_SEQ_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_CAL_SEQ_STAT_RD_MASK (0x0007ffffU)
#define ADC_DIG_CAL_SEQ_STAT_WR_MASK (0x00000000U)


///< Sequencer is running.
#define ADC_DIG_CAL_SEQ_STAT_RUNNING_BF_OFF ( 0)
#define ADC_DIG_CAL_SEQ_STAT_RUNNING_BF_WID ( 1)
#define ADC_DIG_CAL_SEQ_STAT_RUNNING_BF_MSK (0x00000001)
#define ADC_DIG_CAL_SEQ_STAT_RUNNING_BF_DEF (0x00000000)

///< Sequencer is done.
#define ADC_DIG_CAL_SEQ_STAT_DONE_BF_OFF ( 1)
#define ADC_DIG_CAL_SEQ_STAT_DONE_BF_WID ( 1)
#define ADC_DIG_CAL_SEQ_STAT_DONE_BF_MSK (0x00000002)
#define ADC_DIG_CAL_SEQ_STAT_DONE_BF_DEF (0x00000000)

///< Sequencer program count.
#define ADC_DIG_CAL_SEQ_STAT_PC_BF_OFF ( 2)
#define ADC_DIG_CAL_SEQ_STAT_PC_BF_WID ( 5)
#define ADC_DIG_CAL_SEQ_STAT_PC_BF_MSK (0x0000007C)
#define ADC_DIG_CAL_SEQ_STAT_PC_BF_DEF (0x00000000)

///< Sequencer wait count.
#define ADC_DIG_CAL_SEQ_STAT_WAIT_CNT_BF_OFF ( 7)
#define ADC_DIG_CAL_SEQ_STAT_WAIT_CNT_BF_WID (12)
#define ADC_DIG_CAL_SEQ_STAT_WAIT_CNT_BF_MSK (0x0007FF80)
#define ADC_DIG_CAL_SEQ_STAT_WAIT_CNT_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_OSS_STATUS register description at address offset 0x578
  *
  * Register default value:        0x00000000
  * Register full path in IP: adc_dig_map/reg/OSS_STATUS
  * ADC_DIG ADC OSS Status register.
  */

typedef union {
  struct {
    uint32_t INCR : 6;
    ///< Current value of the OSS increment. If using the LFSR, this could
    ///< be changing rapidly.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ACCUM : 6;
    ///< The current value of the OSS Accumulator. This may be changing somewhat
    ///< rapidly.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t IDX : 3;
    ///< The value of the scheduler when the first OSS phase is non-zero
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t ENABLED : 1;
    ///< Set to one when the first OSS phase is non-zero
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t PHASE : 4;
    ///< The first OSS phase after enablement
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_oss_stat_reg_t;

#define ADC_DIG_OSS_STAT_DEFAULT (0x00000000U)
#define ADC_DIG_OSS_STAT_RD_MASK (0x000fffffU)
#define ADC_DIG_OSS_STAT_WR_MASK (0x00000000U)


///< Current value of the OSS increment. If using the LFSR, this could
///< be changing rapidly.
#define ADC_DIG_OSS_STAT_INCR_BF_OFF ( 0)
#define ADC_DIG_OSS_STAT_INCR_BF_WID ( 6)
#define ADC_DIG_OSS_STAT_INCR_BF_MSK (0x0000003F)
#define ADC_DIG_OSS_STAT_INCR_BF_DEF (0x00000000)

///< The current value of the OSS Accumulator. This may be changing somewhat
///< rapidly.
#define ADC_DIG_OSS_STAT_ACCUM_BF_OFF ( 6)
#define ADC_DIG_OSS_STAT_ACCUM_BF_WID ( 6)
#define ADC_DIG_OSS_STAT_ACCUM_BF_MSK (0x00000FC0)
#define ADC_DIG_OSS_STAT_ACCUM_BF_DEF (0x00000000)

///< The value of the scheduler when the first OSS phase is non-zero
#define ADC_DIG_OSS_STAT_IDX_BF_OFF (12)
#define ADC_DIG_OSS_STAT_IDX_BF_WID ( 3)
#define ADC_DIG_OSS_STAT_IDX_BF_MSK (0x00007000)
#define ADC_DIG_OSS_STAT_IDX_BF_DEF (0x00000000)

///< Set to one when the first OSS phase is non-zero
#define ADC_DIG_OSS_STAT_END_BF_OFF (15)
#define ADC_DIG_OSS_STAT_END_BF_WID ( 1)
#define ADC_DIG_OSS_STAT_END_BF_MSK (0x00008000)
#define ADC_DIG_OSS_STAT_END_BF_DEF (0x00000000)

///< The first OSS phase after enablement
#define ADC_DIG_OSS_STAT_PHASE_BF_OFF (16)
#define ADC_DIG_OSS_STAT_PHASE_BF_WID ( 4)
#define ADC_DIG_OSS_STAT_PHASE_BF_MSK (0x000F0000)
#define ADC_DIG_OSS_STAT_PHASE_BF_DEF (0x00000000)


/** @brief ADC_DIG_MAP_REG_FIFO_STATUS[16] register description at address offset 0x580
  *
  * Register default value:        0x00000010
  * Register full path in IP: adc_dig_map/reg/FIFO_STATUS
  * ADC Slice FIFO Status Register
  */

typedef union {
  struct {
    uint32_t DEPTH : 4;
    ///< Current FIFO depth.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t EMPTY : 1;
    ///< FIFO is empty.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x1"
    uint32_t FULL : 1;
    ///< FIFO is full.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t UFLOW : 1;
    ///< FIFO was popped while it was empty.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} adc_dig_fifo_stat_reg_t;

#define ADC_DIG_FIFO_STAT_DEFAULT (0x00000010U)
#define ADC_DIG_FIFO_STAT_RD_MASK (0x0000007fU)
#define ADC_DIG_FIFO_STAT_WR_MASK (0x00000000U)


///< Current FIFO depth.
#define ADC_DIG_FIFO_STAT_DEPTH_BF_OFF ( 0)
#define ADC_DIG_FIFO_STAT_DEPTH_BF_WID ( 4)
#define ADC_DIG_FIFO_STAT_DEPTH_BF_MSK (0x0000000F)
#define ADC_DIG_FIFO_STAT_DEPTH_BF_DEF (0x00000000)

///< FIFO is empty.
#define ADC_DIG_FIFO_STAT_EMPTY_BF_OFF ( 4)
#define ADC_DIG_FIFO_STAT_EMPTY_BF_WID ( 1)
#define ADC_DIG_FIFO_STAT_EMPTY_BF_MSK (0x00000010)
#define ADC_DIG_FIFO_STAT_EMPTY_BF_DEF (0x00000010)

///< FIFO is full.
#define ADC_DIG_FIFO_STAT_FULL_BF_OFF ( 5)
#define ADC_DIG_FIFO_STAT_FULL_BF_WID ( 1)
#define ADC_DIG_FIFO_STAT_FULL_BF_MSK (0x00000020)
#define ADC_DIG_FIFO_STAT_FULL_BF_DEF (0x00000000)

///< FIFO was popped while it was empty.
#define ADC_DIG_FIFO_STAT_UFLOW_BF_OFF ( 6)
#define ADC_DIG_FIFO_STAT_UFLOW_BF_WID ( 1)
#define ADC_DIG_FIFO_STAT_UFLOW_BF_MSK (0x00000040)
#define ADC_DIG_FIFO_STAT_UFLOW_BF_DEF (0x00000000)
#define ADC_DIG_FIFO_STAT_ARR_SZ0 (16)
#define ADC_DIG_FIFO_STAT_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define ADC_DIG_SEQ0_MEM0_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM0_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM0_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM0_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM1_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM1_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM1_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM1_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM2_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM2_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM2_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM2_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM3_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM3_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM3_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM3_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM4_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM4_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM4_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM4_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM5_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM5_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM5_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM5_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM6_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM6_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM6_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM6_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM7_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM7_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM7_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM7_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM8_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM8_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM8_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM8_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM9_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM9_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM9_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM9_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM10_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM10_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM10_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM10_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM11_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM11_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM11_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM11_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM12_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM12_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM12_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM12_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM13_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM13_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM13_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM13_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM14_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM14_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM14_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM14_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM15_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM15_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM15_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM15_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM16_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM16_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM16_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM16_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM17_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM17_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM17_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM17_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM18_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM18_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM18_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM18_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM19_CMD_DATA_REG(_BASE) ((adc_dig_seq0_mem_cmd_data_reg_t*) ADC_DIG_SEQ0_MEM19_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ0_MEM19_CMD_AW_REG(_BASE) ((adc_dig_seq0_mem_cmd_aw_reg_t*) ADC_DIG_SEQ0_MEM19_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM0_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM0_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM0_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM0_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM1_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM1_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM1_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM1_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM2_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM2_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM2_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM2_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM3_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM3_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM3_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM3_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM4_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM4_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM4_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM4_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM5_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM5_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM5_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM5_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM6_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM6_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM6_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM6_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM7_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM7_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM7_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM7_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM8_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM8_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM8_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM8_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM9_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM9_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM9_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM9_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM10_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM10_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM10_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM10_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM11_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM11_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM11_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM11_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM12_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM12_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM12_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM12_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM13_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM13_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM13_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM13_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM14_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM14_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM14_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM14_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM15_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM15_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM15_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM15_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM16_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM16_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM16_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM16_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM17_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM17_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM17_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM17_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM18_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM18_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM18_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM18_CMD_AW_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM19_CMD_DATA_REG(_BASE) ((adc_dig_seq1_mem_cmd_data_reg_t*) ADC_DIG_SEQ1_MEM19_CMD_DATA_ADR(_BASE))
#define ADC_DIG_SEQ1_MEM19_CMD_AW_REG(_BASE) ((adc_dig_seq1_mem_cmd_aw_reg_t*) ADC_DIG_SEQ1_MEM19_CMD_AW_ADR(_BASE))
#define ADC_DIG_SCRATCHPADD_REG(_BASE) ((adc_dig_scratchpadd_reg_t*) ADC_DIG_SCRATCHPADD_ADR(_BASE))
#define ADC_DIG_CFGD_REG(_BASE) ((adc_dig_cfgd_reg_t*) ADC_DIG_CFGD_ADR(_BASE))
#define ADC_DIG_SEQ_ITER0_REG(_BASE) ((adc_dig_seq_iter_reg_t*) ADC_DIG_SEQ_ITER0_ADR(_BASE))
#define ADC_DIG_SEQ_ITER1_REG(_BASE) ((adc_dig_seq_iter_reg_t*) ADC_DIG_SEQ_ITER1_ADR(_BASE))
#define ADC_DIG_SEQ_CTRL0_REG(_BASE) ((adc_dig_seq_ctrl_reg_t*) ADC_DIG_SEQ_CTRL0_ADR(_BASE))
#define ADC_DIG_SEQ_CTRL1_REG(_BASE) ((adc_dig_seq_ctrl_reg_t*) ADC_DIG_SEQ_CTRL1_ADR(_BASE))
#define ADC_DIG_CFG0_REG(_BASE) ((adc_dig_cfg0_reg_t*) ADC_DIG_CFG0_ADR(_BASE))
#define ADC_DIG_CFG1_REG(_BASE) ((adc_dig_cfg1_reg_t*) ADC_DIG_CFG1_ADR(_BASE))
#define ADC_DIG_CFG2_REG(_BASE) ((adc_dig_cfg2_reg_t*) ADC_DIG_CFG2_ADR(_BASE))
#define ADC_DIG_CFG3_REG(_BASE) ((adc_dig_cfg3_reg_t*) ADC_DIG_CFG3_ADR(_BASE))
#define ADC_DIG_CFG4_REG(_BASE) ((adc_dig_cfg4_reg_t*) ADC_DIG_CFG4_ADR(_BASE))
#define ADC_DIG_CFG5_REG(_BASE) ((adc_dig_cfg5_reg_t*) ADC_DIG_CFG5_ADR(_BASE))
#define ADC_DIG_CFG6_REG(_BASE) ((adc_dig_cfg6_reg_t*) ADC_DIG_CFG6_ADR(_BASE))
#define ADC_DIG_CFG7_REG(_BASE) ((adc_dig_cfg7_reg_t*) ADC_DIG_CFG7_ADR(_BASE))
#define ADC_DIG_CFG8_REG(_BASE) ((adc_dig_cfg8_reg_t*) ADC_DIG_CFG8_ADR(_BASE))
#define ADC_DIG_CFG9_REG(_BASE) ((adc_dig_cfg9_reg_t*) ADC_DIG_CFG9_ADR(_BASE))
#define ADC_DIG_CFG10_REG(_BASE) ((adc_dig_cfg10_reg_t*) ADC_DIG_CFG10_ADR(_BASE))
#define ADC_DIG_CFG11_REG(_BASE) ((adc_dig_cfg11_reg_t*) ADC_DIG_CFG11_ADR(_BASE))
#define ADC_DIG_CFG12_REG(_BASE) ((adc_dig_cfg12_reg_t*) ADC_DIG_CFG12_ADR(_BASE))
#define ADC_DIG_CFG13_REG(_BASE) ((adc_dig_cfg13_reg_t*) ADC_DIG_CFG13_ADR(_BASE))
#define ADC_DIG_CFG14_REG(_BASE) ((adc_dig_cfg14_reg_t*) ADC_DIG_CFG14_ADR(_BASE))
#define ADC_DIG_CFG15_REG(_BASE) ((adc_dig_cfg15_reg_t*) ADC_DIG_CFG15_ADR(_BASE))
#define ADC_DIG_CFG16_REG(_BASE) ((adc_dig_cfg16_reg_t*) ADC_DIG_CFG16_ADR(_BASE))
#define ADC_DIG_CFG17_REG(_BASE) ((adc_dig_cfg17_reg_t*) ADC_DIG_CFG17_ADR(_BASE))
#define ADC_DIG_CFG18_REG(_BASE) ((adc_dig_cfg18_reg_t*) ADC_DIG_CFG18_ADR(_BASE))
#define ADC_DIG_CFG19_REG(_BASE) ((adc_dig_cfg19_reg_t*) ADC_DIG_CFG19_ADR(_BASE))
#define ADC_DIG_CFG20_REG(_BASE) ((adc_dig_cfg20_reg_t*) ADC_DIG_CFG20_ADR(_BASE))
#define ADC_DIG_CFG21_REG(_BASE) ((adc_dig_cfg21_reg_t*) ADC_DIG_CFG21_ADR(_BASE))
#define ADC_DIG_CFG22_REG(_BASE) ((adc_dig_cfg22_reg_t*) ADC_DIG_CFG22_ADR(_BASE))
#define ADC_DIG_CFG23_REG(_BASE) ((adc_dig_cfg23_reg_t*) ADC_DIG_CFG23_ADR(_BASE))
#define ADC_DIG_CFG24_REG(_BASE) ((adc_dig_cfg24_reg_t*) ADC_DIG_CFG24_ADR(_BASE))
#define ADC_DIG_APB_BRDG_DCLK_STAT_REG(_BASE) ((adc_dig_apb_brdg_dclk_stat_reg_t*) ADC_DIG_APB_BRDG_DCLK_STAT_ADR(_BASE))
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA0_REG(_BASE) ((adc_dig_prot_stat_seq_cmd_data_reg_t*) ADC_DIG_PROT_STAT_SEQ_CMD_DATA0_ADR(_BASE))
#define ADC_DIG_PROT_STAT_SEQ_CMD_DATA1_REG(_BASE) ((adc_dig_prot_stat_seq_cmd_data_reg_t*) ADC_DIG_PROT_STAT_SEQ_CMD_DATA1_ADR(_BASE))
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW0_REG(_BASE) ((adc_dig_prot_stat_seq_cmd_aw_reg_t*) ADC_DIG_PROT_STAT_SEQ_CMD_AW0_ADR(_BASE))
#define ADC_DIG_PROT_STAT_SEQ_CMD_AW1_REG(_BASE) ((adc_dig_prot_stat_seq_cmd_aw_reg_t*) ADC_DIG_PROT_STAT_SEQ_CMD_AW1_ADR(_BASE))
#define ADC_DIG_PROT_STAT_CFG_REG(_BASE) ((adc_dig_prot_stat_cfg_reg_t*) ADC_DIG_PROT_STAT_CFG_ADR(_BASE))
#define ADC_DIG_COLLISION_STAT_REG(_BASE) ((adc_dig_collision_stat_reg_t*) ADC_DIG_COLLISION_STAT_ADR(_BASE))
#define ADC_DIG_SEQ_STAT0_REG(_BASE) ((adc_dig_seq_stat_reg_t*) ADC_DIG_SEQ_STAT0_ADR(_BASE))
#define ADC_DIG_SEQ_STAT1_REG(_BASE) ((adc_dig_seq_stat_reg_t*) ADC_DIG_SEQ_STAT1_ADR(_BASE))
#define ADC_DIG_STAT0_REG(_BASE) ((adc_dig_stat0_reg_t*) ADC_DIG_STAT0_ADR(_BASE))
#define ADC_DIG_STAT1_REG(_BASE) ((adc_dig_stat1_reg_t*) ADC_DIG_STAT1_ADR(_BASE))
#define ADC_DIG_STAT2_REG(_BASE) ((adc_dig_stat2_reg_t*) ADC_DIG_STAT2_ADR(_BASE))
#define ADC_DIG_STAT3_REG(_BASE) ((adc_dig_stat3_reg_t*) ADC_DIG_STAT3_ADR(_BASE))
#define ADC_DIG_INT_STAT_REG(_BASE) ((adc_dig_int_stat_reg_t*) ADC_DIG_INT_STAT_ADR(_BASE))
#define ADC_DIG_INT_HIGH_EN_REG(_BASE) ((adc_dig_int_high_en_reg_t*) ADC_DIG_INT_HIGH_EN_ADR(_BASE))
#define ADC_DIG_INT_LOW_EN_REG(_BASE) ((adc_dig_int_low_en_reg_t*) ADC_DIG_INT_LOW_EN_ADR(_BASE))
#define ADC_DIG_INT_CLR_REG(_BASE) ((adc_dig_int_clr_reg_t*) ADC_DIG_INT_CLR_ADR(_BASE))
#define ADC_DIG_INT_FORCE_REG(_BASE) ((adc_dig_int_force_reg_t*) ADC_DIG_INT_FORCE_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM0_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM0_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM0_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM0_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM1_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM1_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM1_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM1_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM2_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM2_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM2_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM2_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM3_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM3_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM3_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM3_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM4_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM4_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM4_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM4_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM5_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM5_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM5_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM5_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM6_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM6_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM6_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM6_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM7_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM7_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM7_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM7_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM8_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM8_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM8_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM8_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM9_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM9_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM9_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM9_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM10_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM10_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM10_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM10_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM11_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM11_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM11_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM11_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM12_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM12_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM12_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM12_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM13_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM13_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM13_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM13_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM14_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM14_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM14_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM14_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM15_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM15_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM15_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM15_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM16_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM16_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM16_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM16_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM17_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM17_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM17_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM17_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM18_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM18_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM18_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM18_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM19_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM19_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM19_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM19_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM20_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM20_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM20_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM20_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM21_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM21_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM21_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM21_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM22_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM22_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM22_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM22_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM23_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM23_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM23_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM23_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM24_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM24_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM24_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM24_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM25_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM25_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM25_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM25_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM26_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM26_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM26_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM26_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM27_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM27_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM27_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM27_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM28_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM28_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM28_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM28_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM29_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM29_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM29_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM29_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM30_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM30_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM30_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM30_CMD_AW_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM31_CMD_DATA_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_data_reg_t*) ADC_DIG_CAL_SEQ_MEM31_CMD_DATA_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_MEM31_CMD_AW_REG(_BASE) ((adc_dig_cal_seq_mem_cmd_aw_reg_t*) ADC_DIG_CAL_SEQ_MEM31_CMD_AW_ADR(_BASE))
#define ADC_DIG_SCRATCHPAD_REG(_BASE) ((adc_dig_scratchpad_reg_t*) ADC_DIG_SCRATCHPAD_ADR(_BASE))
#define ADC_DIG_CFG_REG(_BASE) ((adc_dig_cfg_reg_t*) ADC_DIG_CFG_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_ITER_REG(_BASE) ((adc_dig_cal_seq_iter_reg_t*) ADC_DIG_CAL_SEQ_ITER_ADR(_BASE))
#define ADC_DIG_OSS_CFG_REG(_BASE) ((adc_dig_oss_cfg_reg_t*) ADC_DIG_OSS_CFG_ADR(_BASE))
#define ADC_DIG_OSS_CFG2_REG(_BASE) ((adc_dig_oss_cfg2_reg_t*) ADC_DIG_OSS_CFG2_ADR(_BASE))
#define ADC_DIG_OSS_LFSR_INIT_REG(_BASE) ((adc_dig_oss_lfsr_init_reg_t*) ADC_DIG_OSS_LFSR_INIT_ADR(_BASE))
#define ADC_DIG_SCHED_CTRL_SHDW_REG(_BASE) ((adc_dig_sched_ctrl_shdw_reg_t*) ADC_DIG_SCHED_CTRL_SHDW_ADR(_BASE))
#define ADC_DIG_DSA_SHDW_REG(_BASE) ((adc_dig_dsa_shdw_reg_t*) ADC_DIG_DSA_SHDW_ADR(_BASE))
#define ADC_DIG_OSS_CTRL_SHDW_REG(_BASE) ((adc_dig_oss_ctrl_shdw_reg_t*) ADC_DIG_OSS_CTRL_SHDW_ADR(_BASE))
#define ADC_DIG_SCFG0_REG(_BASE) ((adc_dig_scfg0_reg_t*) ADC_DIG_SCFG0_ADR(_BASE))
#define ADC_DIG_SCFG1_REG(_BASE) ((adc_dig_scfg1_reg_t*) ADC_DIG_SCFG1_ADR(_BASE))
#define ADC_DIG_SCFG2_REG(_BASE) ((adc_dig_scfg2_reg_t*) ADC_DIG_SCFG2_ADR(_BASE))
#define ADC_DIG_SCFG3_REG(_BASE) ((adc_dig_scfg3_reg_t*) ADC_DIG_SCFG3_ADR(_BASE))
#define ADC_DIG_FIFO_CFG_REG(_BASE) ((adc_dig_fifo_cfg_reg_t*) ADC_DIG_FIFO_CFG_ADR(_BASE))
#define ADC_DIG_BSG_DC_INCR_REG(_BASE) ((adc_dig_bsg_dc_incr_reg_t*) ADC_DIG_BSG_DC_INCR_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_CTRL_REG(_BASE) ((adc_dig_cal_seq_ctrl_reg_t*) ADC_DIG_CAL_SEQ_CTRL_ADR(_BASE))
#define ADC_DIG_FIFO_CLR_REG(_BASE) ((adc_dig_fifo_clr_reg_t*) ADC_DIG_FIFO_CLR_ADR(_BASE))
#define ADC_DIG_PAUSE_CFG_REG(_BASE) ((adc_dig_pause_cfg_reg_t*) ADC_DIG_PAUSE_CFG_ADR(_BASE))
#define ADC_DIG_SCHED_CTRL_LIVE_REG(_BASE) ((adc_dig_sched_ctrl_live_reg_t*) ADC_DIG_SCHED_CTRL_LIVE_ADR(_BASE))
#define ADC_DIG_DSA_LIVE_REG(_BASE) ((adc_dig_dsa_live_reg_t*) ADC_DIG_DSA_LIVE_ADR(_BASE))
#define ADC_DIG_OSS_CTRL_LIVE_REG(_BASE) ((adc_dig_oss_ctrl_live_reg_t*) ADC_DIG_OSS_CTRL_LIVE_ADR(_BASE))
#define ADC_DIG_APB_BRDG_STAT_REG(_BASE) ((adc_dig_apb_brdg_stat_reg_t*) ADC_DIG_APB_BRDG_STAT_ADR(_BASE))
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_REG(_BASE) ((adc_dig_prot_stat_cal_seq_cmd_data_reg_t*) ADC_DIG_PROT_STAT_CAL_SEQ_CMD_DATA_ADR(_BASE))
#define ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_REG(_BASE) ((adc_dig_prot_stat_cal_seq_cmd_aw_reg_t*) ADC_DIG_PROT_STAT_CAL_SEQ_CMD_AW_ADR(_BASE))
#define ADC_DIG_PROT_STAT_REGISTER_REG(_BASE) ((adc_dig_prot_stat_register_reg_t*) ADC_DIG_PROT_STAT_REGISTER_ADR(_BASE))
#define ADC_DIG_CAL_COLLISION_STAT_REG(_BASE) ((adc_dig_cal_collision_stat_reg_t*) ADC_DIG_CAL_COLLISION_STAT_ADR(_BASE))
#define ADC_DIG_SCHED_STAT_REG(_BASE) ((adc_dig_sched_stat_reg_t*) ADC_DIG_SCHED_STAT_ADR(_BASE))
#define ADC_DIG_PAUSE_STAT_REG(_BASE) ((adc_dig_pause_stat_reg_t*) ADC_DIG_PAUSE_STAT_ADR(_BASE))
#define ADC_DIG_OBS_FIFO_STAT_REG(_BASE) ((adc_dig_obs_fifo_stat_reg_t*) ADC_DIG_OBS_FIFO_STAT_ADR(_BASE))
#define ADC_DIG_CAL_SEQ_STAT_REG(_BASE) ((adc_dig_cal_seq_stat_reg_t*) ADC_DIG_CAL_SEQ_STAT_ADR(_BASE))
#define ADC_DIG_OSS_STAT_REG(_BASE) ((adc_dig_oss_stat_reg_t*) ADC_DIG_OSS_STAT_ADR(_BASE))
#define ADC_DIG_FIFO_STAT0_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT0_ADR(_BASE))
#define ADC_DIG_FIFO_STAT1_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT1_ADR(_BASE))
#define ADC_DIG_FIFO_STAT2_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT2_ADR(_BASE))
#define ADC_DIG_FIFO_STAT3_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT3_ADR(_BASE))
#define ADC_DIG_FIFO_STAT4_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT4_ADR(_BASE))
#define ADC_DIG_FIFO_STAT5_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT5_ADR(_BASE))
#define ADC_DIG_FIFO_STAT6_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT6_ADR(_BASE))
#define ADC_DIG_FIFO_STAT7_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT7_ADR(_BASE))
#define ADC_DIG_FIFO_STAT8_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT8_ADR(_BASE))
#define ADC_DIG_FIFO_STAT9_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT9_ADR(_BASE))
#define ADC_DIG_FIFO_STAT10_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT10_ADR(_BASE))
#define ADC_DIG_FIFO_STAT11_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT11_ADR(_BASE))
#define ADC_DIG_FIFO_STAT12_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT12_ADR(_BASE))
#define ADC_DIG_FIFO_STAT13_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT13_ADR(_BASE))
#define ADC_DIG_FIFO_STAT14_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT14_ADR(_BASE))
#define ADC_DIG_FIFO_STAT15_REG(_BASE) ((adc_dig_fifo_stat_reg_t*) ADC_DIG_FIFO_STAT15_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM0_CMD_DATA; /*< Address offset = 0x0 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM0_CMD_AW; /*< Address offset = 0x4 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM1_CMD_DATA; /*< Address offset = 0x8 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM1_CMD_AW; /*< Address offset = 0xc */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM2_CMD_DATA; /*< Address offset = 0x10 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM2_CMD_AW; /*< Address offset = 0x14 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM3_CMD_DATA; /*< Address offset = 0x18 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM3_CMD_AW; /*< Address offset = 0x1c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM4_CMD_DATA; /*< Address offset = 0x20 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM4_CMD_AW; /*< Address offset = 0x24 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM5_CMD_DATA; /*< Address offset = 0x28 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM5_CMD_AW; /*< Address offset = 0x2c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM6_CMD_DATA; /*< Address offset = 0x30 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM6_CMD_AW; /*< Address offset = 0x34 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM7_CMD_DATA; /*< Address offset = 0x38 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM7_CMD_AW; /*< Address offset = 0x3c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM8_CMD_DATA; /*< Address offset = 0x40 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM8_CMD_AW; /*< Address offset = 0x44 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM9_CMD_DATA; /*< Address offset = 0x48 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM9_CMD_AW; /*< Address offset = 0x4c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM10_CMD_DATA; /*< Address offset = 0x50 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM10_CMD_AW; /*< Address offset = 0x54 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM11_CMD_DATA; /*< Address offset = 0x58 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM11_CMD_AW; /*< Address offset = 0x5c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM12_CMD_DATA; /*< Address offset = 0x60 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM12_CMD_AW; /*< Address offset = 0x64 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM13_CMD_DATA; /*< Address offset = 0x68 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM13_CMD_AW; /*< Address offset = 0x6c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM14_CMD_DATA; /*< Address offset = 0x70 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM14_CMD_AW; /*< Address offset = 0x74 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM15_CMD_DATA; /*< Address offset = 0x78 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM15_CMD_AW; /*< Address offset = 0x7c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM16_CMD_DATA; /*< Address offset = 0x80 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM16_CMD_AW; /*< Address offset = 0x84 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM17_CMD_DATA; /*< Address offset = 0x88 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM17_CMD_AW; /*< Address offset = 0x8c */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM18_CMD_DATA; /*< Address offset = 0x90 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM18_CMD_AW; /*< Address offset = 0x94 */
    adc_dig_seq0_mem_cmd_data_reg_t SEQ0_MEM19_CMD_DATA; /*< Address offset = 0x98 */
    adc_dig_seq0_mem_cmd_aw_reg_t SEQ0_MEM19_CMD_AW; /*< Address offset = 0x9c */
    const uint8_t        reservedArea0 [96];  /*< Address offset = 0xa0 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM0_CMD_DATA; /*< Address offset = 0x100 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM0_CMD_AW; /*< Address offset = 0x104 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM1_CMD_DATA; /*< Address offset = 0x108 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM1_CMD_AW; /*< Address offset = 0x10c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM2_CMD_DATA; /*< Address offset = 0x110 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM2_CMD_AW; /*< Address offset = 0x114 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM3_CMD_DATA; /*< Address offset = 0x118 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM3_CMD_AW; /*< Address offset = 0x11c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM4_CMD_DATA; /*< Address offset = 0x120 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM4_CMD_AW; /*< Address offset = 0x124 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM5_CMD_DATA; /*< Address offset = 0x128 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM5_CMD_AW; /*< Address offset = 0x12c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM6_CMD_DATA; /*< Address offset = 0x130 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM6_CMD_AW; /*< Address offset = 0x134 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM7_CMD_DATA; /*< Address offset = 0x138 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM7_CMD_AW; /*< Address offset = 0x13c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM8_CMD_DATA; /*< Address offset = 0x140 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM8_CMD_AW; /*< Address offset = 0x144 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM9_CMD_DATA; /*< Address offset = 0x148 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM9_CMD_AW; /*< Address offset = 0x14c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM10_CMD_DATA; /*< Address offset = 0x150 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM10_CMD_AW; /*< Address offset = 0x154 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM11_CMD_DATA; /*< Address offset = 0x158 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM11_CMD_AW; /*< Address offset = 0x15c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM12_CMD_DATA; /*< Address offset = 0x160 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM12_CMD_AW; /*< Address offset = 0x164 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM13_CMD_DATA; /*< Address offset = 0x168 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM13_CMD_AW; /*< Address offset = 0x16c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM14_CMD_DATA; /*< Address offset = 0x170 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM14_CMD_AW; /*< Address offset = 0x174 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM15_CMD_DATA; /*< Address offset = 0x178 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM15_CMD_AW; /*< Address offset = 0x17c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM16_CMD_DATA; /*< Address offset = 0x180 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM16_CMD_AW; /*< Address offset = 0x184 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM17_CMD_DATA; /*< Address offset = 0x188 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM17_CMD_AW; /*< Address offset = 0x18c */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM18_CMD_DATA; /*< Address offset = 0x190 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM18_CMD_AW; /*< Address offset = 0x194 */
    adc_dig_seq1_mem_cmd_data_reg_t SEQ1_MEM19_CMD_DATA; /*< Address offset = 0x198 */
    adc_dig_seq1_mem_cmd_aw_reg_t SEQ1_MEM19_CMD_AW; /*< Address offset = 0x19c */
    const uint8_t        reservedArea1 [96];  /*< Address offset = 0x1a0 */
    adc_dig_scratchpadd_reg_t SCRATCHPADD;     /*< Address offset = 0x200 */
    adc_dig_cfgd_reg_t CFGD;         /*< Address offset = 0x204 */
    adc_dig_seq_iter_reg_t SEQ_ITER[2];     /*< Address offset = 0x208 */
    adc_dig_seq_ctrl_reg_t SEQ_CTRL[2];     /*< Address offset = 0x210 */
    const uint8_t        reservedArea2 [232]; /*< Address offset = 0x218 */
    adc_dig_cfg0_reg_t ADC_CFG0;     /*< Address offset = 0x300 */
    adc_dig_cfg1_reg_t ADC_CFG1;     /*< Address offset = 0x304 */
    adc_dig_cfg2_reg_t ADC_CFG2;     /*< Address offset = 0x308 */
    adc_dig_cfg3_reg_t ADC_CFG3;     /*< Address offset = 0x30c */
    adc_dig_cfg4_reg_t ADC_CFG4;     /*< Address offset = 0x310 */
    adc_dig_cfg5_reg_t ADC_CFG5;     /*< Address offset = 0x314 */
    adc_dig_cfg6_reg_t ADC_CFG6;     /*< Address offset = 0x318 */
    adc_dig_cfg7_reg_t ADC_CFG7;     /*< Address offset = 0x31c */
    adc_dig_cfg8_reg_t ADC_CFG8;     /*< Address offset = 0x320 */
    adc_dig_cfg9_reg_t ADC_CFG9;     /*< Address offset = 0x324 */
    adc_dig_cfg10_reg_t ADC_CFG10;    /*< Address offset = 0x328 */
    adc_dig_cfg11_reg_t ADC_CFG11;    /*< Address offset = 0x32c */
    adc_dig_cfg12_reg_t ADC_CFG12;    /*< Address offset = 0x330 */
    adc_dig_cfg13_reg_t ADC_CFG13;    /*< Address offset = 0x334 */
    adc_dig_cfg14_reg_t ADC_CFG14;    /*< Address offset = 0x338 */
    adc_dig_cfg15_reg_t ADC_CFG15;    /*< Address offset = 0x33c */
    adc_dig_cfg16_reg_t ADC_CFG16;    /*< Address offset = 0x340 */
    adc_dig_cfg17_reg_t ADC_CFG17;    /*< Address offset = 0x344 */
    adc_dig_cfg18_reg_t ADC_CFG18;    /*< Address offset = 0x348 */
    adc_dig_cfg19_reg_t ADC_CFG19;    /*< Address offset = 0x34c */
    adc_dig_cfg20_reg_t ADC_CFG20;    /*< Address offset = 0x350 */
    adc_dig_cfg21_reg_t ADC_CFG21;    /*< Address offset = 0x354 */
    adc_dig_cfg22_reg_t ADC_CFG22;    /*< Address offset = 0x358 */
    adc_dig_cfg23_reg_t ADC_CFG23;    /*< Address offset = 0x35c */
    adc_dig_cfg24_reg_t ADC_CFG24;    /*< Address offset = 0x360 */
    const uint8_t        reservedArea3 [8];   /*< Address offset = 0x364 */
    adc_dig_apb_brdg_dclk_stat_reg_t APB_BRDG_DCLK_STAT; /*< Address offset = 0x36c */
    adc_dig_prot_stat_seq_cmd_data_reg_t PROT_STAT_SEQ_CMD_DATA[2]; /*< Address offset = 0x370 */
    adc_dig_prot_stat_seq_cmd_aw_reg_t PROT_STAT_SEQ_CMD_AW[2]; /*< Address offset = 0x378 */
    adc_dig_prot_stat_cfg_reg_t PROT_STAT_ADC_CFG; /*< Address offset = 0x380 */
    adc_dig_collision_stat_reg_t COLLISION_STAT; /*< Address offset = 0x384 */
    adc_dig_seq_stat_reg_t SEQ_STAT[2];   /*< Address offset = 0x388 */
    adc_dig_stat0_reg_t ADC_STAT0;       /*< Address offset = 0x390 */
    adc_dig_stat1_reg_t ADC_STAT1;       /*< Address offset = 0x394 */
    adc_dig_stat2_reg_t ADC_STAT2;       /*< Address offset = 0x398 */
    adc_dig_stat3_reg_t ADC_STAT3;       /*< Address offset = 0x39c */
    adc_dig_int_stat_reg_t INT_STAT;      /*< Address offset = 0x3a0 */
    adc_dig_int_high_en_reg_t INT_HIGH_EN;     /*< Address offset = 0x3a4 */
    adc_dig_int_low_en_reg_t INT_LOW_EN;      /*< Address offset = 0x3a8 */
    adc_dig_int_clr_reg_t INT_CLR;       /*< Address offset = 0x3ac */
    adc_dig_int_force_reg_t INT_FORCE;       /*< Address offset = 0x3b0 */
    const uint8_t        reservedArea4 [76];  /*< Address offset = 0x3b4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM0_CMD_DATA; /*< Address offset = 0x400 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM0_CMD_AW; /*< Address offset = 0x404 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM1_CMD_DATA; /*< Address offset = 0x408 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM1_CMD_AW; /*< Address offset = 0x40c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM2_CMD_DATA; /*< Address offset = 0x410 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM2_CMD_AW; /*< Address offset = 0x414 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM3_CMD_DATA; /*< Address offset = 0x418 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM3_CMD_AW; /*< Address offset = 0x41c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM4_CMD_DATA; /*< Address offset = 0x420 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM4_CMD_AW; /*< Address offset = 0x424 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM5_CMD_DATA; /*< Address offset = 0x428 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM5_CMD_AW; /*< Address offset = 0x42c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM6_CMD_DATA; /*< Address offset = 0x430 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM6_CMD_AW; /*< Address offset = 0x434 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM7_CMD_DATA; /*< Address offset = 0x438 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM7_CMD_AW; /*< Address offset = 0x43c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM8_CMD_DATA; /*< Address offset = 0x440 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM8_CMD_AW; /*< Address offset = 0x444 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM9_CMD_DATA; /*< Address offset = 0x448 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM9_CMD_AW; /*< Address offset = 0x44c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM10_CMD_DATA; /*< Address offset = 0x450 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM10_CMD_AW; /*< Address offset = 0x454 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM11_CMD_DATA; /*< Address offset = 0x458 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM11_CMD_AW; /*< Address offset = 0x45c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM12_CMD_DATA; /*< Address offset = 0x460 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM12_CMD_AW; /*< Address offset = 0x464 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM13_CMD_DATA; /*< Address offset = 0x468 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM13_CMD_AW; /*< Address offset = 0x46c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM14_CMD_DATA; /*< Address offset = 0x470 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM14_CMD_AW; /*< Address offset = 0x474 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM15_CMD_DATA; /*< Address offset = 0x478 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM15_CMD_AW; /*< Address offset = 0x47c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM16_CMD_DATA; /*< Address offset = 0x480 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM16_CMD_AW; /*< Address offset = 0x484 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM17_CMD_DATA; /*< Address offset = 0x488 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM17_CMD_AW; /*< Address offset = 0x48c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM18_CMD_DATA; /*< Address offset = 0x490 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM18_CMD_AW; /*< Address offset = 0x494 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM19_CMD_DATA; /*< Address offset = 0x498 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM19_CMD_AW; /*< Address offset = 0x49c */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM20_CMD_DATA; /*< Address offset = 0x4a0 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM20_CMD_AW; /*< Address offset = 0x4a4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM21_CMD_DATA; /*< Address offset = 0x4a8 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM21_CMD_AW; /*< Address offset = 0x4ac */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM22_CMD_DATA; /*< Address offset = 0x4b0 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM22_CMD_AW; /*< Address offset = 0x4b4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM23_CMD_DATA; /*< Address offset = 0x4b8 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM23_CMD_AW; /*< Address offset = 0x4bc */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM24_CMD_DATA; /*< Address offset = 0x4c0 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM24_CMD_AW; /*< Address offset = 0x4c4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM25_CMD_DATA; /*< Address offset = 0x4c8 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM25_CMD_AW; /*< Address offset = 0x4cc */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM26_CMD_DATA; /*< Address offset = 0x4d0 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM26_CMD_AW; /*< Address offset = 0x4d4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM27_CMD_DATA; /*< Address offset = 0x4d8 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM27_CMD_AW; /*< Address offset = 0x4dc */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM28_CMD_DATA; /*< Address offset = 0x4e0 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM28_CMD_AW; /*< Address offset = 0x4e4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM29_CMD_DATA; /*< Address offset = 0x4e8 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM29_CMD_AW; /*< Address offset = 0x4ec */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM30_CMD_DATA; /*< Address offset = 0x4f0 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM30_CMD_AW; /*< Address offset = 0x4f4 */
    adc_dig_cal_seq_mem_cmd_data_reg_t CAL_SEQ_MEM31_CMD_DATA; /*< Address offset = 0x4f8 */
    adc_dig_cal_seq_mem_cmd_aw_reg_t CAL_SEQ_MEM31_CMD_AW; /*< Address offset = 0x4fc */
    adc_dig_scratchpad_reg_t SCRATCHPAD;      /*< Address offset = 0x500 */
    adc_dig_cfg_reg_t CFG;          /*< Address offset = 0x504 */
    adc_dig_cal_seq_iter_reg_t CAL_SEQ_ITER;    /*< Address offset = 0x508 */
    adc_dig_oss_cfg_reg_t OSS_CFG;      /*< Address offset = 0x50c */
    adc_dig_oss_cfg2_reg_t OSS_CFG2;     /*< Address offset = 0x510 */
    adc_dig_oss_lfsr_init_reg_t OSS_LFSR_INIT;   /*< Address offset = 0x514 */
    adc_dig_sched_ctrl_shdw_reg_t SCHED_CTRL_SHDW; /*< Address offset = 0x518 */
    adc_dig_dsa_shdw_reg_t DSA_SHDW;        /*< Address offset = 0x51c */
    adc_dig_oss_ctrl_shdw_reg_t OSS_CTRL_SHDW;   /*< Address offset = 0x520 */
    adc_dig_scfg0_reg_t ADC_SCFG0;       /*< Address offset = 0x524 */
    adc_dig_scfg1_reg_t ADC_SCFG1;       /*< Address offset = 0x528 */
    adc_dig_scfg2_reg_t ADC_SCFG2;       /*< Address offset = 0x52c */
    adc_dig_scfg3_reg_t ADC_SCFG3;       /*< Address offset = 0x530 */
    adc_dig_fifo_cfg_reg_t FIFO_CFG;     /*< Address offset = 0x534 */
    adc_dig_bsg_dc_incr_reg_t BSG_DC_INCR;     /*< Address offset = 0x538 */
    adc_dig_cal_seq_ctrl_reg_t CAL_SEQ_CTRL;    /*< Address offset = 0x53c */
    adc_dig_fifo_clr_reg_t FIFO_CLR;        /*< Address offset = 0x540 */
    adc_dig_pause_cfg_reg_t PAUSE_CFG;    /*< Address offset = 0x544 */
    adc_dig_sched_ctrl_live_reg_t SCHED_CTRL_LIVE; /*< Address offset = 0x548 */
    adc_dig_dsa_live_reg_t DSA_LIVE;        /*< Address offset = 0x54c */
    adc_dig_oss_ctrl_live_reg_t OSS_CTRL_LIVE;   /*< Address offset = 0x550 */
    adc_dig_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x554 */
    adc_dig_prot_stat_cal_seq_cmd_data_reg_t PROT_STAT_CAL_SEQ_CMD_DATA; /*< Address offset = 0x558 */
    adc_dig_prot_stat_cal_seq_cmd_aw_reg_t PROT_STAT_CAL_SEQ_CMD_AW; /*< Address offset = 0x55c */
    adc_dig_prot_stat_register_reg_t PROT_STAT_REGISTER; /*< Address offset = 0x560 */
    adc_dig_cal_collision_stat_reg_t CAL_COLLISION_STAT; /*< Address offset = 0x564 */
    adc_dig_sched_stat_reg_t SCHED_STAT;    /*< Address offset = 0x568 */
    adc_dig_pause_stat_reg_t PAUSE_STAT;    /*< Address offset = 0x56c */
    adc_dig_obs_fifo_stat_reg_t OBS_FIFO_STAT; /*< Address offset = 0x570 */
    adc_dig_cal_seq_stat_reg_t CAL_SEQ_STAT;  /*< Address offset = 0x574 */
    adc_dig_oss_stat_reg_t OSS_STAT;      /*< Address offset = 0x578 */
    const uint8_t        reservedArea5 [4];   /*< Address offset = 0x57c */
    adc_dig_fifo_stat_reg_t FIFO_STAT[16]; /*< Address offset = 0x580 */
} adc_dig_t;     // size: 0x0370

// AddressSpace struct pointer
//
#define ANT0_ADC_DIG0    ((adc_dig_t*) ANT0_ADC_DIG0_BASE)
#define ANT0_ADC_DIG1    ((adc_dig_t*) ANT0_ADC_DIG1_BASE)
#define ANT0_ADC_DIG2    ((adc_dig_t*) ANT0_ADC_DIG2_BASE)
#define ANT0_ADC_DIG3    ((adc_dig_t*) ANT0_ADC_DIG3_BASE)
#define ANT0_ADC_DIG_FB  ((adc_dig_t*) ANT0_ADC_DIG_FB_BASE)
#define ANT1_ADC_DIG0    ((adc_dig_t*) ANT1_ADC_DIG0_BASE)
#define ANT1_ADC_DIG1    ((adc_dig_t*) ANT1_ADC_DIG1_BASE)
#define ANT1_ADC_DIG2    ((adc_dig_t*) ANT1_ADC_DIG2_BASE)
#define ANT1_ADC_DIG3    ((adc_dig_t*) ANT1_ADC_DIG3_BASE)
#define ANT1_ADC_DIG_FB  ((adc_dig_t*) ANT1_ADC_DIG_FB_BASE)
#define ANT2_ADC_DIG0    ((adc_dig_t*) ANT2_ADC_DIG0_BASE)
#define ANT2_ADC_DIG1    ((adc_dig_t*) ANT2_ADC_DIG1_BASE)
#define ANT2_ADC_DIG2    ((adc_dig_t*) ANT2_ADC_DIG2_BASE)
#define ANT2_ADC_DIG3    ((adc_dig_t*) ANT2_ADC_DIG3_BASE)
#define ANT2_ADC_DIG_FB  ((adc_dig_t*) ANT2_ADC_DIG_FB_BASE)
#define ANT3_ADC_DIG0    ((adc_dig_t*) ANT3_ADC_DIG0_BASE)
#define ANT3_ADC_DIG1    ((adc_dig_t*) ANT3_ADC_DIG1_BASE)
#define ANT3_ADC_DIG2    ((adc_dig_t*) ANT3_ADC_DIG2_BASE)
#define ANT3_ADC_DIG3    ((adc_dig_t*) ANT3_ADC_DIG3_BASE)
#define ANT3_ADC_DIG_FB  ((adc_dig_t*) ANT3_ADC_DIG_FB_BASE)

// ******************************************* /Address Space

#endif      // _ADC_DIG_H_

