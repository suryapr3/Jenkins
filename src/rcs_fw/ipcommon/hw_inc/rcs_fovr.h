#ifndef _RCS_FOVR_H_
#define _RCS_FOVR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_FOVR_METER0_BASE  ( 0x00246000 )
#define RCS_FOVR_METER1_BASE  ( 0x00266000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RCS_FOVR_ALARMS0_CNTER_CTL_OFFSET ( 0x00000000U )
#define RCS_FOVR_ALARMS0_CNTER_RSLT_OFFSET ( 0x00000004U )
#define RCS_FOVR_ALARMS1_CNTER_CTL_OFFSET ( 0x00000010U )
#define RCS_FOVR_ALARMS1_CNTER_RSLT_OFFSET ( 0x00000014U )
#define RCS_FOVR_ALARMS2_CNTER_CTL_OFFSET ( 0x00000020U )
#define RCS_FOVR_ALARMS2_CNTER_RSLT_OFFSET ( 0x00000024U )
#define RCS_FOVR_ALARMS3_CNTER_CTL_OFFSET ( 0x00000030U )
#define RCS_FOVR_ALARMS3_CNTER_RSLT_OFFSET ( 0x00000034U )
#define RCS_FOVR_ALARMS4_CNTER_CTL_OFFSET ( 0x00000040U )
#define RCS_FOVR_ALARMS4_CNTER_RSLT_OFFSET ( 0x00000044U )
#define RCS_FOVR_ALARMS5_CNTER_CTL_OFFSET ( 0x00000050U )
#define RCS_FOVR_ALARMS5_CNTER_RSLT_OFFSET ( 0x00000054U )
#define RCS_FOVR_ALARMS6_CNTER_CTL_OFFSET ( 0x00000060U )
#define RCS_FOVR_ALARMS6_CNTER_RSLT_OFFSET ( 0x00000064U )
#define RCS_FOVR_ALARMS7_CNTER_CTL_OFFSET ( 0x00000070U )
#define RCS_FOVR_ALARMS7_CNTER_RSLT_OFFSET ( 0x00000074U )
#define RCS_FOVR_ALARMS8_CNTER_CTL_OFFSET ( 0x00000080U )
#define RCS_FOVR_ALARMS8_CNTER_RSLT_OFFSET ( 0x00000084U )
#define RCS_FOVR_ALARMS9_CNTER_CTL_OFFSET ( 0x00000090U )
#define RCS_FOVR_ALARMS9_CNTER_RSLT_OFFSET ( 0x00000094U )
#define RCS_FOVR_ALARMS10_CNTER_CTL_OFFSET ( 0x000000a0U )
#define RCS_FOVR_ALARMS10_CNTER_RSLT_OFFSET ( 0x000000a4U )
#define RCS_FOVR_ALARMS11_CNTER_CTL_OFFSET ( 0x000000b0U )
#define RCS_FOVR_ALARMS11_CNTER_RSLT_OFFSET ( 0x000000b4U )
#define RCS_FOVR_ALARMS12_CNTER_CTL_OFFSET ( 0x000000c0U )
#define RCS_FOVR_ALARMS12_CNTER_RSLT_OFFSET ( 0x000000c4U )
#define RCS_FOVR_ALARMS13_CNTER_CTL_OFFSET ( 0x000000d0U )
#define RCS_FOVR_ALARMS13_CNTER_RSLT_OFFSET ( 0x000000d4U )
#define RCS_FOVR_ALARMS14_CNTER_CTL_OFFSET ( 0x000000e0U )
#define RCS_FOVR_ALARMS14_CNTER_RSLT_OFFSET ( 0x000000e4U )
#define RCS_FOVR_ALARMS15_CNTER_CTL_OFFSET ( 0x000000f0U )
#define RCS_FOVR_ALARMS15_CNTER_RSLT_OFFSET ( 0x000000f4U )
#define RCS_FOVR_ALARMS16_CNTER_CTL_OFFSET ( 0x00000100U )
#define RCS_FOVR_ALARMS16_CNTER_RSLT_OFFSET ( 0x00000104U )
#define RCS_FOVR_ALARMS17_CNTER_CTL_OFFSET ( 0x00000110U )
#define RCS_FOVR_ALARMS17_CNTER_RSLT_OFFSET ( 0x00000114U )
#define RCS_FOVR_ALARMS18_CNTER_CTL_OFFSET ( 0x00000120U )
#define RCS_FOVR_ALARMS18_CNTER_RSLT_OFFSET ( 0x00000124U )
#define RCS_FOVR_ALARMS19_CNTER_CTL_OFFSET ( 0x00000130U )
#define RCS_FOVR_ALARMS19_CNTER_RSLT_OFFSET ( 0x00000134U )
#define RCS_FOVR_ALARMS20_CNTER_CTL_OFFSET ( 0x00000140U )
#define RCS_FOVR_ALARMS20_CNTER_RSLT_OFFSET ( 0x00000144U )
#define RCS_FOVR_ALARMS21_CNTER_CTL_OFFSET ( 0x00000150U )
#define RCS_FOVR_ALARMS21_CNTER_RSLT_OFFSET ( 0x00000154U )
#define RCS_FOVR_ALARMS22_CNTER_CTL_OFFSET ( 0x00000160U )
#define RCS_FOVR_ALARMS22_CNTER_RSLT_OFFSET ( 0x00000164U )
#define RCS_FOVR_ALARMS23_CNTER_CTL_OFFSET ( 0x00000170U )
#define RCS_FOVR_ALARMS23_CNTER_RSLT_OFFSET ( 0x00000174U )
#define RCS_FOVR_ALARMS24_CNTER_CTL_OFFSET ( 0x00000180U )
#define RCS_FOVR_ALARMS24_CNTER_RSLT_OFFSET ( 0x00000184U )
#define RCS_FOVR_ALARMS25_CNTER_CTL_OFFSET ( 0x00000190U )
#define RCS_FOVR_ALARMS25_CNTER_RSLT_OFFSET ( 0x00000194U )
#define RCS_FOVR_ALARMS26_CNTER_CTL_OFFSET ( 0x000001a0U )
#define RCS_FOVR_ALARMS26_CNTER_RSLT_OFFSET ( 0x000001a4U )
#define RCS_FOVR_ALARMS27_CNTER_CTL_OFFSET ( 0x000001b0U )
#define RCS_FOVR_ALARMS27_CNTER_RSLT_OFFSET ( 0x000001b4U )
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_OFFSET ( 0x00000200U )
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_OFFSET ( 0x00000204U )
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_OFFSET ( 0x00000208U )
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_OFFSET ( 0x0000020cU )
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_OFFSET ( 0x00000210U )
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_OFFSET ( 0x00000214U )
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_OFFSET ( 0x00000218U )
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_OFFSET ( 0x0000021cU )
#define RCS_FOVR_GPIO_SET0_GPIO_SET_EN_OFFSET ( 0x00000300U )
#define RCS_FOVR_GPIO_SET1_GPIO_SET_EN_OFFSET ( 0x00000310U )
#define RCS_FOVR_GPIO_SET2_GPIO_SET_EN_OFFSET ( 0x00000320U )
#define RCS_FOVR_GPIO_SET3_GPIO_SET_EN_OFFSET ( 0x00000330U )
#define RCS_FOVR_GPIO_SET4_GPIO_SET_EN_OFFSET ( 0x00000340U )
#define RCS_FOVR_GPIO_SET5_GPIO_SET_EN_OFFSET ( 0x00000350U )
#define RCS_FOVR_GPIO_SET6_GPIO_SET_EN_OFFSET ( 0x00000360U )
#define RCS_FOVR_GPIO_SET7_GPIO_SET_EN_OFFSET ( 0x00000370U )
#define RCS_FOVR_GPIO_SET8_GPIO_SET_EN_OFFSET ( 0x00000380U )
#define RCS_FOVR_GPIO_SET9_GPIO_SET_EN_OFFSET ( 0x00000390U )
#define RCS_FOVR_GPIO_SET10_GPIO_SET_EN_OFFSET ( 0x000003a0U )
#define RCS_FOVR_GPIO_SET11_GPIO_SET_EN_OFFSET ( 0x000003b0U )
#define RCS_FOVR_GPIO_SET12_GPIO_SET_EN_OFFSET ( 0x000003c0U )
#define RCS_FOVR_GPIO_SET13_GPIO_SET_EN_OFFSET ( 0x000003d0U )
#define RCS_FOVR_GPIO_SET14_GPIO_SET_EN_OFFSET ( 0x000003e0U )
#define RCS_FOVR_GPIO_SET15_GPIO_SET_EN_OFFSET ( 0x000003f0U )
#define RCS_FOVR_GPIO_SET16_GPIO_SET_EN_OFFSET ( 0x00000400U )
#define RCS_FOVR_GPIO_SET17_GPIO_SET_EN_OFFSET ( 0x00000410U )
#define RCS_FOVR_GPIO_SET18_GPIO_SET_EN_OFFSET ( 0x00000420U )
#define RCS_FOVR_GPIO_SET19_GPIO_SET_EN_OFFSET ( 0x00000430U )
#define RCS_FOVR_GPIO_SET20_GPIO_SET_EN_OFFSET ( 0x00000440U )
#define RCS_FOVR_GPIO_SET21_GPIO_SET_EN_OFFSET ( 0x00000450U )
#define RCS_FOVR_GPIO_SET22_GPIO_SET_EN_OFFSET ( 0x00000460U )
#define RCS_FOVR_GPIO_SET23_GPIO_SET_EN_OFFSET ( 0x00000470U )
#define RCS_FOVR_GPIO_SET24_GPIO_SET_EN_OFFSET ( 0x00000480U )
#define RCS_FOVR_GPIO_SET25_GPIO_SET_EN_OFFSET ( 0x00000490U )
#define RCS_FOVR_GPIO_SET26_GPIO_SET_EN_OFFSET ( 0x000004a0U )
#define RCS_FOVR_GPIO_SET27_GPIO_SET_EN_OFFSET ( 0x000004b0U )
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_OFFSET ( 0x00000500U )
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_OFFSET ( 0x00000504U )
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_OFFSET ( 0x00000508U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RCS_FOVR_ALARMS0_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS0_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS0_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS0_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS1_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS1_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS1_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS1_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS2_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS2_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS2_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS2_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS3_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS3_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS3_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS3_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS4_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS4_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS4_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS4_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS5_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS5_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS5_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS5_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS6_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS6_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS6_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS6_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS7_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS7_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS7_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS7_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS8_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS8_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS8_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS8_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS9_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS9_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS9_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS9_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS10_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS10_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS10_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS10_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS11_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS11_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS11_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS11_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS12_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS12_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS12_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS12_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS13_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS13_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS13_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS13_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS14_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS14_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS14_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS14_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS15_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS15_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS15_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS15_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS16_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS16_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS16_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS16_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS17_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS17_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS17_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS17_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS18_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS18_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS18_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS18_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS19_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS19_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS19_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS19_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS20_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS20_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS20_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS20_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS21_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS21_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS21_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS21_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS22_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS22_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS22_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS22_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS23_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS23_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS23_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS23_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS24_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS24_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS24_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS24_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS25_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS25_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS25_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS25_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS26_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS26_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS26_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS26_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALARMS27_CNTER_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS27_CNTER_CTL_OFFSET ) ))
#define RCS_FOVR_ALARMS27_CNTER_RSLT_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALARMS27_CNTER_RSLT_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_ALL_ALARMS_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_OFFSET ) ))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET0_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET0_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET1_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET1_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET2_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET2_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET3_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET3_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET4_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET4_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET5_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET5_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET6_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET6_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET7_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET7_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET8_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET8_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET9_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET9_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET10_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET10_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET11_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET11_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET12_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET12_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET13_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET13_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET14_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET14_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET15_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET15_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET16_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET16_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET17_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET17_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET18_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET18_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET19_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET19_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET20_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET20_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET21_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET21_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET22_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET22_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET23_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET23_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET24_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET24_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET25_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET25_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET26_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET26_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET27_GPIO_SET_EN_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET27_GPIO_SET_EN_OFFSET ) ))
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_OFFSET ) ))
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_OFFSET ) ))
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_ADR(_BASE) (( ( _BASE ) + ( RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RCS_FOVR_COM_REG_ALARMS0_COUNTER_CTL[28] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/alarms0/counter_ctl
  * FOVR,Overload and TX Alarm Counter Control
  */

typedef union {
  struct {
    uint32_t FOVR_OVERLOAD_EN : 1;
    ///< Set to 1 to enable FOVR/OVERLOAD/TX counters
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_alarms_cnter_ctl_reg_t;

#define RCS_FOVR_ALARMS_CNTER_CTL_DEFAULT (0x00000000U)
#define RCS_FOVR_ALARMS_CNTER_CTL_RD_MASK (0x00000001U)
#define RCS_FOVR_ALARMS_CNTER_CTL_WR_MASK (0x00000001U)


///< Set to 1 to enable FOVR/OVERLOAD/TX counters
#define RCS_FOVR_ALARMS_CNTER_CTL_FOVR_OVERLOAD_EN_BF_OFF ( 0)
#define RCS_FOVR_ALARMS_CNTER_CTL_FOVR_OVERLOAD_EN_BF_WID ( 1)
#define RCS_FOVR_ALARMS_CNTER_CTL_FOVR_OVERLOAD_EN_BF_MSK (0x00000001)
#define RCS_FOVR_ALARMS_CNTER_CTL_FOVR_OVERLOAD_EN_BF_DEF (0x00000000)
#define RCS_FOVR_ALARMS_CNTER_CTL_ARR_SZ0 (28)
#define RCS_FOVR_ALARMS_CNTER_CTL_ARRAY_STRIDE0 (0x0010)


/** @brief RCS_FOVR_COM_REG_ALARMS0_COUNTER_RSLT[28] register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/alarms0/counter_rslt
  * FOVR and Overload Counter Results
  */

typedef union {
  struct {
    uint32_t FOVR_OVERLOAD_TX_COUNTER : 4;
    ///< Current Count value of the FOVR/OVERLOAD/TX alarm. Saturates at 0xF
    ///< - CLEAR ON READ
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t FOVR_OVERLOAD_TX_ALARM : 1;
    ///< State of the FOVR/OVERLOAD/TX alarm. 1 = Alarm is set - CLEAR ON READ
    ///< AccessType="RO/C/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_alarms_cnter_rslt_reg_t;

#define RCS_FOVR_ALARMS_CNTER_RSLT_DEFAULT (0x00000000U)
#define RCS_FOVR_ALARMS_CNTER_RSLT_RD_MASK (0x0000010fU)
#define RCS_FOVR_ALARMS_CNTER_RSLT_WR_MASK (0x00000000U)


///< Current Count value of the FOVR/OVERLOAD/TX alarm. Saturates at 0xF
///< - CLEAR ON READ
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_CNTER_BF_OFF ( 0)
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_CNTER_BF_WID ( 4)
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_CNTER_BF_MSK (0x0000000F)
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_CNTER_BF_DEF (0x00000000)

///< State of the FOVR/OVERLOAD/TX alarm. 1 = Alarm is set - CLEAR ON READ
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_ALARM_BF_OFF ( 8)
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_ALARM_BF_WID ( 1)
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_ALARM_BF_MSK (0x00000100)
#define RCS_FOVR_ALARMS_CNTER_RSLT_FOVR_OVERLOAD_TX_ALARM_BF_DEF (0x00000000)
#define RCS_FOVR_ALARMS_CNTER_RSLT_ARR_SZ0 (28)
#define RCS_FOVR_ALARMS_CNTER_RSLT_ARRAY_STRIDE0 (0x0010)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_ALL_ALARMS register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/all_alarms
  * FOVR and OVERLOAD Alarm Summary
  */

typedef union {
  struct {
    uint32_t ALL_FOVR_ALARMS : 10;
    ///< A 1 in the bit field indicates that the corresponding FOVR alarm counter
    ///< is greater than 0. Reading this register will clear ALL FOVR,OVERLOAD
    ///< and TX counters/alarms
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t ALL_OVERLOAD_ALARMS : 10;
    ///< A 1 in the bit field indicates that the corresponding OVERLOAD alarm
    ///< counter is greater than 0. Reading this register will clear ALL FOVR,OVERLOAD
    ///< and TX counters/alarms
    ///< AccessType="RO/C/V" BitOffset="10" ResetValue="0x0"
    uint32_t ALL_TX_ALARMS : 8;
    ///< A 1 in the bit field indicates that the corresponding TX alarm counter
    ///< is greater than 0. Reading this register will clear ALL FOVR, OVERLOAD
    ///< and TX counters/alarms
    ///< AccessType="RO/C/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_all_alarms_reg_t;

#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_RD_MASK (0x0fffffffU)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_WR_MASK (0x00000000U)


///< A 1 in the bit field indicates that the corresponding FOVR alarm counter
///< is greater than 0. Reading this register will clear ALL FOVR,OVERLOAD
///< and TX counters/alarms
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_FOVR_ALARMS_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_FOVR_ALARMS_BF_WID (10)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_FOVR_ALARMS_BF_MSK (0x000003FF)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_FOVR_ALARMS_BF_DEF (0x00000000)

///< A 1 in the bit field indicates that the corresponding OVERLOAD alarm
///< counter is greater than 0. Reading this register will clear ALL FOVR,OVERLOAD
///< and TX counters/alarms
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_OVERLOAD_ALARMS_BF_OFF (10)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_OVERLOAD_ALARMS_BF_WID (10)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_OVERLOAD_ALARMS_BF_MSK (0x000FFC00)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_OVERLOAD_ALARMS_BF_DEF (0x00000000)

///< A 1 in the bit field indicates that the corresponding TX alarm counter
///< is greater than 0. Reading this register will clear ALL FOVR, OVERLOAD
///< and TX counters/alarms
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_TX_ALARMS_BF_OFF (20)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_TX_ALARMS_BF_WID ( 8)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_TX_ALARMS_BF_MSK (0x0FF00000)
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ALL_TX_ALARMS_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_FOVR_OVERLOAD_DISABLE register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/fovr_overload_disable
  * FOVR, OVERLOAD and TX Alarm Input Disable
  */

typedef union {
  struct {
    uint32_t ALL_FOVR_ALARMS_DISABLE : 1;
    ///< A 1 in the bit field indicates that the FOVR,OVERLOAD and TX inputs
    ///< will not be put into FIFO. 0 means normal operation
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_fovr_overload_dis_reg_t;

#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_RD_MASK (0x00000001U)
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_WR_MASK (0x00000001U)


///< A 1 in the bit field indicates that the FOVR,OVERLOAD and TX inputs
///< will not be put into FIFO. 0 means normal operation
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_ALL_FOVR_ALARMS_DIS_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_ALL_FOVR_ALARMS_DIS_BF_WID ( 1)
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_ALL_FOVR_ALARMS_DIS_BF_MSK (0x00000001)
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_ALL_FOVR_ALARMS_DIS_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_TX_ALARM_IN_GPIOSEL register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/tx_alarm_in_gpiosel
  * Select which GPIO in group 0 serves as TX Alarm Input
  */

typedef union {
  struct {
    uint32_t TX_ALARM_IN_GPIOSEL : 32;
    ///< A 1 in the bit field indicates that the corresponding GPIO bit serves
    ///< as TX inputs. Only 1 bit should be set to 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_tx_alarm_in_gpiosel_reg_t;

#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_RD_MASK (0xffffffffU)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_WR_MASK (0xffffffffU)


///< A 1 in the bit field indicates that the corresponding GPIO bit serves
///< as TX inputs. Only 1 bit should be set to 1
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_TX_ALARM_IN_GPIOSEL_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_TX_ALARM_IN_GPIOSEL_BF_WID (32)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_TX_ALARM_IN_GPIOSEL_BF_MSK (0xFFFFFFFF)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_TX_ALARM_IN_GPIOSEL_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_TX_ALARM_IN_MODE register description at address offset 0x20c
  *
  * Register default value:        0x00000003
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/tx_alarm_in_mode
  * Select how to detect TX Alarm Input
  */

typedef union {
  struct {
    uint32_t TX_ALARM_IN_MODE : 2;
    ///< 01:L->H; 10:H->L; 00: Level L; 11: Level H
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_tx_alarm_in_mode_reg_t;

#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_DEFAULT (0x00000003U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_RD_MASK (0x00000003U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_WR_MASK (0x00000003U)


///< 01:L->H; 10:H->L; 00: Level L; 11: Level H
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_TX_ALARM_IN_MODE_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_TX_ALARM_IN_MODE_BF_WID ( 2)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_TX_ALARM_IN_MODE_BF_MSK (0x00000003)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_TX_ALARM_IN_MODE_BF_DEF (0x00000003)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_TX_ALARM_IN_STS register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/tx_alarm_in_sts
  * current status of TX Alarm Input
  */

typedef union {
  struct {
    uint32_t TX_ALARM_IN_STATUS : 1;
    ///< 1: There is an active tx_alarm input trigged by gpio
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_tx_alarm_in_sts_reg_t;

#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_RD_MASK (0x00000001U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_WR_MASK (0x00000000U)


///< 1: There is an active tx_alarm input trigged by gpio
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_TX_ALARM_IN_STAT_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_TX_ALARM_IN_STAT_BF_WID ( 1)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_TX_ALARM_IN_STAT_BF_MSK (0x00000001)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_TX_ALARM_IN_STAT_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_TX_ALARM_IN_SET register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/tx_alarm_in_set
  * Force TX Alarm input for debug
  */

typedef union {
  struct {
    uint32_t TX_ALARM_IN_SET : 1;
    ///< 1: Force TX_ALARM_OUT being trigged, no matter gpio status or mode;
    ///< this bit can be cleared by writing 0 or write the tx_alarm_in_clr
    ///< register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_tx_alarm_in_set_reg_t;

#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_RD_MASK (0x00000001U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_WR_MASK (0x00000001U)


///< 1: Force TX_ALARM_OUT being trigged, no matter gpio status or mode;
///< this bit can be cleared by writing 0 or write the tx_alarm_in_clr
///< register
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_TX_ALARM_IN_SET_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_TX_ALARM_IN_SET_BF_WID ( 1)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_TX_ALARM_IN_SET_BF_MSK (0x00000001)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_TX_ALARM_IN_SET_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_TX_ALARM_IN_CLR register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/tx_alarm_in_clr
  * Clear TX Alarm Input
  */

typedef union {
  struct {
    uint32_t TX_ALARM_IN_CLEAR : 1;
    ///< Write to this register to clear tx_alarm input
    ///< AccessType="WO/C" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_tx_alarm_in_clr_reg_t;

#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_RD_MASK (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_WR_MASK (0x00000001U)


///< Write to this register to clear tx_alarm input
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_TX_ALARM_IN_CLR_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_TX_ALARM_IN_CLR_BF_WID ( 1)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_TX_ALARM_IN_CLR_BF_MSK (0x00000001)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_TX_ALARM_IN_CLR_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_ALL_ALARMS_TX_ALARM_IN_EN register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/all_alarms/tx_alarm_in_en
  * Enable TX Alarm output
  */

typedef union {
  struct {
    uint32_t TX_ALARM_IN_EN : 1;
    ///< 1: Enable TX_ALARM_OUT being trigged by GPIO
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_all_alarms_tx_alarm_in_en_reg_t;

#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_DEFAULT (0x00000000U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_RD_MASK (0x00000001U)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_WR_MASK (0x00000001U)


///< 1: Enable TX_ALARM_OUT being trigged by GPIO
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_TX_ALARM_IN_EN_BF_OFF ( 0)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_TX_ALARM_IN_EN_BF_WID ( 1)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_TX_ALARM_IN_EN_BF_MSK (0x00000001)
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_TX_ALARM_IN_EN_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_GPIO_SET0_GPIO_SET_EN[28] register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/gpio_set0/gpio_set_en
  * GPIO Set Enable
  */

typedef union {
  struct {
    uint32_t GPIO_SET_EN : 32;
    ///< GPIO Set Enable. When = 1, corresponding GPIO bit is driven to corresponding
    ///< GPIO_SET_VAL. GRP#0 vs #1 is chosen with gpio_set_ctl register
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_fovr_gpio_set_gpio_set_en_reg_t;

#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_DEFAULT (0x00000000U)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_RD_MASK (0xffffffffU)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_WR_MASK (0xffffffffU)


///< GPIO Set Enable. When = 1, corresponding GPIO bit is driven to corresponding
///< GPIO_SET_VAL. GRP#0 vs #1 is chosen with gpio_set_ctl register
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_GPIO_SET_EN_BF_OFF ( 0)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_GPIO_SET_EN_BF_WID (32)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_GPIO_SET_EN_BF_MSK (0xFFFFFFFF)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_GPIO_SET_EN_BF_DEF (0x00000000)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_ARR_SZ0 (28)
#define RCS_FOVR_GPIO_SET_GPIO_SET_EN_ARRAY_STRIDE0 (0x0010)


/** @brief RCS_FOVR_COM_REG_GPIO_SET_CTL_FOVR_GPIO_SET_CTL register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/gpio_set_ctl/fovr_gpio_set_ctl
  * HW GPIO Set config for FOVR
  */

typedef union {
  struct {
    uint32_t HW_SET_EN : 10;
    ///< Auto HW Set Enable. 1 bit per alarm, needs to be set to 1 to enable
    ///< the Auto GPIO set feature
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t GPIO_GRP_SEL : 10;
    ///< GPIO Group Select for Auto HW Set. 1 bit per alarm, where a value
    ///< of 0 means the alarm can set bits in GPIO Group 0, and a 1 means the
    ///< alarm can set bits in GPIO Group 1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_gpio_set_ctl_fovr_gpio_set_ctl_reg_t;

#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_DEFAULT (0x00000000U)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_RD_MASK (0x03ff03ffU)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_WR_MASK (0x03ff03ffU)


///< Auto HW Set Enable. 1 bit per alarm, needs to be set to 1 to enable
///< the Auto GPIO set feature
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_HW_SET_EN_BF_OFF ( 0)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_HW_SET_EN_BF_WID (10)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_HW_SET_EN_BF_MSK (0x000003FF)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_HW_SET_EN_BF_DEF (0x00000000)

///< GPIO Group Select for Auto HW Set. 1 bit per alarm, where a value
///< of 0 means the alarm can set bits in GPIO Group 0, and a 1 means the
///< alarm can set bits in GPIO Group 1
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_GPIO_GRP_SEL_BF_OFF (16)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_GPIO_GRP_SEL_BF_WID (10)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_GPIO_GRP_SEL_BF_MSK (0x03FF0000)
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_GPIO_GRP_SEL_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL register description at address offset 0x504
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/gpio_set_ctl/overload_gpio_set_ctl
  * HW GPIO Set config for OVERLOAD
  */

typedef union {
  struct {
    uint32_t HW_SET_EN : 10;
    ///< Auto HW Set Enable. 1 bit per alarm, needs to be set to 1 to enable
    ///< the Auto GPIO set feature
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t GPIO_GRP_SEL : 10;
    ///< GPIO Group Select for Auto HW Set. 1 bit per alarm, where a value
    ///< of 0 means the alarm can set bits in GPIO Group 0, and a 1 means the
    ///< alarm can set bits in GPIO Group 1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_gpio_set_ctl_overload_gpio_set_ctl_reg_t;

#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_DEFAULT (0x00000000U)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_RD_MASK (0x03ff03ffU)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_WR_MASK (0x03ff03ffU)


///< Auto HW Set Enable. 1 bit per alarm, needs to be set to 1 to enable
///< the Auto GPIO set feature
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_HW_SET_EN_BF_OFF ( 0)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_HW_SET_EN_BF_WID (10)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_HW_SET_EN_BF_MSK (0x000003FF)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_HW_SET_EN_BF_DEF (0x00000000)

///< GPIO Group Select for Auto HW Set. 1 bit per alarm, where a value
///< of 0 means the alarm can set bits in GPIO Group 0, and a 1 means the
///< alarm can set bits in GPIO Group 1
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_GPIO_GRP_SEL_BF_OFF (16)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_GPIO_GRP_SEL_BF_WID (10)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_GPIO_GRP_SEL_BF_MSK (0x03FF0000)
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_GPIO_GRP_SEL_BF_DEF (0x00000000)


/** @brief RCS_FOVR_COM_REG_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL register description at address offset 0x508
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_fovr_com/reg/gpio_set_ctl/txalarm_gpio_set_ctl
  * HW GPIO Set config for TX ALARM
  */

typedef union {
  struct {
    uint32_t HW_SET_EN : 8;
    ///< Auto HW Set Enable. 1 bit per alarm, needs to be set to 1 to enable
    ///< the Auto GPIO set feature
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t GPIO_GRP_SEL : 8;
    ///< GPIO Group Select for Auto HW Set. 1 bit per alarm, where a value
    ///< of 0 means the alarm can set bits in GPIO Group 0, and a 1 means the
    ///< alarm can set bits in GPIO Group 1
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rcs_fovr_gpio_set_ctl_txalarm_gpio_set_ctl_reg_t;

#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_DEFAULT (0x00000000U)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_RD_MASK (0x00ff00ffU)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_WR_MASK (0x00ff00ffU)


///< Auto HW Set Enable. 1 bit per alarm, needs to be set to 1 to enable
///< the Auto GPIO set feature
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_HW_SET_EN_BF_OFF ( 0)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_HW_SET_EN_BF_WID ( 8)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_HW_SET_EN_BF_MSK (0x000000FF)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_HW_SET_EN_BF_DEF (0x00000000)

///< GPIO Group Select for Auto HW Set. 1 bit per alarm, where a value
///< of 0 means the alarm can set bits in GPIO Group 0, and a 1 means the
///< alarm can set bits in GPIO Group 1
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_GPIO_GRP_SEL_BF_OFF (16)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_GPIO_GRP_SEL_BF_WID ( 8)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_GPIO_GRP_SEL_BF_MSK (0x00FF0000)
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_GPIO_GRP_SEL_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RCS_FOVR_ALARMS0_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS0_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS0_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS0_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS1_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS1_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS1_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS1_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS2_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS2_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS2_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS2_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS3_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS3_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS3_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS3_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS4_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS4_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS4_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS4_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS5_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS5_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS5_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS5_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS6_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS6_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS6_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS6_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS7_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS7_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS7_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS7_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS8_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS8_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS8_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS8_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS9_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS9_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS9_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS9_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS10_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS10_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS10_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS10_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS11_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS11_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS11_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS11_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS12_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS12_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS12_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS12_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS13_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS13_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS13_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS13_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS14_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS14_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS14_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS14_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS15_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS15_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS15_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS15_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS16_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS16_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS16_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS16_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS17_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS17_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS17_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS17_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS18_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS18_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS18_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS18_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS19_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS19_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS19_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS19_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS20_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS20_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS20_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS20_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS21_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS21_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS21_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS21_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS22_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS22_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS22_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS22_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS23_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS23_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS23_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS23_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS24_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS24_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS24_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS24_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS25_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS25_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS25_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS25_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS26_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS26_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS26_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS26_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALARMS27_CNTER_CTL_REG(_BASE) ((rcs_fovr_alarms_cnter_ctl_reg_t*) RCS_FOVR_ALARMS27_CNTER_CTL_ADR(_BASE))
#define RCS_FOVR_ALARMS27_CNTER_RSLT_REG(_BASE) ((rcs_fovr_alarms_cnter_rslt_reg_t*) RCS_FOVR_ALARMS27_CNTER_RSLT_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_ALL_ALARMS_REG(_BASE) ((rcs_fovr_all_alarms_all_alarms_reg_t*) RCS_FOVR_ALL_ALARMS_ALL_ALARMS_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_REG(_BASE) ((rcs_fovr_all_alarms_fovr_overload_dis_reg_t*) RCS_FOVR_ALL_ALARMS_FOVR_OVERLOAD_DIS_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_REG(_BASE) ((rcs_fovr_all_alarms_tx_alarm_in_gpiosel_reg_t*) RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_GPIOSEL_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_REG(_BASE) ((rcs_fovr_all_alarms_tx_alarm_in_mode_reg_t*) RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_MODE_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_REG(_BASE) ((rcs_fovr_all_alarms_tx_alarm_in_sts_reg_t*) RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_STS_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_REG(_BASE) ((rcs_fovr_all_alarms_tx_alarm_in_set_reg_t*) RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_SET_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_REG(_BASE) ((rcs_fovr_all_alarms_tx_alarm_in_clr_reg_t*) RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_CLR_ADR(_BASE))
#define RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_REG(_BASE) ((rcs_fovr_all_alarms_tx_alarm_in_en_reg_t*) RCS_FOVR_ALL_ALARMS_TX_ALARM_IN_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET0_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET0_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET1_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET1_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET2_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET2_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET3_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET3_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET4_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET4_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET5_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET5_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET6_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET6_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET7_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET7_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET8_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET8_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET9_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET9_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET10_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET10_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET11_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET11_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET12_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET12_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET13_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET13_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET14_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET14_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET15_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET15_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET16_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET16_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET17_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET17_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET18_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET18_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET19_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET19_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET20_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET20_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET21_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET21_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET22_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET22_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET23_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET23_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET24_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET24_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET25_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET25_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET26_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET26_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET27_GPIO_SET_EN_REG(_BASE) ((rcs_fovr_gpio_set_gpio_set_en_reg_t*) RCS_FOVR_GPIO_SET27_GPIO_SET_EN_ADR(_BASE))
#define RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_REG(_BASE) ((rcs_fovr_gpio_set_ctl_fovr_gpio_set_ctl_reg_t*) RCS_FOVR_GPIO_SET_CTL_FOVR_GPIO_SET_CTL_ADR(_BASE))
#define RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_REG(_BASE) ((rcs_fovr_gpio_set_ctl_overload_gpio_set_ctl_reg_t*) RCS_FOVR_GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL_ADR(_BASE))
#define RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_REG(_BASE) ((rcs_fovr_gpio_set_ctl_txalarm_gpio_set_ctl_reg_t*) RCS_FOVR_GPIO_SET_CTL_TXALARM_GPIO_SET_CTL_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS0_CNTER_CTL; /*< Address offset = 0x0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS0_CNTER_RSLT; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS1_CNTER_CTL; /*< Address offset = 0x10 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS1_CNTER_RSLT; /*< Address offset = 0x14 */
    const uint8_t        reservedArea1 [8];   /*< Address offset = 0x18 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS2_CNTER_CTL; /*< Address offset = 0x20 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS2_CNTER_RSLT; /*< Address offset = 0x24 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x28 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS3_CNTER_CTL; /*< Address offset = 0x30 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS3_CNTER_RSLT; /*< Address offset = 0x34 */
    const uint8_t        reservedArea3 [8];   /*< Address offset = 0x38 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS4_CNTER_CTL; /*< Address offset = 0x40 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS4_CNTER_RSLT; /*< Address offset = 0x44 */
    const uint8_t        reservedArea4 [8];   /*< Address offset = 0x48 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS5_CNTER_CTL; /*< Address offset = 0x50 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS5_CNTER_RSLT; /*< Address offset = 0x54 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0x58 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS6_CNTER_CTL; /*< Address offset = 0x60 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS6_CNTER_RSLT; /*< Address offset = 0x64 */
    const uint8_t        reservedArea6 [8];   /*< Address offset = 0x68 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS7_CNTER_CTL; /*< Address offset = 0x70 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS7_CNTER_RSLT; /*< Address offset = 0x74 */
    const uint8_t        reservedArea7 [8];   /*< Address offset = 0x78 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS8_CNTER_CTL; /*< Address offset = 0x80 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS8_CNTER_RSLT; /*< Address offset = 0x84 */
    const uint8_t        reservedArea8 [8];   /*< Address offset = 0x88 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS9_CNTER_CTL; /*< Address offset = 0x90 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS9_CNTER_RSLT; /*< Address offset = 0x94 */
    const uint8_t        reservedArea9 [8];   /*< Address offset = 0x98 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS10_CNTER_CTL; /*< Address offset = 0xa0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS10_CNTER_RSLT; /*< Address offset = 0xa4 */
    const uint8_t        reservedArea10 [8];  /*< Address offset = 0xa8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS11_CNTER_CTL; /*< Address offset = 0xb0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS11_CNTER_RSLT; /*< Address offset = 0xb4 */
    const uint8_t        reservedArea11 [8];  /*< Address offset = 0xb8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS12_CNTER_CTL; /*< Address offset = 0xc0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS12_CNTER_RSLT; /*< Address offset = 0xc4 */
    const uint8_t        reservedArea12 [8];  /*< Address offset = 0xc8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS13_CNTER_CTL; /*< Address offset = 0xd0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS13_CNTER_RSLT; /*< Address offset = 0xd4 */
    const uint8_t        reservedArea13 [8];  /*< Address offset = 0xd8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS14_CNTER_CTL; /*< Address offset = 0xe0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS14_CNTER_RSLT; /*< Address offset = 0xe4 */
    const uint8_t        reservedArea14 [8];  /*< Address offset = 0xe8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS15_CNTER_CTL; /*< Address offset = 0xf0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS15_CNTER_RSLT; /*< Address offset = 0xf4 */
    const uint8_t        reservedArea15 [8];  /*< Address offset = 0xf8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS16_CNTER_CTL; /*< Address offset = 0x100 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS16_CNTER_RSLT; /*< Address offset = 0x104 */
    const uint8_t        reservedArea16 [8];  /*< Address offset = 0x108 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS17_CNTER_CTL; /*< Address offset = 0x110 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS17_CNTER_RSLT; /*< Address offset = 0x114 */
    const uint8_t        reservedArea17 [8];  /*< Address offset = 0x118 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS18_CNTER_CTL; /*< Address offset = 0x120 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS18_CNTER_RSLT; /*< Address offset = 0x124 */
    const uint8_t        reservedArea18 [8];  /*< Address offset = 0x128 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS19_CNTER_CTL; /*< Address offset = 0x130 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS19_CNTER_RSLT; /*< Address offset = 0x134 */
    const uint8_t        reservedArea19 [8];  /*< Address offset = 0x138 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS20_CNTER_CTL; /*< Address offset = 0x140 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS20_CNTER_RSLT; /*< Address offset = 0x144 */
    const uint8_t        reservedArea20 [8];  /*< Address offset = 0x148 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS21_CNTER_CTL; /*< Address offset = 0x150 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS21_CNTER_RSLT; /*< Address offset = 0x154 */
    const uint8_t        reservedArea21 [8];  /*< Address offset = 0x158 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS22_CNTER_CTL; /*< Address offset = 0x160 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS22_CNTER_RSLT; /*< Address offset = 0x164 */
    const uint8_t        reservedArea22 [8];  /*< Address offset = 0x168 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS23_CNTER_CTL; /*< Address offset = 0x170 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS23_CNTER_RSLT; /*< Address offset = 0x174 */
    const uint8_t        reservedArea23 [8];  /*< Address offset = 0x178 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS24_CNTER_CTL; /*< Address offset = 0x180 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS24_CNTER_RSLT; /*< Address offset = 0x184 */
    const uint8_t        reservedArea24 [8];  /*< Address offset = 0x188 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS25_CNTER_CTL; /*< Address offset = 0x190 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS25_CNTER_RSLT; /*< Address offset = 0x194 */
    const uint8_t        reservedArea25 [8];  /*< Address offset = 0x198 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS26_CNTER_CTL; /*< Address offset = 0x1a0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS26_CNTER_RSLT; /*< Address offset = 0x1a4 */
    const uint8_t        reservedArea26 [8];  /*< Address offset = 0x1a8 */
    rcs_fovr_alarms_cnter_ctl_reg_t ALARMS27_CNTER_CTL; /*< Address offset = 0x1b0 */
    rcs_fovr_alarms_cnter_rslt_reg_t ALARMS27_CNTER_RSLT; /*< Address offset = 0x1b4 */
    const uint8_t        reservedArea27 [72]; /*< Address offset = 0x1b8 */
    rcs_fovr_all_alarms_all_alarms_reg_t ALL_ALARMS_ALL_ALARMS; /*< Address offset = 0x200 */
    rcs_fovr_all_alarms_fovr_overload_dis_reg_t ALL_ALARMS_FOVR_OVERLOAD_DIS; /*< Address offset = 0x204 */
    rcs_fovr_all_alarms_tx_alarm_in_gpiosel_reg_t ALL_ALARMS_TX_ALARM_IN_GPIOSEL; /*< Address offset = 0x208 */
    rcs_fovr_all_alarms_tx_alarm_in_mode_reg_t ALL_ALARMS_TX_ALARM_IN_MODE; /*< Address offset = 0x20c */
    rcs_fovr_all_alarms_tx_alarm_in_sts_reg_t ALL_ALARMS_TX_ALARM_IN_STS; /*< Address offset = 0x210 */
    rcs_fovr_all_alarms_tx_alarm_in_set_reg_t ALL_ALARMS_TX_ALARM_IN_SET; /*< Address offset = 0x214 */
    rcs_fovr_all_alarms_tx_alarm_in_clr_reg_t ALL_ALARMS_TX_ALARM_IN_CLR; /*< Address offset = 0x218 */
    rcs_fovr_all_alarms_tx_alarm_in_en_reg_t ALL_ALARMS_TX_ALARM_IN_EN; /*< Address offset = 0x21c */
    const uint8_t        reservedArea28 [224]; /*< Address offset = 0x220 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET0_GPIO_SET_EN; /*< Address offset = 0x300 */
    const uint8_t        reservedArea29 [12]; /*< Address offset = 0x304 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET1_GPIO_SET_EN; /*< Address offset = 0x310 */
    const uint8_t        reservedArea30 [12]; /*< Address offset = 0x314 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET2_GPIO_SET_EN; /*< Address offset = 0x320 */
    const uint8_t        reservedArea31 [12]; /*< Address offset = 0x324 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET3_GPIO_SET_EN; /*< Address offset = 0x330 */
    const uint8_t        reservedArea32 [12]; /*< Address offset = 0x334 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET4_GPIO_SET_EN; /*< Address offset = 0x340 */
    const uint8_t        reservedArea33 [12]; /*< Address offset = 0x344 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET5_GPIO_SET_EN; /*< Address offset = 0x350 */
    const uint8_t        reservedArea34 [12]; /*< Address offset = 0x354 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET6_GPIO_SET_EN; /*< Address offset = 0x360 */
    const uint8_t        reservedArea35 [12]; /*< Address offset = 0x364 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET7_GPIO_SET_EN; /*< Address offset = 0x370 */
    const uint8_t        reservedArea36 [12]; /*< Address offset = 0x374 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET8_GPIO_SET_EN; /*< Address offset = 0x380 */
    const uint8_t        reservedArea37 [12]; /*< Address offset = 0x384 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET9_GPIO_SET_EN; /*< Address offset = 0x390 */
    const uint8_t        reservedArea38 [12]; /*< Address offset = 0x394 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET10_GPIO_SET_EN; /*< Address offset = 0x3a0 */
    const uint8_t        reservedArea39 [12]; /*< Address offset = 0x3a4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET11_GPIO_SET_EN; /*< Address offset = 0x3b0 */
    const uint8_t        reservedArea40 [12]; /*< Address offset = 0x3b4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET12_GPIO_SET_EN; /*< Address offset = 0x3c0 */
    const uint8_t        reservedArea41 [12]; /*< Address offset = 0x3c4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET13_GPIO_SET_EN; /*< Address offset = 0x3d0 */
    const uint8_t        reservedArea42 [12]; /*< Address offset = 0x3d4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET14_GPIO_SET_EN; /*< Address offset = 0x3e0 */
    const uint8_t        reservedArea43 [12]; /*< Address offset = 0x3e4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET15_GPIO_SET_EN; /*< Address offset = 0x3f0 */
    const uint8_t        reservedArea44 [12]; /*< Address offset = 0x3f4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET16_GPIO_SET_EN; /*< Address offset = 0x400 */
    const uint8_t        reservedArea45 [12]; /*< Address offset = 0x404 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET17_GPIO_SET_EN; /*< Address offset = 0x410 */
    const uint8_t        reservedArea46 [12]; /*< Address offset = 0x414 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET18_GPIO_SET_EN; /*< Address offset = 0x420 */
    const uint8_t        reservedArea47 [12]; /*< Address offset = 0x424 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET19_GPIO_SET_EN; /*< Address offset = 0x430 */
    const uint8_t        reservedArea48 [12]; /*< Address offset = 0x434 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET20_GPIO_SET_EN; /*< Address offset = 0x440 */
    const uint8_t        reservedArea49 [12]; /*< Address offset = 0x444 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET21_GPIO_SET_EN; /*< Address offset = 0x450 */
    const uint8_t        reservedArea50 [12]; /*< Address offset = 0x454 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET22_GPIO_SET_EN; /*< Address offset = 0x460 */
    const uint8_t        reservedArea51 [12]; /*< Address offset = 0x464 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET23_GPIO_SET_EN; /*< Address offset = 0x470 */
    const uint8_t        reservedArea52 [12]; /*< Address offset = 0x474 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET24_GPIO_SET_EN; /*< Address offset = 0x480 */
    const uint8_t        reservedArea53 [12]; /*< Address offset = 0x484 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET25_GPIO_SET_EN; /*< Address offset = 0x490 */
    const uint8_t        reservedArea54 [12]; /*< Address offset = 0x494 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET26_GPIO_SET_EN; /*< Address offset = 0x4a0 */
    const uint8_t        reservedArea55 [12]; /*< Address offset = 0x4a4 */
    rcs_fovr_gpio_set_gpio_set_en_reg_t GPIO_SET27_GPIO_SET_EN; /*< Address offset = 0x4b0 */
    const uint8_t        reservedArea56 [76]; /*< Address offset = 0x4b4 */
    rcs_fovr_gpio_set_ctl_fovr_gpio_set_ctl_reg_t GPIO_SET_CTL_FOVR_GPIO_SET_CTL; /*< Address offset = 0x500 */
    rcs_fovr_gpio_set_ctl_overload_gpio_set_ctl_reg_t GPIO_SET_CTL_OVERLOAD_GPIO_SET_CTL; /*< Address offset = 0x504 */
    rcs_fovr_gpio_set_ctl_txalarm_gpio_set_ctl_reg_t GPIO_SET_CTL_TXALARM_GPIO_SET_CTL; /*< Address offset = 0x508 */
} rcs_fovr_t;     // size: 0x017c

// AddressSpace struct pointer
//
#define RCS_FOVR_METER0  ((rcs_fovr_t*) RCS_FOVR_METER0_BASE)
#define RCS_FOVR_METER1  ((rcs_fovr_t*) RCS_FOVR_METER1_BASE)

// ******************************************* /Address Space

#endif      // _RCS_FOVR_H_

