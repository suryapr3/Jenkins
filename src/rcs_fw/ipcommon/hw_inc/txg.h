#ifndef _TXG_H_
#define _TXG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define TRX_SYS0_TXG0_BASE    ( 0x05263000 )
#define TRX_SYS0_TXG1_BASE    ( 0x05273000 )
#define TRX_SYS1_TXG0_BASE    ( 0x05283000 )
#define TRX_SYS1_TXG1_BASE    ( 0x05293000 )
#define TRX_SYS2_TXG0_BASE    ( 0x052a3000 )
#define TRX_SYS2_TXG1_BASE    ( 0x052b3000 )
#define TRX_SYS3_TXG0_BASE    ( 0x052c3000 )
#define TRX_SYS3_TXG1_BASE    ( 0x052d3000 )
#define TRX_SYS4_TXG0_BASE    ( 0x052e3000 )
#define TRX_SYS4_TXG1_BASE    ( 0x052f3000 )
#define TRX_SYS5_TXG0_BASE    ( 0x05303000 )
#define TRX_SYS5_TXG1_BASE    ( 0x05313000 )
#define TRX_SYS6_TXG0_BASE    ( 0x05323000 )
#define TRX_SYS6_TXG1_BASE    ( 0x05333000 )
#define TRX_SYS7_TXG0_BASE    ( 0x05343000 )
#define TRX_SYS7_TXG1_BASE    ( 0x05353000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TXG_STEP_SIZE_SHDW_OFFSET ( 0x00000000U )
#define TXG_GAIN_RAMP_VAL_SHDW_OFFSET ( 0x00000004U )
#define TXG_PHASE_VAL_SHDW_OFFSET ( 0x00000008U )
#define TXG_STEP_SIZE_LIVE_OFFSET ( 0x0000000cU )
#define TXG_GAIN_RAMP_VAL_LIVE_OFFSET ( 0x00000010U )
#define TXG_PHASE_VAL_LIVE_OFFSET ( 0x00000014U )
#define TXG_SCRATCH_OFFSET       ( 0x00000018U )
#define TXG_BFN_UPDATE_OFFSET    ( 0x0000001cU )
#define TXG_SEL_OFFSET    ( 0x00000020U )
#define TXG_SWITCH_OFFSET    ( 0x00000024U )
#define TXG_TMR_CFG_OFFSET    ( 0x00000028U )
#define TXG_TMR_ERR_OFFSET     ( 0x0000002cU )
#define TXG_BYP_OFFSET        ( 0x00000030U )
#define TXG_TXE_RAMP_VAL_OFFSET ( 0x00000034U )
#define TXG_TX_SM_STATE_OFFSET   ( 0x00000038U )
#define TXG_GAIN_SEL_OFFSET      ( 0x0000003cU )
#define TXG_INT_STAT_OFFSET    ( 0x00000040U )
#define TXG_INT_HIGH_EN_OFFSET   ( 0x00000044U )
#define TXG_INT_LOW_EN_OFFSET    ( 0x00000048U )
#define TXG_INT_CLR_OFFSET     ( 0x0000004cU )
#define TXG_INT_FORCE_OFFSET     ( 0x00000050U )
#define TXG_AC_FAST_GAIN_I_OFFSET ( 0x00000054U )
#define TXG_AC_FAST_GAIN_Q_OFFSET ( 0x00000058U )
#define TXG_AC_FAST_GAIN_EN_OFFSET ( 0x0000005cU )
#define TXG_STATIC_HOLD_MASK_OFFSET ( 0x00000060U )
#define TXG_TXE_DELAY_OFFSET     ( 0x00000064U )
#define TXG_TXE_DELTA_DELAY_OFFSET ( 0x00000068U )
#define TXG_APB_BRDG_STAT_OFFSET ( 0x0000006cU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TXG_STEP_SIZE_SHDW_ADR(_BASE)   (( ( _BASE ) + ( TXG_STEP_SIZE_SHDW_OFFSET ) ))
#define TXG_GAIN_RAMP_VAL_SHDW_ADR(_BASE) (( ( _BASE ) + ( TXG_GAIN_RAMP_VAL_SHDW_OFFSET ) ))
#define TXG_PHASE_VAL_SHDW_ADR(_BASE) (( ( _BASE ) + ( TXG_PHASE_VAL_SHDW_OFFSET ) ))
#define TXG_STEP_SIZE_LIVE_ADR(_BASE)   (( ( _BASE ) + ( TXG_STEP_SIZE_LIVE_OFFSET ) ))
#define TXG_GAIN_RAMP_VAL_LIVE_ADR(_BASE) (( ( _BASE ) + ( TXG_GAIN_RAMP_VAL_LIVE_OFFSET ) ))
#define TXG_PHASE_VAL_LIVE_ADR(_BASE) (( ( _BASE ) + ( TXG_PHASE_VAL_LIVE_OFFSET ) ))
#define TXG_SCRATCH_ADR(_BASE)          (( ( _BASE ) + ( TXG_SCRATCH_OFFSET ) ))
#define TXG_BFN_UPDATE_ADR(_BASE)       (( ( _BASE ) + ( TXG_BFN_UPDATE_OFFSET ) ))
#define TXG_SEL_ADR(_BASE)       (( ( _BASE ) + ( TXG_SEL_OFFSET ) ))
#define TXG_SWITCH_ADR(_BASE)       (( ( _BASE ) + ( TXG_SWITCH_OFFSET ) ))
#define TXG_TMR_CFG_ADR(_BASE)       (( ( _BASE ) + ( TXG_TMR_CFG_OFFSET ) ))
#define TXG_TMR_ERR_ADR(_BASE)        (( ( _BASE ) + ( TXG_TMR_ERR_OFFSET ) ))
#define TXG_BYP_ADR(_BASE)           (( ( _BASE ) + ( TXG_BYP_OFFSET ) ))
#define TXG_TXE_RAMP_VAL_ADR(_BASE)   (( ( _BASE ) + ( TXG_TXE_RAMP_VAL_OFFSET ) ))
#define TXG_TX_SM_STATE_ADR(_BASE)      (( ( _BASE ) + ( TXG_TX_SM_STATE_OFFSET ) ))
#define TXG_GAIN_SEL_ADR(_BASE)         (( ( _BASE ) + ( TXG_GAIN_SEL_OFFSET ) ))
#define TXG_INT_STAT_ADR(_BASE)       (( ( _BASE ) + ( TXG_INT_STAT_OFFSET ) ))
#define TXG_INT_HIGH_EN_ADR(_BASE)      (( ( _BASE ) + ( TXG_INT_HIGH_EN_OFFSET ) ))
#define TXG_INT_LOW_EN_ADR(_BASE)       (( ( _BASE ) + ( TXG_INT_LOW_EN_OFFSET ) ))
#define TXG_INT_CLR_ADR(_BASE)        (( ( _BASE ) + ( TXG_INT_CLR_OFFSET ) ))
#define TXG_INT_FORCE_ADR(_BASE)        (( ( _BASE ) + ( TXG_INT_FORCE_OFFSET ) ))
#define TXG_AC_FAST_GAIN_I_ADR(_BASE)   (( ( _BASE ) + ( TXG_AC_FAST_GAIN_I_OFFSET ) ))
#define TXG_AC_FAST_GAIN_Q_ADR(_BASE)   (( ( _BASE ) + ( TXG_AC_FAST_GAIN_Q_OFFSET ) ))
#define TXG_AC_FAST_GAIN_EN_ADR(_BASE) (( ( _BASE ) + ( TXG_AC_FAST_GAIN_EN_OFFSET ) ))
#define TXG_STATIC_HOLD_MASK_ADR(_BASE) (( ( _BASE ) + ( TXG_STATIC_HOLD_MASK_OFFSET ) ))
#define TXG_TXE_DELAY_ADR(_BASE)        (( ( _BASE ) + ( TXG_TXE_DELAY_OFFSET ) ))
#define TXG_TXE_DELTA_DELAY_ADR(_BASE)  (( ( _BASE ) + ( TXG_TXE_DELTA_DELAY_OFFSET ) ))
#define TXG_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( TXG_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TXG_MAP_REG_STEP_SIZE_SHDW register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/STEP_SIZE_SHDW
  * Step Size Register
  */

typedef union {
  struct {
    uint32_t DOWN : 4;
    ///< Step down size parameter. 4b unsigned number.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t UP : 4;
    ///< Step up size parameter. 4b unsigned number
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PRE_NORMAL : 4;
    ///< Pre-Normal Step up size parameter. 4b unsigned parameter
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DOWN_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (Ramp Down HalfShift)
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t UP_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (Normal HalfShift)
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t PN_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (Pre-Normal HalfShift)
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} txg_step_size_shdw_reg_t;

#define TXG_STEP_SIZE_SHDW_DEFAULT (0x00000000U)
#define TXG_STEP_SIZE_SHDW_RD_MASK (0x00007fffU)
#define TXG_STEP_SIZE_SHDW_WR_MASK (0x00007fffU)


///< Step down size parameter. 4b unsigned number.
#define TXG_STEP_SIZE_SHDW_DOWN_BF_OFF ( 0)
#define TXG_STEP_SIZE_SHDW_DOWN_BF_WID ( 4)
#define TXG_STEP_SIZE_SHDW_DOWN_BF_MSK (0x0000000F)
#define TXG_STEP_SIZE_SHDW_DOWN_BF_DEF (0x00000000)

///< Step up size parameter. 4b unsigned number
#define TXG_STEP_SIZE_SHDW_UP_BF_OFF ( 4)
#define TXG_STEP_SIZE_SHDW_UP_BF_WID ( 4)
#define TXG_STEP_SIZE_SHDW_UP_BF_MSK (0x000000F0)
#define TXG_STEP_SIZE_SHDW_UP_BF_DEF (0x00000000)

///< Pre-Normal Step up size parameter. 4b unsigned parameter
#define TXG_STEP_SIZE_SHDW_PRE_NORMAL_BF_OFF ( 8)
#define TXG_STEP_SIZE_SHDW_PRE_NORMAL_BF_WID ( 4)
#define TXG_STEP_SIZE_SHDW_PRE_NORMAL_BF_MSK (0x00000F00)
#define TXG_STEP_SIZE_SHDW_PRE_NORMAL_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (Ramp Down HalfShift)
#define TXG_STEP_SIZE_SHDW_DOWN_HALFSHIFT_BF_OFF (12)
#define TXG_STEP_SIZE_SHDW_DOWN_HALFSHIFT_BF_WID ( 1)
#define TXG_STEP_SIZE_SHDW_DOWN_HALFSHIFT_BF_MSK (0x00001000)
#define TXG_STEP_SIZE_SHDW_DOWN_HALFSHIFT_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (Normal HalfShift)
#define TXG_STEP_SIZE_SHDW_UP_HALFSHIFT_BF_OFF (13)
#define TXG_STEP_SIZE_SHDW_UP_HALFSHIFT_BF_WID ( 1)
#define TXG_STEP_SIZE_SHDW_UP_HALFSHIFT_BF_MSK (0x00002000)
#define TXG_STEP_SIZE_SHDW_UP_HALFSHIFT_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (Pre-Normal HalfShift)
#define TXG_STEP_SIZE_SHDW_PN_HALFSHIFT_BF_OFF (14)
#define TXG_STEP_SIZE_SHDW_PN_HALFSHIFT_BF_WID ( 1)
#define TXG_STEP_SIZE_SHDW_PN_HALFSHIFT_BF_MSK (0x00004000)
#define TXG_STEP_SIZE_SHDW_PN_HALFSHIFT_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_GAIN_RAMP_VALUE_SHDW register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/GAIN_RAMP_VALUE_SHDW
  * Ramp Gain Value
  */

typedef union {
  struct {
    uint32_t MIN_GAIN : 16;
    ///< Gain down (minGain). 16b unsigned number
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t MAX_GAIN : 16;
    ///< Gain up (maxGain). 16b unsigned number.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} txg_gain_ramp_val_shdw_reg_t;

#define TXG_GAIN_RAMP_VAL_SHDW_DEFAULT (0x00000000U)
#define TXG_GAIN_RAMP_VAL_SHDW_RD_MASK (0xffffffffU)
#define TXG_GAIN_RAMP_VAL_SHDW_WR_MASK (0xffffffffU)


///< Gain down (minGain). 16b unsigned number
#define TXG_GAIN_RAMP_VAL_SHDW_MIN_GAIN_BF_OFF ( 0)
#define TXG_GAIN_RAMP_VAL_SHDW_MIN_GAIN_BF_WID (16)
#define TXG_GAIN_RAMP_VAL_SHDW_MIN_GAIN_BF_MSK (0x0000FFFF)
#define TXG_GAIN_RAMP_VAL_SHDW_MIN_GAIN_BF_DEF (0x00000000)

///< Gain up (maxGain). 16b unsigned number.
#define TXG_GAIN_RAMP_VAL_SHDW_MAX_GAIN_BF_OFF (16)
#define TXG_GAIN_RAMP_VAL_SHDW_MAX_GAIN_BF_WID (16)
#define TXG_GAIN_RAMP_VAL_SHDW_MAX_GAIN_BF_MSK (0xFFFF0000)
#define TXG_GAIN_RAMP_VAL_SHDW_MAX_GAIN_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_PHASE_VALUE_SHDW register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/PHASE_VALUE_SHDW
  * Phase Real Shadow Register
  */

typedef union {
  struct {
    uint32_t PHASE_REAL : 12;
    ///< Phase Real. 12b signed number. Multiplied to Gain value to get iGain
    ///< value used in complex multiplier.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PHASE_IMAG : 12;
    ///< Phase Imaginary. 12b signed number. Multiplied to Gain value to get
    ///< qGain value used in complex multiplier.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} txg_phase_val_shdw_reg_t;

#define TXG_PHASE_VAL_SHDW_DEFAULT (0x00000000U)
#define TXG_PHASE_VAL_SHDW_RD_MASK (0x00ffffffU)
#define TXG_PHASE_VAL_SHDW_WR_MASK (0x00ffffffU)


///< Phase Real. 12b signed number. Multiplied to Gain value to get iGain
///< value used in complex multiplier.
#define TXG_PHASE_VAL_SHDW_PHASE_REAL_BF_OFF ( 0)
#define TXG_PHASE_VAL_SHDW_PHASE_REAL_BF_WID (12)
#define TXG_PHASE_VAL_SHDW_PHASE_REAL_BF_MSK (0x00000FFF)
#define TXG_PHASE_VAL_SHDW_PHASE_REAL_BF_DEF (0x00000000)

///< Phase Imaginary. 12b signed number. Multiplied to Gain value to get
///< qGain value used in complex multiplier.
#define TXG_PHASE_VAL_SHDW_PHASE_IMAG_BF_OFF (12)
#define TXG_PHASE_VAL_SHDW_PHASE_IMAG_BF_WID (12)
#define TXG_PHASE_VAL_SHDW_PHASE_IMAG_BF_MSK (0x00FFF000)
#define TXG_PHASE_VAL_SHDW_PHASE_IMAG_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_STEP_SIZE_LIVE register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/STEP_SIZE_LIVE
  * Step Size Live Register
  */

typedef union {
  struct {
    uint32_t DOWN : 4;
    ///< Step down size parameter. 4b unsigned number.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t UP : 4;
    ///< Step up size parameter. 4b unsigned number
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t PRE_NORMAL : 4;
    ///< Pre-Normal Step up size parameter. 4b unsigned parameter; Recovery
    ///< Step size after slew rate has lowered gain to a minimum.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t DOWN_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (Ramp Down HalfShift)
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t UP_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (Normal HalfShift)
    ///< AccessType="RW/V" BitOffset="13" ResetValue="0x0"
    uint32_t PN_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (Pre-Normal HalfShift)
    ///< AccessType="RW/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} txg_step_size_live_reg_t;

#define TXG_STEP_SIZE_LIVE_DEFAULT (0x00000000U)
#define TXG_STEP_SIZE_LIVE_RD_MASK (0x00007fffU)
#define TXG_STEP_SIZE_LIVE_WR_MASK (0x00007fffU)


///< Step down size parameter. 4b unsigned number.
#define TXG_STEP_SIZE_LIVE_DOWN_BF_OFF ( 0)
#define TXG_STEP_SIZE_LIVE_DOWN_BF_WID ( 4)
#define TXG_STEP_SIZE_LIVE_DOWN_BF_MSK (0x0000000F)
#define TXG_STEP_SIZE_LIVE_DOWN_BF_DEF (0x00000000)

///< Step up size parameter. 4b unsigned number
#define TXG_STEP_SIZE_LIVE_UP_BF_OFF ( 4)
#define TXG_STEP_SIZE_LIVE_UP_BF_WID ( 4)
#define TXG_STEP_SIZE_LIVE_UP_BF_MSK (0x000000F0)
#define TXG_STEP_SIZE_LIVE_UP_BF_DEF (0x00000000)

///< Pre-Normal Step up size parameter. 4b unsigned parameter; Recovery
///< Step size after slew rate has lowered gain to a minimum.
#define TXG_STEP_SIZE_LIVE_PRE_NORMAL_BF_OFF ( 8)
#define TXG_STEP_SIZE_LIVE_PRE_NORMAL_BF_WID ( 4)
#define TXG_STEP_SIZE_LIVE_PRE_NORMAL_BF_MSK (0x00000F00)
#define TXG_STEP_SIZE_LIVE_PRE_NORMAL_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (Ramp Down HalfShift)
#define TXG_STEP_SIZE_LIVE_DOWN_HALFSHIFT_BF_OFF (12)
#define TXG_STEP_SIZE_LIVE_DOWN_HALFSHIFT_BF_WID ( 1)
#define TXG_STEP_SIZE_LIVE_DOWN_HALFSHIFT_BF_MSK (0x00001000)
#define TXG_STEP_SIZE_LIVE_DOWN_HALFSHIFT_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (Normal HalfShift)
#define TXG_STEP_SIZE_LIVE_UP_HALFSHIFT_BF_OFF (13)
#define TXG_STEP_SIZE_LIVE_UP_HALFSHIFT_BF_WID ( 1)
#define TXG_STEP_SIZE_LIVE_UP_HALFSHIFT_BF_MSK (0x00002000)
#define TXG_STEP_SIZE_LIVE_UP_HALFSHIFT_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (Pre-Normal HalfShift)
#define TXG_STEP_SIZE_LIVE_PN_HALFSHIFT_BF_OFF (14)
#define TXG_STEP_SIZE_LIVE_PN_HALFSHIFT_BF_WID ( 1)
#define TXG_STEP_SIZE_LIVE_PN_HALFSHIFT_BF_MSK (0x00004000)
#define TXG_STEP_SIZE_LIVE_PN_HALFSHIFT_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_GAIN_RAMP_VALUE_LIVE register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/GAIN_RAMP_VALUE_LIVE
  * Live Gain Ramp Value
  */

typedef union {
  struct {
    uint32_t MIN_GAIN : 16;
    ///< Gain down (minGain). 16b unsigned number
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t MAX_GAIN : 16;
    ///< Gain up (maxGain). 16b unsigned number.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} txg_gain_ramp_val_live_reg_t;

#define TXG_GAIN_RAMP_VAL_LIVE_DEFAULT (0x00000000U)
#define TXG_GAIN_RAMP_VAL_LIVE_RD_MASK (0xffffffffU)
#define TXG_GAIN_RAMP_VAL_LIVE_WR_MASK (0xffffffffU)


///< Gain down (minGain). 16b unsigned number
#define TXG_GAIN_RAMP_VAL_LIVE_MIN_GAIN_BF_OFF ( 0)
#define TXG_GAIN_RAMP_VAL_LIVE_MIN_GAIN_BF_WID (16)
#define TXG_GAIN_RAMP_VAL_LIVE_MIN_GAIN_BF_MSK (0x0000FFFF)
#define TXG_GAIN_RAMP_VAL_LIVE_MIN_GAIN_BF_DEF (0x00000000)

///< Gain up (maxGain). 16b unsigned number.
#define TXG_GAIN_RAMP_VAL_LIVE_MAX_GAIN_BF_OFF (16)
#define TXG_GAIN_RAMP_VAL_LIVE_MAX_GAIN_BF_WID (16)
#define TXG_GAIN_RAMP_VAL_LIVE_MAX_GAIN_BF_MSK (0xFFFF0000)
#define TXG_GAIN_RAMP_VAL_LIVE_MAX_GAIN_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_PHASE_VALUE_LIVE register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/PHASE_VALUE_LIVE
  * Phase Values Live Register
  */

typedef union {
  struct {
    uint32_t PHASE_REAL : 12;
    ///< Phase Real. 12b signed number.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t PHASE_IMAG : 12;
    ///< Phase Real. 12b signed number.
    ///< AccessType="RW/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} txg_phase_val_live_reg_t;

#define TXG_PHASE_VAL_LIVE_DEFAULT (0x00000000U)
#define TXG_PHASE_VAL_LIVE_RD_MASK (0x00ffffffU)
#define TXG_PHASE_VAL_LIVE_WR_MASK (0x00ffffffU)


///< Phase Real. 12b signed number.
#define TXG_PHASE_VAL_LIVE_PHASE_REAL_BF_OFF ( 0)
#define TXG_PHASE_VAL_LIVE_PHASE_REAL_BF_WID (12)
#define TXG_PHASE_VAL_LIVE_PHASE_REAL_BF_MSK (0x00000FFF)
#define TXG_PHASE_VAL_LIVE_PHASE_REAL_BF_DEF (0x00000000)

///< Phase Real. 12b signed number.
#define TXG_PHASE_VAL_LIVE_PHASE_IMAG_BF_OFF (12)
#define TXG_PHASE_VAL_LIVE_PHASE_IMAG_BF_WID (12)
#define TXG_PHASE_VAL_LIVE_PHASE_IMAG_BF_MSK (0x00FFF000)
#define TXG_PHASE_VAL_LIVE_PHASE_IMAG_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_SCRATCH register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} txg_scratch_reg_t;

#define TXG_SCRATCH_DEFAULT (0x00000000U)
#define TXG_SCRATCH_RD_MASK (0xffffffffU)
#define TXG_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field
#define TXG_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define TXG_SCRATCH_SCRATCHPAD_BF_WID (32)
#define TXG_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define TXG_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_BFN_UPDATE register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/BFN_UPDATE
  * BFN Update
  */

typedef union {
  struct {
    uint32_t BFN_UPDATE : 1;
    ///< When Asserted, Live register is overwritten with shadow register
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txg_bfn_update_reg_t;

#define TXG_BFN_UPDATE_DEFAULT (0x00000000U)
#define TXG_BFN_UPDATE_RD_MASK (0x00000001U)
#define TXG_BFN_UPDATE_WR_MASK (0x00000000U)


///< When Asserted, Live register is overwritten with shadow register
#define TXG_BFN_UPDATE_BFN_UPDATE_BF_OFF ( 0)
#define TXG_BFN_UPDATE_BFN_UPDATE_BF_WID ( 1)
#define TXG_BFN_UPDATE_BFN_UPDATE_BF_MSK (0x00000001)
#define TXG_BFN_UPDATE_BFN_UPDATE_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_REG_SELECT register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/REG_SELECT
  * Reg Select
  */

typedef union {
  struct {
    uint32_t BYP_BFN : 1;
    ///< Bypass BFN, Asserted when using the BFN Update signal to update Shadow/Live
    ///< Registers is not desired
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SELECT : 1;
    ///< Register Select, used when BYP_BFN is asserted, reg switch without
    ///< bfn timed event
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_sel_reg_t;

#define TXG_SEL_DEFAULT (0x00000000U)
#define TXG_SEL_RD_MASK (0x00000003U)
#define TXG_SEL_WR_MASK (0x00000003U)


///< Bypass BFN, Asserted when using the BFN Update signal to update Shadow/Live
///< Registers is not desired
#define TXG_SEL_BYP_BFN_BF_OFF ( 0)
#define TXG_SEL_BYP_BFN_BF_WID ( 1)
#define TXG_SEL_BYP_BFN_BF_MSK (0x00000001)
#define TXG_SEL_BYP_BFN_BF_DEF (0x00000000)

///< Register Select, used when BYP_BFN is asserted, reg switch without
///< bfn timed event
#define TXG_SEL_BF_OFF ( 1)
#define TXG_SEL_BF_WID ( 1)
#define TXG_SEL_BF_MSK (0x00000002)
#define TXG_SEL_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_REG_SWITCH register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/REG_SWITCH
  * Reg Switch
  */

typedef union {
  struct {
    uint32_t REG_SWITCH : 1;
    ///< Sticky register, asserted to indicate if either Shadow/Live update
    ///< has occured, or a different register has been selected throught the
    ///< REG_SELECT register (BYP_BFN Case), only remains asserted for one
    ///< clock cycle.
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txg_switch_reg_t;

#define TXG_SWITCH_DEFAULT (0x00000000U)
#define TXG_SWITCH_RD_MASK (0x00000001U)
#define TXG_SWITCH_WR_MASK (0x00000001U)


///< Sticky register, asserted to indicate if either Shadow/Live update
///< has occured, or a different register has been selected throught the
///< REG_SELECT register (BYP_BFN Case), only remains asserted for one
///< clock cycle.
#define TXG_SWITCH_BF_OFF ( 0)
#define TXG_SWITCH_BF_WID ( 1)
#define TXG_SWITCH_BF_MSK (0x00000001)
#define TXG_SWITCH_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_TMR_CONFIG register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/TMR_CONFIG
  * TXG TMR Config Address Map
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 2;
    ///< TMR Test Control:  * (0) write all 3 copies (default behavior) * (1)
    ///< write copy 1 only * (2) write copy 2 only * (3) write copy 3 only
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_tmr_cfg_reg_t;

#define TXG_TMR_CFG_DEFAULT (0x00000000U)
#define TXG_TMR_CFG_RD_MASK (0x00000003U)
#define TXG_TMR_CFG_WR_MASK (0x00000003U)


///< TMR Test Control:  * (0) write all 3 copies (default behavior) * (1)
///< write copy 1 only * (2) write copy 2 only * (3) write copy 3 only
#define TXG_TMR_CFG_TEST_CTRL_BF_OFF ( 0)
#define TXG_TMR_CFG_TEST_CTRL_BF_WID ( 2)
#define TXG_TMR_CFG_TEST_CTRL_BF_MSK (0x00000003)
#define TXG_TMR_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_TMR_ERROR register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/TMR_ERROR
  * Triple Module Redundancy Configuration Error Register
  */

typedef union {
  struct {
    uint32_t TMR_CONFIG : 1;
    ///< TMR configuration
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SELECT : 1;
    ///< GAIN/STEP Values reg select
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t GAIN_VALUE0 : 1;
    ///< Ramp Gain Table, reg 0
    ///< AccessType="RW/1C/V" BitOffset="2" ResetValue="0x0"
    uint32_t GAIN_VALUE1 : 1;
    ///< Ramp Gain Table, reg 1
    ///< AccessType="RW/1C/V" BitOffset="3" ResetValue="0x0"
    uint32_t STEP_SIZE0 : 1;
    ///< Ramp Step Table, reg 0
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t STEP_SIZE1 : 1;
    ///< Ramp Step Table, reg 1
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t PHASE_VALUE0 : 1;
    ///< Phase Value, reg 0
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t PHASE_VALUE1 : 1;
    ///< Phase Value, reg 1
    ///< AccessType="RW/1C/V" BitOffset="7" ResetValue="0x0"
    uint32_t TXE_RAMP_VALUE : 1;
    ///< TXE Ramp Value, includes gain, shift and half shift
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t AC_FAST_GAIN_Q : 1;
    ///< AC Fast Gain Q
    ///< AccessType="RW/1C/V" BitOffset="9" ResetValue="0x0"
    uint32_t AC_FAST_GAIN_I : 1;
    ///< AC Fast Gain I
    ///< AccessType="RW/1C/V" BitOffset="10" ResetValue="0x0"
    uint32_t BYP_CONFIG : 1;
    ///< Bypass Config
    ///< AccessType="RW/1C/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} txg_tmr_err_reg_t;

#define TXG_TMR_ERR_DEFAULT (0x00000000U)
#define TXG_TMR_ERR_RD_MASK (0x00000fffU)
#define TXG_TMR_ERR_WR_MASK (0x00000fffU)


///< TMR configuration
#define TXG_TMR_ERR_TMR_CFG_BF_OFF ( 0)
#define TXG_TMR_ERR_TMR_CFG_BF_WID ( 1)
#define TXG_TMR_ERR_TMR_CFG_BF_MSK (0x00000001)
#define TXG_TMR_ERR_TMR_CFG_BF_DEF (0x00000000)

///< GAIN/STEP Values reg select
#define TXG_TMR_ERR_SEL_BF_OFF ( 1)
#define TXG_TMR_ERR_SEL_BF_WID ( 1)
#define TXG_TMR_ERR_SEL_BF_MSK (0x00000002)
#define TXG_TMR_ERR_SEL_BF_DEF (0x00000000)

///< Ramp Gain Table, reg 0
#define TXG_TMR_ERR_GAIN_VAL0_BF_OFF ( 2)
#define TXG_TMR_ERR_GAIN_VAL0_BF_WID ( 1)
#define TXG_TMR_ERR_GAIN_VAL0_BF_MSK (0x00000004)
#define TXG_TMR_ERR_GAIN_VAL0_BF_DEF (0x00000000)

///< Ramp Gain Table, reg 1
#define TXG_TMR_ERR_GAIN_VAL1_BF_OFF ( 3)
#define TXG_TMR_ERR_GAIN_VAL1_BF_WID ( 1)
#define TXG_TMR_ERR_GAIN_VAL1_BF_MSK (0x00000008)
#define TXG_TMR_ERR_GAIN_VAL1_BF_DEF (0x00000000)

///< Ramp Step Table, reg 0
#define TXG_TMR_ERR_STEP_SIZE0_BF_OFF ( 4)
#define TXG_TMR_ERR_STEP_SIZE0_BF_WID ( 1)
#define TXG_TMR_ERR_STEP_SIZE0_BF_MSK (0x00000010)
#define TXG_TMR_ERR_STEP_SIZE0_BF_DEF (0x00000000)

///< Ramp Step Table, reg 1
#define TXG_TMR_ERR_STEP_SIZE1_BF_OFF ( 5)
#define TXG_TMR_ERR_STEP_SIZE1_BF_WID ( 1)
#define TXG_TMR_ERR_STEP_SIZE1_BF_MSK (0x00000020)
#define TXG_TMR_ERR_STEP_SIZE1_BF_DEF (0x00000000)

///< Phase Value, reg 0
#define TXG_TMR_ERR_PHASE_VAL0_BF_OFF ( 6)
#define TXG_TMR_ERR_PHASE_VAL0_BF_WID ( 1)
#define TXG_TMR_ERR_PHASE_VAL0_BF_MSK (0x00000040)
#define TXG_TMR_ERR_PHASE_VAL0_BF_DEF (0x00000000)

///< Phase Value, reg 1
#define TXG_TMR_ERR_PHASE_VAL1_BF_OFF ( 7)
#define TXG_TMR_ERR_PHASE_VAL1_BF_WID ( 1)
#define TXG_TMR_ERR_PHASE_VAL1_BF_MSK (0x00000080)
#define TXG_TMR_ERR_PHASE_VAL1_BF_DEF (0x00000000)

///< TXE Ramp Value, includes gain, shift and half shift
#define TXG_TMR_ERR_TXE_RAMP_VAL_BF_OFF ( 8)
#define TXG_TMR_ERR_TXE_RAMP_VAL_BF_WID ( 1)
#define TXG_TMR_ERR_TXE_RAMP_VAL_BF_MSK (0x00000100)
#define TXG_TMR_ERR_TXE_RAMP_VAL_BF_DEF (0x00000000)

///< AC Fast Gain Q
#define TXG_TMR_ERR_AC_FAST_GAIN_Q_BF_OFF ( 9)
#define TXG_TMR_ERR_AC_FAST_GAIN_Q_BF_WID ( 1)
#define TXG_TMR_ERR_AC_FAST_GAIN_Q_BF_MSK (0x00000200)
#define TXG_TMR_ERR_AC_FAST_GAIN_Q_BF_DEF (0x00000000)

///< AC Fast Gain I
#define TXG_TMR_ERR_AC_FAST_GAIN_I_BF_OFF (10)
#define TXG_TMR_ERR_AC_FAST_GAIN_I_BF_WID ( 1)
#define TXG_TMR_ERR_AC_FAST_GAIN_I_BF_MSK (0x00000400)
#define TXG_TMR_ERR_AC_FAST_GAIN_I_BF_DEF (0x00000000)

///< Bypass Config
#define TXG_TMR_ERR_BYP_CFG_BF_OFF (11)
#define TXG_TMR_ERR_BYP_CFG_BF_WID ( 1)
#define TXG_TMR_ERR_BYP_CFG_BF_MSK (0x00000800)
#define TXG_TMR_ERR_BYP_CFG_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_BYPASS register description at address offset 0x30
  *
  * Register default value:        0x00000001
  * Register full path in IP: txg_map/reg/BYPASS
  * TXG Bypass Configuration Register
  */

typedef union {
  struct {
    uint32_t EN_BYPASS : 1;
    ///< Enable bypassing of TXG functionality, input samples will simply be
    ///< passed to output
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txg_byp_reg_t;

#define TXG_BYP_DEFAULT (0x00000001U)
#define TXG_BYP_RD_MASK (0x00000001U)
#define TXG_BYP_WR_MASK (0x00000001U)


///< Enable bypassing of TXG functionality, input samples will simply be
///< passed to output
#define TXG_BYP_EN_BYP_BF_OFF ( 0)
#define TXG_BYP_EN_BYP_BF_WID ( 1)
#define TXG_BYP_EN_BYP_BF_MSK (0x00000001)
#define TXG_BYP_EN_BYP_BF_DEF (0x00000001)


/** @brief TXG_MAP_REG_TXE_RAMP_VALUE register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/TXE_RAMP_VALUE
  * TXE Ramp Value Register Map
  */

typedef union {
  struct {
    uint32_t GAIN : 16;
    ///< TXE low gain
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t SHIFT : 4;
    ///< TXE Transition step size
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXE_HALFSHIFT : 1;
    ///< 1 bit value that controls MUX selection in loop filter. 1 as the input
    ///< will select the shifted gain value to add the the previously shifted
    ///< gain value. '0' will select 0' to add to the previously shifted gain
    ///< value. (TXE Mode HalfShift)
    ///< AccessType="RW/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} txg_txe_ramp_val_reg_t;

#define TXG_TXE_RAMP_VAL_DEFAULT (0x00000000U)
#define TXG_TXE_RAMP_VAL_RD_MASK (0x001fffffU)
#define TXG_TXE_RAMP_VAL_WR_MASK (0x001fffffU)


///< TXE low gain
#define TXG_TXE_RAMP_VAL_GAIN_BF_OFF ( 0)
#define TXG_TXE_RAMP_VAL_GAIN_BF_WID (16)
#define TXG_TXE_RAMP_VAL_GAIN_BF_MSK (0x0000FFFF)
#define TXG_TXE_RAMP_VAL_GAIN_BF_DEF (0x00000000)

///< TXE Transition step size
#define TXG_TXE_RAMP_VAL_SHIFT_BF_OFF (16)
#define TXG_TXE_RAMP_VAL_SHIFT_BF_WID ( 4)
#define TXG_TXE_RAMP_VAL_SHIFT_BF_MSK (0x000F0000)
#define TXG_TXE_RAMP_VAL_SHIFT_BF_DEF (0x00000000)

///< 1 bit value that controls MUX selection in loop filter. 1 as the input
///< will select the shifted gain value to add the the previously shifted
///< gain value. '0' will select 0' to add to the previously shifted gain
///< value. (TXE Mode HalfShift)
#define TXG_TXE_RAMP_VAL_TXE_HALFSHIFT_BF_OFF (20)
#define TXG_TXE_RAMP_VAL_TXE_HALFSHIFT_BF_WID ( 1)
#define TXG_TXE_RAMP_VAL_TXE_HALFSHIFT_BF_MSK (0x00100000)
#define TXG_TXE_RAMP_VAL_TXE_HALFSHIFT_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_TX_SM_STATE register description at address offset 0x38
  *
  * Register default value:        0x00000003
  * Register full path in IP: txg_map/reg/TX_SM_STATE
  * TX_SM_STATE register map
  */

typedef union {
  struct {
    uint32_t TX_SM_STATE : 2;
    ///< AND state machine status for all three state machine paths b1b0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x3"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_tx_sm_state_reg_t;

#define TXG_TX_SM_STATE_DEFAULT (0x00000003U)
#define TXG_TX_SM_STATE_RD_MASK (0x00000003U)
#define TXG_TX_SM_STATE_WR_MASK (0x00000000U)


///< AND state machine status for all three state machine paths b1b0
#define TXG_TX_SM_STATE_TX_SM_STATE_BF_OFF ( 0)
#define TXG_TX_SM_STATE_TX_SM_STATE_BF_WID ( 2)
#define TXG_TX_SM_STATE_TX_SM_STATE_BF_MSK (0x00000003)
#define TXG_TX_SM_STATE_TX_SM_STATE_BF_DEF (0x00000003)


/** @brief TXG_MAP_REG_GAIN_SEL register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/GAIN_SEL
  * TXG GAIN SEL Address Map
  */

typedef union {
  struct {
    uint32_t REAL_GAIN : 1;
    ///< 1b to select between sign extended gain or (phase real * gain), If
    ///< asserted, we choose (phase real * gain) to be iGain, else choose sign
    ///< extended gain to be iGain.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t IMAG_GAIN : 1;
    ///< 1b to select between 0 or (phase imag * gain). If asserted, we choose
    ///< (phase imag * gain) to be qGain, else we choose 0 to be qGain.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_gain_sel_reg_t;

#define TXG_GAIN_SEL_DEFAULT (0x00000000U)
#define TXG_GAIN_SEL_RD_MASK (0x00000003U)
#define TXG_GAIN_SEL_WR_MASK (0x00000003U)


///< 1b to select between sign extended gain or (phase real * gain), If
///< asserted, we choose (phase real * gain) to be iGain, else choose sign
///< extended gain to be iGain.
#define TXG_GAIN_SEL_REAL_GAIN_BF_OFF ( 0)
#define TXG_GAIN_SEL_REAL_GAIN_BF_WID ( 1)
#define TXG_GAIN_SEL_REAL_GAIN_BF_MSK (0x00000001)
#define TXG_GAIN_SEL_REAL_GAIN_BF_DEF (0x00000000)

///< 1b to select between 0 or (phase imag * gain). If asserted, we choose
///< (phase imag * gain) to be qGain, else we choose 0 to be qGain.
#define TXG_GAIN_SEL_IMAG_GAIN_BF_OFF ( 1)
#define TXG_GAIN_SEL_IMAG_GAIN_BF_WID ( 1)
#define TXG_GAIN_SEL_IMAG_GAIN_BF_MSK (0x00000002)
#define TXG_GAIN_SEL_IMAG_GAIN_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_INT_STATUS register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/INT_STATUS
  * Interrupt Status
  */

typedef union {
  struct {
    uint32_t REG_ERR : 1;
    ///< TXG Interrupt Status Reg Error (TMR_ERROR)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SWITCH : 1;
    ///< TXG Interrupt Status for Register Switch
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_int_stat_reg_t;

#define TXG_INT_STAT_DEFAULT (0x00000000U)
#define TXG_INT_STAT_RD_MASK (0x00000003U)
#define TXG_INT_STAT_WR_MASK (0x00000000U)


///< TXG Interrupt Status Reg Error (TMR_ERROR)
#define TXG_INT_STAT_ERR_BF_OFF ( 0)
#define TXG_INT_STAT_ERR_BF_WID ( 1)
#define TXG_INT_STAT_ERR_BF_MSK (0x00000001)
#define TXG_INT_STAT_ERR_BF_DEF (0x00000000)

///< TXG Interrupt Status for Register Switch
#define TXG_INT_STAT_SWITCH_BF_OFF ( 1)
#define TXG_INT_STAT_SWITCH_BF_WID ( 1)
#define TXG_INT_STAT_SWITCH_BF_MSK (0x00000002)
#define TXG_INT_STAT_SWITCH_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_INT_HIGH_EN register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/INT_HIGH_EN
  * High Prirority Interrupt
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< High Priority Interrupt for REG ERROR TMR ERROR
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SWITCH : 1;
    ///< High Priority Interrupt for Register Switch
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_int_high_en_reg_t;

#define TXG_INT_HIGH_EN_DEFAULT (0x00000000U)
#define TXG_INT_HIGH_EN_RD_MASK (0x00000003U)
#define TXG_INT_HIGH_EN_WR_MASK (0x00000003U)


///< High Priority Interrupt for REG ERROR TMR ERROR
#define TXG_INT_HIGH_EN_ERR_BF_OFF ( 0)
#define TXG_INT_HIGH_EN_ERR_BF_WID ( 1)
#define TXG_INT_HIGH_EN_ERR_BF_MSK (0x00000001)
#define TXG_INT_HIGH_EN_ERR_BF_DEF (0x00000000)

///< High Priority Interrupt for Register Switch
#define TXG_INT_HIGH_EN_SWITCH_BF_OFF ( 1)
#define TXG_INT_HIGH_EN_SWITCH_BF_WID ( 1)
#define TXG_INT_HIGH_EN_SWITCH_BF_MSK (0x00000002)
#define TXG_INT_HIGH_EN_SWITCH_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_INT_LOW_EN register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/INT_LOW_EN
  * TXG Low Priority Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t REG_ERR : 1;
    ///< Low Priority Interrupt for Reg Error  TMR_ERROR
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SWITCH : 1;
    ///< Low Priority Interrupt for Register Switch
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_int_low_en_reg_t;

#define TXG_INT_LOW_EN_DEFAULT (0x00000000U)
#define TXG_INT_LOW_EN_RD_MASK (0x00000003U)
#define TXG_INT_LOW_EN_WR_MASK (0x00000003U)


///< Low Priority Interrupt for Reg Error  TMR_ERROR
#define TXG_INT_LOW_EN_ERR_BF_OFF ( 0)
#define TXG_INT_LOW_EN_ERR_BF_WID ( 1)
#define TXG_INT_LOW_EN_ERR_BF_MSK (0x00000001)
#define TXG_INT_LOW_EN_ERR_BF_DEF (0x00000000)

///< Low Priority Interrupt for Register Switch
#define TXG_INT_LOW_EN_SWITCH_BF_OFF ( 1)
#define TXG_INT_LOW_EN_SWITCH_BF_WID ( 1)
#define TXG_INT_LOW_EN_SWITCH_BF_MSK (0x00000002)
#define TXG_INT_LOW_EN_SWITCH_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_INT_CLEAR register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/INT_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t REG_ERR : 1;
    ///< Register Error (TMR Error) interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SWITCH : 1;
    ///< Register Switch interrupt clear
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_int_clr_reg_t;

#define TXG_INT_CLR_DEFAULT (0x00000000U)
#define TXG_INT_CLR_RD_MASK (0x00000003U)
#define TXG_INT_CLR_WR_MASK (0x00000003U)


///< Register Error (TMR Error) interrupt clear
#define TXG_INT_CLR_ERR_BF_OFF ( 0)
#define TXG_INT_CLR_ERR_BF_WID ( 1)
#define TXG_INT_CLR_ERR_BF_MSK (0x00000001)
#define TXG_INT_CLR_ERR_BF_DEF (0x00000000)

///< Register Switch interrupt clear
#define TXG_INT_CLR_SWITCH_BF_OFF ( 1)
#define TXG_INT_CLR_SWITCH_BF_WID ( 1)
#define TXG_INT_CLR_SWITCH_BF_MSK (0x00000002)
#define TXG_INT_CLR_SWITCH_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_INT_FORCE register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/INT_FORCE
  * Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t REG_ERR : 1;
    ///< Register Error (TMR Error) interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REG_SWITCH : 1;
    ///< Register Switch interrupt force
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} txg_int_force_reg_t;

#define TXG_INT_FORCE_DEFAULT (0x00000000U)
#define TXG_INT_FORCE_RD_MASK (0x00000003U)
#define TXG_INT_FORCE_WR_MASK (0x00000003U)


///< Register Error (TMR Error) interrupt force
#define TXG_INT_FORCE_ERR_BF_OFF ( 0)
#define TXG_INT_FORCE_ERR_BF_WID ( 1)
#define TXG_INT_FORCE_ERR_BF_MSK (0x00000001)
#define TXG_INT_FORCE_ERR_BF_DEF (0x00000000)

///< Register Switch interrupt force
#define TXG_INT_FORCE_SWITCH_BF_OFF ( 1)
#define TXG_INT_FORCE_SWITCH_BF_WID ( 1)
#define TXG_INT_FORCE_SWITCH_BF_MSK (0x00000002)
#define TXG_INT_FORCE_SWITCH_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_AC_FAST_GAIN_I register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/AC_FAST_GAIN_I
  * AC FAST GAIN I Register Map
  */

typedef union {
  struct {
    uint32_t AC_FAST_GAIN_I : 17;
    ///< The complex valued gain (I) needed for the antenna calibration mode.
    ///< (17 bits)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} txg_ac_fast_gain_i_reg_t;

#define TXG_AC_FAST_GAIN_I_DEFAULT (0x00000000U)
#define TXG_AC_FAST_GAIN_I_RD_MASK (0x0001ffffU)
#define TXG_AC_FAST_GAIN_I_WR_MASK (0x0001ffffU)


///< The complex valued gain (I) needed for the antenna calibration mode.
///< (17 bits)
#define TXG_AC_FAST_GAIN_I_AC_FAST_GAIN_I_BF_OFF ( 0)
#define TXG_AC_FAST_GAIN_I_AC_FAST_GAIN_I_BF_WID (17)
#define TXG_AC_FAST_GAIN_I_AC_FAST_GAIN_I_BF_MSK (0x0001FFFF)
#define TXG_AC_FAST_GAIN_I_AC_FAST_GAIN_I_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_AC_FAST_GAIN_Q register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/AC_FAST_GAIN_Q
  * AC FAST GAIN Q Register Map
  */

typedef union {
  struct {
    uint32_t AC_FAST_GAIN_Q : 17;
    ///< The complex valued gain (Q) needed for the antenna calibration mode.
    ///< (17 bits)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} txg_ac_fast_gain_q_reg_t;

#define TXG_AC_FAST_GAIN_Q_DEFAULT (0x00000000U)
#define TXG_AC_FAST_GAIN_Q_RD_MASK (0x0001ffffU)
#define TXG_AC_FAST_GAIN_Q_WR_MASK (0x0001ffffU)


///< The complex valued gain (Q) needed for the antenna calibration mode.
///< (17 bits)
#define TXG_AC_FAST_GAIN_Q_AC_FAST_GAIN_Q_BF_OFF ( 0)
#define TXG_AC_FAST_GAIN_Q_AC_FAST_GAIN_Q_BF_WID (17)
#define TXG_AC_FAST_GAIN_Q_AC_FAST_GAIN_Q_BF_MSK (0x0001FFFF)
#define TXG_AC_FAST_GAIN_Q_AC_FAST_GAIN_Q_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_AC_FAST_GAIN_ENABLE register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/AC_FAST_GAIN_ENABLE
  * AC_Fast Gain enable register map
  */

typedef union {
  struct {
    uint32_t EN : 1;
    ///< Configurable enable bit for antenna calibration. Set to 1 to use complex
    ///< valued gain needed for anetnna calibration mode.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} txg_ac_fast_gain_en_reg_t;

#define TXG_AC_FAST_GAIN_EN_DEFAULT (0x00000000U)
#define TXG_AC_FAST_GAIN_EN_RD_MASK (0x00000001U)
#define TXG_AC_FAST_GAIN_EN_WR_MASK (0x00000001U)


///< Configurable enable bit for antenna calibration. Set to 1 to use complex
///< valued gain needed for anetnna calibration mode.
#define TXG_AC_FAST_GAIN_EN_BF_OFF ( 0)
#define TXG_AC_FAST_GAIN_EN_BF_WID ( 1)
#define TXG_AC_FAST_GAIN_EN_BF_MSK (0x00000001)
#define TXG_AC_FAST_GAIN_EN_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_STATIC_HOLD_MASK register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/STATIC_HOLD_MASK
  * Static Hold Mask Register Map
  */

typedef union {
  struct {
    uint32_t TXSR_HOLD : 1;
    ///< TXSR HLD/REL from tri-state state machine
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXCPM_HOLD : 1;
    ///< TXCPM HLD/REL from tri-state state machine
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TX_HOLD : 1;
    ///< TRX_SYS HLD/REL from tri-state state machine
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} txg_static_hold_mask_reg_t;

#define TXG_STATIC_HOLD_MASK_DEFAULT (0x00000000U)
#define TXG_STATIC_HOLD_MASK_RD_MASK (0x00000007U)
#define TXG_STATIC_HOLD_MASK_WR_MASK (0x00000007U)


///< TXSR HLD/REL from tri-state state machine
#define TXG_STATIC_HOLD_MASK_TXSR_HOLD_BF_OFF ( 0)
#define TXG_STATIC_HOLD_MASK_TXSR_HOLD_BF_WID ( 1)
#define TXG_STATIC_HOLD_MASK_TXSR_HOLD_BF_MSK (0x00000001)
#define TXG_STATIC_HOLD_MASK_TXSR_HOLD_BF_DEF (0x00000000)

///< TXCPM HLD/REL from tri-state state machine
#define TXG_STATIC_HOLD_MASK_TXCPM_HOLD_BF_OFF ( 1)
#define TXG_STATIC_HOLD_MASK_TXCPM_HOLD_BF_WID ( 1)
#define TXG_STATIC_HOLD_MASK_TXCPM_HOLD_BF_MSK (0x00000002)
#define TXG_STATIC_HOLD_MASK_TXCPM_HOLD_BF_DEF (0x00000000)

///< TRX_SYS HLD/REL from tri-state state machine
#define TXG_STATIC_HOLD_MASK_TX_HOLD_BF_OFF ( 2)
#define TXG_STATIC_HOLD_MASK_TX_HOLD_BF_WID ( 1)
#define TXG_STATIC_HOLD_MASK_TX_HOLD_BF_MSK (0x00000004)
#define TXG_STATIC_HOLD_MASK_TX_HOLD_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_TXE_DELAY register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/TXE_DELAY
  * TXE Delay register map
  */

typedef union {
  struct {
    uint32_t D0 : 15;
    ///< Delay D0 is associated with Lo to Hi Transition of the input signal.
    ///< the max value that can be programmed is 0x7FFF. Be mindful however,
    ///< that D0+DELTA (from TXE_DELTA_DELAY register) cannot exceed 0x07FFF,
    ///< as this is the value used for the TXE_SHIFT after a lo to hi transition
    ///< of tx_enable.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t D1 : 15;
    ///< Delay D1 is associated with Hi to Lo Transition of the input signal.
    ///< The maximum value that can be programmed is 0x7FFF.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} txg_txe_delay_reg_t;

#define TXG_TXE_DELAY_DEFAULT (0x00000000U)
#define TXG_TXE_DELAY_RD_MASK (0x3fffffffU)
#define TXG_TXE_DELAY_WR_MASK (0x3fffffffU)


///< Delay D0 is associated with Lo to Hi Transition of the input signal.
///< the max value that can be programmed is 0x7FFF. Be mindful however,
///< that D0+DELTA (from TXE_DELTA_DELAY register) cannot exceed 0x07FFF,
///< as this is the value used for the TXE_SHIFT after a lo to hi transition
///< of tx_enable.
#define TXG_TXE_DELAY_D0_BF_OFF ( 0)
#define TXG_TXE_DELAY_D0_BF_WID (15)
#define TXG_TXE_DELAY_D0_BF_MSK (0x00007FFF)
#define TXG_TXE_DELAY_D0_BF_DEF (0x00000000)

///< Delay D1 is associated with Hi to Lo Transition of the input signal.
///< The maximum value that can be programmed is 0x7FFF.
#define TXG_TXE_DELAY_D1_BF_OFF (15)
#define TXG_TXE_DELAY_D1_BF_WID (15)
#define TXG_TXE_DELAY_D1_BF_MSK (0x3FFF8000)
#define TXG_TXE_DELAY_D1_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_TXE_DELTA_DELAY register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: txg_map/reg/TXE_DELTA_DELAY
  * TXE Delta Delay register map
  */

typedef union {
  struct {
    uint32_t DELTA : 15;
    ///< Delta Delay is associated with Lo to Hi Transition of the input signal,
    ///< 15 bit value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} txg_txe_delta_delay_reg_t;

#define TXG_TXE_DELTA_DELAY_DEFAULT (0x00000000U)
#define TXG_TXE_DELTA_DELAY_RD_MASK (0x00007fffU)
#define TXG_TXE_DELTA_DELAY_WR_MASK (0x00007fffU)


///< Delta Delay is associated with Lo to Hi Transition of the input signal,
///< 15 bit value.
#define TXG_TXE_DELTA_DELAY_DELTA_BF_OFF ( 0)
#define TXG_TXE_DELTA_DELAY_DELTA_BF_WID (15)
#define TXG_TXE_DELTA_DELAY_DELTA_BF_MSK (0x00007FFF)
#define TXG_TXE_DELTA_DELAY_DELTA_BF_DEF (0x00000000)


/** @brief TXG_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x6c
  *
  * Register default value:        0x00010000
  * Register full path in IP: txg_map/reg/APB_BRIDGE_STATUS
  * Status of APB Bridge
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} txg_apb_brdg_stat_reg_t;

#define TXG_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define TXG_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define TXG_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define TXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define TXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define TXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define TXG_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define TXG_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define TXG_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define TXG_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define TXG_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define TXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define TXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define TXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define TXG_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define TXG_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define TXG_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define TXG_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define TXG_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define TXG_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define TXG_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define TXG_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define TXG_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define TXG_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define TXG_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define TXG_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define TXG_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TXG_STEP_SIZE_SHDW_REG(_BASE) ((txg_step_size_shdw_reg_t*) TXG_STEP_SIZE_SHDW_ADR(_BASE))
#define TXG_GAIN_RAMP_VAL_SHDW_REG(_BASE) ((txg_gain_ramp_val_shdw_reg_t*) TXG_GAIN_RAMP_VAL_SHDW_ADR(_BASE))
#define TXG_PHASE_VAL_SHDW_REG(_BASE) ((txg_phase_val_shdw_reg_t*) TXG_PHASE_VAL_SHDW_ADR(_BASE))
#define TXG_STEP_SIZE_LIVE_REG(_BASE) ((txg_step_size_live_reg_t*) TXG_STEP_SIZE_LIVE_ADR(_BASE))
#define TXG_GAIN_RAMP_VAL_LIVE_REG(_BASE) ((txg_gain_ramp_val_live_reg_t*) TXG_GAIN_RAMP_VAL_LIVE_ADR(_BASE))
#define TXG_PHASE_VAL_LIVE_REG(_BASE) ((txg_phase_val_live_reg_t*) TXG_PHASE_VAL_LIVE_ADR(_BASE))
#define TXG_SCRATCH_REG(_BASE) ((txg_scratch_reg_t*) TXG_SCRATCH_ADR(_BASE))
#define TXG_BFN_UPDATE_REG(_BASE) ((txg_bfn_update_reg_t*) TXG_BFN_UPDATE_ADR(_BASE))
#define TXG_SEL_REG(_BASE) ((txg_sel_reg_t*) TXG_SEL_ADR(_BASE))
#define TXG_SWITCH_REG(_BASE) ((txg_switch_reg_t*) TXG_SWITCH_ADR(_BASE))
#define TXG_TMR_CFG_REG(_BASE) ((txg_tmr_cfg_reg_t*) TXG_TMR_CFG_ADR(_BASE))
#define TXG_TMR_ERR_REG(_BASE) ((txg_tmr_err_reg_t*) TXG_TMR_ERR_ADR(_BASE))
#define TXG_BYP_REG(_BASE) ((txg_byp_reg_t*) TXG_BYP_ADR(_BASE))
#define TXG_TXE_RAMP_VAL_REG(_BASE) ((txg_txe_ramp_val_reg_t*) TXG_TXE_RAMP_VAL_ADR(_BASE))
#define TXG_TX_SM_STATE_REG(_BASE) ((txg_tx_sm_state_reg_t*) TXG_TX_SM_STATE_ADR(_BASE))
#define TXG_GAIN_SEL_REG(_BASE) ((txg_gain_sel_reg_t*) TXG_GAIN_SEL_ADR(_BASE))
#define TXG_INT_STAT_REG(_BASE) ((txg_int_stat_reg_t*) TXG_INT_STAT_ADR(_BASE))
#define TXG_INT_HIGH_EN_REG(_BASE) ((txg_int_high_en_reg_t*) TXG_INT_HIGH_EN_ADR(_BASE))
#define TXG_INT_LOW_EN_REG(_BASE) ((txg_int_low_en_reg_t*) TXG_INT_LOW_EN_ADR(_BASE))
#define TXG_INT_CLR_REG(_BASE) ((txg_int_clr_reg_t*) TXG_INT_CLR_ADR(_BASE))
#define TXG_INT_FORCE_REG(_BASE) ((txg_int_force_reg_t*) TXG_INT_FORCE_ADR(_BASE))
#define TXG_AC_FAST_GAIN_I_REG(_BASE) ((txg_ac_fast_gain_i_reg_t*) TXG_AC_FAST_GAIN_I_ADR(_BASE))
#define TXG_AC_FAST_GAIN_Q_REG(_BASE) ((txg_ac_fast_gain_q_reg_t*) TXG_AC_FAST_GAIN_Q_ADR(_BASE))
#define TXG_AC_FAST_GAIN_EN_REG(_BASE) ((txg_ac_fast_gain_en_reg_t*) TXG_AC_FAST_GAIN_EN_ADR(_BASE))
#define TXG_STATIC_HOLD_MASK_REG(_BASE) ((txg_static_hold_mask_reg_t*) TXG_STATIC_HOLD_MASK_ADR(_BASE))
#define TXG_TXE_DELAY_REG(_BASE) ((txg_txe_delay_reg_t*) TXG_TXE_DELAY_ADR(_BASE))
#define TXG_TXE_DELTA_DELAY_REG(_BASE) ((txg_txe_delta_delay_reg_t*) TXG_TXE_DELTA_DELAY_ADR(_BASE))
#define TXG_APB_BRDG_STAT_REG(_BASE) ((txg_apb_brdg_stat_reg_t*) TXG_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    txg_step_size_shdw_reg_t STEP_SIZE_SHDW;  /*< Address offset = 0x0 */
    txg_gain_ramp_val_shdw_reg_t GAIN_RAMP_VAL_SHDW; /*< Address offset = 0x4 */
    txg_phase_val_shdw_reg_t PHASE_VAL_SHDW; /*< Address offset = 0x8 */
    txg_step_size_live_reg_t STEP_SIZE_LIVE;  /*< Address offset = 0xc */
    txg_gain_ramp_val_live_reg_t GAIN_RAMP_VAL_LIVE; /*< Address offset = 0x10 */
    txg_phase_val_live_reg_t PHASE_VAL_LIVE; /*< Address offset = 0x14 */
    txg_scratch_reg_t SCRATCH;         /*< Address offset = 0x18 */
    txg_bfn_update_reg_t BFN_UPDATE;      /*< Address offset = 0x1c */
    txg_sel_reg_t SEL;      /*< Address offset = 0x20 */
    txg_switch_reg_t SWITCH;      /*< Address offset = 0x24 */
    txg_tmr_cfg_reg_t TMR_CFG;      /*< Address offset = 0x28 */
    txg_tmr_err_reg_t TMR_ERR;       /*< Address offset = 0x2c */
    txg_byp_reg_t BYP;          /*< Address offset = 0x30 */
    txg_txe_ramp_val_reg_t TXE_RAMP_VAL;  /*< Address offset = 0x34 */
    txg_tx_sm_state_reg_t TX_SM_STATE;     /*< Address offset = 0x38 */
    txg_gain_sel_reg_t GAIN_SEL;        /*< Address offset = 0x3c */
    txg_int_stat_reg_t INT_STAT;      /*< Address offset = 0x40 */
    txg_int_high_en_reg_t INT_HIGH_EN;     /*< Address offset = 0x44 */
    txg_int_low_en_reg_t INT_LOW_EN;      /*< Address offset = 0x48 */
    txg_int_clr_reg_t INT_CLR;       /*< Address offset = 0x4c */
    txg_int_force_reg_t INT_FORCE;       /*< Address offset = 0x50 */
    txg_ac_fast_gain_i_reg_t AC_FAST_GAIN_I;  /*< Address offset = 0x54 */
    txg_ac_fast_gain_q_reg_t AC_FAST_GAIN_Q;  /*< Address offset = 0x58 */
    txg_ac_fast_gain_en_reg_t AC_FAST_GAIN_EN; /*< Address offset = 0x5c */
    txg_static_hold_mask_reg_t STATIC_HOLD_MASK; /*< Address offset = 0x60 */
    txg_txe_delay_reg_t TXE_DELAY;       /*< Address offset = 0x64 */
    txg_txe_delta_delay_reg_t TXE_DELTA_DELAY; /*< Address offset = 0x68 */
    txg_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x6c */
} txg_t;     // size: 0x0070

// AddressSpace struct pointer
//
#define TRX_SYS0_TXG0    ((txg_t*) TRX_SYS0_TXG0_BASE)
#define TRX_SYS0_TXG1    ((txg_t*) TRX_SYS0_TXG1_BASE)
#define TRX_SYS1_TXG0    ((txg_t*) TRX_SYS1_TXG0_BASE)
#define TRX_SYS1_TXG1    ((txg_t*) TRX_SYS1_TXG1_BASE)
#define TRX_SYS2_TXG0    ((txg_t*) TRX_SYS2_TXG0_BASE)
#define TRX_SYS2_TXG1    ((txg_t*) TRX_SYS2_TXG1_BASE)
#define TRX_SYS3_TXG0    ((txg_t*) TRX_SYS3_TXG0_BASE)
#define TRX_SYS3_TXG1    ((txg_t*) TRX_SYS3_TXG1_BASE)
#define TRX_SYS4_TXG0    ((txg_t*) TRX_SYS4_TXG0_BASE)
#define TRX_SYS4_TXG1    ((txg_t*) TRX_SYS4_TXG1_BASE)
#define TRX_SYS5_TXG0    ((txg_t*) TRX_SYS5_TXG0_BASE)
#define TRX_SYS5_TXG1    ((txg_t*) TRX_SYS5_TXG1_BASE)
#define TRX_SYS6_TXG0    ((txg_t*) TRX_SYS6_TXG0_BASE)
#define TRX_SYS6_TXG1    ((txg_t*) TRX_SYS6_TXG1_BASE)
#define TRX_SYS7_TXG0    ((txg_t*) TRX_SYS7_TXG0_BASE)
#define TRX_SYS7_TXG1    ((txg_t*) TRX_SYS7_TXG1_BASE)

// ******************************************* /Address Space

#endif      // _TXG_H_

