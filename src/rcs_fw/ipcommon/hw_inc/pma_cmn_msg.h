#ifndef _PMA_CMN_MSG_H_
#define _PMA_CMN_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_CMN_BASE  ( 0x06020000 )
#define DLNK_JESD1_PHY_PMA0_CMN_BASE  ( 0x06820000 )
#define DLNK_JESD2_PHY_PMA0_CMN_BASE  ( 0x07020000 )
#define DLNK_JESD3_PHY_PMA0_CMN_BASE  ( 0x07820000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PMA_CMN_MSG_PMA_REVISION_OFFSET ( 0x00000000U )
#define PMA_CMN_MSG_PMA_JTAG_VER_OFFSET ( 0x00000004U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_OFFSET ( 0x00000008U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_OFFSET ( 0x0000000cU )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_OFFSET ( 0x00000010U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_OFFSET ( 0x00000014U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_OFFSET ( 0x00000018U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_OFFSET ( 0x0000001cU )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_OFFSET ( 0x00000020U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_OFFSET ( 0x00000024U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_OFFSET ( 0x00000028U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_OFFSET ( 0x0000002cU )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_OFFSET ( 0x00000030U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_OFFSET ( 0x00000034U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_OFFSET ( 0x00000038U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_OFFSET ( 0x0000003cU )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_OFFSET ( 0x00000040U )
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_OFFSET ( 0x00000044U )
#define PMA_CMN_MSG_PMA_PMU_IRANGE_OFFSET ( 0x00000048U )
#define PMA_CMN_MSG_PMA_PMU_VFORCE_OFFSET ( 0x0000004cU )
#define PMA_CMN_MSG_PMA_DIE_TEMP_OFFSET ( 0x00000050U )
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_OFFSET ( 0x00000054U )
#define PMA_CMN_MSG_CMN_CAR_CFG_OFFSET ( 0x00000058U )
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_OFFSET ( 0x0000005cU )
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_OFFSET ( 0x00000060U )
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_OFFSET ( 0x00000064U )
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_OFFSET ( 0x00000068U )
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_OFFSET ( 0x0000006cU )
#define PMA_CMN_MSG_FSM_STAT_0_OFFSET ( 0x00000070U )
#define PMA_CMN_MSG_FSM_STAT_1_OFFSET ( 0x00000074U )
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ( 0x00000078U )
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ( 0x0000007cU )
#define PMA_CMN_MSG_RPU_CTRL_OFFSET ( 0x00000080U )
#define PMA_CMN_MSG_RPU_LUT_CFG_0_OFFSET ( 0x00000084U )
#define PMA_CMN_MSG_RPU_LUT_CFG_1_OFFSET ( 0x00000088U )
#define PMA_CMN_MSG_RPU_LUT_CFG_2_OFFSET ( 0x0000008cU )
#define PMA_CMN_MSG_RPU_LUT_CFG_3_OFFSET ( 0x00000090U )
#define PMA_CMN_MSG_RPU_LUT_CFG_4_OFFSET ( 0x00000094U )
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ( 0x00000098U )
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ( 0x0000009cU )
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ( 0x000000a0U )
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ( 0x000000a4U )
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_OFFSET ( 0x000000a8U )
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_OFFSET ( 0x000000acU )
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_OFFSET ( 0x000000b0U )
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_OFFSET ( 0x000000b4U )
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_OFFSET ( 0x000000b8U )
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_OFFSET ( 0x000000bcU )
#define PMA_CMN_MSG_CMN_CALAVG_STAT_OFFSET ( 0x000000c0U )
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_OFFSET ( 0x000000c4U )
#define PMA_CMN_MSG_CMN_BRKPT_STAT_OFFSET ( 0x000000c8U )
#define PMA_CMN_MSG_CMN_BRKPT_CLR_OFFSET ( 0x000000ccU )
#define PMA_CMN_MSG_CMN_REF_CTRL_OFFSET ( 0x000000d0U )
#define PMA_CMN_MSG_CMN_REF_STAT_OFFSET ( 0x000000d4U )
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_OFFSET ( 0x000000d8U )
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_OFFSET ( 0x000000dcU )
#define PMA_CMN_MSG_CMN_APB_CTRL_OFFSET ( 0x000000e0U )
#define PMA_CMN_MSG_CMN_APB_STAT_OFFSET ( 0x000000e4U )
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_OFFSET ( 0x000000e8U )
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_OFFSET ( 0x000000ecU )
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_OFFSET ( 0x000000fcU )
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_OFFSET ( 0x00000100U )
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_OFFSET ( 0x00000104U )
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_OFFSET ( 0x00000108U )
#define PMA_CMN_MSG_CMN_SCRATCHY_0_OFFSET ( 0x0000010cU )
#define PMA_CMN_MSG_CMN_SCRATCHY_1_OFFSET ( 0x00000110U )
#define PMA_CMN_MSG_CMN_SCRATCHY_2_OFFSET ( 0x00000114U )
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_OFFSET ( 0x00000118U )
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_OFFSET ( 0x0000011cU )
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_OFFSET ( 0x00000120U )
#define PMA_CMN_MSG_CMN_CKM_STAT_OFFSET ( 0x00000124U )
#define PMA_CMN_MSG_BTI_CLK_CFG_OFFSET ( 0x00000128U )
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_OFFSET ( 0x0000012cU )
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_OFFSET ( 0x00000130U )
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_OFFSET ( 0x00000134U )
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_OFFSET ( 0x00000138U )
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_OFFSET ( 0x0000013cU )
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_OFFSET ( 0x00000140U )
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_OFFSET ( 0x00000144U )
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_OFFSET ( 0x00000148U )
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_OFFSET ( 0x0000014cU )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_OFFSET ( 0x00000150U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_OFFSET ( 0x00000154U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_OFFSET ( 0x00000158U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_OFFSET ( 0x0000015cU )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_OFFSET ( 0x00000160U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_OFFSET ( 0x00000164U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_OFFSET ( 0x00000168U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_OFFSET ( 0x0000016cU )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_OFFSET ( 0x00000170U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_OFFSET ( 0x00000174U )
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_OFFSET ( 0x00000178U )
#define PMA_CMN_MSG_CMN_RW_SPARE_0_OFFSET ( 0x0000079cU )
#define PMA_CMN_MSG_CMN_RW_SPARE_1_OFFSET ( 0x000007a0U )
#define PMA_CMN_MSG_CMN_RW_SPARE_2_OFFSET ( 0x000007a4U )
#define PMA_CMN_MSG_CMN_RW_SPARE_3_OFFSET ( 0x000007a8U )
#define PMA_CMN_MSG_CMN_RO_SPARE_0_OFFSET ( 0x000007acU )
#define PMA_CMN_MSG_CMN_RO_SPARE_1_OFFSET ( 0x000007b0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PMA_CMN_MSG_PMA_REVISION_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_REVISION_OFFSET ) ))
#define PMA_CMN_MSG_PMA_JTAG_VER_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_JTAG_VER_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_0_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_1_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_2_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_3_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_4_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_5_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_6_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_7_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_8_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_9_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_10_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_11_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_12_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_13_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_14_OFFSET ) ))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_SCRATCH_PAD_15_OFFSET ) ))
#define PMA_CMN_MSG_PMA_PMU_IRANGE_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_PMU_IRANGE_OFFSET ) ))
#define PMA_CMN_MSG_PMA_PMU_VFORCE_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_PMU_VFORCE_OFFSET ) ))
#define PMA_CMN_MSG_PMA_DIE_TEMP_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_DIE_TEMP_OFFSET ) ))
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CAR_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CAR_CFG_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CAR_CFG_RO_OFFSET ) ))
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_PWR_MNG_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_PWR_MNG_STAT_OFFSET ) ))
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_FSM_MAINFSM_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_FSM_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_FSM_STAT_0_OFFSET ) ))
#define PMA_CMN_MSG_FSM_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_FSM_STAT_1_OFFSET ) ))
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ) ))
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ) ))
#define PMA_CMN_MSG_RPU_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_RPU_LUT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_LUT_CFG_0_OFFSET ) ))
#define PMA_CMN_MSG_RPU_LUT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_LUT_CFG_1_OFFSET ) ))
#define PMA_CMN_MSG_RPU_LUT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_LUT_CFG_2_OFFSET ) ))
#define PMA_CMN_MSG_RPU_LUT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_LUT_CFG_3_OFFSET ) ))
#define PMA_CMN_MSG_RPU_LUT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_LUT_CFG_4_OFFSET ) ))
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ) ))
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ) ))
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ) ))
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CALAVG_CTRL_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CALAVG_CTRL_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CALAVG_CTRL_2_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CALAVG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CALAVG_STAT_OFFSET ) ))
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_BRKPT_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_BRKPT_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_BRKPT_STAT_OFFSET ) ))
#define PMA_CMN_MSG_CMN_BRKPT_CLR_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_BRKPT_CLR_OFFSET ) ))
#define PMA_CMN_MSG_CMN_REF_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_REF_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_REF_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_REF_STAT_OFFSET ) ))
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_OFFSET ) ))
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_OFFSET ) ))
#define PMA_CMN_MSG_CMN_APB_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_APB_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_APB_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_APB_STAT_OFFSET ) ))
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_OFFSET ) ))
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SCRATCHY_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SCRATCHY_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SCRATCHY_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SCRATCHY_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SCRATCHY_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SCRATCHY_2_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CKM_CTRL_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CKM_CTRL_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CKM_CTRL_2_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CKM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CKM_STAT_OFFSET ) ))
#define PMA_CMN_MSG_BTI_CLK_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_BTI_CLK_CFG_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RW_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RW_SPARE_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RW_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RW_SPARE_1_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RW_SPARE_2_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RW_SPARE_2_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RW_SPARE_3_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RW_SPARE_3_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RO_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RO_SPARE_0_OFFSET ) ))
#define PMA_CMN_MSG_CMN_RO_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_CMN_MSG_CMN_RO_SPARE_1_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_REVISION register description at address offset 0x0
  *
  * Register default value:        0x23230500
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_revision
  * UC Revision
  */

typedef union {
  struct {
    uint32_t PMA_REVISION : 32;
    ///< PMA hardware revision
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x23230500"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_revision_reg_t;

#define PMA_CMN_MSG_PMA_REVISION_DEFAULT (0x23230500U)
#define PMA_CMN_MSG_PMA_REVISION_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_REVISION_WR_MASK (0x00000000U)


///< PMA hardware revision
#define PMA_CMN_MSG_PMA_REVISION_PMA_REVISION_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_REVISION_PMA_REVISION_BF_WID (32)
#define PMA_CMN_MSG_PMA_REVISION_PMA_REVISION_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_REVISION_PMA_REVISION_BF_DEF (0x23230500)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_JTAG_VERSION register description at address offset 0x4
  *
  * Register default value:        0x11490001
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_jtag_version
  * PMA Jtag version
  */

typedef union {
  struct {
    uint32_t PMA_JTAG_VERSION : 32;
    ///< PMA Jtag version
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x11490001"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_jtag_ver_reg_t;

#define PMA_CMN_MSG_PMA_JTAG_VER_DEFAULT (0x11490001U)
#define PMA_CMN_MSG_PMA_JTAG_VER_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_JTAG_VER_WR_MASK (0x00000000U)


///< PMA Jtag version
#define PMA_CMN_MSG_PMA_JTAG_VER_PMA_JTAG_VER_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_JTAG_VER_PMA_JTAG_VER_BF_WID (32)
#define PMA_CMN_MSG_PMA_JTAG_VER_PMA_JTAG_VER_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_JTAG_VER_PMA_JTAG_VER_BF_DEF (0x11490001)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_0
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_0 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_0_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_PMA_SCRATCH_PAD_0_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_PMA_SCRATCH_PAD_0_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_PMA_SCRATCH_PAD_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_PMA_SCRATCH_PAD_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_1 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_1
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_1 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_1_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_PMA_SCRATCH_PAD_1_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_PMA_SCRATCH_PAD_1_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_PMA_SCRATCH_PAD_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_PMA_SCRATCH_PAD_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_2 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_2
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_2 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_2_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_PMA_SCRATCH_PAD_2_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_PMA_SCRATCH_PAD_2_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_PMA_SCRATCH_PAD_2_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_PMA_SCRATCH_PAD_2_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_3 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_3
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_3 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_3_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_PMA_SCRATCH_PAD_3_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_PMA_SCRATCH_PAD_3_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_PMA_SCRATCH_PAD_3_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_PMA_SCRATCH_PAD_3_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_4 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_4
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_4 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_4_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_PMA_SCRATCH_PAD_4_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_PMA_SCRATCH_PAD_4_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_PMA_SCRATCH_PAD_4_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_PMA_SCRATCH_PAD_4_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_5 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_5
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_5 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_5_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_PMA_SCRATCH_PAD_5_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_PMA_SCRATCH_PAD_5_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_PMA_SCRATCH_PAD_5_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_PMA_SCRATCH_PAD_5_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_6 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_6
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_6 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_6_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_PMA_SCRATCH_PAD_6_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_PMA_SCRATCH_PAD_6_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_PMA_SCRATCH_PAD_6_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_PMA_SCRATCH_PAD_6_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_7 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_7
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_7 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_7_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_PMA_SCRATCH_PAD_7_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_PMA_SCRATCH_PAD_7_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_PMA_SCRATCH_PAD_7_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_PMA_SCRATCH_PAD_7_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_8 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_8
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_8 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_8_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_PMA_SCRATCH_PAD_8_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_PMA_SCRATCH_PAD_8_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_PMA_SCRATCH_PAD_8_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_PMA_SCRATCH_PAD_8_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_9 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_9
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_9 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_9_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_PMA_SCRATCH_PAD_9_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_PMA_SCRATCH_PAD_9_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_PMA_SCRATCH_PAD_9_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_PMA_SCRATCH_PAD_9_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_10 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_10
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_10 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_10_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_PMA_SCRATCH_PAD_10_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_PMA_SCRATCH_PAD_10_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_PMA_SCRATCH_PAD_10_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_PMA_SCRATCH_PAD_10_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_11 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_11
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_11 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_11_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_PMA_SCRATCH_PAD_11_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_PMA_SCRATCH_PAD_11_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_PMA_SCRATCH_PAD_11_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_PMA_SCRATCH_PAD_11_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_12 register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_12
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_12 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_12_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_PMA_SCRATCH_PAD_12_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_PMA_SCRATCH_PAD_12_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_PMA_SCRATCH_PAD_12_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_PMA_SCRATCH_PAD_12_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_13 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_13
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_13 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_13_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_PMA_SCRATCH_PAD_13_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_PMA_SCRATCH_PAD_13_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_PMA_SCRATCH_PAD_13_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_PMA_SCRATCH_PAD_13_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_14 register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_14
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_14 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_14_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_PMA_SCRATCH_PAD_14_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_PMA_SCRATCH_PAD_14_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_PMA_SCRATCH_PAD_14_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_PMA_SCRATCH_PAD_14_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_SCRATCH_PAD_15 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_scratch_pad_15
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t PMA_SCRATCH_PAD_15 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_scratch_pad_15_reg_t;

#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_PMA_SCRATCH_PAD_15_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_PMA_SCRATCH_PAD_15_BF_WID (32)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_PMA_SCRATCH_PAD_15_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_PMA_SCRATCH_PAD_15_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_PMU_IRANGE register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_pmu_irange
  * PMU Setting
  */

typedef union {
  struct {
    uint32_t PMA_PMU_IRANGE : 32;
    ///< PMU current force/measure range.  It is used for storing the ATE measured
    ///< current for RCOMP.  The actual calculation of converting the current
    ///< to final trim will be done by firmware
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_pmu_irange_reg_t;

#define PMA_CMN_MSG_PMA_PMU_IRANGE_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_PMU_IRANGE_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_PMU_IRANGE_WR_MASK (0xffffffffU)


///< PMU current force/measure range.  It is used for storing the ATE measured
///< current for RCOMP.  The actual calculation of converting the current
///< to final trim will be done by firmware
#define PMA_CMN_MSG_PMA_PMU_IRANGE_PMA_PMU_IRANGE_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_PMU_IRANGE_PMA_PMU_IRANGE_BF_WID (32)
#define PMA_CMN_MSG_PMA_PMU_IRANGE_PMA_PMU_IRANGE_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_PMU_IRANGE_PMA_PMU_IRANGE_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_PMU_VFORCE register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_pmu_vforce
  * PMU Setting
  */

typedef union {
  struct {
    uint32_t PMA_PMU_VFORCE : 32;
    ///< PMU voltage force/measure range.  It is used for storing the ATE measured
    ///< current for RCOMP.  The actual calculation of converting the current
    ///< to final trim will be done by firmware
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_pmu_vforce_reg_t;

#define PMA_CMN_MSG_PMA_PMU_VFORCE_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_PMU_VFORCE_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_PMU_VFORCE_WR_MASK (0xffffffffU)


///< PMU voltage force/measure range.  It is used for storing the ATE measured
///< current for RCOMP.  The actual calculation of converting the current
///< to final trim will be done by firmware
#define PMA_CMN_MSG_PMA_PMU_VFORCE_PMA_PMU_VFORCE_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_PMU_VFORCE_PMA_PMU_VFORCE_BF_WID (32)
#define PMA_CMN_MSG_PMA_PMU_VFORCE_PMA_PMU_VFORCE_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_PMU_VFORCE_PMA_PMU_VFORCE_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_DIE_TEMPERATURE register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_die_temperature
  * Die temperature scratch
  */

typedef union {
  struct {
    uint32_t PMA_DIE_TEMPERATURE : 32;
    ///< Scratch register to write the die temperature from the SoC
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_die_temp_reg_t;

#define PMA_CMN_MSG_PMA_DIE_TEMP_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_DIE_TEMP_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_DIE_TEMP_WR_MASK (0xffffffffU)


///< Scratch register to write the die temperature from the SoC
#define PMA_CMN_MSG_PMA_DIE_TEMP_PMA_DIE_TEMP_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_DIE_TEMP_PMA_DIE_TEMP_BF_WID (32)
#define PMA_CMN_MSG_PMA_DIE_TEMP_PMA_DIE_TEMP_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_DIE_TEMP_PMA_DIE_TEMP_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_PMA_CMN_FUSE_SPARE register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/pma_cmn_fuse_spare
  * Fuse Spare
  */

typedef union {
  struct {
    uint32_t PMA_CMN_FUSE_SPARE : 32;
    ///< Fuse Spare
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_pma_cmn_fuse_spare_reg_t;

#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_WR_MASK (0x00000000U)


///< Fuse Spare
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_PMA_CMN_FUSE_SPARE_BF_OFF ( 0)
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_PMA_CMN_FUSE_SPARE_BF_WID (32)
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_PMA_CMN_FUSE_SPARE_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_PMA_CMN_FUSE_SPARE_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CAR_CFG register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_car_cfg
  * CMN clock and reset config
  */

typedef union {
  struct {
    uint32_t PMA_CKGATE_DISABLE : 1;
    ///< Disable all clock gating.  When this is set, fsm main clock will be
    ///< always running
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMN_MAINCLKEXT_SEL : 1;
    ///< FSM main clock source. 0 -Selected Ref clock from Switch Fabric; 1
    ///< - i_ck_mainext (pin)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CMN_KEEPALIVE_FAST_SEL : 1;
    ///< Main clock source when CMN is in power down state.  0 - Keepalive
    ///< Slow Clock; 1 - Keepalive Fast Clock
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CMN_DPMA_REF_SEL : 1;
    ///< Main clock source when CMN is in power up state.  0 - CMN PLL A Reference
    ///< clock; 1 - CMN PLL B Reference Clock
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CMN_DPMA_REFCKBUF_SEL : 1;
    ///< Selects the reference clock pad input that will be used for main clock.
    ///< Valid when cmn_refckbuf_as_mainclk_sel is 1. 0 - xioa_ck_ref_pad0;
    ///< 1 - xioa_ck_ref_pad1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CMN_REFCKBUF_AS_MAINCLK_SEL : 1;
    ///< Use reference clock pad input as main clock. Valid when cmn_mainclkext_sel
    ///< is 0.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CMN_CTRLCLK_MUX : 1;
    ///< CMN Ctrl clock source.  0 - i_ck_ctrl_cmn; 1 - ck_main
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CMN_MAINCLK_DIV : 3;
    ///< FSM main clock divider.  The main clock runs in PMA must be less than
    ///< 333 MHz
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CMNFSM_CKEN_OVREN : 1;
    ///< FSM clock enable override enable.  When this is set, the FSM main
    ///< clock can be disable/enable by cmn_fsm_cken_ovr.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CMNFSM_CKEN_OVR : 1;
    ///< FSM clock enable override value.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t CMN_RST_OVR_EN : 1;
    ///< CMN reset override enable
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t CMN_RST_B_OVR : 1;
    ///< CMN reset override value
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CMNMAINCLK_LOCOVREN : 1;
    ///< cmn_mainclock register ovrride enable.  When this is set all register
    ///< under this group will be in register override mode.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CMNMAINCLK_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Keepalive clock override value.  To force Main clock runs in keepalive
    ///< clock.  This only takes into effort when cmn_mainclk_locovren is set
    ///< to 1.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CMN_GB_COMP_SAMPLE_CLKDIV_RATIO : 2;
    ///< CMN calibration comparator sample clock divider.  It steps down the
    ///< main clock to be used for calibration comparator in APMA
    ///< 0: div1; 1: div2; 2 div 4; 3; div 8
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_car_cfg_reg_t;

#define PMA_CMN_MSG_CMN_CAR_CFG_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CAR_CFG_RD_MASK (0x000ff77fU)
#define PMA_CMN_MSG_CMN_CAR_CFG_WR_MASK (0x000ff77fU)


///< Disable all clock gating.  When this is set, fsm main clock will be
///< always running
#define PMA_CMN_MSG_CMN_CAR_CFG_PMA_CKGATE_DIS_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CAR_CFG_PMA_CKGATE_DIS_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_PMA_CKGATE_DIS_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_CAR_CFG_PMA_CKGATE_DIS_BF_DEF (0x00000000)

///< FSM main clock source. 0 -Selected Ref clock from Switch Fabric; 1
///< - i_ck_mainext (pin)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLKEXT_SEL_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLKEXT_SEL_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLKEXT_SEL_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLKEXT_SEL_BF_DEF (0x00000000)

///< Main clock source when CMN is in power down state.  0 - Keepalive
///< Slow Clock; 1 - Keepalive Fast Clock
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_KEEPALIVE_FAST_SEL_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_KEEPALIVE_FAST_SEL_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_KEEPALIVE_FAST_SEL_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_KEEPALIVE_FAST_SEL_BF_DEF (0x00000000)

///< Main clock source when CMN is in power up state.  0 - CMN PLL A Reference
///< clock; 1 - CMN PLL B Reference Clock
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REF_SEL_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REF_SEL_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REF_SEL_BF_MSK (0x00000008)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REF_SEL_BF_DEF (0x00000000)

///< Selects the reference clock pad input that will be used for main clock.
///< Valid when cmn_refckbuf_as_mainclk_sel is 1. 0 - xioa_ck_ref_pad0;
///< 1 - xioa_ck_ref_pad1
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REFCKBUF_SEL_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REFCKBUF_SEL_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REFCKBUF_SEL_BF_MSK (0x00000010)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_DPMA_REFCKBUF_SEL_BF_DEF (0x00000000)

///< Use reference clock pad input as main clock. Valid when cmn_mainclkext_sel
///< is 0.
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_REFCKBUF_AS_MAINCLK_SEL_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_REFCKBUF_AS_MAINCLK_SEL_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_REFCKBUF_AS_MAINCLK_SEL_BF_MSK (0x00000020)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_REFCKBUF_AS_MAINCLK_SEL_BF_DEF (0x00000000)

///< CMN Ctrl clock source.  0 - i_ck_ctrl_cmn; 1 - ck_main
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_CTRLCLK_MUX_BF_OFF ( 6)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_CTRLCLK_MUX_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_CTRLCLK_MUX_BF_MSK (0x00000040)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_CTRLCLK_MUX_BF_DEF (0x00000000)

///< FSM main clock divider.  The main clock runs in PMA must be less than
///< 333 MHz
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLK_DIV_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLK_DIV_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLK_DIV_BF_MSK (0x00000700)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_MAINCLK_DIV_BF_DEF (0x00000000)

///< FSM clock enable override enable.  When this is set, the FSM main
///< clock can be disable/enable by cmn_fsm_cken_ovr.
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVREN_BF_OFF (12)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVREN_BF_MSK (0x00001000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVREN_BF_DEF (0x00000000)

///< FSM clock enable override value.
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVR_BF_OFF (13)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVR_BF_MSK (0x00002000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNFSM_CKEN_OVR_BF_DEF (0x00000000)

///< CMN reset override enable
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_OVR_EN_BF_OFF (14)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_OVR_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_OVR_EN_BF_MSK (0x00004000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_OVR_EN_BF_DEF (0x00000000)

///< CMN reset override value
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_B_OVR_BF_OFF (15)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_B_OVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_B_OVR_BF_MSK (0x00008000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_RST_B_OVR_BF_DEF (0x00000000)

///< cmn_mainclock register ovrride enable.  When this is set all register
///< under this group will be in register override mode.
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_LOCOVREN_BF_OFF (16)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_LOCOVREN_BF_MSK (0x00010000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_LOCOVREN_BF_DEF (0x00000000)

///< Keepalive clock override value.  To force Main clock runs in keepalive
///< clock.  This only takes into effort when cmn_mainclk_locovren is set
///< to 1.
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_KEEPALIVE_EN_B_LOCOVR_BF_OFF (17)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00020000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMNMAINCLK_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< CMN calibration comparator sample clock divider.  It steps down the
///< main clock to be used for calibration comparator in APMA
///< 0: div1; 1: div2; 2 div 4; 3; div 8
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_GB_SAMPLE_CLKDIV_RATIO_BF_OFF (18)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_GB_SAMPLE_CLKDIV_RATIO_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_GB_SAMPLE_CLKDIV_RATIO_BF_MSK (0x000C0000)
#define PMA_CMN_MSG_CMN_CAR_CFG_CMN_GB_SAMPLE_CLKDIV_RATIO_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CAR_CFG_RO register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_car_cfg_ro
  * CMN clock and reset config readback
  */

typedef union {
  struct {
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CMN_KEEPALIVECLK_STAT : 2;
    ///< CMN main clock glitchless clock mux status. 2'01 - keepalive slow
    ///< clock is selected; 2'b10 - keepalive fast clock is selected
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t CMN_MAINCLK_STAT : 2;
    ///< CMN main clock glitchless clock mux status. 2'01 - keepalive clock
    ///< is selected; 2'b10 - refclk is selected
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t CMNMAINCLK_KEEPALIVE_EN_B_LOC : 1;
    ///< Keepalive clock enable in Main clock.  This is the value before the
    ///< register override
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_car_cfg_ro_reg_t;

#define PMA_CMN_MSG_CMN_CAR_CFG_RO_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_RD_MASK (0x010f0000U)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_WR_MASK (0x00000000U)


///< CMN main clock glitchless clock mux status. 2'01 - keepalive slow
///< clock is selected; 2'b10 - keepalive fast clock is selected
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_KEEPALIVECLK_STAT_BF_OFF (16)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_KEEPALIVECLK_STAT_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_KEEPALIVECLK_STAT_BF_MSK (0x00030000)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_KEEPALIVECLK_STAT_BF_DEF (0x00000000)

///< CMN main clock glitchless clock mux status. 2'01 - keepalive clock
///< is selected; 2'b10 - refclk is selected
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_MAINCLK_STAT_BF_OFF (18)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_MAINCLK_STAT_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_MAINCLK_STAT_BF_MSK (0x000C0000)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMN_MAINCLK_STAT_BF_DEF (0x00000000)

///< Keepalive clock enable in Main clock.  This is the value before the
///< register override
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMNMAINCLK_KEEPALIVE_EN_B_LOC_BF_OFF (24)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMNMAINCLK_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMNMAINCLK_KEEPALIVE_EN_B_LOC_BF_MSK (0x01000000)
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_CMNMAINCLK_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_FORCE_PUP_CTRL register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_force_pup_ctrl
  * CMN soft force power control
  */

typedef union {
  struct {
    uint32_t CMN_FORCE_PUP_EN : 1;
    ///< CMN soft force power override enable.  When this is set CMN force
    ///< power up will be controlled by cmn_force_pup
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMN_FORCE_PUP : 1;
    ///< CMN soft force power
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_force_pup_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_WR_MASK (0x00000003U)


///< CMN soft force power override enable.  When this is set CMN force
///< power up will be controlled by cmn_force_pup
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_EN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_EN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_EN_BF_DEF (0x00000000)

///< CMN soft force power
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_CMN_FORCE_PUP_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_POWER_MNG_CTRL register description at address offset 0x64
  *
  * Register default value:        0x00300000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_power_mng_ctrl
  * CMN power management control
  */

typedef union {
  struct {
    uint32_t CMNPMU_H8_OFF_DELAY : 4;
    ///< PMU hibernate off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNPMU_H8_RST_ON_DELAY : 4;
    ///< PMU hibernate rest on delay
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CMNPMU_ISO_OFF_DELAY : 4;
    ///< PMU islolation off delay
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CMNPMU_RESTORE_ISO_ON_DELAY : 4;
    ///< PMU restore isolation on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t CMNPMU_RESTORE_OFF_DELAY : 4;
    ///< PMU restore isolation off delay
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CMNPMU_RST_OFF_DELAY : 4;
    ///< PMU reset off delay
    ///< AccessType="RW" BitOffset="20" ResetValue="0x3"
    uint32_t CMNFSM_PMU_REQ_EN : 1;
    ///< PMU request override enable
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CMNFSM_PMU_REQ : 1;
    ///< PMU request override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_pwr_mng_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_DEFAULT (0x00300000U)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_RD_MASK (0x03ffffffU)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_WR_MASK (0x03ffffffU)


///< PMU hibernate off delay
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_OFF_DELAY_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_OFF_DELAY_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_OFF_DELAY_BF_MSK (0x0000000F)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_OFF_DELAY_BF_DEF (0x00000000)

///< PMU hibernate rest on delay
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_RST_ON_DELAY_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_RST_ON_DELAY_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_RST_ON_DELAY_BF_MSK (0x000000F0)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_H8_RST_ON_DELAY_BF_DEF (0x00000000)

///< PMU islolation off delay
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_ISO_OFF_DELAY_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_ISO_OFF_DELAY_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_ISO_OFF_DELAY_BF_MSK (0x00000F00)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_ISO_OFF_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation on delay
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_ISO_ON_DELAY_BF_OFF (12)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_ISO_ON_DELAY_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_ISO_ON_DELAY_BF_MSK (0x0000F000)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_ISO_ON_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation off delay
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_OFF_DELAY_BF_OFF (16)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_OFF_DELAY_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_OFF_DELAY_BF_MSK (0x000F0000)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RESTORE_OFF_DELAY_BF_DEF (0x00000000)

///< PMU reset off delay
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RST_OFF_DELAY_BF_OFF (20)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RST_OFF_DELAY_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RST_OFF_DELAY_BF_MSK (0x00F00000)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNPMU_RST_OFF_DELAY_BF_DEF (0x00300000)

///< PMU request override enable
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_EN_BF_OFF (24)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_EN_BF_MSK (0x01000000)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_EN_BF_DEF (0x00000000)

///< PMU request override
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_BF_OFF (25)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_BF_MSK (0x02000000)
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_CMNFSM_PMU_REQ_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_POWER_MNG_STATUS register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_power_mng_status
  * CMN power management status
  */

typedef union {
  struct {
    uint32_t CMNFSM_PMU_ACK : 1;
    ///< PMU ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNFSM_PMU_PSTATE : 1;
    ///< PMU current Pstate
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CMNFSM_PMU_STAT : 1;
    ///< PMU status.  0 - Idle; 1 - Isolation On
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t CMNFSM_PMU_STATE : 4;
    ///< PMU FSM state
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t CMNFSM_PMUIF_STATE : 3;
    ///< PMU I/F FSM state
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_pwr_mng_stat_reg_t;

#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_RD_MASK (0x000007f7U)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_WR_MASK (0x00000000U)


///< PMU ack
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_ACK_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_ACK_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_ACK_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_ACK_BF_DEF (0x00000000)

///< PMU current Pstate
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_PSTATE_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_PSTATE_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_PSTATE_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_PSTATE_BF_DEF (0x00000000)

///< PMU status.  0 - Idle; 1 - Isolation On
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STAT_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STAT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STAT_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STAT_BF_DEF (0x00000000)

///< PMU FSM state
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STATE_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STATE_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STATE_BF_MSK (0x000000F0)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMU_STATE_BF_DEF (0x00000000)

///< PMU I/F FSM state
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMUIF_STATE_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMUIF_STATE_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMUIF_STATE_BF_MSK (0x00000700)
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_CMNFSM_PMUIF_STATE_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNFSM_MAINFSM_CTRL register description at address offset 0x6c
  *
  * Register default value:        0x00001220
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnfsm_mainfsm_ctrl
  * CMN Main FSM control
  */

typedef union {
  struct {
    uint32_t CMN_PG_DISABLE : 1;
    ///< Main FSM power gated disable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CMN_ON_STATE : 3;
    ///< Main FSM ON State Mapping.  To define which Pstate is considered CMN
    ///< has been powered up
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CMN_READY_STATE : 3;
    ///< Main FSM READY State Mapping.  To define which Pstate to be considered
    ///< CMN is up and ready to be used
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CMNFSM_CALABORT_PULSE_WIDTH : 3;
    ///< Main FSM calibration abort pulse width
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_fsm_mainfsm_ctrl_reg_t;

#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_DEFAULT (0x00001220U)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_RD_MASK (0x00007771U)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_WR_MASK (0x00007771U)


///< Main FSM power gated disable
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_PG_DIS_BF_OFF ( 0)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_PG_DIS_BF_WID ( 1)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_PG_DIS_BF_MSK (0x00000001)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_PG_DIS_BF_DEF (0x00000000)

///< Main FSM ON State Mapping.  To define which Pstate is considered CMN
///< has been powered up
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_ON_STATE_BF_OFF ( 4)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_ON_STATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_ON_STATE_BF_MSK (0x00000070)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_ON_STATE_BF_DEF (0x00000020)

///< Main FSM READY State Mapping.  To define which Pstate to be considered
///< CMN is up and ready to be used
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_READY_STATE_BF_OFF ( 8)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_READY_STATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_READY_STATE_BF_MSK (0x00000700)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMN_READY_STATE_BF_DEF (0x00000200)

///< Main FSM calibration abort pulse width
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMNFSM_CALABORT_PULSE_WIDTH_BF_OFF (12)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMNFSM_CALABORT_PULSE_WIDTH_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMNFSM_CALABORT_PULSE_WIDTH_BF_MSK (0x00007000)
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_CMNFSM_CALABORT_PULSE_WIDTH_BF_DEF (0x00001000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNFSM_STATUS_0 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnfsm_status_0
  * CMN FSM status
  */

typedef union {
  struct {
    uint32_t CMNFSM_MAIN_CKEN_STAT : 1;
    ///< Main FSM clock enable status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNFSM_MAIN_STATUS : 1;
    ///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
    ///< state.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CMNFSM_MAIN_CUR_PSTATE : 3;
    ///< Main FSM current PState
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CMNFSM_MAIN_STATE : 4;
    ///< Main FSM  state
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t CMNFSM_MAIN_TARG_PSTATE : 3;
    ///< Main FSM target PState
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t CMNFSM_MAIN_READY : 1;
    ///< Main FSM ready
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t CMNFSM_CAL_CUR_PSTATE : 3;
    ///< CalMaster FSM current Pstate
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t CMNFSM_CAL_CUR_QUAD : 2;
    ///< CalMaster FSM current Quad
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t CMNFSM_CAL_STATE : 4;
    ///< CalMaster FSM state
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t CMNFSM_RPU_STATE : 3;
    ///< RPU FSM state
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t CMNRPU_STATE_PSTATE : 3;
    ///< RPU curent Pstate
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t CMNRPU_STATE_QUAD : 3;
    ///< RPU curent Quad
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t CMNRPU_STEPDIR : 1;
    ///< RPU power up/down status.  0 - power down ; 1 - power up
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_fsm_stat_0_reg_t;

#define PMA_CMN_MSG_FSM_STAT_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_FSM_STAT_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_FSM_STAT_0_WR_MASK (0x00000000U)


///< Main FSM clock enable status
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CKEN_STAT_BF_OFF ( 0)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CKEN_STAT_BF_WID ( 1)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CKEN_STAT_BF_MSK (0x00000001)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CKEN_STAT_BF_DEF (0x00000000)

///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
///< state.
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STAT_BF_OFF ( 1)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STAT_BF_WID ( 1)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STAT_BF_MSK (0x00000002)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STAT_BF_DEF (0x00000000)

///< Main FSM current PState
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CUR_PSTATE_BF_OFF ( 2)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CUR_PSTATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CUR_PSTATE_BF_MSK (0x0000001C)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_CUR_PSTATE_BF_DEF (0x00000000)

///< Main FSM  state
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STATE_BF_OFF ( 5)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STATE_BF_WID ( 4)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STATE_BF_MSK (0x000001E0)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_STATE_BF_DEF (0x00000000)

///< Main FSM target PState
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_TARG_PSTATE_BF_OFF ( 9)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_TARG_PSTATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_TARG_PSTATE_BF_MSK (0x00000E00)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_TARG_PSTATE_BF_DEF (0x00000000)

///< Main FSM ready
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_READY_BF_OFF (12)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_READY_BF_WID ( 1)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_READY_BF_MSK (0x00001000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_MAIN_READY_BF_DEF (0x00000000)

///< CalMaster FSM current Pstate
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_PSTATE_BF_OFF (13)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_PSTATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_PSTATE_BF_MSK (0x0000E000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_PSTATE_BF_DEF (0x00000000)

///< CalMaster FSM current Quad
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_QUAD_BF_OFF (16)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_QUAD_BF_WID ( 2)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_QUAD_BF_MSK (0x00030000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_CUR_QUAD_BF_DEF (0x00000000)

///< CalMaster FSM state
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_STATE_BF_OFF (18)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_STATE_BF_WID ( 4)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_STATE_BF_MSK (0x003C0000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_CAL_STATE_BF_DEF (0x00000000)

///< RPU FSM state
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_RPU_STATE_BF_OFF (22)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_RPU_STATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_RPU_STATE_BF_MSK (0x01C00000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNFSM_RPU_STATE_BF_DEF (0x00000000)

///< RPU curent Pstate
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_PSTATE_BF_OFF (25)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_PSTATE_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_PSTATE_BF_MSK (0x0E000000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_PSTATE_BF_DEF (0x00000000)

///< RPU curent Quad
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_QUAD_BF_OFF (28)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_QUAD_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_QUAD_BF_MSK (0x70000000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STATE_QUAD_BF_DEF (0x00000000)

///< RPU power up/down status.  0 - power down ; 1 - power up
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STEPDIR_BF_OFF (31)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STEPDIR_BF_WID ( 1)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STEPDIR_BF_MSK (0x80000000)
#define PMA_CMN_MSG_FSM_STAT_0_CMNRPU_STEPDIR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNFSM_STATUS_1 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnfsm_status_1
  * CMN FSM status
  */

typedef union {
  struct {
    uint32_t CMNFSM_CAL_IS_RATEWIDTHFSM_REQ : 1;
    ///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
    ///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
    ///< FSM
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_fsm_stat_1_reg_t;

#define PMA_CMN_MSG_FSM_STAT_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_FSM_STAT_1_RD_MASK (0x00000001U)
#define PMA_CMN_MSG_FSM_STAT_1_WR_MASK (0x00000000U)


///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
///< FSM
#define PMA_CMN_MSG_FSM_STAT_1_CMNFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_OFF ( 0)
#define PMA_CMN_MSG_FSM_STAT_1_CMNFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_WID ( 1)
#define PMA_CMN_MSG_FSM_STAT_1_CMNFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_MSK (0x00000001)
#define PMA_CMN_MSG_FSM_STAT_1_CMNFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNFSM_CALMASTER_PSTATE_CFG register description at address offset 0x78
  *
  * Register default value:        0x00000010
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnfsm_calmaster_pstate_cfg
  * CMN Calibration Master config
  */

typedef union {
  struct {
    uint32_t CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT0 : 3;
    ///< CalMaster break point 0 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT1 : 3;
    ///< CalMaster break point 1 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_fsm_calmaster_pstate_cfg_reg_t;

#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_DEFAULT (0x00000010U)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_RD_MASK (0x00000077U)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_WR_MASK (0x00000077U)


///< CalMaster break point 0 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_OFF ( 0)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_MSK (0x00000007)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_OFF ( 4)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_WID ( 3)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_MSK (0x00000070)
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_CMNCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000010)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNFSM_CALMASTER_QUAD_CFG register description at address offset 0x7c
  *
  * Register default value:        0x00000006
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnfsm_calmaster_quad_cfg
  * CMN Calibration Master config
  */

typedef union {
  struct {
    uint32_t CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT0 : 2;
    ///< CalMaster break point 0 Quad. Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT1 : 2;
    ///< CalMaster break point 1 Quad. Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_fsm_calmaster_quad_cfg_reg_t;

#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_DEFAULT (0x00000006U)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_RD_MASK (0x0000000fU)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_WR_MASK (0x0000000fU)


///< CalMaster break point 0 Quad. Define the Quad to start the calibration
///< during the power up sequence
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_OFF ( 0)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_WID ( 2)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_MSK (0x00000003)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000002)

///< CalMaster break point 1 Quad. Define the Quad to start the calibration
///< during the power up sequence
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_OFF ( 2)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_WID ( 2)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_MSK (0x0000000C)
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_CMNCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000004)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_CTRL register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_ctrl
  * CMN RPU control
  */

typedef union {
  struct {
    uint32_t CMNRPU_EN_B : 1;
    ///< RPU enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_ctrl_reg_t;

#define PMA_CMN_MSG_RPU_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_RPU_CTRL_RD_MASK (0x00000001U)
#define PMA_CMN_MSG_RPU_CTRL_WR_MASK (0x00000001U)


///< RPU enable
#define PMA_CMN_MSG_RPU_CTRL_CMNRPU_EN_B_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_CTRL_CMNRPU_EN_B_BF_WID ( 1)
#define PMA_CMN_MSG_RPU_CTRL_CMNRPU_EN_B_BF_MSK (0x00000001)
#define PMA_CMN_MSG_RPU_CTRL_CMNRPU_EN_B_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_LUT_CFG_0 register description at address offset 0x84
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_lut_cfg_0
  * CMN RPU LUT
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power up timer LUT - entry 1.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power up timer LUT - entry 2.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_lut_cfg_0_reg_t;

#define PMA_CMN_MSG_RPU_LUT_CFG_0_DEFAULT (0x00100010U)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_RD_MASK (0x1fff1fffU)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 1.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY1_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY1_BF_MSK (0x00001FFF)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY1_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 2.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY2_BF_OFF (16)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY2_BF_MSK (0x1FFF0000)
#define PMA_CMN_MSG_RPU_LUT_CFG_0_CMNRPU_EVUP_DELAY_LUT_ENTRY2_BF_DEF (0x00100000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_LUT_CFG_1 register description at address offset 0x88
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_lut_cfg_1
  * CMN RPU LUT
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power up timer LUT - entry 3.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY4 : 13;
    ///< RPU power up timer LUT - entry 4.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_lut_cfg_1_reg_t;

#define PMA_CMN_MSG_RPU_LUT_CFG_1_DEFAULT (0x00100010U)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_RD_MASK (0x1fff1fffU)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 3.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY3_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY3_BF_MSK (0x00001FFF)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY3_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 4.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY4_BF_OFF (16)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY4_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY4_BF_MSK (0x1FFF0000)
#define PMA_CMN_MSG_RPU_LUT_CFG_1_CMNRPU_EVUP_DELAY_LUT_ENTRY4_BF_DEF (0x00100000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_LUT_CFG_2 register description at address offset 0x8c
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_lut_cfg_2
  * CMN RPU LUT
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY5 : 13;
    ///< RPU power up timer LUT - entry 5.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY6 : 13;
    ///< RPU power up timer LUT - entry 6.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_lut_cfg_2_reg_t;

#define PMA_CMN_MSG_RPU_LUT_CFG_2_DEFAULT (0x00100010U)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_RD_MASK (0x1fff1fffU)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 5.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY5_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY5_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY5_BF_MSK (0x00001FFF)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY5_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 6.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY6_BF_OFF (16)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY6_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY6_BF_MSK (0x1FFF0000)
#define PMA_CMN_MSG_RPU_LUT_CFG_2_CMNRPU_EVUP_DELAY_LUT_ENTRY6_BF_DEF (0x00100000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_LUT_CFG_3 register description at address offset 0x90
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_lut_cfg_3
  * CMN RPU LUT
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVUP_DELAY_LUT_ENTRY7 : 13;
    ///< RPU power up timer LUT - entry 7.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power down timer LUT - entry 1.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_lut_cfg_3_reg_t;

#define PMA_CMN_MSG_RPU_LUT_CFG_3_DEFAULT (0x00100010U)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_RD_MASK (0x1fff1fffU)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 7.  Define the duration in number of
///< main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVUP_DELAY_LUT_ENTRY7_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVUP_DELAY_LUT_ENTRY7_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVUP_DELAY_LUT_ENTRY7_BF_MSK (0x00001FFF)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVUP_DELAY_LUT_ENTRY7_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 1.  Define the duration in number
///< of main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVDN_DELAY_LUT_ENTRY1_BF_OFF (16)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVDN_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVDN_DELAY_LUT_ENTRY1_BF_MSK (0x1FFF0000)
#define PMA_CMN_MSG_RPU_LUT_CFG_3_CMNRPU_EVDN_DELAY_LUT_ENTRY1_BF_DEF (0x00100000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_LUT_CFG_4 register description at address offset 0x94
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_lut_cfg_4
  * CMN RPU LUT
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVDN_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power down timer LUT - entry 2.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power down timer LUT - entry 3.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_lut_cfg_4_reg_t;

#define PMA_CMN_MSG_RPU_LUT_CFG_4_DEFAULT (0x00100010U)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_RD_MASK (0x1fff1fffU)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_WR_MASK (0x1fff1fffU)


///< RPU power down timer LUT - entry 2.  Define the duration in number
///< of main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY2_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY2_BF_MSK (0x00001FFF)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY2_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 3.  Define the duration in number
///< of main clock
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY3_BF_OFF (16)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY3_BF_MSK (0x1FFF0000)
#define PMA_CMN_MSG_RPU_LUT_CFG_4_CMNRPU_EVDN_DELAY_LUT_ENTRY3_BF_DEF (0x00100000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_EVUP_DELAY_CFG_0 register description at address offset 0x98
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_evup_delay_cfg_0
  * CMN power up event config
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q0 : 3;
    ///< RPU power up event S0Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q1 : 3;
    ///< RPU power up event S0Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q2 : 3;
    ///< RPU power up event S0Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q3 : 3;
    ///< RPU power up event S0Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q4 : 3;
    ///< RPU power up event S0Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q5 : 3;
    ///< RPU power up event S0Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q6 : 3;
    ///< RPU power up event S0Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S0Q7 : 3;
    ///< RPU power up event S0Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q0 : 3;
    ///< RPU power up event S1Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q1 : 3;
    ///< RPU power up event S1Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_evup_delay_cfg_0_reg_t;

#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_DEFAULT (0x09249249U)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_RD_MASK (0x3fffffffU)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_WR_MASK (0x3fffffffU)


///< RPU power up event S0Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000007)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power up event S0Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_OFF ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_MSK (0x00000038)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000008)

///< RPU power up event S0Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_OFF ( 6)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_MSK (0x000001C0)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000040)

///< RPU power up event S0Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_OFF ( 9)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_MSK (0x00000E00)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000200)

///< RPU power up event S0Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_OFF (12)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00007000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00001000)

///< RPU power up event S0Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_OFF (15)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00038000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00008000)

///< RPU power up event S0Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_OFF (18)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_MSK (0x001C0000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00040000)

///< RPU power up event S0Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_OFF (21)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_MSK (0x00E00000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00200000)

///< RPU power up event S1Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_OFF (24)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_MSK (0x07000000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_DEF (0x01000000)

///< RPU power up event S1Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_OFF (27)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_MSK (0x38000000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_DEF (0x08000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_EVUP_DELAY_CFG_1 register description at address offset 0x9c
  *
  * Register default value:        0x00049249
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_evup_delay_cfg_1
  * CMN power up event config
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q2 : 3;
    ///< RPU power up event S1Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q3 : 3;
    ///< RPU power up event S1Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q4 : 3;
    ///< RPU power up event S1Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q5 : 3;
    ///< RPU power up event S1Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q6 : 3;
    ///< RPU power up event S1Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S1Q7 : 3;
    ///< RPU power up event S1Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t CMNRPU_EVUP_DELAY_LUT_SEL_S2Q0 : 3;
    ///< RPU power up event S2Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_evup_delay_cfg_1_reg_t;

#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_DEFAULT (0x00049249U)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_RD_MASK (0x001fffffU)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_WR_MASK (0x001fffffU)


///< RPU power up event S1Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00000007)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00000001)

///< RPU power up event S1Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_OFF ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_MSK (0x00000038)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00000008)

///< RPU power up event S1Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_OFF ( 6)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_MSK (0x000001C0)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000040)

///< RPU power up event S1Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_OFF ( 9)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000E00)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000200)

///< RPU power up event S1Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_OFF (12)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_MSK (0x00007000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00001000)

///< RPU power up event S1Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_OFF (15)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00038000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00008000)

///< RPU power up event S2Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_OFF (18)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_WID ( 3)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_MSK (0x001C0000)
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_CMNRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00040000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_EVDN_DELAY_CFG_0 register description at address offset 0xa0
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_evdn_delay_cfg_0
  * CMN power down event config
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q0 : 2;
    ///< RPU power down event S0Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q1 : 2;
    ///< RPU power down event S0Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q2 : 2;
    ///< RPU power down event S0Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q3 : 2;
    ///< RPU power down event S0Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q4 : 2;
    ///< RPU power down event S0Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q5 : 2;
    ///< RPU power down event S0Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q6 : 2;
    ///< RPU power down event S0Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S0Q7 : 2;
    ///< RPU power down event S0Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q0 : 2;
    ///< RPU power down event S1Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q1 : 2;
    ///< RPU power down event S1Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_evdn_delay_cfg_0_reg_t;

#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_DEFAULT (0x09249249U)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_RD_MASK (0x1b6db6dbU)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_WR_MASK (0x1b6db6dbU)


///< RPU power down event S0Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000003)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power down event S0Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_OFF ( 3)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_MSK (0x00000018)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000008)

///< RPU power down event S0Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_OFF ( 6)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_MSK (0x000000C0)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000040)

///< RPU power down event S0Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_OFF ( 9)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_MSK (0x00000600)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000200)

///< RPU power down event S0Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_OFF (12)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00003000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00001000)

///< RPU power down event S0Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_OFF (15)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00018000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00008000)

///< RPU power down event S0Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_OFF (18)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_MSK (0x000C0000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00040000)

///< RPU power down event S0Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_OFF (21)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_MSK (0x00600000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00200000)

///< RPU power down event S1Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_OFF (24)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_MSK (0x03000000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_DEF (0x01000000)

///< RPU power down event S1Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_OFF (27)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_MSK (0x18000000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_DEF (0x08000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMNRPU_EVDN_DELAY_CFG_1 register description at address offset 0xa4
  *
  * Register default value:        0x00049249
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmnrpu_evdn_delay_cfg_1
  * CMN power down event config
  */

typedef union {
  struct {
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q2 : 2;
    ///< RPU power down event S1Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q3 : 2;
    ///< RPU power down event S1Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q4 : 2;
    ///< RPU power down event S1Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q5 : 2;
    ///< RPU power down event S1Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q6 : 2;
    ///< RPU power down event S1Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S1Q7 : 2;
    ///< RPU power down event S1Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t CMNRPU_EVDN_DELAY_LUT_SEL_S2Q0 : 2;
    ///< RPU power down event S2Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_rpu_evdn_delay_cfg_1_reg_t;

#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_DEFAULT (0x00049249U)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_RD_MASK (0x000db6dbU)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_WR_MASK (0x000db6dbU)


///< RPU power down event S1Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_OFF ( 0)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00000003)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00000001)

///< RPU power down event S1Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_OFF ( 3)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_MSK (0x00000018)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00000008)

///< RPU power down event S1Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_OFF ( 6)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_MSK (0x000000C0)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000040)

///< RPU power down event S1Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_OFF ( 9)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000600)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000200)

///< RPU power down event S1Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_OFF (12)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_MSK (0x00003000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00001000)

///< RPU power down event S1Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_OFF (15)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00018000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00008000)

///< RPU power down event S2Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_OFF (18)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_WID ( 2)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_MSK (0x000C0000)
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_CMNRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00040000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RPU_EVENT_CFG_0 register description at address offset 0xa8
  *
  * Register default value:        0x00FF00FF
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rpu_event_cfg_0
  * CMN RPU event config
  */

typedef union {
  struct {
    uint32_t CMNRPUBRKPT_EVENT0_DN_CFG : 2;
    ///< RPU break point 0 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t CMNRPUBRKPT_EVENT0_DN_PTR_Q : 3;
    ///< RPU break point 0 in power down pointer 0 & 1 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t CMNRPUBRKPT_EVENT0_DN_PTR_S : 3;
    ///< RPU break point 0 in power down pointer 0 & 1 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t CMNRPUBRKPT_EVENT0_UP_CFG : 2;
    ///< RPU break point 0 in power upconfig
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t CMNRPUBRKPT_EVENT0_UP_PTR_Q : 3;
    ///< RPU break point 0 in power up pointer 0 & 1 q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x7"
    uint32_t CMNRPUBRKPT_EVENT0_UP_PTR_S : 3;
    ///< RPU break point 0 in power up pointer 0 & 1 s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x7"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rpu_event_cfg_0_reg_t;

#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_DEFAULT (0x00ff00ffU)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_RD_MASK (0x00ff00ffU)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_WR_MASK (0x00ff00ffU)


///< RPU break point 0 in power down config
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_CFG_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_CFG_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_CFG_BF_MSK (0x00000003)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 0 in power down pointer 0 & 1 q state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_Q_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_Q_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 0 in power down pointer 0 & 1 s state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_S_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_S_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 0 in power upconfig
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_CFG_BF_OFF (16)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_CFG_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_CFG_BF_MSK (0x00030000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_CFG_BF_DEF (0x00030000)

///< RPU break point 0 in power up pointer 0 & 1 q state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_Q_BF_OFF (18)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_Q_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_Q_BF_MSK (0x001C0000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_Q_BF_DEF (0x001C0000)

///< RPU break point 0 in power up pointer 0 & 1 s state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_S_BF_OFF (21)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_S_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_S_BF_MSK (0x00E00000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_CMNRPUBRKPT_EVENT0_UP_PTR_S_BF_DEF (0x00E00000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RPU_EVENT_CFG_1 register description at address offset 0xac
  *
  * Register default value:        0x00FF00FF
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rpu_event_cfg_1
  * CMN RPU event config
  */

typedef union {
  struct {
    uint32_t CMNRPUBRKPT_EVENT1_DN_CFG : 2;
    ///< RPU break point 1 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t CMNRPUBRKPT_EVENT1_DN_PTR_Q : 3;
    ///< RPU break point 1 in power down pointer 0 & 1 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t CMNRPUBRKPT_EVENT1_DN_PTR_S : 3;
    ///< RPU break point 1 in power down pointer 0 & 1 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t CMNRPUBRKPT_EVENT1_UP_CFG : 2;
    ///< RPU break point 1 in power upconfig
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t CMNRPUBRKPT_EVENT1_UP_PTR_Q : 3;
    ///< RPU break point 1 in power up pointer 0 & 1 q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x7"
    uint32_t CMNRPUBRKPT_EVENT1_UP_PTR_S : 3;
    ///< RPU break point 1 in power up pointer 0 & 1 s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x7"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rpu_event_cfg_1_reg_t;

#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_DEFAULT (0x00ff00ffU)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_RD_MASK (0x00ff00ffU)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_WR_MASK (0x00ff00ffU)


///< RPU break point 1 in power down config
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_CFG_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_CFG_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_CFG_BF_MSK (0x00000003)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 1 in power down pointer 0 & 1 q state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_Q_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_Q_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 1 in power down pointer 0 & 1 s state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_S_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_S_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 1 in power upconfig
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_CFG_BF_OFF (16)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_CFG_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_CFG_BF_MSK (0x00030000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_CFG_BF_DEF (0x00030000)

///< RPU break point 1 in power up pointer 0 & 1 q state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_Q_BF_OFF (18)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_Q_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_Q_BF_MSK (0x001C0000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_Q_BF_DEF (0x001C0000)

///< RPU break point 1 in power up pointer 0 & 1 s state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_S_BF_OFF (21)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_S_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_S_BF_MSK (0x00E00000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_CMNRPUBRKPT_EVENT1_UP_PTR_S_BF_DEF (0x00E00000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RPU_EVENT_CFG_2 register description at address offset 0xb0
  *
  * Register default value:        0x002F0033
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rpu_event_cfg_2
  * CMN RPU event config
  */

typedef union {
  struct {
    uint32_t CMNRPUCTL_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t CMNRPUCTL_KEEPALIVE_DN_PTR0_Q : 3;
    ///< RPU timer for keepalive clock select in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x4"
    uint32_t CMNRPUCTL_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t CMNRPUCTL_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t CMNRPUCTL_KEEPALIVE_UP_PTR0_Q : 3;
    ///< RPU timer for keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x3"
    uint32_t CMNRPUCTL_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rpu_event_cfg_2_reg_t;

#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_DEFAULT (0x002f0033U)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_RD_MASK (0x00ff00ffU)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_WR_MASK (0x00ff00ffU)


///< RPU timer for keepalive clock select in power down config
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for keepalive clock select in power down pointer 0 q state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000001C)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x00000010)

///< RPU timer for keepalive clock select in power down pointer 0 s state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_S_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000000E0)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_DN_PTR0_S_BF_DEF (0x00000020)

///< RPU timer for keepalive clock select in power upconfig
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_CFG_BF_OFF (16)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_CFG_BF_MSK (0x00030000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_CFG_BF_DEF (0x00030000)

///< RPU timer for keepalive clock select in power up pointer 0 q state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_OFF (18)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x001C0000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x000C0000)

///< RPU timer for keepalive clock select in power up pointer 0 s state
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_S_BF_OFF (21)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_S_BF_MSK (0x00E00000)
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_CMNRPUCTL_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00200000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CALAVG_CTRL_0 register description at address offset 0xb4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_calavg_ctrl_0
  * CMN Calibration Average Control
  */

typedef union {
  struct {
    uint32_t CMNCALAVG_ENG_BIT_IN_SEL : 2;
    ///< Calibraiton source.  0x0: apma.cmn_comp_out; all others reseved for
    ///< future used
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCALAVG_ENG_COUNT_MODE : 2;
    ///< Calibration counter stepping size when the source is asserted. 0x0:
    ///< +1; all others: +0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CMNCALAVG_ENG_PROBE_BIT_SEL : 5;
    ///< Not used.  Reserved for future used
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CMNCALAVG_ENG_START : 1;
    ///< Calibration start.  Trigger event to start the calibration when it
    ///< is set to '1'
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t CMNCALAVG_LOCOVREN : 1;
    ///< Calibration local override enable
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CMNCALAVG_CMPOUT_LOCOVR : 1;
    ///< Calibration comprator output override.  To override the CMPOUT from
    ///< APMA
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_calavg_ctrl_0_reg_t;

#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_RD_MASK (0x00000fffU)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_WR_MASK (0x00000fffU)


///< Calibraiton source.  0x0: apma.cmn_comp_out; all others reseved for
///< future used
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_BIT_IN_SEL_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_BIT_IN_SEL_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_BIT_IN_SEL_BF_MSK (0x00000003)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_BIT_IN_SEL_BF_DEF (0x00000000)

///< Calibration counter stepping size when the source is asserted. 0x0:
///< +1; all others: +0
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_CNT_MODE_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_CNT_MODE_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_CNT_MODE_BF_MSK (0x0000000C)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_CNT_MODE_BF_DEF (0x00000000)

///< Not used.  Reserved for future used
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_PROBE_BIT_SEL_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_PROBE_BIT_SEL_BF_WID ( 5)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_PROBE_BIT_SEL_BF_MSK (0x000001F0)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_PROBE_BIT_SEL_BF_DEF (0x00000000)

///< Calibration start.  Trigger event to start the calibration when it
///< is set to '1'
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_START_BF_OFF ( 9)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_START_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_START_BF_MSK (0x00000200)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_ENG_START_BF_DEF (0x00000000)

///< Calibration local override enable
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_LOCOVREN_BF_OFF (10)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_LOCOVREN_BF_MSK (0x00000400)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_LOCOVREN_BF_DEF (0x00000000)

///< Calibration comprator output override.  To override the CMPOUT from
///< APMA
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_CMPOUT_LOCOVR_BF_OFF (11)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_CMPOUT_LOCOVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_CMPOUT_LOCOVR_BF_MSK (0x00000800)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_CMNCALAVG_CMPOUT_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CALAVG_CTRL_1 register description at address offset 0xb8
  *
  * Register default value:        0x00000100
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_calavg_ctrl_1
  * CMN Calibration Average Control
  */

typedef union {
  struct {
    uint32_t CMNCALAVG_ENG_LIMIT : 32;
    ///< Calibration window size.  Define the length of the window for calibration
    ///< AccessType="RW" BitOffset="0" ResetValue="0x100"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_calavg_ctrl_1_reg_t;

#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_DEFAULT (0x00000100U)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_WR_MASK (0xffffffffU)


///< Calibration window size.  Define the length of the window for calibration
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_CMNCALAVG_ENG_LIMIT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_CMNCALAVG_ENG_LIMIT_BF_WID (32)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_CMNCALAVG_ENG_LIMIT_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_CMNCALAVG_ENG_LIMIT_BF_DEF (0x00000100)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CALAVG_CTRL_2 register description at address offset 0xbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_calavg_ctrl_2
  * CMN Calibration Average Control
  */

typedef union {
  struct {
    uint32_t CMNCALAVG_ENG_CNT : 32;
    ///< Calibration average engine counter.  This indicates how many '1' has
    ///< been detected within the calibration window
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_calavg_ctrl_2_reg_t;

#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_WR_MASK (0x00000000U)


///< Calibration average engine counter.  This indicates how many '1' has
///< been detected within the calibration window
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_CMNCALAVG_ENG_CNT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_CMNCALAVG_ENG_CNT_BF_WID (32)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_CMNCALAVG_ENG_CNT_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_CMNCALAVG_ENG_CNT_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CALAVG_STATUS register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_calavg_status
  * CMN Calibration Average Status
  */

typedef union {
  struct {
    uint32_t CMNCALAVG_CMPOUT : 1;
    ///< Calibration compare (feedback) signal
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCALAVG_ENG_DONE : 1;
    ///< Calibration done
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CMNCALAVG_ENG_RESULT : 1;
    ///< Calibration result.  Reports 1 when the number of '1' has been detected
    ///< is more than half of rx_avg_eng_limit value
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CMNCALAVG_CMPOUT_LOC : 1;
    ///< Calibration comprator output pre-override.  The raw output of CMPOUT
    ///< from APMA
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_calavg_stat_reg_t;

#define PMA_CMN_MSG_CMN_CALAVG_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_RD_MASK (0x0000000fU)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_WR_MASK (0x00000000U)


///< Calibration compare (feedback) signal
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_BF_DEF (0x00000000)

///< Calibration done
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_DONE_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_DONE_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_DONE_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_DONE_BF_DEF (0x00000000)

///< Calibration result.  Reports 1 when the number of '1' has been detected
///< is more than half of rx_avg_eng_limit value
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_RSLT_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_RSLT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_RSLT_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_ENG_RSLT_BF_DEF (0x00000000)

///< Calibration comprator output pre-override.  The raw output of CMPOUT
///< from APMA
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_LOC_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_LOC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_LOC_BF_MSK (0x00000008)
#define PMA_CMN_MSG_CMN_CALAVG_STAT_CMNCALAVG_CMPOUT_LOC_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_BRKPT_CTRL register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_brkpt_ctrl
  * CMN break point control
  */

typedef union {
  struct {
    uint32_t CMNRPUBRKPT_EN : 1;
    ///< RPU break point enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCALMASTERBRKPT_EN : 1;
    ///< CalMaster break point enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CMNFSM_RST_NOTIFY_EN : 1;
    ///< Main FSM reset notify enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CMNFSM_RST_BRKPT_EN_MASK : 1;
    ///< Main FSM reset break point enable.  This bit can be enable only when
    ///< txfsm_rst_notify_en is HIGH
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_brkpt_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_BRKPT_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_RD_MASK (0x0000000fU)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_WR_MASK (0x0000000fU)


///< RPU break point enable
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNRPUBRKPT_EN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNRPUBRKPT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNRPUBRKPT_EN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNRPUBRKPT_EN_BF_DEF (0x00000000)

///< CalMaster break point enable
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNCALMASTERBRKPT_EN_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNCALMASTERBRKPT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNCALMASTERBRKPT_EN_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNCALMASTERBRKPT_EN_BF_DEF (0x00000000)

///< Main FSM reset notify enable
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_NOTIFY_EN_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_NOTIFY_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_NOTIFY_EN_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_NOTIFY_EN_BF_DEF (0x00000000)

///< Main FSM reset break point enable.  This bit can be enable only when
///< txfsm_rst_notify_en is HIGH
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_BRKPT_EN_MASK_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_BRKPT_EN_MASK_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_BRKPT_EN_MASK_BF_MSK (0x00000008)
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_CMNFSM_RST_BRKPT_EN_MASK_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_BRKPT_STATUS register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_brkpt_status
  * CMN break point status
  */

typedef union {
  struct {
    uint32_t CMNRPUBRKPT_HIT : 1;
    ///< RPU break point status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCALMASTERBRKPT_HIT : 1;
    ///< CalMaster break point status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CMNFSM_RST_NOTIFY_HIT : 1;
    ///< Main FSM reset notify status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_brkpt_stat_reg_t;

#define PMA_CMN_MSG_CMN_BRKPT_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_RD_MASK (0x00000007U)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_WR_MASK (0x00000000U)


///< RPU break point status
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNRPUBRKPT_HIT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNRPUBRKPT_HIT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNRPUBRKPT_HIT_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNRPUBRKPT_HIT_BF_DEF (0x00000000)

///< CalMaster break point status
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNCALMASTERBRKPT_HIT_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNCALMASTERBRKPT_HIT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNCALMASTERBRKPT_HIT_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNCALMASTERBRKPT_HIT_BF_DEF (0x00000000)

///< Main FSM reset notify status
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNFSM_RST_NOTIFY_HIT_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNFSM_RST_NOTIFY_HIT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNFSM_RST_NOTIFY_HIT_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_BRKPT_STAT_CMNFSM_RST_NOTIFY_HIT_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_BRKPT_CLEAR register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_brkpt_clear
  * CMN break point clear
  */

typedef union {
  struct {
    uint32_t CMNRPUBRKPT_HIT_CLR : 1;
    ///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCALMASTERBRKPT_HIT_CLR : 1;
    ///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t CMNFSM_RST_NOTIFY_HIT_CLR : 1;
    ///< Main FSM reset notify break point clear/resume.  Self-clear bit.
    ///< Write 1 to clear/resume the FSM from the break point when cmnfsm_rst_brkpt_en_mask
    ///< is HIGH.  When the break point is cleared, this register value will
    ///< return back to 1'b0
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_brkpt_clr_reg_t;

#define PMA_CMN_MSG_CMN_BRKPT_CLR_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_RD_MASK (0x00000007U)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_WR_MASK (0x00000007U)


///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNRPUBRKPT_HIT_CLR_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNRPUBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNRPUBRKPT_HIT_CLR_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNRPUBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNCALMASTERBRKPT_HIT_CLR_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNCALMASTERBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNCALMASTERBRKPT_HIT_CLR_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNCALMASTERBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< Main FSM reset notify break point clear/resume.  Self-clear bit.
///< Write 1 to clear/resume the FSM from the break point when cmnfsm_rst_brkpt_en_mask
///< is HIGH.  When the break point is cleared, this register value will
///< return back to 1'b0
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNFSM_RST_NOTIFY_HIT_CLR_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNFSM_RST_NOTIFY_HIT_CLR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNFSM_RST_NOTIFY_HIT_CLR_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_BRKPT_CLR_CMNFSM_RST_NOTIFY_HIT_CLR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_REF_CTRL register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ref_ctrl
  * CMN reference clock pad control
  */

typedef union {
  struct {
    uint32_t CMNREFCKBUF0_LOCOVREN : 1;
    ///< Reference clock pad0 termination override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNREFCKBUF0_TERMHIZ_B_LOCOVR : 1;
    ///< Reference clock pad0 termination override.  0: Hiz; 1: Termination
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CMNREFCKBUF1_LOCOVREN : 1;
    ///< Reference clock pad1 termination override enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CMNREFCKBUF1_TERMHIZ_B_LOCOVR : 1;
    ///< Reference clock pad1 termination override.  1: Hiz; 1: Termination
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_B : 1;
    ///< Reference clock 0 transmit driver reset. Active low
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_B : 1;
    ///< Reference clock 1 transmit driver reset. Active low
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_HIZ_B : 1;
    ///< Reference clock 0 transmit Hi-Z termination. Active low
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_HIZ_B : 1;
    ///< Reference clock 1 transmit Hi-Z termination. Active low
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ref_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_REF_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_REF_CTRL_RD_MASK (0x000000ffU)
#define PMA_CMN_MSG_CMN_REF_CTRL_WR_MASK (0x000000ffU)


///< Reference clock pad0 termination override enable
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_LOCOVREN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_LOCOVREN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_LOCOVREN_BF_DEF (0x00000000)

///< Reference clock pad0 termination override.  0: Hiz; 1: Termination
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_TERMHIZ_B_LOCOVR_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_TERMHIZ_B_LOCOVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_TERMHIZ_B_LOCOVR_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF0_TERMHIZ_B_LOCOVR_BF_DEF (0x00000000)

///< Reference clock pad1 termination override enable
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_LOCOVREN_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_LOCOVREN_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_LOCOVREN_BF_DEF (0x00000000)

///< Reference clock pad1 termination override.  1: Hiz; 1: Termination
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_TERMHIZ_B_LOCOVR_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_TERMHIZ_B_LOCOVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_TERMHIZ_B_LOCOVR_BF_MSK (0x00000008)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNREFCKBUF1_TERMHIZ_B_LOCOVR_BF_DEF (0x00000000)

///< Reference clock 0 transmit driver reset. Active low
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_B_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_B_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_B_BF_MSK (0x00000010)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_B_BF_DEF (0x00000000)

///< Reference clock 1 transmit driver reset. Active low
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_B_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_B_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_B_BF_MSK (0x00000020)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_B_BF_DEF (0x00000000)

///< Reference clock 0 transmit Hi-Z termination. Active low
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_HIZ_B_BF_OFF ( 6)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_HIZ_B_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_HIZ_B_BF_MSK (0x00000040)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF0_REFCKTXDRV_HIZ_B_BF_DEF (0x00000000)

///< Reference clock 1 transmit Hi-Z termination. Active low
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_HIZ_B_BF_OFF ( 7)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_HIZ_B_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_HIZ_B_BF_MSK (0x00000080)
#define PMA_CMN_MSG_CMN_REF_CTRL_CMNRSTPDOVR_ARSTCMN_REF1_REFCKTXDRV_HIZ_B_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_REF_STATUS register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ref_status
  * CMN reference clock pad control status
  */

typedef union {
  struct {
    uint32_t CMNREFCKBUF0_TERMHIZ_B_LOC : 1;
    ///< Reference clock pad0 termination pre-override.  0: Hiz; 1: Termination
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNREFCKBUF1_TERMHIZ_B_LOC : 1;
    ///< Reference clock pad1 termination pre-override.  0: Hiz; 1: Termination
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ref_stat_reg_t;

#define PMA_CMN_MSG_CMN_REF_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_REF_STAT_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_REF_STAT_WR_MASK (0x00000000U)


///< Reference clock pad0 termination pre-override.  0: Hiz; 1: Termination
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF0_TERMHIZ_B_LOC_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF0_TERMHIZ_B_LOC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF0_TERMHIZ_B_LOC_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF0_TERMHIZ_B_LOC_BF_DEF (0x00000000)

///< Reference clock pad1 termination pre-override.  0: Hiz; 1: Termination
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF1_TERMHIZ_B_LOC_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF1_TERMHIZ_B_LOC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF1_TERMHIZ_B_LOC_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_REF_STAT_CMNREFCKBUF1_TERMHIZ_B_LOC_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_OUTPUT_PIN_OVERRIDE register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_output_pin_override
  * CMN output pin override
  */

typedef union {
  struct {
    uint32_t CMNPIN_READY_LOCOVREN : 1;
    ///< o_cmn_ready_a output pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNPIN_READY_LOCOVR : 1;
    ///< o_cmn_ready_a output pin override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_output_pin_ovrd_reg_t;

#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_WR_MASK (0x00000003U)


///< o_cmn_ready_a output pin override enable
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVREN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVREN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVREN_BF_DEF (0x00000000)

///< o_cmn_ready_a output pin override
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVR_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVR_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_CMNPIN_READY_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_OUTPUT_PIN_PREOVERRIDE register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_output_pin_preoverride
  * CMN output pin pre-override value
  */

typedef union {
  struct {
    uint32_t CMNPIN_READY_LOC : 1;
    ///< o_cmn_ready_a output pin pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_output_pin_preovrd_reg_t;

#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_RD_MASK (0x00000001U)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_WR_MASK (0x00000000U)


///< o_cmn_ready_a output pin pre-override
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_CMNPIN_READY_LOC_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_CMNPIN_READY_LOC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_CMNPIN_READY_LOC_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_CMNPIN_READY_LOC_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_APB_CTRL register description at address offset 0xe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_apb_ctrl
  * APB control
  */

typedef union {
  struct {
    uint32_t APB_LATENCY_MEASURE_EN : 1;
    ///< Enable APB latency measurment
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t APB_PSTATUS_CLEAR : 1;
    ///< To clear apb_pstatus RO status
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_apb_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_APB_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_APB_CTRL_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_APB_CTRL_WR_MASK (0x00000003U)


///< Enable APB latency measurment
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_LATENCY_MEAS_EN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_LATENCY_MEAS_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_LATENCY_MEAS_EN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_LATENCY_MEAS_EN_BF_DEF (0x00000000)

///< To clear apb_pstatus RO status
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_PSTAT_CLR_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_PSTAT_CLR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_PSTAT_CLR_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_APB_CTRL_APB_PSTAT_CLR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_APB_STATUS register description at address offset 0xe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_apb_status
  * APB Status
  */

typedef union {
  struct {
    uint32_t APB_LATENCY_MEASURE_RESULT : 15;
    ///< Report the largest latency since apb latency measurment block is enabled.
    ///< The result will be cleared when the measrument block is disabled
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t APB_WDT_RUN : 1;
    ///< To indicate is the APB watch dog timer has been turned on
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t APB_PSTATUS : 4;
    ///< To indicate the last apb transaction status. See register spec for
    ///< latest encoding.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_apb_stat_reg_t;

#define PMA_CMN_MSG_CMN_APB_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_APB_STAT_RD_MASK (0x001f7fffU)
#define PMA_CMN_MSG_CMN_APB_STAT_WR_MASK (0x00000000U)


///< Report the largest latency since apb latency measurment block is enabled.
///< The result will be cleared when the measrument block is disabled
#define PMA_CMN_MSG_CMN_APB_STAT_APB_LATENCY_MEAS_RSLT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_LATENCY_MEAS_RSLT_BF_WID (15)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_LATENCY_MEAS_RSLT_BF_MSK (0x00007FFF)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_LATENCY_MEAS_RSLT_BF_DEF (0x00000000)

///< To indicate is the APB watch dog timer has been turned on
#define PMA_CMN_MSG_CMN_APB_STAT_APB_WDT_RUN_BF_OFF (16)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_WDT_RUN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_WDT_RUN_BF_MSK (0x00010000)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_WDT_RUN_BF_DEF (0x00000000)

///< To indicate the last apb transaction status. See register spec for
///< latest encoding.
#define PMA_CMN_MSG_CMN_APB_STAT_APB_PSTAT_BF_OFF (17)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_PSTAT_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_PSTAT_BF_MSK (0x001E0000)
#define PMA_CMN_MSG_CMN_APB_STAT_APB_PSTAT_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_APB_MASK_STATUS_PRELIM register description at address offset 0xe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_apb_mask_status_prelim
  * APB Mask Status
  */

typedef union {
  struct {
    uint32_t APB_BIT_EN_B : 32;
    ///< To indicate the bit_en_b sideband on the last apb transcation.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_apb_mask_stat_prelim_reg_t;

#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_WR_MASK (0x00000000U)


///< To indicate the bit_en_b sideband on the last apb transcation.
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_APB_BIT_EN_B_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_APB_BIT_EN_B_BF_WID (32)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_APB_BIT_EN_B_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_APB_BIT_EN_B_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_APB_MASK_STATUS_FINAL register description at address offset 0xec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_apb_mask_status_final
  * APB Mask Status
  */

typedef union {
  struct {
    uint32_t APB_BIT_EN : 32;
    ///< To indicate the final bit_en applied on the last apb transcation (ie.
    ///< apb_bit_en[i] = !apb_bit_en_b[i] & apb_pstrobe[int(i/8)])
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_apb_mask_stat_final_reg_t;

#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_WR_MASK (0x00000000U)


///< To indicate the final bit_en applied on the last apb transcation (ie.
///< apb_bit_en[i] = !apb_bit_en_b[i] & apb_pstrobe[int(i/8)])
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_APB_BIT_EN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_APB_BIT_EN_BF_WID (32)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_APB_BIT_EN_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_APB_BIT_EN_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_TESTBUS_CFG_0 register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_testbus_cfg_0
  * Cmn-Synth testbus configuration
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_TSTBUS_RST_OVREN : 1;
    ///< Cmn-Synth testbus reset override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMN_SYNTH_TSTBUS_RST_OVR_B : 1;
    ///< Cmn-Synth testbus reset override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t CMN_SYNTH_PERFMON_EN : 1;
    ///< Cmn-Synth performance monitor enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t CMN_SYNTH_PERFMON_COMPARE_VAL_START : 8;
    ///< Cmn-Synth performance monitor compare value stop  Set 1 to stop the
    ///< monitor comparsion
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t CMN_SYNTH_PERFMON_COMPARE_VAL_STOP : 8;
    ///< Cmn-Synth performance monitor compare value start.  Set 1 to start
    ///< the monitor comparsion
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CMN_SYNTH_PERFMON_MASK : 8;
    ///< Cmn-Synth performance monitor mask
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_testbus_cfg_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_RD_MASK (0xffffff13U)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_WR_MASK (0xffffff13U)


///< Cmn-Synth testbus reset override enable
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVREN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVREN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVREN_BF_DEF (0x00000000)

///< Cmn-Synth testbus reset override
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVR_B_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVR_B_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVR_B_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_TSTBUS_RST_OVR_B_BF_DEF (0x00000000)

///< Cmn-Synth performance monitor enable
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_EN_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_EN_BF_MSK (0x00000010)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_EN_BF_DEF (0x00000000)

///< Cmn-Synth performance monitor compare value stop  Set 1 to stop the
///< monitor comparsion
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_START_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_START_BF_WID ( 8)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_START_BF_MSK (0x0000FF00)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_START_BF_DEF (0x00000000)

///< Cmn-Synth performance monitor compare value start.  Set 1 to start
///< the monitor comparsion
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_STOP_BF_OFF (16)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_STOP_BF_WID ( 8)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_STOP_BF_MSK (0x00FF0000)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_CMP_VAL_STOP_BF_DEF (0x00000000)

///< Cmn-Synth performance monitor mask
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_MASK_BF_OFF (24)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_MASK_BF_WID ( 8)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_MASK_BF_MSK (0xFF000000)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_CMN_SYNTH_PERFMON_MASK_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_TESTBUS_CFG_1 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_testbus_cfg_1
  * Cmn-Synth testbus configuration
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_TSTBUS_ADDR : 7;
    ///< Cmn-Synth Testbus bundle select.  Each testbus bundle is a 8bit bus
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_testbus_cfg_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_RD_MASK (0x0000007fU)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_WR_MASK (0x0000007fU)


///< Cmn-Synth Testbus bundle select.  Each testbus bundle is a 8bit bus
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_CMN_SYNTH_TSTBUS_ADDR_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_CMN_SYNTH_TSTBUS_ADDR_BF_WID ( 7)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_CMN_SYNTH_TSTBUS_ADDR_BF_MSK (0x0000007F)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_CMN_SYNTH_TSTBUS_ADDR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_TESTBUS_STATUS_0 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_testbus_status_0
  * Cmn-Synth testbus status
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_TSTBUS_VALUE : 8;
    ///< Cmn-Synth testbus value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMN_SYNTH_PERFMON_DONE : 1;
    ///< This indicates the perfermance monitor has completed the comparsio
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_testbus_stat_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_RD_MASK (0x000001ffU)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_WR_MASK (0x00000000U)


///< Cmn-Synth testbus value
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_TSTBUS_VAL_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_TSTBUS_VAL_BF_WID ( 8)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_TSTBUS_VAL_BF_MSK (0x000000FF)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_TSTBUS_VAL_BF_DEF (0x00000000)

///< This indicates the perfermance monitor has completed the comparsio
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_PERFMON_DONE_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_PERFMON_DONE_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_PERFMON_DONE_BF_MSK (0x00000100)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_CMN_SYNTH_PERFMON_DONE_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_TESTBUS_STATUS_1 register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_testbus_status_1
  * Lane testbus status
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_PERFMON_EVENT_TIME : 32;
    ///< Lane perfermance monitor event time. Indicate how many occurances
    ///< of the observed signal(s)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_testbus_stat_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_WR_MASK (0x00000000U)


///< Lane perfermance monitor event time. Indicate how many occurances
///< of the observed signal(s)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_CMN_SYNTH_PERFMON_EVENT_TIME_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_CMN_SYNTH_PERFMON_EVENT_TIME_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_CMN_SYNTH_PERFMON_EVENT_TIME_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_CMN_SYNTH_PERFMON_EVENT_TIME_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SCRATCHY_0 register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_scratchy_0
  * Orchy CMN Scratch Register 0
  */

typedef union {
  struct {
    uint32_t REFCKBUF0_SRC : 1;
    ///< Selects the source for refckbuf0 transceiver.  0 - from pads.  1 -
    ///< from iack_refckbuf0_from_soc
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t REFCKBUF1_SRC : 1;
    ///< Selects the source for refckbuf1 transceiver.  0 - from pads.  1 -
    ///< from iack_refckbuf1_from_soc
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t REFCKBUF0_TO_SOC_EN : 1;
    ///< Selects destination for refckbuf0 transceiver, enables oack_refckbuf0_to_soc_en
    ///< path
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t REFCKBUF1_TO_SOC_EN : 1;
    ///< Selects destination for refckbuf1 transceiver, enables oack_refckbuf1_to_soc_en
    ///< path
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t MAINCLK_SRC : 3;
    ///< Selects the main clock source. 0 - i_ck_mainext. 1 - refckbuf0. 2-refckbuf1.
    ///< 3-cmnplla_refck. 4-cmnpllb_refck
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_scratchy_0_reg_t;

#define PMA_CMN_MSG_CMN_SCRATCHY_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_RD_MASK (0x0000007fU)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_WR_MASK (0x0000007fU)


///< Selects the source for refckbuf0 transceiver.  0 - from pads.  1 -
///< from iack_refckbuf0_from_soc
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_SRC_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_SRC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_SRC_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_SRC_BF_DEF (0x00000000)

///< Selects the source for refckbuf1 transceiver.  0 - from pads.  1 -
///< from iack_refckbuf1_from_soc
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_SRC_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_SRC_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_SRC_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_SRC_BF_DEF (0x00000000)

///< Selects destination for refckbuf0 transceiver, enables oack_refckbuf0_to_soc_en
///< path
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_TO_SOC_EN_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_TO_SOC_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_TO_SOC_EN_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF0_TO_SOC_EN_BF_DEF (0x00000000)

///< Selects destination for refckbuf1 transceiver, enables oack_refckbuf1_to_soc_en
///< path
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_TO_SOC_EN_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_TO_SOC_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_TO_SOC_EN_BF_MSK (0x00000008)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REFCKBUF1_TO_SOC_EN_BF_DEF (0x00000000)

///< Selects the main clock source. 0 - i_ck_mainext. 1 - refckbuf0. 2-refckbuf1.
///< 3-cmnplla_refck. 4-cmnpllb_refck
#define PMA_CMN_MSG_CMN_SCRATCHY_0_MAINCLK_SRC_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_MAINCLK_SRC_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_MAINCLK_SRC_BF_MSK (0x00000070)
#define PMA_CMN_MSG_CMN_SCRATCHY_0_MAINCLK_SRC_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SCRATCHY_1 register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_scratchy_1
  * Orchy CMN Scratch Register 1
  */

typedef union {
  struct {
    uint32_t SWFABRIC0_SRC : 4;
    ///< Select swfabric clock source for swfabric0. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
    ///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
    ///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
    ///< - refckbuf1, 9 - RX feedback clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SWFABRIC0_LEFT_EN : 1;
    ///< Enables  ioa_ck_ref_left[0] path
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SWFABRIC0_RIGHT_EN : 1;
    ///< Enables ioa_ck_ref_right[0] path
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t SWFABRIC0_TOP_EN : 1;
    ///< Enables ioa_ck_ref_top[0] path
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SWFABRIC0_BOT_EN : 1;
    ///< Eanbles ioa_ck_ref_bot[0] path
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SWFABRIC0_TO_REFCKSEL_EN : 1;
    ///< Enables output to refcksel<0,1>
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t SWFABRIC1_SRC : 4;
    ///< Select swfabric clock source for swfabric1. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
    ///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
    ///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
    ///< - refckbuf1, 9 - RX feedback clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t SWFABRIC1_LEFT_EN : 1;
    ///< Enables ioa_ck_ref_left[1] path
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t SWFABRIC1_RIGHT_EN : 1;
    ///< Enables ioa_ck_ref_right[1] path
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t SWFABRIC1_TOP_EN : 1;
    ///< Enables ioa_ck_ref_top[1] path
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t SWFABRIC1_BOT_EN : 1;
    ///< Enables ioa_ck_ref_bot[1] path
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t SWFABRIC1_TO_REFCKSEL_EN : 1;
    ///< Enables output to refcksel<0,1>
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_scratchy_1_reg_t;

#define PMA_CMN_MSG_CMN_SCRATCHY_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_RD_MASK (0x01ff01ffU)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_WR_MASK (0x01ff01ffU)


///< Select swfabric clock source for swfabric0. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
///< - refckbuf1, 9 - RX feedback clock
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_SRC_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_SRC_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_SRC_BF_MSK (0x0000000F)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_SRC_BF_DEF (0x00000000)

///< Enables  ioa_ck_ref_left[0] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_LEFT_EN_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_LEFT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_LEFT_EN_BF_MSK (0x00000010)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_LEFT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_right[0] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_RIGHT_EN_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_RIGHT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_RIGHT_EN_BF_MSK (0x00000020)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_RIGHT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_top[0] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TOP_EN_BF_OFF ( 6)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TOP_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TOP_EN_BF_MSK (0x00000040)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TOP_EN_BF_DEF (0x00000000)

///< Eanbles ioa_ck_ref_bot[0] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_BOT_EN_BF_OFF ( 7)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_BOT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_BOT_EN_BF_MSK (0x00000080)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_BOT_EN_BF_DEF (0x00000000)

///< Enables output to refcksel<0,1>
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TO_REFCKSEL_EN_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TO_REFCKSEL_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TO_REFCKSEL_EN_BF_MSK (0x00000100)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC0_TO_REFCKSEL_EN_BF_DEF (0x00000000)

///< Select swfabric clock source for swfabric1. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
///< - refckbuf1, 9 - RX feedback clock
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_SRC_BF_OFF (16)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_SRC_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_SRC_BF_MSK (0x000F0000)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_SRC_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_left[1] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_LEFT_EN_BF_OFF (20)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_LEFT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_LEFT_EN_BF_MSK (0x00100000)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_LEFT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_right[1] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_RIGHT_EN_BF_OFF (21)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_RIGHT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_RIGHT_EN_BF_MSK (0x00200000)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_RIGHT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_top[1] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TOP_EN_BF_OFF (22)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TOP_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TOP_EN_BF_MSK (0x00400000)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TOP_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_bot[1] path
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_BOT_EN_BF_OFF (23)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_BOT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_BOT_EN_BF_MSK (0x00800000)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_BOT_EN_BF_DEF (0x00000000)

///< Enables output to refcksel<0,1>
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TO_REFCKSEL_EN_BF_OFF (24)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TO_REFCKSEL_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TO_REFCKSEL_EN_BF_MSK (0x01000000)
#define PMA_CMN_MSG_CMN_SCRATCHY_1_SWFABRIC1_TO_REFCKSEL_EN_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SCRATCHY_2 register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_scratchy_2
  * Orchy CMN Scratch Register 2
  */

typedef union {
  struct {
    uint32_t SWFABRIC2_SRC : 4;
    ///< Select swfabric clock source for swfabric2. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
    ///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
    ///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
    ///< - refckbuf1, 9 - RX feedback clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SWFABRIC2_LEFT_EN : 1;
    ///< Enables ioa_ck_ref_left[2] path
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SWFABRIC2_RIGHT_EN : 1;
    ///< Enables ioa_ck_ref_right[2] path
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t SWFABRIC2_TOP_EN : 1;
    ///< Enables ioa_ck_ref_top[2] path
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SWFABRIC2_BOT_EN : 1;
    ///< Enables ioa_ck_ref_bot[2] path
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t SWFABRIC2_TO_REFCKSEL_EN : 1;
    ///< Enables output to refcksel<0,1>
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t SWFABRIC3_SRC : 4;
    ///< Select swfabric clock source for swfabric3. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
    ///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
    ///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
    ///< - refckbuf1, 9 - RX feedback clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t SWFABRIC3_LEFT_EN : 1;
    ///< Enables ioa_ck_ref_left[3] path
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t SWFABRIC3_RIGHT_EN : 1;
    ///< Enables ioa_ck_ref_right[3] path
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t SWFABRIC3_TOP_EN : 1;
    ///< Enables ioa_ck_ref_top[3] path
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t SWFABRIC3_BOT_EN : 1;
    ///< Enables ioa_ck_ref_bot[3] path
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t SWFABRIC3_TO_REFCKSEL_EN : 1;
    ///< Enables output to refcksel<0,1>
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_scratchy_2_reg_t;

#define PMA_CMN_MSG_CMN_SCRATCHY_2_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_RD_MASK (0x01ff01ffU)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_WR_MASK (0x01ff01ffU)


///< Select swfabric clock source for swfabric2. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
///< - refckbuf1, 9 - RX feedback clock
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_SRC_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_SRC_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_SRC_BF_MSK (0x0000000F)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_SRC_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_left[2] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_LEFT_EN_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_LEFT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_LEFT_EN_BF_MSK (0x00000010)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_LEFT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_right[2] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_RIGHT_EN_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_RIGHT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_RIGHT_EN_BF_MSK (0x00000020)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_RIGHT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_top[2] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TOP_EN_BF_OFF ( 6)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TOP_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TOP_EN_BF_MSK (0x00000040)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TOP_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_bot[2] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_BOT_EN_BF_OFF ( 7)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_BOT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_BOT_EN_BF_MSK (0x00000080)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_BOT_EN_BF_DEF (0x00000000)

///< Enables output to refcksel<0,1>
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TO_REFCKSEL_EN_BF_OFF ( 8)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TO_REFCKSEL_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TO_REFCKSEL_EN_BF_MSK (0x00000100)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC2_TO_REFCKSEL_EN_BF_DEF (0x00000000)

///< Select swfabric clock source for swfabric3. 0 - 1'b0, 1 - ioa_ck_ref_left[0],
///< 2 - ioa_ck_ref_right[0], 3 - ioa_ck_ref_top[0], 4 - ioa_ck_ref_bot[0],
///< 5 - cmnplla.postdiv_swf, 6 - cmnpllb.postdiv_swf, 7 - refckbuf0, 8
///< - refckbuf1, 9 - RX feedback clock
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_SRC_BF_OFF (16)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_SRC_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_SRC_BF_MSK (0x000F0000)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_SRC_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_left[3] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_LEFT_EN_BF_OFF (20)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_LEFT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_LEFT_EN_BF_MSK (0x00100000)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_LEFT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_right[3] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_RIGHT_EN_BF_OFF (21)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_RIGHT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_RIGHT_EN_BF_MSK (0x00200000)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_RIGHT_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_top[3] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TOP_EN_BF_OFF (22)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TOP_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TOP_EN_BF_MSK (0x00400000)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TOP_EN_BF_DEF (0x00000000)

///< Enables ioa_ck_ref_bot[3] path
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_BOT_EN_BF_OFF (23)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_BOT_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_BOT_EN_BF_MSK (0x00800000)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_BOT_EN_BF_DEF (0x00000000)

///< Enables output to refcksel<0,1>
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TO_REFCKSEL_EN_BF_OFF (24)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TO_REFCKSEL_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TO_REFCKSEL_EN_BF_MSK (0x01000000)
#define PMA_CMN_MSG_CMN_SCRATCHY_2_SWFABRIC3_TO_REFCKSEL_EN_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CKM_CTRL_0 register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ckm_ctrl_0
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_AVG_EN : 1;
    ///< Clock measurment averager enable.  When this is 1, the clock measurment
    ///< will an average of 4 measurments.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_CLK_EN : 1;
    ///< Clock measurment clock enable.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_CONTINUOUS : 1;
    ///< Clock measurment continous mode.  When this is set.  The measurment
    ///< block will continue take the clock measurment, until ckm_clk_en set
    ///< to 0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_EN : 1;
    ///< Clock measurment in digital domain.  Perform the clock measuement
    ///< that the clocks are in the digital domain. Always set to 1.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_ERR_CLR : 1;
    ///< Clock measurment error clear.  To clear the error status
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CKM_EN : 1;
    ///< Clock measurment enable.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_MEAS_CK_SEL : 3;
    ///< Clock measurment input clock select.
    ///< Selection TBD
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ckm_ctrl_0_reg_t;

#define PMA_CMN_MSG_CMN_CKM_CTRL_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_RD_MASK (0x000001ffU)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_WR_MASK (0x000001ffU)


///< Clock measurment averager enable.  When this is 1, the clock measurment
///< will an average of 4 measurments.
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_AVG_EN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_AVG_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_AVG_EN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_AVG_EN_BF_DEF (0x00000000)

///< Clock measurment clock enable.
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CLK_EN_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CLK_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CLK_EN_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CLK_EN_BF_DEF (0x00000000)

///< Clock measurment continous mode.  When this is set.  The measurment
///< block will continue take the clock measurment, until ckm_clk_en set
///< to 0
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CONTINUOUS_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CONTINUOUS_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CONTINUOUS_BF_MSK (0x00000004)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_CONTINUOUS_BF_DEF (0x00000000)

///< Clock measurment in digital domain.  Perform the clock measuement
///< that the clocks are in the digital domain. Always set to 1.
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_MSK (0x00000008)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_DEF (0x00000000)

///< Clock measurment error clear.  To clear the error status
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_OFF ( 4)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_MSK (0x00000010)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_DEF (0x00000000)

///< Clock measurment enable.
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_EN_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_EN_BF_MSK (0x00000020)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_EN_BF_DEF (0x00000000)

///< Clock measurment input clock select.
///< Selection TBD
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_OFF ( 6)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_MSK (0x000001C0)
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CKM_CTRL_1 register description at address offset 0x11c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ckm_ctrl_1
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_RESULT_CLR : 1;
    ///< Clock measurment clear.  Set this to 1 to clear all the measurment
    ///< history
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_START : 1;
    ///< Clock measurment start.  To start the clock measurment.  All clock
    ///< measurment configuration must be set prior to this register is set
    ///< to 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_REF_CK_DIV_RATIO : 3;
    ///< Clock measurment sample clock divider.
    ///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_WDT_INTERVAL : 2;
    ///< Clock measurment watch dog timer interval.  Time before report the
    ///< block is not able to take any clock measumrent.  For example, the
    ///< measured clock is not toggled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_WIN_THR_REF : 25;
    ///< Clock measurment window threshold
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ckm_ctrl_1_reg_t;

#define PMA_CMN_MSG_CMN_CKM_CTRL_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_WR_MASK (0xffffffffU)


///< Clock measurment clear.  Set this to 1 to clear all the measurment
///< history
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_RSLT_CLR_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_RSLT_CLR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_RSLT_CLR_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_RSLT_CLR_BF_DEF (0x00000000)

///< Clock measurment start.  To start the clock measurment.  All clock
///< measurment configuration must be set prior to this register is set
///< to 1
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_START_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_START_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_START_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_START_BF_DEF (0x00000000)

///< Clock measurment sample clock divider.
///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_OFF ( 2)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_MSK (0x0000001C)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_DEF (0x00000000)

///< Clock measurment watch dog timer interval.  Time before report the
///< block is not able to take any clock measumrent.  For example, the
///< measured clock is not toggled
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_OFF ( 5)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_MSK (0x00000060)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_DEF (0x00000000)

///< Clock measurment window threshold
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WIN_THR_REF_BF_OFF ( 7)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WIN_THR_REF_BF_WID (25)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WIN_THR_REF_BF_MSK (0xFFFFFF80)
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_CKM_WIN_THR_REF_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CKM_CTRL_2 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ckm_ctrl_2
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_MAX_THR : 25;
    ///< Clock measurment windows
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ckm_ctrl_2_reg_t;

#define PMA_CMN_MSG_CMN_CKM_CTRL_2_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_RD_MASK (0x01ffffffU)
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_WR_MASK (0x01ffffffU)


///< Clock measurment windows
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_CKM_MAX_THR_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_CKM_MAX_THR_BF_WID (25)
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_CKM_MAX_THR_BF_MSK (0x01FFFFFF)
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_CKM_MAX_THR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CKM_STATUS register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ckm_status
  * Clock Measurment Status
  */

typedef union {
  struct {
    uint32_t CKM_DIG_MEAS_ERR : 1;
    ///< CKM error status.  This signal will be asserted to HIGH, if the measured
    ///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
    ///< is HIGH
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_RESULT_MEAS : 25;
    ///< Measured clock result.   This value represents how many measured clock
    ///< has counted during measuring window.  When Averager is OFF, this value
    ///< in this register represents the instantanous result from the last
    ///< run.  If Averager is ON.  This value from this register represents
    ///< the average value from the last 4 measured result.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_STATUS : 1;
    ///< This is a status indicates the CKM is in the progress taking clock
    ///< clock meaurement.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t CKM_VALID_MEAS : 1;
    ///< This indicates the measured result (ckm_result_meas) is valid to be
    ///< read
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ckm_stat_reg_t;

#define PMA_CMN_MSG_CMN_CKM_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CKM_STAT_RD_MASK (0x0fffffffU)
#define PMA_CMN_MSG_CMN_CKM_STAT_WR_MASK (0x00000000U)


///< CKM error status.  This signal will be asserted to HIGH, if the measured
///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
///< is HIGH
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_DIG_MEAS_ERR_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_DIG_MEAS_ERR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_DIG_MEAS_ERR_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_DIG_MEAS_ERR_BF_DEF (0x00000000)

///< Measured clock result.   This value represents how many measured clock
///< has counted during measuring window.  When Averager is OFF, this value
///< in this register represents the instantanous result from the last
///< run.  If Averager is ON.  This value from this register represents
///< the average value from the last 4 measured result.
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_RSLT_MEAS_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_RSLT_MEAS_BF_WID (25)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_RSLT_MEAS_BF_MSK (0x03FFFFFE)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_RSLT_MEAS_BF_DEF (0x00000000)

///< This is a status indicates the CKM is in the progress taking clock
///< clock meaurement.
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_STAT_BF_OFF (26)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_STAT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_STAT_BF_MSK (0x04000000)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_STAT_BF_DEF (0x00000000)

///< This indicates the measured result (ckm_result_meas) is valid to be
///< read
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_VALID_MEAS_BF_OFF (27)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_VALID_MEAS_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_VALID_MEAS_BF_MSK (0x08000000)
#define PMA_CMN_MSG_CMN_CKM_STAT_CKM_VALID_MEAS_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_BTI_CLOCK_CFG register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/bti_clock_cfg
  * BTI clock configration
  */

typedef union {
  struct {
    uint32_t BTI_EN : 5;
    ///< Enable BTI clock for each block
    ///< bit 0 - apma_cmn
    ///< bit 1 - apma_lane0
    ///< bit 2 - apma_lane1
    ///< bit 3 - apma_lane2
    ///< bit 4 - apma_lane3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t BTI_DIV : 7;
    ///< Bit clock divider.  This will control the clock divider ratio to generate
    ///< the BTI clock from keepalive slow
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t BTI_DIV_RST : 1;
    ///< BIT clock divider reset.  Active HIGH
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t BTI_STATIC_VAL : 5;
    ///< Override the BTI clock state to a fixed value
    ///< bit 0 - apma_cmn
    ///< bit 1 - apma_lane0
    ///< bit 2 - apma_lane1
    ///< bit 3 - apma_lane2
    ///< bit 4 - apma_lane3
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_bti_clk_cfg_reg_t;

#define PMA_CMN_MSG_BTI_CLK_CFG_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_BTI_CLK_CFG_RD_MASK (0x01f17f1fU)
#define PMA_CMN_MSG_BTI_CLK_CFG_WR_MASK (0x01f17f1fU)


///< Enable BTI clock for each block
///< bit 0 - apma_cmn
///< bit 1 - apma_lane0
///< bit 2 - apma_lane1
///< bit 3 - apma_lane2
///< bit 4 - apma_lane3
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_EN_BF_OFF ( 0)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_EN_BF_WID ( 5)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_EN_BF_MSK (0x0000001F)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_EN_BF_DEF (0x00000000)

///< Bit clock divider.  This will control the clock divider ratio to generate
///< the BTI clock from keepalive slow
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_BF_OFF ( 8)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_BF_WID ( 7)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_BF_MSK (0x00007F00)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_BF_DEF (0x00000000)

///< BIT clock divider reset.  Active HIGH
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_RST_BF_OFF (16)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_RST_BF_WID ( 1)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_RST_BF_MSK (0x00010000)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_DIV_RST_BF_DEF (0x00000000)

///< Override the BTI clock state to a fixed value
///< bit 0 - apma_cmn
///< bit 1 - apma_lane0
///< bit 2 - apma_lane1
///< bit 3 - apma_lane2
///< bit 4 - apma_lane3
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_STATIC_VAL_BF_OFF (20)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_STATIC_VAL_BF_WID ( 5)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_STATIC_VAL_BF_MSK (0x01F00000)
#define PMA_CMN_MSG_BTI_CLK_CFG_BTI_STATIC_VAL_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CMPOUT_CALASSIST_CTRL0 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_cmpout_calassist_ctrl0
  * CMN CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t CMNCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY : 16;
    ///< CMN CmpOut Calibration Assistance premable delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_FINISHSIDE : 1;
    ///< CMN CmpOut Calibration Assistance finish side. 0: finish low end;
    ///< 1: finish high end
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_POLARITY : 1;
    ///< CMN CmpOut Calibration Assistance error signal polarity
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_VALID_COUNT : 4;
    ///< CMN CmpOut Calibration Assistance valid count
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CAL_REQ : 1;
    ///< CMN CmpOut Calibration Assistance request
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN : 1;
    ///< CMN CmpOut Calibration Assistance dither (measurement) request override
    ///< enable
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR : 1;
    ///< CMN CmpOut Calibration Assistance dither (measurement) request override
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR : 1;
    ///< CMN CmpOut Calibration Assistance busy override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN : 1;
    ///< CMN CmpOut Calibration Assistance busy override enable
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_cmpout_calassist_ctrl0_reg_t;

#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_RD_MASK (0x07ffffffU)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_WR_MASK (0x07ffffffU)


///< CMN CmpOut Calibration Assistance premable delay
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_WID (16)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_MSK (0x0000FFFF)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALSTART_PREAMBLE_DELAY_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance finish side. 0: finish low end;
///< 1: finish high end
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_OFF (16)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_MSK (0x00010000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_FINISHSIDE_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance error signal polarity
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_POLARITY_BF_OFF (17)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_POLARITY_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_POLARITY_BF_MSK (0x00020000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_POLARITY_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance valid count
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_OFF (18)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_MSK (0x003C0000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_VALID_CNT_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance request
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CAL_REQ_BF_OFF (22)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CAL_REQ_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CAL_REQ_BF_MSK (0x00400000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CAL_REQ_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) request override
///< enable
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_OFF (23)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_MSK (0x00800000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_EN_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) request override
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_OFF (24)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_MSK (0x01000000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALMEAS_REQ_OVR_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance busy override
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_OFF (25)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_MSK (0x02000000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance busy override enable
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_OFF (26)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_MSK (0x04000000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_CMNCMPOUTCALASSIST_CALCODE_BUSY_OVR_EN_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CMPOUT_CALASSIST_CTRL1 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_cmpout_calassist_ctrl1
  * CMN CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t CMNCMPOUTCALASSIST_CALCODE_MAX : 10;
    ///< CMN CmpOut Calibration Assistance dither (measurement) cal code max
    ///< value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_MIN : 10;
    ///< CMN CmpOut Calibration Assistance dither (measurement) cal code min
    ///< value
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_OVR_EN : 1;
    ///< CMN CmpOut Calibration Assistance dither (measurement) final cal code
    ///< override enable
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_OVR : 10;
    ///< CMN CmpOut Calibration Assistance dither (measurement) final cal code
    ///< override
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_cmpout_calassist_ctrl1_reg_t;

#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_RD_MASK (0x7fffffffU)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_WR_MASK (0x7fffffffU)


///< CMN CmpOut Calibration Assistance dither (measurement) cal code max
///< value
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MAX_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MAX_BF_WID (10)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MAX_BF_MSK (0x000003FF)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MAX_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) cal code min
///< value
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MIN_BF_OFF (10)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MIN_BF_WID (10)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MIN_BF_MSK (0x000FFC00)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_MIN_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) final cal code
///< override enable
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_EN_BF_OFF (20)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_EN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_EN_BF_MSK (0x00100000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_EN_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) final cal code
///< override
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_BF_OFF (21)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_BF_WID (10)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_BF_MSK (0x7FE00000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_CMNCMPOUTCALASSIST_CALCODE_OVR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CMPOUT_CALASSIST_CTRL2 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_cmpout_calassist_ctrl2
  * CMN CmpOut Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t CMNCMPOUTCALASSIST_CALCODE_OFFSET : 11;
    ///< CMN CmpOut Calibration Assistance offset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_DLYCOUNT : 9;
    ///< CMN CmpOut Calibration Assistance dither (measurement) measure delay
    ///< time
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_POW2COUNT : 3;
    ///< CMN CmpOut Calibration Assistance dither (measurement) measure period
    ///< in power of 2
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_CLR_COUNT : 4;
    ///< CMN CmpOut Calibration Assistance dither (measurement) clear time
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_cmpout_calassist_ctrl2_reg_t;

#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_RD_MASK (0x07ffffffU)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_WR_MASK (0x07ffffffU)


///< CMN CmpOut Calibration Assistance offset
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALCODE_OFFSET_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALCODE_OFFSET_BF_WID (11)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALCODE_OFFSET_BF_MSK (0x000007FF)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALCODE_OFFSET_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) measure delay
///< time
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_OFF (11)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_WID ( 9)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_MSK (0x000FF800)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_DLYCNT_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) measure period
///< in power of 2
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_OFF (20)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_MSK (0x00700000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_POW2CNT_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) clear time
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_OFF (23)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_WID ( 4)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_MSK (0x07800000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_CMNCMPOUTCALASSIST_CALMEAS_CLR_CNT_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CMPOUT_CALASSIST_STATUS register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_cmpout_calassist_status
  * CMN CmpOut Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t CMNCMPOUTCALASSIST_CALCODE_CLAMP : 10;
    ///< CMN CmpOut Calibration Assistance calibrated code (clamp with max/min
    ///< value)
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEASACC : 8;
    ///< CMN CmpOut Calibration Assistance dither accumulated error
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_ERR_RAW : 1;
    ///< CMN CmpOut Calibration Assistance dither (measurement) ack
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_ACK : 1;
    ///< CMN CmpOut Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALMEAS_ERRAVG : 1;
    ///< CMN CmpOut averaged error signal
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CAL_ACK : 1;
    ///< CMN CmpOut Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t CMNCMPOUTCALASSIST_CALCODE_BUSY : 1;
    ///< CMN CmpOut Calibration Assistance busy
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_cmpout_calassist_stat_reg_t;

#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_RD_MASK (0x007fffffU)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_WR_MASK (0x00000000U)


///< CMN CmpOut Calibration Assistance calibrated code (clamp with max/min
///< value)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_CLAMP_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_CLAMP_BF_WID (10)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_CLAMP_BF_MSK (0x000003FF)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_CLAMP_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither accumulated error
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEASACC_BF_OFF (10)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEASACC_BF_WID ( 8)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEASACC_BF_MSK (0x0003FC00)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEASACC_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance dither (measurement) ack
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_OFF (18)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_MSK (0x00040000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERR_RAW_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance ack
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ACK_BF_OFF (19)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ACK_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ACK_BF_MSK (0x00080000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ACK_BF_DEF (0x00000000)

///< CMN CmpOut averaged error signal
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_OFF (20)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_MSK (0x00100000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALMEAS_ERRAVG_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance ack
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CAL_ACK_BF_OFF (21)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CAL_ACK_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CAL_ACK_BF_MSK (0x00200000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CAL_ACK_BF_DEF (0x00000000)

///< CMN CmpOut Calibration Assistance busy
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_BUSY_BF_OFF (22)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_BUSY_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_BUSY_BF_MSK (0x00400000)
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_CMNCMPOUTCALASSIST_CALCODE_BUSY_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CHARGEPUMP_CALASSIST_CTRL register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_chargepump_calassist_ctrl
  * CMN Charge Pump Calibration Assistance Control
  */

typedef union {
  struct {
    uint32_t CMNCHARGEPUMPCALASSIST_CAL_SETTLE_CNT : 3;
    ///< CMN Charge Pump Calibration Assistance Setting time
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCHARGEPUMPCALASSIST_CAL_SMPL_CNT : 10;
    ///< CMN Charge Pump Calibration Assistance Sample time
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CMNCHARGEPUMPCALASSIST_CAL_REF_CNT : 10;
    ///< CMN Charge Pump Calibration Assistance Reference time
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t CMNCHARGEPUMPCALASSIST_CAL_REQ : 1;
    ///< CMN Charge Pump Calibration Assistance request
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_chargepump_calassist_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_RD_MASK (0x017fffffU)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_WR_MASK (0x017fffffU)


///< CMN Charge Pump Calibration Assistance Setting time
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_WID ( 3)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_MSK (0x00000007)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SETTLE_CNT_BF_DEF (0x00000000)

///< CMN Charge Pump Calibration Assistance Sample time
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_OFF ( 3)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_WID (10)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_MSK (0x00001FF8)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_SMPL_CNT_BF_DEF (0x00000000)

///< CMN Charge Pump Calibration Assistance Reference time
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REF_CNT_BF_OFF (13)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REF_CNT_BF_WID (10)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REF_CNT_BF_MSK (0x007FE000)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REF_CNT_BF_DEF (0x00000000)

///< CMN Charge Pump Calibration Assistance request
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REQ_BF_OFF (24)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REQ_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REQ_BF_MSK (0x01000000)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_CMNCHARGEPUMPCALASSIST_CAL_REQ_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_CHARGEPUMP_CALASSIST_STATUS register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_chargepump_calassist_status
  * CMN Charge Pump Calibration Assistance Status
  */

typedef union {
  struct {
    uint32_t CMNCHARGEPUMPCALASSIST_CAL_ACK : 1;
    ///< CMN Charge Pump Calibration Assistance ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNCHARGEPUMPCALASSIST_CAL_DAT : 1;
    ///< CMN Charge Pump Calibration Assistance data result
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_chargepump_calassist_stat_reg_t;

#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_WR_MASK (0x00000000U)


///< CMN Charge Pump Calibration Assistance ack
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_ACK_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_ACK_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_ACK_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_ACK_BF_DEF (0x00000000)

///< CMN Charge Pump Calibration Assistance data result
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_DAT_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_DAT_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_DAT_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_CMNCHARGEPUMPCALASSIST_CAL_DAT_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SPARE_PORT_OVERRIDE_CTRL register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_spare_port_override_ctrl
  * CMN Spare Port Overide
  */

typedef union {
  struct {
    uint32_t CMNSPAREINPORT_LOCOVREN : 1;
    ///< CMN Spare Input Port override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNSPAREOUTPORT_LOCOVREN : 1;
    ///< CMN Spare Output Port override enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_spare_port_ovrd_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_WR_MASK (0x00000003U)


///< CMN Spare Input Port override enable
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREINPORT_LOCOVREN_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREINPORT_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREINPORT_LOCOVREN_BF_MSK (0x00000001)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREINPORT_LOCOVREN_BF_DEF (0x00000000)

///< CMN Spare Output Port override enable
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREOUTPORT_LOCOVREN_BF_OFF ( 1)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREOUTPORT_LOCOVREN_BF_WID ( 1)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREOUTPORT_LOCOVREN_BF_MSK (0x00000002)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_CMNSPAREOUTPORT_LOCOVREN_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SPARE_PORT_OVERRIDE register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_spare_port_override
  * CMN Spare Port Overide
  */

typedef union {
  struct {
    uint32_t CMNSPAREINPORT_LOCOVR : 16;
    ///< CMN Spare Input Port override
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CMNSPAREOUTPORT_LOCOVR : 16;
    ///< CMN Spare Output Port override
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_spare_port_ovrd_reg_t;

#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_WR_MASK (0xffffffffU)


///< CMN Spare Input Port override
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREINPORT_LOCOVR_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREINPORT_LOCOVR_BF_WID (16)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREINPORT_LOCOVR_BF_MSK (0x0000FFFF)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREINPORT_LOCOVR_BF_DEF (0x00000000)

///< CMN Spare Output Port override
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREOUTPORT_LOCOVR_BF_OFF (16)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREOUTPORT_LOCOVR_BF_WID (16)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREOUTPORT_LOCOVR_BF_MSK (0xFFFF0000)
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CMNSPAREOUTPORT_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SPARE_PORT_PREOVERRIDE register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_spare_port_preoverride
  * CMN Spare Port Overide
  */

typedef union {
  struct {
    uint32_t CMNSPAREINPORT_LOC : 16;
    ///< CMN Spare Input Port pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CMNSPAREOUTPORT_LOC : 16;
    ///< CMN Spare Output Port pre-override
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_spare_port_preovrd_reg_t;

#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_WR_MASK (0x00000000U)


///< CMN Spare Input Port pre-override
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREINPORT_LOC_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREINPORT_LOC_BF_WID (16)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREINPORT_LOC_BF_MSK (0x0000FFFF)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREINPORT_LOC_BF_DEF (0x00000000)

///< CMN Spare Output Port pre-override
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREOUTPORT_LOC_BF_OFF (16)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREOUTPORT_LOC_BF_WID (16)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREOUTPORT_LOC_BF_MSK (0xFFFF0000)
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_CMNSPAREOUTPORT_LOC_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_force_event_ctrl
  * Cmn-Synth IRQ FW Event
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_FORCE_EVENT : 2;
    ///< Firmware interrupt event
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_force_event_ctrl_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_RD_MASK (0x00000003U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_WR_MASK (0x00000003U)


///< Firmware interrupt event
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_BF_WID ( 2)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_BF_MSK (0x00000003)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_ENABLE_0 register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_enable_0
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_ENABLE_0 : 32;
    ///< Enable the CMN_SYNTH interrupt.  Bit 31:0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_en_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_WR_MASK (0xffffffffU)


///< Enable the CMN_SYNTH interrupt.  Bit 31:0
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_CMN_SYNTH_ICU_IRQ_EN_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_CMN_SYNTH_ICU_IRQ_EN_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_CMN_SYNTH_ICU_IRQ_EN_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_CMN_SYNTH_ICU_IRQ_EN_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_ENABLE_1 register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_enable_1
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_ENABLE_1 : 32;
    ///< Enable the CMN_SYNTH interrupt.  Bit 63:32
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_en_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_WR_MASK (0xffffffffU)


///< Enable the CMN_SYNTH interrupt.  Bit 63:32
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_CMN_SYNTH_ICU_IRQ_EN_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_CMN_SYNTH_ICU_IRQ_EN_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_CMN_SYNTH_ICU_IRQ_EN_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_CMN_SYNTH_ICU_IRQ_EN_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_MASK_0 register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_mask_0
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_MASK_0 : 32;
    ///< Mask the CMN_SYNTH interrupt request. Bit 31:0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_mask_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_WR_MASK (0xffffffffU)


///< Mask the CMN_SYNTH interrupt request. Bit 31:0
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_CMN_SYNTH_ICU_IRQ_MASK_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_CMN_SYNTH_ICU_IRQ_MASK_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_CMN_SYNTH_ICU_IRQ_MASK_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_CMN_SYNTH_ICU_IRQ_MASK_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_MASK_1 register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_mask_1
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_MASK_1 : 32;
    ///< Mask the CMN_SYNTH interrupt request. Bit 63:32
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_mask_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_WR_MASK (0xffffffffU)


///< Mask the CMN_SYNTH interrupt request. Bit 63:32
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_CMN_SYNTH_ICU_IRQ_MASK_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_CMN_SYNTH_ICU_IRQ_MASK_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_CMN_SYNTH_ICU_IRQ_MASK_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_CMN_SYNTH_ICU_IRQ_MASK_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_CLEAR_0 register description at address offset 0x164
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_clear_0
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_CLEAR_0 : 32;
    ///< clear icu. Bit 31:0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_clr_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_WR_MASK (0xffffffffU)


///< clear icu. Bit 31:0
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_CMN_SYNTH_ICU_IRQ_CLR_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_CMN_SYNTH_ICU_IRQ_CLR_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_CMN_SYNTH_ICU_IRQ_CLR_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_CMN_SYNTH_ICU_IRQ_CLR_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_CLEAR_1 register description at address offset 0x168
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_clear_1
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_CLEAR_1 : 32;
    ///< clear icu. Bit 63:32
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_clr_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_WR_MASK (0xffffffffU)


///< clear icu. Bit 63:32
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_CMN_SYNTH_ICU_IRQ_CLR_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_CMN_SYNTH_ICU_IRQ_CLR_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_CMN_SYNTH_ICU_IRQ_CLR_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_CMN_SYNTH_ICU_IRQ_CLR_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_RAW_STATUS_0 register description at address offset 0x16c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_raw_status_0
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_RAW_STATUS_0 : 32;
    ///< ICU Raw status. Bit 31:0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_raw_stat_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_WR_MASK (0x00000000U)


///< ICU Raw status. Bit 31:0
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_RAW_STATUS_1 register description at address offset 0x170
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_raw_status_1
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_RAW_STATUS_1 : 32;
    ///< ICU Raw status. Bit 63:32
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_raw_stat_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_WR_MASK (0x00000000U)


///< ICU Raw status. Bit 63:32
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_STATUS_0 register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_status_0
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_STATUS_0 : 32;
    ///< ICU status. Bit 31:0
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_stat_0_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_WR_MASK (0x00000000U)


///< ICU status. Bit 31:0
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_CMN_SYNTH_ICU_IRQ_STAT_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_CMN_SYNTH_ICU_IRQ_STAT_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_CMN_SYNTH_ICU_IRQ_STAT_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_CMN_SYNTH_ICU_IRQ_STAT_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_SYNTH_ICU_IRQ_STATUS_1 register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_synth_icu_irq_status_1
  * Cmn-Synth IRQ
  */

typedef union {
  struct {
    uint32_t CMN_SYNTH_ICU_IRQ_STATUS_1 : 32;
    ///< ICU status. Bit 63:32
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_synth_icu_irq_stat_1_reg_t;

#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_WR_MASK (0x00000000U)


///< ICU status. Bit 63:32
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_CMN_SYNTH_ICU_IRQ_STAT_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_CMN_SYNTH_ICU_IRQ_STAT_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_CMN_SYNTH_ICU_IRQ_STAT_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_CMN_SYNTH_ICU_IRQ_STAT_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RW_SPARE_0 register description at address offset 0x79c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rw_spare_0
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t CMN_RW_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rw_spare_0_reg_t;

#define PMA_CMN_MSG_CMN_RW_SPARE_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_RW_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_RW_SPARE_0_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_CMN_MSG_CMN_RW_SPARE_0_CMN_RW_SPARE_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RW_SPARE_0_CMN_RW_SPARE_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_RW_SPARE_0_CMN_RW_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_RW_SPARE_0_CMN_RW_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RW_SPARE_1 register description at address offset 0x7a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rw_spare_1
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t CMN_RW_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rw_spare_1_reg_t;

#define PMA_CMN_MSG_CMN_RW_SPARE_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_RW_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_RW_SPARE_1_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_CMN_MSG_CMN_RW_SPARE_1_CMN_RW_SPARE_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RW_SPARE_1_CMN_RW_SPARE_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_RW_SPARE_1_CMN_RW_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_RW_SPARE_1_CMN_RW_SPARE_1_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RW_SPARE_2 register description at address offset 0x7a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rw_spare_2
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t CMN_RW_SPARE_2 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rw_spare_2_reg_t;

#define PMA_CMN_MSG_CMN_RW_SPARE_2_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_RW_SPARE_2_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_RW_SPARE_2_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_CMN_MSG_CMN_RW_SPARE_2_CMN_RW_SPARE_2_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RW_SPARE_2_CMN_RW_SPARE_2_BF_WID (32)
#define PMA_CMN_MSG_CMN_RW_SPARE_2_CMN_RW_SPARE_2_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_RW_SPARE_2_CMN_RW_SPARE_2_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RW_SPARE_3 register description at address offset 0x7a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_rw_spare_3
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t CMN_RW_SPARE_3 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_rw_spare_3_reg_t;

#define PMA_CMN_MSG_CMN_RW_SPARE_3_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_RW_SPARE_3_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_RW_SPARE_3_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_CMN_MSG_CMN_RW_SPARE_3_CMN_RW_SPARE_3_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RW_SPARE_3_CMN_RW_SPARE_3_BF_WID (32)
#define PMA_CMN_MSG_CMN_RW_SPARE_3_CMN_RW_SPARE_3_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_RW_SPARE_3_CMN_RW_SPARE_3_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RO_SPARE_0 register description at address offset 0x7ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ro_spare_0
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t CMN_RO_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ro_spare_0_reg_t;

#define PMA_CMN_MSG_CMN_RO_SPARE_0_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_RO_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_RO_SPARE_0_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_CMN_MSG_CMN_RO_SPARE_0_CMN_RO_SPARE_0_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RO_SPARE_0_CMN_RO_SPARE_0_BF_WID (32)
#define PMA_CMN_MSG_CMN_RO_SPARE_0_CMN_RO_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_RO_SPARE_0_CMN_RO_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_CMN_REGS_MSG_PMA_CMN_REGS_CMN_RO_SPARE_1 register description at address offset 0x7b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_CMN_regs_MSG/PMA_CMN_regs/cmn_ro_spare_1
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t CMN_RO_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_cmn_msg_cmn_ro_spare_1_reg_t;

#define PMA_CMN_MSG_CMN_RO_SPARE_1_DEFAULT (0x00000000U)
#define PMA_CMN_MSG_CMN_RO_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_CMN_MSG_CMN_RO_SPARE_1_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_CMN_MSG_CMN_RO_SPARE_1_CMN_RO_SPARE_1_BF_OFF ( 0)
#define PMA_CMN_MSG_CMN_RO_SPARE_1_CMN_RO_SPARE_1_BF_WID (32)
#define PMA_CMN_MSG_CMN_RO_SPARE_1_CMN_RO_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_CMN_MSG_CMN_RO_SPARE_1_CMN_RO_SPARE_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PMA_CMN_MSG_PMA_REVISION_REG(_BASE) ((pma_cmn_msg_pma_revision_reg_t*) PMA_CMN_MSG_PMA_REVISION_ADR(_BASE))
#define PMA_CMN_MSG_PMA_JTAG_VER_REG(_BASE) ((pma_cmn_msg_pma_jtag_ver_reg_t*) PMA_CMN_MSG_PMA_JTAG_VER_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_0_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_0_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_0_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_1_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_1_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_1_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_2_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_2_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_2_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_3_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_3_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_3_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_4_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_4_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_4_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_5_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_5_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_5_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_6_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_6_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_6_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_7_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_7_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_7_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_8_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_8_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_8_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_9_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_9_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_9_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_10_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_10_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_10_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_11_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_11_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_11_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_12_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_12_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_12_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_13_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_13_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_13_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_14_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_14_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_14_ADR(_BASE))
#define PMA_CMN_MSG_PMA_SCRATCH_PAD_15_REG(_BASE) ((pma_cmn_msg_pma_scratch_pad_15_reg_t*) PMA_CMN_MSG_PMA_SCRATCH_PAD_15_ADR(_BASE))
#define PMA_CMN_MSG_PMA_PMU_IRANGE_REG(_BASE) ((pma_cmn_msg_pma_pmu_irange_reg_t*) PMA_CMN_MSG_PMA_PMU_IRANGE_ADR(_BASE))
#define PMA_CMN_MSG_PMA_PMU_VFORCE_REG(_BASE) ((pma_cmn_msg_pma_pmu_vforce_reg_t*) PMA_CMN_MSG_PMA_PMU_VFORCE_ADR(_BASE))
#define PMA_CMN_MSG_PMA_DIE_TEMP_REG(_BASE) ((pma_cmn_msg_pma_die_temp_reg_t*) PMA_CMN_MSG_PMA_DIE_TEMP_ADR(_BASE))
#define PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_REG(_BASE) ((pma_cmn_msg_pma_cmn_fuse_spare_reg_t*) PMA_CMN_MSG_PMA_CMN_FUSE_SPARE_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CAR_CFG_REG(_BASE) ((pma_cmn_msg_cmn_car_cfg_reg_t*) PMA_CMN_MSG_CMN_CAR_CFG_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CAR_CFG_RO_REG(_BASE) ((pma_cmn_msg_cmn_car_cfg_ro_reg_t*) PMA_CMN_MSG_CMN_CAR_CFG_RO_ADR(_BASE))
#define PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_force_pup_ctrl_reg_t*) PMA_CMN_MSG_CMN_FORCE_PUP_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_PWR_MNG_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_pwr_mng_ctrl_reg_t*) PMA_CMN_MSG_CMN_PWR_MNG_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_PWR_MNG_STAT_REG(_BASE) ((pma_cmn_msg_cmn_pwr_mng_stat_reg_t*) PMA_CMN_MSG_CMN_PWR_MNG_STAT_ADR(_BASE))
#define PMA_CMN_MSG_FSM_MAINFSM_CTRL_REG(_BASE) ((pma_cmn_msg_fsm_mainfsm_ctrl_reg_t*) PMA_CMN_MSG_FSM_MAINFSM_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_FSM_STAT_0_REG(_BASE) ((pma_cmn_msg_fsm_stat_0_reg_t*) PMA_CMN_MSG_FSM_STAT_0_ADR(_BASE))
#define PMA_CMN_MSG_FSM_STAT_1_REG(_BASE) ((pma_cmn_msg_fsm_stat_1_reg_t*) PMA_CMN_MSG_FSM_STAT_1_ADR(_BASE))
#define PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_REG(_BASE) ((pma_cmn_msg_fsm_calmaster_pstate_cfg_reg_t*) PMA_CMN_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE))
#define PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_REG(_BASE) ((pma_cmn_msg_fsm_calmaster_quad_cfg_reg_t*) PMA_CMN_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE))
#define PMA_CMN_MSG_RPU_CTRL_REG(_BASE) ((pma_cmn_msg_rpu_ctrl_reg_t*) PMA_CMN_MSG_RPU_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_RPU_LUT_CFG_0_REG(_BASE) ((pma_cmn_msg_rpu_lut_cfg_0_reg_t*) PMA_CMN_MSG_RPU_LUT_CFG_0_ADR(_BASE))
#define PMA_CMN_MSG_RPU_LUT_CFG_1_REG(_BASE) ((pma_cmn_msg_rpu_lut_cfg_1_reg_t*) PMA_CMN_MSG_RPU_LUT_CFG_1_ADR(_BASE))
#define PMA_CMN_MSG_RPU_LUT_CFG_2_REG(_BASE) ((pma_cmn_msg_rpu_lut_cfg_2_reg_t*) PMA_CMN_MSG_RPU_LUT_CFG_2_ADR(_BASE))
#define PMA_CMN_MSG_RPU_LUT_CFG_3_REG(_BASE) ((pma_cmn_msg_rpu_lut_cfg_3_reg_t*) PMA_CMN_MSG_RPU_LUT_CFG_3_ADR(_BASE))
#define PMA_CMN_MSG_RPU_LUT_CFG_4_REG(_BASE) ((pma_cmn_msg_rpu_lut_cfg_4_reg_t*) PMA_CMN_MSG_RPU_LUT_CFG_4_ADR(_BASE))
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_REG(_BASE) ((pma_cmn_msg_rpu_evup_delay_cfg_0_reg_t*) PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE))
#define PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_REG(_BASE) ((pma_cmn_msg_rpu_evup_delay_cfg_1_reg_t*) PMA_CMN_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE))
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_REG(_BASE) ((pma_cmn_msg_rpu_evdn_delay_cfg_0_reg_t*) PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE))
#define PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_REG(_BASE) ((pma_cmn_msg_rpu_evdn_delay_cfg_1_reg_t*) PMA_CMN_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_REG(_BASE) ((pma_cmn_msg_cmn_rpu_event_cfg_0_reg_t*) PMA_CMN_MSG_CMN_RPU_EVENT_CFG_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_REG(_BASE) ((pma_cmn_msg_cmn_rpu_event_cfg_1_reg_t*) PMA_CMN_MSG_CMN_RPU_EVENT_CFG_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_REG(_BASE) ((pma_cmn_msg_cmn_rpu_event_cfg_2_reg_t*) PMA_CMN_MSG_CMN_RPU_EVENT_CFG_2_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_0_REG(_BASE) ((pma_cmn_msg_cmn_calavg_ctrl_0_reg_t*) PMA_CMN_MSG_CMN_CALAVG_CTRL_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_1_REG(_BASE) ((pma_cmn_msg_cmn_calavg_ctrl_1_reg_t*) PMA_CMN_MSG_CMN_CALAVG_CTRL_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CALAVG_CTRL_2_REG(_BASE) ((pma_cmn_msg_cmn_calavg_ctrl_2_reg_t*) PMA_CMN_MSG_CMN_CALAVG_CTRL_2_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CALAVG_STAT_REG(_BASE) ((pma_cmn_msg_cmn_calavg_stat_reg_t*) PMA_CMN_MSG_CMN_CALAVG_STAT_ADR(_BASE))
#define PMA_CMN_MSG_CMN_BRKPT_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_brkpt_ctrl_reg_t*) PMA_CMN_MSG_CMN_BRKPT_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_BRKPT_STAT_REG(_BASE) ((pma_cmn_msg_cmn_brkpt_stat_reg_t*) PMA_CMN_MSG_CMN_BRKPT_STAT_ADR(_BASE))
#define PMA_CMN_MSG_CMN_BRKPT_CLR_REG(_BASE) ((pma_cmn_msg_cmn_brkpt_clr_reg_t*) PMA_CMN_MSG_CMN_BRKPT_CLR_ADR(_BASE))
#define PMA_CMN_MSG_CMN_REF_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_ref_ctrl_reg_t*) PMA_CMN_MSG_CMN_REF_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_REF_STAT_REG(_BASE) ((pma_cmn_msg_cmn_ref_stat_reg_t*) PMA_CMN_MSG_CMN_REF_STAT_ADR(_BASE))
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_REG(_BASE) ((pma_cmn_msg_cmn_output_pin_ovrd_reg_t*) PMA_CMN_MSG_CMN_OUTPUT_PIN_OVRD_ADR(_BASE))
#define PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_REG(_BASE) ((pma_cmn_msg_cmn_output_pin_preovrd_reg_t*) PMA_CMN_MSG_CMN_OUTPUT_PIN_PREOVRD_ADR(_BASE))
#define PMA_CMN_MSG_CMN_APB_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_apb_ctrl_reg_t*) PMA_CMN_MSG_CMN_APB_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_APB_STAT_REG(_BASE) ((pma_cmn_msg_cmn_apb_stat_reg_t*) PMA_CMN_MSG_CMN_APB_STAT_ADR(_BASE))
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_REG(_BASE) ((pma_cmn_msg_cmn_apb_mask_stat_prelim_reg_t*) PMA_CMN_MSG_CMN_APB_MASK_STAT_PRELIM_ADR(_BASE))
#define PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_REG(_BASE) ((pma_cmn_msg_cmn_apb_mask_stat_final_reg_t*) PMA_CMN_MSG_CMN_APB_MASK_STAT_FINAL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_testbus_cfg_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_testbus_cfg_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_TESTBUS_CFG_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_testbus_stat_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_testbus_stat_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_TESTBUS_STAT_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SCRATCHY_0_REG(_BASE) ((pma_cmn_msg_cmn_scratchy_0_reg_t*) PMA_CMN_MSG_CMN_SCRATCHY_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SCRATCHY_1_REG(_BASE) ((pma_cmn_msg_cmn_scratchy_1_reg_t*) PMA_CMN_MSG_CMN_SCRATCHY_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SCRATCHY_2_REG(_BASE) ((pma_cmn_msg_cmn_scratchy_2_reg_t*) PMA_CMN_MSG_CMN_SCRATCHY_2_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CKM_CTRL_0_REG(_BASE) ((pma_cmn_msg_cmn_ckm_ctrl_0_reg_t*) PMA_CMN_MSG_CMN_CKM_CTRL_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CKM_CTRL_1_REG(_BASE) ((pma_cmn_msg_cmn_ckm_ctrl_1_reg_t*) PMA_CMN_MSG_CMN_CKM_CTRL_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CKM_CTRL_2_REG(_BASE) ((pma_cmn_msg_cmn_ckm_ctrl_2_reg_t*) PMA_CMN_MSG_CMN_CKM_CTRL_2_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CKM_STAT_REG(_BASE) ((pma_cmn_msg_cmn_ckm_stat_reg_t*) PMA_CMN_MSG_CMN_CKM_STAT_ADR(_BASE))
#define PMA_CMN_MSG_BTI_CLK_CFG_REG(_BASE) ((pma_cmn_msg_bti_clk_cfg_reg_t*) PMA_CMN_MSG_BTI_CLK_CFG_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_REG(_BASE) ((pma_cmn_msg_cmn_cmpout_calassist_ctrl0_reg_t*) PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_REG(_BASE) ((pma_cmn_msg_cmn_cmpout_calassist_ctrl1_reg_t*) PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_REG(_BASE) ((pma_cmn_msg_cmn_cmpout_calassist_ctrl2_reg_t*) PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_CTRL2_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_REG(_BASE) ((pma_cmn_msg_cmn_cmpout_calassist_stat_reg_t*) PMA_CMN_MSG_CMN_CMPOUT_CALASSIST_STAT_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_chargepump_calassist_ctrl_reg_t*) PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_REG(_BASE) ((pma_cmn_msg_cmn_chargepump_calassist_stat_reg_t*) PMA_CMN_MSG_CMN_CHARGEPUMP_CALASSIST_STAT_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_spare_port_ovrd_ctrl_reg_t*) PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_REG(_BASE) ((pma_cmn_msg_cmn_spare_port_ovrd_reg_t*) PMA_CMN_MSG_CMN_SPARE_PORT_OVRD_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_REG(_BASE) ((pma_cmn_msg_cmn_spare_port_preovrd_reg_t*) PMA_CMN_MSG_CMN_SPARE_PORT_PREOVRD_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_force_event_ctrl_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_en_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_en_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_EN_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_mask_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_mask_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_MASK_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_clr_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_clr_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_CLR_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_raw_stat_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_raw_stat_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_RAW_STAT_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_stat_0_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_REG(_BASE) ((pma_cmn_msg_cmn_synth_icu_irq_stat_1_reg_t*) PMA_CMN_MSG_CMN_SYNTH_ICU_IRQ_STAT_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RW_SPARE_0_REG(_BASE) ((pma_cmn_msg_cmn_rw_spare_0_reg_t*) PMA_CMN_MSG_CMN_RW_SPARE_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RW_SPARE_1_REG(_BASE) ((pma_cmn_msg_cmn_rw_spare_1_reg_t*) PMA_CMN_MSG_CMN_RW_SPARE_1_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RW_SPARE_2_REG(_BASE) ((pma_cmn_msg_cmn_rw_spare_2_reg_t*) PMA_CMN_MSG_CMN_RW_SPARE_2_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RW_SPARE_3_REG(_BASE) ((pma_cmn_msg_cmn_rw_spare_3_reg_t*) PMA_CMN_MSG_CMN_RW_SPARE_3_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RO_SPARE_0_REG(_BASE) ((pma_cmn_msg_cmn_ro_spare_0_reg_t*) PMA_CMN_MSG_CMN_RO_SPARE_0_ADR(_BASE))
#define PMA_CMN_MSG_CMN_RO_SPARE_1_REG(_BASE) ((pma_cmn_msg_cmn_ro_spare_1_reg_t*) PMA_CMN_MSG_CMN_RO_SPARE_1_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pma_cmn_msg_pma_revision_reg_t PMA_REVISION; /*< Address offset = 0x0 */
    pma_cmn_msg_pma_jtag_ver_reg_t PMA_JTAG_VER; /*< Address offset = 0x4 */
    pma_cmn_msg_pma_scratch_pad_0_reg_t PMA_SCRATCH_PAD_0; /*< Address offset = 0x8 */
    pma_cmn_msg_pma_scratch_pad_1_reg_t PMA_SCRATCH_PAD_1; /*< Address offset = 0xc */
    pma_cmn_msg_pma_scratch_pad_2_reg_t PMA_SCRATCH_PAD_2; /*< Address offset = 0x10 */
    pma_cmn_msg_pma_scratch_pad_3_reg_t PMA_SCRATCH_PAD_3; /*< Address offset = 0x14 */
    pma_cmn_msg_pma_scratch_pad_4_reg_t PMA_SCRATCH_PAD_4; /*< Address offset = 0x18 */
    pma_cmn_msg_pma_scratch_pad_5_reg_t PMA_SCRATCH_PAD_5; /*< Address offset = 0x1c */
    pma_cmn_msg_pma_scratch_pad_6_reg_t PMA_SCRATCH_PAD_6; /*< Address offset = 0x20 */
    pma_cmn_msg_pma_scratch_pad_7_reg_t PMA_SCRATCH_PAD_7; /*< Address offset = 0x24 */
    pma_cmn_msg_pma_scratch_pad_8_reg_t PMA_SCRATCH_PAD_8; /*< Address offset = 0x28 */
    pma_cmn_msg_pma_scratch_pad_9_reg_t PMA_SCRATCH_PAD_9; /*< Address offset = 0x2c */
    pma_cmn_msg_pma_scratch_pad_10_reg_t PMA_SCRATCH_PAD_10; /*< Address offset = 0x30 */
    pma_cmn_msg_pma_scratch_pad_11_reg_t PMA_SCRATCH_PAD_11; /*< Address offset = 0x34 */
    pma_cmn_msg_pma_scratch_pad_12_reg_t PMA_SCRATCH_PAD_12; /*< Address offset = 0x38 */
    pma_cmn_msg_pma_scratch_pad_13_reg_t PMA_SCRATCH_PAD_13; /*< Address offset = 0x3c */
    pma_cmn_msg_pma_scratch_pad_14_reg_t PMA_SCRATCH_PAD_14; /*< Address offset = 0x40 */
    pma_cmn_msg_pma_scratch_pad_15_reg_t PMA_SCRATCH_PAD_15; /*< Address offset = 0x44 */
    pma_cmn_msg_pma_pmu_irange_reg_t PMA_PMU_IRANGE; /*< Address offset = 0x48 */
    pma_cmn_msg_pma_pmu_vforce_reg_t PMA_PMU_VFORCE; /*< Address offset = 0x4c */
    pma_cmn_msg_pma_die_temp_reg_t PMA_DIE_TEMP; /*< Address offset = 0x50 */
    pma_cmn_msg_pma_cmn_fuse_spare_reg_t PMA_CMN_FUSE_SPARE; /*< Address offset = 0x54 */
    pma_cmn_msg_cmn_car_cfg_reg_t CMN_CAR_CFG; /*< Address offset = 0x58 */
    pma_cmn_msg_cmn_car_cfg_ro_reg_t CMN_CAR_CFG_RO; /*< Address offset = 0x5c */
    pma_cmn_msg_cmn_force_pup_ctrl_reg_t CMN_FORCE_PUP_CTRL; /*< Address offset = 0x60 */
    pma_cmn_msg_cmn_pwr_mng_ctrl_reg_t CMN_PWR_MNG_CTRL; /*< Address offset = 0x64 */
    pma_cmn_msg_cmn_pwr_mng_stat_reg_t CMN_PWR_MNG_STAT; /*< Address offset = 0x68 */
    pma_cmn_msg_fsm_mainfsm_ctrl_reg_t CMNFSM_MAINFSM_CTRL; /*< Address offset = 0x6c */
    pma_cmn_msg_fsm_stat_0_reg_t CMNFSM_STAT_0; /*< Address offset = 0x70 */
    pma_cmn_msg_fsm_stat_1_reg_t CMNFSM_STAT_1; /*< Address offset = 0x74 */
    pma_cmn_msg_fsm_calmaster_pstate_cfg_reg_t CMNFSM_CALMASTER_PSTATE_CFG; /*< Address offset = 0x78 */
    pma_cmn_msg_fsm_calmaster_quad_cfg_reg_t CMNFSM_CALMASTER_QUAD_CFG; /*< Address offset = 0x7c */
    pma_cmn_msg_rpu_ctrl_reg_t CMNRPU_CTRL; /*< Address offset = 0x80 */
    pma_cmn_msg_rpu_lut_cfg_0_reg_t CMNRPU_LUT_CFG_0; /*< Address offset = 0x84 */
    pma_cmn_msg_rpu_lut_cfg_1_reg_t CMNRPU_LUT_CFG_1; /*< Address offset = 0x88 */
    pma_cmn_msg_rpu_lut_cfg_2_reg_t CMNRPU_LUT_CFG_2; /*< Address offset = 0x8c */
    pma_cmn_msg_rpu_lut_cfg_3_reg_t CMNRPU_LUT_CFG_3; /*< Address offset = 0x90 */
    pma_cmn_msg_rpu_lut_cfg_4_reg_t CMNRPU_LUT_CFG_4; /*< Address offset = 0x94 */
    pma_cmn_msg_rpu_evup_delay_cfg_0_reg_t CMNRPU_EVUP_DELAY_CFG_0; /*< Address offset = 0x98 */
    pma_cmn_msg_rpu_evup_delay_cfg_1_reg_t CMNRPU_EVUP_DELAY_CFG_1; /*< Address offset = 0x9c */
    pma_cmn_msg_rpu_evdn_delay_cfg_0_reg_t CMNRPU_EVDN_DELAY_CFG_0; /*< Address offset = 0xa0 */
    pma_cmn_msg_rpu_evdn_delay_cfg_1_reg_t CMNRPU_EVDN_DELAY_CFG_1; /*< Address offset = 0xa4 */
    pma_cmn_msg_cmn_rpu_event_cfg_0_reg_t CMN_RPU_EVENT_CFG_0; /*< Address offset = 0xa8 */
    pma_cmn_msg_cmn_rpu_event_cfg_1_reg_t CMN_RPU_EVENT_CFG_1; /*< Address offset = 0xac */
    pma_cmn_msg_cmn_rpu_event_cfg_2_reg_t CMN_RPU_EVENT_CFG_2; /*< Address offset = 0xb0 */
    pma_cmn_msg_cmn_calavg_ctrl_0_reg_t CMN_CALAVG_CTRL_0; /*< Address offset = 0xb4 */
    pma_cmn_msg_cmn_calavg_ctrl_1_reg_t CMN_CALAVG_CTRL_1; /*< Address offset = 0xb8 */
    pma_cmn_msg_cmn_calavg_ctrl_2_reg_t CMN_CALAVG_CTRL_2; /*< Address offset = 0xbc */
    pma_cmn_msg_cmn_calavg_stat_reg_t CMN_CALAVG_STAT; /*< Address offset = 0xc0 */
    pma_cmn_msg_cmn_brkpt_ctrl_reg_t CMN_BRKPT_CTRL; /*< Address offset = 0xc4 */
    pma_cmn_msg_cmn_brkpt_stat_reg_t CMN_BRKPT_STAT; /*< Address offset = 0xc8 */
    pma_cmn_msg_cmn_brkpt_clr_reg_t CMN_BRKPT_CLR; /*< Address offset = 0xcc */
    pma_cmn_msg_cmn_ref_ctrl_reg_t CMN_REF_CTRL; /*< Address offset = 0xd0 */
    pma_cmn_msg_cmn_ref_stat_reg_t CMN_REF_STAT; /*< Address offset = 0xd4 */
    pma_cmn_msg_cmn_output_pin_ovrd_reg_t CMN_OUTPUT_PIN_OVRD; /*< Address offset = 0xd8 */
    pma_cmn_msg_cmn_output_pin_preovrd_reg_t CMN_OUTPUT_PIN_PREOVRD; /*< Address offset = 0xdc */
    pma_cmn_msg_cmn_apb_ctrl_reg_t CMN_APB_CTRL; /*< Address offset = 0xe0 */
    pma_cmn_msg_cmn_apb_stat_reg_t CMN_APB_STAT; /*< Address offset = 0xe4 */
    pma_cmn_msg_cmn_apb_mask_stat_prelim_reg_t CMN_APB_MASK_STAT_PRELIM; /*< Address offset = 0xe8 */
    pma_cmn_msg_cmn_apb_mask_stat_final_reg_t CMN_APB_MASK_STAT_FINAL; /*< Address offset = 0xec */
    const uint8_t        reservedArea0 [12];  /*< Address offset = 0xf0 */
    pma_cmn_msg_cmn_synth_testbus_cfg_0_reg_t CMN_SYNTH_TESTBUS_CFG_0; /*< Address offset = 0xfc */
    pma_cmn_msg_cmn_synth_testbus_cfg_1_reg_t CMN_SYNTH_TESTBUS_CFG_1; /*< Address offset = 0x100 */
    pma_cmn_msg_cmn_synth_testbus_stat_0_reg_t CMN_SYNTH_TESTBUS_STAT_0; /*< Address offset = 0x104 */
    pma_cmn_msg_cmn_synth_testbus_stat_1_reg_t CMN_SYNTH_TESTBUS_STAT_1; /*< Address offset = 0x108 */
    pma_cmn_msg_cmn_scratchy_0_reg_t CMN_SCRATCHY_0; /*< Address offset = 0x10c */
    pma_cmn_msg_cmn_scratchy_1_reg_t CMN_SCRATCHY_1; /*< Address offset = 0x110 */
    pma_cmn_msg_cmn_scratchy_2_reg_t CMN_SCRATCHY_2; /*< Address offset = 0x114 */
    pma_cmn_msg_cmn_ckm_ctrl_0_reg_t CMN_CKM_CTRL_0; /*< Address offset = 0x118 */
    pma_cmn_msg_cmn_ckm_ctrl_1_reg_t CMN_CKM_CTRL_1; /*< Address offset = 0x11c */
    pma_cmn_msg_cmn_ckm_ctrl_2_reg_t CMN_CKM_CTRL_2; /*< Address offset = 0x120 */
    pma_cmn_msg_cmn_ckm_stat_reg_t CMN_CKM_STAT; /*< Address offset = 0x124 */
    pma_cmn_msg_bti_clk_cfg_reg_t BTI_CLK_CFG; /*< Address offset = 0x128 */
    pma_cmn_msg_cmn_cmpout_calassist_ctrl0_reg_t CMN_CMPOUT_CALASSIST_CTRL0; /*< Address offset = 0x12c */
    pma_cmn_msg_cmn_cmpout_calassist_ctrl1_reg_t CMN_CMPOUT_CALASSIST_CTRL1; /*< Address offset = 0x130 */
    pma_cmn_msg_cmn_cmpout_calassist_ctrl2_reg_t CMN_CMPOUT_CALASSIST_CTRL2; /*< Address offset = 0x134 */
    pma_cmn_msg_cmn_cmpout_calassist_stat_reg_t CMN_CMPOUT_CALASSIST_STAT; /*< Address offset = 0x138 */
    pma_cmn_msg_cmn_chargepump_calassist_ctrl_reg_t CMN_CHARGEPUMP_CALASSIST_CTRL; /*< Address offset = 0x13c */
    pma_cmn_msg_cmn_chargepump_calassist_stat_reg_t CMN_CHARGEPUMP_CALASSIST_STAT; /*< Address offset = 0x140 */
    pma_cmn_msg_cmn_spare_port_ovrd_ctrl_reg_t CMN_SPARE_PORT_OVRD_CTRL; /*< Address offset = 0x144 */
    pma_cmn_msg_cmn_spare_port_ovrd_reg_t CMN_SPARE_PORT_OVRD; /*< Address offset = 0x148 */
    pma_cmn_msg_cmn_spare_port_preovrd_reg_t CMN_SPARE_PORT_PREOVRD; /*< Address offset = 0x14c */
    pma_cmn_msg_cmn_synth_icu_irq_force_event_ctrl_reg_t CMN_SYNTH_ICU_IRQ_FORCE_EVENT_CTRL; /*< Address offset = 0x150 */
    pma_cmn_msg_cmn_synth_icu_irq_en_0_reg_t CMN_SYNTH_ICU_IRQ_EN_0; /*< Address offset = 0x154 */
    pma_cmn_msg_cmn_synth_icu_irq_en_1_reg_t CMN_SYNTH_ICU_IRQ_EN_1; /*< Address offset = 0x158 */
    pma_cmn_msg_cmn_synth_icu_irq_mask_0_reg_t CMN_SYNTH_ICU_IRQ_MASK_0; /*< Address offset = 0x15c */
    pma_cmn_msg_cmn_synth_icu_irq_mask_1_reg_t CMN_SYNTH_ICU_IRQ_MASK_1; /*< Address offset = 0x160 */
    pma_cmn_msg_cmn_synth_icu_irq_clr_0_reg_t CMN_SYNTH_ICU_IRQ_CLR_0; /*< Address offset = 0x164 */
    pma_cmn_msg_cmn_synth_icu_irq_clr_1_reg_t CMN_SYNTH_ICU_IRQ_CLR_1; /*< Address offset = 0x168 */
    pma_cmn_msg_cmn_synth_icu_irq_raw_stat_0_reg_t CMN_SYNTH_ICU_IRQ_RAW_STAT_0; /*< Address offset = 0x16c */
    pma_cmn_msg_cmn_synth_icu_irq_raw_stat_1_reg_t CMN_SYNTH_ICU_IRQ_RAW_STAT_1; /*< Address offset = 0x170 */
    pma_cmn_msg_cmn_synth_icu_irq_stat_0_reg_t CMN_SYNTH_ICU_IRQ_STAT_0; /*< Address offset = 0x174 */
    pma_cmn_msg_cmn_synth_icu_irq_stat_1_reg_t CMN_SYNTH_ICU_IRQ_STAT_1; /*< Address offset = 0x178 */
    const uint8_t        reservedArea1 [1568]; /*< Address offset = 0x17c */
    pma_cmn_msg_cmn_rw_spare_0_reg_t CMN_RW_SPARE_0; /*< Address offset = 0x79c */
    pma_cmn_msg_cmn_rw_spare_1_reg_t CMN_RW_SPARE_1; /*< Address offset = 0x7a0 */
    pma_cmn_msg_cmn_rw_spare_2_reg_t CMN_RW_SPARE_2; /*< Address offset = 0x7a4 */
    pma_cmn_msg_cmn_rw_spare_3_reg_t CMN_RW_SPARE_3; /*< Address offset = 0x7a8 */
    pma_cmn_msg_cmn_ro_spare_0_reg_t CMN_RO_SPARE_0; /*< Address offset = 0x7ac */
    pma_cmn_msg_cmn_ro_spare_1_reg_t CMN_RO_SPARE_1; /*< Address offset = 0x7b0 */
} pma_cmn_msg_t;     // size: 0x0188

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_CMN  ((pma_cmn_msg_t*) DLNK_JESD0_PHY_PMA0_CMN_BASE)
#define DLNK_JESD1_PHY_PMA0_CMN  ((pma_cmn_msg_t*) DLNK_JESD1_PHY_PMA0_CMN_BASE)
#define DLNK_JESD2_PHY_PMA0_CMN  ((pma_cmn_msg_t*) DLNK_JESD2_PHY_PMA0_CMN_BASE)
#define DLNK_JESD3_PHY_PMA0_CMN  ((pma_cmn_msg_t*) DLNK_JESD3_PHY_PMA0_CMN_BASE)

// ******************************************* /Address Space

#endif      // _PMA_CMN_MSG_H_

