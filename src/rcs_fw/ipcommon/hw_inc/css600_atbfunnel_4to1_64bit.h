#ifndef _CSS600_ATBFUNNEL_4TO1_64BIT_H_
#define _CSS600_ATBFUNNEL_4TO1_64BIT_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define VEXARRAYCS16_00_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a020000 )
#define VEXARRAYCS16_01_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a420000 )
#define VEXARRAYCS16_10_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a220000 )
#define VEXARRAYCS16_11_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a620000 )
#define VEXARRAYCS16_20_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a320000 )
#define VEXARRAYCS16_21_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a720000 )
#define VEXARRAYCS16_30_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a3a0000 )
#define VEXARRAYCS16_31_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE  ( 0x0a7a0000 )
#define RCS_CS_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE           ( 0x0ac50000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_OFFSET ( 0x00000000U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_OFFSET ( 0x00000004U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_OFFSET ( 0x00000eecU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_OFFSET ( 0x00000ef0U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_OFFSET ( 0x00000ef4U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_OFFSET ( 0x00000ef8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_OFFSET ( 0x00000efcU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_OFFSET ( 0x00000f00U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_OFFSET ( 0x00000fa0U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_OFFSET ( 0x00000fa4U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_OFFSET ( 0x00000fa8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_OFFSET ( 0x00000facU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_OFFSET ( 0x00000fb8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_OFFSET ( 0x00000fbcU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_OFFSET ( 0x00000fc0U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_OFFSET ( 0x00000fc4U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_OFFSET ( 0x00000fc8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_OFFSET ( 0x00000fccU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_OFFSET ( 0x00000fd0U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_OFFSET ( 0x00000fd4U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_OFFSET ( 0x00000fd8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_OFFSET ( 0x00000fdcU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_OFFSET ( 0x00000fe0U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_OFFSET ( 0x00000fe4U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_OFFSET ( 0x00000fe8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_OFFSET ( 0x00000fecU )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_OFFSET ( 0x00000ff0U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_OFFSET ( 0x00000ff4U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_OFFSET ( 0x00000ff8U )
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_OFFSET ( 0x00000ffcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_OFFSET ) ))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_ADR(_BASE) (( ( _BASE ) + ( CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_FUNNELCONTROL register description at address offset 0x0
  *
  * Register default value:        0x00000300
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/FUNNELCONTROL
  * Funnel Control register
  */

typedef union {
  struct {
    uint32_t ENS0 : 1;
    ///< Enable slave interface 0. Field is RES0 if slave interface 0 is not
    ///< implemented.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ENS1 : 1;
    ///< Enable slave interface 1. Field is RES0 if slave interface 1 is not
    ///< implemented.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ENS2 : 1;
    ///< Enable slave interface 2. Field is RES0 if slave interface 2 is not
    ///< implemented.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ENS3 : 1;
    ///< Enable slave interface 3. Field is RES0 if slave interface 3 is not
    ///< implemented.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t ENS4 : 1;
    ///< Enable slave interface 4. Field is RES0 if slave interface 4 is not
    ///< implemented.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t ENS5 : 1;
    ///< Enable slave interface 5. Field is RES0 if slave interface 5 is not
    ///< implemented.
    ///< AccessType="RO" BitOffset="5" ResetValue="0x0"
    uint32_t ENS6 : 1;
    ///< Enable slave interface 6. Field is RES0 if slave interface 6 is not
    ///< implemented.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t ENS7 : 1;
    ///< Enable slave interface 7. Field is RES0 if slave interface 7 is not
    ///< implemented.
    ///< AccessType="RO" BitOffset="7" ResetValue="0x0"
    uint32_t HT : 4;
    ///< Hold time. Value sets the minimum hold time before switching trace
    ///< sources (funnel inputs) based on the ID. Value used is programmed
    ///< value + 1.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t FLUSH_NORMAL : 1;
    ///< This bit, when clear, allows slave ports that are already flushed
    ///< to receive further data even if there are other ports that have not
    ///< completed flush. If set, a port that has completed flush is not be
    ///< allowed to receive further data until all ports have completed flush.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RES0_0 : 19;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_funnelctrl_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_DEFAULT (0x00000300U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_WR_MASK (0xffffff0fU)


///< Enable slave interface 0. Field is RES0 if slave interface 0 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS0_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS0_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS0_BF_MSK (0x00000001)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS0_BF_DEF (0x00000000)

///< Enable slave interface 1. Field is RES0 if slave interface 1 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS1_BF_OFF ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS1_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS1_BF_MSK (0x00000002)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS1_BF_DEF (0x00000000)

///< Enable slave interface 2. Field is RES0 if slave interface 2 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS2_BF_OFF ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS2_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS2_BF_MSK (0x00000004)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS2_BF_DEF (0x00000000)

///< Enable slave interface 3. Field is RES0 if slave interface 3 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS3_BF_OFF ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS3_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS3_BF_MSK (0x00000008)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS3_BF_DEF (0x00000000)

///< Enable slave interface 4. Field is RES0 if slave interface 4 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS4_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS4_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS4_BF_MSK (0x00000010)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS4_BF_DEF (0x00000000)

///< Enable slave interface 5. Field is RES0 if slave interface 5 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS5_BF_OFF ( 5)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS5_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS5_BF_MSK (0x00000020)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS5_BF_DEF (0x00000000)

///< Enable slave interface 6. Field is RES0 if slave interface 6 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS6_BF_OFF ( 6)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS6_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS6_BF_MSK (0x00000040)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS6_BF_DEF (0x00000000)

///< Enable slave interface 7. Field is RES0 if slave interface 7 is not
///< implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS7_BF_OFF ( 7)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS7_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS7_BF_MSK (0x00000080)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ENS7_BF_DEF (0x00000000)

///< Hold time. Value sets the minimum hold time before switching trace
///< sources (funnel inputs) based on the ID. Value used is programmed
///< value + 1.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_HT_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_HT_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_HT_BF_MSK (0x00000F00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_HT_BF_DEF (0x00000300)

///< This bit, when clear, allows slave ports that are already flushed
///< to receive further data even if there are other ports that have not
///< completed flush. If set, a port that has completed flush is not be
///< allowed to receive further data until all ports have completed flush.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_FLUSH_NORMAL_BF_OFF (12)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_FLUSH_NORMAL_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_FLUSH_NORMAL_BF_MSK (0x00001000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_FLUSH_NORMAL_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_RES0_0_BF_OFF (13)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_RES0_0_BF_WID (19)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_RES0_0_BF_MSK (0xFFFFE000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PRIORITYCONTROL register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PRIORITYCONTROL
  * Priority Control register
  */

typedef union {
  struct {
    uint32_t PRIPORT0 : 3;
    ///< Priority value for port 0. Field is RES0 if port 0 is not implemented.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PRIPORT1 : 3;
    ///< Priority value for port 1. Field is RES0 if port 1 is not implemented.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PRIPORT2 : 3;
    ///< Priority value for port 2. Field is RES0 if port 2 is not implemented.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t PRIPORT3 : 3;
    ///< Priority value for port 3. Field is RES0 if port 3 is not implemented.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t PRIPORT4 : 3;
    ///< Priority value for port 4. Field is RES0 if port 4 is not implemented.
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
    uint32_t PRIPORT5 : 3;
    ///< Priority value for port 5. Field is RES0 if port 5 is not implemented.
    ///< AccessType="RO" BitOffset="15" ResetValue="0x0"
    uint32_t PRIPORT6 : 3;
    ///< Priority value for port 6. Field is RES0 if port 6 is not implemented.
    ///< AccessType="RO" BitOffset="18" ResetValue="0x0"
    uint32_t PRIPORT7 : 3;
    ///< Priority value for port 7. Field is RES0 if port 7 is not implemented.
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
    uint32_t RES0_0 : 8;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_priorityctrl_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_WR_MASK (0xff000fffU)


///< Priority value for port 0. Field is RES0 if port 0 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT0_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT0_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT0_BF_MSK (0x00000007)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT0_BF_DEF (0x00000000)

///< Priority value for port 1. Field is RES0 if port 1 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT1_BF_OFF ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT1_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT1_BF_MSK (0x00000038)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT1_BF_DEF (0x00000000)

///< Priority value for port 2. Field is RES0 if port 2 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT2_BF_OFF ( 6)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT2_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT2_BF_MSK (0x000001C0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT2_BF_DEF (0x00000000)

///< Priority value for port 3. Field is RES0 if port 3 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT3_BF_OFF ( 9)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT3_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT3_BF_MSK (0x00000E00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT3_BF_DEF (0x00000000)

///< Priority value for port 4. Field is RES0 if port 4 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT4_BF_OFF (12)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT4_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT4_BF_MSK (0x00007000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT4_BF_DEF (0x00000000)

///< Priority value for port 5. Field is RES0 if port 5 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT5_BF_OFF (15)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT5_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT5_BF_MSK (0x00038000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT5_BF_DEF (0x00000000)

///< Priority value for port 6. Field is RES0 if port 6 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT6_BF_OFF (18)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT6_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT6_BF_MSK (0x001C0000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT6_BF_DEF (0x00000000)

///< Priority value for port 7. Field is RES0 if port 7 is not implemented.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT7_BF_OFF (21)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT7_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT7_BF_MSK (0x00E00000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_PRIPORT7_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_RES0_0_BF_OFF (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_RES0_0_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_RES0_0_BF_MSK (0xFF000000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITATBDATA0 register description at address offset 0xeec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/ITATBDATA0
  * Integration test data register
  */

typedef union {
  struct {
    uint32_t ATDATA0 : 1;
    ///< Reads atdata_s[0] and writes atdata_m[0]:
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ATDATA7 : 1;
    ///< Reads atdata_s[7] and writes atdata_m[7]:
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ATDATA15 : 1;
    ///< Reads atdata_s[15] and writes atdata_m[15]:
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ATDATA23 : 1;
    ///< Reads atdata_s[23] and writes atdata_m[23]:
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t ATDATA31 : 1;
    ///< Reads atdata_s[31] and writes atdata_m[31]:
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ATDATA39 : 1;
    ///< Reads atdata_s[39] and writes atdata_m[39]:
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t ATDATA47 : 1;
    ///< Reads atdata_s[47] and writes atdata_m[47]:
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t ATDATA55 : 1;
    ///< Reads atdata_s[55] and writes atdata_m[55]:
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t ATDATA63 : 1;
    ///< Reads atdata_s[63] and writes atdata_m[63]:
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t ATDATA71 : 1;
    ///< Reads atdata_s[71] and writes atdata_m[71]:
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t ATDATA79 : 1;
    ///< Reads atdata_s[79] and writes atdata_m[79]:
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t ATDATA87 : 1;
    ///< Reads atdata_s[87] and writes atdata_m[87]:
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t ATDATA95 : 1;
    ///< Reads atdata_s[95] and writes atdata_m[95]:
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t ATDATA103 : 1;
    ///< Reads atdata_s[103] and writes atdata_m[103]:
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t ATDATA111 : 1;
    ///< Reads atdata_s[111] and writes atdata_m[111]:
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t ATDATA119 : 1;
    ///< Reads atdata_s[119] and writes atdata_m[119]:
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t ATDATA127 : 1;
    ///< Reads atdata_s[127] and writes atdata_m[127]:
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RES0_0 : 15;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_itatbdata0_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_WR_MASK (0xffffffffU)


///< Reads atdata_s[0] and writes atdata_m[0]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA0_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA0_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA0_BF_MSK (0x00000001)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA0_BF_DEF (0x00000000)

///< Reads atdata_s[7] and writes atdata_m[7]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA7_BF_OFF ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA7_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA7_BF_MSK (0x00000002)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA7_BF_DEF (0x00000000)

///< Reads atdata_s[15] and writes atdata_m[15]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA15_BF_OFF ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA15_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA15_BF_MSK (0x00000004)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA15_BF_DEF (0x00000000)

///< Reads atdata_s[23] and writes atdata_m[23]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA23_BF_OFF ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA23_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA23_BF_MSK (0x00000008)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA23_BF_DEF (0x00000000)

///< Reads atdata_s[31] and writes atdata_m[31]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA31_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA31_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA31_BF_MSK (0x00000010)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA31_BF_DEF (0x00000000)

///< Reads atdata_s[39] and writes atdata_m[39]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA39_BF_OFF ( 5)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA39_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA39_BF_MSK (0x00000020)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA39_BF_DEF (0x00000000)

///< Reads atdata_s[47] and writes atdata_m[47]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA47_BF_OFF ( 6)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA47_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA47_BF_MSK (0x00000040)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA47_BF_DEF (0x00000000)

///< Reads atdata_s[55] and writes atdata_m[55]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA55_BF_OFF ( 7)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA55_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA55_BF_MSK (0x00000080)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA55_BF_DEF (0x00000000)

///< Reads atdata_s[63] and writes atdata_m[63]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA63_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA63_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA63_BF_MSK (0x00000100)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA63_BF_DEF (0x00000000)

///< Reads atdata_s[71] and writes atdata_m[71]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA71_BF_OFF ( 9)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA71_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA71_BF_MSK (0x00000200)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA71_BF_DEF (0x00000000)

///< Reads atdata_s[79] and writes atdata_m[79]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA79_BF_OFF (10)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA79_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA79_BF_MSK (0x00000400)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA79_BF_DEF (0x00000000)

///< Reads atdata_s[87] and writes atdata_m[87]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA87_BF_OFF (11)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA87_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA87_BF_MSK (0x00000800)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA87_BF_DEF (0x00000000)

///< Reads atdata_s[95] and writes atdata_m[95]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA95_BF_OFF (12)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA95_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA95_BF_MSK (0x00001000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA95_BF_DEF (0x00000000)

///< Reads atdata_s[103] and writes atdata_m[103]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA103_BF_OFF (13)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA103_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA103_BF_MSK (0x00002000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA103_BF_DEF (0x00000000)

///< Reads atdata_s[111] and writes atdata_m[111]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA111_BF_OFF (14)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA111_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA111_BF_MSK (0x00004000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA111_BF_DEF (0x00000000)

///< Reads atdata_s[119] and writes atdata_m[119]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA119_BF_OFF (15)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA119_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA119_BF_MSK (0x00008000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA119_BF_DEF (0x00000000)

///< Reads atdata_s[127] and writes atdata_m[127]:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA127_BF_OFF (16)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA127_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA127_BF_MSK (0x00010000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ATDATA127_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_RES0_0_BF_OFF (17)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_RES0_0_BF_WID (15)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_RES0_0_BF_MSK (0xFFFE0000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITATBCTR3 register description at address offset 0xef0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/ITATBCTR3
  * Integration test control register 3
  */

typedef union {
  struct {
    uint32_t SYNCREQ : 1;
    ///< Reads and controls the SYNCREQ signals into, and out of, the funnel.
    ///< Reading clears the latch.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr3_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_WR_MASK (0xffffffffU)


///< Reads and controls the SYNCREQ signals into, and out of, the funnel.
///< Reading clears the latch.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_SYNCREQ_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_SYNCREQ_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_SYNCREQ_BF_MSK (0x00000001)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_SYNCREQ_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_RES0_0_BF_OFF ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_RES0_0_BF_WID (31)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITATBCTR2 register description at address offset 0xef4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/ITATBCTR2
  * Integration test control register 2
  */

typedef union {
  struct {
    uint32_t ATREADY : 1;
    ///< Reads and controls the atready signal into, and out of, the funnel:
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AFVALID : 1;
    ///< Reads and controls the afvalid signals into, and out of, the funnel:
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RES0_0 : 30;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr2_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_WR_MASK (0xffffffffU)


///< Reads and controls the atready signal into, and out of, the funnel:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_ATREADY_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_ATREADY_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_ATREADY_BF_MSK (0x00000001)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_ATREADY_BF_DEF (0x00000000)

///< Reads and controls the afvalid signals into, and out of, the funnel:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_AFVALID_BF_OFF ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_AFVALID_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_AFVALID_BF_MSK (0x00000002)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_AFVALID_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_RES0_0_BF_OFF ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_RES0_0_BF_WID (30)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_RES0_0_BF_MSK (0xFFFFFFFC)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITATBCTR1 register description at address offset 0xef8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/ITATBCTR1
  * Integration test control register 1
  */

typedef union {
  struct {
    uint32_t ATID : 7;
    ///< When read returns the value on atid_s, when written drives the value
    ///< on atid_m
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 25;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr1_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_WR_MASK (0xffffffffU)


///< When read returns the value on atid_s, when written drives the value
///< on atid_m
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_ATID_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_ATID_BF_WID ( 7)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_ATID_BF_MSK (0x0000007F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_ATID_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_RES0_0_BF_OFF ( 7)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_RES0_0_BF_WID (25)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_RES0_0_BF_MSK (0xFFFFFF80)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITATBCTR0 register description at address offset 0xefc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/ITATBCTR0
  * Integration test control register 0
  */

typedef union {
  struct {
    uint32_t ATVALID : 1;
    ///< Reads and controls the atvalid signals into, and out of, the funnel:
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t AFREADY : 1;
    ///< Reads and controls the afready signals into, and out of, the funnel:
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RES0_0 : 6;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t ATBYTES : 2;
    ///< Reads the value on atbytes_s[1:0] and writes the values on atbytes_m[1:0]
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RES0_1 : 22;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr0_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_WR_MASK (0xffffffffU)


///< Reads and controls the atvalid signals into, and out of, the funnel:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATVALID_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATVALID_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATVALID_BF_MSK (0x00000001)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATVALID_BF_DEF (0x00000000)

///< Reads and controls the afready signals into, and out of, the funnel:
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_AFREADY_BF_OFF ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_AFREADY_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_AFREADY_BF_MSK (0x00000002)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_AFREADY_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_0_BF_OFF ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_0_BF_WID ( 6)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_0_BF_MSK (0x000000FC)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_0_BF_DEF (0x00000000)

///< Reads the value on atbytes_s[1:0] and writes the values on atbytes_m[1:0]
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATBYTES_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATBYTES_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATBYTES_BF_MSK (0x00000300)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ATBYTES_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_1_BF_OFF (10)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_1_BF_WID (22)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_1_BF_MSK (0xFFFFFC00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_RES0_1_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_ITCTRL register description at address offset 0xf00
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/ITCTRL
  * Integration Mode Control Register
  */

typedef union {
  struct {
    uint32_t IME : 1;
    ///< Integration Mode Enable. When set, the component enters integration
    ///< mode, enabling topology detection or integration testing to be performed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 31;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_itctrl_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_WR_MASK (0xffffffffU)


///< Integration Mode Enable. When set, the component enters integration
///< mode, enabling topology detection or integration testing to be performed.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_IME_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_IME_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_IME_BF_MSK (0x00000001)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_IME_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_RES0_0_BF_OFF ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_RES0_0_BF_WID (31)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_RES0_0_BF_MSK (0xFFFFFFFE)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CLAIMSET register description at address offset 0xfa0
  *
  * Register default value:        0x0000000F
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/CLAIMSET
  * Claim Tag Set Register
  */

typedef union {
  struct {
    uint32_t SET : 4;
    ///< A bit-programmable register bank that sets the claim tag value. A
    ///< read returns a logic 1 for all implemented locations.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t RAZWI_0 : 28;
    ///< RAZ/WI
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_claimset_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_DEFAULT (0x0000000fU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_WR_MASK (0xffffffffU)


///< A bit-programmable register bank that sets the claim tag value. A
///< read returns a logic 1 for all implemented locations.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_SET_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_SET_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_SET_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_SET_BF_DEF (0x0000000F)

///< RAZ/WI
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_RAZWI_0_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_RAZWI_0_BF_WID (28)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_RAZWI_0_BF_MSK (0xFFFFFFF0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_RAZWI_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CLAIMCLR register description at address offset 0xfa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/CLAIMCLR
  * Claim Tag Clear Register
  */

typedef union {
  struct {
    uint32_t CLR : 4;
    ///< A bit-programmable register bank that clears the claim tag value.
    ///< It is zero at reset. It is used by software agents to signal to each
    ///< other ownership of the hardware. It has no direct effect on the hardware
    ///< itself.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RAZWI_0 : 28;
    ///< RAZ/WI
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_claimclr_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_WR_MASK (0xffffffffU)


///< A bit-programmable register bank that clears the claim tag value.
///< It is zero at reset. It is used by software agents to signal to each
///< other ownership of the hardware. It has no direct effect on the hardware
///< itself.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_CLR_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_CLR_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_CLR_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_CLR_BF_DEF (0x00000000)

///< RAZ/WI
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_RAZWI_0_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_RAZWI_0_BF_WID (28)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_RAZWI_0_BF_MSK (0xFFFFFFF0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_RAZWI_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVAFF0 register description at address offset 0xfa8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVAFF0
  * Device Affinity register 0
  */

typedef union {
  struct {
    uint32_t DEVAFF0 : 32;
    ///< This field is RAZ.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devaff0_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_WR_MASK (0x00000000U)


///< This field is RAZ.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_BF_WID (32)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_BF_MSK (0xFFFFFFFF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVAFF1 register description at address offset 0xfac
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVAFF1
  * Device Affinity register 1
  */

typedef union {
  struct {
    uint32_t DEVAFF1 : 32;
    ///< This field is RAZ.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devaff1_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_WR_MASK (0x00000000U)


///< This field is RAZ.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_BF_WID (32)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_BF_MSK (0xFFFFFFFF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_AUTHSTATUS register description at address offset 0xfb8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/AUTHSTATUS
  * Authentication Status Register
  */

typedef union {
  struct {
    uint32_t NSID : 2;
    ///< Non-secure invasive debug.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t NSNID : 2;
    ///< Non-secure non-invasive debug.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SID : 2;
    ///< Secure invasive debug.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t SNID : 2;
    ///< Secure non-invasive debug.
    ///< AccessType="RO" BitOffset="6" ResetValue="0x0"
    uint32_t HID : 2;
    ///< Hypervisor invasive debug.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
    uint32_t HNID : 2;
    ///< Hypervisor non-invasive debug.
    ///< AccessType="RO" BitOffset="10" ResetValue="0x0"
    uint32_t RES0_0 : 20;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="12" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_authstat_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_WR_MASK (0x00000000U)


///< Non-secure invasive debug.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSID_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSID_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSID_BF_MSK (0x00000003)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSID_BF_DEF (0x00000000)

///< Non-secure non-invasive debug.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSNID_BF_OFF ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSNID_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSNID_BF_MSK (0x0000000C)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_NSNID_BF_DEF (0x00000000)

///< Secure invasive debug.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SID_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SID_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SID_BF_MSK (0x00000030)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SID_BF_DEF (0x00000000)

///< Secure non-invasive debug.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SNID_BF_OFF ( 6)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SNID_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SNID_BF_MSK (0x000000C0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_SNID_BF_DEF (0x00000000)

///< Hypervisor invasive debug.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HID_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HID_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HID_BF_MSK (0x00000300)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HID_BF_DEF (0x00000000)

///< Hypervisor non-invasive debug.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HNID_BF_OFF (10)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HNID_BF_WID ( 2)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HNID_BF_MSK (0x00000C00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_HNID_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_RES0_0_BF_OFF (12)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_RES0_0_BF_WID (20)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_RES0_0_BF_MSK (0xFFFFF000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVARCH register description at address offset 0xfbc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVARCH
  * Device Architecture Register
  */

typedef union {
  struct {
    uint32_t ARCHID : 16;
    ///< Returns 0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t REVISION : 4;
    ///< Returns 0
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t PRESENT : 1;
    ///< Returns 0, indicating that the DEVARCH register is not present.
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t ARCHITECT : 11;
    ///< Returns 0.
    ///< AccessType="RO" BitOffset="21" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devarch_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_WR_MASK (0x00000000U)


///< Returns 0.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHID_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHID_BF_WID (16)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHID_BF_MSK (0x0000FFFF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHID_BF_DEF (0x00000000)

///< Returns 0
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_REVISION_BF_OFF (16)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_REVISION_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_REVISION_BF_MSK (0x000F0000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_REVISION_BF_DEF (0x00000000)

///< Returns 0, indicating that the DEVARCH register is not present.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_PRESENT_BF_OFF (20)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_PRESENT_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_PRESENT_BF_MSK (0x00100000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_PRESENT_BF_DEF (0x00000000)

///< Returns 0.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHITECT_BF_OFF (21)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHITECT_BF_WID (11)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHITECT_BF_MSK (0xFFE00000)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ARCHITECT_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVID2 register description at address offset 0xfc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVID2
  * Device Configuration Register 2
  */

typedef union {
  struct {
    uint32_t DEVID2 : 32;
    ///< This field is RAZ.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devid2_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_WR_MASK (0x00000000U)


///< This field is RAZ.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_BF_WID (32)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_BF_MSK (0xFFFFFFFF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVID1 register description at address offset 0xfc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVID1
  * Device Configuration Register 1
  */

typedef union {
  struct {
    uint32_t DEVID1 : 32;
    ///< This field is RAZ.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devid1_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_WR_MASK (0x00000000U)


///< This field is RAZ.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_BF_WID (32)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_BF_MSK (0xFFFFFFFF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVID register description at address offset 0xfc8
  *
  * Register default value:        0x00000034
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVID
  * Device Configuration Register
  */

typedef union {
  struct {
    uint32_t PORTCOUNT : 4;
    ///< Indicates the number of input ports connected
    ///< AccessType="RO" BitOffset="0" ResetValue="0x4"
    uint32_t SCHEME : 4;
    ///< Indicates priority scheme implemented. Input priority is controlled
    ///< by the PRIORITYCONTROL register.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x3"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devid_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_DEFAULT (0x00000034U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_WR_MASK (0x00000000U)


///< Indicates the number of input ports connected
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_PORTCNT_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_PORTCNT_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_PORTCNT_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_PORTCNT_BF_DEF (0x00000004)

///< Indicates priority scheme implemented. Input priority is controlled
///< by the PRIORITYCONTROL register.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_SCHEME_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_SCHEME_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_SCHEME_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_SCHEME_BF_DEF (0x00000030)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_DEVTYPE register description at address offset 0xfcc
  *
  * Register default value:        0x00000012
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/DEVTYPE
  * Device Type Identifier Register
  */

typedef union {
  struct {
    uint32_t MAJOR : 4;
    ///< Major classification. Returns 0x2, indicating this component is a
    ///< Trace Link.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x2"
    uint32_t SUB : 4;
    ///< Minor classification. Returns 0x1, indicating this component is a
    ///< Funnel/Router.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x1"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_devtype_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_DEFAULT (0x00000012U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_WR_MASK (0x00000000U)


///< Major classification. Returns 0x2, indicating this component is a
///< Trace Link.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_MAJOR_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_MAJOR_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_MAJOR_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_MAJOR_BF_DEF (0x00000002)

///< Minor classification. Returns 0x1, indicating this component is a
///< Funnel/Router.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_SUB_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_SUB_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_SUB_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_SUB_BF_DEF (0x00000010)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR4 register description at address offset 0xfd0
  *
  * Register default value:        0x00000004
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR4
  * Peripheral Identification Register 4
  */

typedef union {
  struct {
    uint32_t DES_2 : 4;
    ///< JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0,
    ///< they indicate the designer of the component and not the implementer,
    ///< except where the two are the same.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x4"
    uint32_t SIZE : 4;
    ///< Indicates the memory size that is used by this component. Returns
    ///< 0 indicating that the component uses an UNKNOWN number of 4KB blocks.
    ///< Using the SIZE field to indicate the size of the component is deprecated.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr4_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_DEFAULT (0x00000004U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_WR_MASK (0x00000000U)


///< JEP106 continuation code. Together, with PIDR2.DES_1 and PIDR1.DES_0,
///< they indicate the designer of the component and not the implementer,
///< except where the two are the same.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_DES_2_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_DES_2_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_DES_2_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_DES_2_BF_DEF (0x00000004)

///< Indicates the memory size that is used by this component. Returns
///< 0 indicating that the component uses an UNKNOWN number of 4KB blocks.
///< Using the SIZE field to indicate the size of the component is deprecated.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_SIZE_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_SIZE_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_SIZE_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_SIZE_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR5 register description at address offset 0xfd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR5
  * Peripheral Identification Register 5
  */

typedef union {
  struct {
    uint32_t PIDR5 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr5_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR6 register description at address offset 0xfd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR6
  * Peripheral Identification Register 6
  */

typedef union {
  struct {
    uint32_t PIDR6 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr6_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR7 register description at address offset 0xfdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR7
  * Peripheral Identification Register 7
  */

typedef union {
  struct {
    uint32_t PIDR7 : 8;
    ///< Reserved.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr7_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_WR_MASK (0x00000000U)


///< Reserved.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR0 register description at address offset 0xfe0
  *
  * Register default value:        0x000000EB
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR0
  * Peripheral Identification Register 0
  */

typedef union {
  struct {
    uint32_t PART_0 : 8;
    ///< Part number, bits[7:0]. Taken together with PIDR1.PART_1 it indicates
    ///< the component. The Part Number is selected by the designer of the
    ///< component.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xEB"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr0_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_DEFAULT (0x000000ebU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_WR_MASK (0x00000000U)


///< Part number, bits[7:0]. Taken together with PIDR1.PART_1 it indicates
///< the component. The Part Number is selected by the designer of the
///< component.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_PART_0_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_PART_0_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_PART_0_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_PART_0_BF_DEF (0x000000EB)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR1 register description at address offset 0xfe4
  *
  * Register default value:        0x000000B9
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR1
  * Peripheral Identification Register 1
  */

typedef union {
  struct {
    uint32_t PART_1 : 4;
    ///< Part number, bits[11:8]. Taken together with PIDR0.PART_0 it indicates
    ///< the component. The Part Number is selected by the designer of the
    ///< component.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x9"
    uint32_t DES_0 : 4;
    ///< JEP106 identification code, bits[3:0]. Together, with PIDR4.DES_2
    ///< and PIDR2.DES_1, they indicate the designer of the component and not
    ///< the implementer, except where the two are the same.
    ///< AccessType="RO" BitOffset="4" ResetValue="0xB"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr1_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_DEFAULT (0x000000b9U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_WR_MASK (0x00000000U)


///< Part number, bits[11:8]. Taken together with PIDR0.PART_0 it indicates
///< the component. The Part Number is selected by the designer of the
///< component.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_PART_1_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_PART_1_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_PART_1_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_PART_1_BF_DEF (0x00000009)

///< JEP106 identification code, bits[3:0]. Together, with PIDR4.DES_2
///< and PIDR2.DES_1, they indicate the designer of the component and not
///< the implementer, except where the two are the same.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_DES_0_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_DES_0_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_DES_0_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_DES_0_BF_DEF (0x000000B0)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR2 register description at address offset 0xfe8
  *
  * Register default value:        0x0000003B
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR2
  * Peripheral Identification Register 2
  */

typedef union {
  struct {
    uint32_t DES_1 : 3;
    ///< JEP106 identification code, bits[6:4]. Together, with PIDR4.DES_2
    ///< and PIDR1.DES_0, they indicate the designer of the component and not
    ///< the implementer, except where the two are the same.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x3"
    uint32_t JEDEC : 1;
    ///< 1 - Always set. Indicates that a JEDEC assigned value is used.
    ///< AccessType="RO" BitOffset="3" ResetValue="0x1"
    uint32_t REVISION : 4;
    ///< Revision. It is an incremental value starting at 0x0 for the first
    ///< design of a component. See the Component list in Chapter 1 for information
    ///< on the RTL revision of the component.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x3"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr2_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_DEFAULT (0x0000003bU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_WR_MASK (0x00000000U)


///< JEP106 identification code, bits[6:4]. Together, with PIDR4.DES_2
///< and PIDR1.DES_0, they indicate the designer of the component and not
///< the implementer, except where the two are the same.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_DES_1_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_DES_1_BF_WID ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_DES_1_BF_MSK (0x00000007)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_DES_1_BF_DEF (0x00000003)

///< 1 - Always set. Indicates that a JEDEC assigned value is used.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_JEDEC_BF_OFF ( 3)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_JEDEC_BF_WID ( 1)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_JEDEC_BF_MSK (0x00000008)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_JEDEC_BF_DEF (0x00000008)

///< Revision. It is an incremental value starting at 0x0 for the first
///< design of a component. See the Component list in Chapter 1 for information
///< on the RTL revision of the component.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_REVISION_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_REVISION_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_REVISION_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_REVISION_BF_DEF (0x00000030)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_PIDR3 register description at address offset 0xfec
  *
  * Register default value:        0x00000000
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/PIDR3
  * Peripheral Identification Register 3
  */

typedef union {
  struct {
    uint32_t CMOD : 4;
    ///< Customer Modified. Where the component is reusable IP, this value
    ///< indicates if the customer has modified the behavior of the component.
    ///< In most cases this field is 0x0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t REVAND : 4;
    ///< This field indicates minor errata fixes specific to this design, for
    ///< example metal fixes after implementation. In most cases this field
    ///< is 0x0.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_pidr3_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_DEFAULT (0x00000000U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_WR_MASK (0x00000000U)


///< Customer Modified. Where the component is reusable IP, this value
///< indicates if the customer has modified the behavior of the component.
///< In most cases this field is 0x0.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_CMOD_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_CMOD_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_CMOD_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_CMOD_BF_DEF (0x00000000)

///< This field indicates minor errata fixes specific to this design, for
///< example metal fixes after implementation. In most cases this field
///< is 0x0.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_REVAND_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_REVAND_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_REVAND_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_REVAND_BF_DEF (0x00000000)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR0 register description at address offset 0xff0
  *
  * Register default value:        0x0000000D
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/CIDR0
  * Component Identification Register 0
  */

typedef union {
  struct {
    uint32_t PRMBL_0 : 8;
    ///< Preamble. Returns 0x0D.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xD"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_cidr0_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_DEFAULT (0x0000000dU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_WR_MASK (0x00000000U)


///< Preamble. Returns 0x0D.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_PRMBL_0_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_PRMBL_0_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_PRMBL_0_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_PRMBL_0_BF_DEF (0x0000000D)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR1 register description at address offset 0xff4
  *
  * Register default value:        0x00000090
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/CIDR1
  * Component Identification Register 1
  */

typedef union {
  struct {
    uint32_t PRMBL_1 : 4;
    ///< Preamble. Returns 0x0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t CLASS : 4;
    ///< Component class. Returns 0x9, indicating this is a CoreSight component.
    ///< AccessType="RO" BitOffset="4" ResetValue="0x9"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_cidr1_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_DEFAULT (0x00000090U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_WR_MASK (0x00000000U)


///< Preamble. Returns 0x0.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_PRMBL_1_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_PRMBL_1_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_PRMBL_1_BF_MSK (0x0000000F)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_PRMBL_1_BF_DEF (0x00000000)

///< Component class. Returns 0x9, indicating this is a CoreSight component.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_CLASS_BF_OFF ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_CLASS_BF_WID ( 4)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_CLASS_BF_MSK (0x000000F0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_CLASS_BF_DEF (0x00000090)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR2 register description at address offset 0xff8
  *
  * Register default value:        0x00000005
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/CIDR2
  * Component Identification Register 2
  */

typedef union {
  struct {
    uint32_t PRMBL_2 : 8;
    ///< Preamble. Returns 0x05.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x5"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_cidr2_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_DEFAULT (0x00000005U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_WR_MASK (0x00000000U)


///< Preamble. Returns 0x05.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_PRMBL_2_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_PRMBL_2_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_PRMBL_2_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_PRMBL_2_BF_DEF (0x00000005)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_RES0_0_BF_DEF (0x00000000)


/** @brief CSS600_ATBFUNNEL_HWC_4TO1_64BIT_APB4_SLAVE_0_MM_ADDRESSBLOCK_0_CIDR3 register description at address offset 0xffc
  *
  * Register default value:        0x000000B1
  * Register full path in IP: css600_atbfunnel_hwc_4to1_64bit/APB4_Slave_0_MM/addressBlock_0/CIDR3
  * Component Identification Register 3
  */

typedef union {
  struct {
    uint32_t PRMBL_3 : 8;
    ///< Preamble. Returns 0xB1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xB1"
    uint32_t RES0_0 : 24;
    ///< Reserved bit or field with SBZP behavior
    ///< AccessType="RO" BitOffset="8" ResetValue="0x0"
  } ;
  uint32_t value;
} css600_atbfunnel_4to1_64bit_addrblk_0_cidr3_reg_t;

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_DEFAULT (0x000000b1U)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_RD_MASK (0xffffffffU)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_WR_MASK (0x00000000U)


///< Preamble. Returns 0xB1.
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_PRMBL_3_BF_OFF ( 0)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_PRMBL_3_BF_WID ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_PRMBL_3_BF_MSK (0x000000FF)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_PRMBL_3_BF_DEF (0x000000B1)

///< Reserved bit or field with SBZP behavior
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_RES0_0_BF_OFF ( 8)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_RES0_0_BF_WID (24)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_RES0_0_BF_MSK (0xFFFFFF00)
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_RES0_0_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_funnelctrl_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_FUNNELCTRL_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_priorityctrl_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PRIORITYCTRL_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_itatbdata0_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBDATA0_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr3_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR3_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr2_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR2_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr1_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR1_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr0_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITATBCTR0_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_itctrl_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_ITCTRL_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_claimset_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMSET_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_claimclr_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CLAIMCLR_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devaff0_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF0_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devaff1_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVAFF1_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_authstat_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_AUTHSTAT_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devarch_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVARCH_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devid2_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID2_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devid1_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID1_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devid_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVID_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_devtype_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_DEVTYPE_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr4_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR4_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr5_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR5_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr6_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR6_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr7_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR7_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr0_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR0_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr1_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR1_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr2_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR2_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_pidr3_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_PIDR3_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_cidr0_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR0_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_cidr1_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR1_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_cidr2_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR2_ADR(_BASE))
#define CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_REG(_BASE) ((css600_atbfunnel_4to1_64bit_addrblk_0_cidr3_reg_t*) CSS600_ATBFUNNEL_4TO1_64BIT_ADDRBLK_0_CIDR3_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    css600_atbfunnel_4to1_64bit_addrblk_0_funnelctrl_reg_t ADDRBLK_0_FUNNELCTRL; /*< Address offset = 0x0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_priorityctrl_reg_t ADDRBLK_0_PRIORITYCTRL; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [3812]; /*< Address offset = 0x8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_itatbdata0_reg_t ADDRBLK_0_ITATBDATA0; /*< Address offset = 0xeec */
    css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr3_reg_t ADDRBLK_0_ITATBCTR3; /*< Address offset = 0xef0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr2_reg_t ADDRBLK_0_ITATBCTR2; /*< Address offset = 0xef4 */
    css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr1_reg_t ADDRBLK_0_ITATBCTR1; /*< Address offset = 0xef8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_itatbctr0_reg_t ADDRBLK_0_ITATBCTR0; /*< Address offset = 0xefc */
    css600_atbfunnel_4to1_64bit_addrblk_0_itctrl_reg_t ADDRBLK_0_ITCTRL; /*< Address offset = 0xf00 */
    const uint8_t        reservedArea1 [156]; /*< Address offset = 0xf04 */
    css600_atbfunnel_4to1_64bit_addrblk_0_claimset_reg_t ADDRBLK_0_CLAIMSET; /*< Address offset = 0xfa0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_claimclr_reg_t ADDRBLK_0_CLAIMCLR; /*< Address offset = 0xfa4 */
    css600_atbfunnel_4to1_64bit_addrblk_0_devaff0_reg_t ADDRBLK_0_DEVAFF0; /*< Address offset = 0xfa8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_devaff1_reg_t ADDRBLK_0_DEVAFF1; /*< Address offset = 0xfac */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0xfb0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_authstat_reg_t ADDRBLK_0_AUTHSTAT; /*< Address offset = 0xfb8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_devarch_reg_t ADDRBLK_0_DEVARCH; /*< Address offset = 0xfbc */
    css600_atbfunnel_4to1_64bit_addrblk_0_devid2_reg_t ADDRBLK_0_DEVID2; /*< Address offset = 0xfc0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_devid1_reg_t ADDRBLK_0_DEVID1; /*< Address offset = 0xfc4 */
    css600_atbfunnel_4to1_64bit_addrblk_0_devid_reg_t ADDRBLK_0_DEVID; /*< Address offset = 0xfc8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_devtype_reg_t ADDRBLK_0_DEVTYPE; /*< Address offset = 0xfcc */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr4_reg_t ADDRBLK_0_PIDR4; /*< Address offset = 0xfd0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr5_reg_t ADDRBLK_0_PIDR5; /*< Address offset = 0xfd4 */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr6_reg_t ADDRBLK_0_PIDR6; /*< Address offset = 0xfd8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr7_reg_t ADDRBLK_0_PIDR7; /*< Address offset = 0xfdc */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr0_reg_t ADDRBLK_0_PIDR0; /*< Address offset = 0xfe0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr1_reg_t ADDRBLK_0_PIDR1; /*< Address offset = 0xfe4 */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr2_reg_t ADDRBLK_0_PIDR2; /*< Address offset = 0xfe8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_pidr3_reg_t ADDRBLK_0_PIDR3; /*< Address offset = 0xfec */
    css600_atbfunnel_4to1_64bit_addrblk_0_cidr0_reg_t ADDRBLK_0_CIDR0; /*< Address offset = 0xff0 */
    css600_atbfunnel_4to1_64bit_addrblk_0_cidr1_reg_t ADDRBLK_0_CIDR1; /*< Address offset = 0xff4 */
    css600_atbfunnel_4to1_64bit_addrblk_0_cidr2_reg_t ADDRBLK_0_CIDR2; /*< Address offset = 0xff8 */
    css600_atbfunnel_4to1_64bit_addrblk_0_cidr3_reg_t ADDRBLK_0_CIDR3; /*< Address offset = 0xffc */
} css600_atbfunnel_4to1_64bit_t;     // size: 0x0078

// AddressSpace struct pointer
//
#define VEXARRAYCS16_00_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_00_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_01_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_01_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_10_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_10_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_11_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_11_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_20_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_20_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_21_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_21_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_30_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_30_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define VEXARRAYCS16_31_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM  ((css600_atbfunnel_4to1_64bit_t*) VEXARRAYCS16_31_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)
#define RCS_CS_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM           ((css600_atbfunnel_4to1_64bit_t*) RCS_CS_FUNNEL4TO1_64BIT_APB4_SLAVE_0_MM_BASE)

// ******************************************* /Address Space

#endif      // _CSS600_ATBFUNNEL_4TO1_64BIT_H_

