#ifndef _SSPDMA_H_
#define _SSPDMA_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_SSPDMA0_BASE      ( 0x00248000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define SSPDMA_CR0_OFFSET ( 0x00000000U )
#define SSPDMA_CR1_OFFSET ( 0x00000004U )
#define SSPDMA_DR_OFFSET ( 0x00000008U )
#define SSPDMA_SR_OFFSET ( 0x0000000cU )
#define SSPDMA_CPSR_OFFSET ( 0x00000010U )
#define SSPDMA_IMSC_OFFSET ( 0x00000014U )
#define SSPDMA_RIS_OFFSET ( 0x00000018U )
#define SSPDMA_MIS_OFFSET ( 0x0000001cU )
#define SSPDMA_ICR_OFFSET ( 0x00000020U )
#define SSPDMA_DMACR_OFFSET ( 0x00000024U )
#define SSPDMA_CSR_OFFSET ( 0x00000030U )
#define SSPDMA_TCR_OFFSET ( 0x00000080U )
#define SSPDMA_ITIP_OFFSET ( 0x00000084U )
#define SSPDMA_ITOP_OFFSET ( 0x00000088U )
#define SSPDMA_TDR_OFFSET ( 0x0000008cU )
#define SSPDMA_PERIPHID0_OFFSET ( 0x00000fe0U )
#define SSPDMA_PERIPHID1_OFFSET ( 0x00000fe4U )
#define SSPDMA_PERIPHID2_OFFSET ( 0x00000fe8U )
#define SSPDMA_PERIPHID3_OFFSET ( 0x00000fecU )
#define SSPDMA_PCELLID0_OFFSET ( 0x00000ff0U )
#define SSPDMA_PCELLID1_OFFSET ( 0x00000ff4U )
#define SSPDMA_PCELLID2_OFFSET ( 0x00000ff8U )
#define SSPDMA_PCELLID3_OFFSET ( 0x00000ffcU )
#define SSPDMA_CTL_OFFSET ( 0x00001000U )
#define SSPDMA_CFG_OFFSET ( 0x00001004U )
#define SSPDMA_ADDR_LO_OFFSET ( 0x00001008U )
#define SSPDMA_ADDR_HI_OFFSET ( 0x0000100cU )
#define SSPDMA_STAT_OFFSET ( 0x00001040U )
#define SSPDMA_CRC32_OFFSET ( 0x00001044U )
#define SSPDMA_LVL_IRQ_STAT_OFFSET ( 0x00001080U )
#define SSPDMA_LVL_IRQ_MASK_OFFSET ( 0x00001084U )
#define SSPDMA_LVL_IRQ_INV_OFFSET ( 0x00001088U )
#define SSPDMA_LVL_IRQ_NOMASK_OFFSET ( 0x0000108cU )
#define SSPDMA_EDG_IRQ_STAT_OFFSET ( 0x00001090U )
#define SSPDMA_EDG_IRQ_MASK_OFFSET ( 0x00001094U )
#define SSPDMA_EDG_IRQ_INV_OFFSET ( 0x00001098U )
#define SSPDMA_EDG_IRQ_NOMASK_OFFSET ( 0x0000109cU )
#define SSPDMA_EDG_IRQ_RAW_OFFSET ( 0x00001100U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define SSPDMA_CR0_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CR0_OFFSET ) ))
#define SSPDMA_CR1_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CR1_OFFSET ) ))
#define SSPDMA_DR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_DR_OFFSET ) ))
#define SSPDMA_SR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_SR_OFFSET ) ))
#define SSPDMA_CPSR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CPSR_OFFSET ) ))
#define SSPDMA_IMSC_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_IMSC_OFFSET ) ))
#define SSPDMA_RIS_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_RIS_OFFSET ) ))
#define SSPDMA_MIS_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_MIS_OFFSET ) ))
#define SSPDMA_ICR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_ICR_OFFSET ) ))
#define SSPDMA_DMACR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_DMACR_OFFSET ) ))
#define SSPDMA_CSR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CSR_OFFSET ) ))
#define SSPDMA_TCR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_TCR_OFFSET ) ))
#define SSPDMA_ITIP_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_ITIP_OFFSET ) ))
#define SSPDMA_ITOP_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_ITOP_OFFSET ) ))
#define SSPDMA_TDR_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_TDR_OFFSET ) ))
#define SSPDMA_PERIPHID0_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PERIPHID0_OFFSET ) ))
#define SSPDMA_PERIPHID1_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PERIPHID1_OFFSET ) ))
#define SSPDMA_PERIPHID2_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PERIPHID2_OFFSET ) ))
#define SSPDMA_PERIPHID3_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PERIPHID3_OFFSET ) ))
#define SSPDMA_PCELLID0_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PCELLID0_OFFSET ) ))
#define SSPDMA_PCELLID1_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PCELLID1_OFFSET ) ))
#define SSPDMA_PCELLID2_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PCELLID2_OFFSET ) ))
#define SSPDMA_PCELLID3_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_PCELLID3_OFFSET ) ))
#define SSPDMA_CTL_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CTL_OFFSET ) ))
#define SSPDMA_CFG_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CFG_OFFSET ) ))
#define SSPDMA_ADDR_LO_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_ADDR_LO_OFFSET ) ))
#define SSPDMA_ADDR_HI_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_ADDR_HI_OFFSET ) ))
#define SSPDMA_STAT_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_STAT_OFFSET ) ))
#define SSPDMA_CRC32_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_CRC32_OFFSET ) ))
#define SSPDMA_LVL_IRQ_STAT_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_LVL_IRQ_STAT_OFFSET ) ))
#define SSPDMA_LVL_IRQ_MASK_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_LVL_IRQ_MASK_OFFSET ) ))
#define SSPDMA_LVL_IRQ_INV_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_LVL_IRQ_INV_OFFSET ) ))
#define SSPDMA_LVL_IRQ_NOMASK_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_LVL_IRQ_NOMASK_OFFSET ) ))
#define SSPDMA_EDG_IRQ_STAT_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_EDG_IRQ_STAT_OFFSET ) ))
#define SSPDMA_EDG_IRQ_MASK_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_EDG_IRQ_MASK_OFFSET ) ))
#define SSPDMA_EDG_IRQ_INV_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_EDG_IRQ_INV_OFFSET ) ))
#define SSPDMA_EDG_IRQ_NOMASK_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_EDG_IRQ_NOMASK_OFFSET ) ))
#define SSPDMA_EDG_IRQ_RAW_ADR (( ( RCS_SSPDMA0_BASE ) + ( SSPDMA_EDG_IRQ_RAW_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPCR0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPCR0
  * Control Register 0
  */

typedef union {
  struct {
    uint32_t DSS : 4;
    ///< Data Size Select:  0000:0010 = Reserved, undefined operation  0011
    ///< = 4-bit data  0100 = 5-bit data  0101 = 6-bit data  0110 = 7-bit data
    ///< 0111 = 8-bit data  1000 = 9-bit data  1001 = 10-bit data  1010 = 11-bit
    ///< data  1011 = 12-bit data  1100 = 13-bit data  1101 = 14-bit data
    ///< 1110 = 15-bit data  1111 = 16-bit data
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRF : 2;
    ///< Frame Format:  00 = Motorola SPI frame format  01 = NOTE: UNSUPPORTED
    ///< FORMAT TI synchronous serial frame format  10 = NOTE: UNSUPPORTED
    ///< FORMAT National Microwave frame format  11 = Reserved, undefined operation.
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t SPO : 1;
    ///< SSP_CKO Polarity (applicable to Motorola SPI frame format only)
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t SPH : 1;
    ///< SSP_CKO Phase (applicable to Motorola SPI frame format only)
    ///< AccessType="RW/V" BitOffset="7" ResetValue="0x0"
    uint32_t SCR : 8;
    ///< Serial Clock Rate:  The value SCR is used to generate the transmit
    ///< and receive rate of the SSP.    The bit rate is:    (Frequency of
    ///< SSPCLK)/(CPSDVR x (1 + SCR))    Where CPSDVR is an even value from
    ///< 2 to 254, programmed through the SSPCPSR register and SCR is a value
    ///< from 0 to 255.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_cr0_reg_t;

#define SSPDMA_CR0_DEFAULT (0x00000000U)
#define SSPDMA_CR0_RD_MASK (0xffffffffU)
#define SSPDMA_CR0_WR_MASK (0x0000ffffU)


///< Data Size Select:  0000:0010 = Reserved, undefined operation  0011
///< = 4-bit data  0100 = 5-bit data  0101 = 6-bit data  0110 = 7-bit data
///< 0111 = 8-bit data  1000 = 9-bit data  1001 = 10-bit data  1010 = 11-bit
///< data  1011 = 12-bit data  1100 = 13-bit data  1101 = 14-bit data
///< 1110 = 15-bit data  1111 = 16-bit data
#define SSPDMA_CR0_DSS_BF_OFF ( 0)
#define SSPDMA_CR0_DSS_BF_WID ( 4)
#define SSPDMA_CR0_DSS_BF_MSK (0x0000000F)
#define SSPDMA_CR0_DSS_BF_DEF (0x00000000)

///< Frame Format:  00 = Motorola SPI frame format  01 = NOTE: UNSUPPORTED
///< FORMAT TI synchronous serial frame format  10 = NOTE: UNSUPPORTED
///< FORMAT National Microwave frame format  11 = Reserved, undefined operation.
#define SSPDMA_CR0_FRF_BF_OFF ( 4)
#define SSPDMA_CR0_FRF_BF_WID ( 2)
#define SSPDMA_CR0_FRF_BF_MSK (0x00000030)
#define SSPDMA_CR0_FRF_BF_DEF (0x00000000)

///< SSP_CKO Polarity (applicable to Motorola SPI frame format only)
#define SSPDMA_CR0_SPO_BF_OFF ( 6)
#define SSPDMA_CR0_SPO_BF_WID ( 1)
#define SSPDMA_CR0_SPO_BF_MSK (0x00000040)
#define SSPDMA_CR0_SPO_BF_DEF (0x00000000)

///< SSP_CKO Phase (applicable to Motorola SPI frame format only)
#define SSPDMA_CR0_SPH_BF_OFF ( 7)
#define SSPDMA_CR0_SPH_BF_WID ( 1)
#define SSPDMA_CR0_SPH_BF_MSK (0x00000080)
#define SSPDMA_CR0_SPH_BF_DEF (0x00000000)

///< Serial Clock Rate:  The value SCR is used to generate the transmit
///< and receive rate of the SSP.    The bit rate is:    (Frequency of
///< SSPCLK)/(CPSDVR x (1 + SCR))    Where CPSDVR is an even value from
///< 2 to 254, programmed through the SSPCPSR register and SCR is a value
///< from 0 to 255.
#define SSPDMA_CR0_SCR_BF_OFF ( 8)
#define SSPDMA_CR0_SCR_BF_WID ( 8)
#define SSPDMA_CR0_SCR_BF_MSK (0x0000FF00)
#define SSPDMA_CR0_SCR_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_CR0_UND_BF_OFF (16)
#define SSPDMA_CR0_UND_BF_WID (16)
#define SSPDMA_CR0_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_CR0_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPCR1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPCR1
  * Control Register 1
  */

typedef union {
  struct {
    uint32_t LBM : 1;
    ///< Loop Back Mode: 0 = Normal serial port operation enabled, 1 = Output
    ///< of transmit serial shifter is connected to the input of the receive
    ///< serial shifter, internally.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t SSE : 1;
    ///< Synchronous Serial Port Enable:  0 = SSP operation disabled  1 = SSP
    ///< operation enabled
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t MS : 1;
    ///< Manager Or Subordinate Mode Select:  NOTE: SUBORDINATE MODE IS NOT
    ///< SUPPORTED  0 = Device is configured as Manager  1 = Device is configured
    ///< as Subordinate    NOTE: This bit can only be modified when the SSP
    ///< is disabled.
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t SOD : 1;
    ///< Subordinate-mode Output Disable:  NOTE: SUBORDINATE MODE IS NOT SUPPORTED,
    ///< DO NOT USE  This bit is only relevant in Subordinate Mode (MS=1).
    ///< In multiple-subordinate systems, it is possible for an SSP manager
    ///< to broadcast a message to all subordinates in the system while ensuring
    ///< that only one subordinate drives data onto its serial output line.
    ///< In such systems the RXD lines from multiple subordinates could be
    ///< tied together. To operate in such systems, the SOD bit can be set
    ///< if the SSP subordinate is not supposed to drive the SSPTXD line.
    ///< 0 = SSP can drive the SSPTXD output in subordinate mode  1 = SSP must
    ///< not drive the SSPTXD output in subordinate mode
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_cr1_reg_t;

#define SSPDMA_CR1_DEFAULT (0x00000000U)
#define SSPDMA_CR1_RD_MASK (0xffff000fU)
#define SSPDMA_CR1_WR_MASK (0x0000000fU)


///< Loop Back Mode: 0 = Normal serial port operation enabled, 1 = Output
///< of transmit serial shifter is connected to the input of the receive
///< serial shifter, internally.
#define SSPDMA_CR1_LBM_BF_OFF ( 0)
#define SSPDMA_CR1_LBM_BF_WID ( 1)
#define SSPDMA_CR1_LBM_BF_MSK (0x00000001)
#define SSPDMA_CR1_LBM_BF_DEF (0x00000000)

///< Synchronous Serial Port Enable:  0 = SSP operation disabled  1 = SSP
///< operation enabled
#define SSPDMA_CR1_SSE_BF_OFF ( 1)
#define SSPDMA_CR1_SSE_BF_WID ( 1)
#define SSPDMA_CR1_SSE_BF_MSK (0x00000002)
#define SSPDMA_CR1_SSE_BF_DEF (0x00000000)

///< Manager Or Subordinate Mode Select:  NOTE: SUBORDINATE MODE IS NOT
///< SUPPORTED  0 = Device is configured as Manager  1 = Device is configured
///< as Subordinate    NOTE: This bit can only be modified when the SSP
///< is disabled.
#define SSPDMA_CR1_MS_BF_OFF ( 2)
#define SSPDMA_CR1_MS_BF_WID ( 1)
#define SSPDMA_CR1_MS_BF_MSK (0x00000004)
#define SSPDMA_CR1_MS_BF_DEF (0x00000000)

///< Subordinate-mode Output Disable:  NOTE: SUBORDINATE MODE IS NOT SUPPORTED,
///< DO NOT USE  This bit is only relevant in Subordinate Mode (MS=1).
///< In multiple-subordinate systems, it is possible for an SSP manager
///< to broadcast a message to all subordinates in the system while ensuring
///< that only one subordinate drives data onto its serial output line.
///< In such systems the RXD lines from multiple subordinates could be
///< tied together. To operate in such systems, the SOD bit can be set
///< if the SSP subordinate is not supposed to drive the SSPTXD line.
///< 0 = SSP can drive the SSPTXD output in subordinate mode  1 = SSP must
///< not drive the SSPTXD output in subordinate mode
#define SSPDMA_CR1_SOD_BF_OFF ( 3)
#define SSPDMA_CR1_SOD_BF_WID ( 1)
#define SSPDMA_CR1_SOD_BF_MSK (0x00000008)
#define SSPDMA_CR1_SOD_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_CR1_UND_BF_OFF (16)
#define SSPDMA_CR1_UND_BF_WID (16)
#define SSPDMA_CR1_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_CR1_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPDR register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPDR
  * Data Register 1
  */

typedef union {
  struct {
    uint32_t DATA : 16;
    ///< Transmit/Receive FIFO:  Read = Receive FIFO  Write = Transmit FIFO
    ///< You must right-justify data when the SSP is programmed for a data
    ///< size that is less than 16 bits. Unused bits at the top are ignored
    ///< by transmit logic. The receive logic automatically right-justifies.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_dr_reg_t;

#define SSPDMA_DR_DEFAULT (0x00000000U)
#define SSPDMA_DR_RD_MASK (0xffffffffU)
#define SSPDMA_DR_WR_MASK (0x0000ffffU)


///< Transmit/Receive FIFO:  Read = Receive FIFO  Write = Transmit FIFO
///< You must right-justify data when the SSP is programmed for a data
///< size that is less than 16 bits. Unused bits at the top are ignored
///< by transmit logic. The receive logic automatically right-justifies.
#define SSPDMA_DR_DATA_BF_OFF ( 0)
#define SSPDMA_DR_DATA_BF_WID (16)
#define SSPDMA_DR_DATA_BF_MSK (0x0000FFFF)
#define SSPDMA_DR_DATA_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_DR_UND_BF_OFF (16)
#define SSPDMA_DR_UND_BF_WID (16)
#define SSPDMA_DR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_DR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPSR register description at address offset 0xc
  *
  * Register default value:        0x00000003
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPSR
  * Status Register
  */

typedef union {
  struct {
    uint32_t TFE : 1;
    ///< Transmit FIFO Empty
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x1"
    uint32_t TNF : 1;
    ///< Transmit FIFO Not Full
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x1"
    uint32_t RNE : 1;
    ///< Receive FIFO Not Empty
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RFF : 1;
    ///< Receive FIFO Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t BSY : 1;
    ///< SSP Busy Flag:  When set this bit indicates the SSP currently transmitting
    ///< and/or receiving a frame or the transmit FIFO is not empty.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_sr_reg_t;

#define SSPDMA_SR_DEFAULT (0x00000003U)
#define SSPDMA_SR_RD_MASK (0xffff001fU)
#define SSPDMA_SR_WR_MASK (0x00000000U)


///< Transmit FIFO Empty
#define SSPDMA_SR_TFE_BF_OFF ( 0)
#define SSPDMA_SR_TFE_BF_WID ( 1)
#define SSPDMA_SR_TFE_BF_MSK (0x00000001)
#define SSPDMA_SR_TFE_BF_DEF (0x00000001)

///< Transmit FIFO Not Full
#define SSPDMA_SR_TNF_BF_OFF ( 1)
#define SSPDMA_SR_TNF_BF_WID ( 1)
#define SSPDMA_SR_TNF_BF_MSK (0x00000002)
#define SSPDMA_SR_TNF_BF_DEF (0x00000002)

///< Receive FIFO Not Empty
#define SSPDMA_SR_RNE_BF_OFF ( 2)
#define SSPDMA_SR_RNE_BF_WID ( 1)
#define SSPDMA_SR_RNE_BF_MSK (0x00000004)
#define SSPDMA_SR_RNE_BF_DEF (0x00000000)

///< Receive FIFO Full
#define SSPDMA_SR_RFF_BF_OFF ( 3)
#define SSPDMA_SR_RFF_BF_WID ( 1)
#define SSPDMA_SR_RFF_BF_MSK (0x00000008)
#define SSPDMA_SR_RFF_BF_DEF (0x00000000)

///< SSP Busy Flag:  When set this bit indicates the SSP currently transmitting
///< and/or receiving a frame or the transmit FIFO is not empty.
#define SSPDMA_SR_BSY_BF_OFF ( 4)
#define SSPDMA_SR_BSY_BF_WID ( 1)
#define SSPDMA_SR_BSY_BF_MSK (0x00000010)
#define SSPDMA_SR_BSY_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_SR_UND_BF_OFF (16)
#define SSPDMA_SR_UND_BF_WID (16)
#define SSPDMA_SR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_SR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPCPSR register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPCPSR
  * Clock Prescale Register
  */

typedef union {
  struct {
    uint32_t CPSDVSR : 8;
    ///< Clock Prescale Divisor:  This must be an even number from 2 to 254,
    ///< depending on the frequency of SSPCLK. The least significant bit always
    ///< returns zero on reads.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_cpsr_reg_t;

#define SSPDMA_CPSR_DEFAULT (0x00000000U)
#define SSPDMA_CPSR_RD_MASK (0xffff00ffU)
#define SSPDMA_CPSR_WR_MASK (0x000000ffU)


///< Clock Prescale Divisor:  This must be an even number from 2 to 254,
///< depending on the frequency of SSPCLK. The least significant bit always
///< returns zero on reads.
#define SSPDMA_CPSR_CPSDVSR_BF_OFF ( 0)
#define SSPDMA_CPSR_CPSDVSR_BF_WID ( 8)
#define SSPDMA_CPSR_CPSDVSR_BF_MSK (0x000000FF)
#define SSPDMA_CPSR_CPSDVSR_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_CPSR_UND_BF_OFF (16)
#define SSPDMA_CPSR_UND_BF_WID (16)
#define SSPDMA_CPSR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_CPSR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPIMSC register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPIMSC
  * Interrupt Mask Register
  */

typedef union {
  struct {
    uint32_t RORIM : 1;
    ///< Receive Overrun Interrupt Mask:  0 = RxFIFO written to while full
    ///< condition interrupt is masked.  1 = RxFIFO written to while full condition
    ///< interrupt is [bold]not[/bold] masked.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RTIM : 1;
    ///< Receive Timeout Interrupt Mask:  0 = RxFIFO not empty and no read
    ///< prior to timeout period interrupt is masked.  1 = RxFIFO not empty
    ///< and no read prior to timeout period interrupt is [bold]not[/bold]
    ///< masked.
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXIM : 1;
    ///< Receive FIFO Interrupt Mask:  0 = RxFIFO half full or less condition
    ///< interrupt is masked.  1 = RxFIFO half full or less condition interrupt
    ///< is [bold]not[/bold] masked.
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXIM : 1;
    ///< Transmit FIFO Interrupt Mask:  0 = TxFIFO half empty or less condition
    ///< interrupt is masked.  1 = TxFIFO half empty or less condition interrupt
    ///< is [bold]not[/bold] masked.
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_imsc_reg_t;

#define SSPDMA_IMSC_DEFAULT (0x00000000U)
#define SSPDMA_IMSC_RD_MASK (0xffff000fU)
#define SSPDMA_IMSC_WR_MASK (0x0000000fU)


///< Receive Overrun Interrupt Mask:  0 = RxFIFO written to while full
///< condition interrupt is masked.  1 = RxFIFO written to while full condition
///< interrupt is [bold]not[/bold] masked.
#define SSPDMA_IMSC_RORIM_BF_OFF ( 0)
#define SSPDMA_IMSC_RORIM_BF_WID ( 1)
#define SSPDMA_IMSC_RORIM_BF_MSK (0x00000001)
#define SSPDMA_IMSC_RORIM_BF_DEF (0x00000000)

///< Receive Timeout Interrupt Mask:  0 = RxFIFO not empty and no read
///< prior to timeout period interrupt is masked.  1 = RxFIFO not empty
///< and no read prior to timeout period interrupt is [bold]not[/bold]
///< masked.
#define SSPDMA_IMSC_RTIM_BF_OFF ( 1)
#define SSPDMA_IMSC_RTIM_BF_WID ( 1)
#define SSPDMA_IMSC_RTIM_BF_MSK (0x00000002)
#define SSPDMA_IMSC_RTIM_BF_DEF (0x00000000)

///< Receive FIFO Interrupt Mask:  0 = RxFIFO half full or less condition
///< interrupt is masked.  1 = RxFIFO half full or less condition interrupt
///< is [bold]not[/bold] masked.
#define SSPDMA_IMSC_RXIM_BF_OFF ( 2)
#define SSPDMA_IMSC_RXIM_BF_WID ( 1)
#define SSPDMA_IMSC_RXIM_BF_MSK (0x00000004)
#define SSPDMA_IMSC_RXIM_BF_DEF (0x00000000)

///< Transmit FIFO Interrupt Mask:  0 = TxFIFO half empty or less condition
///< interrupt is masked.  1 = TxFIFO half empty or less condition interrupt
///< is [bold]not[/bold] masked.
#define SSPDMA_IMSC_TXIM_BF_OFF ( 3)
#define SSPDMA_IMSC_TXIM_BF_WID ( 1)
#define SSPDMA_IMSC_TXIM_BF_MSK (0x00000008)
#define SSPDMA_IMSC_TXIM_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_IMSC_UND_BF_OFF (16)
#define SSPDMA_IMSC_UND_BF_WID (16)
#define SSPDMA_IMSC_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_IMSC_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPRIS register description at address offset 0x18
  *
  * Register default value:        0x00000008
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPRIS
  * Raw Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t RORRIS : 1;
    ///< Raw Interrupt Status (prior to masking) of SSPRORINTR
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RTRIS : 1;
    ///< Raw Interrupt Status (prior to masking) of SSPRTINTR
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXRIS : 1;
    ///< Raw Interrupt Status (prior to masking) of SSPRXINTR
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXRIS : 1;
    ///< Raw Interrupt Status (prior to masking) of SSPTXINTR
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x1"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_ris_reg_t;

#define SSPDMA_RIS_DEFAULT (0x00000008U)
#define SSPDMA_RIS_RD_MASK (0xffff000fU)
#define SSPDMA_RIS_WR_MASK (0x00000000U)


///< Raw Interrupt Status (prior to masking) of SSPRORINTR
#define SSPDMA_RIS_RORRIS_BF_OFF ( 0)
#define SSPDMA_RIS_RORRIS_BF_WID ( 1)
#define SSPDMA_RIS_RORRIS_BF_MSK (0x00000001)
#define SSPDMA_RIS_RORRIS_BF_DEF (0x00000000)

///< Raw Interrupt Status (prior to masking) of SSPRTINTR
#define SSPDMA_RIS_RTRIS_BF_OFF ( 1)
#define SSPDMA_RIS_RTRIS_BF_WID ( 1)
#define SSPDMA_RIS_RTRIS_BF_MSK (0x00000002)
#define SSPDMA_RIS_RTRIS_BF_DEF (0x00000000)

///< Raw Interrupt Status (prior to masking) of SSPRXINTR
#define SSPDMA_RIS_RXRIS_BF_OFF ( 2)
#define SSPDMA_RIS_RXRIS_BF_WID ( 1)
#define SSPDMA_RIS_RXRIS_BF_MSK (0x00000004)
#define SSPDMA_RIS_RXRIS_BF_DEF (0x00000000)

///< Raw Interrupt Status (prior to masking) of SSPTXINTR
#define SSPDMA_RIS_TXRIS_BF_OFF ( 3)
#define SSPDMA_RIS_TXRIS_BF_WID ( 1)
#define SSPDMA_RIS_TXRIS_BF_MSK (0x00000008)
#define SSPDMA_RIS_TXRIS_BF_DEF (0x00000008)

///< Undefined
#define SSPDMA_RIS_UND_BF_OFF (16)
#define SSPDMA_RIS_UND_BF_WID (16)
#define SSPDMA_RIS_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_RIS_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPMIS register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPMIS
  * Masked Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t RORMIS : 1;
    ///< Masked Interrupt Status (after masking) of SSPRORINTR
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RTMIS : 1;
    ///< Masked Interrupt Status (after masking) of SSPRTINTR
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RXMIS : 1;
    ///< Masked Interrupt Status (after masking) of SSPRXINTR
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXMIS : 1;
    ///< Masked Interrupt Status (after masking) of SSPTXINTR
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_mis_reg_t;

#define SSPDMA_MIS_DEFAULT (0x00000000U)
#define SSPDMA_MIS_RD_MASK (0xffff000fU)
#define SSPDMA_MIS_WR_MASK (0x00000000U)


///< Masked Interrupt Status (after masking) of SSPRORINTR
#define SSPDMA_MIS_RORMIS_BF_OFF ( 0)
#define SSPDMA_MIS_RORMIS_BF_WID ( 1)
#define SSPDMA_MIS_RORMIS_BF_MSK (0x00000001)
#define SSPDMA_MIS_RORMIS_BF_DEF (0x00000000)

///< Masked Interrupt Status (after masking) of SSPRTINTR
#define SSPDMA_MIS_RTMIS_BF_OFF ( 1)
#define SSPDMA_MIS_RTMIS_BF_WID ( 1)
#define SSPDMA_MIS_RTMIS_BF_MSK (0x00000002)
#define SSPDMA_MIS_RTMIS_BF_DEF (0x00000000)

///< Masked Interrupt Status (after masking) of SSPRXINTR
#define SSPDMA_MIS_RXMIS_BF_OFF ( 2)
#define SSPDMA_MIS_RXMIS_BF_WID ( 1)
#define SSPDMA_MIS_RXMIS_BF_MSK (0x00000004)
#define SSPDMA_MIS_RXMIS_BF_DEF (0x00000000)

///< Masked Interrupt Status (after masking) of SSPTXINTR
#define SSPDMA_MIS_TXMIS_BF_OFF ( 3)
#define SSPDMA_MIS_TXMIS_BF_WID ( 1)
#define SSPDMA_MIS_TXMIS_BF_MSK (0x00000008)
#define SSPDMA_MIS_TXMIS_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_MIS_UND_BF_OFF (16)
#define SSPDMA_MIS_UND_BF_WID (16)
#define SSPDMA_MIS_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_MIS_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPICR register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPICR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t RORIC : 1;
    ///< Clears the SSPRORINTR Interrupt
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t RTIC : 1;
    ///< Clears the SSPRTINTR Interrupt
    ///< AccessType="WO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_icr_reg_t;

#define SSPDMA_ICR_DEFAULT (0x00000000U)
#define SSPDMA_ICR_RD_MASK (0xffff0000U)
#define SSPDMA_ICR_WR_MASK (0x00000003U)


///< Clears the SSPRORINTR Interrupt
#define SSPDMA_ICR_RORIC_BF_OFF ( 0)
#define SSPDMA_ICR_RORIC_BF_WID ( 1)
#define SSPDMA_ICR_RORIC_BF_MSK (0x00000001)
#define SSPDMA_ICR_RORIC_BF_DEF (0x00000000)

///< Clears the SSPRTINTR Interrupt
#define SSPDMA_ICR_RTIC_BF_OFF ( 1)
#define SSPDMA_ICR_RTIC_BF_WID ( 1)
#define SSPDMA_ICR_RTIC_BF_MSK (0x00000002)
#define SSPDMA_ICR_RTIC_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_ICR_UND_BF_OFF (16)
#define SSPDMA_ICR_UND_BF_WID (16)
#define SSPDMA_ICR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_ICR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPDMACR register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPDMACR
  * DMA Control Register
  */

typedef union {
  struct {
    uint32_t RXDMAE : 1;
    ///< Receive DMA Enable
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXDMAE : 1;
    ///< Transmit DMA Enable
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_dmacr_reg_t;

#define SSPDMA_DMACR_DEFAULT (0x00000000U)
#define SSPDMA_DMACR_RD_MASK (0xffff0003U)
#define SSPDMA_DMACR_WR_MASK (0x00000003U)


///< Receive DMA Enable
#define SSPDMA_DMACR_RXDMAE_BF_OFF ( 0)
#define SSPDMA_DMACR_RXDMAE_BF_WID ( 1)
#define SSPDMA_DMACR_RXDMAE_BF_MSK (0x00000001)
#define SSPDMA_DMACR_RXDMAE_BF_DEF (0x00000000)

///< Transmit DMA Enable
#define SSPDMA_DMACR_TXDMAE_BF_OFF ( 1)
#define SSPDMA_DMACR_TXDMAE_BF_WID ( 1)
#define SSPDMA_DMACR_TXDMAE_BF_MSK (0x00000002)
#define SSPDMA_DMACR_TXDMAE_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_DMACR_UND_BF_OFF (16)
#define SSPDMA_DMACR_UND_BF_WID (16)
#define SSPDMA_DMACR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_DMACR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPCSR register description at address offset 0x30
  *
  * Register default value:        0x0000000F
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPCSR
  * Chip Select Control Register
  */

typedef union {
  struct {
    uint32_t CSVALUE : 4;
    ///< Chip Select Value or Inactive Value depending on TYPE, SSP_CS[11:8]
    ///< If CSTYPE = 0 - The value in this bit is driven on SSP_CS.  Firmware
    ///< is responsible for controlling the state of the SSP_CS output.  If
    ///< CSTYPE = 1 - The value in this bit is ignored and the FSS output controls
    ///< the state of the SSP_CS output.  NOTE: Each SSP_CS output can have
    ///< different CSTYPE so some bits in this field could be actively used
    ///< and others ignored.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0xF"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t CSACTIVE : 2;
    ///< Active Chip Select:   Selects which SSP_CS output is the active one
    ///< 00 = SSP_CS[0]   01 = SSP_CS[1]   10 = SSP_CS[2]   11 = SSP_CS[3]
    ///< AccessType="RW/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t CSTYPE : 4;
    ///< Chip Select Type for SSP_CS[3:0]   If CSTYPE = 0; then SSP_CS == CSVALUE[x]
    ///< If CSTYPE = 1; then SSP_CS == FSSOUT  This field controls whether
    ///< the SSP_CS output bit is controlled by the Frame Sync, FSS, output
    ///< or the value written into the CSVALUE field.  Each SSP_CS output can
    ///< be controlled differently
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_csr_reg_t;

#define SSPDMA_CSR_DEFAULT (0x0000000fU)
#define SSPDMA_CSR_RD_MASK (0xffff0f6fU)
#define SSPDMA_CSR_WR_MASK (0x00000f6fU)


///< Chip Select Value or Inactive Value depending on TYPE, SSP_CS[11:8]
///< If CSTYPE = 0 - The value in this bit is driven on SSP_CS.  Firmware
///< is responsible for controlling the state of the SSP_CS output.  If
///< CSTYPE = 1 - The value in this bit is ignored and the FSS output controls
///< the state of the SSP_CS output.  NOTE: Each SSP_CS output can have
///< different CSTYPE so some bits in this field could be actively used
///< and others ignored.
#define SSPDMA_CSR_CSVAL_BF_OFF ( 0)
#define SSPDMA_CSR_CSVAL_BF_WID ( 4)
#define SSPDMA_CSR_CSVAL_BF_MSK (0x0000000F)
#define SSPDMA_CSR_CSVAL_BF_DEF (0x0000000F)

///< Active Chip Select:   Selects which SSP_CS output is the active one
///< 00 = SSP_CS[0]   01 = SSP_CS[1]   10 = SSP_CS[2]   11 = SSP_CS[3]
#define SSPDMA_CSR_CSACTIVE_BF_OFF ( 5)
#define SSPDMA_CSR_CSACTIVE_BF_WID ( 2)
#define SSPDMA_CSR_CSACTIVE_BF_MSK (0x00000060)
#define SSPDMA_CSR_CSACTIVE_BF_DEF (0x00000000)

///< Chip Select Type for SSP_CS[3:0]   If CSTYPE = 0; then SSP_CS == CSVALUE[x]
///< If CSTYPE = 1; then SSP_CS == FSSOUT  This field controls whether
///< the SSP_CS output bit is controlled by the Frame Sync, FSS, output
///< or the value written into the CSVALUE field.  Each SSP_CS output can
///< be controlled differently
#define SSPDMA_CSR_CSTYPE_BF_OFF ( 8)
#define SSPDMA_CSR_CSTYPE_BF_WID ( 4)
#define SSPDMA_CSR_CSTYPE_BF_MSK (0x00000F00)
#define SSPDMA_CSR_CSTYPE_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_CSR_UND_BF_OFF (16)
#define SSPDMA_CSR_UND_BF_WID (16)
#define SSPDMA_CSR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_CSR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPTCR register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPTCR
  * Test Control Register
  */

typedef union {
  struct {
    uint32_t ITEN : 1;
    ///< When this bit is 1, the PrimeCell SSP is placed in integration test
    ///< mode, otherwise it is in normal mode when set to 0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TESTFIFO : 1;
    ///< When this bit is 1, a write to SSPTDR writes data into the receive
    ///< FIFO, and reads from the SSPTDR reads data out of the transmit FIFO.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_tcr_reg_t;

#define SSPDMA_TCR_DEFAULT (0x00000000U)
#define SSPDMA_TCR_RD_MASK (0xffff0003U)
#define SSPDMA_TCR_WR_MASK (0x00000003U)


///< When this bit is 1, the PrimeCell SSP is placed in integration test
///< mode, otherwise it is in normal mode when set to 0.
#define SSPDMA_TCR_ITEN_BF_OFF ( 0)
#define SSPDMA_TCR_ITEN_BF_WID ( 1)
#define SSPDMA_TCR_ITEN_BF_MSK (0x00000001)
#define SSPDMA_TCR_ITEN_BF_DEF (0x00000000)

///< When this bit is 1, a write to SSPTDR writes data into the receive
///< FIFO, and reads from the SSPTDR reads data out of the transmit FIFO.
#define SSPDMA_TCR_TESTFIFO_BF_OFF ( 1)
#define SSPDMA_TCR_TESTFIFO_BF_WID ( 1)
#define SSPDMA_TCR_TESTFIFO_BF_MSK (0x00000002)
#define SSPDMA_TCR_TESTFIFO_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_TCR_UND_BF_OFF (16)
#define SSPDMA_TCR_UND_BF_WID (16)
#define SSPDMA_TCR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_TCR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPITIP register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPITIP
  * Integration test input register
  */

typedef union {
  struct {
    uint32_t SSPRXD : 1;
    ///< Reads return the value of the SSPRXD primary input.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t SSPFSSIN : 1;
    ///< Reads return the value of the SSPFSSIN primary input.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t SSPCLKIN : 1;
    ///< Reads return the value of the SSPCLKIN primary input.
    ///< AccessType="RO" BitOffset="2" ResetValue="0x0"
    uint32_t SSPRXDMACLR : 1;
    ///< Writes to this bit specify the value to be driven on the intra-chip
    ///< input, SSPRXDMACLR, in the integration test mode. Reads return the
    ///< value of SSPRXDMACLR at the output of the test multiplexor.
    ///< AccessType="RW/V/L" BitOffset="3" ResetValue="0x0"
    uint32_t SSPTXDMACLR : 1;
    ///< Writes to this bit specify the value to be driven on the intra-chip
    ///< input,  SSPTXDMACLR, in the integration test mode. Reads return the
    ///< value of SSPTXDMACLR at the output of the test multiplexor.
    ///< AccessType="RW/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_itip_reg_t;

#define SSPDMA_ITIP_DEFAULT (0x00000000U)
#define SSPDMA_ITIP_RD_MASK (0xffff001fU)
#define SSPDMA_ITIP_WR_MASK (0x00000018U)


///< Reads return the value of the SSPRXD primary input.
#define SSPDMA_ITIP_SSPRXD_BF_OFF ( 0)
#define SSPDMA_ITIP_SSPRXD_BF_WID ( 1)
#define SSPDMA_ITIP_SSPRXD_BF_MSK (0x00000001)
#define SSPDMA_ITIP_SSPRXD_BF_DEF (0x00000000)

///< Reads return the value of the SSPFSSIN primary input.
#define SSPDMA_ITIP_SSPFSSIN_BF_OFF ( 1)
#define SSPDMA_ITIP_SSPFSSIN_BF_WID ( 1)
#define SSPDMA_ITIP_SSPFSSIN_BF_MSK (0x00000002)
#define SSPDMA_ITIP_SSPFSSIN_BF_DEF (0x00000000)

///< Reads return the value of the SSPCLKIN primary input.
#define SSPDMA_ITIP_SSPCLKIN_BF_OFF ( 2)
#define SSPDMA_ITIP_SSPCLKIN_BF_WID ( 1)
#define SSPDMA_ITIP_SSPCLKIN_BF_MSK (0x00000004)
#define SSPDMA_ITIP_SSPCLKIN_BF_DEF (0x00000000)

///< Writes to this bit specify the value to be driven on the intra-chip
///< input, SSPRXDMACLR, in the integration test mode. Reads return the
///< value of SSPRXDMACLR at the output of the test multiplexor.
#define SSPDMA_ITIP_SSPRXDMACLR_BF_OFF ( 3)
#define SSPDMA_ITIP_SSPRXDMACLR_BF_WID ( 1)
#define SSPDMA_ITIP_SSPRXDMACLR_BF_MSK (0x00000008)
#define SSPDMA_ITIP_SSPRXDMACLR_BF_DEF (0x00000000)

///< Writes to this bit specify the value to be driven on the intra-chip
///< input,  SSPTXDMACLR, in the integration test mode. Reads return the
///< value of SSPTXDMACLR at the output of the test multiplexor.
#define SSPDMA_ITIP_SSPTXDMACLR_BF_OFF ( 4)
#define SSPDMA_ITIP_SSPTXDMACLR_BF_WID ( 1)
#define SSPDMA_ITIP_SSPTXDMACLR_BF_MSK (0x00000010)
#define SSPDMA_ITIP_SSPTXDMACLR_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_ITIP_UND_BF_OFF (16)
#define SSPDMA_ITIP_UND_BF_WID (16)
#define SSPDMA_ITIP_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_ITIP_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPITOP register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPITOP
  * Integration test output register
  */

typedef union {
  struct {
    uint32_t SSPTXD : 1;
    ///< Primary output. Writes specify the value to be driven on the SSPTXD
    ///< line in the integration test mode.
    ///< AccessType="RW/V/L" BitOffset="0" ResetValue="0x0"
    uint32_t SSPFSSOUT : 1;
    ///< Primary output. Writes specify the value to be driven on the SSPFSSOUT
    ///< line in the integration test mode.
    ///< AccessType="RW/V/L" BitOffset="1" ResetValue="0x0"
    uint32_t SSPCLKOUT : 1;
    ///< Primary output. Writes specify the value to be driven on the SSPCLKOUT
    ///< line in the integration test mode.
    ///< AccessType="RW/V/L" BitOffset="2" ResetValue="0x0"
    uint32_t NSSPCTLOE : 1;
    ///< Primary output. Writes specify the value to be driven on the nSSPCTLOE
    ///< line in the integration test mode.
    ///< AccessType="RW/V/L" BitOffset="3" ResetValue="0x0"
    uint32_t NSSPOE : 1;
    ///< Primary output. Writes specify the value to be driven on the nSSPOE
    ///< line in the integration test mode.
    ///< AccessType="RW/V/L" BitOffset="4" ResetValue="0x0"
    uint32_t SSPRORINTR : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPRORINTR line in the integration test mode - reads return the value
    ///< of SSPRORINTR at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="5" ResetValue="0x0"
    uint32_t SSPRTINTR : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPRTINTR line in the integration test mode - reads return the value
    ///< of SSPRTINTR at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="6" ResetValue="0x0"
    uint32_t SSPRXINTR : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPRXINTR line in the integration test mode - reads return the value
    ///< of SSPRXINTR at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="7" ResetValue="0x0"
    uint32_t SSPTXINTR : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPTXINTR line in the integration test mode - reads return the value
    ///< of SSPTXINTR at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="8" ResetValue="0x0"
    uint32_t SSPINTR : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPINTR line in the integration test mode - reads return the value
    ///< of SSPINTR at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="9" ResetValue="0x0"
    uint32_t SSPRXDMABREQ : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPRXDMABREQ line in the integration test mode - reads return the
    ///< value of SSPRXDMABREQ at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="10" ResetValue="0x0"
    uint32_t SSPRXDMASREQ : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPRXDMASREQ line in the integration test mode - reads return the
    ///< value of SSPRXDMASREQ at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="11" ResetValue="0x0"
    uint32_t SSPTXDMABREQ : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPTXDMABREQ line in the integration test mode - reads return the
    ///< value of SSPTXDMABREQ at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="12" ResetValue="0x0"
    uint32_t SSPTXDMAMREQ : 1;
    ///< Intra-chip output. - writes specify the value to be driven on the
    ///< SSPTXDMASREQ line in the integration test mode - reads return the
    ///< value of SSPTXDMASREQ at the output of the test multiplexor
    ///< AccessType="RW/V/L" BitOffset="13" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_itop_reg_t;

#define SSPDMA_ITOP_DEFAULT (0x00000000U)
#define SSPDMA_ITOP_RD_MASK (0xffff3fffU)
#define SSPDMA_ITOP_WR_MASK (0x00003fffU)


///< Primary output. Writes specify the value to be driven on the SSPTXD
///< line in the integration test mode.
#define SSPDMA_ITOP_SSPTXD_BF_OFF ( 0)
#define SSPDMA_ITOP_SSPTXD_BF_WID ( 1)
#define SSPDMA_ITOP_SSPTXD_BF_MSK (0x00000001)
#define SSPDMA_ITOP_SSPTXD_BF_DEF (0x00000000)

///< Primary output. Writes specify the value to be driven on the SSPFSSOUT
///< line in the integration test mode.
#define SSPDMA_ITOP_SSPFSSOUT_BF_OFF ( 1)
#define SSPDMA_ITOP_SSPFSSOUT_BF_WID ( 1)
#define SSPDMA_ITOP_SSPFSSOUT_BF_MSK (0x00000002)
#define SSPDMA_ITOP_SSPFSSOUT_BF_DEF (0x00000000)

///< Primary output. Writes specify the value to be driven on the SSPCLKOUT
///< line in the integration test mode.
#define SSPDMA_ITOP_SSPCLKOUT_BF_OFF ( 2)
#define SSPDMA_ITOP_SSPCLKOUT_BF_WID ( 1)
#define SSPDMA_ITOP_SSPCLKOUT_BF_MSK (0x00000004)
#define SSPDMA_ITOP_SSPCLKOUT_BF_DEF (0x00000000)

///< Primary output. Writes specify the value to be driven on the nSSPCTLOE
///< line in the integration test mode.
#define SSPDMA_ITOP_NSSPCTLOE_BF_OFF ( 3)
#define SSPDMA_ITOP_NSSPCTLOE_BF_WID ( 1)
#define SSPDMA_ITOP_NSSPCTLOE_BF_MSK (0x00000008)
#define SSPDMA_ITOP_NSSPCTLOE_BF_DEF (0x00000000)

///< Primary output. Writes specify the value to be driven on the nSSPOE
///< line in the integration test mode.
#define SSPDMA_ITOP_NSSPOE_BF_OFF ( 4)
#define SSPDMA_ITOP_NSSPOE_BF_WID ( 1)
#define SSPDMA_ITOP_NSSPOE_BF_MSK (0x00000010)
#define SSPDMA_ITOP_NSSPOE_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPRORINTR line in the integration test mode - reads return the value
///< of SSPRORINTR at the output of the test multiplexor
#define SSPDMA_ITOP_SSPRORINTR_BF_OFF ( 5)
#define SSPDMA_ITOP_SSPRORINTR_BF_WID ( 1)
#define SSPDMA_ITOP_SSPRORINTR_BF_MSK (0x00000020)
#define SSPDMA_ITOP_SSPRORINTR_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPRTINTR line in the integration test mode - reads return the value
///< of SSPRTINTR at the output of the test multiplexor
#define SSPDMA_ITOP_SSPRTINTR_BF_OFF ( 6)
#define SSPDMA_ITOP_SSPRTINTR_BF_WID ( 1)
#define SSPDMA_ITOP_SSPRTINTR_BF_MSK (0x00000040)
#define SSPDMA_ITOP_SSPRTINTR_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPRXINTR line in the integration test mode - reads return the value
///< of SSPRXINTR at the output of the test multiplexor
#define SSPDMA_ITOP_SSPRXINTR_BF_OFF ( 7)
#define SSPDMA_ITOP_SSPRXINTR_BF_WID ( 1)
#define SSPDMA_ITOP_SSPRXINTR_BF_MSK (0x00000080)
#define SSPDMA_ITOP_SSPRXINTR_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPTXINTR line in the integration test mode - reads return the value
///< of SSPTXINTR at the output of the test multiplexor
#define SSPDMA_ITOP_SSPTXINTR_BF_OFF ( 8)
#define SSPDMA_ITOP_SSPTXINTR_BF_WID ( 1)
#define SSPDMA_ITOP_SSPTXINTR_BF_MSK (0x00000100)
#define SSPDMA_ITOP_SSPTXINTR_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPINTR line in the integration test mode - reads return the value
///< of SSPINTR at the output of the test multiplexor
#define SSPDMA_ITOP_SSPINTR_BF_OFF ( 9)
#define SSPDMA_ITOP_SSPINTR_BF_WID ( 1)
#define SSPDMA_ITOP_SSPINTR_BF_MSK (0x00000200)
#define SSPDMA_ITOP_SSPINTR_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPRXDMABREQ line in the integration test mode - reads return the
///< value of SSPRXDMABREQ at the output of the test multiplexor
#define SSPDMA_ITOP_SSPRXDMABREQ_BF_OFF (10)
#define SSPDMA_ITOP_SSPRXDMABREQ_BF_WID ( 1)
#define SSPDMA_ITOP_SSPRXDMABREQ_BF_MSK (0x00000400)
#define SSPDMA_ITOP_SSPRXDMABREQ_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPRXDMASREQ line in the integration test mode - reads return the
///< value of SSPRXDMASREQ at the output of the test multiplexor
#define SSPDMA_ITOP_SSPRXDMASREQ_BF_OFF (11)
#define SSPDMA_ITOP_SSPRXDMASREQ_BF_WID ( 1)
#define SSPDMA_ITOP_SSPRXDMASREQ_BF_MSK (0x00000800)
#define SSPDMA_ITOP_SSPRXDMASREQ_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPTXDMABREQ line in the integration test mode - reads return the
///< value of SSPTXDMABREQ at the output of the test multiplexor
#define SSPDMA_ITOP_SSPTXDMABREQ_BF_OFF (12)
#define SSPDMA_ITOP_SSPTXDMABREQ_BF_WID ( 1)
#define SSPDMA_ITOP_SSPTXDMABREQ_BF_MSK (0x00001000)
#define SSPDMA_ITOP_SSPTXDMABREQ_BF_DEF (0x00000000)

///< Intra-chip output. - writes specify the value to be driven on the
///< SSPTXDMASREQ line in the integration test mode - reads return the
///< value of SSPTXDMASREQ at the output of the test multiplexor
#define SSPDMA_ITOP_SSPTXDMAMREQ_BF_OFF (13)
#define SSPDMA_ITOP_SSPTXDMAMREQ_BF_WID ( 1)
#define SSPDMA_ITOP_SSPTXDMAMREQ_BF_MSK (0x00002000)
#define SSPDMA_ITOP_SSPTXDMAMREQ_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_ITOP_UND_BF_OFF (16)
#define SSPDMA_ITOP_UND_BF_WID (16)
#define SSPDMA_ITOP_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_ITOP_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPTDR register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPTDR
  * Test data Register
  */

typedef union {
  struct {
    uint32_t DATA : 16;
    ///< When the TESTFIFO signal is asserted, data is written into the receive
    ///< FIFO and read out of the transmit FIFO.  NOTE: The access type of
    ///< this register is acutally RW/V2, but spec2rtl does not support this
    ///< type, so listed as RW/V instead.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_tdr_reg_t;

#define SSPDMA_TDR_DEFAULT (0x00000000U)
#define SSPDMA_TDR_RD_MASK (0xffffffffU)
#define SSPDMA_TDR_WR_MASK (0x0000ffffU)


///< When the TESTFIFO signal is asserted, data is written into the receive
///< FIFO and read out of the transmit FIFO.  NOTE: The access type of
///< this register is acutally RW/V2, but spec2rtl does not support this
///< type, so listed as RW/V instead.
#define SSPDMA_TDR_DATA_BF_OFF ( 0)
#define SSPDMA_TDR_DATA_BF_WID (16)
#define SSPDMA_TDR_DATA_BF_MSK (0x0000FFFF)
#define SSPDMA_TDR_DATA_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_TDR_UND_BF_OFF (16)
#define SSPDMA_TDR_UND_BF_WID (16)
#define SSPDMA_TDR_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_TDR_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPERIPHID0 register description at address offset 0xfe0
  *
  * Register default value:        0x00000022
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPeriphID0
  * SSP Peripheral ID0 Register
  */

typedef union {
  struct {
    uint32_t PARTNUMBER0 : 8;
    ///< PartNumber0: These bits read back as 8'h22
    ///< AccessType="RO" BitOffset="0" ResetValue="0x22"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_periphid0_reg_t;

#define SSPDMA_PERIPHID0_DEFAULT (0x00000022U)
#define SSPDMA_PERIPHID0_RD_MASK (0xffff00ffU)
#define SSPDMA_PERIPHID0_WR_MASK (0x00000000U)


///< PartNumber0: These bits read back as 8'h22
#define SSPDMA_PERIPHID0_PARTNUMBER0_BF_OFF ( 0)
#define SSPDMA_PERIPHID0_PARTNUMBER0_BF_WID ( 8)
#define SSPDMA_PERIPHID0_PARTNUMBER0_BF_MSK (0x000000FF)
#define SSPDMA_PERIPHID0_PARTNUMBER0_BF_DEF (0x00000022)

///< Undefined
#define SSPDMA_PERIPHID0_UND_BF_OFF (16)
#define SSPDMA_PERIPHID0_UND_BF_WID (16)
#define SSPDMA_PERIPHID0_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PERIPHID0_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPERIPHID1 register description at address offset 0xfe4
  *
  * Register default value:        0x00000010
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPeriphID1
  * SSP Peripheral ID1 Register
  */

typedef union {
  struct {
    uint32_t PARTNUMBER0 : 4;
    ///< PartNumber1: These bits read back as 4'h0
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t DESIGNER0 : 4;
    ///< Designer0: These bits read back as 4'h1
    ///< AccessType="RO" BitOffset="4" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_periphid1_reg_t;

#define SSPDMA_PERIPHID1_DEFAULT (0x00000010U)
#define SSPDMA_PERIPHID1_RD_MASK (0xffff00ffU)
#define SSPDMA_PERIPHID1_WR_MASK (0x00000000U)


///< PartNumber1: These bits read back as 4'h0
#define SSPDMA_PERIPHID1_PARTNUMBER0_BF_OFF ( 0)
#define SSPDMA_PERIPHID1_PARTNUMBER0_BF_WID ( 4)
#define SSPDMA_PERIPHID1_PARTNUMBER0_BF_MSK (0x0000000F)
#define SSPDMA_PERIPHID1_PARTNUMBER0_BF_DEF (0x00000000)

///< Designer0: These bits read back as 4'h1
#define SSPDMA_PERIPHID1_DESIGNER0_BF_OFF ( 4)
#define SSPDMA_PERIPHID1_DESIGNER0_BF_WID ( 4)
#define SSPDMA_PERIPHID1_DESIGNER0_BF_MSK (0x000000F0)
#define SSPDMA_PERIPHID1_DESIGNER0_BF_DEF (0x00000010)

///< Undefined
#define SSPDMA_PERIPHID1_UND_BF_OFF (16)
#define SSPDMA_PERIPHID1_UND_BF_WID (16)
#define SSPDMA_PERIPHID1_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PERIPHID1_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPERIPHID2 register description at address offset 0xfe8
  *
  * Register default value:        0x00000004
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPeriphID2
  * SSP Peripheral ID2 Register
  */

typedef union {
  struct {
    uint32_t DESIGNER1 : 4;
    ///< Designer1: These bits read back as 4'h4
    ///< AccessType="RO" BitOffset="0" ResetValue="0x4"
    uint32_t REVISION : 4;
    ///< Revision: These bits read back as 4'h0
    ///< AccessType="RO" BitOffset="4" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_periphid2_reg_t;

#define SSPDMA_PERIPHID2_DEFAULT (0x00000004U)
#define SSPDMA_PERIPHID2_RD_MASK (0xffff00ffU)
#define SSPDMA_PERIPHID2_WR_MASK (0x00000000U)


///< Designer1: These bits read back as 4'h4
#define SSPDMA_PERIPHID2_DESIGNER1_BF_OFF ( 0)
#define SSPDMA_PERIPHID2_DESIGNER1_BF_WID ( 4)
#define SSPDMA_PERIPHID2_DESIGNER1_BF_MSK (0x0000000F)
#define SSPDMA_PERIPHID2_DESIGNER1_BF_DEF (0x00000004)

///< Revision: These bits read back as 4'h0
#define SSPDMA_PERIPHID2_REVISION_BF_OFF ( 4)
#define SSPDMA_PERIPHID2_REVISION_BF_WID ( 4)
#define SSPDMA_PERIPHID2_REVISION_BF_MSK (0x000000F0)
#define SSPDMA_PERIPHID2_REVISION_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_PERIPHID2_UND_BF_OFF (16)
#define SSPDMA_PERIPHID2_UND_BF_WID (16)
#define SSPDMA_PERIPHID2_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PERIPHID2_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPERIPHID3 register description at address offset 0xfec
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPeriphID3
  * SSP Peripheral ID3 Register
  */

typedef union {
  struct {
    uint32_t CONFIGURATION : 8;
    ///< Configuration: These bits read back as 8'h0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_periphid3_reg_t;

#define SSPDMA_PERIPHID3_DEFAULT (0x00000000U)
#define SSPDMA_PERIPHID3_RD_MASK (0xffff00ffU)
#define SSPDMA_PERIPHID3_WR_MASK (0x00000000U)


///< Configuration: These bits read back as 8'h0.
#define SSPDMA_PERIPHID3_CFGURATION_BF_OFF ( 0)
#define SSPDMA_PERIPHID3_CFGURATION_BF_WID ( 8)
#define SSPDMA_PERIPHID3_CFGURATION_BF_MSK (0x000000FF)
#define SSPDMA_PERIPHID3_CFGURATION_BF_DEF (0x00000000)

///< Undefined
#define SSPDMA_PERIPHID3_UND_BF_OFF (16)
#define SSPDMA_PERIPHID3_UND_BF_WID (16)
#define SSPDMA_PERIPHID3_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PERIPHID3_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPCELLID0 register description at address offset 0xff0
  *
  * Register default value:        0x0000000D
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPCellID0
  * SSP CELL ID0 Register
  */

typedef union {
  struct {
    uint32_t SSPPCELLID0 : 8;
    ///< SSPPCellID0: These bits read back as 8'h0d.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xD"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_pcellid0_reg_t;

#define SSPDMA_PCELLID0_DEFAULT (0x0000000dU)
#define SSPDMA_PCELLID0_RD_MASK (0xffff00ffU)
#define SSPDMA_PCELLID0_WR_MASK (0x00000000U)


///< SSPPCellID0: These bits read back as 8'h0d.
#define SSPDMA_PCELLID0_SSPPCELLID0_BF_OFF ( 0)
#define SSPDMA_PCELLID0_SSPPCELLID0_BF_WID ( 8)
#define SSPDMA_PCELLID0_SSPPCELLID0_BF_MSK (0x000000FF)
#define SSPDMA_PCELLID0_SSPPCELLID0_BF_DEF (0x0000000D)

///< Undefined
#define SSPDMA_PCELLID0_UND_BF_OFF (16)
#define SSPDMA_PCELLID0_UND_BF_WID (16)
#define SSPDMA_PCELLID0_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PCELLID0_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPCELLID1 register description at address offset 0xff4
  *
  * Register default value:        0x000000F0
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPCellID1
  * SSP CELL ID1 Register
  */

typedef union {
  struct {
    uint32_t SSPPCELLID1 : 8;
    ///< SSPPCellID1: These bits read back as 8'hf0.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xF0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_pcellid1_reg_t;

#define SSPDMA_PCELLID1_DEFAULT (0x000000f0U)
#define SSPDMA_PCELLID1_RD_MASK (0xffff00ffU)
#define SSPDMA_PCELLID1_WR_MASK (0x00000000U)


///< SSPPCellID1: These bits read back as 8'hf0.
#define SSPDMA_PCELLID1_SSPPCELLID1_BF_OFF ( 0)
#define SSPDMA_PCELLID1_SSPPCELLID1_BF_WID ( 8)
#define SSPDMA_PCELLID1_SSPPCELLID1_BF_MSK (0x000000FF)
#define SSPDMA_PCELLID1_SSPPCELLID1_BF_DEF (0x000000F0)

///< Undefined
#define SSPDMA_PCELLID1_UND_BF_OFF (16)
#define SSPDMA_PCELLID1_UND_BF_WID (16)
#define SSPDMA_PCELLID1_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PCELLID1_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPCELLID2 register description at address offset 0xff8
  *
  * Register default value:        0x00000005
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPCellID2
  * SSP CELL ID2 Register
  */

typedef union {
  struct {
    uint32_t SSPPCELLID2 : 8;
    ///< SSPPCellID2: These bits read back as 8'h05.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_pcellid2_reg_t;

#define SSPDMA_PCELLID2_DEFAULT (0x00000005U)
#define SSPDMA_PCELLID2_RD_MASK (0xffff00ffU)
#define SSPDMA_PCELLID2_WR_MASK (0x00000000U)


///< SSPPCellID2: These bits read back as 8'h05.
#define SSPDMA_PCELLID2_SSPPCELLID2_BF_OFF ( 0)
#define SSPDMA_PCELLID2_SSPPCELLID2_BF_WID ( 8)
#define SSPDMA_PCELLID2_SSPPCELLID2_BF_MSK (0x000000FF)
#define SSPDMA_PCELLID2_SSPPCELLID2_BF_DEF (0x00000005)

///< Undefined
#define SSPDMA_PCELLID2_UND_BF_OFF (16)
#define SSPDMA_PCELLID2_UND_BF_WID (16)
#define SSPDMA_PCELLID2_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PCELLID2_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_SSP_SSPPCELLID3 register description at address offset 0xffc
  *
  * Register default value:        0x000000B1
  * Register full path in IP: periph_sspdma_com/reg/ssp/SSPPCellID3
  * SSP CELL ID3 Register
  */

typedef union {
  struct {
    uint32_t SSPPCELLID3 : 8;
    ///< SSPPCellID3: These bits read back as 8'hb1.
    ///< AccessType="RO" BitOffset="0" ResetValue="0xB1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t UND : 16;
    ///< Undefined
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_pcellid3_reg_t;

#define SSPDMA_PCELLID3_DEFAULT (0x000000b1U)
#define SSPDMA_PCELLID3_RD_MASK (0xffff00ffU)
#define SSPDMA_PCELLID3_WR_MASK (0x00000000U)


///< SSPPCellID3: These bits read back as 8'hb1.
#define SSPDMA_PCELLID3_SSPPCELLID3_BF_OFF ( 0)
#define SSPDMA_PCELLID3_SSPPCELLID3_BF_WID ( 8)
#define SSPDMA_PCELLID3_SSPPCELLID3_BF_MSK (0x000000FF)
#define SSPDMA_PCELLID3_SSPPCELLID3_BF_DEF (0x000000B1)

///< Undefined
#define SSPDMA_PCELLID3_UND_BF_OFF (16)
#define SSPDMA_PCELLID3_UND_BF_WID (16)
#define SSPDMA_PCELLID3_UND_BF_MSK (0xFFFF0000)
#define SSPDMA_PCELLID3_UND_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_CTL register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_ctl
  * SSP DMA Control Register
  */

typedef union {
  struct {
    uint32_t NUM_BYTES : 24;
    ///< Number of bytes to transfer in the DMA operation - 1.   For SSP reads,
    ///< this value should be <= 0xFF_FFFF   For SSP writes, this value should
    ///< be <= 0x1FF   The programmed value must have bits [1:0] = 11, as the
    ///< number of bytes to move must be a multiple of 4.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
    uint32_t RDWRN : 1;
    ///< Indicates whether the DMA operation is to be an SSP read or write.
    ///< Set to 1 for a read operation, or a movement from external flash to
    ///< an internal memory.  Set to 0 for a write operation, or a movement
    ///< to external flash.
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t DMA_EN : 1;
    ///< Set this bit to a 1 to start the DMA operation.   This bit can be
    ///< written to 1 at the same time as the other fields in this register
    ///< are provisioned.  Clear this bit back to 0 when DMA_DONE is indicated.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_ctl_reg_t;

#define SSPDMA_CTL_DEFAULT (0x00000000U)
#define SSPDMA_CTL_RD_MASK (0xc0ffffffU)
#define SSPDMA_CTL_WR_MASK (0xc0ffffffU)


///< Number of bytes to transfer in the DMA operation - 1.   For SSP reads,
///< this value should be <= 0xFF_FFFF   For SSP writes, this value should
///< be <= 0x1FF   The programmed value must have bits [1:0] = 11, as the
///< number of bytes to move must be a multiple of 4.
#define SSPDMA_CTL_NUM_BYTES_BF_OFF ( 0)
#define SSPDMA_CTL_NUM_BYTES_BF_WID (24)
#define SSPDMA_CTL_NUM_BYTES_BF_MSK (0x00FFFFFF)
#define SSPDMA_CTL_NUM_BYTES_BF_DEF (0x00000000)

///< Indicates whether the DMA operation is to be an SSP read or write.
///< Set to 1 for a read operation, or a movement from external flash to
///< an internal memory.  Set to 0 for a write operation, or a movement
///< to external flash.
#define SSPDMA_CTL_RDWRN_BF_OFF (30)
#define SSPDMA_CTL_RDWRN_BF_WID ( 1)
#define SSPDMA_CTL_RDWRN_BF_MSK (0x40000000)
#define SSPDMA_CTL_RDWRN_BF_DEF (0x00000000)

///< Set this bit to a 1 to start the DMA operation.   This bit can be
///< written to 1 at the same time as the other fields in this register
///< are provisioned.  Clear this bit back to 0 when DMA_DONE is indicated.
#define SSPDMA_CTL_EN_BF_OFF (31)
#define SSPDMA_CTL_EN_BF_WID ( 1)
#define SSPDMA_CTL_EN_BF_MSK (0x80000000)
#define SSPDMA_CTL_EN_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_CFG register description at address offset 0x1004
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_cfg
  * SSP DMA Config Register
  */

typedef union {
  struct {
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="0" ResetValue="None"
    uint32_t CRC_RVRS : 1;
    ///< Set this bit to a 1 to reverse the order of CRC bit calculation.
    ///< The CRC32 is calculated byte wise, and setting this field will reverse
    ///< the order of the bits as they are used in the calculation.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} sspdma_cfg_reg_t;

#define SSPDMA_CFG_DEFAULT (0x00000000U)
#define SSPDMA_CFG_RD_MASK (0x00000100U)
#define SSPDMA_CFG_WR_MASK (0x00000100U)


///< Set this bit to a 1 to reverse the order of CRC bit calculation.
///< The CRC32 is calculated byte wise, and setting this field will reverse
///< the order of the bits as they are used in the calculation.
#define SSPDMA_CFG_CRC_RVRS_BF_OFF ( 8)
#define SSPDMA_CFG_CRC_RVRS_BF_WID ( 1)
#define SSPDMA_CFG_CRC_RVRS_BF_MSK (0x00000100)
#define SSPDMA_CFG_CRC_RVRS_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_ADDR_LO register description at address offset 0x1008
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_addr_lo
  * AXI ADDR LO
  */

typedef union {
  struct {
    uint32_t ADDR_LO : 32;
    ///< The lower 32 bits of the source or destinaton AXI address for the
    ///< DMA operation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_addr_lo_reg_t;

#define SSPDMA_ADDR_LO_DEFAULT (0x00000000U)
#define SSPDMA_ADDR_LO_RD_MASK (0xffffffffU)
#define SSPDMA_ADDR_LO_WR_MASK (0xffffffffU)


///< The lower 32 bits of the source or destinaton AXI address for the
///< DMA operation.
#define SSPDMA_ADDR_LO_ADDR_LO_BF_OFF ( 0)
#define SSPDMA_ADDR_LO_ADDR_LO_BF_WID (32)
#define SSPDMA_ADDR_LO_ADDR_LO_BF_MSK (0xFFFFFFFF)
#define SSPDMA_ADDR_LO_ADDR_LO_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_ADDR_HI register description at address offset 0x100c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_addr_hi
  * AXI ADDR HI
  */

typedef union {
  struct {
    uint32_t ADDR_HI : 32;
    ///< The upper 32 bits of the source or destinaton AXI address for the
    ///< DMA operation.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_addr_hi_reg_t;

#define SSPDMA_ADDR_HI_DEFAULT (0x00000000U)
#define SSPDMA_ADDR_HI_RD_MASK (0xffffffffU)
#define SSPDMA_ADDR_HI_WR_MASK (0xffffffffU)


///< The upper 32 bits of the source or destinaton AXI address for the
///< DMA operation.
#define SSPDMA_ADDR_HI_ADDR_HI_BF_OFF ( 0)
#define SSPDMA_ADDR_HI_ADDR_HI_BF_WID (32)
#define SSPDMA_ADDR_HI_ADDR_HI_BF_MSK (0xFFFFFFFF)
#define SSPDMA_ADDR_HI_ADDR_HI_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_STATUS register description at address offset 0x1040
  *
  * Register default value:        0x03000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_status
  * SSP DMA Status Register
  */

typedef union {
  struct {
    uint32_t BYTES_MOVED : 24;
    ///< The number of bytes that have already been moved by the DMA
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BUS_SM_IDLE : 1;
    ///< Indicates that the APB/AXI bus state machine is in IDLE state. When
    ///< prematurely disabling the DMA engine, this bit must be polled until
    ///< it indicates IDLE before restarting DMA engine.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x1"
    uint32_t AXI_WR_IDLE : 1;
    ///< Indicates all outstanding writes on the AXI have completed.
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t DMA_DONE : 1;
    ///< Indicates that the DMA operation has completed. DMA_EN must be cleared
    ///< once this bit is set.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_stat_reg_t;

#define SSPDMA_STAT_DEFAULT (0x03000000U)
#define SSPDMA_STAT_RD_MASK (0x83ffffffU)
#define SSPDMA_STAT_WR_MASK (0x00000000U)


///< The number of bytes that have already been moved by the DMA
#define SSPDMA_STAT_BYTES_MOVED_BF_OFF ( 0)
#define SSPDMA_STAT_BYTES_MOVED_BF_WID (24)
#define SSPDMA_STAT_BYTES_MOVED_BF_MSK (0x00FFFFFF)
#define SSPDMA_STAT_BYTES_MOVED_BF_DEF (0x00000000)

///< Indicates that the APB/AXI bus state machine is in IDLE state. When
///< prematurely disabling the DMA engine, this bit must be polled until
///< it indicates IDLE before restarting DMA engine.
#define SSPDMA_STAT_BUS_SM_IDLE_BF_OFF (24)
#define SSPDMA_STAT_BUS_SM_IDLE_BF_WID ( 1)
#define SSPDMA_STAT_BUS_SM_IDLE_BF_MSK (0x01000000)
#define SSPDMA_STAT_BUS_SM_IDLE_BF_DEF (0x01000000)

///< Indicates all outstanding writes on the AXI have completed.
#define SSPDMA_STAT_AXI_WR_IDLE_BF_OFF (25)
#define SSPDMA_STAT_AXI_WR_IDLE_BF_WID ( 1)
#define SSPDMA_STAT_AXI_WR_IDLE_BF_MSK (0x02000000)
#define SSPDMA_STAT_AXI_WR_IDLE_BF_DEF (0x02000000)

///< Indicates that the DMA operation has completed. DMA_EN must be cleared
///< once this bit is set.
#define SSPDMA_STAT_DONE_BF_OFF (31)
#define SSPDMA_STAT_DONE_BF_WID ( 1)
#define SSPDMA_STAT_DONE_BF_MSK (0x80000000)
#define SSPDMA_STAT_DONE_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_CRC32 register description at address offset 0x1044
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_crc32
  * SSPDMA CRC32
  */

typedef union {
  struct {
    uint32_t CRC32 : 32;
    ///< During DMA read operations, a CRC32 value is calculated over all the
    ///< data moved by the DMA engine. This CRC32 algorithm is the same CRC32
    ///< used for Clause 4 MAC Ethernet.  Reading this value is completely
    ///< optional, and may be used to check the integrity of the moved data.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_crc32_reg_t;

#define SSPDMA_CRC32_DEFAULT (0x00000000U)
#define SSPDMA_CRC32_RD_MASK (0xffffffffU)
#define SSPDMA_CRC32_WR_MASK (0x00000000U)


///< During DMA read operations, a CRC32 value is calculated over all the
///< data moved by the DMA engine. This CRC32 algorithm is the same CRC32
///< used for Clause 4 MAC Ethernet.  Reading this value is completely
///< optional, and may be used to check the integrity of the moved data.
#define SSPDMA_CRC32_BF_OFF ( 0)
#define SSPDMA_CRC32_BF_WID (32)
#define SSPDMA_CRC32_BF_MSK (0xFFFFFFFF)
#define SSPDMA_CRC32_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_LVL_IRQ_STAT register description at address offset 0x1080
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_lvl_irq_stat
  * Level interrupt status
  */

typedef union {
  struct {
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RSV3 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RSV4 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMA_BAD_PARAM_IRQ : 1;
    ///< DMA was programmed with invalid parameters
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXSM_TIMEOUT_IRQ : 1;
    ///< RX Statemachine Timeout
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t SSPDMA_DONE_IRQ : 1;
    ///< SSPDMA Done
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RSV5 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RSV6 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_lvl_irq_stat_reg_t;

#define SSPDMA_LVL_IRQ_STAT_DEFAULT (0x00000000U)
#define SSPDMA_LVL_IRQ_STAT_RD_MASK (0xffffffffU)
#define SSPDMA_LVL_IRQ_STAT_WR_MASK (0x00000000U)


///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV0_BF_OFF ( 0)
#define SSPDMA_LVL_IRQ_STAT_RSV0_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV0_BF_MSK (0x00000001)
#define SSPDMA_LVL_IRQ_STAT_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV1_BF_OFF ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV1_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV1_BF_MSK (0x00000002)
#define SSPDMA_LVL_IRQ_STAT_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV2_BF_OFF ( 2)
#define SSPDMA_LVL_IRQ_STAT_RSV2_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV2_BF_MSK (0x00000004)
#define SSPDMA_LVL_IRQ_STAT_RSV2_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV3_BF_OFF ( 3)
#define SSPDMA_LVL_IRQ_STAT_RSV3_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV3_BF_MSK (0x00000008)
#define SSPDMA_LVL_IRQ_STAT_RSV3_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV4_BF_OFF ( 4)
#define SSPDMA_LVL_IRQ_STAT_RSV4_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV4_BF_MSK (0x00000010)
#define SSPDMA_LVL_IRQ_STAT_RSV4_BF_DEF (0x00000000)

///< DMA was programmed with invalid parameters
#define SSPDMA_LVL_IRQ_STAT_BAD_PARAM_IRQ_BF_OFF ( 5)
#define SSPDMA_LVL_IRQ_STAT_BAD_PARAM_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_BAD_PARAM_IRQ_BF_MSK (0x00000020)
#define SSPDMA_LVL_IRQ_STAT_BAD_PARAM_IRQ_BF_DEF (0x00000000)

///< RX Statemachine Timeout
#define SSPDMA_LVL_IRQ_STAT_RXSM_TIMEOUT_IRQ_BF_OFF ( 6)
#define SSPDMA_LVL_IRQ_STAT_RXSM_TIMEOUT_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RXSM_TIMEOUT_IRQ_BF_MSK (0x00000040)
#define SSPDMA_LVL_IRQ_STAT_RXSM_TIMEOUT_IRQ_BF_DEF (0x00000000)

///< SSPDMA Done
#define SSPDMA_LVL_IRQ_STAT_SSPDMA_DONE_IRQ_BF_OFF ( 7)
#define SSPDMA_LVL_IRQ_STAT_SSPDMA_DONE_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_SSPDMA_DONE_IRQ_BF_MSK (0x00000080)
#define SSPDMA_LVL_IRQ_STAT_SSPDMA_DONE_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV5_BF_OFF ( 8)
#define SSPDMA_LVL_IRQ_STAT_RSV5_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV5_BF_MSK (0x00000100)
#define SSPDMA_LVL_IRQ_STAT_RSV5_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_STAT_RSV6_BF_OFF ( 9)
#define SSPDMA_LVL_IRQ_STAT_RSV6_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_STAT_RSV6_BF_MSK (0x00000200)
#define SSPDMA_LVL_IRQ_STAT_RSV6_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_LVL_IRQ_STAT_UNUSED_BF_OFF (10)
#define SSPDMA_LVL_IRQ_STAT_UNUSED_BF_WID (22)
#define SSPDMA_LVL_IRQ_STAT_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_LVL_IRQ_STAT_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_LVL_IRQ_MASK register description at address offset 0x1084
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_lvl_irq_mask
  * level interrupt mask
  */

typedef union {
  struct {
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RSV3 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RSV4 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMA_BAD_PARAM_IRQ : 1;
    ///< DMA was programmed with invalid parameters
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXSM_TIMEOUT_IRQ : 1;
    ///< RX Statemachine Timeout
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SSPDMA_DONE_IRQ : 1;
    ///< SSPDMA Done
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RSV5 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RSV6 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_lvl_irq_mask_reg_t;

#define SSPDMA_LVL_IRQ_MASK_DEFAULT (0x00000000U)
#define SSPDMA_LVL_IRQ_MASK_RD_MASK (0xffffffffU)
#define SSPDMA_LVL_IRQ_MASK_WR_MASK (0x000000e0U)


///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV0_BF_OFF ( 0)
#define SSPDMA_LVL_IRQ_MASK_RSV0_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV0_BF_MSK (0x00000001)
#define SSPDMA_LVL_IRQ_MASK_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV1_BF_OFF ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV1_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV1_BF_MSK (0x00000002)
#define SSPDMA_LVL_IRQ_MASK_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV2_BF_OFF ( 2)
#define SSPDMA_LVL_IRQ_MASK_RSV2_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV2_BF_MSK (0x00000004)
#define SSPDMA_LVL_IRQ_MASK_RSV2_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV3_BF_OFF ( 3)
#define SSPDMA_LVL_IRQ_MASK_RSV3_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV3_BF_MSK (0x00000008)
#define SSPDMA_LVL_IRQ_MASK_RSV3_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV4_BF_OFF ( 4)
#define SSPDMA_LVL_IRQ_MASK_RSV4_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV4_BF_MSK (0x00000010)
#define SSPDMA_LVL_IRQ_MASK_RSV4_BF_DEF (0x00000000)

///< DMA was programmed with invalid parameters
#define SSPDMA_LVL_IRQ_MASK_BAD_PARAM_IRQ_BF_OFF ( 5)
#define SSPDMA_LVL_IRQ_MASK_BAD_PARAM_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_BAD_PARAM_IRQ_BF_MSK (0x00000020)
#define SSPDMA_LVL_IRQ_MASK_BAD_PARAM_IRQ_BF_DEF (0x00000000)

///< RX Statemachine Timeout
#define SSPDMA_LVL_IRQ_MASK_RXSM_TIMEOUT_IRQ_BF_OFF ( 6)
#define SSPDMA_LVL_IRQ_MASK_RXSM_TIMEOUT_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RXSM_TIMEOUT_IRQ_BF_MSK (0x00000040)
#define SSPDMA_LVL_IRQ_MASK_RXSM_TIMEOUT_IRQ_BF_DEF (0x00000000)

///< SSPDMA Done
#define SSPDMA_LVL_IRQ_MASK_SSPDMA_DONE_IRQ_BF_OFF ( 7)
#define SSPDMA_LVL_IRQ_MASK_SSPDMA_DONE_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_SSPDMA_DONE_IRQ_BF_MSK (0x00000080)
#define SSPDMA_LVL_IRQ_MASK_SSPDMA_DONE_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV5_BF_OFF ( 8)
#define SSPDMA_LVL_IRQ_MASK_RSV5_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV5_BF_MSK (0x00000100)
#define SSPDMA_LVL_IRQ_MASK_RSV5_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_MASK_RSV6_BF_OFF ( 9)
#define SSPDMA_LVL_IRQ_MASK_RSV6_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_MASK_RSV6_BF_MSK (0x00000200)
#define SSPDMA_LVL_IRQ_MASK_RSV6_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_LVL_IRQ_MASK_UNUSED_BF_OFF (10)
#define SSPDMA_LVL_IRQ_MASK_UNUSED_BF_WID (22)
#define SSPDMA_LVL_IRQ_MASK_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_LVL_IRQ_MASK_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_LVL_IRQ_INV register description at address offset 0x1088
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_lvl_irq_inv
  * Level interrupt polarity
  */

typedef union {
  struct {
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RSV3 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RSV4 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMA_BAD_PARAM_IRQ : 1;
    ///< DMA was programmed with invalid parameters
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RXSM_TIMEOUT_IRQ : 1;
    ///< RX Statemachine Timeout
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SSPDMA_DONE_IRQ : 1;
    ///< SSPDMA Done
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t RSV5 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RSV6 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_lvl_irq_inv_reg_t;

#define SSPDMA_LVL_IRQ_INV_DEFAULT (0x00000000U)
#define SSPDMA_LVL_IRQ_INV_RD_MASK (0xffffffffU)
#define SSPDMA_LVL_IRQ_INV_WR_MASK (0x000000e0U)


///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV0_BF_OFF ( 0)
#define SSPDMA_LVL_IRQ_INV_RSV0_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV0_BF_MSK (0x00000001)
#define SSPDMA_LVL_IRQ_INV_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV1_BF_OFF ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV1_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV1_BF_MSK (0x00000002)
#define SSPDMA_LVL_IRQ_INV_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV2_BF_OFF ( 2)
#define SSPDMA_LVL_IRQ_INV_RSV2_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV2_BF_MSK (0x00000004)
#define SSPDMA_LVL_IRQ_INV_RSV2_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV3_BF_OFF ( 3)
#define SSPDMA_LVL_IRQ_INV_RSV3_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV3_BF_MSK (0x00000008)
#define SSPDMA_LVL_IRQ_INV_RSV3_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV4_BF_OFF ( 4)
#define SSPDMA_LVL_IRQ_INV_RSV4_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV4_BF_MSK (0x00000010)
#define SSPDMA_LVL_IRQ_INV_RSV4_BF_DEF (0x00000000)

///< DMA was programmed with invalid parameters
#define SSPDMA_LVL_IRQ_INV_BAD_PARAM_IRQ_BF_OFF ( 5)
#define SSPDMA_LVL_IRQ_INV_BAD_PARAM_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_BAD_PARAM_IRQ_BF_MSK (0x00000020)
#define SSPDMA_LVL_IRQ_INV_BAD_PARAM_IRQ_BF_DEF (0x00000000)

///< RX Statemachine Timeout
#define SSPDMA_LVL_IRQ_INV_RXSM_TIMEOUT_IRQ_BF_OFF ( 6)
#define SSPDMA_LVL_IRQ_INV_RXSM_TIMEOUT_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RXSM_TIMEOUT_IRQ_BF_MSK (0x00000040)
#define SSPDMA_LVL_IRQ_INV_RXSM_TIMEOUT_IRQ_BF_DEF (0x00000000)

///< SSPDMA Done
#define SSPDMA_LVL_IRQ_INV_SSPDMA_DONE_IRQ_BF_OFF ( 7)
#define SSPDMA_LVL_IRQ_INV_SSPDMA_DONE_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_SSPDMA_DONE_IRQ_BF_MSK (0x00000080)
#define SSPDMA_LVL_IRQ_INV_SSPDMA_DONE_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV5_BF_OFF ( 8)
#define SSPDMA_LVL_IRQ_INV_RSV5_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV5_BF_MSK (0x00000100)
#define SSPDMA_LVL_IRQ_INV_RSV5_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_INV_RSV6_BF_OFF ( 9)
#define SSPDMA_LVL_IRQ_INV_RSV6_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_INV_RSV6_BF_MSK (0x00000200)
#define SSPDMA_LVL_IRQ_INV_RSV6_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_LVL_IRQ_INV_UNUSED_BF_OFF (10)
#define SSPDMA_LVL_IRQ_INV_UNUSED_BF_WID (22)
#define SSPDMA_LVL_IRQ_INV_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_LVL_IRQ_INV_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_LVL_IRQ_NOMASK register description at address offset 0x108c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_lvl_irq_nomask
  * Unmasked level interrupt status
  */

typedef union {
  struct {
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RSV3 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RSV4 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMA_BAD_PARAM_IRQ : 1;
    ///< DMA was programmed with invalid parameters
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXSM_TIMEOUT_IRQ : 1;
    ///< RX Statemachine Timeout
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t SSPDMA_DONE_IRQ : 1;
    ///< SSPDMA Done
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RSV5 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RSV6 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_lvl_irq_nomask_reg_t;

#define SSPDMA_LVL_IRQ_NOMASK_DEFAULT (0x00000000U)
#define SSPDMA_LVL_IRQ_NOMASK_RD_MASK (0xffffffffU)
#define SSPDMA_LVL_IRQ_NOMASK_WR_MASK (0x00000000U)


///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV0_BF_OFF ( 0)
#define SSPDMA_LVL_IRQ_NOMASK_RSV0_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV0_BF_MSK (0x00000001)
#define SSPDMA_LVL_IRQ_NOMASK_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV1_BF_OFF ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV1_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV1_BF_MSK (0x00000002)
#define SSPDMA_LVL_IRQ_NOMASK_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV2_BF_OFF ( 2)
#define SSPDMA_LVL_IRQ_NOMASK_RSV2_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV2_BF_MSK (0x00000004)
#define SSPDMA_LVL_IRQ_NOMASK_RSV2_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV3_BF_OFF ( 3)
#define SSPDMA_LVL_IRQ_NOMASK_RSV3_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV3_BF_MSK (0x00000008)
#define SSPDMA_LVL_IRQ_NOMASK_RSV3_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV4_BF_OFF ( 4)
#define SSPDMA_LVL_IRQ_NOMASK_RSV4_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV4_BF_MSK (0x00000010)
#define SSPDMA_LVL_IRQ_NOMASK_RSV4_BF_DEF (0x00000000)

///< DMA was programmed with invalid parameters
#define SSPDMA_LVL_IRQ_NOMASK_BAD_PARAM_IRQ_BF_OFF ( 5)
#define SSPDMA_LVL_IRQ_NOMASK_BAD_PARAM_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_BAD_PARAM_IRQ_BF_MSK (0x00000020)
#define SSPDMA_LVL_IRQ_NOMASK_BAD_PARAM_IRQ_BF_DEF (0x00000000)

///< RX Statemachine Timeout
#define SSPDMA_LVL_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_OFF ( 6)
#define SSPDMA_LVL_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_MSK (0x00000040)
#define SSPDMA_LVL_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_DEF (0x00000000)

///< SSPDMA Done
#define SSPDMA_LVL_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_OFF ( 7)
#define SSPDMA_LVL_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_MSK (0x00000080)
#define SSPDMA_LVL_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV5_BF_OFF ( 8)
#define SSPDMA_LVL_IRQ_NOMASK_RSV5_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV5_BF_MSK (0x00000100)
#define SSPDMA_LVL_IRQ_NOMASK_RSV5_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_LVL_IRQ_NOMASK_RSV6_BF_OFF ( 9)
#define SSPDMA_LVL_IRQ_NOMASK_RSV6_BF_WID ( 1)
#define SSPDMA_LVL_IRQ_NOMASK_RSV6_BF_MSK (0x00000200)
#define SSPDMA_LVL_IRQ_NOMASK_RSV6_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_LVL_IRQ_NOMASK_UNUSED_BF_OFF (10)
#define SSPDMA_LVL_IRQ_NOMASK_UNUSED_BF_WID (22)
#define SSPDMA_LVL_IRQ_NOMASK_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_LVL_IRQ_NOMASK_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_EDG_IRQ_STAT register description at address offset 0x1090
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_edg_irq_stat
  * Edge interrupt status
  */

typedef union {
  struct {
    uint32_t SSP_RT_IRQ : 1;
    ///< SSP RX Timeout
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t SSP_ROR_IRQ : 1;
    ///< SSP RX Overrun
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t SSP_TXF_IRQ : 1;
    ///< SSP TX FIFO has 4 or less bytes
    ///< AccessType="RW/1C/V" BitOffset="2" ResetValue="0x0"
    uint32_t SSP_RXF_IRQ : 1;
    ///< SSP RX FIFO has 4 or more bytes
    ///< AccessType="RW/1C/V" BitOffset="3" ResetValue="0x0"
    uint32_t RW_TO_SSP_IRQ : 1;
    ///< Read or Write occurred to SSP while DMA Enabled
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t AXI_WR_RESP_IRQ : 1;
    ///< AXI WR RESP Error
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t AXI_RD_RESP_IRQ : 1;
    ///< AXI RD RESP Error
    ///< AccessType="RW/1C/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_edg_irq_stat_reg_t;

#define SSPDMA_EDG_IRQ_STAT_DEFAULT (0x00000000U)
#define SSPDMA_EDG_IRQ_STAT_RD_MASK (0xffffffffU)
#define SSPDMA_EDG_IRQ_STAT_WR_MASK (0x0000031fU)


///< SSP RX Timeout
#define SSPDMA_EDG_IRQ_STAT_SSP_RT_IRQ_BF_OFF ( 0)
#define SSPDMA_EDG_IRQ_STAT_SSP_RT_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_SSP_RT_IRQ_BF_MSK (0x00000001)
#define SSPDMA_EDG_IRQ_STAT_SSP_RT_IRQ_BF_DEF (0x00000000)

///< SSP RX Overrun
#define SSPDMA_EDG_IRQ_STAT_SSP_ROR_IRQ_BF_OFF ( 1)
#define SSPDMA_EDG_IRQ_STAT_SSP_ROR_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_SSP_ROR_IRQ_BF_MSK (0x00000002)
#define SSPDMA_EDG_IRQ_STAT_SSP_ROR_IRQ_BF_DEF (0x00000000)

///< SSP TX FIFO has 4 or less bytes
#define SSPDMA_EDG_IRQ_STAT_SSP_TXF_IRQ_BF_OFF ( 2)
#define SSPDMA_EDG_IRQ_STAT_SSP_TXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_SSP_TXF_IRQ_BF_MSK (0x00000004)
#define SSPDMA_EDG_IRQ_STAT_SSP_TXF_IRQ_BF_DEF (0x00000000)

///< SSP RX FIFO has 4 or more bytes
#define SSPDMA_EDG_IRQ_STAT_SSP_RXF_IRQ_BF_OFF ( 3)
#define SSPDMA_EDG_IRQ_STAT_SSP_RXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_SSP_RXF_IRQ_BF_MSK (0x00000008)
#define SSPDMA_EDG_IRQ_STAT_SSP_RXF_IRQ_BF_DEF (0x00000000)

///< Read or Write occurred to SSP while DMA Enabled
#define SSPDMA_EDG_IRQ_STAT_RW_TO_SSP_IRQ_BF_OFF ( 4)
#define SSPDMA_EDG_IRQ_STAT_RW_TO_SSP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_RW_TO_SSP_IRQ_BF_MSK (0x00000010)
#define SSPDMA_EDG_IRQ_STAT_RW_TO_SSP_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_STAT_RSV0_BF_OFF ( 5)
#define SSPDMA_EDG_IRQ_STAT_RSV0_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_RSV0_BF_MSK (0x00000020)
#define SSPDMA_EDG_IRQ_STAT_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_STAT_RSV1_BF_OFF ( 6)
#define SSPDMA_EDG_IRQ_STAT_RSV1_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_RSV1_BF_MSK (0x00000040)
#define SSPDMA_EDG_IRQ_STAT_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_STAT_RSV2_BF_OFF ( 7)
#define SSPDMA_EDG_IRQ_STAT_RSV2_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_RSV2_BF_MSK (0x00000080)
#define SSPDMA_EDG_IRQ_STAT_RSV2_BF_DEF (0x00000000)

///< AXI WR RESP Error
#define SSPDMA_EDG_IRQ_STAT_AXI_WR_RESP_IRQ_BF_OFF ( 8)
#define SSPDMA_EDG_IRQ_STAT_AXI_WR_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_AXI_WR_RESP_IRQ_BF_MSK (0x00000100)
#define SSPDMA_EDG_IRQ_STAT_AXI_WR_RESP_IRQ_BF_DEF (0x00000000)

///< AXI RD RESP Error
#define SSPDMA_EDG_IRQ_STAT_AXI_RD_RESP_IRQ_BF_OFF ( 9)
#define SSPDMA_EDG_IRQ_STAT_AXI_RD_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_STAT_AXI_RD_RESP_IRQ_BF_MSK (0x00000200)
#define SSPDMA_EDG_IRQ_STAT_AXI_RD_RESP_IRQ_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_EDG_IRQ_STAT_UNUSED_BF_OFF (10)
#define SSPDMA_EDG_IRQ_STAT_UNUSED_BF_WID (22)
#define SSPDMA_EDG_IRQ_STAT_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_EDG_IRQ_STAT_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_EDG_IRQ_MASK register description at address offset 0x1094
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_edg_irq_mask
  * Edge interrupt mask
  */

typedef union {
  struct {
    uint32_t SSP_RT_IRQ : 1;
    ///< SSP RX Timeout
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SSP_ROR_IRQ : 1;
    ///< SSP RX Overrun
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SSP_TXF_IRQ : 1;
    ///< SSP TX FIFO has 4 or less bytes
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SSP_RXF_IRQ : 1;
    ///< SSP RX FIFO has 4 or more bytes
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RW_TO_SSP_IRQ : 1;
    ///< Read or Write occurred to SSP while DMA Enabled
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t AXI_WR_RESP_IRQ : 1;
    ///< AXI WR RESP Error
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t AXI_RD_RESP_IRQ : 1;
    ///< AXI RD RESP Error
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_edg_irq_mask_reg_t;

#define SSPDMA_EDG_IRQ_MASK_DEFAULT (0x00000000U)
#define SSPDMA_EDG_IRQ_MASK_RD_MASK (0xffffffffU)
#define SSPDMA_EDG_IRQ_MASK_WR_MASK (0x0000031fU)


///< SSP RX Timeout
#define SSPDMA_EDG_IRQ_MASK_SSP_RT_IRQ_BF_OFF ( 0)
#define SSPDMA_EDG_IRQ_MASK_SSP_RT_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_SSP_RT_IRQ_BF_MSK (0x00000001)
#define SSPDMA_EDG_IRQ_MASK_SSP_RT_IRQ_BF_DEF (0x00000000)

///< SSP RX Overrun
#define SSPDMA_EDG_IRQ_MASK_SSP_ROR_IRQ_BF_OFF ( 1)
#define SSPDMA_EDG_IRQ_MASK_SSP_ROR_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_SSP_ROR_IRQ_BF_MSK (0x00000002)
#define SSPDMA_EDG_IRQ_MASK_SSP_ROR_IRQ_BF_DEF (0x00000000)

///< SSP TX FIFO has 4 or less bytes
#define SSPDMA_EDG_IRQ_MASK_SSP_TXF_IRQ_BF_OFF ( 2)
#define SSPDMA_EDG_IRQ_MASK_SSP_TXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_SSP_TXF_IRQ_BF_MSK (0x00000004)
#define SSPDMA_EDG_IRQ_MASK_SSP_TXF_IRQ_BF_DEF (0x00000000)

///< SSP RX FIFO has 4 or more bytes
#define SSPDMA_EDG_IRQ_MASK_SSP_RXF_IRQ_BF_OFF ( 3)
#define SSPDMA_EDG_IRQ_MASK_SSP_RXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_SSP_RXF_IRQ_BF_MSK (0x00000008)
#define SSPDMA_EDG_IRQ_MASK_SSP_RXF_IRQ_BF_DEF (0x00000000)

///< Read or Write occurred to SSP while DMA Enabled
#define SSPDMA_EDG_IRQ_MASK_RW_TO_SSP_IRQ_BF_OFF ( 4)
#define SSPDMA_EDG_IRQ_MASK_RW_TO_SSP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_RW_TO_SSP_IRQ_BF_MSK (0x00000010)
#define SSPDMA_EDG_IRQ_MASK_RW_TO_SSP_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_MASK_RSV0_BF_OFF ( 5)
#define SSPDMA_EDG_IRQ_MASK_RSV0_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_RSV0_BF_MSK (0x00000020)
#define SSPDMA_EDG_IRQ_MASK_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_MASK_RSV1_BF_OFF ( 6)
#define SSPDMA_EDG_IRQ_MASK_RSV1_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_RSV1_BF_MSK (0x00000040)
#define SSPDMA_EDG_IRQ_MASK_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_MASK_RSV2_BF_OFF ( 7)
#define SSPDMA_EDG_IRQ_MASK_RSV2_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_RSV2_BF_MSK (0x00000080)
#define SSPDMA_EDG_IRQ_MASK_RSV2_BF_DEF (0x00000000)

///< AXI WR RESP Error
#define SSPDMA_EDG_IRQ_MASK_AXI_WR_RESP_IRQ_BF_OFF ( 8)
#define SSPDMA_EDG_IRQ_MASK_AXI_WR_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_AXI_WR_RESP_IRQ_BF_MSK (0x00000100)
#define SSPDMA_EDG_IRQ_MASK_AXI_WR_RESP_IRQ_BF_DEF (0x00000000)

///< AXI RD RESP Error
#define SSPDMA_EDG_IRQ_MASK_AXI_RD_RESP_IRQ_BF_OFF ( 9)
#define SSPDMA_EDG_IRQ_MASK_AXI_RD_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_MASK_AXI_RD_RESP_IRQ_BF_MSK (0x00000200)
#define SSPDMA_EDG_IRQ_MASK_AXI_RD_RESP_IRQ_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_EDG_IRQ_MASK_UNUSED_BF_OFF (10)
#define SSPDMA_EDG_IRQ_MASK_UNUSED_BF_WID (22)
#define SSPDMA_EDG_IRQ_MASK_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_EDG_IRQ_MASK_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_EDG_IRQ_INV register description at address offset 0x1098
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_edg_irq_inv
  * Edge interrupt polarity
  */

typedef union {
  struct {
    uint32_t SSP_RT_IRQ : 1;
    ///< SSP RX Timeout
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SSP_ROR_IRQ : 1;
    ///< SSP RX Overrun
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SSP_TXF_IRQ : 1;
    ///< SSP TX FIFO has 4 or less bytes
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SSP_RXF_IRQ : 1;
    ///< SSP RX FIFO has 4 or more bytes
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RW_TO_SSP_IRQ : 1;
    ///< Read or Write occurred to SSP while DMA Enabled
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t AXI_WR_RESP_IRQ : 1;
    ///< AXI WR RESP Error
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t AXI_RD_RESP_IRQ : 1;
    ///< AXI RD RESP Error
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_edg_irq_inv_reg_t;

#define SSPDMA_EDG_IRQ_INV_DEFAULT (0x00000000U)
#define SSPDMA_EDG_IRQ_INV_RD_MASK (0xffffffffU)
#define SSPDMA_EDG_IRQ_INV_WR_MASK (0x0000031fU)


///< SSP RX Timeout
#define SSPDMA_EDG_IRQ_INV_SSP_RT_IRQ_BF_OFF ( 0)
#define SSPDMA_EDG_IRQ_INV_SSP_RT_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_SSP_RT_IRQ_BF_MSK (0x00000001)
#define SSPDMA_EDG_IRQ_INV_SSP_RT_IRQ_BF_DEF (0x00000000)

///< SSP RX Overrun
#define SSPDMA_EDG_IRQ_INV_SSP_ROR_IRQ_BF_OFF ( 1)
#define SSPDMA_EDG_IRQ_INV_SSP_ROR_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_SSP_ROR_IRQ_BF_MSK (0x00000002)
#define SSPDMA_EDG_IRQ_INV_SSP_ROR_IRQ_BF_DEF (0x00000000)

///< SSP TX FIFO has 4 or less bytes
#define SSPDMA_EDG_IRQ_INV_SSP_TXF_IRQ_BF_OFF ( 2)
#define SSPDMA_EDG_IRQ_INV_SSP_TXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_SSP_TXF_IRQ_BF_MSK (0x00000004)
#define SSPDMA_EDG_IRQ_INV_SSP_TXF_IRQ_BF_DEF (0x00000000)

///< SSP RX FIFO has 4 or more bytes
#define SSPDMA_EDG_IRQ_INV_SSP_RXF_IRQ_BF_OFF ( 3)
#define SSPDMA_EDG_IRQ_INV_SSP_RXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_SSP_RXF_IRQ_BF_MSK (0x00000008)
#define SSPDMA_EDG_IRQ_INV_SSP_RXF_IRQ_BF_DEF (0x00000000)

///< Read or Write occurred to SSP while DMA Enabled
#define SSPDMA_EDG_IRQ_INV_RW_TO_SSP_IRQ_BF_OFF ( 4)
#define SSPDMA_EDG_IRQ_INV_RW_TO_SSP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_RW_TO_SSP_IRQ_BF_MSK (0x00000010)
#define SSPDMA_EDG_IRQ_INV_RW_TO_SSP_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_INV_RSV0_BF_OFF ( 5)
#define SSPDMA_EDG_IRQ_INV_RSV0_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_RSV0_BF_MSK (0x00000020)
#define SSPDMA_EDG_IRQ_INV_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_INV_RSV1_BF_OFF ( 6)
#define SSPDMA_EDG_IRQ_INV_RSV1_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_RSV1_BF_MSK (0x00000040)
#define SSPDMA_EDG_IRQ_INV_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_INV_RSV2_BF_OFF ( 7)
#define SSPDMA_EDG_IRQ_INV_RSV2_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_RSV2_BF_MSK (0x00000080)
#define SSPDMA_EDG_IRQ_INV_RSV2_BF_DEF (0x00000000)

///< AXI WR RESP Error
#define SSPDMA_EDG_IRQ_INV_AXI_WR_RESP_IRQ_BF_OFF ( 8)
#define SSPDMA_EDG_IRQ_INV_AXI_WR_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_AXI_WR_RESP_IRQ_BF_MSK (0x00000100)
#define SSPDMA_EDG_IRQ_INV_AXI_WR_RESP_IRQ_BF_DEF (0x00000000)

///< AXI RD RESP Error
#define SSPDMA_EDG_IRQ_INV_AXI_RD_RESP_IRQ_BF_OFF ( 9)
#define SSPDMA_EDG_IRQ_INV_AXI_RD_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_INV_AXI_RD_RESP_IRQ_BF_MSK (0x00000200)
#define SSPDMA_EDG_IRQ_INV_AXI_RD_RESP_IRQ_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_EDG_IRQ_INV_UNUSED_BF_OFF (10)
#define SSPDMA_EDG_IRQ_INV_UNUSED_BF_WID (22)
#define SSPDMA_EDG_IRQ_INV_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_EDG_IRQ_INV_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_EDG_IRQ_NOMASK register description at address offset 0x109c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_edg_irq_nomask
  * Unmasked level interrupt status
  */

typedef union {
  struct {
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t RSV3 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RSV4 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMA_BAD_PARAM_IRQ : 1;
    ///< DMA was programmed with invalid parameters
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RXSM_TIMEOUT_IRQ : 1;
    ///< RX Statemachine Timeout
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t SSPDMA_DONE_IRQ : 1;
    ///< SSPDMA Done
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t RSV5 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RSV6 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_edg_irq_nomask_reg_t;

#define SSPDMA_EDG_IRQ_NOMASK_DEFAULT (0x00000000U)
#define SSPDMA_EDG_IRQ_NOMASK_RD_MASK (0xffffffffU)
#define SSPDMA_EDG_IRQ_NOMASK_WR_MASK (0x00000000U)


///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV0_BF_OFF ( 0)
#define SSPDMA_EDG_IRQ_NOMASK_RSV0_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV0_BF_MSK (0x00000001)
#define SSPDMA_EDG_IRQ_NOMASK_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV1_BF_OFF ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV1_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV1_BF_MSK (0x00000002)
#define SSPDMA_EDG_IRQ_NOMASK_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV2_BF_OFF ( 2)
#define SSPDMA_EDG_IRQ_NOMASK_RSV2_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV2_BF_MSK (0x00000004)
#define SSPDMA_EDG_IRQ_NOMASK_RSV2_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV3_BF_OFF ( 3)
#define SSPDMA_EDG_IRQ_NOMASK_RSV3_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV3_BF_MSK (0x00000008)
#define SSPDMA_EDG_IRQ_NOMASK_RSV3_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV4_BF_OFF ( 4)
#define SSPDMA_EDG_IRQ_NOMASK_RSV4_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV4_BF_MSK (0x00000010)
#define SSPDMA_EDG_IRQ_NOMASK_RSV4_BF_DEF (0x00000000)

///< DMA was programmed with invalid parameters
#define SSPDMA_EDG_IRQ_NOMASK_BAD_PARAM_IRQ_BF_OFF ( 5)
#define SSPDMA_EDG_IRQ_NOMASK_BAD_PARAM_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_BAD_PARAM_IRQ_BF_MSK (0x00000020)
#define SSPDMA_EDG_IRQ_NOMASK_BAD_PARAM_IRQ_BF_DEF (0x00000000)

///< RX Statemachine Timeout
#define SSPDMA_EDG_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_OFF ( 6)
#define SSPDMA_EDG_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_MSK (0x00000040)
#define SSPDMA_EDG_IRQ_NOMASK_RXSM_TIMEOUT_IRQ_BF_DEF (0x00000000)

///< SSPDMA Done
#define SSPDMA_EDG_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_OFF ( 7)
#define SSPDMA_EDG_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_MSK (0x00000080)
#define SSPDMA_EDG_IRQ_NOMASK_SSPDMA_DONE_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV5_BF_OFF ( 8)
#define SSPDMA_EDG_IRQ_NOMASK_RSV5_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV5_BF_MSK (0x00000100)
#define SSPDMA_EDG_IRQ_NOMASK_RSV5_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_NOMASK_RSV6_BF_OFF ( 9)
#define SSPDMA_EDG_IRQ_NOMASK_RSV6_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_NOMASK_RSV6_BF_MSK (0x00000200)
#define SSPDMA_EDG_IRQ_NOMASK_RSV6_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_EDG_IRQ_NOMASK_UNUSED_BF_OFF (10)
#define SSPDMA_EDG_IRQ_NOMASK_UNUSED_BF_WID (22)
#define SSPDMA_EDG_IRQ_NOMASK_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_EDG_IRQ_NOMASK_UNUSED_BF_DEF (0x00000000)


/** @brief PERIPH_SSPDMA_COM_REG_DMA_SSPDMA_EDG_IRQ_RAW register description at address offset 0x1100
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_sspdma_com/reg/dma/SSPDMA_edg_irq_raw
  * Raw status of edge interrupt
  */

typedef union {
  struct {
    uint32_t SSP_RT_IRQ : 1;
    ///< SSP RX Timeout
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t SSP_ROR_IRQ : 1;
    ///< SSP RX Overrun
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t SSP_TXF_IRQ : 1;
    ///< SSP TX FIFO has 4 or less bytes
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t SSP_RXF_IRQ : 1;
    ///< SSP RX FIFO has 4 or more bytes
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t RW_TO_SSP_IRQ : 1;
    ///< Read or Write occurred to SSP while DMA Enabled
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RSV0 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t RSV1 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t RSV2 : 1;
    ///< RESERVED
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t AXI_WR_RESP_IRQ : 1;
    ///< AXI WR RESP Error
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t AXI_RD_RESP_IRQ : 1;
    ///< AXI RD RESP Error
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t UNUSED : 22;
    ///< UNUSED
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
  } ;
  uint32_t value;
} sspdma_edg_irq_raw_reg_t;

#define SSPDMA_EDG_IRQ_RAW_DEFAULT (0x00000000U)
#define SSPDMA_EDG_IRQ_RAW_RD_MASK (0xffffffffU)
#define SSPDMA_EDG_IRQ_RAW_WR_MASK (0x00000000U)


///< SSP RX Timeout
#define SSPDMA_EDG_IRQ_RAW_SSP_RT_IRQ_BF_OFF ( 0)
#define SSPDMA_EDG_IRQ_RAW_SSP_RT_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_SSP_RT_IRQ_BF_MSK (0x00000001)
#define SSPDMA_EDG_IRQ_RAW_SSP_RT_IRQ_BF_DEF (0x00000000)

///< SSP RX Overrun
#define SSPDMA_EDG_IRQ_RAW_SSP_ROR_IRQ_BF_OFF ( 1)
#define SSPDMA_EDG_IRQ_RAW_SSP_ROR_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_SSP_ROR_IRQ_BF_MSK (0x00000002)
#define SSPDMA_EDG_IRQ_RAW_SSP_ROR_IRQ_BF_DEF (0x00000000)

///< SSP TX FIFO has 4 or less bytes
#define SSPDMA_EDG_IRQ_RAW_SSP_TXF_IRQ_BF_OFF ( 2)
#define SSPDMA_EDG_IRQ_RAW_SSP_TXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_SSP_TXF_IRQ_BF_MSK (0x00000004)
#define SSPDMA_EDG_IRQ_RAW_SSP_TXF_IRQ_BF_DEF (0x00000000)

///< SSP RX FIFO has 4 or more bytes
#define SSPDMA_EDG_IRQ_RAW_SSP_RXF_IRQ_BF_OFF ( 3)
#define SSPDMA_EDG_IRQ_RAW_SSP_RXF_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_SSP_RXF_IRQ_BF_MSK (0x00000008)
#define SSPDMA_EDG_IRQ_RAW_SSP_RXF_IRQ_BF_DEF (0x00000000)

///< Read or Write occurred to SSP while DMA Enabled
#define SSPDMA_EDG_IRQ_RAW_RW_TO_SSP_IRQ_BF_OFF ( 4)
#define SSPDMA_EDG_IRQ_RAW_RW_TO_SSP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_RW_TO_SSP_IRQ_BF_MSK (0x00000010)
#define SSPDMA_EDG_IRQ_RAW_RW_TO_SSP_IRQ_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_RAW_RSV0_BF_OFF ( 5)
#define SSPDMA_EDG_IRQ_RAW_RSV0_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_RSV0_BF_MSK (0x00000020)
#define SSPDMA_EDG_IRQ_RAW_RSV0_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_RAW_RSV1_BF_OFF ( 6)
#define SSPDMA_EDG_IRQ_RAW_RSV1_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_RSV1_BF_MSK (0x00000040)
#define SSPDMA_EDG_IRQ_RAW_RSV1_BF_DEF (0x00000000)

///< RESERVED
#define SSPDMA_EDG_IRQ_RAW_RSV2_BF_OFF ( 7)
#define SSPDMA_EDG_IRQ_RAW_RSV2_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_RSV2_BF_MSK (0x00000080)
#define SSPDMA_EDG_IRQ_RAW_RSV2_BF_DEF (0x00000000)

///< AXI WR RESP Error
#define SSPDMA_EDG_IRQ_RAW_AXI_WR_RESP_IRQ_BF_OFF ( 8)
#define SSPDMA_EDG_IRQ_RAW_AXI_WR_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_AXI_WR_RESP_IRQ_BF_MSK (0x00000100)
#define SSPDMA_EDG_IRQ_RAW_AXI_WR_RESP_IRQ_BF_DEF (0x00000000)

///< AXI RD RESP Error
#define SSPDMA_EDG_IRQ_RAW_AXI_RD_RESP_IRQ_BF_OFF ( 9)
#define SSPDMA_EDG_IRQ_RAW_AXI_RD_RESP_IRQ_BF_WID ( 1)
#define SSPDMA_EDG_IRQ_RAW_AXI_RD_RESP_IRQ_BF_MSK (0x00000200)
#define SSPDMA_EDG_IRQ_RAW_AXI_RD_RESP_IRQ_BF_DEF (0x00000000)

///< UNUSED
#define SSPDMA_EDG_IRQ_RAW_UNUSED_BF_OFF (10)
#define SSPDMA_EDG_IRQ_RAW_UNUSED_BF_WID (22)
#define SSPDMA_EDG_IRQ_RAW_UNUSED_BF_MSK (0xFFFFFC00)
#define SSPDMA_EDG_IRQ_RAW_UNUSED_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define SSPDMA_CR0_REG ((sspdma_cr0_reg_t*) SSPDMA_CR0_ADR)
#define SSPDMA_CR1_REG ((sspdma_cr1_reg_t*) SSPDMA_CR1_ADR)
#define SSPDMA_DR_REG ((sspdma_dr_reg_t*) SSPDMA_DR_ADR)
#define SSPDMA_SR_REG ((sspdma_sr_reg_t*) SSPDMA_SR_ADR)
#define SSPDMA_CPSR_REG ((sspdma_cpsr_reg_t*) SSPDMA_CPSR_ADR)
#define SSPDMA_IMSC_REG ((sspdma_imsc_reg_t*) SSPDMA_IMSC_ADR)
#define SSPDMA_RIS_REG ((sspdma_ris_reg_t*) SSPDMA_RIS_ADR)
#define SSPDMA_MIS_REG ((sspdma_mis_reg_t*) SSPDMA_MIS_ADR)
#define SSPDMA_ICR_REG ((sspdma_icr_reg_t*) SSPDMA_ICR_ADR)
#define SSPDMA_DMACR_REG ((sspdma_dmacr_reg_t*) SSPDMA_DMACR_ADR)
#define SSPDMA_CSR_REG ((sspdma_csr_reg_t*) SSPDMA_CSR_ADR)
#define SSPDMA_TCR_REG ((sspdma_tcr_reg_t*) SSPDMA_TCR_ADR)
#define SSPDMA_ITIP_REG ((sspdma_itip_reg_t*) SSPDMA_ITIP_ADR)
#define SSPDMA_ITOP_REG ((sspdma_itop_reg_t*) SSPDMA_ITOP_ADR)
#define SSPDMA_TDR_REG ((sspdma_tdr_reg_t*) SSPDMA_TDR_ADR)
#define SSPDMA_PERIPHID0_REG ((sspdma_periphid0_reg_t*) SSPDMA_PERIPHID0_ADR)
#define SSPDMA_PERIPHID1_REG ((sspdma_periphid1_reg_t*) SSPDMA_PERIPHID1_ADR)
#define SSPDMA_PERIPHID2_REG ((sspdma_periphid2_reg_t*) SSPDMA_PERIPHID2_ADR)
#define SSPDMA_PERIPHID3_REG ((sspdma_periphid3_reg_t*) SSPDMA_PERIPHID3_ADR)
#define SSPDMA_PCELLID0_REG ((sspdma_pcellid0_reg_t*) SSPDMA_PCELLID0_ADR)
#define SSPDMA_PCELLID1_REG ((sspdma_pcellid1_reg_t*) SSPDMA_PCELLID1_ADR)
#define SSPDMA_PCELLID2_REG ((sspdma_pcellid2_reg_t*) SSPDMA_PCELLID2_ADR)
#define SSPDMA_PCELLID3_REG ((sspdma_pcellid3_reg_t*) SSPDMA_PCELLID3_ADR)
#define SSPDMA_CTL_REG ((sspdma_ctl_reg_t*) SSPDMA_CTL_ADR)
#define SSPDMA_CFG_REG ((sspdma_cfg_reg_t*) SSPDMA_CFG_ADR)
#define SSPDMA_ADDR_LO_REG ((sspdma_addr_lo_reg_t*) SSPDMA_ADDR_LO_ADR)
#define SSPDMA_ADDR_HI_REG ((sspdma_addr_hi_reg_t*) SSPDMA_ADDR_HI_ADR)
#define SSPDMA_STAT_REG ((sspdma_stat_reg_t*) SSPDMA_STAT_ADR)
#define SSPDMA_CRC32_REG ((sspdma_crc32_reg_t*) SSPDMA_CRC32_ADR)
#define SSPDMA_LVL_IRQ_STAT_REG ((sspdma_lvl_irq_stat_reg_t*) SSPDMA_LVL_IRQ_STAT_ADR)
#define SSPDMA_LVL_IRQ_MASK_REG ((sspdma_lvl_irq_mask_reg_t*) SSPDMA_LVL_IRQ_MASK_ADR)
#define SSPDMA_LVL_IRQ_INV_REG ((sspdma_lvl_irq_inv_reg_t*) SSPDMA_LVL_IRQ_INV_ADR)
#define SSPDMA_LVL_IRQ_NOMASK_REG ((sspdma_lvl_irq_nomask_reg_t*) SSPDMA_LVL_IRQ_NOMASK_ADR)
#define SSPDMA_EDG_IRQ_STAT_REG ((sspdma_edg_irq_stat_reg_t*) SSPDMA_EDG_IRQ_STAT_ADR)
#define SSPDMA_EDG_IRQ_MASK_REG ((sspdma_edg_irq_mask_reg_t*) SSPDMA_EDG_IRQ_MASK_ADR)
#define SSPDMA_EDG_IRQ_INV_REG ((sspdma_edg_irq_inv_reg_t*) SSPDMA_EDG_IRQ_INV_ADR)
#define SSPDMA_EDG_IRQ_NOMASK_REG ((sspdma_edg_irq_nomask_reg_t*) SSPDMA_EDG_IRQ_NOMASK_ADR)
#define SSPDMA_EDG_IRQ_RAW_REG ((sspdma_edg_irq_raw_reg_t*) SSPDMA_EDG_IRQ_RAW_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    sspdma_cr0_reg_t CR0;      /*< Address offset = 0x0 */
    sspdma_cr1_reg_t CR1;      /*< Address offset = 0x4 */
    sspdma_dr_reg_t DR;       /*< Address offset = 0x8 */
    sspdma_sr_reg_t SR;       /*< Address offset = 0xc */
    sspdma_cpsr_reg_t CPSR;     /*< Address offset = 0x10 */
    sspdma_imsc_reg_t IMSC;     /*< Address offset = 0x14 */
    sspdma_ris_reg_t RIS;      /*< Address offset = 0x18 */
    sspdma_mis_reg_t MIS;      /*< Address offset = 0x1c */
    sspdma_icr_reg_t ICR;      /*< Address offset = 0x20 */
    sspdma_dmacr_reg_t DMACR;    /*< Address offset = 0x24 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x28 */
    sspdma_csr_reg_t CSR;      /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [76];  /*< Address offset = 0x34 */
    sspdma_tcr_reg_t TCR;      /*< Address offset = 0x80 */
    sspdma_itip_reg_t ITIP;     /*< Address offset = 0x84 */
    sspdma_itop_reg_t ITOP;     /*< Address offset = 0x88 */
    sspdma_tdr_reg_t TDR;      /*< Address offset = 0x8c */
    const uint8_t        reservedArea2 [3920]; /*< Address offset = 0x90 */
    sspdma_periphid0_reg_t PERIPHID0; /*< Address offset = 0xfe0 */
    sspdma_periphid1_reg_t PERIPHID1; /*< Address offset = 0xfe4 */
    sspdma_periphid2_reg_t PERIPHID2; /*< Address offset = 0xfe8 */
    sspdma_periphid3_reg_t PERIPHID3; /*< Address offset = 0xfec */
    sspdma_pcellid0_reg_t PCELLID0; /*< Address offset = 0xff0 */
    sspdma_pcellid1_reg_t PCELLID1; /*< Address offset = 0xff4 */
    sspdma_pcellid2_reg_t PCELLID2; /*< Address offset = 0xff8 */
    sspdma_pcellid3_reg_t PCELLID3; /*< Address offset = 0xffc */
    sspdma_ctl_reg_t SSPDMA_CTL;  /*< Address offset = 0x1000 */
    sspdma_cfg_reg_t SSPDMA_CFG;  /*< Address offset = 0x1004 */
    sspdma_addr_lo_reg_t SSPDMA_ADDR_LO; /*< Address offset = 0x1008 */
    sspdma_addr_hi_reg_t SSPDMA_ADDR_HI; /*< Address offset = 0x100c */
    const uint8_t        reservedArea3 [48];  /*< Address offset = 0x1010 */
    sspdma_stat_reg_t SSPDMA_STAT; /*< Address offset = 0x1040 */
    sspdma_crc32_reg_t SSPDMA_CRC32; /*< Address offset = 0x1044 */
    const uint8_t        reservedArea4 [56];  /*< Address offset = 0x1048 */
    sspdma_lvl_irq_stat_reg_t SSPDMA_LVL_IRQ_STAT; /*< Address offset = 0x1080 */
    sspdma_lvl_irq_mask_reg_t SSPDMA_LVL_IRQ_MASK; /*< Address offset = 0x1084 */
    sspdma_lvl_irq_inv_reg_t SSPDMA_LVL_IRQ_INV; /*< Address offset = 0x1088 */
    sspdma_lvl_irq_nomask_reg_t SSPDMA_LVL_IRQ_NOMASK; /*< Address offset = 0x108c */
    sspdma_edg_irq_stat_reg_t SSPDMA_EDG_IRQ_STAT; /*< Address offset = 0x1090 */
    sspdma_edg_irq_mask_reg_t SSPDMA_EDG_IRQ_MASK; /*< Address offset = 0x1094 */
    sspdma_edg_irq_inv_reg_t SSPDMA_EDG_IRQ_INV; /*< Address offset = 0x1098 */
    sspdma_edg_irq_nomask_reg_t SSPDMA_EDG_IRQ_NOMASK; /*< Address offset = 0x109c */
    const uint8_t        reservedArea5 [96];  /*< Address offset = 0x10a0 */
    sspdma_edg_irq_raw_reg_t SSPDMA_EDG_IRQ_RAW; /*< Address offset = 0x1100 */
} sspdma_t;     // size: 0x0098

// AddressSpace struct pointer
//
#define RCS_SSPDMA0      ((sspdma_t*) RCS_SSPDMA0_BASE)

// ******************************************* /Address Space

#endif      // _SSPDMA_H_

