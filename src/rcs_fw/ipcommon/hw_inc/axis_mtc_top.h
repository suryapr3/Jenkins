#ifndef _AXIS_MTC_TOP_H_
#define _AXIS_MTC_TOP_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_APB2TAP_AXIS_MTC_TOP_BASE  ( 0x01e18000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_OFFSET ( 0x00000000U )
#define AXIS_MTC_TOP_SCRATCH0_ADDR_OFFSET ( 0x00000004U )
#define AXIS_MTC_TOP_SCRATCH1_ADDR_OFFSET ( 0x00000008U )
#define AXIS_MTC_TOP_CFG0_ADDR_OFFSET ( 0x00000010U )
#define AXIS_MTC_TOP_CFG1_ADDR_OFFSET ( 0x00000014U )
#define AXIS_MTC_TOP_STAT1_ADDR_OFFSET ( 0x00000020U )
#define AXIS_MTC_TOP_STAT2_ADDR_OFFSET ( 0x00000024U )
#define AXIS_MTC_TOP_EXECUTE1_ADDR_OFFSET ( 0x00000030U )
#define AXIS_MTC_TOP_MEM_INIT_ADDR_OFFSET ( 0x00000040U )
#define AXIS_MTC_TOP_ECC_DIS_ADDR_OFFSET ( 0x00000044U )
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_OFFSET ( 0x00000048U )
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_OFFSET ( 0x0000004cU )
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_OFFSET ( 0x00000050U )
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_OFFSET ( 0x00000054U )
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_OFFSET ( 0x00000058U )
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_OFFSET ( 0x0000005cU )
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_OFFSET ( 0x00000060U )
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_OFFSET ( 0x00000064U )
#define AXIS_MTC_TOP_DBG0_ADDR_OFFSET ( 0x00000080U )
#define AXIS_MTC_TOP_DBG1_ADDR_OFFSET ( 0x00000084U )
#define AXIS_MTC_TOP_DBG2_ADDR_OFFSET ( 0x00000088U )
#define AXIS_MTC_TOP_DBG3_ADDR_OFFSET ( 0x0000008cU )
#define AXIS_MTC_TOP_DBG4_ADDR_OFFSET ( 0x00000090U )
#define AXIS_MTC_TOP_DBG5_ADDR_OFFSET ( 0x00000094U )
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_OFFSET ( 0x00000100U )
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_OFFSET ( 0x00000204U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR0_OFFSET ( 0x00001000U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR1_OFFSET ( 0x00001004U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR2_OFFSET ( 0x00001008U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR3_OFFSET ( 0x0000100cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR4_OFFSET ( 0x00001010U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR5_OFFSET ( 0x00001014U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR6_OFFSET ( 0x00001018U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR7_OFFSET ( 0x0000101cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR8_OFFSET ( 0x00001020U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR9_OFFSET ( 0x00001024U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR10_OFFSET ( 0x00001028U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR11_OFFSET ( 0x0000102cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR12_OFFSET ( 0x00001030U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR13_OFFSET ( 0x00001034U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR14_OFFSET ( 0x00001038U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR15_OFFSET ( 0x0000103cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR16_OFFSET ( 0x00001040U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR17_OFFSET ( 0x00001044U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR18_OFFSET ( 0x00001048U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR19_OFFSET ( 0x0000104cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR20_OFFSET ( 0x00001050U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR21_OFFSET ( 0x00001054U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR22_OFFSET ( 0x00001058U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR23_OFFSET ( 0x0000105cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR24_OFFSET ( 0x00001060U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR25_OFFSET ( 0x00001064U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR26_OFFSET ( 0x00001068U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR27_OFFSET ( 0x0000106cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR28_OFFSET ( 0x00001070U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR29_OFFSET ( 0x00001074U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR30_OFFSET ( 0x00001078U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR31_OFFSET ( 0x0000107cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR32_OFFSET ( 0x00001080U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR33_OFFSET ( 0x00001084U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR34_OFFSET ( 0x00001088U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR35_OFFSET ( 0x0000108cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR36_OFFSET ( 0x00001090U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR37_OFFSET ( 0x00001094U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR38_OFFSET ( 0x00001098U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR39_OFFSET ( 0x0000109cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR40_OFFSET ( 0x000010a0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR41_OFFSET ( 0x000010a4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR42_OFFSET ( 0x000010a8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR43_OFFSET ( 0x000010acU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR44_OFFSET ( 0x000010b0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR45_OFFSET ( 0x000010b4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR46_OFFSET ( 0x000010b8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR47_OFFSET ( 0x000010bcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR48_OFFSET ( 0x000010c0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR49_OFFSET ( 0x000010c4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR50_OFFSET ( 0x000010c8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR51_OFFSET ( 0x000010ccU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR52_OFFSET ( 0x000010d0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR53_OFFSET ( 0x000010d4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR54_OFFSET ( 0x000010d8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR55_OFFSET ( 0x000010dcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR56_OFFSET ( 0x000010e0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR57_OFFSET ( 0x000010e4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR58_OFFSET ( 0x000010e8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR59_OFFSET ( 0x000010ecU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR60_OFFSET ( 0x000010f0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR61_OFFSET ( 0x000010f4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR62_OFFSET ( 0x000010f8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR63_OFFSET ( 0x000010fcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR64_OFFSET ( 0x00001100U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR65_OFFSET ( 0x00001104U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR66_OFFSET ( 0x00001108U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR67_OFFSET ( 0x0000110cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR68_OFFSET ( 0x00001110U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR69_OFFSET ( 0x00001114U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR70_OFFSET ( 0x00001118U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR71_OFFSET ( 0x0000111cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR72_OFFSET ( 0x00001120U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR73_OFFSET ( 0x00001124U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR74_OFFSET ( 0x00001128U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR75_OFFSET ( 0x0000112cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR76_OFFSET ( 0x00001130U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR77_OFFSET ( 0x00001134U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR78_OFFSET ( 0x00001138U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR79_OFFSET ( 0x0000113cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR80_OFFSET ( 0x00001140U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR81_OFFSET ( 0x00001144U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR82_OFFSET ( 0x00001148U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR83_OFFSET ( 0x0000114cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR84_OFFSET ( 0x00001150U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR85_OFFSET ( 0x00001154U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR86_OFFSET ( 0x00001158U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR87_OFFSET ( 0x0000115cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR88_OFFSET ( 0x00001160U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR89_OFFSET ( 0x00001164U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR90_OFFSET ( 0x00001168U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR91_OFFSET ( 0x0000116cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR92_OFFSET ( 0x00001170U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR93_OFFSET ( 0x00001174U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR94_OFFSET ( 0x00001178U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR95_OFFSET ( 0x0000117cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR96_OFFSET ( 0x00001180U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR97_OFFSET ( 0x00001184U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR98_OFFSET ( 0x00001188U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR99_OFFSET ( 0x0000118cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR100_OFFSET ( 0x00001190U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR101_OFFSET ( 0x00001194U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR102_OFFSET ( 0x00001198U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR103_OFFSET ( 0x0000119cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR104_OFFSET ( 0x000011a0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR105_OFFSET ( 0x000011a4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR106_OFFSET ( 0x000011a8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR107_OFFSET ( 0x000011acU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR108_OFFSET ( 0x000011b0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR109_OFFSET ( 0x000011b4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR110_OFFSET ( 0x000011b8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR111_OFFSET ( 0x000011bcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR112_OFFSET ( 0x000011c0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR113_OFFSET ( 0x000011c4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR114_OFFSET ( 0x000011c8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR115_OFFSET ( 0x000011ccU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR116_OFFSET ( 0x000011d0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR117_OFFSET ( 0x000011d4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR118_OFFSET ( 0x000011d8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR119_OFFSET ( 0x000011dcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR120_OFFSET ( 0x000011e0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR121_OFFSET ( 0x000011e4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR122_OFFSET ( 0x000011e8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR123_OFFSET ( 0x000011ecU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR124_OFFSET ( 0x000011f0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR125_OFFSET ( 0x000011f4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR126_OFFSET ( 0x000011f8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR127_OFFSET ( 0x000011fcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR128_OFFSET ( 0x00001200U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR129_OFFSET ( 0x00001204U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR130_OFFSET ( 0x00001208U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR131_OFFSET ( 0x0000120cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR132_OFFSET ( 0x00001210U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR133_OFFSET ( 0x00001214U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR134_OFFSET ( 0x00001218U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR135_OFFSET ( 0x0000121cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR136_OFFSET ( 0x00001220U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR137_OFFSET ( 0x00001224U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR138_OFFSET ( 0x00001228U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR139_OFFSET ( 0x0000122cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR140_OFFSET ( 0x00001230U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR141_OFFSET ( 0x00001234U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR142_OFFSET ( 0x00001238U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR143_OFFSET ( 0x0000123cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR144_OFFSET ( 0x00001240U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR145_OFFSET ( 0x00001244U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR146_OFFSET ( 0x00001248U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR147_OFFSET ( 0x0000124cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR148_OFFSET ( 0x00001250U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR149_OFFSET ( 0x00001254U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR150_OFFSET ( 0x00001258U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR151_OFFSET ( 0x0000125cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR152_OFFSET ( 0x00001260U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR153_OFFSET ( 0x00001264U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR154_OFFSET ( 0x00001268U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR155_OFFSET ( 0x0000126cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR156_OFFSET ( 0x00001270U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR157_OFFSET ( 0x00001274U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR158_OFFSET ( 0x00001278U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR159_OFFSET ( 0x0000127cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR160_OFFSET ( 0x00001280U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR161_OFFSET ( 0x00001284U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR162_OFFSET ( 0x00001288U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR163_OFFSET ( 0x0000128cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR164_OFFSET ( 0x00001290U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR165_OFFSET ( 0x00001294U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR166_OFFSET ( 0x00001298U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR167_OFFSET ( 0x0000129cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR168_OFFSET ( 0x000012a0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR169_OFFSET ( 0x000012a4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR170_OFFSET ( 0x000012a8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR171_OFFSET ( 0x000012acU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR172_OFFSET ( 0x000012b0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR173_OFFSET ( 0x000012b4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR174_OFFSET ( 0x000012b8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR175_OFFSET ( 0x000012bcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR176_OFFSET ( 0x000012c0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR177_OFFSET ( 0x000012c4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR178_OFFSET ( 0x000012c8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR179_OFFSET ( 0x000012ccU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR180_OFFSET ( 0x000012d0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR181_OFFSET ( 0x000012d4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR182_OFFSET ( 0x000012d8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR183_OFFSET ( 0x000012dcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR184_OFFSET ( 0x000012e0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR185_OFFSET ( 0x000012e4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR186_OFFSET ( 0x000012e8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR187_OFFSET ( 0x000012ecU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR188_OFFSET ( 0x000012f0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR189_OFFSET ( 0x000012f4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR190_OFFSET ( 0x000012f8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR191_OFFSET ( 0x000012fcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR192_OFFSET ( 0x00001300U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR193_OFFSET ( 0x00001304U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR194_OFFSET ( 0x00001308U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR195_OFFSET ( 0x0000130cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR196_OFFSET ( 0x00001310U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR197_OFFSET ( 0x00001314U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR198_OFFSET ( 0x00001318U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR199_OFFSET ( 0x0000131cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR200_OFFSET ( 0x00001320U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR201_OFFSET ( 0x00001324U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR202_OFFSET ( 0x00001328U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR203_OFFSET ( 0x0000132cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR204_OFFSET ( 0x00001330U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR205_OFFSET ( 0x00001334U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR206_OFFSET ( 0x00001338U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR207_OFFSET ( 0x0000133cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR208_OFFSET ( 0x00001340U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR209_OFFSET ( 0x00001344U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR210_OFFSET ( 0x00001348U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR211_OFFSET ( 0x0000134cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR212_OFFSET ( 0x00001350U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR213_OFFSET ( 0x00001354U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR214_OFFSET ( 0x00001358U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR215_OFFSET ( 0x0000135cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR216_OFFSET ( 0x00001360U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR217_OFFSET ( 0x00001364U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR218_OFFSET ( 0x00001368U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR219_OFFSET ( 0x0000136cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR220_OFFSET ( 0x00001370U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR221_OFFSET ( 0x00001374U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR222_OFFSET ( 0x00001378U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR223_OFFSET ( 0x0000137cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR224_OFFSET ( 0x00001380U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR225_OFFSET ( 0x00001384U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR226_OFFSET ( 0x00001388U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR227_OFFSET ( 0x0000138cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR228_OFFSET ( 0x00001390U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR229_OFFSET ( 0x00001394U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR230_OFFSET ( 0x00001398U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR231_OFFSET ( 0x0000139cU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR232_OFFSET ( 0x000013a0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR233_OFFSET ( 0x000013a4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR234_OFFSET ( 0x000013a8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR235_OFFSET ( 0x000013acU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR236_OFFSET ( 0x000013b0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR237_OFFSET ( 0x000013b4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR238_OFFSET ( 0x000013b8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR239_OFFSET ( 0x000013bcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR240_OFFSET ( 0x000013c0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR241_OFFSET ( 0x000013c4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR242_OFFSET ( 0x000013c8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR243_OFFSET ( 0x000013ccU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR244_OFFSET ( 0x000013d0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR245_OFFSET ( 0x000013d4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR246_OFFSET ( 0x000013d8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR247_OFFSET ( 0x000013dcU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR248_OFFSET ( 0x000013e0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR249_OFFSET ( 0x000013e4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR250_OFFSET ( 0x000013e8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR251_OFFSET ( 0x000013ecU )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR252_OFFSET ( 0x000013f0U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR253_OFFSET ( 0x000013f4U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR254_OFFSET ( 0x000013f8U )
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR255_OFFSET ( 0x000013fcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR0_OFFSET ( 0x00002000U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR1_OFFSET ( 0x00002004U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR2_OFFSET ( 0x00002008U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR3_OFFSET ( 0x0000200cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR4_OFFSET ( 0x00002010U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR5_OFFSET ( 0x00002014U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR6_OFFSET ( 0x00002018U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR7_OFFSET ( 0x0000201cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR8_OFFSET ( 0x00002020U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR9_OFFSET ( 0x00002024U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR10_OFFSET ( 0x00002028U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR11_OFFSET ( 0x0000202cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR12_OFFSET ( 0x00002030U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR13_OFFSET ( 0x00002034U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR14_OFFSET ( 0x00002038U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR15_OFFSET ( 0x0000203cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR16_OFFSET ( 0x00002040U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR17_OFFSET ( 0x00002044U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR18_OFFSET ( 0x00002048U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR19_OFFSET ( 0x0000204cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR20_OFFSET ( 0x00002050U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR21_OFFSET ( 0x00002054U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR22_OFFSET ( 0x00002058U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR23_OFFSET ( 0x0000205cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR24_OFFSET ( 0x00002060U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR25_OFFSET ( 0x00002064U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR26_OFFSET ( 0x00002068U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR27_OFFSET ( 0x0000206cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR28_OFFSET ( 0x00002070U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR29_OFFSET ( 0x00002074U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR30_OFFSET ( 0x00002078U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR31_OFFSET ( 0x0000207cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR32_OFFSET ( 0x00002080U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR33_OFFSET ( 0x00002084U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR34_OFFSET ( 0x00002088U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR35_OFFSET ( 0x0000208cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR36_OFFSET ( 0x00002090U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR37_OFFSET ( 0x00002094U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR38_OFFSET ( 0x00002098U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR39_OFFSET ( 0x0000209cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR40_OFFSET ( 0x000020a0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR41_OFFSET ( 0x000020a4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR42_OFFSET ( 0x000020a8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR43_OFFSET ( 0x000020acU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR44_OFFSET ( 0x000020b0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR45_OFFSET ( 0x000020b4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR46_OFFSET ( 0x000020b8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR47_OFFSET ( 0x000020bcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR48_OFFSET ( 0x000020c0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR49_OFFSET ( 0x000020c4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR50_OFFSET ( 0x000020c8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR51_OFFSET ( 0x000020ccU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR52_OFFSET ( 0x000020d0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR53_OFFSET ( 0x000020d4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR54_OFFSET ( 0x000020d8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR55_OFFSET ( 0x000020dcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR56_OFFSET ( 0x000020e0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR57_OFFSET ( 0x000020e4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR58_OFFSET ( 0x000020e8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR59_OFFSET ( 0x000020ecU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR60_OFFSET ( 0x000020f0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR61_OFFSET ( 0x000020f4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR62_OFFSET ( 0x000020f8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR63_OFFSET ( 0x000020fcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR64_OFFSET ( 0x00002100U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR65_OFFSET ( 0x00002104U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR66_OFFSET ( 0x00002108U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR67_OFFSET ( 0x0000210cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR68_OFFSET ( 0x00002110U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR69_OFFSET ( 0x00002114U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR70_OFFSET ( 0x00002118U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR71_OFFSET ( 0x0000211cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR72_OFFSET ( 0x00002120U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR73_OFFSET ( 0x00002124U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR74_OFFSET ( 0x00002128U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR75_OFFSET ( 0x0000212cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR76_OFFSET ( 0x00002130U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR77_OFFSET ( 0x00002134U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR78_OFFSET ( 0x00002138U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR79_OFFSET ( 0x0000213cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR80_OFFSET ( 0x00002140U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR81_OFFSET ( 0x00002144U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR82_OFFSET ( 0x00002148U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR83_OFFSET ( 0x0000214cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR84_OFFSET ( 0x00002150U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR85_OFFSET ( 0x00002154U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR86_OFFSET ( 0x00002158U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR87_OFFSET ( 0x0000215cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR88_OFFSET ( 0x00002160U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR89_OFFSET ( 0x00002164U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR90_OFFSET ( 0x00002168U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR91_OFFSET ( 0x0000216cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR92_OFFSET ( 0x00002170U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR93_OFFSET ( 0x00002174U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR94_OFFSET ( 0x00002178U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR95_OFFSET ( 0x0000217cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR96_OFFSET ( 0x00002180U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR97_OFFSET ( 0x00002184U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR98_OFFSET ( 0x00002188U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR99_OFFSET ( 0x0000218cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR100_OFFSET ( 0x00002190U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR101_OFFSET ( 0x00002194U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR102_OFFSET ( 0x00002198U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR103_OFFSET ( 0x0000219cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR104_OFFSET ( 0x000021a0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR105_OFFSET ( 0x000021a4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR106_OFFSET ( 0x000021a8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR107_OFFSET ( 0x000021acU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR108_OFFSET ( 0x000021b0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR109_OFFSET ( 0x000021b4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR110_OFFSET ( 0x000021b8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR111_OFFSET ( 0x000021bcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR112_OFFSET ( 0x000021c0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR113_OFFSET ( 0x000021c4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR114_OFFSET ( 0x000021c8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR115_OFFSET ( 0x000021ccU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR116_OFFSET ( 0x000021d0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR117_OFFSET ( 0x000021d4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR118_OFFSET ( 0x000021d8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR119_OFFSET ( 0x000021dcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR120_OFFSET ( 0x000021e0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR121_OFFSET ( 0x000021e4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR122_OFFSET ( 0x000021e8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR123_OFFSET ( 0x000021ecU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR124_OFFSET ( 0x000021f0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR125_OFFSET ( 0x000021f4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR126_OFFSET ( 0x000021f8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR127_OFFSET ( 0x000021fcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR128_OFFSET ( 0x00002200U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR129_OFFSET ( 0x00002204U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR130_OFFSET ( 0x00002208U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR131_OFFSET ( 0x0000220cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR132_OFFSET ( 0x00002210U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR133_OFFSET ( 0x00002214U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR134_OFFSET ( 0x00002218U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR135_OFFSET ( 0x0000221cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR136_OFFSET ( 0x00002220U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR137_OFFSET ( 0x00002224U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR138_OFFSET ( 0x00002228U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR139_OFFSET ( 0x0000222cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR140_OFFSET ( 0x00002230U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR141_OFFSET ( 0x00002234U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR142_OFFSET ( 0x00002238U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR143_OFFSET ( 0x0000223cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR144_OFFSET ( 0x00002240U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR145_OFFSET ( 0x00002244U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR146_OFFSET ( 0x00002248U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR147_OFFSET ( 0x0000224cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR148_OFFSET ( 0x00002250U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR149_OFFSET ( 0x00002254U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR150_OFFSET ( 0x00002258U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR151_OFFSET ( 0x0000225cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR152_OFFSET ( 0x00002260U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR153_OFFSET ( 0x00002264U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR154_OFFSET ( 0x00002268U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR155_OFFSET ( 0x0000226cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR156_OFFSET ( 0x00002270U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR157_OFFSET ( 0x00002274U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR158_OFFSET ( 0x00002278U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR159_OFFSET ( 0x0000227cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR160_OFFSET ( 0x00002280U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR161_OFFSET ( 0x00002284U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR162_OFFSET ( 0x00002288U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR163_OFFSET ( 0x0000228cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR164_OFFSET ( 0x00002290U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR165_OFFSET ( 0x00002294U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR166_OFFSET ( 0x00002298U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR167_OFFSET ( 0x0000229cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR168_OFFSET ( 0x000022a0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR169_OFFSET ( 0x000022a4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR170_OFFSET ( 0x000022a8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR171_OFFSET ( 0x000022acU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR172_OFFSET ( 0x000022b0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR173_OFFSET ( 0x000022b4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR174_OFFSET ( 0x000022b8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR175_OFFSET ( 0x000022bcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR176_OFFSET ( 0x000022c0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR177_OFFSET ( 0x000022c4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR178_OFFSET ( 0x000022c8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR179_OFFSET ( 0x000022ccU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR180_OFFSET ( 0x000022d0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR181_OFFSET ( 0x000022d4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR182_OFFSET ( 0x000022d8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR183_OFFSET ( 0x000022dcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR184_OFFSET ( 0x000022e0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR185_OFFSET ( 0x000022e4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR186_OFFSET ( 0x000022e8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR187_OFFSET ( 0x000022ecU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR188_OFFSET ( 0x000022f0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR189_OFFSET ( 0x000022f4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR190_OFFSET ( 0x000022f8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR191_OFFSET ( 0x000022fcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR192_OFFSET ( 0x00002300U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR193_OFFSET ( 0x00002304U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR194_OFFSET ( 0x00002308U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR195_OFFSET ( 0x0000230cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR196_OFFSET ( 0x00002310U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR197_OFFSET ( 0x00002314U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR198_OFFSET ( 0x00002318U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR199_OFFSET ( 0x0000231cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR200_OFFSET ( 0x00002320U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR201_OFFSET ( 0x00002324U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR202_OFFSET ( 0x00002328U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR203_OFFSET ( 0x0000232cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR204_OFFSET ( 0x00002330U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR205_OFFSET ( 0x00002334U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR206_OFFSET ( 0x00002338U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR207_OFFSET ( 0x0000233cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR208_OFFSET ( 0x00002340U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR209_OFFSET ( 0x00002344U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR210_OFFSET ( 0x00002348U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR211_OFFSET ( 0x0000234cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR212_OFFSET ( 0x00002350U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR213_OFFSET ( 0x00002354U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR214_OFFSET ( 0x00002358U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR215_OFFSET ( 0x0000235cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR216_OFFSET ( 0x00002360U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR217_OFFSET ( 0x00002364U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR218_OFFSET ( 0x00002368U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR219_OFFSET ( 0x0000236cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR220_OFFSET ( 0x00002370U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR221_OFFSET ( 0x00002374U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR222_OFFSET ( 0x00002378U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR223_OFFSET ( 0x0000237cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR224_OFFSET ( 0x00002380U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR225_OFFSET ( 0x00002384U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR226_OFFSET ( 0x00002388U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR227_OFFSET ( 0x0000238cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR228_OFFSET ( 0x00002390U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR229_OFFSET ( 0x00002394U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR230_OFFSET ( 0x00002398U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR231_OFFSET ( 0x0000239cU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR232_OFFSET ( 0x000023a0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR233_OFFSET ( 0x000023a4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR234_OFFSET ( 0x000023a8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR235_OFFSET ( 0x000023acU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR236_OFFSET ( 0x000023b0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR237_OFFSET ( 0x000023b4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR238_OFFSET ( 0x000023b8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR239_OFFSET ( 0x000023bcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR240_OFFSET ( 0x000023c0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR241_OFFSET ( 0x000023c4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR242_OFFSET ( 0x000023c8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR243_OFFSET ( 0x000023ccU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR244_OFFSET ( 0x000023d0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR245_OFFSET ( 0x000023d4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR246_OFFSET ( 0x000023d8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR247_OFFSET ( 0x000023dcU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR248_OFFSET ( 0x000023e0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR249_OFFSET ( 0x000023e4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR250_OFFSET ( 0x000023e8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR251_OFFSET ( 0x000023ecU )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR252_OFFSET ( 0x000023f0U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR253_OFFSET ( 0x000023f4U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR254_OFFSET ( 0x000023f8U )
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR255_OFFSET ( 0x000023fcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_INST_PARAMS0_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_SCRATCH0_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_SCRATCH0_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_SCRATCH1_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_SCRATCH1_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_CFG0_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_CFG0_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_CFG1_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_CFG1_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_STAT1_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_STAT1_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_STAT2_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_STAT2_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_EXECUTE1_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_EXECUTE1_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_MEM_INIT_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_MEM_INIT_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_ECC_DIS_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_ECC_DIS_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_ECC_INVERT_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TSTGEN_INTR_STAT_OFFSET ) ))
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TSTGEN_INTR_EN_OFFSET ) ))
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TSTGEN_INTR_FRC_OFFSET ) ))
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_OFFSET ) ))
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_OFFSET ) ))
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_OFFSET ) ))
#define AXIS_MTC_TOP_DBG0_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_DBG0_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_DBG1_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_DBG1_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_DBG2_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_DBG2_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_DBG3_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_DBG3_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_DBG4_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_DBG4_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_DBG5_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_DBG5_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR0_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR0_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR1_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR1_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR2_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR2_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR3_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR3_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR4_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR4_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR5_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR5_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR6_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR6_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR7_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR7_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR8_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR8_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR9_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR9_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR10_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR10_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR11_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR11_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR12_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR12_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR13_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR13_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR14_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR14_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR15_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR15_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR16_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR16_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR17_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR17_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR18_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR18_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR19_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR19_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR20_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR20_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR21_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR21_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR22_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR22_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR23_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR23_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR24_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR24_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR25_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR25_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR26_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR26_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR27_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR27_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR28_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR28_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR29_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR29_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR30_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR30_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR31_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR31_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR32_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR32_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR33_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR33_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR34_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR34_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR35_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR35_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR36_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR36_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR37_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR37_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR38_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR38_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR39_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR39_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR40_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR40_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR41_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR41_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR42_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR42_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR43_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR43_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR44_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR44_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR45_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR45_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR46_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR46_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR47_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR47_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR48_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR48_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR49_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR49_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR50_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR50_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR51_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR51_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR52_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR52_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR53_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR53_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR54_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR54_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR55_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR55_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR56_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR56_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR57_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR57_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR58_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR58_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR59_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR59_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR60_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR60_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR61_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR61_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR62_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR62_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR63_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR63_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR64_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR64_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR65_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR65_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR66_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR66_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR67_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR67_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR68_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR68_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR69_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR69_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR70_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR70_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR71_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR71_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR72_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR72_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR73_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR73_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR74_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR74_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR75_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR75_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR76_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR76_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR77_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR77_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR78_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR78_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR79_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR79_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR80_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR80_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR81_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR81_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR82_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR82_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR83_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR83_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR84_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR84_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR85_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR85_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR86_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR86_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR87_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR87_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR88_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR88_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR89_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR89_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR90_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR90_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR91_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR91_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR92_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR92_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR93_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR93_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR94_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR94_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR95_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR95_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR96_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR96_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR97_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR97_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR98_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR98_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR99_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR99_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR100_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR100_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR101_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR101_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR102_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR102_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR103_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR103_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR104_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR104_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR105_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR105_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR106_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR106_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR107_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR107_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR108_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR108_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR109_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR109_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR110_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR110_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR111_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR111_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR112_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR112_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR113_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR113_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR114_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR114_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR115_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR115_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR116_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR116_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR117_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR117_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR118_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR118_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR119_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR119_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR120_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR120_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR121_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR121_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR122_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR122_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR123_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR123_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR124_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR124_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR125_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR125_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR126_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR126_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR127_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR127_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR128_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR128_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR129_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR129_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR130_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR130_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR131_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR131_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR132_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR132_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR133_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR133_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR134_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR134_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR135_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR135_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR136_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR136_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR137_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR137_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR138_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR138_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR139_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR139_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR140_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR140_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR141_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR141_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR142_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR142_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR143_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR143_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR144_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR144_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR145_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR145_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR146_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR146_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR147_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR147_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR148_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR148_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR149_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR149_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR150_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR150_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR151_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR151_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR152_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR152_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR153_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR153_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR154_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR154_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR155_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR155_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR156_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR156_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR157_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR157_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR158_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR158_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR159_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR159_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR160_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR160_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR161_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR161_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR162_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR162_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR163_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR163_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR164_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR164_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR165_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR165_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR166_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR166_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR167_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR167_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR168_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR168_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR169_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR169_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR170_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR170_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR171_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR171_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR172_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR172_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR173_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR173_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR174_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR174_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR175_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR175_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR176_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR176_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR177_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR177_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR178_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR178_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR179_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR179_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR180_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR180_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR181_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR181_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR182_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR182_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR183_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR183_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR184_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR184_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR185_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR185_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR186_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR186_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR187_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR187_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR188_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR188_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR189_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR189_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR190_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR190_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR191_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR191_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR192_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR192_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR193_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR193_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR194_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR194_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR195_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR195_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR196_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR196_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR197_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR197_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR198_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR198_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR199_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR199_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR200_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR200_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR201_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR201_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR202_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR202_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR203_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR203_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR204_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR204_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR205_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR205_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR206_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR206_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR207_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR207_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR208_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR208_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR209_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR209_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR210_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR210_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR211_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR211_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR212_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR212_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR213_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR213_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR214_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR214_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR215_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR215_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR216_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR216_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR217_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR217_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR218_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR218_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR219_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR219_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR220_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR220_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR221_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR221_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR222_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR222_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR223_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR223_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR224_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR224_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR225_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR225_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR226_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR226_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR227_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR227_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR228_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR228_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR229_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR229_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR230_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR230_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR231_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR231_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR232_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR232_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR233_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR233_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR234_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR234_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR235_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR235_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR236_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR236_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR237_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR237_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR238_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR238_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR239_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR239_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR240_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR240_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR241_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR241_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR242_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR242_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR243_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR243_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR244_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR244_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR245_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR245_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR246_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR246_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR247_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR247_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR248_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR248_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR249_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR249_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR250_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR250_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR251_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR251_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR252_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR252_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR253_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR253_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR254_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR254_OFFSET ) ))
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR255_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_PRGM_MEM_START_ADDR255_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR0_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR0_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR1_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR1_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR2_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR2_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR3_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR3_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR4_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR4_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR5_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR5_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR6_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR6_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR7_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR7_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR8_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR8_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR9_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR9_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR10_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR10_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR11_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR11_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR12_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR12_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR13_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR13_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR14_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR14_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR15_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR15_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR16_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR16_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR17_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR17_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR18_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR18_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR19_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR19_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR20_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR20_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR21_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR21_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR22_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR22_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR23_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR23_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR24_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR24_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR25_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR25_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR26_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR26_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR27_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR27_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR28_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR28_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR29_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR29_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR30_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR30_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR31_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR31_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR32_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR32_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR33_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR33_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR34_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR34_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR35_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR35_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR36_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR36_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR37_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR37_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR38_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR38_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR39_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR39_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR40_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR40_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR41_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR41_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR42_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR42_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR43_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR43_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR44_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR44_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR45_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR45_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR46_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR46_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR47_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR47_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR48_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR48_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR49_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR49_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR50_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR50_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR51_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR51_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR52_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR52_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR53_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR53_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR54_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR54_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR55_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR55_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR56_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR56_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR57_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR57_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR58_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR58_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR59_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR59_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR60_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR60_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR61_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR61_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR62_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR62_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR63_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR63_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR64_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR64_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR65_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR65_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR66_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR66_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR67_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR67_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR68_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR68_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR69_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR69_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR70_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR70_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR71_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR71_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR72_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR72_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR73_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR73_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR74_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR74_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR75_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR75_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR76_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR76_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR77_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR77_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR78_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR78_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR79_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR79_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR80_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR80_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR81_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR81_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR82_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR82_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR83_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR83_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR84_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR84_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR85_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR85_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR86_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR86_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR87_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR87_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR88_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR88_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR89_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR89_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR90_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR90_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR91_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR91_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR92_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR92_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR93_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR93_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR94_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR94_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR95_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR95_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR96_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR96_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR97_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR97_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR98_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR98_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR99_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR99_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR100_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR100_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR101_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR101_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR102_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR102_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR103_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR103_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR104_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR104_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR105_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR105_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR106_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR106_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR107_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR107_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR108_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR108_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR109_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR109_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR110_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR110_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR111_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR111_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR112_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR112_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR113_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR113_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR114_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR114_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR115_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR115_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR116_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR116_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR117_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR117_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR118_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR118_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR119_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR119_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR120_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR120_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR121_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR121_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR122_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR122_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR123_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR123_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR124_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR124_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR125_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR125_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR126_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR126_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR127_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR127_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR128_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR128_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR129_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR129_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR130_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR130_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR131_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR131_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR132_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR132_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR133_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR133_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR134_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR134_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR135_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR135_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR136_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR136_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR137_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR137_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR138_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR138_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR139_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR139_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR140_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR140_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR141_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR141_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR142_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR142_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR143_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR143_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR144_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR144_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR145_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR145_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR146_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR146_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR147_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR147_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR148_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR148_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR149_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR149_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR150_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR150_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR151_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR151_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR152_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR152_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR153_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR153_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR154_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR154_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR155_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR155_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR156_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR156_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR157_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR157_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR158_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR158_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR159_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR159_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR160_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR160_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR161_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR161_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR162_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR162_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR163_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR163_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR164_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR164_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR165_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR165_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR166_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR166_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR167_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR167_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR168_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR168_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR169_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR169_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR170_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR170_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR171_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR171_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR172_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR172_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR173_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR173_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR174_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR174_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR175_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR175_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR176_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR176_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR177_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR177_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR178_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR178_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR179_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR179_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR180_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR180_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR181_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR181_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR182_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR182_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR183_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR183_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR184_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR184_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR185_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR185_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR186_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR186_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR187_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR187_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR188_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR188_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR189_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR189_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR190_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR190_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR191_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR191_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR192_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR192_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR193_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR193_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR194_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR194_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR195_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR195_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR196_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR196_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR197_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR197_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR198_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR198_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR199_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR199_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR200_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR200_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR201_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR201_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR202_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR202_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR203_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR203_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR204_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR204_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR205_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR205_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR206_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR206_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR207_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR207_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR208_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR208_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR209_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR209_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR210_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR210_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR211_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR211_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR212_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR212_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR213_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR213_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR214_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR214_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR215_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR215_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR216_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR216_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR217_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR217_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR218_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR218_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR219_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR219_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR220_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR220_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR221_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR221_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR222_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR222_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR223_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR223_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR224_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR224_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR225_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR225_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR226_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR226_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR227_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR227_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR228_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR228_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR229_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR229_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR230_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR230_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR231_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR231_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR232_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR232_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR233_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR233_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR234_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR234_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR235_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR235_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR236_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR236_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR237_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR237_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR238_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR238_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR239_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR239_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR240_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR240_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR241_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR241_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR242_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR242_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR243_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR243_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR244_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR244_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR245_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR245_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR246_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR246_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR247_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR247_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR248_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR248_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR249_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR249_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR250_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR250_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR251_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR251_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR252_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR252_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR253_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR253_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR254_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR254_OFFSET ) ))
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR255_ADR (( ( SYSCON_APB2TAP_AXIS_MTC_TOP_BASE ) + ( AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR255_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_INST_PARAMS0_REG_ADDR register description at address offset 0x0
  *
  * Register default value:        0x03FF03FF
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_INST_PARAMS0_REG_ADDR
  * MTC Parameter Register
  */

typedef union {
  struct {
    uint32_t TST_PRGM_MEMORY_SIZE : 10;
    ///< Size of Test Program memory in bytes.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x3FF"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t TDO_MEMORY_SIZE : 10;
    ///< Size of MON_TDO record memory in bytes.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x3FF"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_inst_params0_addr_reg_t;

#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_DEFAULT (0x03ff03ffU)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_RD_MASK (0x03ff03ffU)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_WR_MASK (0x00000000U)


///< Size of Test Program memory in bytes.
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TST_PRGM_MEMORY_SIZE_BF_OFF ( 0)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TST_PRGM_MEMORY_SIZE_BF_WID (10)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TST_PRGM_MEMORY_SIZE_BF_MSK (0x000003FF)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TST_PRGM_MEMORY_SIZE_BF_DEF (0x000003FF)

///< Size of MON_TDO record memory in bytes.
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TDO_MEMORY_SIZE_BF_OFF (16)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TDO_MEMORY_SIZE_BF_WID (10)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TDO_MEMORY_SIZE_BF_MSK (0x03FF0000)
#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_TDO_MEMORY_SIZE_BF_DEF (0x03FF0000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_SCRATCH0_REG_ADDR register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_SCRATCH0_REG_ADDR
  * MTC Scratch 0 Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD0 : 32;
    ///< SW read/write register - Not used by MTC hardware.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_scratch0_addr_reg_t;

#define AXIS_MTC_TOP_SCRATCH0_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_SCRATCH0_ADDR_RD_MASK (0xffffffffU)
#define AXIS_MTC_TOP_SCRATCH0_ADDR_WR_MASK (0xffffffffU)


///< SW read/write register - Not used by MTC hardware.
#define AXIS_MTC_TOP_SCRATCH0_ADDR_SCRATCHPAD0_BF_OFF ( 0)
#define AXIS_MTC_TOP_SCRATCH0_ADDR_SCRATCHPAD0_BF_WID (32)
#define AXIS_MTC_TOP_SCRATCH0_ADDR_SCRATCHPAD0_BF_MSK (0xFFFFFFFF)
#define AXIS_MTC_TOP_SCRATCH0_ADDR_SCRATCHPAD0_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_SCRATCH1_REG_ADDR register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_SCRATCH1_REG_ADDR
  * MTC Scratch 1 Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD1 : 32;
    ///< SW read/write register - Not used by MTC hardware.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_scratch1_addr_reg_t;

#define AXIS_MTC_TOP_SCRATCH1_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_SCRATCH1_ADDR_RD_MASK (0xffffffffU)
#define AXIS_MTC_TOP_SCRATCH1_ADDR_WR_MASK (0xffffffffU)


///< SW read/write register - Not used by MTC hardware.
#define AXIS_MTC_TOP_SCRATCH1_ADDR_SCRATCHPAD1_BF_OFF ( 0)
#define AXIS_MTC_TOP_SCRATCH1_ADDR_SCRATCHPAD1_BF_WID (32)
#define AXIS_MTC_TOP_SCRATCH1_ADDR_SCRATCHPAD1_BF_MSK (0xFFFFFFFF)
#define AXIS_MTC_TOP_SCRATCH1_ADDR_SCRATCHPAD1_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_CONFIG0_REG_ADDR register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_CONFIG0_REG_ADDR
  * MTC Config 0 Register
  */

typedef union {
  struct {
    uint32_t CFG_CONFIG_CTL : 3;
    ///< 0=Board Test Mode[br]
    ///< t         1=MTC Internal Test Mode - Not Supported in Axxia device[br]
    ///< t         2=MTC External Mode (Axxia Included) - Not Supported in
    ///< Axxia device[br]
    ///< t         3=MTC External Mode (Axxia NOT Included)[br]
    ///< t         4=MTC System Test Mode (Axxia Included) - Not Supported
    ///< in Axxia device[br]
    ///< t         5=MTC System Test Mode (Axxia NOT Included)[br]
    ///< t t 6,7=Illegal (defaults to Board Test Mode)[br]
    ///< t t Note:  The MTC hardware inhibits entering  modes identified as
    ///< Not Supported when mtc_axm_selftst_disable control bit = 1.
    ///< t t  tIf a Not Supported mode is programmed the device will default
    ///< to the Board Test Mode.
    ///< t
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t RATE_SEL : 5;
    ///< TCK clock rate based off the internal clk_per clock rate (nominal
    ///< value 200 MHz) </br> 5'd0, others = TCK = Disable </br> 5'd1 t
    ///< = TCK = 20.00 MHz (/10) </br> 5'd2 t      = TCK = 16.67 MHz (/12)
    ///< </br> 5'd3 t      = TCK = 14.28 MHz (/14) </br> 5'd4 t      = TCK
    ///< = 12.50 MHz (/16) </br> 5'd5 t      = TCK = 11.11 MHz (/18) </br>
    ///< 5'd6 t      = TCK = 10.00 MHz (/20) </br> 5'd7 t      = TCK =  9.09
    ///< MHz (/22) </br> 5'd8 t      = TCK =  8.33 MHz (/24) </br> 5'd9 t
    ///< = TCK =  7.14 MHz (/28) </br> 5'd10 t      = TCK =  6.25 MHz (/32)
    ///< </br> 5'd11 t      = TCK =  5.00 MHz (/40) </br> 5'd12 t      = TCK
    ///< =  4.00 MHz (/50) </br> 5'd13 t      = TCK =  3.00 MHz (/66) </br>
    ///< 5'd14 t      = TCK =  2.00 MHz (/100)</br> 5'd15 t      = TCK =  1.00
    ///< MHz (/200) </br> 5'd16 t      = TCK =  0.50 MHz (/400)
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t START_STOPN : 1;
    ///< 1'b1 = Run/Resume [br]
    ///< t t 1'b0 = Stop in current task
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t SINGLE_STEP_EN : 1;
    ///< 1'b1 = Single step mode is enabled; </br> 1'b0 = Single step mode
    ///< is disabled (ignore writes to single_step one-shot register[br]
    ///< t t Note: In single step mode the TAPC state machine cannot stop in
    ///< the Select-DR-Scan state waiting for the user to write the single_step
    ///< one-shot register.
    ///< t t Therefore, the end-state-bit[28] value is ignored in this mode
    ///< and always pauses in run-test/idle state.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t LOOP_EN : 1;
    ///< 1'b1 = When an End-of-test command is received the test program will
    ///< continue to execute from location 0 of the memory instead of halting.
    ///< </br> This assumes the test program fits within the 256 x 32 bit memory.
    ///< </br> 1'b0 = In normal operation the MTC_TESTGEN block will loop through
    ///< the 256 location program memory until an end-of-test command is detected.
    ///< </br> Once detected the program will stop execution in its current
    ///< state (Run/Test Idle, pause-IR, or pause-DR).
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t MTC_MPU_TDO_INACTIVE_EN : 1;
    ///< 1) When Config mode Includes the Axxia device in the scan chain. </br>
    ///< 1'b0 = MTC_TDO_ENB = 1'b1; TDO Output buffer always enabled. </br>
    ///< 1'b1 = MTC_TDO_ENB = JTC_TDO_ENB; TDO Output buffer follows the JTC
    ///< control signal. </br> 2) When Config mode Excludes the Axxia device
    ///< in the scan chain. </br> 1'b0 = MTC_TDO_ENB = 1'b1; TDO Output buffer
    ///< always enabled. </br> 1'b1 = MTC_TDO_ENB = Active (1'b1) when in shift-DR
    ///< or shift-IR states and inactive (1'b0) in all other states (tri-state
    ///< capable).
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_cfg0_addr_reg_t;

#define AXIS_MTC_TOP_CFG0_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_CFG0_ADDR_RD_MASK (0x0000f1f7U)
#define AXIS_MTC_TOP_CFG0_ADDR_WR_MASK (0x0000f1f7U)


///< 0=Board Test Mode[br]
///< t         1=MTC Internal Test Mode - Not Supported in Axxia device[br]
///< t         2=MTC External Mode (Axxia Included) - Not Supported in
///< Axxia device[br]
///< t         3=MTC External Mode (Axxia NOT Included)[br]
///< t         4=MTC System Test Mode (Axxia Included) - Not Supported
///< in Axxia device[br]
///< t         5=MTC System Test Mode (Axxia NOT Included)[br]
///< t t 6,7=Illegal (defaults to Board Test Mode)[br]
///< t t Note:  The MTC hardware inhibits entering  modes identified as
///< Not Supported when mtc_axm_selftst_disable control bit = 1.
///< t t  tIf a Not Supported mode is programmed the device will default
///< to the Board Test Mode.
///< t
#define AXIS_MTC_TOP_CFG0_ADDR_CFG_CTL_BF_OFF ( 0)
#define AXIS_MTC_TOP_CFG0_ADDR_CFG_CTL_BF_WID ( 3)
#define AXIS_MTC_TOP_CFG0_ADDR_CFG_CTL_BF_MSK (0x00000007)
#define AXIS_MTC_TOP_CFG0_ADDR_CFG_CTL_BF_DEF (0x00000000)

///< TCK clock rate based off the internal clk_per clock rate (nominal
///< value 200 MHz) </br> 5'd0, others = TCK = Disable </br> 5'd1 t
///< = TCK = 20.00 MHz (/10) </br> 5'd2 t      = TCK = 16.67 MHz (/12)
///< </br> 5'd3 t      = TCK = 14.28 MHz (/14) </br> 5'd4 t      = TCK
///< = 12.50 MHz (/16) </br> 5'd5 t      = TCK = 11.11 MHz (/18) </br>
///< 5'd6 t      = TCK = 10.00 MHz (/20) </br> 5'd7 t      = TCK =  9.09
///< MHz (/22) </br> 5'd8 t      = TCK =  8.33 MHz (/24) </br> 5'd9 t
///< = TCK =  7.14 MHz (/28) </br> 5'd10 t      = TCK =  6.25 MHz (/32)
///< </br> 5'd11 t      = TCK =  5.00 MHz (/40) </br> 5'd12 t      = TCK
///< =  4.00 MHz (/50) </br> 5'd13 t      = TCK =  3.00 MHz (/66) </br>
///< 5'd14 t      = TCK =  2.00 MHz (/100)</br> 5'd15 t      = TCK =  1.00
///< MHz (/200) </br> 5'd16 t      = TCK =  0.50 MHz (/400)
#define AXIS_MTC_TOP_CFG0_ADDR_RATE_SEL_BF_OFF ( 4)
#define AXIS_MTC_TOP_CFG0_ADDR_RATE_SEL_BF_WID ( 5)
#define AXIS_MTC_TOP_CFG0_ADDR_RATE_SEL_BF_MSK (0x000001F0)
#define AXIS_MTC_TOP_CFG0_ADDR_RATE_SEL_BF_DEF (0x00000000)

///< 1'b1 = Run/Resume [br]
///< t t 1'b0 = Stop in current task
#define AXIS_MTC_TOP_CFG0_ADDR_START_STOPN_BF_OFF (12)
#define AXIS_MTC_TOP_CFG0_ADDR_START_STOPN_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG0_ADDR_START_STOPN_BF_MSK (0x00001000)
#define AXIS_MTC_TOP_CFG0_ADDR_START_STOPN_BF_DEF (0x00000000)

///< 1'b1 = Single step mode is enabled; </br> 1'b0 = Single step mode
///< is disabled (ignore writes to single_step one-shot register[br]
///< t t Note: In single step mode the TAPC state machine cannot stop in
///< the Select-DR-Scan state waiting for the user to write the single_step
///< one-shot register.
///< t t Therefore, the end-state-bit[28] value is ignored in this mode
///< and always pauses in run-test/idle state.
#define AXIS_MTC_TOP_CFG0_ADDR_SINGLE_STEP_EN_BF_OFF (13)
#define AXIS_MTC_TOP_CFG0_ADDR_SINGLE_STEP_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG0_ADDR_SINGLE_STEP_EN_BF_MSK (0x00002000)
#define AXIS_MTC_TOP_CFG0_ADDR_SINGLE_STEP_EN_BF_DEF (0x00000000)

///< 1'b1 = When an End-of-test command is received the test program will
///< continue to execute from location 0 of the memory instead of halting.
///< </br> This assumes the test program fits within the 256 x 32 bit memory.
///< </br> 1'b0 = In normal operation the MTC_TESTGEN block will loop through
///< the 256 location program memory until an end-of-test command is detected.
///< </br> Once detected the program will stop execution in its current
///< state (Run/Test Idle, pause-IR, or pause-DR).
#define AXIS_MTC_TOP_CFG0_ADDR_LOOP_EN_BF_OFF (14)
#define AXIS_MTC_TOP_CFG0_ADDR_LOOP_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG0_ADDR_LOOP_EN_BF_MSK (0x00004000)
#define AXIS_MTC_TOP_CFG0_ADDR_LOOP_EN_BF_DEF (0x00000000)

///< 1) When Config mode Includes the Axxia device in the scan chain. </br>
///< 1'b0 = MTC_TDO_ENB = 1'b1; TDO Output buffer always enabled. </br>
///< 1'b1 = MTC_TDO_ENB = JTC_TDO_ENB; TDO Output buffer follows the JTC
///< control signal. </br> 2) When Config mode Excludes the Axxia device
///< in the scan chain. </br> 1'b0 = MTC_TDO_ENB = 1'b1; TDO Output buffer
///< always enabled. </br> 1'b1 = MTC_TDO_ENB = Active (1'b1) when in shift-DR
///< or shift-IR states and inactive (1'b0) in all other states (tri-state
///< capable).
#define AXIS_MTC_TOP_CFG0_ADDR_MTC_MPU_TDO_INACTIVE_EN_BF_OFF (15)
#define AXIS_MTC_TOP_CFG0_ADDR_MTC_MPU_TDO_INACTIVE_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG0_ADDR_MTC_MPU_TDO_INACTIVE_EN_BF_MSK (0x00008000)
#define AXIS_MTC_TOP_CFG0_ADDR_MTC_MPU_TDO_INACTIVE_EN_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_CONFIG1_REG_ADDR register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_CONFIG1_REG_ADDR
  * MTC Config 1 Register
  */

typedef union {
  struct {
    uint32_t SW_GATE_TCK : 1;
    ///< 1'b1=Gap TCK output clock in all TAPC states; [br]
    ///< t t 1'b0=Don't Gap TCK clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SW_GATE_TCK_TEST_LOGIC_RESET : 1;
    ///< 1'b1=Gap TCK output clock in Test-Logic-Reset State and start_stopn
    ///< = STOP(1'b0) Only; [br]
    ///< t t 1'b0=Don't Gap TCK clock
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t RECORD_TDO_IN_SHIFT_DR_STATE : 1;
    ///< 1'b1=Capture MON_TDO Input data when in shift-DR state,[br]
    ///< t t 1'b0=Don't Capture data in shift-DR state.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RECORD_TDO_IN_SHIFT_IR_STATE : 1;
    ///< 1'b1=Capture MON_TDO Input data when in shift-IR state,[br]
    ///< t t 1'b0=Don't Capture data in shift-IR state.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_cfg1_addr_reg_t;

#define AXIS_MTC_TOP_CFG1_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_CFG1_ADDR_RD_MASK (0x00000033U)
#define AXIS_MTC_TOP_CFG1_ADDR_WR_MASK (0x00000033U)


///< 1'b1=Gap TCK output clock in all TAPC states; [br]
///< t t 1'b0=Don't Gap TCK clock
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_BF_OFF ( 0)
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_BF_DEF (0x00000000)

///< 1'b1=Gap TCK output clock in Test-Logic-Reset State and start_stopn
///< = STOP(1'b0) Only; [br]
///< t t 1'b0=Don't Gap TCK clock
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_TEST_LOGIC_RST_BF_OFF ( 1)
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_TEST_LOGIC_RST_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_TEST_LOGIC_RST_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_CFG1_ADDR_SW_GATE_TCK_TEST_LOGIC_RST_BF_DEF (0x00000000)

///< 1'b1=Capture MON_TDO Input data when in shift-DR state,[br]
///< t t 1'b0=Don't Capture data in shift-DR state.
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_DR_STATE_BF_OFF ( 4)
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_DR_STATE_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_DR_STATE_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_DR_STATE_BF_DEF (0x00000000)

///< 1'b1=Capture MON_TDO Input data when in shift-IR state,[br]
///< t t 1'b0=Don't Capture data in shift-IR state.
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_IR_STATE_BF_OFF ( 5)
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_IR_STATE_BF_WID ( 1)
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_IR_STATE_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_CFG1_ADDR_RECORD_TDO_IN_SHIFT_IR_STATE_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_STATUS1_REG_ADDR register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_STATUS1_REG_ADDR
  * MTC Status 1 Register
  */

typedef union {
  struct {
    uint32_t PRGM_MEM_RD_ADDR : 8;
    ///< Next Address to be read from program memory </br> In the pause state
    ///< this address should be written with the next task to be processed
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TDO_RECORD_RAM_LAST_ADDR : 8;
    ///< Last address within the MON_TDO capture memory that contains valid
    ///< data. </br> Addresses are filled started at bit location 0 (MSB) </br>
    ///< 31(LSB); address 1, bit 0 </br> 31, ...
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t TDO_RECORD_RAM_BIT_COUNTER : 14;
    ///< Number of Valid Bits in the MON_TDO capture memory
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_stat1_addr_reg_t;

#define AXIS_MTC_TOP_STAT1_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_STAT1_ADDR_RD_MASK (0x3fffffffU)
#define AXIS_MTC_TOP_STAT1_ADDR_WR_MASK (0x00000000U)


///< Next Address to be read from program memory </br> In the pause state
///< this address should be written with the next task to be processed
#define AXIS_MTC_TOP_STAT1_ADDR_PRGM_MEM_RD_ADDR_BF_OFF ( 0)
#define AXIS_MTC_TOP_STAT1_ADDR_PRGM_MEM_RD_ADDR_BF_WID ( 8)
#define AXIS_MTC_TOP_STAT1_ADDR_PRGM_MEM_RD_ADDR_BF_MSK (0x000000FF)
#define AXIS_MTC_TOP_STAT1_ADDR_PRGM_MEM_RD_ADDR_BF_DEF (0x00000000)

///< Last address within the MON_TDO capture memory that contains valid
///< data. </br> Addresses are filled started at bit location 0 (MSB) </br>
///< 31(LSB); address 1, bit 0 </br> 31, ...
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_LAST_ADDR_BF_OFF ( 8)
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_LAST_ADDR_BF_WID ( 8)
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_LAST_ADDR_BF_MSK (0x0000FF00)
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_LAST_ADDR_BF_DEF (0x00000000)

///< Number of Valid Bits in the MON_TDO capture memory
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_BIT_CNTER_BF_OFF (16)
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_BIT_CNTER_BF_WID (14)
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_BIT_CNTER_BF_MSK (0x3FFF0000)
#define AXIS_MTC_TOP_STAT1_ADDR_TDO_RECORD_RAM_BIT_CNTER_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_STATUS2_REG_ADDR register description at address offset 0x24
  *
  * Register default value:        0x40000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_STATUS2_REG_ADDR
  * MTC Status 2 Register
  */

typedef union {
  struct {
    uint32_t START_STOPN : 1;
    ///< Busy Bit
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE : 1;
    ///< Pause Bit
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CURR_TASK_END_OF_TEST : 1;
    ///< Test Finished
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t CURR_TASK_INST_I : 4;
    ///< Current task value.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PAUSE_IN_SHIFTDR : 1;
    ///< TAPC paused in pause-DR state to allow reloading of TESTGEN memory
    ///< with more data.
    ///< t t The one-shot cont_after_pause, single_step or the sw_reset register
    ///< must be written to exit this state.[br][br]
    ///< t t pause_in_shiftdr = [br]
    ///< t t [sp][sp][sp][sp][sp](curr_task_load_jtag_data_reg_and_pause_in_pause_dr
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr_and_stop_in_pause_dr)
    ///< && curr_tapc_pause_DR);[br]
    ///< t t
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t PAUSE_IN_SHIFTIR : 1;
    ///< TAPC paused in pause-IR state to allow reloading of TESTGEN memory
    ///< with more instruction data.
    ///< t t The one-shot cont_after_pause, single_step or the sw_reset register
    ///< must be written to exit this state.[br][br]
    ///< t t pause_in_shiftir = [br]
    ///< t t [sp][sp][sp][sp][sp](curr_task_load_jtag_instr_reg_and_pause_in_pause_ir
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir_and_stop_in_pause_ir)
    ///< && curr_tapc_pause_IR);[br]
    ///< t
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t TESTGEN_STATE_MACHINE_PAUSED : 1;
    ///< TESTGEN state machine is paused - valid in single step mode and pause
    ///< modes
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t PAUSE_IN_TEST_LOGIC_RESET_TCK_OFF : 1;
    ///< TESTGEN State Machine is Paused in the Test-Logic-Reset state because
    ///< TCK clock is gapped.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t PAUSE_IN_RUN_TEST_IDLE_TCK_OFF : 1;
    ///< TESTGEN State Machine is Paused in the Run-Test/Idle state because
    ///< TCK clock is gapped.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t PAUSE_IN_SHIFTDR_TCK_OFF : 1;
    ///< TAPC paused in pause-DR state with the TCK clock off to allow reloading
    ///< of TESTGEN memory with more data.
    ///< The one-shot cont_after_pause, single_step or the sw_reset register
    ///< must be written to exit this state.[br][br]
    ///< pause_in_shiftdr = [br]
    ///< [sp][sp][sp][sp][sp](curr_task_load_jtag_data_reg_and_pause_in_pause_dr
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr_and_stop_in_pause_dr)
    ///< && curr_tapc_pause_DR) & curr_task_gap_tck_en;[br]
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t PAUSE_IN_SHIFTIR_TCK_OFF : 1;
    ///< TAPC paused in pause-IR state with the TCK clock off to allow reloading
    ///< of TESTGEN memory with more instruction data.
    ///< The one-shot cont_after_pause, single_step or the sw_reset register
    ///< must be written to exit this state.[br][br]
    ///< pause_in_shiftir = [br]
    ///< [sp][sp][sp][sp][sp](curr_task_load_jtag_instr_reg_and_pause_in_pause_ir
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir
    ///< |[br]
    ///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir_and_stop_in_pause_ir)
    ///< && curr_tapc_pause_IR) & curr_task_gap_tck_en;[br]
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TST_GEN_STATE_ERROR : 1;
    ///< Fatal Error Detected while Processing a Task resulting in the MTC
    ///< block halting.
    ///< t t Once the program is fixed a SW reset is needed to restart the
    ///< block.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t NXT_TASK_ERROR : 1;
    ///< Fatal Error Detected while Processing a Task resulting in the MTC
    ///< block halting.
    ///< t t Once the program is fixed a SW reset is needed to restart the
    ///< block.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t MTC_AXM_SELFTST_DISABLE : 1;
    ///< 1'b1=Disable all MTC configuration modes that allow access to the
    ///< internal JTC controller.[br]
    ///< t t 1'b0=Allow all modes.[br]
    ///< t t Note: Control signal from internal EFUSE module.
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x1"
    uint32_t MTC_CMPL_ENABLEN : 1;
    ///< 1'b0=Disable MTC Block from Driving JTAG primary IO,[br]
    ///< t t 1'b1=Allow cfg_config_ctl[2:0] register to select the mode of
    ///< the MTC block.[br]
    ///< t t Note: Control signal from primary device input pin.
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_stat2_addr_reg_t;

#define AXIS_MTC_TOP_STAT2_ADDR_DEFAULT (0x40000000U)
#define AXIS_MTC_TOP_STAT2_ADDR_RD_MASK (0xc0037ff7U)
#define AXIS_MTC_TOP_STAT2_ADDR_WR_MASK (0x00000000U)


///< Busy Bit
#define AXIS_MTC_TOP_STAT2_ADDR_START_STOPN_BF_OFF ( 0)
#define AXIS_MTC_TOP_STAT2_ADDR_START_STOPN_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_START_STOPN_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_STAT2_ADDR_START_STOPN_BF_DEF (0x00000000)

///< Pause Bit
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_OFF ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_DEF (0x00000000)

///< Test Finished
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_END_OF_TEST_BF_OFF ( 2)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_END_OF_TEST_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_END_OF_TEST_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_END_OF_TEST_BF_DEF (0x00000000)

///< Current task value.
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_INST_I_BF_OFF ( 4)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_INST_I_BF_WID ( 4)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_INST_I_BF_MSK (0x000000F0)
#define AXIS_MTC_TOP_STAT2_ADDR_CURR_TASK_INST_I_BF_DEF (0x00000000)

///< TAPC paused in pause-DR state to allow reloading of TESTGEN memory
///< with more data.
///< t t The one-shot cont_after_pause, single_step or the sw_reset register
///< must be written to exit this state.[br][br]
///< t t pause_in_shiftdr = [br]
///< t t [sp][sp][sp][sp][sp](curr_task_load_jtag_data_reg_and_pause_in_pause_dr
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr_and_stop_in_pause_dr)
///< && curr_tapc_pause_DR);[br]
///< t t
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_BF_OFF ( 8)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_BF_MSK (0x00000100)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_BF_DEF (0x00000000)

///< TAPC paused in pause-IR state to allow reloading of TESTGEN memory
///< with more instruction data.
///< t t The one-shot cont_after_pause, single_step or the sw_reset register
///< must be written to exit this state.[br][br]
///< t t pause_in_shiftir = [br]
///< t t [sp][sp][sp][sp][sp](curr_task_load_jtag_instr_reg_and_pause_in_pause_ir
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir_and_stop_in_pause_ir)
///< && curr_tapc_pause_IR);[br]
///< t
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_BF_OFF ( 9)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_BF_MSK (0x00000200)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_BF_DEF (0x00000000)

///< TESTGEN state machine is paused - valid in single step mode and pause
///< modes
#define AXIS_MTC_TOP_STAT2_ADDR_TESTGEN_STATE_MACHINE_PAUSED_BF_OFF (10)
#define AXIS_MTC_TOP_STAT2_ADDR_TESTGEN_STATE_MACHINE_PAUSED_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_TESTGEN_STATE_MACHINE_PAUSED_BF_MSK (0x00000400)
#define AXIS_MTC_TOP_STAT2_ADDR_TESTGEN_STATE_MACHINE_PAUSED_BF_DEF (0x00000000)

///< TESTGEN State Machine is Paused in the Test-Logic-Reset state because
///< TCK clock is gapped.
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_TEST_LOGIC_RST_TCK_OFF_BF_OFF (11)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_TEST_LOGIC_RST_TCK_OFF_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_TEST_LOGIC_RST_TCK_OFF_BF_MSK (0x00000800)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_TEST_LOGIC_RST_TCK_OFF_BF_DEF (0x00000000)

///< TESTGEN State Machine is Paused in the Run-Test/Idle state because
///< TCK clock is gapped.
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_RUN_TEST_IDLE_TCK_OFF_BF_OFF (12)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_RUN_TEST_IDLE_TCK_OFF_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_RUN_TEST_IDLE_TCK_OFF_BF_MSK (0x00001000)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_RUN_TEST_IDLE_TCK_OFF_BF_DEF (0x00000000)

///< TAPC paused in pause-DR state with the TCK clock off to allow reloading
///< of TESTGEN memory with more data.
///< The one-shot cont_after_pause, single_step or the sw_reset register
///< must be written to exit this state.[br][br]
///< pause_in_shiftdr = [br]
///< [sp][sp][sp][sp][sp](curr_task_load_jtag_data_reg_and_pause_in_pause_dr
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_data_reg_continue_from_pause_dr_and_stop_in_pause_dr)
///< && curr_tapc_pause_DR) & curr_task_gap_tck_en;[br]
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_TCK_OFF_BF_OFF (13)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_TCK_OFF_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_TCK_OFF_BF_MSK (0x00002000)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTDR_TCK_OFF_BF_DEF (0x00000000)

///< TAPC paused in pause-IR state with the TCK clock off to allow reloading
///< of TESTGEN memory with more instruction data.
///< The one-shot cont_after_pause, single_step or the sw_reset register
///< must be written to exit this state.[br][br]
///< pause_in_shiftir = [br]
///< [sp][sp][sp][sp][sp](curr_task_load_jtag_instr_reg_and_pause_in_pause_ir
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir
///< |[br]
///< [sp][sp][sp][sp][sp][sp]curr_task_load_jtag_instr_reg_continue_from_pause_ir_and_stop_in_pause_ir)
///< && curr_tapc_pause_IR) & curr_task_gap_tck_en;[br]
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_TCK_OFF_BF_OFF (14)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_TCK_OFF_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_TCK_OFF_BF_MSK (0x00004000)
#define AXIS_MTC_TOP_STAT2_ADDR_PAUSE_IN_SHIFTIR_TCK_OFF_BF_DEF (0x00000000)

///< Fatal Error Detected while Processing a Task resulting in the MTC
///< block halting.
///< t t Once the program is fixed a SW reset is needed to restart the
///< block.
#define AXIS_MTC_TOP_STAT2_ADDR_TST_GEN_STATE_ERR_BF_OFF (16)
#define AXIS_MTC_TOP_STAT2_ADDR_TST_GEN_STATE_ERR_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_TST_GEN_STATE_ERR_BF_MSK (0x00010000)
#define AXIS_MTC_TOP_STAT2_ADDR_TST_GEN_STATE_ERR_BF_DEF (0x00000000)

///< Fatal Error Detected while Processing a Task resulting in the MTC
///< block halting.
///< t t Once the program is fixed a SW reset is needed to restart the
///< block.
#define AXIS_MTC_TOP_STAT2_ADDR_NXT_TASK_ERR_BF_OFF (17)
#define AXIS_MTC_TOP_STAT2_ADDR_NXT_TASK_ERR_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_NXT_TASK_ERR_BF_MSK (0x00020000)
#define AXIS_MTC_TOP_STAT2_ADDR_NXT_TASK_ERR_BF_DEF (0x00000000)

///< 1'b1=Disable all MTC configuration modes that allow access to the
///< internal JTC controller.[br]
///< t t 1'b0=Allow all modes.[br]
///< t t Note: Control signal from internal EFUSE module.
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_AXM_SELFTST_DIS_BF_OFF (30)
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_AXM_SELFTST_DIS_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_AXM_SELFTST_DIS_BF_MSK (0x40000000)
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_AXM_SELFTST_DIS_BF_DEF (0x40000000)

///< 1'b0=Disable MTC Block from Driving JTAG primary IO,[br]
///< t t 1'b1=Allow cfg_config_ctl[2:0] register to select the mode of
///< the MTC block.[br]
///< t t Note: Control signal from primary device input pin.
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_CMPL_ENN_BF_OFF (31)
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_CMPL_ENN_BF_WID ( 1)
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_CMPL_ENN_BF_MSK (0x80000000)
#define AXIS_MTC_TOP_STAT2_ADDR_MTC_CMPL_ENN_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_EXECUTE1_REG_ADDR register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_EXECUTE1_REG_ADDR
  * MTC EXECUTE Register - One-Shot Registers
  */

typedef union {
  struct {
    uint32_t SINGLE_STEP : 1;
    ///< Write to 1 to allow the MTC_TESTGEN state machine to process the next
    ///< command.
    ///< t         In the single step mode the state machine will stop after
    ///< each task is processed.[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CONT_AFTER_PAUSE : 1;
    ///< Write to 1 to allow the MTC TESTGEN state machine to continue from
    ///< the pause-IR or pause-DR states.[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SW_RESET : 1;
    ///< Write to 1 to reset the MTC TESTGEN, MTC MON_TDO CAPTURE state machines
    ///< and to recover from the state machine halting due to a command error.[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TDO_CAPTURE_RESET : 1;
    ///< Write to 1 to reset the MTC MON_TDO CAPTURE state machine. All variables
    ///< set to zero (memory write address, tdo capture bit count, etc).[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TDO_FLUSH_CAPTURE_DATA : 1;
    ///< Write to 1 to force the MTC MON_TDO CAPTURE state machine to write
    ///< any remaining data to memory. [br]
    ///< t t(Wait > 1 TCK clock period after pause_in_shiftdr alarm goes active
    ///< before writing this register). [br]
    ///< t t This signal should be written before the tdo_capture_reset bit
    ///< is set.[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t EXT_PRGM_MEM_CFG_INIT : 1;
    ///< Write to 1 to force the MTC_AXI_MSTR module to reset. Same action
    ///< as a sw_reset but only this module is affected.[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t EXT_PRGM_MEM_WINDOW_CNT_RST : 1;
    ///< Write to 1 to will reset the window count registers in the MTC_TDO_RECORD
    ///< block.[br]
    ///< t t Self clearing bit.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_execute1_addr_reg_t;

#define AXIS_MTC_TOP_EXECUTE1_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_RD_MASK (0x000000dfU)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_WR_MASK (0x000000dfU)


///< Write to 1 to allow the MTC_TESTGEN state machine to process the next
///< command.
///< t         In the single step mode the state machine will stop after
///< each task is processed.[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SINGLE_STEP_BF_OFF ( 0)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SINGLE_STEP_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SINGLE_STEP_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SINGLE_STEP_BF_DEF (0x00000000)

///< Write to 1 to allow the MTC TESTGEN state machine to continue from
///< the pause-IR or pause-DR states.[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_CONT_AFTER_PAUSE_BF_OFF ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_CONT_AFTER_PAUSE_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_CONT_AFTER_PAUSE_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_CONT_AFTER_PAUSE_BF_DEF (0x00000000)

///< Write to 1 to reset the MTC TESTGEN, MTC MON_TDO CAPTURE state machines
///< and to recover from the state machine halting due to a command error.[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SW_RST_BF_OFF ( 2)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SW_RST_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SW_RST_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_SW_RST_BF_DEF (0x00000000)

///< Write to 1 to reset the MTC MON_TDO CAPTURE state machine. All variables
///< set to zero (memory write address, tdo capture bit count, etc).[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_CAP_RST_BF_OFF ( 3)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_CAP_RST_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_CAP_RST_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_CAP_RST_BF_DEF (0x00000000)

///< Write to 1 to force the MTC MON_TDO CAPTURE state machine to write
///< any remaining data to memory. [br]
///< t t(Wait > 1 TCK clock period after pause_in_shiftdr alarm goes active
///< before writing this register). [br]
///< t t This signal should be written before the tdo_capture_reset bit
///< is set.[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_FLUSH_CAP_DATA_BF_OFF ( 4)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_FLUSH_CAP_DATA_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_FLUSH_CAP_DATA_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_TDO_FLUSH_CAP_DATA_BF_DEF (0x00000000)

///< Write to 1 to force the MTC_AXI_MSTR module to reset. Same action
///< as a sw_reset but only this module is affected.[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_CFG_INIT_BF_OFF ( 6)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_CFG_INIT_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_CFG_INIT_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_CFG_INIT_BF_DEF (0x00000000)

///< Write to 1 to will reset the window count registers in the MTC_TDO_RECORD
///< block.[br]
///< t t Self clearing bit.
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_WND_CNT_RST_BF_OFF ( 7)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_WND_CNT_RST_BF_WID ( 1)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_WND_CNT_RST_BF_MSK (0x00000080)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_EXT_PRGM_MEM_WND_CNT_RST_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_MEM_INIT_REG_ADDR register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_MEM_INIT_REG_ADDR
  * MTC MEM Init Register
  */

typedef union {
  struct {
    uint32_t TST_PRGM_MEM_INIT_DONE : 1;
    ///< Memory initialization done. When set, the program memory has been
    ///< initialized to zero or one by hardware following setting
    ///< t t the tst_prgm_mem_do_mem_init bit and tst_prgm_mem_ini_value of
    ///< this register.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TST_PRGM_MEM_DO_MEM_INIT : 1;
    ///< Do memory initialization. When set, the program memory is initialized
    ///< to either all zero or ones depending
    ///< on tst_prgm_mem_ini_value value by hardware. This bit clears itself
    ///< one cycle after being set
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TST_PRGM_MEM_INI_VALUE : 1;
    ///< Memory init value for program memory
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TDO_CAPTURE_MEM_INIT_DONE : 1;
    ///< Memory initialization done. When set, the program memory has been
    ///< initialized to zero or one by hardware following setting
    ///< tthe tst_prgm_mem_do_mem_init bit and tst_prgm_mem_ini_value of this
    ///< register.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t TDO_CAPTURE_MEM_DO_MEM_INIT : 1;
    ///< Do memory initialization. When set, the capture memory is initialized
    ///< to either zero or one depending
    ///< t t       on tdo_capture_mem_ini_value value by hardware. This bit
    ///< clears itself one cycle after being set
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TDO_CAPTURE_MEM_INI_VALUE : 1;
    ///< Memory init value for capture memory
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_mem_init_addr_reg_t;

#define AXIS_MTC_TOP_MEM_INIT_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_RD_MASK (0x00000707U)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_WR_MASK (0x00000606U)


///< Memory initialization done. When set, the program memory has been
///< initialized to zero or one by hardware following setting
///< t t the tst_prgm_mem_do_mem_init bit and tst_prgm_mem_ini_value of
///< this register.
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INIT_DONE_BF_OFF ( 0)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INIT_DONE_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INIT_DONE_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INIT_DONE_BF_DEF (0x00000000)

///< Do memory initialization. When set, the program memory is initialized
///< to either all zero or ones depending
///< on tst_prgm_mem_ini_value value by hardware. This bit clears itself
///< one cycle after being set
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_DO_MEM_INIT_BF_OFF ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_DO_MEM_INIT_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_DO_MEM_INIT_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_DO_MEM_INIT_BF_DEF (0x00000000)

///< Memory init value for program memory
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INI_VAL_BF_OFF ( 2)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INI_VAL_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INI_VAL_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TST_PRGM_MEM_INI_VAL_BF_DEF (0x00000000)

///< Memory initialization done. When set, the program memory has been
///< initialized to zero or one by hardware following setting
///< tthe tst_prgm_mem_do_mem_init bit and tst_prgm_mem_ini_value of this
///< register.
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INIT_DONE_BF_OFF ( 8)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INIT_DONE_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INIT_DONE_BF_MSK (0x00000100)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INIT_DONE_BF_DEF (0x00000000)

///< Do memory initialization. When set, the capture memory is initialized
///< to either zero or one depending
///< t t       on tdo_capture_mem_ini_value value by hardware. This bit
///< clears itself one cycle after being set
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_DO_MEM_INIT_BF_OFF ( 9)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_DO_MEM_INIT_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_DO_MEM_INIT_BF_MSK (0x00000200)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_DO_MEM_INIT_BF_DEF (0x00000000)

///< Memory init value for capture memory
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INI_VAL_BF_OFF (10)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INI_VAL_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INI_VAL_BF_MSK (0x00000400)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_TDO_CAP_MEM_INI_VAL_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_ECC_DISABLE_REG_ADDR register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_ECC_DISABLE_REG_ADDR
  * MTC MEM Disable ECC Register
  */

typedef union {
  struct {
    uint32_t DISABLE_ECC_MTC_TDO_RECORD_MEM : 1;
    ///< This bit disables the ECC correction for mtc_mon_tdo_record_mem memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DISABLE_ECC_MTC_TST_PRGM_MEM : 1;
    ///< This bit disables the ECC correction for mtc_tst_prgm_mem memory.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_ecc_dis_addr_reg_t;

#define AXIS_MTC_TOP_ECC_DIS_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_RD_MASK (0x00000003U)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_WR_MASK (0x00000003U)


///< This bit disables the ECC correction for mtc_mon_tdo_record_mem memory.
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TDO_RECORD_MEM_BF_OFF ( 0)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TDO_RECORD_MEM_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TDO_RECORD_MEM_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TDO_RECORD_MEM_BF_DEF (0x00000000)

///< This bit disables the ECC correction for mtc_tst_prgm_mem memory.
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TST_PRGM_MEM_BF_OFF ( 1)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TST_PRGM_MEM_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TST_PRGM_MEM_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_DIS_ECC_MTC_TST_PRGM_MEM_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_ECC_INVERT_EN_REG_ADDR register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_ECC_INVERT_EN_REG_ADDR
  * MTC MEM Invert Enable ECC Register
  */

typedef union {
  struct {
    uint32_t ECC_INVERT_EN_TC_TDO_RECORD_MEM : 1;
    ///< ECC invert enable for mtc_mon_tdo_record memory.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t ECC_INVERT_EN_MTC_TST_PRGM_MEM : 1;
    ///< ECC invert enable for mtc_tst_prgm_mem memory.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_ecc_invert_en_addr_reg_t;

#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_RD_MASK (0x00000003U)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_WR_MASK (0x00000003U)


///< ECC invert enable for mtc_mon_tdo_record memory.
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_TC_TDO_RECORD_MEM_BF_OFF ( 0)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_TC_TDO_RECORD_MEM_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_TC_TDO_RECORD_MEM_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_TC_TDO_RECORD_MEM_BF_DEF (0x00000000)

///< ECC invert enable for mtc_tst_prgm_mem memory.
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_MTC_TST_PRGM_MEM_BF_OFF ( 1)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_MTC_TST_PRGM_MEM_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_MTC_TST_PRGM_MEM_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ECC_INVERT_EN_MTC_TST_PRGM_MEM_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_ECC_INVERT_REG_ADDR register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_ECC_INVERT_REG_ADDR
  * MTC MEM Invert ECC Register
  */

typedef union {
  struct {
    uint32_t ECC_INVERT_REG : 7;
    ///< Each memory type uses appropriate number of bits in this field starting
    ///< from right to left.
    ///< t   t Set one bit to cause a single bit error, two bits to cause a
    ///< double bit error.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_ecc_invert_addr_reg_t;

#define AXIS_MTC_TOP_ECC_INVERT_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_WR_MASK (0x0000007fU)


///< Each memory type uses appropriate number of bits in this field starting
///< from right to left.
///< t   t Set one bit to cause a single bit error, two bits to cause a
///< double bit error.
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_ECC_INVERT_BF_OFF ( 0)
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_ECC_INVERT_BF_WID ( 7)
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_ECC_INVERT_BF_MSK (0x0000007F)
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_ECC_INVERT_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_TSTGEN_INT_MTC_TSTGEN_INTR_STATUS register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/mtc_tstgen_int/MTC_TSTGEN_INTR_STATUS
  * Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t CURR_TASK_END_OF_TEST_OS : 1;
    ///< In End-of-Test Task or External Program Memory Done (mtc_done) Status
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t PAUSE_IN_PAUSEDR_OS : 1;
    ///< Paused in Pause-DR state Status
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t PAUSE_IN_PAUSEIR_OS : 1;
    ///< Paused in Pause-IR state Status
    ///< AccessType="RW/1C/V" BitOffset="2" ResetValue="0x0"
    uint32_t CONT_AFTER_PAUSE_OS : 1;
    ///< Active anytime the TESTGEN state machine is paused. A write to cont_after_pause
    ///< or
    ///< t t t tsingle_step one-shot registers will release the state machine
    ///< from the paused state. Status
    ///< AccessType="RW/1C/V" BitOffset="3" ResetValue="0x0"
    uint32_t TST_GEN_STATE_ERROR_OS : 1;
    ///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
    ///< is halted at the failure.
    ///< t t t        The errored task must be fixed and the sw_reset signal
    ///< written to restart the test. Status
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t NXT_TASK_ERROR_OS : 1;
    ///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
    ///< is halted at that failure.
    ///< t t t        The errored task must be fixed and the sw_reset signal
    ///< written to restart the test. Status
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t TDO_RECORD_RAM_ADDR_OVERFLOW_OS : 1;
    ///< The MON_TDO Capture memory overflowed. Data is lost when this alarm
    ///< occurs. Status
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_tstgen_intr_stat_reg_t;

#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_WR_MASK (0x0000007fU)


///< In End-of-Test Task or External Program Memory Done (mtc_done) Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CURR_TASK_END_OF_TEST_OS_BF_OFF ( 0)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CURR_TASK_END_OF_TEST_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CURR_TASK_END_OF_TEST_OS_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CURR_TASK_END_OF_TEST_OS_BF_DEF (0x00000000)

///< Paused in Pause-DR state Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEDR_OS_BF_OFF ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEDR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEDR_OS_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEDR_OS_BF_DEF (0x00000000)

///< Paused in Pause-IR state Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEIR_OS_BF_OFF ( 2)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEIR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEIR_OS_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_PAUSE_IN_PAUSEIR_OS_BF_DEF (0x00000000)

///< Active anytime the TESTGEN state machine is paused. A write to cont_after_pause
///< or
///< t t t tsingle_step one-shot registers will release the state machine
///< from the paused state. Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CONT_AFTER_PAUSE_OS_BF_OFF ( 3)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CONT_AFTER_PAUSE_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CONT_AFTER_PAUSE_OS_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_CONT_AFTER_PAUSE_OS_BF_DEF (0x00000000)

///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
///< is halted at the failure.
///< t t t        The errored task must be fixed and the sw_reset signal
///< written to restart the test. Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TST_GEN_STATE_ERR_OS_BF_OFF ( 4)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TST_GEN_STATE_ERR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TST_GEN_STATE_ERR_OS_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TST_GEN_STATE_ERR_OS_BF_DEF (0x00000000)

///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
///< is halted at that failure.
///< t t t        The errored task must be fixed and the sw_reset signal
///< written to restart the test. Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_NXT_TASK_ERR_OS_BF_OFF ( 5)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_NXT_TASK_ERR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_NXT_TASK_ERR_OS_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_NXT_TASK_ERR_OS_BF_DEF (0x00000000)

///< The MON_TDO Capture memory overflowed. Data is lost when this alarm
///< occurs. Status
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_OFF ( 6)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_TSTGEN_INT_MTC_TSTGEN_INTR_EN register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/mtc_tstgen_int/MTC_TSTGEN_INTR_EN
  * Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t CURR_TASK_END_OF_TEST_OS : 1;
    ///< In End-of-Test Task or External Program Memory Done (mtc_done) Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PAUSE_IN_PAUSEDR_OS : 1;
    ///< Paused in Pause-DR state Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PAUSE_IN_PAUSEIR_OS : 1;
    ///< Paused in Pause-IR state Enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CONT_AFTER_PAUSE_OS : 1;
    ///< Active anytime the TESTGEN state machine is paused. A write to cont_after_pause
    ///< or
    ///< t t t tsingle_step one-shot registers will release the state machine
    ///< from the paused state. Enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TST_GEN_STATE_ERROR_OS : 1;
    ///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
    ///< is halted at the failure.
    ///< t t t        The errored task must be fixed and the sw_reset signal
    ///< written to restart the test. Enable
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t NXT_TASK_ERROR_OS : 1;
    ///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
    ///< is halted at that failure.
    ///< t t t        The errored task must be fixed and the sw_reset signal
    ///< written to restart the test. Enable
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TDO_RECORD_RAM_ADDR_OVERFLOW_OS : 1;
    ///< The MON_TDO Capture memory overflowed. Data is lost when this alarm
    ///< occurs. Enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_tstgen_intr_en_reg_t;

#define AXIS_MTC_TOP_TSTGEN_INTR_EN_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_WR_MASK (0x0000007fU)


///< In End-of-Test Task or External Program Memory Done (mtc_done) Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CURR_TASK_END_OF_TEST_OS_BF_OFF ( 0)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CURR_TASK_END_OF_TEST_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CURR_TASK_END_OF_TEST_OS_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CURR_TASK_END_OF_TEST_OS_BF_DEF (0x00000000)

///< Paused in Pause-DR state Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEDR_OS_BF_OFF ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEDR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEDR_OS_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEDR_OS_BF_DEF (0x00000000)

///< Paused in Pause-IR state Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEIR_OS_BF_OFF ( 2)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEIR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEIR_OS_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_PAUSE_IN_PAUSEIR_OS_BF_DEF (0x00000000)

///< Active anytime the TESTGEN state machine is paused. A write to cont_after_pause
///< or
///< t t t tsingle_step one-shot registers will release the state machine
///< from the paused state. Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CONT_AFTER_PAUSE_OS_BF_OFF ( 3)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CONT_AFTER_PAUSE_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CONT_AFTER_PAUSE_OS_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_CONT_AFTER_PAUSE_OS_BF_DEF (0x00000000)

///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
///< is halted at the failure.
///< t t t        The errored task must be fixed and the sw_reset signal
///< written to restart the test. Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TST_GEN_STATE_ERR_OS_BF_OFF ( 4)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TST_GEN_STATE_ERR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TST_GEN_STATE_ERR_OS_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TST_GEN_STATE_ERR_OS_BF_DEF (0x00000000)

///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
///< is halted at that failure.
///< t t t        The errored task must be fixed and the sw_reset signal
///< written to restart the test. Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_NXT_TASK_ERR_OS_BF_OFF ( 5)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_NXT_TASK_ERR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_NXT_TASK_ERR_OS_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_NXT_TASK_ERR_OS_BF_DEF (0x00000000)

///< The MON_TDO Capture memory overflowed. Data is lost when this alarm
///< occurs. Enable
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_OFF ( 6)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_TSTGEN_INT_MTC_TSTGEN_INTR_FRC register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/mtc_tstgen_int/MTC_TSTGEN_INTR_FRC
  * Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t CURR_TASK_END_OF_TEST_OS : 1;
    ///< In End-of-Test Task or External Program Memory Done (mtc_done) Force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PAUSE_IN_PAUSEDR_OS : 1;
    ///< Paused in Pause-DR state Force
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PAUSE_IN_PAUSEIR_OS : 1;
    ///< Paused in Pause-IR state Force
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CONT_AFTER_PAUSE_OS : 1;
    ///< Active anytime the TESTGEN state machine is paused. A write to cont_after_pause
    ///< or
    ///< t t t tsingle_step one-shot registers will release the state machine
    ///< from the paused state. Force
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TST_GEN_STATE_ERROR_OS : 1;
    ///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
    ///< is halted at the failure.
    ///< t t t        The errored task must be fixed and the sw_reset signal
    ///< written to restart the test. Force
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t NXT_TASK_ERROR_OS : 1;
    ///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
    ///< is halted at that failure.
    ///< t t t        The errored task must be fixed and the sw_reset signal
    ///< written to restart the test. Force
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TDO_RECORD_RAM_ADDR_OVERFLOW_OS : 1;
    ///< The MON_TDO Capture memory overflowed. Data is lost when this alarm
    ///< occurs. Force
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_tstgen_intr_frc_reg_t;

#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_WR_MASK (0x0000007fU)


///< In End-of-Test Task or External Program Memory Done (mtc_done) Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CURR_TASK_END_OF_TEST_OS_BF_OFF ( 0)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CURR_TASK_END_OF_TEST_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CURR_TASK_END_OF_TEST_OS_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CURR_TASK_END_OF_TEST_OS_BF_DEF (0x00000000)

///< Paused in Pause-DR state Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEDR_OS_BF_OFF ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEDR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEDR_OS_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEDR_OS_BF_DEF (0x00000000)

///< Paused in Pause-IR state Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEIR_OS_BF_OFF ( 2)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEIR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEIR_OS_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_PAUSE_IN_PAUSEIR_OS_BF_DEF (0x00000000)

///< Active anytime the TESTGEN state machine is paused. A write to cont_after_pause
///< or
///< t t t tsingle_step one-shot registers will release the state machine
///< from the paused state. Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CONT_AFTER_PAUSE_OS_BF_OFF ( 3)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CONT_AFTER_PAUSE_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CONT_AFTER_PAUSE_OS_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_CONT_AFTER_PAUSE_OS_BF_DEF (0x00000000)

///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
///< is halted at the failure.
///< t t t        The errored task must be fixed and the sw_reset signal
///< written to restart the test. Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TST_GEN_STATE_ERR_OS_BF_OFF ( 4)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TST_GEN_STATE_ERR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TST_GEN_STATE_ERR_OS_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TST_GEN_STATE_ERR_OS_BF_DEF (0x00000000)

///< Fatal Error Occurred while processing a TASK. TESTGEN state machine
///< is halted at that failure.
///< t t t        The errored task must be fixed and the sw_reset signal
///< written to restart the test. Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_NXT_TASK_ERR_OS_BF_OFF ( 5)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_NXT_TASK_ERR_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_NXT_TASK_ERR_OS_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_NXT_TASK_ERR_OS_BF_DEF (0x00000000)

///< The MON_TDO Capture memory overflowed. Data is lost when this alarm
///< occurs. Force
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_OFF ( 6)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_TDO_RECORD_RAM_ADDR_OVERFLOW_OS_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_ECC_INT_MTC_APB2TAP_ECC_INTR_STATUS register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/mtc_ecc_int/MTC_APB2TAP_ECC_INTR_STATUS
  * Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t CLTAP_ACCESS_GRANTED_OS : 1;
    ///< CLTAP Acess Granted to TAP Network Status
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_OS : 1;
    ///< CLTAP Requested Access to TAP Network Status
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_DONE_FSM_OS : 1;
    ///< CLTAP Reuest Access Access Done
    ///< AccessType="RW/1C/V" BitOffset="2" ResetValue="0x0"
    uint32_t APB2TAP_ACCESS_GRANTED_OS : 1;
    ///< APB2TAP Access Granted to TAP Network Status
    ///< AccessType="RW/1C/V" BitOffset="3" ResetValue="0x0"
    uint32_t APB2TAP_REQUEST_ACCESS_DONE_FSM_OS : 1;
    ///< APB2TAP Access Granted Done
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t ECC_SINGLE_MEM_OS : 1;
    ///< Single-bit ECC Error in Program Memory or Capture Memory Status
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t ECC_MULT_TSTGEN_MEM_OS : 1;
    ///< Multi-bit ECC Error in TESTGEN Program Memory or Capture Memory Status
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_ecc_apb2tap_ecc_intr_stat_reg_t;

#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_WR_MASK (0x0000007fU)


///< CLTAP Acess Granted to TAP Network Status
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_ACCESS_GRANTED_OS_BF_OFF ( 0)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_ACCESS_GRANTED_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_ACCESS_GRANTED_OS_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_ACCESS_GRANTED_OS_BF_DEF (0x00000000)

///< CLTAP Requested Access to TAP Network Status
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_OS_BF_OFF ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_OS_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_OS_BF_DEF (0x00000000)

///< CLTAP Reuest Access Access Done
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_DONE_FSM_OS_BF_OFF ( 2)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_DONE_FSM_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_DONE_FSM_OS_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_CLTAP_REQUEST_ACCESS_DONE_FSM_OS_BF_DEF (0x00000000)

///< APB2TAP Access Granted to TAP Network Status
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_ACCESS_GRANTED_OS_BF_OFF ( 3)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_ACCESS_GRANTED_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_ACCESS_GRANTED_OS_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_ACCESS_GRANTED_OS_BF_DEF (0x00000000)

///< APB2TAP Access Granted Done
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_REQUEST_ACCESS_DONE_FSM_OS_BF_OFF ( 4)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_REQUEST_ACCESS_DONE_FSM_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_REQUEST_ACCESS_DONE_FSM_OS_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_APB2TAP_REQUEST_ACCESS_DONE_FSM_OS_BF_DEF (0x00000000)

///< Single-bit ECC Error in Program Memory or Capture Memory Status
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_SINGLE_MEM_OS_BF_OFF ( 5)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_SINGLE_MEM_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_SINGLE_MEM_OS_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_SINGLE_MEM_OS_BF_DEF (0x00000000)

///< Multi-bit ECC Error in TESTGEN Program Memory or Capture Memory Status
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_MULT_TSTGEN_MEM_OS_BF_OFF ( 6)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_MULT_TSTGEN_MEM_OS_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_MULT_TSTGEN_MEM_OS_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ECC_MULT_TSTGEN_MEM_OS_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_ECC_INT_MTC_APB2TAP_ECC_INTR_EN register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/mtc_ecc_int/MTC_APB2TAP_ECC_INTR_EN
  * Interrupt Enable Register
  */

typedef union {
  struct {
    uint32_t CLTAP_ACCESS_GRANTED_EN : 1;
    ///< CLTAP Acess Granted to TAP Network Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_EN : 1;
    ///< CLTAP Requested Access to TAP Network Enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_DONE_FSM_EN : 1;
    ///< CLTAP Reuest Access Access Done
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t APB2TAP_ACCESS_GRANTED_EN : 1;
    ///< APB2TAP Access Granted to TAP Network Enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t APB2TAP_REQUEST_ACCESS_DONE_FSM_EN : 1;
    ///< APB2TAP Access Granted Done
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ECC_SINGLE_MEM_EN : 1;
    ///< Single-bit ECC Error in Program Memory or Capture Memory Enable
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t ECC_MULT_TSTGEN_MEM_EN : 1;
    ///< Multi-bit ECC Error in TESTGEN Program Memory or Capture Memory Enable
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_ecc_apb2tap_ecc_intr_en_reg_t;

#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_WR_MASK (0x0000007fU)


///< CLTAP Acess Granted to TAP Network Enable
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_ACCESS_GRANTED_EN_BF_OFF ( 0)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_ACCESS_GRANTED_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_ACCESS_GRANTED_EN_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_ACCESS_GRANTED_EN_BF_DEF (0x00000000)

///< CLTAP Requested Access to TAP Network Enable
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_EN_BF_OFF ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_EN_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_EN_BF_DEF (0x00000000)

///< CLTAP Reuest Access Access Done
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_DONE_FSM_EN_BF_OFF ( 2)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_DONE_FSM_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_DONE_FSM_EN_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_CLTAP_REQUEST_ACCESS_DONE_FSM_EN_BF_DEF (0x00000000)

///< APB2TAP Access Granted to TAP Network Enable
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_ACCESS_GRANTED_EN_BF_OFF ( 3)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_ACCESS_GRANTED_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_ACCESS_GRANTED_EN_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_ACCESS_GRANTED_EN_BF_DEF (0x00000000)

///< APB2TAP Access Granted Done
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_REQUEST_ACCESS_DONE_FSM_EN_BF_OFF ( 4)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_REQUEST_ACCESS_DONE_FSM_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_REQUEST_ACCESS_DONE_FSM_EN_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_APB2TAP_REQUEST_ACCESS_DONE_FSM_EN_BF_DEF (0x00000000)

///< Single-bit ECC Error in Program Memory or Capture Memory Enable
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_SINGLE_MEM_EN_BF_OFF ( 5)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_SINGLE_MEM_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_SINGLE_MEM_EN_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_SINGLE_MEM_EN_BF_DEF (0x00000000)

///< Multi-bit ECC Error in TESTGEN Program Memory or Capture Memory Enable
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_MULT_TSTGEN_MEM_EN_BF_OFF ( 6)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_MULT_TSTGEN_MEM_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_MULT_TSTGEN_MEM_EN_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ECC_MULT_TSTGEN_MEM_EN_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_ECC_INT_MTC_APB2TAP_ECC_INTR_FRC register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/mtc_ecc_int/MTC_APB2TAP_ECC_INTR_FRC
  * Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t CLTAP_ACCESS_GRANTED_FRC : 1;
    ///< CLTAP Acess Granted to TAP Network Force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_FRC : 1;
    ///< CLTAP Requested Access to TAP Network Force
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_DONE_FSM_FRC : 1;
    ///< CLTAP Reuest Access Access Done Force
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t APB2TAP_ACCESS_GRANTED_FRC : 1;
    ///< APB2TAP Access Granted to TAP Network Force
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t APB2TAP_REQUEST_ACCESS_DONE_FSM_FRC : 1;
    ///< APB2TAP Access Granted Done Force
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t ECC_SINGLE_MEM_FRC : 1;
    ///< Single-bit ECC Error in Program Memory or Capture Memory Force
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t ECC_MULT_TSTGEN_MEM_FRC : 1;
    ///< Multi-bit ECC Error in TESTGEN Program Memory or Capture Memory Force
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_ecc_apb2tap_ecc_intr_frc_reg_t;

#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_RD_MASK (0x0000007fU)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_WR_MASK (0x0000007fU)


///< CLTAP Acess Granted to TAP Network Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_ACCESS_GRANTED_FRC_BF_OFF ( 0)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_ACCESS_GRANTED_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_ACCESS_GRANTED_FRC_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_ACCESS_GRANTED_FRC_BF_DEF (0x00000000)

///< CLTAP Requested Access to TAP Network Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_FRC_BF_OFF ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_FRC_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_FRC_BF_DEF (0x00000000)

///< CLTAP Reuest Access Access Done Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_OFF ( 2)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_CLTAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_DEF (0x00000000)

///< APB2TAP Access Granted to TAP Network Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_ACCESS_GRANTED_FRC_BF_OFF ( 3)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_ACCESS_GRANTED_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_ACCESS_GRANTED_FRC_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_ACCESS_GRANTED_FRC_BF_DEF (0x00000000)

///< APB2TAP Access Granted Done Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_OFF ( 4)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_APB2TAP_REQUEST_ACCESS_DONE_FSM_FRC_BF_DEF (0x00000000)

///< Single-bit ECC Error in Program Memory or Capture Memory Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_SINGLE_MEM_FRC_BF_OFF ( 5)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_SINGLE_MEM_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_SINGLE_MEM_FRC_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_SINGLE_MEM_FRC_BF_DEF (0x00000000)

///< Multi-bit ECC Error in TESTGEN Program Memory or Capture Memory Force
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_MULT_TSTGEN_MEM_FRC_BF_OFF ( 6)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_MULT_TSTGEN_MEM_FRC_BF_WID ( 1)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_MULT_TSTGEN_MEM_FRC_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ECC_MULT_TSTGEN_MEM_FRC_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_DEBUG0_REG_ADDR register description at address offset 0x80
  *
  * Register default value:        0x02000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_DEBUG0_REG_ADDR
  * MTC Debug0 Register
  */

typedef union {
  struct {
    uint32_t NXT_TASK_INST_I : 4;
    ///< Next Task Command Value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t TASK_SUB_STATE : 4;
    ///< TESTGEN state Machine subtask counter
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t NXT_TSTGEN_TDI_CNT30 : 5;
    ///< Next Shift Count value
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t CURR_TASK_CTL_I : 2;
    ///< Current Task control values
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x2"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t CURR_TASK_END_STATE_CTL_I : 1;
    ///< 1'b1 = Start Next Command from the Select-DR-Scan State (Clock cannot
    ///< be stopped)[br]
    ///< t t 1'b0 = Go to Run-test/Idle State - Pause only if Gap TCK Clock
    ///< active
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t CURR_TASK_TCK_CTL_I : 1;
    ///< Current Task TCK Control Value
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t CURR_TASK_GAP_TCK_EN : 1;
    ///< 1'b1 = Gap TCK clock in end state;[br]
    ///< t t 1'b0 = Don't Gap TCK clock in end state
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t MTC_TESTGEN_TDO_INACTIVE_ENB : 1;
    ///< When mtc_mpu_tdo_inactive_en control signal is active (1'b1) this
    ///< signal is used to control the TDO output buffer tri-state control
    ///< input. </br> 1'b1 = TDO Output Buffer Active; </br>1'b0 = TDO Output
    ///< Buffer Inactive
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_dbg0_addr_reg_t;

#define AXIS_MTC_TOP_DBG0_ADDR_DEFAULT (0x02000000U)
#define AXIS_MTC_TOP_DBG0_ADDR_RD_MASK (0xf31f0f0fU)
#define AXIS_MTC_TOP_DBG0_ADDR_WR_MASK (0x00000000U)


///< Next Task Command Value
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TASK_INST_I_BF_OFF ( 0)
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TASK_INST_I_BF_WID ( 4)
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TASK_INST_I_BF_MSK (0x0000000F)
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TASK_INST_I_BF_DEF (0x00000000)

///< TESTGEN state Machine subtask counter
#define AXIS_MTC_TOP_DBG0_ADDR_TASK_SUB_STATE_BF_OFF ( 8)
#define AXIS_MTC_TOP_DBG0_ADDR_TASK_SUB_STATE_BF_WID ( 4)
#define AXIS_MTC_TOP_DBG0_ADDR_TASK_SUB_STATE_BF_MSK (0x00000F00)
#define AXIS_MTC_TOP_DBG0_ADDR_TASK_SUB_STATE_BF_DEF (0x00000000)

///< Next Shift Count value
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TSTGEN_TDI_CNT30_BF_OFF (16)
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TSTGEN_TDI_CNT30_BF_WID ( 5)
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TSTGEN_TDI_CNT30_BF_MSK (0x001F0000)
#define AXIS_MTC_TOP_DBG0_ADDR_NXT_TSTGEN_TDI_CNT30_BF_DEF (0x00000000)

///< Current Task control values
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_CTL_I_BF_OFF (24)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_CTL_I_BF_WID ( 2)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_CTL_I_BF_MSK (0x03000000)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_CTL_I_BF_DEF (0x02000000)

///< 1'b1 = Start Next Command from the Select-DR-Scan State (Clock cannot
///< be stopped)[br]
///< t t 1'b0 = Go to Run-test/Idle State - Pause only if Gap TCK Clock
///< active
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_END_STATE_CTL_I_BF_OFF (28)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_END_STATE_CTL_I_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_END_STATE_CTL_I_BF_MSK (0x10000000)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_END_STATE_CTL_I_BF_DEF (0x00000000)

///< Current Task TCK Control Value
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_TCK_CTL_I_BF_OFF (29)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_TCK_CTL_I_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_TCK_CTL_I_BF_MSK (0x20000000)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_TCK_CTL_I_BF_DEF (0x00000000)

///< 1'b1 = Gap TCK clock in end state;[br]
///< t t 1'b0 = Don't Gap TCK clock in end state
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_GAP_TCK_EN_BF_OFF (30)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_GAP_TCK_EN_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_GAP_TCK_EN_BF_MSK (0x40000000)
#define AXIS_MTC_TOP_DBG0_ADDR_CURR_TASK_GAP_TCK_EN_BF_DEF (0x00000000)

///< When mtc_mpu_tdo_inactive_en control signal is active (1'b1) this
///< signal is used to control the TDO output buffer tri-state control
///< input. </br> 1'b1 = TDO Output Buffer Active; </br>1'b0 = TDO Output
///< Buffer Inactive
#define AXIS_MTC_TOP_DBG0_ADDR_MTC_TESTGEN_TDO_INACTIVE_ENB_BF_OFF (31)
#define AXIS_MTC_TOP_DBG0_ADDR_MTC_TESTGEN_TDO_INACTIVE_ENB_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG0_ADDR_MTC_TESTGEN_TDO_INACTIVE_ENB_BF_MSK (0x80000000)
#define AXIS_MTC_TOP_DBG0_ADDR_MTC_TESTGEN_TDO_INACTIVE_ENB_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_DEBUG1_REG_ADDR register description at address offset 0x84
  *
  * Register default value:        0x80000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_DEBUG1_REG_ADDR
  * MTC Debug1 Register
  */

typedef union {
  struct {
    uint32_t PRGM_MEM_RD_ADDR : 8;
    ///< Address of memory location to be read from program memory
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CURR_TASK_INST_I : 4;
    ///< Value of current task being processed
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t CURR_TASK_LOAD_JTAG_INST_REG_CONTINUE_FROM_PAUSE_IR_AND_STOP_IN_PAUSE_IR : 1;
    ///< Current task being processed is Load JTAG Instruction Register (continue
    ///< from pause-IR state and end in pause-IR state - 4'b1111
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_INST_REG_CONTINUE_FROM_PAUSE_IR : 1;
    ///< Current task being processed is Load JTAG Instruction Register (continue
    ///< from pause-IR state) - 4'b1110
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_INST_REG_AND_PAUSE_IN_PAUSE_IR : 1;
    ///< Current task being processed is Load JTAG Instruction Register and
    ///< pause in pause-IR state - 4'b1101
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_DATA_REG_CONTINUE_FROM_PAUSE_DR_AND_STOP_IN_PAUSE_DR : 1;
    ///< Current task being processed is Load JTAG Data Register (continue
    ///< from pause-DR state and end in pause-DR state - 4'b1001
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_DATA_REG_CONTINUE_FROM_PAUSE_DR : 1;
    ///< Current task being processed is Load JTAG Data Register (continue
    ///< from pause-DR state) - 4'b1000
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_DATA_REG_AND_PAUSE_IN_PAUSE_DR : 1;
    ///< Current task being processed is Load JTAG Data Register and pause
    ///< in pause-DR state - 4'b0111
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t CURR_TASK_END_OF_TEST : 1;
    ///< Current task being processed is End of Test - 4'b1100
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE : 1;
    ///< Current task being processed is Pause in Run-Test-Idle State - 4'b1011
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t CURR_TASK_WAIT_IN_RUN_TEST_IDLE_STATE_XTCK_CYCLES : 1;
    ///< Current task being processed is Wait in Run-Test-Idle state a number
    ///< of TCK cycles - 4'b1010
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t CURR_TASK_MTC_RESERVED_TASK_ID_6 : 1;
    ///< Reserved Task value - Illegal - 4'b0110
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t CURR_TASK_MTC_RESERVED_TASK_ID_5 : 1;
    ///< Reserved Task value - Illegal - 4'b0101
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_DATA_REG : 1;
    ///< Current task being processed is Load JTAG data register
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t CURR_TASK_LOAD_JTAG_INST_REG : 1;
    ///< Current task being processed is Load JTAG instruction register
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t CURR_TASK_TEST_RESET_2 : 1;
    ///< Current task being processed is Test reset 2 (TMS high for x TCK cycles)
    ///< - 4'b0010
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t CURR_TASK_TEST_RESET_1 : 1;
    ///< Current task being processed is Test reset 1 (TRSTZ low for x TCK
    ///< cycles - 4'b0001)
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t CURR_TASK_NO_OPERATION : 1;
    ///< Current task being processed is No Operation (4'b0000)
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x1"
  } ;
  uint32_t value;
} axis_mtc_top_dbg1_addr_reg_t;

#define AXIS_MTC_TOP_DBG1_ADDR_DEFAULT (0x80000000U)
#define AXIS_MTC_TOP_DBG1_ADDR_RD_MASK (0xffff0fffU)
#define AXIS_MTC_TOP_DBG1_ADDR_WR_MASK (0x00000000U)


///< Address of memory location to be read from program memory
#define AXIS_MTC_TOP_DBG1_ADDR_PRGM_MEM_RD_ADDR_BF_OFF ( 0)
#define AXIS_MTC_TOP_DBG1_ADDR_PRGM_MEM_RD_ADDR_BF_WID ( 8)
#define AXIS_MTC_TOP_DBG1_ADDR_PRGM_MEM_RD_ADDR_BF_MSK (0x000000FF)
#define AXIS_MTC_TOP_DBG1_ADDR_PRGM_MEM_RD_ADDR_BF_DEF (0x00000000)

///< Value of current task being processed
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_INST_I_BF_OFF ( 8)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_INST_I_BF_WID ( 4)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_INST_I_BF_MSK (0x00000F00)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_INST_I_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG Instruction Register (continue
///< from pause-IR state and end in pause-IR state - 4'b1111
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_AND_STOP_IN_PAUSE_IR_BF_OFF (16)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_AND_STOP_IN_PAUSE_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_AND_STOP_IN_PAUSE_IR_BF_MSK (0x00010000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_AND_STOP_IN_PAUSE_IR_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG Instruction Register (continue
///< from pause-IR state) - 4'b1110
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_BF_OFF (17)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_BF_MSK (0x00020000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_CONTINUE_FROM_PAUSE_IR_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG Instruction Register and
///< pause in pause-IR state - 4'b1101
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_AND_PAUSE_IN_PAUSE_IR_BF_OFF (18)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_AND_PAUSE_IN_PAUSE_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_AND_PAUSE_IN_PAUSE_IR_BF_MSK (0x00040000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_AND_PAUSE_IN_PAUSE_IR_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG Data Register (continue
///< from pause-DR state and end in pause-DR state - 4'b1001
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_AND_STOP_IN_PAUSE_DR_BF_OFF (19)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_AND_STOP_IN_PAUSE_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_AND_STOP_IN_PAUSE_DR_BF_MSK (0x00080000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_AND_STOP_IN_PAUSE_DR_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG Data Register (continue
///< from pause-DR state) - 4'b1000
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_BF_OFF (20)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_BF_MSK (0x00100000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_CONTINUE_FROM_PAUSE_DR_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG Data Register and pause
///< in pause-DR state - 4'b0111
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_AND_PAUSE_IN_PAUSE_DR_BF_OFF (21)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_AND_PAUSE_IN_PAUSE_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_AND_PAUSE_IN_PAUSE_DR_BF_MSK (0x00200000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_AND_PAUSE_IN_PAUSE_DR_BF_DEF (0x00000000)

///< Current task being processed is End of Test - 4'b1100
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_END_OF_TEST_BF_OFF (22)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_END_OF_TEST_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_END_OF_TEST_BF_MSK (0x00400000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_END_OF_TEST_BF_DEF (0x00000000)

///< Current task being processed is Pause in Run-Test-Idle State - 4'b1011
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_OFF (23)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_MSK (0x00800000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_PAUSE_IN_RUN_TEST_IDLE_STATE_BF_DEF (0x00000000)

///< Current task being processed is Wait in Run-Test-Idle state a number
///< of TCK cycles - 4'b1010
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_WAIT_IN_RUN_TEST_IDLE_STATE_XTCK_CYCLES_BF_OFF (24)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_WAIT_IN_RUN_TEST_IDLE_STATE_XTCK_CYCLES_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_WAIT_IN_RUN_TEST_IDLE_STATE_XTCK_CYCLES_BF_MSK (0x01000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_WAIT_IN_RUN_TEST_IDLE_STATE_XTCK_CYCLES_BF_DEF (0x00000000)

///< Reserved Task value - Illegal - 4'b0110
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_6_BF_OFF (25)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_6_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_6_BF_MSK (0x02000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_6_BF_DEF (0x00000000)

///< Reserved Task value - Illegal - 4'b0101
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_5_BF_OFF (26)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_5_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_5_BF_MSK (0x04000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_MTC_RESERVED_TASK_ID_5_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG data register
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_BF_OFF (27)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_BF_MSK (0x08000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_DATA_BF_DEF (0x00000000)

///< Current task being processed is Load JTAG instruction register
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_BF_OFF (28)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_BF_MSK (0x10000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_LOAD_JTAG_INST_BF_DEF (0x00000000)

///< Current task being processed is Test reset 2 (TMS high for x TCK cycles)
///< - 4'b0010
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_2_BF_OFF (29)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_2_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_2_BF_MSK (0x20000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_2_BF_DEF (0x00000000)

///< Current task being processed is Test reset 1 (TRSTZ low for x TCK
///< cycles - 4'b0001)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_1_BF_OFF (30)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_1_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_1_BF_MSK (0x40000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_TEST_RST_1_BF_DEF (0x00000000)

///< Current task being processed is No Operation (4'b0000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_NO_OPERATION_BF_OFF (31)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_NO_OPERATION_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_NO_OPERATION_BF_MSK (0x80000000)
#define AXIS_MTC_TOP_DBG1_ADDR_CURR_TASK_NO_OPERATION_BF_DEF (0x80000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_DEBUG2_REG_ADDR register description at address offset 0x88
  *
  * Register default value:        0x00010000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_DEBUG2_REG_ADDR
  * MTC Debug2 Register
  */

typedef union {
  struct {
    uint32_t TAPC_STATE : 4;
    ///< Current TAPC state value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
    uint32_t CURR_TAPC_TEST_LOGIC_RESET : 1;
    ///< Current TAPC State is TEST-LOGIC-RESET
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x1"
    uint32_t CURR_TAPC_RUN_TEST_IDLE : 1;
    ///< Current TAPC State is RUN-TEST_IDLE
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t CURR_TAPC_SELECT_DR_SCAN : 1;
    ///< Current TAPC State is SELECT-DR-SCAN
    ///< AccessType="RO/V" BitOffset="18" ResetValue="0x0"
    uint32_t CURR_TAPC_SELECT_IR_SCAN : 1;
    ///< Current TAPC State is SELECT-IR-SCAN
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t CURR_TAPC_CAPTURE_DR : 1;
    ///< Current TAPC State is CAPTURE-DR
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t CURR_TAPC_SHIFT_DR : 1;
    ///< Current TAPC State is SHIFT-DR
    ///< AccessType="RO/V" BitOffset="21" ResetValue="0x0"
    uint32_t CURR_TAPC_EXIT1_DR : 1;
    ///< Current TAPC State is EXIT1-DR
    ///< AccessType="RO/V" BitOffset="22" ResetValue="0x0"
    uint32_t CURR_TAPC_PAUSE_DR : 1;
    ///< Current TAPC State is PAUSE-DR
    ///< AccessType="RO/V" BitOffset="23" ResetValue="0x0"
    uint32_t CURR_TAPC_EXIT2_DR : 1;
    ///< Current TAPC State is EXIT2-DR
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t CURR_TAPC_UPDATE_DR : 1;
    ///< Current TAPC State is UPDATE-DR
    ///< AccessType="RO/V" BitOffset="25" ResetValue="0x0"
    uint32_t CURR_TAPC_CAPTURE_IR : 1;
    ///< Current TAPC State is CAPTURE-IR
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t CURR_TAPC_SHIFT_IR : 1;
    ///< Current TAPC State is SHIFT-IR
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t CURR_TAPC_EXIT1_IR : 1;
    ///< Current TAPC State is EXIT1-IR
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t CURR_TAPC_PAUSE_IR : 1;
    ///< Current TAPC State is PAUSE-IR
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t CURR_TAPC_EXIT2_IR : 1;
    ///< Current TAPC State is EXIT2-IR
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t CURR_TAPC_UPDATE_IR : 1;
    ///< Current TAPC State is UPDATE-IR
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_dbg2_addr_reg_t;

#define AXIS_MTC_TOP_DBG2_ADDR_DEFAULT (0x00010000U)
#define AXIS_MTC_TOP_DBG2_ADDR_RD_MASK (0xffff000fU)
#define AXIS_MTC_TOP_DBG2_ADDR_WR_MASK (0x00000000U)


///< Current TAPC state value
#define AXIS_MTC_TOP_DBG2_ADDR_TAPC_STATE_BF_OFF ( 0)
#define AXIS_MTC_TOP_DBG2_ADDR_TAPC_STATE_BF_WID ( 4)
#define AXIS_MTC_TOP_DBG2_ADDR_TAPC_STATE_BF_MSK (0x0000000F)
#define AXIS_MTC_TOP_DBG2_ADDR_TAPC_STATE_BF_DEF (0x00000000)

///< Current TAPC State is TEST-LOGIC-RESET
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_TEST_LOGIC_RST_BF_OFF (16)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_TEST_LOGIC_RST_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_TEST_LOGIC_RST_BF_MSK (0x00010000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_TEST_LOGIC_RST_BF_DEF (0x00010000)

///< Current TAPC State is RUN-TEST_IDLE
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_RUN_TEST_IDLE_BF_OFF (17)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_RUN_TEST_IDLE_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_RUN_TEST_IDLE_BF_MSK (0x00020000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_RUN_TEST_IDLE_BF_DEF (0x00000000)

///< Current TAPC State is SELECT-DR-SCAN
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_DR_SCAN_BF_OFF (18)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_DR_SCAN_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_DR_SCAN_BF_MSK (0x00040000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_DR_SCAN_BF_DEF (0x00000000)

///< Current TAPC State is SELECT-IR-SCAN
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_IR_SCAN_BF_OFF (19)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_IR_SCAN_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_IR_SCAN_BF_MSK (0x00080000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SEL_IR_SCAN_BF_DEF (0x00000000)

///< Current TAPC State is CAPTURE-DR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_DR_BF_OFF (20)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_DR_BF_MSK (0x00100000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_DR_BF_DEF (0x00000000)

///< Current TAPC State is SHIFT-DR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_DR_BF_OFF (21)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_DR_BF_MSK (0x00200000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_DR_BF_DEF (0x00000000)

///< Current TAPC State is EXIT1-DR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_DR_BF_OFF (22)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_DR_BF_MSK (0x00400000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_DR_BF_DEF (0x00000000)

///< Current TAPC State is PAUSE-DR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_DR_BF_OFF (23)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_DR_BF_MSK (0x00800000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_DR_BF_DEF (0x00000000)

///< Current TAPC State is EXIT2-DR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_DR_BF_OFF (24)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_DR_BF_MSK (0x01000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_DR_BF_DEF (0x00000000)

///< Current TAPC State is UPDATE-DR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_DR_BF_OFF (25)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_DR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_DR_BF_MSK (0x02000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_DR_BF_DEF (0x00000000)

///< Current TAPC State is CAPTURE-IR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_IR_BF_OFF (26)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_IR_BF_MSK (0x04000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_CAP_IR_BF_DEF (0x00000000)

///< Current TAPC State is SHIFT-IR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_IR_BF_OFF (27)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_IR_BF_MSK (0x08000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_SHIFT_IR_BF_DEF (0x00000000)

///< Current TAPC State is EXIT1-IR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_IR_BF_OFF (28)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_IR_BF_MSK (0x10000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT1_IR_BF_DEF (0x00000000)

///< Current TAPC State is PAUSE-IR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_IR_BF_OFF (29)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_IR_BF_MSK (0x20000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_PAUSE_IR_BF_DEF (0x00000000)

///< Current TAPC State is EXIT2-IR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_IR_BF_OFF (30)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_IR_BF_MSK (0x40000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_EXIT2_IR_BF_DEF (0x00000000)

///< Current TAPC State is UPDATE-IR
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_IR_BF_OFF (31)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_IR_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_IR_BF_MSK (0x80000000)
#define AXIS_MTC_TOP_DBG2_ADDR_CURR_TAPC_UPDATE_IR_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_DEBUG3_REG_ADDR register description at address offset 0x8c
  *
  * Register default value:        0x80000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_DEBUG3_REG_ADDR
  * MTC Debug3 Register
  */

typedef union {
  struct {
    uint32_t NXT_TDI_SHIFT_DATA : 30;
    ///< Next Data to be shifted out
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
    uint32_t NXT_TDI_SHIFT_DATA_D : 1;
    ///< TDO value output on the next falling edge of the TCK clock - nxt_tdi_shift_data_d[0]
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x1"
  } ;
  uint32_t value;
} axis_mtc_top_dbg3_addr_reg_t;

#define AXIS_MTC_TOP_DBG3_ADDR_DEFAULT (0x80000000U)
#define AXIS_MTC_TOP_DBG3_ADDR_RD_MASK (0xbfffffffU)
#define AXIS_MTC_TOP_DBG3_ADDR_WR_MASK (0x00000000U)


///< Next Data to be shifted out
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_BF_OFF ( 0)
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_BF_WID (30)
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_BF_MSK (0x3FFFFFFF)
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_BF_DEF (0x00000000)

///< TDO value output on the next falling edge of the TCK clock - nxt_tdi_shift_data_d[0]
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_D_BF_OFF (31)
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_D_BF_WID ( 1)
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_D_BF_MSK (0x80000000)
#define AXIS_MTC_TOP_DBG3_ADDR_NXT_TDI_SHIFT_DATA_D_BF_DEF (0x80000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_DEBUG4_REG_ADDR register description at address offset 0x90
  *
  * Register default value:        0x80000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_DEBUG4_REG_ADDR
  * MTC Debug4 Register
  */

typedef union {
  struct {
    uint32_t NXT_TASK_INST_I : 32;
    ///< Next Task to be processed
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x80000000"
  } ;
  uint32_t value;
} axis_mtc_top_dbg4_addr_reg_t;

#define AXIS_MTC_TOP_DBG4_ADDR_DEFAULT (0x80000000U)
#define AXIS_MTC_TOP_DBG4_ADDR_RD_MASK (0xffffffffU)
#define AXIS_MTC_TOP_DBG4_ADDR_WR_MASK (0x00000000U)


///< Next Task to be processed
#define AXIS_MTC_TOP_DBG4_ADDR_NXT_TASK_INST_I_BF_OFF ( 0)
#define AXIS_MTC_TOP_DBG4_ADDR_NXT_TASK_INST_I_BF_WID (32)
#define AXIS_MTC_TOP_DBG4_ADDR_NXT_TASK_INST_I_BF_MSK (0xFFFFFFFF)
#define AXIS_MTC_TOP_DBG4_ADDR_NXT_TASK_INST_I_BF_DEF (0x80000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_DEBUG5_REG_ADDR register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_DEBUG5_REG_ADDR
  * MTC Debug5 Register
  */

typedef union {
  struct {
    uint32_t DELAY_SHIFT_CNT : 26;
    ///< Data shift value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_dbg5_addr_reg_t;

#define AXIS_MTC_TOP_DBG5_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_DBG5_ADDR_RD_MASK (0x03ffffffU)
#define AXIS_MTC_TOP_DBG5_ADDR_WR_MASK (0x00000000U)


///< Data shift value
#define AXIS_MTC_TOP_DBG5_ADDR_DELAY_SHIFT_CNT_BF_OFF ( 0)
#define AXIS_MTC_TOP_DBG5_ADDR_DELAY_SHIFT_CNT_BF_WID (26)
#define AXIS_MTC_TOP_DBG5_ADDR_DELAY_SHIFT_CNT_BF_MSK (0x03FFFFFF)
#define AXIS_MTC_TOP_DBG5_ADDR_DELAY_SHIFT_CNT_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_APB2TAP_CFG0_REG_ADDR register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/APB2TAP_CFG0_REG_ADDR
  * MTC APB2TAP Config 0 Register
  */

typedef union {
  struct {
    uint32_t APB2TAP_REQUEST_ACCESS : 1;
    ///< Write to 1 when apb2tap wants access to the TAP Func/DDT internal
    ///< networks.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t APB2TAP_REQUEST_ACCESS_DONE : 1;
    ///< Write to 1 when apb2tap is done using the TAP network. Clear once
    ///< FSM has detected interface is done (apb2tap_request_access_done_fsm=1)
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_mem_apb2tap_cfg0_addr_reg_t;

#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_RD_MASK (0x00000003U)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_WR_MASK (0x00000003U)


///< Write to 1 when apb2tap wants access to the TAP Func/DDT internal
///< networks.
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_BF_OFF ( 0)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_BF_DEF (0x00000000)

///< Write to 1 when apb2tap is done using the TAP network. Clear once
///< FSM has detected interface is done (apb2tap_request_access_done_fsm=1)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_DONE_BF_OFF ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_DONE_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_DONE_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_APB2TAP_REQUEST_ACCESS_DONE_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_APB2TAP_MON_REG_ADDR register description at address offset 0x204
  *
  * Register default value:        0x00000024
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/APB2TAP_MON_REG_ADDR
  * MTC APB2TAP Status 0 Register
  */

typedef union {
  struct {
    uint32_t CLTAP_ACCESS_GRANTED : 1;
    ///< CLTAP Access Granted to the internal TAP Network
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS : 1;
    ///< CLTAP Requests access to the internal TAP Network
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CLTAP_REQUEST_ACCESS_DONE_FSM : 1;
    ///< CLTAP Request access done fsm state. 1=done, 0=In use
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x1"
    uint32_t APB2TAP_ACCESS_GRANTED : 1;
    ///< APB2TAP Access request has been granted.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t APB2TAP_REQUEST_ACCESS : 1;
    ///< APB2TAP Requests access to the internal TAP Network
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t APB2TAP_REQUEST_ACCESS_DONE_FSM : 1;
    ///< APB2TAP Requests access done using TAP network. 1=done, 0=In use
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x1"
    uint32_t TAP_TAPNW_DISABLE : 1;
    ///< Internal TAP network Disabled from CLTAP access.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t SYSCON_MBOX_TAP_SEL : 1;
    ///< Mux selection between MBOX and APB having access to syscon_ctrl registers.
    ///< 1=MBOX Access, 0=APB Access                 If the tap_tapnw_disable=1
    ///< then the value of this signal is ignoreed and the APB interface always
    ///< has access to the registers.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} axis_mtc_top_mem_apb2tap_mon_addr_reg_t;

#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_DEFAULT (0x00000024U)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_RD_MASK (0x000000ffU)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_WR_MASK (0x00000000U)


///< CLTAP Access Granted to the internal TAP Network
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_ACCESS_GRANTED_BF_OFF ( 0)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_ACCESS_GRANTED_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_ACCESS_GRANTED_BF_MSK (0x00000001)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_ACCESS_GRANTED_BF_DEF (0x00000000)

///< CLTAP Requests access to the internal TAP Network
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_BF_OFF ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_BF_MSK (0x00000002)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_BF_DEF (0x00000000)

///< CLTAP Request access done fsm state. 1=done, 0=In use
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_DONE_FSM_BF_OFF ( 2)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_DONE_FSM_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_DONE_FSM_BF_MSK (0x00000004)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_CLTAP_REQUEST_ACCESS_DONE_FSM_BF_DEF (0x00000004)

///< APB2TAP Access request has been granted.
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_ACCESS_GRANTED_BF_OFF ( 3)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_ACCESS_GRANTED_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_ACCESS_GRANTED_BF_MSK (0x00000008)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_ACCESS_GRANTED_BF_DEF (0x00000000)

///< APB2TAP Requests access to the internal TAP Network
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_BF_OFF ( 4)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_BF_MSK (0x00000010)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_BF_DEF (0x00000000)

///< APB2TAP Requests access done using TAP network. 1=done, 0=In use
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_DONE_FSM_BF_OFF ( 5)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_DONE_FSM_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_DONE_FSM_BF_MSK (0x00000020)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_APB2TAP_REQUEST_ACCESS_DONE_FSM_BF_DEF (0x00000020)

///< Internal TAP network Disabled from CLTAP access.
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_TAP_TAPNW_DIS_BF_OFF ( 6)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_TAP_TAPNW_DIS_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_TAP_TAPNW_DIS_BF_MSK (0x00000040)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_TAP_TAPNW_DIS_BF_DEF (0x00000000)

///< Mux selection between MBOX and APB having access to syscon_ctrl registers.
///< 1=MBOX Access, 0=APB Access                 If the tap_tapnw_disable=1
///< then the value of this signal is ignoreed and the APB interface always
///< has access to the registers.
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_SYSCON_MBOX_TAP_SEL_BF_OFF ( 7)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_SYSCON_MBOX_TAP_SEL_BF_WID ( 1)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_SYSCON_MBOX_TAP_SEL_BF_MSK (0x00000080)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_SYSCON_MBOX_TAP_SEL_BF_DEF (0x00000000)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_PRGM_MEM_START_ADDR[256] register description at address offset 0x1000
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_PRGM_MEM_START_ADDR
  * MTC Test Program Memory
  */

typedef union {
  struct {
    uint32_t TST_PRGM : 32;
    ///< TESTGEN program memory - Tasks, Reading of this memory is only allowed
    ///< when the MTC block is not running a program.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_prgm_mem_start_addr_reg_t;

#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_RD_MASK (0xffffffffU)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_WR_MASK (0xffffffffU)


///< TESTGEN program memory - Tasks, Reading of this memory is only allowed
///< when the MTC block is not running a program.
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_TST_PRGM_BF_OFF ( 0)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_TST_PRGM_BF_WID (32)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_TST_PRGM_BF_MSK (0xFFFFFFFF)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_TST_PRGM_BF_DEF (0x00000000)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_ARR_SZ0 (256)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR_ARRAY_STRIDE0 (0x0004)


/** @brief PERIPH_AXIS_MTC_TOP_MEM_PERIPH_AXIS_MTC_MAP_MTC_TDO_CAPTURE_MEM_START_ADDR[256] register description at address offset 0x2000
  *
  * Register default value:        0x00000000
  * Register full path in IP: periph_axis_mtc_top_MEM/periph_axis_mtc_map/MTC_TDO_CAPTURE_MEM_START_ADDR
  * MTC MON_TDO capture Memory
  */

typedef union {
  struct {
    uint32_t TDI_CAPTURE : 32;
    ///< MON_TDO capture memory - Data is right justified when written to the
    ///< memory
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} axis_mtc_top_tdo_cap_mem_start_addr_reg_t;

#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_DEFAULT (0x00000000U)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_RD_MASK (0xffffffffU)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_WR_MASK (0xffffffffU)


///< MON_TDO capture memory - Data is right justified when written to the
///< memory
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_TDI_CAP_BF_OFF ( 0)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_TDI_CAP_BF_WID (32)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_TDI_CAP_BF_MSK (0xFFFFFFFF)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_TDI_CAP_BF_DEF (0x00000000)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_ARR_SZ0 (256)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define AXIS_MTC_TOP_INST_PARAMS0_ADDR_REG ((axis_mtc_top_inst_params0_addr_reg_t*) AXIS_MTC_TOP_INST_PARAMS0_ADDR_ADR)
#define AXIS_MTC_TOP_SCRATCH0_ADDR_REG ((axis_mtc_top_scratch0_addr_reg_t*) AXIS_MTC_TOP_SCRATCH0_ADDR_ADR)
#define AXIS_MTC_TOP_SCRATCH1_ADDR_REG ((axis_mtc_top_scratch1_addr_reg_t*) AXIS_MTC_TOP_SCRATCH1_ADDR_ADR)
#define AXIS_MTC_TOP_CFG0_ADDR_REG ((axis_mtc_top_cfg0_addr_reg_t*) AXIS_MTC_TOP_CFG0_ADDR_ADR)
#define AXIS_MTC_TOP_CFG1_ADDR_REG ((axis_mtc_top_cfg1_addr_reg_t*) AXIS_MTC_TOP_CFG1_ADDR_ADR)
#define AXIS_MTC_TOP_STAT1_ADDR_REG ((axis_mtc_top_stat1_addr_reg_t*) AXIS_MTC_TOP_STAT1_ADDR_ADR)
#define AXIS_MTC_TOP_STAT2_ADDR_REG ((axis_mtc_top_stat2_addr_reg_t*) AXIS_MTC_TOP_STAT2_ADDR_ADR)
#define AXIS_MTC_TOP_EXECUTE1_ADDR_REG ((axis_mtc_top_execute1_addr_reg_t*) AXIS_MTC_TOP_EXECUTE1_ADDR_ADR)
#define AXIS_MTC_TOP_MEM_INIT_ADDR_REG ((axis_mtc_top_mem_init_addr_reg_t*) AXIS_MTC_TOP_MEM_INIT_ADDR_ADR)
#define AXIS_MTC_TOP_ECC_DIS_ADDR_REG ((axis_mtc_top_ecc_dis_addr_reg_t*) AXIS_MTC_TOP_ECC_DIS_ADDR_ADR)
#define AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_REG ((axis_mtc_top_ecc_invert_en_addr_reg_t*) AXIS_MTC_TOP_ECC_INVERT_EN_ADDR_ADR)
#define AXIS_MTC_TOP_ECC_INVERT_ADDR_REG ((axis_mtc_top_ecc_invert_addr_reg_t*) AXIS_MTC_TOP_ECC_INVERT_ADDR_ADR)
#define AXIS_MTC_TOP_TSTGEN_INTR_STAT_REG ((axis_mtc_top_tstgen_intr_stat_reg_t*) AXIS_MTC_TOP_TSTGEN_INTR_STAT_ADR)
#define AXIS_MTC_TOP_TSTGEN_INTR_EN_REG ((axis_mtc_top_tstgen_intr_en_reg_t*) AXIS_MTC_TOP_TSTGEN_INTR_EN_ADR)
#define AXIS_MTC_TOP_TSTGEN_INTR_FRC_REG ((axis_mtc_top_tstgen_intr_frc_reg_t*) AXIS_MTC_TOP_TSTGEN_INTR_FRC_ADR)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_REG ((axis_mtc_top_ecc_apb2tap_ecc_intr_stat_reg_t*) AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_STAT_ADR)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_REG ((axis_mtc_top_ecc_apb2tap_ecc_intr_en_reg_t*) AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_EN_ADR)
#define AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_REG ((axis_mtc_top_ecc_apb2tap_ecc_intr_frc_reg_t*) AXIS_MTC_TOP_ECC_APB2TAP_ECC_INTR_FRC_ADR)
#define AXIS_MTC_TOP_DBG0_ADDR_REG ((axis_mtc_top_dbg0_addr_reg_t*) AXIS_MTC_TOP_DBG0_ADDR_ADR)
#define AXIS_MTC_TOP_DBG1_ADDR_REG ((axis_mtc_top_dbg1_addr_reg_t*) AXIS_MTC_TOP_DBG1_ADDR_ADR)
#define AXIS_MTC_TOP_DBG2_ADDR_REG ((axis_mtc_top_dbg2_addr_reg_t*) AXIS_MTC_TOP_DBG2_ADDR_ADR)
#define AXIS_MTC_TOP_DBG3_ADDR_REG ((axis_mtc_top_dbg3_addr_reg_t*) AXIS_MTC_TOP_DBG3_ADDR_ADR)
#define AXIS_MTC_TOP_DBG4_ADDR_REG ((axis_mtc_top_dbg4_addr_reg_t*) AXIS_MTC_TOP_DBG4_ADDR_ADR)
#define AXIS_MTC_TOP_DBG5_ADDR_REG ((axis_mtc_top_dbg5_addr_reg_t*) AXIS_MTC_TOP_DBG5_ADDR_ADR)
#define AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_REG ((axis_mtc_top_mem_apb2tap_cfg0_addr_reg_t*) AXIS_MTC_TOP_MEM_APB2TAP_CFG0_ADDR_ADR)
#define AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_REG ((axis_mtc_top_mem_apb2tap_mon_addr_reg_t*) AXIS_MTC_TOP_MEM_APB2TAP_MON_ADDR_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR0_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR0_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR1_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR1_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR2_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR2_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR3_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR3_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR4_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR4_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR5_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR5_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR6_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR6_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR7_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR7_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR8_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR8_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR9_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR9_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR10_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR10_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR11_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR11_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR12_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR12_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR13_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR13_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR14_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR14_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR15_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR15_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR16_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR16_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR17_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR17_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR18_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR18_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR19_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR19_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR20_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR20_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR21_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR21_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR22_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR22_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR23_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR23_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR24_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR24_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR25_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR25_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR26_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR26_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR27_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR27_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR28_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR28_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR29_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR29_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR30_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR30_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR31_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR31_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR32_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR32_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR33_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR33_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR34_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR34_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR35_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR35_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR36_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR36_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR37_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR37_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR38_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR38_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR39_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR39_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR40_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR40_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR41_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR41_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR42_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR42_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR43_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR43_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR44_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR44_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR45_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR45_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR46_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR46_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR47_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR47_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR48_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR48_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR49_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR49_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR50_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR50_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR51_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR51_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR52_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR52_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR53_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR53_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR54_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR54_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR55_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR55_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR56_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR56_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR57_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR57_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR58_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR58_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR59_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR59_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR60_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR60_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR61_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR61_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR62_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR62_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR63_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR63_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR64_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR64_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR65_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR65_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR66_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR66_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR67_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR67_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR68_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR68_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR69_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR69_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR70_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR70_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR71_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR71_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR72_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR72_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR73_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR73_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR74_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR74_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR75_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR75_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR76_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR76_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR77_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR77_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR78_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR78_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR79_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR79_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR80_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR80_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR81_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR81_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR82_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR82_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR83_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR83_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR84_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR84_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR85_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR85_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR86_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR86_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR87_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR87_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR88_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR88_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR89_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR89_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR90_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR90_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR91_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR91_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR92_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR92_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR93_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR93_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR94_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR94_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR95_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR95_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR96_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR96_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR97_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR97_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR98_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR98_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR99_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR99_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR100_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR100_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR101_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR101_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR102_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR102_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR103_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR103_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR104_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR104_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR105_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR105_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR106_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR106_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR107_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR107_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR108_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR108_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR109_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR109_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR110_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR110_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR111_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR111_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR112_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR112_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR113_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR113_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR114_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR114_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR115_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR115_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR116_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR116_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR117_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR117_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR118_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR118_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR119_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR119_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR120_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR120_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR121_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR121_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR122_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR122_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR123_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR123_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR124_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR124_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR125_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR125_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR126_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR126_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR127_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR127_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR128_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR128_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR129_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR129_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR130_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR130_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR131_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR131_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR132_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR132_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR133_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR133_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR134_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR134_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR135_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR135_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR136_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR136_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR137_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR137_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR138_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR138_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR139_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR139_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR140_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR140_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR141_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR141_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR142_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR142_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR143_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR143_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR144_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR144_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR145_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR145_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR146_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR146_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR147_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR147_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR148_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR148_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR149_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR149_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR150_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR150_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR151_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR151_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR152_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR152_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR153_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR153_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR154_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR154_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR155_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR155_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR156_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR156_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR157_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR157_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR158_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR158_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR159_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR159_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR160_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR160_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR161_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR161_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR162_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR162_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR163_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR163_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR164_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR164_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR165_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR165_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR166_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR166_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR167_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR167_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR168_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR168_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR169_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR169_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR170_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR170_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR171_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR171_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR172_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR172_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR173_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR173_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR174_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR174_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR175_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR175_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR176_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR176_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR177_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR177_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR178_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR178_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR179_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR179_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR180_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR180_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR181_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR181_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR182_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR182_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR183_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR183_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR184_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR184_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR185_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR185_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR186_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR186_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR187_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR187_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR188_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR188_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR189_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR189_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR190_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR190_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR191_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR191_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR192_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR192_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR193_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR193_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR194_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR194_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR195_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR195_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR196_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR196_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR197_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR197_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR198_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR198_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR199_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR199_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR200_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR200_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR201_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR201_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR202_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR202_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR203_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR203_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR204_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR204_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR205_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR205_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR206_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR206_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR207_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR207_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR208_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR208_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR209_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR209_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR210_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR210_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR211_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR211_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR212_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR212_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR213_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR213_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR214_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR214_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR215_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR215_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR216_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR216_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR217_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR217_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR218_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR218_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR219_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR219_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR220_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR220_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR221_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR221_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR222_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR222_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR223_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR223_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR224_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR224_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR225_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR225_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR226_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR226_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR227_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR227_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR228_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR228_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR229_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR229_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR230_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR230_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR231_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR231_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR232_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR232_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR233_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR233_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR234_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR234_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR235_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR235_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR236_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR236_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR237_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR237_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR238_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR238_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR239_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR239_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR240_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR240_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR241_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR241_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR242_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR242_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR243_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR243_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR244_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR244_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR245_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR245_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR246_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR246_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR247_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR247_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR248_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR248_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR249_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR249_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR250_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR250_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR251_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR251_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR252_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR252_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR253_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR253_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR254_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR254_ADR)
#define AXIS_MTC_TOP_PRGM_MEM_START_ADDR255_REG ((axis_mtc_top_prgm_mem_start_addr_reg_t*) AXIS_MTC_TOP_PRGM_MEM_START_ADDR255_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR0_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR0_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR1_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR1_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR2_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR2_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR3_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR3_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR4_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR4_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR5_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR5_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR6_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR6_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR7_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR7_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR8_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR8_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR9_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR9_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR10_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR10_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR11_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR11_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR12_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR12_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR13_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR13_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR14_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR14_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR15_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR15_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR16_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR16_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR17_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR17_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR18_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR18_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR19_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR19_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR20_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR20_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR21_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR21_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR22_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR22_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR23_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR23_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR24_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR24_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR25_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR25_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR26_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR26_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR27_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR27_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR28_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR28_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR29_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR29_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR30_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR30_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR31_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR31_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR32_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR32_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR33_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR33_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR34_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR34_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR35_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR35_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR36_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR36_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR37_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR37_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR38_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR38_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR39_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR39_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR40_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR40_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR41_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR41_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR42_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR42_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR43_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR43_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR44_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR44_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR45_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR45_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR46_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR46_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR47_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR47_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR48_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR48_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR49_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR49_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR50_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR50_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR51_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR51_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR52_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR52_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR53_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR53_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR54_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR54_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR55_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR55_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR56_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR56_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR57_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR57_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR58_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR58_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR59_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR59_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR60_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR60_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR61_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR61_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR62_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR62_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR63_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR63_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR64_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR64_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR65_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR65_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR66_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR66_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR67_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR67_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR68_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR68_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR69_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR69_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR70_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR70_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR71_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR71_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR72_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR72_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR73_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR73_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR74_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR74_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR75_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR75_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR76_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR76_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR77_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR77_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR78_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR78_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR79_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR79_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR80_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR80_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR81_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR81_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR82_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR82_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR83_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR83_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR84_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR84_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR85_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR85_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR86_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR86_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR87_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR87_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR88_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR88_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR89_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR89_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR90_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR90_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR91_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR91_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR92_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR92_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR93_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR93_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR94_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR94_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR95_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR95_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR96_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR96_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR97_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR97_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR98_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR98_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR99_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR99_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR100_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR100_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR101_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR101_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR102_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR102_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR103_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR103_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR104_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR104_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR105_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR105_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR106_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR106_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR107_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR107_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR108_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR108_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR109_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR109_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR110_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR110_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR111_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR111_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR112_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR112_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR113_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR113_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR114_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR114_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR115_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR115_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR116_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR116_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR117_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR117_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR118_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR118_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR119_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR119_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR120_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR120_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR121_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR121_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR122_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR122_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR123_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR123_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR124_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR124_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR125_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR125_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR126_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR126_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR127_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR127_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR128_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR128_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR129_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR129_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR130_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR130_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR131_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR131_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR132_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR132_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR133_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR133_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR134_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR134_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR135_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR135_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR136_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR136_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR137_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR137_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR138_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR138_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR139_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR139_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR140_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR140_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR141_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR141_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR142_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR142_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR143_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR143_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR144_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR144_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR145_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR145_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR146_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR146_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR147_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR147_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR148_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR148_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR149_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR149_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR150_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR150_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR151_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR151_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR152_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR152_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR153_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR153_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR154_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR154_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR155_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR155_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR156_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR156_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR157_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR157_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR158_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR158_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR159_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR159_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR160_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR160_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR161_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR161_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR162_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR162_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR163_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR163_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR164_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR164_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR165_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR165_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR166_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR166_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR167_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR167_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR168_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR168_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR169_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR169_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR170_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR170_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR171_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR171_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR172_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR172_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR173_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR173_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR174_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR174_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR175_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR175_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR176_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR176_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR177_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR177_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR178_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR178_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR179_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR179_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR180_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR180_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR181_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR181_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR182_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR182_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR183_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR183_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR184_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR184_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR185_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR185_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR186_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR186_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR187_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR187_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR188_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR188_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR189_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR189_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR190_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR190_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR191_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR191_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR192_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR192_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR193_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR193_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR194_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR194_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR195_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR195_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR196_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR196_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR197_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR197_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR198_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR198_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR199_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR199_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR200_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR200_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR201_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR201_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR202_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR202_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR203_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR203_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR204_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR204_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR205_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR205_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR206_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR206_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR207_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR207_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR208_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR208_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR209_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR209_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR210_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR210_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR211_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR211_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR212_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR212_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR213_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR213_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR214_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR214_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR215_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR215_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR216_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR216_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR217_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR217_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR218_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR218_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR219_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR219_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR220_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR220_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR221_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR221_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR222_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR222_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR223_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR223_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR224_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR224_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR225_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR225_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR226_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR226_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR227_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR227_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR228_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR228_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR229_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR229_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR230_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR230_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR231_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR231_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR232_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR232_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR233_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR233_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR234_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR234_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR235_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR235_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR236_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR236_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR237_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR237_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR238_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR238_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR239_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR239_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR240_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR240_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR241_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR241_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR242_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR242_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR243_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR243_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR244_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR244_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR245_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR245_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR246_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR246_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR247_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR247_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR248_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR248_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR249_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR249_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR250_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR250_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR251_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR251_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR252_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR252_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR253_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR253_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR254_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR254_ADR)
#define AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR255_REG ((axis_mtc_top_tdo_cap_mem_start_addr_reg_t*) AXIS_MTC_TOP_TDO_CAP_MEM_START_ADDR255_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    axis_mtc_top_inst_params0_addr_reg_t MTC_INST_PARAMS0_ADDR; /*< Address offset = 0x0 */
    axis_mtc_top_scratch0_addr_reg_t MTC_SCRATCH0_ADDR; /*< Address offset = 0x4 */
    axis_mtc_top_scratch1_addr_reg_t MTC_SCRATCH1_ADDR; /*< Address offset = 0x8 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0xc */
    axis_mtc_top_cfg0_addr_reg_t MTC_CFG0_ADDR; /*< Address offset = 0x10 */
    axis_mtc_top_cfg1_addr_reg_t MTC_CFG1_ADDR; /*< Address offset = 0x14 */
    const uint8_t        reservedArea1 [8];   /*< Address offset = 0x18 */
    axis_mtc_top_stat1_addr_reg_t MTC_STAT1_ADDR; /*< Address offset = 0x20 */
    axis_mtc_top_stat2_addr_reg_t MTC_STAT2_ADDR; /*< Address offset = 0x24 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x28 */
    axis_mtc_top_execute1_addr_reg_t MTC_EXECUTE1_ADDR; /*< Address offset = 0x30 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x34 */
    axis_mtc_top_mem_init_addr_reg_t MTC_MEM_INIT_ADDR; /*< Address offset = 0x40 */
    axis_mtc_top_ecc_dis_addr_reg_t MTC_ECC_DIS_ADDR; /*< Address offset = 0x44 */
    axis_mtc_top_ecc_invert_en_addr_reg_t MTC_ECC_INVERT_EN_ADDR; /*< Address offset = 0x48 */
    axis_mtc_top_ecc_invert_addr_reg_t MTC_ECC_INVERT_ADDR; /*< Address offset = 0x4c */
    axis_mtc_top_tstgen_intr_stat_reg_t MTC_TSTGEN_INTR_STAT; /*< Address offset = 0x50 */
    axis_mtc_top_tstgen_intr_en_reg_t MTC_TSTGEN_INTR_EN; /*< Address offset = 0x54 */
    axis_mtc_top_tstgen_intr_frc_reg_t MTC_TSTGEN_INTR_FRC; /*< Address offset = 0x58 */
    axis_mtc_top_ecc_apb2tap_ecc_intr_stat_reg_t MTC_ECC_APB2TAP_ECC_INTR_STAT; /*< Address offset = 0x5c */
    axis_mtc_top_ecc_apb2tap_ecc_intr_en_reg_t MTC_ECC_APB2TAP_ECC_INTR_EN; /*< Address offset = 0x60 */
    axis_mtc_top_ecc_apb2tap_ecc_intr_frc_reg_t MTC_ECC_APB2TAP_ECC_INTR_FRC; /*< Address offset = 0x64 */
    const uint8_t        reservedArea4 [24];  /*< Address offset = 0x68 */
    axis_mtc_top_dbg0_addr_reg_t MTC_DBG0_ADDR; /*< Address offset = 0x80 */
    axis_mtc_top_dbg1_addr_reg_t MTC_DBG1_ADDR; /*< Address offset = 0x84 */
    axis_mtc_top_dbg2_addr_reg_t MTC_DBG2_ADDR; /*< Address offset = 0x88 */
    axis_mtc_top_dbg3_addr_reg_t MTC_DBG3_ADDR; /*< Address offset = 0x8c */
    axis_mtc_top_dbg4_addr_reg_t MTC_DBG4_ADDR; /*< Address offset = 0x90 */
    axis_mtc_top_dbg5_addr_reg_t MTC_DBG5_ADDR; /*< Address offset = 0x94 */
    const uint8_t        reservedArea5 [104]; /*< Address offset = 0x98 */
    axis_mtc_top_mem_apb2tap_cfg0_addr_reg_t APB2TAP_CFG0_ADDR; /*< Address offset = 0x100 */
    const uint8_t        reservedArea6 [256]; /*< Address offset = 0x104 */
    axis_mtc_top_mem_apb2tap_mon_addr_reg_t APB2TAP_MON_ADDR; /*< Address offset = 0x204 */
    const uint8_t        reservedArea7 [3576]; /*< Address offset = 0x208 */
    axis_mtc_top_prgm_mem_start_addr_reg_t MTC_PRGM_MEM_START_ADDR[256]; /*< Address offset = 0x1000 */
    const uint8_t        reservedArea8 [3072]; /*< Address offset = 0x1400 */
    axis_mtc_top_tdo_cap_mem_start_addr_reg_t MTC_TDO_CAP_MEM_START_ADDR[256]; /*< Address offset = 0x2000 */
} axis_mtc_top_t;     // size: 0x0070

// AddressSpace struct pointer
//
#define SYSCON_APB2TAP_AXIS_MTC_TOP  ((axis_mtc_top_t*) SYSCON_APB2TAP_AXIS_MTC_TOP_BASE)

// ******************************************* /Address Space

#endif      // _AXIS_MTC_TOP_H_

