#ifndef _JESDABC_RX_GLUE_H_
#define _JESDABC_RX_GLUE_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define DLNK_JESDABC0_RX_GLUE_BASE  0x0670c000
#define DLNK_JESDABC1_RX_GLUE_BASE  0x06f0c000
#define DLNK_JESDABC2_RX_GLUE_BASE  0x0770c000
#define DLNK_JESDABC3_RX_GLUE_BASE  0x07f0c000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define JESDABC_RX_GLUE_MEM_SCRATCH_OFFSET ( 0x00000000U )
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_OFFSET ( 0x00000004U )
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_OFFSET ( 0x00000010U )
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_OFFSET ( 0x00000014U )
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_OFFSET ( 0x00000018U )
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_OFFSET ( 0x0000001cU )
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_OFFSET ( 0x00000020U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define JESDABC_RX_GLUE_MEM_SCRATCH_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_SCRATCH_OFFSET ) ))
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_OFFSET ) ))
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_OFFSET ) ))
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_OFFSET ) ))
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_OFFSET ) ))
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_OFFSET ) ))
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/SCRATCH
  * Scratch Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Scratch pad
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_scratch_reg_t;

#define JESDABC_RX_GLUE_MEM_SCRATCH_DEFAULT (0x00000000U)
#define JESDABC_RX_GLUE_MEM_SCRATCH_RD_MASK (0xffffffffU)
#define JESDABC_RX_GLUE_MEM_SCRATCH_WR_MASK (0xffffffffU)


///< Scratch pad
#define JESDABC_RX_GLUE_MEM_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_SCRATCH_SCRATCHPAD_BF_WID (32)
#define JESDABC_RX_GLUE_MEM_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define JESDABC_RX_GLUE_MEM_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_APB_BRIDGE_STATUS register description at address offset 0x4
  *
  * Register default value:        0x00010000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_apb_bridge_status_reg_t;

#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_DEFAULT (0x00010000U)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_RD_MASK (0xffffffffU)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_WID (20)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_MSK (0x000FFFFF)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_VALUE_BF_DEF (0x00010000)

///< Module Revision Number
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_REVISION_BF_OFF (20)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_REVISION_BF_WID ( 8)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_REVISION_BF_MSK (0x0FF00000)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_OFF (28)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_WID ( 1)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_OFF (29)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_WID ( 1)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_MSK (0x20000000)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_OFF (30)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_WID ( 1)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_MSK (0x40000000)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_ACK_ERROR_BF_DEF (0x00000000)

///< An APB request has timed out
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_OFF (31)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_WID ( 1)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_MSK (0x80000000)
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_TIMEOUT_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_GLUE_SONI register description at address offset 0x10
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_GLUE_SONI
  * RX Converter datapath configuration register
  */

typedef union {
  struct {
    uint32_t RX_SONI : 4;
    ///< Number of samples avaiable per converter  in single sample clock cycle
    ///< from RX IP.       Only Soni values of 1,2,4 and 8 are supported.
    ///< 1 - 1 sample  per cycle.        2 - 2 samples per cycle.        3
    ///< - 3 samples per cycle and so on.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_rx_glue_soni_reg_t;

#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_DEFAULT (0x00000001U)
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_RD_MASK (0x0000000fU)
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_WR_MASK (0x0000000fU)


///< Number of samples avaiable per converter  in single sample clock cycle
///< from RX IP.       Only Soni values of 1,2,4 and 8 are supported.
///< 1 - 1 sample  per cycle.        2 - 2 samples per cycle.        3
///< - 3 samples per cycle and so on.
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_RX_SONI_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_RX_SONI_BF_WID ( 4)
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_RX_SONI_BF_MSK (0x0000000F)
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_RX_SONI_BF_DEF (0x00000001)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DATAPATH_GATE_SEL register description at address offset 0x14
  *
  * Register default value:        0x00000001
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DATAPATH_GATE_SEL
  * RX Datapath valid Gating logic control
  */

typedef union {
  struct {
    uint32_t RX_DP_GATE_SEL : 3;
    ///< RX Datapath valid Gating logic control.        3'b0 : First valid
    ///< sample from RX IP enables the datapath.       3'b1 : First non zero
    ///< valid sample from RX IP enables the datapath.       3'b2 : Programmble
    ///< sample clock cycles after first SYSREF pulse to IP enables the datapath.
    ///< 3'b3 : BFN Trigger  enables the datapath.       3'b4 : Software register
    ///< bit enables the datapath.       3'b5-3'b7 : Reserved. Behaviour same
    ///< as 3'b0.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_rx_datapath_gate_sel_reg_t;

#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_DEFAULT (0x00000001U)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_RD_MASK (0x00000007U)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_WR_MASK (0x00000007U)


///< RX Datapath valid Gating logic control.        3'b0 : First valid
///< sample from RX IP enables the datapath.       3'b1 : First non zero
///< valid sample from RX IP enables the datapath.       3'b2 : Programmble
///< sample clock cycles after first SYSREF pulse to IP enables the datapath.
///< 3'b3 : BFN Trigger  enables the datapath.       3'b4 : Software register
///< bit enables the datapath.       3'b5-3'b7 : Reserved. Behaviour same
///< as 3'b0.
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_WID ( 3)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_MSK (0x00000007)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_RX_DP_GATE_SEL_BF_DEF (0x00000001)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DATAPATH_SW_EN register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DATAPATH_SW_EN
  * RX Datapath Software enabler
  */

typedef union {
  struct {
    uint32_t RX_DP_SW_EN : 1;
    ///< Enables rx datapath when set to 1 and this option is selected by register
    ///< rx_dp_gate_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_rx_datapath_sw_en_reg_t;

#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_DEFAULT (0x00000000U)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_RD_MASK (0x00000001U)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_WR_MASK (0x00000001U)


///< Enables rx datapath when set to 1 and this option is selected by register
///< rx_dp_gate_sel
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_RX_DP_SW_EN_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_RX_DP_SW_EN_BF_WID ( 1)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_RX_DP_SW_EN_BF_MSK (0x00000001)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_RX_DP_SW_EN_BF_DEF (0x00000000)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DATAPATH_INIT_CYC_CNT register description at address offset 0x1c
  *
  * Register default value:        0x00000080
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DATAPATH_INIT_CYC_CNT
  * RX DP Init Cycle Count
  */

typedef union {
  struct {
    uint32_t RX_DP_INIT_CNT : 32;
    ///< Sets sample cycle count value after first SYSREF pulse to IP to enable
    ///< RX datapath when this option is selected by register rx_dp_gate_sel
    ///< AccessType="RW" BitOffset="0" ResetValue="0x80"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_rx_datapath_init_cyc_cnt_reg_t;

#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_DEFAULT (0x00000080U)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_RD_MASK (0xffffffffU)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_WR_MASK (0xffffffffU)


///< Sets sample cycle count value after first SYSREF pulse to IP to enable
///< RX datapath when this option is selected by register rx_dp_gate_sel
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_WID (32)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_MSK (0xFFFFFFFF)
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_RX_DP_INIT_CNT_BF_DEF (0x00000080)


/** @brief JESDABC_RX_GLUE_MEM_JESDABC_RX_GLUE_RX_DP_START_SYNC_DLY register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_rx_glue_MEM/jesdabc_rx_glue/RX_DP_START_SYNC_DLY
  * RX Datapath Start to SYNC POINT Delay register
  */

typedef union {
  struct {
    uint32_t RX_DP_START_SYNC_DLY : 16;
    ///< Indicates the Nunber of RX IP sample clock cycles from RX first sample
    ///< to next sync point.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_rx_glue_mem_rx_dp_start_sync_dly_reg_t;

#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_DEFAULT (0x00000000U)
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_RD_MASK (0x0000ffffU)
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_WR_MASK (0x00000000U)


///< Indicates the Nunber of RX IP sample clock cycles from RX first sample
///< to next sync point.
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_OFF ( 0)
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_WID (16)
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_MSK (0x0000FFFF)
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_RX_DP_START_SYNC_DLY_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define JESDABC_RX_GLUE_MEM_SCRATCH_REG(_BASE) ((jesdabc_rx_glue_mem_scratch_reg_t*) JESDABC_RX_GLUE_MEM_SCRATCH_ADR(_BASE))
#define JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_REG(_BASE) ((jesdabc_rx_glue_mem_apb_bridge_status_reg_t*) JESDABC_RX_GLUE_MEM_APB_BRIDGE_STATUS_ADR(_BASE))
#define JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_REG(_BASE) ((jesdabc_rx_glue_mem_rx_glue_soni_reg_t*) JESDABC_RX_GLUE_MEM_RX_GLUE_SONI_ADR(_BASE))
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_REG(_BASE) ((jesdabc_rx_glue_mem_rx_datapath_gate_sel_reg_t*) JESDABC_RX_GLUE_MEM_RX_DATAPATH_GATE_SEL_ADR(_BASE))
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_REG(_BASE) ((jesdabc_rx_glue_mem_rx_datapath_sw_en_reg_t*) JESDABC_RX_GLUE_MEM_RX_DATAPATH_SW_EN_ADR(_BASE))
#define JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_REG(_BASE) ((jesdabc_rx_glue_mem_rx_datapath_init_cyc_cnt_reg_t*) JESDABC_RX_GLUE_MEM_RX_DATAPATH_INIT_CYC_CNT_ADR(_BASE))
#define JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_REG(_BASE) ((jesdabc_rx_glue_mem_rx_dp_start_sync_dly_reg_t*) JESDABC_RX_GLUE_MEM_RX_DP_START_SYNC_DLY_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    jesdabc_rx_glue_mem_scratch_reg_t SCRATCH; /*< Address offset = 0x0 */
    jesdabc_rx_glue_mem_apb_bridge_status_reg_t APB_BRIDGE_STATUS; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x8 */
    jesdabc_rx_glue_mem_rx_glue_soni_reg_t RX_GLUE_SONI; /*< Address offset = 0x10 */
    jesdabc_rx_glue_mem_rx_datapath_gate_sel_reg_t RX_DATAPATH_GATE_SEL; /*< Address offset = 0x14 */
    jesdabc_rx_glue_mem_rx_datapath_sw_en_reg_t RX_DATAPATH_SW_EN; /*< Address offset = 0x18 */
    jesdabc_rx_glue_mem_rx_datapath_init_cyc_cnt_reg_t RX_DATAPATH_INIT_CYC_CNT; /*< Address offset = 0x1c */
    jesdabc_rx_glue_mem_rx_dp_start_sync_dly_reg_t RX_DP_START_SYNC_DLY; /*< Address offset = 0x20 */
} jesdabc_rx_glue_t;     // size: 0x001c

// AddressSpace struct pointer
//
#define DLNK_JESDABC0_RX_GLUE ((jesdabc_rx_glue_t*) DLNK_JESDABC0_RX_GLUE_BASE)
#define DLNK_JESDABC1_RX_GLUE ((jesdabc_rx_glue_t*) DLNK_JESDABC1_RX_GLUE_BASE)
#define DLNK_JESDABC2_RX_GLUE ((jesdabc_rx_glue_t*) DLNK_JESDABC2_RX_GLUE_BASE)
#define DLNK_JESDABC3_RX_GLUE ((jesdabc_rx_glue_t*) DLNK_JESDABC3_RX_GLUE_BASE)

// ******************************************* /Address Space

#endif      // _JESDABC_RX_GLUE_H_

