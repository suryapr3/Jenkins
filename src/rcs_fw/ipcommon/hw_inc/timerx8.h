#ifndef _TIMERX8_H_
#define _TIMERX8_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_TIMER_GRP0_TMR0_BASE  ( 0x00268000 )
#define RCS_TIMER_GRP0_TMR1_BASE  ( 0x00268100 )
#define RCS_TIMER_GRP1_TMR0_BASE  ( 0x00268400 )
#define RCS_TIMER_GRP1_TMR1_BASE  ( 0x00268500 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define TIMERX8_T0_TRIG_OFFSET ( 0x00000000U )
#define TIMERX8_T0_INTERVAL_OFFSET ( 0x00000004U )
#define TIMERX8_T0_GPIO_MASK_OFFSET ( 0x00000008U )
#define TIMERX8_T0_GPIO_VAL_OFFSET ( 0x0000000cU )
#define TIMERX8_T0_CFG_OFFSET ( 0x00000010U )
#define TIMERX8_T1_TRIG_OFFSET ( 0x00000020U )
#define TIMERX8_T1_INTERVAL_OFFSET ( 0x00000024U )
#define TIMERX8_T1_GPIO_MASK_OFFSET ( 0x00000028U )
#define TIMERX8_T1_GPIO_VAL_OFFSET ( 0x0000002cU )
#define TIMERX8_T1_CFG_OFFSET ( 0x00000030U )
#define TIMERX8_T2_TRIG_OFFSET ( 0x00000040U )
#define TIMERX8_T2_INTERVAL_OFFSET ( 0x00000044U )
#define TIMERX8_T2_GPIO_MASK_OFFSET ( 0x00000048U )
#define TIMERX8_T2_GPIO_VAL_OFFSET ( 0x0000004cU )
#define TIMERX8_T2_CFG_OFFSET ( 0x00000050U )
#define TIMERX8_T3_TRIG_OFFSET ( 0x00000060U )
#define TIMERX8_T3_INTERVAL_OFFSET ( 0x00000064U )
#define TIMERX8_T3_GPIO_MASK_OFFSET ( 0x00000068U )
#define TIMERX8_T3_GPIO_VAL_OFFSET ( 0x0000006cU )
#define TIMERX8_T3_CFG_OFFSET ( 0x00000070U )
#define TIMERX8_T4_TRIG_OFFSET ( 0x00000080U )
#define TIMERX8_T4_INTERVAL_OFFSET ( 0x00000084U )
#define TIMERX8_T4_GPIO_MASK_OFFSET ( 0x00000088U )
#define TIMERX8_T4_GPIO_VAL_OFFSET ( 0x0000008cU )
#define TIMERX8_T4_CFG_OFFSET ( 0x00000090U )
#define TIMERX8_T5_TRIG_OFFSET ( 0x000000a0U )
#define TIMERX8_T5_INTERVAL_OFFSET ( 0x000000a4U )
#define TIMERX8_T5_GPIO_MASK_OFFSET ( 0x000000a8U )
#define TIMERX8_T5_GPIO_VAL_OFFSET ( 0x000000acU )
#define TIMERX8_T5_CFG_OFFSET ( 0x000000b0U )
#define TIMERX8_T6_TRIG_OFFSET ( 0x000000c0U )
#define TIMERX8_T6_INTERVAL_OFFSET ( 0x000000c4U )
#define TIMERX8_T6_GPIO_MASK_OFFSET ( 0x000000c8U )
#define TIMERX8_T6_GPIO_VAL_OFFSET ( 0x000000ccU )
#define TIMERX8_T6_CFG_OFFSET ( 0x000000d0U )
#define TIMERX8_T7_TRIG_OFFSET ( 0x000000e0U )
#define TIMERX8_T7_INTERVAL_OFFSET ( 0x000000e4U )
#define TIMERX8_T7_GPIO_MASK_OFFSET ( 0x000000e8U )
#define TIMERX8_T7_GPIO_VAL_OFFSET ( 0x000000ecU )
#define TIMERX8_T7_CFG_OFFSET ( 0x000000f0U )
#define TIMERX8_STAT_OFFSET ( 0x000000fcU )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define TIMERX8_T0_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T0_TRIG_OFFSET ) ))
#define TIMERX8_T0_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T0_INTERVAL_OFFSET ) ))
#define TIMERX8_T0_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T0_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T0_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T0_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T0_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T0_CFG_OFFSET ) ))
#define TIMERX8_T1_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T1_TRIG_OFFSET ) ))
#define TIMERX8_T1_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T1_INTERVAL_OFFSET ) ))
#define TIMERX8_T1_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T1_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T1_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T1_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T1_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T1_CFG_OFFSET ) ))
#define TIMERX8_T2_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T2_TRIG_OFFSET ) ))
#define TIMERX8_T2_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T2_INTERVAL_OFFSET ) ))
#define TIMERX8_T2_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T2_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T2_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T2_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T2_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T2_CFG_OFFSET ) ))
#define TIMERX8_T3_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T3_TRIG_OFFSET ) ))
#define TIMERX8_T3_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T3_INTERVAL_OFFSET ) ))
#define TIMERX8_T3_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T3_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T3_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T3_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T3_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T3_CFG_OFFSET ) ))
#define TIMERX8_T4_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T4_TRIG_OFFSET ) ))
#define TIMERX8_T4_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T4_INTERVAL_OFFSET ) ))
#define TIMERX8_T4_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T4_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T4_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T4_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T4_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T4_CFG_OFFSET ) ))
#define TIMERX8_T5_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T5_TRIG_OFFSET ) ))
#define TIMERX8_T5_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T5_INTERVAL_OFFSET ) ))
#define TIMERX8_T5_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T5_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T5_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T5_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T5_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T5_CFG_OFFSET ) ))
#define TIMERX8_T6_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T6_TRIG_OFFSET ) ))
#define TIMERX8_T6_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T6_INTERVAL_OFFSET ) ))
#define TIMERX8_T6_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T6_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T6_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T6_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T6_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T6_CFG_OFFSET ) ))
#define TIMERX8_T7_TRIG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T7_TRIG_OFFSET ) ))
#define TIMERX8_T7_INTERVAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T7_INTERVAL_OFFSET ) ))
#define TIMERX8_T7_GPIO_MASK_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T7_GPIO_MASK_OFFSET ) ))
#define TIMERX8_T7_GPIO_VAL_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T7_GPIO_VAL_OFFSET ) ))
#define TIMERX8_T7_CFG_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_T7_CFG_OFFSET ) ))
#define TIMERX8_STAT_ADR(_BASE) (( ( _BASE ) + ( TIMERX8_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief TIMERX8_COM_REG_T0_TIMER_TRIGGER[8] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: timerx8_com/reg/t0/timer_trigger
  * TimerTrigger Value
  */

typedef union {
  struct {
    uint32_t LOWER_COUNT : 24;
    ///< The lower BFN count at which this timer triggers. Typically this would
    ///< be in fractions of 10ms. This value must be programmed equal to or
    ///< less than the system level 10ms counter
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TEN_MS_COUNT : 8;
    ///< The upper BFN count at which this timer triggers. Typically this would
    ///< be in 10s of ms
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} timerx8_t_trig_reg_t;

#define TIMERX8_T_TRIG_DEFAULT (0x00000000U)
#define TIMERX8_T_TRIG_RD_MASK (0xffffffffU)
#define TIMERX8_T_TRIG_WR_MASK (0xffffffffU)


///< The lower BFN count at which this timer triggers. Typically this would
///< be in fractions of 10ms. This value must be programmed equal to or
///< less than the system level 10ms counter
#define TIMERX8_T_TRIG_LOWER_CNT_BF_OFF ( 0)
#define TIMERX8_T_TRIG_LOWER_CNT_BF_WID (24)
#define TIMERX8_T_TRIG_LOWER_CNT_BF_MSK (0x00FFFFFF)
#define TIMERX8_T_TRIG_LOWER_CNT_BF_DEF (0x00000000)

///< The upper BFN count at which this timer triggers. Typically this would
///< be in 10s of ms
#define TIMERX8_T_TRIG_TEN_MS_CNT_BF_OFF (24)
#define TIMERX8_T_TRIG_TEN_MS_CNT_BF_WID ( 8)
#define TIMERX8_T_TRIG_TEN_MS_CNT_BF_MSK (0xFF000000)
#define TIMERX8_T_TRIG_TEN_MS_CNT_BF_DEF (0x00000000)
#define TIMERX8_T_TRIG_ARR_SZ0 (8)
#define TIMERX8_T_TRIG_ARRAY_STRIDE0 (0x0020)


/** @brief TIMERX8_COM_REG_T0_TIMER_INTERVAL[8] register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: timerx8_com/reg/t0/timer_interval
  * TimerInterval Value
  */

typedef union {
  struct {
    uint32_t LOWER_COUNT : 24;
    ///< The lower BFN count at which this timer increments when in continuous
    ///< mode
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TEN_MS_COUNT : 4;
    ///< The upper BFN count at which this timer increments when in continuous
    ///< mode
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} timerx8_t_interval_reg_t;

#define TIMERX8_T_INTERVAL_DEFAULT (0x00000000U)
#define TIMERX8_T_INTERVAL_RD_MASK (0x0fffffffU)
#define TIMERX8_T_INTERVAL_WR_MASK (0x0fffffffU)


///< The lower BFN count at which this timer increments when in continuous
///< mode
#define TIMERX8_T_INTERVAL_LOWER_CNT_BF_OFF ( 0)
#define TIMERX8_T_INTERVAL_LOWER_CNT_BF_WID (24)
#define TIMERX8_T_INTERVAL_LOWER_CNT_BF_MSK (0x00FFFFFF)
#define TIMERX8_T_INTERVAL_LOWER_CNT_BF_DEF (0x00000000)

///< The upper BFN count at which this timer increments when in continuous
///< mode
#define TIMERX8_T_INTERVAL_TEN_MS_CNT_BF_OFF (24)
#define TIMERX8_T_INTERVAL_TEN_MS_CNT_BF_WID ( 4)
#define TIMERX8_T_INTERVAL_TEN_MS_CNT_BF_MSK (0x0F000000)
#define TIMERX8_T_INTERVAL_TEN_MS_CNT_BF_DEF (0x00000000)
#define TIMERX8_T_INTERVAL_ARR_SZ0 (8)
#define TIMERX8_T_INTERVAL_ARRAY_STRIDE0 (0x0020)


/** @brief TIMERX8_COM_REG_T0_TIMER_GPIO_MASK[8] register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: timerx8_com/reg/t0/timer_gpio_mask
  * GPIO Set Mask
  */

typedef union {
  struct {
    uint32_t GPIO_MASK : 32;
    ///< Mask value for the GPIO in this group. Bit 0 corresponds to GPIO bit
    ///< 0 in this group. If set to 1, the corresponding bit in the timer GPIO
    ///< Value register is applied to the GPIO output when this timer triggers.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timerx8_t_gpio_mask_reg_t;

#define TIMERX8_T_GPIO_MASK_DEFAULT (0x00000000U)
#define TIMERX8_T_GPIO_MASK_RD_MASK (0xffffffffU)
#define TIMERX8_T_GPIO_MASK_WR_MASK (0xffffffffU)


///< Mask value for the GPIO in this group. Bit 0 corresponds to GPIO bit
///< 0 in this group. If set to 1, the corresponding bit in the timer GPIO
///< Value register is applied to the GPIO output when this timer triggers.
#define TIMERX8_T_GPIO_MASK_GPIO_MASK_BF_OFF ( 0)
#define TIMERX8_T_GPIO_MASK_GPIO_MASK_BF_WID (32)
#define TIMERX8_T_GPIO_MASK_GPIO_MASK_BF_MSK (0xFFFFFFFF)
#define TIMERX8_T_GPIO_MASK_GPIO_MASK_BF_DEF (0x00000000)
#define TIMERX8_T_GPIO_MASK_ARR_SZ0 (8)
#define TIMERX8_T_GPIO_MASK_ARRAY_STRIDE0 (0x0020)


/** @brief TIMERX8_COM_REG_T0_TIMER_GPIO_VAL[8] register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: timerx8_com/reg/t0/timer_gpio_val
  * GPIO Set Value
  */

typedef union {
  struct {
    uint32_t GPIO_SET : 32;
    ///< Set value for the GPIO in this group. Bit 0 corresponds to GPIO bit
    ///< 0 in this group. If register is written then each gpio will be updated
    ///< with this value if the corresponding bit is set in the GPIO_MASK register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} timerx8_t_gpio_val_reg_t;

#define TIMERX8_T_GPIO_VAL_DEFAULT (0x00000000U)
#define TIMERX8_T_GPIO_VAL_RD_MASK (0xffffffffU)
#define TIMERX8_T_GPIO_VAL_WR_MASK (0xffffffffU)


///< Set value for the GPIO in this group. Bit 0 corresponds to GPIO bit
///< 0 in this group. If register is written then each gpio will be updated
///< with this value if the corresponding bit is set in the GPIO_MASK register.
#define TIMERX8_T_GPIO_VAL_GPIO_SET_BF_OFF ( 0)
#define TIMERX8_T_GPIO_VAL_GPIO_SET_BF_WID (32)
#define TIMERX8_T_GPIO_VAL_GPIO_SET_BF_MSK (0xFFFFFFFF)
#define TIMERX8_T_GPIO_VAL_GPIO_SET_BF_DEF (0x00000000)
#define TIMERX8_T_GPIO_VAL_ARR_SZ0 (8)
#define TIMERX8_T_GPIO_VAL_ARRAY_STRIDE0 (0x0020)


/** @brief TIMERX8_COM_REG_T0_TIMER_CFG[8] register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: timerx8_com/reg/t0/timer_cfg
  * Timer Configuration
  */

typedef union {
  struct {
    uint32_t ENABLE : 1;
    ///< Timer enable. When written to 1, the corresponding timer is enabled.
    ///< The trigger intervals and the timer mode bit must be set before enabling
    ///< the timer. In one-shot mode, the enable clears automatically when
    ///< timer expires. This field will read back with the current running
    ///< status of each timer.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t MODE : 1;
    ///< Timer mode. When set to 1, the timer is configured to operate in continuous
    ///< mode, otherwise the timer is in one-shot mode.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t INT_EN : 1;
    ///< Interrupt enable. When set to 1, the corresponding timer generates
    ///< an interrupt on expiration.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t EXPIRED : 1;
    ///< This bit indicates that the timer has expired.  When this resigter
    ///< is read the bit is cleared.  In addition, the corresponding bit in
    ///< TIMER_STATUS is cleared as well.
    ///< AccessType="RO/C/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} timerx8_t_cfg_reg_t;

#define TIMERX8_T_CFG_DEFAULT (0x00000000U)
#define TIMERX8_T_CFG_RD_MASK (0x0000000fU)
#define TIMERX8_T_CFG_WR_MASK (0x00000007U)


///< Timer enable. When written to 1, the corresponding timer is enabled.
///< The trigger intervals and the timer mode bit must be set before enabling
///< the timer. In one-shot mode, the enable clears automatically when
///< timer expires. This field will read back with the current running
///< status of each timer.
#define TIMERX8_T_CFG_EN_BF_OFF ( 0)
#define TIMERX8_T_CFG_EN_BF_WID ( 1)
#define TIMERX8_T_CFG_EN_BF_MSK (0x00000001)
#define TIMERX8_T_CFG_EN_BF_DEF (0x00000000)

///< Timer mode. When set to 1, the timer is configured to operate in continuous
///< mode, otherwise the timer is in one-shot mode.
#define TIMERX8_T_CFG_MODE_BF_OFF ( 1)
#define TIMERX8_T_CFG_MODE_BF_WID ( 1)
#define TIMERX8_T_CFG_MODE_BF_MSK (0x00000002)
#define TIMERX8_T_CFG_MODE_BF_DEF (0x00000000)

///< Interrupt enable. When set to 1, the corresponding timer generates
///< an interrupt on expiration.
#define TIMERX8_T_CFG_INT_EN_BF_OFF ( 2)
#define TIMERX8_T_CFG_INT_EN_BF_WID ( 1)
#define TIMERX8_T_CFG_INT_EN_BF_MSK (0x00000004)
#define TIMERX8_T_CFG_INT_EN_BF_DEF (0x00000000)

///< This bit indicates that the timer has expired.  When this resigter
///< is read the bit is cleared.  In addition, the corresponding bit in
///< TIMER_STATUS is cleared as well.
#define TIMERX8_T_CFG_EXPIRED_BF_OFF ( 3)
#define TIMERX8_T_CFG_EXPIRED_BF_WID ( 1)
#define TIMERX8_T_CFG_EXPIRED_BF_MSK (0x00000008)
#define TIMERX8_T_CFG_EXPIRED_BF_DEF (0x00000000)
#define TIMERX8_T_CFG_ARR_SZ0 (8)
#define TIMERX8_T_CFG_ARRAY_STRIDE0 (0x0020)


/** @brief TIMERX8_COM_REG_TIMER_STATUS register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: timerx8_com/reg/timer_status
  * Timer Status bits
  */

typedef union {
  struct {
    uint32_t EXPIRE : 8;
    ///< When set to 1, indicates that the corresponding timer has triggered.
    ///< The status for each timer is duplicated in the timer_cfg register
    ///< corresponding to the the bit possition.  When those registers are
    ///< read the corresponding bit in this register will be cleared.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} timerx8_stat_reg_t;

#define TIMERX8_STAT_DEFAULT (0x00000000U)
#define TIMERX8_STAT_RD_MASK (0x000000ffU)
#define TIMERX8_STAT_WR_MASK (0x00000000U)


///< When set to 1, indicates that the corresponding timer has triggered.
///< The status for each timer is duplicated in the timer_cfg register
///< corresponding to the the bit possition.  When those registers are
///< read the corresponding bit in this register will be cleared.
#define TIMERX8_STAT_EXPIRE_BF_OFF ( 0)
#define TIMERX8_STAT_EXPIRE_BF_WID ( 8)
#define TIMERX8_STAT_EXPIRE_BF_MSK (0x000000FF)
#define TIMERX8_STAT_EXPIRE_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define TIMERX8_T0_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T0_TRIG_ADR(_BASE))
#define TIMERX8_T0_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T0_INTERVAL_ADR(_BASE))
#define TIMERX8_T0_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T0_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T0_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T0_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T0_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T0_CFG_ADR(_BASE))
#define TIMERX8_T1_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T1_TRIG_ADR(_BASE))
#define TIMERX8_T1_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T1_INTERVAL_ADR(_BASE))
#define TIMERX8_T1_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T1_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T1_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T1_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T1_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T1_CFG_ADR(_BASE))
#define TIMERX8_T2_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T2_TRIG_ADR(_BASE))
#define TIMERX8_T2_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T2_INTERVAL_ADR(_BASE))
#define TIMERX8_T2_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T2_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T2_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T2_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T2_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T2_CFG_ADR(_BASE))
#define TIMERX8_T3_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T3_TRIG_ADR(_BASE))
#define TIMERX8_T3_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T3_INTERVAL_ADR(_BASE))
#define TIMERX8_T3_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T3_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T3_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T3_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T3_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T3_CFG_ADR(_BASE))
#define TIMERX8_T4_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T4_TRIG_ADR(_BASE))
#define TIMERX8_T4_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T4_INTERVAL_ADR(_BASE))
#define TIMERX8_T4_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T4_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T4_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T4_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T4_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T4_CFG_ADR(_BASE))
#define TIMERX8_T5_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T5_TRIG_ADR(_BASE))
#define TIMERX8_T5_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T5_INTERVAL_ADR(_BASE))
#define TIMERX8_T5_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T5_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T5_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T5_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T5_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T5_CFG_ADR(_BASE))
#define TIMERX8_T6_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T6_TRIG_ADR(_BASE))
#define TIMERX8_T6_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T6_INTERVAL_ADR(_BASE))
#define TIMERX8_T6_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T6_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T6_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T6_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T6_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T6_CFG_ADR(_BASE))
#define TIMERX8_T7_TRIG_REG(_BASE) ((timerx8_t_trig_reg_t*) TIMERX8_T7_TRIG_ADR(_BASE))
#define TIMERX8_T7_INTERVAL_REG(_BASE) ((timerx8_t_interval_reg_t*) TIMERX8_T7_INTERVAL_ADR(_BASE))
#define TIMERX8_T7_GPIO_MASK_REG(_BASE) ((timerx8_t_gpio_mask_reg_t*) TIMERX8_T7_GPIO_MASK_ADR(_BASE))
#define TIMERX8_T7_GPIO_VAL_REG(_BASE) ((timerx8_t_gpio_val_reg_t*) TIMERX8_T7_GPIO_VAL_ADR(_BASE))
#define TIMERX8_T7_CFG_REG(_BASE) ((timerx8_t_cfg_reg_t*) TIMERX8_T7_CFG_ADR(_BASE))
#define TIMERX8_STAT_REG(_BASE) ((timerx8_stat_reg_t*) TIMERX8_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    timerx8_t_trig_reg_t T0_TRIG; /*< Address offset = 0x0 */
    timerx8_t_interval_reg_t T0_INTERVAL; /*< Address offset = 0x4 */
    timerx8_t_gpio_mask_reg_t T0_GPIO_MASK; /*< Address offset = 0x8 */
    timerx8_t_gpio_val_reg_t T0_GPIO_VAL; /*< Address offset = 0xc */
    timerx8_t_cfg_reg_t T0_CFG;    /*< Address offset = 0x10 */
    const uint8_t        reservedArea0 [12];  /*< Address offset = 0x14 */
    timerx8_t_trig_reg_t T1_TRIG; /*< Address offset = 0x20 */
    timerx8_t_interval_reg_t T1_INTERVAL; /*< Address offset = 0x24 */
    timerx8_t_gpio_mask_reg_t T1_GPIO_MASK; /*< Address offset = 0x28 */
    timerx8_t_gpio_val_reg_t T1_GPIO_VAL; /*< Address offset = 0x2c */
    timerx8_t_cfg_reg_t T1_CFG;    /*< Address offset = 0x30 */
    const uint8_t        reservedArea1 [12];  /*< Address offset = 0x34 */
    timerx8_t_trig_reg_t T2_TRIG; /*< Address offset = 0x40 */
    timerx8_t_interval_reg_t T2_INTERVAL; /*< Address offset = 0x44 */
    timerx8_t_gpio_mask_reg_t T2_GPIO_MASK; /*< Address offset = 0x48 */
    timerx8_t_gpio_val_reg_t T2_GPIO_VAL; /*< Address offset = 0x4c */
    timerx8_t_cfg_reg_t T2_CFG;    /*< Address offset = 0x50 */
    const uint8_t        reservedArea2 [12];  /*< Address offset = 0x54 */
    timerx8_t_trig_reg_t T3_TRIG; /*< Address offset = 0x60 */
    timerx8_t_interval_reg_t T3_INTERVAL; /*< Address offset = 0x64 */
    timerx8_t_gpio_mask_reg_t T3_GPIO_MASK; /*< Address offset = 0x68 */
    timerx8_t_gpio_val_reg_t T3_GPIO_VAL; /*< Address offset = 0x6c */
    timerx8_t_cfg_reg_t T3_CFG;    /*< Address offset = 0x70 */
    const uint8_t        reservedArea3 [12];  /*< Address offset = 0x74 */
    timerx8_t_trig_reg_t T4_TRIG; /*< Address offset = 0x80 */
    timerx8_t_interval_reg_t T4_INTERVAL; /*< Address offset = 0x84 */
    timerx8_t_gpio_mask_reg_t T4_GPIO_MASK; /*< Address offset = 0x88 */
    timerx8_t_gpio_val_reg_t T4_GPIO_VAL; /*< Address offset = 0x8c */
    timerx8_t_cfg_reg_t T4_CFG;    /*< Address offset = 0x90 */
    const uint8_t        reservedArea4 [12];  /*< Address offset = 0x94 */
    timerx8_t_trig_reg_t T5_TRIG; /*< Address offset = 0xa0 */
    timerx8_t_interval_reg_t T5_INTERVAL; /*< Address offset = 0xa4 */
    timerx8_t_gpio_mask_reg_t T5_GPIO_MASK; /*< Address offset = 0xa8 */
    timerx8_t_gpio_val_reg_t T5_GPIO_VAL; /*< Address offset = 0xac */
    timerx8_t_cfg_reg_t T5_CFG;    /*< Address offset = 0xb0 */
    const uint8_t        reservedArea5 [12];  /*< Address offset = 0xb4 */
    timerx8_t_trig_reg_t T6_TRIG; /*< Address offset = 0xc0 */
    timerx8_t_interval_reg_t T6_INTERVAL; /*< Address offset = 0xc4 */
    timerx8_t_gpio_mask_reg_t T6_GPIO_MASK; /*< Address offset = 0xc8 */
    timerx8_t_gpio_val_reg_t T6_GPIO_VAL; /*< Address offset = 0xcc */
    timerx8_t_cfg_reg_t T6_CFG;    /*< Address offset = 0xd0 */
    const uint8_t        reservedArea6 [12];  /*< Address offset = 0xd4 */
    timerx8_t_trig_reg_t T7_TRIG; /*< Address offset = 0xe0 */
    timerx8_t_interval_reg_t T7_INTERVAL; /*< Address offset = 0xe4 */
    timerx8_t_gpio_mask_reg_t T7_GPIO_MASK; /*< Address offset = 0xe8 */
    timerx8_t_gpio_val_reg_t T7_GPIO_VAL; /*< Address offset = 0xec */
    timerx8_t_cfg_reg_t T7_CFG;    /*< Address offset = 0xf0 */
    const uint8_t        reservedArea7 [8];   /*< Address offset = 0xf4 */
    timerx8_stat_reg_t STAT;    /*< Address offset = 0xfc */
} timerx8_t;     // size: 0x00a4

// AddressSpace struct pointer
//
#define RCS_TIMER_GRP0_TMR0  ((timerx8_t*) RCS_TIMER_GRP0_TMR0_BASE)
#define RCS_TIMER_GRP0_TMR1  ((timerx8_t*) RCS_TIMER_GRP0_TMR1_BASE)
#define RCS_TIMER_GRP1_TMR0  ((timerx8_t*) RCS_TIMER_GRP1_TMR0_BASE)
#define RCS_TIMER_GRP1_TMR1  ((timerx8_t*) RCS_TIMER_GRP1_TMR1_BASE)

// ******************************************* /Address Space

#endif      // _TIMERX8_H_

