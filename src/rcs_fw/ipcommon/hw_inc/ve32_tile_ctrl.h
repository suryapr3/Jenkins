#ifndef _VE32_TILE_CTRL_H_
#define _VE32_TILE_CTRL_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define VEXABC0_GP_VE32_TILE_CTRL_BASE   ( 0x02803800 )
#define VEXABC1_GP_VE32_TILE_CTRL_BASE   ( 0x02843800 )
#define VEXABC2_GP_VE32_TILE_CTRL_BASE   ( 0x02883800 )
#define VEXABC3_GP_VE32_TILE_CTRL_BASE   ( 0x028c3800 )
#define VEXABC4_GP_VE32_TILE_CTRL_BASE   ( 0x02903800 )
#define VEXABC5_GP_VE32_TILE_CTRL_BASE   ( 0x02943800 )
#define VEXABC6_GP_VE32_TILE_CTRL_BASE   ( 0x02983800 )
#define VEXABC7_GP_VE32_TILE_CTRL_BASE   ( 0x029c3800 )
#define VEXABC8_GP_VE32_TILE_CTRL_BASE   ( 0x02a03800 )
#define VEXABC9_GP_VE32_TILE_CTRL_BASE   ( 0x02a43800 )
#define VEXABC10_GP_VE32_TILE_CTRL_BASE  ( 0x02a83800 )
#define VEXABC11_GP_VE32_TILE_CTRL_BASE  ( 0x02ac3800 )
#define VEXABC12_GP_VE32_TILE_CTRL_BASE  ( 0x02b03800 )
#define VEXABC13_GP_VE32_TILE_CTRL_BASE  ( 0x02b43800 )
#define VEXABC14_GP_VE32_TILE_CTRL_BASE  ( 0x02b83800 )
#define VEXABC15_GP_VE32_TILE_CTRL_BASE  ( 0x02bc3800 )
#define VEXABC16_GP_VE32_TILE_CTRL_BASE  ( 0x02c03800 )
#define VEXABC17_GP_VE32_TILE_CTRL_BASE  ( 0x02c43800 )
#define VEXABC18_GP_VE32_TILE_CTRL_BASE  ( 0x02c83800 )
#define VEXABC19_GP_VE32_TILE_CTRL_BASE  ( 0x02cc3800 )
#define VEXABC20_GP_VE32_TILE_CTRL_BASE  ( 0x02d03800 )
#define VEXABC21_GP_VE32_TILE_CTRL_BASE  ( 0x02d43800 )
#define VEXABC22_GP_VE32_TILE_CTRL_BASE  ( 0x02d83800 )
#define VEXABC23_GP_VE32_TILE_CTRL_BASE  ( 0x02dc3800 )
#define VEXABC24_GP_VE32_TILE_CTRL_BASE  ( 0x02e03800 )
#define VEXABC25_GP_VE32_TILE_CTRL_BASE  ( 0x02e43800 )
#define VEXABC26_GP_VE32_TILE_CTRL_BASE  ( 0x02e83800 )
#define VEXABC27_GP_VE32_TILE_CTRL_BASE  ( 0x02ec3800 )
#define VEXABC28_GP_VE32_TILE_CTRL_BASE  ( 0x02f03800 )
#define VEXABC29_GP_VE32_TILE_CTRL_BASE  ( 0x02f43800 )
#define VEXABC30_GP_VE32_TILE_CTRL_BASE  ( 0x02f83800 )
#define VEXABC31_GP_VE32_TILE_CTRL_BASE  ( 0x02fc3800 )
#define VEXABC32_GP_VE32_TILE_CTRL_BASE  ( 0x03003800 )
#define VEXABC33_GP_VE32_TILE_CTRL_BASE  ( 0x03043800 )
#define VEXABC34_GP_VE32_TILE_CTRL_BASE  ( 0x03083800 )
#define VEXABC35_GP_VE32_TILE_CTRL_BASE  ( 0x030c3800 )
#define VEXABC36_GP_VE32_TILE_CTRL_BASE  ( 0x03103800 )
#define VEXABC37_GP_VE32_TILE_CTRL_BASE  ( 0x03143800 )
#define VEXABC38_GP_VE32_TILE_CTRL_BASE  ( 0x03183800 )
#define VEXABC39_GP_VE32_TILE_CTRL_BASE  ( 0x031c3800 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define VE32_TILE_CTRL_GPIO0_OFFSET ( 0x00000000U )
#define VE32_TILE_CTRL_GPIO1_OFFSET ( 0x00000004U )
#define VE32_TILE_CTRL_GPIO2_OFFSET ( 0x00000008U )
#define VE32_TILE_CTRL_GPIO3_OFFSET ( 0x0000000cU )
#define VE32_TILE_CTRL_WDTIRQ_OFFSET ( 0x00000010U )
#define VE32_TILE_CTRL_CID_OFFSET ( 0x00000014U )
#define VE32_TILE_CTRL_TMRCTL_OFFSET ( 0x00000018U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define VE32_TILE_CTRL_GPIO0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_GPIO0_OFFSET ) ))
#define VE32_TILE_CTRL_GPIO1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_GPIO1_OFFSET ) ))
#define VE32_TILE_CTRL_GPIO2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_GPIO2_OFFSET ) ))
#define VE32_TILE_CTRL_GPIO3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_GPIO3_OFFSET ) ))
#define VE32_TILE_CTRL_WDTIRQ_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_WDTIRQ_OFFSET ) ))
#define VE32_TILE_CTRL_CID_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_CID_OFFSET ) ))
#define VE32_TILE_CTRL_TMRCTL_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_CTRL_TMRCTL_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_GPIO0 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_gpio0
  * gpio0 register.
  */

typedef union {
  struct {
    uint32_t IO_BIT : 1;
    ///< IO bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_ctrl_gpio0_reg_t;

#define VE32_TILE_CTRL_GPIO0_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_GPIO0_RD_MASK (0x00000001U)
#define VE32_TILE_CTRL_GPIO0_WR_MASK (0x00000001U)


///< IO bit.
#define VE32_TILE_CTRL_GPIO0_IO_BIT_BF_OFF ( 0)
#define VE32_TILE_CTRL_GPIO0_IO_BIT_BF_WID ( 1)
#define VE32_TILE_CTRL_GPIO0_IO_BIT_BF_MSK (0x00000001)
#define VE32_TILE_CTRL_GPIO0_IO_BIT_BF_DEF (0x00000000)


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_GPIO1 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_gpio1
  * gpio1 register.
  */

typedef union {
  struct {
    uint32_t IO_BIT : 1;
    ///< IO bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_ctrl_gpio1_reg_t;

#define VE32_TILE_CTRL_GPIO1_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_GPIO1_RD_MASK (0x00000001U)
#define VE32_TILE_CTRL_GPIO1_WR_MASK (0x00000001U)


///< IO bit.
#define VE32_TILE_CTRL_GPIO1_IO_BIT_BF_OFF ( 0)
#define VE32_TILE_CTRL_GPIO1_IO_BIT_BF_WID ( 1)
#define VE32_TILE_CTRL_GPIO1_IO_BIT_BF_MSK (0x00000001)
#define VE32_TILE_CTRL_GPIO1_IO_BIT_BF_DEF (0x00000000)


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_GPIO2 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_gpio2
  * gpio2 register.
  */

typedef union {
  struct {
    uint32_t IO_BIT : 1;
    ///< IO bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_ctrl_gpio2_reg_t;

#define VE32_TILE_CTRL_GPIO2_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_GPIO2_RD_MASK (0x00000001U)
#define VE32_TILE_CTRL_GPIO2_WR_MASK (0x00000001U)


///< IO bit.
#define VE32_TILE_CTRL_GPIO2_IO_BIT_BF_OFF ( 0)
#define VE32_TILE_CTRL_GPIO2_IO_BIT_BF_WID ( 1)
#define VE32_TILE_CTRL_GPIO2_IO_BIT_BF_MSK (0x00000001)
#define VE32_TILE_CTRL_GPIO2_IO_BIT_BF_DEF (0x00000000)


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_GPIO3 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_gpio3
  * gpio3 register.
  */

typedef union {
  struct {
    uint32_t IO_BIT : 1;
    ///< IO bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_ctrl_gpio3_reg_t;

#define VE32_TILE_CTRL_GPIO3_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_GPIO3_RD_MASK (0x00000001U)
#define VE32_TILE_CTRL_GPIO3_WR_MASK (0x00000001U)


///< IO bit.
#define VE32_TILE_CTRL_GPIO3_IO_BIT_BF_OFF ( 0)
#define VE32_TILE_CTRL_GPIO3_IO_BIT_BF_WID ( 1)
#define VE32_TILE_CTRL_GPIO3_IO_BIT_BF_MSK (0x00000001)
#define VE32_TILE_CTRL_GPIO3_IO_BIT_BF_DEF (0x00000000)


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_WDTIRQ register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_wdtirq
  * wdtirq register.
  */

typedef union {
  struct {
    uint32_t IRQ_BIT : 1;
    ///< IRQ bit.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_ctrl_wdtirq_reg_t;

#define VE32_TILE_CTRL_WDTIRQ_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_WDTIRQ_RD_MASK (0x00000001U)
#define VE32_TILE_CTRL_WDTIRQ_WR_MASK (0x00000001U)


///< IRQ bit.
#define VE32_TILE_CTRL_WDTIRQ_IRQ_BIT_BF_OFF ( 0)
#define VE32_TILE_CTRL_WDTIRQ_IRQ_BIT_BF_WID ( 1)
#define VE32_TILE_CTRL_WDTIRQ_IRQ_BIT_BF_MSK (0x00000001)
#define VE32_TILE_CTRL_WDTIRQ_IRQ_BIT_BF_DEF (0x00000000)


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_CID register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_cid
  * cid register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Context ID value.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_ctrl_cid_reg_t;

#define VE32_TILE_CTRL_CID_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_CID_RD_MASK (0xffffffffU)
#define VE32_TILE_CTRL_CID_WR_MASK (0xffffffffU)


///< Context ID value.
#define VE32_TILE_CTRL_CID_VAL_BF_OFF ( 0)
#define VE32_TILE_CTRL_CID_VAL_BF_WID (32)
#define VE32_TILE_CTRL_CID_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_CTRL_CID_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_CTRL_REGS_MAP_MEM_VE32_TILE_CTRL_REGS_MAP_REG_CTRL_REGS_TMRCTL register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_ctrl_regs_map_MEM/ve32_tile_ctrl_regs_map/reg_ctrl_regs_tmrctl
  * tmrctl register.
  */

typedef union {
  struct {
    uint32_t CTLB : 4;
    ///< Control bits. One bit per timer.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_ctrl_tmrctl_reg_t;

#define VE32_TILE_CTRL_TMRCTL_DEFAULT (0x00000000U)
#define VE32_TILE_CTRL_TMRCTL_RD_MASK (0x0000000fU)
#define VE32_TILE_CTRL_TMRCTL_WR_MASK (0x0000000fU)


///< Control bits. One bit per timer.
#define VE32_TILE_CTRL_TMRCTL_CTLB_BF_OFF ( 0)
#define VE32_TILE_CTRL_TMRCTL_CTLB_BF_WID ( 4)
#define VE32_TILE_CTRL_TMRCTL_CTLB_BF_MSK (0x0000000F)
#define VE32_TILE_CTRL_TMRCTL_CTLB_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define VE32_TILE_CTRL_GPIO0_REG(_BASE) ((ve32_tile_ctrl_gpio0_reg_t*) VE32_TILE_CTRL_GPIO0_ADR(_BASE))
#define VE32_TILE_CTRL_GPIO1_REG(_BASE) ((ve32_tile_ctrl_gpio1_reg_t*) VE32_TILE_CTRL_GPIO1_ADR(_BASE))
#define VE32_TILE_CTRL_GPIO2_REG(_BASE) ((ve32_tile_ctrl_gpio2_reg_t*) VE32_TILE_CTRL_GPIO2_ADR(_BASE))
#define VE32_TILE_CTRL_GPIO3_REG(_BASE) ((ve32_tile_ctrl_gpio3_reg_t*) VE32_TILE_CTRL_GPIO3_ADR(_BASE))
#define VE32_TILE_CTRL_WDTIRQ_REG(_BASE) ((ve32_tile_ctrl_wdtirq_reg_t*) VE32_TILE_CTRL_WDTIRQ_ADR(_BASE))
#define VE32_TILE_CTRL_CID_REG(_BASE) ((ve32_tile_ctrl_cid_reg_t*) VE32_TILE_CTRL_CID_ADR(_BASE))
#define VE32_TILE_CTRL_TMRCTL_REG(_BASE) ((ve32_tile_ctrl_tmrctl_reg_t*) VE32_TILE_CTRL_TMRCTL_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    ve32_tile_ctrl_gpio0_reg_t CTRL_GPIO0; /*< Address offset = 0x0 */
    ve32_tile_ctrl_gpio1_reg_t CTRL_GPIO1; /*< Address offset = 0x4 */
    ve32_tile_ctrl_gpio2_reg_t CTRL_GPIO2; /*< Address offset = 0x8 */
    ve32_tile_ctrl_gpio3_reg_t CTRL_GPIO3; /*< Address offset = 0xc */
    ve32_tile_ctrl_wdtirq_reg_t CTRL_WDTIRQ; /*< Address offset = 0x10 */
    ve32_tile_ctrl_cid_reg_t CTRL_CID; /*< Address offset = 0x14 */
    ve32_tile_ctrl_tmrctl_reg_t CTRL_TMRCTL; /*< Address offset = 0x18 */
} ve32_tile_ctrl_t;     // size: 0x001c

// AddressSpace struct pointer
//
#define VEXABC0_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC0_GP_VE32_TILE_CTRL_BASE)
#define VEXABC1_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC1_GP_VE32_TILE_CTRL_BASE)
#define VEXABC2_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC2_GP_VE32_TILE_CTRL_BASE)
#define VEXABC3_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC3_GP_VE32_TILE_CTRL_BASE)
#define VEXABC4_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC4_GP_VE32_TILE_CTRL_BASE)
#define VEXABC5_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC5_GP_VE32_TILE_CTRL_BASE)
#define VEXABC6_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC6_GP_VE32_TILE_CTRL_BASE)
#define VEXABC7_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC7_GP_VE32_TILE_CTRL_BASE)
#define VEXABC8_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC8_GP_VE32_TILE_CTRL_BASE)
#define VEXABC9_GP_VE32_TILE_CTRL   ((ve32_tile_ctrl_t*) VEXABC9_GP_VE32_TILE_CTRL_BASE)
#define VEXABC10_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC10_GP_VE32_TILE_CTRL_BASE)
#define VEXABC11_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC11_GP_VE32_TILE_CTRL_BASE)
#define VEXABC12_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC12_GP_VE32_TILE_CTRL_BASE)
#define VEXABC13_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC13_GP_VE32_TILE_CTRL_BASE)
#define VEXABC14_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC14_GP_VE32_TILE_CTRL_BASE)
#define VEXABC15_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC15_GP_VE32_TILE_CTRL_BASE)
#define VEXABC16_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC16_GP_VE32_TILE_CTRL_BASE)
#define VEXABC17_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC17_GP_VE32_TILE_CTRL_BASE)
#define VEXABC18_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC18_GP_VE32_TILE_CTRL_BASE)
#define VEXABC19_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC19_GP_VE32_TILE_CTRL_BASE)
#define VEXABC20_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC20_GP_VE32_TILE_CTRL_BASE)
#define VEXABC21_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC21_GP_VE32_TILE_CTRL_BASE)
#define VEXABC22_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC22_GP_VE32_TILE_CTRL_BASE)
#define VEXABC23_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC23_GP_VE32_TILE_CTRL_BASE)
#define VEXABC24_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC24_GP_VE32_TILE_CTRL_BASE)
#define VEXABC25_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC25_GP_VE32_TILE_CTRL_BASE)
#define VEXABC26_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC26_GP_VE32_TILE_CTRL_BASE)
#define VEXABC27_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC27_GP_VE32_TILE_CTRL_BASE)
#define VEXABC28_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC28_GP_VE32_TILE_CTRL_BASE)
#define VEXABC29_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC29_GP_VE32_TILE_CTRL_BASE)
#define VEXABC30_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC30_GP_VE32_TILE_CTRL_BASE)
#define VEXABC31_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC31_GP_VE32_TILE_CTRL_BASE)
#define VEXABC32_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC32_GP_VE32_TILE_CTRL_BASE)
#define VEXABC33_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC33_GP_VE32_TILE_CTRL_BASE)
#define VEXABC34_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC34_GP_VE32_TILE_CTRL_BASE)
#define VEXABC35_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC35_GP_VE32_TILE_CTRL_BASE)
#define VEXABC36_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC36_GP_VE32_TILE_CTRL_BASE)
#define VEXABC37_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC37_GP_VE32_TILE_CTRL_BASE)
#define VEXABC38_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC38_GP_VE32_TILE_CTRL_BASE)
#define VEXABC39_GP_VE32_TILE_CTRL  ((ve32_tile_ctrl_t*) VEXABC39_GP_VE32_TILE_CTRL_BASE)

// ******************************************* /Address Space

#endif      // _VE32_TILE_CTRL_H_

