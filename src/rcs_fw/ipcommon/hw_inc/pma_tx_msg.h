#ifndef _PMA_TX_MSG_H_
#define _PMA_TX_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PMA0_TX_GLOBAL_BASE  ( 0x06024000 )
#define DLNK_JESD0_PHY_PMA0_TX_Q0_BASE      ( 0x06028000 )
#define DLNK_JESD0_PHY_PMA0_TX_Q1_BASE      ( 0x0602c000 )
#define DLNK_JESD0_PHY_PMA0_TX_Q2_BASE      ( 0x06030000 )
#define DLNK_JESD0_PHY_PMA0_TX_Q3_BASE      ( 0x06034000 )
#define DLNK_JESD1_PHY_PMA0_TX_GLOBAL_BASE  ( 0x06824000 )
#define DLNK_JESD1_PHY_PMA0_TX_Q0_BASE      ( 0x06828000 )
#define DLNK_JESD1_PHY_PMA0_TX_Q1_BASE      ( 0x0682c000 )
#define DLNK_JESD1_PHY_PMA0_TX_Q2_BASE      ( 0x06830000 )
#define DLNK_JESD1_PHY_PMA0_TX_Q3_BASE      ( 0x06834000 )
#define DLNK_JESD2_PHY_PMA0_TX_GLOBAL_BASE  ( 0x07024000 )
#define DLNK_JESD2_PHY_PMA0_TX_Q0_BASE      ( 0x07028000 )
#define DLNK_JESD2_PHY_PMA0_TX_Q1_BASE      ( 0x0702c000 )
#define DLNK_JESD2_PHY_PMA0_TX_Q2_BASE      ( 0x07030000 )
#define DLNK_JESD2_PHY_PMA0_TX_Q3_BASE      ( 0x07034000 )
#define DLNK_JESD3_PHY_PMA0_TX_GLOBAL_BASE  ( 0x07824000 )
#define DLNK_JESD3_PHY_PMA0_TX_Q0_BASE      ( 0x07828000 )
#define DLNK_JESD3_PHY_PMA0_TX_Q1_BASE      ( 0x0782c000 )
#define DLNK_JESD3_PHY_PMA0_TX_Q2_BASE      ( 0x07830000 )
#define DLNK_JESD3_PHY_PMA0_TX_Q3_BASE      ( 0x07834000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PMA_TX_MGS_CAR_CFG_OFFSET ( 0x00000000U )
#define PMA_TX_MGS_CAR_CFG_RO_OFFSET ( 0x00000004U )
#define PMA_TX_MGS_SCRATCH_PAD_0_OFFSET ( 0x00000008U )
#define PMA_TX_MGS_SCRATCH_PAD_1_OFFSET ( 0x0000000cU )
#define PMA_TX_MGS_SCRATCH_PAD_2_OFFSET ( 0x00000010U )
#define PMA_TX_MGS_SCRATCH_PAD_3_OFFSET ( 0x00000014U )
#define PMA_TX_MGS_SCRATCH_PAD_4_OFFSET ( 0x00000018U )
#define PMA_TX_MGS_SCRATCH_PAD_5_OFFSET ( 0x0000001cU )
#define PMA_TX_MGS_SCRATCH_PAD_6_OFFSET ( 0x00000020U )
#define PMA_TX_MGS_SCRATCH_PAD_7_OFFSET ( 0x00000024U )
#define PMA_TX_MGS_CTRL_OFFSET ( 0x00000028U )
#define PMA_TX_MGS_CTRL_RO_OFFSET ( 0x0000002cU )
#define PMA_TX_MGS_PWR_MNG_CTRL_OFFSET ( 0x00000030U )
#define PMA_TX_MGS_PWR_MNG_STAT_OFFSET ( 0x00000034U )
#define PMA_TX_MSG_FSM_CFG_OFFSET ( 0x00000038U )
#define PMA_TX_MGS_MEM_CTRL_OFFSET ( 0x0000003cU )
#define PMA_TX_MGS_MEM_REQ_CTRL_OFFSET ( 0x00000040U )
#define PMA_TX_MGS_STAT_0_OFFSET ( 0x00000044U )
#define PMA_TX_MGS_STAT_1_OFFSET ( 0x00000048U )
#define PMA_TX_MGS_STAT_2_OFFSET ( 0x0000004cU )
#define PMA_TX_MSG_PCS_PCIE_CTRL_OFFSET ( 0x00000050U )
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_OFFSET ( 0x00000054U )
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_OFFSET ( 0x00000058U )
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_OFFSET ( 0x0000005cU )
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_OFFSET ( 0x00000060U )
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_OFFSET ( 0x00000064U )
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_OFFSET ( 0x00000068U )
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_OFFSET ( 0x0000006cU )
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ( 0x00000070U )
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ( 0x00000074U )
#define PMA_TX_MSG_RPU_CTRL_OFFSET ( 0x00000078U )
#define PMA_TX_MSG_RPU_LUT_CFG_0_OFFSET ( 0x0000007cU )
#define PMA_TX_MSG_RPU_LUT_CFG_1_OFFSET ( 0x00000080U )
#define PMA_TX_MSG_RPU_LUT_CFG_2_OFFSET ( 0x00000084U )
#define PMA_TX_MSG_RPU_LUT_CFG_3_OFFSET ( 0x00000088U )
#define PMA_TX_MSG_RPU_LUT_CFG_4_OFFSET ( 0x0000008cU )
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ( 0x00000090U )
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ( 0x00000094U )
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_OFFSET ( 0x00000098U )
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_OFFSET ( 0x0000009cU )
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ( 0x000000a0U )
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ( 0x000000a4U )
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_OFFSET ( 0x000000a8U )
#define PMA_TX_MGS_RPU_EVENT_CFG_0_OFFSET ( 0x000000acU )
#define PMA_TX_MGS_RPU_EVENT_CFG_1_OFFSET ( 0x000000b0U )
#define PMA_TX_MGS_RPU_EVENT_CFG_2_OFFSET ( 0x000000b4U )
#define PMA_TX_MGS_RPU_EVENT_CFG_3_OFFSET ( 0x000000b8U )
#define PMA_TX_MGS_RPU_EVENT_CFG_4_OFFSET ( 0x000000bcU )
#define PMA_TX_MGS_RPU_EVENT_CFG_5_OFFSET ( 0x000000c0U )
#define PMA_TX_MGS_CTRL_OUT_0_OFFSET ( 0x000000c4U )
#define PMA_TX_MGS_CTRL_OUT_1_OFFSET ( 0x000000c8U )
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_OFFSET ( 0x000000ccU )
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_OFFSET ( 0x000000d0U )
#define PMA_TX_MGS_BRKPT_CTRL_OFFSET ( 0x000000d4U )
#define PMA_TX_MGS_BRKPT_STAT_OFFSET ( 0x000000d8U )
#define PMA_TX_MGS_BRKPT_CLR_OFFSET ( 0x000000dcU )
#define PMA_TX_MGS_DATAPATH_STAT_OFFSET ( 0x000000e0U )
#define PMA_TX_MGS_CKM_CTRL_0_OFFSET ( 0x000000e4U )
#define PMA_TX_MGS_CKM_CTRL_1_OFFSET ( 0x000000e8U )
#define PMA_TX_MGS_CKM_CTRL_2_OFFSET ( 0x000000ecU )
#define PMA_TX_MGS_CKM_STAT_OFFSET ( 0x000000f0U )
#define PMA_TX_MSG_TXWORD_CLK_CTRL_OFFSET ( 0x000000f4U )
#define PMA_TX_MSG_TXWORD_CLK_OBS_OFFSET ( 0x000000f8U )
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_OFFSET ( 0x000000fcU )
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_OFFSET ( 0x00000100U )
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_OFFSET ( 0x00000104U )
#define PMA_TX_MSG_BIST_CFG_0_OFFSET ( 0x000003f0U )
#define PMA_TX_MSG_BIST_CFG_1_OFFSET ( 0x000003f4U )
#define PMA_TX_MSG_BIST_SEED_OFFSET ( 0x000003f8U )
#define PMA_TX_MSG_BIST_UDP_VF00_OFFSET ( 0x000003fcU )
#define PMA_TX_MSG_BIST_UDP_VF01_OFFSET ( 0x00000400U )
#define PMA_TX_MSG_BIST_UDP_VF02_OFFSET ( 0x00000404U )
#define PMA_TX_MSG_BIST_UDP_VF03_OFFSET ( 0x00000408U )
#define PMA_TX_MSG_BIST_UDP_VF04_OFFSET ( 0x0000040cU )
#define PMA_TX_MSG_BIST_UDP_VF05_OFFSET ( 0x00000410U )
#define PMA_TX_MSG_BIST_UDP_VF06_OFFSET ( 0x00000414U )
#define PMA_TX_MSG_BIST_UDP_VF07_OFFSET ( 0x00000418U )
#define PMA_TX_MSG_BIST_UDP_VF08_OFFSET ( 0x0000041cU )
#define PMA_TX_MSG_BIST_UDP_VF09_OFFSET ( 0x00000420U )
#define PMA_TX_MSG_TXFIFO_CTRL_0_OFFSET ( 0x000004f0U )
#define PMA_TX_MSG_TXFIFO_CTRL_1_OFFSET ( 0x000004f4U )
#define PMA_TX_MSG_TXFIFO_TXBTI_0_OFFSET ( 0x000004f8U )
#define PMA_TX_MSG_TXWORDERR_0_OFFSET ( 0x000004fcU )
#define PMA_TX_MSG_TXWORDERR_1_OFFSET ( 0x00000500U )
#define PMA_TX_MSG_TXWORDERR_2_OFFSET ( 0x00000504U )
#define PMA_TX_MSG_TXWORDERR_3_OFFSET ( 0x00000508U )
#define PMA_TX_MSG_TXWORDERR_4_OFFSET ( 0x0000050cU )
#define PMA_TX_MSG_TXWORDERR_5_OFFSET ( 0x00000510U )
#define PMA_TX_MSG_TXFIFO_KILL__0_OFFSET ( 0x00000514U )
#define PMA_TX_MSG_TXFIFO_KILL__1_OFFSET ( 0x00000518U )
#define PMA_TX_MSG_TXFIFO_STAT_0_OFFSET ( 0x0000051cU )
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_OFFSET ( 0x00000520U )
#define PMA_TX_MGS_RW_SPARE_0_OFFSET ( 0x00000fd4U )
#define PMA_TX_MGS_RW_SPARE_1_OFFSET ( 0x00000fd8U )
#define PMA_TX_MGS_RW_SPARE_2_OFFSET ( 0x00000fdcU )
#define PMA_TX_MGS_RW_SPARE_3_OFFSET ( 0x00000fe0U )
#define PMA_TX_MGS_RO_SPARE_0_OFFSET ( 0x00000fe4U )
#define PMA_TX_MGS_RO_SPARE_1_OFFSET ( 0x00000fe8U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PMA_TX_MGS_CAR_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CAR_CFG_OFFSET ) ))
#define PMA_TX_MGS_CAR_CFG_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CAR_CFG_RO_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_0_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_1_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_2_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_3_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_4_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_5_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_6_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_6_OFFSET ) ))
#define PMA_TX_MGS_SCRATCH_PAD_7_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_SCRATCH_PAD_7_OFFSET ) ))
#define PMA_TX_MGS_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CTRL_OFFSET ) ))
#define PMA_TX_MGS_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CTRL_RO_OFFSET ) ))
#define PMA_TX_MGS_PWR_MNG_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_PWR_MNG_CTRL_OFFSET ) ))
#define PMA_TX_MGS_PWR_MNG_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_PWR_MNG_STAT_OFFSET ) ))
#define PMA_TX_MSG_FSM_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_CFG_OFFSET ) ))
#define PMA_TX_MGS_MEM_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_MEM_CTRL_OFFSET ) ))
#define PMA_TX_MGS_MEM_REQ_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_MEM_REQ_CTRL_OFFSET ) ))
#define PMA_TX_MGS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_STAT_0_OFFSET ) ))
#define PMA_TX_MGS_STAT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_STAT_1_OFFSET ) ))
#define PMA_TX_MGS_STAT_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_STAT_2_OFFSET ) ))
#define PMA_TX_MSG_PCS_PCIE_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_PCS_PCIE_CTRL_OFFSET ) ))
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_PCS_PCIE_CTRL_RO_OFFSET ) ))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_OFFSET ) ))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_OFFSET ) ))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_OFFSET ) ))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_OFFSET ) ))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_OFFSET ) ))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_OFFSET ) ))
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_OFFSET ) ))
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_OFFSET ) ))
#define PMA_TX_MSG_RPU_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_CTRL_OFFSET ) ))
#define PMA_TX_MSG_RPU_LUT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_LUT_CFG_0_OFFSET ) ))
#define PMA_TX_MSG_RPU_LUT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_LUT_CFG_1_OFFSET ) ))
#define PMA_TX_MSG_RPU_LUT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_LUT_CFG_2_OFFSET ) ))
#define PMA_TX_MSG_RPU_LUT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_LUT_CFG_3_OFFSET ) ))
#define PMA_TX_MSG_RPU_LUT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_LUT_CFG_4_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_OFFSET ) ))
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_OFFSET ) ))
#define PMA_TX_MGS_RPU_EVENT_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RPU_EVENT_CFG_0_OFFSET ) ))
#define PMA_TX_MGS_RPU_EVENT_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RPU_EVENT_CFG_1_OFFSET ) ))
#define PMA_TX_MGS_RPU_EVENT_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RPU_EVENT_CFG_2_OFFSET ) ))
#define PMA_TX_MGS_RPU_EVENT_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RPU_EVENT_CFG_3_OFFSET ) ))
#define PMA_TX_MGS_RPU_EVENT_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RPU_EVENT_CFG_4_OFFSET ) ))
#define PMA_TX_MGS_RPU_EVENT_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RPU_EVENT_CFG_5_OFFSET ) ))
#define PMA_TX_MGS_CTRL_OUT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CTRL_OUT_0_OFFSET ) ))
#define PMA_TX_MGS_CTRL_OUT_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CTRL_OUT_1_OFFSET ) ))
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_OUTPUT_PIN_OVRD_OFFSET ) ))
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_OUTPUT_PIN_PREOVRD_OFFSET ) ))
#define PMA_TX_MGS_BRKPT_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_BRKPT_CTRL_OFFSET ) ))
#define PMA_TX_MGS_BRKPT_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_BRKPT_STAT_OFFSET ) ))
#define PMA_TX_MGS_BRKPT_CLR_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_BRKPT_CLR_OFFSET ) ))
#define PMA_TX_MGS_DATAPATH_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_DATAPATH_STAT_OFFSET ) ))
#define PMA_TX_MGS_CKM_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CKM_CTRL_0_OFFSET ) ))
#define PMA_TX_MGS_CKM_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CKM_CTRL_1_OFFSET ) ))
#define PMA_TX_MGS_CKM_CTRL_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CKM_CTRL_2_OFFSET ) ))
#define PMA_TX_MGS_CKM_STAT_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_CKM_STAT_OFFSET ) ))
#define PMA_TX_MSG_TXWORD_CLK_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORD_CLK_CTRL_OFFSET ) ))
#define PMA_TX_MSG_TXWORD_CLK_OBS_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORD_CLK_OBS_OFFSET ) ))
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXELECIDLE_PIN_OVRD_OFFSET ) ))
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_OFFSET ) ))
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_OFFSET ) ))
#define PMA_TX_MSG_BIST_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_CFG_0_OFFSET ) ))
#define PMA_TX_MSG_BIST_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_CFG_1_OFFSET ) ))
#define PMA_TX_MSG_BIST_SEED_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_SEED_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF00_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF00_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF01_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF01_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF02_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF02_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF03_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF03_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF04_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF04_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF05_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF05_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF06_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF06_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF07_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF07_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF08_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF08_OFFSET ) ))
#define PMA_TX_MSG_BIST_UDP_VF09_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_BIST_UDP_VF09_OFFSET ) ))
#define PMA_TX_MSG_TXFIFO_CTRL_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFIFO_CTRL_0_OFFSET ) ))
#define PMA_TX_MSG_TXFIFO_CTRL_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFIFO_CTRL_1_OFFSET ) ))
#define PMA_TX_MSG_TXFIFO_TXBTI_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFIFO_TXBTI_0_OFFSET ) ))
#define PMA_TX_MSG_TXWORDERR_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORDERR_0_OFFSET ) ))
#define PMA_TX_MSG_TXWORDERR_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORDERR_1_OFFSET ) ))
#define PMA_TX_MSG_TXWORDERR_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORDERR_2_OFFSET ) ))
#define PMA_TX_MSG_TXWORDERR_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORDERR_3_OFFSET ) ))
#define PMA_TX_MSG_TXWORDERR_4_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORDERR_4_OFFSET ) ))
#define PMA_TX_MSG_TXWORDERR_5_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXWORDERR_5_OFFSET ) ))
#define PMA_TX_MSG_TXFIFO_KILL__0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFIFO_KILL__0_OFFSET ) ))
#define PMA_TX_MSG_TXFIFO_KILL__1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFIFO_KILL__1_OFFSET ) ))
#define PMA_TX_MSG_TXFIFO_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFIFO_STAT_0_OFFSET ) ))
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MSG_TXFFE_ENC0_CTRL_OFFSET ) ))
#define PMA_TX_MGS_RW_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RW_SPARE_0_OFFSET ) ))
#define PMA_TX_MGS_RW_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RW_SPARE_1_OFFSET ) ))
#define PMA_TX_MGS_RW_SPARE_2_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RW_SPARE_2_OFFSET ) ))
#define PMA_TX_MGS_RW_SPARE_3_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RW_SPARE_3_OFFSET ) ))
#define PMA_TX_MGS_RO_SPARE_0_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RO_SPARE_0_OFFSET ) ))
#define PMA_TX_MGS_RO_SPARE_1_ADR(_BASE) (( ( _BASE ) + ( PMA_TX_MGS_RO_SPARE_1_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CAR_CFG register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_car_cfg
  * Tx clock and reset config
  */

typedef union {
  struct {
    uint32_t LANECLK_CTRL_MUX : 1;
    ///< Lane Ctrl clock source.  0 - i_ck_ctrl_lane_lx; 1 - ck_main
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXFSM_CKEN_OVREN : 1;
    ///< FSM clock enable override enable.  When this is set, the FSM main
    ///< clock can be disable/enable by cmn_fsm_cken_ovr.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXFSM_CKEN_OVR : 1;
    ///< FSM clock enable override value
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXCLKGENMUXSEL_TXINTERNAL : 1;
    ///< Select the tx datapath word clock.  0 - pin - i_ck_txdat_word_l0;
    ///< 1 - from TxPLL
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXBEACONCLK_REF_SEL : 1;
    ///< TxBeacon reference clock source.  0 - CMN PLL A Ref Clock; 1 - CMN
    ///< PLL B Ref Clock
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LB_RXWORDCK2PCSTXWORDCKEN : 1;
    ///< Select rxword clock from Rx CDR  as o_ck_txdat_word_l[x]
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXCLK_LOCOVREN : 1;
    ///< Tx Word clock select ovrride enable.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXCLK_KEEPALIVE_EN_B_LOCOVR : 1;
    ///< Tx Word Clock - keepalive clock enable override.  When this is set
    ///< to '0' the Tx Word clock will be forced to run in keepalive clock
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXBEACON_SEL : 1;
    ///< Select clock source for TxBeacon.  0 - keepalive clock; 1 - Selected
    ///< Reference clock from CMNPLL A or CMNPLL B
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXBEACON_DIV : 3;
    ///< Clock divided for TxBeacon clock when its source is reference clock
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t PCS2PMATXWORD_KEEPALIVE_FAST_SEL : 1;
    ///< Select keepalive clock source for pcs2pma txword clock. 0 - keepalive
    ///< slow; 1 - keepalive fast
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXDAT_P2S_DIV_RST_DEMUX_SEL : 1;
    ///< Tx Data  P2S Reset Demux Select. 0 will select div1. 1 will select
    ///< div2p. The one that is not selected will be set to 0.
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TXDAT_P2S_DIV1_RST_B_OVREN : 1;
    ///< Tx Data  P2S Div1 Reset Override Enable
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXDAT_P2S_DIV1_RST_B_OVR : 1;
    ///< Tx Data  P2S Div1 Reset Override
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t TXDAT_P2S_DIV2P_RST_B_OVREN : 1;
    ///< Tx Data  P2S Div2p Reset Override Enable
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXDAT_P2S_DIV2P_RST_B_OVR : 1;
    ///< Tx Data  P2S Div2p Reset Override
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t TXCOMP_CLKDIV_RATIO : 2;
    ///< Tx calibration comparator sample clock divider.  It steps down the
    ///< main clock to be used for calibration comparator in APMA
    ///< 0: div1; 1: div2; 2 div 4; 3; div 8
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_car_cfg_reg_t;

#define PMA_TX_MGS_CAR_CFG_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CAR_CFG_RD_MASK (0x000fffffU)
#define PMA_TX_MGS_CAR_CFG_WR_MASK (0x000fffffU)


///< Lane Ctrl clock source.  0 - i_ck_ctrl_lane_lx; 1 - ck_main
#define PMA_TX_MGS_CAR_CFG_LANECLK_CTRL_MUX_BF_OFF ( 0)
#define PMA_TX_MGS_CAR_CFG_LANECLK_CTRL_MUX_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_LANECLK_CTRL_MUX_BF_MSK (0x00000001)
#define PMA_TX_MGS_CAR_CFG_LANECLK_CTRL_MUX_BF_DEF (0x00000000)

///< FSM clock enable override enable.  When this is set, the FSM main
///< clock can be disable/enable by cmn_fsm_cken_ovr.
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVREN_BF_OFF ( 1)
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVREN_BF_MSK (0x00000002)
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVREN_BF_DEF (0x00000000)

///< FSM clock enable override value
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVR_BF_OFF ( 2)
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVR_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVR_BF_MSK (0x00000004)
#define PMA_TX_MGS_CAR_CFG_TXFSM_CKEN_OVR_BF_DEF (0x00000000)

///< Select the tx datapath word clock.  0 - pin - i_ck_txdat_word_l0;
///< 1 - from TxPLL
#define PMA_TX_MGS_CAR_CFG_TXCLKGENMUXSEL_TXINTERNAL_BF_OFF ( 3)
#define PMA_TX_MGS_CAR_CFG_TXCLKGENMUXSEL_TXINTERNAL_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXCLKGENMUXSEL_TXINTERNAL_BF_MSK (0x00000008)
#define PMA_TX_MGS_CAR_CFG_TXCLKGENMUXSEL_TXINTERNAL_BF_DEF (0x00000000)

///< TxBeacon reference clock source.  0 - CMN PLL A Ref Clock; 1 - CMN
///< PLL B Ref Clock
#define PMA_TX_MGS_CAR_CFG_TXBEACONCLK_REF_SEL_BF_OFF ( 4)
#define PMA_TX_MGS_CAR_CFG_TXBEACONCLK_REF_SEL_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXBEACONCLK_REF_SEL_BF_MSK (0x00000010)
#define PMA_TX_MGS_CAR_CFG_TXBEACONCLK_REF_SEL_BF_DEF (0x00000000)

///< Select rxword clock from Rx CDR  as o_ck_txdat_word_l[x]
#define PMA_TX_MGS_CAR_CFG_LB_RXWORDCK2PCSTXWORDCKEN_BF_OFF ( 5)
#define PMA_TX_MGS_CAR_CFG_LB_RXWORDCK2PCSTXWORDCKEN_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_LB_RXWORDCK2PCSTXWORDCKEN_BF_MSK (0x00000020)
#define PMA_TX_MGS_CAR_CFG_LB_RXWORDCK2PCSTXWORDCKEN_BF_DEF (0x00000000)

///< Tx Word clock select ovrride enable.
#define PMA_TX_MGS_CAR_CFG_TXCLK_LOCOVREN_BF_OFF ( 6)
#define PMA_TX_MGS_CAR_CFG_TXCLK_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXCLK_LOCOVREN_BF_MSK (0x00000040)
#define PMA_TX_MGS_CAR_CFG_TXCLK_LOCOVREN_BF_DEF (0x00000000)

///< Tx Word Clock - keepalive clock enable override.  When this is set
///< to '0' the Tx Word clock will be forced to run in keepalive clock
#define PMA_TX_MGS_CAR_CFG_TXCLK_KEEPALIVE_EN_B_LOCOVR_BF_OFF ( 7)
#define PMA_TX_MGS_CAR_CFG_TXCLK_KEEPALIVE_EN_B_LOCOVR_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXCLK_KEEPALIVE_EN_B_LOCOVR_BF_MSK (0x00000080)
#define PMA_TX_MGS_CAR_CFG_TXCLK_KEEPALIVE_EN_B_LOCOVR_BF_DEF (0x00000000)

///< Select clock source for TxBeacon.  0 - keepalive clock; 1 - Selected
///< Reference clock from CMNPLL A or CMNPLL B
#define PMA_TX_MGS_CAR_CFG_TXBEACON_SEL_BF_OFF ( 8)
#define PMA_TX_MGS_CAR_CFG_TXBEACON_SEL_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXBEACON_SEL_BF_MSK (0x00000100)
#define PMA_TX_MGS_CAR_CFG_TXBEACON_SEL_BF_DEF (0x00000000)

///< Clock divided for TxBeacon clock when its source is reference clock
#define PMA_TX_MGS_CAR_CFG_TXBEACON_DIV_BF_OFF ( 9)
#define PMA_TX_MGS_CAR_CFG_TXBEACON_DIV_BF_WID ( 3)
#define PMA_TX_MGS_CAR_CFG_TXBEACON_DIV_BF_MSK (0x00000E00)
#define PMA_TX_MGS_CAR_CFG_TXBEACON_DIV_BF_DEF (0x00000000)

///< Select keepalive clock source for pcs2pma txword clock. 0 - keepalive
///< slow; 1 - keepalive fast
#define PMA_TX_MGS_CAR_CFG_PCS2PMATXWORD_KEEPALIVE_FAST_SEL_BF_OFF (12)
#define PMA_TX_MGS_CAR_CFG_PCS2PMATXWORD_KEEPALIVE_FAST_SEL_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_PCS2PMATXWORD_KEEPALIVE_FAST_SEL_BF_MSK (0x00001000)
#define PMA_TX_MGS_CAR_CFG_PCS2PMATXWORD_KEEPALIVE_FAST_SEL_BF_DEF (0x00000000)

///< Tx Data  P2S Reset Demux Select. 0 will select div1. 1 will select
///< div2p. The one that is not selected will be set to 0.
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV_RST_DEMUX_SEL_BF_OFF (13)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV_RST_DEMUX_SEL_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV_RST_DEMUX_SEL_BF_MSK (0x00002000)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV_RST_DEMUX_SEL_BF_DEF (0x00000000)

///< Tx Data  P2S Div1 Reset Override Enable
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVREN_BF_OFF (14)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVREN_BF_MSK (0x00004000)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVREN_BF_DEF (0x00000000)

///< Tx Data  P2S Div1 Reset Override
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVR_BF_OFF (15)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVR_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVR_BF_MSK (0x00008000)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV1_RST_B_OVR_BF_DEF (0x00000000)

///< Tx Data  P2S Div2p Reset Override Enable
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVREN_BF_OFF (16)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVREN_BF_MSK (0x00010000)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVREN_BF_DEF (0x00000000)

///< Tx Data  P2S Div2p Reset Override
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVR_BF_OFF (17)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVR_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVR_BF_MSK (0x00020000)
#define PMA_TX_MGS_CAR_CFG_TXDAT_P2S_DIV2P_RST_B_OVR_BF_DEF (0x00000000)

///< Tx calibration comparator sample clock divider.  It steps down the
///< main clock to be used for calibration comparator in APMA
///< 0: div1; 1: div2; 2 div 4; 3; div 8
#define PMA_TX_MGS_CAR_CFG_TXCOMP_CLKDIV_RATIO_BF_OFF (18)
#define PMA_TX_MGS_CAR_CFG_TXCOMP_CLKDIV_RATIO_BF_WID ( 2)
#define PMA_TX_MGS_CAR_CFG_TXCOMP_CLKDIV_RATIO_BF_MSK (0x000C0000)
#define PMA_TX_MGS_CAR_CFG_TXCOMP_CLKDIV_RATIO_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CAR_CFG_RO register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_car_cfg_ro
  * Tx clock and reset config readback
  */

typedef union {
  struct {
    uint32_t TXCLK_PCS2PMA_STAT : 2;
    ///< Tx Clock state.  2'b01: keepalive clock, 2'b10: Tx Word clock
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXCLK_KEEPALIVE_EN_B_LOC : 1;
    ///< Tx Word Clock - keepalive clock enable.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXCLK_PCS2PMA_KEEPALIVE_STAT : 2;
    ///< Selected keepalive clock source for pcs2pma txword clock. 2'b01 -
    ///< keepalive slow; 2'b10 - keepalive fast
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_car_cfg_ro_reg_t;

#define PMA_TX_MGS_CAR_CFG_RO_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CAR_CFG_RO_RD_MASK (0x0000001fU)
#define PMA_TX_MGS_CAR_CFG_RO_WR_MASK (0x00000000U)


///< Tx Clock state.  2'b01: keepalive clock, 2'b10: Tx Word clock
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_STAT_BF_OFF ( 0)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_STAT_BF_WID ( 2)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_STAT_BF_MSK (0x00000003)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_STAT_BF_DEF (0x00000000)

///< Tx Word Clock - keepalive clock enable.
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_KEEPALIVE_EN_B_LOC_BF_OFF ( 2)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_KEEPALIVE_EN_B_LOC_BF_WID ( 1)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_KEEPALIVE_EN_B_LOC_BF_MSK (0x00000004)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_KEEPALIVE_EN_B_LOC_BF_DEF (0x00000000)

///< Selected keepalive clock source for pcs2pma txword clock. 2'b01 -
///< keepalive slow; 2'b10 - keepalive fast
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_KEEPALIVE_STAT_BF_OFF ( 3)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_KEEPALIVE_STAT_BF_WID ( 2)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_KEEPALIVE_STAT_BF_MSK (0x00000018)
#define PMA_TX_MGS_CAR_CFG_RO_TXCLK_PCS2PMA_KEEPALIVE_STAT_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_0 register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_0
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_0 : 32;
    ///< Scratch pad 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_0_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_0_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_0_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_0_WR_MASK (0xffffffffU)


///< Scratch pad 0
#define PMA_TX_MGS_SCRATCH_PAD_0_TX_SCRATCH_PAD_0_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_0_TX_SCRATCH_PAD_0_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_0_TX_SCRATCH_PAD_0_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_0_TX_SCRATCH_PAD_0_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_1 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_1
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_1 : 32;
    ///< Scratch pad 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_1_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_1_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_1_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_1_WR_MASK (0xffffffffU)


///< Scratch pad 1
#define PMA_TX_MGS_SCRATCH_PAD_1_TX_SCRATCH_PAD_1_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_1_TX_SCRATCH_PAD_1_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_1_TX_SCRATCH_PAD_1_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_1_TX_SCRATCH_PAD_1_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_2 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_2
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_2 : 32;
    ///< Scratch pad 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_2_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_2_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_2_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_2_WR_MASK (0xffffffffU)


///< Scratch pad 2
#define PMA_TX_MGS_SCRATCH_PAD_2_TX_SCRATCH_PAD_2_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_2_TX_SCRATCH_PAD_2_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_2_TX_SCRATCH_PAD_2_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_2_TX_SCRATCH_PAD_2_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_3 register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_3
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_3 : 32;
    ///< Scratch pad 3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_3_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_3_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_3_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_3_WR_MASK (0xffffffffU)


///< Scratch pad 3
#define PMA_TX_MGS_SCRATCH_PAD_3_TX_SCRATCH_PAD_3_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_3_TX_SCRATCH_PAD_3_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_3_TX_SCRATCH_PAD_3_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_3_TX_SCRATCH_PAD_3_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_4 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_4
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_4 : 32;
    ///< Scratch pad 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_4_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_4_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_4_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_4_WR_MASK (0xffffffffU)


///< Scratch pad 4
#define PMA_TX_MGS_SCRATCH_PAD_4_TX_SCRATCH_PAD_4_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_4_TX_SCRATCH_PAD_4_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_4_TX_SCRATCH_PAD_4_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_4_TX_SCRATCH_PAD_4_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_5 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_5
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_5 : 32;
    ///< Scratch pad 5
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_5_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_5_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_5_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_5_WR_MASK (0xffffffffU)


///< Scratch pad 5
#define PMA_TX_MGS_SCRATCH_PAD_5_TX_SCRATCH_PAD_5_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_5_TX_SCRATCH_PAD_5_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_5_TX_SCRATCH_PAD_5_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_5_TX_SCRATCH_PAD_5_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_6 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_6
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_6 : 32;
    ///< Scratch pad 6
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_6_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_6_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_6_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_6_WR_MASK (0xffffffffU)


///< Scratch pad 6
#define PMA_TX_MGS_SCRATCH_PAD_6_TX_SCRATCH_PAD_6_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_6_TX_SCRATCH_PAD_6_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_6_TX_SCRATCH_PAD_6_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_6_TX_SCRATCH_PAD_6_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_SCRATCH_PAD_7 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_scratch_pad_7
  * Scratch pad
  */

typedef union {
  struct {
    uint32_t TX_SCRATCH_PAD_7 : 32;
    ///< Scratch pad 7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_scratch_pad_7_reg_t;

#define PMA_TX_MGS_SCRATCH_PAD_7_DEFAULT (0x00000000U)
#define PMA_TX_MGS_SCRATCH_PAD_7_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_SCRATCH_PAD_7_WR_MASK (0xffffffffU)


///< Scratch pad 7
#define PMA_TX_MGS_SCRATCH_PAD_7_TX_SCRATCH_PAD_7_BF_OFF ( 0)
#define PMA_TX_MGS_SCRATCH_PAD_7_TX_SCRATCH_PAD_7_BF_WID (32)
#define PMA_TX_MGS_SCRATCH_PAD_7_TX_SCRATCH_PAD_7_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_SCRATCH_PAD_7_TX_SCRATCH_PAD_7_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CTRL register description at address offset 0x28
  *
  * Register default value:        0x00000410
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ctrl
  * Tx Control
  */

typedef union {
  struct {
    uint32_t TXENABLE_LOCOVREN : 1;
    ///< Tx enable override enable.  When this is set to '1'. Tx enable will
    ///< be controlled by tx_enable_locovr
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXENABLE_LOCOVR : 1;
    ///< Tx enable override value.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t TX_PAM_BITORDER : 3;
    ///< Tx PAM encoding bit order. Bit 0 - Flips input data bits, Bit - 1
    ///< - Flips Gray coded bits, Bit 2 - Flips precoded bits
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t TX_POLARITY : 1;
    ///< Tx data polarity.  Tx data will be inverted when this bit is set to
    ///< 1
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TX2RXLB_EN : 1;
    ///< Enable for Tx-to-Rx parallel loopback inside DPMA
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TX2RXLBFIFO_INIT_OFFSET : 2;
    ///< Tx-to-Rx parallel loopback fifo pointer offset.  Set the distance
    ///< between wptr and rptr at the iniital state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x2"
    uint32_t TXSIG_MODULATION_SCHEME_LOCOVREN : 1;
    ///< Tx signal modulation schcme override enable
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t TXSIG_MODULATION_SCHEME_LOCOVR : 2;
    ///< Tx signal modulation schcme override value.  0 - NRZ; 1 - PAM4; 2/3
    ///< - Not used
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXDATSYMBOL_LOCOVREN : 1;
    ///< Tx Data Symbol width override enable
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXDATSYMBOL_WIDTH_SEL_LOCOVR : 2;
    ///< Tx Data Symbol width override:
    ///< 0: 8 bits symbo
    ///< 1: 16 bits symbol
    ///< 2: 32 bits symbol
    ///< 3: 64 bits symbol
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t TXDETECTRXMEASPCS_LOCOVREN : 1;
    ///< Tx detect Rx measurment request override enable
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t TXDETECTRXMEASPCS_REQ_LOCOVR : 1;
    ///< Tx detect Rx measurment request override
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t TXFFE_COEFF_IN_SYNC_BYPASS_EN : 1;
    ///< TxFFE Coefficient input synchronization bypass enable.  When this
    ///< is set to '1', pins i_txdrv_txffe_coeff_c* will bypass the synchronization
    ///< from i_ck_pcs_ctrl to i_ck_p2sword clock.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t TX_PAM_GRAY_EN_LOCOVREN : 1;
    ///< TX Gray Enable override enable.  When this is set to '1'. Tx Gray
    ///< Enable will be controlled by tx_pam_gray_en_locovr
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t TX_PAM_GRAY_EN_LOCOVR : 1;
    ///< Tx  Gray enable override value.
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t TX_PAM_PRECODE_EN_LOCOVREN : 1;
    ///< Tx  Precode enable override enable.  When this is set to '1'. Tx enable
    ///< will be controlled by tx_pam_precode_en_locovr
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t TX_PAM_PRECODE_EN_LOCOVR : 1;
    ///< Tx Precode enable override value.
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ctrl_reg_t;

#define PMA_TX_MGS_CTRL_DEFAULT (0x00000410U)
#define PMA_TX_MGS_CTRL_RD_MASK (0x00fffff3U)
#define PMA_TX_MGS_CTRL_WR_MASK (0x00fffff3U)


///< Tx enable override enable.  When this is set to '1'. Tx enable will
///< be controlled by tx_enable_locovr
#define PMA_TX_MGS_CTRL_TXEN_LOCOVREN_BF_OFF ( 0)
#define PMA_TX_MGS_CTRL_TXEN_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXEN_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TX_MGS_CTRL_TXEN_LOCOVREN_BF_DEF (0x00000000)

///< Tx enable override value.
#define PMA_TX_MGS_CTRL_TXEN_LOCOVR_BF_OFF ( 1)
#define PMA_TX_MGS_CTRL_TXEN_LOCOVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXEN_LOCOVR_BF_MSK (0x00000002)
#define PMA_TX_MGS_CTRL_TXEN_LOCOVR_BF_DEF (0x00000000)

///< Tx PAM encoding bit order. Bit 0 - Flips input data bits, Bit - 1
///< - Flips Gray coded bits, Bit 2 - Flips precoded bits
#define PMA_TX_MGS_CTRL_TX_PAM_BITORDER_BF_OFF ( 4)
#define PMA_TX_MGS_CTRL_TX_PAM_BITORDER_BF_WID ( 3)
#define PMA_TX_MGS_CTRL_TX_PAM_BITORDER_BF_MSK (0x00000070)
#define PMA_TX_MGS_CTRL_TX_PAM_BITORDER_BF_DEF (0x00000010)

///< Tx data polarity.  Tx data will be inverted when this bit is set to
///< 1
#define PMA_TX_MGS_CTRL_TX_POLARITY_BF_OFF ( 7)
#define PMA_TX_MGS_CTRL_TX_POLARITY_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TX_POLARITY_BF_MSK (0x00000080)
#define PMA_TX_MGS_CTRL_TX_POLARITY_BF_DEF (0x00000000)

///< Enable for Tx-to-Rx parallel loopback inside DPMA
#define PMA_TX_MGS_CTRL_TX2RXLB_EN_BF_OFF ( 8)
#define PMA_TX_MGS_CTRL_TX2RXLB_EN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TX2RXLB_EN_BF_MSK (0x00000100)
#define PMA_TX_MGS_CTRL_TX2RXLB_EN_BF_DEF (0x00000000)

///< Tx-to-Rx parallel loopback fifo pointer offset.  Set the distance
///< between wptr and rptr at the iniital state
#define PMA_TX_MGS_CTRL_TX2RXLBFIFO_INIT_OFFSET_BF_OFF ( 9)
#define PMA_TX_MGS_CTRL_TX2RXLBFIFO_INIT_OFFSET_BF_WID ( 2)
#define PMA_TX_MGS_CTRL_TX2RXLBFIFO_INIT_OFFSET_BF_MSK (0x00000600)
#define PMA_TX_MGS_CTRL_TX2RXLBFIFO_INIT_OFFSET_BF_DEF (0x00000400)

///< Tx signal modulation schcme override enable
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVREN_BF_OFF (11)
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVREN_BF_MSK (0x00000800)
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVREN_BF_DEF (0x00000000)

///< Tx signal modulation schcme override value.  0 - NRZ; 1 - PAM4; 2/3
///< - Not used
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVR_BF_OFF (12)
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVR_BF_WID ( 2)
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVR_BF_MSK (0x00003000)
#define PMA_TX_MGS_CTRL_TXSIG_MOD_SCHEME_LOCOVR_BF_DEF (0x00000000)

///< Tx Data Symbol width override enable
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_LOCOVREN_BF_OFF (14)
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_LOCOVREN_BF_MSK (0x00004000)
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_LOCOVREN_BF_DEF (0x00000000)

///< Tx Data Symbol width override:
///< 0: 8 bits symbo
///< 1: 16 bits symbol
///< 2: 32 bits symbol
///< 3: 64 bits symbol
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_WIDTH_SEL_LOCOVR_BF_OFF (15)
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_WIDTH_SEL_LOCOVR_BF_WID ( 2)
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_WIDTH_SEL_LOCOVR_BF_MSK (0x00018000)
#define PMA_TX_MGS_CTRL_TXDATSYMBOL_WIDTH_SEL_LOCOVR_BF_DEF (0x00000000)

///< Tx detect Rx measurment request override enable
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_LOCOVREN_BF_OFF (17)
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_LOCOVREN_BF_MSK (0x00020000)
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_LOCOVREN_BF_DEF (0x00000000)

///< Tx detect Rx measurment request override
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_REQ_LOCOVR_BF_OFF (18)
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_REQ_LOCOVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_REQ_LOCOVR_BF_MSK (0x00040000)
#define PMA_TX_MGS_CTRL_TXDETECTRXMEASPCS_REQ_LOCOVR_BF_DEF (0x00000000)

///< TxFFE Coefficient input synchronization bypass enable.  When this
///< is set to '1', pins i_txdrv_txffe_coeff_c* will bypass the synchronization
///< from i_ck_pcs_ctrl to i_ck_p2sword clock.
#define PMA_TX_MGS_CTRL_TXFFE_COEFF_IN_SYNC_BYP_EN_BF_OFF (19)
#define PMA_TX_MGS_CTRL_TXFFE_COEFF_IN_SYNC_BYP_EN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TXFFE_COEFF_IN_SYNC_BYP_EN_BF_MSK (0x00080000)
#define PMA_TX_MGS_CTRL_TXFFE_COEFF_IN_SYNC_BYP_EN_BF_DEF (0x00000000)

///< TX Gray Enable override enable.  When this is set to '1'. Tx Gray
///< Enable will be controlled by tx_pam_gray_en_locovr
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVREN_BF_OFF (20)
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVREN_BF_MSK (0x00100000)
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVREN_BF_DEF (0x00000000)

///< Tx  Gray enable override value.
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVR_BF_OFF (21)
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVR_BF_MSK (0x00200000)
#define PMA_TX_MGS_CTRL_TX_PAM_GRAY_EN_LOCOVR_BF_DEF (0x00000000)

///< Tx  Precode enable override enable.  When this is set to '1'. Tx enable
///< will be controlled by tx_pam_precode_en_locovr
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVREN_BF_OFF (22)
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVREN_BF_MSK (0x00400000)
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVREN_BF_DEF (0x00000000)

///< Tx Precode enable override value.
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVR_BF_OFF (23)
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVR_BF_MSK (0x00800000)
#define PMA_TX_MGS_CTRL_TX_PAM_PRECODE_EN_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CTRL_RO register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ctrl_ro
  * Tx Control Readback
  */

typedef union {
  struct {
    uint32_t TXENABLE_LOC : 1;
    ///< Tx enable pre-override value.  This is from the pin, i_tx_enable_l[x]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXSIG_MODULATION_SCHEME_LOC : 2;
    ///< Tx signal modulation schcme pre-override value
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXDATSYMBOL_WIDTH_SEL_LOC : 2;
    ///< Tx Data Symbol width pre-override
    ///< 0: 8 bits symbol
    ///< 1: 16 bits symbol
    ///< 2: 32 bits symbol
    ///< 3: 64 bits symbol
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXDETECTRXMEASPCS_REQ : 1;
    ///< Tx detect Rx measurment request
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t TX_PAM_GRAY_EN_LOC : 1;
    ///< Tx Gray enable pre-override value.  This is from the pin, i_tx_pam_gray_en_l[x]
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TX_PAM_PRECODE_EN_LOC : 1;
    ///< Tx Precode enable pre-override value.  This is from the pin, i_tx_pam_precode_en_l[x]
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ctrl_ro_reg_t;

#define PMA_TX_MGS_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CTRL_RO_RD_MASK (0x000000ffU)
#define PMA_TX_MGS_CTRL_RO_WR_MASK (0x00000000U)


///< Tx enable pre-override value.  This is from the pin, i_tx_enable_l[x]
#define PMA_TX_MGS_CTRL_RO_TXEN_LOC_BF_OFF ( 0)
#define PMA_TX_MGS_CTRL_RO_TXEN_LOC_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_RO_TXEN_LOC_BF_MSK (0x00000001)
#define PMA_TX_MGS_CTRL_RO_TXEN_LOC_BF_DEF (0x00000000)

///< Tx signal modulation schcme pre-override value
#define PMA_TX_MGS_CTRL_RO_TXSIG_MOD_SCHEME_LOC_BF_OFF ( 1)
#define PMA_TX_MGS_CTRL_RO_TXSIG_MOD_SCHEME_LOC_BF_WID ( 2)
#define PMA_TX_MGS_CTRL_RO_TXSIG_MOD_SCHEME_LOC_BF_MSK (0x00000006)
#define PMA_TX_MGS_CTRL_RO_TXSIG_MOD_SCHEME_LOC_BF_DEF (0x00000000)

///< Tx Data Symbol width pre-override
///< 0: 8 bits symbol
///< 1: 16 bits symbol
///< 2: 32 bits symbol
///< 3: 64 bits symbol
#define PMA_TX_MGS_CTRL_RO_TXDATSYMBOL_WIDTH_SEL_LOC_BF_OFF ( 3)
#define PMA_TX_MGS_CTRL_RO_TXDATSYMBOL_WIDTH_SEL_LOC_BF_WID ( 2)
#define PMA_TX_MGS_CTRL_RO_TXDATSYMBOL_WIDTH_SEL_LOC_BF_MSK (0x00000018)
#define PMA_TX_MGS_CTRL_RO_TXDATSYMBOL_WIDTH_SEL_LOC_BF_DEF (0x00000000)

///< Tx detect Rx measurment request
#define PMA_TX_MGS_CTRL_RO_TXDETECTRXMEASPCS_REQ_BF_OFF ( 5)
#define PMA_TX_MGS_CTRL_RO_TXDETECTRXMEASPCS_REQ_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_RO_TXDETECTRXMEASPCS_REQ_BF_MSK (0x00000020)
#define PMA_TX_MGS_CTRL_RO_TXDETECTRXMEASPCS_REQ_BF_DEF (0x00000000)

///< Tx Gray enable pre-override value.  This is from the pin, i_tx_pam_gray_en_l[x]
#define PMA_TX_MGS_CTRL_RO_TX_PAM_GRAY_EN_LOC_BF_OFF ( 6)
#define PMA_TX_MGS_CTRL_RO_TX_PAM_GRAY_EN_LOC_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_RO_TX_PAM_GRAY_EN_LOC_BF_MSK (0x00000040)
#define PMA_TX_MGS_CTRL_RO_TX_PAM_GRAY_EN_LOC_BF_DEF (0x00000000)

///< Tx Precode enable pre-override value.  This is from the pin, i_tx_pam_precode_en_l[x]
#define PMA_TX_MGS_CTRL_RO_TX_PAM_PRECODE_EN_LOC_BF_OFF ( 7)
#define PMA_TX_MGS_CTRL_RO_TX_PAM_PRECODE_EN_LOC_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_RO_TX_PAM_PRECODE_EN_LOC_BF_MSK (0x00000080)
#define PMA_TX_MGS_CTRL_RO_TX_PAM_PRECODE_EN_LOC_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_POWER_MNG_CTRL register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_power_mng_ctrl
  * Tx power management control
  */

typedef union {
  struct {
    uint32_t TXPMU_H8_OFF_DELAY : 4;
    ///< PMU hibrate off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPMU_H8_RST_ON_DELAY : 4;
    ///< PMU hibrate rest on delay
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPMU_ISO_OFF_DELAY : 4;
    ///< PMU islolation off delay
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPMU_RESTORE_ISO_ON_DELAY : 4;
    ///< PMU restore isolation on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXPMU_RESTORE_OFF_DELAY : 4;
    ///< PMU restore isolation off delay
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXPMU_RST_OFF_DELAY : 4;
    ///< PMU reset off delay
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t TXFSM_PMU_REQ_EN : 1;
    ///< PMU request override enable
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t TXFSM_PMU_REQ : 1;
    ///< PMU request override
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_pwr_mng_ctrl_reg_t;

#define PMA_TX_MGS_PWR_MNG_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MGS_PWR_MNG_CTRL_RD_MASK (0x03ffffffU)
#define PMA_TX_MGS_PWR_MNG_CTRL_WR_MASK (0x03ffffffU)


///< PMU hibrate off delay
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_OFF_DELAY_BF_OFF ( 0)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_OFF_DELAY_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_OFF_DELAY_BF_MSK (0x0000000F)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_OFF_DELAY_BF_DEF (0x00000000)

///< PMU hibrate rest on delay
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_RST_ON_DELAY_BF_OFF ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_RST_ON_DELAY_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_RST_ON_DELAY_BF_MSK (0x000000F0)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_H8_RST_ON_DELAY_BF_DEF (0x00000000)

///< PMU islolation off delay
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_ISO_OFF_DELAY_BF_OFF ( 8)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_ISO_OFF_DELAY_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_ISO_OFF_DELAY_BF_MSK (0x00000F00)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_ISO_OFF_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation on delay
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_ISO_ON_DELAY_BF_OFF (12)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_ISO_ON_DELAY_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_ISO_ON_DELAY_BF_MSK (0x0000F000)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_ISO_ON_DELAY_BF_DEF (0x00000000)

///< PMU restore isolation off delay
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_OFF_DELAY_BF_OFF (16)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_OFF_DELAY_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_OFF_DELAY_BF_MSK (0x000F0000)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RESTORE_OFF_DELAY_BF_DEF (0x00000000)

///< PMU reset off delay
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RST_OFF_DELAY_BF_OFF (20)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RST_OFF_DELAY_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RST_OFF_DELAY_BF_MSK (0x00F00000)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXPMU_RST_OFF_DELAY_BF_DEF (0x00000000)

///< PMU request override enable
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_EN_BF_OFF (24)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_EN_BF_WID ( 1)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_EN_BF_MSK (0x01000000)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_EN_BF_DEF (0x00000000)

///< PMU request override
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_BF_OFF (25)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_BF_WID ( 1)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_BF_MSK (0x02000000)
#define PMA_TX_MGS_PWR_MNG_CTRL_TXFSM_PMU_REQ_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_POWER_MNG_STATUS register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_power_mng_status
  * Tx power management status
  */

typedef union {
  struct {
    uint32_t TXFSM_PMU_ACK : 1;
    ///< PMU ack
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXFSM_PMU_PSTATE : 1;
    ///< PMU current Pstate
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXFSM_PMU_STAT : 1;
    ///< PMU status.  0 - Idle; 1 - Isolation On
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXFSM_PMU_STATE : 4;
    ///< PMU FSM state
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXFSM_PMUIF_STATE : 3;
    ///< PMU I/F FSM state
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_pwr_mng_stat_reg_t;

#define PMA_TX_MGS_PWR_MNG_STAT_DEFAULT (0x00000000U)
#define PMA_TX_MGS_PWR_MNG_STAT_RD_MASK (0x000007f7U)
#define PMA_TX_MGS_PWR_MNG_STAT_WR_MASK (0x00000000U)


///< PMU ack
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_ACK_BF_OFF ( 0)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_ACK_BF_WID ( 1)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_ACK_BF_MSK (0x00000001)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_ACK_BF_DEF (0x00000000)

///< PMU current Pstate
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_PSTATE_BF_OFF ( 1)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_PSTATE_BF_WID ( 1)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_PSTATE_BF_MSK (0x00000002)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_PSTATE_BF_DEF (0x00000000)

///< PMU status.  0 - Idle; 1 - Isolation On
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STAT_BF_OFF ( 2)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STAT_BF_WID ( 1)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STAT_BF_MSK (0x00000004)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STAT_BF_DEF (0x00000000)

///< PMU FSM state
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STATE_BF_OFF ( 4)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STATE_BF_WID ( 4)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STATE_BF_MSK (0x000000F0)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMU_STATE_BF_DEF (0x00000000)

///< PMU I/F FSM state
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMUIF_STATE_BF_OFF ( 8)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMUIF_STATE_BF_WID ( 3)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMUIF_STATE_BF_MSK (0x00000700)
#define PMA_TX_MGS_PWR_MNG_STAT_TXFSM_PMUIF_STATE_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_CFG register description at address offset 0x38
  *
  * Register default value:        0x00035310
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_cfg
  * Tx Main FSM control
  */

typedef union {
  struct {
    uint32_t TX_PG_DISABLE : 1;
    ///< Main FSM power gated disable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t TX_CMN_ON_STATE : 3;
    ///< Main FSM CMN ON State
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TX_ON_STATE : 3;
    ///< Main FSM READY State
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXFSM_MAIN_ON_STATE : 3;
    ///< Main FSM ON State
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TX_SYNTH_ON_STATE : 3;
    ///< Main FSM Synth (PLL) ON State
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t TXFSM_CALABORT_PULSE_WIDTH : 3;
    ///< Main FSM calibration abort pulse width
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_cfg_reg_t;

#define PMA_TX_MSG_FSM_CFG_DEFAULT (0x00035310U)
#define PMA_TX_MSG_FSM_CFG_RD_MASK (0x00777771U)
#define PMA_TX_MSG_FSM_CFG_WR_MASK (0x00777771U)


///< Main FSM power gated disable
#define PMA_TX_MSG_FSM_CFG_TX_PG_DIS_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_CFG_TX_PG_DIS_BF_WID ( 1)
#define PMA_TX_MSG_FSM_CFG_TX_PG_DIS_BF_MSK (0x00000001)
#define PMA_TX_MSG_FSM_CFG_TX_PG_DIS_BF_DEF (0x00000000)

///< Main FSM CMN ON State
#define PMA_TX_MSG_FSM_CFG_TX_CMN_ON_STATE_BF_OFF ( 4)
#define PMA_TX_MSG_FSM_CFG_TX_CMN_ON_STATE_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CFG_TX_CMN_ON_STATE_BF_MSK (0x00000070)
#define PMA_TX_MSG_FSM_CFG_TX_CMN_ON_STATE_BF_DEF (0x00000010)

///< Main FSM READY State
#define PMA_TX_MSG_FSM_CFG_TX_ON_STATE_BF_OFF ( 8)
#define PMA_TX_MSG_FSM_CFG_TX_ON_STATE_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CFG_TX_ON_STATE_BF_MSK (0x00000700)
#define PMA_TX_MSG_FSM_CFG_TX_ON_STATE_BF_DEF (0x00000300)

///< Main FSM ON State
#define PMA_TX_MSG_FSM_CFG_TXFSM_MAIN_ON_STATE_BF_OFF (12)
#define PMA_TX_MSG_FSM_CFG_TXFSM_MAIN_ON_STATE_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CFG_TXFSM_MAIN_ON_STATE_BF_MSK (0x00007000)
#define PMA_TX_MSG_FSM_CFG_TXFSM_MAIN_ON_STATE_BF_DEF (0x00005000)

///< Main FSM Synth (PLL) ON State
#define PMA_TX_MSG_FSM_CFG_TX_SYNTH_ON_STATE_BF_OFF (16)
#define PMA_TX_MSG_FSM_CFG_TX_SYNTH_ON_STATE_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CFG_TX_SYNTH_ON_STATE_BF_MSK (0x00070000)
#define PMA_TX_MSG_FSM_CFG_TX_SYNTH_ON_STATE_BF_DEF (0x00030000)

///< Main FSM calibration abort pulse width
#define PMA_TX_MSG_FSM_CFG_TXFSM_CALABORT_PULSE_WIDTH_BF_OFF (20)
#define PMA_TX_MSG_FSM_CFG_TXFSM_CALABORT_PULSE_WIDTH_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CFG_TXFSM_CALABORT_PULSE_WIDTH_BF_MSK (0x00700000)
#define PMA_TX_MSG_FSM_CFG_TXFSM_CALABORT_PULSE_WIDTH_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_MEM_CTRL register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_mem_ctrl
  * Tx soft control
  */

typedef union {
  struct {
    uint32_t TXMEM_EN : 1;
    ///< Soft control enable.  To allow using register to power up/down OR
    ///< Tx Lane reset
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXMEM_RST_B : 1;
    ///< Soft Tx Lane reset
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXMEM_PSTATE : 3;
    ///< Soft Tx Lane Pstate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXMEM_RATE_FREQ : 3;
    ///< Soft Tx Lane rate freq (Mode)
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXMEM_RATE_DIV : 4;
    ///< Soft Tx Lane rate div rate
    ///< 0 - div1; 1 - div2; 2 - div4; 3 - div8 4 - div16; 5 - div32; 6/7 -
    ///< reserved
    ///< 8 - div1.5; 9 - div3; 10 - div6; 11 - div12; 12 - div24; 13 - div48;
    ///< 14/15 - reserved
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXMEM_WIDTH : 4;
    ///< Soft Tx Lane data width
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_mem_ctrl_reg_t;

#define PMA_TX_MGS_MEM_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MGS_MEM_CTRL_RD_MASK (0x0000ffffU)
#define PMA_TX_MGS_MEM_CTRL_WR_MASK (0x0000ffffU)


///< Soft control enable.  To allow using register to power up/down OR
///< Tx Lane reset
#define PMA_TX_MGS_MEM_CTRL_TXMEM_EN_BF_OFF ( 0)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_EN_BF_WID ( 1)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_EN_BF_MSK (0x00000001)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_EN_BF_DEF (0x00000000)

///< Soft Tx Lane reset
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RST_B_BF_OFF ( 1)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RST_B_BF_WID ( 1)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RST_B_BF_MSK (0x00000002)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RST_B_BF_DEF (0x00000000)

///< Soft Tx Lane Pstate
#define PMA_TX_MGS_MEM_CTRL_TXMEM_PSTATE_BF_OFF ( 2)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_PSTATE_BF_WID ( 3)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_PSTATE_BF_MSK (0x0000001C)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_PSTATE_BF_DEF (0x00000000)

///< Soft Tx Lane rate freq (Mode)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_FREQ_BF_OFF ( 5)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_FREQ_BF_WID ( 3)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_FREQ_BF_MSK (0x000000E0)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_FREQ_BF_DEF (0x00000000)

///< Soft Tx Lane rate div rate
///< 0 - div1; 1 - div2; 2 - div4; 3 - div8 4 - div16; 5 - div32; 6/7 -
///< reserved
///< 8 - div1.5; 9 - div3; 10 - div6; 11 - div12; 12 - div24; 13 - div48;
///< 14/15 - reserved
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_DIV_BF_OFF ( 8)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_DIV_BF_WID ( 4)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_DIV_BF_MSK (0x00000F00)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_RATE_DIV_BF_DEF (0x00000000)

///< Soft Tx Lane data width
#define PMA_TX_MGS_MEM_CTRL_TXMEM_WIDTH_BF_OFF (12)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_WIDTH_BF_WID ( 4)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_WIDTH_BF_MSK (0x0000F000)
#define PMA_TX_MGS_MEM_CTRL_TXMEM_WIDTH_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_MEM_REQ_CTRL register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_mem_req_ctrl
  * Tx soft control Clear
  */

typedef union {
  struct {
    uint32_t TXMEM_REQ : 1;
    ///< Soft control request to initiate the power up/down OR Tx Lane reset
    ///< by register.  A return value of 0 when the request has completed
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_mem_req_ctrl_reg_t;

#define PMA_TX_MGS_MEM_REQ_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MGS_MEM_REQ_CTRL_RD_MASK (0x00000001U)
#define PMA_TX_MGS_MEM_REQ_CTRL_WR_MASK (0x00000001U)


///< Soft control request to initiate the power up/down OR Tx Lane reset
///< by register.  A return value of 0 when the request has completed
#define PMA_TX_MGS_MEM_REQ_CTRL_TXMEM_REQ_BF_OFF ( 0)
#define PMA_TX_MGS_MEM_REQ_CTRL_TXMEM_REQ_BF_WID ( 1)
#define PMA_TX_MGS_MEM_REQ_CTRL_TXMEM_REQ_BF_MSK (0x00000001)
#define PMA_TX_MGS_MEM_REQ_CTRL_TXMEM_REQ_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_STATUS_0 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_status_0
  * Tx status
  */

typedef union {
  struct {
    uint32_t TXFSM_MAIN_CKEN_STAT : 1;
    ///< Tx main clock stat
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXFSM_MAIN_IFCMN_STATE : 2;
    ///< Tx Main-to-CMN I/F state
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXFSM_MAIN_STATE : 4;
    ///< Tx Main FSM state
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXFSM_MAIN_CUR_PSTATE : 3;
    ///< Tx Main FSM current Pstate
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXFSM_MAIN_CUR_RATE_FREQ : 3;
    ///< Tx Main FSM current Rate Frequency (Mode)
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TXFSM_MAIN_CUR_RATE_DIV : 4;
    ///< Tx Main FSM current Rate Div
    ///< 0 - div1; 1 - div2; 2 - div4; 3 - div8 4 - div16; 5 - div32; 6/7 -
    ///< reserved
    ///< 8 - div1.5; 9 - div3; 10 - div6; 11 - div12; 12 - div24; 13 - div48;
    ///< 14/15 - reserved
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXFSM_MAIN_CUR_WIDTH : 4;
    ///< Tx Main FSM current Rate Width
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t TXFSM_MAIN_TARG_PSTATE : 3;
    ///< Tx Main FSM target Pstate
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t TXFSM_MAIN_TARG_RATE_FREQ : 3;
    ///< Tx Main FSM target Rate Frequency (Mode)
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t TXFSM_CAL_IS_RATEWIDTHFSM_REQ : 1;
    ///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
    ///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
    ///< FSM
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_stat_0_reg_t;

#define PMA_TX_MGS_STAT_0_DEFAULT (0x00000000U)
#define PMA_TX_MGS_STAT_0_RD_MASK (0xf7ff77f7U)
#define PMA_TX_MGS_STAT_0_WR_MASK (0x00000000U)


///< Tx main clock stat
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CKEN_STAT_BF_OFF ( 0)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CKEN_STAT_BF_WID ( 1)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CKEN_STAT_BF_MSK (0x00000001)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CKEN_STAT_BF_DEF (0x00000000)

///< Tx Main-to-CMN I/F state
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_IFCMN_STATE_BF_OFF ( 1)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_IFCMN_STATE_BF_WID ( 2)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_IFCMN_STATE_BF_MSK (0x00000006)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_IFCMN_STATE_BF_DEF (0x00000000)

///< Tx Main FSM state
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_STATE_BF_OFF ( 4)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_STATE_BF_WID ( 4)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_STATE_BF_MSK (0x000000F0)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_STATE_BF_DEF (0x00000000)

///< Tx Main FSM current Pstate
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_PSTATE_BF_OFF ( 8)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_PSTATE_BF_WID ( 3)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_PSTATE_BF_MSK (0x00000700)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_PSTATE_BF_DEF (0x00000000)

///< Tx Main FSM current Rate Frequency (Mode)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_FREQ_BF_OFF (12)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_FREQ_BF_WID ( 3)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_FREQ_BF_MSK (0x00007000)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_FREQ_BF_DEF (0x00000000)

///< Tx Main FSM current Rate Div
///< 0 - div1; 1 - div2; 2 - div4; 3 - div8 4 - div16; 5 - div32; 6/7 -
///< reserved
///< 8 - div1.5; 9 - div3; 10 - div6; 11 - div12; 12 - div24; 13 - div48;
///< 14/15 - reserved
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_DIV_BF_OFF (16)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_DIV_BF_WID ( 4)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_DIV_BF_MSK (0x000F0000)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_RATE_DIV_BF_DEF (0x00000000)

///< Tx Main FSM current Rate Width
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_WIDTH_BF_OFF (20)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_WIDTH_BF_WID ( 4)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_WIDTH_BF_MSK (0x00F00000)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_CUR_WIDTH_BF_DEF (0x00000000)

///< Tx Main FSM target Pstate
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_PSTATE_BF_OFF (24)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_PSTATE_BF_WID ( 3)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_PSTATE_BF_MSK (0x07000000)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_PSTATE_BF_DEF (0x00000000)

///< Tx Main FSM target Rate Frequency (Mode)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_RATE_FREQ_BF_OFF (28)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_RATE_FREQ_BF_WID ( 3)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_RATE_FREQ_BF_MSK (0x70000000)
#define PMA_TX_MGS_STAT_0_TXFSM_MAIN_TARG_RATE_FREQ_BF_DEF (0x00000000)

///< CalMaster FSM request source.  This shows which FSM requests for CalMaster
///< to start calibration/rpu sequence.  0 - From MainFSM; 1 - from Ratewidth
///< FSM
#define PMA_TX_MGS_STAT_0_TXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_OFF (31)
#define PMA_TX_MGS_STAT_0_TXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_WID ( 1)
#define PMA_TX_MGS_STAT_0_TXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_MSK (0x80000000)
#define PMA_TX_MGS_STAT_0_TXFSM_CAL_IS_RATEWIDTHFSM_REQ_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_STATUS_1 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_status_1
  * Tx status
  */

typedef union {
  struct {
    uint32_t TXFSM_MAIN_TARG_RATE_DIV : 4;
    ///< Tx Main FSM target Rate Div
    ///< 0 - div1; 1 - div2; 2 - div4; 3 - div8 4 - div16; 5 - div32; 6/7 -
    ///< reserved
    ///< 8 - div1.5; 9 - div3; 10 - div6; 11 - div12; 12 - div24; 13 - div48;
    ///< 14/15 - reserved
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXFSM_MAIN_TARG_WIDTH : 4;
    ///< Tx Main FSM target Rate Width
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXFSM_CAL_CUR_PSTATE : 3;
    ///< Tx CalMaster current Pstate
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXFSM_CAL_CUR_QUAD : 3;
    ///< Tx CalMaster current Qaud
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TXFSM_CAL_STATE : 4;
    ///< Tx CalMaster FSM state
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXFSM_RPU_STATE : 3;
    ///< Tx RPU FSM State
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t TXRATEWIDTH_WIDTH : 4;
    ///< Tx Ratwidth width
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t TXFSM_MAIN_IFTXPLL_STATE : 2;
    ///< Tx Main-to-Tx PLL I/F state
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t TXFSM_MAIN_STATUS : 1;
    ///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
    ///< state.
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t TXFSM_MAIN_READY : 1;
    ///< Main FSM ready
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_stat_1_reg_t;

#define PMA_TX_MGS_STAT_1_DEFAULT (0x00000000U)
#define PMA_TX_MGS_STAT_1_RD_MASK (0xff7f77ffU)
#define PMA_TX_MGS_STAT_1_WR_MASK (0x00000000U)


///< Tx Main FSM target Rate Div
///< 0 - div1; 1 - div2; 2 - div4; 3 - div8 4 - div16; 5 - div32; 6/7 -
///< reserved
///< 8 - div1.5; 9 - div3; 10 - div6; 11 - div12; 12 - div24; 13 - div48;
///< 14/15 - reserved
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_RATE_DIV_BF_OFF ( 0)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_RATE_DIV_BF_WID ( 4)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_RATE_DIV_BF_MSK (0x0000000F)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_RATE_DIV_BF_DEF (0x00000000)

///< Tx Main FSM target Rate Width
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_WIDTH_BF_OFF ( 4)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_WIDTH_BF_WID ( 4)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_WIDTH_BF_MSK (0x000000F0)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_TARG_WIDTH_BF_DEF (0x00000000)

///< Tx CalMaster current Pstate
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_PSTATE_BF_OFF ( 8)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_PSTATE_BF_WID ( 3)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_PSTATE_BF_MSK (0x00000700)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_PSTATE_BF_DEF (0x00000000)

///< Tx CalMaster current Qaud
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_QUAD_BF_OFF (12)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_QUAD_BF_WID ( 3)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_QUAD_BF_MSK (0x00007000)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_CUR_QUAD_BF_DEF (0x00000000)

///< Tx CalMaster FSM state
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_STATE_BF_OFF (16)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_STATE_BF_WID ( 4)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_STATE_BF_MSK (0x000F0000)
#define PMA_TX_MGS_STAT_1_TXFSM_CAL_STATE_BF_DEF (0x00000000)

///< Tx RPU FSM State
#define PMA_TX_MGS_STAT_1_TXFSM_RPU_STATE_BF_OFF (20)
#define PMA_TX_MGS_STAT_1_TXFSM_RPU_STATE_BF_WID ( 3)
#define PMA_TX_MGS_STAT_1_TXFSM_RPU_STATE_BF_MSK (0x00700000)
#define PMA_TX_MGS_STAT_1_TXFSM_RPU_STATE_BF_DEF (0x00000000)

///< Tx Ratwidth width
#define PMA_TX_MGS_STAT_1_TXRATEWIDTH_WIDTH_BF_OFF (24)
#define PMA_TX_MGS_STAT_1_TXRATEWIDTH_WIDTH_BF_WID ( 4)
#define PMA_TX_MGS_STAT_1_TXRATEWIDTH_WIDTH_BF_MSK (0x0F000000)
#define PMA_TX_MGS_STAT_1_TXRATEWIDTH_WIDTH_BF_DEF (0x00000000)

///< Tx Main-to-Tx PLL I/F state
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_IFTXPLL_STATE_BF_OFF (28)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_IFTXPLL_STATE_BF_WID ( 2)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_IFTXPLL_STATE_BF_MSK (0x30000000)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_IFTXPLL_STATE_BF_DEF (0x00000000)

///< Main FSM status.  This bit be set to 1 if FSM is in IDLE/PG/RST/PG_EXIT
///< state.
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_STAT_BF_OFF (30)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_STAT_BF_WID ( 1)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_STAT_BF_MSK (0x40000000)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_STAT_BF_DEF (0x00000000)

///< Main FSM ready
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_READY_BF_OFF (31)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_READY_BF_WID ( 1)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_READY_BF_MSK (0x80000000)
#define PMA_TX_MGS_STAT_1_TXFSM_MAIN_READY_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_STATUS_2 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_status_2
  * Tx status
  */

typedef union {
  struct {
    uint32_t TXFSM_RATEWIDTH_STATE : 6;
    ///< Tx Ratwidth FSM state
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXRPU_STATE_PSTATE : 3;
    ///< RPU curent Pstate
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TXRPU_STATE_QUAD : 3;
    ///< RPU curent Quad
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t TXRPU_STEPDIR : 1;
    ///< RPU power up/down status.  0 - power down ; 1 - power up
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t TXRATEWIDTH_IS_RATEWIDTH : 1;
    ///< Ratewidth FSM ratewidth change status.  This bit will be set to '1'
    ///< when ratewidth fsm detect a change in rate_div, rate_freq or width
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t TXRATEWIDTH_IS_WIDTH_ONLY : 1;
    ///< Ratewidth FSM width change status.  This bit will be set to '1' when
    ///< ratewidth fsm detect a change in width only
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t TXRATEWIDTH_IS_RATEFREQ : 1;
    ///< Ratewidth FSM rate freq change status.  This bit will be set to '1'
    ///< when ratewidth fsm detect a change in rate_freq only
    ///< AccessType="RO/V" BitOffset="15" ResetValue="0x0"
    uint32_t TXRATEWIDTH_MODE : 3;
    ///< Tx current ratewidth mode
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t TXCALDUTYBG_ABORT : 1;
    ///< Tx background duty cycle calibration abort
    ///< AccessType="RO/V" BitOffset="19" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_stat_2_reg_t;

#define PMA_TX_MGS_STAT_2_DEFAULT (0x00000000U)
#define PMA_TX_MGS_STAT_2_RD_MASK (0x000fffffU)
#define PMA_TX_MGS_STAT_2_WR_MASK (0x00000000U)


///< Tx Ratwidth FSM state
#define PMA_TX_MGS_STAT_2_TXFSM_RATEWIDTH_STATE_BF_OFF ( 0)
#define PMA_TX_MGS_STAT_2_TXFSM_RATEWIDTH_STATE_BF_WID ( 6)
#define PMA_TX_MGS_STAT_2_TXFSM_RATEWIDTH_STATE_BF_MSK (0x0000003F)
#define PMA_TX_MGS_STAT_2_TXFSM_RATEWIDTH_STATE_BF_DEF (0x00000000)

///< RPU curent Pstate
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_PSTATE_BF_OFF ( 6)
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_PSTATE_BF_WID ( 3)
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_PSTATE_BF_MSK (0x000001C0)
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_PSTATE_BF_DEF (0x00000000)

///< RPU curent Quad
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_QUAD_BF_OFF ( 9)
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_QUAD_BF_WID ( 3)
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_QUAD_BF_MSK (0x00000E00)
#define PMA_TX_MGS_STAT_2_TXRPU_STATE_QUAD_BF_DEF (0x00000000)

///< RPU power up/down status.  0 - power down ; 1 - power up
#define PMA_TX_MGS_STAT_2_TXRPU_STEPDIR_BF_OFF (12)
#define PMA_TX_MGS_STAT_2_TXRPU_STEPDIR_BF_WID ( 1)
#define PMA_TX_MGS_STAT_2_TXRPU_STEPDIR_BF_MSK (0x00001000)
#define PMA_TX_MGS_STAT_2_TXRPU_STEPDIR_BF_DEF (0x00000000)

///< Ratewidth FSM ratewidth change status.  This bit will be set to '1'
///< when ratewidth fsm detect a change in rate_div, rate_freq or width
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEWIDTH_BF_OFF (13)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEWIDTH_BF_WID ( 1)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEWIDTH_BF_MSK (0x00002000)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEWIDTH_BF_DEF (0x00000000)

///< Ratewidth FSM width change status.  This bit will be set to '1' when
///< ratewidth fsm detect a change in width only
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_WIDTH_ONLY_BF_OFF (14)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_WIDTH_ONLY_BF_WID ( 1)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_WIDTH_ONLY_BF_MSK (0x00004000)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_WIDTH_ONLY_BF_DEF (0x00000000)

///< Ratewidth FSM rate freq change status.  This bit will be set to '1'
///< when ratewidth fsm detect a change in rate_freq only
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEFREQ_BF_OFF (15)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEFREQ_BF_WID ( 1)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEFREQ_BF_MSK (0x00008000)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_IS_RATEFREQ_BF_DEF (0x00000000)

///< Tx current ratewidth mode
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_MODE_BF_OFF (16)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_MODE_BF_WID ( 3)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_MODE_BF_MSK (0x00070000)
#define PMA_TX_MGS_STAT_2_TXRATEWIDTH_MODE_BF_DEF (0x00000000)

///< Tx background duty cycle calibration abort
#define PMA_TX_MGS_STAT_2_TXCALDUTYBG_ABORT_BF_OFF (19)
#define PMA_TX_MGS_STAT_2_TXCALDUTYBG_ABORT_BF_WID ( 1)
#define PMA_TX_MGS_STAT_2_TXCALDUTYBG_ABORT_BF_MSK (0x00080000)
#define PMA_TX_MGS_STAT_2_TXCALDUTYBG_ABORT_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXPCS_PCIE_CTRL register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txpcs_pcie_ctrl
  * PCIE Tx control
  */

typedef union {
  struct {
    uint32_t PIPEPCS_L1SS_TXCMNMODE_EN_OVREN : 1;
    ///< PCIE control Tx CMN mode override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PIPEPCS_L1SS_TXCMNMODE_EN_OVR : 1;
    ///< PCIE control Tx CMN mode override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_pcs_pcie_ctrl_reg_t;

#define PMA_TX_MSG_PCS_PCIE_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MSG_PCS_PCIE_CTRL_RD_MASK (0x00000003U)
#define PMA_TX_MSG_PCS_PCIE_CTRL_WR_MASK (0x00000003U)


///< PCIE control Tx CMN mode override enable
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVREN_BF_OFF ( 0)
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVREN_BF_WID ( 1)
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVREN_BF_MSK (0x00000001)
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVREN_BF_DEF (0x00000000)

///< PCIE control Tx CMN mode override
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVR_BF_OFF ( 1)
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVR_BF_WID ( 1)
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVR_BF_MSK (0x00000002)
#define PMA_TX_MSG_PCS_PCIE_CTRL_PIPEPCS_L1SS_TXCMNMODE_EN_OVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXPCS_PCIE_CTRL_RO register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txpcs_pcie_ctrl_ro
  * PCIE Tx control Readback
  */

typedef union {
  struct {
    uint32_t PIPEPCS_L1SS_TXCMNMODE_EN : 1;
    ///< PCIE control Tx CMN mode
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_pcs_pcie_ctrl_ro_reg_t;

#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_DEFAULT (0x00000000U)
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_RD_MASK (0x00000001U)
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_WR_MASK (0x00000000U)


///< PCIE control Tx CMN mode
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_TXCMNMODE_EN_BF_OFF ( 0)
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_TXCMNMODE_EN_BF_WID ( 1)
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_TXCMNMODE_EN_BF_MSK (0x00000001)
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_PIPEPCS_L1SS_TXCMNMODE_EN_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_RATEWIDTH_CFG_0 register description at address offset 0x58
  *
  * Register default value:        0x00008050
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_ratewidth_cfg_0
  * Tx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TX_RATEWIDTH_CLK_CHK_DISABLE : 1;
    ///< Disable clock check in Ratewidth FSM
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TX_RATEWIDTH_FASTREGPWRUP_EN : 1;
    ///< Ratewidth FSM fast power acc
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TX_RATEWIDTH_CLK_DELAY : 12;
    ///< Ratewidth FSM clock delay interval
    ///< AccessType="RW" BitOffset="2" ResetValue="0x14"
    uint32_t TX_RATEWIDTH_DELAY : 12;
    ///< Ratewidth FSM delay
    ///< AccessType="RW" BitOffset="14" ResetValue="0x2"
    uint32_t TX_RATEWIDTH_INT_RECAL_EN : 5;
    ///< Ratewidth FSM restart calibration when rate change in integer mode
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_ratewidth_cfg_0_reg_t;

#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_DEFAULT (0x00008050U)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_RD_MASK (0x7fffffffU)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_WR_MASK (0x7fffffffU)


///< Disable clock check in Ratewidth FSM
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_CHK_DIS_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_CHK_DIS_BF_WID ( 1)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_CHK_DIS_BF_MSK (0x00000001)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_CHK_DIS_BF_DEF (0x00000000)

///< Ratewidth FSM fast power acc
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_FASTREGPWRUP_EN_BF_OFF ( 1)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_FASTREGPWRUP_EN_BF_WID ( 1)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_FASTREGPWRUP_EN_BF_MSK (0x00000002)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_FASTREGPWRUP_EN_BF_DEF (0x00000000)

///< Ratewidth FSM clock delay interval
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_DELAY_BF_OFF ( 2)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_DELAY_BF_MSK (0x00003FFC)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_CLK_DELAY_BF_DEF (0x00000050)

///< Ratewidth FSM delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_DELAY_BF_OFF (14)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_DELAY_BF_MSK (0x03FFC000)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_DELAY_BF_DEF (0x00008000)

///< Ratewidth FSM restart calibration when rate change in integer mode
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_INT_RECAL_EN_BF_OFF (26)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_INT_RECAL_EN_BF_WID ( 5)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_INT_RECAL_EN_BF_MSK (0x7C000000)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_TX_RATEWIDTH_INT_RECAL_EN_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_RATEWIDTH_CFG_1 register description at address offset 0x5c
  *
  * Register default value:        0x00028005
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_ratewidth_cfg_1
  * Tx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TX_RATEWIDTH_ETR_OFF_DELAY : 12;
    ///< Ratewidth FSM ETR off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t TX_RATEWIDTH_ETR_ON_DELAY : 12;
    ///< Ratewidth FSM ETR on delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x28"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_ratewidth_cfg_1_reg_t;

#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_DEFAULT (0x00028005U)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_RD_MASK (0x00ffffffU)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_WR_MASK (0x00ffffffU)


///< Ratewidth FSM ETR off delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_OFF_DELAY_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_OFF_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_OFF_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM ETR on delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_ON_DELAY_BF_OFF (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_ON_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_ON_DELAY_BF_MSK (0x00FFF000)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_TX_RATEWIDTH_ETR_ON_DELAY_BF_DEF (0x00028000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_RATEWIDTH_CFG_2 register description at address offset 0x60
  *
  * Register default value:        0x00005005
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_ratewidth_cfg_2
  * Tx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TX_RATEWIDTH_PD_ON_DELAY : 12;
    ///< Ratewidth FSM power down on delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t TX_RATEWIDTH_PD_OFF_DELAY : 12;
    ///< Ratewidth FSM power down off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_ratewidth_cfg_2_reg_t;

#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_DEFAULT (0x00005005U)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_RD_MASK (0x00ffffffU)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_WR_MASK (0x00ffffffU)


///< Ratewidth FSM power down on delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_ON_DELAY_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_ON_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_ON_DELAY_BF_MSK (0x00000FFF)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_ON_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM power down off delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_OFF_DELAY_BF_OFF (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_OFF_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_TX_RATEWIDTH_PD_OFF_DELAY_BF_DEF (0x00005000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_RATEWIDTH_CFG_3 register description at address offset 0x64
  *
  * Register default value:        0x00005005
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_ratewidth_cfg_3
  * Tx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TX_RATEWIDTH_RST_A_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-A off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t TX_RATEWIDTH_RST_B0_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B0 off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_ratewidth_cfg_3_reg_t;

#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_DEFAULT (0x00005005U)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_RD_MASK (0x00ffffffU)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_WR_MASK (0x00ffffffU)


///< Ratewidth FSM reset group-A off delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_A_OFF_DELAY_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_A_OFF_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_A_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_A_OFF_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM reset group-B0 off delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_B0_OFF_DELAY_BF_OFF (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_B0_OFF_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_B0_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_TX_RATEWIDTH_RST_B0_OFF_DELAY_BF_DEF (0x00005000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_RATEWIDTH_CFG_4 register description at address offset 0x68
  *
  * Register default value:        0x00005005
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_ratewidth_cfg_4
  * Tx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TX_RATEWIDTH_RST_B1_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B1 off delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t TX_RATEWIDTH_RST_B2_OFF_DELAY : 12;
    ///< Ratewidth FSM reset group-B2 off delay
    ///< AccessType="RW" BitOffset="12" ResetValue="0x5"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_ratewidth_cfg_4_reg_t;

#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_DEFAULT (0x00005005U)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_RD_MASK (0x00ffffffU)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_WR_MASK (0x00ffffffU)


///< Ratewidth FSM reset group-B1 off delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B1_OFF_DELAY_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B1_OFF_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B1_OFF_DELAY_BF_MSK (0x00000FFF)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B1_OFF_DELAY_BF_DEF (0x00000005)

///< Ratewidth FSM reset group-B2 off delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B2_OFF_DELAY_BF_OFF (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B2_OFF_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B2_OFF_DELAY_BF_MSK (0x00FFF000)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_TX_RATEWIDTH_RST_B2_OFF_DELAY_BF_DEF (0x00005000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_RATEWIDTH_CFG_5 register description at address offset 0x6c
  *
  * Register default value:        0x00000002
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_ratewidth_cfg_5
  * Tx Ratewidth Config
  */

typedef union {
  struct {
    uint32_t TX_RATEWIDTH_CAL_CLEAR_DELAY : 12;
    ///< Ratewidth calibration clear delay
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_ratewidth_cfg_5_reg_t;

#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_DEFAULT (0x00000002U)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_RD_MASK (0x00000fffU)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_WR_MASK (0x00000fffU)


///< Ratewidth calibration clear delay
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_TX_RATEWIDTH_CAL_CLR_DELAY_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_TX_RATEWIDTH_CAL_CLR_DELAY_BF_WID (12)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_TX_RATEWIDTH_CAL_CLR_DELAY_BF_MSK (0x00000FFF)
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_TX_RATEWIDTH_CAL_CLR_DELAY_BF_DEF (0x00000002)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_CALMASTER_PSTATE_CFG register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_calmaster_pstate_cfg
  * Tx Calibration Master config
  */

typedef union {
  struct {
    uint32_t TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0 : 3;
    ///< CalMaster break point 0 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1 : 3;
    ///< CalMaster break point 1 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2 : 3;
    ///< CalMaster break point 2 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3 : 3;
    ///< CalMaster break point 3 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4 : 3;
    ///< CalMaster break point 4 Pstate.  Define the Pstate to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_calmaster_pstate_cfg_reg_t;

#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_DEFAULT (0x00000000U)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_RD_MASK (0x00077777U)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_WR_MASK (0x00077777U)


///< CalMaster break point 0 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_MSK (0x00000007)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_OFF ( 4)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_MSK (0x00000070)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000000)

///< CalMaster break point 2 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_OFF ( 8)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_MSK (0x00000700)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT2_BF_DEF (0x00000000)

///< CalMaster break point 3 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_OFF (12)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_MSK (0x00007000)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT3_BF_DEF (0x00000000)

///< CalMaster break point 4 Pstate.  Define the Pstate to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_OFF (16)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_MSK (0x00070000)
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_TXCALPTR_PSTATE_CALMASTERBRKPT_EVENT4_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFSM_CALMASTER_QUAD_CFG register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfsm_calmaster_quad_cfg
  * Tx Calibration Master config
  */

typedef union {
  struct {
    uint32_t TXCALPTR_QUAD_CALMASTERBRKPT_EVENT0 : 3;
    ///< CalMaster break point 0 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t TXCALPTR_QUAD_CALMASTERBRKPT_EVENT1 : 3;
    ///< CalMaster break point 1 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TXCALPTR_QUAD_CALMASTERBRKPT_EVENT2 : 3;
    ///< CalMaster break point 2 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t TXCALPTR_QUAD_CALMASTERBRKPT_EVENT3 : 3;
    ///< CalMaster break point 3 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t TXCALPTR_QUAD_CALMASTERBRKPT_EVENT4 : 3;
    ///< CalMaster break point 4 Quad.  Define the Quad to start the calibration
    ///< during the power up sequence
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_fsm_calmaster_quad_cfg_reg_t;

#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_DEFAULT (0x00000000U)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_RD_MASK (0x00077777U)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_WR_MASK (0x00077777U)


///< CalMaster break point 0 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_OFF ( 0)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_MSK (0x00000007)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT0_BF_DEF (0x00000000)

///< CalMaster break point 1 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_OFF ( 4)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_MSK (0x00000070)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT1_BF_DEF (0x00000000)

///< CalMaster break point 2 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_OFF ( 8)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_MSK (0x00000700)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT2_BF_DEF (0x00000000)

///< CalMaster break point 3 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_OFF (12)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_MSK (0x00007000)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT3_BF_DEF (0x00000000)

///< CalMaster break point 4 Quad.  Define the Quad to start the calibration
///< during the power up sequence
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_OFF (16)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_WID ( 3)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_MSK (0x00070000)
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_TXCALPTR_QUAD_CALMASTERBRKPT_EVENT4_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_CTRL register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_ctrl
  * Tx RPU control
  */

typedef union {
  struct {
    uint32_t TXRPU_EN_B : 1;
    ///< RPU enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_ctrl_reg_t;

#define PMA_TX_MSG_RPU_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MSG_RPU_CTRL_RD_MASK (0x00000001U)
#define PMA_TX_MSG_RPU_CTRL_WR_MASK (0x00000001U)


///< RPU enable
#define PMA_TX_MSG_RPU_CTRL_TXRPU_EN_B_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_CTRL_TXRPU_EN_B_BF_WID ( 1)
#define PMA_TX_MSG_RPU_CTRL_TXRPU_EN_B_BF_MSK (0x00000001)
#define PMA_TX_MSG_RPU_CTRL_TXRPU_EN_B_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_LUT_CFG_0 register description at address offset 0x7c
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_lut_cfg_0
  * Tx RPU LUT
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power up timer LUT - entry 1.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power up timer LUT - entry 2.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_lut_cfg_0_reg_t;

#define PMA_TX_MSG_RPU_LUT_CFG_0_DEFAULT (0x00100010U)
#define PMA_TX_MSG_RPU_LUT_CFG_0_RD_MASK (0x1fff1fffU)
#define PMA_TX_MSG_RPU_LUT_CFG_0_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 1.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY1_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY1_BF_MSK (0x00001FFF)
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY1_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 2.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY2_BF_OFF (16)
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY2_BF_MSK (0x1FFF0000)
#define PMA_TX_MSG_RPU_LUT_CFG_0_TXRPU_EVUP_DELAY_LUT_ENTRY2_BF_DEF (0x00100000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_LUT_CFG_1 register description at address offset 0x80
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_lut_cfg_1
  * Tx RPU LUT
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power up timer LUT - entry 3.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY4 : 13;
    ///< RPU power up timer LUT - entry 4.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_lut_cfg_1_reg_t;

#define PMA_TX_MSG_RPU_LUT_CFG_1_DEFAULT (0x00100010U)
#define PMA_TX_MSG_RPU_LUT_CFG_1_RD_MASK (0x1fff1fffU)
#define PMA_TX_MSG_RPU_LUT_CFG_1_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 3.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY3_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY3_BF_MSK (0x00001FFF)
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY3_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 4.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY4_BF_OFF (16)
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY4_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY4_BF_MSK (0x1FFF0000)
#define PMA_TX_MSG_RPU_LUT_CFG_1_TXRPU_EVUP_DELAY_LUT_ENTRY4_BF_DEF (0x00100000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_LUT_CFG_2 register description at address offset 0x84
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_lut_cfg_2
  * Tx RPU LUT
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY5 : 13;
    ///< RPU power up timer LUT - entry 5.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY6 : 13;
    ///< RPU power up timer LUT - entry 6.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_lut_cfg_2_reg_t;

#define PMA_TX_MSG_RPU_LUT_CFG_2_DEFAULT (0x00100010U)
#define PMA_TX_MSG_RPU_LUT_CFG_2_RD_MASK (0x1fff1fffU)
#define PMA_TX_MSG_RPU_LUT_CFG_2_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 5.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY5_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY5_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY5_BF_MSK (0x00001FFF)
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY5_BF_DEF (0x00000010)

///< RPU power up timer LUT - entry 6.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY6_BF_OFF (16)
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY6_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY6_BF_MSK (0x1FFF0000)
#define PMA_TX_MSG_RPU_LUT_CFG_2_TXRPU_EVUP_DELAY_LUT_ENTRY6_BF_DEF (0x00100000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_LUT_CFG_3 register description at address offset 0x88
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_lut_cfg_3
  * Tx RPU LUT
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_ENTRY7 : 13;
    ///< RPU power up timer LUT - entry 7.  Define the duration in number of
    ///< main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXRPU_EVDN_DELAY_LUT_ENTRY1 : 13;
    ///< RPU power down timer LUT - entry 1.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_lut_cfg_3_reg_t;

#define PMA_TX_MSG_RPU_LUT_CFG_3_DEFAULT (0x00100010U)
#define PMA_TX_MSG_RPU_LUT_CFG_3_RD_MASK (0x1fff1fffU)
#define PMA_TX_MSG_RPU_LUT_CFG_3_WR_MASK (0x1fff1fffU)


///< RPU power up timer LUT - entry 7.  Define the duration in number of
///< main clock
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVUP_DELAY_LUT_ENTRY7_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVUP_DELAY_LUT_ENTRY7_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVUP_DELAY_LUT_ENTRY7_BF_MSK (0x00001FFF)
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVUP_DELAY_LUT_ENTRY7_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 1.  Define the duration in number
///< of main clock
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVDN_DELAY_LUT_ENTRY1_BF_OFF (16)
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVDN_DELAY_LUT_ENTRY1_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVDN_DELAY_LUT_ENTRY1_BF_MSK (0x1FFF0000)
#define PMA_TX_MSG_RPU_LUT_CFG_3_TXRPU_EVDN_DELAY_LUT_ENTRY1_BF_DEF (0x00100000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_LUT_CFG_4 register description at address offset 0x8c
  *
  * Register default value:        0x00100010
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_lut_cfg_4
  * Tx RPU LUT
  */

typedef union {
  struct {
    uint32_t TXRPU_EVDN_DELAY_LUT_ENTRY2 : 13;
    ///< RPU power down timer LUT - entry 2.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t TXRPU_EVDN_DELAY_LUT_ENTRY3 : 13;
    ///< RPU power down timer LUT - entry 3.  Define the duration in number
    ///< of main clock
    ///< AccessType="RW" BitOffset="16" ResetValue="0x10"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_lut_cfg_4_reg_t;

#define PMA_TX_MSG_RPU_LUT_CFG_4_DEFAULT (0x00100010U)
#define PMA_TX_MSG_RPU_LUT_CFG_4_RD_MASK (0x1fff1fffU)
#define PMA_TX_MSG_RPU_LUT_CFG_4_WR_MASK (0x1fff1fffU)


///< RPU power down timer LUT - entry 2.  Define the duration in number
///< of main clock
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY2_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY2_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY2_BF_MSK (0x00001FFF)
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY2_BF_DEF (0x00000010)

///< RPU power down timer LUT - entry 3.  Define the duration in number
///< of main clock
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY3_BF_OFF (16)
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY3_BF_WID (13)
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY3_BF_MSK (0x1FFF0000)
#define PMA_TX_MSG_RPU_LUT_CFG_4_TXRPU_EVDN_DELAY_LUT_ENTRY3_BF_DEF (0x00100000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVUP_DELAY_CFG_0 register description at address offset 0x90
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evup_delay_cfg_0
  * Tx power up event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q0 : 3;
    ///< RPU power up event S0Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q1 : 3;
    ///< RPU power up event S0Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q2 : 3;
    ///< RPU power up event S0Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q3 : 3;
    ///< RPU power up event S0Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q4 : 3;
    ///< RPU power up event S0Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q5 : 3;
    ///< RPU power up event S0Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q6 : 3;
    ///< RPU power up event S0Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S0Q7 : 3;
    ///< RPU power up event S0Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q0 : 3;
    ///< RPU power up event S1Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q1 : 3;
    ///< RPU power up event S1Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evup_delay_cfg_0_reg_t;

#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_DEFAULT (0x09249249U)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_RD_MASK (0x3fffffffU)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_WR_MASK (0x3fffffffU)


///< RPU power up event S0Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000007)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power up event S0Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_OFF ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_MSK (0x00000038)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000008)

///< RPU power up event S0Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_MSK (0x000001C0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000040)

///< RPU power up event S0Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_OFF ( 9)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_MSK (0x00000E00)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000200)

///< RPU power up event S0Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_OFF (12)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00007000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00001000)

///< RPU power up event S0Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_OFF (15)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00038000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00008000)

///< RPU power up event S0Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_OFF (18)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_MSK (0x001C0000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00040000)

///< RPU power up event S0Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_OFF (21)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_MSK (0x00E00000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00200000)

///< RPU power up event S1Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_OFF (24)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_MSK (0x07000000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q0_BF_DEF (0x01000000)

///< RPU power up event S1Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_OFF (27)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_MSK (0x38000000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_TXRPU_EVUP_DELAY_LUT_SEL_S1Q1_BF_DEF (0x08000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVUP_DELAY_CFG_1 register description at address offset 0x94
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evup_delay_cfg_1
  * Tx power up event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q2 : 3;
    ///< RPU power up event S1Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q3 : 3;
    ///< RPU power up event S1Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q4 : 3;
    ///< RPU power up event S1Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q5 : 3;
    ///< RPU power up event S1Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q6 : 3;
    ///< RPU power up event S1Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S1Q7 : 3;
    ///< RPU power up event S1Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q0 : 3;
    ///< RPU power up event S2Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q1 : 3;
    ///< RPU power up event S2Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q2 : 3;
    ///< RPU power up event S2Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q3 : 3;
    ///< RPU power up event S2Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evup_delay_cfg_1_reg_t;

#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_DEFAULT (0x09249249U)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_RD_MASK (0x3fffffffU)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_WR_MASK (0x3fffffffU)


///< RPU power up event S1Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00000007)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00000001)

///< RPU power up event S1Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_OFF ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_MSK (0x00000038)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00000008)

///< RPU power up event S1Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_MSK (0x000001C0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q4_BF_DEF (0x00000040)

///< RPU power up event S1Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_OFF ( 9)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_MSK (0x00000E00)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q5_BF_DEF (0x00000200)

///< RPU power up event S1Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_OFF (12)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_MSK (0x00007000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q6_BF_DEF (0x00001000)

///< RPU power up event S1Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_OFF (15)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00038000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00008000)

///< RPU power up event S2Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_OFF (18)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_MSK (0x001C0000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00040000)

///< RPU power up event S2Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_OFF (21)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_MSK (0x00E00000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q1_BF_DEF (0x00200000)

///< RPU power up event S2Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_OFF (24)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_MSK (0x07000000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q2_BF_DEF (0x01000000)

///< RPU power up event S2Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_OFF (27)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_MSK (0x38000000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_TXRPU_EVUP_DELAY_LUT_SEL_S2Q3_BF_DEF (0x08000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVUP_DELAY_CFG_2 register description at address offset 0x98
  *
  * Register default value:        0x09249249
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evup_delay_cfg_2
  * Tx power up event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q4 : 3;
    ///< RPU power up event S2Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q5 : 3;
    ///< RPU power up event S2Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q6 : 3;
    ///< RPU power up event S2Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S2Q7 : 3;
    ///< RPU power up event S2Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q0 : 3;
    ///< RPU power up event S3Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q1 : 3;
    ///< RPU power up event S3Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q2 : 3;
    ///< RPU power up event S3Q2 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q3 : 3;
    ///< RPU power up event S3Q3 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="21" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q4 : 3;
    ///< RPU power up event S3Q4 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q5 : 3;
    ///< RPU power up event S3Q5 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="27" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evup_delay_cfg_2_reg_t;

#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_DEFAULT (0x09249249U)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_RD_MASK (0x3fffffffU)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_WR_MASK (0x3fffffffU)


///< RPU power up event S2Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_MSK (0x00000007)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q4_BF_DEF (0x00000001)

///< RPU power up event S2Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_OFF ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_MSK (0x00000038)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q5_BF_DEF (0x00000008)

///< RPU power up event S2Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_MSK (0x000001C0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q6_BF_DEF (0x00000040)

///< RPU power up event S2Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_OFF ( 9)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_MSK (0x00000E00)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S2Q7_BF_DEF (0x00000200)

///< RPU power up event S3Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_OFF (12)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_MSK (0x00007000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q0_BF_DEF (0x00001000)

///< RPU power up event S3Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_OFF (15)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_MSK (0x00038000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q1_BF_DEF (0x00008000)

///< RPU power up event S3Q2 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_OFF (18)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_MSK (0x001C0000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q2_BF_DEF (0x00040000)

///< RPU power up event S3Q3 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_OFF (21)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_MSK (0x00E00000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q3_BF_DEF (0x00200000)

///< RPU power up event S3Q4 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_OFF (24)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_MSK (0x07000000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q4_BF_DEF (0x01000000)

///< RPU power up event S3Q5 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_OFF (27)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_MSK (0x38000000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_TXRPU_EVUP_DELAY_LUT_SEL_S3Q5_BF_DEF (0x08000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVUP_DELAY_CFG_3 register description at address offset 0x9c
  *
  * Register default value:        0x00001249
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evup_delay_cfg_3
  * Tx power up event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q6 : 3;
    ///< RPU power up event S3Q6 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S3Q7 : 3;
    ///< RPU power up event S3Q7 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU state
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S4Q0 : 3;
    ///< RPU power up event S4Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S4Q1 : 3;
    ///< RPU power up event S4Q1 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="9" ResetValue="0x1"
    uint32_t TXRPU_EVUP_DELAY_LUT_SEL_S5Q0 : 3;
    ///< RPU power up event S5Q0 time index.  Select the entry index from the
    ///< RPU power up LUT for the time duration.  Note: value 0 means disable
    ///< this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evup_delay_cfg_3_reg_t;

#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_DEFAULT (0x00001249U)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_RD_MASK (0x00007fffU)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_WR_MASK (0x00007fffU)


///< RPU power up event S3Q6 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_MSK (0x00000007)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q6_BF_DEF (0x00000001)

///< RPU power up event S3Q7 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU state
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_OFF ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_MSK (0x00000038)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S3Q7_BF_DEF (0x00000008)

///< RPU power up event S4Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_MSK (0x000001C0)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q0_BF_DEF (0x00000040)

///< RPU power up event S4Q1 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_OFF ( 9)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_MSK (0x00000E00)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S4Q1_BF_DEF (0x00000200)

///< RPU power up event S5Q0 time index.  Select the entry index from the
///< RPU power up LUT for the time duration.  Note: value 0 means disable
///< this RPU statestate
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_OFF (12)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_WID ( 3)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_MSK (0x00007000)
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_TXRPU_EVUP_DELAY_LUT_SEL_S5Q0_BF_DEF (0x00001000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVDN_DELAY_CFG_0 register description at address offset 0xa0
  *
  * Register default value:        0x15555555
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evdn_delay_cfg_0
  * Tx power down event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q0 : 2;
    ///< RPU power down event S0Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q1 : 2;
    ///< RPU power down event S0Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q2 : 2;
    ///< RPU power down event S0Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q3 : 2;
    ///< RPU power down event S0Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q4 : 2;
    ///< RPU power down event S0Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q5 : 2;
    ///< RPU power down event S0Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q6 : 2;
    ///< RPU power down event S0Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S0Q7 : 2;
    ///< RPU power down event S0Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q0 : 2;
    ///< RPU power down event S1Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q1 : 2;
    ///< RPU power down event S1Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q2 : 2;
    ///< RPU power down event S1Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q3 : 2;
    ///< RPU power down event S1Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q4 : 2;
    ///< RPU power down event S1Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q5 : 2;
    ///< RPU power down event S1Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q6 : 2;
    ///< RPU power down event S1Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evdn_delay_cfg_0_reg_t;

#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_DEFAULT (0x15555555U)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_RD_MASK (0x3fffffffU)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_WR_MASK (0x3fffffffU)


///< RPU power down event S0Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_MSK (0x00000003)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q0_BF_DEF (0x00000001)

///< RPU power down event S0Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_OFF ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_MSK (0x0000000C)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q1_BF_DEF (0x00000004)

///< RPU power down event S0Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_OFF ( 4)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_MSK (0x00000030)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q2_BF_DEF (0x00000010)

///< RPU power down event S0Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_MSK (0x000000C0)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q3_BF_DEF (0x00000040)

///< RPU power down event S0Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_OFF ( 8)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_MSK (0x00000300)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q4_BF_DEF (0x00000100)

///< RPU power down event S0Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_OFF (10)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_MSK (0x00000C00)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q5_BF_DEF (0x00000400)

///< RPU power down event S0Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_OFF (12)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_MSK (0x00003000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q6_BF_DEF (0x00001000)

///< RPU power down event S0Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_OFF (14)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_MSK (0x0000C000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S0Q7_BF_DEF (0x00004000)

///< RPU power down event S1Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_OFF (16)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_MSK (0x00030000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q0_BF_DEF (0x00010000)

///< RPU power down event S1Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_OFF (18)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_MSK (0x000C0000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q1_BF_DEF (0x00040000)

///< RPU power down event S1Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_OFF (20)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_MSK (0x00300000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q2_BF_DEF (0x00100000)

///< RPU power down event S1Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_OFF (22)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_MSK (0x00C00000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q3_BF_DEF (0x00400000)

///< RPU power down event S1Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_OFF (24)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_MSK (0x03000000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q4_BF_DEF (0x01000000)

///< RPU power down event S1Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_OFF (26)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_MSK (0x0C000000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q5_BF_DEF (0x04000000)

///< RPU power down event S1Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_OFF (28)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_MSK (0x30000000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_TXRPU_EVDN_DELAY_LUT_SEL_S1Q6_BF_DEF (0x10000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVDN_DELAY_CFG_1 register description at address offset 0xa4
  *
  * Register default value:        0x15555555
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evdn_delay_cfg_1
  * Tx power down event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S1Q7 : 2;
    ///< RPU power down event S1Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q0 : 2;
    ///< RPU power down event S2Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q1 : 2;
    ///< RPU power down event S2Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q2 : 2;
    ///< RPU power down event S2Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q3 : 2;
    ///< RPU power down event S2Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q4 : 2;
    ///< RPU power down event S2Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q5 : 2;
    ///< RPU power down event S2Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q6 : 2;
    ///< RPU power down event S2Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S2Q7 : 2;
    ///< RPU power down event S2Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q0 : 2;
    ///< RPU power down event S3Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q1 : 2;
    ///< RPU power down event S3Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q2 : 2;
    ///< RPU power down event S3Q2 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="22" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q3 : 2;
    ///< RPU power down event S3Q3 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q4 : 2;
    ///< RPU power down event S3Q4 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q5 : 2;
    ///< RPU power down event S3Q5 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evdn_delay_cfg_1_reg_t;

#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_DEFAULT (0x15555555U)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_RD_MASK (0x3fffffffU)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_WR_MASK (0x3fffffffU)


///< RPU power down event S1Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_MSK (0x00000003)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S1Q7_BF_DEF (0x00000001)

///< RPU power down event S2Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_OFF ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_MSK (0x0000000C)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q0_BF_DEF (0x00000004)

///< RPU power down event S2Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_OFF ( 4)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_MSK (0x00000030)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q1_BF_DEF (0x00000010)

///< RPU power down event S2Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_MSK (0x000000C0)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q2_BF_DEF (0x00000040)

///< RPU power down event S2Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_OFF ( 8)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_MSK (0x00000300)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q3_BF_DEF (0x00000100)

///< RPU power down event S2Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_OFF (10)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_MSK (0x00000C00)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q4_BF_DEF (0x00000400)

///< RPU power down event S2Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_OFF (12)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_MSK (0x00003000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q5_BF_DEF (0x00001000)

///< RPU power down event S2Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_OFF (14)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_MSK (0x0000C000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q6_BF_DEF (0x00004000)

///< RPU power down event S2Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_OFF (16)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_MSK (0x00030000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S2Q7_BF_DEF (0x00010000)

///< RPU power down event S3Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_OFF (18)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_MSK (0x000C0000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q0_BF_DEF (0x00040000)

///< RPU power down event S3Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_OFF (20)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_MSK (0x00300000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q1_BF_DEF (0x00100000)

///< RPU power down event S3Q2 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_OFF (22)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_MSK (0x00C00000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q2_BF_DEF (0x00400000)

///< RPU power down event S3Q3 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_OFF (24)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_MSK (0x03000000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q3_BF_DEF (0x01000000)

///< RPU power down event S3Q4 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_OFF (26)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_MSK (0x0C000000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q4_BF_DEF (0x04000000)

///< RPU power down event S3Q5 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_OFF (28)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_MSK (0x30000000)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_TXRPU_EVDN_DELAY_LUT_SEL_S3Q5_BF_DEF (0x10000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXRPU_EVDN_DELAY_CFG_2 register description at address offset 0xa8
  *
  * Register default value:        0x00000155
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txrpu_evdn_delay_cfg_2
  * Tx power down event config
  */

typedef union {
  struct {
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q6 : 2;
    ///< RPU power down event S3Q6 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S3Q7 : 2;
    ///< RPU power down event S3Q7 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S4Q0 : 2;
    ///< RPU power down event S4Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S4Q1 : 2;
    ///< RPU power down event S4Q1 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t TXRPU_EVDN_DELAY_LUT_SEL_S5Q0 : 2;
    ///< RPU power down event S5Q0 time index.  Select the entry index from
    ///< the RPU power down LUT for the time duration.  Note: value 0 means
    ///< disable this RPU statestate
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_rpu_evdn_delay_cfg_2_reg_t;

#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_DEFAULT (0x00000155U)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_RD_MASK (0x000003ffU)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_WR_MASK (0x000003ffU)


///< RPU power down event S3Q6 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_OFF ( 0)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_MSK (0x00000003)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q6_BF_DEF (0x00000001)

///< RPU power down event S3Q7 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU state
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_OFF ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_MSK (0x0000000C)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S3Q7_BF_DEF (0x00000004)

///< RPU power down event S4Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_OFF ( 4)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_MSK (0x00000030)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q0_BF_DEF (0x00000010)

///< RPU power down event S4Q1 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_OFF ( 6)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_MSK (0x000000C0)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S4Q1_BF_DEF (0x00000040)

///< RPU power down event S5Q0 time index.  Select the entry index from
///< the RPU power down LUT for the time duration.  Note: value 0 means
///< disable this RPU statestate
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_OFF ( 8)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_WID ( 2)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_MSK (0x00000300)
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_TXRPU_EVDN_DELAY_LUT_SEL_S5Q0_BF_DEF (0x00000100)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RPU_EVENT_CFG_0 register description at address offset 0xac
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rpu_event_cfg_0
  * TX  event config
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_EVENT0_DN_CFG : 2;
    ///< RPU break point 0 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT0_DN_PTR_Q : 3;
    ///< RPU break point 0 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT0_DN_PTR_S : 3;
    ///< RPU break point 0 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT0_UP_CFG : 2;
    ///< RPU break point 0 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT0_UP_PTR_Q : 3;
    ///< RPU break point 0 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT0_UP_PTR_S : 3;
    ///< RPU break point 0 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_rpu_event_cfg_0_reg_t;

#define PMA_TX_MGS_RPU_EVENT_CFG_0_DEFAULT (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_RD_MASK (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_WR_MASK (0x0000ffffU)


///< RPU break point 0 in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_CFG_BF_OFF ( 0)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_CFG_BF_MSK (0x00000003)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 0 in power down pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 0 in power down pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_S_BF_OFF ( 5)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 0 in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_CFG_BF_OFF ( 8)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_CFG_BF_MSK (0x00000300)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 0 in power up pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_Q_BF_OFF (10)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 0 in power up pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_S_BF_OFF (13)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TX_MGS_RPU_EVENT_CFG_0_TXRPUBRKPT_EVENT0_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RPU_EVENT_CFG_1 register description at address offset 0xb0
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rpu_event_cfg_1
  * TX  event config
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_EVENT1_DN_CFG : 2;
    ///< RPU break point 1 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT1_DN_PTR_Q : 3;
    ///< RPU break point 1 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT1_DN_PTR_S : 3;
    ///< RPU break point 1 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT1_UP_CFG : 2;
    ///< RPU break point 1 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT1_UP_PTR_Q : 3;
    ///< RPU break point 1 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT1_UP_PTR_S : 3;
    ///< RPU break point 1 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_rpu_event_cfg_1_reg_t;

#define PMA_TX_MGS_RPU_EVENT_CFG_1_DEFAULT (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_RD_MASK (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_WR_MASK (0x0000ffffU)


///< RPU break point 1 in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_CFG_BF_OFF ( 0)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_CFG_BF_MSK (0x00000003)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 1 in power down pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 1 in power down pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_S_BF_OFF ( 5)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 1 in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_CFG_BF_OFF ( 8)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_CFG_BF_MSK (0x00000300)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 1 in power up pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_Q_BF_OFF (10)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 1 in power up pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_S_BF_OFF (13)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TX_MGS_RPU_EVENT_CFG_1_TXRPUBRKPT_EVENT1_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RPU_EVENT_CFG_2 register description at address offset 0xb4
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rpu_event_cfg_2
  * TX  event config
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_EVENT2_DN_CFG : 2;
    ///< RPU break point 2 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT2_DN_PTR_Q : 3;
    ///< RPU break point 2 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT2_DN_PTR_S : 3;
    ///< RPU break point 2 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT2_UP_CFG : 2;
    ///< RPU break point 2 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT2_UP_PTR_Q : 3;
    ///< RPU break point 2 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT2_UP_PTR_S : 3;
    ///< RPU break point 2 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_rpu_event_cfg_2_reg_t;

#define PMA_TX_MGS_RPU_EVENT_CFG_2_DEFAULT (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_RD_MASK (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_WR_MASK (0x0000ffffU)


///< RPU break point 2 in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_CFG_BF_OFF ( 0)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_CFG_BF_MSK (0x00000003)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 2 in power down pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 2 in power down pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_S_BF_OFF ( 5)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 2 in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_CFG_BF_OFF ( 8)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_CFG_BF_MSK (0x00000300)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 2 in power up pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_Q_BF_OFF (10)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 2 in power up pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_S_BF_OFF (13)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TX_MGS_RPU_EVENT_CFG_2_TXRPUBRKPT_EVENT2_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RPU_EVENT_CFG_3 register description at address offset 0xb8
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rpu_event_cfg_3
  * TX  event config
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_EVENT3_DN_CFG : 2;
    ///< RPU break point 3 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT3_DN_PTR_Q : 3;
    ///< RPU break point 3 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT3_DN_PTR_S : 3;
    ///< RPU break point 3 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT3_UP_CFG : 2;
    ///< RPU break point 3 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT3_UP_PTR_Q : 3;
    ///< RPU break point 3 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT3_UP_PTR_S : 3;
    ///< RPU break point 3 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_rpu_event_cfg_3_reg_t;

#define PMA_TX_MGS_RPU_EVENT_CFG_3_DEFAULT (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_RD_MASK (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_WR_MASK (0x0000ffffU)


///< RPU break point 3 in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_CFG_BF_OFF ( 0)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_CFG_BF_MSK (0x00000003)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 3 in power down pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 3 in power down pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_S_BF_OFF ( 5)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 3 in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_CFG_BF_OFF ( 8)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_CFG_BF_MSK (0x00000300)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 3 in power up pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_Q_BF_OFF (10)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 3 in power up pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_S_BF_OFF (13)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TX_MGS_RPU_EVENT_CFG_3_TXRPUBRKPT_EVENT3_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RPU_EVENT_CFG_4 register description at address offset 0xbc
  *
  * Register default value:        0x0000FFFF
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rpu_event_cfg_4
  * TX  event config
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_EVENT4_DN_CFG : 2;
    ///< RPU break point 4 in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT4_DN_PTR_Q : 3;
    ///< RPU break point 4 in power down pointer q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT4_DN_PTR_S : 3;
    ///< RPU break point 4 in power down pointer s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT4_UP_CFG : 2;
    ///< RPU break point 4 in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXRPUBRKPT_EVENT4_UP_PTR_Q : 3;
    ///< RPU break point 4 in power up pointer q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x7"
    uint32_t TXRPUBRKPT_EVENT4_UP_PTR_S : 3;
    ///< RPU break point 4 in power up pointer s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x7"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_rpu_event_cfg_4_reg_t;

#define PMA_TX_MGS_RPU_EVENT_CFG_4_DEFAULT (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_RD_MASK (0x0000ffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_WR_MASK (0x0000ffffU)


///< RPU break point 4 in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_CFG_BF_OFF ( 0)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_CFG_BF_MSK (0x00000003)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_CFG_BF_DEF (0x00000003)

///< RPU break point 4 in power down pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_Q_BF_OFF ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_Q_BF_MSK (0x0000001C)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_Q_BF_DEF (0x0000001C)

///< RPU break point 4 in power down pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_S_BF_OFF ( 5)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_S_BF_MSK (0x000000E0)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_DN_PTR_S_BF_DEF (0x000000E0)

///< RPU break point 4 in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_CFG_BF_OFF ( 8)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_CFG_BF_MSK (0x00000300)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_CFG_BF_DEF (0x00000300)

///< RPU break point 4 in power up pointer q state
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_Q_BF_OFF (10)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_Q_BF_MSK (0x00001C00)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_Q_BF_DEF (0x00001C00)

///< RPU break point 4 in power up pointer s state
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_S_BF_OFF (13)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_S_BF_MSK (0x0000E000)
#define PMA_TX_MGS_RPU_EVENT_CFG_4_TXRPUBRKPT_EVENT4_UP_PTR_S_BF_DEF (0x0000E000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RPU_EVENT_CFG_5 register description at address offset 0xc0
  *
  * Register default value:        0x4F5B535F
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rpu_event_cfg_5
  * Tx RPU event config
  */

typedef union {
  struct {
    uint32_t TXRPUCTL_KEEPALIVE_DN_CFG : 2;
    ///< RPU timer for keepalive clock select in power down config
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t TXRPUCTL_KEEPALIVE_DN_PTR0_Q : 3;
    ///< RPU timer for keepalive clock select in power down pointer 0 q state
    ///< AccessType="RW" BitOffset="2" ResetValue="0x7"
    uint32_t TXRPUCTL_KEEPALIVE_DN_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power down pointer 0 s state
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t TXRPUCTL_KEEPALIVE_UP_CFG : 2;
    ///< RPU timer for keepalive clock select in power upconfig
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t TXRPUCTL_KEEPALIVE_UP_PTR0_Q : 3;
    ///< RPU timer for keepalive clock select in power up pointer 0 q state
    ///< AccessType="RW" BitOffset="10" ResetValue="0x4"
    uint32_t TXRPUCTL_KEEPALIVE_UP_PTR0_S : 3;
    ///< RPU timer for keepalive clock select in power up pointer 0 s state
    ///< AccessType="RW" BitOffset="13" ResetValue="0x2"
    uint32_t TXRPUCTL_TXWORDDIV_DN_CFG : 2;
    ///< RPU timer for txword div clockclock select in power down config
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t TXRPUCTL_TXWORDDIV_RST_DN_PTR0_Q : 3;
    ///< RPU timer for txword div clockclock select in power down pointer 0
    ///< q state
    ///< AccessType="RW" BitOffset="18" ResetValue="0x6"
    uint32_t TXRPUCTL_TXWORDDIV_RST_DN_PTR0_S : 3;
    ///< RPU timer for txword div clockclock select in power down pointer 0
    ///< s state
    ///< AccessType="RW" BitOffset="21" ResetValue="0x2"
    uint32_t TXRPUCTL_TXWORDDIV_UP_CFG : 2;
    ///< RPU timer for txword div clockclock select in power upconfig
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t TXRPUCTL_TXWORDDIV_RST_UP_PTR0_Q : 3;
    ///< RPU timer for txword div clockclock select in power up pointer 0 q
    ///< state
    ///< AccessType="RW" BitOffset="26" ResetValue="0x3"
    uint32_t TXRPUCTL_TXWORDDIV_RST_UP_PTR0_S : 3;
    ///< RPU timer for txword div clockclock select in power up pointer 0 s
    ///< state
    ///< AccessType="RW" BitOffset="29" ResetValue="0x2"
  } ;
  uint32_t value;
} pma_tx_mgs_rpu_event_cfg_5_reg_t;

#define PMA_TX_MGS_RPU_EVENT_CFG_5_DEFAULT (0x4f5b535fU)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_WR_MASK (0xffffffffU)


///< RPU timer for keepalive clock select in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_CFG_BF_OFF ( 0)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_CFG_BF_MSK (0x00000003)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_CFG_BF_DEF (0x00000003)

///< RPU timer for keepalive clock select in power down pointer 0 q state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_OFF ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_MSK (0x0000001C)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_Q_BF_DEF (0x0000001C)

///< RPU timer for keepalive clock select in power down pointer 0 s state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_S_BF_OFF ( 5)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_S_BF_MSK (0x000000E0)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_DN_PTR0_S_BF_DEF (0x00000040)

///< RPU timer for keepalive clock select in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_CFG_BF_OFF ( 8)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_CFG_BF_MSK (0x00000300)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_CFG_BF_DEF (0x00000300)

///< RPU timer for keepalive clock select in power up pointer 0 q state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_OFF (10)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_MSK (0x00001C00)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_Q_BF_DEF (0x00001000)

///< RPU timer for keepalive clock select in power up pointer 0 s state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_S_BF_OFF (13)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_S_BF_MSK (0x0000E000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_KEEPALIVE_UP_PTR0_S_BF_DEF (0x00004000)

///< RPU timer for txword div clockclock select in power down config
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_DN_CFG_BF_OFF (16)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_DN_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_DN_CFG_BF_MSK (0x00030000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_DN_CFG_BF_DEF (0x00030000)

///< RPU timer for txword div clockclock select in power down pointer 0
///< q state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_Q_BF_OFF (18)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_Q_BF_MSK (0x001C0000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_Q_BF_DEF (0x00180000)

///< RPU timer for txword div clockclock select in power down pointer 0
///< s state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_S_BF_OFF (21)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_S_BF_MSK (0x00E00000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_DN_PTR0_S_BF_DEF (0x00400000)

///< RPU timer for txword div clockclock select in power upconfig
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_UP_CFG_BF_OFF (24)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_UP_CFG_BF_WID ( 2)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_UP_CFG_BF_MSK (0x03000000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_UP_CFG_BF_DEF (0x03000000)

///< RPU timer for txword div clockclock select in power up pointer 0 q
///< state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_Q_BF_OFF (26)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_Q_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_Q_BF_MSK (0x1C000000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_Q_BF_DEF (0x0C000000)

///< RPU timer for txword div clockclock select in power up pointer 0 s
///< state
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_S_BF_OFF (29)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_S_BF_WID ( 3)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_S_BF_MSK (0xE0000000)
#define PMA_TX_MGS_RPU_EVENT_CFG_5_TXRPUCTL_TXWORDDIV_RST_UP_PTR0_S_BF_DEF (0x40000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CTRL_OUT_0 register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ctrl_out_0
  * Tx Control Output
  */

typedef union {
  struct {
    uint32_t TXDRV_C0_TRIM_OVREN : 1;
    ///< Ana Tx Driver C0 Trim Override Enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXDRV_C0_TRIM_OVR : 3;
    ///< Ana Tx Driver C0 Trim Override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXDRV_C0_TRIM : 3;
    ///< Ana Tx Driver C0 Trim
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXPD_TXDRV_DAT_B_OVREN : 1;
    ///< Ana Tx Driver Data Power Down Override Enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXPD_TXDRV_DAT_B_OVR : 1;
    ///< Ana Tx Driver Data Power Down Override (Acitve LOW)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXPD_TXDRV_DAT_B : 1;
    ///< Ana Tx Driver Data Power Down
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXDRV_DOZECM_EN_OVREN : 1;
    ///< Ana Tx Driver Doze Enable Override Enable
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TXDRV_DOZECM_EN_OVR : 1;
    ///< Ana Tx Driver Doze Enable Override
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t TXDRV_DOZECM_EN : 1;
    ///< Ana Tx Driver Doze Enable
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXBEACON_EN_OVREN : 1;
    ///< Tx Beacon Enable Override Enable to Ana
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TXBEACON_EN_OVR : 1;
    ///< Tx Beacon Enable Override  to Ana
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXDRV_TXDETRX_SLC_EN_OVREN : 1;
    ///< Ana Tx Driver Tx-detect-Rx Slice Enable Override Enable
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t TXDRV_TXDETRX_SLC_EN_OVR : 7;
    ///< Ana Tx Driver Tx-detect-Rx Slice Enable Override
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXDRV_TXDETRX_SLC_EN : 7;
    ///< Ana Tx Driver Tx-detect-Rx Slice Enable
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ctrl_out_0_reg_t;

#define PMA_TX_MGS_CTRL_OUT_0_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CTRL_OUT_0_RD_MASK (0x3fffffffU)
#define PMA_TX_MGS_CTRL_OUT_0_WR_MASK (0x3fffffffU)


///< Ana Tx Driver C0 Trim Override Enable
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVREN_BF_OFF ( 0)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVREN_BF_MSK (0x00000001)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVREN_BF_DEF (0x00000000)

///< Ana Tx Driver C0 Trim Override
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVR_BF_OFF ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVR_BF_WID ( 3)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVR_BF_MSK (0x0000000E)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_OVR_BF_DEF (0x00000000)

///< Ana Tx Driver C0 Trim
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_BF_OFF ( 4)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_BF_WID ( 3)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_BF_MSK (0x00000070)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_C0_TRIM_BF_DEF (0x00000000)

///< Ana Tx Driver Data Power Down Override Enable
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVREN_BF_OFF ( 7)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVREN_BF_MSK (0x00000080)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVREN_BF_DEF (0x00000000)

///< Ana Tx Driver Data Power Down Override (Acitve LOW)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVR_BF_OFF ( 8)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVR_BF_MSK (0x00000100)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_OVR_BF_DEF (0x00000000)

///< Ana Tx Driver Data Power Down
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_BF_OFF ( 9)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_BF_MSK (0x00000200)
#define PMA_TX_MGS_CTRL_OUT_0_TXPD_TXDRV_DAT_B_BF_DEF (0x00000000)

///< Ana Tx Driver Doze Enable Override Enable
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVREN_BF_OFF (10)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVREN_BF_MSK (0x00000400)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVREN_BF_DEF (0x00000000)

///< Ana Tx Driver Doze Enable Override
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVR_BF_OFF (11)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVR_BF_MSK (0x00000800)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_OVR_BF_DEF (0x00000000)

///< Ana Tx Driver Doze Enable
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_BF_OFF (12)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_BF_MSK (0x00001000)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_DOZECM_EN_BF_DEF (0x00000000)

///< Tx Beacon Enable Override Enable to Ana
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVREN_BF_OFF (13)
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVREN_BF_MSK (0x00002000)
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVREN_BF_DEF (0x00000000)

///< Tx Beacon Enable Override  to Ana
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVR_BF_OFF (14)
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVR_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVR_BF_MSK (0x00004000)
#define PMA_TX_MGS_CTRL_OUT_0_TXBEACON_EN_OVR_BF_DEF (0x00000000)

///< Ana Tx Driver Tx-detect-Rx Slice Enable Override Enable
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVREN_BF_OFF (15)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVREN_BF_MSK (0x00008000)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVREN_BF_DEF (0x00000000)

///< Ana Tx Driver Tx-detect-Rx Slice Enable Override
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVR_BF_OFF (16)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVR_BF_WID ( 7)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVR_BF_MSK (0x007F0000)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_OVR_BF_DEF (0x00000000)

///< Ana Tx Driver Tx-detect-Rx Slice Enable
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_BF_OFF (23)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_BF_WID ( 7)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_BF_MSK (0x3F800000)
#define PMA_TX_MGS_CTRL_OUT_0_TXDRV_TXDETRX_SLC_EN_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CTRL_OUT_1 register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ctrl_out_1
  * Tx Control Output
  */

typedef union {
  struct {
    uint32_t TXFFE_SPARE_OVREN : 1;
    ///< TxFFE spare enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXFFE_SPARE_OVR : 10;
    ///< TxFFE spare override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ctrl_out_1_reg_t;

#define PMA_TX_MGS_CTRL_OUT_1_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CTRL_OUT_1_RD_MASK (0x000007ffU)
#define PMA_TX_MGS_CTRL_OUT_1_WR_MASK (0x000007ffU)


///< TxFFE spare enable
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVREN_BF_OFF ( 0)
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVREN_BF_WID ( 1)
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVREN_BF_MSK (0x00000001)
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVREN_BF_DEF (0x00000000)

///< TxFFE spare override
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVR_BF_OFF ( 1)
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVR_BF_WID (10)
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVR_BF_MSK (0x000007FE)
#define PMA_TX_MGS_CTRL_OUT_1_TXFFE_SPARE_OVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_OUTPUT_PIN_OVERRIDE register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_output_pin_override
  * Tx output pin override
  */

typedef union {
  struct {
    uint32_t TXPIN_STATUS_LOCOVREN : 1;
    ///< o_tx_status_l[x]_a output pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXPIN_STATUS_LOCOVR : 1;
    ///< o_tx_status_l[x]_a output pin override
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_output_pin_ovrd_reg_t;

#define PMA_TX_MGS_OUTPUT_PIN_OVRD_DEFAULT (0x00000000U)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_RD_MASK (0x00000003U)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_WR_MASK (0x00000003U)


///< o_tx_status_l[x]_a output pin override enable
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVREN_BF_OFF ( 0)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVREN_BF_DEF (0x00000000)

///< o_tx_status_l[x]_a output pin override
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVR_BF_OFF ( 1)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVR_BF_WID ( 1)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVR_BF_MSK (0x00000002)
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_TXPIN_STAT_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_OUTPUT_PIN_PREOVERRIDE register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_output_pin_preoverride
  * Tx output pin pre-override value
  */

typedef union {
  struct {
    uint32_t TXPIN_STATUS_LOC : 1;
    ///< o_tx_status_l[x]_a output pin pre-override
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_output_pin_preovrd_reg_t;

#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_DEFAULT (0x00000000U)
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_RD_MASK (0x00000001U)
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_WR_MASK (0x00000000U)


///< o_tx_status_l[x]_a output pin pre-override
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_TXPIN_STAT_LOC_BF_OFF ( 0)
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_TXPIN_STAT_LOC_BF_WID ( 1)
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_TXPIN_STAT_LOC_BF_MSK (0x00000001)
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_TXPIN_STAT_LOC_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_BRKPT_CTRL register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_brkpt_ctrl
  * Tx break point control
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_EN : 1;
    ///< RPU break point enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXCALMASTERBRKPT_EN : 1;
    ///< CalMaster break point enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXRATEWIDTHBRKPT_EN : 5;
    ///< RateWidth break point enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TXFSM_RST_NOTIFY_EN : 1;
    ///< Main FSM reset notify enable
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXFSM_RST_BRKPT_EN_MASK : 1;
    ///< Main FSM reset break point enable.  This bit can be enable only when
    ///< txfsm_rst_notify_en is HIGH
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_brkpt_ctrl_reg_t;

#define PMA_TX_MGS_BRKPT_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MGS_BRKPT_CTRL_RD_MASK (0x000001ffU)
#define PMA_TX_MGS_BRKPT_CTRL_WR_MASK (0x000001ffU)


///< RPU break point enable
#define PMA_TX_MGS_BRKPT_CTRL_TXRPUBRKPT_EN_BF_OFF ( 0)
#define PMA_TX_MGS_BRKPT_CTRL_TXRPUBRKPT_EN_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CTRL_TXRPUBRKPT_EN_BF_MSK (0x00000001)
#define PMA_TX_MGS_BRKPT_CTRL_TXRPUBRKPT_EN_BF_DEF (0x00000000)

///< CalMaster break point enable
#define PMA_TX_MGS_BRKPT_CTRL_TXCALMASTERBRKPT_EN_BF_OFF ( 1)
#define PMA_TX_MGS_BRKPT_CTRL_TXCALMASTERBRKPT_EN_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CTRL_TXCALMASTERBRKPT_EN_BF_MSK (0x00000002)
#define PMA_TX_MGS_BRKPT_CTRL_TXCALMASTERBRKPT_EN_BF_DEF (0x00000000)

///< RateWidth break point enable
#define PMA_TX_MGS_BRKPT_CTRL_TXRATEWIDTHBRKPT_EN_BF_OFF ( 2)
#define PMA_TX_MGS_BRKPT_CTRL_TXRATEWIDTHBRKPT_EN_BF_WID ( 5)
#define PMA_TX_MGS_BRKPT_CTRL_TXRATEWIDTHBRKPT_EN_BF_MSK (0x0000007C)
#define PMA_TX_MGS_BRKPT_CTRL_TXRATEWIDTHBRKPT_EN_BF_DEF (0x00000000)

///< Main FSM reset notify enable
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_NOTIFY_EN_BF_OFF ( 7)
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_NOTIFY_EN_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_NOTIFY_EN_BF_MSK (0x00000080)
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_NOTIFY_EN_BF_DEF (0x00000000)

///< Main FSM reset break point enable.  This bit can be enable only when
///< txfsm_rst_notify_en is HIGH
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_BRKPT_EN_MASK_BF_OFF ( 8)
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_BRKPT_EN_MASK_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_BRKPT_EN_MASK_BF_MSK (0x00000100)
#define PMA_TX_MGS_BRKPT_CTRL_TXFSM_RST_BRKPT_EN_MASK_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_BRKPT_STATUS register description at address offset 0xd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_brkpt_status
  * Tx break point control status
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_HIT : 1;
    ///< RPU break point status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXCALMASTERBRKPT_HIT : 1;
    ///< CalMaster break point status
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXRATEWIDTHBRKPT_HIT : 1;
    ///< RateWidth break point status
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXFSM_RST_NOTIFY_HIT : 1;
    ///< Main FSM reset notify status
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_brkpt_stat_reg_t;

#define PMA_TX_MGS_BRKPT_STAT_DEFAULT (0x00000000U)
#define PMA_TX_MGS_BRKPT_STAT_RD_MASK (0x0000000fU)
#define PMA_TX_MGS_BRKPT_STAT_WR_MASK (0x00000000U)


///< RPU break point status
#define PMA_TX_MGS_BRKPT_STAT_TXRPUBRKPT_HIT_BF_OFF ( 0)
#define PMA_TX_MGS_BRKPT_STAT_TXRPUBRKPT_HIT_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_STAT_TXRPUBRKPT_HIT_BF_MSK (0x00000001)
#define PMA_TX_MGS_BRKPT_STAT_TXRPUBRKPT_HIT_BF_DEF (0x00000000)

///< CalMaster break point status
#define PMA_TX_MGS_BRKPT_STAT_TXCALMASTERBRKPT_HIT_BF_OFF ( 1)
#define PMA_TX_MGS_BRKPT_STAT_TXCALMASTERBRKPT_HIT_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_STAT_TXCALMASTERBRKPT_HIT_BF_MSK (0x00000002)
#define PMA_TX_MGS_BRKPT_STAT_TXCALMASTERBRKPT_HIT_BF_DEF (0x00000000)

///< RateWidth break point status
#define PMA_TX_MGS_BRKPT_STAT_TXRATEWIDTHBRKPT_HIT_BF_OFF ( 2)
#define PMA_TX_MGS_BRKPT_STAT_TXRATEWIDTHBRKPT_HIT_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_STAT_TXRATEWIDTHBRKPT_HIT_BF_MSK (0x00000004)
#define PMA_TX_MGS_BRKPT_STAT_TXRATEWIDTHBRKPT_HIT_BF_DEF (0x00000000)

///< Main FSM reset notify status
#define PMA_TX_MGS_BRKPT_STAT_TXFSM_RST_NOTIFY_HIT_BF_OFF ( 3)
#define PMA_TX_MGS_BRKPT_STAT_TXFSM_RST_NOTIFY_HIT_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_STAT_TXFSM_RST_NOTIFY_HIT_BF_MSK (0x00000008)
#define PMA_TX_MGS_BRKPT_STAT_TXFSM_RST_NOTIFY_HIT_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_BRKPT_CLEAR register description at address offset 0xdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_brkpt_clear
  * Tx break point control clear
  */

typedef union {
  struct {
    uint32_t TXRPUBRKPT_HIT_CLR : 1;
    ///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXCALMASTERBRKPT_HIT_CLR : 1;
    ///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="1" ResetValue="0x0"
    uint32_t TXRATEWIDTHBRKPT_HIT_CLR : 1;
    ///< RateWidth break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
    ///< the FSM from the break point.  When the break point is cleared, this
    ///< register value will return back to 1'b0
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t TXFSM_RST_NOTIFY_HIT_CLR : 1;
    ///< Main FSM reset notify break point clear/resume.  Self-clear bit.
    ///< Write 1 to clear/resume the FSM from the break point when txfsm_rst_brkpt_en_mask
    ///< is HIGH.  When the break point is cleared, this register value will
    ///< return back to 1'b0
    ///< AccessType="RW/V" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_brkpt_clr_reg_t;

#define PMA_TX_MGS_BRKPT_CLR_DEFAULT (0x00000000U)
#define PMA_TX_MGS_BRKPT_CLR_RD_MASK (0x0000000fU)
#define PMA_TX_MGS_BRKPT_CLR_WR_MASK (0x0000000fU)


///< RPU break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_TX_MGS_BRKPT_CLR_TXRPUBRKPT_HIT_CLR_BF_OFF ( 0)
#define PMA_TX_MGS_BRKPT_CLR_TXRPUBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CLR_TXRPUBRKPT_HIT_CLR_BF_MSK (0x00000001)
#define PMA_TX_MGS_BRKPT_CLR_TXRPUBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< CalMaster break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_TX_MGS_BRKPT_CLR_TXCALMASTERBRKPT_HIT_CLR_BF_OFF ( 1)
#define PMA_TX_MGS_BRKPT_CLR_TXCALMASTERBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CLR_TXCALMASTERBRKPT_HIT_CLR_BF_MSK (0x00000002)
#define PMA_TX_MGS_BRKPT_CLR_TXCALMASTERBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< RateWidth break point clear/resume.  Self-clear bit.  Write 1 to clear/resume
///< the FSM from the break point.  When the break point is cleared, this
///< register value will return back to 1'b0
#define PMA_TX_MGS_BRKPT_CLR_TXRATEWIDTHBRKPT_HIT_CLR_BF_OFF ( 2)
#define PMA_TX_MGS_BRKPT_CLR_TXRATEWIDTHBRKPT_HIT_CLR_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CLR_TXRATEWIDTHBRKPT_HIT_CLR_BF_MSK (0x00000004)
#define PMA_TX_MGS_BRKPT_CLR_TXRATEWIDTHBRKPT_HIT_CLR_BF_DEF (0x00000000)

///< Main FSM reset notify break point clear/resume.  Self-clear bit.
///< Write 1 to clear/resume the FSM from the break point when txfsm_rst_brkpt_en_mask
///< is HIGH.  When the break point is cleared, this register value will
///< return back to 1'b0
#define PMA_TX_MGS_BRKPT_CLR_TXFSM_RST_NOTIFY_HIT_CLR_BF_OFF ( 3)
#define PMA_TX_MGS_BRKPT_CLR_TXFSM_RST_NOTIFY_HIT_CLR_BF_WID ( 1)
#define PMA_TX_MGS_BRKPT_CLR_TXFSM_RST_NOTIFY_HIT_CLR_BF_MSK (0x00000008)
#define PMA_TX_MGS_BRKPT_CLR_TXFSM_RST_NOTIFY_HIT_CLR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_DATAPATH_STATUS register description at address offset 0xe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_datapath_status
  * Tx Datapath Status
  */

typedef union {
  struct {
    uint32_t TXFIFO_MON_EMPTY_FLAG_COUNT : 3;
    ///< Tx Datapath Phase FIFO underflow counter. To monitor how many times
    ///< does the Phase FIFO went into underflow state
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXFIFO_MON_FIFO_EMPTY : 1;
    ///< Tx Datapath Phase FIFO underflow
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t TXFIFO_MON_FULL_FLAG_COUNT : 3;
    ///< Tx Datapath Phase FIFO overrflow counter
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t TXFIFO_MON_FIFO_FULL : 1;
    ///< Tx Datapath Phase FIFO overflow counter. To monitor how many times
    ///< does the Phase FIFO went into overflow state
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_datapath_stat_reg_t;

#define PMA_TX_MGS_DATAPATH_STAT_DEFAULT (0x00000000U)
#define PMA_TX_MGS_DATAPATH_STAT_RD_MASK (0x000000ffU)
#define PMA_TX_MGS_DATAPATH_STAT_WR_MASK (0x00000000U)


///< Tx Datapath Phase FIFO underflow counter. To monitor how many times
///< does the Phase FIFO went into underflow state
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_EMPTY_FLAG_CNT_BF_OFF ( 0)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_EMPTY_FLAG_CNT_BF_WID ( 3)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_EMPTY_FLAG_CNT_BF_MSK (0x00000007)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_EMPTY_FLAG_CNT_BF_DEF (0x00000000)

///< Tx Datapath Phase FIFO underflow
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_EMPTY_BF_OFF ( 3)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_EMPTY_BF_WID ( 1)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_EMPTY_BF_MSK (0x00000008)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_EMPTY_BF_DEF (0x00000000)

///< Tx Datapath Phase FIFO overrflow counter
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FULL_FLAG_CNT_BF_OFF ( 4)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FULL_FLAG_CNT_BF_WID ( 3)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FULL_FLAG_CNT_BF_MSK (0x00000070)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FULL_FLAG_CNT_BF_DEF (0x00000000)

///< Tx Datapath Phase FIFO overflow counter. To monitor how many times
///< does the Phase FIFO went into overflow state
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_FULL_BF_OFF ( 7)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_FULL_BF_WID ( 1)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_FULL_BF_MSK (0x00000080)
#define PMA_TX_MGS_DATAPATH_STAT_TXFIFO_MON_FIFO_FULL_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CKM_CTRL_0 register description at address offset 0xe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ckm_ctrl_0
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_AVG_EN : 1;
    ///< Clock measurment averager enable.  When this is 1, the clock measurment
    ///< will an average of 4 measurments.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_CLK_EN : 1;
    ///< Clock measurment clock enable.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_CONTINUOUS : 1;
    ///< Clock measurment continous mode.  When this is set.  The measurment
    ///< block will continue take the clock measurment, until ckm_clk_en set
    ///< to 0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_EN : 1;
    ///< Clock measurment in digital domain.  Perform the clock measuement
    ///< that the clocks are in the digital domain. Always set to 1.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t CKM_DIG_MEAS_ERR_CLR : 1;
    ///< Clock measurment error clear.  To clear the error status
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t CKM_EN : 1;
    ///< Clock measurment enable.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_MEAS_CK_SEL : 2;
    ///< Clock measurment input clock select.
    ///< Selection TBD
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ckm_ctrl_0_reg_t;

#define PMA_TX_MGS_CKM_CTRL_0_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CKM_CTRL_0_RD_MASK (0x000000ffU)
#define PMA_TX_MGS_CKM_CTRL_0_WR_MASK (0x000000ffU)


///< Clock measurment averager enable.  When this is 1, the clock measurment
///< will an average of 4 measurments.
#define PMA_TX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_OFF ( 0)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_MSK (0x00000001)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_AVG_EN_BF_DEF (0x00000000)

///< Clock measurment clock enable.
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_OFF ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_MSK (0x00000002)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CLK_EN_BF_DEF (0x00000000)

///< Clock measurment continous mode.  When this is set.  The measurment
///< block will continue take the clock measurment, until ckm_clk_en set
///< to 0
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_OFF ( 2)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_MSK (0x00000004)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_CONTINUOUS_BF_DEF (0x00000000)

///< Clock measurment in digital domain.  Perform the clock measuement
///< that the clocks are in the digital domain. Always set to 1.
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_OFF ( 3)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_MSK (0x00000008)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_EN_BF_DEF (0x00000000)

///< Clock measurment error clear.  To clear the error status
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_OFF ( 4)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_MSK (0x00000010)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_DIG_MEAS_ERR_CLR_BF_DEF (0x00000000)

///< Clock measurment enable.
#define PMA_TX_MGS_CKM_CTRL_0_CKM_EN_BF_OFF ( 5)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_EN_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_EN_BF_MSK (0x00000020)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_EN_BF_DEF (0x00000000)

///< Clock measurment input clock select.
///< Selection TBD
#define PMA_TX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_OFF ( 6)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_WID ( 2)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_MSK (0x000000C0)
#define PMA_TX_MGS_CKM_CTRL_0_CKM_MEAS_CK_SEL_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CKM_CTRL_1 register description at address offset 0xe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ckm_ctrl_1
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_RESULT_CLR : 1;
    ///< Clock measurment clear.  Set this to 1 to clear all the measurment
    ///< history
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_START : 1;
    ///< Clock measurment start.  To start the clock measurment.  All clock
    ///< measurment configuration must be set prior to this register is set
    ///< to 1
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_REF_CK_DIV_RATIO : 3;
    ///< Clock measurment sample clock divider.
    ///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t CKM_WDT_INTERVAL : 2;
    ///< Clock measurment watch dog timer interval.  Time before report the
    ///< block is not able to take any clock measumrent.  For example, the
    ///< measured clock is not toggled
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CKM_WIN_THR_REF : 25;
    ///< Clock measurment window threshold
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_ckm_ctrl_1_reg_t;

#define PMA_TX_MGS_CKM_CTRL_1_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CKM_CTRL_1_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_CKM_CTRL_1_WR_MASK (0xffffffffU)


///< Clock measurment clear.  Set this to 1 to clear all the measurment
///< history
#define PMA_TX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_OFF ( 0)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_MSK (0x00000001)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_RSLT_CLR_BF_DEF (0x00000000)

///< Clock measurment start.  To start the clock measurment.  All clock
///< measurment configuration must be set prior to this register is set
///< to 1
#define PMA_TX_MGS_CKM_CTRL_1_CKM_START_BF_OFF ( 1)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_START_BF_WID ( 1)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_START_BF_MSK (0x00000002)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_START_BF_DEF (0x00000000)

///< Clock measurment sample clock divider.
///< Clock divider ration = 2 ^ cmnckm_ref_ck_div_ratio
#define PMA_TX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_OFF ( 2)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_WID ( 3)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_MSK (0x0000001C)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_REF_CK_DIV_RATIO_BF_DEF (0x00000000)

///< Clock measurment watch dog timer interval.  Time before report the
///< block is not able to take any clock measumrent.  For example, the
///< measured clock is not toggled
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_OFF ( 5)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_WID ( 2)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_MSK (0x00000060)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WDT_INTERVAL_BF_DEF (0x00000000)

///< Clock measurment window threshold
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_OFF ( 7)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_WID (25)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_MSK (0xFFFFFF80)
#define PMA_TX_MGS_CKM_CTRL_1_CKM_WIN_THR_REF_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CKM_CTRL_2 register description at address offset 0xec
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ckm_ctrl_2
  * Clock Measurment Ctrl
  */

typedef union {
  struct {
    uint32_t CKM_MAX_THR : 25;
    ///< Clock measurment windows
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ckm_ctrl_2_reg_t;

#define PMA_TX_MGS_CKM_CTRL_2_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CKM_CTRL_2_RD_MASK (0x01ffffffU)
#define PMA_TX_MGS_CKM_CTRL_2_WR_MASK (0x01ffffffU)


///< Clock measurment windows
#define PMA_TX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_OFF ( 0)
#define PMA_TX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_WID (25)
#define PMA_TX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_MSK (0x01FFFFFF)
#define PMA_TX_MGS_CKM_CTRL_2_CKM_MAX_THR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_CKM_STATUS register description at address offset 0xf0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ckm_status
  * Clock Measurment Status
  */

typedef union {
  struct {
    uint32_t CKM_DIG_MEAS_ERR : 1;
    ///< CKM error status.  This signal will be asserted to HIGH, if the measured
    ///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
    ///< is HIGH
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t CKM_RESULT_MEAS : 25;
    ///< Measured clock result.   This value represents how many measured clock
    ///< has counted during measuring window.  When Averager is OFF, this value
    ///< in this register represents the instantanous result from the last
    ///< run.  If Averager is ON.  This value from this register represents
    ///< the average value from the last 4 measured result.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CKM_STATUS : 1;
    ///< This is a status indicates the CKM is in the progress taking clock
    ///< clock meaurement.
    ///< AccessType="RO/V" BitOffset="26" ResetValue="0x0"
    uint32_t CKM_VALID_MEAS : 1;
    ///< This indicates the measured result (ckm_result_meas) is valid to be
    ///< read
    ///< AccessType="RO/V" BitOffset="27" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_mgs_ckm_stat_reg_t;

#define PMA_TX_MGS_CKM_STAT_DEFAULT (0x00000000U)
#define PMA_TX_MGS_CKM_STAT_RD_MASK (0x0fffffffU)
#define PMA_TX_MGS_CKM_STAT_WR_MASK (0x00000000U)


///< CKM error status.  This signal will be asserted to HIGH, if the measured
///< counter is overflow.  This signal will remain HIGH until laneckm_dig_masur_err_clr
///< is HIGH
#define PMA_TX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_OFF ( 0)
#define PMA_TX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_WID ( 1)
#define PMA_TX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_MSK (0x00000001)
#define PMA_TX_MGS_CKM_STAT_CKM_DIG_MEAS_ERR_BF_DEF (0x00000000)

///< Measured clock result.   This value represents how many measured clock
///< has counted during measuring window.  When Averager is OFF, this value
///< in this register represents the instantanous result from the last
///< run.  If Averager is ON.  This value from this register represents
///< the average value from the last 4 measured result.
#define PMA_TX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_OFF ( 1)
#define PMA_TX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_WID (25)
#define PMA_TX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_MSK (0x03FFFFFE)
#define PMA_TX_MGS_CKM_STAT_CKM_RSLT_MEAS_BF_DEF (0x00000000)

///< This is a status indicates the CKM is in the progress taking clock
///< clock meaurement.
#define PMA_TX_MGS_CKM_STAT_CKM_STAT_BF_OFF (26)
#define PMA_TX_MGS_CKM_STAT_CKM_STAT_BF_WID ( 1)
#define PMA_TX_MGS_CKM_STAT_CKM_STAT_BF_MSK (0x04000000)
#define PMA_TX_MGS_CKM_STAT_CKM_STAT_BF_DEF (0x00000000)

///< This indicates the measured result (ckm_result_meas) is valid to be
///< read
#define PMA_TX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_OFF (27)
#define PMA_TX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_WID ( 1)
#define PMA_TX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_MSK (0x08000000)
#define PMA_TX_MGS_CKM_STAT_CKM_VALID_MEAS_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORD_CLK_CTRL register description at address offset 0xf4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txword_clk_ctrl
  * TX word divider control
  */

typedef union {
  struct {
    uint32_t TXWORDDIV_LOCOVREN : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXWORDDIV_RST_B_A_LOCOVR : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txword_clk_ctrl_reg_t;

#define PMA_TX_MSG_TXWORD_CLK_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_RD_MASK (0x00000003U)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_WR_MASK (0x00000003U)


#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_LOCOVREN_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_LOCOVREN_BF_WID ( 1)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_LOCOVREN_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_LOCOVREN_BF_DEF (0x00000000)

#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_RST_B_A_LOCOVR_BF_OFF ( 1)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_RST_B_A_LOCOVR_BF_WID ( 1)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_RST_B_A_LOCOVR_BF_MSK (0x00000002)
#define PMA_TX_MSG_TXWORD_CLK_CTRL_TXWORDDIV_RST_B_A_LOCOVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORD_CLK_OBS register description at address offset 0xf8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txword_clk_obs
  * TX word divider observability
  */

typedef union {
  struct {
    uint32_t TXWORDDIV_RST_B_A_LOC : 1;
    ///< ---
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txword_clk_obs_reg_t;

#define PMA_TX_MSG_TXWORD_CLK_OBS_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORD_CLK_OBS_RD_MASK (0x00000001U)
#define PMA_TX_MSG_TXWORD_CLK_OBS_WR_MASK (0x00000000U)


#define PMA_TX_MSG_TXWORD_CLK_OBS_TXWORDDIV_RST_B_A_LOC_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORD_CLK_OBS_TXWORDDIV_RST_B_A_LOC_BF_WID ( 1)
#define PMA_TX_MSG_TXWORD_CLK_OBS_TXWORDDIV_RST_B_A_LOC_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXWORD_CLK_OBS_TXWORDDIV_RST_B_A_LOC_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXELECIDLE_PIN_OVERRIDE register description at address offset 0xfc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txelecidle_pin_override
  * Tx ElecIdle Override
  */

typedef union {
  struct {
    uint32_t TXELECIDLE_OVREN : 1;
    ///< Tx Electrical Idle (Txelecidle) pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t TXELECIDLE_OVR : 4;
    ///< Tx Electrical Idle (Txelecidle) pin override
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txelecidle_pin_ovrd_reg_t;

#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_RD_MASK (0x000000f1U)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_WR_MASK (0x000000f1U)


///< Tx Electrical Idle (Txelecidle) pin override enable
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVREN_BF_OFF ( 0)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVREN_BF_WID ( 1)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVREN_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVREN_BF_DEF (0x00000000)

///< Tx Electrical Idle (Txelecidle) pin override
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVR_BF_OFF ( 4)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVR_BF_WID ( 4)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVR_BF_MSK (0x000000F0)
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_TXELECIDLE_OVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXDRV_TXFFE_COEFF_PIN_OVERRIDE_0 register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txdrv_txffe_coeff_pin_override_0
  * TxFFE Coefficient Pin Overrice
  */

typedef union {
  struct {
    uint32_t TXDRV_TXFFE_COEFF_OVREN : 1;
    ///< Tx Drive TxFFE coefficient pin override enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t TXDRV_TXFFE_COEFF_CM3_OVR : 6;
    ///< Tx Drive TxFFE coefficient CM3 pin override
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t TXDRV_TXFFE_COEFF_CM2_OVR : 7;
    ///< Tx Drive TxFFE coefficient CM2 pin override
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t TXDRV_TXFFE_COEFF_CM1_OVR : 7;
    ///< Tx Drive TxFFE coefficient CM1 pin override
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txdrv_txffe_coeff_pin_ovrd_0_reg_t;

#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_RD_MASK (0x7f07f3f1U)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_WR_MASK (0x7f07f3f1U)


///< Tx Drive TxFFE coefficient pin override enable
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_OVREN_BF_OFF ( 0)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_OVREN_BF_WID ( 1)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_OVREN_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_OVREN_BF_DEF (0x00000000)

///< Tx Drive TxFFE coefficient CM3 pin override
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM3_OVR_BF_OFF ( 4)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM3_OVR_BF_WID ( 6)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM3_OVR_BF_MSK (0x000003F0)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM3_OVR_BF_DEF (0x00000000)

///< Tx Drive TxFFE coefficient CM2 pin override
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM2_OVR_BF_OFF (12)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM2_OVR_BF_WID ( 7)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM2_OVR_BF_MSK (0x0007F000)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM2_OVR_BF_DEF (0x00000000)

///< Tx Drive TxFFE coefficient CM1 pin override
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM1_OVR_BF_OFF (24)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM1_OVR_BF_WID ( 7)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM1_OVR_BF_MSK (0x7F000000)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_TXDRV_TXFFE_COEFF_CM1_OVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXDRV_TXFFE_COEFF_PIN_OVERRIDE_1 register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txdrv_txffe_coeff_pin_override_1
  * TxFFE Coefficient Pin Overrice
  */

typedef union {
  struct {
    uint32_t TXDRV_TXFFE_COEFF_C0_OVR : 7;
    ///< Tx Drive TxFFE coefficient C0 pin override
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t TXDRV_TXFFE_COEFF_CP1_OVR : 7;
    ///< Tx Drive TxFFE coefficient CP1 pin override
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txdrv_txffe_coeff_pin_ovrd_1_reg_t;

#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_RD_MASK (0x00007f7fU)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_WR_MASK (0x00007f7fU)


///< Tx Drive TxFFE coefficient C0 pin override
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_C0_OVR_BF_OFF ( 0)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_C0_OVR_BF_WID ( 7)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_C0_OVR_BF_MSK (0x0000007F)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_C0_OVR_BF_DEF (0x00000000)

///< Tx Drive TxFFE coefficient CP1 pin override
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_CP1_OVR_BF_OFF ( 8)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_CP1_OVR_BF_WID ( 7)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_CP1_OVR_BF_MSK (0x00007F00)
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_TXDRV_TXFFE_COEFF_CP1_OVR_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_CFG_0 register description at address offset 0x3f0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_cfg_0
  * Tx Bist Config
  */

typedef union {
  struct {
    uint32_t TXBIST_BITERROR_EN : 1;
    ///< TxBist Bit Error Insertion enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXBIST_RXBISTERR_EN : 1;
    ///< TxBist Bit error feedback from Rx
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t TXBIST_UDP_SIZE : 9;
    ///< TxBist Bit UDP data size. It should be at least equal to the TX parallel
    ///< word width.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXBIST_EN : 1;
    ///< TxBist enable
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TXBIST_MODESEL : 4;
    ///< TxBist mode select
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TXBIST_OOBMODE : 2;
    ///< TxBist OOB mode select
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_bist_cfg_0_reg_t;

#define PMA_TX_MSG_BIST_CFG_0_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_CFG_0_RD_MASK (0x000ffff3U)
#define PMA_TX_MSG_BIST_CFG_0_WR_MASK (0x000ffff3U)


///< TxBist Bit Error Insertion enable
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_BITERR_EN_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_BITERR_EN_BF_WID ( 1)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_BITERR_EN_BF_MSK (0x00000001)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_BITERR_EN_BF_DEF (0x00000000)

///< TxBist Bit error feedback from Rx
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_RXBISTERR_EN_BF_OFF ( 1)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_RXBISTERR_EN_BF_WID ( 1)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_RXBISTERR_EN_BF_MSK (0x00000002)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_RXBISTERR_EN_BF_DEF (0x00000000)

///< TxBist Bit UDP data size. It should be at least equal to the TX parallel
///< word width.
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_UDP_SIZE_BF_OFF ( 4)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_UDP_SIZE_BF_WID ( 9)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_UDP_SIZE_BF_MSK (0x00001FF0)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_UDP_SIZE_BF_DEF (0x00000000)

///< TxBist enable
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_EN_BF_OFF (13)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_EN_BF_WID ( 1)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_EN_BF_MSK (0x00002000)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_EN_BF_DEF (0x00000000)

///< TxBist mode select
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_MODESEL_BF_OFF (14)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_MODESEL_BF_WID ( 4)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_MODESEL_BF_MSK (0x0003C000)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_MODESEL_BF_DEF (0x00000000)

///< TxBist OOB mode select
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_OOBMODE_BF_OFF (18)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_OOBMODE_BF_WID ( 2)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_OOBMODE_BF_MSK (0x000C0000)
#define PMA_TX_MSG_BIST_CFG_0_TXBIST_OOBMODE_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_CFG_1 register description at address offset 0x3f4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_cfg_1
  * Tx Bist Config
  */

typedef union {
  struct {
    uint32_t TXBIST_OOBTBURST : 8;
    ///< TxBist OOB Burst time (num of word clocks)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXBIST_OOBTCOMRSTINIT : 8;
    ///< TxBist Comreset/Cominit idle time (num of word clock)s
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXBIST_OOBTCOMSAS : 8;
    ///< TxBist Comsas idle time (num of word clocks)
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXBIST_OOBTCOMWAKE : 8;
    ///< TxBist Comwake idle time (num of word clocks)
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_cfg_1_reg_t;

#define PMA_TX_MSG_BIST_CFG_1_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_CFG_1_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_CFG_1_WR_MASK (0xffffffffU)


///< TxBist OOB Burst time (num of word clocks)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTBURST_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTBURST_BF_WID ( 8)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTBURST_BF_MSK (0x000000FF)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTBURST_BF_DEF (0x00000000)

///< TxBist Comreset/Cominit idle time (num of word clock)s
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMRSTINIT_BF_OFF ( 8)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMRSTINIT_BF_WID ( 8)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMRSTINIT_BF_MSK (0x0000FF00)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMRSTINIT_BF_DEF (0x00000000)

///< TxBist Comsas idle time (num of word clocks)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMSAS_BF_OFF (16)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMSAS_BF_WID ( 8)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMSAS_BF_MSK (0x00FF0000)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMSAS_BF_DEF (0x00000000)

///< TxBist Comwake idle time (num of word clocks)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMWAKE_BF_OFF (24)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMWAKE_BF_WID ( 8)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMWAKE_BF_MSK (0xFF000000)
#define PMA_TX_MSG_BIST_CFG_1_TXBIST_OOBTCOMWAKE_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_SEED register description at address offset 0x3f8
  *
  * Register default value:        0x7FFFFFFF
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_seed
  * Tx Bist Seed
  */

typedef union {
  struct {
    uint32_t TXBIST_SEED : 31;
    ///< TxBist Initial Seed
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7FFFFFFF"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_bist_seed_reg_t;

#define PMA_TX_MSG_BIST_SEED_DEFAULT (0x7fffffffU)
#define PMA_TX_MSG_BIST_SEED_RD_MASK (0x7fffffffU)
#define PMA_TX_MSG_BIST_SEED_WR_MASK (0x7fffffffU)


///< TxBist Initial Seed
#define PMA_TX_MSG_BIST_SEED_TXBIST_SEED_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_SEED_TXBIST_SEED_BF_WID (31)
#define PMA_TX_MSG_BIST_SEED_TXBIST_SEED_BF_MSK (0x7FFFFFFF)
#define PMA_TX_MSG_BIST_SEED_TXBIST_SEED_BF_DEF (0x7FFFFFFF)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF00 register description at address offset 0x3fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf00
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF00 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf00_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF00_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF00_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF00_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF00_TXBIST_UDP_VF00_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF00_TXBIST_UDP_VF00_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF00_TXBIST_UDP_VF00_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF00_TXBIST_UDP_VF00_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF01 register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf01
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF01 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf01_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF01_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF01_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF01_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF01_TXBIST_UDP_VF01_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF01_TXBIST_UDP_VF01_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF01_TXBIST_UDP_VF01_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF01_TXBIST_UDP_VF01_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF02 register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf02
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF02 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf02_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF02_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF02_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF02_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF02_TXBIST_UDP_VF02_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF02_TXBIST_UDP_VF02_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF02_TXBIST_UDP_VF02_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF02_TXBIST_UDP_VF02_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF03 register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf03
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF03 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf03_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF03_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF03_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF03_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF03_TXBIST_UDP_VF03_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF03_TXBIST_UDP_VF03_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF03_TXBIST_UDP_VF03_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF03_TXBIST_UDP_VF03_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF04 register description at address offset 0x40c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf04
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF04 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf04_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF04_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF04_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF04_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF04_TXBIST_UDP_VF04_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF04_TXBIST_UDP_VF04_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF04_TXBIST_UDP_VF04_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF04_TXBIST_UDP_VF04_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF05 register description at address offset 0x410
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf05
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF05 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf05_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF05_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF05_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF05_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF05_TXBIST_UDP_VF05_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF05_TXBIST_UDP_VF05_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF05_TXBIST_UDP_VF05_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF05_TXBIST_UDP_VF05_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF06 register description at address offset 0x414
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf06
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF06 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf06_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF06_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF06_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF06_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF06_TXBIST_UDP_VF06_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF06_TXBIST_UDP_VF06_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF06_TXBIST_UDP_VF06_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF06_TXBIST_UDP_VF06_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF07 register description at address offset 0x418
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf07
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF07 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf07_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF07_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF07_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF07_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF07_TXBIST_UDP_VF07_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF07_TXBIST_UDP_VF07_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF07_TXBIST_UDP_VF07_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF07_TXBIST_UDP_VF07_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF08 register description at address offset 0x41c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf08
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF08 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf08_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF08_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF08_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF08_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF08_TXBIST_UDP_VF08_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF08_TXBIST_UDP_VF08_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF08_TXBIST_UDP_VF08_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF08_TXBIST_UDP_VF08_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXBIST_UDP_VF09 register description at address offset 0x420
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txbist_udp_vf09
  * TxBist UDP patern
  */

typedef union {
  struct {
    uint32_t TXBIST_UDP_VF09 : 32;
    ///< TxBist UDP pattern
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_bist_udp_vf09_reg_t;

#define PMA_TX_MSG_BIST_UDP_VF09_DEFAULT (0x00000000U)
#define PMA_TX_MSG_BIST_UDP_VF09_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_BIST_UDP_VF09_WR_MASK (0xffffffffU)


///< TxBist UDP pattern
#define PMA_TX_MSG_BIST_UDP_VF09_TXBIST_UDP_VF09_BF_OFF ( 0)
#define PMA_TX_MSG_BIST_UDP_VF09_TXBIST_UDP_VF09_BF_WID (32)
#define PMA_TX_MSG_BIST_UDP_VF09_TXBIST_UDP_VF09_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_BIST_UDP_VF09_TXBIST_UDP_VF09_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFIFO_CTRL_0 register description at address offset 0x4f0
  *
  * Register default value:        0x00030001
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfifo_ctrl_0
  * TX FIFO Controls
  */

typedef union {
  struct {
    uint32_t TXFIFO_MULTIBIT_ELECIDLE_EN_A : 1;
    ///< Enable multibit elecidle: 0 : Single bit Elecodle 1: Multibit Electidle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t TXFIFO_RX2TXUNTIMEDEN_A : 1;
    ///< Select rx2tx loopback
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXFIFO_RX2TXTIMEDEN_A : 1;
    ///< Select datapath for rx2tx loopback
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PCSMEASLATOVRHD_MEAS_SEL_A : 1;
    ///< Select the latency measurment path
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t TXELECIDLE_DESKEW_EN_A : 1;
    ///< Keep txen de-asserted until the first de-assertion of elecidl
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXWCLK_DIV_EN_A : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXWCLK_DIV_SMPL_A : 1;
    ///< ---
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t TXFIFO_WRCLK_DIV : 3;
    ///< ---
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TXFIFO_MON_CLEAR_A : 1;
    ///< Clear TXFIFO monitor in case full or empty flags are asserted.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TXFIFO_MON_NO_DELAY_EN_A : 1;
    ///< 0: Delayed version of pointer for comparison is used
    ///< 1: Use pointer without delay
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t TXPISO_DATAWIDTH : 3;
    ///< Register control for PISO Data Width
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXFIFO_WRPTRINIT : 5;
    ///< Initial value for wr pointer
    ///< AccessType="RW" BitOffset="15" ResetValue="0x6"
    uint32_t TXFIFO_WRPTRINIT_RX2TXLB : 5;
    ///< Initial value for wr pointer in RX to TX loopback datapath
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t TXFIFO_MUTE_DELAY : 4;
    ///< ---
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t TX_DATAPATH_SEL : 2;
    ///< Select between different TX datapth modes:
    ///< - Set to 2'b00 for normal (PCS) mode (default).
    ///< - Set to 2'b01 for BIST mode.
    ///< - 2'b10 is reserved for Auto-neg.
    ///< - 2'b11 is reserved.
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t TX_DATAPATH_SEL_SYNC_BYPASS_EN : 1;
    ///< Bypasses the mutibit synchronizer for debugging.
    ///< AccessType="RW" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txfifo_ctrl_0_reg_t;

#define PMA_TX_MSG_TXFIFO_CTRL_0_DEFAULT (0x00030001U)
#define PMA_TX_MSG_TXFIFO_CTRL_0_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXFIFO_CTRL_0_WR_MASK (0xffffffffU)


///< Enable multibit elecidle: 0 : Single bit Elecodle 1: Multibit Electidle
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MULTIBIT_ELECIDLE_EN_A_BF_OFF ( 0)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MULTIBIT_ELECIDLE_EN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MULTIBIT_ELECIDLE_EN_A_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MULTIBIT_ELECIDLE_EN_A_BF_DEF (0x00000001)

///< Select rx2tx loopback
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXUNTIMEDEN_A_BF_OFF ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXUNTIMEDEN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXUNTIMEDEN_A_BF_MSK (0x00000002)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXUNTIMEDEN_A_BF_DEF (0x00000000)

///< Select datapath for rx2tx loopback
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXTIMEDEN_A_BF_OFF ( 2)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXTIMEDEN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXTIMEDEN_A_BF_MSK (0x00000004)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_RX2TXTIMEDEN_A_BF_DEF (0x00000000)

///< Select the latency measurment path
#define PMA_TX_MSG_TXFIFO_CTRL_0_PCSMEASLATOVRHD_MEAS_SEL_A_BF_OFF ( 3)
#define PMA_TX_MSG_TXFIFO_CTRL_0_PCSMEASLATOVRHD_MEAS_SEL_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_PCSMEASLATOVRHD_MEAS_SEL_A_BF_MSK (0x00000008)
#define PMA_TX_MSG_TXFIFO_CTRL_0_PCSMEASLATOVRHD_MEAS_SEL_A_BF_DEF (0x00000000)

///< Keep txen de-asserted until the first de-assertion of elecidl
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXELECIDLE_DESKEW_EN_A_BF_OFF ( 4)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXELECIDLE_DESKEW_EN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXELECIDLE_DESKEW_EN_A_BF_MSK (0x00000010)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXELECIDLE_DESKEW_EN_A_BF_DEF (0x00000000)

#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_EN_A_BF_OFF ( 5)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_EN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_EN_A_BF_MSK (0x00000020)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_EN_A_BF_DEF (0x00000000)

#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_SMPL_A_BF_OFF ( 6)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_SMPL_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_SMPL_A_BF_MSK (0x00000040)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXWCLK_DIV_SMPL_A_BF_DEF (0x00000000)

#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRCLK_DIV_BF_OFF ( 7)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRCLK_DIV_BF_WID ( 3)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRCLK_DIV_BF_MSK (0x00000380)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRCLK_DIV_BF_DEF (0x00000000)

///< Clear TXFIFO monitor in case full or empty flags are asserted.
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_CLR_A_BF_OFF (10)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_CLR_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_CLR_A_BF_MSK (0x00000400)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_CLR_A_BF_DEF (0x00000000)

///< 0: Delayed version of pointer for comparison is used
///< 1: Use pointer without delay
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_NO_DELAY_EN_A_BF_OFF (11)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_NO_DELAY_EN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_NO_DELAY_EN_A_BF_MSK (0x00000800)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MON_NO_DELAY_EN_A_BF_DEF (0x00000000)

///< Register control for PISO Data Width
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXPISO_DATAWIDTH_BF_OFF (12)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXPISO_DATAWIDTH_BF_WID ( 3)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXPISO_DATAWIDTH_BF_MSK (0x00007000)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXPISO_DATAWIDTH_BF_DEF (0x00000000)

///< Initial value for wr pointer
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_BF_OFF (15)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_BF_WID ( 5)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_BF_MSK (0x000F8000)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_BF_DEF (0x00030000)

///< Initial value for wr pointer in RX to TX loopback datapath
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_RX2TXLB_BF_OFF (20)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_RX2TXLB_BF_WID ( 5)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_RX2TXLB_BF_MSK (0x01F00000)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_WRPTRINIT_RX2TXLB_BF_DEF (0x00000000)

#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MUTE_DELAY_BF_OFF (25)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MUTE_DELAY_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MUTE_DELAY_BF_MSK (0x1E000000)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TXFIFO_MUTE_DELAY_BF_DEF (0x00000000)

///< Select between different TX datapth modes:
///< - Set to 2'b00 for normal (PCS) mode (default).
///< - Set to 2'b01 for BIST mode.
///< - 2'b10 is reserved for Auto-neg.
///< - 2'b11 is reserved.
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_BF_OFF (29)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_BF_WID ( 2)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_BF_MSK (0x60000000)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_BF_DEF (0x00000000)

///< Bypasses the mutibit synchronizer for debugging.
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_SYNC_BYP_EN_BF_OFF (31)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_SYNC_BYP_EN_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_SYNC_BYP_EN_BF_MSK (0x80000000)
#define PMA_TX_MSG_TXFIFO_CTRL_0_TX_DATAPATH_SEL_SYNC_BYP_EN_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFIFO_CTRL_1 register description at address offset 0x4f4
  *
  * Register default value:        0x003CF24F
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfifo_ctrl_1
  * TX FIFO Controls
  */

typedef union {
  struct {
    uint32_t TXFIFO_10X_WR_PTR_MAX : 6;
    ///< The maximum value of write pointer in 10x datawidth:
    ///< - Set to 7 for the optimized buffer depth (default).
    ///< - Set to 15 for the maximum buffer depth.
    ///< AccessType="RW" BitOffset="0" ResetValue="0xF"
    uint32_t TXFIFO_10X_RD_PTR_MAX : 6;
    ///< The maximum value of read pointer in 10x datawidth:
    ///< - Set to 4 for the optimized buffer depth (default).
    ///< - Set to 9 for the maximum buffer depth.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x9"
    uint32_t TXFIFO_16X_WR_PTR_MAX : 6;
    ///< The maximum value of write pointer in 16x datawidth:
    ///< - Set to 7 for the optimized buffer depth (default).
    ///< - Set to 15 for the maximum buffer depth.
    ///< AccessType="RW" BitOffset="12" ResetValue="0xF"
    uint32_t TXFIFO_16X_RD_PTR_MAX : 6;
    ///< The maximum value of read pointer in 16x datawidth:
    ///< - Set to 7 for the optimized buffer depth (default).
    ///< - Set to 15 for the maximum buffer depth.
    ///< AccessType="RW" BitOffset="18" ResetValue="0xF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txfifo_ctrl_1_reg_t;

#define PMA_TX_MSG_TXFIFO_CTRL_1_DEFAULT (0x003cf24fU)
#define PMA_TX_MSG_TXFIFO_CTRL_1_RD_MASK (0x00ffffffU)
#define PMA_TX_MSG_TXFIFO_CTRL_1_WR_MASK (0x00ffffffU)


///< The maximum value of write pointer in 10x datawidth:
///< - Set to 7 for the optimized buffer depth (default).
///< - Set to 15 for the maximum buffer depth.
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_WR_PTR_MAX_BF_OFF ( 0)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_WR_PTR_MAX_BF_WID ( 6)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_WR_PTR_MAX_BF_MSK (0x0000003F)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_WR_PTR_MAX_BF_DEF (0x0000000F)

///< The maximum value of read pointer in 10x datawidth:
///< - Set to 4 for the optimized buffer depth (default).
///< - Set to 9 for the maximum buffer depth.
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_RD_PTR_MAX_BF_OFF ( 6)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_RD_PTR_MAX_BF_WID ( 6)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_RD_PTR_MAX_BF_MSK (0x00000FC0)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_10X_RD_PTR_MAX_BF_DEF (0x00000240)

///< The maximum value of write pointer in 16x datawidth:
///< - Set to 7 for the optimized buffer depth (default).
///< - Set to 15 for the maximum buffer depth.
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_WR_PTR_MAX_BF_OFF (12)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_WR_PTR_MAX_BF_WID ( 6)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_WR_PTR_MAX_BF_MSK (0x0003F000)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_WR_PTR_MAX_BF_DEF (0x0000F000)

///< The maximum value of read pointer in 16x datawidth:
///< - Set to 7 for the optimized buffer depth (default).
///< - Set to 15 for the maximum buffer depth.
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_RD_PTR_MAX_BF_OFF (18)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_RD_PTR_MAX_BF_WID ( 6)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_RD_PTR_MAX_BF_MSK (0x00FC0000)
#define PMA_TX_MSG_TXFIFO_CTRL_1_TXFIFO_16X_RD_PTR_MAX_BF_DEF (0x003C0000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFIFO_TXBTI_0 register description at address offset 0x4f8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfifo_txbti_0
  * TXBTI Control
  */

typedef union {
  struct {
    uint32_t TXBTI_TX_IDLE_DATA_EN : 32;
    ///< Bit 0: to enable txidle data override. When this bit is set, the p2sword
    ///< output will be bti_clock
    ///< Bit 1: Selected value if override is not selected
    ///< Bit 2-31: Reserved for future used
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txfifo_txbti_0_reg_t;

#define PMA_TX_MSG_TXFIFO_TXBTI_0_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXFIFO_TXBTI_0_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXFIFO_TXBTI_0_WR_MASK (0xffffffffU)


///< Bit 0: to enable txidle data override. When this bit is set, the p2sword
///< output will be bti_clock
///< Bit 1: Selected value if override is not selected
///< Bit 2-31: Reserved for future used
#define PMA_TX_MSG_TXFIFO_TXBTI_0_TXBTI_TX_IDLE_DATA_EN_BF_OFF ( 0)
#define PMA_TX_MSG_TXFIFO_TXBTI_0_TXBTI_TX_IDLE_DATA_EN_BF_WID (32)
#define PMA_TX_MSG_TXFIFO_TXBTI_0_TXBTI_TX_IDLE_DATA_EN_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_TXFIFO_TXBTI_0_TXBTI_TX_IDLE_DATA_EN_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORDERR_0 register description at address offset 0x4fc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txworderr_0
  * TX word data error injection
  */

typedef union {
  struct {
    uint32_t TXWORDERR_INJECTION_EN_A : 1;
    ///< Enable TX data error injection
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXWORDERR_PER_EVENT : 8;
    ///< Number of error injections per event
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txworderr_0_reg_t;

#define PMA_TX_MSG_TXWORDERR_0_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORDERR_0_RD_MASK (0x000001ffU)
#define PMA_TX_MSG_TXWORDERR_0_WR_MASK (0x000001ffU)


///< Enable TX data error injection
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_INJECTION_EN_A_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_INJECTION_EN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_INJECTION_EN_A_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_INJECTION_EN_A_BF_DEF (0x00000000)

///< Number of error injections per event
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_PER_EVENT_BF_OFF ( 1)
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_PER_EVENT_BF_WID ( 8)
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_PER_EVENT_BF_MSK (0x000001FE)
#define PMA_TX_MSG_TXWORDERR_0_TXWORDERR_PER_EVENT_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORDERR_1 register description at address offset 0x500
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txworderr_1
  * TX word data error injection
  */

typedef union {
  struct {
    uint32_t TXWORDERR_EVENT_NUM : 16;
    ///< Number of error injection events
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXWORDERR_EVENT_INTERVAL_WORD_COUNT : 16;
    ///< Interval between error injection events
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txworderr_1_reg_t;

#define PMA_TX_MSG_TXWORDERR_1_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORDERR_1_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXWORDERR_1_WR_MASK (0xffffffffU)


///< Number of error injection events
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_NUM_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_NUM_BF_WID (16)
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_NUM_BF_MSK (0x0000FFFF)
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_NUM_BF_DEF (0x00000000)

///< Interval between error injection events
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_INTERVAL_WORD_CNT_BF_OFF (16)
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_INTERVAL_WORD_CNT_BF_WID (16)
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_INTERVAL_WORD_CNT_BF_MSK (0xFFFF0000)
#define PMA_TX_MSG_TXWORDERR_1_TXWORDERR_EVENT_INTERVAL_WORD_CNT_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORDERR_2 register description at address offset 0x504
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txworderr_2
  * TX word data error injection mask
  */

typedef union {
  struct {
    uint32_t TXWORDERR_XOR_MASK_0 : 32;
    ///< Mask for the first 32-bit of data word
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txworderr_2_reg_t;

#define PMA_TX_MSG_TXWORDERR_2_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORDERR_2_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXWORDERR_2_WR_MASK (0xffffffffU)


///< Mask for the first 32-bit of data word
#define PMA_TX_MSG_TXWORDERR_2_TXWORDERR_XOR_MASK_0_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORDERR_2_TXWORDERR_XOR_MASK_0_BF_WID (32)
#define PMA_TX_MSG_TXWORDERR_2_TXWORDERR_XOR_MASK_0_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_TXWORDERR_2_TXWORDERR_XOR_MASK_0_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORDERR_3 register description at address offset 0x508
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txworderr_3
  * TX word data error injection mask
  */

typedef union {
  struct {
    uint32_t TXWORDERR_XOR_MASK_1 : 32;
    ///< Mask for the second 32-bit of data word
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txworderr_3_reg_t;

#define PMA_TX_MSG_TXWORDERR_3_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORDERR_3_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXWORDERR_3_WR_MASK (0xffffffffU)


///< Mask for the second 32-bit of data word
#define PMA_TX_MSG_TXWORDERR_3_TXWORDERR_XOR_MASK_1_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORDERR_3_TXWORDERR_XOR_MASK_1_BF_WID (32)
#define PMA_TX_MSG_TXWORDERR_3_TXWORDERR_XOR_MASK_1_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_TXWORDERR_3_TXWORDERR_XOR_MASK_1_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORDERR_4 register description at address offset 0x50c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txworderr_4
  * TX word data error injection mask
  */

typedef union {
  struct {
    uint32_t TXWORDERR_XOR_MASK_2 : 32;
    ///< Mask for the third 32-bit of data word
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txworderr_4_reg_t;

#define PMA_TX_MSG_TXWORDERR_4_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORDERR_4_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXWORDERR_4_WR_MASK (0xffffffffU)


///< Mask for the third 32-bit of data word
#define PMA_TX_MSG_TXWORDERR_4_TXWORDERR_XOR_MASK_2_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORDERR_4_TXWORDERR_XOR_MASK_2_BF_WID (32)
#define PMA_TX_MSG_TXWORDERR_4_TXWORDERR_XOR_MASK_2_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_TXWORDERR_4_TXWORDERR_XOR_MASK_2_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXWORDERR_5 register description at address offset 0x510
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txworderr_5
  * TX word data error injection mask
  */

typedef union {
  struct {
    uint32_t TXWORDERR_XOR_MASK_3 : 32;
    ///< Mask for the last 32-bit of data word
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_msg_txworderr_5_reg_t;

#define PMA_TX_MSG_TXWORDERR_5_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXWORDERR_5_RD_MASK (0xffffffffU)
#define PMA_TX_MSG_TXWORDERR_5_WR_MASK (0xffffffffU)


///< Mask for the last 32-bit of data word
#define PMA_TX_MSG_TXWORDERR_5_TXWORDERR_XOR_MASK_3_BF_OFF ( 0)
#define PMA_TX_MSG_TXWORDERR_5_TXWORDERR_XOR_MASK_3_BF_WID (32)
#define PMA_TX_MSG_TXWORDERR_5_TXWORDERR_XOR_MASK_3_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MSG_TXWORDERR_5_TXWORDERR_XOR_MASK_3_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFIFO_KILL__0 register description at address offset 0x514
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfifo_kill__0
  * Delay TX enable for the TX FIFO
  */

typedef union {
  struct {
    uint32_t TXFIFO_KILL_EN_A : 1;
    ///< Enable the counter delaying TX enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_PAM32B : 4;
    ///< Counter value for the PAM 32b datawidth
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_PAM40B : 4;
    ///< Counter value for the PAM 40b datawidth
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_PAM64B : 4;
    ///< Counter value for the PAM 64b datawidth
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_PAM80B : 4;
    ///< Counter value for the PAM 80b datawidth
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_PAM128B : 4;
    ///< Counter value for the PAM 128b datawidth
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txfifo_kill__0_reg_t;

#define PMA_TX_MSG_TXFIFO_KILL__0_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXFIFO_KILL__0_RD_MASK (0x001fffffU)
#define PMA_TX_MSG_TXFIFO_KILL__0_WR_MASK (0x001fffffU)


///< Enable the counter delaying TX enable
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_EN_A_BF_OFF ( 0)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_EN_A_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_EN_A_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_EN_A_BF_DEF (0x00000000)

///< Counter value for the PAM 32b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM32B_BF_OFF ( 1)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM32B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM32B_BF_MSK (0x0000001E)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM32B_BF_DEF (0x00000000)

///< Counter value for the PAM 40b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM40B_BF_OFF ( 5)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM40B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM40B_BF_MSK (0x000001E0)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM40B_BF_DEF (0x00000000)

///< Counter value for the PAM 64b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM64B_BF_OFF ( 9)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM64B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM64B_BF_MSK (0x00001E00)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM64B_BF_DEF (0x00000000)

///< Counter value for the PAM 80b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM80B_BF_OFF (13)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM80B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM80B_BF_MSK (0x0001E000)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM80B_BF_DEF (0x00000000)

///< Counter value for the PAM 128b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM128B_BF_OFF (17)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM128B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM128B_BF_MSK (0x001E0000)
#define PMA_TX_MSG_TXFIFO_KILL__0_TXFIFO_KILL_DLY_PAM128B_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFIFO_KILL__1 register description at address offset 0x518
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfifo_kill__1
  * Delay TX enable for the TX FIFO
  */

typedef union {
  struct {
    uint32_t TXFIFO_KILL_DLY_NRZ10B : 4;
    ///< Counter value for the NRZ 10b datawidth
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_NRZ16B : 4;
    ///< Counter value for the NRZ 16b datawidth
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_NRZ20B : 4;
    ///< Counter value for the NRZ 20b datawidth
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_NRZ32B : 4;
    ///< Counter value for the NRZ 32b datawidth
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_NRZ40B : 4;
    ///< Counter value for the NRZ 40b datawidth
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t TXFIFO_KILL_DLY_NRZ64B : 4;
    ///< Counter value for the NRZ 64b datawidth
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txfifo_kill__1_reg_t;

#define PMA_TX_MSG_TXFIFO_KILL__1_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXFIFO_KILL__1_RD_MASK (0x00ffffffU)
#define PMA_TX_MSG_TXFIFO_KILL__1_WR_MASK (0x00ffffffU)


///< Counter value for the NRZ 10b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ10B_BF_OFF ( 0)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ10B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ10B_BF_MSK (0x0000000F)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ10B_BF_DEF (0x00000000)

///< Counter value for the NRZ 16b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ16B_BF_OFF ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ16B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ16B_BF_MSK (0x000000F0)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ16B_BF_DEF (0x00000000)

///< Counter value for the NRZ 20b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ20B_BF_OFF ( 8)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ20B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ20B_BF_MSK (0x00000F00)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ20B_BF_DEF (0x00000000)

///< Counter value for the NRZ 32b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ32B_BF_OFF (12)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ32B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ32B_BF_MSK (0x0000F000)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ32B_BF_DEF (0x00000000)

///< Counter value for the NRZ 40b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ40B_BF_OFF (16)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ40B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ40B_BF_MSK (0x000F0000)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ40B_BF_DEF (0x00000000)

///< Counter value for the NRZ 64b datawidth
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ64B_BF_OFF (20)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ64B_BF_WID ( 4)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ64B_BF_MSK (0x00F00000)
#define PMA_TX_MSG_TXFIFO_KILL__1_TXFIFO_KILL_DLY_NRZ64B_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFIFO_STATUS_0 register description at address offset 0x51c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txfifo_status_0
  * TX FIFO status
  */

typedef union {
  struct {
    uint32_t TXWORDERR_DONE : 1;
    ///< Asserted when the TX error injection is complete.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TXFIFO_PTRS : 19;
    ///< This is concatinated pointers output  read ptr, RX write ptr, TX write
    ///< ptr
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txfifo_stat_0_reg_t;

#define PMA_TX_MSG_TXFIFO_STAT_0_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXFIFO_STAT_0_RD_MASK (0x000fffffU)
#define PMA_TX_MSG_TXFIFO_STAT_0_WR_MASK (0x00000000U)


///< Asserted when the TX error injection is complete.
#define PMA_TX_MSG_TXFIFO_STAT_0_TXWORDERR_DONE_BF_OFF ( 0)
#define PMA_TX_MSG_TXFIFO_STAT_0_TXWORDERR_DONE_BF_WID ( 1)
#define PMA_TX_MSG_TXFIFO_STAT_0_TXWORDERR_DONE_BF_MSK (0x00000001)
#define PMA_TX_MSG_TXFIFO_STAT_0_TXWORDERR_DONE_BF_DEF (0x00000000)

///< This is concatinated pointers output  read ptr, RX write ptr, TX write
///< ptr
#define PMA_TX_MSG_TXFIFO_STAT_0_TXFIFO_PTRS_BF_OFF ( 1)
#define PMA_TX_MSG_TXFIFO_STAT_0_TXFIFO_PTRS_BF_WID (19)
#define PMA_TX_MSG_TXFIFO_STAT_0_TXFIFO_PTRS_BF_MSK (0x000FFFFE)
#define PMA_TX_MSG_TXFIFO_STAT_0_TXFIFO_PTRS_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TXFFE_ENC0_CTRL register description at address offset 0x520
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/txffe_enc0_ctrl
  * TX FIFO status
  */

typedef union {
  struct {
    uint32_t ENC0 : 3;
    ///< Txffe ceoff ENC0 control knob. Used for LUT mapping from 6b weidhted
    ///< code to final txffe coefficients
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pma_tx_msg_txffe_enc0_ctrl_reg_t;

#define PMA_TX_MSG_TXFFE_ENC0_CTRL_DEFAULT (0x00000000U)
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_RD_MASK (0x00000007U)
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_WR_MASK (0x00000007U)


///< Txffe ceoff ENC0 control knob. Used for LUT mapping from 6b weidhted
///< code to final txffe coefficients
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_ENC0_BF_OFF ( 0)
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_ENC0_BF_WID ( 3)
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_ENC0_BF_MSK (0x00000007)
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_ENC0_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RW_SPARE_0 register description at address offset 0xfd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rw_spare_0
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TX_RW_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_rw_spare_0_reg_t;

#define PMA_TX_MGS_RW_SPARE_0_DEFAULT (0x00000000U)
#define PMA_TX_MGS_RW_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RW_SPARE_0_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TX_MGS_RW_SPARE_0_TX_RW_SPARE_0_BF_OFF ( 0)
#define PMA_TX_MGS_RW_SPARE_0_TX_RW_SPARE_0_BF_WID (32)
#define PMA_TX_MGS_RW_SPARE_0_TX_RW_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_RW_SPARE_0_TX_RW_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RW_SPARE_1 register description at address offset 0xfd8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rw_spare_1
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TX_RW_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_rw_spare_1_reg_t;

#define PMA_TX_MGS_RW_SPARE_1_DEFAULT (0x00000000U)
#define PMA_TX_MGS_RW_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RW_SPARE_1_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TX_MGS_RW_SPARE_1_TX_RW_SPARE_1_BF_OFF ( 0)
#define PMA_TX_MGS_RW_SPARE_1_TX_RW_SPARE_1_BF_WID (32)
#define PMA_TX_MGS_RW_SPARE_1_TX_RW_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_RW_SPARE_1_TX_RW_SPARE_1_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RW_SPARE_2 register description at address offset 0xfdc
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rw_spare_2
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TX_RW_SPARE_2 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_rw_spare_2_reg_t;

#define PMA_TX_MGS_RW_SPARE_2_DEFAULT (0x00000000U)
#define PMA_TX_MGS_RW_SPARE_2_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RW_SPARE_2_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TX_MGS_RW_SPARE_2_TX_RW_SPARE_2_BF_OFF ( 0)
#define PMA_TX_MGS_RW_SPARE_2_TX_RW_SPARE_2_BF_WID (32)
#define PMA_TX_MGS_RW_SPARE_2_TX_RW_SPARE_2_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_RW_SPARE_2_TX_RW_SPARE_2_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RW_SPARE_3 register description at address offset 0xfe0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_rw_spare_3
  * Spare RW register
  */

typedef union {
  struct {
    uint32_t TX_RW_SPARE_3 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_rw_spare_3_reg_t;

#define PMA_TX_MGS_RW_SPARE_3_DEFAULT (0x00000000U)
#define PMA_TX_MGS_RW_SPARE_3_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RW_SPARE_3_WR_MASK (0xffffffffU)


///< Spare register.  Reseved for future
#define PMA_TX_MGS_RW_SPARE_3_TX_RW_SPARE_3_BF_OFF ( 0)
#define PMA_TX_MGS_RW_SPARE_3_TX_RW_SPARE_3_BF_WID (32)
#define PMA_TX_MGS_RW_SPARE_3_TX_RW_SPARE_3_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_RW_SPARE_3_TX_RW_SPARE_3_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RO_SPARE_0 register description at address offset 0xfe4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ro_spare_0
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t TX_RO_SPARE_0 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_ro_spare_0_reg_t;

#define PMA_TX_MGS_RO_SPARE_0_DEFAULT (0x00000000U)
#define PMA_TX_MGS_RO_SPARE_0_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RO_SPARE_0_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_TX_MGS_RO_SPARE_0_TX_RO_SPARE_0_BF_OFF ( 0)
#define PMA_TX_MGS_RO_SPARE_0_TX_RO_SPARE_0_BF_WID (32)
#define PMA_TX_MGS_RO_SPARE_0_TX_RO_SPARE_0_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_RO_SPARE_0_TX_RO_SPARE_0_BF_DEF (0x00000000)


/** @brief PMA_TX_REGS_MSG_PMA_TX_REGS_TX_RO_SPARE_1 register description at address offset 0xfe8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PMA_TX_regs_MSG/PMA_TX_regs/tx_ro_spare_1
  * Spare RO register
  */

typedef union {
  struct {
    uint32_t TX_RO_SPARE_1 : 32;
    ///< Spare register.  Reseved for future
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pma_tx_mgs_ro_spare_1_reg_t;

#define PMA_TX_MGS_RO_SPARE_1_DEFAULT (0x00000000U)
#define PMA_TX_MGS_RO_SPARE_1_RD_MASK (0xffffffffU)
#define PMA_TX_MGS_RO_SPARE_1_WR_MASK (0x00000000U)


///< Spare register.  Reseved for future
#define PMA_TX_MGS_RO_SPARE_1_TX_RO_SPARE_1_BF_OFF ( 0)
#define PMA_TX_MGS_RO_SPARE_1_TX_RO_SPARE_1_BF_WID (32)
#define PMA_TX_MGS_RO_SPARE_1_TX_RO_SPARE_1_BF_MSK (0xFFFFFFFF)
#define PMA_TX_MGS_RO_SPARE_1_TX_RO_SPARE_1_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PMA_TX_MGS_CAR_CFG_REG(_BASE) ((pma_tx_mgs_car_cfg_reg_t*) PMA_TX_MGS_CAR_CFG_ADR(_BASE))
#define PMA_TX_MGS_CAR_CFG_RO_REG(_BASE) ((pma_tx_mgs_car_cfg_ro_reg_t*) PMA_TX_MGS_CAR_CFG_RO_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_0_REG(_BASE) ((pma_tx_mgs_scratch_pad_0_reg_t*) PMA_TX_MGS_SCRATCH_PAD_0_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_1_REG(_BASE) ((pma_tx_mgs_scratch_pad_1_reg_t*) PMA_TX_MGS_SCRATCH_PAD_1_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_2_REG(_BASE) ((pma_tx_mgs_scratch_pad_2_reg_t*) PMA_TX_MGS_SCRATCH_PAD_2_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_3_REG(_BASE) ((pma_tx_mgs_scratch_pad_3_reg_t*) PMA_TX_MGS_SCRATCH_PAD_3_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_4_REG(_BASE) ((pma_tx_mgs_scratch_pad_4_reg_t*) PMA_TX_MGS_SCRATCH_PAD_4_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_5_REG(_BASE) ((pma_tx_mgs_scratch_pad_5_reg_t*) PMA_TX_MGS_SCRATCH_PAD_5_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_6_REG(_BASE) ((pma_tx_mgs_scratch_pad_6_reg_t*) PMA_TX_MGS_SCRATCH_PAD_6_ADR(_BASE))
#define PMA_TX_MGS_SCRATCH_PAD_7_REG(_BASE) ((pma_tx_mgs_scratch_pad_7_reg_t*) PMA_TX_MGS_SCRATCH_PAD_7_ADR(_BASE))
#define PMA_TX_MGS_CTRL_REG(_BASE) ((pma_tx_mgs_ctrl_reg_t*) PMA_TX_MGS_CTRL_ADR(_BASE))
#define PMA_TX_MGS_CTRL_RO_REG(_BASE) ((pma_tx_mgs_ctrl_ro_reg_t*) PMA_TX_MGS_CTRL_RO_ADR(_BASE))
#define PMA_TX_MGS_PWR_MNG_CTRL_REG(_BASE) ((pma_tx_mgs_pwr_mng_ctrl_reg_t*) PMA_TX_MGS_PWR_MNG_CTRL_ADR(_BASE))
#define PMA_TX_MGS_PWR_MNG_STAT_REG(_BASE) ((pma_tx_mgs_pwr_mng_stat_reg_t*) PMA_TX_MGS_PWR_MNG_STAT_ADR(_BASE))
#define PMA_TX_MSG_FSM_CFG_REG(_BASE) ((pma_tx_msg_fsm_cfg_reg_t*) PMA_TX_MSG_FSM_CFG_ADR(_BASE))
#define PMA_TX_MGS_MEM_CTRL_REG(_BASE) ((pma_tx_mgs_mem_ctrl_reg_t*) PMA_TX_MGS_MEM_CTRL_ADR(_BASE))
#define PMA_TX_MGS_MEM_REQ_CTRL_REG(_BASE) ((pma_tx_mgs_mem_req_ctrl_reg_t*) PMA_TX_MGS_MEM_REQ_CTRL_ADR(_BASE))
#define PMA_TX_MGS_STAT_0_REG(_BASE) ((pma_tx_mgs_stat_0_reg_t*) PMA_TX_MGS_STAT_0_ADR(_BASE))
#define PMA_TX_MGS_STAT_1_REG(_BASE) ((pma_tx_mgs_stat_1_reg_t*) PMA_TX_MGS_STAT_1_ADR(_BASE))
#define PMA_TX_MGS_STAT_2_REG(_BASE) ((pma_tx_mgs_stat_2_reg_t*) PMA_TX_MGS_STAT_2_ADR(_BASE))
#define PMA_TX_MSG_PCS_PCIE_CTRL_REG(_BASE) ((pma_tx_msg_pcs_pcie_ctrl_reg_t*) PMA_TX_MSG_PCS_PCIE_CTRL_ADR(_BASE))
#define PMA_TX_MSG_PCS_PCIE_CTRL_RO_REG(_BASE) ((pma_tx_msg_pcs_pcie_ctrl_ro_reg_t*) PMA_TX_MSG_PCS_PCIE_CTRL_RO_ADR(_BASE))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_REG(_BASE) ((pma_tx_msg_fsm_ratewidth_cfg_0_reg_t*) PMA_TX_MSG_FSM_RATEWIDTH_CFG_0_ADR(_BASE))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_REG(_BASE) ((pma_tx_msg_fsm_ratewidth_cfg_1_reg_t*) PMA_TX_MSG_FSM_RATEWIDTH_CFG_1_ADR(_BASE))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_REG(_BASE) ((pma_tx_msg_fsm_ratewidth_cfg_2_reg_t*) PMA_TX_MSG_FSM_RATEWIDTH_CFG_2_ADR(_BASE))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_REG(_BASE) ((pma_tx_msg_fsm_ratewidth_cfg_3_reg_t*) PMA_TX_MSG_FSM_RATEWIDTH_CFG_3_ADR(_BASE))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_REG(_BASE) ((pma_tx_msg_fsm_ratewidth_cfg_4_reg_t*) PMA_TX_MSG_FSM_RATEWIDTH_CFG_4_ADR(_BASE))
#define PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_REG(_BASE) ((pma_tx_msg_fsm_ratewidth_cfg_5_reg_t*) PMA_TX_MSG_FSM_RATEWIDTH_CFG_5_ADR(_BASE))
#define PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_REG(_BASE) ((pma_tx_msg_fsm_calmaster_pstate_cfg_reg_t*) PMA_TX_MSG_FSM_CALMASTER_PSTATE_CFG_ADR(_BASE))
#define PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_REG(_BASE) ((pma_tx_msg_fsm_calmaster_quad_cfg_reg_t*) PMA_TX_MSG_FSM_CALMASTER_QUAD_CFG_ADR(_BASE))
#define PMA_TX_MSG_RPU_CTRL_REG(_BASE) ((pma_tx_msg_rpu_ctrl_reg_t*) PMA_TX_MSG_RPU_CTRL_ADR(_BASE))
#define PMA_TX_MSG_RPU_LUT_CFG_0_REG(_BASE) ((pma_tx_msg_rpu_lut_cfg_0_reg_t*) PMA_TX_MSG_RPU_LUT_CFG_0_ADR(_BASE))
#define PMA_TX_MSG_RPU_LUT_CFG_1_REG(_BASE) ((pma_tx_msg_rpu_lut_cfg_1_reg_t*) PMA_TX_MSG_RPU_LUT_CFG_1_ADR(_BASE))
#define PMA_TX_MSG_RPU_LUT_CFG_2_REG(_BASE) ((pma_tx_msg_rpu_lut_cfg_2_reg_t*) PMA_TX_MSG_RPU_LUT_CFG_2_ADR(_BASE))
#define PMA_TX_MSG_RPU_LUT_CFG_3_REG(_BASE) ((pma_tx_msg_rpu_lut_cfg_3_reg_t*) PMA_TX_MSG_RPU_LUT_CFG_3_ADR(_BASE))
#define PMA_TX_MSG_RPU_LUT_CFG_4_REG(_BASE) ((pma_tx_msg_rpu_lut_cfg_4_reg_t*) PMA_TX_MSG_RPU_LUT_CFG_4_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_REG(_BASE) ((pma_tx_msg_rpu_evup_delay_cfg_0_reg_t*) PMA_TX_MSG_RPU_EVUP_DELAY_CFG_0_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_REG(_BASE) ((pma_tx_msg_rpu_evup_delay_cfg_1_reg_t*) PMA_TX_MSG_RPU_EVUP_DELAY_CFG_1_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_REG(_BASE) ((pma_tx_msg_rpu_evup_delay_cfg_2_reg_t*) PMA_TX_MSG_RPU_EVUP_DELAY_CFG_2_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_REG(_BASE) ((pma_tx_msg_rpu_evup_delay_cfg_3_reg_t*) PMA_TX_MSG_RPU_EVUP_DELAY_CFG_3_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_REG(_BASE) ((pma_tx_msg_rpu_evdn_delay_cfg_0_reg_t*) PMA_TX_MSG_RPU_EVDN_DELAY_CFG_0_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_REG(_BASE) ((pma_tx_msg_rpu_evdn_delay_cfg_1_reg_t*) PMA_TX_MSG_RPU_EVDN_DELAY_CFG_1_ADR(_BASE))
#define PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_REG(_BASE) ((pma_tx_msg_rpu_evdn_delay_cfg_2_reg_t*) PMA_TX_MSG_RPU_EVDN_DELAY_CFG_2_ADR(_BASE))
#define PMA_TX_MGS_RPU_EVENT_CFG_0_REG(_BASE) ((pma_tx_mgs_rpu_event_cfg_0_reg_t*) PMA_TX_MGS_RPU_EVENT_CFG_0_ADR(_BASE))
#define PMA_TX_MGS_RPU_EVENT_CFG_1_REG(_BASE) ((pma_tx_mgs_rpu_event_cfg_1_reg_t*) PMA_TX_MGS_RPU_EVENT_CFG_1_ADR(_BASE))
#define PMA_TX_MGS_RPU_EVENT_CFG_2_REG(_BASE) ((pma_tx_mgs_rpu_event_cfg_2_reg_t*) PMA_TX_MGS_RPU_EVENT_CFG_2_ADR(_BASE))
#define PMA_TX_MGS_RPU_EVENT_CFG_3_REG(_BASE) ((pma_tx_mgs_rpu_event_cfg_3_reg_t*) PMA_TX_MGS_RPU_EVENT_CFG_3_ADR(_BASE))
#define PMA_TX_MGS_RPU_EVENT_CFG_4_REG(_BASE) ((pma_tx_mgs_rpu_event_cfg_4_reg_t*) PMA_TX_MGS_RPU_EVENT_CFG_4_ADR(_BASE))
#define PMA_TX_MGS_RPU_EVENT_CFG_5_REG(_BASE) ((pma_tx_mgs_rpu_event_cfg_5_reg_t*) PMA_TX_MGS_RPU_EVENT_CFG_5_ADR(_BASE))
#define PMA_TX_MGS_CTRL_OUT_0_REG(_BASE) ((pma_tx_mgs_ctrl_out_0_reg_t*) PMA_TX_MGS_CTRL_OUT_0_ADR(_BASE))
#define PMA_TX_MGS_CTRL_OUT_1_REG(_BASE) ((pma_tx_mgs_ctrl_out_1_reg_t*) PMA_TX_MGS_CTRL_OUT_1_ADR(_BASE))
#define PMA_TX_MGS_OUTPUT_PIN_OVRD_REG(_BASE) ((pma_tx_mgs_output_pin_ovrd_reg_t*) PMA_TX_MGS_OUTPUT_PIN_OVRD_ADR(_BASE))
#define PMA_TX_MGS_OUTPUT_PIN_PREOVRD_REG(_BASE) ((pma_tx_mgs_output_pin_preovrd_reg_t*) PMA_TX_MGS_OUTPUT_PIN_PREOVRD_ADR(_BASE))
#define PMA_TX_MGS_BRKPT_CTRL_REG(_BASE) ((pma_tx_mgs_brkpt_ctrl_reg_t*) PMA_TX_MGS_BRKPT_CTRL_ADR(_BASE))
#define PMA_TX_MGS_BRKPT_STAT_REG(_BASE) ((pma_tx_mgs_brkpt_stat_reg_t*) PMA_TX_MGS_BRKPT_STAT_ADR(_BASE))
#define PMA_TX_MGS_BRKPT_CLR_REG(_BASE) ((pma_tx_mgs_brkpt_clr_reg_t*) PMA_TX_MGS_BRKPT_CLR_ADR(_BASE))
#define PMA_TX_MGS_DATAPATH_STAT_REG(_BASE) ((pma_tx_mgs_datapath_stat_reg_t*) PMA_TX_MGS_DATAPATH_STAT_ADR(_BASE))
#define PMA_TX_MGS_CKM_CTRL_0_REG(_BASE) ((pma_tx_mgs_ckm_ctrl_0_reg_t*) PMA_TX_MGS_CKM_CTRL_0_ADR(_BASE))
#define PMA_TX_MGS_CKM_CTRL_1_REG(_BASE) ((pma_tx_mgs_ckm_ctrl_1_reg_t*) PMA_TX_MGS_CKM_CTRL_1_ADR(_BASE))
#define PMA_TX_MGS_CKM_CTRL_2_REG(_BASE) ((pma_tx_mgs_ckm_ctrl_2_reg_t*) PMA_TX_MGS_CKM_CTRL_2_ADR(_BASE))
#define PMA_TX_MGS_CKM_STAT_REG(_BASE) ((pma_tx_mgs_ckm_stat_reg_t*) PMA_TX_MGS_CKM_STAT_ADR(_BASE))
#define PMA_TX_MSG_TXWORD_CLK_CTRL_REG(_BASE) ((pma_tx_msg_txword_clk_ctrl_reg_t*) PMA_TX_MSG_TXWORD_CLK_CTRL_ADR(_BASE))
#define PMA_TX_MSG_TXWORD_CLK_OBS_REG(_BASE) ((pma_tx_msg_txword_clk_obs_reg_t*) PMA_TX_MSG_TXWORD_CLK_OBS_ADR(_BASE))
#define PMA_TX_MSG_TXELECIDLE_PIN_OVRD_REG(_BASE) ((pma_tx_msg_txelecidle_pin_ovrd_reg_t*) PMA_TX_MSG_TXELECIDLE_PIN_OVRD_ADR(_BASE))
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_REG(_BASE) ((pma_tx_msg_txdrv_txffe_coeff_pin_ovrd_0_reg_t*) PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_0_ADR(_BASE))
#define PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_REG(_BASE) ((pma_tx_msg_txdrv_txffe_coeff_pin_ovrd_1_reg_t*) PMA_TX_MSG_TXDRV_TXFFE_COEFF_PIN_OVRD_1_ADR(_BASE))
#define PMA_TX_MSG_BIST_CFG_0_REG(_BASE) ((pma_tx_msg_bist_cfg_0_reg_t*) PMA_TX_MSG_BIST_CFG_0_ADR(_BASE))
#define PMA_TX_MSG_BIST_CFG_1_REG(_BASE) ((pma_tx_msg_bist_cfg_1_reg_t*) PMA_TX_MSG_BIST_CFG_1_ADR(_BASE))
#define PMA_TX_MSG_BIST_SEED_REG(_BASE) ((pma_tx_msg_bist_seed_reg_t*) PMA_TX_MSG_BIST_SEED_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF00_REG(_BASE) ((pma_tx_msg_bist_udp_vf00_reg_t*) PMA_TX_MSG_BIST_UDP_VF00_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF01_REG(_BASE) ((pma_tx_msg_bist_udp_vf01_reg_t*) PMA_TX_MSG_BIST_UDP_VF01_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF02_REG(_BASE) ((pma_tx_msg_bist_udp_vf02_reg_t*) PMA_TX_MSG_BIST_UDP_VF02_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF03_REG(_BASE) ((pma_tx_msg_bist_udp_vf03_reg_t*) PMA_TX_MSG_BIST_UDP_VF03_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF04_REG(_BASE) ((pma_tx_msg_bist_udp_vf04_reg_t*) PMA_TX_MSG_BIST_UDP_VF04_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF05_REG(_BASE) ((pma_tx_msg_bist_udp_vf05_reg_t*) PMA_TX_MSG_BIST_UDP_VF05_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF06_REG(_BASE) ((pma_tx_msg_bist_udp_vf06_reg_t*) PMA_TX_MSG_BIST_UDP_VF06_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF07_REG(_BASE) ((pma_tx_msg_bist_udp_vf07_reg_t*) PMA_TX_MSG_BIST_UDP_VF07_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF08_REG(_BASE) ((pma_tx_msg_bist_udp_vf08_reg_t*) PMA_TX_MSG_BIST_UDP_VF08_ADR(_BASE))
#define PMA_TX_MSG_BIST_UDP_VF09_REG(_BASE) ((pma_tx_msg_bist_udp_vf09_reg_t*) PMA_TX_MSG_BIST_UDP_VF09_ADR(_BASE))
#define PMA_TX_MSG_TXFIFO_CTRL_0_REG(_BASE) ((pma_tx_msg_txfifo_ctrl_0_reg_t*) PMA_TX_MSG_TXFIFO_CTRL_0_ADR(_BASE))
#define PMA_TX_MSG_TXFIFO_CTRL_1_REG(_BASE) ((pma_tx_msg_txfifo_ctrl_1_reg_t*) PMA_TX_MSG_TXFIFO_CTRL_1_ADR(_BASE))
#define PMA_TX_MSG_TXFIFO_TXBTI_0_REG(_BASE) ((pma_tx_msg_txfifo_txbti_0_reg_t*) PMA_TX_MSG_TXFIFO_TXBTI_0_ADR(_BASE))
#define PMA_TX_MSG_TXWORDERR_0_REG(_BASE) ((pma_tx_msg_txworderr_0_reg_t*) PMA_TX_MSG_TXWORDERR_0_ADR(_BASE))
#define PMA_TX_MSG_TXWORDERR_1_REG(_BASE) ((pma_tx_msg_txworderr_1_reg_t*) PMA_TX_MSG_TXWORDERR_1_ADR(_BASE))
#define PMA_TX_MSG_TXWORDERR_2_REG(_BASE) ((pma_tx_msg_txworderr_2_reg_t*) PMA_TX_MSG_TXWORDERR_2_ADR(_BASE))
#define PMA_TX_MSG_TXWORDERR_3_REG(_BASE) ((pma_tx_msg_txworderr_3_reg_t*) PMA_TX_MSG_TXWORDERR_3_ADR(_BASE))
#define PMA_TX_MSG_TXWORDERR_4_REG(_BASE) ((pma_tx_msg_txworderr_4_reg_t*) PMA_TX_MSG_TXWORDERR_4_ADR(_BASE))
#define PMA_TX_MSG_TXWORDERR_5_REG(_BASE) ((pma_tx_msg_txworderr_5_reg_t*) PMA_TX_MSG_TXWORDERR_5_ADR(_BASE))
#define PMA_TX_MSG_TXFIFO_KILL__0_REG(_BASE) ((pma_tx_msg_txfifo_kill__0_reg_t*) PMA_TX_MSG_TXFIFO_KILL__0_ADR(_BASE))
#define PMA_TX_MSG_TXFIFO_KILL__1_REG(_BASE) ((pma_tx_msg_txfifo_kill__1_reg_t*) PMA_TX_MSG_TXFIFO_KILL__1_ADR(_BASE))
#define PMA_TX_MSG_TXFIFO_STAT_0_REG(_BASE) ((pma_tx_msg_txfifo_stat_0_reg_t*) PMA_TX_MSG_TXFIFO_STAT_0_ADR(_BASE))
#define PMA_TX_MSG_TXFFE_ENC0_CTRL_REG(_BASE) ((pma_tx_msg_txffe_enc0_ctrl_reg_t*) PMA_TX_MSG_TXFFE_ENC0_CTRL_ADR(_BASE))
#define PMA_TX_MGS_RW_SPARE_0_REG(_BASE) ((pma_tx_mgs_rw_spare_0_reg_t*) PMA_TX_MGS_RW_SPARE_0_ADR(_BASE))
#define PMA_TX_MGS_RW_SPARE_1_REG(_BASE) ((pma_tx_mgs_rw_spare_1_reg_t*) PMA_TX_MGS_RW_SPARE_1_ADR(_BASE))
#define PMA_TX_MGS_RW_SPARE_2_REG(_BASE) ((pma_tx_mgs_rw_spare_2_reg_t*) PMA_TX_MGS_RW_SPARE_2_ADR(_BASE))
#define PMA_TX_MGS_RW_SPARE_3_REG(_BASE) ((pma_tx_mgs_rw_spare_3_reg_t*) PMA_TX_MGS_RW_SPARE_3_ADR(_BASE))
#define PMA_TX_MGS_RO_SPARE_0_REG(_BASE) ((pma_tx_mgs_ro_spare_0_reg_t*) PMA_TX_MGS_RO_SPARE_0_ADR(_BASE))
#define PMA_TX_MGS_RO_SPARE_1_REG(_BASE) ((pma_tx_mgs_ro_spare_1_reg_t*) PMA_TX_MGS_RO_SPARE_1_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pma_tx_mgs_car_cfg_reg_t TX_CAR_CFG; /*< Address offset = 0x0 */
    pma_tx_mgs_car_cfg_ro_reg_t TX_CAR_CFG_RO; /*< Address offset = 0x4 */
    pma_tx_mgs_scratch_pad_0_reg_t TX_SCRATCH_PAD_0; /*< Address offset = 0x8 */
    pma_tx_mgs_scratch_pad_1_reg_t TX_SCRATCH_PAD_1; /*< Address offset = 0xc */
    pma_tx_mgs_scratch_pad_2_reg_t TX_SCRATCH_PAD_2; /*< Address offset = 0x10 */
    pma_tx_mgs_scratch_pad_3_reg_t TX_SCRATCH_PAD_3; /*< Address offset = 0x14 */
    pma_tx_mgs_scratch_pad_4_reg_t TX_SCRATCH_PAD_4; /*< Address offset = 0x18 */
    pma_tx_mgs_scratch_pad_5_reg_t TX_SCRATCH_PAD_5; /*< Address offset = 0x1c */
    pma_tx_mgs_scratch_pad_6_reg_t TX_SCRATCH_PAD_6; /*< Address offset = 0x20 */
    pma_tx_mgs_scratch_pad_7_reg_t TX_SCRATCH_PAD_7; /*< Address offset = 0x24 */
    pma_tx_mgs_ctrl_reg_t TX_CTRL; /*< Address offset = 0x28 */
    pma_tx_mgs_ctrl_ro_reg_t TX_CTRL_RO; /*< Address offset = 0x2c */
    pma_tx_mgs_pwr_mng_ctrl_reg_t TX_PWR_MNG_CTRL; /*< Address offset = 0x30 */
    pma_tx_mgs_pwr_mng_stat_reg_t TX_PWR_MNG_STAT; /*< Address offset = 0x34 */
    pma_tx_msg_fsm_cfg_reg_t TXFSM_CFG; /*< Address offset = 0x38 */
    pma_tx_mgs_mem_ctrl_reg_t TX_MEM_CTRL; /*< Address offset = 0x3c */
    pma_tx_mgs_mem_req_ctrl_reg_t TX_MEM_REQ_CTRL; /*< Address offset = 0x40 */
    pma_tx_mgs_stat_0_reg_t TX_STAT_0; /*< Address offset = 0x44 */
    pma_tx_mgs_stat_1_reg_t TX_STAT_1; /*< Address offset = 0x48 */
    pma_tx_mgs_stat_2_reg_t TX_STAT_2; /*< Address offset = 0x4c */
    pma_tx_msg_pcs_pcie_ctrl_reg_t TXPCS_PCIE_CTRL; /*< Address offset = 0x50 */
    pma_tx_msg_pcs_pcie_ctrl_ro_reg_t TXPCS_PCIE_CTRL_RO; /*< Address offset = 0x54 */
    pma_tx_msg_fsm_ratewidth_cfg_0_reg_t TXFSM_RATEWIDTH_CFG_0; /*< Address offset = 0x58 */
    pma_tx_msg_fsm_ratewidth_cfg_1_reg_t TXFSM_RATEWIDTH_CFG_1; /*< Address offset = 0x5c */
    pma_tx_msg_fsm_ratewidth_cfg_2_reg_t TXFSM_RATEWIDTH_CFG_2; /*< Address offset = 0x60 */
    pma_tx_msg_fsm_ratewidth_cfg_3_reg_t TXFSM_RATEWIDTH_CFG_3; /*< Address offset = 0x64 */
    pma_tx_msg_fsm_ratewidth_cfg_4_reg_t TXFSM_RATEWIDTH_CFG_4; /*< Address offset = 0x68 */
    pma_tx_msg_fsm_ratewidth_cfg_5_reg_t TXFSM_RATEWIDTH_CFG_5; /*< Address offset = 0x6c */
    pma_tx_msg_fsm_calmaster_pstate_cfg_reg_t TXFSM_CALMASTER_PSTATE_CFG; /*< Address offset = 0x70 */
    pma_tx_msg_fsm_calmaster_quad_cfg_reg_t TXFSM_CALMASTER_QUAD_CFG; /*< Address offset = 0x74 */
    pma_tx_msg_rpu_ctrl_reg_t TXRPU_CTRL; /*< Address offset = 0x78 */
    pma_tx_msg_rpu_lut_cfg_0_reg_t TXRPU_LUT_CFG_0; /*< Address offset = 0x7c */
    pma_tx_msg_rpu_lut_cfg_1_reg_t TXRPU_LUT_CFG_1; /*< Address offset = 0x80 */
    pma_tx_msg_rpu_lut_cfg_2_reg_t TXRPU_LUT_CFG_2; /*< Address offset = 0x84 */
    pma_tx_msg_rpu_lut_cfg_3_reg_t TXRPU_LUT_CFG_3; /*< Address offset = 0x88 */
    pma_tx_msg_rpu_lut_cfg_4_reg_t TXRPU_LUT_CFG_4; /*< Address offset = 0x8c */
    pma_tx_msg_rpu_evup_delay_cfg_0_reg_t TXRPU_EVUP_DELAY_CFG_0; /*< Address offset = 0x90 */
    pma_tx_msg_rpu_evup_delay_cfg_1_reg_t TXRPU_EVUP_DELAY_CFG_1; /*< Address offset = 0x94 */
    pma_tx_msg_rpu_evup_delay_cfg_2_reg_t TXRPU_EVUP_DELAY_CFG_2; /*< Address offset = 0x98 */
    pma_tx_msg_rpu_evup_delay_cfg_3_reg_t TXRPU_EVUP_DELAY_CFG_3; /*< Address offset = 0x9c */
    pma_tx_msg_rpu_evdn_delay_cfg_0_reg_t TXRPU_EVDN_DELAY_CFG_0; /*< Address offset = 0xa0 */
    pma_tx_msg_rpu_evdn_delay_cfg_1_reg_t TXRPU_EVDN_DELAY_CFG_1; /*< Address offset = 0xa4 */
    pma_tx_msg_rpu_evdn_delay_cfg_2_reg_t TXRPU_EVDN_DELAY_CFG_2; /*< Address offset = 0xa8 */
    pma_tx_mgs_rpu_event_cfg_0_reg_t TX_RPU_EVENT_CFG_0; /*< Address offset = 0xac */
    pma_tx_mgs_rpu_event_cfg_1_reg_t TX_RPU_EVENT_CFG_1; /*< Address offset = 0xb0 */
    pma_tx_mgs_rpu_event_cfg_2_reg_t TX_RPU_EVENT_CFG_2; /*< Address offset = 0xb4 */
    pma_tx_mgs_rpu_event_cfg_3_reg_t TX_RPU_EVENT_CFG_3; /*< Address offset = 0xb8 */
    pma_tx_mgs_rpu_event_cfg_4_reg_t TX_RPU_EVENT_CFG_4; /*< Address offset = 0xbc */
    pma_tx_mgs_rpu_event_cfg_5_reg_t TX_RPU_EVENT_CFG_5; /*< Address offset = 0xc0 */
    pma_tx_mgs_ctrl_out_0_reg_t TX_CTRL_OUT_0; /*< Address offset = 0xc4 */
    pma_tx_mgs_ctrl_out_1_reg_t TX_CTRL_OUT_1; /*< Address offset = 0xc8 */
    pma_tx_mgs_output_pin_ovrd_reg_t TX_OUTPUT_PIN_OVRD; /*< Address offset = 0xcc */
    pma_tx_mgs_output_pin_preovrd_reg_t TX_OUTPUT_PIN_PREOVRD; /*< Address offset = 0xd0 */
    pma_tx_mgs_brkpt_ctrl_reg_t TX_BRKPT_CTRL; /*< Address offset = 0xd4 */
    pma_tx_mgs_brkpt_stat_reg_t TX_BRKPT_STAT; /*< Address offset = 0xd8 */
    pma_tx_mgs_brkpt_clr_reg_t TX_BRKPT_CLR; /*< Address offset = 0xdc */
    pma_tx_mgs_datapath_stat_reg_t TX_DATAPATH_STAT; /*< Address offset = 0xe0 */
    pma_tx_mgs_ckm_ctrl_0_reg_t TX_CKM_CTRL_0; /*< Address offset = 0xe4 */
    pma_tx_mgs_ckm_ctrl_1_reg_t TX_CKM_CTRL_1; /*< Address offset = 0xe8 */
    pma_tx_mgs_ckm_ctrl_2_reg_t TX_CKM_CTRL_2; /*< Address offset = 0xec */
    pma_tx_mgs_ckm_stat_reg_t TX_CKM_STAT; /*< Address offset = 0xf0 */
    pma_tx_msg_txword_clk_ctrl_reg_t TXWORD_CLK_CTRL; /*< Address offset = 0xf4 */
    pma_tx_msg_txword_clk_obs_reg_t TXWORD_CLK_OBS; /*< Address offset = 0xf8 */
    pma_tx_msg_txelecidle_pin_ovrd_reg_t TXELECIDLE_PIN_OVRD; /*< Address offset = 0xfc */
    pma_tx_msg_txdrv_txffe_coeff_pin_ovrd_0_reg_t TXDRV_TXFFE_COEFF_PIN_OVRD_0; /*< Address offset = 0x100 */
    pma_tx_msg_txdrv_txffe_coeff_pin_ovrd_1_reg_t TXDRV_TXFFE_COEFF_PIN_OVRD_1; /*< Address offset = 0x104 */
    const uint8_t        reservedArea0 [744]; /*< Address offset = 0x108 */
    pma_tx_msg_bist_cfg_0_reg_t TXBIST_CFG_0; /*< Address offset = 0x3f0 */
    pma_tx_msg_bist_cfg_1_reg_t TXBIST_CFG_1; /*< Address offset = 0x3f4 */
    pma_tx_msg_bist_seed_reg_t TXBIST_SEED; /*< Address offset = 0x3f8 */
    pma_tx_msg_bist_udp_vf00_reg_t TXBIST_UDP_VF00; /*< Address offset = 0x3fc */
    pma_tx_msg_bist_udp_vf01_reg_t TXBIST_UDP_VF01; /*< Address offset = 0x400 */
    pma_tx_msg_bist_udp_vf02_reg_t TXBIST_UDP_VF02; /*< Address offset = 0x404 */
    pma_tx_msg_bist_udp_vf03_reg_t TXBIST_UDP_VF03; /*< Address offset = 0x408 */
    pma_tx_msg_bist_udp_vf04_reg_t TXBIST_UDP_VF04; /*< Address offset = 0x40c */
    pma_tx_msg_bist_udp_vf05_reg_t TXBIST_UDP_VF05; /*< Address offset = 0x410 */
    pma_tx_msg_bist_udp_vf06_reg_t TXBIST_UDP_VF06; /*< Address offset = 0x414 */
    pma_tx_msg_bist_udp_vf07_reg_t TXBIST_UDP_VF07; /*< Address offset = 0x418 */
    pma_tx_msg_bist_udp_vf08_reg_t TXBIST_UDP_VF08; /*< Address offset = 0x41c */
    pma_tx_msg_bist_udp_vf09_reg_t TXBIST_UDP_VF09; /*< Address offset = 0x420 */
    const uint8_t        reservedArea1 [204]; /*< Address offset = 0x424 */
    pma_tx_msg_txfifo_ctrl_0_reg_t TXFIFO_CTRL_0; /*< Address offset = 0x4f0 */
    pma_tx_msg_txfifo_ctrl_1_reg_t TXFIFO_CTRL_1; /*< Address offset = 0x4f4 */
    pma_tx_msg_txfifo_txbti_0_reg_t TXFIFO_TXBTI_0; /*< Address offset = 0x4f8 */
    pma_tx_msg_txworderr_0_reg_t TXWORDERR_0; /*< Address offset = 0x4fc */
    pma_tx_msg_txworderr_1_reg_t TXWORDERR_1; /*< Address offset = 0x500 */
    pma_tx_msg_txworderr_2_reg_t TXWORDERR_2; /*< Address offset = 0x504 */
    pma_tx_msg_txworderr_3_reg_t TXWORDERR_3; /*< Address offset = 0x508 */
    pma_tx_msg_txworderr_4_reg_t TXWORDERR_4; /*< Address offset = 0x50c */
    pma_tx_msg_txworderr_5_reg_t TXWORDERR_5; /*< Address offset = 0x510 */
    pma_tx_msg_txfifo_kill__0_reg_t TXFIFO_KILL__0; /*< Address offset = 0x514 */
    pma_tx_msg_txfifo_kill__1_reg_t TXFIFO_KILL__1; /*< Address offset = 0x518 */
    pma_tx_msg_txfifo_stat_0_reg_t TXFIFO_STAT_0; /*< Address offset = 0x51c */
    pma_tx_msg_txffe_enc0_ctrl_reg_t TXFFE_ENC0_CTRL; /*< Address offset = 0x520 */
    const uint8_t        reservedArea2 [2736]; /*< Address offset = 0x524 */
    pma_tx_mgs_rw_spare_0_reg_t TX_RW_SPARE_0; /*< Address offset = 0xfd4 */
    pma_tx_mgs_rw_spare_1_reg_t TX_RW_SPARE_1; /*< Address offset = 0xfd8 */
    pma_tx_mgs_rw_spare_2_reg_t TX_RW_SPARE_2; /*< Address offset = 0xfdc */
    pma_tx_mgs_rw_spare_3_reg_t TX_RW_SPARE_3; /*< Address offset = 0xfe0 */
    pma_tx_mgs_ro_spare_0_reg_t TX_RO_SPARE_0; /*< Address offset = 0xfe4 */
    pma_tx_mgs_ro_spare_1_reg_t TX_RO_SPARE_1; /*< Address offset = 0xfe8 */
} pma_tx_msg_t;     // size: 0x0188

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PMA0_TX_GLOBAL  ((pma_tx_msg_t*) DLNK_JESD0_PHY_PMA0_TX_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PMA0_TX_Q0      ((pma_tx_msg_t*) DLNK_JESD0_PHY_PMA0_TX_Q0_BASE)
#define DLNK_JESD0_PHY_PMA0_TX_Q1      ((pma_tx_msg_t*) DLNK_JESD0_PHY_PMA0_TX_Q1_BASE)
#define DLNK_JESD0_PHY_PMA0_TX_Q2      ((pma_tx_msg_t*) DLNK_JESD0_PHY_PMA0_TX_Q2_BASE)
#define DLNK_JESD0_PHY_PMA0_TX_Q3      ((pma_tx_msg_t*) DLNK_JESD0_PHY_PMA0_TX_Q3_BASE)
#define DLNK_JESD1_PHY_PMA0_TX_GLOBAL  ((pma_tx_msg_t*) DLNK_JESD1_PHY_PMA0_TX_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PMA0_TX_Q0      ((pma_tx_msg_t*) DLNK_JESD1_PHY_PMA0_TX_Q0_BASE)
#define DLNK_JESD1_PHY_PMA0_TX_Q1      ((pma_tx_msg_t*) DLNK_JESD1_PHY_PMA0_TX_Q1_BASE)
#define DLNK_JESD1_PHY_PMA0_TX_Q2      ((pma_tx_msg_t*) DLNK_JESD1_PHY_PMA0_TX_Q2_BASE)
#define DLNK_JESD1_PHY_PMA0_TX_Q3      ((pma_tx_msg_t*) DLNK_JESD1_PHY_PMA0_TX_Q3_BASE)
#define DLNK_JESD2_PHY_PMA0_TX_GLOBAL  ((pma_tx_msg_t*) DLNK_JESD2_PHY_PMA0_TX_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PMA0_TX_Q0      ((pma_tx_msg_t*) DLNK_JESD2_PHY_PMA0_TX_Q0_BASE)
#define DLNK_JESD2_PHY_PMA0_TX_Q1      ((pma_tx_msg_t*) DLNK_JESD2_PHY_PMA0_TX_Q1_BASE)
#define DLNK_JESD2_PHY_PMA0_TX_Q2      ((pma_tx_msg_t*) DLNK_JESD2_PHY_PMA0_TX_Q2_BASE)
#define DLNK_JESD2_PHY_PMA0_TX_Q3      ((pma_tx_msg_t*) DLNK_JESD2_PHY_PMA0_TX_Q3_BASE)
#define DLNK_JESD3_PHY_PMA0_TX_GLOBAL  ((pma_tx_msg_t*) DLNK_JESD3_PHY_PMA0_TX_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PMA0_TX_Q0      ((pma_tx_msg_t*) DLNK_JESD3_PHY_PMA0_TX_Q0_BASE)
#define DLNK_JESD3_PHY_PMA0_TX_Q1      ((pma_tx_msg_t*) DLNK_JESD3_PHY_PMA0_TX_Q1_BASE)
#define DLNK_JESD3_PHY_PMA0_TX_Q2      ((pma_tx_msg_t*) DLNK_JESD3_PHY_PMA0_TX_Q2_BASE)
#define DLNK_JESD3_PHY_PMA0_TX_Q3      ((pma_tx_msg_t*) DLNK_JESD3_PHY_PMA0_TX_Q3_BASE)

// ******************************************* /Address Space

#endif      // _PMA_TX_MSG_H_

