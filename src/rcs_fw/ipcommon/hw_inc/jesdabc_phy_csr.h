#ifndef _JESDABC_PHY_CSR_H_
#define _JESDABC_PHY_CSR_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
//    Soc ver:
//        abc_soc-srvrgen4-0p6_emul-23ww51a
//
//
//    Tool Version:
//        23.38.4p2
//
//    Generation Date:
//        2024-01-02
//
// ******************************************************************************

// ******************************************* Base address macros

// Stepping: A0
//

#define DLNK_JESDABC0_PHY_CSR_BASE  0x06700000
#define DLNK_JESDABC1_PHY_CSR_BASE  0x06f00000
#define DLNK_JESDABC2_PHY_CSR_BASE  0x07700000
#define DLNK_JESDABC3_PHY_CSR_BASE  0x07f00000

// ******************************************* /Base address macros


// ******************************************* Register offset macros

// Stepping: A0
//
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_OFFSET ( 0x00000000U )
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_OFFSET ( 0x00000004U )
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_OFFSET ( 0x00000008U )
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_OFFSET ( 0x0000000cU )
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_OFFSET ( 0x00000010U )
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_OFFSET ( 0x00000014U )
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_OFFSET ( 0x00000018U )
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_OFFSET ( 0x00000040U )
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_OFFSET ( 0x00000044U )
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_OFFSET ( 0x00000048U )
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_OFFSET ( 0x0000004cU )
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_OFFSET ( 0x00000050U )
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_OFFSET ( 0x00000054U )
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_OFFSET ( 0x00000058U )
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_OFFSET ( 0x0000005cU )
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_OFFSET ( 0x00000060U )
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_OFFSET ( 0x00000080U )
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_OFFSET ( 0x00000084U )
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_OFFSET ( 0x000000c0U )
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_OFFSET ( 0x000000c4U )
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_OFFSET ( 0x000000c8U )
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_OFFSET ( 0x000000ccU )
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_OFFSET ( 0x000000d0U )
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_OFFSET ( 0x000000d4U )
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_OFFSET ( 0x00000100U )
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_OFFSET ( 0x00000104U )
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_OFFSET ( 0x00000108U )
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_OFFSET ( 0x0000010cU )
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_OFFSET ( 0x00000110U )
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_OFFSET ( 0x00000114U )
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_OFFSET ( 0x00000118U )
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_OFFSET ( 0x00000140U )
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_OFFSET ( 0x00000144U )
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_OFFSET ( 0x00000148U )
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_OFFSET ( 0x0000014cU )
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_OFFSET ( 0x00000150U )
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_OFFSET ( 0x00000154U )
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_OFFSET ( 0x00000158U )
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_OFFSET ( 0x0000015cU )
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_OFFSET ( 0x00000160U )
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_OFFSET ( 0x00000180U )
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_OFFSET ( 0x00000184U )
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_OFFSET ( 0x000001c0U )
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_OFFSET ( 0x000001c4U )
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_OFFSET ( 0x000001c8U )
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_OFFSET ( 0x000001ccU )
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_OFFSET ( 0x000001d0U )
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_OFFSET ( 0x000001d4U )
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_OFFSET ( 0x00000200U )
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_OFFSET ( 0x00000204U )
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_OFFSET ( 0x00000208U )
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_OFFSET ( 0x0000020cU )
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_OFFSET ( 0x00000210U )
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_OFFSET ( 0x00000214U )
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_OFFSET ( 0x00000218U )
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_OFFSET ( 0x00000240U )
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_OFFSET ( 0x00000244U )
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_OFFSET ( 0x00000248U )
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_OFFSET ( 0x0000024cU )
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_OFFSET ( 0x00000250U )
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_OFFSET ( 0x00000254U )
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_OFFSET ( 0x00000258U )
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_OFFSET ( 0x0000025cU )
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_OFFSET ( 0x00000260U )
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_OFFSET ( 0x00000280U )
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_OFFSET ( 0x00000284U )
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_OFFSET ( 0x000002c0U )
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_OFFSET ( 0x000002c4U )
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_OFFSET ( 0x000002c8U )
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_OFFSET ( 0x000002ccU )
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_OFFSET ( 0x000002d0U )
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_OFFSET ( 0x000002d4U )
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_OFFSET ( 0x00000300U )
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_OFFSET ( 0x00000304U )
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_OFFSET ( 0x00000308U )
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_OFFSET ( 0x0000030cU )
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_OFFSET ( 0x00000310U )
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_OFFSET ( 0x00000314U )
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_OFFSET ( 0x00000318U )
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_OFFSET ( 0x00000340U )
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_OFFSET ( 0x00000344U )
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_OFFSET ( 0x00000348U )
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_OFFSET ( 0x0000034cU )
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_OFFSET ( 0x00000350U )
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_OFFSET ( 0x00000354U )
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_OFFSET ( 0x00000358U )
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_OFFSET ( 0x0000035cU )
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_OFFSET ( 0x00000360U )
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_OFFSET ( 0x00000380U )
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_OFFSET ( 0x00000384U )
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_OFFSET ( 0x000003c0U )
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_OFFSET ( 0x000003c4U )
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_OFFSET ( 0x000003c8U )
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_OFFSET ( 0x000003ccU )
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_OFFSET ( 0x000003d0U )
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_OFFSET ( 0x000003d4U )
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_OFFSET ( 0x00000400U )
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_OFFSET ( 0x00000404U )
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_OFFSET ( 0x00000408U )
#define JESDABC_PHY_CSR_MEM_CMN_RDY_OFFSET ( 0x00000440U )
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_OFFSET ( 0x00000444U )
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_OFFSET ( 0x00000448U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
// Stepping: A0
//
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_CMN_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_CMN_RDY_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_OFFSET ) ))
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_ADR(_BASE) (( ( _BASE ) + ( JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_PLL_FORCE_PWR_UP register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_PLL_FORCE_PWR_UP
  * TX PLL powerup force enable.
  */

typedef union {
  struct {
    uint32_t LN_FORCE_RATE_REQ : 2;
    ///< Indicates which of the four frequency from programmed configuration
    ///< bank to select. Only used when ln_force_pwr_up is set.
    ///< 0 - Freq A configuration bank.
    ///< 1 - Freq B configuration bank.
    ///< 2 - Freq C configuration bank.
    ///< 3 - Freq D configuration bank.
    ///< 4 - Freq E configuration bank.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LN_FORCE_PWR_UP : 1;
    ///< TX PLL powerup force enable. Under normal operation TXPLL block is
    ///< powered up/down as needed by internal circuits.
    ///< If asserted, TXPLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force TXPLL powerup.
    ///< 1: Force TXPLL block powerup
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_pll_force_pwr_up_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_RD_MASK (0x00000013U)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_WR_MASK (0x00000013U)


///< Indicates which of the four frequency from programmed configuration
///< bank to select. Only used when ln_force_pwr_up is set.
///< 0 - Freq A configuration bank.
///< 1 - Freq B configuration bank.
///< 2 - Freq C configuration bank.
///< 3 - Freq D configuration bank.
///< 4 - Freq E configuration bank.
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_MSK (0x00000003)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_DEF (0x00000000)

///< TX PLL powerup force enable. Under normal operation TXPLL block is
///< powered up/down as needed by internal circuits.
///< If asserted, TXPLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force TXPLL powerup.
///< 1: Force TXPLL block powerup
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_MSK (0x00000010)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_PSTATE register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_PSTATE
  * TX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< TX lane power down state control.
    ///< 3'd0: TXPD                                               3'd1: Reserved
    ///< 3'd2: TXP3                                               3'd3: TXP2
    ///< 3'd4: TXP1                                               3'd5: TXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_WR_MASK (0x00000007U)


///< TX lane power down state control.
///< 3'd0: TXPD                                               3'd1: Reserved
///< 3'd2: TXP3                                               3'd3: TXP2
///< 3'd4: TXP1                                               3'd5: TXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_FREQ_RATE register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_FREQ_RATE
  * TX frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< TX frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_WR_MASK (0x00000007U)


///< TX frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_RATE_DIV register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_RATE_DIV
  * TX datapath divider setting
  */

typedef union {
  struct {
    uint32_t LN_RATE_DIV : 4;
    ///< TX datapath divider setting.
    ///< 3'b000: Divide by 1
    ///< 3'b001: Divide by 2
    ///< 3'b010: Divide by 4
    ///< 3'b011: Divide by 8
    ///< 3'b100: Divide by 16
    ///< Others: Illegal
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_rate_div_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_WR_MASK (0x0000000fU)


///< TX datapath divider setting.
///< 3'b000: Divide by 1
///< 3'b001: Divide by 2
///< 3'b010: Divide by 4
///< 3'b011: Divide by 8
///< 3'b100: Divide by 16
///< Others: Illegal
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_LN_RATE_DIV_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_LN_RATE_DIV_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_LN_RATE_DIV_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_LN_RATE_DIV_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_MODULATION register description at address offset 0x10
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_MODULATION
  * TX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< TX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for TX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding for PAM4
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding for PAM4
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_WR_MASK (0x000000ffU)


///< TX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for TX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_DATA_CLK_DIV_RATE register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_DATA_CLK_DIV_RATE
  * Transmit input word clock speed indicator
  */

typedef union {
  struct {
    uint32_t LN_CLK_DIV_RATE : 3;
    ///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
    ///< is faster than the expected clock frequency.             Example:
    ///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
    ///< frequency is 250 MHz.            This value must be set so that the
    ///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
    ///< 3'd0: Transmit every cycle
    ///< 3'd1: Transmit every 2 cycles
    ///< 3'd2: Transmit every 4 cycles
    ///< 3'd3: Transmit every 8 cycles
    ///< 3'd4: Transmit every 16 cycles            Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_data_clk_div_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_WR_MASK (0x00000007U)


///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
///< is faster than the expected clock frequency.             Example:
///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
///< frequency is 250 MHz.            This value must be set so that the
///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
///< 3'd0: Transmit every cycle
///< 3'd1: Transmit every 2 cycles
///< 3'd2: Transmit every 4 cycles
///< 3'd3: Transmit every 8 cycles
///< 3'd4: Transmit every 16 cycles            Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_ELEC_IDLE register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_ELEC_IDLE
  * Tx Electrical idle
  */

typedef union {
  struct {
    uint32_t LN_ELEC_IDLE : 1;
    ///< Tx Electrical idle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_elec_idle_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_WR_MASK (0x00000001U)


///< Tx Electrical idle
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_LN_ELEC_IDLE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_LN_ELEC_IDLE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_LN_ELEC_IDLE_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_LN_ELEC_IDLE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_PSTATE register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_PSTATE
  * RX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< RX lane power down state control.
    ///< 3'd0: RXPD                                               3'd1: Reserved
    ///< 3'd2: RXP3                                               3'd3: RXP2
    ///< 3'd4: RXP1                                               3'd5: RXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_WR_MASK (0x00000007U)


///< RX lane power down state control.
///< 3'd0: RXPD                                               3'd1: Reserved
///< 3'd2: RXP3                                               3'd3: RXP2
///< 3'd4: RXP1                                               3'd5: RXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_FREQ_RATE register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_FREQ_RATE
  * RX DCO frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< RX DCO frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_WR_MASK (0x00000007U)


///< RX DCO frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_MODE_SEL register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_MODE_SEL
  * RX mode select
  */

typedef union {
  struct {
    uint32_t LN_MODE_SEL : 4;
    ///< TBD.  This will be a LUT index to for rx rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_mode_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_WR_MASK (0x0000000fU)


///< TBD.  This will be a LUT index to for rx rate
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_LN_MODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_LN_MODE_SEL_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_LN_MODE_SEL_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_LN_MODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_MODULATION register description at address offset 0x4c
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_MODULATION
  * RX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< RX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for RX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding on RX Datapath for PAM4. Not implemented
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_WR_MASK (0x000000ffU)


///< RX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for RX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding on RX Datapath for PAM4. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_OVR_SMPL register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_OVR_SMPL
  * Rx Oversample Control
  */

typedef union {
  struct {
    uint32_t LN_OVR_SMPL_EN : 1;
    ///< Enables the Differential Manchester Encoding (DME) mode of the receiver
    ///< that can be used for Ethernet link training hardware outside the UXPHY.
    ///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
    ///< and it will blindly sample the incoming data at the configured data
    ///< rate.            Feature can also be used for low data rate application
    ///< where oversampling is desired.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA : 1;
    ///< The UXPHY will automatically switch between LTR and LTD.
    ///< This override allows hardware outside the UXPHY to control whether
    ///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
    ///< must be asserted                                                1'b0:
    ///< CDR lock to reference
    ///< 1'b1: CDR lock to data
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA_EN : 1;
    ///< Controls whether the receiver is in LTR or LTD via the internal PHY
    ///< hardware or from the PHY pin interface
    ///< 1'b0: CDR locks to data/reference via internal logic
    ///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_ovr_smpl_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_WR_MASK (0x00000007U)


///< Enables the Differential Manchester Encoding (DME) mode of the receiver
///< that can be used for Ethernet link training hardware outside the UXPHY.
///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
///< and it will blindly sample the incoming data at the configured data
///< rate.            Feature can also be used for low data rate application
///< where oversampling is desired.
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_OVR_SMPL_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_OVR_SMPL_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_OVR_SMPL_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_OVR_SMPL_EN_BF_DEF (0x00000000)

///< The UXPHY will automatically switch between LTR and LTD.
///< This override allows hardware outside the UXPHY to control whether
///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
///< must be asserted                                                1'b0:
///< CDR lock to reference
///< 1'b1: CDR lock to data
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_BF_DEF (0x00000000)

///< Controls whether the receiver is in LTR or LTD via the internal PHY
///< hardware or from the PHY pin interface
///< 1'b0: CDR locks to data/reference via internal logic
///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_OFF ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_MSK (0x00000004)
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_EQ_PRECAL_SEL register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_EQ_PRECAL_SEL
  * Initial RX eq setting control
  */

typedef union {
  struct {
    uint32_t LN_PRECAL_CODE_SEL : 3;
    ///< Initial RX eq setting control. Selects between 8 possible equalization
    ///< settings to be used prior to RX equalization being run.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_eq_precal_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_WR_MASK (0x00000007U)


///< Initial RX eq setting control. Selects between 8 possible equalization
///< settings to be used prior to RX equalization being run.
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_EQ_STATIC_EN register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_EQ_STATIC_EN
  * RX equalization static setting control
  */

typedef union {
  struct {
    uint32_t LN_EQ_STATIC_EN : 1;
    ///< RX equalization static setting control. Should be asserted in PCIe
    ///< Gen1/2, deasserted otherwise
    ///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
    ///< or via RX equalization run
    ///< 1 - Use static equalization settings set in memory
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_eq_static_en_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_WR_MASK (0x00000001U)


///< RX equalization static setting control. Should be asserted in PCIe
///< Gen1/2, deasserted otherwise
///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
///< or via RX equalization run
///< 1 - Use static equalization settings set in memory
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_EQ_ADPAT_START register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_EQ_ADPAT_START
  * RX equalization start indicator
  */

typedef union {
  struct {
    uint32_t LN_APADT_START : 1;
    ///< RX equalization start indicator. When asserted, PHY will perform RX
    ///< equalization.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_eq_adpat_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_WR_MASK (0x00000001U)


///< RX equalization start indicator. When asserted, PHY will perform RX
///< equalization.
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_LN_APADT_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_LN_APADT_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_LN_APADT_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_LN_APADT_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_EYE_MEAS_START register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_EYE_MEAS_START
  * RX Eye diagram start indicator.
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_START : 1;
    ///< RX Eye diagram start indicator. When asserted, PHY will perform an
    ///< eye diagram.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_eye_meas_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_WR_MASK (0x00000001U)


///< RX Eye diagram start indicator. When asserted, PHY will perform an
///< eye diagram.
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_LN_EYE_MEAS_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_LN_EYE_MEAS_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_LN_EYE_MEAS_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_LN_EYE_MEAS_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_PLL_RDY register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_PLL_RDY
  * TX PLL Ready Status
  */

typedef union {
  struct {
    uint32_t LN_PLL_READY : 1;
    ///< TX PLL ready signal, indicating TX PLL is fully powered up.
    ///< 1'b0: TX PLL is not ready.
    ///< 1'b1: TX PLL is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t LN_PLL_LOCK_STATUS : 1;
    ///< TXPLL lock status indicating that the TX PLL is locked to its reference
    ///< clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_pll_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_WR_MASK (0x00000000U)


///< TX PLL ready signal, indicating TX PLL is fully powered up.
///< 1'b0: TX PLL is not ready.
///< 1'b1: TX PLL is ready.
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_READY_BF_DEF (0x00000000)

///< TXPLL lock status indicating that the TX PLL is locked to its reference
///< clock.
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_LOCK_STATUS_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_LOCK_STATUS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_LOCK_STATUS_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_LN_PLL_LOCK_STATUS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L0_CFG_STS register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L0_CFG_STS
  * Transmit lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Transmit lane state transition status. Indicates when the PMA has
    ///< completed a requested state transition.
    ///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l0_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_WR_MASK (0x00000000U)


///< Transmit lane state transition status. Indicates when the PMA has
///< completed a requested state transition.
///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_CFG_STS register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_CFG_STS
  * Receive lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Receive lane state transition status. Indicates when the PMA has completed
    ///< a requested state transition.
    ///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_WR_MASK (0x00000000U)


///< Receive lane state transition status. Indicates when the PMA has completed
///< a requested state transition.
///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_CDR_LK2_DATA register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_CDR_LK2_DATA
  * RX CDR data lock indicator
  */

typedef union {
  struct {
    uint32_t LN_CDR_LK2_DATA : 1;
    ///< RX CDR data lock indicator
    ///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
    ///< is valid
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_cdr_lk2_data_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_WR_MASK (0x00000000U)


///< RX CDR data lock indicator
///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
///< is valid
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_SIG_DETECT register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_SIG_DETECT
  * Receiver signal detect indicator
  */

typedef union {
  struct {
    uint32_t LN_SIG_DETECT : 1;
    ///< Receiver signal detect indicator.
    ///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
    ///< detected on xia_rx_n_l0/xia_rx_p_l0
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_sig_detect_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_WR_MASK (0x00000000U)


///< Receiver signal detect indicator.
///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
///< detected on xia_rx_n_l0/xia_rx_p_l0
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_LN_SIG_DETECT_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_LN_SIG_DETECT_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_LN_SIG_DETECT_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_LN_SIG_DETECT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_CDR_FREQ_LK_STS register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_CDR_FREQ_LK_STS
  * CDR lock Status
  */

typedef union {
  struct {
    uint32_t CDR_LOCK : 1;
    ///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
    ///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
    ///< within the PPM threshold programmed in memory       If deasserted
    ///< when expected to be asserted, indicates a fault condition.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_cdr_freq_lk_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_WR_MASK (0x00000000U)


///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
///< within the PPM threshold programmed in memory       If deasserted
///< when expected to be asserted, indicates a fault condition.
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_CDR_LOCK_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_CDR_LOCK_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_CDR_LOCK_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_CDR_LOCK_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_EQ_ADAPT_STS register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_EQ_ADAPT_STS
  * RX Equalisation Adapt Status
  */

typedef union {
  struct {
    uint32_t LN_EQ_MEAS_VAL : 14;
    ///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EQ_ADAPT_DONE : 1;
    ///< RX equalization done indicator. When asserted, indicates requested
    ///< RX equalization routine is complete.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_eq_adapt_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_RD_MASK (0x00013fffU)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_WR_MASK (0x00000000U)


///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_DEF (0x00000000)

///< RX equalization done indicator. When asserted, indicates requested
///< RX equalization routine is complete.
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L0_EYE_MEAS_STS register description at address offset 0xd4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L0_EYE_MEAS_STS
  * RX Eye Measurement Status
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_VAL : 14;
    ///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EYE_MEAS_ERR : 1;
    ///< RX eye error indicator. If asserted, indicates requested eye diagram
    ///< measurement had an error.Valid only if ln_eye_meas_done is set.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t LN_EYE_MEAS_DONE : 1;
    ///< RX eye done indicator. When asserted, indicates requested eye diagram
    ///< measurement is complete.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l0_eye_meas_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_RD_MASK (0x00033fffU)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_WR_MASK (0x00000000U)


///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_DEF (0x00000000)

///< RX eye error indicator. If asserted, indicates requested eye diagram
///< measurement had an error.Valid only if ln_eye_meas_done is set.
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_DEF (0x00000000)

///< RX eye done indicator. When asserted, indicates requested eye diagram
///< measurement is complete.
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_OFF (17)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_MSK (0x00020000)
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_PLL_FORCE_PWR_UP register description at address offset 0x100
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_PLL_FORCE_PWR_UP
  * TX PLL powerup force enable.
  */

typedef union {
  struct {
    uint32_t LN_FORCE_RATE_REQ : 2;
    ///< Indicates which of the four frequency from programmed configuration
    ///< bank to select. Only used when ln_force_pwr_up is set.
    ///< 0 - Freq A configuration bank.
    ///< 1 - Freq B configuration bank.
    ///< 2 - Freq C configuration bank.
    ///< 3 - Freq D configuration bank.
    ///< 4 - Freq E configuration bank.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LN_FORCE_PWR_UP : 1;
    ///< TX PLL powerup force enable. Under normal operation TXPLL block is
    ///< powered up/down as needed by internal circuits.
    ///< If asserted, TXPLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force TXPLL powerup.
    ///< 1: Force TXPLL block powerup
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_pll_force_pwr_up_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_RD_MASK (0x00000013U)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_WR_MASK (0x00000013U)


///< Indicates which of the four frequency from programmed configuration
///< bank to select. Only used when ln_force_pwr_up is set.
///< 0 - Freq A configuration bank.
///< 1 - Freq B configuration bank.
///< 2 - Freq C configuration bank.
///< 3 - Freq D configuration bank.
///< 4 - Freq E configuration bank.
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_MSK (0x00000003)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_DEF (0x00000000)

///< TX PLL powerup force enable. Under normal operation TXPLL block is
///< powered up/down as needed by internal circuits.
///< If asserted, TXPLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force TXPLL powerup.
///< 1: Force TXPLL block powerup
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_MSK (0x00000010)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_PSTATE register description at address offset 0x104
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_PSTATE
  * TX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< TX lane power down state control.
    ///< 3'd0: TXPD                                               3'd1: Reserved
    ///< 3'd2: TXP3                                               3'd3: TXP2
    ///< 3'd4: TXP1                                               3'd5: TXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_WR_MASK (0x00000007U)


///< TX lane power down state control.
///< 3'd0: TXPD                                               3'd1: Reserved
///< 3'd2: TXP3                                               3'd3: TXP2
///< 3'd4: TXP1                                               3'd5: TXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_FREQ_RATE register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_FREQ_RATE
  * TX frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< TX frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_WR_MASK (0x00000007U)


///< TX frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_RATE_DIV register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_RATE_DIV
  * TX datapath divider setting
  */

typedef union {
  struct {
    uint32_t LN_RATE_DIV : 4;
    ///< TX datapath divider setting.
    ///< 3'b000: Divide by 1
    ///< 3'b001: Divide by 2
    ///< 3'b010: Divide by 4
    ///< 3'b011: Divide by 8
    ///< 3'b100: Divide by 16
    ///< Others: Illegal
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_rate_div_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_WR_MASK (0x0000000fU)


///< TX datapath divider setting.
///< 3'b000: Divide by 1
///< 3'b001: Divide by 2
///< 3'b010: Divide by 4
///< 3'b011: Divide by 8
///< 3'b100: Divide by 16
///< Others: Illegal
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_LN_RATE_DIV_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_LN_RATE_DIV_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_LN_RATE_DIV_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_LN_RATE_DIV_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_MODULATION register description at address offset 0x110
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_MODULATION
  * TX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< TX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for TX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding for PAM4
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding for PAM4
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_WR_MASK (0x000000ffU)


///< TX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for TX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_DATA_CLK_DIV_RATE register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_DATA_CLK_DIV_RATE
  * Transmit input word clock speed indicator
  */

typedef union {
  struct {
    uint32_t LN_CLK_DIV_RATE : 3;
    ///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
    ///< is faster than the expected clock frequency.             Example:
    ///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
    ///< frequency is 250 MHz.            This value must be set so that the
    ///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
    ///< 3'd0: Transmit every cycle
    ///< 3'd1: Transmit every 2 cycles
    ///< 3'd2: Transmit every 4 cycles
    ///< 3'd3: Transmit every 8 cycles
    ///< 3'd4: Transmit every 16 cycles            Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_data_clk_div_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_WR_MASK (0x00000007U)


///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
///< is faster than the expected clock frequency.             Example:
///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
///< frequency is 250 MHz.            This value must be set so that the
///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
///< 3'd0: Transmit every cycle
///< 3'd1: Transmit every 2 cycles
///< 3'd2: Transmit every 4 cycles
///< 3'd3: Transmit every 8 cycles
///< 3'd4: Transmit every 16 cycles            Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_ELEC_IDLE register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_ELEC_IDLE
  * Tx Electrical idle
  */

typedef union {
  struct {
    uint32_t LN_ELEC_IDLE : 1;
    ///< Tx Electrical idle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_elec_idle_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_WR_MASK (0x00000001U)


///< Tx Electrical idle
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_LN_ELEC_IDLE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_LN_ELEC_IDLE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_LN_ELEC_IDLE_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_LN_ELEC_IDLE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_PSTATE register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_PSTATE
  * RX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< RX lane power down state control.
    ///< 3'd0: RXPD                                               3'd1: Reserved
    ///< 3'd2: RXP3                                               3'd3: RXP2
    ///< 3'd4: RXP1                                               3'd5: RXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_WR_MASK (0x00000007U)


///< RX lane power down state control.
///< 3'd0: RXPD                                               3'd1: Reserved
///< 3'd2: RXP3                                               3'd3: RXP2
///< 3'd4: RXP1                                               3'd5: RXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_FREQ_RATE register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_FREQ_RATE
  * RX DCO frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< RX DCO frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_WR_MASK (0x00000007U)


///< RX DCO frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_MODE_SEL register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_MODE_SEL
  * RX mode select
  */

typedef union {
  struct {
    uint32_t LN_MODE_SEL : 4;
    ///< TBD.  This will be a LUT index to for rx rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_mode_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_WR_MASK (0x0000000fU)


///< TBD.  This will be a LUT index to for rx rate
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_LN_MODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_LN_MODE_SEL_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_LN_MODE_SEL_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_LN_MODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_MODULATION register description at address offset 0x14c
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_MODULATION
  * RX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< RX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for RX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding on RX Datapath for PAM4. Not implemented
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_WR_MASK (0x000000ffU)


///< RX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for RX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding on RX Datapath for PAM4. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_OVR_SMPL register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_OVR_SMPL
  * Rx Oversample Control
  */

typedef union {
  struct {
    uint32_t LN_OVR_SMPL_EN : 1;
    ///< Enables the Differential Manchester Encoding (DME) mode of the receiver
    ///< that can be used for Ethernet link training hardware outside the UXPHY.
    ///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
    ///< and it will blindly sample the incoming data at the configured data
    ///< rate.            Feature can also be used for low data rate application
    ///< where oversampling is desired.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA : 1;
    ///< The UXPHY will automatically switch between LTR and LTD.
    ///< This override allows hardware outside the UXPHY to control whether
    ///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
    ///< must be asserted                                                1'b0:
    ///< CDR lock to reference
    ///< 1'b1: CDR lock to data
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA_EN : 1;
    ///< Controls whether the receiver is in LTR or LTD via the internal PHY
    ///< hardware or from the PHY pin interface
    ///< 1'b0: CDR locks to data/reference via internal logic
    ///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_ovr_smpl_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_WR_MASK (0x00000007U)


///< Enables the Differential Manchester Encoding (DME) mode of the receiver
///< that can be used for Ethernet link training hardware outside the UXPHY.
///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
///< and it will blindly sample the incoming data at the configured data
///< rate.            Feature can also be used for low data rate application
///< where oversampling is desired.
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_OVR_SMPL_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_OVR_SMPL_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_OVR_SMPL_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_OVR_SMPL_EN_BF_DEF (0x00000000)

///< The UXPHY will automatically switch between LTR and LTD.
///< This override allows hardware outside the UXPHY to control whether
///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
///< must be asserted                                                1'b0:
///< CDR lock to reference
///< 1'b1: CDR lock to data
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_BF_DEF (0x00000000)

///< Controls whether the receiver is in LTR or LTD via the internal PHY
///< hardware or from the PHY pin interface
///< 1'b0: CDR locks to data/reference via internal logic
///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_OFF ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_MSK (0x00000004)
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_EQ_PRECAL_SEL register description at address offset 0x154
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_EQ_PRECAL_SEL
  * Initial RX eq setting control
  */

typedef union {
  struct {
    uint32_t LN_PRECAL_CODE_SEL : 3;
    ///< Initial RX eq setting control. Selects between 8 possible equalization
    ///< settings to be used prior to RX equalization being run.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_eq_precal_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_WR_MASK (0x00000007U)


///< Initial RX eq setting control. Selects between 8 possible equalization
///< settings to be used prior to RX equalization being run.
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_EQ_STATIC_EN register description at address offset 0x158
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_EQ_STATIC_EN
  * RX equalization static setting control
  */

typedef union {
  struct {
    uint32_t LN_EQ_STATIC_EN : 1;
    ///< RX equalization static setting control. Should be asserted in PCIe
    ///< Gen1/2, deasserted otherwise
    ///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
    ///< or via RX equalization run
    ///< 1 - Use static equalization settings set in memory
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_eq_static_en_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_WR_MASK (0x00000001U)


///< RX equalization static setting control. Should be asserted in PCIe
///< Gen1/2, deasserted otherwise
///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
///< or via RX equalization run
///< 1 - Use static equalization settings set in memory
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_EQ_ADPAT_START register description at address offset 0x15c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_EQ_ADPAT_START
  * RX equalization start indicator
  */

typedef union {
  struct {
    uint32_t LN_APADT_START : 1;
    ///< RX equalization start indicator. When asserted, PHY will perform RX
    ///< equalization.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_eq_adpat_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_WR_MASK (0x00000001U)


///< RX equalization start indicator. When asserted, PHY will perform RX
///< equalization.
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_LN_APADT_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_LN_APADT_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_LN_APADT_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_LN_APADT_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_EYE_MEAS_START register description at address offset 0x160
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_EYE_MEAS_START
  * RX Eye diagram start indicator.
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_START : 1;
    ///< RX Eye diagram start indicator. When asserted, PHY will perform an
    ///< eye diagram.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_eye_meas_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_WR_MASK (0x00000001U)


///< RX Eye diagram start indicator. When asserted, PHY will perform an
///< eye diagram.
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_LN_EYE_MEAS_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_LN_EYE_MEAS_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_LN_EYE_MEAS_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_LN_EYE_MEAS_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_PLL_RDY register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_PLL_RDY
  * TX PLL Ready Status
  */

typedef union {
  struct {
    uint32_t LN_PLL_READY : 1;
    ///< TX PLL ready signal, indicating TX PLL is fully powered up.
    ///< 1'b0: TX PLL is not ready.
    ///< 1'b1: TX PLL is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t LN_PLL_LOCK_STATUS : 1;
    ///< TXPLL lock status indicating that the TX PLL is locked to its reference
    ///< clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_pll_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_WR_MASK (0x00000000U)


///< TX PLL ready signal, indicating TX PLL is fully powered up.
///< 1'b0: TX PLL is not ready.
///< 1'b1: TX PLL is ready.
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_READY_BF_DEF (0x00000000)

///< TXPLL lock status indicating that the TX PLL is locked to its reference
///< clock.
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_LOCK_STATUS_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_LOCK_STATUS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_LOCK_STATUS_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_LN_PLL_LOCK_STATUS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L1_CFG_STS register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L1_CFG_STS
  * Transmit lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Transmit lane state transition status. Indicates when the PMA has
    ///< completed a requested state transition.
    ///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l1_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_WR_MASK (0x00000000U)


///< Transmit lane state transition status. Indicates when the PMA has
///< completed a requested state transition.
///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_CFG_STS register description at address offset 0x1c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_CFG_STS
  * Receive lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Receive lane state transition status. Indicates when the PMA has completed
    ///< a requested state transition.
    ///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_WR_MASK (0x00000000U)


///< Receive lane state transition status. Indicates when the PMA has completed
///< a requested state transition.
///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_CDR_LK2_DATA register description at address offset 0x1c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_CDR_LK2_DATA
  * RX CDR data lock indicator
  */

typedef union {
  struct {
    uint32_t LN_CDR_LK2_DATA : 1;
    ///< RX CDR data lock indicator
    ///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
    ///< is valid
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_cdr_lk2_data_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_WR_MASK (0x00000000U)


///< RX CDR data lock indicator
///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
///< is valid
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_SIG_DETECT register description at address offset 0x1c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_SIG_DETECT
  * Receiver signal detect indicator
  */

typedef union {
  struct {
    uint32_t LN_SIG_DETECT : 1;
    ///< Receiver signal detect indicator.
    ///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
    ///< detected on xia_rx_n_l0/xia_rx_p_l0
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_sig_detect_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_WR_MASK (0x00000000U)


///< Receiver signal detect indicator.
///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
///< detected on xia_rx_n_l0/xia_rx_p_l0
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_LN_SIG_DETECT_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_LN_SIG_DETECT_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_LN_SIG_DETECT_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_LN_SIG_DETECT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_CDR_FREQ_LK_STS register description at address offset 0x1cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_CDR_FREQ_LK_STS
  * CDR lock Status
  */

typedef union {
  struct {
    uint32_t CDR_LOCK : 1;
    ///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
    ///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
    ///< within the PPM threshold programmed in memory       If deasserted
    ///< when expected to be asserted, indicates a fault condition.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_cdr_freq_lk_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_WR_MASK (0x00000000U)


///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
///< within the PPM threshold programmed in memory       If deasserted
///< when expected to be asserted, indicates a fault condition.
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_CDR_LOCK_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_CDR_LOCK_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_CDR_LOCK_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_CDR_LOCK_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_EQ_ADAPT_STS register description at address offset 0x1d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_EQ_ADAPT_STS
  * RX Equalisation Adapt Status
  */

typedef union {
  struct {
    uint32_t LN_EQ_MEAS_VAL : 14;
    ///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EQ_ADAPT_DONE : 1;
    ///< RX equalization done indicator. When asserted, indicates requested
    ///< RX equalization routine is complete.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_eq_adapt_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_RD_MASK (0x00013fffU)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_WR_MASK (0x00000000U)


///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_DEF (0x00000000)

///< RX equalization done indicator. When asserted, indicates requested
///< RX equalization routine is complete.
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L1_EYE_MEAS_STS register description at address offset 0x1d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L1_EYE_MEAS_STS
  * RX Eye Measurement Status
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_VAL : 14;
    ///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EYE_MEAS_ERR : 1;
    ///< RX eye error indicator. If asserted, indicates requested eye diagram
    ///< measurement had an error.Valid only if ln_eye_meas_done is set.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t LN_EYE_MEAS_DONE : 1;
    ///< RX eye done indicator. When asserted, indicates requested eye diagram
    ///< measurement is complete.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l1_eye_meas_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_RD_MASK (0x00033fffU)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_WR_MASK (0x00000000U)


///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_DEF (0x00000000)

///< RX eye error indicator. If asserted, indicates requested eye diagram
///< measurement had an error.Valid only if ln_eye_meas_done is set.
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_DEF (0x00000000)

///< RX eye done indicator. When asserted, indicates requested eye diagram
///< measurement is complete.
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_OFF (17)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_MSK (0x00020000)
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_PLL_FORCE_PWR_UP register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_PLL_FORCE_PWR_UP
  * TX PLL powerup force enable.
  */

typedef union {
  struct {
    uint32_t LN_FORCE_RATE_REQ : 2;
    ///< Indicates which of the four frequency from programmed configuration
    ///< bank to select. Only used when ln_force_pwr_up is set.
    ///< 0 - Freq A configuration bank.
    ///< 1 - Freq B configuration bank.
    ///< 2 - Freq C configuration bank.
    ///< 3 - Freq D configuration bank.
    ///< 4 - Freq E configuration bank.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LN_FORCE_PWR_UP : 1;
    ///< TX PLL powerup force enable. Under normal operation TXPLL block is
    ///< powered up/down as needed by internal circuits.
    ///< If asserted, TXPLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force TXPLL powerup.
    ///< 1: Force TXPLL block powerup
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_pll_force_pwr_up_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_RD_MASK (0x00000013U)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_WR_MASK (0x00000013U)


///< Indicates which of the four frequency from programmed configuration
///< bank to select. Only used when ln_force_pwr_up is set.
///< 0 - Freq A configuration bank.
///< 1 - Freq B configuration bank.
///< 2 - Freq C configuration bank.
///< 3 - Freq D configuration bank.
///< 4 - Freq E configuration bank.
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_MSK (0x00000003)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_DEF (0x00000000)

///< TX PLL powerup force enable. Under normal operation TXPLL block is
///< powered up/down as needed by internal circuits.
///< If asserted, TXPLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force TXPLL powerup.
///< 1: Force TXPLL block powerup
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_MSK (0x00000010)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_PSTATE register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_PSTATE
  * TX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< TX lane power down state control.
    ///< 3'd0: TXPD                                               3'd1: Reserved
    ///< 3'd2: TXP3                                               3'd3: TXP2
    ///< 3'd4: TXP1                                               3'd5: TXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_WR_MASK (0x00000007U)


///< TX lane power down state control.
///< 3'd0: TXPD                                               3'd1: Reserved
///< 3'd2: TXP3                                               3'd3: TXP2
///< 3'd4: TXP1                                               3'd5: TXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_FREQ_RATE register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_FREQ_RATE
  * TX frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< TX frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_WR_MASK (0x00000007U)


///< TX frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_RATE_DIV register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_RATE_DIV
  * TX datapath divider setting
  */

typedef union {
  struct {
    uint32_t LN_RATE_DIV : 4;
    ///< TX datapath divider setting.
    ///< 3'b000: Divide by 1
    ///< 3'b001: Divide by 2
    ///< 3'b010: Divide by 4
    ///< 3'b011: Divide by 8
    ///< 3'b100: Divide by 16
    ///< Others: Illegal
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_rate_div_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_WR_MASK (0x0000000fU)


///< TX datapath divider setting.
///< 3'b000: Divide by 1
///< 3'b001: Divide by 2
///< 3'b010: Divide by 4
///< 3'b011: Divide by 8
///< 3'b100: Divide by 16
///< Others: Illegal
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_LN_RATE_DIV_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_LN_RATE_DIV_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_LN_RATE_DIV_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_LN_RATE_DIV_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_MODULATION register description at address offset 0x210
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_MODULATION
  * TX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< TX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for TX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding for PAM4
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding for PAM4
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_WR_MASK (0x000000ffU)


///< TX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for TX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_DATA_CLK_DIV_RATE register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_DATA_CLK_DIV_RATE
  * Transmit input word clock speed indicator
  */

typedef union {
  struct {
    uint32_t LN_CLK_DIV_RATE : 3;
    ///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
    ///< is faster than the expected clock frequency.             Example:
    ///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
    ///< frequency is 250 MHz.            This value must be set so that the
    ///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
    ///< 3'd0: Transmit every cycle
    ///< 3'd1: Transmit every 2 cycles
    ///< 3'd2: Transmit every 4 cycles
    ///< 3'd3: Transmit every 8 cycles
    ///< 3'd4: Transmit every 16 cycles            Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_data_clk_div_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_WR_MASK (0x00000007U)


///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
///< is faster than the expected clock frequency.             Example:
///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
///< frequency is 250 MHz.            This value must be set so that the
///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
///< 3'd0: Transmit every cycle
///< 3'd1: Transmit every 2 cycles
///< 3'd2: Transmit every 4 cycles
///< 3'd3: Transmit every 8 cycles
///< 3'd4: Transmit every 16 cycles            Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_ELEC_IDLE register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_ELEC_IDLE
  * Tx Electrical idle
  */

typedef union {
  struct {
    uint32_t LN_ELEC_IDLE : 1;
    ///< Tx Electrical idle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_elec_idle_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_WR_MASK (0x00000001U)


///< Tx Electrical idle
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_LN_ELEC_IDLE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_LN_ELEC_IDLE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_LN_ELEC_IDLE_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_LN_ELEC_IDLE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_PSTATE register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_PSTATE
  * RX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< RX lane power down state control.
    ///< 3'd0: RXPD                                               3'd1: Reserved
    ///< 3'd2: RXP3                                               3'd3: RXP2
    ///< 3'd4: RXP1                                               3'd5: RXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_WR_MASK (0x00000007U)


///< RX lane power down state control.
///< 3'd0: RXPD                                               3'd1: Reserved
///< 3'd2: RXP3                                               3'd3: RXP2
///< 3'd4: RXP1                                               3'd5: RXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_FREQ_RATE register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_FREQ_RATE
  * RX DCO frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< RX DCO frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_WR_MASK (0x00000007U)


///< RX DCO frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_MODE_SEL register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_MODE_SEL
  * RX mode select
  */

typedef union {
  struct {
    uint32_t LN_MODE_SEL : 4;
    ///< TBD.  This will be a LUT index to for rx rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_mode_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_WR_MASK (0x0000000fU)


///< TBD.  This will be a LUT index to for rx rate
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_LN_MODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_LN_MODE_SEL_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_LN_MODE_SEL_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_LN_MODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_MODULATION register description at address offset 0x24c
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_MODULATION
  * RX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< RX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for RX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding on RX Datapath for PAM4. Not implemented
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_WR_MASK (0x000000ffU)


///< RX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for RX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding on RX Datapath for PAM4. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_OVR_SMPL register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_OVR_SMPL
  * Rx Oversample Control
  */

typedef union {
  struct {
    uint32_t LN_OVR_SMPL_EN : 1;
    ///< Enables the Differential Manchester Encoding (DME) mode of the receiver
    ///< that can be used for Ethernet link training hardware outside the UXPHY.
    ///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
    ///< and it will blindly sample the incoming data at the configured data
    ///< rate.            Feature can also be used for low data rate application
    ///< where oversampling is desired.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA : 1;
    ///< The UXPHY will automatically switch between LTR and LTD.
    ///< This override allows hardware outside the UXPHY to control whether
    ///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
    ///< must be asserted                                                1'b0:
    ///< CDR lock to reference
    ///< 1'b1: CDR lock to data
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA_EN : 1;
    ///< Controls whether the receiver is in LTR or LTD via the internal PHY
    ///< hardware or from the PHY pin interface
    ///< 1'b0: CDR locks to data/reference via internal logic
    ///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_ovr_smpl_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_WR_MASK (0x00000007U)


///< Enables the Differential Manchester Encoding (DME) mode of the receiver
///< that can be used for Ethernet link training hardware outside the UXPHY.
///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
///< and it will blindly sample the incoming data at the configured data
///< rate.            Feature can also be used for low data rate application
///< where oversampling is desired.
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_OVR_SMPL_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_OVR_SMPL_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_OVR_SMPL_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_OVR_SMPL_EN_BF_DEF (0x00000000)

///< The UXPHY will automatically switch between LTR and LTD.
///< This override allows hardware outside the UXPHY to control whether
///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
///< must be asserted                                                1'b0:
///< CDR lock to reference
///< 1'b1: CDR lock to data
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_BF_DEF (0x00000000)

///< Controls whether the receiver is in LTR or LTD via the internal PHY
///< hardware or from the PHY pin interface
///< 1'b0: CDR locks to data/reference via internal logic
///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_OFF ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_MSK (0x00000004)
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_EQ_PRECAL_SEL register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_EQ_PRECAL_SEL
  * Initial RX eq setting control
  */

typedef union {
  struct {
    uint32_t LN_PRECAL_CODE_SEL : 3;
    ///< Initial RX eq setting control. Selects between 8 possible equalization
    ///< settings to be used prior to RX equalization being run.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_eq_precal_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_WR_MASK (0x00000007U)


///< Initial RX eq setting control. Selects between 8 possible equalization
///< settings to be used prior to RX equalization being run.
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_EQ_STATIC_EN register description at address offset 0x258
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_EQ_STATIC_EN
  * RX equalization static setting control
  */

typedef union {
  struct {
    uint32_t LN_EQ_STATIC_EN : 1;
    ///< RX equalization static setting control. Should be asserted in PCIe
    ///< Gen1/2, deasserted otherwise
    ///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
    ///< or via RX equalization run
    ///< 1 - Use static equalization settings set in memory
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_eq_static_en_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_WR_MASK (0x00000001U)


///< RX equalization static setting control. Should be asserted in PCIe
///< Gen1/2, deasserted otherwise
///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
///< or via RX equalization run
///< 1 - Use static equalization settings set in memory
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_EQ_ADPAT_START register description at address offset 0x25c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_EQ_ADPAT_START
  * RX equalization start indicator
  */

typedef union {
  struct {
    uint32_t LN_APADT_START : 1;
    ///< RX equalization start indicator. When asserted, PHY will perform RX
    ///< equalization.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_eq_adpat_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_WR_MASK (0x00000001U)


///< RX equalization start indicator. When asserted, PHY will perform RX
///< equalization.
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_LN_APADT_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_LN_APADT_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_LN_APADT_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_LN_APADT_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_EYE_MEAS_START register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_EYE_MEAS_START
  * RX Eye diagram start indicator.
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_START : 1;
    ///< RX Eye diagram start indicator. When asserted, PHY will perform an
    ///< eye diagram.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_eye_meas_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_WR_MASK (0x00000001U)


///< RX Eye diagram start indicator. When asserted, PHY will perform an
///< eye diagram.
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_LN_EYE_MEAS_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_LN_EYE_MEAS_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_LN_EYE_MEAS_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_LN_EYE_MEAS_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_PLL_RDY register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_PLL_RDY
  * TX PLL Ready Status
  */

typedef union {
  struct {
    uint32_t LN_PLL_READY : 1;
    ///< TX PLL ready signal, indicating TX PLL is fully powered up.
    ///< 1'b0: TX PLL is not ready.
    ///< 1'b1: TX PLL is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t LN_PLL_LOCK_STATUS : 1;
    ///< TXPLL lock status indicating that the TX PLL is locked to its reference
    ///< clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_pll_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_WR_MASK (0x00000000U)


///< TX PLL ready signal, indicating TX PLL is fully powered up.
///< 1'b0: TX PLL is not ready.
///< 1'b1: TX PLL is ready.
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_READY_BF_DEF (0x00000000)

///< TXPLL lock status indicating that the TX PLL is locked to its reference
///< clock.
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_LOCK_STATUS_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_LOCK_STATUS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_LOCK_STATUS_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_LN_PLL_LOCK_STATUS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L2_CFG_STS register description at address offset 0x284
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L2_CFG_STS
  * Transmit lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Transmit lane state transition status. Indicates when the PMA has
    ///< completed a requested state transition.
    ///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l2_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_WR_MASK (0x00000000U)


///< Transmit lane state transition status. Indicates when the PMA has
///< completed a requested state transition.
///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_CFG_STS register description at address offset 0x2c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_CFG_STS
  * Receive lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Receive lane state transition status. Indicates when the PMA has completed
    ///< a requested state transition.
    ///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_WR_MASK (0x00000000U)


///< Receive lane state transition status. Indicates when the PMA has completed
///< a requested state transition.
///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_CDR_LK2_DATA register description at address offset 0x2c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_CDR_LK2_DATA
  * RX CDR data lock indicator
  */

typedef union {
  struct {
    uint32_t LN_CDR_LK2_DATA : 1;
    ///< RX CDR data lock indicator
    ///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
    ///< is valid
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_cdr_lk2_data_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_WR_MASK (0x00000000U)


///< RX CDR data lock indicator
///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
///< is valid
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_SIG_DETECT register description at address offset 0x2c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_SIG_DETECT
  * Receiver signal detect indicator
  */

typedef union {
  struct {
    uint32_t LN_SIG_DETECT : 1;
    ///< Receiver signal detect indicator.
    ///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
    ///< detected on xia_rx_n_l0/xia_rx_p_l0
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_sig_detect_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_WR_MASK (0x00000000U)


///< Receiver signal detect indicator.
///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
///< detected on xia_rx_n_l0/xia_rx_p_l0
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_LN_SIG_DETECT_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_LN_SIG_DETECT_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_LN_SIG_DETECT_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_LN_SIG_DETECT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_CDR_FREQ_LK_STS register description at address offset 0x2cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_CDR_FREQ_LK_STS
  * CDR lock Status
  */

typedef union {
  struct {
    uint32_t CDR_LOCK : 1;
    ///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
    ///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
    ///< within the PPM threshold programmed in memory       If deasserted
    ///< when expected to be asserted, indicates a fault condition.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_cdr_freq_lk_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_WR_MASK (0x00000000U)


///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
///< within the PPM threshold programmed in memory       If deasserted
///< when expected to be asserted, indicates a fault condition.
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_CDR_LOCK_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_CDR_LOCK_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_CDR_LOCK_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_CDR_LOCK_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_EQ_ADAPT_STS register description at address offset 0x2d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_EQ_ADAPT_STS
  * RX Equalisation Adapt Status
  */

typedef union {
  struct {
    uint32_t LN_EQ_MEAS_VAL : 14;
    ///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EQ_ADAPT_DONE : 1;
    ///< RX equalization done indicator. When asserted, indicates requested
    ///< RX equalization routine is complete.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_eq_adapt_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_RD_MASK (0x00013fffU)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_WR_MASK (0x00000000U)


///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_DEF (0x00000000)

///< RX equalization done indicator. When asserted, indicates requested
///< RX equalization routine is complete.
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L2_EYE_MEAS_STS register description at address offset 0x2d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L2_EYE_MEAS_STS
  * RX Eye Measurement Status
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_VAL : 14;
    ///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EYE_MEAS_ERR : 1;
    ///< RX eye error indicator. If asserted, indicates requested eye diagram
    ///< measurement had an error.Valid only if ln_eye_meas_done is set.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t LN_EYE_MEAS_DONE : 1;
    ///< RX eye done indicator. When asserted, indicates requested eye diagram
    ///< measurement is complete.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l2_eye_meas_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_RD_MASK (0x00033fffU)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_WR_MASK (0x00000000U)


///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_DEF (0x00000000)

///< RX eye error indicator. If asserted, indicates requested eye diagram
///< measurement had an error.Valid only if ln_eye_meas_done is set.
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_DEF (0x00000000)

///< RX eye done indicator. When asserted, indicates requested eye diagram
///< measurement is complete.
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_OFF (17)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_MSK (0x00020000)
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_PLL_FORCE_PWR_UP register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_PLL_FORCE_PWR_UP
  * TX PLL powerup force enable.
  */

typedef union {
  struct {
    uint32_t LN_FORCE_RATE_REQ : 2;
    ///< Indicates which of the four frequency from programmed configuration
    ///< bank to select. Only used when ln_force_pwr_up is set.
    ///< 0 - Freq A configuration bank.
    ///< 1 - Freq B configuration bank.
    ///< 2 - Freq C configuration bank.
    ///< 3 - Freq D configuration bank.
    ///< 4 - Freq E configuration bank.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t LN_FORCE_PWR_UP : 1;
    ///< TX PLL powerup force enable. Under normal operation TXPLL block is
    ///< powered up/down as needed by internal circuits.
    ///< If asserted, TXPLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force TXPLL powerup.
    ///< 1: Force TXPLL block powerup
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_pll_force_pwr_up_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_RD_MASK (0x00000013U)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_WR_MASK (0x00000013U)


///< Indicates which of the four frequency from programmed configuration
///< bank to select. Only used when ln_force_pwr_up is set.
///< 0 - Freq A configuration bank.
///< 1 - Freq B configuration bank.
///< 2 - Freq C configuration bank.
///< 3 - Freq D configuration bank.
///< 4 - Freq E configuration bank.
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_MSK (0x00000003)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_RATE_REQ_BF_DEF (0x00000000)

///< TX PLL powerup force enable. Under normal operation TXPLL block is
///< powered up/down as needed by internal circuits.
///< If asserted, TXPLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force TXPLL powerup.
///< 1: Force TXPLL block powerup
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_MSK (0x00000010)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_LN_FORCE_PWR_UP_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_PSTATE register description at address offset 0x304
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_PSTATE
  * TX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< TX lane power down state control.
    ///< 3'd0: TXPD                                               3'd1: Reserved
    ///< 3'd2: TXP3                                               3'd3: TXP2
    ///< 3'd4: TXP1                                               3'd5: TXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_WR_MASK (0x00000007U)


///< TX lane power down state control.
///< 3'd0: TXPD                                               3'd1: Reserved
///< 3'd2: TXP3                                               3'd3: TXP2
///< 3'd4: TXP1                                               3'd5: TXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_FREQ_RATE register description at address offset 0x308
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_FREQ_RATE
  * TX frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< TX frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_WR_MASK (0x00000007U)


///< TX frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_RATE_DIV register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_RATE_DIV
  * TX datapath divider setting
  */

typedef union {
  struct {
    uint32_t LN_RATE_DIV : 4;
    ///< TX datapath divider setting.
    ///< 3'b000: Divide by 1
    ///< 3'b001: Divide by 2
    ///< 3'b010: Divide by 4
    ///< 3'b011: Divide by 8
    ///< 3'b100: Divide by 16
    ///< Others: Illegal
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_rate_div_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_WR_MASK (0x0000000fU)


///< TX datapath divider setting.
///< 3'b000: Divide by 1
///< 3'b001: Divide by 2
///< 3'b010: Divide by 4
///< 3'b011: Divide by 8
///< 3'b100: Divide by 16
///< Others: Illegal
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_LN_RATE_DIV_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_LN_RATE_DIV_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_LN_RATE_DIV_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_LN_RATE_DIV_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_MODULATION register description at address offset 0x310
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_MODULATION
  * TX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< TX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for TX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding for PAM4
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding for PAM4
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_WR_MASK (0x000000ffU)


///< TX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for TX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding for PAM4
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_DATA_CLK_DIV_RATE register description at address offset 0x314
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_DATA_CLK_DIV_RATE
  * Transmit input word clock speed indicator
  */

typedef union {
  struct {
    uint32_t LN_CLK_DIV_RATE : 3;
    ///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
    ///< is faster than the expected clock frequency.             Example:
    ///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
    ///< frequency is 250 MHz.            This value must be set so that the
    ///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
    ///< 3'd0: Transmit every cycle
    ///< 3'd1: Transmit every 2 cycles
    ///< 3'd2: Transmit every 4 cycles
    ///< 3'd3: Transmit every 8 cycles
    ///< 3'd4: Transmit every 16 cycles            Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_data_clk_div_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_WR_MASK (0x00000007U)


///< Transmit input word clock speed indicator. Used when ick_pcs_txword_l0
///< is faster than the expected clock frequency.             Example:
///< ick_pcs_txword_l0 is 1 GHz in 8b PCIe Gen1, but the expected clock
///< frequency is 250 MHz.            This value must be set so that the
///< transmitter only reads idat_pcs_txword_l0_ every 4 cycles.
///< 3'd0: Transmit every cycle
///< 3'd1: Transmit every 2 cycles
///< 3'd2: Transmit every 4 cycles
///< 3'd3: Transmit every 8 cycles
///< 3'd4: Transmit every 16 cycles            Other: Reserved
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_LN_CLK_DIV_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_ELEC_IDLE register description at address offset 0x318
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_ELEC_IDLE
  * Tx Electrical idle
  */

typedef union {
  struct {
    uint32_t LN_ELEC_IDLE : 1;
    ///< Tx Electrical idle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_elec_idle_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_WR_MASK (0x00000001U)


///< Tx Electrical idle
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_LN_ELEC_IDLE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_LN_ELEC_IDLE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_LN_ELEC_IDLE_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_LN_ELEC_IDLE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_PSTATE register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_PSTATE
  * RX lane power down state control
  */

typedef union {
  struct {
    uint32_t LN_PSTATE : 3;
    ///< RX lane power down state control.
    ///< 3'd0: RXPD                                               3'd1: Reserved
    ///< 3'd2: RXP3                                               3'd3: RXP2
    ///< 3'd4: RXP1                                               3'd5: RXP0
    ///< Other: Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_pstate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_WR_MASK (0x00000007U)


///< RX lane power down state control.
///< 3'd0: RXPD                                               3'd1: Reserved
///< 3'd2: RXP3                                               3'd3: RXP2
///< 3'd4: RXP1                                               3'd5: RXP0
///< Other: Reserved
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_LN_PSTATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_LN_PSTATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_LN_PSTATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_LN_PSTATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_FREQ_RATE register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_FREQ_RATE
  * RX DCO frequency select from programmed configuration bank.
  */

typedef union {
  struct {
    uint32_t LN_FREQ_RATE : 3;
    ///< RX DCO frequency select from programmed configuration bank.
    ///< 0 - Freq A configuration bank
    ///< 1 - Freq B configuraiton bank
    ///< 2 - Freq C configuration bank
    ///< 3 - Freq D configuration bank
    ///< 4 - Freq E configuration bank
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_freq_rate_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_WR_MASK (0x00000007U)


///< RX DCO frequency select from programmed configuration bank.
///< 0 - Freq A configuration bank
///< 1 - Freq B configuraiton bank
///< 2 - Freq C configuration bank
///< 3 - Freq D configuration bank
///< 4 - Freq E configuration bank
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_LN_FREQ_RATE_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_LN_FREQ_RATE_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_LN_FREQ_RATE_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_LN_FREQ_RATE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_MODE_SEL register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_MODE_SEL
  * RX mode select
  */

typedef union {
  struct {
    uint32_t LN_MODE_SEL : 4;
    ///< TBD.  This will be a LUT index to for rx rate
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_mode_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_RD_MASK (0x0000000fU)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_WR_MASK (0x0000000fU)


///< TBD.  This will be a LUT index to for rx rate
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_LN_MODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_LN_MODE_SEL_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_LN_MODE_SEL_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_LN_MODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_MODULATION register description at address offset 0x34c
  *
  * Register default value:        0x00000006
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_MODULATION
  * RX lane width and modulation control
  */

typedef union {
  struct {
    uint32_t LN_WIDTH : 4;
    ///< RX lane data word width control
    ///< 4'd1: 10 bit mode (NRZ only)
    ///< 4'd2: 16 bit mode (NRZ only)
    ///< 4'd3: 20 bit mode (NRZ only)
    ///< 4'd4: 32 bit mode                                                4'd5:
    ///< 40 bit mode                                                4'd6: 64
    ///< bit mode                                                4'd7: 80 bit
    ///< mode (PAM4 only)                                                4'd8:
    ///< 128bit mode (PAM4 only)
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t LN_MOD : 2;
    ///< Selects the signal scheme for RX
    ///< 2'b0: NRZ                                               2'b1: PAM4
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t LN_PAM4_GRAY_EN : 1;
    ///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t LN_PAM4_PRECODE_EN : 1;
    ///< Enables precoding on RX Datapath for PAM4. Not implemented
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_modulation_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_DEFAULT (0x00000006U)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_RD_MASK (0x000000ffU)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_WR_MASK (0x000000ffU)


///< RX lane data word width control
///< 4'd1: 10 bit mode (NRZ only)
///< 4'd2: 16 bit mode (NRZ only)
///< 4'd3: 20 bit mode (NRZ only)
///< 4'd4: 32 bit mode                                                4'd5:
///< 40 bit mode                                                4'd6: 64
///< bit mode                                                4'd7: 80 bit
///< mode (PAM4 only)                                                4'd8:
///< 128bit mode (PAM4 only)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_WIDTH_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_WIDTH_BF_WID ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_WIDTH_BF_MSK (0x0000000F)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_WIDTH_BF_DEF (0x00000006)

///< Selects the signal scheme for RX
///< 2'b0: NRZ                                               2'b1: PAM4
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_MOD_BF_OFF ( 4)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_MOD_BF_WID ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_MOD_BF_MSK (0x00000030)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_MOD_BF_DEF (0x00000000)

///< Enables gray coding on RX Datapath for PAM4on RX Datapath. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_OFF ( 6)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_MSK (0x00000040)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_GRAY_EN_BF_DEF (0x00000000)

///< Enables precoding on RX Datapath for PAM4. Not implemented
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_OFF ( 7)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_MSK (0x00000080)
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_LN_PAM4_PRECODE_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_OVR_SMPL register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_OVR_SMPL
  * Rx Oversample Control
  */

typedef union {
  struct {
    uint32_t LN_OVR_SMPL_EN : 1;
    ///< Enables the Differential Manchester Encoding (DME) mode of the receiver
    ///< that can be used for Ethernet link training hardware outside the UXPHY.
    ///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
    ///< and it will blindly sample the incoming data at the configured data
    ///< rate.            Feature can also be used for low data rate application
    ///< where oversampling is desired.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA : 1;
    ///< The UXPHY will automatically switch between LTR and LTD.
    ///< This override allows hardware outside the UXPHY to control whether
    ///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
    ///< must be asserted                                                1'b0:
    ///< CDR lock to reference
    ///< 1'b1: CDR lock to data
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t LN_CDR_LOCK_DATA_EN : 1;
    ///< Controls whether the receiver is in LTR or LTD via the internal PHY
    ///< hardware or from the PHY pin interface
    ///< 1'b0: CDR locks to data/reference via internal logic
    ///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_ovr_smpl_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_WR_MASK (0x00000007U)


///< Enables the Differential Manchester Encoding (DME) mode of the receiver
///< that can be used for Ethernet link training hardware outside the UXPHY.
///< Once asserted the CDR will be forced into Lock-To-Reference mode (LTR)
///< and it will blindly sample the incoming data at the configured data
///< rate.            Feature can also be used for low data rate application
///< where oversampling is desired.
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_OVR_SMPL_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_OVR_SMPL_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_OVR_SMPL_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_OVR_SMPL_EN_BF_DEF (0x00000000)

///< The UXPHY will automatically switch between LTR and LTD.
///< This override allows hardware outside the UXPHY to control whether
///< the receiver is in LTR or LTD.             To use this signal ln_cdr_lock_data_en
///< must be asserted                                                1'b0:
///< CDR lock to reference
///< 1'b1: CDR lock to data
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_BF_DEF (0x00000000)

///< Controls whether the receiver is in LTR or LTD via the internal PHY
///< hardware or from the PHY pin interface
///< 1'b0: CDR locks to data/reference via internal logic
///< 1'b1: CDR locks to data/reference as controlled by ln_cdr_lock_data.
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_OFF ( 2)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_MSK (0x00000004)
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_LN_CDR_LOCK_DATA_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_EQ_PRECAL_SEL register description at address offset 0x354
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_EQ_PRECAL_SEL
  * Initial RX eq setting control
  */

typedef union {
  struct {
    uint32_t LN_PRECAL_CODE_SEL : 3;
    ///< Initial RX eq setting control. Selects between 8 possible equalization
    ///< settings to be used prior to RX equalization being run.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_eq_precal_sel_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_RD_MASK (0x00000007U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_WR_MASK (0x00000007U)


///< Initial RX eq setting control. Selects between 8 possible equalization
///< settings to be used prior to RX equalization being run.
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_WID ( 3)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_MSK (0x00000007)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_LN_PRECAL_CODE_SEL_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_EQ_STATIC_EN register description at address offset 0x358
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_EQ_STATIC_EN
  * RX equalization static setting control
  */

typedef union {
  struct {
    uint32_t LN_EQ_STATIC_EN : 1;
    ///< RX equalization static setting control. Should be asserted in PCIe
    ///< Gen1/2, deasserted otherwise
    ///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
    ///< or via RX equalization run
    ///< 1 - Use static equalization settings set in memory
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_eq_static_en_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_WR_MASK (0x00000001U)


///< RX equalization static setting control. Should be asserted in PCIe
///< Gen1/2, deasserted otherwise
///< 0 - Use equalization settings determined by i_rxeq_precal_code_sel_l0_nt[2:0]
///< or via RX equalization run
///< 1 - Use static equalization settings set in memory
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_LN_EQ_STATIC_EN_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_EQ_ADPAT_START register description at address offset 0x35c
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_EQ_ADPAT_START
  * RX equalization start indicator
  */

typedef union {
  struct {
    uint32_t LN_APADT_START : 1;
    ///< RX equalization start indicator. When asserted, PHY will perform RX
    ///< equalization.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_eq_adpat_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_WR_MASK (0x00000001U)


///< RX equalization start indicator. When asserted, PHY will perform RX
///< equalization.
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_LN_APADT_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_LN_APADT_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_LN_APADT_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_LN_APADT_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_EYE_MEAS_START register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_EYE_MEAS_START
  * RX Eye diagram start indicator.
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_START : 1;
    ///< RX Eye diagram start indicator. When asserted, PHY will perform an
    ///< eye diagram.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_eye_meas_start_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_WR_MASK (0x00000001U)


///< RX Eye diagram start indicator. When asserted, PHY will perform an
///< eye diagram.
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_LN_EYE_MEAS_START_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_LN_EYE_MEAS_START_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_LN_EYE_MEAS_START_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_LN_EYE_MEAS_START_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_PLL_RDY register description at address offset 0x380
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_PLL_RDY
  * TX PLL Ready Status
  */

typedef union {
  struct {
    uint32_t LN_PLL_READY : 1;
    ///< TX PLL ready signal, indicating TX PLL is fully powered up.
    ///< 1'b0: TX PLL is not ready.
    ///< 1'b1: TX PLL is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t LN_PLL_LOCK_STATUS : 1;
    ///< TXPLL lock status indicating that the TX PLL is locked to its reference
    ///< clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_pll_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_WR_MASK (0x00000000U)


///< TX PLL ready signal, indicating TX PLL is fully powered up.
///< 1'b0: TX PLL is not ready.
///< 1'b1: TX PLL is ready.
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_READY_BF_DEF (0x00000000)

///< TXPLL lock status indicating that the TX PLL is locked to its reference
///< clock.
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_LOCK_STATUS_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_LOCK_STATUS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_LOCK_STATUS_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_LN_PLL_LOCK_STATUS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_TX_L3_CFG_STS register description at address offset 0x384
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/TX_L3_CFG_STS
  * Transmit lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Transmit lane state transition status. Indicates when the PMA has
    ///< completed a requested state transition.
    ///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_tx_l3_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_WR_MASK (0x00000000U)


///< Transmit lane state transition status. Indicates when the PMA has
///< completed a requested state transition.
///< 1'b0: TX Lane has NOT completed its state change       1'b1: TX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_CFG_STS register description at address offset 0x3c0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_CFG_STS
  * Receive lane state transition status
  */

typedef union {
  struct {
    uint32_t LN_CFG_READY : 1;
    ///< Receive lane state transition status. Indicates when the PMA has completed
    ///< a requested state transition.
    ///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
    ///< has completed its state change
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_cfg_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_WR_MASK (0x00000000U)


///< Receive lane state transition status. Indicates when the PMA has completed
///< a requested state transition.
///< 1'b0: RX Lane has NOT completed its state change       1'b1: RX Lane
///< has completed its state change
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_LN_CFG_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_LN_CFG_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_LN_CFG_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_LN_CFG_READY_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_CDR_LK2_DATA register description at address offset 0x3c4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_CDR_LK2_DATA
  * RX CDR data lock indicator
  */

typedef union {
  struct {
    uint32_t LN_CDR_LK2_DATA : 1;
    ///< RX CDR data lock indicator
    ///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
    ///< is valid
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_cdr_lk2_data_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_WR_MASK (0x00000000U)


///< RX CDR data lock indicator
///< 1'b0: CDR not locked to data       1'b1: CDR locked to data, o_rxdat_word_l0
///< is valid
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_LN_CDR_LK2_DATA_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_SIG_DETECT register description at address offset 0x3c8
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_SIG_DETECT
  * Receiver signal detect indicator
  */

typedef union {
  struct {
    uint32_t LN_SIG_DETECT : 1;
    ///< Receiver signal detect indicator.
    ///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
    ///< detected on xia_rx_n_l0/xia_rx_p_l0
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_sig_detect_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_WR_MASK (0x00000000U)


///< Receiver signal detect indicator.
///< 0 - Signal not detected on xia_rx_n_l0/xia_rx_p_l0       1 - Signal
///< detected on xia_rx_n_l0/xia_rx_p_l0
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_LN_SIG_DETECT_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_LN_SIG_DETECT_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_LN_SIG_DETECT_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_LN_SIG_DETECT_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_CDR_FREQ_LK_STS register description at address offset 0x3cc
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_CDR_FREQ_LK_STS
  * CDR lock Status
  */

typedef union {
  struct {
    uint32_t CDR_LOCK : 1;
    ///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
    ///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
    ///< within the PPM threshold programmed in memory       If deasserted
    ///< when expected to be asserted, indicates a fault condition.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_cdr_freq_lk_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_WR_MASK (0x00000000U)


///< CDR lock Status.       1'b0: CDR is NOT frequency locked within the
///< PPM threshold programmed in memory       1'b1: CDR is frequency locked
///< within the PPM threshold programmed in memory       If deasserted
///< when expected to be asserted, indicates a fault condition.
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_CDR_LOCK_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_CDR_LOCK_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_CDR_LOCK_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_CDR_LOCK_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_EQ_ADAPT_STS register description at address offset 0x3d0
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_EQ_ADAPT_STS
  * RX Equalisation Adapt Status
  */

typedef union {
  struct {
    uint32_t LN_EQ_MEAS_VAL : 14;
    ///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EQ_ADAPT_DONE : 1;
    ///< RX equalization done indicator. When asserted, indicates requested
    ///< RX equalization routine is complete.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_eq_adapt_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_RD_MASK (0x00013fffU)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_WR_MASK (0x00000000U)


///< RX Eye diagram Figure of Merit signal. Valid only if ln_eq_adapt_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_MEAS_VAL_BF_DEF (0x00000000)

///< RX equalization done indicator. When asserted, indicates requested
///< RX equalization routine is complete.
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_LN_EQ_ADAPT_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_RX_L3_EYE_MEAS_STS register description at address offset 0x3d4
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/RX_L3_EYE_MEAS_STS
  * RX Eye Measurement Status
  */

typedef union {
  struct {
    uint32_t LN_EYE_MEAS_VAL : 14;
    ///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
    ///< is set.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t LN_EYE_MEAS_ERR : 1;
    ///< RX eye error indicator. If asserted, indicates requested eye diagram
    ///< measurement had an error.Valid only if ln_eye_meas_done is set.
    ///< AccessType="RO" BitOffset="16" ResetValue="0x0"
    uint32_t LN_EYE_MEAS_DONE : 1;
    ///< RX eye done indicator. When asserted, indicates requested eye diagram
    ///< measurement is complete.
    ///< AccessType="RO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_rx_l3_eye_meas_sts_reg_t;

#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_RD_MASK (0x00033fffU)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_WR_MASK (0x00000000U)


///< RX eye status. Reports merit of eye.Valid only if ln_eye_meas_done
///< is set.
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_WID (14)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_MSK (0x00003FFF)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_VAL_BF_DEF (0x00000000)

///< RX eye error indicator. If asserted, indicates requested eye diagram
///< measurement had an error.Valid only if ln_eye_meas_done is set.
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_OFF (16)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_MSK (0x00010000)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_ERR_BF_DEF (0x00000000)

///< RX eye done indicator. When asserted, indicates requested eye diagram
///< measurement is complete.
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_OFF (17)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_MSK (0x00020000)
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_LN_EYE_MEAS_DONE_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_CMN_FORCE_PWRUP register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/CMN_FORCE_PWRUP
  * PHY Common Force Powerup
  */

typedef union {
  struct {
    uint32_t FORCE_PWR_UP : 1;
    ///< Under normal operation cmn block is powered up/down as needed by internal
    ///< circuits.                                                  If asserted,
    ///< CMN will power up unconditionally, allows common block functionality
    ///< (refclk, etc.) to be used independently of rest of PHY
    ///< 0: Do not force cmn powerup.
    ///< 1: Force cmn block powerup.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_cmn_force_pwrup_reg_t;

#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_WR_MASK (0x00000001U)


///< Under normal operation cmn block is powered up/down as needed by internal
///< circuits.                                                  If asserted,
///< CMN will power up unconditionally, allows common block functionality
///< (refclk, etc.) to be used independently of rest of PHY
///< 0: Do not force cmn powerup.
///< 1: Force cmn block powerup.
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_FORCE_PWR_UP_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_CMN_PLLA_FORCE_PWRUP register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/CMN_PLLA_FORCE_PWRUP
  * Common PLL powerup force enable
  */

typedef union {
  struct {
    uint32_t PLL_FORCE_PWR_UP : 1;
    ///< common PLL powerup force enable. Under normal operation CMN PLL block
    ///< is powered up/down as needed by internal circuits.             If
    ///< asserted, CMN PLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force CMN PLL powerup.
    ///< 1: Force CMN PLL block powerup.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_FORCE_RATE_FREQ : 1;
    ///< Indicates which of the two programmed frequency CMN PLL will be forced
    ///< powered up to. This is applicable only if pll_force_pwr_up is set.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_cmn_plla_force_pwrup_reg_t;

#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_WR_MASK (0x00000003U)


///< common PLL powerup force enable. Under normal operation CMN PLL block
///< is powered up/down as needed by internal circuits.             If
///< asserted, CMN PLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force CMN PLL powerup.
///< 1: Force CMN PLL block powerup.
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_DEF (0x00000000)

///< Indicates which of the two programmed frequency CMN PLL will be forced
///< powered up to. This is applicable only if pll_force_pwr_up is set.
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_CMN_PLLB_FORCE_PWRUP register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/CMN_PLLB_FORCE_PWRUP
  * Common PLL powerup force enable
  */

typedef union {
  struct {
    uint32_t PLL_FORCE_PWR_UP : 1;
    ///< common PLL powerup force enable. Under normal operation CMN PLL block
    ///< is powered up/down as needed by internal circuits.             If
    ///< asserted, CMN PLL will power up unconditionally allows postdivided
    ///< output clock to be used independently of rest of PHY.
    ///< 0: Do not force CMN PLL powerup.
    ///< 1: Force CMN PLL block powerup.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_FORCE_RATE_FREQ : 1;
    ///< Indicates which of the two programmed frequency CMN PLL will be forced
    ///< powered up to. This is applicable only if pll_force_pwr_up is set.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_cmn_pllb_force_pwrup_reg_t;

#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_WR_MASK (0x00000003U)


///< common PLL powerup force enable. Under normal operation CMN PLL block
///< is powered up/down as needed by internal circuits.             If
///< asserted, CMN PLL will power up unconditionally allows postdivided
///< output clock to be used independently of rest of PHY.
///< 0: Do not force CMN PLL powerup.
///< 1: Force CMN PLL block powerup.
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_PWR_UP_BF_DEF (0x00000000)

///< Indicates which of the two programmed frequency CMN PLL will be forced
///< powered up to. This is applicable only if pll_force_pwr_up is set.
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_PLL_FORCE_RATE_FREQ_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_CMN_RDY register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/CMN_RDY
  * PHy Common Ready Status
  */

typedef union {
  struct {
    uint32_t CMN_RDY_STS : 1;
    ///< Common block ready status.            Indicates common block is fully
    ///< powered up                                                1'b0: Common
    ///< lane is not ready                                               1'b1:
    ///< Common lane is ready
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_cmn_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_CMN_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_CMN_RDY_RD_MASK (0x00000001U)
#define JESDABC_PHY_CSR_MEM_CMN_RDY_WR_MASK (0x00000000U)


///< Common block ready status.            Indicates common block is fully
///< powered up                                                1'b0: Common
///< lane is not ready                                               1'b1:
///< Common lane is ready
#define JESDABC_PHY_CSR_MEM_CMN_RDY_CMN_RDY_STS_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_CMN_RDY_CMN_RDY_STS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_RDY_CMN_RDY_STS_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_CMN_RDY_CMN_RDY_STS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_CMN_PLLA_RDY register description at address offset 0x444
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/CMN_PLLA_RDY
  * Common PLL Ready Status
  */

typedef union {
  struct {
    uint32_t PLL_READY : 1;
    ///< Common PLL ready signal, indicating PLL is fully powered up.
    ///< 1'b0: CMN RDY is not ready.
    ///< 1'b1: CMN RDY is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_LOCK_STATUS : 1;
    ///< Common PLL lock status indicating that the  signal,PLL is locked to
    ///< its reference clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_cmn_plla_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_WR_MASK (0x00000000U)


///< Common PLL ready signal, indicating PLL is fully powered up.
///< 1'b0: CMN RDY is not ready.
///< 1'b1: CMN RDY is ready.
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_READY_BF_DEF (0x00000000)

///< Common PLL lock status indicating that the  signal,PLL is locked to
///< its reference clock.
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_LOCK_STATUS_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_LOCK_STATUS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_LOCK_STATUS_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_PLL_LOCK_STATUS_BF_DEF (0x00000000)


/** @brief JESDABC_PHY_CSR_MEM_JESDABC_PHY_CSR_CMN_PLLB_RDY register description at address offset 0x448
  *
  * Register default value:        0x00000000
  * Register full path in IP: jesdabc_phy_csr_MEM/jesdabc_phy_csr/CMN_PLLB_RDY
  * Common PLL Ready Status
  */

typedef union {
  struct {
    uint32_t PLL_READY : 1;
    ///< Common PLL ready signal, indicating PLL is fully powered up.
    ///< 1'b0: CMN RDY is not ready.
    ///< 1'b1: CMN RDY is ready.
    ///< AccessType="RO" BitOffset="0" ResetValue="0x0"
    uint32_t PLL_LOCK_STATUS : 1;
    ///< Common PLL lock status indicating that the  signal,PLL is locked to
    ///< its reference clock.
    ///< AccessType="RO" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} jesdabc_phy_csr_mem_cmn_pllb_rdy_reg_t;

#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_DEFAULT (0x00000000U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_RD_MASK (0x00000003U)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_WR_MASK (0x00000000U)


///< Common PLL ready signal, indicating PLL is fully powered up.
///< 1'b0: CMN RDY is not ready.
///< 1'b1: CMN RDY is ready.
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_READY_BF_OFF ( 0)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_READY_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_READY_BF_MSK (0x00000001)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_READY_BF_DEF (0x00000000)

///< Common PLL lock status indicating that the  signal,PLL is locked to
///< its reference clock.
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_LOCK_STATUS_BF_OFF ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_LOCK_STATUS_BF_WID ( 1)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_LOCK_STATUS_BF_MSK (0x00000002)
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_PLL_LOCK_STATUS_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

// Stepping: A0
//
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_pll_force_pwr_up_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_pstate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_rate_div_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_RATE_DIV_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_modulation_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_data_clk_div_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_elec_idle_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_ELEC_IDLE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_pstate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_mode_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_MODE_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_modulation_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_ovr_smpl_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_OVR_SMPL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_eq_precal_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_EQ_PRECAL_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_eq_static_en_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_EQ_STATIC_EN_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_eq_adpat_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADPAT_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_eye_meas_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_pll_rdy_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_PLL_RDY_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l0_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_TX_L0_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_cdr_lk2_data_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_CDR_LK2_DATA_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_sig_detect_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_SIG_DETECT_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_cdr_freq_lk_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_eq_adapt_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_EQ_ADAPT_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l0_eye_meas_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L0_EYE_MEAS_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_pll_force_pwr_up_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_pstate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_rate_div_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_RATE_DIV_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_modulation_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_data_clk_div_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_elec_idle_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_ELEC_IDLE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_pstate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_mode_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_MODE_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_modulation_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_ovr_smpl_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_OVR_SMPL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_eq_precal_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_EQ_PRECAL_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_eq_static_en_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_EQ_STATIC_EN_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_eq_adpat_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADPAT_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_eye_meas_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_pll_rdy_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_PLL_RDY_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l1_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_TX_L1_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_cdr_lk2_data_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_CDR_LK2_DATA_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_sig_detect_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_SIG_DETECT_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_cdr_freq_lk_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_eq_adapt_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_EQ_ADAPT_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l1_eye_meas_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L1_EYE_MEAS_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_pll_force_pwr_up_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_pstate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_rate_div_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_RATE_DIV_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_modulation_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_data_clk_div_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_elec_idle_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_ELEC_IDLE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_pstate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_mode_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_MODE_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_modulation_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_ovr_smpl_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_OVR_SMPL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_eq_precal_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_EQ_PRECAL_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_eq_static_en_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_EQ_STATIC_EN_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_eq_adpat_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADPAT_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_eye_meas_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_pll_rdy_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_PLL_RDY_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l2_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_TX_L2_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_cdr_lk2_data_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_CDR_LK2_DATA_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_sig_detect_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_SIG_DETECT_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_cdr_freq_lk_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_eq_adapt_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_EQ_ADAPT_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l2_eye_meas_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L2_EYE_MEAS_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_pll_force_pwr_up_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_PLL_FORCE_PWR_UP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_pstate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_rate_div_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_RATE_DIV_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_modulation_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_data_clk_div_rate_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_DATA_CLK_DIV_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_elec_idle_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_ELEC_IDLE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_pstate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_PSTATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_freq_rate_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_FREQ_RATE_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_mode_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_MODE_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_modulation_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_MODULATION_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_ovr_smpl_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_OVR_SMPL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_eq_precal_sel_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_EQ_PRECAL_SEL_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_eq_static_en_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_EQ_STATIC_EN_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_eq_adpat_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADPAT_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_eye_meas_start_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_START_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_pll_rdy_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_PLL_RDY_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_tx_l3_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_TX_L3_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_cfg_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_CFG_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_cdr_lk2_data_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_CDR_LK2_DATA_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_sig_detect_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_SIG_DETECT_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_cdr_freq_lk_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_CDR_FREQ_LK_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_eq_adapt_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_EQ_ADAPT_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_REG(_BASE) ((jesdabc_phy_csr_mem_rx_l3_eye_meas_sts_reg_t*) JESDABC_PHY_CSR_MEM_RX_L3_EYE_MEAS_STS_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_REG(_BASE) ((jesdabc_phy_csr_mem_cmn_force_pwrup_reg_t*) JESDABC_PHY_CSR_MEM_CMN_FORCE_PWRUP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_REG(_BASE) ((jesdabc_phy_csr_mem_cmn_plla_force_pwrup_reg_t*) JESDABC_PHY_CSR_MEM_CMN_PLLA_FORCE_PWRUP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_REG(_BASE) ((jesdabc_phy_csr_mem_cmn_pllb_force_pwrup_reg_t*) JESDABC_PHY_CSR_MEM_CMN_PLLB_FORCE_PWRUP_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_CMN_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_cmn_rdy_reg_t*) JESDABC_PHY_CSR_MEM_CMN_RDY_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_cmn_plla_rdy_reg_t*) JESDABC_PHY_CSR_MEM_CMN_PLLA_RDY_ADR(_BASE))
#define JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_REG(_BASE) ((jesdabc_phy_csr_mem_cmn_pllb_rdy_reg_t*) JESDABC_PHY_CSR_MEM_CMN_PLLB_RDY_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
// Stepping: A0
//
typedef struct
{
    jesdabc_phy_csr_mem_tx_l0_pll_force_pwr_up_reg_t TX_L0_PLL_FORCE_PWR_UP; /*< Address offset = 0x0 */
    jesdabc_phy_csr_mem_tx_l0_pstate_reg_t TX_L0_PSTATE; /*< Address offset = 0x4 */
    jesdabc_phy_csr_mem_tx_l0_freq_rate_reg_t TX_L0_FREQ_RATE; /*< Address offset = 0x8 */
    jesdabc_phy_csr_mem_tx_l0_rate_div_reg_t TX_L0_RATE_DIV; /*< Address offset = 0xc */
    jesdabc_phy_csr_mem_tx_l0_modulation_reg_t TX_L0_MODULATION; /*< Address offset = 0x10 */
    jesdabc_phy_csr_mem_tx_l0_data_clk_div_rate_reg_t TX_L0_DATA_CLK_DIV_RATE; /*< Address offset = 0x14 */
    jesdabc_phy_csr_mem_tx_l0_elec_idle_reg_t TX_L0_ELEC_IDLE; /*< Address offset = 0x18 */
    const uint8_t        reservedArea0 [36];  /*< Address offset = 0x1c */
    jesdabc_phy_csr_mem_rx_l0_pstate_reg_t RX_L0_PSTATE; /*< Address offset = 0x40 */
    jesdabc_phy_csr_mem_rx_l0_freq_rate_reg_t RX_L0_FREQ_RATE; /*< Address offset = 0x44 */
    jesdabc_phy_csr_mem_rx_l0_mode_sel_reg_t RX_L0_MODE_SEL; /*< Address offset = 0x48 */
    jesdabc_phy_csr_mem_rx_l0_modulation_reg_t RX_L0_MODULATION; /*< Address offset = 0x4c */
    jesdabc_phy_csr_mem_rx_l0_ovr_smpl_reg_t RX_L0_OVR_SMPL; /*< Address offset = 0x50 */
    jesdabc_phy_csr_mem_rx_l0_eq_precal_sel_reg_t RX_L0_EQ_PRECAL_SEL; /*< Address offset = 0x54 */
    jesdabc_phy_csr_mem_rx_l0_eq_static_en_reg_t RX_L0_EQ_STATIC_EN; /*< Address offset = 0x58 */
    jesdabc_phy_csr_mem_rx_l0_eq_adpat_start_reg_t RX_L0_EQ_ADPAT_START; /*< Address offset = 0x5c */
    jesdabc_phy_csr_mem_rx_l0_eye_meas_start_reg_t RX_L0_EYE_MEAS_START; /*< Address offset = 0x60 */
    const uint8_t        reservedArea1 [28];  /*< Address offset = 0x64 */
    jesdabc_phy_csr_mem_tx_l0_pll_rdy_reg_t TX_L0_PLL_RDY; /*< Address offset = 0x80 */
    jesdabc_phy_csr_mem_tx_l0_cfg_sts_reg_t TX_L0_CFG_STS; /*< Address offset = 0x84 */
    const uint8_t        reservedArea2 [56];  /*< Address offset = 0x88 */
    jesdabc_phy_csr_mem_rx_l0_cfg_sts_reg_t RX_L0_CFG_STS; /*< Address offset = 0xc0 */
    jesdabc_phy_csr_mem_rx_l0_cdr_lk2_data_reg_t RX_L0_CDR_LK2_DATA; /*< Address offset = 0xc4 */
    jesdabc_phy_csr_mem_rx_l0_sig_detect_reg_t RX_L0_SIG_DETECT; /*< Address offset = 0xc8 */
    jesdabc_phy_csr_mem_rx_l0_cdr_freq_lk_sts_reg_t RX_L0_CDR_FREQ_LK_STS; /*< Address offset = 0xcc */
    jesdabc_phy_csr_mem_rx_l0_eq_adapt_sts_reg_t RX_L0_EQ_ADAPT_STS; /*< Address offset = 0xd0 */
    jesdabc_phy_csr_mem_rx_l0_eye_meas_sts_reg_t RX_L0_EYE_MEAS_STS; /*< Address offset = 0xd4 */
    const uint8_t        reservedArea3 [40];  /*< Address offset = 0xd8 */
    jesdabc_phy_csr_mem_tx_l1_pll_force_pwr_up_reg_t TX_L1_PLL_FORCE_PWR_UP; /*< Address offset = 0x100 */
    jesdabc_phy_csr_mem_tx_l1_pstate_reg_t TX_L1_PSTATE; /*< Address offset = 0x104 */
    jesdabc_phy_csr_mem_tx_l1_freq_rate_reg_t TX_L1_FREQ_RATE; /*< Address offset = 0x108 */
    jesdabc_phy_csr_mem_tx_l1_rate_div_reg_t TX_L1_RATE_DIV; /*< Address offset = 0x10c */
    jesdabc_phy_csr_mem_tx_l1_modulation_reg_t TX_L1_MODULATION; /*< Address offset = 0x110 */
    jesdabc_phy_csr_mem_tx_l1_data_clk_div_rate_reg_t TX_L1_DATA_CLK_DIV_RATE; /*< Address offset = 0x114 */
    jesdabc_phy_csr_mem_tx_l1_elec_idle_reg_t TX_L1_ELEC_IDLE; /*< Address offset = 0x118 */
    const uint8_t        reservedArea4 [36];  /*< Address offset = 0x11c */
    jesdabc_phy_csr_mem_rx_l1_pstate_reg_t RX_L1_PSTATE; /*< Address offset = 0x140 */
    jesdabc_phy_csr_mem_rx_l1_freq_rate_reg_t RX_L1_FREQ_RATE; /*< Address offset = 0x144 */
    jesdabc_phy_csr_mem_rx_l1_mode_sel_reg_t RX_L1_MODE_SEL; /*< Address offset = 0x148 */
    jesdabc_phy_csr_mem_rx_l1_modulation_reg_t RX_L1_MODULATION; /*< Address offset = 0x14c */
    jesdabc_phy_csr_mem_rx_l1_ovr_smpl_reg_t RX_L1_OVR_SMPL; /*< Address offset = 0x150 */
    jesdabc_phy_csr_mem_rx_l1_eq_precal_sel_reg_t RX_L1_EQ_PRECAL_SEL; /*< Address offset = 0x154 */
    jesdabc_phy_csr_mem_rx_l1_eq_static_en_reg_t RX_L1_EQ_STATIC_EN; /*< Address offset = 0x158 */
    jesdabc_phy_csr_mem_rx_l1_eq_adpat_start_reg_t RX_L1_EQ_ADPAT_START; /*< Address offset = 0x15c */
    jesdabc_phy_csr_mem_rx_l1_eye_meas_start_reg_t RX_L1_EYE_MEAS_START; /*< Address offset = 0x160 */
    const uint8_t        reservedArea5 [28];  /*< Address offset = 0x164 */
    jesdabc_phy_csr_mem_tx_l1_pll_rdy_reg_t TX_L1_PLL_RDY; /*< Address offset = 0x180 */
    jesdabc_phy_csr_mem_tx_l1_cfg_sts_reg_t TX_L1_CFG_STS; /*< Address offset = 0x184 */
    const uint8_t        reservedArea6 [56];  /*< Address offset = 0x188 */
    jesdabc_phy_csr_mem_rx_l1_cfg_sts_reg_t RX_L1_CFG_STS; /*< Address offset = 0x1c0 */
    jesdabc_phy_csr_mem_rx_l1_cdr_lk2_data_reg_t RX_L1_CDR_LK2_DATA; /*< Address offset = 0x1c4 */
    jesdabc_phy_csr_mem_rx_l1_sig_detect_reg_t RX_L1_SIG_DETECT; /*< Address offset = 0x1c8 */
    jesdabc_phy_csr_mem_rx_l1_cdr_freq_lk_sts_reg_t RX_L1_CDR_FREQ_LK_STS; /*< Address offset = 0x1cc */
    jesdabc_phy_csr_mem_rx_l1_eq_adapt_sts_reg_t RX_L1_EQ_ADAPT_STS; /*< Address offset = 0x1d0 */
    jesdabc_phy_csr_mem_rx_l1_eye_meas_sts_reg_t RX_L1_EYE_MEAS_STS; /*< Address offset = 0x1d4 */
    const uint8_t        reservedArea7 [40];  /*< Address offset = 0x1d8 */
    jesdabc_phy_csr_mem_tx_l2_pll_force_pwr_up_reg_t TX_L2_PLL_FORCE_PWR_UP; /*< Address offset = 0x200 */
    jesdabc_phy_csr_mem_tx_l2_pstate_reg_t TX_L2_PSTATE; /*< Address offset = 0x204 */
    jesdabc_phy_csr_mem_tx_l2_freq_rate_reg_t TX_L2_FREQ_RATE; /*< Address offset = 0x208 */
    jesdabc_phy_csr_mem_tx_l2_rate_div_reg_t TX_L2_RATE_DIV; /*< Address offset = 0x20c */
    jesdabc_phy_csr_mem_tx_l2_modulation_reg_t TX_L2_MODULATION; /*< Address offset = 0x210 */
    jesdabc_phy_csr_mem_tx_l2_data_clk_div_rate_reg_t TX_L2_DATA_CLK_DIV_RATE; /*< Address offset = 0x214 */
    jesdabc_phy_csr_mem_tx_l2_elec_idle_reg_t TX_L2_ELEC_IDLE; /*< Address offset = 0x218 */
    const uint8_t        reservedArea8 [36];  /*< Address offset = 0x21c */
    jesdabc_phy_csr_mem_rx_l2_pstate_reg_t RX_L2_PSTATE; /*< Address offset = 0x240 */
    jesdabc_phy_csr_mem_rx_l2_freq_rate_reg_t RX_L2_FREQ_RATE; /*< Address offset = 0x244 */
    jesdabc_phy_csr_mem_rx_l2_mode_sel_reg_t RX_L2_MODE_SEL; /*< Address offset = 0x248 */
    jesdabc_phy_csr_mem_rx_l2_modulation_reg_t RX_L2_MODULATION; /*< Address offset = 0x24c */
    jesdabc_phy_csr_mem_rx_l2_ovr_smpl_reg_t RX_L2_OVR_SMPL; /*< Address offset = 0x250 */
    jesdabc_phy_csr_mem_rx_l2_eq_precal_sel_reg_t RX_L2_EQ_PRECAL_SEL; /*< Address offset = 0x254 */
    jesdabc_phy_csr_mem_rx_l2_eq_static_en_reg_t RX_L2_EQ_STATIC_EN; /*< Address offset = 0x258 */
    jesdabc_phy_csr_mem_rx_l2_eq_adpat_start_reg_t RX_L2_EQ_ADPAT_START; /*< Address offset = 0x25c */
    jesdabc_phy_csr_mem_rx_l2_eye_meas_start_reg_t RX_L2_EYE_MEAS_START; /*< Address offset = 0x260 */
    const uint8_t        reservedArea9 [28];  /*< Address offset = 0x264 */
    jesdabc_phy_csr_mem_tx_l2_pll_rdy_reg_t TX_L2_PLL_RDY; /*< Address offset = 0x280 */
    jesdabc_phy_csr_mem_tx_l2_cfg_sts_reg_t TX_L2_CFG_STS; /*< Address offset = 0x284 */
    const uint8_t        reservedArea10 [56]; /*< Address offset = 0x288 */
    jesdabc_phy_csr_mem_rx_l2_cfg_sts_reg_t RX_L2_CFG_STS; /*< Address offset = 0x2c0 */
    jesdabc_phy_csr_mem_rx_l2_cdr_lk2_data_reg_t RX_L2_CDR_LK2_DATA; /*< Address offset = 0x2c4 */
    jesdabc_phy_csr_mem_rx_l2_sig_detect_reg_t RX_L2_SIG_DETECT; /*< Address offset = 0x2c8 */
    jesdabc_phy_csr_mem_rx_l2_cdr_freq_lk_sts_reg_t RX_L2_CDR_FREQ_LK_STS; /*< Address offset = 0x2cc */
    jesdabc_phy_csr_mem_rx_l2_eq_adapt_sts_reg_t RX_L2_EQ_ADAPT_STS; /*< Address offset = 0x2d0 */
    jesdabc_phy_csr_mem_rx_l2_eye_meas_sts_reg_t RX_L2_EYE_MEAS_STS; /*< Address offset = 0x2d4 */
    const uint8_t        reservedArea11 [40]; /*< Address offset = 0x2d8 */
    jesdabc_phy_csr_mem_tx_l3_pll_force_pwr_up_reg_t TX_L3_PLL_FORCE_PWR_UP; /*< Address offset = 0x300 */
    jesdabc_phy_csr_mem_tx_l3_pstate_reg_t TX_L3_PSTATE; /*< Address offset = 0x304 */
    jesdabc_phy_csr_mem_tx_l3_freq_rate_reg_t TX_L3_FREQ_RATE; /*< Address offset = 0x308 */
    jesdabc_phy_csr_mem_tx_l3_rate_div_reg_t TX_L3_RATE_DIV; /*< Address offset = 0x30c */
    jesdabc_phy_csr_mem_tx_l3_modulation_reg_t TX_L3_MODULATION; /*< Address offset = 0x310 */
    jesdabc_phy_csr_mem_tx_l3_data_clk_div_rate_reg_t TX_L3_DATA_CLK_DIV_RATE; /*< Address offset = 0x314 */
    jesdabc_phy_csr_mem_tx_l3_elec_idle_reg_t TX_L3_ELEC_IDLE; /*< Address offset = 0x318 */
    const uint8_t        reservedArea12 [36]; /*< Address offset = 0x31c */
    jesdabc_phy_csr_mem_rx_l3_pstate_reg_t RX_L3_PSTATE; /*< Address offset = 0x340 */
    jesdabc_phy_csr_mem_rx_l3_freq_rate_reg_t RX_L3_FREQ_RATE; /*< Address offset = 0x344 */
    jesdabc_phy_csr_mem_rx_l3_mode_sel_reg_t RX_L3_MODE_SEL; /*< Address offset = 0x348 */
    jesdabc_phy_csr_mem_rx_l3_modulation_reg_t RX_L3_MODULATION; /*< Address offset = 0x34c */
    jesdabc_phy_csr_mem_rx_l3_ovr_smpl_reg_t RX_L3_OVR_SMPL; /*< Address offset = 0x350 */
    jesdabc_phy_csr_mem_rx_l3_eq_precal_sel_reg_t RX_L3_EQ_PRECAL_SEL; /*< Address offset = 0x354 */
    jesdabc_phy_csr_mem_rx_l3_eq_static_en_reg_t RX_L3_EQ_STATIC_EN; /*< Address offset = 0x358 */
    jesdabc_phy_csr_mem_rx_l3_eq_adpat_start_reg_t RX_L3_EQ_ADPAT_START; /*< Address offset = 0x35c */
    jesdabc_phy_csr_mem_rx_l3_eye_meas_start_reg_t RX_L3_EYE_MEAS_START; /*< Address offset = 0x360 */
    const uint8_t        reservedArea13 [28]; /*< Address offset = 0x364 */
    jesdabc_phy_csr_mem_tx_l3_pll_rdy_reg_t TX_L3_PLL_RDY; /*< Address offset = 0x380 */
    jesdabc_phy_csr_mem_tx_l3_cfg_sts_reg_t TX_L3_CFG_STS; /*< Address offset = 0x384 */
    const uint8_t        reservedArea14 [56]; /*< Address offset = 0x388 */
    jesdabc_phy_csr_mem_rx_l3_cfg_sts_reg_t RX_L3_CFG_STS; /*< Address offset = 0x3c0 */
    jesdabc_phy_csr_mem_rx_l3_cdr_lk2_data_reg_t RX_L3_CDR_LK2_DATA; /*< Address offset = 0x3c4 */
    jesdabc_phy_csr_mem_rx_l3_sig_detect_reg_t RX_L3_SIG_DETECT; /*< Address offset = 0x3c8 */
    jesdabc_phy_csr_mem_rx_l3_cdr_freq_lk_sts_reg_t RX_L3_CDR_FREQ_LK_STS; /*< Address offset = 0x3cc */
    jesdabc_phy_csr_mem_rx_l3_eq_adapt_sts_reg_t RX_L3_EQ_ADAPT_STS; /*< Address offset = 0x3d0 */
    jesdabc_phy_csr_mem_rx_l3_eye_meas_sts_reg_t RX_L3_EYE_MEAS_STS; /*< Address offset = 0x3d4 */
    const uint8_t        reservedArea15 [40]; /*< Address offset = 0x3d8 */
    jesdabc_phy_csr_mem_cmn_force_pwrup_reg_t CMN_FORCE_PWRUP; /*< Address offset = 0x400 */
    jesdabc_phy_csr_mem_cmn_plla_force_pwrup_reg_t CMN_PLLA_FORCE_PWRUP; /*< Address offset = 0x404 */
    jesdabc_phy_csr_mem_cmn_pllb_force_pwrup_reg_t CMN_PLLB_FORCE_PWRUP; /*< Address offset = 0x408 */
    const uint8_t        reservedArea16 [52]; /*< Address offset = 0x40c */
    jesdabc_phy_csr_mem_cmn_rdy_reg_t CMN_RDY; /*< Address offset = 0x440 */
    jesdabc_phy_csr_mem_cmn_plla_rdy_reg_t CMN_PLLA_RDY; /*< Address offset = 0x444 */
    jesdabc_phy_csr_mem_cmn_pllb_rdy_reg_t CMN_PLLB_RDY; /*< Address offset = 0x448 */
} jesdabc_phy_csr_t;     // size: 0x0198

// AddressSpace struct pointer
//
#define DLNK_JESDABC0_PHY_CSR ((jesdabc_phy_csr_t*) DLNK_JESDABC0_PHY_CSR_BASE)
#define DLNK_JESDABC1_PHY_CSR ((jesdabc_phy_csr_t*) DLNK_JESDABC1_PHY_CSR_BASE)
#define DLNK_JESDABC2_PHY_CSR ((jesdabc_phy_csr_t*) DLNK_JESDABC2_PHY_CSR_BASE)
#define DLNK_JESDABC3_PHY_CSR ((jesdabc_phy_csr_t*) DLNK_JESDABC3_PHY_CSR_BASE)

// ******************************************* /Address Space

#endif      // _JESDABC_PHY_CSR_H_

