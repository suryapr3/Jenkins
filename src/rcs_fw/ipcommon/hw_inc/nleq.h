#ifndef _NLEQ_H_
#define _NLEQ_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define FB_ANT0_NLEQ0_BASE    ( 0x05020000 )
#define FB_ANT0_NLEQ1_BASE    ( 0x05060000 )
#define FB_ANT1_NLEQ0_BASE    ( 0x050a0000 )
#define FB_ANT1_NLEQ1_BASE    ( 0x050e0000 )
#define TRX_ANT0_NLEQ0_BASE   ( 0x05122000 )
#define TRX_ANT0_NLEQ1_BASE   ( 0x05132000 )
#define TRX_ANT1_NLEQ0_BASE   ( 0x05142000 )
#define TRX_ANT1_NLEQ1_BASE   ( 0x05152000 )
#define TRX_ANT2_NLEQ0_BASE   ( 0x05162000 )
#define TRX_ANT2_NLEQ1_BASE   ( 0x05172000 )
#define TRX_ANT3_NLEQ0_BASE   ( 0x05182000 )
#define TRX_ANT3_NLEQ1_BASE   ( 0x05192000 )
#define TRX_ANT4_NLEQ0_BASE   ( 0x051a2000 )
#define TRX_ANT4_NLEQ1_BASE   ( 0x051b2000 )
#define TRX_ANT5_NLEQ0_BASE   ( 0x051c2000 )
#define TRX_ANT5_NLEQ1_BASE   ( 0x051d2000 )
#define TRX_ANT6_NLEQ0_BASE   ( 0x051e2000 )
#define TRX_ANT6_NLEQ1_BASE   ( 0x051f2000 )
#define TRX_ANT7_NLEQ0_BASE   ( 0x05202000 )
#define TRX_ANT7_NLEQ1_BASE   ( 0x05212000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define NLEQ_C_SLICE_SHDW0_C_DC_SHDW_OFFSET ( 0x00000000U )
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW0_OFFSET ( 0x00000004U )
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW1_OFFSET ( 0x00000008U )
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW2_OFFSET ( 0x0000000cU )
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW3_OFFSET ( 0x00000010U )
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW4_OFFSET ( 0x00000014U )
#define NLEQ_C_SLICE_SHDW1_C_DC_SHDW_OFFSET ( 0x00000020U )
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW0_OFFSET ( 0x00000024U )
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW1_OFFSET ( 0x00000028U )
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW2_OFFSET ( 0x0000002cU )
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW3_OFFSET ( 0x00000030U )
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW4_OFFSET ( 0x00000034U )
#define NLEQ_C_SLICE_SHDW2_C_DC_SHDW_OFFSET ( 0x00000040U )
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW0_OFFSET ( 0x00000044U )
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW1_OFFSET ( 0x00000048U )
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW2_OFFSET ( 0x0000004cU )
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW3_OFFSET ( 0x00000050U )
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW4_OFFSET ( 0x00000054U )
#define NLEQ_C_SLICE_SHDW3_C_DC_SHDW_OFFSET ( 0x00000060U )
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW0_OFFSET ( 0x00000064U )
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW1_OFFSET ( 0x00000068U )
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW2_OFFSET ( 0x0000006cU )
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW3_OFFSET ( 0x00000070U )
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW4_OFFSET ( 0x00000074U )
#define NLEQ_C_SLICE_SHDW4_C_DC_SHDW_OFFSET ( 0x00000080U )
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW0_OFFSET ( 0x00000084U )
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW1_OFFSET ( 0x00000088U )
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW2_OFFSET ( 0x0000008cU )
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW3_OFFSET ( 0x00000090U )
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW4_OFFSET ( 0x00000094U )
#define NLEQ_C_SLICE_SHDW5_C_DC_SHDW_OFFSET ( 0x000000a0U )
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW0_OFFSET ( 0x000000a4U )
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW1_OFFSET ( 0x000000a8U )
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW2_OFFSET ( 0x000000acU )
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW3_OFFSET ( 0x000000b0U )
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW4_OFFSET ( 0x000000b4U )
#define NLEQ_C_SLICE_SHDW6_C_DC_SHDW_OFFSET ( 0x000000c0U )
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW0_OFFSET ( 0x000000c4U )
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW1_OFFSET ( 0x000000c8U )
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW2_OFFSET ( 0x000000ccU )
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW3_OFFSET ( 0x000000d0U )
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW4_OFFSET ( 0x000000d4U )
#define NLEQ_C_SLICE_SHDW7_C_DC_SHDW_OFFSET ( 0x000000e0U )
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW0_OFFSET ( 0x000000e4U )
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW1_OFFSET ( 0x000000e8U )
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW2_OFFSET ( 0x000000ecU )
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW3_OFFSET ( 0x000000f0U )
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW4_OFFSET ( 0x000000f4U )
#define NLEQ_C_SLICE_SHDW8_C_DC_SHDW_OFFSET ( 0x00000100U )
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW0_OFFSET ( 0x00000104U )
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW1_OFFSET ( 0x00000108U )
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW2_OFFSET ( 0x0000010cU )
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW3_OFFSET ( 0x00000110U )
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW4_OFFSET ( 0x00000114U )
#define NLEQ_C_SLICE_SHDW9_C_DC_SHDW_OFFSET ( 0x00000120U )
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW0_OFFSET ( 0x00000124U )
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW1_OFFSET ( 0x00000128U )
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW2_OFFSET ( 0x0000012cU )
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW3_OFFSET ( 0x00000130U )
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW4_OFFSET ( 0x00000134U )
#define NLEQ_C_SLICE_SHDW10_C_DC_SHDW_OFFSET ( 0x00000140U )
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW0_OFFSET ( 0x00000144U )
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW1_OFFSET ( 0x00000148U )
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW2_OFFSET ( 0x0000014cU )
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW3_OFFSET ( 0x00000150U )
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW4_OFFSET ( 0x00000154U )
#define NLEQ_C_SLICE_SHDW11_C_DC_SHDW_OFFSET ( 0x00000160U )
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW0_OFFSET ( 0x00000164U )
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW1_OFFSET ( 0x00000168U )
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW2_OFFSET ( 0x0000016cU )
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW3_OFFSET ( 0x00000170U )
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW4_OFFSET ( 0x00000174U )
#define NLEQ_C_SLICE_SHDW12_C_DC_SHDW_OFFSET ( 0x00000180U )
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW0_OFFSET ( 0x00000184U )
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW1_OFFSET ( 0x00000188U )
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW2_OFFSET ( 0x0000018cU )
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW3_OFFSET ( 0x00000190U )
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW4_OFFSET ( 0x00000194U )
#define NLEQ_C_SLICE_SHDW13_C_DC_SHDW_OFFSET ( 0x000001a0U )
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW0_OFFSET ( 0x000001a4U )
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW1_OFFSET ( 0x000001a8U )
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW2_OFFSET ( 0x000001acU )
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW3_OFFSET ( 0x000001b0U )
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW4_OFFSET ( 0x000001b4U )
#define NLEQ_C_SLICE_SHDW14_C_DC_SHDW_OFFSET ( 0x000001c0U )
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW0_OFFSET ( 0x000001c4U )
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW1_OFFSET ( 0x000001c8U )
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW2_OFFSET ( 0x000001ccU )
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW3_OFFSET ( 0x000001d0U )
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW4_OFFSET ( 0x000001d4U )
#define NLEQ_C_SLICE_SHDW15_C_DC_SHDW_OFFSET ( 0x000001e0U )
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW0_OFFSET ( 0x000001e4U )
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW1_OFFSET ( 0x000001e8U )
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW2_OFFSET ( 0x000001ecU )
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW3_OFFSET ( 0x000001f0U )
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW4_OFFSET ( 0x000001f4U )
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW0_OFFSET ( 0x00000200U )
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW1_OFFSET ( 0x00000204U )
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW2_OFFSET ( 0x00000208U )
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW3_OFFSET ( 0x0000020cU )
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW4_OFFSET ( 0x00000210U )
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW5_OFFSET ( 0x00000214U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW0_OFFSET ( 0x00000220U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW1_OFFSET ( 0x00000224U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW2_OFFSET ( 0x00000228U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW3_OFFSET ( 0x0000022cU )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW4_OFFSET ( 0x00000230U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW5_OFFSET ( 0x00000234U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW6_OFFSET ( 0x00000238U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW7_OFFSET ( 0x0000023cU )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW8_OFFSET ( 0x00000240U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW9_OFFSET ( 0x00000244U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW10_OFFSET ( 0x00000248U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW11_OFFSET ( 0x0000024cU )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW12_OFFSET ( 0x00000250U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW13_OFFSET ( 0x00000254U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW14_OFFSET ( 0x00000258U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW15_OFFSET ( 0x0000025cU )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW16_OFFSET ( 0x00000260U )
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW17_OFFSET ( 0x00000264U )
#define NLEQ_C_SLICE_LIVE0_C_DC_LIVE_OFFSET ( 0x00000400U )
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE0_OFFSET ( 0x00000404U )
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE1_OFFSET ( 0x00000408U )
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE2_OFFSET ( 0x0000040cU )
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE3_OFFSET ( 0x00000410U )
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE4_OFFSET ( 0x00000414U )
#define NLEQ_C_SLICE_LIVE1_C_DC_LIVE_OFFSET ( 0x00000420U )
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE0_OFFSET ( 0x00000424U )
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE1_OFFSET ( 0x00000428U )
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE2_OFFSET ( 0x0000042cU )
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE3_OFFSET ( 0x00000430U )
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE4_OFFSET ( 0x00000434U )
#define NLEQ_C_SLICE_LIVE2_C_DC_LIVE_OFFSET ( 0x00000440U )
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE0_OFFSET ( 0x00000444U )
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE1_OFFSET ( 0x00000448U )
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE2_OFFSET ( 0x0000044cU )
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE3_OFFSET ( 0x00000450U )
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE4_OFFSET ( 0x00000454U )
#define NLEQ_C_SLICE_LIVE3_C_DC_LIVE_OFFSET ( 0x00000460U )
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE0_OFFSET ( 0x00000464U )
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE1_OFFSET ( 0x00000468U )
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE2_OFFSET ( 0x0000046cU )
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE3_OFFSET ( 0x00000470U )
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE4_OFFSET ( 0x00000474U )
#define NLEQ_C_SLICE_LIVE4_C_DC_LIVE_OFFSET ( 0x00000480U )
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE0_OFFSET ( 0x00000484U )
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE1_OFFSET ( 0x00000488U )
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE2_OFFSET ( 0x0000048cU )
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE3_OFFSET ( 0x00000490U )
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE4_OFFSET ( 0x00000494U )
#define NLEQ_C_SLICE_LIVE5_C_DC_LIVE_OFFSET ( 0x000004a0U )
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE0_OFFSET ( 0x000004a4U )
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE1_OFFSET ( 0x000004a8U )
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE2_OFFSET ( 0x000004acU )
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE3_OFFSET ( 0x000004b0U )
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE4_OFFSET ( 0x000004b4U )
#define NLEQ_C_SLICE_LIVE6_C_DC_LIVE_OFFSET ( 0x000004c0U )
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE0_OFFSET ( 0x000004c4U )
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE1_OFFSET ( 0x000004c8U )
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE2_OFFSET ( 0x000004ccU )
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE3_OFFSET ( 0x000004d0U )
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE4_OFFSET ( 0x000004d4U )
#define NLEQ_C_SLICE_LIVE7_C_DC_LIVE_OFFSET ( 0x000004e0U )
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE0_OFFSET ( 0x000004e4U )
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE1_OFFSET ( 0x000004e8U )
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE2_OFFSET ( 0x000004ecU )
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE3_OFFSET ( 0x000004f0U )
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE4_OFFSET ( 0x000004f4U )
#define NLEQ_C_SLICE_LIVE8_C_DC_LIVE_OFFSET ( 0x00000500U )
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE0_OFFSET ( 0x00000504U )
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE1_OFFSET ( 0x00000508U )
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE2_OFFSET ( 0x0000050cU )
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE3_OFFSET ( 0x00000510U )
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE4_OFFSET ( 0x00000514U )
#define NLEQ_C_SLICE_LIVE9_C_DC_LIVE_OFFSET ( 0x00000520U )
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE0_OFFSET ( 0x00000524U )
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE1_OFFSET ( 0x00000528U )
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE2_OFFSET ( 0x0000052cU )
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE3_OFFSET ( 0x00000530U )
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE4_OFFSET ( 0x00000534U )
#define NLEQ_C_SLICE_LIVE10_C_DC_LIVE_OFFSET ( 0x00000540U )
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE0_OFFSET ( 0x00000544U )
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE1_OFFSET ( 0x00000548U )
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE2_OFFSET ( 0x0000054cU )
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE3_OFFSET ( 0x00000550U )
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE4_OFFSET ( 0x00000554U )
#define NLEQ_C_SLICE_LIVE11_C_DC_LIVE_OFFSET ( 0x00000560U )
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE0_OFFSET ( 0x00000564U )
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE1_OFFSET ( 0x00000568U )
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE2_OFFSET ( 0x0000056cU )
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE3_OFFSET ( 0x00000570U )
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE4_OFFSET ( 0x00000574U )
#define NLEQ_C_SLICE_LIVE12_C_DC_LIVE_OFFSET ( 0x00000580U )
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE0_OFFSET ( 0x00000584U )
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE1_OFFSET ( 0x00000588U )
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE2_OFFSET ( 0x0000058cU )
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE3_OFFSET ( 0x00000590U )
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE4_OFFSET ( 0x00000594U )
#define NLEQ_C_SLICE_LIVE13_C_DC_LIVE_OFFSET ( 0x000005a0U )
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE0_OFFSET ( 0x000005a4U )
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE1_OFFSET ( 0x000005a8U )
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE2_OFFSET ( 0x000005acU )
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE3_OFFSET ( 0x000005b0U )
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE4_OFFSET ( 0x000005b4U )
#define NLEQ_C_SLICE_LIVE14_C_DC_LIVE_OFFSET ( 0x000005c0U )
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE0_OFFSET ( 0x000005c4U )
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE1_OFFSET ( 0x000005c8U )
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE2_OFFSET ( 0x000005ccU )
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE3_OFFSET ( 0x000005d0U )
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE4_OFFSET ( 0x000005d4U )
#define NLEQ_C_SLICE_LIVE15_C_DC_LIVE_OFFSET ( 0x000005e0U )
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE0_OFFSET ( 0x000005e4U )
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE1_OFFSET ( 0x000005e8U )
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE2_OFFSET ( 0x000005ecU )
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE3_OFFSET ( 0x000005f0U )
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE4_OFFSET ( 0x000005f4U )
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE0_OFFSET ( 0x00000600U )
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE1_OFFSET ( 0x00000604U )
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE2_OFFSET ( 0x00000608U )
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE3_OFFSET ( 0x0000060cU )
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE4_OFFSET ( 0x00000610U )
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE5_OFFSET ( 0x00000614U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE0_OFFSET ( 0x00000620U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE1_OFFSET ( 0x00000624U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE2_OFFSET ( 0x00000628U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE3_OFFSET ( 0x0000062cU )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE4_OFFSET ( 0x00000630U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE5_OFFSET ( 0x00000634U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE6_OFFSET ( 0x00000638U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE7_OFFSET ( 0x0000063cU )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE8_OFFSET ( 0x00000640U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE9_OFFSET ( 0x00000644U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE10_OFFSET ( 0x00000648U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE11_OFFSET ( 0x0000064cU )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE12_OFFSET ( 0x00000650U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE13_OFFSET ( 0x00000654U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE14_OFFSET ( 0x00000658U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE15_OFFSET ( 0x0000065cU )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE16_OFFSET ( 0x00000660U )
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE17_OFFSET ( 0x00000664U )
#define NLEQ_SCRATCH_OFFSET      ( 0x00000800U )
#define NLEQ_CFG_OFFSET       ( 0x00000804U )
#define NLEQ_CTRL_OFFSET      ( 0x00000808U )
#define NLEQ_CSR_CFG_OFFSET   ( 0x0000080cU )
#define NLEQ_CSR_ERR_OFFSET    ( 0x00000810U )
#define NLEQ_COEFF_EN_NORMAL_OFFSET ( 0x00000814U )
#define NLEQ_COEFF_EN_LP0_OFFSET ( 0x00000818U )
#define NLEQ_COEFF_EN_LP1_OFFSET ( 0x0000081cU )
#define NLEQ_LP_SPWR_INIT_OFFSET ( 0x00000820U )
#define NLEQ_LP_FPWR_INIT_OFFSET ( 0x00000824U )
#define NLEQ_LP_THR_L0_OFFSET    ( 0x00000828U )
#define NLEQ_LP_THR_H0_OFFSET    ( 0x0000082cU )
#define NLEQ_LP_THR_L1_OFFSET    ( 0x00000830U )
#define NLEQ_LP_THR_H1_OFFSET    ( 0x00000834U )
#define NLEQ_LP_DBG0_OFFSET    ( 0x00000838U )
#define NLEQ_LP_DBG1_OFFSET    ( 0x0000083cU )
#define NLEQ_INT_STAT_OFFSET   ( 0x00000840U )
#define NLEQ_INT_HIGH_EN_OFFSET  ( 0x00000844U )
#define NLEQ_INT_LOW_EN_OFFSET   ( 0x00000848U )
#define NLEQ_INT_CLR_OFFSET    ( 0x0000084cU )
#define NLEQ_INT_FORCE_OFFSET    ( 0x00000850U )
#define NLEQ_APB_BRDG_STAT_OFFSET ( 0x00000854U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define NLEQ_C_SLICE_SHDW0_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW0_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW1_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW1_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW2_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW2_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW3_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW3_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW4_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW4_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW5_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW5_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW6_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW6_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW7_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW7_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW8_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW8_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW9_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW9_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW10_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW10_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW11_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW11_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW12_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW12_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW13_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW13_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW14_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW14_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW15_C_DC_SHDW_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW15_C_DC_SHDW_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW0_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW1_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW2_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW3_OFFSET ) ))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW4_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW0_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW1_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW2_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW3_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW4_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW5_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW5_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW0_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW1_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW2_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW3_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW4_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW5_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW5_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW6_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW6_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW7_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW7_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW8_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW8_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW9_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW9_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW10_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW10_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW11_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW11_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW12_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW12_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW13_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW13_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW14_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW14_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW15_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW15_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW16_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW16_OFFSET ) ))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW17_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW17_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE0_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE0_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE1_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE1_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE2_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE2_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE3_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE3_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE4_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE4_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE5_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE5_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE6_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE6_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE7_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE7_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE8_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE8_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE9_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE9_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE10_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE10_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE11_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE11_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE12_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE12_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE13_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE13_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE14_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE14_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE15_C_DC_LIVE_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE15_C_DC_LIVE_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE0_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE1_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE2_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE3_OFFSET ) ))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE4_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE0_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE1_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE2_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE3_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE4_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE5_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE5_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE0_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE0_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE1_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE1_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE2_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE2_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE3_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE3_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE4_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE4_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE5_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE5_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE6_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE6_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE7_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE7_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE8_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE8_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE9_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE9_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE10_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE10_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE11_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE11_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE12_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE12_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE13_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE13_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE14_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE14_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE15_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE15_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE16_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE16_OFFSET ) ))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE17_ADR(_BASE) (( ( _BASE ) + ( NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE17_OFFSET ) ))
#define NLEQ_SCRATCH_ADR(_BASE)         (( ( _BASE ) + ( NLEQ_SCRATCH_OFFSET ) ))
#define NLEQ_CFG_ADR(_BASE)          (( ( _BASE ) + ( NLEQ_CFG_OFFSET ) ))
#define NLEQ_CTRL_ADR(_BASE)         (( ( _BASE ) + ( NLEQ_CTRL_OFFSET ) ))
#define NLEQ_CSR_CFG_ADR(_BASE)      (( ( _BASE ) + ( NLEQ_CSR_CFG_OFFSET ) ))
#define NLEQ_CSR_ERR_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_CSR_ERR_OFFSET ) ))
#define NLEQ_COEFF_EN_NORMAL_ADR(_BASE) (( ( _BASE ) + ( NLEQ_COEFF_EN_NORMAL_OFFSET ) ))
#define NLEQ_COEFF_EN_LP0_ADR(_BASE)    (( ( _BASE ) + ( NLEQ_COEFF_EN_LP0_OFFSET ) ))
#define NLEQ_COEFF_EN_LP1_ADR(_BASE)    (( ( _BASE ) + ( NLEQ_COEFF_EN_LP1_OFFSET ) ))
#define NLEQ_LP_SPWR_INIT_ADR(_BASE)    (( ( _BASE ) + ( NLEQ_LP_SPWR_INIT_OFFSET ) ))
#define NLEQ_LP_FPWR_INIT_ADR(_BASE)    (( ( _BASE ) + ( NLEQ_LP_FPWR_INIT_OFFSET ) ))
#define NLEQ_LP_THR_L0_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_LP_THR_L0_OFFSET ) ))
#define NLEQ_LP_THR_H0_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_LP_THR_H0_OFFSET ) ))
#define NLEQ_LP_THR_L1_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_LP_THR_L1_OFFSET ) ))
#define NLEQ_LP_THR_H1_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_LP_THR_H1_OFFSET ) ))
#define NLEQ_LP_DBG0_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_LP_DBG0_OFFSET ) ))
#define NLEQ_LP_DBG1_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_LP_DBG1_OFFSET ) ))
#define NLEQ_INT_STAT_ADR(_BASE)      (( ( _BASE ) + ( NLEQ_INT_STAT_OFFSET ) ))
#define NLEQ_INT_HIGH_EN_ADR(_BASE)     (( ( _BASE ) + ( NLEQ_INT_HIGH_EN_OFFSET ) ))
#define NLEQ_INT_LOW_EN_ADR(_BASE)      (( ( _BASE ) + ( NLEQ_INT_LOW_EN_OFFSET ) ))
#define NLEQ_INT_CLR_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_INT_CLR_OFFSET ) ))
#define NLEQ_INT_FORCE_ADR(_BASE)       (( ( _BASE ) + ( NLEQ_INT_FORCE_OFFSET ) ))
#define NLEQ_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( NLEQ_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief NLEQ_MAP_REG_C_SLICE_SHDW0_C_DC_SHDW[16] register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_SLICE_SHDW0/C_DC_SHDW
  * NLEQ DC Offset Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 14;
    ///< Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_slice_shdw_c_dc_shdw_reg_t;

#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_DEFAULT (0x00000000U)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_RD_MASK (0x00003fffU)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_WR_MASK (0x00003fffU)


///< Coefficient
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_COEFF_BF_OFF ( 0)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_COEFF_BF_WID (14)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_COEFF_BF_MSK (0x00003FFF)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_ARR_SZ0 (16)
#define NLEQ_C_SLICE_SHDW_C_DC_SHDW_ARRAY_STRIDE0 (0x0020)


/** @brief NLEQ_MAP_REG_C_SLICE_SHDW_C_LINEAR_SHDW[16][5] register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_SLICE_SHDW/C_LINEAR_SHDW
  * NLEQ Linear Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 14;
    ///< Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_slice_shdw_c_linear_shdw_reg_t;

#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_DEFAULT (0x00000000U)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_RD_MASK (0x00003fffU)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_WR_MASK (0x00003fffU)


///< Coefficient
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_COEFF_BF_OFF ( 0)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_COEFF_BF_WID (14)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_COEFF_BF_MSK (0x00003FFF)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_ARR_SZ0 (16)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_ARRAY_STRIDE0 (0x0020)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_ARR_SZ1 (5)
#define NLEQ_C_SLICE_SHDW_C_LINEAR_SHDW_ARRAY_STRIDE1 (0x0004)


/** @brief NLEQ_MAP_REG_C_BUFFER_SHDW_C_SQUARE_SHDW[6] register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_BUFFER_SHDW/C_SQUARE_SHDW
  * NLEQ Nonlinear Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 12;
    ///< Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_buff_shdw_c_square_shdw_reg_t;

#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_DEFAULT (0x00000000U)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_RD_MASK (0x00000fffU)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_WR_MASK (0x00000fffU)


///< Coefficient
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_COEFF_BF_OFF ( 0)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_COEFF_BF_WID (12)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_COEFF_BF_MSK (0x00000FFF)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_ARR_SZ0 (6)
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW_ARRAY_STRIDE0 (0x0004)


/** @brief NLEQ_MAP_REG_C_BUFFER_SHDW_C_CUBIC_SHDW[18] register description at address offset 0x220
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_BUFFER_SHDW/C_CUBIC_SHDW
  * NLEQ Nonlinear Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 12;
    ///< Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_buff_shdw_c_cubic_shdw_reg_t;

#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_DEFAULT (0x00000000U)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_RD_MASK (0x00000fffU)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_WR_MASK (0x00000fffU)


///< Coefficient
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_COEFF_BF_OFF ( 0)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_COEFF_BF_WID (12)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_COEFF_BF_MSK (0x00000FFF)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_ARR_SZ0 (18)
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW_ARRAY_STRIDE0 (0x0004)


/** @brief NLEQ_MAP_REG_C_SLICE_LIVE0_C_DC_LIVE[16] register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_SLICE_LIVE0/C_DC_LIVE
  * NLEQ DC Offset Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 14;
    ///< Coefficient
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_slice_live_c_dc_live_reg_t;

#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_DEFAULT (0x00000000U)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_RD_MASK (0x00003fffU)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_WR_MASK (0x00003fffU)


///< Coefficient
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_COEFF_BF_OFF ( 0)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_COEFF_BF_WID (14)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_COEFF_BF_MSK (0x00003FFF)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_ARR_SZ0 (16)
#define NLEQ_C_SLICE_LIVE_C_DC_LIVE_ARRAY_STRIDE0 (0x0020)


/** @brief NLEQ_MAP_REG_C_SLICE_LIVE_C_LINEAR_LIVE[16][5] register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_SLICE_LIVE/C_LINEAR_LIVE
  * NLEQ Linear Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 14;
    ///< Coefficient
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_slice_live_c_linear_live_reg_t;

#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_DEFAULT (0x00000000U)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_RD_MASK (0x00003fffU)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_WR_MASK (0x00003fffU)


///< Coefficient
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_COEFF_BF_OFF ( 0)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_COEFF_BF_WID (14)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_COEFF_BF_MSK (0x00003FFF)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_ARR_SZ0 (16)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_ARRAY_STRIDE0 (0x0020)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_ARR_SZ1 (5)
#define NLEQ_C_SLICE_LIVE_C_LINEAR_LIVE_ARRAY_STRIDE1 (0x0004)


/** @brief NLEQ_MAP_REG_C_BUFFER_LIVE_C_SQUARE_LIVE[6] register description at address offset 0x600
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_BUFFER_LIVE/C_SQUARE_LIVE
  * NLEQ Nonlinear Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 12;
    ///< Coefficient
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_buff_live_c_square_live_reg_t;

#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_DEFAULT (0x00000000U)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_RD_MASK (0x00000fffU)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_WR_MASK (0x00000fffU)


///< Coefficient
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_COEFF_BF_OFF ( 0)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_COEFF_BF_WID (12)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_COEFF_BF_MSK (0x00000FFF)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_ARR_SZ0 (6)
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE_ARRAY_STRIDE0 (0x0004)


/** @brief NLEQ_MAP_REG_C_BUFFER_LIVE_C_CUBIC_LIVE[18] register description at address offset 0x620
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/C_BUFFER_LIVE/C_CUBIC_LIVE
  * NLEQ Nonlinear Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 12;
    ///< Coefficient
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} nleq_c_buff_live_c_cubic_live_reg_t;

#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_DEFAULT (0x00000000U)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_RD_MASK (0x00000fffU)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_WR_MASK (0x00000fffU)


///< Coefficient
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_COEFF_BF_OFF ( 0)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_COEFF_BF_WID (12)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_COEFF_BF_MSK (0x00000FFF)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_COEFF_BF_DEF (0x00000000)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_ARR_SZ0 (18)
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE_ARRAY_STRIDE0 (0x0004)


/** @brief NLEQ_MAP_REG_SCRATCH register description at address offset 0x800
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/SCRATCH
  * NLEQ scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} nleq_scratch_reg_t;

#define NLEQ_SCRATCH_DEFAULT (0x00000000U)
#define NLEQ_SCRATCH_RD_MASK (0xffffffffU)
#define NLEQ_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field.
#define NLEQ_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define NLEQ_SCRATCH_SCRATCHPAD_BF_WID (32)
#define NLEQ_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define NLEQ_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_CONFIG register description at address offset 0x804
  *
  * Register default value:        0x00000003
  * Register full path in IP: nleq_map/reg/CONFIG
  * NLEQ Configuration Register
  */

typedef union {
  struct {
    uint32_t EXT_CTRL_UPDATE : 1;
    ///< 0: Live coefficient update is controlled by the CONTROL register
    ///< 1: Live coefficient update is controlled externally, e.g. via BFN
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t EXT_CTRL_ZERO : 1;
    ///< 0: Zero stuffing is controlled by the CONTROL register
    ///< 1: Zero stuffing is controlled externally, e.g. via BFN
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t LP_ENABLE : 1;
    ///< 0: Low power mode is always disabled
    ///< 1: Low power mode is enabled, with state transitions dependent on
    ///< input signal power
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t ALPHA_FPWR : 3;
    ///< This is the alpha setting for the Fast Power (FPWR) IIR filter calculation
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t ALPHA_SPWR : 3;
    ///< This is the alpha setting for the Slow Power (SPWR) IIR filter calculation
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t NZG1 : 1;
    ///< 0: Operation in Nyquist Zone 1
    ///< 1: Operation in a Nyquist Zone greater than 1. This setting is ignored
    ///< with sampling rates greater than 8 GSPS.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t NL_EXP : 1;
    ///< 0: 3 SQUARE and 9 CUBIC coefficients per ADC Buffer
    ///< 1: 6 SQUARE and 18 CUBIC coefficients independent of ADC Buffer. This
    ///< setting is ignored with sampling rates greater than 8 GSPS.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} nleq_cfg_reg_t;

#define NLEQ_CFG_DEFAULT (0x00000003U)
#define NLEQ_CFG_RD_MASK (0x000007ffU)
#define NLEQ_CFG_WR_MASK (0x000007ffU)


///< 0: Live coefficient update is controlled by the CONTROL register
///< 1: Live coefficient update is controlled externally, e.g. via BFN
#define NLEQ_CFG_EXT_CTRL_UPDATE_BF_OFF ( 0)
#define NLEQ_CFG_EXT_CTRL_UPDATE_BF_WID ( 1)
#define NLEQ_CFG_EXT_CTRL_UPDATE_BF_MSK (0x00000001)
#define NLEQ_CFG_EXT_CTRL_UPDATE_BF_DEF (0x00000001)

///< 0: Zero stuffing is controlled by the CONTROL register
///< 1: Zero stuffing is controlled externally, e.g. via BFN
#define NLEQ_CFG_EXT_CTRL_ZERO_BF_OFF ( 1)
#define NLEQ_CFG_EXT_CTRL_ZERO_BF_WID ( 1)
#define NLEQ_CFG_EXT_CTRL_ZERO_BF_MSK (0x00000002)
#define NLEQ_CFG_EXT_CTRL_ZERO_BF_DEF (0x00000002)

///< 0: Low power mode is always disabled
///< 1: Low power mode is enabled, with state transitions dependent on
///< input signal power
#define NLEQ_CFG_LP_EN_BF_OFF ( 2)
#define NLEQ_CFG_LP_EN_BF_WID ( 1)
#define NLEQ_CFG_LP_EN_BF_MSK (0x00000004)
#define NLEQ_CFG_LP_EN_BF_DEF (0x00000000)

///< This is the alpha setting for the Fast Power (FPWR) IIR filter calculation
#define NLEQ_CFG_ALPHA_FPWR_BF_OFF ( 3)
#define NLEQ_CFG_ALPHA_FPWR_BF_WID ( 3)
#define NLEQ_CFG_ALPHA_FPWR_BF_MSK (0x00000038)
#define NLEQ_CFG_ALPHA_FPWR_BF_DEF (0x00000000)

///< This is the alpha setting for the Slow Power (SPWR) IIR filter calculation
#define NLEQ_CFG_ALPHA_SPWR_BF_OFF ( 6)
#define NLEQ_CFG_ALPHA_SPWR_BF_WID ( 3)
#define NLEQ_CFG_ALPHA_SPWR_BF_MSK (0x000001C0)
#define NLEQ_CFG_ALPHA_SPWR_BF_DEF (0x00000000)

///< 0: Operation in Nyquist Zone 1
///< 1: Operation in a Nyquist Zone greater than 1. This setting is ignored
///< with sampling rates greater than 8 GSPS.
#define NLEQ_CFG_NZG1_BF_OFF ( 9)
#define NLEQ_CFG_NZG1_BF_WID ( 1)
#define NLEQ_CFG_NZG1_BF_MSK (0x00000200)
#define NLEQ_CFG_NZG1_BF_DEF (0x00000000)

///< 0: 3 SQUARE and 9 CUBIC coefficients per ADC Buffer
///< 1: 6 SQUARE and 18 CUBIC coefficients independent of ADC Buffer. This
///< setting is ignored with sampling rates greater than 8 GSPS.
#define NLEQ_CFG_NL_EXP_BF_OFF (10)
#define NLEQ_CFG_NL_EXP_BF_WID ( 1)
#define NLEQ_CFG_NL_EXP_BF_MSK (0x00000400)
#define NLEQ_CFG_NL_EXP_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_CONTROL register description at address offset 0x808
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/CONTROL
  * NLEQ Control Register
  */

typedef union {
  struct {
    uint32_t UPDATE : 1;
    ///< Writing a 1 to this bit causes causes all of the shadow coefficient
    ///< registers to be copied to their live counterparts. This bit is self-clearing.
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t ZERO_STUFF : 1;
    ///< 0: Input samples are processed normally
    ///< 1: Input samples are replaced with zero values
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t BYPASS : 1;
    ///< 0: Input samples are processed normally
    ///< 1: Input samples are passed directly to the output
    ///< Bypass mode prevents the DC and generated terms from being added to
    ///< the passthru term at the final NLEQ adder stage.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} nleq_ctrl_reg_t;

#define NLEQ_CTRL_DEFAULT (0x00000000U)
#define NLEQ_CTRL_RD_MASK (0x00000007U)
#define NLEQ_CTRL_WR_MASK (0x00000007U)


///< Writing a 1 to this bit causes causes all of the shadow coefficient
///< registers to be copied to their live counterparts. This bit is self-clearing.
#define NLEQ_CTRL_UPDATE_BF_OFF ( 0)
#define NLEQ_CTRL_UPDATE_BF_WID ( 1)
#define NLEQ_CTRL_UPDATE_BF_MSK (0x00000001)
#define NLEQ_CTRL_UPDATE_BF_DEF (0x00000000)

///< 0: Input samples are processed normally
///< 1: Input samples are replaced with zero values
#define NLEQ_CTRL_ZERO_STUFF_BF_OFF ( 1)
#define NLEQ_CTRL_ZERO_STUFF_BF_WID ( 1)
#define NLEQ_CTRL_ZERO_STUFF_BF_MSK (0x00000002)
#define NLEQ_CTRL_ZERO_STUFF_BF_DEF (0x00000000)

///< 0: Input samples are processed normally
///< 1: Input samples are passed directly to the output
///< Bypass mode prevents the DC and generated terms from being added to
///< the passthru term at the final NLEQ adder stage.
#define NLEQ_CTRL_BYP_BF_OFF ( 2)
#define NLEQ_CTRL_BYP_BF_WID ( 1)
#define NLEQ_CTRL_BYP_BF_MSK (0x00000004)
#define NLEQ_CTRL_BYP_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_CSR_CONFIG register description at address offset 0x80c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/CSR_CONFIG
  * NLEQ CSR Configuration Register
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 1;
    ///< Test Control:                                               0: generate
    ///< correct parity when writing (default behavior)
    ///< 1: generate incorrect parity when writing (causes a parity error)
    ///< This setting affects ALL writes, whether from the management interface
    ///< or from a shadow/live update. If a shadow/live update is performed
    ///< while this bit is set, ALL updated live registers will have incorrect
    ///< parity.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} nleq_csr_cfg_reg_t;

#define NLEQ_CSR_CFG_DEFAULT (0x00000000U)
#define NLEQ_CSR_CFG_RD_MASK (0x00000001U)
#define NLEQ_CSR_CFG_WR_MASK (0x00000001U)


///< Test Control:                                               0: generate
///< correct parity when writing (default behavior)
///< 1: generate incorrect parity when writing (causes a parity error)
///< This setting affects ALL writes, whether from the management interface
///< or from a shadow/live update. If a shadow/live update is performed
///< while this bit is set, ALL updated live registers will have incorrect
///< parity.
#define NLEQ_CSR_CFG_TEST_CTRL_BF_OFF ( 0)
#define NLEQ_CSR_CFG_TEST_CTRL_BF_WID ( 1)
#define NLEQ_CSR_CFG_TEST_CTRL_BF_MSK (0x00000001)
#define NLEQ_CSR_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_CSR_ERROR register description at address offset 0x810
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/CSR_ERROR
  * NLEQ CSR Error Register
  */

typedef union {
  struct {
    uint32_t C_SLICE : 16;
    ///< Slice coefficients (1 error bit per slice).
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t C_SQUARE : 1;
    ///< Square coefficients.
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t C_CUBIC : 1;
    ///< CUBIC coefficients.
    ///< AccessType="RO/V" BitOffset="17" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} nleq_csr_err_reg_t;

#define NLEQ_CSR_ERR_DEFAULT (0x00000000U)
#define NLEQ_CSR_ERR_RD_MASK (0x0003ffffU)
#define NLEQ_CSR_ERR_WR_MASK (0x00000000U)


///< Slice coefficients (1 error bit per slice).
#define NLEQ_CSR_ERR_C_SLICE_BF_OFF ( 0)
#define NLEQ_CSR_ERR_C_SLICE_BF_WID (16)
#define NLEQ_CSR_ERR_C_SLICE_BF_MSK (0x0000FFFF)
#define NLEQ_CSR_ERR_C_SLICE_BF_DEF (0x00000000)

///< Square coefficients.
#define NLEQ_CSR_ERR_C_SQUARE_BF_OFF (16)
#define NLEQ_CSR_ERR_C_SQUARE_BF_WID ( 1)
#define NLEQ_CSR_ERR_C_SQUARE_BF_MSK (0x00010000)
#define NLEQ_CSR_ERR_C_SQUARE_BF_DEF (0x00000000)

///< CUBIC coefficients.
#define NLEQ_CSR_ERR_C_CUBIC_BF_OFF (17)
#define NLEQ_CSR_ERR_C_CUBIC_BF_WID ( 1)
#define NLEQ_CSR_ERR_C_CUBIC_BF_MSK (0x00020000)
#define NLEQ_CSR_ERR_C_CUBIC_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_COEFF_EN_NORMAL register description at address offset 0x814
  *
  * Register default value:        0x3FFFFFFF
  * Register full path in IP: nleq_map/reg/COEFF_EN_NORMAL
  * NLEQ Normal Mode Coefficient Enable Register
  */

typedef union {
  struct {
    uint32_t DC : 1;
    ///< DC Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t LINEAR : 5;
    ///< Linear Coefficients 4..0
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1F"
    uint32_t SQUARE : 6;
    ///< Square Coefficients 2..0
    ///< AccessType="RW" BitOffset="6" ResetValue="0x3F"
    uint32_t CUBIC : 18;
    ///< Cubic Coefficients 8..0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x3FFFF"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} nleq_coeff_en_normal_reg_t;

#define NLEQ_COEFF_EN_NORMAL_DEFAULT (0x3fffffffU)
#define NLEQ_COEFF_EN_NORMAL_RD_MASK (0x3fffffffU)
#define NLEQ_COEFF_EN_NORMAL_WR_MASK (0x3fffffffU)


///< DC Coefficient
#define NLEQ_COEFF_EN_NORMAL_DC_BF_OFF ( 0)
#define NLEQ_COEFF_EN_NORMAL_DC_BF_WID ( 1)
#define NLEQ_COEFF_EN_NORMAL_DC_BF_MSK (0x00000001)
#define NLEQ_COEFF_EN_NORMAL_DC_BF_DEF (0x00000001)

///< Linear Coefficients 4..0
#define NLEQ_COEFF_EN_NORMAL_LINEAR_BF_OFF ( 1)
#define NLEQ_COEFF_EN_NORMAL_LINEAR_BF_WID ( 5)
#define NLEQ_COEFF_EN_NORMAL_LINEAR_BF_MSK (0x0000003E)
#define NLEQ_COEFF_EN_NORMAL_LINEAR_BF_DEF (0x0000003E)

///< Square Coefficients 2..0
#define NLEQ_COEFF_EN_NORMAL_SQUARE_BF_OFF ( 6)
#define NLEQ_COEFF_EN_NORMAL_SQUARE_BF_WID ( 6)
#define NLEQ_COEFF_EN_NORMAL_SQUARE_BF_MSK (0x00000FC0)
#define NLEQ_COEFF_EN_NORMAL_SQUARE_BF_DEF (0x00000FC0)

///< Cubic Coefficients 8..0
#define NLEQ_COEFF_EN_NORMAL_CUBIC_BF_OFF (12)
#define NLEQ_COEFF_EN_NORMAL_CUBIC_BF_WID (18)
#define NLEQ_COEFF_EN_NORMAL_CUBIC_BF_MSK (0x3FFFF000)
#define NLEQ_COEFF_EN_NORMAL_CUBIC_BF_DEF (0x3FFFF000)


/** @brief NLEQ_MAP_REG_COEFF_EN_LP0 register description at address offset 0x818
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/COEFF_EN_LP0
  * NLEQ Low Power Coefficient Enable Register
  */

typedef union {
  struct {
    uint32_t DC : 1;
    ///< DC Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LINEAR : 5;
    ///< Linear Coefficients 4..0
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SQUARE : 6;
    ///< Square Coefficients 2..0
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CUBIC : 18;
    ///< Cubic Coefficients 8..0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} nleq_coeff_en_lp0_reg_t;

#define NLEQ_COEFF_EN_LP0_DEFAULT (0x00000000U)
#define NLEQ_COEFF_EN_LP0_RD_MASK (0x3fffffffU)
#define NLEQ_COEFF_EN_LP0_WR_MASK (0x3fffffffU)


///< DC Coefficient
#define NLEQ_COEFF_EN_LP0_DC_BF_OFF ( 0)
#define NLEQ_COEFF_EN_LP0_DC_BF_WID ( 1)
#define NLEQ_COEFF_EN_LP0_DC_BF_MSK (0x00000001)
#define NLEQ_COEFF_EN_LP0_DC_BF_DEF (0x00000000)

///< Linear Coefficients 4..0
#define NLEQ_COEFF_EN_LP0_LINEAR_BF_OFF ( 1)
#define NLEQ_COEFF_EN_LP0_LINEAR_BF_WID ( 5)
#define NLEQ_COEFF_EN_LP0_LINEAR_BF_MSK (0x0000003E)
#define NLEQ_COEFF_EN_LP0_LINEAR_BF_DEF (0x00000000)

///< Square Coefficients 2..0
#define NLEQ_COEFF_EN_LP0_SQUARE_BF_OFF ( 6)
#define NLEQ_COEFF_EN_LP0_SQUARE_BF_WID ( 6)
#define NLEQ_COEFF_EN_LP0_SQUARE_BF_MSK (0x00000FC0)
#define NLEQ_COEFF_EN_LP0_SQUARE_BF_DEF (0x00000000)

///< Cubic Coefficients 8..0
#define NLEQ_COEFF_EN_LP0_CUBIC_BF_OFF (12)
#define NLEQ_COEFF_EN_LP0_CUBIC_BF_WID (18)
#define NLEQ_COEFF_EN_LP0_CUBIC_BF_MSK (0x3FFFF000)
#define NLEQ_COEFF_EN_LP0_CUBIC_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_COEFF_EN_LP1 register description at address offset 0x81c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/COEFF_EN_LP1
  * NLEQ Low Power Coefficient Enable Register
  */

typedef union {
  struct {
    uint32_t DC : 1;
    ///< DC Coefficient
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t LINEAR : 5;
    ///< Linear Coefficients 4..0
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t SQUARE : 6;
    ///< Square Coefficients 2..0
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t CUBIC : 18;
    ///< Cubic Coefficients 8..0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} nleq_coeff_en_lp1_reg_t;

#define NLEQ_COEFF_EN_LP1_DEFAULT (0x00000000U)
#define NLEQ_COEFF_EN_LP1_RD_MASK (0x3fffffffU)
#define NLEQ_COEFF_EN_LP1_WR_MASK (0x3fffffffU)


///< DC Coefficient
#define NLEQ_COEFF_EN_LP1_DC_BF_OFF ( 0)
#define NLEQ_COEFF_EN_LP1_DC_BF_WID ( 1)
#define NLEQ_COEFF_EN_LP1_DC_BF_MSK (0x00000001)
#define NLEQ_COEFF_EN_LP1_DC_BF_DEF (0x00000000)

///< Linear Coefficients 4..0
#define NLEQ_COEFF_EN_LP1_LINEAR_BF_OFF ( 1)
#define NLEQ_COEFF_EN_LP1_LINEAR_BF_WID ( 5)
#define NLEQ_COEFF_EN_LP1_LINEAR_BF_MSK (0x0000003E)
#define NLEQ_COEFF_EN_LP1_LINEAR_BF_DEF (0x00000000)

///< Square Coefficients 2..0
#define NLEQ_COEFF_EN_LP1_SQUARE_BF_OFF ( 6)
#define NLEQ_COEFF_EN_LP1_SQUARE_BF_WID ( 6)
#define NLEQ_COEFF_EN_LP1_SQUARE_BF_MSK (0x00000FC0)
#define NLEQ_COEFF_EN_LP1_SQUARE_BF_DEF (0x00000000)

///< Cubic Coefficients 8..0
#define NLEQ_COEFF_EN_LP1_CUBIC_BF_OFF (12)
#define NLEQ_COEFF_EN_LP1_CUBIC_BF_WID (18)
#define NLEQ_COEFF_EN_LP1_CUBIC_BF_MSK (0x3FFFF000)
#define NLEQ_COEFF_EN_LP1_CUBIC_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_SPWR_INIT register description at address offset 0x820
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_SPWR_INIT
  * NLEQ Low Power SPWR Initial Value
  */

typedef union {
  struct {
    uint32_t INIT : 18;
    ///< SPWR initial value, format ur[18.18]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_spwr_init_reg_t;

#define NLEQ_LP_SPWR_INIT_DEFAULT (0x00000000U)
#define NLEQ_LP_SPWR_INIT_RD_MASK (0x0003ffffU)
#define NLEQ_LP_SPWR_INIT_WR_MASK (0x0003ffffU)


///< SPWR initial value, format ur[18.18]
#define NLEQ_LP_SPWR_INIT_BF_OFF ( 0)
#define NLEQ_LP_SPWR_INIT_BF_WID (18)
#define NLEQ_LP_SPWR_INIT_BF_MSK (0x0003FFFF)
#define NLEQ_LP_SPWR_INIT_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_FPWR_INIT register description at address offset 0x824
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_FPWR_INIT
  * NLEQ Low Power FPWR Initial Value
  */

typedef union {
  struct {
    uint32_t INIT : 15;
    ///< FPWR initial value, format ur[15.15]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_fpwr_init_reg_t;

#define NLEQ_LP_FPWR_INIT_DEFAULT (0x00000000U)
#define NLEQ_LP_FPWR_INIT_RD_MASK (0x00007fffU)
#define NLEQ_LP_FPWR_INIT_WR_MASK (0x00007fffU)


///< FPWR initial value, format ur[15.15]
#define NLEQ_LP_FPWR_INIT_BF_OFF ( 0)
#define NLEQ_LP_FPWR_INIT_BF_WID (15)
#define NLEQ_LP_FPWR_INIT_BF_MSK (0x00007FFF)
#define NLEQ_LP_FPWR_INIT_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_THR_L0 register description at address offset 0x828
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_THR_L0
  * NLEQ Low Power Threshold Register for SPWR Comparisons
  */

typedef union {
  struct {
    uint32_t THRESHOLD : 18;
    ///< SPWR comparison threshold, format ur[18.18]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_thr_l0_reg_t;

#define NLEQ_LP_THR_L0_DEFAULT (0x00000000U)
#define NLEQ_LP_THR_L0_RD_MASK (0x0003ffffU)
#define NLEQ_LP_THR_L0_WR_MASK (0x0003ffffU)


///< SPWR comparison threshold, format ur[18.18]
#define NLEQ_LP_THR_L0_TSHOLD_BF_OFF ( 0)
#define NLEQ_LP_THR_L0_TSHOLD_BF_WID (18)
#define NLEQ_LP_THR_L0_TSHOLD_BF_MSK (0x0003FFFF)
#define NLEQ_LP_THR_L0_TSHOLD_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_THR_H0 register description at address offset 0x82c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_THR_H0
  * NLEQ Low Power Threshold Register for FPWR Comparisons
  */

typedef union {
  struct {
    uint32_t THRESHOLD : 15;
    ///< FPWR comparison threshold, format ur[15.15]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_thr_h0_reg_t;

#define NLEQ_LP_THR_H0_DEFAULT (0x00000000U)
#define NLEQ_LP_THR_H0_RD_MASK (0x00007fffU)
#define NLEQ_LP_THR_H0_WR_MASK (0x00007fffU)


///< FPWR comparison threshold, format ur[15.15]
#define NLEQ_LP_THR_H0_TSHOLD_BF_OFF ( 0)
#define NLEQ_LP_THR_H0_TSHOLD_BF_WID (15)
#define NLEQ_LP_THR_H0_TSHOLD_BF_MSK (0x00007FFF)
#define NLEQ_LP_THR_H0_TSHOLD_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_THR_L1 register description at address offset 0x830
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_THR_L1
  * NLEQ Low Power Threshold Register for SPWR Comparisons
  */

typedef union {
  struct {
    uint32_t THRESHOLD : 18;
    ///< SPWR comparison threshold, format ur[18.18]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_thr_l1_reg_t;

#define NLEQ_LP_THR_L1_DEFAULT (0x00000000U)
#define NLEQ_LP_THR_L1_RD_MASK (0x0003ffffU)
#define NLEQ_LP_THR_L1_WR_MASK (0x0003ffffU)


///< SPWR comparison threshold, format ur[18.18]
#define NLEQ_LP_THR_L1_TSHOLD_BF_OFF ( 0)
#define NLEQ_LP_THR_L1_TSHOLD_BF_WID (18)
#define NLEQ_LP_THR_L1_TSHOLD_BF_MSK (0x0003FFFF)
#define NLEQ_LP_THR_L1_TSHOLD_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_THR_H1 register description at address offset 0x834
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_THR_H1
  * NLEQ Low Power Threshold Register for FPWR Comparisons
  */

typedef union {
  struct {
    uint32_t THRESHOLD : 15;
    ///< FPWR comparison threshold, format ur[15.15]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_thr_h1_reg_t;

#define NLEQ_LP_THR_H1_DEFAULT (0x00000000U)
#define NLEQ_LP_THR_H1_RD_MASK (0x00007fffU)
#define NLEQ_LP_THR_H1_WR_MASK (0x00007fffU)


///< FPWR comparison threshold, format ur[15.15]
#define NLEQ_LP_THR_H1_TSHOLD_BF_OFF ( 0)
#define NLEQ_LP_THR_H1_TSHOLD_BF_WID (15)
#define NLEQ_LP_THR_H1_TSHOLD_BF_MSK (0x00007FFF)
#define NLEQ_LP_THR_H1_TSHOLD_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_DEBUG0 register description at address offset 0x838
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_DEBUG0
  * NLEQ Low Power Debug0
  */

typedef union {
  struct {
    uint32_t FPWR : 15;
    ///< Current FPWR value, format ur[15.15]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t LP_STATE : 2;
    ///< Current Low Power state
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_dbg0_reg_t;

#define NLEQ_LP_DBG0_DEFAULT (0x00000000U)
#define NLEQ_LP_DBG0_RD_MASK (0x00037fffU)
#define NLEQ_LP_DBG0_WR_MASK (0x00000000U)


///< Current FPWR value, format ur[15.15]
#define NLEQ_LP_DBG0_FPWR_BF_OFF ( 0)
#define NLEQ_LP_DBG0_FPWR_BF_WID (15)
#define NLEQ_LP_DBG0_FPWR_BF_MSK (0x00007FFF)
#define NLEQ_LP_DBG0_FPWR_BF_DEF (0x00000000)

///< Current Low Power state
#define NLEQ_LP_DBG0_LP_STATE_BF_OFF (16)
#define NLEQ_LP_DBG0_LP_STATE_BF_WID ( 2)
#define NLEQ_LP_DBG0_LP_STATE_BF_MSK (0x00030000)
#define NLEQ_LP_DBG0_LP_STATE_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_LP_DEBUG1 register description at address offset 0x83c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/LP_DEBUG1
  * NLEQ Low Power Debug1
  */

typedef union {
  struct {
    uint32_t SPWR : 18;
    ///< Current SPWR value, format ur[18.18]
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} nleq_lp_dbg1_reg_t;

#define NLEQ_LP_DBG1_DEFAULT (0x00000000U)
#define NLEQ_LP_DBG1_RD_MASK (0x0003ffffU)
#define NLEQ_LP_DBG1_WR_MASK (0x00000000U)


///< Current SPWR value, format ur[18.18]
#define NLEQ_LP_DBG1_SPWR_BF_OFF ( 0)
#define NLEQ_LP_DBG1_SPWR_BF_WID (18)
#define NLEQ_LP_DBG1_SPWR_BF_MSK (0x0003FFFF)
#define NLEQ_LP_DBG1_SPWR_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_INT_STATUS register description at address offset 0x840
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/INT_STATUS
  * NLEQ Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} nleq_int_stat_reg_t;

#define NLEQ_INT_STAT_DEFAULT (0x00000000U)
#define NLEQ_INT_STAT_RD_MASK (0x00000001U)
#define NLEQ_INT_STAT_WR_MASK (0x00000000U)


///< Indicates register error interrupt status
#define NLEQ_INT_STAT_ERR_BF_OFF ( 0)
#define NLEQ_INT_STAT_ERR_BF_WID ( 1)
#define NLEQ_INT_STAT_ERR_BF_MSK (0x00000001)
#define NLEQ_INT_STAT_ERR_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_INT_HIGH_EN register description at address offset 0x844
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/INT_HIGH_EN
  * NLEQ Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} nleq_int_high_en_reg_t;

#define NLEQ_INT_HIGH_EN_DEFAULT (0x00000000U)
#define NLEQ_INT_HIGH_EN_RD_MASK (0x00000001U)
#define NLEQ_INT_HIGH_EN_WR_MASK (0x00000001U)


///< Register error interrupt high enable
#define NLEQ_INT_HIGH_EN_ERR_BF_OFF ( 0)
#define NLEQ_INT_HIGH_EN_ERR_BF_WID ( 1)
#define NLEQ_INT_HIGH_EN_ERR_BF_MSK (0x00000001)
#define NLEQ_INT_HIGH_EN_ERR_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_INT_LOW_EN register description at address offset 0x848
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/INT_LOW_EN
  * NLEQ Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} nleq_int_low_en_reg_t;

#define NLEQ_INT_LOW_EN_DEFAULT (0x00000000U)
#define NLEQ_INT_LOW_EN_RD_MASK (0x00000001U)
#define NLEQ_INT_LOW_EN_WR_MASK (0x00000001U)


///< Register error interrupt low enable
#define NLEQ_INT_LOW_EN_ERR_BF_OFF ( 0)
#define NLEQ_INT_LOW_EN_ERR_BF_WID ( 1)
#define NLEQ_INT_LOW_EN_ERR_BF_MSK (0x00000001)
#define NLEQ_INT_LOW_EN_ERR_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_INT_CLEAR register description at address offset 0x84c
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/INT_CLEAR
  * NLEQ Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} nleq_int_clr_reg_t;

#define NLEQ_INT_CLR_DEFAULT (0x00000000U)
#define NLEQ_INT_CLR_RD_MASK (0x00000001U)
#define NLEQ_INT_CLR_WR_MASK (0x00000001U)


///< Register error interrupt clear
#define NLEQ_INT_CLR_ERR_BF_OFF ( 0)
#define NLEQ_INT_CLR_ERR_BF_WID ( 1)
#define NLEQ_INT_CLR_ERR_BF_MSK (0x00000001)
#define NLEQ_INT_CLR_ERR_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_INT_FORCE register description at address offset 0x850
  *
  * Register default value:        0x00000000
  * Register full path in IP: nleq_map/reg/INT_FORCE
  * NLEQ Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} nleq_int_force_reg_t;

#define NLEQ_INT_FORCE_DEFAULT (0x00000000U)
#define NLEQ_INT_FORCE_RD_MASK (0x00000001U)
#define NLEQ_INT_FORCE_WR_MASK (0x00000001U)


///< Register error interrupt force
#define NLEQ_INT_FORCE_ERR_BF_OFF ( 0)
#define NLEQ_INT_FORCE_ERR_BF_WID ( 1)
#define NLEQ_INT_FORCE_ERR_BF_MSK (0x00000001)
#define NLEQ_INT_FORCE_ERR_BF_DEF (0x00000000)


/** @brief NLEQ_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x854
  *
  * Register default value:        0x00010000
  * Register full path in IP: nleq_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} nleq_apb_brdg_stat_reg_t;

#define NLEQ_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define NLEQ_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define NLEQ_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define NLEQ_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define NLEQ_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define NLEQ_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define NLEQ_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define NLEQ_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define NLEQ_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define NLEQ_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define NLEQ_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define NLEQ_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define NLEQ_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define NLEQ_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define NLEQ_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define NLEQ_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define NLEQ_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define NLEQ_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define NLEQ_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define NLEQ_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define NLEQ_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define NLEQ_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define NLEQ_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define NLEQ_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define NLEQ_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define NLEQ_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define NLEQ_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define NLEQ_C_SLICE_SHDW0_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW0_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW0_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW1_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW1_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW1_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW2_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW2_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW2_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW3_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW3_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW3_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW4_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW4_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW4_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW5_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW5_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW5_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW6_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW6_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW6_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW7_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW7_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW7_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW8_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW8_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW8_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW9_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW9_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW9_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW10_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW10_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW10_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW11_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW11_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW11_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW12_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW12_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW12_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW13_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW13_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW13_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW14_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW14_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW14_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW15_C_DC_SHDW_REG(_BASE) ((nleq_c_slice_shdw_c_dc_shdw_reg_t*) NLEQ_C_SLICE_SHDW15_C_DC_SHDW_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW0_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW0_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW1_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW1_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW2_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW2_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW3_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW3_ADR(_BASE))
#define NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW4_REG(_BASE) ((nleq_c_slice_shdw_c_linear_shdw_reg_t*) NLEQ_C_SLICE_SHDW15_C_LINEAR_SHDW4_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW0_REG(_BASE) ((nleq_c_buff_shdw_c_square_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW0_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW1_REG(_BASE) ((nleq_c_buff_shdw_c_square_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW1_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW2_REG(_BASE) ((nleq_c_buff_shdw_c_square_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW2_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW3_REG(_BASE) ((nleq_c_buff_shdw_c_square_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW3_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW4_REG(_BASE) ((nleq_c_buff_shdw_c_square_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW4_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW5_REG(_BASE) ((nleq_c_buff_shdw_c_square_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_SQUARE_SHDW5_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW0_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW0_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW1_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW1_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW2_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW2_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW3_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW3_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW4_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW4_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW5_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW5_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW6_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW6_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW7_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW7_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW8_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW8_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW9_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW9_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW10_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW10_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW11_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW11_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW12_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW12_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW13_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW13_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW14_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW14_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW15_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW15_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW16_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW16_ADR(_BASE))
#define NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW17_REG(_BASE) ((nleq_c_buff_shdw_c_cubic_shdw_reg_t*) NLEQ_C_BUFF_SHDW_C_CUBIC_SHDW17_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE0_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE0_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE0_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE1_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE1_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE1_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE2_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE2_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE2_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE3_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE3_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE3_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE4_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE4_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE4_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE5_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE5_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE5_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE6_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE6_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE6_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE7_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE7_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE7_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE8_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE8_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE8_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE9_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE9_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE9_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE10_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE10_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE10_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE11_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE11_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE11_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE12_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE12_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE12_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE13_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE13_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE13_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE14_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE14_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE14_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE15_C_DC_LIVE_REG(_BASE) ((nleq_c_slice_live_c_dc_live_reg_t*) NLEQ_C_SLICE_LIVE15_C_DC_LIVE_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE0_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE0_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE1_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE1_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE2_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE2_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE3_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE3_ADR(_BASE))
#define NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE4_REG(_BASE) ((nleq_c_slice_live_c_linear_live_reg_t*) NLEQ_C_SLICE_LIVE15_C_LINEAR_LIVE4_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE0_REG(_BASE) ((nleq_c_buff_live_c_square_live_reg_t*) NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE0_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE1_REG(_BASE) ((nleq_c_buff_live_c_square_live_reg_t*) NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE1_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE2_REG(_BASE) ((nleq_c_buff_live_c_square_live_reg_t*) NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE2_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE3_REG(_BASE) ((nleq_c_buff_live_c_square_live_reg_t*) NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE3_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE4_REG(_BASE) ((nleq_c_buff_live_c_square_live_reg_t*) NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE4_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE5_REG(_BASE) ((nleq_c_buff_live_c_square_live_reg_t*) NLEQ_C_BUFF_LIVE_C_SQUARE_LIVE5_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE0_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE0_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE1_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE1_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE2_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE2_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE3_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE3_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE4_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE4_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE5_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE5_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE6_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE6_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE7_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE7_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE8_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE8_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE9_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE9_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE10_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE10_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE11_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE11_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE12_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE12_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE13_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE13_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE14_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE14_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE15_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE15_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE16_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE16_ADR(_BASE))
#define NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE17_REG(_BASE) ((nleq_c_buff_live_c_cubic_live_reg_t*) NLEQ_C_BUFF_LIVE_C_CUBIC_LIVE17_ADR(_BASE))
#define NLEQ_SCRATCH_REG(_BASE) ((nleq_scratch_reg_t*) NLEQ_SCRATCH_ADR(_BASE))
#define NLEQ_CFG_REG(_BASE) ((nleq_cfg_reg_t*) NLEQ_CFG_ADR(_BASE))
#define NLEQ_CTRL_REG(_BASE) ((nleq_ctrl_reg_t*) NLEQ_CTRL_ADR(_BASE))
#define NLEQ_CSR_CFG_REG(_BASE) ((nleq_csr_cfg_reg_t*) NLEQ_CSR_CFG_ADR(_BASE))
#define NLEQ_CSR_ERR_REG(_BASE) ((nleq_csr_err_reg_t*) NLEQ_CSR_ERR_ADR(_BASE))
#define NLEQ_COEFF_EN_NORMAL_REG(_BASE) ((nleq_coeff_en_normal_reg_t*) NLEQ_COEFF_EN_NORMAL_ADR(_BASE))
#define NLEQ_COEFF_EN_LP0_REG(_BASE) ((nleq_coeff_en_lp0_reg_t*) NLEQ_COEFF_EN_LP0_ADR(_BASE))
#define NLEQ_COEFF_EN_LP1_REG(_BASE) ((nleq_coeff_en_lp1_reg_t*) NLEQ_COEFF_EN_LP1_ADR(_BASE))
#define NLEQ_LP_SPWR_INIT_REG(_BASE) ((nleq_lp_spwr_init_reg_t*) NLEQ_LP_SPWR_INIT_ADR(_BASE))
#define NLEQ_LP_FPWR_INIT_REG(_BASE) ((nleq_lp_fpwr_init_reg_t*) NLEQ_LP_FPWR_INIT_ADR(_BASE))
#define NLEQ_LP_THR_L0_REG(_BASE) ((nleq_lp_thr_l0_reg_t*) NLEQ_LP_THR_L0_ADR(_BASE))
#define NLEQ_LP_THR_H0_REG(_BASE) ((nleq_lp_thr_h0_reg_t*) NLEQ_LP_THR_H0_ADR(_BASE))
#define NLEQ_LP_THR_L1_REG(_BASE) ((nleq_lp_thr_l1_reg_t*) NLEQ_LP_THR_L1_ADR(_BASE))
#define NLEQ_LP_THR_H1_REG(_BASE) ((nleq_lp_thr_h1_reg_t*) NLEQ_LP_THR_H1_ADR(_BASE))
#define NLEQ_LP_DBG0_REG(_BASE) ((nleq_lp_dbg0_reg_t*) NLEQ_LP_DBG0_ADR(_BASE))
#define NLEQ_LP_DBG1_REG(_BASE) ((nleq_lp_dbg1_reg_t*) NLEQ_LP_DBG1_ADR(_BASE))
#define NLEQ_INT_STAT_REG(_BASE) ((nleq_int_stat_reg_t*) NLEQ_INT_STAT_ADR(_BASE))
#define NLEQ_INT_HIGH_EN_REG(_BASE) ((nleq_int_high_en_reg_t*) NLEQ_INT_HIGH_EN_ADR(_BASE))
#define NLEQ_INT_LOW_EN_REG(_BASE) ((nleq_int_low_en_reg_t*) NLEQ_INT_LOW_EN_ADR(_BASE))
#define NLEQ_INT_CLR_REG(_BASE) ((nleq_int_clr_reg_t*) NLEQ_INT_CLR_ADR(_BASE))
#define NLEQ_INT_FORCE_REG(_BASE) ((nleq_int_force_reg_t*) NLEQ_INT_FORCE_ADR(_BASE))
#define NLEQ_APB_BRDG_STAT_REG(_BASE) ((nleq_apb_brdg_stat_reg_t*) NLEQ_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW0_C_DC_SHDW; /*< Address offset = 0x0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW0_C_LINEAR_SHDW[5]; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [8];   /*< Address offset = 0x18 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW1_C_DC_SHDW; /*< Address offset = 0x20 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW1_C_LINEAR_SHDW[5]; /*< Address offset = 0x24 */
    const uint8_t        reservedArea1 [8];   /*< Address offset = 0x38 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW2_C_DC_SHDW; /*< Address offset = 0x40 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW2_C_LINEAR_SHDW[5]; /*< Address offset = 0x44 */
    const uint8_t        reservedArea2 [8];   /*< Address offset = 0x58 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW3_C_DC_SHDW; /*< Address offset = 0x60 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW3_C_LINEAR_SHDW[5]; /*< Address offset = 0x64 */
    const uint8_t        reservedArea3 [8];   /*< Address offset = 0x78 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW4_C_DC_SHDW; /*< Address offset = 0x80 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW4_C_LINEAR_SHDW[5]; /*< Address offset = 0x84 */
    const uint8_t        reservedArea4 [8];   /*< Address offset = 0x98 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW5_C_DC_SHDW; /*< Address offset = 0xa0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW5_C_LINEAR_SHDW[5]; /*< Address offset = 0xa4 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0xb8 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW6_C_DC_SHDW; /*< Address offset = 0xc0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW6_C_LINEAR_SHDW[5]; /*< Address offset = 0xc4 */
    const uint8_t        reservedArea6 [8];   /*< Address offset = 0xd8 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW7_C_DC_SHDW; /*< Address offset = 0xe0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW7_C_LINEAR_SHDW[5]; /*< Address offset = 0xe4 */
    const uint8_t        reservedArea7 [8];   /*< Address offset = 0xf8 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW8_C_DC_SHDW; /*< Address offset = 0x100 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW8_C_LINEAR_SHDW[5]; /*< Address offset = 0x104 */
    const uint8_t        reservedArea8 [8];   /*< Address offset = 0x118 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW9_C_DC_SHDW; /*< Address offset = 0x120 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW9_C_LINEAR_SHDW[5]; /*< Address offset = 0x124 */
    const uint8_t        reservedArea9 [8];   /*< Address offset = 0x138 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW10_C_DC_SHDW; /*< Address offset = 0x140 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW10_C_LINEAR_SHDW[5]; /*< Address offset = 0x144 */
    const uint8_t        reservedArea10 [8];  /*< Address offset = 0x158 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW11_C_DC_SHDW; /*< Address offset = 0x160 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW11_C_LINEAR_SHDW[5]; /*< Address offset = 0x164 */
    const uint8_t        reservedArea11 [8];  /*< Address offset = 0x178 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW12_C_DC_SHDW; /*< Address offset = 0x180 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW12_C_LINEAR_SHDW[5]; /*< Address offset = 0x184 */
    const uint8_t        reservedArea12 [8];  /*< Address offset = 0x198 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW13_C_DC_SHDW; /*< Address offset = 0x1a0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW13_C_LINEAR_SHDW[5]; /*< Address offset = 0x1a4 */
    const uint8_t        reservedArea13 [8];  /*< Address offset = 0x1b8 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW14_C_DC_SHDW; /*< Address offset = 0x1c0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW14_C_LINEAR_SHDW[5]; /*< Address offset = 0x1c4 */
    const uint8_t        reservedArea14 [8];  /*< Address offset = 0x1d8 */
    nleq_c_slice_shdw_c_dc_shdw_reg_t C_SLICE_SHDW15_C_DC_SHDW; /*< Address offset = 0x1e0 */
    nleq_c_slice_shdw_c_linear_shdw_reg_t C_SLICE_SHDW15_C_LINEAR_SHDW[5]; /*< Address offset = 0x1e4 */
    const uint8_t        reservedArea15 [8];  /*< Address offset = 0x1f8 */
    nleq_c_buff_shdw_c_square_shdw_reg_t C_BUFF_SHDW_C_SQUARE_SHDW[6]; /*< Address offset = 0x200 */
    const uint8_t        reservedArea16 [8];  /*< Address offset = 0x218 */
    nleq_c_buff_shdw_c_cubic_shdw_reg_t C_BUFF_SHDW_C_CUBIC_SHDW[18]; /*< Address offset = 0x220 */
    const uint8_t        reservedArea17 [408]; /*< Address offset = 0x268 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE0_C_DC_LIVE; /*< Address offset = 0x400 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE0_C_LINEAR_LIVE[5]; /*< Address offset = 0x404 */
    const uint8_t        reservedArea18 [8];  /*< Address offset = 0x418 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE1_C_DC_LIVE; /*< Address offset = 0x420 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE1_C_LINEAR_LIVE[5]; /*< Address offset = 0x424 */
    const uint8_t        reservedArea19 [8];  /*< Address offset = 0x438 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE2_C_DC_LIVE; /*< Address offset = 0x440 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE2_C_LINEAR_LIVE[5]; /*< Address offset = 0x444 */
    const uint8_t        reservedArea20 [8];  /*< Address offset = 0x458 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE3_C_DC_LIVE; /*< Address offset = 0x460 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE3_C_LINEAR_LIVE[5]; /*< Address offset = 0x464 */
    const uint8_t        reservedArea21 [8];  /*< Address offset = 0x478 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE4_C_DC_LIVE; /*< Address offset = 0x480 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE4_C_LINEAR_LIVE[5]; /*< Address offset = 0x484 */
    const uint8_t        reservedArea22 [8];  /*< Address offset = 0x498 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE5_C_DC_LIVE; /*< Address offset = 0x4a0 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE5_C_LINEAR_LIVE[5]; /*< Address offset = 0x4a4 */
    const uint8_t        reservedArea23 [8];  /*< Address offset = 0x4b8 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE6_C_DC_LIVE; /*< Address offset = 0x4c0 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE6_C_LINEAR_LIVE[5]; /*< Address offset = 0x4c4 */
    const uint8_t        reservedArea24 [8];  /*< Address offset = 0x4d8 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE7_C_DC_LIVE; /*< Address offset = 0x4e0 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE7_C_LINEAR_LIVE[5]; /*< Address offset = 0x4e4 */
    const uint8_t        reservedArea25 [8];  /*< Address offset = 0x4f8 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE8_C_DC_LIVE; /*< Address offset = 0x500 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE8_C_LINEAR_LIVE[5]; /*< Address offset = 0x504 */
    const uint8_t        reservedArea26 [8];  /*< Address offset = 0x518 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE9_C_DC_LIVE; /*< Address offset = 0x520 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE9_C_LINEAR_LIVE[5]; /*< Address offset = 0x524 */
    const uint8_t        reservedArea27 [8];  /*< Address offset = 0x538 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE10_C_DC_LIVE; /*< Address offset = 0x540 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE10_C_LINEAR_LIVE[5]; /*< Address offset = 0x544 */
    const uint8_t        reservedArea28 [8];  /*< Address offset = 0x558 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE11_C_DC_LIVE; /*< Address offset = 0x560 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE11_C_LINEAR_LIVE[5]; /*< Address offset = 0x564 */
    const uint8_t        reservedArea29 [8];  /*< Address offset = 0x578 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE12_C_DC_LIVE; /*< Address offset = 0x580 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE12_C_LINEAR_LIVE[5]; /*< Address offset = 0x584 */
    const uint8_t        reservedArea30 [8];  /*< Address offset = 0x598 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE13_C_DC_LIVE; /*< Address offset = 0x5a0 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE13_C_LINEAR_LIVE[5]; /*< Address offset = 0x5a4 */
    const uint8_t        reservedArea31 [8];  /*< Address offset = 0x5b8 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE14_C_DC_LIVE; /*< Address offset = 0x5c0 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE14_C_LINEAR_LIVE[5]; /*< Address offset = 0x5c4 */
    const uint8_t        reservedArea32 [8];  /*< Address offset = 0x5d8 */
    nleq_c_slice_live_c_dc_live_reg_t C_SLICE_LIVE15_C_DC_LIVE; /*< Address offset = 0x5e0 */
    nleq_c_slice_live_c_linear_live_reg_t C_SLICE_LIVE15_C_LINEAR_LIVE[5]; /*< Address offset = 0x5e4 */
    const uint8_t        reservedArea33 [8];  /*< Address offset = 0x5f8 */
    nleq_c_buff_live_c_square_live_reg_t C_BUFF_LIVE_C_SQUARE_LIVE[6]; /*< Address offset = 0x600 */
    const uint8_t        reservedArea34 [8];  /*< Address offset = 0x618 */
    nleq_c_buff_live_c_cubic_live_reg_t C_BUFF_LIVE_C_CUBIC_LIVE[18]; /*< Address offset = 0x620 */
    const uint8_t        reservedArea35 [408]; /*< Address offset = 0x668 */
    nleq_scratch_reg_t SCRATCH;         /*< Address offset = 0x800 */
    nleq_cfg_reg_t CFG;          /*< Address offset = 0x804 */
    nleq_ctrl_reg_t CTRL;         /*< Address offset = 0x808 */
    nleq_csr_cfg_reg_t CSR_CFG;      /*< Address offset = 0x80c */
    nleq_csr_err_reg_t CSR_ERR;       /*< Address offset = 0x810 */
    nleq_coeff_en_normal_reg_t COEFF_EN_NORMAL; /*< Address offset = 0x814 */
    nleq_coeff_en_lp0_reg_t COEFF_EN_LP0;    /*< Address offset = 0x818 */
    nleq_coeff_en_lp1_reg_t COEFF_EN_LP1;    /*< Address offset = 0x81c */
    nleq_lp_spwr_init_reg_t LP_SPWR_INIT;    /*< Address offset = 0x820 */
    nleq_lp_fpwr_init_reg_t LP_FPWR_INIT;    /*< Address offset = 0x824 */
    nleq_lp_thr_l0_reg_t LP_THR_L0;       /*< Address offset = 0x828 */
    nleq_lp_thr_h0_reg_t LP_THR_H0;       /*< Address offset = 0x82c */
    nleq_lp_thr_l1_reg_t LP_THR_L1;       /*< Address offset = 0x830 */
    nleq_lp_thr_h1_reg_t LP_THR_H1;       /*< Address offset = 0x834 */
    nleq_lp_dbg0_reg_t LP_DBG0;       /*< Address offset = 0x838 */
    nleq_lp_dbg1_reg_t LP_DBG1;       /*< Address offset = 0x83c */
    nleq_int_stat_reg_t INT_STAT;      /*< Address offset = 0x840 */
    nleq_int_high_en_reg_t INT_HIGH_EN;     /*< Address offset = 0x844 */
    nleq_int_low_en_reg_t INT_LOW_EN;      /*< Address offset = 0x848 */
    nleq_int_clr_reg_t INT_CLR;       /*< Address offset = 0x84c */
    nleq_int_force_reg_t INT_FORCE;       /*< Address offset = 0x850 */
    nleq_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x854 */
} nleq_t;     // size: 0x0168

// AddressSpace struct pointer
//
#define FB_ANT0_NLEQ0    ((nleq_t*) FB_ANT0_NLEQ0_BASE)
#define FB_ANT0_NLEQ1    ((nleq_t*) FB_ANT0_NLEQ1_BASE)
#define FB_ANT1_NLEQ0    ((nleq_t*) FB_ANT1_NLEQ0_BASE)
#define FB_ANT1_NLEQ1    ((nleq_t*) FB_ANT1_NLEQ1_BASE)
#define TRX_ANT0_NLEQ0   ((nleq_t*) TRX_ANT0_NLEQ0_BASE)
#define TRX_ANT0_NLEQ1   ((nleq_t*) TRX_ANT0_NLEQ1_BASE)
#define TRX_ANT1_NLEQ0   ((nleq_t*) TRX_ANT1_NLEQ0_BASE)
#define TRX_ANT1_NLEQ1   ((nleq_t*) TRX_ANT1_NLEQ1_BASE)
#define TRX_ANT2_NLEQ0   ((nleq_t*) TRX_ANT2_NLEQ0_BASE)
#define TRX_ANT2_NLEQ1   ((nleq_t*) TRX_ANT2_NLEQ1_BASE)
#define TRX_ANT3_NLEQ0   ((nleq_t*) TRX_ANT3_NLEQ0_BASE)
#define TRX_ANT3_NLEQ1   ((nleq_t*) TRX_ANT3_NLEQ1_BASE)
#define TRX_ANT4_NLEQ0   ((nleq_t*) TRX_ANT4_NLEQ0_BASE)
#define TRX_ANT4_NLEQ1   ((nleq_t*) TRX_ANT4_NLEQ1_BASE)
#define TRX_ANT5_NLEQ0   ((nleq_t*) TRX_ANT5_NLEQ0_BASE)
#define TRX_ANT5_NLEQ1   ((nleq_t*) TRX_ANT5_NLEQ1_BASE)
#define TRX_ANT6_NLEQ0   ((nleq_t*) TRX_ANT6_NLEQ0_BASE)
#define TRX_ANT6_NLEQ1   ((nleq_t*) TRX_ANT6_NLEQ1_BASE)
#define TRX_ANT7_NLEQ0   ((nleq_t*) TRX_ANT7_NLEQ0_BASE)
#define TRX_ANT7_NLEQ1   ((nleq_t*) TRX_ANT7_NLEQ1_BASE)

// ******************************************* /Address Space

#endif      // _NLEQ_H_

