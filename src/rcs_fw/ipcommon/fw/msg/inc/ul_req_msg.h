/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __UL_REQ_MSG__
#define __UL_REQ_MSG__

#include <stdint.h>
#include "com_msgs_enum.h"

/*
 * message for ul configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;           // opcode
        e_timing_type_t timing : 2;            // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                               // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                               // executes ASAP
        uint32_t ref_index : 4;                // Timing reference the relative timing mode uses. Makes use of the time reference
                                               // message. Time on the reference message forms the base time for relative timing
                                               // mode.See Set ref message for more info.
        uint32_t rb : 1;                       // request config readback response
        uint32_t res_31_23 : 9;                // reserved
        uint32_t timestamp;                    // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                               // event.In relative mode, this field denotes the delta from set reference
                                               // message.Immediate ignores the field
        uint32_t digrf_mixer_freq : 24;        // DRF mixing frequency
        uint32_t drf_rate : 8;                 // index to table com_drf_rate_conf_lut, for DRF operation clock, PLL, and sample rates
        uint32_t ant_group_ul_ant_mask : 16;   // the mask reflects the antennas enabled
        uint32_t vha_ul_latency : 16;          // Latency in ns from antenna to input of VHA
        uint32_t jesd_ul_idx : 8;              // index into JESD config table
        uint32_t q0_j : 2;                     // Jesd link used to sink data for quad 0
        uint32_t q1_j : 2;                     // Jesd link used to sink data for quad 1
        uint32_t q2_j : 2;                     // Jesd link used to sink data for quad 2
        uint32_t q3_j : 2;                     // Jesd link used to sink data for quad 3
        uint32_t drf_latency : 16;             // digrf latency in ns from antenna to digrf
        uint32_t ant_group_ul_band_freq0 : 24; // Center channel frequency for band 0 during band combining(VHA)
        uint32_t vha_rate : 4;                 // vha rate selection to table com_vha_rate_conf_lut
        uint32_t vha_filter_mode : 1;          // specifies the filter mode enabled in HW accelerator, 0:auto, 1:manual
        uint32_t topology : 3;                 // index to rx_topology_lut, for topology related info
        uint32_t ant_group_ul_band_freq1 : 24; // Center channel frequency for band 1 during band combining(VHA)
        uint32_t hw_tdd : 1;                   // Select HW/SW TDD
        uint32_t strm_cfg : 4;                 // index to table v2d_strm_cfg_lut for STREAM related info
        uint32_t res_223_221 : 3;              // reserved
    };
    uint32_t value[7];
} ul_config_ant_grp_bf_t;

/*
 * message for UL Off
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t rb : 1;             // unused
        uint32_t res0 : 9;           // reserved
        uint32_t timestamp;          // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                     // event.In relative mode, this field denotes the delta from set reference
                                     // message.Immediate ignores the field
        uint32_t mode : 2;           // Off Modes- 0: Normal,1:Cal _En, 2:OFF_Stop
        uint32_t res1 : 14;          // reserved
        uint32_t quad_mask0 : 4;     // Mask to indicate quads that are activated at the message timestamp
        uint32_t quad_mask1 : 4;     // Mask to indicate quads that are activated with delayed timing relative to timestamp
        uint32_t quad_mask2 : 4;     // Mask to indicate quads that are activated with delayed timing relative to timestamp
        uint32_t quad_mask3 : 4;     // Mask to indicate quads that are activated with delayed timing relative to timestamp
        uint32_t quad_delay1 : 12;   // Time delay from timestamp to activation of quads specified in quad_mask1
        uint32_t res2 : 4;           // reserved
        uint32_t quad_delay2 : 12;   // Time delay from timestamp to activation of quads specified in quad_mask2
        uint32_t res3 : 4;           // reserved
        uint32_t quad_delay3 : 12;   // Time delay from timestamp to activation of quads specified in quad_mask3
        uint32_t res4 : 20;          // reserved
    };
    uint32_t value[5];
} ul_off_bf_t;

/*
 * message for UL On
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t rb : 1;             // request readback response
        uint32_t res0 : 9;           // reserved
        uint32_t timestamp;          // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                     // event.In relative mode, this field denotes the delta from set reference
                                     // message.Immediate ignores the field
        uint32_t res1 : 16;          // reserved
        uint32_t quad_mask0 : 4;     // Mask to indicate quads that are activated at the message timestamp
        uint32_t quad_mask1 : 4;     // Mask to indicate quads that are activated with delayed timing relative to timestamp
        uint32_t quad_mask2 : 4;     // Mask to indicate quads that are activated with delayed timing relative to timestamp
        uint32_t quad_mask3 : 4;     // Mask to indicate quads that are activated with delayed timing relative to timestamp
        int32_t gain_ant0 : 8;       // gain for antenna0
        int32_t gain_ant1 : 8;       // gain for antenna1
        int32_t gain_ant2 : 8;       // gain for antenna2
        int32_t gain_ant3 : 8;       // gain for antenna 3
        int32_t gain_ant4 : 8;       //  gain for antenna 4
        int32_t gain_ant5 : 8;       // gain for antenna5
        int32_t gain_ant6 : 8;       // gain for antenna 6
        int32_t gain_ant7 : 8;       // gain for antenna7
        int32_t gain_ant8 : 8;       // gain for antenna8
        int32_t gain_ant9 : 8;       // gain for antenna9
        int32_t gain_ant10 : 8;      // gain for antenna10
        int32_t gain_ant11 : 8;      // gain for antenna 11
        int32_t gain_ant12 : 8;      //  gain for antenna 12
        int32_t gain_ant13 : 8;      // gain for antenna13
        int32_t gain_ant14 : 8;      // gain for antenna 14
        int32_t gain_ant15 : 8;      // gain for antenna15
        uint32_t quad_delay1 : 12;   // Time delay from timestamp to activation of quads specified in quad_mask1
        uint32_t res2 : 4;           // reserved
        uint32_t quad_delay2 : 12;   // Time delay from timestamp to activation of quads specified in quad_mask2
        uint32_t res3 : 4;           // reserved
        uint32_t quad_delay3 : 12;   // Time delay from timestamp to activation of quads specified in quad_mask3
        uint32_t res4 : 20;          // reserved
    };
    uint32_t value[9];
} ul_on_bf_t;

/*
 * message for ul gain updates
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;       // opcode
        e_timing_type_t timing : 2;        // selects the timing mode absolute/relative/immediate.Absolute runs at the
                                           // specified BFN. Relative - Timestamp is relative to time reference.
                                           // Immediate ignores timing and executes ASAP
        uint32_t ref_index : 4;            // Timing reference the relative timing mode uses. Makes use of the time
                                           // reference message. Time on the reference message forms the base time for
                                           // relative timing mode.See Set ref message for more info.
        uint32_t rb : 1;                   // request readback response
        uint32_t res0 : 9;                 // reserved
        uint32_t timestamp;                // BFN OTA time.In absolute mode, the timestamp is the network time
                                           // for the event.In relative mode, this field denotes the delta from
                                           // set reference message.Immediate ignores the field
        e_ul_cal_update_type_t update : 4; // allow or disallow calibration updates
        uint32_t res1 : 12;                // reserved
        uint32_t quad_mask0 : 4;           // Mask to indicate quads that are activated at the message timestamp
        uint32_t quad_mask1 : 4;           // Mask to indicate quads that are activated with delayed timing relative
                                           // to timestamp
        uint32_t quad_mask2 : 4;           // Mask to indicate quads that are activated with delayed timing relative
                                           // to timestamp
        uint32_t quad_mask3 : 4;           // Mask to indicate quads that are activated with delayed timing relative
                                           // to timestamp
        int32_t gain_ant0 : 8;             // gain for antenna0
        int32_t gain_ant1 : 8;             // gain for antenna1
        int32_t gain_ant2 : 8;             // gain for antenna2
        int32_t gain_ant3 : 8;             // gain for antenna 3
        int32_t gain_ant4 : 8;             //  gain for antenna 4
        int32_t gain_ant5 : 8;             // gain for antenna5
        int32_t gain_ant6 : 8;             // gain for antenna 6
        int32_t gain_ant7 : 8;             // gain for antenna7
        int32_t gain_ant8 : 8;             // gain for antenna8
        int32_t gain_ant9 : 8;             // gain for antenna9
        int32_t gain_ant10 : 8;            // gain for antenna10
        int32_t gain_ant11 : 8;            // gain for antenna 11
        int32_t gain_ant12 : 8;            //  gain for antenna 12
        int32_t gain_ant13 : 8;            // gain for antenna13
        int32_t gain_ant14 : 8;            // gain for antenna 14
        int32_t gain_ant15 : 8;            // gain for antenna15
        uint32_t quad_delay1 : 12;         // Time delay from timestamp to activation of quads specified in quad_mask1
        uint32_t res2 : 4;                 // reserved
        uint32_t quad_delay2 : 12;         // Time delay from timestamp to activation of quads specified in quad_mask2
        uint32_t res3 : 4;                 // reserved
        uint32_t quad_delay3 : 12;         // Time delay from timestamp to activation of quads specified in quad_mask3
        uint32_t res4 : 20;                // reserved
    };
    uint32_t value[9];
} ul_update_control_bf_t;

#endif // __UL_REQ_MSG__
