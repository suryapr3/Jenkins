/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __UL_SPI_REQ_MSG__
#define __UL_SPI_REQ_MSG__

#include <stdint.h>
#include "com_msgs_enum.h"

/*
 * message for ul spi off
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t quad_mask : 4;      // Mask to indicate quads that are activated at the timestamp
        uint32_t mode : 2;           // Off Modes- 0: Normal,1:Cal _En, 2:OFF_Stop
        uint32_t seq_num0 : 4;       // sequence number
        uint32_t timestamp : 28;     // BFN OTA time.In absolute mode, the timestamp is the network time for the event.In
                                     // relative mode, this field denotes the delta from set reference message.Immediate
                                     // ignores the field
        uint32_t seq_num1 : 4;       // sequence number
    };
    uint32_t value[2];
} ul_spi_off_bf_t;

/*
 * message for ul spi on
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t quad_mask : 4;      // Mask to indicate quads that are activated at the timestamp
        uint32_t rb : 1;             // request readback response
        uint32_t res0 : 1;           // reserved
        uint32_t seq_num0 : 4;       // sequence number
        uint32_t timestamp : 28;     // BFN OTA time.In absolute mode, the timestamp is the network time for the event.In
                                     // relative mode, this field denotes the delta from set reference message.Immediate
                                     // ignores the field
        uint32_t seq_num1 : 4;       // sequence number
    };
    uint32_t value[2];
} ul_spi_on_bf_t;

#endif // __UL_SPI_REQ_MSG__
