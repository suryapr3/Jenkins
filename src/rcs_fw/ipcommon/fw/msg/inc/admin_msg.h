/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __ADMIN_MSG__
#define __ADMIN_MSG__

#include <stdint.h>
#include "com_msgs_enum.h"

/*
 * message for synchronizing bfn time
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;         // opcode
        e_timing_type_t timing : 2;          // Unused
        uint32_t ref_index : 4;              // Unused
        uint32_t rb : 1;                     // unused
        uint32_t res0 : 9;                   // reserved
        uint32_t timestamp;                  // BFN OTA time LSB
        uint32_t timestamp_msb;              // BFN OTA time MSB
        e_bfn_sync_type_t bfn_sync_type : 1; //  External sync, ie:sysref or soft sync
        uint32_t resv1 : 31;                 // Reserved
    };
    uint32_t value[4];
} bfn_sync_bf_t;

/*
 * message for calibration configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;        // opcode
        e_timing_type_t timing : 2;         // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                            // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                            // executes ASAP
        uint32_t ref_index : 4;             // Timing reference the relative timing mode uses. Makes use of the time reference
                                            // message. Time on the reference message forms the base time for relative timing
                                            // mode.See Set ref message for more info.
        uint32_t rb : 1;                    // unused
        uint32_t res0 : 9;                  // reserved
        uint32_t timestamp;                 // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                            // event.In relative mode, this field denotes the delta from set reference
                                            // message.Immediate ignores the field
        uint32_t sc_adc_en : 1;             // calibration enabled
        uint32_t sc_adc_ex : 1;             // execute now
        uint32_t quad_mask_sc_adc : 4;      // Antenna Mask for Slice calibration
        uint32_t res1 : 2;                  // Reserved
        uint32_t cs_oadc_en : 1;            // calibration enabled
        uint32_t cs_oadc_ex : 1;            // execute now
        uint32_t quad_mask_cs_oadc : 4;     // Antenna Mask for clock skew observation ADC calibration
        uint32_t res2 : 2;                  // Reserved
        uint32_t xt_oadc_en : 1;            // calibration enabled
        uint32_t xt_oadc_ex : 1;            // execute now
        uint32_t quad_mask_xt_oadc : 4;     // Antenna Mask for cross talk observation ADC calibration
        uint32_t res3 : 2;                  // Reserved
        uint32_t smc_dac_en : 1;            // calibration enabled
        uint32_t smc_dac_ex : 1;            // execute now
        uint32_t quad_mask_smc_dac : 4;     // Antenna Mask for DAC SMC calibration
        uint32_t res4 : 2;                  // Reserved
        uint32_t smc_caldac_en : 1;         // calibration enabled
        uint32_t smc_caldac_ex : 1;         // execute now
        uint32_t quad_mask_smc_caldac : 4;  // Antenna Mask for CALDAC SMC Calibration
        uint32_t res5 : 2;                  // Reserved
        uint32_t dskw_caldac_en : 1;        // calibration enabled
        uint32_t dskw_caldac_ex : 1;        // execute now
        uint32_t quad_mask_dskw_caldac : 4; // Antenna Mask for CALDAC deskew calibration
        uint32_t res6 : 2;                  // Reserved
        uint32_t nleq_adc_en : 1;           // calibration enabled
        uint32_t nleq_adc_ex : 1;           // execute now
        uint32_t quad_mask_nleq_adc : 4;    // Antenna Mask for NLEQ calibration
        uint32_t res7 : 2;                  // Reserved
        uint32_t dpd_dac_en : 1;            // calibration enabled
        uint32_t dpd_dac_ex : 1;            // execute now
        uint32_t quad_mask_dpd_dac : 4;     // Antenna Mask for CDAC DPD calibration
        uint32_t res8 : 2;                  // Reserved
    };
    uint32_t value[4];
} cal_config_bf_t;

/*
 * message for reconfig
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t rb : 1;             // unused
        uint32_t res0 : 9;           // reserved
        uint32_t timestamp;          // BFN OTA time
        uint32_t ul_quad : 4;        // TODO: missing description!!
        uint32_t dl_quad : 4;        // TODO: missing description!!
        uint32_t res1 : 24;          // reserved.
    };
    uint32_t value[3];
} reconfig_bf_t;

/*
 * message for shutdown
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t rb : 1;             // unused
        uint32_t res0 : 9;           // reserved
        uint32_t timestamp;          // BFN OTA time
    };
    uint32_t value[2];
} shutdown_bf_t;

/*
 * message for sleep control
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_timing_type_t timing : 2;  // selects the timing mode absolute/relative/immediate.Absolute runs at the specified
                                     // BFN. Relative - Timestamp is relative to time reference. Immediate ignores timing and
                                     // executes ASAP
        uint32_t ref_index : 4;      // Timing reference the relative timing mode uses. Makes use of the time reference
                                     // message. Time on the reference message forms the base time for relative timing
                                     // mode.See Set ref message for more info.
        uint32_t rb : 1;             // unused
        uint32_t res0 : 9;           // reserved
        uint32_t timestamp;          // BFN OTA time
        uint32_t state : 2;          // TODO: missing description!!
        uint32_t res1 : 30;          // reserved.
    };
    uint32_t value[3];
} sleep_control_bf_t;

/*
 * message for warm up
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;                 // opcode
        e_timing_type_t timing : 2;                  // selects the timing mode absolute/relative/immediate.Absolute runs at the
                                                     // specified BFN. Relative - Timestamp is relative to time reference.
                                                     // Immediate ignores timing and executes ASAP
        uint32_t ref_index : 4;                      // Timing reference the relative timing mode uses. Makes use of the time
                                                     // reference message. Time on the reference message forms the base time for
                                                     // relative timing mode.See Set ref message for more info.
        uint32_t rb : 1;                             // request readback response
        uint32_t res0 : 9;                           // reserved
        uint32_t timestamp;                          // BFN OTA time.In absolute mode, the timestamp is the network time
                                                     // for the event.In relative mode, this field denotes the delta from
                                                     // set reference message.Immediate ignores the field
        uint32_t ul_quad_en_mask : 4;                // Quad Enable for Uplink
        uint32_t dl_quad_en_mask : 4;                // Quad Enable for Downlink
        e_loopback_mode_type_t loopback_mode_en : 4; // Enables LoopBack Mode
        uint32_t res2 : 20;                          // reserved
    };
    uint32_t value[3];
} warmup_bf_t;

#endif // __ADMIN_MSG__
