/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __READBACK_MSG__
#define __READBACK_MSG__

#include <stdint.h>
#include "com_cpu_id.h"
#include "com_msgs_enum.h"

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_cpu_id_t src : 3;          // Source CPU
        uint32_t res0 : 13;          // reserved
        uint32_t timestamp;          // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                     // event.In relative mode, this field denotes the delta from set reference
                                     // message.Immediate ignores the field
        uint32_t boot_status;        // boot status info
        uint32_t commit_id;          // git commit id
        uint32_t iter : 8;           // number of builds on top of main release
        uint32_t eb : 8;             // engineering build no
        uint32_t minor : 8;          // S/W release no
        uint32_t major : 8;          // product version
        uint32_t year : 8;           // year of the build
        uint32_t month : 8;          // month of the build
        uint32_t day : 8;            // date of the build
        uint32_t res1 : 8;           // reserved
    };
    uint32_t value[6];
} boot_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;    // opcode
        e_cpu_id_t src : 3;             // Source CPU
        uint32_t res0 : 13;             // reserved
        uint32_t timestamp;             // BFN OTA time.In absolute mode, the timestamp is the network time for
                                        // the event.In relative mode, this field denotes the delta from set
                                        // reference message.Immediate ignores the field
        e_debug_level_type_t level : 2; // Debug Level
        uint32_t debug_info_a : 14;     // module level info
        uint32_t debug_info_b : 16;     // module level info
        uint32_t debug_data_0;          // TODO: missing description!!
        uint32_t debug_data_1;          // TODO: missing description!!
        uint32_t debug_data_2;          // TODO: missing description!!
        uint32_t debug_data_3;          // TODO: missing description!!
        uint32_t debug_data_4;          // TODO: missing description!!
        uint32_t debug_data_5;          // TODO: missing description!!
        uint32_t debug_data_6;          // TODO: missing description!!
        uint32_t debug_data_7;          // TODO: missing description!!
        uint32_t debug_data_8;          // TODO: missing description!!
        uint32_t debug_data_9;          // TODO: missing description!!
        uint32_t debug_data_10;         // TODO: missing description!!
        uint32_t debug_data_11;         // TODO: missing description!!
        uint32_t debug_data_12;         // TODO: missing description!!
    };
    uint32_t value[16];
} debug_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_cpu_id_t src : 3;          // Source CPU
        uint32_t res0 : 13;          // reserved
        uint32_t timestamp;          // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                     // event.In relative mode, this field denotes the delta from set reference
                                     // message.Immediate ignores the field
        uint32_t config_status : 1;  // message cfg status info
        uint32_t quad0 : 1;          // quad0 status info
        uint32_t quad1 : 1;          // quad1 status info
        uint32_t quad2 : 1;          // quad2 status info
        uint32_t quad3 : 1;          // quad3 status info
        uint32_t res1 : 27;          // reserved
    };
    uint32_t value[3];
} dl_config_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_cpu_id_t src : 3;          // Source CPU
        uint32_t res0 : 13;          // reserved
        uint32_t timestamp;          // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                     // event.In relative mode, this field denotes the delta from set reference
                                     // message.Immediate ignores the field
        int32_t avg_0 : 24;          // Average power Measurement for ANT0
        e_cps_type_t cps_0 : 8;      // Combined power State for ANT0
        int32_t avg_1 : 24;          // Average power Measurement for ANT1
        e_cps_type_t cps_1 : 8;      // Combined power State for ANT1
        int32_t avg_2 : 24;          // Average power Measurement for ANT2
        e_cps_type_t cps_2 : 8;      // Combined power State for ANT2
        int32_t avg_3 : 24;          // Average power Measurement for ANT3
        e_cps_type_t cps_3 : 8;      // Combined power State for ANT3
        int32_t avg_4 : 24;          // Average power Measurement for ANT4
        e_cps_type_t cps_4 : 8;      // Combined power State for ANT4
        int32_t avg_5 : 24;          // Average power Measurement for ANT5
        e_cps_type_t cps_5 : 8;      // Combined power State for ANT6
        int32_t avg_6 : 24;          // Average power Measurement for ANT6
        e_cps_type_t cps_6 : 8;      // Combined power State for ANT6
        int32_t avg_7 : 24;          // Average power Measurement for ANT7
        e_cps_type_t cps_7 : 8;      // Combined power State for ANT7
        int32_t peak_0 : 12;         // Peak power Measurement for ANT0
        int32_t peak_1 : 12;         // Peak power Measurement for ANT1
        uint32_t res1 : 8;           // reserved
        int32_t peak_2 : 12;         // Peak power Measurement for ANT2
        int32_t peak_3 : 12;         // Peak power Measurement for ANT3
        uint32_t res2 : 8;           // reserved
        int32_t peak_4 : 12;         // Peak power Measurement for ANT4
        int32_t peak_5 : 12;         // Peak power Measurement for ANT5
        uint32_t res3 : 8;           // reserved
        int32_t peak_6 : 12;         // Peak power Measurement for ANT6
        int32_t peak_7 : 12;         // Peak power Measurement for ANT7
        uint32_t res4 : 8;           // reserved
    };
    uint32_t value[14];
} dl_on_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;           // opcode
        e_cpu_id_t src : 3;                    // Source CPU
        uint32_t res0 : 13;                    // reserved
        uint32_t timestamp;                    // BFN OTA time.In absolute mode, the timestamp is the network time for
                                               // the event.In relative mode, this field denotes the delta from set
                                               // reference message.Immediate ignores the field
        e_error_type_t level : 2;              // Error Level
        e_error_code_type_t error_code : 14;   // module level info
        e_reason_code_type_t reason_code : 16; // Error Type within Module
        uint32_t error_data_0;                 // TODO: missing description!!
        uint32_t error_data_1;                 // TODO: missing description!!
        uint32_t error_data_2;                 // TODO: missing description!!
        uint32_t error_data_3;                 // TODO: missing description!!
        uint32_t error_data_4;                 // TODO: missing description!!
        uint32_t error_data_5;                 // TODO: missing description!!
        uint32_t error_data_6;                 // TODO: missing description!!
        uint32_t error_data_7;                 // TODO: missing description!!
        uint32_t error_data_8;                 // TODO: missing description!!
        uint32_t error_data_9;                 // TODO: missing description!!
        uint32_t error_data_10;                // TODO: missing description!!
        uint32_t error_data_11;                // TODO: missing description!!
        uint32_t error_data_12;                // TODO: missing description!!
    };
    uint32_t value[16];
} error_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16; // opcode
        e_cpu_id_t src : 3;          // Source CPU
        uint32_t res0 : 13;          // reserved
        uint32_t timestamp;          // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                     // event.In relative mode, this field denotes the delta from set reference
                                     // message.Immediate ignores the field
        uint32_t config_status : 1;  // message cfg status info
        uint32_t quad0 : 1;          // quad0 status info
        uint32_t quad1 : 1;          // quad1 status info
        uint32_t quad2 : 1;          // quad2 status info
        uint32_t quad3 : 1;          // quad3 status info
        uint32_t res1 : 27;          // reserved
    };
    uint32_t value[3];
} ul_config_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;    // opcode
        e_cpu_id_t src : 3;             // Source CPU
        uint32_t res0 : 13;             // reserved
        uint32_t timestamp;             // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                        // event.In relative mode, this field denotes the delta from set reference
                                        // message.Immediate ignores the field
        int32_t avg_0 : 24;             // Average Gain Measurement for ANT0
        e_cgs_type_t cgs_0 : 8;         // Combined Gain State for ANT0
        int32_t avg_1 : 24;             // Average Gain Measurement for ANT1
        e_cgs_type_t cgs_1 : 8;         // Combined Gain State for ANT1
        int32_t avg_2 : 24;             // Average Gain Measurement for ANT2
        e_cgs_type_t cgs_2 : 8;         // Combined Gain State for ANT2
        int32_t avg_3 : 24;             // Average Gain Measurement for ANT3
        e_cgs_type_t cgs_3 : 8;         // Combined Gain State for ANT3
        int32_t avg_4 : 24;             // Average Gain Measurement for ANT4
        e_cgs_type_t cgs_4 : 8;         // Combined Gain State for ANT4
        int32_t avg_5 : 24;             // Average Gain Measurement for ANT5
        e_cgs_type_t cgs_5 : 8;         // Combined Gain State for ANT6
        int32_t avg_6 : 24;             // Average Gain Measurement for ANT6
        e_cgs_type_t cgs_6 : 8;         // Combined Gain State for ANT6
        int32_t avg_7 : 24;             // Average Gain Measurement for ANT7
        e_cgs_type_t cgs_7 : 8;         // Combined Gain State for ANT7
        int32_t peak_0 : 12;            // Peak Gain Measurement for ANT0
        int32_t peak_1 : 12;            // Peak Gain Measurement for ANT1
        uint32_t fovr_alarm_vector : 8; // FOVR alarm bit per antenna
        int32_t peak_2 : 12;            // Peak Gain Measurement for ANT2
        int32_t peak_3 : 12;            // Peak Gain Measurement for ANT3
        uint32_t res1 : 8;              // reserved
        int32_t peak_4 : 12;            // Peak Gain Measurement for ANT4
        int32_t peak_5 : 12;            // Peak Gain Measurement for ANT5
        uint32_t res2 : 8;              // reserved
        int32_t peak_6 : 12;            // Peak Gain Measurement for ANT6
        int32_t peak_7 : 12;            // Peak Gain Measurement for ANT7
        uint32_t res3 : 8;              // reserved
    };
    uint32_t value[14];
} ul_on_readback_bf_t;

/*
 * message for configuration
 */
typedef union {
    struct
    {
        e_opcode_type_t opcode : 16;    // opcode
        e_cpu_id_t src : 3;             // Source CPU
        uint32_t res0 : 13;             // reserved
        uint32_t timestamp;             // BFN OTA time.In absolute mode, the timestamp is the network time for the
                                        // event.In relative mode, this field denotes the delta from set reference
                                        // message.Immediate ignores the field
        uint32_t quad0_ul_status : 8;   // uplink status
        uint32_t quad1_ul_status : 8;   // uplink status
        uint32_t quad2_ul_status : 8;   // uplink status
        uint32_t quad3_ul_status : 8;   // uplink status
        uint32_t quad0_dl_status : 8;   // uplink status
        uint32_t quad1_dl_status : 8;   // uplink status
        uint32_t quad2_dl_status : 8;   // uplink status
        uint32_t quad3_dl_status : 8;   // uplink status
        uint32_t quad0_ul_latency : 16; // quad0 latency info
        uint32_t quad1_ul_latency : 16; // quad1 latency info
        uint32_t quad2_ul_latency : 16; // quad0 latency info
        uint32_t quad3_ul_latency : 16; // quad1 latency info
        uint32_t quad0_dl_latency : 16; // quad2 latency info
        uint32_t quad1_dl_latency : 16; // quad3 latency info
        uint32_t quad2_dl_latency : 16; // quad2 latency info
        uint32_t quad3_dl_latency : 16; // quad3 latency info
    };
    uint32_t value[8];
} warmup_readback_bf_t;

#endif // __READBACK_MSG__
