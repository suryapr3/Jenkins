/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __TX_STATIC_DATA_TABLE__
#define __TX_STATIC_DATA_TABLE__

#include "table_access_macros.h"
#include "tx_static_data_bitfield.h"
#include "tx_static_data_const.h"

// tx_jesd_ant_meta_mapping_lut:
typedef struct
{
    tx_jesd_ant_meta_mapping_lut_bf_t tx_jesd_ant_meta_mapping_lut[TX_JESD_ANT_META_MAPPING_LUT_MAX_ENTRY_NUM];
} tx_jesd_ant_meta_mapping_lut_t;

// tx_print_config_lut:
typedef struct
{
    tx_print_config_lut_bf_t tx_print_config_lut[TX_PRINT_CONFIG_LUT_MAX_ENTRY_NUM];
} tx_print_config_lut_t;

// tx_dac_conf_lut:
typedef struct
{
    tx_dac_conf_lut_bf_t tx_dac_conf_lut[TX_DAC_CONF_LUT_MAX_ENTRY_NUM];
} tx_dac_conf_lut_t;

// tx_pdpd_mod_lut:
typedef struct
{
    tx_pdpd_mod_lut_bf_t tx_pdpd_mod_lut[TX_PDPD_MOD_LUT_MAX_ENTRY_NUM];
} tx_pdpd_mod_lut_t;

// tx_v2d_if_params_lut:
typedef struct
{
    tx_v2d_if_params_lut_bf_t tx_v2d_if_params_lut[TX_V2D_IF_PARAMS_LUT_SUB_TBL_NUM][TX_V2D_IF_PARAMS_LUT_MAX_ENTRY_NUM];
} tx_v2d_if_params_lut_t;

// tx_topology_lut:
typedef struct
{
    tx_topology_lut_bf_t tx_topology_lut[TX_TOPOLOGY_LUT_MAX_ENTRY_NUM];
} tx_topology_lut_t;

// tx_pdpd_pc_sel_lut:
typedef struct
{
    tx_pdpd_pc_sel_lut_bf_t tx_pdpd_pc_sel_lut[TX_PDPD_PC_SEL_LUT_SUB_TBL_NUM][TX_PDPD_PC_SEL_LUT_MAX_ENTRY_NUM];
} tx_pdpd_pc_sel_lut_t;

// tx_pdpd_cfg_lut:
typedef struct
{
    tx_pdpd_cfg_lut_bf_t tx_pdpd_cfg_lut[TX_PDPD_CFG_LUT_MAX_ENTRY_NUM];
} tx_pdpd_cfg_lut_t;

// tx_v2d_start_dly_lut:
typedef struct
{
    tx_v2d_start_dly_lut_bf_t tx_v2d_start_dly_lut[TX_V2D_START_DLY_LUT_MAX_ENTRY_NUM];
} tx_v2d_start_dly_lut_t;

// tx_pdpd_dly_lut:
typedef struct
{
    tx_pdpd_dly_lut_bf_t tx_pdpd_dly_lut[TX_PDPD_DLY_LUT_MAX_ENTRY_NUM];
} tx_pdpd_dly_lut_t;

/*
 * tx_static_data:
 */
typedef struct
{
    tx_jesd_ant_meta_mapping_lut_t tx_jesd_ant_meta_mapping_lut;
    tx_print_config_lut_t tx_print_config_lut;
    tx_dac_conf_lut_t tx_dac_conf_lut;
    tx_pdpd_mod_lut_t tx_pdpd_mod_lut;
    tx_v2d_if_params_lut_t tx_v2d_if_params_lut;
    tx_topology_lut_t tx_topology_lut;
    tx_pdpd_pc_sel_lut_t tx_pdpd_pc_sel_lut;
    tx_pdpd_cfg_lut_t tx_pdpd_cfg_lut;
    tx_v2d_start_dly_lut_t tx_v2d_start_dly_lut;
    tx_pdpd_dly_lut_t tx_pdpd_dly_lut;
} tx_static_data_t;

#if RCS
extern tx_static_data_t _dram0_tx_tables_data_start; // symbol defined in LSP
#define TX_STATIC_DATA_START_ADDRESS (&_dram0_tx_tables_data_start)
#endif

#ifndef offsetof
#define offsetof(st, m) ((size_t)((char *)&((st *)0)->m - (char *)0))
#endif

// pointers to access each table:
#define p_tx_static_data ((tx_static_data_t *)(TX_STATIC_DATA_START_ADDRESS))
#define p_tx_jesd_ant_meta_mapping_lut \
    ((tx_jesd_ant_meta_mapping_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_jesd_ant_meta_mapping_lut)))
#define p_tx_print_config_lut \
    ((tx_print_config_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_print_config_lut)))
#define p_tx_dac_conf_lut ((tx_dac_conf_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_dac_conf_lut)))
#define p_tx_pdpd_mod_lut ((tx_pdpd_mod_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_pdpd_mod_lut)))
#define p_tx_v2d_if_params_lut \
    ((tx_v2d_if_params_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_v2d_if_params_lut)))
#define p_tx_topology_lut ((tx_topology_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_topology_lut)))
#define p_tx_pdpd_pc_sel_lut \
    ((tx_pdpd_pc_sel_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_pdpd_pc_sel_lut)))
#define p_tx_pdpd_cfg_lut ((tx_pdpd_cfg_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_pdpd_cfg_lut)))
#define p_tx_v2d_start_dly_lut \
    ((tx_v2d_start_dly_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_v2d_start_dly_lut)))
#define p_tx_pdpd_dly_lut ((tx_pdpd_dly_lut_t *)((char *)(TX_STATIC_DATA_START_ADDRESS) + offsetof (tx_static_data_t, tx_pdpd_dly_lut)))

#endif // __TX_STATIC_DATA_TABLE__
