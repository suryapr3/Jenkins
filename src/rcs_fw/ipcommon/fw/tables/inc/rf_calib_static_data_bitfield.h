/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __RF_CALIB_STATIC_DATA_BITFIELD__
#define __RF_CALIB_STATIC_DATA_BITFIELD__

#include <stdint.h>

/*
 * Firmware print configuration table. Configure base address for printing'fifo' for simulation.
 */
typedef union {
    struct
    {
        uint32_t print_monitor_base_address; // base address for the CAL CPU print monitor
    };
    uint32_t value;
} cal_print_config_lut_bf_t;

/*
 * Table to control which calibration is enabled
 */
typedef union {
    struct
    {
        uint32_t nleq_calibration_enable : 1;     // Bit field to enable NLEQ calibration
        uint32_t smc_calibration_enable : 1;      // Bit field to control SMC calibration
        uint32_t cdac_dpd_calibration_enable : 1; // Bit field to control CDAC DPD calibration
        uint32_t : 29;                            // reserved
    };
    uint32_t value;
} rf_calib_control_lut_bf_t;

#endif // __RF_CALIB_STATIC_DATA_BITFIELD__
