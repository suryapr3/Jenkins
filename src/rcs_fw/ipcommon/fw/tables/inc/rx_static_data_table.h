/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __RX_STATIC_DATA_TABLE__
#define __RX_STATIC_DATA_TABLE__

#include "table_access_macros.h"
#include "rx_static_data_bitfield.h"
#include "rx_static_data_const.h"

// rx_hwa_ant_meta_mapping_lut:
typedef struct
{
    rx_hwa_ant_meta_mapping_lut_bf_t rx_hwa_ant_meta_mapping_lut[RX_HWA_ANT_META_MAPPING_LUT_MAX_ENTRY_NUM];
} rx_hwa_ant_meta_mapping_lut_t;

// rx_print_config_lut:
typedef struct
{
    rx_print_config_lut_bf_t rx_print_config_lut[RX_PRINT_CONFIG_LUT_MAX_ENTRY_NUM];
} rx_print_config_lut_t;

// rx_vha_if_wm_lut:
typedef struct
{
    rx_vha_if_wm_lut_bf_t rx_vha_if_wm_lut[RX_VHA_IF_WM_LUT_SUB_TBL_NUM][RX_VHA_IF_WM_LUT_MAX_ENTRY_NUM];
} rx_vha_if_wm_lut_t;

// rx_gain_lut:
typedef struct
{
    rx_gain_lut_bf_t rx_gain_lut[RX_GAIN_LUT_MAX_ENTRY_NUM];
} rx_gain_lut_t;

// rx_topology_lut:
typedef struct
{
    rx_topology_lut_bf_t rx_topology_lut[RX_TOPOLOGY_LUT_MAX_ENTRY_NUM];
} rx_topology_lut_t;

// rx_to_adc_cpu_config_lut:
typedef struct
{
    rx_to_adc_cpu_config_lut_bf_t rx_to_adc_cpu_config_lut[RX_TO_ADC_CPU_CONFIG_LUT_SUB_TBL_NUM][RX_TO_ADC_CPU_CONFIG_LUT_MAX_ENTRY_NUM];
} rx_to_adc_cpu_config_lut_t;

// rx_to_adc_cpu_delay_lut:
typedef struct
{
    rx_to_adc_cpu_delay_lut_bf_t rx_to_adc_cpu_delay_lut[RX_TO_ADC_CPU_DELAY_LUT_MAX_ENTRY_NUM];
} rx_to_adc_cpu_delay_lut_t;

/*
 * rx_static_data:
 */
typedef struct
{
    rx_hwa_ant_meta_mapping_lut_t rx_hwa_ant_meta_mapping_lut;
    rx_print_config_lut_t rx_print_config_lut;
    rx_vha_if_wm_lut_t rx_vha_if_wm_lut;
    rx_gain_lut_t rx_gain_lut;
    rx_topology_lut_t rx_topology_lut;
    rx_to_adc_cpu_config_lut_t rx_to_adc_cpu_config_lut;
    rx_to_adc_cpu_delay_lut_t rx_to_adc_cpu_delay_lut;
} rx_static_data_t;

#if RCS
extern rx_static_data_t _dram0_rx_tables_data_start; // symbol defined in LSP
#define RX_STATIC_DATA_START_ADDRESS (&_dram0_rx_tables_data_start)
#endif

#ifndef offsetof
#define offsetof(st, m) ((size_t)((char *)&((st *)0)->m - (char *)0))
#endif

// pointers to access each table:
#define p_rx_static_data ((rx_static_data_t *)(RX_STATIC_DATA_START_ADDRESS))
#define p_rx_hwa_ant_meta_mapping_lut \
    ((rx_hwa_ant_meta_mapping_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_hwa_ant_meta_mapping_lut)))
#define p_rx_print_config_lut \
    ((rx_print_config_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_print_config_lut)))
#define p_rx_vha_if_wm_lut ((rx_vha_if_wm_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_vha_if_wm_lut)))
#define p_rx_gain_lut      ((rx_gain_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_gain_lut)))
#define p_rx_topology_lut  ((rx_topology_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_topology_lut)))
#define p_rx_to_adc_cpu_config_lut \
    ((rx_to_adc_cpu_config_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_to_adc_cpu_config_lut)))
#define p_rx_to_adc_cpu_delay_lut \
    ((rx_to_adc_cpu_delay_lut_t *)((char *)(RX_STATIC_DATA_START_ADDRESS) + offsetof (rx_static_data_t, rx_to_adc_cpu_delay_lut)))

#endif // __RX_STATIC_DATA_TABLE__
