/* INTEL CONFIDENTIAL
 *
 * Copyright 2024 Intel Corporation All Rights Reserved.
 *
 * The source code contained or described herein and all documents related
 * to the source code ("Material") are owned by Intel Corporation or its
 * suppliers or licensors. Title to the Material remains with Intel
 * Corporation or its suppliers and licensors. The Material contains trade
 * secrets and proprietary and confidential information of Intel or its
 * suppliers and licensors. The Material is protected by worldwide copyright
 * and trade secret laws and treaty provisions. No part of the Material
 * may be used, copied, reproduced, modified, published, uploaded, posted,
 * transmitted, distributed, or disclosed in any way without Intel's prior
 * express written permission.
 *
 * No license under any patent, copyright, trade secret or other
 * intellectual property right is granted to or conferred upon you by
 * disclosure or delivery of the Materials, either expressly, by
 * implication, inducement, estoppel or otherwise. Any license under such
 * intellectual property rights must be express and approved by Intel in
 * writing.
 *
 *****************************************************************************/

/**
 * this header file is generated by tool, any direct modification without going
 * through the table generation process will get lost
 */

#ifndef __COM_STATIC_DATA_TABLE__
#define __COM_STATIC_DATA_TABLE__

#include "table_access_macros.h"
#include "com_static_data_bitfield.h"
#include "com_static_data_const.h"

// com_fw_config_lut:
typedef struct
{
    com_fw_config_lut_bf_t com_fw_config_lut[COM_FW_CONFIG_LUT_MAX_ENTRY_NUM];
} com_fw_config_lut_t;

// com_trax_addr_config_lut:
typedef struct
{
    com_trax_addr_config_lut_bf_t com_trax_addr_config_lut[COM_TRAX_ADDR_CONFIG_LUT_MAX_ENTRY_NUM];
} com_trax_addr_config_lut_t;

// com_drf_rate_conf_lut:
typedef struct
{
    com_drf_rate_conf_lut_bf_t com_drf_rate_conf_lut[COM_DRF_RATE_CONF_LUT_MAX_ENTRY_NUM];
} com_drf_rate_conf_lut_t;

// com_vha_rate_conf_lut:
typedef struct
{
    com_vha_rate_conf_lut_bf_t com_vha_rate_conf_lut[COM_VHA_RATE_CONF_LUT_MAX_ENTRY_NUM];
} com_vha_rate_conf_lut_t;

// com_vha_if_wm_lut:
typedef struct
{
    com_vha_if_wm_lut_bf_t com_vha_if_wm_lut[COM_VHA_IF_WM_LUT_SUB_TBL_NUM][COM_VHA_IF_WM_LUT_MAX_ENTRY_NUM];
} com_vha_if_wm_lut_t;

// com_vex_hostid_lut:
typedef struct
{
    com_vex_hostid_lut_bf_t com_vex_hostid_lut[COM_VEX_HOSTID_LUT_MAX_ENTRY_NUM];
} com_vex_hostid_lut_t;

// com_v2d_hostid_lut:
typedef struct
{
    com_v2d_hostid_lut_bf_t com_v2d_hostid_lut[COM_V2D_HOSTID_LUT_MAX_ENTRY_NUM];
} com_v2d_hostid_lut_t;

// com_vha_hostid_lut:
typedef struct
{
    com_vha_hostid_lut_bf_t com_vha_hostid_lut[COM_VHA_HOSTID_LUT_MAX_ENTRY_NUM];
} com_vha_hostid_lut_t;

// com_rxfb_hostid_lut:
typedef struct
{
    com_rxfb_hostid_lut_bf_t com_rxfb_hostid_lut[COM_RXFB_HOSTID_LUT_MAX_ENTRY_NUM];
} com_rxfb_hostid_lut_t;

// com_jesd_hostid_lut:
typedef struct
{
    com_jesd_hostid_lut_bf_t com_jesd_hostid_lut[COM_JESD_HOSTID_LUT_MAX_ENTRY_NUM];
} com_jesd_hostid_lut_t;

// com_v2d_strm_cfg_lut:
typedef struct
{
    com_v2d_strm_cfg_lut_bf_t com_v2d_strm_cfg_lut[COM_V2D_STRM_CFG_LUT_MAX_ENTRY_NUM];
} com_v2d_strm_cfg_lut_t;

// com_v2d_strm_buf_lut:
typedef struct
{
    com_v2d_strm_buf_lut_bf_t com_v2d_strm_buf_lut[COM_V2D_STRM_BUF_LUT_SUB_TBL_NUM][COM_V2D_STRM_BUF_LUT_MAX_ENTRY_NUM];
} com_v2d_strm_buf_lut_t;

/*
 * com_static_data:
 */
typedef struct
{
    com_fw_config_lut_t com_fw_config_lut;
    com_trax_addr_config_lut_t com_trax_addr_config_lut;
    com_drf_rate_conf_lut_t com_drf_rate_conf_lut;
    com_vha_rate_conf_lut_t com_vha_rate_conf_lut;
    com_vha_if_wm_lut_t com_vha_if_wm_lut;
    com_vex_hostid_lut_t com_vex_hostid_lut;
    com_v2d_hostid_lut_t com_v2d_hostid_lut;
    com_vha_hostid_lut_t com_vha_hostid_lut;
    com_rxfb_hostid_lut_t com_rxfb_hostid_lut;
    com_jesd_hostid_lut_t com_jesd_hostid_lut;
    com_v2d_strm_cfg_lut_t com_v2d_strm_cfg_lut;
    com_v2d_strm_buf_lut_t com_v2d_strm_buf_lut;
} com_static_data_t;

#if RCS
extern com_static_data_t _dram0_com_tables_data_start; // symbol defined in LSP
#define COM_STATIC_DATA_START_ADDRESS (&_dram0_com_tables_data_start)
#endif

#ifndef offsetof
#define offsetof(st, m) ((size_t)((char *)&((st *)0)->m - (char *)0))
#endif

// pointers to access each table:
#define p_com_static_data ((com_static_data_t *)(COM_STATIC_DATA_START_ADDRESS))
#define p_com_fw_config_lut \
    ((com_fw_config_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_fw_config_lut)))
#define p_com_trax_addr_config_lut \
    ((com_trax_addr_config_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_trax_addr_config_lut)))
#define p_com_drf_rate_conf_lut \
    ((com_drf_rate_conf_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_drf_rate_conf_lut)))
#define p_com_vha_rate_conf_lut \
    ((com_vha_rate_conf_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_vha_rate_conf_lut)))
#define p_com_vha_if_wm_lut \
    ((com_vha_if_wm_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_vha_if_wm_lut)))
#define p_com_vex_hostid_lut \
    ((com_vex_hostid_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_vex_hostid_lut)))
#define p_com_v2d_hostid_lut \
    ((com_v2d_hostid_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_v2d_hostid_lut)))
#define p_com_vha_hostid_lut \
    ((com_vha_hostid_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_vha_hostid_lut)))
#define p_com_rxfb_hostid_lut \
    ((com_rxfb_hostid_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_rxfb_hostid_lut)))
#define p_com_jesd_hostid_lut \
    ((com_jesd_hostid_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_jesd_hostid_lut)))
#define p_com_v2d_strm_cfg_lut \
    ((com_v2d_strm_cfg_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_v2d_strm_cfg_lut)))
#define p_com_v2d_strm_buf_lut \
    ((com_v2d_strm_buf_lut_t *)((char *)(COM_STATIC_DATA_START_ADDRESS) + offsetof (com_static_data_t, com_v2d_strm_buf_lut)))

#endif // __COM_STATIC_DATA_TABLE__
