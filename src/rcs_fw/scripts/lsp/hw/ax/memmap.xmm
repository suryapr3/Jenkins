//  Memory map file to generate linker scripts for programs without board I/O.

// Customer ID=18477; Build=0x9c9ac; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//

// Additions for -mvecbase option:
VECBASE = 0x10000800

// Additions for -mvecreset option:
VECRESET = 0x10000000

// Additions for -mvecselect option:
VECSELECT = 0x1

BEGIN srom
0x0: sysrom : srom : 0x20000 : executable ;
 srom0 : F : 0x0 - 0x1ffff :.srom.text .srom.rodata .srom.literal .rom.store;
END srom

BEGIN iram0
0x10000000: instRam : iram0 : 0x20000 : executable, writable ;
 iram0_0 : F : 0x10000000 - 0x100002ff : .ResetVector.text .ResetHandler.literal .ResetHandler.text;
 iram0_1 : C : 0x10000300 - 0x1000032f : .MemoryExceptionVector.literal;
 iram0_2 : F : 0x10000330 - 0x100004af : .MemoryExceptionVector.text;
 iram0_3 : C : 0x100004b0 - 0x100007ff : ;
 iram0_4 : F : 0x10000800 - 0x10000977 : .WindowVectors.text;
 iram0_5 : C : 0x10000978 - 0x1000097f : .Level2InterruptVector.literal;
 iram0_6 : F : 0x10000980 - 0x100009b7 : .Level2InterruptVector.text;
 iram0_7 : C : 0x100009b8 - 0x100009bf : .Level3InterruptVector.literal;
 iram0_8 : F : 0x100009c0 - 0x100009f7 : .Level3InterruptVector.text;
 iram0_9 : C : 0x100009f8 - 0x100009ff : .Level4InterruptVector.literal;
 iram0_10 : F : 0x10000a00 - 0x10000a37 : .Level4InterruptVector.text;
 iram0_11 : C : 0x10000a38 - 0x10000a3f : .DebugExceptionVector.literal;
 iram0_12 : F : 0x10000a40 - 0x10000a77 : .DebugExceptionVector.text;
 iram0_13 : C : 0x10000a78 - 0x10000a7f : .NMIExceptionVector.literal;
 iram0_14 : F : 0x10000a80 - 0x10000ab7 : .NMIExceptionVector.text;
 iram0_15 : C : 0x10000ab8 - 0x10000abf : .KernelExceptionVector.literal;
 iram0_16 : F : 0x10000ac0 - 0x10000af7 : .KernelExceptionVector.text;
 iram0_17 : C : 0x10000af8 - 0x10000aff : .UserExceptionVector.literal;
 iram0_18 : F : 0x10000b00 - 0x10000b37 : .UserExceptionVector.text;
 iram0_19 : C : 0x10000b38 - 0x10000b7f : .DoubleExceptionVector.literal;
 iram0_20 : F : 0x10000b80 - 0x10000bbf : .DoubleExceptionVector.text;
 iram0_21 : C : 0x10000bc0 - 0x1001ffff : .iram0.literal .iram0.text .literal .rtos.literal .clib.literal .text .clib.text .rtos.text;
END iram0

BEGIN dram0
0x10020000: dataRam : dram0 : 0x20000 : writable ;
 dram0_0 : C : 0x10020000 - 0x10023fff : .dram0.com_tables.data .dram0.ax_tables.data;
 dram0_1 : C : 0x10024000 - 0x1003Cfff : .dram0.rodata .dram0.data .clib.rodata .rtos.rodata .rodata .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .data __llvm_prf_names .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .bss .dram0.bss;
 dram0_2 : C : 0x1003D000 - 0x1003Efff : HEAP: ;
 dram0_3 : C : 0x1003F000 - 0x1003ffff : STACK: ;
END dram0

BEGIN sram
0x00200000: sysram : sram : 0x40000 : executable, writable ;
 sram0_0 : C : 0x00200000 - 0x00203fff : .sram.system_status.data;
 sram0_1 : C : 0x00204000 - 0x0020ffff : .sram.table.data;
 sram0_2 : C : 0x00210000 - 0x00217fff : .sram.ax.rw;
 sram0_3 : C : 0x00218000 - 0x0021ffff : .sram.rx.rw;
 sram0_4 : C : 0x00220000 - 0x00227fff : .sram.tx.rw;
 sram0_5 : C : 0x00228000 - 0x0022ffff : .sram.cal.rw;
 sram0_6 : C : 0x00230000 - 0x0023ffeb : .sram.reserved;
 sram0_7 : C : 0x0023ffec - 0x0023ffef : .sram.ax.flag;
 sram0_8 : C : 0x0023fff0 - 0x0023fff3 : .sram.tx.flag;
 sram0_9 : C : 0x0023fff4 - 0x0023fff7 : .sram.rx.flag;
 sram0_10 : C : 0x0023fff8 - 0x0023fffb : .sram.cal.flag;
 sram0_11 : C : 0x0023fffc - 0x0023ffff : .sram.com.flag;
END sram


