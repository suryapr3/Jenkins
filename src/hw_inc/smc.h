#ifndef _SMC_H_
#define _SMC_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define FB_ANT0_SMC_ODD_TOP_BASE   ( 0x0502a000 )
#define FB_ANT0_SMC_EVEN_TOP_BASE  ( 0x0502b000 )
#define FB_ANT0_SMC_ODD_BOT_BASE   ( 0x0506a000 )
#define FB_ANT0_SMC_EVEN_BOT_BASE  ( 0x0506b000 )
#define FB_ANT1_SMC_ODD_TOP_BASE   ( 0x050aa000 )
#define FB_ANT1_SMC_EVEN_TOP_BASE  ( 0x050ab000 )
#define FB_ANT1_SMC_ODD_BOT_BASE   ( 0x050ea000 )
#define FB_ANT1_SMC_EVEN_BOT_BASE  ( 0x050eb000 )
#define TRX_ANT0_SMC0_BASE         ( 0x05128000 )
#define TRX_ANT0_SMC1_BASE         ( 0x05138000 )
#define TRX_ANT1_SMC0_BASE         ( 0x05148000 )
#define TRX_ANT1_SMC1_BASE         ( 0x05158000 )
#define TRX_ANT2_SMC0_BASE         ( 0x05168000 )
#define TRX_ANT2_SMC1_BASE         ( 0x05178000 )
#define TRX_ANT3_SMC0_BASE         ( 0x05188000 )
#define TRX_ANT3_SMC1_BASE         ( 0x05198000 )
#define TRX_ANT4_SMC0_BASE         ( 0x051a8000 )
#define TRX_ANT4_SMC1_BASE         ( 0x051b8000 )
#define TRX_ANT5_SMC0_BASE         ( 0x051c8000 )
#define TRX_ANT5_SMC1_BASE         ( 0x051d8000 )
#define TRX_ANT6_SMC0_BASE         ( 0x051e8000 )
#define TRX_ANT6_SMC1_BASE         ( 0x051f8000 )
#define TRX_ANT7_SMC0_BASE         ( 0x05208000 )
#define TRX_ANT7_SMC1_BASE         ( 0x05218000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define SMC_A0_SHDW_OFFSET       ( 0x00000000U )
#define SMC_B0_SHDW_OFFSET       ( 0x00000004U )
#define SMC_B1_SHDW_OFFSET       ( 0x00000008U )
#define SMC_B2_SHDW_OFFSET       ( 0x0000000cU )
#define SMC_B3_SHDW_OFFSET       ( 0x00000010U )
#define SMC_B4_SHDW_OFFSET       ( 0x00000014U )
#define SMC_B5_SHDW_OFFSET       ( 0x00000018U )
#define SMC_B6_SHDW_OFFSET       ( 0x0000001cU )
#define SMC_C0_SHDW_OFFSET       ( 0x00000020U )
#define SMC_A0_LIVE_OFFSET       ( 0x00000040U )
#define SMC_B0_LIVE_OFFSET       ( 0x00000044U )
#define SMC_B1_LIVE_OFFSET       ( 0x00000048U )
#define SMC_B2_LIVE_OFFSET       ( 0x0000004cU )
#define SMC_B3_LIVE_OFFSET       ( 0x00000050U )
#define SMC_B4_LIVE_OFFSET       ( 0x00000054U )
#define SMC_B5_LIVE_OFFSET       ( 0x00000058U )
#define SMC_B6_LIVE_OFFSET       ( 0x0000005cU )
#define SMC_C0_LIVE_OFFSET       ( 0x00000060U )
#define SMC_SCRATCH_OFFSET       ( 0x00000080U )
#define SMC_CFG_OFFSET        ( 0x00000084U )
#define SMC_DITHER_CFG1_OFFSET ( 0x00000088U )
#define SMC_DITHER_CFG2_OFFSET ( 0x0000008cU )
#define SMC_CTRL_OFFSET       ( 0x00000090U )
#define SMC_TMR_CFG_OFFSET    ( 0x00000094U )
#define SMC_TMR_ERR_OFFSET     ( 0x00000098U )
#define SMC_APB_BRDG_STAT_OFFSET ( 0x0000009cU )
#define SMC_INT_STAT_OFFSET    ( 0x000000c0U )
#define SMC_INT_HIGH_EN_OFFSET   ( 0x000000c4U )
#define SMC_INT_LOW_EN_OFFSET    ( 0x000000c8U )
#define SMC_INT_CLR_OFFSET     ( 0x000000ccU )
#define SMC_INT_FORCE_OFFSET     ( 0x000000d0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define SMC_A0_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_A0_SHDW_OFFSET ) ))
#define SMC_B0_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B0_SHDW_OFFSET ) ))
#define SMC_B1_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B1_SHDW_OFFSET ) ))
#define SMC_B2_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B2_SHDW_OFFSET ) ))
#define SMC_B3_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B3_SHDW_OFFSET ) ))
#define SMC_B4_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B4_SHDW_OFFSET ) ))
#define SMC_B5_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B5_SHDW_OFFSET ) ))
#define SMC_B6_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_B6_SHDW_OFFSET ) ))
#define SMC_C0_SHDW_ADR(_BASE)          (( ( _BASE ) + ( SMC_C0_SHDW_OFFSET ) ))
#define SMC_A0_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_A0_LIVE_OFFSET ) ))
#define SMC_B0_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B0_LIVE_OFFSET ) ))
#define SMC_B1_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B1_LIVE_OFFSET ) ))
#define SMC_B2_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B2_LIVE_OFFSET ) ))
#define SMC_B3_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B3_LIVE_OFFSET ) ))
#define SMC_B4_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B4_LIVE_OFFSET ) ))
#define SMC_B5_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B5_LIVE_OFFSET ) ))
#define SMC_B6_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_B6_LIVE_OFFSET ) ))
#define SMC_C0_LIVE_ADR(_BASE)          (( ( _BASE ) + ( SMC_C0_LIVE_OFFSET ) ))
#define SMC_SCRATCH_ADR(_BASE)          (( ( _BASE ) + ( SMC_SCRATCH_OFFSET ) ))
#define SMC_CFG_ADR(_BASE)           (( ( _BASE ) + ( SMC_CFG_OFFSET ) ))
#define SMC_DITHER_CFG1_ADR(_BASE)   (( ( _BASE ) + ( SMC_DITHER_CFG1_OFFSET ) ))
#define SMC_DITHER_CFG2_ADR(_BASE)   (( ( _BASE ) + ( SMC_DITHER_CFG2_OFFSET ) ))
#define SMC_CTRL_ADR(_BASE)          (( ( _BASE ) + ( SMC_CTRL_OFFSET ) ))
#define SMC_TMR_CFG_ADR(_BASE)       (( ( _BASE ) + ( SMC_TMR_CFG_OFFSET ) ))
#define SMC_TMR_ERR_ADR(_BASE)        (( ( _BASE ) + ( SMC_TMR_ERR_OFFSET ) ))
#define SMC_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( SMC_APB_BRDG_STAT_OFFSET ) ))
#define SMC_INT_STAT_ADR(_BASE)       (( ( _BASE ) + ( SMC_INT_STAT_OFFSET ) ))
#define SMC_INT_HIGH_EN_ADR(_BASE)      (( ( _BASE ) + ( SMC_INT_HIGH_EN_OFFSET ) ))
#define SMC_INT_LOW_EN_ADR(_BASE)       (( ( _BASE ) + ( SMC_INT_LOW_EN_OFFSET ) ))
#define SMC_INT_CLR_ADR(_BASE)        (( ( _BASE ) + ( SMC_INT_CLR_OFFSET ) ))
#define SMC_INT_FORCE_ADR(_BASE)        (( ( _BASE ) + ( SMC_INT_FORCE_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief SMC_MAP_REG_A0_SHDW register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/A0_SHDW
  * MSB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 13;
    ///< Coefficient in format sr[13,15]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} smc_a0_shdw_reg_t;

#define SMC_A0_SHDW_DEFAULT (0x00000000U)
#define SMC_A0_SHDW_RD_MASK (0x00001fffU)
#define SMC_A0_SHDW_WR_MASK (0x00001fffU)


///< Coefficient in format sr[13,15]
#define SMC_A0_SHDW_COEFF_BF_OFF ( 0)
#define SMC_A0_SHDW_COEFF_BF_WID (13)
#define SMC_A0_SHDW_COEFF_BF_MSK (0x00001FFF)
#define SMC_A0_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B0_SHDW register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B0_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b0_shdw_reg_t;

#define SMC_B0_SHDW_DEFAULT (0x00000000U)
#define SMC_B0_SHDW_RD_MASK (0x000003ffU)
#define SMC_B0_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B0_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B0_SHDW_COEFF_BF_WID (10)
#define SMC_B0_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B0_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B1_SHDW register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B1_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b1_shdw_reg_t;

#define SMC_B1_SHDW_DEFAULT (0x00000000U)
#define SMC_B1_SHDW_RD_MASK (0x000003ffU)
#define SMC_B1_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B1_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B1_SHDW_COEFF_BF_WID (10)
#define SMC_B1_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B1_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B2_SHDW register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B2_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b2_shdw_reg_t;

#define SMC_B2_SHDW_DEFAULT (0x00000000U)
#define SMC_B2_SHDW_RD_MASK (0x000003ffU)
#define SMC_B2_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B2_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B2_SHDW_COEFF_BF_WID (10)
#define SMC_B2_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B2_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B3_SHDW register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B3_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b3_shdw_reg_t;

#define SMC_B3_SHDW_DEFAULT (0x00000000U)
#define SMC_B3_SHDW_RD_MASK (0x000003ffU)
#define SMC_B3_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B3_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B3_SHDW_COEFF_BF_WID (10)
#define SMC_B3_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B3_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B4_SHDW register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B4_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b4_shdw_reg_t;

#define SMC_B4_SHDW_DEFAULT (0x00000000U)
#define SMC_B4_SHDW_RD_MASK (0x000003ffU)
#define SMC_B4_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B4_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B4_SHDW_COEFF_BF_WID (10)
#define SMC_B4_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B4_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B5_SHDW register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B5_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b5_shdw_reg_t;

#define SMC_B5_SHDW_DEFAULT (0x00000000U)
#define SMC_B5_SHDW_RD_MASK (0x000003ffU)
#define SMC_B5_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B5_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B5_SHDW_COEFF_BF_WID (10)
#define SMC_B5_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B5_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B6_SHDW register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B6_SHDW
  * ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b6_shdw_reg_t;

#define SMC_B6_SHDW_DEFAULT (0x00000000U)
#define SMC_B6_SHDW_RD_MASK (0x000003ffU)
#define SMC_B6_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B6_SHDW_COEFF_BF_OFF ( 0)
#define SMC_B6_SHDW_COEFF_BF_WID (10)
#define SMC_B6_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_B6_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_C0_SHDW register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/C0_SHDW
  * LSB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_c0_shdw_reg_t;

#define SMC_C0_SHDW_DEFAULT (0x00000000U)
#define SMC_C0_SHDW_RD_MASK (0x000003ffU)
#define SMC_C0_SHDW_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_C0_SHDW_COEFF_BF_OFF ( 0)
#define SMC_C0_SHDW_COEFF_BF_WID (10)
#define SMC_C0_SHDW_COEFF_BF_MSK (0x000003FF)
#define SMC_C0_SHDW_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_A0_LIVE register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/A0_LIVE
  * Live MSB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 13;
    ///< Coefficient in format sr[13,15]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} smc_a0_live_reg_t;

#define SMC_A0_LIVE_DEFAULT (0x00000000U)
#define SMC_A0_LIVE_RD_MASK (0x00001fffU)
#define SMC_A0_LIVE_WR_MASK (0x00001fffU)


///< Coefficient in format sr[13,15]
#define SMC_A0_LIVE_COEFF_BF_OFF ( 0)
#define SMC_A0_LIVE_COEFF_BF_WID (13)
#define SMC_A0_LIVE_COEFF_BF_MSK (0x00001FFF)
#define SMC_A0_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B0_LIVE register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B0_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b0_live_reg_t;

#define SMC_B0_LIVE_DEFAULT (0x00000000U)
#define SMC_B0_LIVE_RD_MASK (0x000003ffU)
#define SMC_B0_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B0_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B0_LIVE_COEFF_BF_WID (10)
#define SMC_B0_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B0_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B1_LIVE register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B1_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b1_live_reg_t;

#define SMC_B1_LIVE_DEFAULT (0x00000000U)
#define SMC_B1_LIVE_RD_MASK (0x000003ffU)
#define SMC_B1_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B1_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B1_LIVE_COEFF_BF_WID (10)
#define SMC_B1_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B1_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B2_LIVE register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B2_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b2_live_reg_t;

#define SMC_B2_LIVE_DEFAULT (0x00000000U)
#define SMC_B2_LIVE_RD_MASK (0x000003ffU)
#define SMC_B2_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B2_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B2_LIVE_COEFF_BF_WID (10)
#define SMC_B2_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B2_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B3_LIVE register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B3_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b3_live_reg_t;

#define SMC_B3_LIVE_DEFAULT (0x00000000U)
#define SMC_B3_LIVE_RD_MASK (0x000003ffU)
#define SMC_B3_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B3_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B3_LIVE_COEFF_BF_WID (10)
#define SMC_B3_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B3_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B4_LIVE register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B4_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b4_live_reg_t;

#define SMC_B4_LIVE_DEFAULT (0x00000000U)
#define SMC_B4_LIVE_RD_MASK (0x000003ffU)
#define SMC_B4_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B4_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B4_LIVE_COEFF_BF_WID (10)
#define SMC_B4_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B4_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B5_LIVE register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B5_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b5_live_reg_t;

#define SMC_B5_LIVE_DEFAULT (0x00000000U)
#define SMC_B5_LIVE_RD_MASK (0x000003ffU)
#define SMC_B5_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B5_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B5_LIVE_COEFF_BF_WID (10)
#define SMC_B5_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B5_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_B6_LIVE register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/B6_LIVE
  * Live ISB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_b6_live_reg_t;

#define SMC_B6_LIVE_DEFAULT (0x00000000U)
#define SMC_B6_LIVE_RD_MASK (0x000003ffU)
#define SMC_B6_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_B6_LIVE_COEFF_BF_OFF ( 0)
#define SMC_B6_LIVE_COEFF_BF_WID (10)
#define SMC_B6_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_B6_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_C0_LIVE register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/C0_LIVE
  * LSB Coefficient Register
  */

typedef union {
  struct {
    uint32_t COEFF : 10;
    ///< Coefficient in format sr[10,12]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} smc_c0_live_reg_t;

#define SMC_C0_LIVE_DEFAULT (0x00000000U)
#define SMC_C0_LIVE_RD_MASK (0x000003ffU)
#define SMC_C0_LIVE_WR_MASK (0x000003ffU)


///< Coefficient in format sr[10,12]
#define SMC_C0_LIVE_COEFF_BF_OFF ( 0)
#define SMC_C0_LIVE_COEFF_BF_WID (10)
#define SMC_C0_LIVE_COEFF_BF_MSK (0x000003FF)
#define SMC_C0_LIVE_COEFF_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_SCRATCH register description at address offset 0x80
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/SCRATCH
  * SMC scratchpad register.
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} smc_scratch_reg_t;

#define SMC_SCRATCH_DEFAULT (0x00000000U)
#define SMC_SCRATCH_RD_MASK (0xffffffffU)
#define SMC_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field.
#define SMC_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define SMC_SCRATCH_SCRATCHPAD_BF_WID (32)
#define SMC_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define SMC_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_CONFIG register description at address offset 0x84
  *
  * Register default value:        0x00000007
  * Register full path in IP: smc_map/reg/CONFIG
  * SMC Configuration Register
  */

typedef union {
  struct {
    uint32_t EXT_CTRL_UPDATE : 1;
    ///< 0: Live coefficient update is controlled by the CONTROL register
    ///< 1: Live coefficient update is controlled externally, e.g. via BFN
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t EXT_CTRL_DITHER : 1;
    ///< 0: Dither enable is controlled by the CONTROL register
    ///< 1: Dither enable is controlled externally, e.g. via BFN
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t EXT_CTRL_LSB_OFFSET : 1;
    ///< 0: LSB Offset selection is controlled by the CONTROL register
    ///< 1: LSB Offset selection is controlled externally, e.g. via BFN
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} smc_cfg_reg_t;

#define SMC_CFG_DEFAULT (0x00000007U)
#define SMC_CFG_RD_MASK (0x00000007U)
#define SMC_CFG_WR_MASK (0x00000007U)


///< 0: Live coefficient update is controlled by the CONTROL register
///< 1: Live coefficient update is controlled externally, e.g. via BFN
#define SMC_CFG_EXT_CTRL_UPDATE_BF_OFF ( 0)
#define SMC_CFG_EXT_CTRL_UPDATE_BF_WID ( 1)
#define SMC_CFG_EXT_CTRL_UPDATE_BF_MSK (0x00000001)
#define SMC_CFG_EXT_CTRL_UPDATE_BF_DEF (0x00000001)

///< 0: Dither enable is controlled by the CONTROL register
///< 1: Dither enable is controlled externally, e.g. via BFN
#define SMC_CFG_EXT_CTRL_DITHER_BF_OFF ( 1)
#define SMC_CFG_EXT_CTRL_DITHER_BF_WID ( 1)
#define SMC_CFG_EXT_CTRL_DITHER_BF_MSK (0x00000002)
#define SMC_CFG_EXT_CTRL_DITHER_BF_DEF (0x00000002)

///< 0: LSB Offset selection is controlled by the CONTROL register
///< 1: LSB Offset selection is controlled externally, e.g. via BFN
#define SMC_CFG_EXT_CTRL_LSB_OFFSET_BF_OFF ( 2)
#define SMC_CFG_EXT_CTRL_LSB_OFFSET_BF_WID ( 1)
#define SMC_CFG_EXT_CTRL_LSB_OFFSET_BF_MSK (0x00000004)
#define SMC_CFG_EXT_CTRL_LSB_OFFSET_BF_DEF (0x00000004)


/** @brief SMC_MAP_REG_DITHER_CONFIG1 register description at address offset 0x88
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/DITHER_CONFIG1
  * Dither Configuration Register 1
  */

typedef union {
  struct {
    uint32_t LSB_OFFSET0 : 13;
    ///< Dither value used when LSB Offset Select is 0, format sr[13,15]
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t LSB_OFFSET1 : 13;
    ///< Dither value used when LSB Offset Select is 1, format sr[13,15]
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} smc_dither_cfg1_reg_t;

#define SMC_DITHER_CFG1_DEFAULT (0x00000000U)
#define SMC_DITHER_CFG1_RD_MASK (0x1fff1fffU)
#define SMC_DITHER_CFG1_WR_MASK (0x1fff1fffU)


///< Dither value used when LSB Offset Select is 0, format sr[13,15]
#define SMC_DITHER_CFG1_LSB_OFFSET0_BF_OFF ( 0)
#define SMC_DITHER_CFG1_LSB_OFFSET0_BF_WID (13)
#define SMC_DITHER_CFG1_LSB_OFFSET0_BF_MSK (0x00001FFF)
#define SMC_DITHER_CFG1_LSB_OFFSET0_BF_DEF (0x00000000)

///< Dither value used when LSB Offset Select is 1, format sr[13,15]
#define SMC_DITHER_CFG1_LSB_OFFSET1_BF_OFF (16)
#define SMC_DITHER_CFG1_LSB_OFFSET1_BF_WID (13)
#define SMC_DITHER_CFG1_LSB_OFFSET1_BF_MSK (0x1FFF0000)
#define SMC_DITHER_CFG1_LSB_OFFSET1_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_DITHER_CONFIG2 register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/DITHER_CONFIG2
  * Dither Configuration Register 2
  */

typedef union {
  struct {
    uint32_t THRESHOLD : 16;
    ///< Dither comparison threshold, format sr[16,15]. When the input sample
    ///< (after LSB Offset adjustment) is above this threshold, the LFSR generated
    ///< dither value is subtracted.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} smc_dither_cfg2_reg_t;

#define SMC_DITHER_CFG2_DEFAULT (0x00000000U)
#define SMC_DITHER_CFG2_RD_MASK (0x0000ffffU)
#define SMC_DITHER_CFG2_WR_MASK (0x0000ffffU)


///< Dither comparison threshold, format sr[16,15]. When the input sample
///< (after LSB Offset adjustment) is above this threshold, the LFSR generated
///< dither value is subtracted.
#define SMC_DITHER_CFG2_TSHOLD_BF_OFF ( 0)
#define SMC_DITHER_CFG2_TSHOLD_BF_WID (16)
#define SMC_DITHER_CFG2_TSHOLD_BF_MSK (0x0000FFFF)
#define SMC_DITHER_CFG2_TSHOLD_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_CONTROL register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/CONTROL
  * SMC Control Register
  */

typedef union {
  struct {
    uint32_t UPDATE : 1;
    ///< Writing a 1 to this bit causes causes all of the shadow coefficient
    ///< registers to be copied to their live counterparts. This bit is self-clearing.
    ///< AccessType="RW/AC" BitOffset="0" ResetValue="0x0"
    uint32_t CORRECTION_ENABLE : 1;
    ///< Correction enable
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DITHER_ENABLE : 1;
    ///< Dither enable
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t LSB_OFFSET_SEL : 1;
    ///< LSB Offset Select:                                               0:
    ///< Add DITHER_CONFIG1.LSB_OFFSET0 to each input sample (default behavior)
    ///< 1: Add DITHER_CONFIG1.LSB_OFFSET1 to each input sample
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} smc_ctrl_reg_t;

#define SMC_CTRL_DEFAULT (0x00000000U)
#define SMC_CTRL_RD_MASK (0x0000000fU)
#define SMC_CTRL_WR_MASK (0x0000000fU)


///< Writing a 1 to this bit causes causes all of the shadow coefficient
///< registers to be copied to their live counterparts. This bit is self-clearing.
#define SMC_CTRL_UPDATE_BF_OFF ( 0)
#define SMC_CTRL_UPDATE_BF_WID ( 1)
#define SMC_CTRL_UPDATE_BF_MSK (0x00000001)
#define SMC_CTRL_UPDATE_BF_DEF (0x00000000)

///< Correction enable
#define SMC_CTRL_CORRECTION_EN_BF_OFF ( 1)
#define SMC_CTRL_CORRECTION_EN_BF_WID ( 1)
#define SMC_CTRL_CORRECTION_EN_BF_MSK (0x00000002)
#define SMC_CTRL_CORRECTION_EN_BF_DEF (0x00000000)

///< Dither enable
#define SMC_CTRL_DITHER_EN_BF_OFF ( 2)
#define SMC_CTRL_DITHER_EN_BF_WID ( 1)
#define SMC_CTRL_DITHER_EN_BF_MSK (0x00000004)
#define SMC_CTRL_DITHER_EN_BF_DEF (0x00000000)

///< LSB Offset Select:                                               0:
///< Add DITHER_CONFIG1.LSB_OFFSET0 to each input sample (default behavior)
///< 1: Add DITHER_CONFIG1.LSB_OFFSET1 to each input sample
#define SMC_CTRL_LSB_OFFSET_SEL_BF_OFF ( 3)
#define SMC_CTRL_LSB_OFFSET_SEL_BF_WID ( 1)
#define SMC_CTRL_LSB_OFFSET_SEL_BF_MSK (0x00000008)
#define SMC_CTRL_LSB_OFFSET_SEL_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_TMR_CONFIG register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/TMR_CONFIG
  * SMC Triple Module Redundancy Configuration Register
  */

typedef union {
  struct {
    uint32_t TEST_CTRL : 2;
    ///< TMR Test Control:                                               0:
    ///< write all 3 copies (default behavior)
    ///< 1: write copy 1 only
    ///< 2: write copy 2 only
    ///< 3: write copy 3 only
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} smc_tmr_cfg_reg_t;

#define SMC_TMR_CFG_DEFAULT (0x00000000U)
#define SMC_TMR_CFG_RD_MASK (0x00000003U)
#define SMC_TMR_CFG_WR_MASK (0x00000003U)


///< TMR Test Control:                                               0:
///< write all 3 copies (default behavior)
///< 1: write copy 1 only
///< 2: write copy 2 only
///< 3: write copy 3 only
#define SMC_TMR_CFG_TEST_CTRL_BF_OFF ( 0)
#define SMC_TMR_CFG_TEST_CTRL_BF_WID ( 2)
#define SMC_TMR_CFG_TEST_CTRL_BF_MSK (0x00000003)
#define SMC_TMR_CFG_TEST_CTRL_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_TMR_ERROR register description at address offset 0x98
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/TMR_ERROR
  * SMC Triple Module Redundancy Error Register
  */

typedef union {
  struct {
    uint32_t A0_SHDW : 1;
    ///< A0 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t A0_LIVE : 1;
    ///< A0 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t B0_SHDW : 1;
    ///< B0 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="2" ResetValue="0x0"
    uint32_t B0_LIVE : 1;
    ///< B0 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="3" ResetValue="0x0"
    uint32_t B1_SHDW : 1;
    ///< B1 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t B1_LIVE : 1;
    ///< B1 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t B2_SHDW : 1;
    ///< B2 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t B2_LIVE : 1;
    ///< B2 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="7" ResetValue="0x0"
    uint32_t B3_SHDW : 1;
    ///< B3 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t B3_LIVE : 1;
    ///< B3 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="9" ResetValue="0x0"
    uint32_t B4_SHDW : 1;
    ///< B4 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="10" ResetValue="0x0"
    uint32_t B4_LIVE : 1;
    ///< B4 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="11" ResetValue="0x0"
    uint32_t B5_SHDW : 1;
    ///< B5 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="12" ResetValue="0x0"
    uint32_t B5_LIVE : 1;
    ///< B5 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="13" ResetValue="0x0"
    uint32_t B6_SHDW : 1;
    ///< B6 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="14" ResetValue="0x0"
    uint32_t B6_LIVE : 1;
    ///< B6 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="15" ResetValue="0x0"
    uint32_t C0_SHDW : 1;
    ///< C0 Coeff, shadow bank.
    ///< AccessType="RW/1C/V" BitOffset="16" ResetValue="0x0"
    uint32_t C0_LIVE : 1;
    ///< C0 Coeff, live bank.
    ///< AccessType="RW/1C/V" BitOffset="17" ResetValue="0x0"
    uint32_t SMC_CONFIG : 1;
    ///< SMC Configuration.
    ///< AccessType="RW/1C/V" BitOffset="18" ResetValue="0x0"
    uint32_t CONTROL : 1;
    ///< SMC Control.
    ///< AccessType="RW/1C/V" BitOffset="19" ResetValue="0x0"
    uint32_t TMR_CONFIG : 1;
    ///< TMR Configuration.
    ///< AccessType="RW/1C/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} smc_tmr_err_reg_t;

#define SMC_TMR_ERR_DEFAULT (0x00000000U)
#define SMC_TMR_ERR_RD_MASK (0x001fffffU)
#define SMC_TMR_ERR_WR_MASK (0x001fffffU)


///< A0 Coeff, shadow bank.
#define SMC_TMR_ERR_A0_SHDW_BF_OFF ( 0)
#define SMC_TMR_ERR_A0_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_A0_SHDW_BF_MSK (0x00000001)
#define SMC_TMR_ERR_A0_SHDW_BF_DEF (0x00000000)

///< A0 Coeff, live bank.
#define SMC_TMR_ERR_A0_LIVE_BF_OFF ( 1)
#define SMC_TMR_ERR_A0_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_A0_LIVE_BF_MSK (0x00000002)
#define SMC_TMR_ERR_A0_LIVE_BF_DEF (0x00000000)

///< B0 Coeff, shadow bank.
#define SMC_TMR_ERR_B0_SHDW_BF_OFF ( 2)
#define SMC_TMR_ERR_B0_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B0_SHDW_BF_MSK (0x00000004)
#define SMC_TMR_ERR_B0_SHDW_BF_DEF (0x00000000)

///< B0 Coeff, live bank.
#define SMC_TMR_ERR_B0_LIVE_BF_OFF ( 3)
#define SMC_TMR_ERR_B0_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B0_LIVE_BF_MSK (0x00000008)
#define SMC_TMR_ERR_B0_LIVE_BF_DEF (0x00000000)

///< B1 Coeff, shadow bank.
#define SMC_TMR_ERR_B1_SHDW_BF_OFF ( 4)
#define SMC_TMR_ERR_B1_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B1_SHDW_BF_MSK (0x00000010)
#define SMC_TMR_ERR_B1_SHDW_BF_DEF (0x00000000)

///< B1 Coeff, live bank.
#define SMC_TMR_ERR_B1_LIVE_BF_OFF ( 5)
#define SMC_TMR_ERR_B1_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B1_LIVE_BF_MSK (0x00000020)
#define SMC_TMR_ERR_B1_LIVE_BF_DEF (0x00000000)

///< B2 Coeff, shadow bank.
#define SMC_TMR_ERR_B2_SHDW_BF_OFF ( 6)
#define SMC_TMR_ERR_B2_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B2_SHDW_BF_MSK (0x00000040)
#define SMC_TMR_ERR_B2_SHDW_BF_DEF (0x00000000)

///< B2 Coeff, live bank.
#define SMC_TMR_ERR_B2_LIVE_BF_OFF ( 7)
#define SMC_TMR_ERR_B2_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B2_LIVE_BF_MSK (0x00000080)
#define SMC_TMR_ERR_B2_LIVE_BF_DEF (0x00000000)

///< B3 Coeff, shadow bank.
#define SMC_TMR_ERR_B3_SHDW_BF_OFF ( 8)
#define SMC_TMR_ERR_B3_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B3_SHDW_BF_MSK (0x00000100)
#define SMC_TMR_ERR_B3_SHDW_BF_DEF (0x00000000)

///< B3 Coeff, live bank.
#define SMC_TMR_ERR_B3_LIVE_BF_OFF ( 9)
#define SMC_TMR_ERR_B3_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B3_LIVE_BF_MSK (0x00000200)
#define SMC_TMR_ERR_B3_LIVE_BF_DEF (0x00000000)

///< B4 Coeff, shadow bank.
#define SMC_TMR_ERR_B4_SHDW_BF_OFF (10)
#define SMC_TMR_ERR_B4_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B4_SHDW_BF_MSK (0x00000400)
#define SMC_TMR_ERR_B4_SHDW_BF_DEF (0x00000000)

///< B4 Coeff, live bank.
#define SMC_TMR_ERR_B4_LIVE_BF_OFF (11)
#define SMC_TMR_ERR_B4_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B4_LIVE_BF_MSK (0x00000800)
#define SMC_TMR_ERR_B4_LIVE_BF_DEF (0x00000000)

///< B5 Coeff, shadow bank.
#define SMC_TMR_ERR_B5_SHDW_BF_OFF (12)
#define SMC_TMR_ERR_B5_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B5_SHDW_BF_MSK (0x00001000)
#define SMC_TMR_ERR_B5_SHDW_BF_DEF (0x00000000)

///< B5 Coeff, live bank.
#define SMC_TMR_ERR_B5_LIVE_BF_OFF (13)
#define SMC_TMR_ERR_B5_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B5_LIVE_BF_MSK (0x00002000)
#define SMC_TMR_ERR_B5_LIVE_BF_DEF (0x00000000)

///< B6 Coeff, shadow bank.
#define SMC_TMR_ERR_B6_SHDW_BF_OFF (14)
#define SMC_TMR_ERR_B6_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_B6_SHDW_BF_MSK (0x00004000)
#define SMC_TMR_ERR_B6_SHDW_BF_DEF (0x00000000)

///< B6 Coeff, live bank.
#define SMC_TMR_ERR_B6_LIVE_BF_OFF (15)
#define SMC_TMR_ERR_B6_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_B6_LIVE_BF_MSK (0x00008000)
#define SMC_TMR_ERR_B6_LIVE_BF_DEF (0x00000000)

///< C0 Coeff, shadow bank.
#define SMC_TMR_ERR_C0_SHDW_BF_OFF (16)
#define SMC_TMR_ERR_C0_SHDW_BF_WID ( 1)
#define SMC_TMR_ERR_C0_SHDW_BF_MSK (0x00010000)
#define SMC_TMR_ERR_C0_SHDW_BF_DEF (0x00000000)

///< C0 Coeff, live bank.
#define SMC_TMR_ERR_C0_LIVE_BF_OFF (17)
#define SMC_TMR_ERR_C0_LIVE_BF_WID ( 1)
#define SMC_TMR_ERR_C0_LIVE_BF_MSK (0x00020000)
#define SMC_TMR_ERR_C0_LIVE_BF_DEF (0x00000000)

///< SMC Configuration.
#define SMC_TMR_ERR_SMC_CFG_BF_OFF (18)
#define SMC_TMR_ERR_SMC_CFG_BF_WID ( 1)
#define SMC_TMR_ERR_SMC_CFG_BF_MSK (0x00040000)
#define SMC_TMR_ERR_SMC_CFG_BF_DEF (0x00000000)

///< SMC Control.
#define SMC_TMR_ERR_CTRL_BF_OFF (19)
#define SMC_TMR_ERR_CTRL_BF_WID ( 1)
#define SMC_TMR_ERR_CTRL_BF_MSK (0x00080000)
#define SMC_TMR_ERR_CTRL_BF_DEF (0x00000000)

///< TMR Configuration.
#define SMC_TMR_ERR_TMR_CFG_BF_OFF (20)
#define SMC_TMR_ERR_TMR_CFG_BF_WID ( 1)
#define SMC_TMR_ERR_TMR_CFG_BF_MSK (0x00100000)
#define SMC_TMR_ERR_TMR_CFG_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x9c
  *
  * Register default value:        0x00010000
  * Register full path in IP: smc_map/reg/APB_BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} smc_apb_brdg_stat_reg_t;

#define SMC_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define SMC_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define SMC_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define SMC_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define SMC_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define SMC_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define SMC_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define SMC_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define SMC_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define SMC_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define SMC_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define SMC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define SMC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define SMC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define SMC_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define SMC_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define SMC_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define SMC_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define SMC_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define SMC_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define SMC_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define SMC_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define SMC_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define SMC_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define SMC_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define SMC_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define SMC_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_INT_STATUS register description at address offset 0xc0
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/INT_STATUS
  * SMC Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Indicates register error interrupt status
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} smc_int_stat_reg_t;

#define SMC_INT_STAT_DEFAULT (0x00000000U)
#define SMC_INT_STAT_RD_MASK (0x00000001U)
#define SMC_INT_STAT_WR_MASK (0x00000000U)


///< Indicates register error interrupt status
#define SMC_INT_STAT_ERR_BF_OFF ( 0)
#define SMC_INT_STAT_ERR_BF_WID ( 1)
#define SMC_INT_STAT_ERR_BF_MSK (0x00000001)
#define SMC_INT_STAT_ERR_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_INT_HIGH_EN register description at address offset 0xc4
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/INT_HIGH_EN
  * SMC Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} smc_int_high_en_reg_t;

#define SMC_INT_HIGH_EN_DEFAULT (0x00000000U)
#define SMC_INT_HIGH_EN_RD_MASK (0x00000001U)
#define SMC_INT_HIGH_EN_WR_MASK (0x00000001U)


///< Register error interrupt high enable
#define SMC_INT_HIGH_EN_ERR_BF_OFF ( 0)
#define SMC_INT_HIGH_EN_ERR_BF_WID ( 1)
#define SMC_INT_HIGH_EN_ERR_BF_MSK (0x00000001)
#define SMC_INT_HIGH_EN_ERR_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_INT_LOW_EN register description at address offset 0xc8
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/INT_LOW_EN
  * SMC Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} smc_int_low_en_reg_t;

#define SMC_INT_LOW_EN_DEFAULT (0x00000000U)
#define SMC_INT_LOW_EN_RD_MASK (0x00000001U)
#define SMC_INT_LOW_EN_WR_MASK (0x00000001U)


///< Register error interrupt low enable
#define SMC_INT_LOW_EN_ERR_BF_OFF ( 0)
#define SMC_INT_LOW_EN_ERR_BF_WID ( 1)
#define SMC_INT_LOW_EN_ERR_BF_MSK (0x00000001)
#define SMC_INT_LOW_EN_ERR_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_INT_CLEAR register description at address offset 0xcc
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/INT_CLEAR
  * SMC Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} smc_int_clr_reg_t;

#define SMC_INT_CLR_DEFAULT (0x00000000U)
#define SMC_INT_CLR_RD_MASK (0x00000001U)
#define SMC_INT_CLR_WR_MASK (0x00000001U)


///< Register error interrupt clear
#define SMC_INT_CLR_ERR_BF_OFF ( 0)
#define SMC_INT_CLR_ERR_BF_WID ( 1)
#define SMC_INT_CLR_ERR_BF_MSK (0x00000001)
#define SMC_INT_CLR_ERR_BF_DEF (0x00000000)


/** @brief SMC_MAP_REG_INT_FORCE register description at address offset 0xd0
  *
  * Register default value:        0x00000000
  * Register full path in IP: smc_map/reg/INT_FORCE
  * SMC Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t REG_ERROR : 1;
    ///< Register error interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} smc_int_force_reg_t;

#define SMC_INT_FORCE_DEFAULT (0x00000000U)
#define SMC_INT_FORCE_RD_MASK (0x00000001U)
#define SMC_INT_FORCE_WR_MASK (0x00000001U)


///< Register error interrupt force
#define SMC_INT_FORCE_ERR_BF_OFF ( 0)
#define SMC_INT_FORCE_ERR_BF_WID ( 1)
#define SMC_INT_FORCE_ERR_BF_MSK (0x00000001)
#define SMC_INT_FORCE_ERR_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define SMC_A0_SHDW_REG(_BASE) ((smc_a0_shdw_reg_t*) SMC_A0_SHDW_ADR(_BASE))
#define SMC_B0_SHDW_REG(_BASE) ((smc_b0_shdw_reg_t*) SMC_B0_SHDW_ADR(_BASE))
#define SMC_B1_SHDW_REG(_BASE) ((smc_b1_shdw_reg_t*) SMC_B1_SHDW_ADR(_BASE))
#define SMC_B2_SHDW_REG(_BASE) ((smc_b2_shdw_reg_t*) SMC_B2_SHDW_ADR(_BASE))
#define SMC_B3_SHDW_REG(_BASE) ((smc_b3_shdw_reg_t*) SMC_B3_SHDW_ADR(_BASE))
#define SMC_B4_SHDW_REG(_BASE) ((smc_b4_shdw_reg_t*) SMC_B4_SHDW_ADR(_BASE))
#define SMC_B5_SHDW_REG(_BASE) ((smc_b5_shdw_reg_t*) SMC_B5_SHDW_ADR(_BASE))
#define SMC_B6_SHDW_REG(_BASE) ((smc_b6_shdw_reg_t*) SMC_B6_SHDW_ADR(_BASE))
#define SMC_C0_SHDW_REG(_BASE) ((smc_c0_shdw_reg_t*) SMC_C0_SHDW_ADR(_BASE))
#define SMC_A0_LIVE_REG(_BASE) ((smc_a0_live_reg_t*) SMC_A0_LIVE_ADR(_BASE))
#define SMC_B0_LIVE_REG(_BASE) ((smc_b0_live_reg_t*) SMC_B0_LIVE_ADR(_BASE))
#define SMC_B1_LIVE_REG(_BASE) ((smc_b1_live_reg_t*) SMC_B1_LIVE_ADR(_BASE))
#define SMC_B2_LIVE_REG(_BASE) ((smc_b2_live_reg_t*) SMC_B2_LIVE_ADR(_BASE))
#define SMC_B3_LIVE_REG(_BASE) ((smc_b3_live_reg_t*) SMC_B3_LIVE_ADR(_BASE))
#define SMC_B4_LIVE_REG(_BASE) ((smc_b4_live_reg_t*) SMC_B4_LIVE_ADR(_BASE))
#define SMC_B5_LIVE_REG(_BASE) ((smc_b5_live_reg_t*) SMC_B5_LIVE_ADR(_BASE))
#define SMC_B6_LIVE_REG(_BASE) ((smc_b6_live_reg_t*) SMC_B6_LIVE_ADR(_BASE))
#define SMC_C0_LIVE_REG(_BASE) ((smc_c0_live_reg_t*) SMC_C0_LIVE_ADR(_BASE))
#define SMC_SCRATCH_REG(_BASE) ((smc_scratch_reg_t*) SMC_SCRATCH_ADR(_BASE))
#define SMC_CFG_REG(_BASE) ((smc_cfg_reg_t*) SMC_CFG_ADR(_BASE))
#define SMC_DITHER_CFG1_REG(_BASE) ((smc_dither_cfg1_reg_t*) SMC_DITHER_CFG1_ADR(_BASE))
#define SMC_DITHER_CFG2_REG(_BASE) ((smc_dither_cfg2_reg_t*) SMC_DITHER_CFG2_ADR(_BASE))
#define SMC_CTRL_REG(_BASE) ((smc_ctrl_reg_t*) SMC_CTRL_ADR(_BASE))
#define SMC_TMR_CFG_REG(_BASE) ((smc_tmr_cfg_reg_t*) SMC_TMR_CFG_ADR(_BASE))
#define SMC_TMR_ERR_REG(_BASE) ((smc_tmr_err_reg_t*) SMC_TMR_ERR_ADR(_BASE))
#define SMC_APB_BRDG_STAT_REG(_BASE) ((smc_apb_brdg_stat_reg_t*) SMC_APB_BRDG_STAT_ADR(_BASE))
#define SMC_INT_STAT_REG(_BASE) ((smc_int_stat_reg_t*) SMC_INT_STAT_ADR(_BASE))
#define SMC_INT_HIGH_EN_REG(_BASE) ((smc_int_high_en_reg_t*) SMC_INT_HIGH_EN_ADR(_BASE))
#define SMC_INT_LOW_EN_REG(_BASE) ((smc_int_low_en_reg_t*) SMC_INT_LOW_EN_ADR(_BASE))
#define SMC_INT_CLR_REG(_BASE) ((smc_int_clr_reg_t*) SMC_INT_CLR_ADR(_BASE))
#define SMC_INT_FORCE_REG(_BASE) ((smc_int_force_reg_t*) SMC_INT_FORCE_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    smc_a0_shdw_reg_t A0_SHDW;         /*< Address offset = 0x0 */
    smc_b0_shdw_reg_t B0_SHDW;         /*< Address offset = 0x4 */
    smc_b1_shdw_reg_t B1_SHDW;         /*< Address offset = 0x8 */
    smc_b2_shdw_reg_t B2_SHDW;         /*< Address offset = 0xc */
    smc_b3_shdw_reg_t B3_SHDW;         /*< Address offset = 0x10 */
    smc_b4_shdw_reg_t B4_SHDW;         /*< Address offset = 0x14 */
    smc_b5_shdw_reg_t B5_SHDW;         /*< Address offset = 0x18 */
    smc_b6_shdw_reg_t B6_SHDW;         /*< Address offset = 0x1c */
    smc_c0_shdw_reg_t C0_SHDW;         /*< Address offset = 0x20 */
    const uint8_t        reservedArea0 [28];  /*< Address offset = 0x24 */
    smc_a0_live_reg_t A0_LIVE;         /*< Address offset = 0x40 */
    smc_b0_live_reg_t B0_LIVE;         /*< Address offset = 0x44 */
    smc_b1_live_reg_t B1_LIVE;         /*< Address offset = 0x48 */
    smc_b2_live_reg_t B2_LIVE;         /*< Address offset = 0x4c */
    smc_b3_live_reg_t B3_LIVE;         /*< Address offset = 0x50 */
    smc_b4_live_reg_t B4_LIVE;         /*< Address offset = 0x54 */
    smc_b5_live_reg_t B5_LIVE;         /*< Address offset = 0x58 */
    smc_b6_live_reg_t B6_LIVE;         /*< Address offset = 0x5c */
    smc_c0_live_reg_t C0_LIVE;         /*< Address offset = 0x60 */
    const uint8_t        reservedArea1 [28];  /*< Address offset = 0x64 */
    smc_scratch_reg_t SCRATCH;         /*< Address offset = 0x80 */
    smc_cfg_reg_t CFG;          /*< Address offset = 0x84 */
    smc_dither_cfg1_reg_t DITHER_CFG1;  /*< Address offset = 0x88 */
    smc_dither_cfg2_reg_t DITHER_CFG2;  /*< Address offset = 0x8c */
    smc_ctrl_reg_t CTRL;         /*< Address offset = 0x90 */
    smc_tmr_cfg_reg_t TMR_CFG;      /*< Address offset = 0x94 */
    smc_tmr_err_reg_t TMR_ERR;       /*< Address offset = 0x98 */
    smc_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x9c */
    const uint8_t        reservedArea2 [32];  /*< Address offset = 0xa0 */
    smc_int_stat_reg_t INT_STAT;      /*< Address offset = 0xc0 */
    smc_int_high_en_reg_t INT_HIGH_EN;     /*< Address offset = 0xc4 */
    smc_int_low_en_reg_t INT_LOW_EN;      /*< Address offset = 0xc8 */
    smc_int_clr_reg_t INT_CLR;       /*< Address offset = 0xcc */
    smc_int_force_reg_t INT_FORCE;       /*< Address offset = 0xd0 */
} smc_t;     // size: 0x007c

// AddressSpace struct pointer
//
#define FB_ANT0_SMC_ODD_TOP   ((smc_t*) FB_ANT0_SMC_ODD_TOP_BASE)
#define FB_ANT0_SMC_EVEN_TOP  ((smc_t*) FB_ANT0_SMC_EVEN_TOP_BASE)
#define FB_ANT0_SMC_ODD_BOT   ((smc_t*) FB_ANT0_SMC_ODD_BOT_BASE)
#define FB_ANT0_SMC_EVEN_BOT  ((smc_t*) FB_ANT0_SMC_EVEN_BOT_BASE)
#define FB_ANT1_SMC_ODD_TOP   ((smc_t*) FB_ANT1_SMC_ODD_TOP_BASE)
#define FB_ANT1_SMC_EVEN_TOP  ((smc_t*) FB_ANT1_SMC_EVEN_TOP_BASE)
#define FB_ANT1_SMC_ODD_BOT   ((smc_t*) FB_ANT1_SMC_ODD_BOT_BASE)
#define FB_ANT1_SMC_EVEN_BOT  ((smc_t*) FB_ANT1_SMC_EVEN_BOT_BASE)
#define TRX_ANT0_SMC0         ((smc_t*) TRX_ANT0_SMC0_BASE)
#define TRX_ANT0_SMC1         ((smc_t*) TRX_ANT0_SMC1_BASE)
#define TRX_ANT1_SMC0         ((smc_t*) TRX_ANT1_SMC0_BASE)
#define TRX_ANT1_SMC1         ((smc_t*) TRX_ANT1_SMC1_BASE)
#define TRX_ANT2_SMC0         ((smc_t*) TRX_ANT2_SMC0_BASE)
#define TRX_ANT2_SMC1         ((smc_t*) TRX_ANT2_SMC1_BASE)
#define TRX_ANT3_SMC0         ((smc_t*) TRX_ANT3_SMC0_BASE)
#define TRX_ANT3_SMC1         ((smc_t*) TRX_ANT3_SMC1_BASE)
#define TRX_ANT4_SMC0         ((smc_t*) TRX_ANT4_SMC0_BASE)
#define TRX_ANT4_SMC1         ((smc_t*) TRX_ANT4_SMC1_BASE)
#define TRX_ANT5_SMC0         ((smc_t*) TRX_ANT5_SMC0_BASE)
#define TRX_ANT5_SMC1         ((smc_t*) TRX_ANT5_SMC1_BASE)
#define TRX_ANT6_SMC0         ((smc_t*) TRX_ANT6_SMC0_BASE)
#define TRX_ANT6_SMC1         ((smc_t*) TRX_ANT6_SMC1_BASE)
#define TRX_ANT7_SMC0         ((smc_t*) TRX_ANT7_SMC0_BASE)
#define TRX_ANT7_SMC1         ((smc_t*) TRX_ANT7_SMC1_BASE)

// ******************************************* /Address Space

#endif      // _SMC_H_

