#ifndef _VE32_TILE_TIMER_H_
#define _VE32_TILE_TIMER_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define VEXABC0_TM_VE32_TILE_TIMER_BASE   ( 0x02803000 )
#define VEXABC1_TM_VE32_TILE_TIMER_BASE   ( 0x02843000 )
#define VEXABC2_TM_VE32_TILE_TIMER_BASE   ( 0x02883000 )
#define VEXABC3_TM_VE32_TILE_TIMER_BASE   ( 0x028c3000 )
#define VEXABC4_TM_VE32_TILE_TIMER_BASE   ( 0x02903000 )
#define VEXABC5_TM_VE32_TILE_TIMER_BASE   ( 0x02943000 )
#define VEXABC6_TM_VE32_TILE_TIMER_BASE   ( 0x02983000 )
#define VEXABC7_TM_VE32_TILE_TIMER_BASE   ( 0x029c3000 )
#define VEXABC8_TM_VE32_TILE_TIMER_BASE   ( 0x02a03000 )
#define VEXABC9_TM_VE32_TILE_TIMER_BASE   ( 0x02a43000 )
#define VEXABC10_TM_VE32_TILE_TIMER_BASE  ( 0x02a83000 )
#define VEXABC11_TM_VE32_TILE_TIMER_BASE  ( 0x02ac3000 )
#define VEXABC12_TM_VE32_TILE_TIMER_BASE  ( 0x02b03000 )
#define VEXABC13_TM_VE32_TILE_TIMER_BASE  ( 0x02b43000 )
#define VEXABC14_TM_VE32_TILE_TIMER_BASE  ( 0x02b83000 )
#define VEXABC15_TM_VE32_TILE_TIMER_BASE  ( 0x02bc3000 )
#define VEXABC16_TM_VE32_TILE_TIMER_BASE  ( 0x02c03000 )
#define VEXABC17_TM_VE32_TILE_TIMER_BASE  ( 0x02c43000 )
#define VEXABC18_TM_VE32_TILE_TIMER_BASE  ( 0x02c83000 )
#define VEXABC19_TM_VE32_TILE_TIMER_BASE  ( 0x02cc3000 )
#define VEXABC20_TM_VE32_TILE_TIMER_BASE  ( 0x02d03000 )
#define VEXABC21_TM_VE32_TILE_TIMER_BASE  ( 0x02d43000 )
#define VEXABC22_TM_VE32_TILE_TIMER_BASE  ( 0x02d83000 )
#define VEXABC23_TM_VE32_TILE_TIMER_BASE  ( 0x02dc3000 )
#define VEXABC24_TM_VE32_TILE_TIMER_BASE  ( 0x02e03000 )
#define VEXABC25_TM_VE32_TILE_TIMER_BASE  ( 0x02e43000 )
#define VEXABC26_TM_VE32_TILE_TIMER_BASE  ( 0x02e83000 )
#define VEXABC27_TM_VE32_TILE_TIMER_BASE  ( 0x02ec3000 )
#define VEXABC28_TM_VE32_TILE_TIMER_BASE  ( 0x02f03000 )
#define VEXABC29_TM_VE32_TILE_TIMER_BASE  ( 0x02f43000 )
#define VEXABC30_TM_VE32_TILE_TIMER_BASE  ( 0x02f83000 )
#define VEXABC31_TM_VE32_TILE_TIMER_BASE  ( 0x02fc3000 )
#define VEXABC32_TM_VE32_TILE_TIMER_BASE  ( 0x03003000 )
#define VEXABC33_TM_VE32_TILE_TIMER_BASE  ( 0x03043000 )
#define VEXABC34_TM_VE32_TILE_TIMER_BASE  ( 0x03083000 )
#define VEXABC35_TM_VE32_TILE_TIMER_BASE  ( 0x030c3000 )
#define VEXABC36_TM_VE32_TILE_TIMER_BASE  ( 0x03103000 )
#define VEXABC37_TM_VE32_TILE_TIMER_BASE  ( 0x03143000 )
#define VEXABC38_TM_VE32_TILE_TIMER_BASE  ( 0x03183000 )
#define VEXABC39_TM_VE32_TILE_TIMER_BASE  ( 0x031c3000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define VE32_TILE_TIMER_TMDPARAMSR_OFFSET ( 0x00000000U )
#define VE32_TILE_TIMER_TMDVALR0_OFFSET ( 0x00000004U )
#define VE32_TILE_TIMER_TMDCFGR0_OFFSET ( 0x0000000cU )
#define VE32_TILE_TIMER_TMDINITR0_OFFSET ( 0x00000010U )
#define VE32_TILE_TIMER_TMDWDNOTR0_OFFSET ( 0x00000018U )
#define VE32_TILE_TIMER_TMDWDADDRR0_OFFSET ( 0x0000001cU )
#define VE32_TILE_TIMER_TMDWDDATAR0_OFFSET ( 0x00000020U )
#define VE32_TILE_TIMER_TMDCMDR0_OFFSET ( 0x00000024U )
#define VE32_TILE_TIMER_TMDVALR1_OFFSET ( 0x00000028U )
#define VE32_TILE_TIMER_TMDCFGR1_OFFSET ( 0x00000030U )
#define VE32_TILE_TIMER_TMDINITR1_OFFSET ( 0x00000034U )
#define VE32_TILE_TIMER_TMDWDNOTR1_OFFSET ( 0x0000003cU )
#define VE32_TILE_TIMER_TMDWDADDRR1_OFFSET ( 0x00000040U )
#define VE32_TILE_TIMER_TMDWDDATAR1_OFFSET ( 0x00000044U )
#define VE32_TILE_TIMER_TMDCMDR1_OFFSET ( 0x00000048U )
#define VE32_TILE_TIMER_TMDVALR2_OFFSET ( 0x0000004cU )
#define VE32_TILE_TIMER_TMDCFGR2_OFFSET ( 0x00000054U )
#define VE32_TILE_TIMER_TMDINITR2_OFFSET ( 0x00000058U )
#define VE32_TILE_TIMER_TMDWDNOTR2_OFFSET ( 0x00000060U )
#define VE32_TILE_TIMER_TMDWDADDRR2_OFFSET ( 0x00000064U )
#define VE32_TILE_TIMER_TMDWDDATAR2_OFFSET ( 0x00000068U )
#define VE32_TILE_TIMER_TMDCMDR2_OFFSET ( 0x0000006cU )
#define VE32_TILE_TIMER_TMDVALR3_OFFSET ( 0x00000070U )
#define VE32_TILE_TIMER_TMDCFGR3_OFFSET ( 0x00000078U )
#define VE32_TILE_TIMER_TMDINITR3_OFFSET ( 0x0000007cU )
#define VE32_TILE_TIMER_TMDWDNOTR3_OFFSET ( 0x00000084U )
#define VE32_TILE_TIMER_TMDWDADDRR3_OFFSET ( 0x00000088U )
#define VE32_TILE_TIMER_TMDWDDATAR3_OFFSET ( 0x0000008cU )
#define VE32_TILE_TIMER_TMDCMDR3_OFFSET ( 0x00000090U )
#define VE32_TILE_TIMER_TMDGLOBALCTLR_OFFSET ( 0x00000280U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define VE32_TILE_TIMER_TMDPARAMSR_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDPARAMSR_OFFSET ) ))
#define VE32_TILE_TIMER_TMDVALR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDVALR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCFGR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCFGR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDINITR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDINITR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDNOTR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDNOTR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDADDRR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDADDRR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDDATAR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDDATAR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCMDR0_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCMDR0_OFFSET ) ))
#define VE32_TILE_TIMER_TMDVALR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDVALR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCFGR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCFGR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDINITR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDINITR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDNOTR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDNOTR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDADDRR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDADDRR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDDATAR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDDATAR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCMDR1_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCMDR1_OFFSET ) ))
#define VE32_TILE_TIMER_TMDVALR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDVALR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCFGR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCFGR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDINITR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDINITR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDNOTR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDNOTR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDADDRR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDADDRR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDDATAR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDDATAR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCMDR2_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCMDR2_OFFSET ) ))
#define VE32_TILE_TIMER_TMDVALR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDVALR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCFGR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCFGR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDINITR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDINITR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDNOTR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDNOTR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDADDRR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDADDRR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDWDDATAR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDWDDATAR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDCMDR3_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDCMDR3_OFFSET ) ))
#define VE32_TILE_TIMER_TMDGLOBALCTLR_ADR(_BASE) (( ( _BASE ) + ( VE32_TILE_TIMER_TMDGLOBALCTLR_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDPARAMSR register description at address offset 0x0
  *
  * Register default value:        0x00002004
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdparamsr
  * tmdparamsr register.
  */

typedef union {
  struct {
    uint32_t NUMTIMERS : 8;
    ///< Number of timers (counters).
    ///< AccessType="RO" BitOffset="0" ResetValue="0x4"
    uint32_t CNTBITS : 8;
    ///< Bits per counter.
    ///< AccessType="RO" BitOffset="8" ResetValue="0x20"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdparamsr_reg_t;

#define VE32_TILE_TIMER_TMDPARAMSR_DEFAULT (0x00002004U)
#define VE32_TILE_TIMER_TMDPARAMSR_RD_MASK (0x0000ffffU)
#define VE32_TILE_TIMER_TMDPARAMSR_WR_MASK (0x00000000U)


///< Number of timers (counters).
#define VE32_TILE_TIMER_TMDPARAMSR_NUMTIMERS_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDPARAMSR_NUMTIMERS_BF_WID ( 8)
#define VE32_TILE_TIMER_TMDPARAMSR_NUMTIMERS_BF_MSK (0x000000FF)
#define VE32_TILE_TIMER_TMDPARAMSR_NUMTIMERS_BF_DEF (0x00000004)

///< Bits per counter.
#define VE32_TILE_TIMER_TMDPARAMSR_CNTBITS_BF_OFF ( 8)
#define VE32_TILE_TIMER_TMDPARAMSR_CNTBITS_BF_WID ( 8)
#define VE32_TILE_TIMER_TMDPARAMSR_CNTBITS_BF_MSK (0x0000FF00)
#define VE32_TILE_TIMER_TMDPARAMSR_CNTBITS_BF_DEF (0x00002000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDVALR0 register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdvalr0
  * tmdvalr0 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Current value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdvalr0_reg_t;

#define VE32_TILE_TIMER_TMDVALR0_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDVALR0_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDVALR0_WR_MASK (0x00000000U)


///< Current value.
#define VE32_TILE_TIMER_TMDVALR0_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDVALR0_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDVALR0_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDVALR0_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCFGR0 register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcfgr0
  * tmdcfgr0 register.
  */

typedef union {
  struct {
    uint32_t CNT_MODE : 2;
    ///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
    ///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcfgr0_reg_t;

#define VE32_TILE_TIMER_TMDCFGR0_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCFGR0_RD_MASK (0x00000003U)
#define VE32_TILE_TIMER_TMDCFGR0_WR_MASK (0x00000003U)


///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
#define VE32_TILE_TIMER_TMDCFGR0_CNT_MODE_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCFGR0_CNT_MODE_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCFGR0_CNT_MODE_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCFGR0_CNT_MODE_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDINITR0 register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdinitr0
  * tmdinitr0 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Initial value for normal timer or timeout value for watchdog.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdinitr0_reg_t;

#define VE32_TILE_TIMER_TMDINITR0_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDINITR0_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDINITR0_WR_MASK (0xffffffffU)


///< Initial value for normal timer or timeout value for watchdog.
#define VE32_TILE_TIMER_TMDINITR0_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDINITR0_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDINITR0_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDINITR0_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDNOTR0 register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdnotr0
  * tmdwdnotr0 register.
  */

typedef union {
  struct {
    uint32_t NOTIFY : 1;
    ///< Notify: '0' No notification is sent when watchdog timer counter reaches
    ///< zero; '1' Notification is sent via the initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdnotr0_reg_t;

#define VE32_TILE_TIMER_TMDWDNOTR0_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDNOTR0_RD_MASK (0x00000001U)
#define VE32_TILE_TIMER_TMDWDNOTR0_WR_MASK (0x00000001U)


///< Notify: '0' No notification is sent when watchdog timer counter reaches
///< zero; '1' Notification is sent via the initiator interface.
#define VE32_TILE_TIMER_TMDWDNOTR0_NOTIFY_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDNOTR0_NOTIFY_BF_WID ( 1)
#define VE32_TILE_TIMER_TMDWDNOTR0_NOTIFY_BF_MSK (0x00000001)
#define VE32_TILE_TIMER_TMDWDNOTR0_NOTIFY_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDADDRR0 register description at address offset 0x1c
  *
  * Register default value:        0x00004000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdaddrr0
  * tmdwdaddrr0 register.
  */

typedef union {
  struct {
    uint32_t ADDR : 32;
    ///< Target address for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4000"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdaddrr0_reg_t;

#define VE32_TILE_TIMER_TMDWDADDRR0_DEFAULT (0x00004000U)
#define VE32_TILE_TIMER_TMDWDADDRR0_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDADDRR0_WR_MASK (0xffffffffU)


///< Target address for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDADDRR0_ADDR_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDADDRR0_ADDR_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDADDRR0_ADDR_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDADDRR0_ADDR_BF_DEF (0x00004000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDDATAR0 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwddatar0
  * tmdwddatar0 register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data value for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwddatar0_reg_t;

#define VE32_TILE_TIMER_TMDWDDATAR0_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDDATAR0_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDDATAR0_WR_MASK (0xffffffffU)


///< Data value for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDDATAR0_DATA_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDDATAR0_DATA_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDDATAR0_DATA_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDDATAR0_DATA_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCMDR0 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcmdr0
  * tmdcmdr0 register.
  */

typedef union {
  struct {
    uint32_t CMD : 2;
    ///< Command: '00' No operation; '01' Start the timer from initial or timeout
    ///< value; '10' Stop the timer; '11' Continue counting from its current
    ///< value.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcmdr0_reg_t;

#define VE32_TILE_TIMER_TMDCMDR0_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR0_RD_MASK (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR0_WR_MASK (0x00000003U)


///< Command: '00' No operation; '01' Start the timer from initial or timeout
///< value; '10' Stop the timer; '11' Continue counting from its current
///< value.
#define VE32_TILE_TIMER_TMDCMDR0_CMD_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCMDR0_CMD_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCMDR0_CMD_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCMDR0_CMD_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDVALR1 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdvalr1
  * tmdvalr1 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Current value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdvalr1_reg_t;

#define VE32_TILE_TIMER_TMDVALR1_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDVALR1_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDVALR1_WR_MASK (0x00000000U)


///< Current value.
#define VE32_TILE_TIMER_TMDVALR1_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDVALR1_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDVALR1_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDVALR1_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCFGR1 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcfgr1
  * tmdcfgr1 register.
  */

typedef union {
  struct {
    uint32_t CNT_MODE : 2;
    ///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
    ///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcfgr1_reg_t;

#define VE32_TILE_TIMER_TMDCFGR1_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCFGR1_RD_MASK (0x00000003U)
#define VE32_TILE_TIMER_TMDCFGR1_WR_MASK (0x00000003U)


///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
#define VE32_TILE_TIMER_TMDCFGR1_CNT_MODE_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCFGR1_CNT_MODE_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCFGR1_CNT_MODE_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCFGR1_CNT_MODE_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDINITR1 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdinitr1
  * tmdinitr1 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Initial value for normal timer or timeout value for watchdog.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdinitr1_reg_t;

#define VE32_TILE_TIMER_TMDINITR1_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDINITR1_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDINITR1_WR_MASK (0xffffffffU)


///< Initial value for normal timer or timeout value for watchdog.
#define VE32_TILE_TIMER_TMDINITR1_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDINITR1_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDINITR1_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDINITR1_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDNOTR1 register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdnotr1
  * tmdwdnotr1 register.
  */

typedef union {
  struct {
    uint32_t NOTIFY : 1;
    ///< Notify: '0' No notification is sent when watchdog timer counter reaches
    ///< zero; '1' Notification is sent via the initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdnotr1_reg_t;

#define VE32_TILE_TIMER_TMDWDNOTR1_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDNOTR1_RD_MASK (0x00000001U)
#define VE32_TILE_TIMER_TMDWDNOTR1_WR_MASK (0x00000001U)


///< Notify: '0' No notification is sent when watchdog timer counter reaches
///< zero; '1' Notification is sent via the initiator interface.
#define VE32_TILE_TIMER_TMDWDNOTR1_NOTIFY_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDNOTR1_NOTIFY_BF_WID ( 1)
#define VE32_TILE_TIMER_TMDWDNOTR1_NOTIFY_BF_MSK (0x00000001)
#define VE32_TILE_TIMER_TMDWDNOTR1_NOTIFY_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDADDRR1 register description at address offset 0x40
  *
  * Register default value:        0x00004000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdaddrr1
  * tmdwdaddrr1 register.
  */

typedef union {
  struct {
    uint32_t ADDR : 32;
    ///< Target address for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4000"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdaddrr1_reg_t;

#define VE32_TILE_TIMER_TMDWDADDRR1_DEFAULT (0x00004000U)
#define VE32_TILE_TIMER_TMDWDADDRR1_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDADDRR1_WR_MASK (0xffffffffU)


///< Target address for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDADDRR1_ADDR_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDADDRR1_ADDR_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDADDRR1_ADDR_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDADDRR1_ADDR_BF_DEF (0x00004000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDDATAR1 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwddatar1
  * tmdwddatar1 register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data value for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwddatar1_reg_t;

#define VE32_TILE_TIMER_TMDWDDATAR1_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDDATAR1_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDDATAR1_WR_MASK (0xffffffffU)


///< Data value for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDDATAR1_DATA_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDDATAR1_DATA_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDDATAR1_DATA_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDDATAR1_DATA_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCMDR1 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcmdr1
  * tmdcmdr1 register.
  */

typedef union {
  struct {
    uint32_t CMD : 2;
    ///< Command: '00' No operation; '01' Start the timer from initial or timeout
    ///< value; '10' Stop the timer; '11' Continue counting from its current
    ///< value.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcmdr1_reg_t;

#define VE32_TILE_TIMER_TMDCMDR1_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR1_RD_MASK (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR1_WR_MASK (0x00000003U)


///< Command: '00' No operation; '01' Start the timer from initial or timeout
///< value; '10' Stop the timer; '11' Continue counting from its current
///< value.
#define VE32_TILE_TIMER_TMDCMDR1_CMD_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCMDR1_CMD_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCMDR1_CMD_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCMDR1_CMD_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDVALR2 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdvalr2
  * tmdvalr2 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Current value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdvalr2_reg_t;

#define VE32_TILE_TIMER_TMDVALR2_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDVALR2_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDVALR2_WR_MASK (0x00000000U)


///< Current value.
#define VE32_TILE_TIMER_TMDVALR2_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDVALR2_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDVALR2_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDVALR2_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCFGR2 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcfgr2
  * tmdcfgr2 register.
  */

typedef union {
  struct {
    uint32_t CNT_MODE : 2;
    ///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
    ///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcfgr2_reg_t;

#define VE32_TILE_TIMER_TMDCFGR2_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCFGR2_RD_MASK (0x00000003U)
#define VE32_TILE_TIMER_TMDCFGR2_WR_MASK (0x00000003U)


///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
#define VE32_TILE_TIMER_TMDCFGR2_CNT_MODE_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCFGR2_CNT_MODE_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCFGR2_CNT_MODE_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCFGR2_CNT_MODE_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDINITR2 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdinitr2
  * tmdinitr2 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Initial value for normal timer or timeout value for watchdog.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdinitr2_reg_t;

#define VE32_TILE_TIMER_TMDINITR2_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDINITR2_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDINITR2_WR_MASK (0xffffffffU)


///< Initial value for normal timer or timeout value for watchdog.
#define VE32_TILE_TIMER_TMDINITR2_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDINITR2_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDINITR2_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDINITR2_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDNOTR2 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdnotr2
  * tmdwdnotr2 register.
  */

typedef union {
  struct {
    uint32_t NOTIFY : 1;
    ///< Notify: '0' No notification is sent when watchdog timer counter reaches
    ///< zero; '1' Notification is sent via the initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdnotr2_reg_t;

#define VE32_TILE_TIMER_TMDWDNOTR2_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDNOTR2_RD_MASK (0x00000001U)
#define VE32_TILE_TIMER_TMDWDNOTR2_WR_MASK (0x00000001U)


///< Notify: '0' No notification is sent when watchdog timer counter reaches
///< zero; '1' Notification is sent via the initiator interface.
#define VE32_TILE_TIMER_TMDWDNOTR2_NOTIFY_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDNOTR2_NOTIFY_BF_WID ( 1)
#define VE32_TILE_TIMER_TMDWDNOTR2_NOTIFY_BF_MSK (0x00000001)
#define VE32_TILE_TIMER_TMDWDNOTR2_NOTIFY_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDADDRR2 register description at address offset 0x64
  *
  * Register default value:        0x00004000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdaddrr2
  * tmdwdaddrr2 register.
  */

typedef union {
  struct {
    uint32_t ADDR : 32;
    ///< Target address for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4000"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdaddrr2_reg_t;

#define VE32_TILE_TIMER_TMDWDADDRR2_DEFAULT (0x00004000U)
#define VE32_TILE_TIMER_TMDWDADDRR2_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDADDRR2_WR_MASK (0xffffffffU)


///< Target address for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDADDRR2_ADDR_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDADDRR2_ADDR_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDADDRR2_ADDR_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDADDRR2_ADDR_BF_DEF (0x00004000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDDATAR2 register description at address offset 0x68
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwddatar2
  * tmdwddatar2 register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data value for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwddatar2_reg_t;

#define VE32_TILE_TIMER_TMDWDDATAR2_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDDATAR2_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDDATAR2_WR_MASK (0xffffffffU)


///< Data value for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDDATAR2_DATA_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDDATAR2_DATA_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDDATAR2_DATA_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDDATAR2_DATA_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCMDR2 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcmdr2
  * tmdcmdr2 register.
  */

typedef union {
  struct {
    uint32_t CMD : 2;
    ///< Command: '00' No operation; '01' Start the timer from initial or timeout
    ///< value; '10' Stop the timer; '11' Continue counting from its current
    ///< value.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcmdr2_reg_t;

#define VE32_TILE_TIMER_TMDCMDR2_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR2_RD_MASK (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR2_WR_MASK (0x00000003U)


///< Command: '00' No operation; '01' Start the timer from initial or timeout
///< value; '10' Stop the timer; '11' Continue counting from its current
///< value.
#define VE32_TILE_TIMER_TMDCMDR2_CMD_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCMDR2_CMD_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCMDR2_CMD_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCMDR2_CMD_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDVALR3 register description at address offset 0x70
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdvalr3
  * tmdvalr3 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Current value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdvalr3_reg_t;

#define VE32_TILE_TIMER_TMDVALR3_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDVALR3_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDVALR3_WR_MASK (0x00000000U)


///< Current value.
#define VE32_TILE_TIMER_TMDVALR3_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDVALR3_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDVALR3_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDVALR3_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCFGR3 register description at address offset 0x78
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcfgr3
  * tmdcfgr3 register.
  */

typedef union {
  struct {
    uint32_t CNT_MODE : 2;
    ///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
    ///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcfgr3_reg_t;

#define VE32_TILE_TIMER_TMDCFGR3_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCFGR3_RD_MASK (0x00000003U)
#define VE32_TILE_TIMER_TMDCFGR3_WR_MASK (0x00000003U)


///< Counter mode: '00' Normal (count-up) mode timer; '01' UNUSED; '10'
///< Single-shot watchdog (count-down); '11' Continuous-mode watchdog (count-down).
#define VE32_TILE_TIMER_TMDCFGR3_CNT_MODE_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCFGR3_CNT_MODE_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCFGR3_CNT_MODE_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCFGR3_CNT_MODE_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDINITR3 register description at address offset 0x7c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdinitr3
  * tmdinitr3 register.
  */

typedef union {
  struct {
    uint32_t VALUE : 32;
    ///< Initial value for normal timer or timeout value for watchdog.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdinitr3_reg_t;

#define VE32_TILE_TIMER_TMDINITR3_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDINITR3_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDINITR3_WR_MASK (0xffffffffU)


///< Initial value for normal timer or timeout value for watchdog.
#define VE32_TILE_TIMER_TMDINITR3_VAL_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDINITR3_VAL_BF_WID (32)
#define VE32_TILE_TIMER_TMDINITR3_VAL_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDINITR3_VAL_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDNOTR3 register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdnotr3
  * tmdwdnotr3 register.
  */

typedef union {
  struct {
    uint32_t NOTIFY : 1;
    ///< Notify: '0' No notification is sent when watchdog timer counter reaches
    ///< zero; '1' Notification is sent via the initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdnotr3_reg_t;

#define VE32_TILE_TIMER_TMDWDNOTR3_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDNOTR3_RD_MASK (0x00000001U)
#define VE32_TILE_TIMER_TMDWDNOTR3_WR_MASK (0x00000001U)


///< Notify: '0' No notification is sent when watchdog timer counter reaches
///< zero; '1' Notification is sent via the initiator interface.
#define VE32_TILE_TIMER_TMDWDNOTR3_NOTIFY_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDNOTR3_NOTIFY_BF_WID ( 1)
#define VE32_TILE_TIMER_TMDWDNOTR3_NOTIFY_BF_MSK (0x00000001)
#define VE32_TILE_TIMER_TMDWDNOTR3_NOTIFY_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDADDRR3 register description at address offset 0x88
  *
  * Register default value:        0x00004000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwdaddrr3
  * tmdwdaddrr3 register.
  */

typedef union {
  struct {
    uint32_t ADDR : 32;
    ///< Target address for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4000"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwdaddrr3_reg_t;

#define VE32_TILE_TIMER_TMDWDADDRR3_DEFAULT (0x00004000U)
#define VE32_TILE_TIMER_TMDWDADDRR3_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDADDRR3_WR_MASK (0xffffffffU)


///< Target address for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDADDRR3_ADDR_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDADDRR3_ADDR_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDADDRR3_ADDR_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDADDRR3_ADDR_BF_DEF (0x00004000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDWDDATAR3 register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdwddatar3
  * tmdwddatar3 register.
  */

typedef union {
  struct {
    uint32_t DATA : 32;
    ///< Data value for watchdog notification via initiator interface.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdwddatar3_reg_t;

#define VE32_TILE_TIMER_TMDWDDATAR3_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDWDDATAR3_RD_MASK (0xffffffffU)
#define VE32_TILE_TIMER_TMDWDDATAR3_WR_MASK (0xffffffffU)


///< Data value for watchdog notification via initiator interface.
#define VE32_TILE_TIMER_TMDWDDATAR3_DATA_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDWDDATAR3_DATA_BF_WID (32)
#define VE32_TILE_TIMER_TMDWDDATAR3_DATA_BF_MSK (0xFFFFFFFF)
#define VE32_TILE_TIMER_TMDWDDATAR3_DATA_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDCMDR3 register description at address offset 0x90
  *
  * Register default value:        0x00000000
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdcmdr3
  * tmdcmdr3 register.
  */

typedef union {
  struct {
    uint32_t CMD : 2;
    ///< Command: '00' No operation; '01' Start the timer from initial or timeout
    ///< value; '10' Stop the timer; '11' Continue counting from its current
    ///< value.
    ///< AccessType="WO" BitOffset="0" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdcmdr3_reg_t;

#define VE32_TILE_TIMER_TMDCMDR3_DEFAULT (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR3_RD_MASK (0x00000000U)
#define VE32_TILE_TIMER_TMDCMDR3_WR_MASK (0x00000003U)


///< Command: '00' No operation; '01' Start the timer from initial or timeout
///< value; '10' Stop the timer; '11' Continue counting from its current
///< value.
#define VE32_TILE_TIMER_TMDCMDR3_CMD_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDCMDR3_CMD_BF_WID ( 2)
#define VE32_TILE_TIMER_TMDCMDR3_CMD_BF_MSK (0x00000003)
#define VE32_TILE_TIMER_TMDCMDR3_CMD_BF_DEF (0x00000000)


/** @brief VE32_TILE_TIMER_MAP_MEM_VE32_TILE_TIMER_MAP_REG_TIMER_TMDGLOBALCTLR register description at address offset 0x280
  *
  * Register default value:        0x00000001
  * Register full path in IP: ve32_tile_timer_map_MEM/ve32_tile_timer_map/reg_timer_tmdglobalctlr
  * tmdglobalctlr register.
  */

typedef union {
  struct {
    uint32_t CTL_BITS : 4;
    ///< Control bits. Each bit is ANDed with the global control bit to generate
    ///< start/stop pulses for the corresponding timer. First timer is enabled
    ///< by default.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} ve32_tile_timer_tmdglobalctlr_reg_t;

#define VE32_TILE_TIMER_TMDGLOBALCTLR_DEFAULT (0x00000001U)
#define VE32_TILE_TIMER_TMDGLOBALCTLR_RD_MASK (0x0000000fU)
#define VE32_TILE_TIMER_TMDGLOBALCTLR_WR_MASK (0x0000000fU)


///< Control bits. Each bit is ANDed with the global control bit to generate
///< start/stop pulses for the corresponding timer. First timer is enabled
///< by default.
#define VE32_TILE_TIMER_TMDGLOBALCTLR_CTL_BITS_BF_OFF ( 0)
#define VE32_TILE_TIMER_TMDGLOBALCTLR_CTL_BITS_BF_WID ( 4)
#define VE32_TILE_TIMER_TMDGLOBALCTLR_CTL_BITS_BF_MSK (0x0000000F)
#define VE32_TILE_TIMER_TMDGLOBALCTLR_CTL_BITS_BF_DEF (0x00000001)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define VE32_TILE_TIMER_TMDPARAMSR_REG(_BASE) ((ve32_tile_timer_tmdparamsr_reg_t*) VE32_TILE_TIMER_TMDPARAMSR_ADR(_BASE))
#define VE32_TILE_TIMER_TMDVALR0_REG(_BASE) ((ve32_tile_timer_tmdvalr0_reg_t*) VE32_TILE_TIMER_TMDVALR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCFGR0_REG(_BASE) ((ve32_tile_timer_tmdcfgr0_reg_t*) VE32_TILE_TIMER_TMDCFGR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDINITR0_REG(_BASE) ((ve32_tile_timer_tmdinitr0_reg_t*) VE32_TILE_TIMER_TMDINITR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDNOTR0_REG(_BASE) ((ve32_tile_timer_tmdwdnotr0_reg_t*) VE32_TILE_TIMER_TMDWDNOTR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDADDRR0_REG(_BASE) ((ve32_tile_timer_tmdwdaddrr0_reg_t*) VE32_TILE_TIMER_TMDWDADDRR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDDATAR0_REG(_BASE) ((ve32_tile_timer_tmdwddatar0_reg_t*) VE32_TILE_TIMER_TMDWDDATAR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCMDR0_REG(_BASE) ((ve32_tile_timer_tmdcmdr0_reg_t*) VE32_TILE_TIMER_TMDCMDR0_ADR(_BASE))
#define VE32_TILE_TIMER_TMDVALR1_REG(_BASE) ((ve32_tile_timer_tmdvalr1_reg_t*) VE32_TILE_TIMER_TMDVALR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCFGR1_REG(_BASE) ((ve32_tile_timer_tmdcfgr1_reg_t*) VE32_TILE_TIMER_TMDCFGR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDINITR1_REG(_BASE) ((ve32_tile_timer_tmdinitr1_reg_t*) VE32_TILE_TIMER_TMDINITR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDNOTR1_REG(_BASE) ((ve32_tile_timer_tmdwdnotr1_reg_t*) VE32_TILE_TIMER_TMDWDNOTR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDADDRR1_REG(_BASE) ((ve32_tile_timer_tmdwdaddrr1_reg_t*) VE32_TILE_TIMER_TMDWDADDRR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDDATAR1_REG(_BASE) ((ve32_tile_timer_tmdwddatar1_reg_t*) VE32_TILE_TIMER_TMDWDDATAR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCMDR1_REG(_BASE) ((ve32_tile_timer_tmdcmdr1_reg_t*) VE32_TILE_TIMER_TMDCMDR1_ADR(_BASE))
#define VE32_TILE_TIMER_TMDVALR2_REG(_BASE) ((ve32_tile_timer_tmdvalr2_reg_t*) VE32_TILE_TIMER_TMDVALR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCFGR2_REG(_BASE) ((ve32_tile_timer_tmdcfgr2_reg_t*) VE32_TILE_TIMER_TMDCFGR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDINITR2_REG(_BASE) ((ve32_tile_timer_tmdinitr2_reg_t*) VE32_TILE_TIMER_TMDINITR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDNOTR2_REG(_BASE) ((ve32_tile_timer_tmdwdnotr2_reg_t*) VE32_TILE_TIMER_TMDWDNOTR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDADDRR2_REG(_BASE) ((ve32_tile_timer_tmdwdaddrr2_reg_t*) VE32_TILE_TIMER_TMDWDADDRR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDDATAR2_REG(_BASE) ((ve32_tile_timer_tmdwddatar2_reg_t*) VE32_TILE_TIMER_TMDWDDATAR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCMDR2_REG(_BASE) ((ve32_tile_timer_tmdcmdr2_reg_t*) VE32_TILE_TIMER_TMDCMDR2_ADR(_BASE))
#define VE32_TILE_TIMER_TMDVALR3_REG(_BASE) ((ve32_tile_timer_tmdvalr3_reg_t*) VE32_TILE_TIMER_TMDVALR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCFGR3_REG(_BASE) ((ve32_tile_timer_tmdcfgr3_reg_t*) VE32_TILE_TIMER_TMDCFGR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDINITR3_REG(_BASE) ((ve32_tile_timer_tmdinitr3_reg_t*) VE32_TILE_TIMER_TMDINITR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDNOTR3_REG(_BASE) ((ve32_tile_timer_tmdwdnotr3_reg_t*) VE32_TILE_TIMER_TMDWDNOTR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDADDRR3_REG(_BASE) ((ve32_tile_timer_tmdwdaddrr3_reg_t*) VE32_TILE_TIMER_TMDWDADDRR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDWDDATAR3_REG(_BASE) ((ve32_tile_timer_tmdwddatar3_reg_t*) VE32_TILE_TIMER_TMDWDDATAR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDCMDR3_REG(_BASE) ((ve32_tile_timer_tmdcmdr3_reg_t*) VE32_TILE_TIMER_TMDCMDR3_ADR(_BASE))
#define VE32_TILE_TIMER_TMDGLOBALCTLR_REG(_BASE) ((ve32_tile_timer_tmdglobalctlr_reg_t*) VE32_TILE_TIMER_TMDGLOBALCTLR_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    ve32_tile_timer_tmdparamsr_reg_t TIMER_TMDPARAMSR; /*< Address offset = 0x0 */
    ve32_tile_timer_tmdvalr0_reg_t TIMER_TMDVALR0; /*< Address offset = 0x4 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x8 */
    ve32_tile_timer_tmdcfgr0_reg_t TIMER_TMDCFGR0; /*< Address offset = 0xc */
    ve32_tile_timer_tmdinitr0_reg_t TIMER_TMDINITR0; /*< Address offset = 0x10 */
    const uint8_t        reservedArea1 [4];   /*< Address offset = 0x14 */
    ve32_tile_timer_tmdwdnotr0_reg_t TIMER_TMDWDNOTR0; /*< Address offset = 0x18 */
    ve32_tile_timer_tmdwdaddrr0_reg_t TIMER_TMDWDADDRR0; /*< Address offset = 0x1c */
    ve32_tile_timer_tmdwddatar0_reg_t TIMER_TMDWDDATAR0; /*< Address offset = 0x20 */
    ve32_tile_timer_tmdcmdr0_reg_t TIMER_TMDCMDR0; /*< Address offset = 0x24 */
    ve32_tile_timer_tmdvalr1_reg_t TIMER_TMDVALR1; /*< Address offset = 0x28 */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0x2c */
    ve32_tile_timer_tmdcfgr1_reg_t TIMER_TMDCFGR1; /*< Address offset = 0x30 */
    ve32_tile_timer_tmdinitr1_reg_t TIMER_TMDINITR1; /*< Address offset = 0x34 */
    const uint8_t        reservedArea3 [4];   /*< Address offset = 0x38 */
    ve32_tile_timer_tmdwdnotr1_reg_t TIMER_TMDWDNOTR1; /*< Address offset = 0x3c */
    ve32_tile_timer_tmdwdaddrr1_reg_t TIMER_TMDWDADDRR1; /*< Address offset = 0x40 */
    ve32_tile_timer_tmdwddatar1_reg_t TIMER_TMDWDDATAR1; /*< Address offset = 0x44 */
    ve32_tile_timer_tmdcmdr1_reg_t TIMER_TMDCMDR1; /*< Address offset = 0x48 */
    ve32_tile_timer_tmdvalr2_reg_t TIMER_TMDVALR2; /*< Address offset = 0x4c */
    const uint8_t        reservedArea4 [4];   /*< Address offset = 0x50 */
    ve32_tile_timer_tmdcfgr2_reg_t TIMER_TMDCFGR2; /*< Address offset = 0x54 */
    ve32_tile_timer_tmdinitr2_reg_t TIMER_TMDINITR2; /*< Address offset = 0x58 */
    const uint8_t        reservedArea5 [4];   /*< Address offset = 0x5c */
    ve32_tile_timer_tmdwdnotr2_reg_t TIMER_TMDWDNOTR2; /*< Address offset = 0x60 */
    ve32_tile_timer_tmdwdaddrr2_reg_t TIMER_TMDWDADDRR2; /*< Address offset = 0x64 */
    ve32_tile_timer_tmdwddatar2_reg_t TIMER_TMDWDDATAR2; /*< Address offset = 0x68 */
    ve32_tile_timer_tmdcmdr2_reg_t TIMER_TMDCMDR2; /*< Address offset = 0x6c */
    ve32_tile_timer_tmdvalr3_reg_t TIMER_TMDVALR3; /*< Address offset = 0x70 */
    const uint8_t        reservedArea6 [4];   /*< Address offset = 0x74 */
    ve32_tile_timer_tmdcfgr3_reg_t TIMER_TMDCFGR3; /*< Address offset = 0x78 */
    ve32_tile_timer_tmdinitr3_reg_t TIMER_TMDINITR3; /*< Address offset = 0x7c */
    const uint8_t        reservedArea7 [4];   /*< Address offset = 0x80 */
    ve32_tile_timer_tmdwdnotr3_reg_t TIMER_TMDWDNOTR3; /*< Address offset = 0x84 */
    ve32_tile_timer_tmdwdaddrr3_reg_t TIMER_TMDWDADDRR3; /*< Address offset = 0x88 */
    ve32_tile_timer_tmdwddatar3_reg_t TIMER_TMDWDDATAR3; /*< Address offset = 0x8c */
    ve32_tile_timer_tmdcmdr3_reg_t TIMER_TMDCMDR3; /*< Address offset = 0x90 */
    const uint8_t        reservedArea8 [492]; /*< Address offset = 0x94 */
    ve32_tile_timer_tmdglobalctlr_reg_t TIMER_TMDGLOBALCTLR; /*< Address offset = 0x280 */
} ve32_tile_timer_t;     // size: 0x0078

// AddressSpace struct pointer
//
#define VEXABC0_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC0_TM_VE32_TILE_TIMER_BASE)
#define VEXABC1_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC1_TM_VE32_TILE_TIMER_BASE)
#define VEXABC2_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC2_TM_VE32_TILE_TIMER_BASE)
#define VEXABC3_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC3_TM_VE32_TILE_TIMER_BASE)
#define VEXABC4_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC4_TM_VE32_TILE_TIMER_BASE)
#define VEXABC5_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC5_TM_VE32_TILE_TIMER_BASE)
#define VEXABC6_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC6_TM_VE32_TILE_TIMER_BASE)
#define VEXABC7_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC7_TM_VE32_TILE_TIMER_BASE)
#define VEXABC8_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC8_TM_VE32_TILE_TIMER_BASE)
#define VEXABC9_TM_VE32_TILE_TIMER   ((ve32_tile_timer_t*) VEXABC9_TM_VE32_TILE_TIMER_BASE)
#define VEXABC10_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC10_TM_VE32_TILE_TIMER_BASE)
#define VEXABC11_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC11_TM_VE32_TILE_TIMER_BASE)
#define VEXABC12_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC12_TM_VE32_TILE_TIMER_BASE)
#define VEXABC13_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC13_TM_VE32_TILE_TIMER_BASE)
#define VEXABC14_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC14_TM_VE32_TILE_TIMER_BASE)
#define VEXABC15_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC15_TM_VE32_TILE_TIMER_BASE)
#define VEXABC16_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC16_TM_VE32_TILE_TIMER_BASE)
#define VEXABC17_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC17_TM_VE32_TILE_TIMER_BASE)
#define VEXABC18_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC18_TM_VE32_TILE_TIMER_BASE)
#define VEXABC19_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC19_TM_VE32_TILE_TIMER_BASE)
#define VEXABC20_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC20_TM_VE32_TILE_TIMER_BASE)
#define VEXABC21_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC21_TM_VE32_TILE_TIMER_BASE)
#define VEXABC22_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC22_TM_VE32_TILE_TIMER_BASE)
#define VEXABC23_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC23_TM_VE32_TILE_TIMER_BASE)
#define VEXABC24_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC24_TM_VE32_TILE_TIMER_BASE)
#define VEXABC25_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC25_TM_VE32_TILE_TIMER_BASE)
#define VEXABC26_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC26_TM_VE32_TILE_TIMER_BASE)
#define VEXABC27_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC27_TM_VE32_TILE_TIMER_BASE)
#define VEXABC28_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC28_TM_VE32_TILE_TIMER_BASE)
#define VEXABC29_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC29_TM_VE32_TILE_TIMER_BASE)
#define VEXABC30_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC30_TM_VE32_TILE_TIMER_BASE)
#define VEXABC31_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC31_TM_VE32_TILE_TIMER_BASE)
#define VEXABC32_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC32_TM_VE32_TILE_TIMER_BASE)
#define VEXABC33_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC33_TM_VE32_TILE_TIMER_BASE)
#define VEXABC34_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC34_TM_VE32_TILE_TIMER_BASE)
#define VEXABC35_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC35_TM_VE32_TILE_TIMER_BASE)
#define VEXABC36_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC36_TM_VE32_TILE_TIMER_BASE)
#define VEXABC37_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC37_TM_VE32_TILE_TIMER_BASE)
#define VEXABC38_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC38_TM_VE32_TILE_TIMER_BASE)
#define VEXABC39_TM_VE32_TILE_TIMER  ((ve32_tile_timer_t*) VEXABC39_TM_VE32_TILE_TIMER_BASE)

// ******************************************* /Address Space

#endif      // _VE32_TILE_TIMER_H_

