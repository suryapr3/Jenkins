#ifndef _PCS_SERDES_LANE_MSG_H_
#define _PCS_SERDES_LANE_MSG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define DLNK_JESD0_PHY_PCS_SERDES_LANE_GLOBAL_BASE  ( 0x06100400 )
#define DLNK_JESD0_PHY_PCS_SERDES_LANE0_BASE        ( 0x06100800 )
#define DLNK_JESD0_PHY_PCS_SERDES_LANE1_BASE        ( 0x06100c00 )
#define DLNK_JESD0_PHY_PCS_SERDES_LANE2_BASE        ( 0x06101000 )
#define DLNK_JESD0_PHY_PCS_SERDES_LANE3_BASE        ( 0x06101400 )
#define DLNK_JESD1_PHY_PCS_SERDES_LANE_GLOBAL_BASE  ( 0x06900400 )
#define DLNK_JESD1_PHY_PCS_SERDES_LANE0_BASE        ( 0x06900800 )
#define DLNK_JESD1_PHY_PCS_SERDES_LANE1_BASE        ( 0x06900c00 )
#define DLNK_JESD1_PHY_PCS_SERDES_LANE2_BASE        ( 0x06901000 )
#define DLNK_JESD1_PHY_PCS_SERDES_LANE3_BASE        ( 0x06901400 )
#define DLNK_JESD2_PHY_PCS_SERDES_LANE_GLOBAL_BASE  ( 0x07100400 )
#define DLNK_JESD2_PHY_PCS_SERDES_LANE0_BASE        ( 0x07100800 )
#define DLNK_JESD2_PHY_PCS_SERDES_LANE1_BASE        ( 0x07100c00 )
#define DLNK_JESD2_PHY_PCS_SERDES_LANE2_BASE        ( 0x07101000 )
#define DLNK_JESD2_PHY_PCS_SERDES_LANE3_BASE        ( 0x07101400 )
#define DLNK_JESD3_PHY_PCS_SERDES_LANE_GLOBAL_BASE  ( 0x07900400 )
#define DLNK_JESD3_PHY_PCS_SERDES_LANE0_BASE        ( 0x07900800 )
#define DLNK_JESD3_PHY_PCS_SERDES_LANE1_BASE        ( 0x07900c00 )
#define DLNK_JESD3_PHY_PCS_SERDES_LANE2_BASE        ( 0x07901000 )
#define DLNK_JESD3_PHY_PCS_SERDES_LANE3_BASE        ( 0x07901400 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define PCS_SERDES_LANE_MSG_CFG_OFFSET ( 0x00000000U )
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_OFFSET ( 0x00000004U )
#define PCS_SERDES_LANE_MSG_TX_CFG_OFFSET ( 0x00000008U )
#define PCS_SERDES_LANE_MSG_RX_CFG_OFFSET ( 0x0000000cU )
#define PCS_SERDES_LANE_MSG_MBUS_CFG_OFFSET ( 0x00000010U )
#define PCS_SERDES_LANE_MSG_MBUS_STAT_OFFSET ( 0x00000014U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_OFFSET ( 0x00000018U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_OFFSET ( 0x0000001cU )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_OFFSET ( 0x00000020U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_OFFSET ( 0x00000024U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_OFFSET ( 0x00000028U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_OFFSET ( 0x0000002cU )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_OFFSET ( 0x00000030U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_OFFSET ( 0x00000034U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_OFFSET ( 0x00000038U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_OFFSET ( 0x0000003cU )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_OFFSET ( 0x00000040U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_OFFSET ( 0x00000044U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_OFFSET ( 0x00000048U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_OFFSET ( 0x0000004cU )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_OFFSET ( 0x00000050U )
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_OFFSET ( 0x00000054U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_OFFSET ( 0x00000058U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_OFFSET ( 0x0000005cU )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_OFFSET ( 0x00000060U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_OFFSET ( 0x00000064U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_OFFSET ( 0x00000068U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_OFFSET ( 0x0000006cU )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_OFFSET ( 0x00000070U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_OFFSET ( 0x00000074U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_OFFSET ( 0x00000078U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_OFFSET ( 0x0000007cU )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_OFFSET ( 0x00000080U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_OFFSET ( 0x00000084U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_OFFSET ( 0x00000088U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_OFFSET ( 0x0000008cU )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_OFFSET ( 0x00000090U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_OFFSET ( 0x00000094U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_OFFSET ( 0x00000098U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_OFFSET ( 0x0000009cU )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_OFFSET ( 0x000000a0U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_OFFSET ( 0x000000a4U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_OFFSET ( 0x000000a8U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_OFFSET ( 0x000000acU )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_OFFSET ( 0x000000b0U )
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_OFFSET ( 0x000000b4U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_OFFSET ( 0x000000b8U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_OFFSET ( 0x000000bcU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_OFFSET ( 0x000000c0U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_OFFSET ( 0x000000c4U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_OFFSET ( 0x000000c8U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_OFFSET ( 0x000000ccU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_OFFSET ( 0x000000d0U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_OFFSET ( 0x000000d4U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_OFFSET ( 0x000000d8U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_OFFSET ( 0x000000dcU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_OFFSET ( 0x000000e0U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_OFFSET ( 0x000000e4U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_OFFSET ( 0x000000e8U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_OFFSET ( 0x000000ecU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_OFFSET ( 0x000000f0U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_OFFSET ( 0x000000f4U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_OFFSET ( 0x000000f8U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_OFFSET ( 0x000000fcU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_OFFSET ( 0x00000100U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_OFFSET ( 0x00000104U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_OFFSET ( 0x00000108U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_OFFSET ( 0x0000010cU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_OFFSET ( 0x00000110U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_OFFSET ( 0x00000114U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_OFFSET ( 0x00000118U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_OFFSET ( 0x0000011cU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_OFFSET ( 0x00000120U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_OFFSET ( 0x00000124U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_OFFSET ( 0x00000128U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_OFFSET ( 0x0000012cU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_OFFSET ( 0x00000130U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_OFFSET ( 0x00000134U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_OFFSET ( 0x00000138U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_OFFSET ( 0x0000013cU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_OFFSET ( 0x00000140U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_OFFSET ( 0x00000144U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_OFFSET ( 0x00000148U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_OFFSET ( 0x0000014cU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_OFFSET ( 0x00000150U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_OFFSET ( 0x00000154U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_OFFSET ( 0x00000158U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_OFFSET ( 0x0000015cU )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_OFFSET ( 0x00000160U )
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_OFFSET ( 0x00000164U )
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_OFFSET ( 0x00000168U )
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_OFFSET ( 0x0000016cU )
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_OFFSET ( 0x00000170U )
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_OFFSET ( 0x00000174U )
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_OFFSET ( 0x00000178U )
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_OFFSET ( 0x0000017cU )
#define PCS_SERDES_LANE_MSG_OVRD_0_OFFSET ( 0x00000180U )
#define PCS_SERDES_LANE_MSG_OVRD_1_OFFSET ( 0x00000184U )
#define PCS_SERDES_LANE_MSG_OVRD_2_OFFSET ( 0x00000188U )
#define PCS_SERDES_LANE_MSG_OVRD_3_OFFSET ( 0x0000018cU )
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_OFFSET ( 0x00000190U )
#define PCS_SERDES_LANE_MSG_CFG_RO_0_OFFSET ( 0x00000194U )
#define PCS_SERDES_LANE_MSG_CFG_RO_1_OFFSET ( 0x00000198U )
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_OFFSET ( 0x0000019cU )
#define PCS_SERDES_LANE_MSG_TX_RO_0_OFFSET ( 0x000001a0U )
#define PCS_SERDES_LANE_MSG_TX_RO_1_OFFSET ( 0x000001a4U )
#define PCS_SERDES_LANE_MSG_RX_RO_0_OFFSET ( 0x000001a8U )
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_OFFSET ( 0x000001acU )
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_OFFSET ( 0x000001b0U )
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_OFFSET ( 0x000001b4U )
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_OFFSET ( 0x000001b8U )
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_OFFSET ( 0x000001e8U )
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_OFFSET ( 0x000001ecU )
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_OFFSET ( 0x000001f0U )
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_OFFSET ( 0x000001f4U )
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_OFFSET ( 0x000001f8U )
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_OFFSET ( 0x000001fcU )
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_OFFSET ( 0x00000200U )
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_OFFSET ( 0x00000204U )
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_OFFSET ( 0x00000208U )
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_OFFSET ( 0x0000020cU )
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_OFFSET ( 0x00000210U )
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_OFFSET ( 0x00000214U )
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_OFFSET ( 0x00000218U )
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_OFFSET ( 0x0000021cU )
#define PCS_SERDES_LANE_MSG_MISC_RW_OFFSET ( 0x00000220U )
#define PCS_SERDES_LANE_MSG_MISC_RO_OFFSET ( 0x00000224U )
#define PCS_SERDES_LANE_MSG_RW_SPARE_OFFSET ( 0x000003dcU )
#define PCS_SERDES_LANE_MSG_RO_SPARE_OFFSET ( 0x000003e0U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define PCS_SERDES_LANE_MSG_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PHYSTAT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_TX_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_TX_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_RX_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_RX_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_MBUS_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_MBUS_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_MBUS_STAT_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_MBUS_STAT_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_OVRD_EN_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_OVRD_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_OVRD_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_OVRD_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_OVRD_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_OVRD_2_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_OVRD_2_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_OVRD_3_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_OVRD_3_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCSFSM_RO_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_CFG_RO_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_CFG_RO_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_CFG_RO_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_CFG_RO_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_CFG_RO_CLR_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_TX_RO_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_TX_RO_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_TX_RO_1_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_TX_RO_1_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_RX_RO_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_RX_RO_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_TSTBUS_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_DEEPPM_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_MISC_RW_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_MISC_RW_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_MISC_RO_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_MISC_RO_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_RW_SPARE_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_RW_SPARE_OFFSET ) ))
#define PCS_SERDES_LANE_MSG_RO_SPARE_ADR(_BASE) (( ( _BASE ) + ( PCS_SERDES_LANE_MSG_RO_SPARE_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_LANE_CFG register description at address offset 0x0
  *
  * Register default value:        0x0023E860
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_lane_cfg
  * PCS Lane configuration
  */

typedef union {
  struct {
    uint32_t PCSCKGATE_DISABLE : 1;
    ///< Disables all internal clock gating. 0 - Allow automatic control of
    ///< clock gating cells. 1 - Force all clock gating cells to ungate the
    ///< clock. For debugging purposes.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSROREG_CKGATE_DSBL : 1;
    ///< Disable clock gating for RO register
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PCSIF_CLK_SEL : 1;
    ///< Engineering Debug Only - to select PCLK select from SoC (0) or PMA
    ///< (1).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PCSLB_FE : 1;
    ///< For Debug: Enable Far-End Loopback
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PCSIF_IDLE_CNTR : 4;
    ///< # of pclk cycles to delay txelecidle rising edge to ensure no data
    ///< is cut off before going idle
    ///< AccessType="RW" BitOffset="4" ResetValue="0x6"
    uint32_t PCSIF_MIN_RESET_CNTR_MAX : 11;
    ///< vpcsif_min_reset_cntr_max
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3E8"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_MIN_TXIDLE_CNTR_MAX : 3;
    ///< # of pclk cycles to wait prior to permitting a change in state/rate/width/pclk_rate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x2"
    uint32_t PCS_GETLOCALPRESETCOEF_ERR_MODE : 1;
    ///< Error handle when request preset index is invalid
    ///< 0: return the coefficent base on the index, regardless the rate with
    ///< error assert
    ///< 1: drop the request, and no coefficient sends back to MAC with error
    ///< assert
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_CFG_DEFAULT (0x0023e860U)
#define PCS_SERDES_LANE_MSG_CFG_RD_MASK (0x00f7ffffU)
#define PCS_SERDES_LANE_MSG_CFG_WR_MASK (0x00f7ffffU)


///< Disables all internal clock gating. 0 - Allow automatic control of
///< clock gating cells. 1 - Force all clock gating cells to ungate the
///< clock. For debugging purposes.
#define PCS_SERDES_LANE_MSG_CFG_PCSCKGATE_DIS_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_CFG_PCSCKGATE_DIS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_PCSCKGATE_DIS_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_CFG_PCSCKGATE_DIS_BF_DEF (0x00000000)

///< Disable clock gating for RO register
#define PCS_SERDES_LANE_MSG_CFG_PCSROREG_CKGATE_DSBL_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_CFG_PCSROREG_CKGATE_DSBL_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_PCSROREG_CKGATE_DSBL_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_CFG_PCSROREG_CKGATE_DSBL_BF_DEF (0x00000000)

///< Engineering Debug Only - to select PCLK select from SoC (0) or PMA
///< (1).
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_CLK_SEL_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_CLK_SEL_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_CLK_SEL_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_CLK_SEL_BF_DEF (0x00000000)

///< For Debug: Enable Far-End Loopback
#define PCS_SERDES_LANE_MSG_CFG_PCSLB_FE_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_CFG_PCSLB_FE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_PCSLB_FE_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_CFG_PCSLB_FE_BF_DEF (0x00000000)

///< # of pclk cycles to delay txelecidle rising edge to ensure no data
///< is cut off before going idle
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_IDLE_CNTR_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_IDLE_CNTR_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_IDLE_CNTR_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_IDLE_CNTR_BF_DEF (0x00000060)

///< vpcsif_min_reset_cntr_max
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_RST_CNTR_MAX_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_RST_CNTR_MAX_BF_WID (11)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_RST_CNTR_MAX_BF_MSK (0x0007FF00)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_RST_CNTR_MAX_BF_DEF (0x0003E800)

///< # of pclk cycles to wait prior to permitting a change in state/rate/width/pclk_rate
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_TXIDLE_CNTR_MAX_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_TXIDLE_CNTR_MAX_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_TXIDLE_CNTR_MAX_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_CFG_PCSIF_MIN_TXIDLE_CNTR_MAX_BF_DEF (0x00200000)

///< Error handle when request preset index is invalid
///< 0: return the coefficent base on the index, regardless the rate with
///< error assert
///< 1: drop the request, and no coefficient sends back to MAC with error
///< assert
#define PCS_SERDES_LANE_MSG_CFG_GETLOCALPRSTCOEF_ERR_MODE_BF_OFF (23)
#define PCS_SERDES_LANE_MSG_CFG_GETLOCALPRSTCOEF_ERR_MODE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_GETLOCALPRSTCOEF_ERR_MODE_BF_MSK (0x00800000)
#define PCS_SERDES_LANE_MSG_CFG_GETLOCALPRSTCOEF_ERR_MODE_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PHYSTATUS_CFG register description at address offset 0x4
  *
  * Register default value:        0x0000000F
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_phystatus_cfg
  * PCS Phy status configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PHYSTATUS_P1SUBENTRY_1CYCLE : 1;
    ///< Phystatus Ack for L1 Substate Entry: 0 - Similar to P2 Entry 1 - 1
    ///< Cycle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCSIF_PHYSTATUS_P1SUBEXIT_1CYCLE : 1;
    ///< Phystatus Ack for L1 Substate Exit: 0 - Similar to P2 Entry 1 - 1
    ///< Cycle
    ///< AccessType="RW" BitOffset="1" ResetValue="0x1"
    uint32_t PCSIF_PHYSTATUS_P2ENTRY_1CYCLE : 1;
    ///< Phystatus Ack for P2 Entry: 0 - Similar to P2 Entry 1 - 1 Cycle
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t PCSIF_PHYSTATUS_P2EXIT_1CYCLE : 1;
    ///< Phystatus Ack for P2 Exit: 0 - Similar to P2 Entry 1 - 1 Cycle
    ///< AccessType="RW" BitOffset="3" ResetValue="0x1"
    uint32_t PCSIF_PHYSTATUSGEN : 1;
    ///< For Debug: Pulse Phystatus for 1 cycle.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_phystat_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_DEFAULT (0x0000000fU)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_RD_MASK (0x0000001fU)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_WR_MASK (0x0000001fU)


///< Phystatus Ack for L1 Substate Entry: 0 - Similar to P2 Entry 1 - 1
///< Cycle
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBENTRY_1CYCLE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBENTRY_1CYCLE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBENTRY_1CYCLE_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBENTRY_1CYCLE_BF_DEF (0x00000001)

///< Phystatus Ack for L1 Substate Exit: 0 - Similar to P2 Entry 1 - 1
///< Cycle
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBEXIT_1CYCLE_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBEXIT_1CYCLE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBEXIT_1CYCLE_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P1SUBEXIT_1CYCLE_BF_DEF (0x00000002)

///< Phystatus Ack for P2 Entry: 0 - Similar to P2 Entry 1 - 1 Cycle
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2ENTRY_1CYCLE_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2ENTRY_1CYCLE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2ENTRY_1CYCLE_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2ENTRY_1CYCLE_BF_DEF (0x00000004)

///< Phystatus Ack for P2 Exit: 0 - Similar to P2 Entry 1 - 1 Cycle
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2EXIT_1CYCLE_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2EXIT_1CYCLE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2EXIT_1CYCLE_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_P2EXIT_1CYCLE_BF_DEF (0x00000008)

///< For Debug: Pulse Phystatus for 1 cycle.
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_PHYSTATGEN_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_PHYSTATGEN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_PHYSTATGEN_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_PCSIF_PHYSTATGEN_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_TX_CFG register description at address offset 0x8
  *
  * Register default value:        0x00000001
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_tx_cfg
  * PCS Tx configuration
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_USB_GEN1_TXDEEMPH : 1;
    ///< Txdeemp control for USB: 0 - -6dB 1 - -3.5dB
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCSTXDRV_USB_GEN1_TXSWING : 1;
    ///< Txswing control for USB: 0 - Full Swing 1- Half Swing
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PCSIF_TXFLOW_FORCE_ON : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PCSIF_TXFLOW_NODATAVLD_FORCE_ON : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_tx_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_TX_CFG_DEFAULT (0x00000001U)
#define PCS_SERDES_LANE_MSG_TX_CFG_RD_MASK (0x0000000fU)
#define PCS_SERDES_LANE_MSG_TX_CFG_WR_MASK (0x0000000fU)


///< Txdeemp control for USB: 0 - -6dB 1 - -3.5dB
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXDEEMPH_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXDEEMPH_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXDEEMPH_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXDEEMPH_BF_DEF (0x00000001)

///< Txswing control for USB: 0 - Full Swing 1- Half Swing
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXSWING_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXSWING_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXSWING_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSTXDRV_USB_GEN1_TXSWING_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_FORCE_ON_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_FORCE_ON_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_FORCE_ON_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_FORCE_ON_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_NODATAVLD_FORCE_ON_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_NODATAVLD_FORCE_ON_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_NODATAVLD_FORCE_ON_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_TX_CFG_PCSIF_TXFLOW_NODATAVLD_FORCE_ON_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_RX_CFG register description at address offset 0xc
  *
  * Register default value:        0x00000050
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_rx_cfg
  * PCS Rx configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_RXDETECT_INPCIEP2_EN : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_RXPSTATE_P0S_EN : 1;
    ///< Enable P0s: 0 - Use P0 instead of P0s 1 - Enable P0s
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PCSIF_RXSTANDBY0EN_IN_RXEQ : 1;
    ///< Reserved
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PCS_USE_RXEQ_LEGACY : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PCSRXEQTRAINING_RXCDRLOCK2DATA_EN : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t PCSRXEQTRAINING_SAMEFLOW_RXEQEVAL_EN : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t PCSRXEQTRAINING_EDGE_EN : 1;
    ///< enable edge check for cdrlock2data coming from PMA to finish eqtrain
    ///< handshake
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t PCSRXEQTRAINING_LEVEL_EN : 1;
    ///< enable level check for cdrlock2data coming from PMA to finish eqtrain
    ///< handshake
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_rx_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_RX_CFG_DEFAULT (0x00000050U)
#define PCS_SERDES_LANE_MSG_RX_CFG_RD_MASK (0x000000ffU)
#define PCS_SERDES_LANE_MSG_RX_CFG_WR_MASK (0x000000ffU)


///< Reserved
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXDETECT_INPCIEP2_EN_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXDETECT_INPCIEP2_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXDETECT_INPCIEP2_EN_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXDETECT_INPCIEP2_EN_BF_DEF (0x00000000)

///< Enable P0s: 0 - Use P0 instead of P0s 1 - Enable P0s
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXPSTATE_P0S_EN_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXPSTATE_P0S_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXPSTATE_P0S_EN_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXPSTATE_P0S_EN_BF_DEF (0x00000000)

///< Reserved
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXSTANDBY0EN_IN_RXEQ_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXSTANDBY0EN_IN_RXEQ_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXSTANDBY0EN_IN_RXEQ_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSIF_RXSTANDBY0EN_IN_RXEQ_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_RX_CFG_USE_RXEQ_LEGACY_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_RX_CFG_USE_RXEQ_LEGACY_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_USE_RXEQ_LEGACY_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_RX_CFG_USE_RXEQ_LEGACY_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_RXCDRLOCK2DATA_EN_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_RXCDRLOCK2DATA_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_RXCDRLOCK2DATA_EN_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_RXCDRLOCK2DATA_EN_BF_DEF (0x00000010)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_SAMEFLOW_RXEQEVAL_EN_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_SAMEFLOW_RXEQEVAL_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_SAMEFLOW_RXEQEVAL_EN_BF_MSK (0x00000020)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_SAMEFLOW_RXEQEVAL_EN_BF_DEF (0x00000000)

///< enable edge check for cdrlock2data coming from PMA to finish eqtrain
///< handshake
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_EDGE_EN_BF_OFF ( 6)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_EDGE_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_EDGE_EN_BF_MSK (0x00000040)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_EDGE_EN_BF_DEF (0x00000040)

///< enable level check for cdrlock2data coming from PMA to finish eqtrain
///< handshake
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_LVL_EN_BF_OFF ( 7)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_LVL_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_LVL_EN_BF_MSK (0x00000080)
#define PCS_SERDES_LANE_MSG_RX_CFG_PCSRXEQTRAINING_LVL_EN_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_MBUS_CFG register description at address offset 0x10
  *
  * Register default value:        0x04FF20FF
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_mbus_cfg
  * PCS Message Bus configuration
  */

typedef union {
  struct {
    uint32_t PCSMBUSCONV_WR_ACK_TIMER_MAX : 8;
    ///< MBUS: Max # of cycles to wait for wr_ack from MAC
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFF"
    uint32_t PCSMBUSCONV_ILLEGAL_RD_ADDR_DET_CLR : 1;
    ///< MBUS: Clear for vpcsmbusconv_illegal_rd_addr_det
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSMBUSCONV_ILLEGAL_WR_C_ADDR_DET_CLR : 1;
    ///< MBUS: Clear for vpcsmbusconv_illegal_wr_c_addr_det
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t PCSMBUSCONV_ILLEGAL_WR_UC_ADDR_DET_CLR : 1;
    ///< MBUS: Clear for vpcsmbusconv_illegal_wr_uc_addr_det
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t PCSMBUSCONV_RD_ACK_GEN : 1;
    ///< MBUS: Generate a fake rd_ack to MAC for debugging purposes
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t PCSMBUSCONV_RD_COMPL_TIMEOUT_CLR : 1;
    ///< MBUS: Timeout Clear for rd_compl response from MAC
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t PCSMBUSCONV_RD_COMPL_TIMER_EN : 1;
    ///< MBUS: Enable Timer for receiving rd_compl response from MAC
    ///< AccessType="RW" BitOffset="13" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSMBUSCONV_RD_COMPL_TIMER_MAX : 8;
    ///< MBUS: Max # of cycles to wait for rd_compl response from MAC
    ///< AccessType="RW" BitOffset="16" ResetValue="0xFF"
    uint32_t PCSMBUSCONV_WR_ACK_GEN : 1;
    ///< MBUS: Generate a fake wr_ack to MAC for debugging purposes
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PCSMBUSCONV_WR_ACK_TIMEOUT_CLR : 1;
    ///< MBUS: Timeout Clear for wr_ack from MAC
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t PCSMBUSCONV_WR_ACK_TIMER_EN : 1;
    ///< MBUS: Enable Timer for receiving wr_ack from MAC
    ///< AccessType="RW" BitOffset="26" ResetValue="0x1"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_mbus_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_MBUS_CFG_DEFAULT (0x04ff20ffU)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_RD_MASK (0x07ff3fffU)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_WR_MASK (0x07ff3fffU)


///< MBUS: Max # of cycles to wait for wr_ack from MAC
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_MAX_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_MAX_BF_WID ( 8)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_MAX_BF_MSK (0x000000FF)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_MAX_BF_DEF (0x000000FF)

///< MBUS: Clear for vpcsmbusconv_illegal_rd_addr_det
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_RD_ADDR_DET_CLR_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_RD_ADDR_DET_CLR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_RD_ADDR_DET_CLR_BF_MSK (0x00000100)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_RD_ADDR_DET_CLR_BF_DEF (0x00000000)

///< MBUS: Clear for vpcsmbusconv_illegal_wr_c_addr_det
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_C_ADDR_DET_CLR_BF_OFF ( 9)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_C_ADDR_DET_CLR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_C_ADDR_DET_CLR_BF_MSK (0x00000200)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_C_ADDR_DET_CLR_BF_DEF (0x00000000)

///< MBUS: Clear for vpcsmbusconv_illegal_wr_uc_addr_det
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_UC_ADDR_DET_CLR_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_UC_ADDR_DET_CLR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_UC_ADDR_DET_CLR_BF_MSK (0x00000400)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_ILLEGAL_WR_UC_ADDR_DET_CLR_BF_DEF (0x00000000)

///< MBUS: Generate a fake rd_ack to MAC for debugging purposes
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_ACK_GEN_BF_OFF (11)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_ACK_GEN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_ACK_GEN_BF_MSK (0x00000800)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_ACK_GEN_BF_DEF (0x00000000)

///< MBUS: Timeout Clear for rd_compl response from MAC
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMEOUT_CLR_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMEOUT_CLR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMEOUT_CLR_BF_MSK (0x00001000)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMEOUT_CLR_BF_DEF (0x00000000)

///< MBUS: Enable Timer for receiving rd_compl response from MAC
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_EN_BF_OFF (13)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_EN_BF_MSK (0x00002000)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_EN_BF_DEF (0x00002000)

///< MBUS: Max # of cycles to wait for rd_compl response from MAC
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_MAX_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_MAX_BF_WID ( 8)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_MAX_BF_MSK (0x00FF0000)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_RD_COMPL_TIMER_MAX_BF_DEF (0x00FF0000)

///< MBUS: Generate a fake wr_ack to MAC for debugging purposes
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_GEN_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_GEN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_GEN_BF_MSK (0x01000000)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_GEN_BF_DEF (0x00000000)

///< MBUS: Timeout Clear for wr_ack from MAC
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMEOUT_CLR_BF_OFF (25)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMEOUT_CLR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMEOUT_CLR_BF_MSK (0x02000000)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMEOUT_CLR_BF_DEF (0x00000000)

///< MBUS: Enable Timer for receiving wr_ack from MAC
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_EN_BF_OFF (26)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_EN_BF_MSK (0x04000000)
#define PCS_SERDES_LANE_MSG_MBUS_CFG_PCSMBUSCONV_WR_ACK_TIMER_EN_BF_DEF (0x04000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_MBUS_STATUS register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_mbus_status
  * PCS Message Bus status
  */

typedef union {
  struct {
    uint32_t PCSMBUSCONV_MBUSCONV_ILLEGAL_RD_ADDR_DET : 1;
    ///< MBUS: MAC attempted to read from an illegal address
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_C_ADDR_DET : 1;
    ///< MBUS: MAC attempted to write commit to an illegal address
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_UC_ADDR_DET : 1;
    ///< MBUS: MAC attempted to write uncommit to an illegal address
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PCSMBUSCONV_MBUSCONV_P2M_BUF_FULL : 1;
    ///< MBUS: Internal P2M Sequencing Buffer is Full
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PCSMBUSCONV_MBUSCONV_RD_COMPL_TIMEOUT : 1;
    ///< MBUS: If asserted indicates that the timer for rd_compl from MAC has
    ///< expired
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PCSMBUSCONV_MBUSCONV_WR_ACK_TIMEOUT : 1;
    ///< MBUS: If asserted indicates that the timer for wr_ack from MAC has
    ///< expired
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_mbus_stat_reg_t;

#define PCS_SERDES_LANE_MSG_MBUS_STAT_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_RD_MASK (0x0000003fU)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_WR_MASK (0x00000000U)


///< MBUS: MAC attempted to read from an illegal address
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_RD_ADDR_DET_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_RD_ADDR_DET_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_RD_ADDR_DET_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_RD_ADDR_DET_BF_DEF (0x00000000)

///< MBUS: MAC attempted to write commit to an illegal address
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_C_ADDR_DET_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_C_ADDR_DET_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_C_ADDR_DET_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_C_ADDR_DET_BF_DEF (0x00000000)

///< MBUS: MAC attempted to write uncommit to an illegal address
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_UC_ADDR_DET_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_UC_ADDR_DET_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_UC_ADDR_DET_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_ILLEGAL_WR_UC_ADDR_DET_BF_DEF (0x00000000)

///< MBUS: Internal P2M Sequencing Buffer is Full
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_P2M_BUF_FULL_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_P2M_BUF_FULL_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_P2M_BUF_FULL_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_P2M_BUF_FULL_BF_DEF (0x00000000)

///< MBUS: If asserted indicates that the timer for rd_compl from MAC has
///< expired
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_RD_COMPL_TIMEOUT_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_RD_COMPL_TIMEOUT_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_RD_COMPL_TIMEOUT_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_RD_COMPL_TIMEOUT_BF_DEF (0x00000000)

///< MBUS: If asserted indicates that the timer for wr_ack from MAC has
///< expired
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_WR_ACK_TIMEOUT_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_WR_ACK_TIMEOUT_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_WR_ACK_TIMEOUT_BF_MSK (0x00000020)
#define PCS_SERDES_LANE_MSG_MBUS_STAT_PCSMBUSCONV_MBUSCONV_WR_ACK_TIMEOUT_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_TX_RATE_CFG_0 register description at address offset 0x18
  *
  * Register default value:        0x00111100
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_tx_rate_cfg_0
  * PCS Tx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_TX_RATE_FREQ_PCIE1 : 3;
    ///< PCIE Gen 1 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< PCIE Gen 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_FREQ_PCIE2 : 3;
    ///< PCIE Gen 2 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< PCIE Gen 2
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_FREQ_PCIE3 : 3;
    ///< PCIE Gen 3 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< PCIE Gen 3
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_FREQ_PCIE4 : 3;
    ///< PCIE Gen 4 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< PCIE Gen 4
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_FREQ_PCIE5 : 3;
    ///< PCIE Gen 5 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< PCIE Gen 5
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_FREQ_PCIE6 : 3;
    ///< PCIE Gen 6 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< PCIE Gen 6
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_tx_rate_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_DEFAULT (0x00111100U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_RD_MASK (0x00777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_WR_MASK (0x00777777U)


///< PCIE Gen 1 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< PCIE Gen 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_BF_DEF (0x00000000)

///< PCIE Gen 2 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< PCIE Gen 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_BF_DEF (0x00000000)

///< PCIE Gen 3 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< PCIE Gen 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE3_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE3_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE3_BF_DEF (0x00000100)

///< PCIE Gen 4 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< PCIE Gen 4
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE4_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE4_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE4_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE4_BF_DEF (0x00001000)

///< PCIE Gen 5 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< PCIE Gen 5
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE5_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE5_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE5_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE5_BF_DEF (0x00010000)

///< PCIE Gen 6 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< PCIE Gen 6
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE6_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE6_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE6_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE6_BF_DEF (0x00100000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_TX_RATE_CFG_1 register description at address offset 0x1c
  *
  * Register default value:        0x001123BC
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_tx_rate_cfg_1
  * PCS Tx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_TX_RATE_DIV_PCIE1 : 4;
    ///< PCIE Gen 1 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< PCIE Gen 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC"
    uint32_t PCSIF_PMA_TX_RATE_DIV_PCIE2 : 4;
    ///< PCIE Gen 2 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< PCIE Gen 2
    ///< AccessType="RW" BitOffset="4" ResetValue="0xB"
    uint32_t PCSIF_PMA_TX_RATE_DIV_PCIE3 : 4;
    ///< PCIE Gen 3 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< PCIE Gen 3
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t PCSIF_PMA_TX_RATE_DIV_PCIE4 : 4;
    ///< PCIE Gen 4 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< PCIE Gen 4
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t PCSIF_PMA_TX_RATE_DIV_PCIE5 : 4;
    ///< PCIE Gen 5 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< PCIE Gen 5
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t PCSIF_PMA_TX_RATE_DIV_PCIE6 : 4;
    ///< PCIE Gen 6 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< PCIE Gen 6
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_tx_rate_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_DEFAULT (0x001123bcU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_WR_MASK (0x00ffffffU)


///< PCIE Gen 1 Tx Rate Div - Assign the Tx Rate Div value presents for
///< PCIE Gen 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE1_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE1_BF_DEF (0x0000000C)

///< PCIE Gen 2 Tx Rate Div - Assign the Tx Rate Div value presents for
///< PCIE Gen 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE2_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE2_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE2_BF_DEF (0x000000B0)

///< PCIE Gen 3 Tx Rate Div - Assign the Tx Rate Div value presents for
///< PCIE Gen 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE3_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE3_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE3_BF_DEF (0x00000300)

///< PCIE Gen 4 Tx Rate Div - Assign the Tx Rate Div value presents for
///< PCIE Gen 4
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE4_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE4_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE4_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE4_BF_DEF (0x00002000)

///< PCIE Gen 5 Tx Rate Div - Assign the Tx Rate Div value presents for
///< PCIE Gen 5
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE5_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE5_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE5_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE5_BF_DEF (0x00010000)

///< PCIE Gen 6 Tx Rate Div - Assign the Tx Rate Div value presents for
///< PCIE Gen 6
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE6_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE6_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE6_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_PCSIF_PMA_DIV_PCIE6_BF_DEF (0x00100000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_USB_TX_RATE_CFG register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_usb_tx_rate_cfg
  * PCS Tx USB Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_TX_RATE_FREQ_USB1 : 3;
    ///< USB Gen 1 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< USB Gen 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_FREQ_USB2 : 3;
    ///< USB Gen 2 Tx Rate Freq - Assign the Tx Rate Freq value presents for
    ///< USB Gen 2
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_TX_RATE_DIV_USB1 : 4;
    ///< USB Gen 1 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< USB Gen 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSIF_PMA_TX_RATE_DIV_USB2 : 4;
    ///< USB Gen 2 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< USB Gen 2
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_usb_tx_rate_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_RD_MASK (0x0000ff77U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_WR_MASK (0x0000ff77U)


///< USB Gen 1 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< USB Gen 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB1_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB1_BF_DEF (0x00000000)

///< USB Gen 2 Tx Rate Freq - Assign the Tx Rate Freq value presents for
///< USB Gen 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB2_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB2_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_FREQ_USB2_BF_DEF (0x00000000)

///< USB Gen 1 Tx Rate Div - Assign the Tx Rate Div value presents for
///< USB Gen 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB1_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB1_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB1_BF_DEF (0x00000000)

///< USB Gen 2 Tx Rate Div - Assign the Tx Rate Div value presents for
///< USB Gen 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB2_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB2_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_PCSIF_PMA_DIV_USB2_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_UPI_TX_RATE_CFG register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_upi_tx_rate_cfg
  * PCS Tx UPI Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_TX_RATE_DIV_UPI1 : 4;
    ///< UPI Gen 1 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< UPI Gen 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_PMA_TX_RATE_DIV_UPI2 : 4;
    ///< UPI Gen 2 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< UPI Gen 2
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PCSIF_PMA_TX_RATE_DIV_UPI3 : 4;
    ///< UPI Gen 3 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< UPI Gen 3
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSIF_PMA_TX_RATE_DIV_UPI4 : 4;
    ///< UPI Gen 4 Tx Rate Div - Assign the Tx Rate Div value presents for
    ///< UPI Gen 4
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_upi_tx_rate_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_RD_MASK (0x0000ffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_WR_MASK (0x0000ffffU)


///< UPI Gen 1 Tx Rate Div - Assign the Tx Rate Div value presents for
///< UPI Gen 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI1_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI1_BF_DEF (0x00000000)

///< UPI Gen 2 Tx Rate Div - Assign the Tx Rate Div value presents for
///< UPI Gen 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI2_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI2_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI2_BF_DEF (0x00000000)

///< UPI Gen 3 Tx Rate Div - Assign the Tx Rate Div value presents for
///< UPI Gen 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI3_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI3_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI3_BF_DEF (0x00000000)

///< UPI Gen 4 Tx Rate Div - Assign the Tx Rate Div value presents for
///< UPI Gen 4
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI4_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI4_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI4_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_PCSIF_PMA_DIV_UPI4_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_RX_RATE_CFG_0 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_rx_rate_cfg_0
  * PCS Rx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE1_DATAWIDTH0 : 3;
    ///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 1 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE1_DATAWIDTH1 : 3;
    ///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 1 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE1_DATAWIDTH2 : 3;
    ///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 1 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE1_DATAWIDTH3 : 3;
    ///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 1 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE2_DATAWIDTH0 : 3;
    ///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 2 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE2_DATAWIDTH1 : 3;
    ///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 2 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE2_DATAWIDTH2 : 3;
    ///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 2 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE2_DATAWIDTH3 : 3;
    ///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 2 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_RD_MASK (0x77777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_WR_MASK (0x77777777U)


///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 1 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH0_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH0_BF_DEF (0x00000000)

///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 1 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH1_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH1_BF_DEF (0x00000000)

///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 1 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH2_BF_DEF (0x00000000)

///< PCIE Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 1 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH3_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE1_DATAWIDTH3_BF_DEF (0x00000000)

///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 2 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH0_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH0_BF_DEF (0x00000000)

///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 2 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH1_BF_DEF (0x00000000)

///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 2 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH2_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH2_BF_DEF (0x00000000)

///< PCIE Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 2 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH3_BF_MSK (0x70000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_PCSIF_PMA_FREQ_PCIE2_DATAWIDTH3_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_RX_RATE_CFG_1 register description at address offset 0x2c
  *
  * Register default value:        0x11111111
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_rx_rate_cfg_1
  * PCS Rx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE3_DATAWIDTH0 : 3;
    ///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 3 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE3_DATAWIDTH1 : 3;
    ///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 3 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE3_DATAWIDTH2 : 3;
    ///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 3 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE3_DATAWIDTH3 : 3;
    ///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 3 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE4_DATAWIDTH0 : 3;
    ///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 4 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE4_DATAWIDTH1 : 3;
    ///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 4 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE4_DATAWIDTH2 : 3;
    ///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 4 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE4_DATAWIDTH3 : 3;
    ///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 4 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_DEFAULT (0x11111111U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_RD_MASK (0x77777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_WR_MASK (0x77777777U)


///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 3 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH0_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH0_BF_DEF (0x00000001)

///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 3 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH1_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH1_BF_DEF (0x00000010)

///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 3 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH2_BF_DEF (0x00000100)

///< PCIE Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 3 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH3_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE3_DATAWIDTH3_BF_DEF (0x00001000)

///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 4 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH0_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH0_BF_DEF (0x00010000)

///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 4 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH1_BF_DEF (0x00100000)

///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 4 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH2_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH2_BF_DEF (0x01000000)

///< PCIE Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 4 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH3_BF_MSK (0x70000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_PCSIF_PMA_FREQ_PCIE4_DATAWIDTH3_BF_DEF (0x10000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_RX_RATE_CFG_2 register description at address offset 0x30
  *
  * Register default value:        0x11111111
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_rx_rate_cfg_2
  * PCS Rx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE5_DATAWIDTH0 : 3;
    ///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 5 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE5_DATAWIDTH1 : 3;
    ///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 5 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE5_DATAWIDTH2 : 3;
    ///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 5 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE5_DATAWIDTH3 : 3;
    ///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 5 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE6_DATAWIDTH0 : 3;
    ///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 6 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE6_DATAWIDTH1 : 3;
    ///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 6 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE6_DATAWIDTH2 : 3;
    ///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 6 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_PCIE6_DATAWIDTH3 : 3;
    ///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< PCIE Gen 6 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_DEFAULT (0x11111111U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_RD_MASK (0x77777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_WR_MASK (0x77777777U)


///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 5 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH0_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH0_BF_DEF (0x00000001)

///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 5 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH1_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH1_BF_DEF (0x00000010)

///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 5 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH2_BF_DEF (0x00000100)

///< PCIE Gen 5 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 5 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH3_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE5_DATAWIDTH3_BF_DEF (0x00001000)

///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 6 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH0_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH0_BF_DEF (0x00010000)

///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 6 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH1_BF_DEF (0x00100000)

///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 6 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH2_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH2_BF_DEF (0x01000000)

///< PCIE Gen 6 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< PCIE Gen 6 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH3_BF_MSK (0x70000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_PCSIF_PMA_FREQ_PCIE6_DATAWIDTH3_BF_DEF (0x10000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_RX_RATE_CFG_3 register description at address offset 0x34
  *
  * Register default value:        0x66557766
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_rx_rate_cfg_3
  * PCS Rx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE1_DATAWIDTH0 : 4;
    ///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 1 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE1_DATAWIDTH1 : 4;
    ///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 1 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x6"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE1_DATAWIDTH2 : 4;
    ///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 1 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x7"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE1_DATAWIDTH3 : 4;
    ///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 1 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x7"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE2_DATAWIDTH0 : 4;
    ///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 2 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x5"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE2_DATAWIDTH1 : 4;
    ///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 2 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x5"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE2_DATAWIDTH2 : 4;
    ///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 2 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x6"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE2_DATAWIDTH3 : 4;
    ///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 2 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x6"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_DEFAULT (0x66557766U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_WR_MASK (0xffffffffU)


///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 1 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH0_BF_DEF (0x00000006)

///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 1 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH1_BF_DEF (0x00000060)

///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 1 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH2_BF_DEF (0x00000700)

///< PCIE Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 1 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE1_DATAWIDTH3_BF_DEF (0x00007000)

///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 2 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH0_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH0_BF_DEF (0x00050000)

///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 2 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH1_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH1_BF_DEF (0x00500000)

///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 2 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH2_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH2_BF_DEF (0x06000000)

///< PCIE Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 2 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH3_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_PCIE2_DATAWIDTH3_BF_DEF (0x60000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_RX_RATE_CFG_4 register description at address offset 0x38
  *
  * Register default value:        0x21113222
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_rx_rate_cfg_4
  * PCS Rx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE3_DATAWIDTH0 : 4;
    ///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 3 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE3_DATAWIDTH1 : 4;
    ///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 3 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE3_DATAWIDTH2 : 4;
    ///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 3 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE3_DATAWIDTH3 : 4;
    ///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 3 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x3"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE4_DATAWIDTH0 : 4;
    ///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 4 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE4_DATAWIDTH1 : 4;
    ///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 4 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE4_DATAWIDTH2 : 4;
    ///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 4 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE4_DATAWIDTH3 : 4;
    ///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 4 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x2"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_DEFAULT (0x21113222U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_WR_MASK (0xffffffffU)


///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 3 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH0_BF_DEF (0x00000002)

///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 3 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH1_BF_DEF (0x00000020)

///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 3 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH2_BF_DEF (0x00000200)

///< PCIE Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 3 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE3_DATAWIDTH3_BF_DEF (0x00003000)

///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 4 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH0_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH0_BF_DEF (0x00010000)

///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 4 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH1_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH1_BF_DEF (0x00100000)

///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 4 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH2_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH2_BF_DEF (0x01000000)

///< PCIE Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 4 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH3_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_PCSIF_PMA_MODE_SEL_PCIE4_DATAWIDTH3_BF_DEF (0x20000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_PCIE_RX_RATE_CFG_5 register description at address offset 0x3c
  *
  * Register default value:        0x00001000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_pcie_rx_rate_cfg_5
  * PCS Rx PCIE Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE5_DATAWIDTH0 : 4;
    ///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 5 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE5_DATAWIDTH1 : 4;
    ///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 5 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE5_DATAWIDTH2 : 4;
    ///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 5 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE5_DATAWIDTH3 : 4;
    ///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 5 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE6_DATAWIDTH0 : 4;
    ///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 6 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE6_DATAWIDTH1 : 4;
    ///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 6 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE6_DATAWIDTH2 : 4;
    ///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 6 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_PCIE6_DATAWIDTH3 : 4;
    ///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for PCIE Gen 6 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_DEFAULT (0x00001000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_WR_MASK (0xffffffffU)


///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 5 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH0_BF_DEF (0x00000000)

///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 5 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH1_BF_DEF (0x00000000)

///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 5 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH2_BF_DEF (0x00000000)

///< PCIE Gen 5 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 5 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE5_DATAWIDTH3_BF_DEF (0x00001000)

///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 6 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH0_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH0_BF_DEF (0x00000000)

///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 6 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH1_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH1_BF_DEF (0x00000000)

///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 6 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH2_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH2_BF_DEF (0x00000000)

///< PCIE Gen 6 Rx Mode Select - Assign the Rx Mode Select value presents
///< for PCIE Gen 6 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH3_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_PCSIF_PMA_MODE_SEL_PCIE6_DATAWIDTH3_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_USB_RX_RATE_CFG_0 register description at address offset 0x40
  *
  * Register default value:        0x11110000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_usb_rx_rate_cfg_0
  * PCS Rx USB Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB1_DATAWIDTH0 : 3;
    ///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 1 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB1_DATAWIDTH1 : 3;
    ///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 1 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB1_DATAWIDTH2 : 3;
    ///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 1 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB1_DATAWIDTH3 : 3;
    ///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 1 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB2_DATAWIDTH0 : 3;
    ///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 2 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB2_DATAWIDTH1 : 3;
    ///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 2 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB2_DATAWIDTH2 : 3;
    ///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 2 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_USB2_DATAWIDTH3 : 3;
    ///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< USB Gen 2 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_usb_rx_rate_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_DEFAULT (0x11110000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_RD_MASK (0x77777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_WR_MASK (0x77777777U)


///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 1 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH0_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH0_BF_DEF (0x00000000)

///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 1 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH1_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH1_BF_DEF (0x00000000)

///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 1 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH2_BF_DEF (0x00000000)

///< USB Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 1 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH3_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB1_DATAWIDTH3_BF_DEF (0x00000000)

///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 2 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH0_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH0_BF_DEF (0x00010000)

///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 2 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH1_BF_DEF (0x00100000)

///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 2 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH2_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH2_BF_DEF (0x01000000)

///< USB Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< USB Gen 2 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH3_BF_MSK (0x70000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_PCSIF_PMA_FREQ_USB2_DATAWIDTH3_BF_DEF (0x10000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_USB_RX_RATE_CFG_1 register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_usb_rx_rate_cfg_1
  * PCS Rx USB Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB1_DATAWIDTH0 : 4;
    ///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 1 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB1_DATAWIDTH1 : 4;
    ///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 1 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB1_DATAWIDTH2 : 4;
    ///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 1 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB1_DATAWIDTH3 : 4;
    ///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 1 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB2_DATAWIDTH0 : 4;
    ///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 2 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB2_DATAWIDTH1 : 4;
    ///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 2 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB2_DATAWIDTH2 : 4;
    ///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 2 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_USB2_DATAWIDTH3 : 4;
    ///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for USB Gen 2 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_usb_rx_rate_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_WR_MASK (0xffffffffU)


///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 1 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH0_BF_DEF (0x00000000)

///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 1 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH1_BF_DEF (0x00000000)

///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 1 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH2_BF_DEF (0x00000000)

///< USB Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 1 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB1_DATAWIDTH3_BF_DEF (0x00000000)

///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 2 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH0_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH0_BF_DEF (0x00000000)

///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 2 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH1_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH1_BF_DEF (0x00000000)

///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 2 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH2_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH2_BF_DEF (0x00000000)

///< USB Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for USB Gen 2 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH3_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_PCSIF_PMA_MODE_SEL_USB2_DATAWIDTH3_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_UPI_RX_RATE_CFG_0 register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_upi_rx_rate_cfg_0
  * PCS Rx UPI Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI1_DATAWIDTH0 : 3;
    ///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 1 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI1_DATAWIDTH1 : 3;
    ///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 1 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI1_DATAWIDTH2 : 3;
    ///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 1 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI1_DATAWIDTH3 : 3;
    ///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 1 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI2_DATAWIDTH0 : 3;
    ///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 2 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI2_DATAWIDTH1 : 3;
    ///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 2 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI2_DATAWIDTH2 : 3;
    ///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 2 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI2_DATAWIDTH3 : 3;
    ///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 2 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_RD_MASK (0x77777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_WR_MASK (0x77777777U)


///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 1 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH0_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH0_BF_DEF (0x00000000)

///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 1 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH1_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH1_BF_DEF (0x00000000)

///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 1 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH2_BF_DEF (0x00000000)

///< UPI Gen 1 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 1 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH3_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI1_DATAWIDTH3_BF_DEF (0x00000000)

///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 2 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH0_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH0_BF_DEF (0x00000000)

///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 2 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH1_BF_DEF (0x00000000)

///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 2 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH2_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH2_BF_DEF (0x00000000)

///< UPI Gen 2 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 2 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH3_BF_MSK (0x70000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_PCSIF_PMA_FREQ_UPI2_DATAWIDTH3_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_UPI_RX_RATE_CFG_1 register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_upi_rx_rate_cfg_1
  * PCS Rx UPI Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI3_DATAWIDTH0 : 3;
    ///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 3 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI3_DATAWIDTH1 : 3;
    ///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 3 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI3_DATAWIDTH2 : 3;
    ///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 3 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI3_DATAWIDTH3 : 3;
    ///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 3 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI4_DATAWIDTH0 : 3;
    ///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 4 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI4_DATAWIDTH1 : 3;
    ///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 4 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI4_DATAWIDTH2 : 3;
    ///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 4 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_PMA_RX_RATE_FREQ_UPI4_DATAWIDTH3 : 3;
    ///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
    ///< UPI Gen 4 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_RD_MASK (0x77777777U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_WR_MASK (0x77777777U)


///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 3 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH0_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH0_BF_DEF (0x00000000)

///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 3 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH1_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH1_BF_DEF (0x00000000)

///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 3 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH2_BF_DEF (0x00000000)

///< UPI Gen 3 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 3 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH3_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI3_DATAWIDTH3_BF_DEF (0x00000000)

///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 4 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH0_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH0_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH0_BF_DEF (0x00000000)

///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 4 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH1_BF_DEF (0x00000000)

///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 4 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH2_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH2_BF_DEF (0x00000000)

///< UPI Gen 4 Rx Rate Freq - Assign the Rx Rate Freq value presents for
///< UPI Gen 4 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH3_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH3_BF_MSK (0x70000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_PCSIF_PMA_FREQ_UPI4_DATAWIDTH3_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_UPI_RX_RATE_CFG_2 register description at address offset 0x50
  *
  * Register default value:        0x11110000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_upi_rx_rate_cfg_2
  * PCS Rx UPI Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI1_DATAWIDTH0 : 4;
    ///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 1 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI1_DATAWIDTH1 : 4;
    ///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 1 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI1_DATAWIDTH2 : 4;
    ///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 1 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI1_DATAWIDTH3 : 4;
    ///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 1 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI2_DATAWIDTH0 : 4;
    ///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 2 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI2_DATAWIDTH1 : 4;
    ///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 2 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI2_DATAWIDTH2 : 4;
    ///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 2 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI2_DATAWIDTH3 : 4;
    ///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 2 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x1"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_DEFAULT (0x11110000U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_WR_MASK (0xffffffffU)


///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 1 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH0_BF_DEF (0x00000000)

///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 1 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH1_BF_DEF (0x00000000)

///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 1 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH2_BF_DEF (0x00000000)

///< UPI Gen 1 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 1 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI1_DATAWIDTH3_BF_DEF (0x00000000)

///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 2 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH0_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH0_BF_DEF (0x00010000)

///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 2 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH1_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH1_BF_DEF (0x00100000)

///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 2 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH2_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH2_BF_DEF (0x01000000)

///< UPI Gen 2 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 2 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH3_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_PCSIF_PMA_MODE_SEL_UPI2_DATAWIDTH3_BF_DEF (0x10000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSIF2PMA_UPI_RX_RATE_CFG_3 register description at address offset 0x54
  *
  * Register default value:        0x33332222
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsif2pma_upi_rx_rate_cfg_3
  * PCS Rx UPI Rate configuration
  */

typedef union {
  struct {
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI3_DATAWIDTH0 : 4;
    ///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 3 for datawidth = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI3_DATAWIDTH1 : 4;
    ///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 3 for datawidth = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI3_DATAWIDTH2 : 4;
    ///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 3 for datawidth = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI3_DATAWIDTH3 : 4;
    ///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 3 for datawidth = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x2"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI4_DATAWIDTH0 : 4;
    ///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 4 for datawidth = 0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI4_DATAWIDTH1 : 4;
    ///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 4 for datawidth = 1
    ///< AccessType="RW" BitOffset="20" ResetValue="0x3"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI4_DATAWIDTH2 : 4;
    ///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 4 for datawidth = 2
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t PCSIF_PMA_RX_MODE_SEL_UPI4_DATAWIDTH3 : 4;
    ///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
    ///< for UPI Gen 4 for datawidth = 3
    ///< AccessType="RW" BitOffset="28" ResetValue="0x3"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_DEFAULT (0x33332222U)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_WR_MASK (0xffffffffU)


///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 3 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH0_BF_DEF (0x00000002)

///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 3 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH1_BF_DEF (0x00000020)

///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 3 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH2_BF_DEF (0x00000200)

///< UPI Gen 3 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 3 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI3_DATAWIDTH3_BF_DEF (0x00002000)

///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 4 for datawidth = 0
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH0_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH0_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH0_BF_DEF (0x00030000)

///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 4 for datawidth = 1
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH1_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH1_BF_DEF (0x00300000)

///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 4 for datawidth = 2
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH2_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH2_BF_DEF (0x03000000)

///< UPI Gen 4 Rx Mode Select - Assign the Rx Mode Select value presents
///< for UPI Gen 4 for datawidth = 3
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH3_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH3_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_PCSIF_PMA_MODE_SEL_UPI4_DATAWIDTH3_BF_DEF (0x30000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_0 register description at address offset 0x58
  *
  * Register default value:        0x01122626
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_0
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_0 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x26"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_1 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x26"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_2 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x12"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_3 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_DEFAULT (0x01122626U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 0
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_BF_DEF (0x00000026)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 1
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_1_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_1_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_1_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_1_BF_DEF (0x00002600)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 2
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_2_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_2_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_2_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_2_BF_DEF (0x00120000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 3
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_3_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_3_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_3_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_3_BF_DEF (0x01000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_1 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_1
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_4 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_5 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_6 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_7 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 4
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_4_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_4_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_4_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 5
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_5_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_5_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_5_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_5_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 6
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_6_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_6_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_6_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_6_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 7
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_7_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_7_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_7_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_7_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_2 register description at address offset 0x60
  *
  * Register default value:        0x04192D2D
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_2
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_8 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_9 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 9
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_10 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 10
    ///< AccessType="RW" BitOffset="16" ResetValue="0x19"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_11 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_DEFAULT (0x04192d2dU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 8
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_8_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_8_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_8_BF_DEF (0x0000002D)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 9
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_9_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_9_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_9_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_9_BF_DEF (0x00002D00)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 10
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_10_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_10_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_10_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_10_BF_DEF (0x00190000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 11
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_11_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_11_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_11_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_11_BF_DEF (0x04000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_3 register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_3
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_12 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_13 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 13
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_14 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 14
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_15 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
    ///< at 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 12
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_12_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_12_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_12_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_12_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 13
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_13_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_13_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_13_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_13_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 14
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_14_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_14_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_14_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_14_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Full Swing when TxMargin
///< at 15
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_15_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_15_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_15_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_15_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_4 register description at address offset 0x68
  *
  * Register default value:        0x00000D0D
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_4
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_0_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_1_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_2_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_3_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_DEFAULT (0x00000d0dU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 0
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_0_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_0_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_0_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_0_HALF_BF_DEF (0x0000000D)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 1
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_1_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_1_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_1_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_1_HALF_BF_DEF (0x00000D00)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 2
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_2_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_2_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_2_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_2_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 3
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_3_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_3_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_3_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_3_HALF_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_5 register description at address offset 0x6c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_5
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_4_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_5_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_6_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_7_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 4
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_4_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_4_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_4_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_4_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 5
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 6
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_6_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_6_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_6_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_6_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 7
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_7_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_7_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_7_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_7_HALF_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_6 register description at address offset 0x70
  *
  * Register default value:        0x0D0D0000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_6
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_8_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_9_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 9
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_10_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 10
    ///< AccessType="RW" BitOffset="16" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_11_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_6_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_DEFAULT (0x0d0d0000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 8
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_8_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_8_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_8_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_8_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 9
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_9_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_9_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_9_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_9_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 10
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_10_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_10_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_10_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_10_HALF_BF_DEF (0x000D0000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 11
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_11_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_11_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_11_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_11_HALF_BF_DEF (0x0D000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN1_CFG_7 register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen1_cfg_7
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_12_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_13_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 13
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_14_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 14
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN1_15_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
    ///< at 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_7_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 12
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_12_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_12_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_12_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_12_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 13
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_13_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_13_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_13_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_13_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 14
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_14_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_14_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_14_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_14_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 1 Half Swing when TxMargin
///< at 15
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_15_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_15_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_15_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_15_HALF_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0 register description at address offset 0x78
  *
  * Register default value:        0x0D141919
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen1_cfg_0
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_0 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x19"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_1 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x19"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_2 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x14"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_3 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_DEFAULT (0x0d141919U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 0
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_BF_DEF (0x00000019)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 1
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_1_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_1_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_1_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_1_BF_DEF (0x00001900)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 2
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_2_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_2_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_2_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_2_BF_DEF (0x00140000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 3
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_3_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_3_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_3_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_3_BF_DEF (0x0D000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1 register description at address offset 0x7c
  *
  * Register default value:        0x07070707
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen1_cfg_1
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_4 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_5 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_6 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_7 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_DEFAULT (0x07070707U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 4
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_4_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_4_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_4_BF_DEF (0x00000007)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 5
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_5_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_5_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_5_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_5_BF_DEF (0x00000700)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 6
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_6_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_6_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_6_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_6_BF_DEF (0x00070000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 7
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_7_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_7_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_7_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_7_BF_DEF (0x07000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2 register description at address offset 0x80
  *
  * Register default value:        0x090D1212
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen1_cfg_2
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_8 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x12"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_9 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 9
    ///< AccessType="RW" BitOffset="8" ResetValue="0x12"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_10 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 10
    ///< AccessType="RW" BitOffset="16" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_11 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0x9"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_DEFAULT (0x090d1212U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 8
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_8_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_8_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_8_BF_DEF (0x00000012)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 9
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_9_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_9_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_9_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_9_BF_DEF (0x00001200)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 10
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_10_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_10_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_10_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_10_BF_DEF (0x000D0000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 11
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_11_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_11_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_11_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_11_BF_DEF (0x09000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3 register description at address offset 0x84
  *
  * Register default value:        0x05050505
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen1_cfg_3
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_12 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_13 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 13
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_14 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 14
    ///< AccessType="RW" BitOffset="16" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN1_15 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_DEFAULT (0x05050505U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 12
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_12_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_12_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_12_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_12_BF_DEF (0x00000005)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 13
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_13_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_13_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_13_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_13_BF_DEF (0x00000500)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 14
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_14_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_14_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_14_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_14_BF_DEF (0x00050000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 1 when TxMargin at 15
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_15_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_15_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_15_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_15_BF_DEF (0x05000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_0 register description at address offset 0x88
  *
  * Register default value:        0x01122626
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_0
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_0 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x26"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_1 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x26"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_2 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x12"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_3 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0x1"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_DEFAULT (0x01122626U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 0
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_BF_DEF (0x00000026)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 1
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_1_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_1_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_1_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_1_BF_DEF (0x00002600)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 2
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_2_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_2_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_2_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_2_BF_DEF (0x00120000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 3
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_3_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_3_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_3_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_3_BF_DEF (0x01000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_1 register description at address offset 0x8c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_1
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_4 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_5 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_6 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_7 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 4
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_4_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_4_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_4_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 5
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_5_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_5_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_5_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_5_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 6
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_6_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_6_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_6_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_6_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 7
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_7_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_7_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_7_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_7_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_2 register description at address offset 0x90
  *
  * Register default value:        0x04192D2D
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_2
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_8 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_9 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 9
    ///< AccessType="RW" BitOffset="8" ResetValue="0x2D"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_10 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 10
    ///< AccessType="RW" BitOffset="16" ResetValue="0x19"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_11 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0x4"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_DEFAULT (0x04192d2dU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 8
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_8_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_8_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_8_BF_DEF (0x0000002D)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 9
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_9_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_9_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_9_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_9_BF_DEF (0x00002D00)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 10
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_10_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_10_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_10_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_10_BF_DEF (0x00190000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 11
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_11_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_11_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_11_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_11_BF_DEF (0x04000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_3 register description at address offset 0x94
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_3
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_12 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_13 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 13
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_14 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 14
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_15 : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
    ///< at 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 12
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_12_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_12_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_12_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_12_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 13
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_13_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_13_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_13_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_13_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 14
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_14_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_14_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_14_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_14_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Full Swing when TxMargin
///< at 15
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_15_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_15_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_15_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_15_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_4 register description at address offset 0x98
  *
  * Register default value:        0x00000D0D
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_4
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_0_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_1_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_2_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_3_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_DEFAULT (0x00000d0dU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 0
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_0_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_0_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_0_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_0_HALF_BF_DEF (0x0000000D)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 1
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_1_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_1_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_1_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_1_HALF_BF_DEF (0x00000D00)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 2
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_2_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_2_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_2_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_2_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 3
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_3_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_3_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_3_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_3_HALF_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_5 register description at address offset 0x9c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_5
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_4_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_5_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_6_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_7_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 4
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_4_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_4_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_4_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_4_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 5
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 6
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_6_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_6_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_6_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_6_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 7
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_7_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_7_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_7_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_7_HALF_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_6 register description at address offset 0xa0
  *
  * Register default value:        0x0D0D0000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_6
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_8_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_9_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 9
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_10_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 10
    ///< AccessType="RW" BitOffset="16" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_11_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_6_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_DEFAULT (0x0d0d0000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 8
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_8_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_8_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_8_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_8_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 9
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_9_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_9_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_9_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_9_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 10
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_10_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_10_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_10_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_10_HALF_BF_DEF (0x000D0000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 11
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_11_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_11_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_11_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_11_HALF_BF_DEF (0x0D000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_C0_GEN2_CFG_7 register description at address offset 0xa4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_c0_gen2_cfg_7
  * PCS Tx Driver - Txffe Coefficient - C0 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_12_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_13_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 13
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_14_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 14
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_C0_GEN2_15_HALF : 6;
    ///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
    ///< at 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_7_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 12
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_12_HALF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_12_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_12_HALF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_12_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 13
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_13_HALF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_13_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_13_HALF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_13_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 14
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_14_HALF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_14_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_14_HALF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_14_HALF_BF_DEF (0x00000000)

///< Tx Driver TxFFE Coefficient C0 For PCIE Gen 2 Half Swing when TxMargin
///< at 15
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_15_HALF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_15_HALF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_15_HALF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_15_HALF_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0 register description at address offset 0xa8
  *
  * Register default value:        0x0D141919
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen2_cfg_0
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_0 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x19"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_1 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 1
    ///< AccessType="RW" BitOffset="8" ResetValue="0x19"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_2 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 2
    ///< AccessType="RW" BitOffset="16" ResetValue="0x14"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_3 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 3
    ///< AccessType="RW" BitOffset="24" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_DEFAULT (0x0d141919U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 0
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_BF_DEF (0x00000019)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 1
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_1_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_1_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_1_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_1_BF_DEF (0x00001900)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 2
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_2_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_2_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_2_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_2_BF_DEF (0x00140000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 3
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_3_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_3_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_3_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_3_BF_DEF (0x0D000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1 register description at address offset 0xac
  *
  * Register default value:        0x07070707
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen2_cfg_1
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_4 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_5 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 5
    ///< AccessType="RW" BitOffset="8" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_6 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_7 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 7
    ///< AccessType="RW" BitOffset="24" ResetValue="0x7"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_DEFAULT (0x07070707U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 4
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_4_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_4_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_4_BF_DEF (0x00000007)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 5
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_5_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_5_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_5_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_5_BF_DEF (0x00000700)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 6
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_6_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_6_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_6_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_6_BF_DEF (0x00070000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 7
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_7_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_7_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_7_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_7_BF_DEF (0x07000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2 register description at address offset 0xb0
  *
  * Register default value:        0x090D1212
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen2_cfg_2
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_8 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x12"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_9 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 9
    ///< AccessType="RW" BitOffset="8" ResetValue="0x12"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_10 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 10
    ///< AccessType="RW" BitOffset="16" ResetValue="0xD"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_11 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 11
    ///< AccessType="RW" BitOffset="24" ResetValue="0x9"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_DEFAULT (0x090d1212U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 8
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_8_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_8_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_8_BF_DEF (0x00000012)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 9
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_9_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_9_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_9_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_9_BF_DEF (0x00001200)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 10
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_10_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_10_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_10_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_10_BF_DEF (0x000D0000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 11
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_11_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_11_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_11_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_11_BF_DEF (0x09000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3 register description at address offset 0xb4
  *
  * Register default value:        0x05050505
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstxdrv_txffe_cp1_gen2_cfg_3
  * PCS Tx Driver - Txffe Coefficient - CP1 Gen 1
  */

typedef union {
  struct {
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_12 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 12
    ///< AccessType="RW" BitOffset="0" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_13 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 13
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_14 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 14
    ///< AccessType="RW" BitOffset="16" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTXDRV_TXFFE_CP1_GEN2_15 : 6;
    ///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 15
    ///< AccessType="RW" BitOffset="24" ResetValue="0x5"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_DEFAULT (0x05050505U)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_WR_MASK (0x3f3f3f3fU)


///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 12
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_12_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_12_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_12_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_12_BF_DEF (0x00000005)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 13
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_13_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_13_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_13_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_13_BF_DEF (0x00000500)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 14
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_14_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_14_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_14_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_14_BF_DEF (0x00050000)

///< Tx Driver TxFFE Coefficient CP1 For PCIE Gen 2 when TxMargin at 15
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_15_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_15_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_15_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_15_BF_DEF (0x05000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET0 register description at address offset 0xb8
  *
  * Register default value:        0x00019980
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset0
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET0 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x19980"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_DEFAULT (0x00019980U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset0
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_BF_DEF (0x00019980)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET1 register description at address offset 0xbc
  *
  * Register default value:        0x00010BC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset1
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET1 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10BC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_DEFAULT (0x00010bc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset1
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_BF_DEF (0x00010BC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET2 register description at address offset 0xc0
  *
  * Register default value:        0x00014AC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset2
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET2 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x14AC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_DEFAULT (0x00014ac0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset2
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_BF_DEF (0x00014AC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET3 register description at address offset 0xc4
  *
  * Register default value:        0x0000DC80
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset3
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET3 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset3
    ///< AccessType="RW" BitOffset="0" ResetValue="0xDC80"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_DEFAULT (0x0000dc80U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset3
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_BF_DEF (0x0000DC80)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET4 register description at address offset 0xc8
  *
  * Register default value:        0x00000FC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset4
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET4 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset4
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_DEFAULT (0x00000fc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset4
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_BF_DEF (0x00000FC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET5 register description at address offset 0xcc
  *
  * Register default value:        0x00000D4A
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset5
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET5 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset5
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD4A"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_DEFAULT (0x00000d4aU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset5
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_BF_DEF (0x00000D4A)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET6 register description at address offset 0xd0
  *
  * Register default value:        0x00000D0C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset6
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET6 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset6
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD0C"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst6_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_DEFAULT (0x00000d0cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset6
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_BF_DEF (0x00000D0C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET7 register description at address offset 0xd4
  *
  * Register default value:        0x0001484A
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset7
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET7 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1484A"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst7_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_DEFAULT (0x0001484aU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset7
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_BF_DEF (0x0001484A)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET8 register description at address offset 0xd8
  *
  * Register default value:        0x0000D98C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset8
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET8 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset8
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD98C"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst8_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_DEFAULT (0x0000d98cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset8
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_BF_DEF (0x0000D98C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET9 register description at address offset 0xdc
  *
  * Register default value:        0x00000BD0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset9
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET9 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset9
    ///< AccessType="RW" BitOffset="0" ResetValue="0xBD0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst9_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_DEFAULT (0x00000bd0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset9
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_BF_DEF (0x00000BD0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN3_PRESET10 register description at address offset 0xe0
  *
  * Register default value:        0x00022740
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen3_preset10
  * PCS PCIE Gen 3 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_PRESET10 : 18;
    ///< PCIe G3 Local Transmitter Coefficient: Preset10
    ///< AccessType="RW" BitOffset="0" ResetValue="0x22740"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen3_prst10_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_DEFAULT (0x00022740U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_WR_MASK (0x0003ffffU)


///< PCIe G3 Local Transmitter Coefficient: Preset10
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_BF_DEF (0x00022740)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET0 register description at address offset 0xe4
  *
  * Register default value:        0x00019980
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset0
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET0 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x19980"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_DEFAULT (0x00019980U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset0
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_BF_DEF (0x00019980)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET1 register description at address offset 0xe8
  *
  * Register default value:        0x00010BC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset1
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET1 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10BC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_DEFAULT (0x00010bc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset1
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_BF_DEF (0x00010BC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET2 register description at address offset 0xec
  *
  * Register default value:        0x00014AC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset2
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET2 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x14AC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_DEFAULT (0x00014ac0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset2
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_BF_DEF (0x00014AC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET3 register description at address offset 0xf0
  *
  * Register default value:        0x0000DC80
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset3
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET3 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset3
    ///< AccessType="RW" BitOffset="0" ResetValue="0xDC80"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_DEFAULT (0x0000dc80U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset3
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_BF_DEF (0x0000DC80)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET4 register description at address offset 0xf4
  *
  * Register default value:        0x00000FC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset4
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET4 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset4
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_DEFAULT (0x00000fc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset4
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_BF_DEF (0x00000FC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET5 register description at address offset 0xf8
  *
  * Register default value:        0x00000D4A
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset5
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET5 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset5
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD4A"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_DEFAULT (0x00000d4aU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset5
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_BF_DEF (0x00000D4A)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET6 register description at address offset 0xfc
  *
  * Register default value:        0x00000D0C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset6
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET6 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset6
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD0C"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst6_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_DEFAULT (0x00000d0cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset6
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_BF_DEF (0x00000D0C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET7 register description at address offset 0x100
  *
  * Register default value:        0x0001484A
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset7
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET7 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1484A"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst7_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_DEFAULT (0x0001484aU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset7
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_BF_DEF (0x0001484A)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET8 register description at address offset 0x104
  *
  * Register default value:        0x0000D98C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset8
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET8 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset8
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD98C"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst8_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_DEFAULT (0x0000d98cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset8
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_BF_DEF (0x0000D98C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET9 register description at address offset 0x108
  *
  * Register default value:        0x00000BD0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset9
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET9 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset9
    ///< AccessType="RW" BitOffset="0" ResetValue="0xBD0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst9_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_DEFAULT (0x00000bd0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset9
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_BF_DEF (0x00000BD0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN4_PRESET10 register description at address offset 0x10c
  *
  * Register default value:        0x00022740
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen4_preset10
  * PCS PCIE Gen 4 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN4_PRESET10 : 18;
    ///< PCIe G4 Local Transmitter Coefficient: Preset10
    ///< AccessType="RW" BitOffset="0" ResetValue="0x22740"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen4_prst10_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_DEFAULT (0x00022740U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_WR_MASK (0x0003ffffU)


///< PCIe G4 Local Transmitter Coefficient: Preset10
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_BF_DEF (0x00022740)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET0 register description at address offset 0x110
  *
  * Register default value:        0x00019980
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset0
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET0 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x19980"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_DEFAULT (0x00019980U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset0
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_BF_DEF (0x00019980)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET1 register description at address offset 0x114
  *
  * Register default value:        0x00010BC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset1
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET1 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x10BC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_DEFAULT (0x00010bc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset1
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_BF_DEF (0x00010BC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET2 register description at address offset 0x118
  *
  * Register default value:        0x00014AC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset2
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET2 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x14AC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_DEFAULT (0x00014ac0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset2
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_BF_DEF (0x00014AC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET3 register description at address offset 0x11c
  *
  * Register default value:        0x0000DC80
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset3
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET3 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset3
    ///< AccessType="RW" BitOffset="0" ResetValue="0xDC80"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_DEFAULT (0x0000dc80U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset3
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_BF_DEF (0x0000DC80)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET4 register description at address offset 0x120
  *
  * Register default value:        0x00000FC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset4
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET4 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset4
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFC0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_DEFAULT (0x00000fc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset4
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_BF_DEF (0x00000FC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET5 register description at address offset 0x124
  *
  * Register default value:        0x00000D4A
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset5
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET5 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset5
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD4A"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_DEFAULT (0x00000d4aU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset5
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_BF_DEF (0x00000D4A)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET6 register description at address offset 0x128
  *
  * Register default value:        0x00000D0C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset6
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET6 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset6
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD0C"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst6_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_DEFAULT (0x00000d0cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset6
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_BF_DEF (0x00000D0C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET7 register description at address offset 0x12c
  *
  * Register default value:        0x0001484A
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset7
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET7 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1484A"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst7_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_DEFAULT (0x0001484aU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset7
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_BF_DEF (0x0001484A)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET8 register description at address offset 0x130
  *
  * Register default value:        0x0000D98C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset8
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET8 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset8
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD98C"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst8_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_DEFAULT (0x0000d98cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset8
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_BF_DEF (0x0000D98C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET9 register description at address offset 0x134
  *
  * Register default value:        0x00000BD0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset9
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET9 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset9
    ///< AccessType="RW" BitOffset="0" ResetValue="0xBD0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst9_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_DEFAULT (0x00000bd0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset9
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_BF_DEF (0x00000BD0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN5_PRESET10 register description at address offset 0x138
  *
  * Register default value:        0x00022740
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen5_preset10
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN5_PRESET10 : 18;
    ///< PCIe G5 Local Transmitter Coefficient: Preset10
    ///< AccessType="RW" BitOffset="0" ResetValue="0x22740"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen5_prst10_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_DEFAULT (0x00022740U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_WR_MASK (0x0003ffffU)


///< PCIe G5 Local Transmitter Coefficient: Preset10
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_BF_WID (18)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_BF_MSK (0x0003FFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_BF_DEF (0x00022740)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET0 register description at address offset 0x13c
  *
  * Register default value:        0x00000FC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset0
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET0 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset0
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFC0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst0_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_DEFAULT (0x00000fc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset0
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_BF_DEF (0x00000FC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET1 register description at address offset 0x140
  *
  * Register default value:        0x00000D89
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset1
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET1 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset1
    ///< AccessType="RW" BitOffset="0" ResetValue="0xD89"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst1_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_DEFAULT (0x00000d89U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset1
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_BF_DEF (0x00000D89)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET2 register description at address offset 0x144
  *
  * Register default value:        0x00000B52
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset2
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET2 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset2
    ///< AccessType="RW" BitOffset="0" ResetValue="0xB52"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst2_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_DEFAULT (0x00000b52U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset2
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_BF_DEF (0x00000B52)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET3 register description at address offset 0x148
  *
  * Register default value:        0x00009D80
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset3
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET3 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset3
    ///< AccessType="RW" BitOffset="0" ResetValue="0x9D80"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst3_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_DEFAULT (0x00009d80U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset3
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_BF_DEF (0x00009D80)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET4 register description at address offset 0x14c
  *
  * Register default value:        0x00012B40
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset4
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET4 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset4
    ///< AccessType="RW" BitOffset="0" ResetValue="0x12B40"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst4_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_DEFAULT (0x00012b40U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset4
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_BF_DEF (0x00012B40)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET5 register description at address offset 0x150
  *
  * Register default value:        0x00000955
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset5
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET5 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset5
    ///< AccessType="RW" BitOffset="0" ResetValue="0x955"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst5_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_DEFAULT (0x00000955U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset5
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_BF_DEF (0x00000955)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET6 register description at address offset 0x154
  *
  * Register default value:        0x0000C84C
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset6
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET6 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset6
    ///< AccessType="RW" BitOffset="0" ResetValue="0xC84C"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst6_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_DEFAULT (0x0000c84cU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset6
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_BF_DEF (0x0000C84C)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET7 register description at address offset 0x158
  *
  * Register default value:        0x000008D3
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset7
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET7 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x8D3"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst7_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_DEFAULT (0x000008d3U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset7
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_BF_DEF (0x000008D3)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET8 register description at address offset 0x15c
  *
  * Register default value:        0x00000817
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset8
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET8 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset8
    ///< AccessType="RW" BitOffset="0" ResetValue="0x817"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst8_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_DEFAULT (0x00000817U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset8
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_BF_DEF (0x00000817)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET9 register description at address offset 0x160
  *
  * Register default value:        0x00006715
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset9
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET9 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset9
    ///< AccessType="RW" BitOffset="0" ResetValue="0x6715"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst9_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_DEFAULT (0x00006715U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset9
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_BF_DEF (0x00006715)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_GEN6_PRESET10 register description at address offset 0x164
  *
  * Register default value:        0x00000FC0
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_gen6_preset10
  * PCS PCIE Gen 5 Preset Coefficient
  */

typedef union {
  struct {
    uint32_t PCSTX_GEN6_PRESET10 : 24;
    ///< PCIe G6 Local Transmitter Coefficient: Preset10
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFC0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_gen6_prst10_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_DEFAULT (0x00000fc0U)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_RD_MASK (0x00ffffffU)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_WR_MASK (0x00ffffffU)


///< PCIe G6 Local Transmitter Coefficient: Preset10
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_BF_WID (24)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_BF_MSK (0x00FFFFFF)
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_BF_DEF (0x00000FC0)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSLFPS_CTRL register description at address offset 0x168
  *
  * Register default value:        0x00000033
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcslfps_ctrl
  * PCIE LFPS control
  */

typedef union {
  struct {
    uint32_t PCSLFPS_CTRL_P0 : 2;
    ///< Selects what control to use for LFPS detection in USB P0: 0 - Signal
    ///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
    ///< from PMA
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t PCSLFPS_CTRL_P1 : 2;
    ///< Selects what control to use for LFPS detection in USB P1: 0 - Signal
    ///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
    ///< from PMA
    ///< AccessType="RW" BitOffset="4" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSLFPS_CTRL_P2 : 2;
    ///< Selects what control to use for LFPS detection in USB P2: 0 - Signal
    ///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
    ///< from PMA
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t PCSLFPS_CTRL_P3 : 2;
    ///< Selects what control to use for LFPS detection in USB P3: 0 - Signal
    ///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
    ///< from PMA
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcslfps_ctrl_reg_t;

#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_DEFAULT (0x00000033U)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_RD_MASK (0x00003333U)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_WR_MASK (0x00003333U)


///< Selects what control to use for LFPS detection in USB P0: 0 - Signal
///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
///< from PMA
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P0_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P0_BF_MSK (0x00000003)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P0_BF_DEF (0x00000003)

///< Selects what control to use for LFPS detection in USB P1: 0 - Signal
///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
///< from PMA
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P1_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P1_BF_MSK (0x00000030)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P1_BF_DEF (0x00000030)

///< Selects what control to use for LFPS detection in USB P2: 0 - Signal
///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
///< from PMA
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P2_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P2_BF_MSK (0x00000300)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P2_BF_DEF (0x00000000)

///< Selects what control to use for LFPS detection in USB P3: 0 - Signal
///< Detect from PMA 1 - Internal LFPS Detector 2/3 - Transition Detector
///< from PMA
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P3_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P3_BF_MSK (0x00003000)
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_P3_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_LOCAL_FSLF_GEN34 register description at address offset 0x16c
  *
  * Register default value:        0x033F033F
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_local_fslf_gen34
  * PCIE Tx Local FS/LF Gen3/4 configuration
  */

typedef union {
  struct {
    uint32_t PCSTX_LOCALFS : 6;
    ///< PCIe G3 FS value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTX_LOCALLF : 6;
    ///< PCIe G3 LF value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTX_LOCALG4FS : 6;
    ///< PCIe G4 FS value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTX_LOCALG4LF : 6;
    ///< PCIe G4 LF value
    ///< AccessType="RW" BitOffset="24" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_local_fslf_gen34_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_DEFAULT (0x033f033fU)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_WR_MASK (0x3f3f3f3fU)


///< PCIe G3 FS value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALFS_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALFS_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALFS_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALFS_BF_DEF (0x0000003F)

///< PCIe G3 LF value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALLF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALLF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALLF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALLF_BF_DEF (0x00000300)

///< PCIe G4 FS value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4FS_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4FS_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4FS_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4FS_BF_DEF (0x003F0000)

///< PCIe G4 LF value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4LF_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4LF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4LF_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_LOCALG4LF_BF_DEF (0x03000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSTX_LOCAL_FSLF_GEN56 register description at address offset 0x170
  *
  * Register default value:        0x0E3F033F
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcstx_local_fslf_gen56
  * PCIE Tx Local FS/LF Gen5/6 configuration
  */

typedef union {
  struct {
    uint32_t PCSTX_LOCALG5FS : 6;
    ///< PCIe G5 FS value
    ///< AccessType="RW" BitOffset="0" ResetValue="0x3F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t PCSTX_LOCALG5LF : 6;
    ///< PCIe G5 LF value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x3"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSTX_LOCALG6LF : 6;
    ///< PCIe G6 FS value
    ///< AccessType="RW" BitOffset="16" ResetValue="0x3F"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSTX_LOCALG6FS : 6;
    ///< PCIe G6 LF value
    ///< AccessType="RW" BitOffset="24" ResetValue="0xE"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcstx_local_fslf_gen56_reg_t;

#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_DEFAULT (0x0e3f033fU)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_RD_MASK (0x3f3f3f3fU)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_WR_MASK (0x3f3f3f3fU)


///< PCIe G5 FS value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5FS_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5FS_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5FS_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5FS_BF_DEF (0x0000003F)

///< PCIe G5 LF value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5LF_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5LF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5LF_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG5LF_BF_DEF (0x00000300)

///< PCIe G6 FS value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6LF_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6LF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6LF_BF_MSK (0x003F0000)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6LF_BF_DEF (0x003F0000)

///< PCIe G6 LF value
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6FS_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6FS_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6FS_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_LOCALG6FS_BF_DEF (0x0E000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSPIPE_STATUS_CLEAR register description at address offset 0x174
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcspipe_status_clear
  * PCS Status self-clear control
  */

typedef union {
  struct {
    uint32_t PCSPIPE_INVALIDREQUEST : 1;
    ///< Engineering Only
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t PCSFSM_PMA_RXEQ_BEST_EYE_ERR : 1;
    ///< Engineering Only
    ///< AccessType="RO/C/V" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcspipe_stat_clr_reg_t;

#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_RD_MASK (0x00000003U)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_WR_MASK (0x00000000U)


///< Engineering Only
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_INVALIDREQUEST_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_INVALIDREQUEST_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_INVALIDREQUEST_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_INVALIDREQUEST_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_PCSFSM_PMA_RXEQ_BEST_EYE_ERR_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_PCSFSM_PMA_RXEQ_BEST_EYE_ERR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_PCSFSM_PMA_RXEQ_BEST_EYE_ERR_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_PCSFSM_PMA_RXEQ_BEST_EYE_ERR_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_OVERRIDE_UPDATE_CTRL register description at address offset 0x178
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_override_update_ctrl
  * PCS override update
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_CHNG : 1;
    ///< Write '0' follows with '1' to make all value in ovr*_ena and its value
    ///< ovr* to become active
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ovrd_update_ctrl_reg_t;

#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_RD_MASK (0x00000001U)
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_WR_MASK (0x00000001U)


///< Write '0' follows with '1' to make all value in ovr*_ena and its value
///< ovr* to become active
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_PCSIF_OVR_CHNG_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_PCSIF_OVR_CHNG_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_PCSIF_OVR_CHNG_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_PCSIF_OVR_CHNG_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_OVERRIDE_ENABLE_0 register description at address offset 0x17c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_override_enable_0
  * PCS override enable
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_GETLOCALPRESETCOEFFICIENTS_ENA : 1;
    ///< Override Enable for getlocalpresetcoefficients
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_OVR_LOCALPRESETINDEX_ENA : 1;
    ///< Override Enable for localpresetindex
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PCSIF_OVR_LOWPIN_ENA : 1;
    ///< Override Enable for lowpin
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PCSIF_OVR_M2P_BUS_ENA : 1;
    ///< Override Enable for m2p_bus
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PCSIF_OVR_PCLK_AS_INPUT_ENA : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PCSIF_OVR_PCLK_RATE_ENA : 1;
    ///< Override Enable for pclk_rate
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t PCSIF_OVR_PCLKCHANGEACK_ENA : 1;
    ///< Override Enable for pclkchangeack
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t PCSIF_OVR_PHY_MODE_ENA : 1;
    ///< Override Enable for phy_mode
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t PCSIF_OVR_POWERDOWN_ENA : 1;
    ///< Override Enable for powerdown
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSIF_OVR_INVALIDREQUEST_ENA : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXEQINPROGRESS_ENA : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXEQTRAINING_ENA : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXDEEMPH_CMINUS2_ENA : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t PCSIF_OVR_RATE_ENA : 1;
    ///< Override Enable for rate
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t PCSIF_OVR_RST_ENA : 1;
    ///< Override Enable for rst
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXELECIDLE_DISABLE_ENA : 1;
    ///< Override Enable for rxelecidle_disable
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXEQEVAL_ENA : 1;
    ///< Override Enable for rxeqeval
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXPRESETHINT_ENA : 1;
    ///< Override Enable for rxpresethint
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXSTANDBY_ENA : 1;
    ///< Override Enable for rxstandby
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXTERMINATION_ENA : 1;
    ///< Override Enable for rxtermination
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t PCSIF_OVR_SRISENABLE_ENA : 1;
    ///< Override Enable for srisenable
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXCMNMODE_DISABLE_ENA : 1;
    ///< Override Enable for txcmnmode_disable
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXDTCTRX_LB_ENA : 1;
    ///< Override Enable for txdtctrx_lb
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXELECIDLE_ENA : 1;
    ///< Override Enable for txelecidle
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXMARGIN_ENA : 1;
    ///< Override Enable for txmargin
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXDEEMPH_ENA : 1;
    ///< Override Enable for txdeemph
    ///< AccessType="RW" BitOffset="25" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXONESZEROS_ENA : 1;
    ///< Override Enable for txoneszeros
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXSWING_ENA : 1;
    ///< Override Enable for txswing
    ///< AccessType="RW" BitOffset="27" ResetValue="0x0"
    uint32_t PCSIF_OVR_WIDTH_ENA : 1;
    ///< Override Enable for width
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ovrd_en_0_reg_t;

#define PCS_SERDES_LANE_MSG_OVRD_EN_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_RD_MASK (0x1fffffffU)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_WR_MASK (0x1fffffffU)


///< Override Enable for getlocalpresetcoefficients
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_ENA_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_ENA_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_ENA_BF_DEF (0x00000000)

///< Override Enable for localpresetindex
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOCALPRSTINDEX_ENA_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOCALPRSTINDEX_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOCALPRSTINDEX_ENA_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOCALPRSTINDEX_ENA_BF_DEF (0x00000000)

///< Override Enable for lowpin
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOWPIN_ENA_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOWPIN_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOWPIN_ENA_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_LOWPIN_ENA_BF_DEF (0x00000000)

///< Override Enable for m2p_bus
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_M2P_BUS_ENA_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_M2P_BUS_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_M2P_BUS_ENA_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_M2P_BUS_ENA_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_AS_INPUT_ENA_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_AS_INPUT_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_AS_INPUT_ENA_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_AS_INPUT_ENA_BF_DEF (0x00000000)

///< Override Enable for pclk_rate
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_RATE_ENA_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_RATE_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_RATE_ENA_BF_MSK (0x00000020)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLK_RATE_ENA_BF_DEF (0x00000000)

///< Override Enable for pclkchangeack
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLKCHANGEACK_ENA_BF_OFF ( 6)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLKCHANGEACK_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLKCHANGEACK_ENA_BF_MSK (0x00000040)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PCLKCHANGEACK_ENA_BF_DEF (0x00000000)

///< Override Enable for phy_mode
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PHY_MODE_ENA_BF_OFF ( 7)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PHY_MODE_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PHY_MODE_ENA_BF_MSK (0x00000080)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PHY_MODE_ENA_BF_DEF (0x00000000)

///< Override Enable for powerdown
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PWRDOWN_ENA_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PWRDOWN_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PWRDOWN_ENA_BF_MSK (0x00000100)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_PWRDOWN_ENA_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_INVALIDREQUEST_ENA_BF_OFF ( 9)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_INVALIDREQUEST_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_INVALIDREQUEST_ENA_BF_MSK (0x00000200)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_INVALIDREQUEST_ENA_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQINPROGRESS_ENA_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQINPROGRESS_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQINPROGRESS_ENA_BF_MSK (0x00000400)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQINPROGRESS_ENA_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQTRAINING_ENA_BF_OFF (11)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQTRAINING_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQTRAINING_ENA_BF_MSK (0x00000800)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQTRAINING_ENA_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_CMINUS2_ENA_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_CMINUS2_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_CMINUS2_ENA_BF_MSK (0x00001000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_CMINUS2_ENA_BF_DEF (0x00000000)

///< Override Enable for rate
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RATE_ENA_BF_OFF (13)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RATE_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RATE_ENA_BF_MSK (0x00002000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RATE_ENA_BF_DEF (0x00000000)

///< Override Enable for rst
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RST_ENA_BF_OFF (14)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RST_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RST_ENA_BF_MSK (0x00004000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RST_ENA_BF_DEF (0x00000000)

///< Override Enable for rxelecidle_disable
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXELECIDLE_DIS_ENA_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXELECIDLE_DIS_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXELECIDLE_DIS_ENA_BF_MSK (0x00008000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXELECIDLE_DIS_ENA_BF_DEF (0x00000000)

///< Override Enable for rxeqeval
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQEVAL_ENA_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQEVAL_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQEVAL_ENA_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXEQEVAL_ENA_BF_DEF (0x00000000)

///< Override Enable for rxpresethint
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXPRSTHINT_ENA_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXPRSTHINT_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXPRSTHINT_ENA_BF_MSK (0x00020000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXPRSTHINT_ENA_BF_DEF (0x00000000)

///< Override Enable for rxstandby
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXSTANDBY_ENA_BF_OFF (18)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXSTANDBY_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXSTANDBY_ENA_BF_MSK (0x00040000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXSTANDBY_ENA_BF_DEF (0x00000000)

///< Override Enable for rxtermination
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXTERMINATION_ENA_BF_OFF (19)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXTERMINATION_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXTERMINATION_ENA_BF_MSK (0x00080000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_RXTERMINATION_ENA_BF_DEF (0x00000000)

///< Override Enable for srisenable
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_SRISEN_ENA_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_SRISEN_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_SRISEN_ENA_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_SRISEN_ENA_BF_DEF (0x00000000)

///< Override Enable for txcmnmode_disable
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXCMNMODE_DIS_ENA_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXCMNMODE_DIS_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXCMNMODE_DIS_ENA_BF_MSK (0x00200000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXCMNMODE_DIS_ENA_BF_DEF (0x00000000)

///< Override Enable for txdtctrx_lb
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDTCTRX_LB_ENA_BF_OFF (22)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDTCTRX_LB_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDTCTRX_LB_ENA_BF_MSK (0x00400000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDTCTRX_LB_ENA_BF_DEF (0x00000000)

///< Override Enable for txelecidle
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXELECIDLE_ENA_BF_OFF (23)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXELECIDLE_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXELECIDLE_ENA_BF_MSK (0x00800000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXELECIDLE_ENA_BF_DEF (0x00000000)

///< Override Enable for txmargin
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXMARGIN_ENA_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXMARGIN_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXMARGIN_ENA_BF_MSK (0x01000000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXMARGIN_ENA_BF_DEF (0x00000000)

///< Override Enable for txdeemph
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_ENA_BF_OFF (25)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_ENA_BF_MSK (0x02000000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXDEEMPH_ENA_BF_DEF (0x00000000)

///< Override Enable for txoneszeros
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXONESZEROS_ENA_BF_OFF (26)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXONESZEROS_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXONESZEROS_ENA_BF_MSK (0x04000000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXONESZEROS_ENA_BF_DEF (0x00000000)

///< Override Enable for txswing
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXSWING_ENA_BF_OFF (27)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXSWING_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXSWING_ENA_BF_MSK (0x08000000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_TXSWING_ENA_BF_DEF (0x00000000)

///< Override Enable for width
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_WIDTH_ENA_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_WIDTH_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_WIDTH_ENA_BF_MSK (0x10000000)
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_PCSIF_OVR_WIDTH_ENA_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_OVERRIDE_0 register description at address offset 0x180
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_override_0
  * PCS override
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_GETLOCALPRESETCOEFFICIENTS : 1;
    ///< Interface Override for getlocalpresetcoefficients
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_OVR_LOWPIN : 1;
    ///< Interface Override for lowpin
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t PCSIF_OVR_PCLK_AS_INPUT : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t PCSIF_OVR_PCLKCHANGEACK : 1;
    ///< Interface Override for pclkchangeack
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t PCSIF_OVR_LOCALPRESETINDEX : 6;
    ///< Interface Override for localpresetindex
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t PCSIF_OVR_M2P_BUS : 8;
    ///< Interface Override for m2p_bus
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t PCSIF_OVR_PCLK_RATE : 5;
    ///< Interface Override for pclk_rate
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
    uint32_t PCSIF_OVR_PHY_MODE : 4;
    ///< Interface Override for phy_mode
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ovrd_0_reg_t;

#define PCS_SERDES_LANE_MSG_OVRD_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_OVRD_0_RD_MASK (0xf1fff3ffU)
#define PCS_SERDES_LANE_MSG_OVRD_0_WR_MASK (0xf1fff3ffU)


///< Interface Override for getlocalpresetcoefficients
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_GETLOCALPRSTCOEFFICIENTS_BF_DEF (0x00000000)

///< Interface Override for lowpin
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOWPIN_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOWPIN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOWPIN_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOWPIN_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_AS_INPUT_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_AS_INPUT_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_AS_INPUT_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_AS_INPUT_BF_DEF (0x00000000)

///< Interface Override for pclkchangeack
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLKCHANGEACK_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLKCHANGEACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLKCHANGEACK_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLKCHANGEACK_BF_DEF (0x00000000)

///< Interface Override for localpresetindex
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOCALPRSTINDEX_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOCALPRSTINDEX_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOCALPRSTINDEX_BF_MSK (0x000003F0)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_LOCALPRSTINDEX_BF_DEF (0x00000000)

///< Interface Override for m2p_bus
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_M2P_BUS_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_M2P_BUS_BF_WID ( 8)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_M2P_BUS_BF_MSK (0x000FF000)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_M2P_BUS_BF_DEF (0x00000000)

///< Interface Override for pclk_rate
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_RATE_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_RATE_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_RATE_BF_MSK (0x01F00000)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PCLK_RATE_BF_DEF (0x00000000)

///< Interface Override for phy_mode
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PHY_MODE_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PHY_MODE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PHY_MODE_BF_MSK (0xF0000000)
#define PCS_SERDES_LANE_MSG_OVRD_0_PCSIF_OVR_PHY_MODE_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_OVERRIDE_1 register description at address offset 0x184
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_override_1
  * PCS override
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_POWERDOWN : 4;
    ///< Interface Override for powerdown
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_OVR_INVALIDREQUEST : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXEQINPROGRESS : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXEQTRAINING : 1;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t PCSIF_OVR_RST : 1;
    ///< Interface Override for rst
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXDEEMPH_CMINUS2 : 6;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
    uint32_t PCSIF_OVR_RATE : 4;
    ///< Interface Override for rate
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXELECIDLE_DISABLE : 1;
    ///< Interface Override for rxelecidle_disable
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXEQEVAL : 1;
    ///< Interface Override for rxeqeval
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXSTANDBY : 1;
    ///< Interface Override for rxstandby
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXTERMINATION : 1;
    ///< Interface Override for rxtermination
    ///< AccessType="RW" BitOffset="23" ResetValue="0x0"
    uint32_t PCSIF_OVR_RXPRESETHINT : 3;
    ///< Interface Override for rxpresethint
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
    uint32_t PCSIF_OVR_SRISENABLE : 1;
    ///< Interface Override for srisenable
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXCMNMODE_DISABLE : 1;
    ///< Interface Override for txcmnmode_disable
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXDTCTRX_LB : 1;
    ///< Interface Override for txdtctrx_lb
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="31" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ovrd_1_reg_t;

#define PCS_SERDES_LANE_MSG_OVRD_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_OVRD_1_RD_MASK (0x77ff3fffU)
#define PCS_SERDES_LANE_MSG_OVRD_1_WR_MASK (0x77ff3fffU)


///< Interface Override for powerdown
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_PWRDOWN_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_PWRDOWN_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_PWRDOWN_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_PWRDOWN_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_INVALIDREQUEST_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_INVALIDREQUEST_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_INVALIDREQUEST_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_INVALIDREQUEST_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQINPROGRESS_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQINPROGRESS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQINPROGRESS_BF_MSK (0x00000020)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQINPROGRESS_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQTRAINING_BF_OFF ( 6)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQTRAINING_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQTRAINING_BF_MSK (0x00000040)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQTRAINING_BF_DEF (0x00000000)

///< Interface Override for rst
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RST_BF_OFF ( 7)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RST_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RST_BF_MSK (0x00000080)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RST_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDEEMPH_CMINUS2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDEEMPH_CMINUS2_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDEEMPH_CMINUS2_BF_MSK (0x00003F00)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDEEMPH_CMINUS2_BF_DEF (0x00000000)

///< Interface Override for rate
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RATE_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RATE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RATE_BF_MSK (0x000F0000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RATE_BF_DEF (0x00000000)

///< Interface Override for rxelecidle_disable
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXELECIDLE_DIS_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXELECIDLE_DIS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXELECIDLE_DIS_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXELECIDLE_DIS_BF_DEF (0x00000000)

///< Interface Override for rxeqeval
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQEVAL_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQEVAL_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQEVAL_BF_MSK (0x00200000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXEQEVAL_BF_DEF (0x00000000)

///< Interface Override for rxstandby
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXSTANDBY_BF_OFF (22)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXSTANDBY_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXSTANDBY_BF_MSK (0x00400000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXSTANDBY_BF_DEF (0x00000000)

///< Interface Override for rxtermination
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXTERMINATION_BF_OFF (23)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXTERMINATION_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXTERMINATION_BF_MSK (0x00800000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXTERMINATION_BF_DEF (0x00000000)

///< Interface Override for rxpresethint
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXPRSTHINT_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXPRSTHINT_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXPRSTHINT_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_RXPRSTHINT_BF_DEF (0x00000000)

///< Interface Override for srisenable
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_SRISEN_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_SRISEN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_SRISEN_BF_MSK (0x10000000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_SRISEN_BF_DEF (0x00000000)

///< Interface Override for txcmnmode_disable
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXCMNMODE_DIS_BF_OFF (29)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXCMNMODE_DIS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXCMNMODE_DIS_BF_MSK (0x20000000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXCMNMODE_DIS_BF_DEF (0x00000000)

///< Interface Override for txdtctrx_lb
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDTCTRX_LB_BF_OFF (30)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDTCTRX_LB_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDTCTRX_LB_BF_MSK (0x40000000)
#define PCS_SERDES_LANE_MSG_OVRD_1_PCSIF_OVR_TXDTCTRX_LB_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_OVERRIDE_2 register description at address offset 0x188
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_override_2
  * PCS override
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_TXELECIDLE : 4;
    ///< Interface Override for txelecidle
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXMARGIN : 3;
    ///< Interface Override for txmargin
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t PCSIF_OVR_TXDEEMPH : 18;
    ///< Interface Override for txdeemph
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="26" ResetValue="None"
    uint32_t PCSIF_OVR_TXONESZEROS : 1;
    ///< Interface Override for txoneszeros
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t PCSIF_OVR_TXSWING : 1;
    ///< Interface Override for txswing
    ///< AccessType="RW" BitOffset="29" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ovrd_2_reg_t;

#define PCS_SERDES_LANE_MSG_OVRD_2_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_OVRD_2_RD_MASK (0x33ffff7fU)
#define PCS_SERDES_LANE_MSG_OVRD_2_WR_MASK (0x33ffff7fU)


///< Interface Override for txelecidle
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXELECIDLE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXELECIDLE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXELECIDLE_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXELECIDLE_BF_DEF (0x00000000)

///< Interface Override for txmargin
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXMARGIN_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXMARGIN_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXMARGIN_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXMARGIN_BF_DEF (0x00000000)

///< Interface Override for txdeemph
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXDEEMPH_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXDEEMPH_BF_WID (18)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXDEEMPH_BF_MSK (0x03FFFF00)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXDEEMPH_BF_DEF (0x00000000)

///< Interface Override for txoneszeros
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXONESZEROS_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXONESZEROS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXONESZEROS_BF_MSK (0x10000000)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXONESZEROS_BF_DEF (0x00000000)

///< Interface Override for txswing
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXSWING_BF_OFF (29)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXSWING_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXSWING_BF_MSK (0x20000000)
#define PCS_SERDES_LANE_MSG_OVRD_2_PCSIF_OVR_TXSWING_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_OVERRIDE_3 register description at address offset 0x18c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_override_3
  * PCS override
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_WIDTH : 3;
    ///< Interface Override for width
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 29;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ovrd_3_reg_t;

#define PCS_SERDES_LANE_MSG_OVRD_3_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_OVRD_3_RD_MASK (0x00000007U)
#define PCS_SERDES_LANE_MSG_OVRD_3_WR_MASK (0x00000007U)


///< Interface Override for width
#define PCS_SERDES_LANE_MSG_OVRD_3_PCSIF_OVR_WIDTH_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_OVRD_3_PCSIF_OVR_WIDTH_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_OVRD_3_PCSIF_OVR_WIDTH_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_OVRD_3_PCSIF_OVR_WIDTH_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCSFSM_RO register description at address offset 0x190
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcsfsm_ro
  * PCS FSM status
  */

typedef union {
  struct {
    uint32_t PCSFSM_PCLK_RATE : 5;
    ///< Reserved
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t PCSFSM_PSTATE : 4;
    ///< For Debug: Internal FSM powerdown state
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t PCSFSM_RATE : 4;
    ///< For Debug: Internal FSM rate
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t PCSFSM_STATE : 4;
    ///< For Debug: Internal FSM state
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t PCSFSM_WIDTH : 3;
    ///< For Debug: Internal FSM width
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="27" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcsfsm_ro_reg_t;

#define PCS_SERDES_LANE_MSG_PCSFSM_RO_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_RD_MASK (0x07f0ff1fU)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_WR_MASK (0x00000000U)


///< Reserved
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PCLK_RATE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PCLK_RATE_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PCLK_RATE_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PCLK_RATE_BF_DEF (0x00000000)

///< For Debug: Internal FSM powerdown state
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PSTATE_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PSTATE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PSTATE_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_PSTATE_BF_DEF (0x00000000)

///< For Debug: Internal FSM rate
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_RATE_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_RATE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_RATE_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_RATE_BF_DEF (0x00000000)

///< For Debug: Internal FSM state
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_STATE_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_STATE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_STATE_BF_MSK (0x00F00000)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_STATE_BF_DEF (0x00000000)

///< For Debug: Internal FSM width
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_WIDTH_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_WIDTH_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_WIDTH_BF_MSK (0x07000000)
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_WIDTH_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_CFG_RO_0 register description at address offset 0x194
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_cfg_ro_0
  * PCS configration status
  */

typedef union {
  struct {
    uint32_t PCSIF_PIPE_PHYSTATUS_TOGGLE : 1;
    ///< For Debug: This signal toggles upon falling edge of Phystatus
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PCSPIPE_SERDES_ARCH : 1;
    ///< PCS architecture.  1: Serdes (Without E-Buffer); 0: Non-Serdes (With
    ///< E-Buffer)
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PCSPIPE_LOWPIN : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PCSPIPE_PCLK_AS_INPUT : 1;
    ///< Engineering Only
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PCSPIPE_PHY_MODE : 4;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PCSPIPE_EBUF_MODE : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t PCSPIPE_SRISENABLE : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t PCSPIPE_ENCODEDECODEBYPASS : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t PCSPIPE_BLOCKALIGNCONTROL : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t PCSPIPE_PCLK_RATE : 5;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
    uint32_t PCSPIPE_WIDTH : 3;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t PCSPIPE_RATE : 4;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t PCSPIPE_PCLKCHANGEACK : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
    uint32_t PCSPIPE_PIPE_OVR_CHNG_EDGE : 1;
    ///< For Debug: Toggle twice for Override Interface Signals to take effect
    ///< (except for pipe reset)
    ///< AccessType="RO/V" BitOffset="29" ResetValue="0x0"
    uint32_t PCSPIPE_GETLOCALPRESETCOEFFICIENTS : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="30" ResetValue="0x0"
    uint32_t PCS_GETLOCALPRESETCOEFFICIENTS_ERR : 1;
    ///< Error when request invalid preset coefficient index in particular
    ///< rate
    ///< AccessType="RO/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_cfg_ro_0_reg_t;

#define PCS_SERDES_LANE_MSG_CFG_RO_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_RD_MASK (0xff71ffffU)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_WR_MASK (0x00000000U)


///< For Debug: This signal toggles upon falling edge of Phystatus
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSIF_PIPE_PHYSTAT_TOGGLE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSIF_PIPE_PHYSTAT_TOGGLE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSIF_PIPE_PHYSTAT_TOGGLE_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSIF_PIPE_PHYSTAT_TOGGLE_BF_DEF (0x00000000)

///< PCS architecture.  1: Serdes (Without E-Buffer); 0: Non-Serdes (With
///< E-Buffer)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ARCH_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ARCH_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ARCH_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ARCH_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_LOWPIN_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_LOWPIN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_LOWPIN_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_LOWPIN_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_AS_INPUT_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_AS_INPUT_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_AS_INPUT_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_AS_INPUT_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PHY_MODE_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PHY_MODE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PHY_MODE_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PHY_MODE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_EBUF_MODE_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_EBUF_MODE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_EBUF_MODE_BF_MSK (0x00000100)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_EBUF_MODE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_SRISEN_BF_OFF ( 9)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_SRISEN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_SRISEN_BF_MSK (0x00000200)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_SRISEN_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ENCDECBYP_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ENCDECBYP_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ENCDECBYP_BF_MSK (0x00000400)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_ENCDECBYP_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_BLKALIGNCTRL_BF_OFF (11)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_BLKALIGNCTRL_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_BLKALIGNCTRL_BF_MSK (0x00000800)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_BLKALIGNCTRL_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_RATE_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_RATE_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_RATE_BF_MSK (0x0001F000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLK_RATE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_WIDTH_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_WIDTH_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_WIDTH_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_WIDTH_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_RATE_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_RATE_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_RATE_BF_MSK (0x0F000000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_RATE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLKCHANGEACK_BF_OFF (28)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLKCHANGEACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLKCHANGEACK_BF_MSK (0x10000000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PCLKCHANGEACK_BF_DEF (0x00000000)

///< For Debug: Toggle twice for Override Interface Signals to take effect
///< (except for pipe reset)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PIPE_OVR_CHNG_EDGE_BF_OFF (29)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PIPE_OVR_CHNG_EDGE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PIPE_OVR_CHNG_EDGE_BF_MSK (0x20000000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_PIPE_OVR_CHNG_EDGE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_GETLOCALPRSTCOEFFICIENTS_BF_OFF (30)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_GETLOCALPRSTCOEFFICIENTS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_GETLOCALPRSTCOEFFICIENTS_BF_MSK (0x40000000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_PCSPIPE_GETLOCALPRSTCOEFFICIENTS_BF_DEF (0x00000000)

///< Error when request invalid preset coefficient index in particular
///< rate
#define PCS_SERDES_LANE_MSG_CFG_RO_0_GETLOCALPRSTCOEFFICIENTS_ERR_BF_OFF (31)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_GETLOCALPRSTCOEFFICIENTS_ERR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_GETLOCALPRSTCOEFFICIENTS_ERR_BF_MSK (0x80000000)
#define PCS_SERDES_LANE_MSG_CFG_RO_0_GETLOCALPRSTCOEFFICIENTS_ERR_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_CFG_RO_1 register description at address offset 0x198
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_cfg_ro_1
  * PCS configration status
  */

typedef union {
  struct {
    uint32_t PCSPIPE_POWERDOWN : 4;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PCSPIPE_LOCALPRESETINDEX : 5;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 23;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_cfg_ro_1_reg_t;

#define PCS_SERDES_LANE_MSG_CFG_RO_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_RD_MASK (0x000001ffU)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_WR_MASK (0x00000000U)


///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_PWRDOWN_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_PWRDOWN_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_PWRDOWN_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_PWRDOWN_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_LOCALPRSTINDEX_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_LOCALPRSTINDEX_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_LOCALPRSTINDEX_BF_MSK (0x000001F0)
#define PCS_SERDES_LANE_MSG_CFG_RO_1_PCSPIPE_LOCALPRSTINDEX_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_CFG_RO_CLEAR register description at address offset 0x19c
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_cfg_ro_clear
  * PCS configration status
  */

typedef union {
  struct {
    uint32_t PCS_GETLOCALPRESETCOEFFICIENTS_ERR_CLR : 1;
    ///< clear pcs_getlocalpresetcoefficients_err status
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 31;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_cfg_ro_clr_reg_t;

#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_RD_MASK (0x00000001U)
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_WR_MASK (0x00000001U)


///< clear pcs_getlocalpresetcoefficients_err status
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_GETLOCALPRSTCOEFFICIENTS_ERR_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_GETLOCALPRSTCOEFFICIENTS_ERR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_GETLOCALPRSTCOEFFICIENTS_ERR_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_GETLOCALPRSTCOEFFICIENTS_ERR_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_TX_RO_0 register description at address offset 0x1a0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_tx_ro_0
  * PCS Tx status
  */

typedef union {
  struct {
    uint32_t PCSPIPE_TXCMNMODE_DISABLE : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PCSPIPE_TXCOMPLIANCE : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PCSPIPE_TXDTCTRX_LB : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PCSPIPE_TXONESZEROS : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PCSPIPE_TXDEEMPH : 18;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t PCSPIPE_TXDEEMPH_CMINUS2 : 6;
    ///< Engineering Only
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_tx_ro_0_reg_t;

#define PCS_SERDES_LANE_MSG_TX_RO_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_TX_RO_0_RD_MASK (0x3f3fffffU)
#define PCS_SERDES_LANE_MSG_TX_RO_0_WR_MASK (0x00000000U)


///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCMNMODE_DIS_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCMNMODE_DIS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCMNMODE_DIS_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCMNMODE_DIS_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCOMPLIANCE_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCOMPLIANCE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCOMPLIANCE_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXCOMPLIANCE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDTCTRX_LB_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDTCTRX_LB_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDTCTRX_LB_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDTCTRX_LB_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXONESZEROS_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXONESZEROS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXONESZEROS_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXONESZEROS_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_BF_WID (18)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_BF_MSK (0x003FFFF0)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_CMINUS2_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_CMINUS2_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_CMINUS2_BF_MSK (0x3F000000)
#define PCS_SERDES_LANE_MSG_TX_RO_0_PCSPIPE_TXDEEMPH_CMINUS2_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_TX_RO_1 register description at address offset 0x1a4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_tx_ro_1
  * PCS Tx status
  */

typedef union {
  struct {
    uint32_t PCSPIPE_TXMARGIN : 3;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t PCSPIPE_TXSWING : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_tx_ro_1_reg_t;

#define PCS_SERDES_LANE_MSG_TX_RO_1_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_TX_RO_1_RD_MASK (0x00000017U)
#define PCS_SERDES_LANE_MSG_TX_RO_1_WR_MASK (0x00000000U)


///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXMARGIN_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXMARGIN_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXMARGIN_BF_MSK (0x00000007)
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXMARGIN_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXSWING_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXSWING_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXSWING_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_TX_RO_1_PCSPIPE_TXSWING_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_RX_RO_0 register description at address offset 0x1a8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_rx_ro_0
  * PCS Rx status
  */

typedef union {
  struct {
    uint32_t PCSPIPE_RXELECIDLE : 1;
    ///< For Debug: Value of the PIPE Signal going to MAC
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t PCSPIPE_RXELECIDLE_DISABLE : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t PCSPIPE_RXEQEVAL : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t PCSPIPE_RXPOLARITY : 1;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t PCSPIPE_RXSTANDBYSTATUS : 1;
    ///< For Debug: Value of the PIPE Signal going to MAC
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t PCSPIPE_EQ_CLR : 1;
    ///< Engineering Only
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t PCSPIPE_RXEQINPROGRESS : 1;
    ///< Engineering Only
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t PCSPIPE_RXEQTRAINING : 1;
    ///< Engineering Only
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t PCSPIPE_RXPRESETHINT : 3;
    ///< For Debug: Value of the PIPE Signal coming from MAC
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t PCSFSM_PMA_LINKEVALUATIONFEEDBACKFIGUREMERIT : 14;
    ///< For Debug: Value of FOM direct from PMA Interface
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="30" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_rx_ro_0_reg_t;

#define PCS_SERDES_LANE_MSG_RX_RO_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_RX_RO_0_RD_MASK (0x3fff07ffU)
#define PCS_SERDES_LANE_MSG_RX_RO_0_WR_MASK (0x00000000U)


///< For Debug: Value of the PIPE Signal going to MAC
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_DIS_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_DIS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_DIS_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXELECIDLE_DIS_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQEVAL_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQEVAL_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQEVAL_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQEVAL_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPOLARITY_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPOLARITY_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPOLARITY_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPOLARITY_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal going to MAC
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXSTANDBYSTAT_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXSTANDBYSTAT_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXSTANDBYSTAT_BF_MSK (0x00000010)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXSTANDBYSTAT_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_EQ_CLR_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_EQ_CLR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_EQ_CLR_BF_MSK (0x00000020)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_EQ_CLR_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQINPROGRESS_BF_OFF ( 6)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQINPROGRESS_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQINPROGRESS_BF_MSK (0x00000040)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQINPROGRESS_BF_DEF (0x00000000)

///< Engineering Only
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQTRAINING_BF_OFF ( 7)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQTRAINING_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQTRAINING_BF_MSK (0x00000080)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXEQTRAINING_BF_DEF (0x00000000)

///< For Debug: Value of the PIPE Signal coming from MAC
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPRSTHINT_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPRSTHINT_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPRSTHINT_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSPIPE_RXPRSTHINT_BF_DEF (0x00000000)

///< For Debug: Value of FOM direct from PMA Interface
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSFSM_PMA_LINKEVALUATIONFEEDBACKFIGUREMERIT_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSFSM_PMA_LINKEVALUATIONFEEDBACKFIGUREMERIT_BF_WID (14)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSFSM_PMA_LINKEVALUATIONFEEDBACKFIGUREMERIT_BF_MSK (0x3FFF0000)
#define PCS_SERDES_LANE_MSG_RX_RO_0_PCSFSM_PMA_LINKEVALUATIONFEEDBACKFIGUREMERIT_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_TSTBUS_CFG register description at address offset 0x1ac
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_tstbus_cfg
  * PCS testbus configuration
  */

typedef union {
  struct {
    uint32_t PCSTBUS_ADDR : 8;
    ///< PCS Lane testbus address.  0 = Off
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSTBUS_RST_OVREN : 1;
    ///< PCS Lane testbus reset override enable
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t PCSTBUS_RST_OVR_B : 1;
    ///< PCS Lane testbus reset override
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_tstbus_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_RD_MASK (0x000003ffU)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_WR_MASK (0x000003ffU)


///< PCS Lane testbus address.  0 = Off
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_ADDR_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_ADDR_BF_WID ( 8)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_ADDR_BF_MSK (0x000000FF)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_ADDR_BF_DEF (0x00000000)

///< PCS Lane testbus reset override enable
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVREN_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVREN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVREN_BF_MSK (0x00000100)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVREN_BF_DEF (0x00000000)

///< PCS Lane testbus reset override
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVR_B_BF_OFF ( 9)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVR_B_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVR_B_BF_MSK (0x00000200)
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_PCSTBUS_RST_OVR_B_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_TESTBUS_STATUS_0 register description at address offset 0x1b0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_testbus_status_0
  * PCS testbus status
  */

typedef union {
  struct {
    uint32_t PCSTSTBUS_VALUE : 8;
    ///< PCS Lane testbus value
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_testbus_stat_0_reg_t;

#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_RD_MASK (0x000000ffU)
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_WR_MASK (0x00000000U)


///< PCS Lane testbus value
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_PCSTSTBUS_VAL_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_PCSTSTBUS_VAL_BF_WID ( 8)
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_PCSTSTBUS_VAL_BF_MSK (0x000000FF)
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_PCSTSTBUS_VAL_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_DEEPPM_CFG register description at address offset 0x1b4
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_deeppm_cfg
  * PCS override
  */

typedef union {
  struct {
    uint32_t PCSIF_OVR_DEEPPM_REQ : 1;
    ///< Interface Override for deeppm
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCSIF_OVR_DEEPPM_REQ_ENA : 1;
    ///< Interface Override enable for deeppm
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DEEPPM_PSTATE_FORCE_P1 : 1;
    ///< Enable deep power management exit pstate force to p1 value
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t DEEPPM_PSTATE_EN : 1;
    ///< deep power management overwrite pma pstate enable
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t DEEPPM_PSTATE_SET_PD : 3;
    ///< deep power management overwrite pma pstate pd value
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
    uint32_t DEEPPM_PSTATE_SET_P1 : 3;
    ///< deep power management overwrite pma pstate p1 value
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 21;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_deeppm_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_RD_MASK (0x0000077fU)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_WR_MASK (0x0000077fU)


///< Interface Override for deeppm
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_BF_MSK (0x00000001)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_BF_DEF (0x00000000)

///< Interface Override enable for deeppm
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_ENA_BF_OFF ( 1)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_ENA_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_ENA_BF_MSK (0x00000002)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PCSIF_OVR_REQ_ENA_BF_DEF (0x00000000)

///< Enable deep power management exit pstate force to p1 value
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_FORCE_P1_BF_OFF ( 2)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_FORCE_P1_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_FORCE_P1_BF_MSK (0x00000004)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_FORCE_P1_BF_DEF (0x00000000)

///< deep power management overwrite pma pstate enable
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_EN_BF_OFF ( 3)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_EN_BF_MSK (0x00000008)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_EN_BF_DEF (0x00000000)

///< deep power management overwrite pma pstate pd value
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_PD_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_PD_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_PD_BF_MSK (0x00000070)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_PD_BF_DEF (0x00000000)

///< deep power management overwrite pma pstate p1 value
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_P1_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_P1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_P1_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_PSTATE_SET_P1_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_LINKFBDIRCHG_CFG register description at address offset 0x1b8
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_linkfbdirchg_cfg
  * PCS override
  */

typedef union {
  struct {
    uint32_t LINKEVALFEEDBACKDIRECTIONCHANGE_COEF : 6;
    ///< linkevalfeedbackdirectionchange coef move direction for Gen3/4/5
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t LINKEVALFEEDBACKDIRECTION_EN : 1;
    ///< Enable for linkevalfeedbackdirectionchange option
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS2 : 3;
    ///< linkevalfeedbackdirectionchange coef move direction cm2 for Gen6
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="11" ResetValue="None"
    uint32_t LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS1 : 3;
    ///< linkevalfeedbackdirectionchange coef move direction cm1 for Gen6
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
    uint32_t LINKEVALFEEDBACKDIRECTIONCHANGE_CZERO : 3;
    ///< linkevalfeedbackdirectionchange coef move direction c0 for Gen6
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t LINKEVALFEEDBACKDIRECTIONCHANGE_CPLUS1 : 3;
    ///< linkevalfeedbackdirectionchange coef move direction cp1 for Gen6
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
    uint32_t LINKEVALFEEDBACKDIRECTIONCHANGE_WR : 1;
    ///< FW toggle this to make above values captured in HW
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_linkfbdirchg_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_RD_MASK (0x017777bfU)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_WR_MASK (0x017777bfU)


///< linkevalfeedbackdirectionchange coef move direction for Gen3/4/5
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_COEF_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_COEF_BF_WID ( 6)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_COEF_BF_MSK (0x0000003F)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_COEF_BF_DEF (0x00000000)

///< Enable for linkevalfeedbackdirectionchange option
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTION_EN_BF_OFF ( 7)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTION_EN_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTION_EN_BF_MSK (0x00000080)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTION_EN_BF_DEF (0x00000000)

///< linkevalfeedbackdirectionchange coef move direction cm2 for Gen6
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS2_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS2_BF_MSK (0x00000700)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS2_BF_DEF (0x00000000)

///< linkevalfeedbackdirectionchange coef move direction cm1 for Gen6
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS1_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS1_BF_MSK (0x00007000)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CMINUS1_BF_DEF (0x00000000)

///< linkevalfeedbackdirectionchange coef move direction c0 for Gen6
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CZERO_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CZERO_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CZERO_BF_MSK (0x00070000)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CZERO_BF_DEF (0x00000000)

///< linkevalfeedbackdirectionchange coef move direction cp1 for Gen6
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CPLUS1_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CPLUS1_BF_WID ( 3)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CPLUS1_BF_MSK (0x00700000)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_CPLUS1_BF_DEF (0x00000000)

///< FW toggle this to make above values captured in HW
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_WR_BF_OFF (24)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_WR_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_WR_BF_MSK (0x01000000)
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_LINKEVALFEEDBACKDIRECTIONCHANGE_WR_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_UPI1_TXWIDTH_LUT_CFG register description at address offset 0x1e8
  *
  * Register default value:        0x00007531
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_upi1_txwidth_lut_cfg
  * UPI1 TxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_UPI1_TXWIDTH_LUT_ENTRY0 : 4;
    ///< UPI 1 TxWidth LUT entry 0 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_UPI1_TXWIDTH_LUT_ENTRY1 : 4;
    ///< UPI 1 TxWidth LUT entry 1 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x3"
    uint32_t PCS_UPI1_TXWIDTH_LUT_ENTRY2 : 4;
    ///< UPI 1 TxWidth LUT entry 2 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t PCS_UPI1_TXWIDTH_LUT_ENTRY3 : 4;
    ///< UPI 1 TxWidth LUT entry 3 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x7"
    uint32_t PCS_UPI1_TXDATA2PMA_PACK : 1;
    ///< UP1 1 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCS_UPI1_TXSIGMODULATION_SCHEME : 2;
    ///< UP1 1 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_upi1_txwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_DEFAULT (0x00007531U)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_RD_MASK (0x0007ffffU)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_WR_MASK (0x0007ffffU)


///< UPI 1 TxWidth LUT entry 0 - define the datawidth encoded value when
///< i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< UPI 1 TxWidth LUT entry 1 - define the datawidth encoded value when
///< i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000030)

///< UPI 1 TxWidth LUT entry 2 - define the datawidth encoded value when
///< i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000500)

///< UPI 1 TxWidth LUT entry 3 - define the datawidth encoded value when
///< i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00007000)

///< UP1 1 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_DEF (0x00000000)

///< UP1 1 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_MSK (0x00060000)
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_UPI2PLUS_TXWIDTH_LUT_CFG register description at address offset 0x1ec
  *
  * Register default value:        0x00016420
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_upi2plus_txwidth_lut_cfg
  * UPI2 or Above TxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_UPI2PLUS_TXWIDTH_LUT_ENTRY0 : 4;
    ///< UPI 2 or above TxWidth LUT entry 0 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCS_UPI2PLUS_TXWIDTH_LUT_ENTRY1 : 4;
    ///< UPI 2 or above TxWidth LUT entry 1 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t PCS_UPI2PLUS_TXWIDTH_LUT_ENTRY2 : 4;
    ///< UPI 2 or above TxWidth LUT entry 2 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t PCS_UPI2PLUS_TXWIDTH_LUT_ENTRY3 : 4;
    ///< UPI 2 or above TxWidth LUT entry 3 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x6"
    uint32_t PCS_UPI2PLUS_TXDATA2PMA_PACK : 1;
    ///< UP1 2 or above TxWidth Pack. 0 - Forward full databus width from MAC
    ///< to PMA; 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t PCS_UPI2PLUS_TXSIGMODULATION_SCHEME : 2;
    ///< UP1 2 or above Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3
    ///< - Reserved
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_upi2plus_txwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_DEFAULT (0x00016420U)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_RD_MASK (0x0007ffffU)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_WR_MASK (0x0007ffffU)


///< UPI 2 or above TxWidth LUT entry 0 - define the datawidth encoded
///< value when i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000000)

///< UPI 2 or above TxWidth LUT entry 1 - define the datawidth encoded
///< value when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000020)

///< UPI 2 or above TxWidth LUT entry 2 - define the datawidth encoded
///< value when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000400)

///< UPI 2 or above TxWidth LUT entry 3 - define the datawidth encoded
///< value when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00006000)

///< UP1 2 or above TxWidth Pack. 0 - Forward full databus width from MAC
///< to PMA; 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_DEF (0x00010000)

///< UP1 2 or above Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3
///< - Reserved
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_MSK (0x00060000)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_UPI1_RXWIDTH_LUT_CFG register description at address offset 0x1f0
  *
  * Register default value:        0x00039461
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_upi1_rxwidth_lut_cfg
  * UPI1 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_UPI1_RXWIDTH_LUT_ENTRY0 : 5;
    ///< UPI 1 RxWidth LUT entry 0 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_UPI1_RXWIDTH_LUT_ENTRY1 : 5;
    ///< UPI 1 RxWidth LUT entry 1 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x3"
    uint32_t PCS_UPI1_RXWIDTH_LUT_ENTRY2 : 5;
    ///< UPI 1 RxWidth LUT entry 2 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x5"
    uint32_t PCS_UPI1_RXWIDTH_LUT_ENTRY3 : 5;
    ///< UPI 1 RxWidth LUT entry 3 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t PCS_UPI1_RXDATA_UNPACK : 1;
    ///< UP1 1 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCS_UPI1_RXSIGMODULATION_SCHEME : 2;
    ///< UP1 1 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_upi1_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_DEFAULT (0x00039461U)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RD_MASK (0x007fffffU)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_WR_MASK (0x007fffffU)


///< UPI 1 RxWidth LUT entry 0 - define the datawidth encoded value when
///< i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< UPI 1 RxWidth LUT entry 1 - define the datawidth encoded value when
///< i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000060)

///< UPI 1 RxWidth LUT entry 2 - define the datawidth encoded value when
///< i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00001400)

///< UPI 1 RxWidth LUT entry 3 - define the datawidth encoded value when
///< i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000F8000)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00038000)

///< UP1 1 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00000000)

///< UP1 1 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_UPI2PLUS_RXWIDTH_LUT_CFG register description at address offset 0x1f4
  *
  * Register default value:        0x00131041
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_upi2plus_rxwidth_lut_cfg
  * UPI2 or Above RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_UPI2PLUS_RXWIDTH_LUT_ENTRY0 : 5;
    ///< UPI 2 or above RxWidth LUT entry 0 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_UPI2PLUS_RXWIDTH_LUT_ENTRY1 : 5;
    ///< UPI 2 or above RxWidth LUT entry 1 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t PCS_UPI2PLUS_RXWIDTH_LUT_ENTRY2 : 5;
    ///< UPI 2 or above RxWidth LUT entry 2 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x4"
    uint32_t PCS_UPI2PLUS_RXWIDTH_LUT_ENTRY3 : 5;
    ///< UPI 2 or above RxWidth LUT entry 3 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="15" ResetValue="0x6"
    uint32_t PCS_UPI2PLUS_RXDATA_UNPACK : 1;
    ///< UP1 2 or above RxWidth Pack. 0 - Forward full databus width from MAC
    ///< to PMA; 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t PCS_UPI2PLUS_RXSIGMODULATION_SCHEME : 2;
    ///< UP1 2 or above Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3
    ///< - Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_upi2plus_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_DEFAULT (0x00131041U)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RD_MASK (0x007fffffU)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_WR_MASK (0x007fffffU)


///< UPI 2 or above RxWidth LUT entry 0 - define the datawidth encoded
///< value when i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< UPI 2 or above RxWidth LUT entry 1 - define the datawidth encoded
///< value when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000040)

///< UPI 2 or above RxWidth LUT entry 2 - define the datawidth encoded
///< value when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00001000)

///< UPI 2 or above RxWidth LUT entry 3 - define the datawidth encoded
///< value when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000F8000)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00030000)

///< UP1 2 or above RxWidth Pack. 0 - Forward full databus width from MAC
///< to PMA; 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00100000)

///< UP1 2 or above Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3
///< - Reserved
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PCIE12_TXWIDTH_LUT_CFG register description at address offset 0x1f8
  *
  * Register default value:        0x00007531
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_pcie12_txwidth_lut_cfg
  * PCIe Gen1&2 TxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_PCIE12_TXWIDTH_LUT_ENTRY0 : 4;
    ///< PCIe Gen1&2 TxWidth LUT entry 0 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_PCIE12_TXWIDTH_LUT_ENTRY1 : 4;
    ///< PCIe Gen1&2 TxWidth LUT entry 1 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x3"
    uint32_t PCS_PCIE12_TXWIDTH_LUT_ENTRY2 : 4;
    ///< PCIe Gen1&2 TxWidth LUT entry 2 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t PCS_PCIE12_TXWIDTH_LUT_ENTRY3 : 4;
    ///< PCIe Gen1&2 TxWidth LUT entry 3 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x7"
    uint32_t PCS_PCIE12_TXDATA2PMA_PACK : 1;
    ///< UP1 1 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCS_PCIE12_TXSIGMODULATION_SCHEME : 2;
    ///< UP1 1 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcie12_txwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_DEFAULT (0x00007531U)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_RD_MASK (0x0007ffffU)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_WR_MASK (0x0007ffffU)


///< PCIe Gen1&2 TxWidth LUT entry 0 - define the datawidth encoded value
///< when i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< PCIe Gen1&2 TxWidth LUT entry 1 - define the datawidth encoded value
///< when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000030)

///< PCIe Gen1&2 TxWidth LUT entry 2 - define the datawidth encoded value
///< when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000500)

///< PCIe Gen1&2 TxWidth LUT entry 3 - define the datawidth encoded value
///< when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00007000)

///< UP1 1 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_DEF (0x00000000)

///< UP1 1 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_MSK (0x00060000)
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PCIE3PLUS_TXWIDTH_LUT_CFG register description at address offset 0x1fc
  *
  * Register default value:        0x00876420
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_pcie3plus_txwidth_lut_cfg
  * PCIe Gen3 or Above TxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_PCIE3PLUS_TXWIDTH_LUT_ENTRY0 : 4;
    ///< PCIe Gen3 or above TxWidth LUT entry 0 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCS_PCIE3PLUS_TXWIDTH_LUT_ENTRY1 : 4;
    ///< PCIe Gen3 or above TxWidth LUT entry 1 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t PCS_PCIE3PLUS_TXWIDTH_LUT_ENTRY2 : 4;
    ///< PCIe Gen3 or above TxWidth LUT entry 2 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t PCS_PCIE3PLUS_TXWIDTH_LUT_ENTRY3 : 4;
    ///< PCIe Gen3 or above TxWidth LUT entry 3 - define the datawidth encoded
    ///< value when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x6"
    uint32_t PCS_PCIE34_TXDATA2PMA_PACK : 1;
    ///< PCIe 3&4 TxWidth Pack. 0 - Forward full databus width from MAC to
    ///< PMA; 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t PCS_PCIE5_TXDATA2PMA_PACK : 1;
    ///< PCIe 5 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="17" ResetValue="0x1"
    uint32_t PCS_PCIE6_TXDATA2PMA_PACK : 1;
    ///< PCIe 6 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="18" ResetValue="0x1"
    uint32_t PCS_PCIE34_TXSIGMODULATION_SCHEME : 2;
    ///< PCIe Gen3&4 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 -
    ///< Reserved
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t PCS_PCIE5_TXSIGMODULATION_SCHEME : 2;
    ///< PCIe Gen5 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t PCS_PCIE6_TXSIGMODULATION_SCHEME : 2;
    ///< PCIe Gen6 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="23" ResetValue="0x1"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcie3plus_txwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_DEFAULT (0x00876420U)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_RD_MASK (0x01ffffffU)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_WR_MASK (0x01ffffffU)


///< PCIe Gen3 or above TxWidth LUT entry 0 - define the datawidth encoded
///< value when i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000000)

///< PCIe Gen3 or above TxWidth LUT entry 1 - define the datawidth encoded
///< value when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000020)

///< PCIe Gen3 or above TxWidth LUT entry 2 - define the datawidth encoded
///< value when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000400)

///< PCIe Gen3 or above TxWidth LUT entry 3 - define the datawidth encoded
///< value when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00006000)

///< PCIe 3&4 TxWidth Pack. 0 - Forward full databus width from MAC to
///< PMA; 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXDATA2PMA_PACK_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXDATA2PMA_PACK_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXDATA2PMA_PACK_BF_DEF (0x00010000)

///< PCIe 5 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXDATA2PMA_PACK_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXDATA2PMA_PACK_BF_MSK (0x00020000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXDATA2PMA_PACK_BF_DEF (0x00020000)

///< PCIe 6 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXDATA2PMA_PACK_BF_OFF (18)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXDATA2PMA_PACK_BF_MSK (0x00040000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXDATA2PMA_PACK_BF_DEF (0x00040000)

///< PCIe Gen3&4 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 -
///< Reserved
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXSIGMOD_SCHEME_BF_OFF (19)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXSIGMOD_SCHEME_BF_MSK (0x00180000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE34_TXSIGMOD_SCHEME_BF_DEF (0x00000000)

///< PCIe Gen5 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE5_TXSIGMOD_SCHEME_BF_DEF (0x00000000)

///< PCIe Gen6 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXSIGMOD_SCHEME_BF_OFF (23)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXSIGMOD_SCHEME_BF_MSK (0x01800000)
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_PCIE6_TXSIGMOD_SCHEME_BF_DEF (0x00800000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PCIE12_RXWIDTH_LUT_CFG register description at address offset 0x200
  *
  * Register default value:        0x00039561
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_pcie12_rxwidth_lut_cfg
  * PCIe Gen1&2 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_PCIE12_RXWIDTH_LUT_ENTRY0 : 5;
    ///< PCIe Gen1&2 RxWidth LUT entry 0 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_PCIE12_RXWIDTH_LUT_ENTRY1 : 5;
    ///< PCIe Gen1&2 RxWidth LUT entry 1 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0xB"
    uint32_t PCS_PCIE12_RXWIDTH_LUT_ENTRY2 : 5;
    ///< PCIe Gen1&2 RxWidth LUT entry 2 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x5"
    uint32_t PCS_PCIE12_RXWIDTH_LUT_ENTRY3 : 5;
    ///< PCIe Gen1&2 RxWidth LUT entry 3 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t PCS_PCIE12_RXDATA_UNPACK : 1;
    ///< UP1 1 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCS_PCIE12_RXSIGMODULATION_SCHEME : 2;
    ///< UP1 1 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcie12_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_DEFAULT (0x00039561U)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RD_MASK (0x007fffffU)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_WR_MASK (0x007fffffU)


///< PCIe Gen1&2 RxWidth LUT entry 0 - define the datawidth encoded value
///< when i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< PCIe Gen1&2 RxWidth LUT entry 1 - define the datawidth encoded value
///< when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000160)

///< PCIe Gen1&2 RxWidth LUT entry 2 - define the datawidth encoded value
///< when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00001400)

///< PCIe Gen1&2 RxWidth LUT entry 3 - define the datawidth encoded value
///< when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000F8000)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00038000)

///< UP1 1 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00000000)

///< UP1 1 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PCIE34_RXWIDTH_LUT_CFG register description at address offset 0x204
  *
  * Register default value:        0x00131041
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_pcie34_rxwidth_lut_cfg
  * PCIe Gen3&4 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_PCIE34_RXWIDTH_LUT_ENTRY0 : 5;
    ///< PCIe Gen3&4 RxWidth LUT entry 0 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_PCIE34_RXWIDTH_LUT_ENTRY1 : 5;
    ///< PCIe Gen3&4 RxWidth LUT entry 1 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t PCS_PCIE34_RXWIDTH_LUT_ENTRY2 : 5;
    ///< PCIe Gen3&4 RxWidth LUT entry 2 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x4"
    uint32_t PCS_PCIE34_RXWIDTH_LUT_ENTRY3 : 5;
    ///< PCIe Gen3&4 RxWidth LUT entry 3 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="15" ResetValue="0x6"
    uint32_t PCS_PCIE34_RXDATA_UNPACK : 1;
    ///< PCIe 3&4 RxWidth Pack. 0 - Forward full databus width from MAC to
    ///< PMA; 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t PCS_PCIE34_RXSIGMODULATION_SCHEME : 2;
    ///< PCIe Gen3&4 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 -
    ///< Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcie34_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_DEFAULT (0x00131041U)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RD_MASK (0x007fffffU)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_WR_MASK (0x007fffffU)


///< PCIe Gen3&4 RxWidth LUT entry 0 - define the datawidth encoded value
///< when i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< PCIe Gen3&4 RxWidth LUT entry 1 - define the datawidth encoded value
///< when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000040)

///< PCIe Gen3&4 RxWidth LUT entry 2 - define the datawidth encoded value
///< when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00001000)

///< PCIe Gen3&4 RxWidth LUT entry 3 - define the datawidth encoded value
///< when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000F8000)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00030000)

///< PCIe 3&4 RxWidth Pack. 0 - Forward full databus width from MAC to
///< PMA; 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00100000)

///< PCIe Gen3&4 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 -
///< Reserved
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PCIE5_RXWIDTH_LUT_CFG register description at address offset 0x208
  *
  * Register default value:        0x00009882
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_pcie5_rxwidth_lut_cfg
  * PCIe Gen5 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_PCIE5_RXWIDTH_LUT_ENTRY1 : 5;
    ///< PCIe Gen5 RxWidth LUT entry 1 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x2"
    uint32_t PCS_PCIE5_RXWIDTH_LUT_ENTRY2 : 5;
    ///< PCIe Gen5 RxWidth LUT entry 2 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="5" ResetValue="0x4"
    uint32_t PCS_PCIE5_RXWIDTH_LUT_ENTRY3 : 5;
    ///< PCIe Gen5 RxWidth LUT entry 3 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="10" ResetValue="0x6"
    uint32_t PCS_PCIE5_RXDATA_UNPACK : 1;
    ///< PCIe 5 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="15" ResetValue="0x1"
    uint32_t PCS_PCIE5_RXSIGMODULATION_SCHEME : 2;
    ///< PCIe Gen5 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 14;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcie5_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_DEFAULT (0x00009882U)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RD_MASK (0x0003ffffU)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_WR_MASK (0x0003ffffU)


///< PCIe Gen5 RxWidth LUT entry 1 - define the datawidth encoded value
///< when i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000002)

///< PCIe Gen5 RxWidth LUT entry 2 - define the datawidth encoded value
///< when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000080)

///< PCIe Gen5 RxWidth LUT entry 3 - define the datawidth encoded value
///< when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00001800)

///< PCIe 5 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00008000)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00008000)

///< PCIe Gen5 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00030000)
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_PCIE6_RXWIDTH_LUT_CFG register description at address offset 0x20c
  *
  * Register default value:        0x00000CC4
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_pcie6_rxwidth_lut_cfg
  * PCIe Gen6 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_PCIE6_RXWIDTH_LUT_ENTRY2 : 5;
    ///< PCIe Gen6 RxWidth LUT entry 2 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="0" ResetValue="0x4"
    uint32_t PCS_PCIE6_RXWIDTH_LUT_ENTRY3 : 5;
    ///< PCIe Gen6 RxWidth LUT entry 3 - define the datawidth encoded value
    ///< when i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="5" ResetValue="0x6"
    uint32_t PCS_PCIE6_RXDATA_UNPACK : 1;
    ///< PCIe 6 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t PCS_PCIE6_RXSIGMODULATION_SCHEME : 2;
    ///< PCIe Gen6 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="11" ResetValue="0x1"
    uint32_t  : 19;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_pcie6_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_DEFAULT (0x00000cc4U)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RD_MASK (0x00001fffU)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_WR_MASK (0x00001fffU)


///< PCIe Gen6 RxWidth LUT entry 2 - define the datawidth encoded value
///< when i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000004)

///< PCIe Gen6 RxWidth LUT entry 3 - define the datawidth encoded value
///< when i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x000000C0)

///< PCIe 6 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00000400)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00000400)

///< PCIe Gen6 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (11)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00001800)
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000800)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_USB1_TXWIDTH_LUT_CFG register description at address offset 0x210
  *
  * Register default value:        0x00007531
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_usb1_txwidth_lut_cfg
  * USB 1 TxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_USB1_TXWIDTH_LUT_ENTRY0 : 4;
    ///< USB 1 TxWidth LUT entry 0 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_USB1_TXWIDTH_LUT_ENTRY1 : 4;
    ///< USB 1 TxWidth LUT entry 1 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x3"
    uint32_t PCS_USB1_TXWIDTH_LUT_ENTRY2 : 4;
    ///< USB 1 TxWidth LUT entry 2 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x5"
    uint32_t PCS_USB1_TXWIDTH_LUT_ENTRY3 : 4;
    ///< USB 1 TxWidth LUT entry 3 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x7"
    uint32_t PCS_USB1_TXDATA2PMA_PACK : 1;
    ///< USB 1 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t PCS_USB1_TXSIGMODULATION_SCHEME : 2;
    ///< USB 1 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_usb1_txwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_DEFAULT (0x00007531U)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_RD_MASK (0x0007ffffU)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_WR_MASK (0x0007ffffU)


///< USB 1 TxWidth LUT entry 0 - define the datawidth encoded value when
///< i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< USB 1 TxWidth LUT entry 1 - define the datawidth encoded value when
///< i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000030)

///< USB 1 TxWidth LUT entry 2 - define the datawidth encoded value when
///< i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000500)

///< USB 1 TxWidth LUT entry 3 - define the datawidth encoded value when
///< i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00007000)

///< USB 1 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_DEF (0x00000000)

///< USB 1 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_MSK (0x00060000)
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_USB2_TXWIDTH_LUT_CFG register description at address offset 0x214
  *
  * Register default value:        0x00016420
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_usb2_txwidth_lut_cfg
  * USB 2 TxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_USB2_TXWIDTH_LUT_ENTRY0 : 4;
    ///< USB 2 TxWidth LUT entry 0 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t PCS_USB2_TXWIDTH_LUT_ENTRY1 : 4;
    ///< USB 2 TxWidth LUT entry 1 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="4" ResetValue="0x2"
    uint32_t PCS_USB2_TXWIDTH_LUT_ENTRY2 : 4;
    ///< USB 2 TxWidth LUT entry 2 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="8" ResetValue="0x4"
    uint32_t PCS_USB2_TXWIDTH_LUT_ENTRY3 : 4;
    ///< USB 2 TxWidth LUT entry 3 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="12" ResetValue="0x6"
    uint32_t PCS_USB2_TXDATA2PMA_PACK : 1;
    ///< USB 2 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="16" ResetValue="0x1"
    uint32_t PCS_USB2_TXSIGMODULATION_SCHEME : 2;
    ///< USB 2 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t  : 13;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_usb2_txwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_DEFAULT (0x00016420U)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_RD_MASK (0x0007ffffU)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_WR_MASK (0x0007ffffU)


///< USB 2 TxWidth LUT entry 0 - define the datawidth encoded value when
///< i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000000F)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000000)

///< USB 2 TxWidth LUT entry 1 - define the datawidth encoded value when
///< i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 4)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000000F0)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000020)

///< USB 2 TxWidth LUT entry 2 - define the datawidth encoded value when
///< i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY2_BF_OFF ( 8)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00000F00)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00000400)

///< USB 2 TxWidth LUT entry 3 - define the datawidth encoded value when
///< i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY3_BF_OFF (12)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 4)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x0000F000)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00006000)

///< USB 2 TxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_OFF (16)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_MSK (0x00010000)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXDATA2PMA_PACK_BF_DEF (0x00010000)

///< USB 2 Tx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_OFF (17)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_MSK (0x00060000)
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_TXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_USB1_RXWIDTH_LUT_CFG register description at address offset 0x218
  *
  * Register default value:        0x00039461
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_usb1_rxwidth_lut_cfg
  * USB 1 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_USB1_RXWIDTH_LUT_ENTRY0 : 5;
    ///< USB 1 RxWidth LUT entry 0 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_USB1_RXWIDTH_LUT_ENTRY1 : 5;
    ///< USB 1 RxWidth LUT entry 1 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x3"
    uint32_t PCS_USB1_RXWIDTH_LUT_ENTRY2 : 5;
    ///< USB 1 RxWidth LUT entry 2 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x5"
    uint32_t PCS_USB1_RXWIDTH_LUT_ENTRY3 : 5;
    ///< USB 1 RxWidth LUT entry 3 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="15" ResetValue="0x7"
    uint32_t PCS_USB1_RXDATA_UNPACK : 1;
    ///< USB 1 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t PCS_USB1_RXSIGMODULATION_SCHEME : 2;
    ///< USB 1 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_usb1_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_DEFAULT (0x00039461U)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RD_MASK (0x007fffffU)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_WR_MASK (0x007fffffU)


///< USB 1 RxWidth LUT entry 0 - define the datawidth encoded value when
///< i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< USB 1 RxWidth LUT entry 1 - define the datawidth encoded value when
///< i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000060)

///< USB 1 RxWidth LUT entry 2 - define the datawidth encoded value when
///< i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00001400)

///< USB 1 RxWidth LUT entry 3 - define the datawidth encoded value when
///< i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000F8000)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00038000)

///< USB 1 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00000000)

///< USB 1 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_USB2_RXWIDTH_LUT_CFG register description at address offset 0x21c
  *
  * Register default value:        0x00131041
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_usb2_rxwidth_lut_cfg
  * USB 2 RxWidth LUT Config
  */

typedef union {
  struct {
    uint32_t PCS_USB2_RXWIDTH_LUT_ENTRY0 : 5;
    ///< USB 2 RxWidth LUT entry 0 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t PCS_USB2_RXWIDTH_LUT_ENTRY1 : 5;
    ///< USB 2 RxWidth LUT entry 1 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 1
    ///< AccessType="RW" BitOffset="5" ResetValue="0x2"
    uint32_t PCS_USB2_RXWIDTH_LUT_ENTRY2 : 5;
    ///< USB 2 RxWidth LUT entry 2 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 2
    ///< AccessType="RW" BitOffset="10" ResetValue="0x4"
    uint32_t PCS_USB2_RXWIDTH_LUT_ENTRY3 : 5;
    ///< USB 2 RxWidth LUT entry 3 - define the datawidth encoded value when
    ///< i_ctl_pipe_width = 3
    ///< AccessType="RW" BitOffset="15" ResetValue="0x6"
    uint32_t PCS_USB2_RXDATA_UNPACK : 1;
    ///< USB 2 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
    ///< 1 - only forward 8 bits in every 10 bits to POMA
    ///< AccessType="RW" BitOffset="20" ResetValue="0x1"
    uint32_t PCS_USB2_RXSIGMODULATION_SCHEME : 2;
    ///< USB 2 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
    ///< AccessType="RW" BitOffset="21" ResetValue="0x0"
    uint32_t  : 9;
    ///< Reserved
    ///< AccessType="RO" BitOffset="23" ResetValue="None"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_usb2_rxwidth_lut_cfg_reg_t;

#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_DEFAULT (0x00131041U)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RD_MASK (0x007fffffU)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_WR_MASK (0x007fffffU)


///< USB 2 RxWidth LUT entry 0 - define the datawidth encoded value when
///< i_ctl_pipe_width = 0
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY0_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY0_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY0_BF_MSK (0x0000001F)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY0_BF_DEF (0x00000001)

///< USB 2 RxWidth LUT entry 1 - define the datawidth encoded value when
///< i_ctl_pipe_width = 1
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY1_BF_OFF ( 5)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY1_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY1_BF_MSK (0x000003E0)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY1_BF_DEF (0x00000040)

///< USB 2 RxWidth LUT entry 2 - define the datawidth encoded value when
///< i_ctl_pipe_width = 2
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY2_BF_OFF (10)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY2_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY2_BF_MSK (0x00007C00)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY2_BF_DEF (0x00001000)

///< USB 2 RxWidth LUT entry 3 - define the datawidth encoded value when
///< i_ctl_pipe_width = 3
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY3_BF_OFF (15)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY3_BF_WID ( 5)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY3_BF_MSK (0x000F8000)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ENTRY3_BF_DEF (0x00030000)

///< USB 2 RxWidth Pack. 0 - Forward full databus width from MAC to PMA;
///< 1 - only forward 8 bits in every 10 bits to POMA
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_OFF (20)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_WID ( 1)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_MSK (0x00100000)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXDATA_UNPACK_BF_DEF (0x00100000)

///< USB 2 Rx signal modulation scheme.  0 - NRZ; 1 - PAM4; 2/3 - Reserved
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_OFF (21)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_WID ( 2)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_MSK (0x00600000)
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_RXSIGMOD_SCHEME_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_MISC_RW register description at address offset 0x220
  *
  * Register default value:        0x12345678
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_misc_rw
  * Miscellaneous RW
  */

typedef union {
  struct {
    uint32_t PCS_MISC : 32;
    ///< Engineering Only
    ///< AccessType="RW" BitOffset="0" ResetValue="0x12345678"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_misc_rw_reg_t;

#define PCS_SERDES_LANE_MSG_MISC_RW_DEFAULT (0x12345678U)
#define PCS_SERDES_LANE_MSG_MISC_RW_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_MISC_RW_WR_MASK (0xffffffffU)


///< Engineering Only
#define PCS_SERDES_LANE_MSG_MISC_RW_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_MISC_RW_BF_WID (32)
#define PCS_SERDES_LANE_MSG_MISC_RW_BF_MSK (0xFFFFFFFF)
#define PCS_SERDES_LANE_MSG_MISC_RW_BF_DEF (0x12345678)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_MISC_RO register description at address offset 0x224
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_misc_ro
  * Miscellaneous RO
  */

typedef union {
  struct {
    uint32_t PCS_MISC_RO : 32;
    ///< Engineering Only
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_misc_ro_reg_t;

#define PCS_SERDES_LANE_MSG_MISC_RO_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_MISC_RO_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_MISC_RO_WR_MASK (0x00000000U)


///< Engineering Only
#define PCS_SERDES_LANE_MSG_MISC_RO_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_MISC_RO_BF_WID (32)
#define PCS_SERDES_LANE_MSG_MISC_RO_BF_MSK (0xFFFFFFFF)
#define PCS_SERDES_LANE_MSG_MISC_RO_BF_DEF (0x00000000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_LANE_RW_SPARE register description at address offset 0x3dc
  *
  * Register default value:        0xFFFF0000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_lane_rw_spare
  * PCS Spare RW
  */

typedef union {
  struct {
    uint32_t PCS_LANE_RW_SPARE : 32;
    ///< Spare RW - Reseved for future used
    ///< AccessType="RW" BitOffset="0" ResetValue="0xFFFF0000"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_rw_spare_reg_t;

#define PCS_SERDES_LANE_MSG_RW_SPARE_DEFAULT (0xffff0000U)
#define PCS_SERDES_LANE_MSG_RW_SPARE_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_RW_SPARE_WR_MASK (0xffffffffU)


///< Spare RW - Reseved for future used
#define PCS_SERDES_LANE_MSG_RW_SPARE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_RW_SPARE_BF_WID (32)
#define PCS_SERDES_LANE_MSG_RW_SPARE_BF_MSK (0xFFFFFFFF)
#define PCS_SERDES_LANE_MSG_RW_SPARE_BF_DEF (0xFFFF0000)


/** @brief PCS_SERDES_LANE_REGS_MSG_PCS_SERDES_LANE_REGS_PCS_LANE_RO_SPARE register description at address offset 0x3e0
  *
  * Register default value:        0x00000000
  * Register full path in IP: PCS_SERDES_LANE_regs_MSG/PCS_SERDES_LANE_regs/pcs_lane_ro_spare
  * PCS Spare RO
  */

typedef union {
  struct {
    uint32_t PCS_LANE_RO_SPARE : 32;
    ///< Spare RO - Reseved for future used
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} pcs_serdes_lane_msg_ro_spare_reg_t;

#define PCS_SERDES_LANE_MSG_RO_SPARE_DEFAULT (0x00000000U)
#define PCS_SERDES_LANE_MSG_RO_SPARE_RD_MASK (0xffffffffU)
#define PCS_SERDES_LANE_MSG_RO_SPARE_WR_MASK (0x00000000U)


///< Spare RO - Reseved for future used
#define PCS_SERDES_LANE_MSG_RO_SPARE_BF_OFF ( 0)
#define PCS_SERDES_LANE_MSG_RO_SPARE_BF_WID (32)
#define PCS_SERDES_LANE_MSG_RO_SPARE_BF_MSK (0xFFFFFFFF)
#define PCS_SERDES_LANE_MSG_RO_SPARE_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define PCS_SERDES_LANE_MSG_CFG_REG(_BASE) ((pcs_serdes_lane_msg_cfg_reg_t*) PCS_SERDES_LANE_MSG_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PHYSTAT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_phystat_cfg_reg_t*) PCS_SERDES_LANE_MSG_PHYSTAT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_TX_CFG_REG(_BASE) ((pcs_serdes_lane_msg_tx_cfg_reg_t*) PCS_SERDES_LANE_MSG_TX_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_RX_CFG_REG(_BASE) ((pcs_serdes_lane_msg_rx_cfg_reg_t*) PCS_SERDES_LANE_MSG_RX_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_MBUS_CFG_REG(_BASE) ((pcs_serdes_lane_msg_mbus_cfg_reg_t*) PCS_SERDES_LANE_MSG_MBUS_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_MBUS_STAT_REG(_BASE) ((pcs_serdes_lane_msg_mbus_stat_reg_t*) PCS_SERDES_LANE_MSG_MBUS_STAT_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_tx_rate_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_tx_rate_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_TX_RATE_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_usb_tx_rate_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_TX_RATE_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_upi_tx_rate_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_TX_RATE_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_2_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_3_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_4_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_5_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_PCIE_RX_RATE_CFG_5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_usb_rx_rate_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_usb_rx_rate_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_USB_RX_RATE_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_2_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_REG(_BASE) ((pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_3_reg_t*) PCS_SERDES_LANE_MSG_PCSIF2PMA_UPI_RX_RATE_CFG_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_2_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_3_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_4_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_5_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_6_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_6_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_7_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN1_CFG_7_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_2_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_3_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN1_CFG_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_2_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_3_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_4_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_5_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_6_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_6_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_7_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_C0_GEN2_CFG_7_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_0_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_1_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_2_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_REG(_BASE) ((pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_3_reg_t*) PCS_SERDES_LANE_MSG_PCSTXDRV_TXFFE_CP1_GEN2_CFG_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst0_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst1_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst2_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst3_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst4_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst5_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst6_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST6_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst7_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST7_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst8_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST8_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst9_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST9_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen3_prst10_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN3_PRST10_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst0_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst1_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst2_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst3_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst4_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst5_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst6_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST6_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst7_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST7_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst8_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST8_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst9_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST9_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen4_prst10_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN4_PRST10_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst0_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst1_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst2_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst3_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst4_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst5_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst6_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST6_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst7_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST7_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst8_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST8_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst9_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST9_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen5_prst10_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN5_PRST10_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst0_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst1_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst2_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst3_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst4_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST4_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst5_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST5_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst6_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST6_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst7_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST7_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst8_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST8_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst9_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST9_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_gen6_prst10_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_GEN6_PRST10_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_REG(_BASE) ((pcs_serdes_lane_msg_pcslfps_ctrl_reg_t*) PCS_SERDES_LANE_MSG_PCSLFPS_CTRL_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_local_fslf_gen34_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN34_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_REG(_BASE) ((pcs_serdes_lane_msg_pcstx_local_fslf_gen56_reg_t*) PCS_SERDES_LANE_MSG_PCSTX_LOCAL_FSLF_GEN56_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_REG(_BASE) ((pcs_serdes_lane_msg_pcspipe_stat_clr_reg_t*) PCS_SERDES_LANE_MSG_PCSPIPE_STAT_CLR_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_REG(_BASE) ((pcs_serdes_lane_msg_ovrd_update_ctrl_reg_t*) PCS_SERDES_LANE_MSG_OVRD_UPDATE_CTRL_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_OVRD_EN_0_REG(_BASE) ((pcs_serdes_lane_msg_ovrd_en_0_reg_t*) PCS_SERDES_LANE_MSG_OVRD_EN_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_OVRD_0_REG(_BASE) ((pcs_serdes_lane_msg_ovrd_0_reg_t*) PCS_SERDES_LANE_MSG_OVRD_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_OVRD_1_REG(_BASE) ((pcs_serdes_lane_msg_ovrd_1_reg_t*) PCS_SERDES_LANE_MSG_OVRD_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_OVRD_2_REG(_BASE) ((pcs_serdes_lane_msg_ovrd_2_reg_t*) PCS_SERDES_LANE_MSG_OVRD_2_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_OVRD_3_REG(_BASE) ((pcs_serdes_lane_msg_ovrd_3_reg_t*) PCS_SERDES_LANE_MSG_OVRD_3_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCSFSM_RO_REG(_BASE) ((pcs_serdes_lane_msg_pcsfsm_ro_reg_t*) PCS_SERDES_LANE_MSG_PCSFSM_RO_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_CFG_RO_0_REG(_BASE) ((pcs_serdes_lane_msg_cfg_ro_0_reg_t*) PCS_SERDES_LANE_MSG_CFG_RO_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_CFG_RO_1_REG(_BASE) ((pcs_serdes_lane_msg_cfg_ro_1_reg_t*) PCS_SERDES_LANE_MSG_CFG_RO_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_CFG_RO_CLR_REG(_BASE) ((pcs_serdes_lane_msg_cfg_ro_clr_reg_t*) PCS_SERDES_LANE_MSG_CFG_RO_CLR_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_TX_RO_0_REG(_BASE) ((pcs_serdes_lane_msg_tx_ro_0_reg_t*) PCS_SERDES_LANE_MSG_TX_RO_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_TX_RO_1_REG(_BASE) ((pcs_serdes_lane_msg_tx_ro_1_reg_t*) PCS_SERDES_LANE_MSG_TX_RO_1_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_RX_RO_0_REG(_BASE) ((pcs_serdes_lane_msg_rx_ro_0_reg_t*) PCS_SERDES_LANE_MSG_RX_RO_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_TSTBUS_CFG_REG(_BASE) ((pcs_serdes_lane_msg_tstbus_cfg_reg_t*) PCS_SERDES_LANE_MSG_TSTBUS_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_REG(_BASE) ((pcs_serdes_lane_msg_testbus_stat_0_reg_t*) PCS_SERDES_LANE_MSG_TESTBUS_STAT_0_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_DEEPPM_CFG_REG(_BASE) ((pcs_serdes_lane_msg_deeppm_cfg_reg_t*) PCS_SERDES_LANE_MSG_DEEPPM_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_REG(_BASE) ((pcs_serdes_lane_msg_linkfbdirchg_cfg_reg_t*) PCS_SERDES_LANE_MSG_LINKFBDIRCHG_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_upi1_txwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_UPI1_TXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_upi2plus_txwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_UPI2PLUS_TXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_upi1_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_UPI1_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_upi2plus_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_UPI2PLUS_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcie12_txwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCIE12_TXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcie3plus_txwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCIE3PLUS_TXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcie12_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCIE12_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcie34_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCIE34_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcie5_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCIE5_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_pcie6_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_PCIE6_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_usb1_txwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_USB1_TXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_usb2_txwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_USB2_TXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_usb1_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_USB1_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_REG(_BASE) ((pcs_serdes_lane_msg_usb2_rxwidth_lut_cfg_reg_t*) PCS_SERDES_LANE_MSG_USB2_RXWIDTH_LUT_CFG_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_MISC_RW_REG(_BASE) ((pcs_serdes_lane_msg_misc_rw_reg_t*) PCS_SERDES_LANE_MSG_MISC_RW_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_MISC_RO_REG(_BASE) ((pcs_serdes_lane_msg_misc_ro_reg_t*) PCS_SERDES_LANE_MSG_MISC_RO_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_RW_SPARE_REG(_BASE) ((pcs_serdes_lane_msg_rw_spare_reg_t*) PCS_SERDES_LANE_MSG_RW_SPARE_ADR(_BASE))
#define PCS_SERDES_LANE_MSG_RO_SPARE_REG(_BASE) ((pcs_serdes_lane_msg_ro_spare_reg_t*) PCS_SERDES_LANE_MSG_RO_SPARE_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    pcs_serdes_lane_msg_cfg_reg_t PCS_LANE_CFG; /*< Address offset = 0x0 */
    pcs_serdes_lane_msg_phystat_cfg_reg_t PCS_PHYSTAT_CFG; /*< Address offset = 0x4 */
    pcs_serdes_lane_msg_tx_cfg_reg_t PCS_TX_CFG; /*< Address offset = 0x8 */
    pcs_serdes_lane_msg_rx_cfg_reg_t PCS_RX_CFG; /*< Address offset = 0xc */
    pcs_serdes_lane_msg_mbus_cfg_reg_t PCS_MBUS_CFG; /*< Address offset = 0x10 */
    pcs_serdes_lane_msg_mbus_stat_reg_t PCS_MBUS_STAT; /*< Address offset = 0x14 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_tx_rate_cfg_0_reg_t PCSIF2PMA_PCIE_TX_RATE_CFG_0; /*< Address offset = 0x18 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_tx_rate_cfg_1_reg_t PCSIF2PMA_PCIE_TX_RATE_CFG_1; /*< Address offset = 0x1c */
    pcs_serdes_lane_msg_pcsif2pma_usb_tx_rate_cfg_reg_t PCSIF2PMA_USB_TX_RATE_CFG; /*< Address offset = 0x20 */
    pcs_serdes_lane_msg_pcsif2pma_upi_tx_rate_cfg_reg_t PCSIF2PMA_UPI_TX_RATE_CFG; /*< Address offset = 0x24 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_0_reg_t PCSIF2PMA_PCIE_RX_RATE_CFG_0; /*< Address offset = 0x28 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_1_reg_t PCSIF2PMA_PCIE_RX_RATE_CFG_1; /*< Address offset = 0x2c */
    pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_2_reg_t PCSIF2PMA_PCIE_RX_RATE_CFG_2; /*< Address offset = 0x30 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_3_reg_t PCSIF2PMA_PCIE_RX_RATE_CFG_3; /*< Address offset = 0x34 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_4_reg_t PCSIF2PMA_PCIE_RX_RATE_CFG_4; /*< Address offset = 0x38 */
    pcs_serdes_lane_msg_pcsif2pma_pcie_rx_rate_cfg_5_reg_t PCSIF2PMA_PCIE_RX_RATE_CFG_5; /*< Address offset = 0x3c */
    pcs_serdes_lane_msg_pcsif2pma_usb_rx_rate_cfg_0_reg_t PCSIF2PMA_USB_RX_RATE_CFG_0; /*< Address offset = 0x40 */
    pcs_serdes_lane_msg_pcsif2pma_usb_rx_rate_cfg_1_reg_t PCSIF2PMA_USB_RX_RATE_CFG_1; /*< Address offset = 0x44 */
    pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_0_reg_t PCSIF2PMA_UPI_RX_RATE_CFG_0; /*< Address offset = 0x48 */
    pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_1_reg_t PCSIF2PMA_UPI_RX_RATE_CFG_1; /*< Address offset = 0x4c */
    pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_2_reg_t PCSIF2PMA_UPI_RX_RATE_CFG_2; /*< Address offset = 0x50 */
    pcs_serdes_lane_msg_pcsif2pma_upi_rx_rate_cfg_3_reg_t PCSIF2PMA_UPI_RX_RATE_CFG_3; /*< Address offset = 0x54 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_0_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_0; /*< Address offset = 0x58 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_1_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_1; /*< Address offset = 0x5c */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_2_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_2; /*< Address offset = 0x60 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_3_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_3; /*< Address offset = 0x64 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_4_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_4; /*< Address offset = 0x68 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_5_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_5; /*< Address offset = 0x6c */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_6_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_6; /*< Address offset = 0x70 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen1_cfg_7_reg_t PCSTXDRV_TXFFE_C0_GEN1_CFG_7; /*< Address offset = 0x74 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_0_reg_t PCSTXDRV_TXFFE_CP1_GEN1_CFG_0; /*< Address offset = 0x78 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_1_reg_t PCSTXDRV_TXFFE_CP1_GEN1_CFG_1; /*< Address offset = 0x7c */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_2_reg_t PCSTXDRV_TXFFE_CP1_GEN1_CFG_2; /*< Address offset = 0x80 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen1_cfg_3_reg_t PCSTXDRV_TXFFE_CP1_GEN1_CFG_3; /*< Address offset = 0x84 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_0_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_0; /*< Address offset = 0x88 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_1_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_1; /*< Address offset = 0x8c */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_2_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_2; /*< Address offset = 0x90 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_3_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_3; /*< Address offset = 0x94 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_4_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_4; /*< Address offset = 0x98 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_5_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_5; /*< Address offset = 0x9c */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_6_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_6; /*< Address offset = 0xa0 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_c0_gen2_cfg_7_reg_t PCSTXDRV_TXFFE_C0_GEN2_CFG_7; /*< Address offset = 0xa4 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_0_reg_t PCSTXDRV_TXFFE_CP1_GEN2_CFG_0; /*< Address offset = 0xa8 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_1_reg_t PCSTXDRV_TXFFE_CP1_GEN2_CFG_1; /*< Address offset = 0xac */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_2_reg_t PCSTXDRV_TXFFE_CP1_GEN2_CFG_2; /*< Address offset = 0xb0 */
    pcs_serdes_lane_msg_pcstxdrv_txffe_cp1_gen2_cfg_3_reg_t PCSTXDRV_TXFFE_CP1_GEN2_CFG_3; /*< Address offset = 0xb4 */
    pcs_serdes_lane_msg_pcstx_gen3_prst0_reg_t PCSTX_GEN3_PRST0; /*< Address offset = 0xb8 */
    pcs_serdes_lane_msg_pcstx_gen3_prst1_reg_t PCSTX_GEN3_PRST1; /*< Address offset = 0xbc */
    pcs_serdes_lane_msg_pcstx_gen3_prst2_reg_t PCSTX_GEN3_PRST2; /*< Address offset = 0xc0 */
    pcs_serdes_lane_msg_pcstx_gen3_prst3_reg_t PCSTX_GEN3_PRST3; /*< Address offset = 0xc4 */
    pcs_serdes_lane_msg_pcstx_gen3_prst4_reg_t PCSTX_GEN3_PRST4; /*< Address offset = 0xc8 */
    pcs_serdes_lane_msg_pcstx_gen3_prst5_reg_t PCSTX_GEN3_PRST5; /*< Address offset = 0xcc */
    pcs_serdes_lane_msg_pcstx_gen3_prst6_reg_t PCSTX_GEN3_PRST6; /*< Address offset = 0xd0 */
    pcs_serdes_lane_msg_pcstx_gen3_prst7_reg_t PCSTX_GEN3_PRST7; /*< Address offset = 0xd4 */
    pcs_serdes_lane_msg_pcstx_gen3_prst8_reg_t PCSTX_GEN3_PRST8; /*< Address offset = 0xd8 */
    pcs_serdes_lane_msg_pcstx_gen3_prst9_reg_t PCSTX_GEN3_PRST9; /*< Address offset = 0xdc */
    pcs_serdes_lane_msg_pcstx_gen3_prst10_reg_t PCSTX_GEN3_PRST10; /*< Address offset = 0xe0 */
    pcs_serdes_lane_msg_pcstx_gen4_prst0_reg_t PCSTX_GEN4_PRST0; /*< Address offset = 0xe4 */
    pcs_serdes_lane_msg_pcstx_gen4_prst1_reg_t PCSTX_GEN4_PRST1; /*< Address offset = 0xe8 */
    pcs_serdes_lane_msg_pcstx_gen4_prst2_reg_t PCSTX_GEN4_PRST2; /*< Address offset = 0xec */
    pcs_serdes_lane_msg_pcstx_gen4_prst3_reg_t PCSTX_GEN4_PRST3; /*< Address offset = 0xf0 */
    pcs_serdes_lane_msg_pcstx_gen4_prst4_reg_t PCSTX_GEN4_PRST4; /*< Address offset = 0xf4 */
    pcs_serdes_lane_msg_pcstx_gen4_prst5_reg_t PCSTX_GEN4_PRST5; /*< Address offset = 0xf8 */
    pcs_serdes_lane_msg_pcstx_gen4_prst6_reg_t PCSTX_GEN4_PRST6; /*< Address offset = 0xfc */
    pcs_serdes_lane_msg_pcstx_gen4_prst7_reg_t PCSTX_GEN4_PRST7; /*< Address offset = 0x100 */
    pcs_serdes_lane_msg_pcstx_gen4_prst8_reg_t PCSTX_GEN4_PRST8; /*< Address offset = 0x104 */
    pcs_serdes_lane_msg_pcstx_gen4_prst9_reg_t PCSTX_GEN4_PRST9; /*< Address offset = 0x108 */
    pcs_serdes_lane_msg_pcstx_gen4_prst10_reg_t PCSTX_GEN4_PRST10; /*< Address offset = 0x10c */
    pcs_serdes_lane_msg_pcstx_gen5_prst0_reg_t PCSTX_GEN5_PRST0; /*< Address offset = 0x110 */
    pcs_serdes_lane_msg_pcstx_gen5_prst1_reg_t PCSTX_GEN5_PRST1; /*< Address offset = 0x114 */
    pcs_serdes_lane_msg_pcstx_gen5_prst2_reg_t PCSTX_GEN5_PRST2; /*< Address offset = 0x118 */
    pcs_serdes_lane_msg_pcstx_gen5_prst3_reg_t PCSTX_GEN5_PRST3; /*< Address offset = 0x11c */
    pcs_serdes_lane_msg_pcstx_gen5_prst4_reg_t PCSTX_GEN5_PRST4; /*< Address offset = 0x120 */
    pcs_serdes_lane_msg_pcstx_gen5_prst5_reg_t PCSTX_GEN5_PRST5; /*< Address offset = 0x124 */
    pcs_serdes_lane_msg_pcstx_gen5_prst6_reg_t PCSTX_GEN5_PRST6; /*< Address offset = 0x128 */
    pcs_serdes_lane_msg_pcstx_gen5_prst7_reg_t PCSTX_GEN5_PRST7; /*< Address offset = 0x12c */
    pcs_serdes_lane_msg_pcstx_gen5_prst8_reg_t PCSTX_GEN5_PRST8; /*< Address offset = 0x130 */
    pcs_serdes_lane_msg_pcstx_gen5_prst9_reg_t PCSTX_GEN5_PRST9; /*< Address offset = 0x134 */
    pcs_serdes_lane_msg_pcstx_gen5_prst10_reg_t PCSTX_GEN5_PRST10; /*< Address offset = 0x138 */
    pcs_serdes_lane_msg_pcstx_gen6_prst0_reg_t PCSTX_GEN6_PRST0; /*< Address offset = 0x13c */
    pcs_serdes_lane_msg_pcstx_gen6_prst1_reg_t PCSTX_GEN6_PRST1; /*< Address offset = 0x140 */
    pcs_serdes_lane_msg_pcstx_gen6_prst2_reg_t PCSTX_GEN6_PRST2; /*< Address offset = 0x144 */
    pcs_serdes_lane_msg_pcstx_gen6_prst3_reg_t PCSTX_GEN6_PRST3; /*< Address offset = 0x148 */
    pcs_serdes_lane_msg_pcstx_gen6_prst4_reg_t PCSTX_GEN6_PRST4; /*< Address offset = 0x14c */
    pcs_serdes_lane_msg_pcstx_gen6_prst5_reg_t PCSTX_GEN6_PRST5; /*< Address offset = 0x150 */
    pcs_serdes_lane_msg_pcstx_gen6_prst6_reg_t PCSTX_GEN6_PRST6; /*< Address offset = 0x154 */
    pcs_serdes_lane_msg_pcstx_gen6_prst7_reg_t PCSTX_GEN6_PRST7; /*< Address offset = 0x158 */
    pcs_serdes_lane_msg_pcstx_gen6_prst8_reg_t PCSTX_GEN6_PRST8; /*< Address offset = 0x15c */
    pcs_serdes_lane_msg_pcstx_gen6_prst9_reg_t PCSTX_GEN6_PRST9; /*< Address offset = 0x160 */
    pcs_serdes_lane_msg_pcstx_gen6_prst10_reg_t PCSTX_GEN6_PRST10; /*< Address offset = 0x164 */
    pcs_serdes_lane_msg_pcslfps_ctrl_reg_t PCSLFPS_CTRL; /*< Address offset = 0x168 */
    pcs_serdes_lane_msg_pcstx_local_fslf_gen34_reg_t PCSTX_LOCAL_FSLF_GEN34; /*< Address offset = 0x16c */
    pcs_serdes_lane_msg_pcstx_local_fslf_gen56_reg_t PCSTX_LOCAL_FSLF_GEN56; /*< Address offset = 0x170 */
    pcs_serdes_lane_msg_pcspipe_stat_clr_reg_t PCSPIPE_STAT_CLR; /*< Address offset = 0x174 */
    pcs_serdes_lane_msg_ovrd_update_ctrl_reg_t PCS_OVRD_UPDATE_CTRL; /*< Address offset = 0x178 */
    pcs_serdes_lane_msg_ovrd_en_0_reg_t PCS_OVRD_EN_0; /*< Address offset = 0x17c */
    pcs_serdes_lane_msg_ovrd_0_reg_t PCS_OVRD_0; /*< Address offset = 0x180 */
    pcs_serdes_lane_msg_ovrd_1_reg_t PCS_OVRD_1; /*< Address offset = 0x184 */
    pcs_serdes_lane_msg_ovrd_2_reg_t PCS_OVRD_2; /*< Address offset = 0x188 */
    pcs_serdes_lane_msg_ovrd_3_reg_t PCS_OVRD_3; /*< Address offset = 0x18c */
    pcs_serdes_lane_msg_pcsfsm_ro_reg_t PCSFSM_RO; /*< Address offset = 0x190 */
    pcs_serdes_lane_msg_cfg_ro_0_reg_t PCS_CFG_RO_0; /*< Address offset = 0x194 */
    pcs_serdes_lane_msg_cfg_ro_1_reg_t PCS_CFG_RO_1; /*< Address offset = 0x198 */
    pcs_serdes_lane_msg_cfg_ro_clr_reg_t PCS_CFG_RO_CLR; /*< Address offset = 0x19c */
    pcs_serdes_lane_msg_tx_ro_0_reg_t PCS_TX_RO_0; /*< Address offset = 0x1a0 */
    pcs_serdes_lane_msg_tx_ro_1_reg_t PCS_TX_RO_1; /*< Address offset = 0x1a4 */
    pcs_serdes_lane_msg_rx_ro_0_reg_t PCS_RX_RO_0; /*< Address offset = 0x1a8 */
    pcs_serdes_lane_msg_tstbus_cfg_reg_t PCS_TSTBUS_CFG; /*< Address offset = 0x1ac */
    pcs_serdes_lane_msg_testbus_stat_0_reg_t PCS_TESTBUS_STAT_0; /*< Address offset = 0x1b0 */
    pcs_serdes_lane_msg_deeppm_cfg_reg_t PCS_DEEPPM_CFG; /*< Address offset = 0x1b4 */
    pcs_serdes_lane_msg_linkfbdirchg_cfg_reg_t PCS_LINKFBDIRCHG_CFG; /*< Address offset = 0x1b8 */
    const uint8_t        reservedArea0 [44];  /*< Address offset = 0x1bc */
    pcs_serdes_lane_msg_upi1_txwidth_lut_cfg_reg_t PCS_UPI1_TXWIDTH_LUT_CFG; /*< Address offset = 0x1e8 */
    pcs_serdes_lane_msg_upi2plus_txwidth_lut_cfg_reg_t PCS_UPI2PLUS_TXWIDTH_LUT_CFG; /*< Address offset = 0x1ec */
    pcs_serdes_lane_msg_upi1_rxwidth_lut_cfg_reg_t PCS_UPI1_RXWIDTH_LUT_CFG; /*< Address offset = 0x1f0 */
    pcs_serdes_lane_msg_upi2plus_rxwidth_lut_cfg_reg_t PCS_UPI2PLUS_RXWIDTH_LUT_CFG; /*< Address offset = 0x1f4 */
    pcs_serdes_lane_msg_pcie12_txwidth_lut_cfg_reg_t PCS_PCIE12_TXWIDTH_LUT_CFG; /*< Address offset = 0x1f8 */
    pcs_serdes_lane_msg_pcie3plus_txwidth_lut_cfg_reg_t PCS_PCIE3PLUS_TXWIDTH_LUT_CFG; /*< Address offset = 0x1fc */
    pcs_serdes_lane_msg_pcie12_rxwidth_lut_cfg_reg_t PCS_PCIE12_RXWIDTH_LUT_CFG; /*< Address offset = 0x200 */
    pcs_serdes_lane_msg_pcie34_rxwidth_lut_cfg_reg_t PCS_PCIE34_RXWIDTH_LUT_CFG; /*< Address offset = 0x204 */
    pcs_serdes_lane_msg_pcie5_rxwidth_lut_cfg_reg_t PCS_PCIE5_RXWIDTH_LUT_CFG; /*< Address offset = 0x208 */
    pcs_serdes_lane_msg_pcie6_rxwidth_lut_cfg_reg_t PCS_PCIE6_RXWIDTH_LUT_CFG; /*< Address offset = 0x20c */
    pcs_serdes_lane_msg_usb1_txwidth_lut_cfg_reg_t PCS_USB1_TXWIDTH_LUT_CFG; /*< Address offset = 0x210 */
    pcs_serdes_lane_msg_usb2_txwidth_lut_cfg_reg_t PCS_USB2_TXWIDTH_LUT_CFG; /*< Address offset = 0x214 */
    pcs_serdes_lane_msg_usb1_rxwidth_lut_cfg_reg_t PCS_USB1_RXWIDTH_LUT_CFG; /*< Address offset = 0x218 */
    pcs_serdes_lane_msg_usb2_rxwidth_lut_cfg_reg_t PCS_USB2_RXWIDTH_LUT_CFG; /*< Address offset = 0x21c */
    pcs_serdes_lane_msg_misc_rw_reg_t PCS_MISC_RW; /*< Address offset = 0x220 */
    pcs_serdes_lane_msg_misc_ro_reg_t PCS_MISC_RO; /*< Address offset = 0x224 */
    const uint8_t        reservedArea1 [436]; /*< Address offset = 0x228 */
    pcs_serdes_lane_msg_rw_spare_reg_t PCS_LANE_RW_SPARE; /*< Address offset = 0x3dc */
    pcs_serdes_lane_msg_ro_spare_reg_t PCS_LANE_RO_SPARE; /*< Address offset = 0x3e0 */
} pcs_serdes_lane_msg_t;     // size: 0x0204

// AddressSpace struct pointer
//
#define DLNK_JESD0_PHY_PCS_SERDES_LANE_GLOBAL  ((pcs_serdes_lane_msg_t*) DLNK_JESD0_PHY_PCS_SERDES_LANE_GLOBAL_BASE)
#define DLNK_JESD0_PHY_PCS_SERDES_LANE0        ((pcs_serdes_lane_msg_t*) DLNK_JESD0_PHY_PCS_SERDES_LANE0_BASE)
#define DLNK_JESD0_PHY_PCS_SERDES_LANE1        ((pcs_serdes_lane_msg_t*) DLNK_JESD0_PHY_PCS_SERDES_LANE1_BASE)
#define DLNK_JESD0_PHY_PCS_SERDES_LANE2        ((pcs_serdes_lane_msg_t*) DLNK_JESD0_PHY_PCS_SERDES_LANE2_BASE)
#define DLNK_JESD0_PHY_PCS_SERDES_LANE3        ((pcs_serdes_lane_msg_t*) DLNK_JESD0_PHY_PCS_SERDES_LANE3_BASE)
#define DLNK_JESD1_PHY_PCS_SERDES_LANE_GLOBAL  ((pcs_serdes_lane_msg_t*) DLNK_JESD1_PHY_PCS_SERDES_LANE_GLOBAL_BASE)
#define DLNK_JESD1_PHY_PCS_SERDES_LANE0        ((pcs_serdes_lane_msg_t*) DLNK_JESD1_PHY_PCS_SERDES_LANE0_BASE)
#define DLNK_JESD1_PHY_PCS_SERDES_LANE1        ((pcs_serdes_lane_msg_t*) DLNK_JESD1_PHY_PCS_SERDES_LANE1_BASE)
#define DLNK_JESD1_PHY_PCS_SERDES_LANE2        ((pcs_serdes_lane_msg_t*) DLNK_JESD1_PHY_PCS_SERDES_LANE2_BASE)
#define DLNK_JESD1_PHY_PCS_SERDES_LANE3        ((pcs_serdes_lane_msg_t*) DLNK_JESD1_PHY_PCS_SERDES_LANE3_BASE)
#define DLNK_JESD2_PHY_PCS_SERDES_LANE_GLOBAL  ((pcs_serdes_lane_msg_t*) DLNK_JESD2_PHY_PCS_SERDES_LANE_GLOBAL_BASE)
#define DLNK_JESD2_PHY_PCS_SERDES_LANE0        ((pcs_serdes_lane_msg_t*) DLNK_JESD2_PHY_PCS_SERDES_LANE0_BASE)
#define DLNK_JESD2_PHY_PCS_SERDES_LANE1        ((pcs_serdes_lane_msg_t*) DLNK_JESD2_PHY_PCS_SERDES_LANE1_BASE)
#define DLNK_JESD2_PHY_PCS_SERDES_LANE2        ((pcs_serdes_lane_msg_t*) DLNK_JESD2_PHY_PCS_SERDES_LANE2_BASE)
#define DLNK_JESD2_PHY_PCS_SERDES_LANE3        ((pcs_serdes_lane_msg_t*) DLNK_JESD2_PHY_PCS_SERDES_LANE3_BASE)
#define DLNK_JESD3_PHY_PCS_SERDES_LANE_GLOBAL  ((pcs_serdes_lane_msg_t*) DLNK_JESD3_PHY_PCS_SERDES_LANE_GLOBAL_BASE)
#define DLNK_JESD3_PHY_PCS_SERDES_LANE0        ((pcs_serdes_lane_msg_t*) DLNK_JESD3_PHY_PCS_SERDES_LANE0_BASE)
#define DLNK_JESD3_PHY_PCS_SERDES_LANE1        ((pcs_serdes_lane_msg_t*) DLNK_JESD3_PHY_PCS_SERDES_LANE1_BASE)
#define DLNK_JESD3_PHY_PCS_SERDES_LANE2        ((pcs_serdes_lane_msg_t*) DLNK_JESD3_PHY_PCS_SERDES_LANE2_BASE)
#define DLNK_JESD3_PHY_PCS_SERDES_LANE3        ((pcs_serdes_lane_msg_t*) DLNK_JESD3_PHY_PCS_SERDES_LANE3_BASE)

// ******************************************* /Address Space

#endif      // _PCS_SERDES_LANE_MSG_H_

