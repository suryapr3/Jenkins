#ifndef _EVC_AGC_H_
#define _EVC_AGC_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define SYSCON_EVC_AGC_BASE   ( 0x01e28000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define EVC_AGC_EVC0_INTF_CFG_OFFSET ( 0x00000000U )
#define EVC_AGC_EVC0_CAL_CFG_OFFSET ( 0x00000004U )
#define EVC_AGC_EVC0_CAL_RSLT_OFFSET ( 0x00000008U )
#define EVC_AGC_EVC0_SAFE_VAL_L_OFFSET ( 0x0000000cU )
#define EVC_AGC_EVC0_SAFE_VAL_H_OFFSET ( 0x00000010U )
#define EVC_AGC_EVC0_BM_LUT_L_OFFSET ( 0x00000014U )
#define EVC_AGC_EVC0_BM_LUT_H_OFFSET ( 0x00000018U )
#define EVC_AGC_EVC0_MODE_LUT0_OFFSET ( 0x00000020U )
#define EVC_AGC_EVC0_MODE_LUT1_OFFSET ( 0x00000024U )
#define EVC_AGC_EVC0_MODE_LUT2_OFFSET ( 0x00000028U )
#define EVC_AGC_EVC0_MODE_LUT3_OFFSET ( 0x0000002cU )
#define EVC_AGC_EVC0_MODE_LUT4_OFFSET ( 0x00000030U )
#define EVC_AGC_EVC0_MODE_LUT5_OFFSET ( 0x00000034U )
#define EVC_AGC_EVC0_MODE_ACC_OFFSET ( 0x00000038U )
#define EVC_AGC_EVC0_STAT_OFFSET ( 0x0000003cU )
#define EVC_AGC_EVC0_PERR_CNT_OFFSET ( 0x00000040U )
#define EVC_AGC_EVC0_SERR_CNT_OFFSET ( 0x00000044U )
#define EVC_AGC_EVC0_ERR_STAT_OFFSET ( 0x00000048U )
#define EVC_AGC_EVC0_ECC_CTRL_OFFSET ( 0x0000004cU )
#define EVC_AGC_EVC0_ECC_STAT_OFFSET ( 0x00000050U )
#define EVC_AGC_EVC1_INTF_CFG_OFFSET ( 0x00000100U )
#define EVC_AGC_EVC1_CAL_CFG_OFFSET ( 0x00000104U )
#define EVC_AGC_EVC1_CAL_RSLT_OFFSET ( 0x00000108U )
#define EVC_AGC_EVC1_SAFE_VAL_L_OFFSET ( 0x0000010cU )
#define EVC_AGC_EVC1_SAFE_VAL_H_OFFSET ( 0x00000110U )
#define EVC_AGC_EVC1_BM_LUT_L_OFFSET ( 0x00000114U )
#define EVC_AGC_EVC1_BM_LUT_H_OFFSET ( 0x00000118U )
#define EVC_AGC_EVC1_MODE_LUT0_OFFSET ( 0x00000120U )
#define EVC_AGC_EVC1_MODE_LUT1_OFFSET ( 0x00000124U )
#define EVC_AGC_EVC1_MODE_LUT2_OFFSET ( 0x00000128U )
#define EVC_AGC_EVC1_MODE_LUT3_OFFSET ( 0x0000012cU )
#define EVC_AGC_EVC1_MODE_LUT4_OFFSET ( 0x00000130U )
#define EVC_AGC_EVC1_MODE_LUT5_OFFSET ( 0x00000134U )
#define EVC_AGC_EVC1_MODE_ACC_OFFSET ( 0x00000138U )
#define EVC_AGC_EVC1_STAT_OFFSET ( 0x0000013cU )
#define EVC_AGC_EVC1_PERR_CNT_OFFSET ( 0x00000140U )
#define EVC_AGC_EVC1_SERR_CNT_OFFSET ( 0x00000144U )
#define EVC_AGC_EVC1_ERR_STAT_OFFSET ( 0x00000148U )
#define EVC_AGC_EVC1_ECC_CTRL_OFFSET ( 0x0000014cU )
#define EVC_AGC_EVC1_ECC_STAT_OFFSET ( 0x00000150U )
#define EVC_AGC_CFG_OFFSET  ( 0x00000200U )
#define EVC_AGC_3B5_CFG_OFFSET ( 0x00000204U )
#define EVC_AGC_3B5_OFFSET  ( 0x00000208U )
#define EVC_AGC_GRP_LUT_OFFSET ( 0x0000020cU )
#define EVC_AGC_LOG2PHY0_OFFSET ( 0x00000210U )
#define EVC_AGC_LOG2PHY1_OFFSET ( 0x00000214U )
#define EVC_AGC_STAT_OFFSET ( 0x00000218U )
#define EVC_AGC_PERR_CNT_OFFSET ( 0x0000021cU )
#define EVC_AGC_EN_MUX_OFFSET   ( 0x00000240U )
#define EVC_AGC_OUT_MUX_OFFSET  ( 0x00000244U )
#define EVC_AGC_OUT_MASK_OFFSET ( 0x00000248U )
#define EVC_AGC_FGC_SEL_OFFSET  ( 0x0000024cU )
#define EVC_AGC_RX_AC_GAIN_OFFSET ( 0x00000250U )
#define EVC_AGC_RX_SLOW_GAIN_OFFSET ( 0x00000254U )
#define EVC_AGC_OUT_STAT_L_OFFSET ( 0x00000260U )
#define EVC_AGC_OUT_STAT_H_OFFSET ( 0x00000264U )
#define EVC_AGC_MON_INT_STAT_OFFSET ( 0x00000270U )
#define EVC_AGC_BRDG_STAT_OFFSET ( 0x00000274U )
#define EVC_AGC_BUS_ERR_INT_STAT_OFFSET ( 0x00000280U )
#define EVC_AGC_BUS_ERR_HI_EN_OFFSET ( 0x00000284U )
#define EVC_AGC_BUS_ERR_LO_EN_OFFSET ( 0x00000288U )
#define EVC_AGC_BUS_ERR_CLR_OFFSET ( 0x0000028cU )
#define EVC_AGC_BUS_ERR_FORCE_OFFSET ( 0x00000290U )
#define EVC_AGC_TX_RX_RISE_INT_STAT_OFFSET ( 0x00000300U )
#define EVC_AGC_TX_RX_RISE_HI_EN_OFFSET ( 0x00000304U )
#define EVC_AGC_TX_RX_RISE_LO_EN_OFFSET ( 0x00000308U )
#define EVC_AGC_TX_RX_RISE_CLR_OFFSET ( 0x0000030cU )
#define EVC_AGC_TX_RX_RISE_FORCE_OFFSET ( 0x00000310U )
#define EVC_AGC_TX_RX_FALL_INT_STAT_OFFSET ( 0x00000320U )
#define EVC_AGC_TX_RX_FALL_HI_EN_OFFSET ( 0x00000324U )
#define EVC_AGC_TX_RX_FALL_LO_EN_OFFSET ( 0x00000328U )
#define EVC_AGC_TX_RX_FALL_CLR_OFFSET ( 0x0000032cU )
#define EVC_AGC_TX_RX_FALL_FORCE_OFFSET ( 0x00000330U )
#define EVC_AGC_CTL_RISE_INT_STAT_OFFSET ( 0x00000340U )
#define EVC_AGC_CTL_RISE_HI_EN_OFFSET ( 0x00000344U )
#define EVC_AGC_CTL_RISE_LO_EN_OFFSET ( 0x00000348U )
#define EVC_AGC_CTL_RISE_CLR_OFFSET ( 0x0000034cU )
#define EVC_AGC_CTL_RISE_FORCE_OFFSET ( 0x00000350U )
#define EVC_AGC_CTL_FALL_INT_STAT_OFFSET ( 0x00000360U )
#define EVC_AGC_CTL_FALL_HI_EN_OFFSET ( 0x00000364U )
#define EVC_AGC_CTL_FALL_LO_EN_OFFSET ( 0x00000368U )
#define EVC_AGC_CTL_FALL_CLR_OFFSET ( 0x0000036cU )
#define EVC_AGC_CTL_FALL_FORCE_OFFSET ( 0x00000370U )
#define EVC_AGC_GPIO_CFG_OFFSET ( 0x00000400U )
#define EVC_AGC_GPIO_CURR_IN_OFFSET ( 0x00000404U )
#define EVC_AGC_GPIO_SET_VAL_OFFSET ( 0x00000408U )
#define EVC_AGC_GPIO_DR_7_0_OFFSET ( 0x0000040cU )
#define EVC_AGC_GPIO_DR_11_8_OFFSET ( 0x00000410U )
#define EVC_AGC_GPIO_LPR_OFFSET ( 0x00000414U )
#define EVC_AGC_GPIO_PDE_OFFSET ( 0x0000041cU )
#define EVC_AGC_GPIO_PUE_OFFSET ( 0x00000420U )
#define EVC_AGC_GPIO_DELTA_STAT_OFFSET ( 0x00000440U )
#define EVC_AGC_GPIO_DELTA_HI_EN_OFFSET ( 0x00000444U )
#define EVC_AGC_GPIO_DELTA_LO_EN_OFFSET ( 0x00000448U )
#define EVC_AGC_GPIO_DELTA_CLR_OFFSET ( 0x0000044cU )
#define EVC_AGC_GPIO_DELTA_FORCE_OFFSET ( 0x00000450U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define EVC_AGC_EVC0_INTF_CFG_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_INTF_CFG_OFFSET ) ))
#define EVC_AGC_EVC0_CAL_CFG_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_CAL_CFG_OFFSET ) ))
#define EVC_AGC_EVC0_CAL_RSLT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_CAL_RSLT_OFFSET ) ))
#define EVC_AGC_EVC0_SAFE_VAL_L_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_SAFE_VAL_L_OFFSET ) ))
#define EVC_AGC_EVC0_SAFE_VAL_H_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_SAFE_VAL_H_OFFSET ) ))
#define EVC_AGC_EVC0_BM_LUT_L_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_BM_LUT_L_OFFSET ) ))
#define EVC_AGC_EVC0_BM_LUT_H_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_BM_LUT_H_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_LUT0_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_LUT0_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_LUT1_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_LUT1_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_LUT2_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_LUT2_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_LUT3_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_LUT3_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_LUT4_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_LUT4_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_LUT5_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_LUT5_OFFSET ) ))
#define EVC_AGC_EVC0_MODE_ACC_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_MODE_ACC_OFFSET ) ))
#define EVC_AGC_EVC0_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_STAT_OFFSET ) ))
#define EVC_AGC_EVC0_PERR_CNT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_PERR_CNT_OFFSET ) ))
#define EVC_AGC_EVC0_SERR_CNT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_SERR_CNT_OFFSET ) ))
#define EVC_AGC_EVC0_ERR_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_ERR_STAT_OFFSET ) ))
#define EVC_AGC_EVC0_ECC_CTRL_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_ECC_CTRL_OFFSET ) ))
#define EVC_AGC_EVC0_ECC_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC0_ECC_STAT_OFFSET ) ))
#define EVC_AGC_EVC1_INTF_CFG_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_INTF_CFG_OFFSET ) ))
#define EVC_AGC_EVC1_CAL_CFG_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_CAL_CFG_OFFSET ) ))
#define EVC_AGC_EVC1_CAL_RSLT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_CAL_RSLT_OFFSET ) ))
#define EVC_AGC_EVC1_SAFE_VAL_L_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_SAFE_VAL_L_OFFSET ) ))
#define EVC_AGC_EVC1_SAFE_VAL_H_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_SAFE_VAL_H_OFFSET ) ))
#define EVC_AGC_EVC1_BM_LUT_L_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_BM_LUT_L_OFFSET ) ))
#define EVC_AGC_EVC1_BM_LUT_H_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_BM_LUT_H_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_LUT0_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_LUT0_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_LUT1_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_LUT1_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_LUT2_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_LUT2_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_LUT3_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_LUT3_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_LUT4_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_LUT4_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_LUT5_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_LUT5_OFFSET ) ))
#define EVC_AGC_EVC1_MODE_ACC_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_MODE_ACC_OFFSET ) ))
#define EVC_AGC_EVC1_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_STAT_OFFSET ) ))
#define EVC_AGC_EVC1_PERR_CNT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_PERR_CNT_OFFSET ) ))
#define EVC_AGC_EVC1_SERR_CNT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_SERR_CNT_OFFSET ) ))
#define EVC_AGC_EVC1_ERR_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_ERR_STAT_OFFSET ) ))
#define EVC_AGC_EVC1_ECC_CTRL_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_ECC_CTRL_OFFSET ) ))
#define EVC_AGC_EVC1_ECC_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EVC1_ECC_STAT_OFFSET ) ))
#define EVC_AGC_CFG_ADR     (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CFG_OFFSET ) ))
#define EVC_AGC_3B5_CFG_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_3B5_CFG_OFFSET ) ))
#define EVC_AGC_3B5_ADR     (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_3B5_OFFSET ) ))
#define EVC_AGC_GRP_LUT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GRP_LUT_OFFSET ) ))
#define EVC_AGC_LOG2PHY0_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_LOG2PHY0_OFFSET ) ))
#define EVC_AGC_LOG2PHY1_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_LOG2PHY1_OFFSET ) ))
#define EVC_AGC_STAT_ADR  (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_STAT_OFFSET ) ))
#define EVC_AGC_PERR_CNT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_PERR_CNT_OFFSET ) ))
#define EVC_AGC_EN_MUX_ADR      (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_EN_MUX_OFFSET ) ))
#define EVC_AGC_OUT_MUX_ADR     (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_OUT_MUX_OFFSET ) ))
#define EVC_AGC_OUT_MASK_ADR    (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_OUT_MASK_OFFSET ) ))
#define EVC_AGC_FGC_SEL_ADR     (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_FGC_SEL_OFFSET ) ))
#define EVC_AGC_RX_AC_GAIN_ADR  (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_RX_AC_GAIN_OFFSET ) ))
#define EVC_AGC_RX_SLOW_GAIN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_RX_SLOW_GAIN_OFFSET ) ))
#define EVC_AGC_OUT_STAT_L_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_OUT_STAT_L_OFFSET ) ))
#define EVC_AGC_OUT_STAT_H_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_OUT_STAT_H_OFFSET ) ))
#define EVC_AGC_MON_INT_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_MON_INT_STAT_OFFSET ) ))
#define EVC_AGC_BRDG_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_BRDG_STAT_OFFSET ) ))
#define EVC_AGC_BUS_ERR_INT_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_BUS_ERR_INT_STAT_OFFSET ) ))
#define EVC_AGC_BUS_ERR_HI_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_BUS_ERR_HI_EN_OFFSET ) ))
#define EVC_AGC_BUS_ERR_LO_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_BUS_ERR_LO_EN_OFFSET ) ))
#define EVC_AGC_BUS_ERR_CLR_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_BUS_ERR_CLR_OFFSET ) ))
#define EVC_AGC_BUS_ERR_FORCE_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_BUS_ERR_FORCE_OFFSET ) ))
#define EVC_AGC_TX_RX_RISE_INT_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_RISE_INT_STAT_OFFSET ) ))
#define EVC_AGC_TX_RX_RISE_HI_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_RISE_HI_EN_OFFSET ) ))
#define EVC_AGC_TX_RX_RISE_LO_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_RISE_LO_EN_OFFSET ) ))
#define EVC_AGC_TX_RX_RISE_CLR_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_RISE_CLR_OFFSET ) ))
#define EVC_AGC_TX_RX_RISE_FORCE_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_RISE_FORCE_OFFSET ) ))
#define EVC_AGC_TX_RX_FALL_INT_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_FALL_INT_STAT_OFFSET ) ))
#define EVC_AGC_TX_RX_FALL_HI_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_FALL_HI_EN_OFFSET ) ))
#define EVC_AGC_TX_RX_FALL_LO_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_FALL_LO_EN_OFFSET ) ))
#define EVC_AGC_TX_RX_FALL_CLR_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_FALL_CLR_OFFSET ) ))
#define EVC_AGC_TX_RX_FALL_FORCE_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_TX_RX_FALL_FORCE_OFFSET ) ))
#define EVC_AGC_CTL_RISE_INT_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_RISE_INT_STAT_OFFSET ) ))
#define EVC_AGC_CTL_RISE_HI_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_RISE_HI_EN_OFFSET ) ))
#define EVC_AGC_CTL_RISE_LO_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_RISE_LO_EN_OFFSET ) ))
#define EVC_AGC_CTL_RISE_CLR_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_RISE_CLR_OFFSET ) ))
#define EVC_AGC_CTL_RISE_FORCE_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_RISE_FORCE_OFFSET ) ))
#define EVC_AGC_CTL_FALL_INT_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_FALL_INT_STAT_OFFSET ) ))
#define EVC_AGC_CTL_FALL_HI_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_FALL_HI_EN_OFFSET ) ))
#define EVC_AGC_CTL_FALL_LO_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_FALL_LO_EN_OFFSET ) ))
#define EVC_AGC_CTL_FALL_CLR_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_FALL_CLR_OFFSET ) ))
#define EVC_AGC_CTL_FALL_FORCE_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_CTL_FALL_FORCE_OFFSET ) ))
#define EVC_AGC_GPIO_CFG_ADR    (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_CFG_OFFSET ) ))
#define EVC_AGC_GPIO_CURR_IN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_CURR_IN_OFFSET ) ))
#define EVC_AGC_GPIO_SET_VAL_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_SET_VAL_OFFSET ) ))
#define EVC_AGC_GPIO_DR_7_0_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DR_7_0_OFFSET ) ))
#define EVC_AGC_GPIO_DR_11_8_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DR_11_8_OFFSET ) ))
#define EVC_AGC_GPIO_LPR_ADR    (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_LPR_OFFSET ) ))
#define EVC_AGC_GPIO_PDE_ADR    (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_PDE_OFFSET ) ))
#define EVC_AGC_GPIO_PUE_ADR    (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_PUE_OFFSET ) ))
#define EVC_AGC_GPIO_DELTA_STAT_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DELTA_STAT_OFFSET ) ))
#define EVC_AGC_GPIO_DELTA_HI_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DELTA_HI_EN_OFFSET ) ))
#define EVC_AGC_GPIO_DELTA_LO_EN_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DELTA_LO_EN_OFFSET ) ))
#define EVC_AGC_GPIO_DELTA_CLR_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DELTA_CLR_OFFSET ) ))
#define EVC_AGC_GPIO_DELTA_FORCE_ADR (( ( SYSCON_EVC_AGC_BASE ) + ( EVC_AGC_GPIO_DELTA_FORCE_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief EVC_AGC_COMP_REG_EVC0_INTF_CFG register description at address offset 0x0
  *
  * Register default value:        0x00000040
  * Register full path in IP: evc_agc_comp/reg/EVC0_INTF_CFG
  * EVCC Interface Configuration Register
  */

typedef union {
  struct {
    uint32_t EVC_EN : 1;
    ///< Setting to 1 activates the EVCC interface to decode incoming bus commands
    ///< and drive changes to the output signals
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EVC_INIT : 1;
    ///< Setting to 1 will put the EVCC state logic into INIT mode, forcing
    ///< all output signals to their configured safe initialization value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t MODE_WIDTH : 1;
    ///< Expected width of the MODE field in incoming EVCC bus commands.  0=6bits,
    ///< 1=8bits
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SAFE_ST_LOCK : 1;
    ///< Configures EVCC error handling behavior.   0= Clear error status and
    ///< allow signal updates on next good bus command.  1= Hold error status
    ///< and keep safe state until software clears error status using STATE_ERR_CLR
    ///< .
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SAMPLE_OFFSET : 4;
    ///< Sampling offset (in number of clock cycles) from the rising edge of
    ///< the MODE_STATUS pin
    ///< AccessType="RW" BitOffset="4" ResetValue="0x4"
    uint32_t EVC_RATE : 3;
    ///< Clocking rate of the EVCC interface: 000:  Half DDR (30.72MHz) 001:
    ///< Quarter DDR (15.36MHz) 010:  Half SDR (30.72 MHz) 011:  Quarter SDR(15.36MHz)
    ///< 1**:  Full SDR (61.44Hz)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TX_EN_RETAIN : 1;
    ///< Error handling for TX_EN outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_EN_RETAIN : 1;
    ///< Error handling for RX_EN outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t FB_EN_RETAIN : 1;
    ///< Error handling for FB_EN outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t FGC_RETAIN : 1;
    ///< Error handling for AC FGC outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t NCOSW_EN_RETAIN : 1;
    ///< Error handling for NCO switch outputs: 0=Drive configured safe value
    ///< on error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t PAR_ERR_DIS : 1;
    ///< Configure whether to pull MODE_STATUS low upon detection of a parity
    ///< error: 0=MODE_STATUS will be pulled low on parity error 1=MODE_STATUS
    ///< will not be driven by our device at any time
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t STATE_ERR_CLR : 1;
    ///< Writing this to 1 clears STATE_ERR status.   Only useful when SAFE_ST_LOCK
    ///< is set.
    ///< AccessType="WO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t SYNC_N : 2;
    ///< Number of expected SYNC strobes per EVCC command.    Valid range is
    ///< 1 to 4, encoded as N-1.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_intf_cfg_reg_t;

#define EVC_AGC_EVC0_INTF_CFG_DEFAULT (0x00000040U)
#define EVC_AGC_EVC0_INTF_CFG_RD_MASK (0x0031ffffU)
#define EVC_AGC_EVC0_INTF_CFG_WR_MASK (0x0033ffffU)


///< Setting to 1 activates the EVCC interface to decode incoming bus commands
///< and drive changes to the output signals
#define EVC_AGC_EVC0_INTF_CFG_EVC_EN_BF_OFF ( 0)
#define EVC_AGC_EVC0_INTF_CFG_EVC_EN_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_EVC_EN_BF_MSK (0x00000001)
#define EVC_AGC_EVC0_INTF_CFG_EVC_EN_BF_DEF (0x00000000)

///< Setting to 1 will put the EVCC state logic into INIT mode, forcing
///< all output signals to their configured safe initialization value
#define EVC_AGC_EVC0_INTF_CFG_EVC_INIT_BF_OFF ( 1)
#define EVC_AGC_EVC0_INTF_CFG_EVC_INIT_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_EVC_INIT_BF_MSK (0x00000002)
#define EVC_AGC_EVC0_INTF_CFG_EVC_INIT_BF_DEF (0x00000000)

///< Expected width of the MODE field in incoming EVCC bus commands.  0=6bits,
///< 1=8bits
#define EVC_AGC_EVC0_INTF_CFG_MODE_WIDTH_BF_OFF ( 2)
#define EVC_AGC_EVC0_INTF_CFG_MODE_WIDTH_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_MODE_WIDTH_BF_MSK (0x00000004)
#define EVC_AGC_EVC0_INTF_CFG_MODE_WIDTH_BF_DEF (0x00000000)

///< Configures EVCC error handling behavior.   0= Clear error status and
///< allow signal updates on next good bus command.  1= Hold error status
///< and keep safe state until software clears error status using STATE_ERR_CLR
///< .
#define EVC_AGC_EVC0_INTF_CFG_SAFE_ST_LOCK_BF_OFF ( 3)
#define EVC_AGC_EVC0_INTF_CFG_SAFE_ST_LOCK_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_SAFE_ST_LOCK_BF_MSK (0x00000008)
#define EVC_AGC_EVC0_INTF_CFG_SAFE_ST_LOCK_BF_DEF (0x00000000)

///< Sampling offset (in number of clock cycles) from the rising edge of
///< the MODE_STATUS pin
#define EVC_AGC_EVC0_INTF_CFG_SAMPLE_OFFSET_BF_OFF ( 4)
#define EVC_AGC_EVC0_INTF_CFG_SAMPLE_OFFSET_BF_WID ( 4)
#define EVC_AGC_EVC0_INTF_CFG_SAMPLE_OFFSET_BF_MSK (0x000000F0)
#define EVC_AGC_EVC0_INTF_CFG_SAMPLE_OFFSET_BF_DEF (0x00000040)

///< Clocking rate of the EVCC interface: 000:  Half DDR (30.72MHz) 001:
///< Quarter DDR (15.36MHz) 010:  Half SDR (30.72 MHz) 011:  Quarter SDR(15.36MHz)
///< 1**:  Full SDR (61.44Hz)
#define EVC_AGC_EVC0_INTF_CFG_EVC_RATE_BF_OFF ( 8)
#define EVC_AGC_EVC0_INTF_CFG_EVC_RATE_BF_WID ( 3)
#define EVC_AGC_EVC0_INTF_CFG_EVC_RATE_BF_MSK (0x00000700)
#define EVC_AGC_EVC0_INTF_CFG_EVC_RATE_BF_DEF (0x00000000)

///< Error handling for TX_EN outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC0_INTF_CFG_TX_EN_RETAIN_BF_OFF (11)
#define EVC_AGC_EVC0_INTF_CFG_TX_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_TX_EN_RETAIN_BF_MSK (0x00000800)
#define EVC_AGC_EVC0_INTF_CFG_TX_EN_RETAIN_BF_DEF (0x00000000)

///< Error handling for RX_EN outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC0_INTF_CFG_RX_EN_RETAIN_BF_OFF (12)
#define EVC_AGC_EVC0_INTF_CFG_RX_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_RX_EN_RETAIN_BF_MSK (0x00001000)
#define EVC_AGC_EVC0_INTF_CFG_RX_EN_RETAIN_BF_DEF (0x00000000)

///< Error handling for FB_EN outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC0_INTF_CFG_FB_EN_RETAIN_BF_OFF (13)
#define EVC_AGC_EVC0_INTF_CFG_FB_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_FB_EN_RETAIN_BF_MSK (0x00002000)
#define EVC_AGC_EVC0_INTF_CFG_FB_EN_RETAIN_BF_DEF (0x00000000)

///< Error handling for AC FGC outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC0_INTF_CFG_FGC_RETAIN_BF_OFF (14)
#define EVC_AGC_EVC0_INTF_CFG_FGC_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_FGC_RETAIN_BF_MSK (0x00004000)
#define EVC_AGC_EVC0_INTF_CFG_FGC_RETAIN_BF_DEF (0x00000000)

///< Error handling for NCO switch outputs: 0=Drive configured safe value
///< on error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC0_INTF_CFG_NCOSW_EN_RETAIN_BF_OFF (15)
#define EVC_AGC_EVC0_INTF_CFG_NCOSW_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_NCOSW_EN_RETAIN_BF_MSK (0x00008000)
#define EVC_AGC_EVC0_INTF_CFG_NCOSW_EN_RETAIN_BF_DEF (0x00000000)

///< Configure whether to pull MODE_STATUS low upon detection of a parity
///< error: 0=MODE_STATUS will be pulled low on parity error 1=MODE_STATUS
///< will not be driven by our device at any time
#define EVC_AGC_EVC0_INTF_CFG_PAR_ERR_DIS_BF_OFF (16)
#define EVC_AGC_EVC0_INTF_CFG_PAR_ERR_DIS_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_PAR_ERR_DIS_BF_MSK (0x00010000)
#define EVC_AGC_EVC0_INTF_CFG_PAR_ERR_DIS_BF_DEF (0x00000000)

///< Writing this to 1 clears STATE_ERR status.   Only useful when SAFE_ST_LOCK
///< is set.
#define EVC_AGC_EVC0_INTF_CFG_STATE_ERR_CLR_BF_OFF (17)
#define EVC_AGC_EVC0_INTF_CFG_STATE_ERR_CLR_BF_WID ( 1)
#define EVC_AGC_EVC0_INTF_CFG_STATE_ERR_CLR_BF_MSK (0x00020000)
#define EVC_AGC_EVC0_INTF_CFG_STATE_ERR_CLR_BF_DEF (0x00000000)

///< Number of expected SYNC strobes per EVCC command.    Valid range is
///< 1 to 4, encoded as N-1.
#define EVC_AGC_EVC0_INTF_CFG_SYNC_N_BF_OFF (20)
#define EVC_AGC_EVC0_INTF_CFG_SYNC_N_BF_WID ( 2)
#define EVC_AGC_EVC0_INTF_CFG_SYNC_N_BF_MSK (0x00300000)
#define EVC_AGC_EVC0_INTF_CFG_SYNC_N_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_CAL_CFG register description at address offset 0x4
  *
  * Register default value:        0x00000010
  * Register full path in IP: evc_agc_comp/reg/EVC0_CAL_CFG
  * EVCC Interface Calibration Mode Configuration
  */

typedef union {
  struct {
    uint32_t CAL_MODE : 1;
    ///< Setting to 1 places the EVCC interface into Calibration mode.   Incoming
    ///< patterns will be sampled and reported.   No commands will be decoded.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CAL_LEN : 5;
    ///< Configures the Length of patterns that will be sampled in Calibration
    ///< mode.   Valid values in the range of 1 to 22
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CAL_PAT : 4;
    ///< Selects which Calibration pattern to show in the EVC_CAL_RESULT register.
    ///< Valid range 0-9.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_cal_cfg_reg_t;

#define EVC_AGC_EVC0_CAL_CFG_DEFAULT (0x00000010U)
#define EVC_AGC_EVC0_CAL_CFG_RD_MASK (0x000f01f1U)
#define EVC_AGC_EVC0_CAL_CFG_WR_MASK (0x000f01f1U)


///< Setting to 1 places the EVCC interface into Calibration mode.   Incoming
///< patterns will be sampled and reported.   No commands will be decoded.
#define EVC_AGC_EVC0_CAL_CFG_CAL_MODE_BF_OFF ( 0)
#define EVC_AGC_EVC0_CAL_CFG_CAL_MODE_BF_WID ( 1)
#define EVC_AGC_EVC0_CAL_CFG_CAL_MODE_BF_MSK (0x00000001)
#define EVC_AGC_EVC0_CAL_CFG_CAL_MODE_BF_DEF (0x00000000)

///< Configures the Length of patterns that will be sampled in Calibration
///< mode.   Valid values in the range of 1 to 22
#define EVC_AGC_EVC0_CAL_CFG_CAL_LEN_BF_OFF ( 4)
#define EVC_AGC_EVC0_CAL_CFG_CAL_LEN_BF_WID ( 5)
#define EVC_AGC_EVC0_CAL_CFG_CAL_LEN_BF_MSK (0x000001F0)
#define EVC_AGC_EVC0_CAL_CFG_CAL_LEN_BF_DEF (0x00000010)

///< Selects which Calibration pattern to show in the EVC_CAL_RESULT register.
///< Valid range 0-9.
#define EVC_AGC_EVC0_CAL_CFG_CAL_PAT_BF_OFF (16)
#define EVC_AGC_EVC0_CAL_CFG_CAL_PAT_BF_WID ( 4)
#define EVC_AGC_EVC0_CAL_CFG_CAL_PAT_BF_MSK (0x000F0000)
#define EVC_AGC_EVC0_CAL_CFG_CAL_PAT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_CAL_RESULT register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_CAL_RESULT
  * EVCC Interface Calibration Mode Result
  */

typedef union {
  struct {
    uint32_t PATTERN : 22;
    ///< Shows the captured calibration pattern selected by CAL_PAT
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t NUM_PATS : 4;
    ///< Shows the number of calibration patterns captured (max 10) since calibration
    ///< mode was last activated.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_cal_rslt_reg_t;

#define EVC_AGC_EVC0_CAL_RSLT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_CAL_RSLT_RD_MASK (0xf03fffffU)
#define EVC_AGC_EVC0_CAL_RSLT_WR_MASK (0x00000000U)


///< Shows the captured calibration pattern selected by CAL_PAT
#define EVC_AGC_EVC0_CAL_RSLT_PATTERN_BF_OFF ( 0)
#define EVC_AGC_EVC0_CAL_RSLT_PATTERN_BF_WID (22)
#define EVC_AGC_EVC0_CAL_RSLT_PATTERN_BF_MSK (0x003FFFFF)
#define EVC_AGC_EVC0_CAL_RSLT_PATTERN_BF_DEF (0x00000000)

///< Shows the number of calibration patterns captured (max 10) since calibration
///< mode was last activated.
#define EVC_AGC_EVC0_CAL_RSLT_NUM_PATS_BF_OFF (28)
#define EVC_AGC_EVC0_CAL_RSLT_NUM_PATS_BF_WID ( 4)
#define EVC_AGC_EVC0_CAL_RSLT_NUM_PATS_BF_MSK (0xF0000000)
#define EVC_AGC_EVC0_CAL_RSLT_NUM_PATS_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_SAFE_VAL_L register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_SAFE_VAL_L
  * Safe Value Setting Lower bits
  */

typedef union {
  struct {
    uint32_t TX_EN_SAFE : 16;
    ///< Safe value to use for TX_EN outputs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_SAFE : 16;
    ///< Safe value to use for RX_EN outputs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_safe_val_l_reg_t;

#define EVC_AGC_EVC0_SAFE_VAL_L_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_SAFE_VAL_L_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_SAFE_VAL_L_WR_MASK (0xffffffffU)


///< Safe value to use for TX_EN outputs
#define EVC_AGC_EVC0_SAFE_VAL_L_TX_EN_SAFE_BF_OFF ( 0)
#define EVC_AGC_EVC0_SAFE_VAL_L_TX_EN_SAFE_BF_WID (16)
#define EVC_AGC_EVC0_SAFE_VAL_L_TX_EN_SAFE_BF_MSK (0x0000FFFF)
#define EVC_AGC_EVC0_SAFE_VAL_L_TX_EN_SAFE_BF_DEF (0x00000000)

///< Safe value to use for RX_EN outputs
#define EVC_AGC_EVC0_SAFE_VAL_L_RX_EN_SAFE_BF_OFF (16)
#define EVC_AGC_EVC0_SAFE_VAL_L_RX_EN_SAFE_BF_WID (16)
#define EVC_AGC_EVC0_SAFE_VAL_L_RX_EN_SAFE_BF_MSK (0xFFFF0000)
#define EVC_AGC_EVC0_SAFE_VAL_L_RX_EN_SAFE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_SAFE_VAL_H register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_SAFE_VAL_H
  * Safe Value Setting Upper bits
  */

typedef union {
  struct {
    uint32_t FB_EN_SAFE : 4;
    ///< Safe value to use for FB_EN outputs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FGC_SAFE : 4;
    ///< Safe value to use for AC FGC outputs
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t NCOSW_SAFE : 2;
    ///< Safe value to use for AC NCO SW outputs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_safe_val_h_reg_t;

#define EVC_AGC_EVC0_SAFE_VAL_H_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_SAFE_VAL_H_RD_MASK (0x000003ffU)
#define EVC_AGC_EVC0_SAFE_VAL_H_WR_MASK (0x000003ffU)


///< Safe value to use for FB_EN outputs
#define EVC_AGC_EVC0_SAFE_VAL_H_FB_EN_SAFE_BF_OFF ( 0)
#define EVC_AGC_EVC0_SAFE_VAL_H_FB_EN_SAFE_BF_WID ( 4)
#define EVC_AGC_EVC0_SAFE_VAL_H_FB_EN_SAFE_BF_MSK (0x0000000F)
#define EVC_AGC_EVC0_SAFE_VAL_H_FB_EN_SAFE_BF_DEF (0x00000000)

///< Safe value to use for AC FGC outputs
#define EVC_AGC_EVC0_SAFE_VAL_H_FGC_SAFE_BF_OFF ( 4)
#define EVC_AGC_EVC0_SAFE_VAL_H_FGC_SAFE_BF_WID ( 4)
#define EVC_AGC_EVC0_SAFE_VAL_H_FGC_SAFE_BF_MSK (0x000000F0)
#define EVC_AGC_EVC0_SAFE_VAL_H_FGC_SAFE_BF_DEF (0x00000000)

///< Safe value to use for AC NCO SW outputs
#define EVC_AGC_EVC0_SAFE_VAL_H_NCOSW_SAFE_BF_OFF ( 8)
#define EVC_AGC_EVC0_SAFE_VAL_H_NCOSW_SAFE_BF_WID ( 2)
#define EVC_AGC_EVC0_SAFE_VAL_H_NCOSW_SAFE_BF_MSK (0x00000300)
#define EVC_AGC_EVC0_SAFE_VAL_H_NCOSW_SAFE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_BM_LUT_L register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_BM_LUT_L
  * Branch Mask Lookup table lower bits
  */

typedef union {
  struct {
    uint32_t BM_LUT_L : 32;
    ///< Lower 32 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
    ///< Bits 15:0 correspond to TX_ENT[15:0] and bits 31:16 correspond to
    ///< RX_EN[15:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_bm_lut_l_reg_t;

#define EVC_AGC_EVC0_BM_LUT_L_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_BM_LUT_L_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_BM_LUT_L_WR_MASK (0xffffffffU)


///< Lower 32 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
///< Bits 15:0 correspond to TX_ENT[15:0] and bits 31:16 correspond to
///< RX_EN[15:0]
#define EVC_AGC_EVC0_BM_LUT_L_BM_LUT_L_BF_OFF ( 0)
#define EVC_AGC_EVC0_BM_LUT_L_BM_LUT_L_BF_WID (32)
#define EVC_AGC_EVC0_BM_LUT_L_BM_LUT_L_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC0_BM_LUT_L_BM_LUT_L_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_BM_LUT_H register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_BM_LUT_H
  * Branch Mask Lookup Table Hi Bits and Write strobe
  */

typedef union {
  struct {
    uint32_t BM_LUT_H : 10;
    ///< Upper 10 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
    ///< Bits 3:0 correspond to FB_EN[3:0].  Bits 5:4 correspond to rx_fgc[1:0].
    ///< Bits 7:6 correspond to tx_fgc[1:0].  Bit 8 corrsponds to tx_nco_sw
    ///< and bit 9 corresponds to rx_nco_sw.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t BM_LUT_SEL : 4;
    ///< Selects the Branch Mask LUT entry for reading/writing
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t BM_LUT_WR : 1;
    ///< Writes the values in BM_LUT_L and BM_LUT_H into the LUT entry configured
    ///< by BM_LUT_SEL.
    ///< AccessType="WO/1S" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_bm_lut_h_reg_t;

#define EVC_AGC_EVC0_BM_LUT_H_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_BM_LUT_H_RD_MASK (0x000f03ffU)
#define EVC_AGC_EVC0_BM_LUT_H_WR_MASK (0x001f03ffU)


///< Upper 10 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
///< Bits 3:0 correspond to FB_EN[3:0].  Bits 5:4 correspond to rx_fgc[1:0].
///< Bits 7:6 correspond to tx_fgc[1:0].  Bit 8 corrsponds to tx_nco_sw
///< and bit 9 corresponds to rx_nco_sw.
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_H_BF_OFF ( 0)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_H_BF_WID (10)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_H_BF_MSK (0x000003FF)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_H_BF_DEF (0x00000000)

///< Selects the Branch Mask LUT entry for reading/writing
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_SEL_BF_OFF (16)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_SEL_BF_WID ( 4)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_SEL_BF_MSK (0x000F0000)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_SEL_BF_DEF (0x00000000)

///< Writes the values in BM_LUT_L and BM_LUT_H into the LUT entry configured
///< by BM_LUT_SEL.
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_WR_BF_OFF (20)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_WR_BF_WID ( 1)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_WR_BF_MSK (0x00100000)
#define EVC_AGC_EVC0_BM_LUT_H_BM_LUT_WR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_LUT0 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_LUT0
  * Mode Lookup Table bits 31:0
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 31:0 of the Mode LUT entry configured by MODE_LUT_SEL.  Each
    ///< nibble configures the state changes for one output.   Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to TX_EN[7:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_lut0_reg_t;

#define EVC_AGC_EVC0_MODE_LUT0_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_LUT0_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_MODE_LUT0_WR_MASK (0xffffffffU)


///< Bits 31:0 of the Mode LUT entry configured by MODE_LUT_SEL.  Each
///< nibble configures the state changes for one output.   Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to TX_EN[7:0]
#define EVC_AGC_EVC0_MODE_LUT0_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_LUT0_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC0_MODE_LUT0_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC0_MODE_LUT0_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_LUT1 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_LUT1
  * Mode Lookup Table bits 63:32
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 63:32 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output. Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to TX_EN[15:8]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_lut1_reg_t;

#define EVC_AGC_EVC0_MODE_LUT1_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_LUT1_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_MODE_LUT1_WR_MASK (0xffffffffU)


///< Bits 63:32 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output. Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to TX_EN[15:8]
#define EVC_AGC_EVC0_MODE_LUT1_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_LUT1_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC0_MODE_LUT1_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC0_MODE_LUT1_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_LUT2 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_LUT2
  * Mode Lookup Table bits 95:64
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 95:64 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output. Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to RX_EN[7:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_lut2_reg_t;

#define EVC_AGC_EVC0_MODE_LUT2_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_LUT2_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_MODE_LUT2_WR_MASK (0xffffffffU)


///< Bits 95:64 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output. Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to RX_EN[7:0]
#define EVC_AGC_EVC0_MODE_LUT2_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_LUT2_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC0_MODE_LUT2_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC0_MODE_LUT2_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_LUT3 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_LUT3
  * Mode Lookup Table bits 127:96
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 127:96 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output. Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to RX_EN[15:8]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_lut3_reg_t;

#define EVC_AGC_EVC0_MODE_LUT3_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_LUT3_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_MODE_LUT3_WR_MASK (0xffffffffU)


///< Bits 127:96 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output. Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to RX_EN[15:8]
#define EVC_AGC_EVC0_MODE_LUT3_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_LUT3_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC0_MODE_LUT3_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC0_MODE_LUT3_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_LUT4 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_LUT4
  * Mode Lookup Table bits 159:128
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 159:128 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output.  Bit 0 of each
    ///< nibble is the first one sent to the output.   Nibbles 3:0 correspond
    ///< to FB_EN[3:0],  Nibbles 5:4 correspond to rx_fgc[1:0].  Nibbles 7:6
    ///< correspond to tx_fgc[1:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_lut4_reg_t;

#define EVC_AGC_EVC0_MODE_LUT4_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_LUT4_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC0_MODE_LUT4_WR_MASK (0xffffffffU)


///< Bits 159:128 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output.  Bit 0 of each
///< nibble is the first one sent to the output.   Nibbles 3:0 correspond
///< to FB_EN[3:0],  Nibbles 5:4 correspond to rx_fgc[1:0].  Nibbles 7:6
///< correspond to tx_fgc[1:0]
#define EVC_AGC_EVC0_MODE_LUT4_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_LUT4_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC0_MODE_LUT4_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC0_MODE_LUT4_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_LUT5 register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_LUT5
  * Mode Lookup Table bits 167:160
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 8;
    ///< Bits 167:160 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output.  Bit 0 of each
    ///< nibble is the first one sent to the output.  Nibble 0 corresponds
    ///< to TX_NCOSW and Nibble 1 corresponds to RX_NCOSW
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_lut5_reg_t;

#define EVC_AGC_EVC0_MODE_LUT5_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_LUT5_RD_MASK (0x000000ffU)
#define EVC_AGC_EVC0_MODE_LUT5_WR_MASK (0x000000ffU)


///< Bits 167:160 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output.  Bit 0 of each
///< nibble is the first one sent to the output.  Nibble 0 corresponds
///< to TX_NCOSW and Nibble 1 corresponds to RX_NCOSW
#define EVC_AGC_EVC0_MODE_LUT5_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_LUT5_MODE_LUT_BF_WID ( 8)
#define EVC_AGC_EVC0_MODE_LUT5_MODE_LUT_BF_MSK (0x000000FF)
#define EVC_AGC_EVC0_MODE_LUT5_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_MODE_ACC register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_MODE_ACC
  * Mode Lookup Access Control
  */

typedef union {
  struct {
    uint32_t MODE_LUT_WR : 1;
    ///< Write to 1 to write the current EVC_MODE_LUT* register values into
    ///< the selected MODE LUT entry
    ///< AccessType="WO/1S" BitOffset="0" ResetValue="0x0"
    uint32_t MODE_LUT_RD : 1;
    ///< Write to 1 to read the currently selected MODE LUT entry into the
    ///< EVC_MODE_LUT* registers
    ///< AccessType="WO/1S" BitOffset="1" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t MODE_LUT_SEL : 8;
    ///< Selects the Mode LUT entry for read and/or write
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_mode_acc_reg_t;

#define EVC_AGC_EVC0_MODE_ACC_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_MODE_ACC_RD_MASK (0x0000ff00U)
#define EVC_AGC_EVC0_MODE_ACC_WR_MASK (0x0000ff03U)


///< Write to 1 to write the current EVC_MODE_LUT* register values into
///< the selected MODE LUT entry
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_WR_BF_OFF ( 0)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_WR_BF_WID ( 1)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_WR_BF_MSK (0x00000001)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_WR_BF_DEF (0x00000000)

///< Write to 1 to read the currently selected MODE LUT entry into the
///< EVC_MODE_LUT* registers
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_RD_BF_OFF ( 1)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_RD_BF_WID ( 1)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_RD_BF_MSK (0x00000002)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_RD_BF_DEF (0x00000000)

///< Selects the Mode LUT entry for read and/or write
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_SEL_BF_OFF ( 8)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_SEL_BF_WID ( 8)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_SEL_BF_MSK (0x0000FF00)
#define EVC_AGC_EVC0_MODE_ACC_MODE_LUT_SEL_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_STATUS register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_STATUS
  * EVCC Interface Status
  */

typedef union {
  struct {
    uint32_t LAST_MODE : 8;
    ///< the most recent EVCC MODE field captured on the interface
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t LAST_BM : 4;
    ///< Shows the most recent Branch Mask field captured on the interface
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t LAST_PAR : 2;
    ///< Shows the most recent Parity Bits captured on the interface
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_stat_reg_t;

#define EVC_AGC_EVC0_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_STAT_RD_MASK (0x00003fffU)
#define EVC_AGC_EVC0_STAT_WR_MASK (0x00000000U)


///< the most recent EVCC MODE field captured on the interface
#define EVC_AGC_EVC0_STAT_LAST_MODE_BF_OFF ( 0)
#define EVC_AGC_EVC0_STAT_LAST_MODE_BF_WID ( 8)
#define EVC_AGC_EVC0_STAT_LAST_MODE_BF_MSK (0x000000FF)
#define EVC_AGC_EVC0_STAT_LAST_MODE_BF_DEF (0x00000000)

///< Shows the most recent Branch Mask field captured on the interface
#define EVC_AGC_EVC0_STAT_LAST_BM_BF_OFF ( 8)
#define EVC_AGC_EVC0_STAT_LAST_BM_BF_WID ( 4)
#define EVC_AGC_EVC0_STAT_LAST_BM_BF_MSK (0x00000F00)
#define EVC_AGC_EVC0_STAT_LAST_BM_BF_DEF (0x00000000)

///< Shows the most recent Parity Bits captured on the interface
#define EVC_AGC_EVC0_STAT_LAST_PAR_BF_OFF (12)
#define EVC_AGC_EVC0_STAT_LAST_PAR_BF_WID ( 2)
#define EVC_AGC_EVC0_STAT_LAST_PAR_BF_MSK (0x00003000)
#define EVC_AGC_EVC0_STAT_LAST_PAR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_PERR_CNT register description at address offset 0x40
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_PERR_CNT
  * EVC 0 Parity Error Count
  */

typedef union {
  struct {
    uint32_t ERR_CNT : 12;
    ///< Count of the number of Errors observed on the EVCC interface.  Counter
    ///< saturates at max value.   Reading this register resets the counter.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t ERR_THRESH : 12;
    ///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
    ///< be triggered.  The Alarm will remain asserted until this register
    ///< is read (which also resets the count).
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_perr_cnt_reg_t;

#define EVC_AGC_EVC0_PERR_CNT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_PERR_CNT_RD_MASK (0x0fff0fffU)
#define EVC_AGC_EVC0_PERR_CNT_WR_MASK (0x0fff0000U)


///< Count of the number of Errors observed on the EVCC interface.  Counter
///< saturates at max value.   Reading this register resets the counter.
#define EVC_AGC_EVC0_PERR_CNT_ERR_CNT_BF_OFF ( 0)
#define EVC_AGC_EVC0_PERR_CNT_ERR_CNT_BF_WID (12)
#define EVC_AGC_EVC0_PERR_CNT_ERR_CNT_BF_MSK (0x00000FFF)
#define EVC_AGC_EVC0_PERR_CNT_ERR_CNT_BF_DEF (0x00000000)

///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
///< be triggered.  The Alarm will remain asserted until this register
///< is read (which also resets the count).
#define EVC_AGC_EVC0_PERR_CNT_ERR_THRESH_BF_OFF (16)
#define EVC_AGC_EVC0_PERR_CNT_ERR_THRESH_BF_WID (12)
#define EVC_AGC_EVC0_PERR_CNT_ERR_THRESH_BF_MSK (0x0FFF0000)
#define EVC_AGC_EVC0_PERR_CNT_ERR_THRESH_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_SERR_CNT register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_SERR_CNT
  * EVC 0 State Error Count
  */

typedef union {
  struct {
    uint32_t ERR_CNT : 12;
    ///< Count of the number of Errors observed on the EVCC interface.  Counter
    ///< saturates at max value.   Reading this register resets the counter.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t ERR_THRESH : 12;
    ///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
    ///< be triggered.  The Alarm will remain asserted until this register
    ///< is read (which also resets the count).
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_serr_cnt_reg_t;

#define EVC_AGC_EVC0_SERR_CNT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_SERR_CNT_RD_MASK (0x0fff0fffU)
#define EVC_AGC_EVC0_SERR_CNT_WR_MASK (0x0fff0000U)


///< Count of the number of Errors observed on the EVCC interface.  Counter
///< saturates at max value.   Reading this register resets the counter.
#define EVC_AGC_EVC0_SERR_CNT_ERR_CNT_BF_OFF ( 0)
#define EVC_AGC_EVC0_SERR_CNT_ERR_CNT_BF_WID (12)
#define EVC_AGC_EVC0_SERR_CNT_ERR_CNT_BF_MSK (0x00000FFF)
#define EVC_AGC_EVC0_SERR_CNT_ERR_CNT_BF_DEF (0x00000000)

///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
///< be triggered.  The Alarm will remain asserted until this register
///< is read (which also resets the count).
#define EVC_AGC_EVC0_SERR_CNT_ERR_THRESH_BF_OFF (16)
#define EVC_AGC_EVC0_SERR_CNT_ERR_THRESH_BF_WID (12)
#define EVC_AGC_EVC0_SERR_CNT_ERR_THRESH_BF_MSK (0x0FFF0000)
#define EVC_AGC_EVC0_SERR_CNT_ERR_THRESH_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_ERR_STAT register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_ERR_STAT
  * Captures state of the last EVC command that had a parity error
  */

typedef union {
  struct {
    uint32_t ERR_MODE : 8;
    ///< the most recent EVCC MODE field captured on the interface that had
    ///< a parity error
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_BM : 4;
    ///< Shows the most recent Branch Mask field captured on the interface
    ///< that had a parity error
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ERR_PAR : 2;
    ///< Shows the most recent Parity Bits captured on the interface that had
    ///< a parity error
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_err_stat_reg_t;

#define EVC_AGC_EVC0_ERR_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_ERR_STAT_RD_MASK (0x00003fffU)
#define EVC_AGC_EVC0_ERR_STAT_WR_MASK (0x00000000U)


///< the most recent EVCC MODE field captured on the interface that had
///< a parity error
#define EVC_AGC_EVC0_ERR_STAT_ERR_MODE_BF_OFF ( 0)
#define EVC_AGC_EVC0_ERR_STAT_ERR_MODE_BF_WID ( 8)
#define EVC_AGC_EVC0_ERR_STAT_ERR_MODE_BF_MSK (0x000000FF)
#define EVC_AGC_EVC0_ERR_STAT_ERR_MODE_BF_DEF (0x00000000)

///< Shows the most recent Branch Mask field captured on the interface
///< that had a parity error
#define EVC_AGC_EVC0_ERR_STAT_ERR_BM_BF_OFF ( 8)
#define EVC_AGC_EVC0_ERR_STAT_ERR_BM_BF_WID ( 4)
#define EVC_AGC_EVC0_ERR_STAT_ERR_BM_BF_MSK (0x00000F00)
#define EVC_AGC_EVC0_ERR_STAT_ERR_BM_BF_DEF (0x00000000)

///< Shows the most recent Parity Bits captured on the interface that had
///< a parity error
#define EVC_AGC_EVC0_ERR_STAT_ERR_PAR_BF_OFF (12)
#define EVC_AGC_EVC0_ERR_STAT_ERR_PAR_BF_WID ( 2)
#define EVC_AGC_EVC0_ERR_STAT_ERR_PAR_BF_MSK (0x00003000)
#define EVC_AGC_EVC0_ERR_STAT_ERR_PAR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_ECC_CTRL register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_ECC_CTRL
  * Mode LUT ECC Control
  */

typedef union {
  struct {
    uint32_t GEN_DIS : 1;
    ///< Setting to 1 disables ECC generation for the mode LUT table
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CHK_DIS : 1;
    ///< Setting to 1 disable ECC generation for the mode LUT table
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ERR_CLR : 1;
    ///< Setting to 1 clears the ECC error address, syndrome and enables capture
    ///< of new values
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t FORCE_ERR : 1;
    ///< Setting to 1 Forces the ECC logic for the mode LUT table to create
    ///< an ECC error during writes
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t FORCE_TYPE : 1;
    ///< sets the ECC error type generated by FORCE_ERR bit.  0=single bit
    ///< err, 1=double bit err
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_ecc_ctrl_reg_t;

#define EVC_AGC_EVC0_ECC_CTRL_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_ECC_CTRL_RD_MASK (0x0000001fU)
#define EVC_AGC_EVC0_ECC_CTRL_WR_MASK (0x0000001fU)


///< Setting to 1 disables ECC generation for the mode LUT table
#define EVC_AGC_EVC0_ECC_CTRL_GEN_DIS_BF_OFF ( 0)
#define EVC_AGC_EVC0_ECC_CTRL_GEN_DIS_BF_WID ( 1)
#define EVC_AGC_EVC0_ECC_CTRL_GEN_DIS_BF_MSK (0x00000001)
#define EVC_AGC_EVC0_ECC_CTRL_GEN_DIS_BF_DEF (0x00000000)

///< Setting to 1 disable ECC generation for the mode LUT table
#define EVC_AGC_EVC0_ECC_CTRL_CHK_DIS_BF_OFF ( 1)
#define EVC_AGC_EVC0_ECC_CTRL_CHK_DIS_BF_WID ( 1)
#define EVC_AGC_EVC0_ECC_CTRL_CHK_DIS_BF_MSK (0x00000002)
#define EVC_AGC_EVC0_ECC_CTRL_CHK_DIS_BF_DEF (0x00000000)

///< Setting to 1 clears the ECC error address, syndrome and enables capture
///< of new values
#define EVC_AGC_EVC0_ECC_CTRL_ERR_CLR_BF_OFF ( 2)
#define EVC_AGC_EVC0_ECC_CTRL_ERR_CLR_BF_WID ( 1)
#define EVC_AGC_EVC0_ECC_CTRL_ERR_CLR_BF_MSK (0x00000004)
#define EVC_AGC_EVC0_ECC_CTRL_ERR_CLR_BF_DEF (0x00000000)

///< Setting to 1 Forces the ECC logic for the mode LUT table to create
///< an ECC error during writes
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_ERR_BF_OFF ( 3)
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_ERR_BF_WID ( 1)
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_ERR_BF_MSK (0x00000008)
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_ERR_BF_DEF (0x00000000)

///< sets the ECC error type generated by FORCE_ERR bit.  0=single bit
///< err, 1=double bit err
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_TYPE_BF_OFF ( 4)
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_TYPE_BF_WID ( 1)
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_TYPE_BF_MSK (0x00000010)
#define EVC_AGC_EVC0_ECC_CTRL_FORCE_TYPE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC0_ECC_STAT register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC0_ECC_STAT
  * Mode LUT ECC Error Info
  */

typedef union {
  struct {
    uint32_t ERR_ADDR : 8;
    ///< Holds the Adddress of the first ECC error encountered in the Mode
    ///< LUT.  Cleared by ECC_CTRL.ERR_CLR
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_SYND : 9;
    ///< Holds the Syndrome of the first ECC error encounterd in the Mode LUT.
    ///< Cleared by ECC_CTRL.ERR_CLR
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc0_ecc_stat_reg_t;

#define EVC_AGC_EVC0_ECC_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC0_ECC_STAT_RD_MASK (0x0001ffffU)
#define EVC_AGC_EVC0_ECC_STAT_WR_MASK (0x00000000U)


///< Holds the Adddress of the first ECC error encountered in the Mode
///< LUT.  Cleared by ECC_CTRL.ERR_CLR
#define EVC_AGC_EVC0_ECC_STAT_ERR_ADDR_BF_OFF ( 0)
#define EVC_AGC_EVC0_ECC_STAT_ERR_ADDR_BF_WID ( 8)
#define EVC_AGC_EVC0_ECC_STAT_ERR_ADDR_BF_MSK (0x000000FF)
#define EVC_AGC_EVC0_ECC_STAT_ERR_ADDR_BF_DEF (0x00000000)

///< Holds the Syndrome of the first ECC error encounterd in the Mode LUT.
///< Cleared by ECC_CTRL.ERR_CLR
#define EVC_AGC_EVC0_ECC_STAT_ERR_SYND_BF_OFF ( 8)
#define EVC_AGC_EVC0_ECC_STAT_ERR_SYND_BF_WID ( 9)
#define EVC_AGC_EVC0_ECC_STAT_ERR_SYND_BF_MSK (0x0001FF00)
#define EVC_AGC_EVC0_ECC_STAT_ERR_SYND_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_INTF_CFG register description at address offset 0x100
  *
  * Register default value:        0x00000040
  * Register full path in IP: evc_agc_comp/reg/EVC1_INTF_CFG
  * EVCC Interface Configuration Register
  */

typedef union {
  struct {
    uint32_t EVC_EN : 1;
    ///< Setting to 1 activates the EVCC interface to decode incoming bus commands
    ///< and drive changes to the output signals
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t EVC_INIT : 1;
    ///< Setting to 1 will put the EVCC state logic into INIT mode, forcing
    ///< all output signals to their configured safe initialization value
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t MODE_WIDTH : 1;
    ///< Expected width of the MODE field in incoming EVCC bus commands.  0=6bits,
    ///< 1=8bits
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SAFE_ST_LOCK : 1;
    ///< Configures EVCC error handling behavior.   0= Clear error status and
    ///< allow signal updates on next good bus command.  1= Hold error status
    ///< and keep safe state until software clears error status using STATE_ERR_CLR
    ///< .
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t SAMPLE_OFFSET : 4;
    ///< Sampling offset (in number of clock cycles) from the rising edge of
    ///< the MODE_STATUS pin
    ///< AccessType="RW" BitOffset="4" ResetValue="0x4"
    uint32_t EVC_RATE : 3;
    ///< Clocking rate of the EVCC interface: 000:  Half DDR (30.72MHz) 001:
    ///< Quarter DDR (15.36MHz) 010:  Half SDR (30.72 MHz) 011:  Quarter SDR(15.36MHz)
    ///< 1**:  Full SDR (61.44Hz)
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TX_EN_RETAIN : 1;
    ///< Error handling for TX_EN outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t RX_EN_RETAIN : 1;
    ///< Error handling for RX_EN outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t FB_EN_RETAIN : 1;
    ///< Error handling for FB_EN outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="13" ResetValue="0x0"
    uint32_t FGC_RETAIN : 1;
    ///< Error handling for AC FGC outputs: 0=Drive configured safe value on
    ///< error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t NCOSW_EN_RETAIN : 1;
    ///< Error handling for NCO switch outputs: 0=Drive configured safe value
    ///< on error detection 1=Retain previous value on error detection
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t PAR_ERR_DIS : 1;
    ///< Configure whether to pull MODE_STATUS low upon detection of a parity
    ///< error: 0=MODE_STATUS will be pulled low on parity error 1=MODE_STATUS
    ///< will not be driven by our device at any time
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t STATE_ERR_CLR : 1;
    ///< Writing this to 1 clears STATE_ERR status.   Only useful when SAFE_ST_LOCK
    ///< is set.
    ///< AccessType="WO" BitOffset="17" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="18" ResetValue="None"
    uint32_t SYNC_N : 2;
    ///< Number of expected SYNC strobes per EVCC command.    Valid range is
    ///< 1 to 4, encoded as N-1.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 10;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_intf_cfg_reg_t;

#define EVC_AGC_EVC1_INTF_CFG_DEFAULT (0x00000040U)
#define EVC_AGC_EVC1_INTF_CFG_RD_MASK (0x0031ffffU)
#define EVC_AGC_EVC1_INTF_CFG_WR_MASK (0x0033ffffU)


///< Setting to 1 activates the EVCC interface to decode incoming bus commands
///< and drive changes to the output signals
#define EVC_AGC_EVC1_INTF_CFG_EVC_EN_BF_OFF ( 0)
#define EVC_AGC_EVC1_INTF_CFG_EVC_EN_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_EVC_EN_BF_MSK (0x00000001)
#define EVC_AGC_EVC1_INTF_CFG_EVC_EN_BF_DEF (0x00000000)

///< Setting to 1 will put the EVCC state logic into INIT mode, forcing
///< all output signals to their configured safe initialization value
#define EVC_AGC_EVC1_INTF_CFG_EVC_INIT_BF_OFF ( 1)
#define EVC_AGC_EVC1_INTF_CFG_EVC_INIT_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_EVC_INIT_BF_MSK (0x00000002)
#define EVC_AGC_EVC1_INTF_CFG_EVC_INIT_BF_DEF (0x00000000)

///< Expected width of the MODE field in incoming EVCC bus commands.  0=6bits,
///< 1=8bits
#define EVC_AGC_EVC1_INTF_CFG_MODE_WIDTH_BF_OFF ( 2)
#define EVC_AGC_EVC1_INTF_CFG_MODE_WIDTH_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_MODE_WIDTH_BF_MSK (0x00000004)
#define EVC_AGC_EVC1_INTF_CFG_MODE_WIDTH_BF_DEF (0x00000000)

///< Configures EVCC error handling behavior.   0= Clear error status and
///< allow signal updates on next good bus command.  1= Hold error status
///< and keep safe state until software clears error status using STATE_ERR_CLR
///< .
#define EVC_AGC_EVC1_INTF_CFG_SAFE_ST_LOCK_BF_OFF ( 3)
#define EVC_AGC_EVC1_INTF_CFG_SAFE_ST_LOCK_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_SAFE_ST_LOCK_BF_MSK (0x00000008)
#define EVC_AGC_EVC1_INTF_CFG_SAFE_ST_LOCK_BF_DEF (0x00000000)

///< Sampling offset (in number of clock cycles) from the rising edge of
///< the MODE_STATUS pin
#define EVC_AGC_EVC1_INTF_CFG_SAMPLE_OFFSET_BF_OFF ( 4)
#define EVC_AGC_EVC1_INTF_CFG_SAMPLE_OFFSET_BF_WID ( 4)
#define EVC_AGC_EVC1_INTF_CFG_SAMPLE_OFFSET_BF_MSK (0x000000F0)
#define EVC_AGC_EVC1_INTF_CFG_SAMPLE_OFFSET_BF_DEF (0x00000040)

///< Clocking rate of the EVCC interface: 000:  Half DDR (30.72MHz) 001:
///< Quarter DDR (15.36MHz) 010:  Half SDR (30.72 MHz) 011:  Quarter SDR(15.36MHz)
///< 1**:  Full SDR (61.44Hz)
#define EVC_AGC_EVC1_INTF_CFG_EVC_RATE_BF_OFF ( 8)
#define EVC_AGC_EVC1_INTF_CFG_EVC_RATE_BF_WID ( 3)
#define EVC_AGC_EVC1_INTF_CFG_EVC_RATE_BF_MSK (0x00000700)
#define EVC_AGC_EVC1_INTF_CFG_EVC_RATE_BF_DEF (0x00000000)

///< Error handling for TX_EN outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC1_INTF_CFG_TX_EN_RETAIN_BF_OFF (11)
#define EVC_AGC_EVC1_INTF_CFG_TX_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_TX_EN_RETAIN_BF_MSK (0x00000800)
#define EVC_AGC_EVC1_INTF_CFG_TX_EN_RETAIN_BF_DEF (0x00000000)

///< Error handling for RX_EN outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC1_INTF_CFG_RX_EN_RETAIN_BF_OFF (12)
#define EVC_AGC_EVC1_INTF_CFG_RX_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_RX_EN_RETAIN_BF_MSK (0x00001000)
#define EVC_AGC_EVC1_INTF_CFG_RX_EN_RETAIN_BF_DEF (0x00000000)

///< Error handling for FB_EN outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC1_INTF_CFG_FB_EN_RETAIN_BF_OFF (13)
#define EVC_AGC_EVC1_INTF_CFG_FB_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_FB_EN_RETAIN_BF_MSK (0x00002000)
#define EVC_AGC_EVC1_INTF_CFG_FB_EN_RETAIN_BF_DEF (0x00000000)

///< Error handling for AC FGC outputs: 0=Drive configured safe value on
///< error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC1_INTF_CFG_FGC_RETAIN_BF_OFF (14)
#define EVC_AGC_EVC1_INTF_CFG_FGC_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_FGC_RETAIN_BF_MSK (0x00004000)
#define EVC_AGC_EVC1_INTF_CFG_FGC_RETAIN_BF_DEF (0x00000000)

///< Error handling for NCO switch outputs: 0=Drive configured safe value
///< on error detection 1=Retain previous value on error detection
#define EVC_AGC_EVC1_INTF_CFG_NCOSW_EN_RETAIN_BF_OFF (15)
#define EVC_AGC_EVC1_INTF_CFG_NCOSW_EN_RETAIN_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_NCOSW_EN_RETAIN_BF_MSK (0x00008000)
#define EVC_AGC_EVC1_INTF_CFG_NCOSW_EN_RETAIN_BF_DEF (0x00000000)

///< Configure whether to pull MODE_STATUS low upon detection of a parity
///< error: 0=MODE_STATUS will be pulled low on parity error 1=MODE_STATUS
///< will not be driven by our device at any time
#define EVC_AGC_EVC1_INTF_CFG_PAR_ERR_DIS_BF_OFF (16)
#define EVC_AGC_EVC1_INTF_CFG_PAR_ERR_DIS_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_PAR_ERR_DIS_BF_MSK (0x00010000)
#define EVC_AGC_EVC1_INTF_CFG_PAR_ERR_DIS_BF_DEF (0x00000000)

///< Writing this to 1 clears STATE_ERR status.   Only useful when SAFE_ST_LOCK
///< is set.
#define EVC_AGC_EVC1_INTF_CFG_STATE_ERR_CLR_BF_OFF (17)
#define EVC_AGC_EVC1_INTF_CFG_STATE_ERR_CLR_BF_WID ( 1)
#define EVC_AGC_EVC1_INTF_CFG_STATE_ERR_CLR_BF_MSK (0x00020000)
#define EVC_AGC_EVC1_INTF_CFG_STATE_ERR_CLR_BF_DEF (0x00000000)

///< Number of expected SYNC strobes per EVCC command.    Valid range is
///< 1 to 4, encoded as N-1.
#define EVC_AGC_EVC1_INTF_CFG_SYNC_N_BF_OFF (20)
#define EVC_AGC_EVC1_INTF_CFG_SYNC_N_BF_WID ( 2)
#define EVC_AGC_EVC1_INTF_CFG_SYNC_N_BF_MSK (0x00300000)
#define EVC_AGC_EVC1_INTF_CFG_SYNC_N_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_CAL_CFG register description at address offset 0x104
  *
  * Register default value:        0x00000010
  * Register full path in IP: evc_agc_comp/reg/EVC1_CAL_CFG
  * EVCC Interface Calibration Mode Configuration
  */

typedef union {
  struct {
    uint32_t CAL_MODE : 1;
    ///< Setting to 1 places the EVCC interface into Calibration mode.   Incoming
    ///< patterns will be sampled and reported.   No commands will be decoded.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t CAL_LEN : 5;
    ///< Configures the Length of patterns that will be sampled in Calibration
    ///< mode.   Valid values in the range of 1 to 22
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="9" ResetValue="None"
    uint32_t CAL_PAT : 4;
    ///< Selects which Calibration pattern to show in the EVC_CAL_RESULT register.
    ///< Valid range 0-9.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_cal_cfg_reg_t;

#define EVC_AGC_EVC1_CAL_CFG_DEFAULT (0x00000010U)
#define EVC_AGC_EVC1_CAL_CFG_RD_MASK (0x000f01f1U)
#define EVC_AGC_EVC1_CAL_CFG_WR_MASK (0x000f01f1U)


///< Setting to 1 places the EVCC interface into Calibration mode.   Incoming
///< patterns will be sampled and reported.   No commands will be decoded.
#define EVC_AGC_EVC1_CAL_CFG_CAL_MODE_BF_OFF ( 0)
#define EVC_AGC_EVC1_CAL_CFG_CAL_MODE_BF_WID ( 1)
#define EVC_AGC_EVC1_CAL_CFG_CAL_MODE_BF_MSK (0x00000001)
#define EVC_AGC_EVC1_CAL_CFG_CAL_MODE_BF_DEF (0x00000000)

///< Configures the Length of patterns that will be sampled in Calibration
///< mode.   Valid values in the range of 1 to 22
#define EVC_AGC_EVC1_CAL_CFG_CAL_LEN_BF_OFF ( 4)
#define EVC_AGC_EVC1_CAL_CFG_CAL_LEN_BF_WID ( 5)
#define EVC_AGC_EVC1_CAL_CFG_CAL_LEN_BF_MSK (0x000001F0)
#define EVC_AGC_EVC1_CAL_CFG_CAL_LEN_BF_DEF (0x00000010)

///< Selects which Calibration pattern to show in the EVC_CAL_RESULT register.
///< Valid range 0-9.
#define EVC_AGC_EVC1_CAL_CFG_CAL_PAT_BF_OFF (16)
#define EVC_AGC_EVC1_CAL_CFG_CAL_PAT_BF_WID ( 4)
#define EVC_AGC_EVC1_CAL_CFG_CAL_PAT_BF_MSK (0x000F0000)
#define EVC_AGC_EVC1_CAL_CFG_CAL_PAT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_CAL_RESULT register description at address offset 0x108
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_CAL_RESULT
  * EVCC Interface Calibration Mode Result
  */

typedef union {
  struct {
    uint32_t PATTERN : 22;
    ///< Shows the captured calibration pattern selected by CAL_PAT
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="22" ResetValue="None"
    uint32_t NUM_PATS : 4;
    ///< Shows the number of calibration patterns captured (max 10) since calibration
    ///< mode was last activated.
    ///< AccessType="RO/V" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_cal_rslt_reg_t;

#define EVC_AGC_EVC1_CAL_RSLT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_CAL_RSLT_RD_MASK (0xf03fffffU)
#define EVC_AGC_EVC1_CAL_RSLT_WR_MASK (0x00000000U)


///< Shows the captured calibration pattern selected by CAL_PAT
#define EVC_AGC_EVC1_CAL_RSLT_PATTERN_BF_OFF ( 0)
#define EVC_AGC_EVC1_CAL_RSLT_PATTERN_BF_WID (22)
#define EVC_AGC_EVC1_CAL_RSLT_PATTERN_BF_MSK (0x003FFFFF)
#define EVC_AGC_EVC1_CAL_RSLT_PATTERN_BF_DEF (0x00000000)

///< Shows the number of calibration patterns captured (max 10) since calibration
///< mode was last activated.
#define EVC_AGC_EVC1_CAL_RSLT_NUM_PATS_BF_OFF (28)
#define EVC_AGC_EVC1_CAL_RSLT_NUM_PATS_BF_WID ( 4)
#define EVC_AGC_EVC1_CAL_RSLT_NUM_PATS_BF_MSK (0xF0000000)
#define EVC_AGC_EVC1_CAL_RSLT_NUM_PATS_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_SAFE_VAL_L register description at address offset 0x10c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_SAFE_VAL_L
  * Safe Value Setting Lower bits
  */

typedef union {
  struct {
    uint32_t TX_EN_SAFE : 16;
    ///< Safe value to use for TX_EN outputs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_SAFE : 16;
    ///< Safe value to use for RX_EN outputs
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_safe_val_l_reg_t;

#define EVC_AGC_EVC1_SAFE_VAL_L_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_SAFE_VAL_L_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_SAFE_VAL_L_WR_MASK (0xffffffffU)


///< Safe value to use for TX_EN outputs
#define EVC_AGC_EVC1_SAFE_VAL_L_TX_EN_SAFE_BF_OFF ( 0)
#define EVC_AGC_EVC1_SAFE_VAL_L_TX_EN_SAFE_BF_WID (16)
#define EVC_AGC_EVC1_SAFE_VAL_L_TX_EN_SAFE_BF_MSK (0x0000FFFF)
#define EVC_AGC_EVC1_SAFE_VAL_L_TX_EN_SAFE_BF_DEF (0x00000000)

///< Safe value to use for RX_EN outputs
#define EVC_AGC_EVC1_SAFE_VAL_L_RX_EN_SAFE_BF_OFF (16)
#define EVC_AGC_EVC1_SAFE_VAL_L_RX_EN_SAFE_BF_WID (16)
#define EVC_AGC_EVC1_SAFE_VAL_L_RX_EN_SAFE_BF_MSK (0xFFFF0000)
#define EVC_AGC_EVC1_SAFE_VAL_L_RX_EN_SAFE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_SAFE_VAL_H register description at address offset 0x110
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_SAFE_VAL_H
  * Safe Value Setting Upper bits
  */

typedef union {
  struct {
    uint32_t FB_EN_SAFE : 4;
    ///< Safe value to use for FB_EN outputs
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t FGC_SAFE : 4;
    ///< Safe value to use for AC FGC outputs
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t NCOSW_SAFE : 2;
    ///< Safe value to use for AC NCO SW outputs
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_safe_val_h_reg_t;

#define EVC_AGC_EVC1_SAFE_VAL_H_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_SAFE_VAL_H_RD_MASK (0x000003ffU)
#define EVC_AGC_EVC1_SAFE_VAL_H_WR_MASK (0x000003ffU)


///< Safe value to use for FB_EN outputs
#define EVC_AGC_EVC1_SAFE_VAL_H_FB_EN_SAFE_BF_OFF ( 0)
#define EVC_AGC_EVC1_SAFE_VAL_H_FB_EN_SAFE_BF_WID ( 4)
#define EVC_AGC_EVC1_SAFE_VAL_H_FB_EN_SAFE_BF_MSK (0x0000000F)
#define EVC_AGC_EVC1_SAFE_VAL_H_FB_EN_SAFE_BF_DEF (0x00000000)

///< Safe value to use for AC FGC outputs
#define EVC_AGC_EVC1_SAFE_VAL_H_FGC_SAFE_BF_OFF ( 4)
#define EVC_AGC_EVC1_SAFE_VAL_H_FGC_SAFE_BF_WID ( 4)
#define EVC_AGC_EVC1_SAFE_VAL_H_FGC_SAFE_BF_MSK (0x000000F0)
#define EVC_AGC_EVC1_SAFE_VAL_H_FGC_SAFE_BF_DEF (0x00000000)

///< Safe value to use for AC NCO SW outputs
#define EVC_AGC_EVC1_SAFE_VAL_H_NCOSW_SAFE_BF_OFF ( 8)
#define EVC_AGC_EVC1_SAFE_VAL_H_NCOSW_SAFE_BF_WID ( 2)
#define EVC_AGC_EVC1_SAFE_VAL_H_NCOSW_SAFE_BF_MSK (0x00000300)
#define EVC_AGC_EVC1_SAFE_VAL_H_NCOSW_SAFE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_BM_LUT_L register description at address offset 0x114
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_BM_LUT_L
  * Branch Mask Lookup table lower bits
  */

typedef union {
  struct {
    uint32_t BM_LUT_L : 32;
    ///< Lower 32 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
    ///< Bits 15:0 correspond to TX_ENT[15:0] and bits 31:16 correspond to
    ///< RX_EN[15:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_bm_lut_l_reg_t;

#define EVC_AGC_EVC1_BM_LUT_L_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_BM_LUT_L_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_BM_LUT_L_WR_MASK (0xffffffffU)


///< Lower 32 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
///< Bits 15:0 correspond to TX_ENT[15:0] and bits 31:16 correspond to
///< RX_EN[15:0]
#define EVC_AGC_EVC1_BM_LUT_L_BM_LUT_L_BF_OFF ( 0)
#define EVC_AGC_EVC1_BM_LUT_L_BM_LUT_L_BF_WID (32)
#define EVC_AGC_EVC1_BM_LUT_L_BM_LUT_L_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC1_BM_LUT_L_BM_LUT_L_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_BM_LUT_H register description at address offset 0x118
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_BM_LUT_H
  * Branch Mask Lookup Table Hi Bits and Write strobe
  */

typedef union {
  struct {
    uint32_t BM_LUT_H : 10;
    ///< Upper 10 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
    ///< Bits 3:0 correspond to FB_EN[3:0].  Bits 5:4 correspond to rx_fgc[1:0].
    ///< Bits 7:6 correspond to tx_fgc[1:0].  Bit 8 corrsponds to tx_nco_sw
    ///< and bit 9 corresponds to rx_nco_sw.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t BM_LUT_SEL : 4;
    ///< Selects the Branch Mask LUT entry for reading/writing
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t BM_LUT_WR : 1;
    ///< Writes the values in BM_LUT_L and BM_LUT_H into the LUT entry configured
    ///< by BM_LUT_SEL.
    ///< AccessType="WO/1S" BitOffset="20" ResetValue="0x0"
    uint32_t  : 11;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_bm_lut_h_reg_t;

#define EVC_AGC_EVC1_BM_LUT_H_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_BM_LUT_H_RD_MASK (0x000f03ffU)
#define EVC_AGC_EVC1_BM_LUT_H_WR_MASK (0x001f03ffU)


///< Upper 10 bits of the Branch Mask LUT entry configured by BM_LUT_SEL.
///< Bits 3:0 correspond to FB_EN[3:0].  Bits 5:4 correspond to rx_fgc[1:0].
///< Bits 7:6 correspond to tx_fgc[1:0].  Bit 8 corrsponds to tx_nco_sw
///< and bit 9 corresponds to rx_nco_sw.
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_H_BF_OFF ( 0)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_H_BF_WID (10)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_H_BF_MSK (0x000003FF)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_H_BF_DEF (0x00000000)

///< Selects the Branch Mask LUT entry for reading/writing
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_SEL_BF_OFF (16)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_SEL_BF_WID ( 4)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_SEL_BF_MSK (0x000F0000)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_SEL_BF_DEF (0x00000000)

///< Writes the values in BM_LUT_L and BM_LUT_H into the LUT entry configured
///< by BM_LUT_SEL.
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_WR_BF_OFF (20)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_WR_BF_WID ( 1)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_WR_BF_MSK (0x00100000)
#define EVC_AGC_EVC1_BM_LUT_H_BM_LUT_WR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_LUT0 register description at address offset 0x120
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_LUT0
  * Mode Lookup Table bits 31:0
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 31:0 of the Mode LUT entry configured by MODE_LUT_SEL.  Each
    ///< nibble configures the state changes for one output.   Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to TX_EN[7:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_lut0_reg_t;

#define EVC_AGC_EVC1_MODE_LUT0_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_LUT0_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_MODE_LUT0_WR_MASK (0xffffffffU)


///< Bits 31:0 of the Mode LUT entry configured by MODE_LUT_SEL.  Each
///< nibble configures the state changes for one output.   Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to TX_EN[7:0]
#define EVC_AGC_EVC1_MODE_LUT0_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_LUT0_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC1_MODE_LUT0_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC1_MODE_LUT0_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_LUT1 register description at address offset 0x124
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_LUT1
  * Mode Lookup Table bits 63:32
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 63:32 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output. Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to TX_EN[15:8]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_lut1_reg_t;

#define EVC_AGC_EVC1_MODE_LUT1_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_LUT1_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_MODE_LUT1_WR_MASK (0xffffffffU)


///< Bits 63:32 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output. Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to TX_EN[15:8]
#define EVC_AGC_EVC1_MODE_LUT1_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_LUT1_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC1_MODE_LUT1_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC1_MODE_LUT1_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_LUT2 register description at address offset 0x128
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_LUT2
  * Mode Lookup Table bits 95:64
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 95:64 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output. Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to RX_EN[7:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_lut2_reg_t;

#define EVC_AGC_EVC1_MODE_LUT2_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_LUT2_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_MODE_LUT2_WR_MASK (0xffffffffU)


///< Bits 95:64 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output. Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to RX_EN[7:0]
#define EVC_AGC_EVC1_MODE_LUT2_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_LUT2_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC1_MODE_LUT2_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC1_MODE_LUT2_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_LUT3 register description at address offset 0x12c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_LUT3
  * Mode Lookup Table bits 127:96
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 127:96 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output. Bit 0 of each
    ///< nibble is the first one sent to the output.   The nibbles of this
    ///< register correspond to RX_EN[15:8]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_lut3_reg_t;

#define EVC_AGC_EVC1_MODE_LUT3_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_LUT3_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_MODE_LUT3_WR_MASK (0xffffffffU)


///< Bits 127:96 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output. Bit 0 of each
///< nibble is the first one sent to the output.   The nibbles of this
///< register correspond to RX_EN[15:8]
#define EVC_AGC_EVC1_MODE_LUT3_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_LUT3_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC1_MODE_LUT3_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC1_MODE_LUT3_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_LUT4 register description at address offset 0x130
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_LUT4
  * Mode Lookup Table bits 159:128
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 32;
    ///< Bits 159:128 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output.  Bit 0 of each
    ///< nibble is the first one sent to the output.   Nibbles 3:0 correspond
    ///< to FB_EN[3:0],  Nibbles 5:4 correspond to rx_fgc[1:0].  Nibbles 7:6
    ///< correspond to tx_fgc[1:0]
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_lut4_reg_t;

#define EVC_AGC_EVC1_MODE_LUT4_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_LUT4_RD_MASK (0xffffffffU)
#define EVC_AGC_EVC1_MODE_LUT4_WR_MASK (0xffffffffU)


///< Bits 159:128 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output.  Bit 0 of each
///< nibble is the first one sent to the output.   Nibbles 3:0 correspond
///< to FB_EN[3:0],  Nibbles 5:4 correspond to rx_fgc[1:0].  Nibbles 7:6
///< correspond to tx_fgc[1:0]
#define EVC_AGC_EVC1_MODE_LUT4_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_LUT4_MODE_LUT_BF_WID (32)
#define EVC_AGC_EVC1_MODE_LUT4_MODE_LUT_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_EVC1_MODE_LUT4_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_LUT5 register description at address offset 0x134
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_LUT5
  * Mode Lookup Table bits 167:160
  */

typedef union {
  struct {
    uint32_t MODE_LUT : 8;
    ///< Bits 167:160 of the Mode LUT entry configured by MODE_LUT_SEL. Each
    ///< nibble configures the state changes for one output.  Bit 0 of each
    ///< nibble is the first one sent to the output.  Nibble 0 corresponds
    ///< to TX_NCOSW and Nibble 1 corresponds to RX_NCOSW
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_lut5_reg_t;

#define EVC_AGC_EVC1_MODE_LUT5_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_LUT5_RD_MASK (0x000000ffU)
#define EVC_AGC_EVC1_MODE_LUT5_WR_MASK (0x000000ffU)


///< Bits 167:160 of the Mode LUT entry configured by MODE_LUT_SEL. Each
///< nibble configures the state changes for one output.  Bit 0 of each
///< nibble is the first one sent to the output.  Nibble 0 corresponds
///< to TX_NCOSW and Nibble 1 corresponds to RX_NCOSW
#define EVC_AGC_EVC1_MODE_LUT5_MODE_LUT_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_LUT5_MODE_LUT_BF_WID ( 8)
#define EVC_AGC_EVC1_MODE_LUT5_MODE_LUT_BF_MSK (0x000000FF)
#define EVC_AGC_EVC1_MODE_LUT5_MODE_LUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_MODE_ACC register description at address offset 0x138
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_MODE_ACC
  * Mode Lookup Access Control
  */

typedef union {
  struct {
    uint32_t MODE_LUT_WR : 1;
    ///< Write to 1 to write the current EVC_MODE_LUT* register values into
    ///< the selected MODE LUT entry
    ///< AccessType="WO/1S" BitOffset="0" ResetValue="0x0"
    uint32_t MODE_LUT_RD : 1;
    ///< Write to 1 to read the currently selected MODE LUT entry into the
    ///< EVC_MODE_LUT* registers
    ///< AccessType="WO/1S" BitOffset="1" ResetValue="0x0"
    uint32_t  : 6;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t MODE_LUT_SEL : 8;
    ///< Selects the Mode LUT entry for read and/or write
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_mode_acc_reg_t;

#define EVC_AGC_EVC1_MODE_ACC_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_MODE_ACC_RD_MASK (0x0000ff00U)
#define EVC_AGC_EVC1_MODE_ACC_WR_MASK (0x0000ff03U)


///< Write to 1 to write the current EVC_MODE_LUT* register values into
///< the selected MODE LUT entry
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_WR_BF_OFF ( 0)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_WR_BF_WID ( 1)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_WR_BF_MSK (0x00000001)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_WR_BF_DEF (0x00000000)

///< Write to 1 to read the currently selected MODE LUT entry into the
///< EVC_MODE_LUT* registers
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_RD_BF_OFF ( 1)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_RD_BF_WID ( 1)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_RD_BF_MSK (0x00000002)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_RD_BF_DEF (0x00000000)

///< Selects the Mode LUT entry for read and/or write
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_SEL_BF_OFF ( 8)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_SEL_BF_WID ( 8)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_SEL_BF_MSK (0x0000FF00)
#define EVC_AGC_EVC1_MODE_ACC_MODE_LUT_SEL_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_STATUS register description at address offset 0x13c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_STATUS
  * EVCC Interface Status
  */

typedef union {
  struct {
    uint32_t LAST_MODE : 8;
    ///< the most recent EVCC MODE field captured on the interface
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t LAST_BM : 4;
    ///< Shows the most recent Branch Mask field captured on the interface
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t LAST_PAR : 2;
    ///< Shows the most recent Parity Bits captured on the interface
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_stat_reg_t;

#define EVC_AGC_EVC1_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_STAT_RD_MASK (0x00003fffU)
#define EVC_AGC_EVC1_STAT_WR_MASK (0x00000000U)


///< the most recent EVCC MODE field captured on the interface
#define EVC_AGC_EVC1_STAT_LAST_MODE_BF_OFF ( 0)
#define EVC_AGC_EVC1_STAT_LAST_MODE_BF_WID ( 8)
#define EVC_AGC_EVC1_STAT_LAST_MODE_BF_MSK (0x000000FF)
#define EVC_AGC_EVC1_STAT_LAST_MODE_BF_DEF (0x00000000)

///< Shows the most recent Branch Mask field captured on the interface
#define EVC_AGC_EVC1_STAT_LAST_BM_BF_OFF ( 8)
#define EVC_AGC_EVC1_STAT_LAST_BM_BF_WID ( 4)
#define EVC_AGC_EVC1_STAT_LAST_BM_BF_MSK (0x00000F00)
#define EVC_AGC_EVC1_STAT_LAST_BM_BF_DEF (0x00000000)

///< Shows the most recent Parity Bits captured on the interface
#define EVC_AGC_EVC1_STAT_LAST_PAR_BF_OFF (12)
#define EVC_AGC_EVC1_STAT_LAST_PAR_BF_WID ( 2)
#define EVC_AGC_EVC1_STAT_LAST_PAR_BF_MSK (0x00003000)
#define EVC_AGC_EVC1_STAT_LAST_PAR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_PERR_CNT register description at address offset 0x140
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_PERR_CNT
  * EVC 1 Parity Error Count
  */

typedef union {
  struct {
    uint32_t ERR_CNT : 12;
    ///< Count of the number of Errors observed on the EVCC interface.  Counter
    ///< saturates at max value.   Reading this register resets the counter.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t ERR_THRESH : 12;
    ///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
    ///< be triggered.  The Alarm will remain asserted until this register
    ///< is read (which also resets the count).
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_perr_cnt_reg_t;

#define EVC_AGC_EVC1_PERR_CNT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_PERR_CNT_RD_MASK (0x0fff0fffU)
#define EVC_AGC_EVC1_PERR_CNT_WR_MASK (0x0fff0000U)


///< Count of the number of Errors observed on the EVCC interface.  Counter
///< saturates at max value.   Reading this register resets the counter.
#define EVC_AGC_EVC1_PERR_CNT_ERR_CNT_BF_OFF ( 0)
#define EVC_AGC_EVC1_PERR_CNT_ERR_CNT_BF_WID (12)
#define EVC_AGC_EVC1_PERR_CNT_ERR_CNT_BF_MSK (0x00000FFF)
#define EVC_AGC_EVC1_PERR_CNT_ERR_CNT_BF_DEF (0x00000000)

///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
///< be triggered.  The Alarm will remain asserted until this register
///< is read (which also resets the count).
#define EVC_AGC_EVC1_PERR_CNT_ERR_THRESH_BF_OFF (16)
#define EVC_AGC_EVC1_PERR_CNT_ERR_THRESH_BF_WID (12)
#define EVC_AGC_EVC1_PERR_CNT_ERR_THRESH_BF_MSK (0x0FFF0000)
#define EVC_AGC_EVC1_PERR_CNT_ERR_THRESH_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_SERR_CNT register description at address offset 0x144
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_SERR_CNT
  * EVC 1 State Error Count
  */

typedef union {
  struct {
    uint32_t ERR_CNT : 12;
    ///< Count of the number of Errors observed on the EVCC interface.  Counter
    ///< saturates at max value.   Reading this register resets the counter.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t ERR_THRESH : 12;
    ///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
    ///< be triggered.  The Alarm will remain asserted until this register
    ///< is read (which also resets the count).
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_serr_cnt_reg_t;

#define EVC_AGC_EVC1_SERR_CNT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_SERR_CNT_RD_MASK (0x0fff0fffU)
#define EVC_AGC_EVC1_SERR_CNT_WR_MASK (0x0fff0000U)


///< Count of the number of Errors observed on the EVCC interface.  Counter
///< saturates at max value.   Reading this register resets the counter.
#define EVC_AGC_EVC1_SERR_CNT_ERR_CNT_BF_OFF ( 0)
#define EVC_AGC_EVC1_SERR_CNT_ERR_CNT_BF_WID (12)
#define EVC_AGC_EVC1_SERR_CNT_ERR_CNT_BF_MSK (0x00000FFF)
#define EVC_AGC_EVC1_SERR_CNT_ERR_CNT_BF_DEF (0x00000000)

///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the ALARM will
///< be triggered.  The Alarm will remain asserted until this register
///< is read (which also resets the count).
#define EVC_AGC_EVC1_SERR_CNT_ERR_THRESH_BF_OFF (16)
#define EVC_AGC_EVC1_SERR_CNT_ERR_THRESH_BF_WID (12)
#define EVC_AGC_EVC1_SERR_CNT_ERR_THRESH_BF_MSK (0x0FFF0000)
#define EVC_AGC_EVC1_SERR_CNT_ERR_THRESH_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_ERR_STAT register description at address offset 0x148
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_ERR_STAT
  * Captures state of the last EVC command that had a parity error
  */

typedef union {
  struct {
    uint32_t ERR_MODE : 8;
    ///< the most recent EVCC MODE field captured on the interface that had
    ///< a parity error
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_BM : 4;
    ///< Shows the most recent Branch Mask field captured on the interface
    ///< that had a parity error
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t ERR_PAR : 2;
    ///< Shows the most recent Parity Bits captured on the interface that had
    ///< a parity error
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_err_stat_reg_t;

#define EVC_AGC_EVC1_ERR_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_ERR_STAT_RD_MASK (0x00003fffU)
#define EVC_AGC_EVC1_ERR_STAT_WR_MASK (0x00000000U)


///< the most recent EVCC MODE field captured on the interface that had
///< a parity error
#define EVC_AGC_EVC1_ERR_STAT_ERR_MODE_BF_OFF ( 0)
#define EVC_AGC_EVC1_ERR_STAT_ERR_MODE_BF_WID ( 8)
#define EVC_AGC_EVC1_ERR_STAT_ERR_MODE_BF_MSK (0x000000FF)
#define EVC_AGC_EVC1_ERR_STAT_ERR_MODE_BF_DEF (0x00000000)

///< Shows the most recent Branch Mask field captured on the interface
///< that had a parity error
#define EVC_AGC_EVC1_ERR_STAT_ERR_BM_BF_OFF ( 8)
#define EVC_AGC_EVC1_ERR_STAT_ERR_BM_BF_WID ( 4)
#define EVC_AGC_EVC1_ERR_STAT_ERR_BM_BF_MSK (0x00000F00)
#define EVC_AGC_EVC1_ERR_STAT_ERR_BM_BF_DEF (0x00000000)

///< Shows the most recent Parity Bits captured on the interface that had
///< a parity error
#define EVC_AGC_EVC1_ERR_STAT_ERR_PAR_BF_OFF (12)
#define EVC_AGC_EVC1_ERR_STAT_ERR_PAR_BF_WID ( 2)
#define EVC_AGC_EVC1_ERR_STAT_ERR_PAR_BF_MSK (0x00003000)
#define EVC_AGC_EVC1_ERR_STAT_ERR_PAR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_ECC_CTRL register description at address offset 0x14c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_ECC_CTRL
  * Mode LUT ECC Control
  */

typedef union {
  struct {
    uint32_t GEN_DIS : 1;
    ///< Setting to 1 disables ECC generation for the mode LUT table
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CHK_DIS : 1;
    ///< Setting to 1 disable ECC generation for the mode LUT table
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t ERR_CLR : 1;
    ///< Setting to 1 clears the ECC error address, syndrome and enables capture
    ///< of new values
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t FORCE_ERR : 1;
    ///< Setting to 1 Forces the ECC logic for the mode LUT table to create
    ///< an ECC error during writes
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t FORCE_TYPE : 1;
    ///< sets the ECC error type generated by FORCE_ERR bit.  0=single bit
    ///< err, 1=double bit err
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_ecc_ctrl_reg_t;

#define EVC_AGC_EVC1_ECC_CTRL_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_ECC_CTRL_RD_MASK (0x0000001fU)
#define EVC_AGC_EVC1_ECC_CTRL_WR_MASK (0x0000001fU)


///< Setting to 1 disables ECC generation for the mode LUT table
#define EVC_AGC_EVC1_ECC_CTRL_GEN_DIS_BF_OFF ( 0)
#define EVC_AGC_EVC1_ECC_CTRL_GEN_DIS_BF_WID ( 1)
#define EVC_AGC_EVC1_ECC_CTRL_GEN_DIS_BF_MSK (0x00000001)
#define EVC_AGC_EVC1_ECC_CTRL_GEN_DIS_BF_DEF (0x00000000)

///< Setting to 1 disable ECC generation for the mode LUT table
#define EVC_AGC_EVC1_ECC_CTRL_CHK_DIS_BF_OFF ( 1)
#define EVC_AGC_EVC1_ECC_CTRL_CHK_DIS_BF_WID ( 1)
#define EVC_AGC_EVC1_ECC_CTRL_CHK_DIS_BF_MSK (0x00000002)
#define EVC_AGC_EVC1_ECC_CTRL_CHK_DIS_BF_DEF (0x00000000)

///< Setting to 1 clears the ECC error address, syndrome and enables capture
///< of new values
#define EVC_AGC_EVC1_ECC_CTRL_ERR_CLR_BF_OFF ( 2)
#define EVC_AGC_EVC1_ECC_CTRL_ERR_CLR_BF_WID ( 1)
#define EVC_AGC_EVC1_ECC_CTRL_ERR_CLR_BF_MSK (0x00000004)
#define EVC_AGC_EVC1_ECC_CTRL_ERR_CLR_BF_DEF (0x00000000)

///< Setting to 1 Forces the ECC logic for the mode LUT table to create
///< an ECC error during writes
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_ERR_BF_OFF ( 3)
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_ERR_BF_WID ( 1)
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_ERR_BF_MSK (0x00000008)
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_ERR_BF_DEF (0x00000000)

///< sets the ECC error type generated by FORCE_ERR bit.  0=single bit
///< err, 1=double bit err
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_TYPE_BF_OFF ( 4)
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_TYPE_BF_WID ( 1)
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_TYPE_BF_MSK (0x00000010)
#define EVC_AGC_EVC1_ECC_CTRL_FORCE_TYPE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EVC1_ECC_STAT register description at address offset 0x150
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EVC1_ECC_STAT
  * Mode LUT ECC Error Info
  */

typedef union {
  struct {
    uint32_t ERR_ADDR : 8;
    ///< Holds the Adddress of the first ECC error encountered in the Mode
    ///< LUT.  Cleared by ECC_CTRL.ERR_CLR
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t ERR_SYND : 9;
    ///< Holds the Syndrome of the first ECC error encounterd in the Mode LUT.
    ///< Cleared by ECC_CTRL.ERR_CLR
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="17" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_evc1_ecc_stat_reg_t;

#define EVC_AGC_EVC1_ECC_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_EVC1_ECC_STAT_RD_MASK (0x0001ffffU)
#define EVC_AGC_EVC1_ECC_STAT_WR_MASK (0x00000000U)


///< Holds the Adddress of the first ECC error encountered in the Mode
///< LUT.  Cleared by ECC_CTRL.ERR_CLR
#define EVC_AGC_EVC1_ECC_STAT_ERR_ADDR_BF_OFF ( 0)
#define EVC_AGC_EVC1_ECC_STAT_ERR_ADDR_BF_WID ( 8)
#define EVC_AGC_EVC1_ECC_STAT_ERR_ADDR_BF_MSK (0x000000FF)
#define EVC_AGC_EVC1_ECC_STAT_ERR_ADDR_BF_DEF (0x00000000)

///< Holds the Syndrome of the first ECC error encounterd in the Mode LUT.
///< Cleared by ECC_CTRL.ERR_CLR
#define EVC_AGC_EVC1_ECC_STAT_ERR_SYND_BF_OFF ( 8)
#define EVC_AGC_EVC1_ECC_STAT_ERR_SYND_BF_WID ( 9)
#define EVC_AGC_EVC1_ECC_STAT_ERR_SYND_BF_MSK (0x0001FF00)
#define EVC_AGC_EVC1_ECC_STAT_ERR_SYND_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_CFG register description at address offset 0x200
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_CFG
  * AGC Interface Configuration Register
  */

typedef union {
  struct {
    uint32_t AGC_EN : 1;
    ///< Setting to 1 activates the AGC interface to decode incoming bus commands
    ///< and drive changes to the output signals
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 15;
    ///< Reserved
    ///< AccessType="RO" BitOffset="1" ResetValue="None"
    uint32_t BRANCH_ENABLE : 16;
    ///< Each bit enables the corresponding physical (not logical) AGC branch.
    ///< AGCC bus commands that target disabled branches will be ignored.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_cfg_reg_t;

#define EVC_AGC_CFG_DEFAULT (0x00000000U)
#define EVC_AGC_CFG_RD_MASK (0xffff0001U)
#define EVC_AGC_CFG_WR_MASK (0xffff0001U)


///< Setting to 1 activates the AGC interface to decode incoming bus commands
///< and drive changes to the output signals
#define EVC_AGC_CFG_AGC_EN_BF_OFF ( 0)
#define EVC_AGC_CFG_AGC_EN_BF_WID ( 1)
#define EVC_AGC_CFG_AGC_EN_BF_MSK (0x00000001)
#define EVC_AGC_CFG_AGC_EN_BF_DEF (0x00000000)

///< Each bit enables the corresponding physical (not logical) AGC branch.
///< AGCC bus commands that target disabled branches will be ignored.
#define EVC_AGC_CFG_BRANCH_EN_BF_OFF (16)
#define EVC_AGC_CFG_BRANCH_EN_BF_WID (16)
#define EVC_AGC_CFG_BRANCH_EN_BF_MSK (0xFFFF0000)
#define EVC_AGC_CFG_BRANCH_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_3B5_CFG register description at address offset 0x204
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_3B5_CFG
  * AGC Three bit to Five bit gain LUT access config
  */

typedef union {
  struct {
    uint32_t QUAD_SEL : 2;
    ///< Selects which of the 4 gain LUTs is accessed in the AGC_3BG register.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
    uint32_t HILO_SEL : 1;
    ///< 0= The fields of ABC_3B5 register refer to the lower entries (0-3)
    ///< of the gain LUT.                      1= The fields of ABC_3B5 register
    ///< refer to the higher entries (4-7) of the gain LUT.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_3b5_cfg_reg_t;

#define EVC_AGC_3B5_CFG_DEFAULT (0x00000000U)
#define EVC_AGC_3B5_CFG_RD_MASK (0x00000013U)
#define EVC_AGC_3B5_CFG_WR_MASK (0x00000013U)


///< Selects which of the 4 gain LUTs is accessed in the AGC_3BG register.
#define EVC_AGC_3B5_CFG_QUAD_SEL_BF_OFF ( 0)
#define EVC_AGC_3B5_CFG_QUAD_SEL_BF_WID ( 2)
#define EVC_AGC_3B5_CFG_QUAD_SEL_BF_MSK (0x00000003)
#define EVC_AGC_3B5_CFG_QUAD_SEL_BF_DEF (0x00000000)

///< 0= The fields of ABC_3B5 register refer to the lower entries (0-3)
///< of the gain LUT.                      1= The fields of ABC_3B5 register
///< refer to the higher entries (4-7) of the gain LUT.
#define EVC_AGC_3B5_CFG_HILO_SEL_BF_OFF ( 4)
#define EVC_AGC_3B5_CFG_HILO_SEL_BF_WID ( 1)
#define EVC_AGC_3B5_CFG_HILO_SEL_BF_MSK (0x00000010)
#define EVC_AGC_3B5_CFG_HILO_SEL_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_3B5 register description at address offset 0x208
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_3B5
  * AGC Three bit to Five bit gain LUT data
  */

typedef union {
  struct {
    uint32_t LUT_3B5_0 : 5;
    ///< 5bit gain value to use for the associated 3b AGC bus gain.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t LUT_3B5_1 : 5;
    ///< 5bit gain value to use for the associated 3b AGC bus gain.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="13" ResetValue="None"
    uint32_t LUT_3B5_2 : 5;
    ///< 5bit gain value to use for the associated 3b AGC bus gain.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="21" ResetValue="None"
    uint32_t LUT_3B5_3 : 5;
    ///< 5bit gain value to use for the associated 3b AGC bus gain.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="29" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_3b5_reg_t;

#define EVC_AGC_3B5_DEFAULT (0x00000000U)
#define EVC_AGC_3B5_RD_MASK (0x1f1f1f1fU)
#define EVC_AGC_3B5_WR_MASK (0x1f1f1f1fU)


///< 5bit gain value to use for the associated 3b AGC bus gain.
#define EVC_AGC_3B5_LUT_3B5_0_BF_OFF ( 0)
#define EVC_AGC_3B5_LUT_3B5_0_BF_WID ( 5)
#define EVC_AGC_3B5_LUT_3B5_0_BF_MSK (0x0000001F)
#define EVC_AGC_3B5_LUT_3B5_0_BF_DEF (0x00000000)

///< 5bit gain value to use for the associated 3b AGC bus gain.
#define EVC_AGC_3B5_LUT_3B5_1_BF_OFF ( 8)
#define EVC_AGC_3B5_LUT_3B5_1_BF_WID ( 5)
#define EVC_AGC_3B5_LUT_3B5_1_BF_MSK (0x00001F00)
#define EVC_AGC_3B5_LUT_3B5_1_BF_DEF (0x00000000)

///< 5bit gain value to use for the associated 3b AGC bus gain.
#define EVC_AGC_3B5_LUT_3B5_2_BF_OFF (16)
#define EVC_AGC_3B5_LUT_3B5_2_BF_WID ( 5)
#define EVC_AGC_3B5_LUT_3B5_2_BF_MSK (0x001F0000)
#define EVC_AGC_3B5_LUT_3B5_2_BF_DEF (0x00000000)

///< 5bit gain value to use for the associated 3b AGC bus gain.
#define EVC_AGC_3B5_LUT_3B5_3_BF_OFF (24)
#define EVC_AGC_3B5_LUT_3B5_3_BF_WID ( 5)
#define EVC_AGC_3B5_LUT_3B5_3_BF_MSK (0x1F000000)
#define EVC_AGC_3B5_LUT_3B5_3_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_GROUP_LUT register description at address offset 0x20c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_GROUP_LUT
  * AGC Group LUT Access
  */

typedef union {
  struct {
    uint32_t GROUP_LUT_ENTRY : 16;
    ///< Each bit maps to 1 of the 16 processing chains.  Setting a bit to
    ///< 1 will allow that chain's gain value to be updated when this group
    ///< is selected by the AGC bus.   Writing to this field updates the selected
    ///< group LUT entry.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
    uint32_t GROUP_LUT_SEL : 4;
    ///< Selects which of the 16 Group LUT entries this register displays or
    ///< writes to.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_grp_lut_reg_t;

#define EVC_AGC_GRP_LUT_DEFAULT (0x00000000U)
#define EVC_AGC_GRP_LUT_RD_MASK (0xf000ffffU)
#define EVC_AGC_GRP_LUT_WR_MASK (0xf000ffffU)


///< Each bit maps to 1 of the 16 processing chains.  Setting a bit to
///< 1 will allow that chain's gain value to be updated when this group
///< is selected by the AGC bus.   Writing to this field updates the selected
///< group LUT entry.
#define EVC_AGC_GRP_LUT_GRP_LUT_ENTRY_BF_OFF ( 0)
#define EVC_AGC_GRP_LUT_GRP_LUT_ENTRY_BF_WID (16)
#define EVC_AGC_GRP_LUT_GRP_LUT_ENTRY_BF_MSK (0x0000FFFF)
#define EVC_AGC_GRP_LUT_GRP_LUT_ENTRY_BF_DEF (0x00000000)

///< Selects which of the 16 Group LUT entries this register displays or
///< writes to.
#define EVC_AGC_GRP_LUT_GRP_LUT_SEL_BF_OFF (28)
#define EVC_AGC_GRP_LUT_GRP_LUT_SEL_BF_WID ( 4)
#define EVC_AGC_GRP_LUT_GRP_LUT_SEL_BF_MSK (0xF0000000)
#define EVC_AGC_GRP_LUT_GRP_LUT_SEL_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_LOG2PHY0 register description at address offset 0x210
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_LOG2PHY0
  * Logical to Physcial Mapping LUT entries 0-7
  */

typedef union {
  struct {
    uint32_t L2P_0 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t L2P_1 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t L2P_2 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t L2P_3 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t L2P_4 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t L2P_5 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t L2P_6 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t L2P_7 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_log2phy0_reg_t;

#define EVC_AGC_LOG2PHY0_DEFAULT (0x00000000U)
#define EVC_AGC_LOG2PHY0_RD_MASK (0xffffffffU)
#define EVC_AGC_LOG2PHY0_WR_MASK (0xffffffffU)


///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_0_BF_OFF ( 0)
#define EVC_AGC_LOG2PHY0_L2P_0_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_0_BF_MSK (0x0000000F)
#define EVC_AGC_LOG2PHY0_L2P_0_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_1_BF_OFF ( 4)
#define EVC_AGC_LOG2PHY0_L2P_1_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_1_BF_MSK (0x000000F0)
#define EVC_AGC_LOG2PHY0_L2P_1_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_2_BF_OFF ( 8)
#define EVC_AGC_LOG2PHY0_L2P_2_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_2_BF_MSK (0x00000F00)
#define EVC_AGC_LOG2PHY0_L2P_2_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_3_BF_OFF (12)
#define EVC_AGC_LOG2PHY0_L2P_3_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_3_BF_MSK (0x0000F000)
#define EVC_AGC_LOG2PHY0_L2P_3_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_4_BF_OFF (16)
#define EVC_AGC_LOG2PHY0_L2P_4_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_4_BF_MSK (0x000F0000)
#define EVC_AGC_LOG2PHY0_L2P_4_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_5_BF_OFF (20)
#define EVC_AGC_LOG2PHY0_L2P_5_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_5_BF_MSK (0x00F00000)
#define EVC_AGC_LOG2PHY0_L2P_5_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_6_BF_OFF (24)
#define EVC_AGC_LOG2PHY0_L2P_6_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_6_BF_MSK (0x0F000000)
#define EVC_AGC_LOG2PHY0_L2P_6_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY0_L2P_7_BF_OFF (28)
#define EVC_AGC_LOG2PHY0_L2P_7_BF_WID ( 4)
#define EVC_AGC_LOG2PHY0_L2P_7_BF_MSK (0xF0000000)
#define EVC_AGC_LOG2PHY0_L2P_7_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_LOG2PHY1 register description at address offset 0x214
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_LOG2PHY1
  * Logical to Physcial Mapping LUT entries 8-15
  */

typedef union {
  struct {
    uint32_t L2P_0 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t L2P_1 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t L2P_2 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t L2P_3 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t L2P_4 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t L2P_5 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t L2P_6 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t L2P_7 : 4;
    ///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
    ///< associated logical AGC branch.
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_log2phy1_reg_t;

#define EVC_AGC_LOG2PHY1_DEFAULT (0x00000000U)
#define EVC_AGC_LOG2PHY1_RD_MASK (0xffffffffU)
#define EVC_AGC_LOG2PHY1_WR_MASK (0xffffffffU)


///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_0_BF_OFF ( 0)
#define EVC_AGC_LOG2PHY1_L2P_0_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_0_BF_MSK (0x0000000F)
#define EVC_AGC_LOG2PHY1_L2P_0_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_1_BF_OFF ( 4)
#define EVC_AGC_LOG2PHY1_L2P_1_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_1_BF_MSK (0x000000F0)
#define EVC_AGC_LOG2PHY1_L2P_1_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_2_BF_OFF ( 8)
#define EVC_AGC_LOG2PHY1_L2P_2_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_2_BF_MSK (0x00000F00)
#define EVC_AGC_LOG2PHY1_L2P_2_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_3_BF_OFF (12)
#define EVC_AGC_LOG2PHY1_L2P_3_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_3_BF_MSK (0x0000F000)
#define EVC_AGC_LOG2PHY1_L2P_3_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_4_BF_OFF (16)
#define EVC_AGC_LOG2PHY1_L2P_4_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_4_BF_MSK (0x000F0000)
#define EVC_AGC_LOG2PHY1_L2P_4_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_5_BF_OFF (20)
#define EVC_AGC_LOG2PHY1_L2P_5_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_5_BF_MSK (0x00F00000)
#define EVC_AGC_LOG2PHY1_L2P_5_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_6_BF_OFF (24)
#define EVC_AGC_LOG2PHY1_L2P_6_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_6_BF_MSK (0x0F000000)
#define EVC_AGC_LOG2PHY1_L2P_6_BF_DEF (0x00000000)

///< Log2Phy Lut entry.   Sets the Physical branch number to use for the
///< associated logical AGC branch.
#define EVC_AGC_LOG2PHY1_L2P_7_BF_OFF (28)
#define EVC_AGC_LOG2PHY1_L2P_7_BF_WID ( 4)
#define EVC_AGC_LOG2PHY1_L2P_7_BF_MSK (0xF0000000)
#define EVC_AGC_LOG2PHY1_L2P_7_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_STATUS register description at address offset 0x218
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_STATUS
  * AGC Interface Status
  */

typedef union {
  struct {
    uint32_t LAST_ADDR : 4;
    ///< the most recent AGC ADDR field captured on the interface
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t LAST_DATA : 4;
    ///< Shows the most recent AGC DATA field captured on the interface
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t LAST_APAR : 1;
    ///< Shows the most recent ADDR Parity Bit captured on the interface
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t LAST_DPAR : 1;
    ///< Shows the most recent DATA Parity Bit captured on the interface
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_stat_reg_t;

#define EVC_AGC_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_STAT_RD_MASK (0x000003ffU)
#define EVC_AGC_STAT_WR_MASK (0x00000000U)


///< the most recent AGC ADDR field captured on the interface
#define EVC_AGC_STAT_LAST_ADDR_BF_OFF ( 0)
#define EVC_AGC_STAT_LAST_ADDR_BF_WID ( 4)
#define EVC_AGC_STAT_LAST_ADDR_BF_MSK (0x0000000F)
#define EVC_AGC_STAT_LAST_ADDR_BF_DEF (0x00000000)

///< Shows the most recent AGC DATA field captured on the interface
#define EVC_AGC_STAT_LAST_DATA_BF_OFF ( 4)
#define EVC_AGC_STAT_LAST_DATA_BF_WID ( 4)
#define EVC_AGC_STAT_LAST_DATA_BF_MSK (0x000000F0)
#define EVC_AGC_STAT_LAST_DATA_BF_DEF (0x00000000)

///< Shows the most recent ADDR Parity Bit captured on the interface
#define EVC_AGC_STAT_LAST_APAR_BF_OFF ( 8)
#define EVC_AGC_STAT_LAST_APAR_BF_WID ( 1)
#define EVC_AGC_STAT_LAST_APAR_BF_MSK (0x00000100)
#define EVC_AGC_STAT_LAST_APAR_BF_DEF (0x00000000)

///< Shows the most recent DATA Parity Bit captured on the interface
#define EVC_AGC_STAT_LAST_DPAR_BF_OFF ( 9)
#define EVC_AGC_STAT_LAST_DPAR_BF_WID ( 1)
#define EVC_AGC_STAT_LAST_DPAR_BF_MSK (0x00000200)
#define EVC_AGC_STAT_LAST_DPAR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_AGC_PERR_CNT register description at address offset 0x21c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/AGC_PERR_CNT
  * AGC Parity Error Count
  */

typedef union {
  struct {
    uint32_t ERR_CNT : 12;
    ///< Count of the number of Errors observed on the AGCC interface.  Counter
    ///< saturates at max value.   Reading this register resets the counter.
    ///< AccessType="RO/C/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t ERR_THRESH : 12;
    ///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the AGC_ERR_STATE
    ///< will be triggered.  The Alarm will remain asserted until this register
    ///< is read (which also resets the count).
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="28" ResetValue="None"
    uint32_t ALARM_CLR : 1;
    ///< Write to 1 to clear the sticky AGC_ERR_ALARM.  AGC_ERR_ALARM status
    ///< can be read in the ALARM_STATUS register.
    ///< AccessType="WO" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_perr_cnt_reg_t;

#define EVC_AGC_PERR_CNT_DEFAULT (0x00000000U)
#define EVC_AGC_PERR_CNT_RD_MASK (0x0fff0fffU)
#define EVC_AGC_PERR_CNT_WR_MASK (0x8fff0000U)


///< Count of the number of Errors observed on the AGCC interface.  Counter
///< saturates at max value.   Reading this register resets the counter.
#define EVC_AGC_PERR_CNT_ERR_CNT_BF_OFF ( 0)
#define EVC_AGC_PERR_CNT_ERR_CNT_BF_WID (12)
#define EVC_AGC_PERR_CNT_ERR_CNT_BF_MSK (0x00000FFF)
#define EVC_AGC_PERR_CNT_ERR_CNT_BF_DEF (0x00000000)

///< Threshold of the ERR_CNT.  When ERR_CNT > ERR_THRESH the AGC_ERR_STATE
///< will be triggered.  The Alarm will remain asserted until this register
///< is read (which also resets the count).
#define EVC_AGC_PERR_CNT_ERR_THRESH_BF_OFF (16)
#define EVC_AGC_PERR_CNT_ERR_THRESH_BF_WID (12)
#define EVC_AGC_PERR_CNT_ERR_THRESH_BF_MSK (0x0FFF0000)
#define EVC_AGC_PERR_CNT_ERR_THRESH_BF_DEF (0x00000000)

///< Write to 1 to clear the sticky AGC_ERR_ALARM.  AGC_ERR_ALARM status
///< can be read in the ALARM_STATUS register.
#define EVC_AGC_PERR_CNT_ALARM_CLR_BF_OFF (31)
#define EVC_AGC_PERR_CNT_ALARM_CLR_BF_WID ( 1)
#define EVC_AGC_PERR_CNT_ALARM_CLR_BF_MSK (0x80000000)
#define EVC_AGC_PERR_CNT_ALARM_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_EN_MUX register description at address offset 0x240
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/EN_MUX
  * Mux control for RX_EN and TX_EN outputs
  */

typedef union {
  struct {
    uint32_t TX_EN_MUX : 16;
    ///< Selects which instance of EVCC controls each branch's TX_EN output.
    ///< 0 selects EVCC0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_MUX : 16;
    ///< Selects which instance of EVCC controls each branch's RX_EN output.
    ///< 0 selects EVCC0
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_en_mux_reg_t;

#define EVC_AGC_EN_MUX_DEFAULT (0x00000000U)
#define EVC_AGC_EN_MUX_RD_MASK (0xffffffffU)
#define EVC_AGC_EN_MUX_WR_MASK (0xffffffffU)


///< Selects which instance of EVCC controls each branch's TX_EN output.
///< 0 selects EVCC0
#define EVC_AGC_EN_MUX_TX_EN_MUX_BF_OFF ( 0)
#define EVC_AGC_EN_MUX_TX_EN_MUX_BF_WID (16)
#define EVC_AGC_EN_MUX_TX_EN_MUX_BF_MSK (0x0000FFFF)
#define EVC_AGC_EN_MUX_TX_EN_MUX_BF_DEF (0x00000000)

///< Selects which instance of EVCC controls each branch's RX_EN output.
///< 0 selects EVCC0
#define EVC_AGC_EN_MUX_RX_EN_MUX_BF_OFF (16)
#define EVC_AGC_EN_MUX_RX_EN_MUX_BF_WID (16)
#define EVC_AGC_EN_MUX_RX_EN_MUX_BF_MSK (0xFFFF0000)
#define EVC_AGC_EN_MUX_RX_EN_MUX_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_OUT_MUX register description at address offset 0x244
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/OUT_MUX
  * Mux control for EVC outputs
  */

typedef union {
  struct {
    uint32_t FB_EN_MUX : 4;
    ///< Selects which instance of EVC controls each FB_EN output. 0 selects
    ///< EVCC0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_FGC_MUX : 2;
    ///< Selects which instance of EVC controls each RX_FGC output. 0 selects
    ///< EVCC0
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t TX_FGC_MUX : 2;
    ///< Selects which instance of EVC controls each TX_FGC output. 0 selects
    ///< EVCC0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_out_mux_reg_t;

#define EVC_AGC_OUT_MUX_DEFAULT (0x00000000U)
#define EVC_AGC_OUT_MUX_RD_MASK (0x0000033fU)
#define EVC_AGC_OUT_MUX_WR_MASK (0x0000033fU)


///< Selects which instance of EVC controls each FB_EN output. 0 selects
///< EVCC0
#define EVC_AGC_OUT_MUX_FB_EN_MUX_BF_OFF ( 0)
#define EVC_AGC_OUT_MUX_FB_EN_MUX_BF_WID ( 4)
#define EVC_AGC_OUT_MUX_FB_EN_MUX_BF_MSK (0x0000000F)
#define EVC_AGC_OUT_MUX_FB_EN_MUX_BF_DEF (0x00000000)

///< Selects which instance of EVC controls each RX_FGC output. 0 selects
///< EVCC0
#define EVC_AGC_OUT_MUX_RX_FGC_MUX_BF_OFF ( 4)
#define EVC_AGC_OUT_MUX_RX_FGC_MUX_BF_WID ( 2)
#define EVC_AGC_OUT_MUX_RX_FGC_MUX_BF_MSK (0x00000030)
#define EVC_AGC_OUT_MUX_RX_FGC_MUX_BF_DEF (0x00000000)

///< Selects which instance of EVC controls each TX_FGC output. 0 selects
///< EVCC0
#define EVC_AGC_OUT_MUX_TX_FGC_MUX_BF_OFF ( 8)
#define EVC_AGC_OUT_MUX_TX_FGC_MUX_BF_WID ( 2)
#define EVC_AGC_OUT_MUX_TX_FGC_MUX_BF_MSK (0x00000300)
#define EVC_AGC_OUT_MUX_TX_FGC_MUX_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_OUT_MASK register description at address offset 0x248
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/OUT_MASK
  * Mask control for TX_EN, RX_EN, FB_EN, NCOSW and FGC outputs
  */

typedef union {
  struct {
    uint32_t TX_EN_MASK : 4;
    ///< Each bit corresponds to a quad (4 channels).  When set, TX_EN signals
    ///< for that quad will be frozen at their current value and software will
    ///< be able to change the output values by writing to OUT_STATUS_L
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_MASK : 4;
    ///< Each bit corresponds to a quad (4 channels).  When set, RX_EN signals
    ///< for that quad will be frozen at their current value and software will
    ///< be able to change the output values by writing to OUT_STATUS_L
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t FB_EN_MASK : 4;
    ///< When set, the corresponding FB_EN signal will be frozen at its current
    ///< value and software will be able to change the output values by writing
    ///< to OUT_STATUS_H
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TX_FGC_MASK : 2;
    ///< When set, the corresponding FGC signal will be frozen at its current
    ///< value and software will be able to change the output values by writing
    ///< to OUT_STATUS_H
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_FGC_MASK : 2;
    ///< When set, the corresponding FGC signal will be frozen at its current
    ///< value and software will be able to change the output values by writing
    ///< to OUT_STATUS_H
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t TX_NCOSW_MASK : 2;
    ///< When set, the corresponding NCOSW signal will be frozen at its current
    ///< value and software will be able to change the output values by writing
    ///< to OUT_STATUS_H
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t RX_NCOSW_MASK : 2;
    ///< When set, the corresponding NCOSW signal will be frozen at its current
    ///< value and software will be able to change the output values by writing
    ///< to OUT_STATUS_H
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t  : 12;
    ///< Reserved
    ///< AccessType="RO" BitOffset="20" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_out_mask_reg_t;

#define EVC_AGC_OUT_MASK_DEFAULT (0x00000000U)
#define EVC_AGC_OUT_MASK_RD_MASK (0x000fffffU)
#define EVC_AGC_OUT_MASK_WR_MASK (0x000fffffU)


///< Each bit corresponds to a quad (4 channels).  When set, TX_EN signals
///< for that quad will be frozen at their current value and software will
///< be able to change the output values by writing to OUT_STATUS_L
#define EVC_AGC_OUT_MASK_TX_EN_MASK_BF_OFF ( 0)
#define EVC_AGC_OUT_MASK_TX_EN_MASK_BF_WID ( 4)
#define EVC_AGC_OUT_MASK_TX_EN_MASK_BF_MSK (0x0000000F)
#define EVC_AGC_OUT_MASK_TX_EN_MASK_BF_DEF (0x00000000)

///< Each bit corresponds to a quad (4 channels).  When set, RX_EN signals
///< for that quad will be frozen at their current value and software will
///< be able to change the output values by writing to OUT_STATUS_L
#define EVC_AGC_OUT_MASK_RX_EN_MASK_BF_OFF ( 4)
#define EVC_AGC_OUT_MASK_RX_EN_MASK_BF_WID ( 4)
#define EVC_AGC_OUT_MASK_RX_EN_MASK_BF_MSK (0x000000F0)
#define EVC_AGC_OUT_MASK_RX_EN_MASK_BF_DEF (0x00000000)

///< When set, the corresponding FB_EN signal will be frozen at its current
///< value and software will be able to change the output values by writing
///< to OUT_STATUS_H
#define EVC_AGC_OUT_MASK_FB_EN_MASK_BF_OFF ( 8)
#define EVC_AGC_OUT_MASK_FB_EN_MASK_BF_WID ( 4)
#define EVC_AGC_OUT_MASK_FB_EN_MASK_BF_MSK (0x00000F00)
#define EVC_AGC_OUT_MASK_FB_EN_MASK_BF_DEF (0x00000000)

///< When set, the corresponding FGC signal will be frozen at its current
///< value and software will be able to change the output values by writing
///< to OUT_STATUS_H
#define EVC_AGC_OUT_MASK_TX_FGC_MASK_BF_OFF (12)
#define EVC_AGC_OUT_MASK_TX_FGC_MASK_BF_WID ( 2)
#define EVC_AGC_OUT_MASK_TX_FGC_MASK_BF_MSK (0x00003000)
#define EVC_AGC_OUT_MASK_TX_FGC_MASK_BF_DEF (0x00000000)

///< When set, the corresponding FGC signal will be frozen at its current
///< value and software will be able to change the output values by writing
///< to OUT_STATUS_H
#define EVC_AGC_OUT_MASK_RX_FGC_MASK_BF_OFF (14)
#define EVC_AGC_OUT_MASK_RX_FGC_MASK_BF_WID ( 2)
#define EVC_AGC_OUT_MASK_RX_FGC_MASK_BF_MSK (0x0000C000)
#define EVC_AGC_OUT_MASK_RX_FGC_MASK_BF_DEF (0x00000000)

///< When set, the corresponding NCOSW signal will be frozen at its current
///< value and software will be able to change the output values by writing
///< to OUT_STATUS_H
#define EVC_AGC_OUT_MASK_TX_NCOSW_MASK_BF_OFF (16)
#define EVC_AGC_OUT_MASK_TX_NCOSW_MASK_BF_WID ( 2)
#define EVC_AGC_OUT_MASK_TX_NCOSW_MASK_BF_MSK (0x00030000)
#define EVC_AGC_OUT_MASK_TX_NCOSW_MASK_BF_DEF (0x00000000)

///< When set, the corresponding NCOSW signal will be frozen at its current
///< value and software will be able to change the output values by writing
///< to OUT_STATUS_H
#define EVC_AGC_OUT_MASK_RX_NCOSW_MASK_BF_OFF (18)
#define EVC_AGC_OUT_MASK_RX_NCOSW_MASK_BF_WID ( 2)
#define EVC_AGC_OUT_MASK_RX_NCOSW_MASK_BF_MSK (0x000C0000)
#define EVC_AGC_OUT_MASK_RX_NCOSW_MASK_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_FGC_SEL register description at address offset 0x24c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/FGC_SEL
  * FGC branch selects
  */

typedef union {
  struct {
    uint32_t RX_FGC0_SEL : 3;
    ///< Selects which branch is controlled by RX_FGC0. Selects physical branch
    ///< 0-7.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t RX_FGC1_SEL : 3;
    ///< Selects which branch is controlled by RX_FGC1. Selects physical branch
    ///< 8-15.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 25;
    ///< Reserved
    ///< AccessType="RO" BitOffset="7" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_fgc_sel_reg_t;

#define EVC_AGC_FGC_SEL_DEFAULT (0x00000000U)
#define EVC_AGC_FGC_SEL_RD_MASK (0x00000077U)
#define EVC_AGC_FGC_SEL_WR_MASK (0x00000077U)


///< Selects which branch is controlled by RX_FGC0. Selects physical branch
///< 0-7.
#define EVC_AGC_FGC_SEL_RX_FGC0_SEL_BF_OFF ( 0)
#define EVC_AGC_FGC_SEL_RX_FGC0_SEL_BF_WID ( 3)
#define EVC_AGC_FGC_SEL_RX_FGC0_SEL_BF_MSK (0x00000007)
#define EVC_AGC_FGC_SEL_RX_FGC0_SEL_BF_DEF (0x00000000)

///< Selects which branch is controlled by RX_FGC1. Selects physical branch
///< 8-15.
#define EVC_AGC_FGC_SEL_RX_FGC1_SEL_BF_OFF ( 4)
#define EVC_AGC_FGC_SEL_RX_FGC1_SEL_BF_WID ( 3)
#define EVC_AGC_FGC_SEL_RX_FGC1_SEL_BF_MSK (0x00000070)
#define EVC_AGC_FGC_SEL_RX_FGC1_SEL_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_RX_AC_GAIN register description at address offset 0x250
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/RX_AC_GAIN
  * Gain setting for RX AC
  */

typedef union {
  struct {
    uint32_t RX_DSA_AC : 5;
    ///< Gain value to use for RX AC
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 27;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_rx_ac_gain_reg_t;

#define EVC_AGC_RX_AC_GAIN_DEFAULT (0x00000000U)
#define EVC_AGC_RX_AC_GAIN_RD_MASK (0x0000001fU)
#define EVC_AGC_RX_AC_GAIN_WR_MASK (0x0000001fU)


///< Gain value to use for RX AC
#define EVC_AGC_RX_AC_GAIN_RX_DSA_AC_BF_OFF ( 0)
#define EVC_AGC_RX_AC_GAIN_RX_DSA_AC_BF_WID ( 5)
#define EVC_AGC_RX_AC_GAIN_RX_DSA_AC_BF_MSK (0x0000001F)
#define EVC_AGC_RX_AC_GAIN_RX_DSA_AC_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_RX_SLOW_GAIN register description at address offset 0x254
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/RX_SLOW_GAIN
  * Per Branch Slow Gain Setting
  */

typedef union {
  struct {
    uint32_t RX_DSA_UL : 5;
    ///< Slow gain value to read/write for branch selected by RX_DSA_SEL field
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 3;
    ///< Reserved
    ///< AccessType="RO" BitOffset="5" ResetValue="None"
    uint32_t RX_DSA_SEL : 4;
    ///< Selects the branch to read/write using the RX_DSA_UL field
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_rx_slow_gain_reg_t;

#define EVC_AGC_RX_SLOW_GAIN_DEFAULT (0x00000000U)
#define EVC_AGC_RX_SLOW_GAIN_RD_MASK (0x00000f1fU)
#define EVC_AGC_RX_SLOW_GAIN_WR_MASK (0x00000f1fU)


///< Slow gain value to read/write for branch selected by RX_DSA_SEL field
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_UL_BF_OFF ( 0)
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_UL_BF_WID ( 5)
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_UL_BF_MSK (0x0000001F)
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_UL_BF_DEF (0x00000000)

///< Selects the branch to read/write using the RX_DSA_UL field
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_SEL_BF_OFF ( 8)
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_SEL_BF_WID ( 4)
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_SEL_BF_MSK (0x00000F00)
#define EVC_AGC_RX_SLOW_GAIN_RX_DSA_SEL_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_OUT_STATUS_L register description at address offset 0x260
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/OUT_STATUS_L
  * Status of output signals driven to SOC
  */

typedef union {
  struct {
    uint32_t TX_EN : 16;
    ///< Current value of the TX_EN outputs.  Allows writing the output value
    ///< when the matching quad's OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN : 16;
    ///< Current Value of the RX_EN outputs.  Allows writing the output value
    ///< when the matching quad's OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_out_stat_l_reg_t;

#define EVC_AGC_OUT_STAT_L_DEFAULT (0x00000000U)
#define EVC_AGC_OUT_STAT_L_RD_MASK (0xffffffffU)
#define EVC_AGC_OUT_STAT_L_WR_MASK (0xffffffffU)


///< Current value of the TX_EN outputs.  Allows writing the output value
///< when the matching quad's OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_L_TX_EN_BF_OFF ( 0)
#define EVC_AGC_OUT_STAT_L_TX_EN_BF_WID (16)
#define EVC_AGC_OUT_STAT_L_TX_EN_BF_MSK (0x0000FFFF)
#define EVC_AGC_OUT_STAT_L_TX_EN_BF_DEF (0x00000000)

///< Current Value of the RX_EN outputs.  Allows writing the output value
///< when the matching quad's OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_L_RX_EN_BF_OFF (16)
#define EVC_AGC_OUT_STAT_L_RX_EN_BF_WID (16)
#define EVC_AGC_OUT_STAT_L_RX_EN_BF_MSK (0xFFFF0000)
#define EVC_AGC_OUT_STAT_L_RX_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_OUT_STATUS_H register description at address offset 0x264
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/OUT_STATUS_H
  * Status of output signals driven to SOC
  */

typedef union {
  struct {
    uint32_t FB_EN : 4;
    ///< Current value of the FB_EN outputs.  Allows writing the output value
    ///< when the matching OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t TX_FGC : 2;
    ///< Current value of the TX_FGC outputs.  Allows writing the output value
    ///< when the matching OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_FGC : 2;
    ///< Current value of the RX_FGC outputs.  Allows writing the output value
    ///< when the matching OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="6" ResetValue="0x0"
    uint32_t TX_NCOSW : 2;
    ///< Current value of the TX_NCOSW outputs.  Allows writing the output
    ///< value when the matching OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_NCOSW : 2;
    ///< Current value of the RX_NCOSW outputs.  Allows writing the output
    ///< value when the matching OUT_MASK bit is set.
    ///< AccessType="RW/V" BitOffset="10" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_out_stat_h_reg_t;

#define EVC_AGC_OUT_STAT_H_DEFAULT (0x00000000U)
#define EVC_AGC_OUT_STAT_H_RD_MASK (0x00000fffU)
#define EVC_AGC_OUT_STAT_H_WR_MASK (0x00000fffU)


///< Current value of the FB_EN outputs.  Allows writing the output value
///< when the matching OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_H_FB_EN_BF_OFF ( 0)
#define EVC_AGC_OUT_STAT_H_FB_EN_BF_WID ( 4)
#define EVC_AGC_OUT_STAT_H_FB_EN_BF_MSK (0x0000000F)
#define EVC_AGC_OUT_STAT_H_FB_EN_BF_DEF (0x00000000)

///< Current value of the TX_FGC outputs.  Allows writing the output value
///< when the matching OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_H_TX_FGC_BF_OFF ( 4)
#define EVC_AGC_OUT_STAT_H_TX_FGC_BF_WID ( 2)
#define EVC_AGC_OUT_STAT_H_TX_FGC_BF_MSK (0x00000030)
#define EVC_AGC_OUT_STAT_H_TX_FGC_BF_DEF (0x00000000)

///< Current value of the RX_FGC outputs.  Allows writing the output value
///< when the matching OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_H_RX_FGC_BF_OFF ( 6)
#define EVC_AGC_OUT_STAT_H_RX_FGC_BF_WID ( 2)
#define EVC_AGC_OUT_STAT_H_RX_FGC_BF_MSK (0x000000C0)
#define EVC_AGC_OUT_STAT_H_RX_FGC_BF_DEF (0x00000000)

///< Current value of the TX_NCOSW outputs.  Allows writing the output
///< value when the matching OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_H_TX_NCOSW_BF_OFF ( 8)
#define EVC_AGC_OUT_STAT_H_TX_NCOSW_BF_WID ( 2)
#define EVC_AGC_OUT_STAT_H_TX_NCOSW_BF_MSK (0x00000300)
#define EVC_AGC_OUT_STAT_H_TX_NCOSW_BF_DEF (0x00000000)

///< Current value of the RX_NCOSW outputs.  Allows writing the output
///< value when the matching OUT_MASK bit is set.
#define EVC_AGC_OUT_STAT_H_RX_NCOSW_BF_OFF (10)
#define EVC_AGC_OUT_STAT_H_RX_NCOSW_BF_WID ( 2)
#define EVC_AGC_OUT_STAT_H_RX_NCOSW_BF_MSK (0x00000C00)
#define EVC_AGC_OUT_STAT_H_RX_NCOSW_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_MON_INT_STATUS register description at address offset 0x270
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/MON_INT_STATUS
  * Status of the high priority mon_int_hi and low priority mon_int_lo interrupt sources
  */

typedef union {
  struct {
    uint32_t RXTX_RISE_HI : 1;
    ///< Status of the RXTX_RISE_HI interrupt.  Triggers on Rising edges of
    ///< RX_EN or TX_EN.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RXTX_FALL_HI : 1;
    ///< Status of the RXTX_FALL_HI interrupt.  Triggers on Falling edges of
    ///< RX_EN or TX_EN.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t CTL_RISE_HI : 1;
    ///< Status of the CTL_RISE_HI interrupt.  Triggers on Rising edges of
    ///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t CTL_FALL_HI : 1;
    ///< Status of the CTL_FALL_HI interrupt.  Triggers on Falling edges of
    ///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t GPIO_DELTA_HI : 1;
    ///< Status of the GPIO_DELTA_HI interrupt.  Triggers on change to the
    ///< GPIO inputs.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t BUS_ERR_HI : 1;
    ///< Status of the BUS_ERR interrupt.  Triggers on error states of EVCC
    ///< and AGCC.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 2;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t RXTX_RISE_LO : 1;
    ///< Status of the RXTX_RISE_LO interrupt.  Triggers on Rising edges of
    ///< RX_EN or TX_EN.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RXTX_FALL_LO : 1;
    ///< Status of the RXTX_FALL_LO interrupt.  Triggers on Falling edges of
    ///< RX_EN or TX_EN.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t CTL_RISE_LO : 1;
    ///< Status of the CTL_RISE_LO interrupt.  Triggers on Rising edges of
    ///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t CTL_FALL_LO : 1;
    ///< Status of the CTL_FALL_LO interrupt.  Triggers on Falling edges of
    ///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
    ///< AccessType="RO/V" BitOffset="11" ResetValue="0x0"
    uint32_t GPIO_DELTA_LO : 1;
    ///< Status of the GPIO_DELTA_LO interrupt.  Triggers on change to the
    ///< GPIO inputs.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t BUS_ERR_LO : 1;
    ///< Status of the BUS_ERR interrupt.  Triggers on error states of EVCC
    ///< and AGCC.
    ///< AccessType="RO/V" BitOffset="13" ResetValue="0x0"
    uint32_t  : 18;
    ///< Reserved
    ///< AccessType="RO" BitOffset="14" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_mon_int_stat_reg_t;

#define EVC_AGC_MON_INT_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_MON_INT_STAT_RD_MASK (0x00003f3fU)
#define EVC_AGC_MON_INT_STAT_WR_MASK (0x00000000U)


///< Status of the RXTX_RISE_HI interrupt.  Triggers on Rising edges of
///< RX_EN or TX_EN.
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_HI_BF_OFF ( 0)
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_HI_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_HI_BF_MSK (0x00000001)
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_HI_BF_DEF (0x00000000)

///< Status of the RXTX_FALL_HI interrupt.  Triggers on Falling edges of
///< RX_EN or TX_EN.
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_HI_BF_OFF ( 1)
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_HI_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_HI_BF_MSK (0x00000002)
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_HI_BF_DEF (0x00000000)

///< Status of the CTL_RISE_HI interrupt.  Triggers on Rising edges of
///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
#define EVC_AGC_MON_INT_STAT_CTL_RISE_HI_BF_OFF ( 2)
#define EVC_AGC_MON_INT_STAT_CTL_RISE_HI_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_CTL_RISE_HI_BF_MSK (0x00000004)
#define EVC_AGC_MON_INT_STAT_CTL_RISE_HI_BF_DEF (0x00000000)

///< Status of the CTL_FALL_HI interrupt.  Triggers on Falling edges of
///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
#define EVC_AGC_MON_INT_STAT_CTL_FALL_HI_BF_OFF ( 3)
#define EVC_AGC_MON_INT_STAT_CTL_FALL_HI_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_CTL_FALL_HI_BF_MSK (0x00000008)
#define EVC_AGC_MON_INT_STAT_CTL_FALL_HI_BF_DEF (0x00000000)

///< Status of the GPIO_DELTA_HI interrupt.  Triggers on change to the
///< GPIO inputs.
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_HI_BF_OFF ( 4)
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_HI_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_HI_BF_MSK (0x00000010)
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_HI_BF_DEF (0x00000000)

///< Status of the BUS_ERR interrupt.  Triggers on error states of EVCC
///< and AGCC.
#define EVC_AGC_MON_INT_STAT_BUS_ERR_HI_BF_OFF ( 5)
#define EVC_AGC_MON_INT_STAT_BUS_ERR_HI_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_BUS_ERR_HI_BF_MSK (0x00000020)
#define EVC_AGC_MON_INT_STAT_BUS_ERR_HI_BF_DEF (0x00000000)

///< Status of the RXTX_RISE_LO interrupt.  Triggers on Rising edges of
///< RX_EN or TX_EN.
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_LO_BF_OFF ( 8)
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_LO_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_LO_BF_MSK (0x00000100)
#define EVC_AGC_MON_INT_STAT_RXTX_RISE_LO_BF_DEF (0x00000000)

///< Status of the RXTX_FALL_LO interrupt.  Triggers on Falling edges of
///< RX_EN or TX_EN.
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_LO_BF_OFF ( 9)
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_LO_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_LO_BF_MSK (0x00000200)
#define EVC_AGC_MON_INT_STAT_RXTX_FALL_LO_BF_DEF (0x00000000)

///< Status of the CTL_RISE_LO interrupt.  Triggers on Rising edges of
///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
#define EVC_AGC_MON_INT_STAT_CTL_RISE_LO_BF_OFF (10)
#define EVC_AGC_MON_INT_STAT_CTL_RISE_LO_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_CTL_RISE_LO_BF_MSK (0x00000400)
#define EVC_AGC_MON_INT_STAT_CTL_RISE_LO_BF_DEF (0x00000000)

///< Status of the CTL_FALL_LO interrupt.  Triggers on Falling edges of
///< FB_EN, RX_FGC, TX_FGC, RX_NCO_SW or TX_NCO_SW.
#define EVC_AGC_MON_INT_STAT_CTL_FALL_LO_BF_OFF (11)
#define EVC_AGC_MON_INT_STAT_CTL_FALL_LO_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_CTL_FALL_LO_BF_MSK (0x00000800)
#define EVC_AGC_MON_INT_STAT_CTL_FALL_LO_BF_DEF (0x00000000)

///< Status of the GPIO_DELTA_LO interrupt.  Triggers on change to the
///< GPIO inputs.
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_LO_BF_OFF (12)
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_LO_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_LO_BF_MSK (0x00001000)
#define EVC_AGC_MON_INT_STAT_GPIO_DELTA_LO_BF_DEF (0x00000000)

///< Status of the BUS_ERR interrupt.  Triggers on error states of EVCC
///< and AGCC.
#define EVC_AGC_MON_INT_STAT_BUS_ERR_LO_BF_OFF (13)
#define EVC_AGC_MON_INT_STAT_BUS_ERR_LO_BF_WID ( 1)
#define EVC_AGC_MON_INT_STAT_BUS_ERR_LO_BF_MSK (0x00002000)
#define EVC_AGC_MON_INT_STAT_BUS_ERR_LO_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_BRIDGE_STATUS register description at address offset 0x274
  *
  * Register default value:        0x00010000
  * Register full path in IP: evc_agc_comp/reg/BRIDGE_STATUS
  * APB Bridge Status Register
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_brdg_stat_reg_t;

#define EVC_AGC_BRDG_STAT_DEFAULT (0x00010000U)
#define EVC_AGC_BRDG_STAT_RD_MASK (0xffffffffU)
#define EVC_AGC_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define EVC_AGC_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define EVC_AGC_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define EVC_AGC_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define EVC_AGC_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define EVC_AGC_BRDG_STAT_REVISION_BF_OFF (20)
#define EVC_AGC_BRDG_STAT_REVISION_BF_WID ( 8)
#define EVC_AGC_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define EVC_AGC_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define EVC_AGC_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define EVC_AGC_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define EVC_AGC_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define EVC_AGC_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define EVC_AGC_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define EVC_AGC_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define EVC_AGC_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define EVC_AGC_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define EVC_AGC_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define EVC_AGC_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define EVC_AGC_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define EVC_AGC_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define EVC_AGC_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define EVC_AGC_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define EVC_AGC_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define EVC_AGC_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_BUS_ERR_INT_STATUS register description at address offset 0x280
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/BUS_ERR_INT_STATUS
  * Status of EVCC and AGCC alarm interrupt sources
  */

typedef union {
  struct {
    uint32_t EVC_PARITY_ALARM0 : 1;
    ///< EVC0 parity error alarm status.  Parity error count exceeds threshold.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t EVC_STATE_ALARM0 : 1;
    ///< EVC0 state error alarm status.  State error count exceeds threshold.
    ///< AccessType="RO/V" BitOffset="1" ResetValue="0x0"
    uint32_t EVC_PARITY_ALARM1 : 1;
    ///< EVC1 parity error alarm status.  Parity error count exceeds threshold.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t EVC_STATE_ALARM1 : 1;
    ///< EVC1 state error alarm status.  State error count exceeds threshold.
    ///< AccessType="RO/V" BitOffset="3" ResetValue="0x0"
    uint32_t AGC_ERR_ALARM : 1;
    ///< AGC parity error alarm sticky status.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t AGC_ERR_STATE : 1;
    ///< AGC parity error alarm sticky status. Parity error count exceeds threshold.
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t EVC0_SBE : 1;
    ///< EVC0 mode LUT single bit ECC error.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t EVC0_DBE : 1;
    ///< EVC0 mode LUT double bit ECC error.
    ///< AccessType="RO/V" BitOffset="7" ResetValue="0x0"
    uint32_t EVC1_SBE : 1;
    ///< EVC1 mode LUT single bit ECC error.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t EVC1_DBE : 1;
    ///< EVC1 mode LUT double bit ECC error.
    ///< AccessType="RO/V" BitOffset="9" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_bus_err_int_stat_reg_t;

#define EVC_AGC_BUS_ERR_INT_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_BUS_ERR_INT_STAT_RD_MASK (0x000003ffU)
#define EVC_AGC_BUS_ERR_INT_STAT_WR_MASK (0x00000000U)


///< EVC0 parity error alarm status.  Parity error count exceeds threshold.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM0_BF_OFF ( 0)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM0_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM0_BF_MSK (0x00000001)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM0_BF_DEF (0x00000000)

///< EVC0 state error alarm status.  State error count exceeds threshold.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM0_BF_OFF ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM0_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM0_BF_MSK (0x00000002)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM0_BF_DEF (0x00000000)

///< EVC1 parity error alarm status.  Parity error count exceeds threshold.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM1_BF_OFF ( 2)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM1_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM1_BF_MSK (0x00000004)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_PARITY_ALARM1_BF_DEF (0x00000000)

///< EVC1 state error alarm status.  State error count exceeds threshold.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM1_BF_OFF ( 3)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM1_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM1_BF_MSK (0x00000008)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC_STATE_ALARM1_BF_DEF (0x00000000)

///< AGC parity error alarm sticky status.
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_ALARM_BF_OFF ( 4)
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_ALARM_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_ALARM_BF_MSK (0x00000010)
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_ALARM_BF_DEF (0x00000000)

///< AGC parity error alarm sticky status. Parity error count exceeds threshold.
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_STATE_BF_OFF ( 5)
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_STATE_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_STATE_BF_MSK (0x00000020)
#define EVC_AGC_BUS_ERR_INT_STAT_AGC_ERR_STATE_BF_DEF (0x00000000)

///< EVC0 mode LUT single bit ECC error.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_SBE_BF_OFF ( 6)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_SBE_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_SBE_BF_MSK (0x00000040)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_SBE_BF_DEF (0x00000000)

///< EVC0 mode LUT double bit ECC error.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_DBE_BF_OFF ( 7)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_DBE_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_DBE_BF_MSK (0x00000080)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC0_DBE_BF_DEF (0x00000000)

///< EVC1 mode LUT single bit ECC error.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_SBE_BF_OFF ( 8)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_SBE_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_SBE_BF_MSK (0x00000100)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_SBE_BF_DEF (0x00000000)

///< EVC1 mode LUT double bit ECC error.
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_DBE_BF_OFF ( 9)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_DBE_BF_WID ( 1)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_DBE_BF_MSK (0x00000200)
#define EVC_AGC_BUS_ERR_INT_STAT_EVC1_DBE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_BUS_ERR_HI_EN register description at address offset 0x284
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/BUS_ERR_HI_EN
  * Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 10;
    ///< interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_bus_err_hi_en_reg_t;

#define EVC_AGC_BUS_ERR_HI_EN_DEFAULT (0x00000000U)
#define EVC_AGC_BUS_ERR_HI_EN_RD_MASK (0x000003ffU)
#define EVC_AGC_BUS_ERR_HI_EN_WR_MASK (0x000003ffU)


///< interrupt high enable
#define EVC_AGC_BUS_ERR_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define EVC_AGC_BUS_ERR_HI_EN_INT_HI_EN_BF_WID (10)
#define EVC_AGC_BUS_ERR_HI_EN_INT_HI_EN_BF_MSK (0x000003FF)
#define EVC_AGC_BUS_ERR_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_BUS_ERR_LO_EN register description at address offset 0x288
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/BUS_ERR_LO_EN
  * Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 10;
    ///< interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_bus_err_lo_en_reg_t;

#define EVC_AGC_BUS_ERR_LO_EN_DEFAULT (0x00000000U)
#define EVC_AGC_BUS_ERR_LO_EN_RD_MASK (0x000003ffU)
#define EVC_AGC_BUS_ERR_LO_EN_WR_MASK (0x000003ffU)


///< interrupt low enable
#define EVC_AGC_BUS_ERR_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define EVC_AGC_BUS_ERR_LO_EN_INT_LO_EN_BF_WID (10)
#define EVC_AGC_BUS_ERR_LO_EN_INT_LO_EN_BF_MSK (0x000003FF)
#define EVC_AGC_BUS_ERR_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_BUS_ERR_CLEAR register description at address offset 0x28c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/BUS_ERR_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 10;
    ///< interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_bus_err_clr_reg_t;

#define EVC_AGC_BUS_ERR_CLR_DEFAULT (0x00000000U)
#define EVC_AGC_BUS_ERR_CLR_RD_MASK (0x000003ffU)
#define EVC_AGC_BUS_ERR_CLR_WR_MASK (0x000003ffU)


///< interrupt clear
#define EVC_AGC_BUS_ERR_CLR_INT_CLR_BF_OFF ( 0)
#define EVC_AGC_BUS_ERR_CLR_INT_CLR_BF_WID (10)
#define EVC_AGC_BUS_ERR_CLR_INT_CLR_BF_MSK (0x000003FF)
#define EVC_AGC_BUS_ERR_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_BUS_ERR_FORCE register description at address offset 0x290
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/BUS_ERR_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 10;
    ///< interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_bus_err_force_reg_t;

#define EVC_AGC_BUS_ERR_FORCE_DEFAULT (0x00000000U)
#define EVC_AGC_BUS_ERR_FORCE_RD_MASK (0x000003ffU)
#define EVC_AGC_BUS_ERR_FORCE_WR_MASK (0x000003ffU)


///< interrupt force
#define EVC_AGC_BUS_ERR_FORCE_INT_FORCE_BF_OFF ( 0)
#define EVC_AGC_BUS_ERR_FORCE_INT_FORCE_BF_WID (10)
#define EVC_AGC_BUS_ERR_FORCE_INT_FORCE_BF_MSK (0x000003FF)
#define EVC_AGC_BUS_ERR_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_RISE_INT_STATUS register description at address offset 0x300
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_RISE_INT_STATUS
  * RX_EN,TX_EN rising edge Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t TX_EN_INT_STAT : 16;
    ///< Indicates rising edge of TX_EN observed
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_INT_STAT : 16;
    ///< Indicates rising edge of RX_EN observed
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_rise_int_stat_reg_t;

#define EVC_AGC_TX_RX_RISE_INT_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_RISE_INT_STAT_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_RISE_INT_STAT_WR_MASK (0x00000000U)


///< Indicates rising edge of TX_EN observed
#define EVC_AGC_TX_RX_RISE_INT_STAT_TX_EN_INT_STAT_BF_OFF ( 0)
#define EVC_AGC_TX_RX_RISE_INT_STAT_TX_EN_INT_STAT_BF_WID (16)
#define EVC_AGC_TX_RX_RISE_INT_STAT_TX_EN_INT_STAT_BF_MSK (0x0000FFFF)
#define EVC_AGC_TX_RX_RISE_INT_STAT_TX_EN_INT_STAT_BF_DEF (0x00000000)

///< Indicates rising edge of RX_EN observed
#define EVC_AGC_TX_RX_RISE_INT_STAT_RX_EN_INT_STAT_BF_OFF (16)
#define EVC_AGC_TX_RX_RISE_INT_STAT_RX_EN_INT_STAT_BF_WID (16)
#define EVC_AGC_TX_RX_RISE_INT_STAT_RX_EN_INT_STAT_BF_MSK (0xFFFF0000)
#define EVC_AGC_TX_RX_RISE_INT_STAT_RX_EN_INT_STAT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_RISE_HI_EN register description at address offset 0x304
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_RISE_HI_EN
  * Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 32;
    ///< interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_rise_hi_en_reg_t;

#define EVC_AGC_TX_RX_RISE_HI_EN_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_RISE_HI_EN_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_RISE_HI_EN_WR_MASK (0xffffffffU)


///< interrupt high enable
#define EVC_AGC_TX_RX_RISE_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define EVC_AGC_TX_RX_RISE_HI_EN_INT_HI_EN_BF_WID (32)
#define EVC_AGC_TX_RX_RISE_HI_EN_INT_HI_EN_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_RISE_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_RISE_LO_EN register description at address offset 0x308
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_RISE_LO_EN
  * Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 32;
    ///< interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_rise_lo_en_reg_t;

#define EVC_AGC_TX_RX_RISE_LO_EN_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_RISE_LO_EN_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_RISE_LO_EN_WR_MASK (0xffffffffU)


///< interrupt low enable
#define EVC_AGC_TX_RX_RISE_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define EVC_AGC_TX_RX_RISE_LO_EN_INT_LO_EN_BF_WID (32)
#define EVC_AGC_TX_RX_RISE_LO_EN_INT_LO_EN_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_RISE_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_RISE_CLEAR register description at address offset 0x30c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_RISE_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 32;
    ///< interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_rise_clr_reg_t;

#define EVC_AGC_TX_RX_RISE_CLR_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_RISE_CLR_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_RISE_CLR_WR_MASK (0xffffffffU)


///< interrupt clear
#define EVC_AGC_TX_RX_RISE_CLR_INT_CLR_BF_OFF ( 0)
#define EVC_AGC_TX_RX_RISE_CLR_INT_CLR_BF_WID (32)
#define EVC_AGC_TX_RX_RISE_CLR_INT_CLR_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_RISE_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_RISE_FORCE register description at address offset 0x310
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_RISE_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 32;
    ///< interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_rise_force_reg_t;

#define EVC_AGC_TX_RX_RISE_FORCE_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_RISE_FORCE_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_RISE_FORCE_WR_MASK (0xffffffffU)


///< interrupt force
#define EVC_AGC_TX_RX_RISE_FORCE_INT_FORCE_BF_OFF ( 0)
#define EVC_AGC_TX_RX_RISE_FORCE_INT_FORCE_BF_WID (32)
#define EVC_AGC_TX_RX_RISE_FORCE_INT_FORCE_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_RISE_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_FALL_INT_STATUS register description at address offset 0x320
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_FALL_INT_STATUS
  * RX_EN,TX_EN falling edge Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t TX_EN_INT_STAT : 16;
    ///< Indicates falling edge of TX_EN observed
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_EN_INT_STAT : 16;
    ///< Indicates falling edge of RX_EN observed
    ///< AccessType="RO/V" BitOffset="16" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_fall_int_stat_reg_t;

#define EVC_AGC_TX_RX_FALL_INT_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_FALL_INT_STAT_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_FALL_INT_STAT_WR_MASK (0x00000000U)


///< Indicates falling edge of TX_EN observed
#define EVC_AGC_TX_RX_FALL_INT_STAT_TX_EN_INT_STAT_BF_OFF ( 0)
#define EVC_AGC_TX_RX_FALL_INT_STAT_TX_EN_INT_STAT_BF_WID (16)
#define EVC_AGC_TX_RX_FALL_INT_STAT_TX_EN_INT_STAT_BF_MSK (0x0000FFFF)
#define EVC_AGC_TX_RX_FALL_INT_STAT_TX_EN_INT_STAT_BF_DEF (0x00000000)

///< Indicates falling edge of RX_EN observed
#define EVC_AGC_TX_RX_FALL_INT_STAT_RX_EN_INT_STAT_BF_OFF (16)
#define EVC_AGC_TX_RX_FALL_INT_STAT_RX_EN_INT_STAT_BF_WID (16)
#define EVC_AGC_TX_RX_FALL_INT_STAT_RX_EN_INT_STAT_BF_MSK (0xFFFF0000)
#define EVC_AGC_TX_RX_FALL_INT_STAT_RX_EN_INT_STAT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_FALL_HI_EN register description at address offset 0x324
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_FALL_HI_EN
  * Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 32;
    ///< interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_fall_hi_en_reg_t;

#define EVC_AGC_TX_RX_FALL_HI_EN_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_FALL_HI_EN_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_FALL_HI_EN_WR_MASK (0xffffffffU)


///< interrupt high enable
#define EVC_AGC_TX_RX_FALL_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define EVC_AGC_TX_RX_FALL_HI_EN_INT_HI_EN_BF_WID (32)
#define EVC_AGC_TX_RX_FALL_HI_EN_INT_HI_EN_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_FALL_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_FALL_LO_EN register description at address offset 0x328
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_FALL_LO_EN
  * Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 32;
    ///< interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_fall_lo_en_reg_t;

#define EVC_AGC_TX_RX_FALL_LO_EN_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_FALL_LO_EN_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_FALL_LO_EN_WR_MASK (0xffffffffU)


///< interrupt low enable
#define EVC_AGC_TX_RX_FALL_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define EVC_AGC_TX_RX_FALL_LO_EN_INT_LO_EN_BF_WID (32)
#define EVC_AGC_TX_RX_FALL_LO_EN_INT_LO_EN_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_FALL_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_FALL_CLEAR register description at address offset 0x32c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_FALL_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 32;
    ///< interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_fall_clr_reg_t;

#define EVC_AGC_TX_RX_FALL_CLR_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_FALL_CLR_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_FALL_CLR_WR_MASK (0xffffffffU)


///< interrupt clear
#define EVC_AGC_TX_RX_FALL_CLR_INT_CLR_BF_OFF ( 0)
#define EVC_AGC_TX_RX_FALL_CLR_INT_CLR_BF_WID (32)
#define EVC_AGC_TX_RX_FALL_CLR_INT_CLR_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_FALL_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_TX_RX_FALL_FORCE register description at address offset 0x330
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/TX_RX_FALL_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 32;
    ///< interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} evc_agc_tx_rx_fall_force_reg_t;

#define EVC_AGC_TX_RX_FALL_FORCE_DEFAULT (0x00000000U)
#define EVC_AGC_TX_RX_FALL_FORCE_RD_MASK (0xffffffffU)
#define EVC_AGC_TX_RX_FALL_FORCE_WR_MASK (0xffffffffU)


///< interrupt force
#define EVC_AGC_TX_RX_FALL_FORCE_INT_FORCE_BF_OFF ( 0)
#define EVC_AGC_TX_RX_FALL_FORCE_INT_FORCE_BF_WID (32)
#define EVC_AGC_TX_RX_FALL_FORCE_INT_FORCE_BF_MSK (0xFFFFFFFF)
#define EVC_AGC_TX_RX_FALL_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_RISE_INT_STATUS register description at address offset 0x340
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_RISE_INT_STATUS
  * NCO, FGC, FB_EN rising edge Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t FB_EN_INT_STAT : 4;
    ///< Indicates rising edge of TX_EN observed
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TX_FGC_INT_STAT : 2;
    ///< Indicates rising edge of TX_FGC observed
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_FGC_INT_STAT : 2;
    ///< Indicates rising edge of RX_FGC observed
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TX_NCO_SW_INT_STAT : 2;
    ///< Indicates rising edge of TX_NCO_SW observed
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_NCO_SW_INT_STAT : 2;
    ///< Indicates rising edge of RX_NCO_SW observed
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_rise_int_stat_reg_t;

#define EVC_AGC_CTL_RISE_INT_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_RISE_INT_STAT_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_RISE_INT_STAT_WR_MASK (0x00000000U)


///< Indicates rising edge of TX_EN observed
#define EVC_AGC_CTL_RISE_INT_STAT_FB_EN_INT_STAT_BF_OFF ( 0)
#define EVC_AGC_CTL_RISE_INT_STAT_FB_EN_INT_STAT_BF_WID ( 4)
#define EVC_AGC_CTL_RISE_INT_STAT_FB_EN_INT_STAT_BF_MSK (0x0000000F)
#define EVC_AGC_CTL_RISE_INT_STAT_FB_EN_INT_STAT_BF_DEF (0x00000000)

///< Indicates rising edge of TX_FGC observed
#define EVC_AGC_CTL_RISE_INT_STAT_TX_FGC_INT_STAT_BF_OFF ( 4)
#define EVC_AGC_CTL_RISE_INT_STAT_TX_FGC_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_RISE_INT_STAT_TX_FGC_INT_STAT_BF_MSK (0x00000030)
#define EVC_AGC_CTL_RISE_INT_STAT_TX_FGC_INT_STAT_BF_DEF (0x00000000)

///< Indicates rising edge of RX_FGC observed
#define EVC_AGC_CTL_RISE_INT_STAT_RX_FGC_INT_STAT_BF_OFF ( 6)
#define EVC_AGC_CTL_RISE_INT_STAT_RX_FGC_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_RISE_INT_STAT_RX_FGC_INT_STAT_BF_MSK (0x000000C0)
#define EVC_AGC_CTL_RISE_INT_STAT_RX_FGC_INT_STAT_BF_DEF (0x00000000)

///< Indicates rising edge of TX_NCO_SW observed
#define EVC_AGC_CTL_RISE_INT_STAT_TX_NCO_SW_INT_STAT_BF_OFF ( 8)
#define EVC_AGC_CTL_RISE_INT_STAT_TX_NCO_SW_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_RISE_INT_STAT_TX_NCO_SW_INT_STAT_BF_MSK (0x00000300)
#define EVC_AGC_CTL_RISE_INT_STAT_TX_NCO_SW_INT_STAT_BF_DEF (0x00000000)

///< Indicates rising edge of RX_NCO_SW observed
#define EVC_AGC_CTL_RISE_INT_STAT_RX_NCO_SW_INT_STAT_BF_OFF (10)
#define EVC_AGC_CTL_RISE_INT_STAT_RX_NCO_SW_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_RISE_INT_STAT_RX_NCO_SW_INT_STAT_BF_MSK (0x00000C00)
#define EVC_AGC_CTL_RISE_INT_STAT_RX_NCO_SW_INT_STAT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_RISE_HI_EN register description at address offset 0x344
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_RISE_HI_EN
  * Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 12;
    ///< interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_rise_hi_en_reg_t;

#define EVC_AGC_CTL_RISE_HI_EN_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_RISE_HI_EN_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_RISE_HI_EN_WR_MASK (0x00000fffU)


///< interrupt high enable
#define EVC_AGC_CTL_RISE_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define EVC_AGC_CTL_RISE_HI_EN_INT_HI_EN_BF_WID (12)
#define EVC_AGC_CTL_RISE_HI_EN_INT_HI_EN_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_RISE_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_RISE_LO_EN register description at address offset 0x348
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_RISE_LO_EN
  * Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 12;
    ///< interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_rise_lo_en_reg_t;

#define EVC_AGC_CTL_RISE_LO_EN_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_RISE_LO_EN_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_RISE_LO_EN_WR_MASK (0x00000fffU)


///< interrupt low enable
#define EVC_AGC_CTL_RISE_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define EVC_AGC_CTL_RISE_LO_EN_INT_LO_EN_BF_WID (12)
#define EVC_AGC_CTL_RISE_LO_EN_INT_LO_EN_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_RISE_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_RISE_CLEAR register description at address offset 0x34c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_RISE_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 12;
    ///< interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_rise_clr_reg_t;

#define EVC_AGC_CTL_RISE_CLR_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_RISE_CLR_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_RISE_CLR_WR_MASK (0x00000fffU)


///< interrupt clear
#define EVC_AGC_CTL_RISE_CLR_INT_CLR_BF_OFF ( 0)
#define EVC_AGC_CTL_RISE_CLR_INT_CLR_BF_WID (12)
#define EVC_AGC_CTL_RISE_CLR_INT_CLR_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_RISE_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_RISE_FORCE register description at address offset 0x350
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_RISE_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 12;
    ///< interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_rise_force_reg_t;

#define EVC_AGC_CTL_RISE_FORCE_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_RISE_FORCE_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_RISE_FORCE_WR_MASK (0x00000fffU)


///< interrupt force
#define EVC_AGC_CTL_RISE_FORCE_INT_FORCE_BF_OFF ( 0)
#define EVC_AGC_CTL_RISE_FORCE_INT_FORCE_BF_WID (12)
#define EVC_AGC_CTL_RISE_FORCE_INT_FORCE_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_RISE_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_FALL_INT_STATUS register description at address offset 0x360
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_FALL_INT_STATUS
  * NCO, FGC, FB_EN falling edge Interrupt Status Register
  */

typedef union {
  struct {
    uint32_t FB_EN_INT_STAT : 4;
    ///< Indicates falling edge of TX_EN observed
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t TX_FGC_INT_STAT : 2;
    ///< Indicates falling edge of TX_FGC observed
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_FGC_INT_STAT : 2;
    ///< Indicates falling edge of RX_FGC observed
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t TX_NCO_SW_INT_STAT : 2;
    ///< Indicates falling edge of TX_NCO_SW observed
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t RX_NCO_SW_INT_STAT : 2;
    ///< Indicates falling edge of RX_NCO_SW observed
    ///< AccessType="RO/V" BitOffset="10" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_fall_int_stat_reg_t;

#define EVC_AGC_CTL_FALL_INT_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_FALL_INT_STAT_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_FALL_INT_STAT_WR_MASK (0x00000000U)


///< Indicates falling edge of TX_EN observed
#define EVC_AGC_CTL_FALL_INT_STAT_FB_EN_INT_STAT_BF_OFF ( 0)
#define EVC_AGC_CTL_FALL_INT_STAT_FB_EN_INT_STAT_BF_WID ( 4)
#define EVC_AGC_CTL_FALL_INT_STAT_FB_EN_INT_STAT_BF_MSK (0x0000000F)
#define EVC_AGC_CTL_FALL_INT_STAT_FB_EN_INT_STAT_BF_DEF (0x00000000)

///< Indicates falling edge of TX_FGC observed
#define EVC_AGC_CTL_FALL_INT_STAT_TX_FGC_INT_STAT_BF_OFF ( 4)
#define EVC_AGC_CTL_FALL_INT_STAT_TX_FGC_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_FALL_INT_STAT_TX_FGC_INT_STAT_BF_MSK (0x00000030)
#define EVC_AGC_CTL_FALL_INT_STAT_TX_FGC_INT_STAT_BF_DEF (0x00000000)

///< Indicates falling edge of RX_FGC observed
#define EVC_AGC_CTL_FALL_INT_STAT_RX_FGC_INT_STAT_BF_OFF ( 6)
#define EVC_AGC_CTL_FALL_INT_STAT_RX_FGC_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_FALL_INT_STAT_RX_FGC_INT_STAT_BF_MSK (0x000000C0)
#define EVC_AGC_CTL_FALL_INT_STAT_RX_FGC_INT_STAT_BF_DEF (0x00000000)

///< Indicates falling edge of TX_NCO_SW observed
#define EVC_AGC_CTL_FALL_INT_STAT_TX_NCO_SW_INT_STAT_BF_OFF ( 8)
#define EVC_AGC_CTL_FALL_INT_STAT_TX_NCO_SW_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_FALL_INT_STAT_TX_NCO_SW_INT_STAT_BF_MSK (0x00000300)
#define EVC_AGC_CTL_FALL_INT_STAT_TX_NCO_SW_INT_STAT_BF_DEF (0x00000000)

///< Indicates falling edge of RX_NCO_SW observed
#define EVC_AGC_CTL_FALL_INT_STAT_RX_NCO_SW_INT_STAT_BF_OFF (10)
#define EVC_AGC_CTL_FALL_INT_STAT_RX_NCO_SW_INT_STAT_BF_WID ( 2)
#define EVC_AGC_CTL_FALL_INT_STAT_RX_NCO_SW_INT_STAT_BF_MSK (0x00000C00)
#define EVC_AGC_CTL_FALL_INT_STAT_RX_NCO_SW_INT_STAT_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_FALL_HI_EN register description at address offset 0x364
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_FALL_HI_EN
  * Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 12;
    ///< interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_fall_hi_en_reg_t;

#define EVC_AGC_CTL_FALL_HI_EN_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_FALL_HI_EN_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_FALL_HI_EN_WR_MASK (0x00000fffU)


///< interrupt high enable
#define EVC_AGC_CTL_FALL_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define EVC_AGC_CTL_FALL_HI_EN_INT_HI_EN_BF_WID (12)
#define EVC_AGC_CTL_FALL_HI_EN_INT_HI_EN_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_FALL_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_FALL_LO_EN register description at address offset 0x368
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_FALL_LO_EN
  * Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 12;
    ///< interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_fall_lo_en_reg_t;

#define EVC_AGC_CTL_FALL_LO_EN_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_FALL_LO_EN_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_FALL_LO_EN_WR_MASK (0x00000fffU)


///< interrupt low enable
#define EVC_AGC_CTL_FALL_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define EVC_AGC_CTL_FALL_LO_EN_INT_LO_EN_BF_WID (12)
#define EVC_AGC_CTL_FALL_LO_EN_INT_LO_EN_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_FALL_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_FALL_CLEAR register description at address offset 0x36c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_FALL_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 12;
    ///< interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_fall_clr_reg_t;

#define EVC_AGC_CTL_FALL_CLR_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_FALL_CLR_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_FALL_CLR_WR_MASK (0x00000fffU)


///< interrupt clear
#define EVC_AGC_CTL_FALL_CLR_INT_CLR_BF_OFF ( 0)
#define EVC_AGC_CTL_FALL_CLR_INT_CLR_BF_WID (12)
#define EVC_AGC_CTL_FALL_CLR_INT_CLR_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_FALL_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_CTL_FALL_FORCE register description at address offset 0x370
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/CTL_FALL_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 12;
    ///< interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_ctl_fall_force_reg_t;

#define EVC_AGC_CTL_FALL_FORCE_DEFAULT (0x00000000U)
#define EVC_AGC_CTL_FALL_FORCE_RD_MASK (0x00000fffU)
#define EVC_AGC_CTL_FALL_FORCE_WR_MASK (0x00000fffU)


///< interrupt force
#define EVC_AGC_CTL_FALL_FORCE_INT_FORCE_BF_OFF ( 0)
#define EVC_AGC_CTL_FALL_FORCE_INT_FORCE_BF_WID (12)
#define EVC_AGC_CTL_FALL_FORCE_INT_FORCE_BF_MSK (0x00000FFF)
#define EVC_AGC_CTL_FALL_FORCE_INT_FORCE_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_CFG register description at address offset 0x400
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_CFG
  * GPIO Configuration
  */

typedef union {
  struct {
    uint32_t GPIO_DIR : 12;
    ///< Controls the direction of each GPIO pin (except when DIRECT_GPIO_EN
    ///< is set). Set to 1 to enable the output buffer. Set to 0 to make an
    ///< input pin
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t DEBOUNCE_CNT : 3;
    ///< Incoming GPIO signals can be filtered to avoid glitches. This register
    ///< determines how many extra clk cycles an incoming GPIO bit must remain
    ///< at a value before being registered as a change. The higher the value,
    ///< the more latency a GPIO change takes.  If no debouncing is needed
    ///< then a value of 0 should be used.  Note prior to debouncing the GPIO
    ///< are first synchronized into syscon clk domain (nominally 491Mhz).
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="19" ResetValue="None"
    uint32_t DIRECT_GPIO_EN : 1;
    ///< When set, this enables direct GPIO control (after debouncing) over
    ///< the TX_EN, RX_EN and FB_EN outputs.   In this mode all GPIO are forced
    ///< to input.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_cfg_reg_t;

#define EVC_AGC_GPIO_CFG_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_CFG_RD_MASK (0x01070fffU)
#define EVC_AGC_GPIO_CFG_WR_MASK (0x01070fffU)


///< Controls the direction of each GPIO pin (except when DIRECT_GPIO_EN
///< is set). Set to 1 to enable the output buffer. Set to 0 to make an
///< input pin
#define EVC_AGC_GPIO_CFG_GPIO_DIR_BF_OFF ( 0)
#define EVC_AGC_GPIO_CFG_GPIO_DIR_BF_WID (12)
#define EVC_AGC_GPIO_CFG_GPIO_DIR_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_CFG_GPIO_DIR_BF_DEF (0x00000000)

///< Incoming GPIO signals can be filtered to avoid glitches. This register
///< determines how many extra clk cycles an incoming GPIO bit must remain
///< at a value before being registered as a change. The higher the value,
///< the more latency a GPIO change takes.  If no debouncing is needed
///< then a value of 0 should be used.  Note prior to debouncing the GPIO
///< are first synchronized into syscon clk domain (nominally 491Mhz).
#define EVC_AGC_GPIO_CFG_DEBOUNCE_CNT_BF_OFF (16)
#define EVC_AGC_GPIO_CFG_DEBOUNCE_CNT_BF_WID ( 3)
#define EVC_AGC_GPIO_CFG_DEBOUNCE_CNT_BF_MSK (0x00070000)
#define EVC_AGC_GPIO_CFG_DEBOUNCE_CNT_BF_DEF (0x00000000)

///< When set, this enables direct GPIO control (after debouncing) over
///< the TX_EN, RX_EN and FB_EN outputs.   In this mode all GPIO are forced
///< to input.
#define EVC_AGC_GPIO_CFG_DIRECT_GPIO_EN_BF_OFF (24)
#define EVC_AGC_GPIO_CFG_DIRECT_GPIO_EN_BF_WID ( 1)
#define EVC_AGC_GPIO_CFG_DIRECT_GPIO_EN_BF_MSK (0x01000000)
#define EVC_AGC_GPIO_CFG_DIRECT_GPIO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_CURR_IN register description at address offset 0x404
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_CURR_IN
  * GPIO In Value
  */

typedef union {
  struct {
    uint32_t GPIO_IN : 12;
    ///< The synchronized/debounced current value of the GPIO pin
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_curr_in_reg_t;

#define EVC_AGC_GPIO_CURR_IN_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_CURR_IN_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_CURR_IN_WR_MASK (0x00000000U)


///< The synchronized/debounced current value of the GPIO pin
#define EVC_AGC_GPIO_CURR_IN_GPIO_IN_BF_OFF ( 0)
#define EVC_AGC_GPIO_CURR_IN_GPIO_IN_BF_WID (12)
#define EVC_AGC_GPIO_CURR_IN_GPIO_IN_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_CURR_IN_GPIO_IN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_SET_VAL register description at address offset 0x408
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_SET_VAL
  * GPIO Value/Mask
  */

typedef union {
  struct {
    uint32_t GPIO_VALUE : 12;
    ///< Value to be driven out on the GPIO output when GPIO_DIR = 1 and GPIO_MASK
    ///< = 1
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_set_val_reg_t;

#define EVC_AGC_GPIO_SET_VAL_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_SET_VAL_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_SET_VAL_WR_MASK (0xffff0fffU)


///< Value to be driven out on the GPIO output when GPIO_DIR = 1 and GPIO_MASK
///< = 1
#define EVC_AGC_GPIO_SET_VAL_GPIO_VAL_BF_OFF ( 0)
#define EVC_AGC_GPIO_SET_VAL_GPIO_VAL_BF_WID (12)
#define EVC_AGC_GPIO_SET_VAL_GPIO_VAL_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_SET_VAL_GPIO_VAL_BF_DEF (0x00000000)
#define EVC_AGC_GPIO_SET_VAL_MASK_BF_OFF (16)
#define EVC_AGC_GPIO_SET_VAL_MASK_BF_WID (16)
#define EVC_AGC_GPIO_SET_VAL_MASK_BF_MSK (0xFFFF0000)


/** @brief EVC_AGC_COMP_REG_GPIO_DR_7_0 register description at address offset 0x40c
  *
  * Register default value:        0x00005555
  * Register full path in IP: evc_agc_comp/reg/GPIO_DR_7_0
  * GPIO output impedance values for gpio 0-7
  */

typedef union {
  struct {
    uint32_t GPIO_DR_0 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t GPIO_DR_1 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t GPIO_DR_2 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t GPIO_DR_3 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t GPIO_DR_4 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="8" ResetValue="0x1"
    uint32_t GPIO_DR_5 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="10" ResetValue="0x1"
    uint32_t GPIO_DR_6 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="12" ResetValue="0x1"
    uint32_t GPIO_DR_7 : 2;
    ///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
    ///< AccessType="RW" BitOffset="14" ResetValue="0x1"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_dr_7_0_reg_t;

#define EVC_AGC_GPIO_DR_7_0_DEFAULT (0x00005555U)
#define EVC_AGC_GPIO_DR_7_0_RD_MASK (0x0000ffffU)
#define EVC_AGC_GPIO_DR_7_0_WR_MASK (0xffffffffU)


///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_0_BF_OFF ( 0)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_0_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_0_BF_MSK (0x00000003)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_0_BF_DEF (0x00000001)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_1_BF_OFF ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_1_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_1_BF_MSK (0x0000000C)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_1_BF_DEF (0x00000004)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_2_BF_OFF ( 4)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_2_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_2_BF_MSK (0x00000030)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_2_BF_DEF (0x00000010)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_3_BF_OFF ( 6)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_3_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_3_BF_MSK (0x000000C0)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_3_BF_DEF (0x00000040)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_4_BF_OFF ( 8)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_4_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_4_BF_MSK (0x00000300)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_4_BF_DEF (0x00000100)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_5_BF_OFF (10)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_5_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_5_BF_MSK (0x00000C00)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_5_BF_DEF (0x00000400)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_6_BF_OFF (12)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_6_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_6_BF_MSK (0x00003000)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_6_BF_DEF (0x00001000)

///< Output Impedance for GPIO n, see encoding values in GPIO_DR_0
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_7_BF_OFF (14)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_7_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_7_BF_MSK (0x0000C000)
#define EVC_AGC_GPIO_DR_7_0_GPIO_DR_7_BF_DEF (0x00004000)
#define EVC_AGC_GPIO_DR_7_0_MASK_BF_OFF (16)
#define EVC_AGC_GPIO_DR_7_0_MASK_BF_WID (16)
#define EVC_AGC_GPIO_DR_7_0_MASK_BF_MSK (0xFFFF0000)


/** @brief EVC_AGC_COMP_REG_GPIO_DR_11_8 register description at address offset 0x410
  *
  * Register default value:        0x00000055
  * Register full path in IP: evc_agc_comp/reg/GPIO_DR_11_8
  * GPIO output impedance values for gpio 8 - 12
  */

typedef union {
  struct {
    uint32_t GPIO_DR_8 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t GPIO_DR_9 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
    ///< AccessType="RW" BitOffset="2" ResetValue="0x1"
    uint32_t GPIO_DR_10 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
    ///< AccessType="RW" BitOffset="4" ResetValue="0x1"
    uint32_t GPIO_DR_11 : 2;
    ///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
    ///< AccessType="RW" BitOffset="6" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_dr_11_8_reg_t;

#define EVC_AGC_GPIO_DR_11_8_DEFAULT (0x00000055U)
#define EVC_AGC_GPIO_DR_11_8_RD_MASK (0x000000ffU)
#define EVC_AGC_GPIO_DR_11_8_WR_MASK (0xffff00ffU)


///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_8_BF_OFF ( 0)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_8_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_8_BF_MSK (0x00000003)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_8_BF_DEF (0x00000001)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_9_BF_OFF ( 2)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_9_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_9_BF_MSK (0x0000000C)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_9_BF_DEF (0x00000004)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_10_BF_OFF ( 4)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_10_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_10_BF_MSK (0x00000030)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_10_BF_DEF (0x00000010)

///< Output Impedance for GPIO n, see encoding values in gpio_dr_0to7
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_11_BF_OFF ( 6)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_11_BF_WID ( 2)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_11_BF_MSK (0x000000C0)
#define EVC_AGC_GPIO_DR_11_8_GPIO_DR_11_BF_DEF (0x00000040)
#define EVC_AGC_GPIO_DR_11_8_MASK_BF_OFF (16)
#define EVC_AGC_GPIO_DR_11_8_MASK_BF_WID (16)
#define EVC_AGC_GPIO_DR_11_8_MASK_BF_MSK (0xFFFF0000)


/** @brief EVC_AGC_COMP_REG_GPIO_LPR register description at address offset 0x414
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_LPR
  * GPIO Low Power
  */

typedef union {
  struct {
    uint32_t GPIO_LPR : 12;
    ///< When set to 1, the receiver of each GPIO is powered down.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_lpr_reg_t;

#define EVC_AGC_GPIO_LPR_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_LPR_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_LPR_WR_MASK (0xffff0fffU)


///< When set to 1, the receiver of each GPIO is powered down.
#define EVC_AGC_GPIO_LPR_GPIO_LPR_BF_OFF ( 0)
#define EVC_AGC_GPIO_LPR_GPIO_LPR_BF_WID (12)
#define EVC_AGC_GPIO_LPR_GPIO_LPR_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_LPR_GPIO_LPR_BF_DEF (0x00000000)
#define EVC_AGC_GPIO_LPR_MASK_BF_OFF (16)
#define EVC_AGC_GPIO_LPR_MASK_BF_WID (16)
#define EVC_AGC_GPIO_LPR_MASK_BF_MSK (0xFFFF0000)


/** @brief EVC_AGC_COMP_REG_GPIO_PDE register description at address offset 0x41c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_PDE
  * GPIO Buffer Control
  */

typedef union {
  struct {
    uint32_t GPIO_WKPDE : 12;
    ///< Enables weak pull-down on the GPIO pin when set to 1. This should
    ///< not be enabled at the same time as GPIO_WKPUE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_pde_reg_t;

#define EVC_AGC_GPIO_PDE_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_PDE_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_PDE_WR_MASK (0xffff0fffU)


///< Enables weak pull-down on the GPIO pin when set to 1. This should
///< not be enabled at the same time as GPIO_WKPUE.
#define EVC_AGC_GPIO_PDE_GPIO_WKPDE_BF_OFF ( 0)
#define EVC_AGC_GPIO_PDE_GPIO_WKPDE_BF_WID (12)
#define EVC_AGC_GPIO_PDE_GPIO_WKPDE_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_PDE_GPIO_WKPDE_BF_DEF (0x00000000)
#define EVC_AGC_GPIO_PDE_MASK_BF_OFF (16)
#define EVC_AGC_GPIO_PDE_MASK_BF_WID (16)
#define EVC_AGC_GPIO_PDE_MASK_BF_MSK (0xFFFF0000)


/** @brief EVC_AGC_COMP_REG_GPIO_PUE register description at address offset 0x420
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_PUE
  * GPIO Buffer Control
  */

typedef union {
  struct {
    uint32_t GPIO_WKPUE : 12;
    ///< Enables weak pull-up on the GPIO pin when set to 1. This should not
    ///< be enabled at the same time as GPIO_WKPDE.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_pue_reg_t;

#define EVC_AGC_GPIO_PUE_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_PUE_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_PUE_WR_MASK (0xffff0fffU)


///< Enables weak pull-up on the GPIO pin when set to 1. This should not
///< be enabled at the same time as GPIO_WKPDE.
#define EVC_AGC_GPIO_PUE_GPIO_WKPUE_BF_OFF ( 0)
#define EVC_AGC_GPIO_PUE_GPIO_WKPUE_BF_WID (12)
#define EVC_AGC_GPIO_PUE_GPIO_WKPUE_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_PUE_GPIO_WKPUE_BF_DEF (0x00000000)
#define EVC_AGC_GPIO_PUE_MASK_BF_OFF (16)
#define EVC_AGC_GPIO_PUE_MASK_BF_WID (16)
#define EVC_AGC_GPIO_PUE_MASK_BF_MSK (0xFFFF0000)


/** @brief EVC_AGC_COMP_REG_GPIO_DELTA_STATUS register description at address offset 0x440
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_DELTA_STATUS
  * GPIO In Delta
  */

typedef union {
  struct {
    uint32_t GPIO_IN_DELTA : 12;
    ///< Indicates that the sampled value of the GPIO input has changed. This
    ///< is used as the source of the GPIO interrupt.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_delta_stat_reg_t;

#define EVC_AGC_GPIO_DELTA_STAT_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_DELTA_STAT_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_DELTA_STAT_WR_MASK (0x00000000U)


///< Indicates that the sampled value of the GPIO input has changed. This
///< is used as the source of the GPIO interrupt.
#define EVC_AGC_GPIO_DELTA_STAT_GPIO_IN_DELTA_BF_OFF ( 0)
#define EVC_AGC_GPIO_DELTA_STAT_GPIO_IN_DELTA_BF_WID (12)
#define EVC_AGC_GPIO_DELTA_STAT_GPIO_IN_DELTA_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_DELTA_STAT_GPIO_IN_DELTA_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_DELTA_HI_EN register description at address offset 0x444
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_DELTA_HI_EN
  * Interrupt High Enable Register
  */

typedef union {
  struct {
    uint32_t INT_HI_EN : 12;
    ///< interrupt high enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_delta_hi_en_reg_t;

#define EVC_AGC_GPIO_DELTA_HI_EN_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_DELTA_HI_EN_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_DELTA_HI_EN_WR_MASK (0x00000fffU)


///< interrupt high enable
#define EVC_AGC_GPIO_DELTA_HI_EN_INT_HI_EN_BF_OFF ( 0)
#define EVC_AGC_GPIO_DELTA_HI_EN_INT_HI_EN_BF_WID (12)
#define EVC_AGC_GPIO_DELTA_HI_EN_INT_HI_EN_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_DELTA_HI_EN_INT_HI_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_DELTA_LO_EN register description at address offset 0x448
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_DELTA_LO_EN
  * Interrupt Low Enable Register
  */

typedef union {
  struct {
    uint32_t INT_LO_EN : 12;
    ///< interrupt low enable
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_delta_lo_en_reg_t;

#define EVC_AGC_GPIO_DELTA_LO_EN_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_DELTA_LO_EN_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_DELTA_LO_EN_WR_MASK (0x00000fffU)


///< interrupt low enable
#define EVC_AGC_GPIO_DELTA_LO_EN_INT_LO_EN_BF_OFF ( 0)
#define EVC_AGC_GPIO_DELTA_LO_EN_INT_LO_EN_BF_WID (12)
#define EVC_AGC_GPIO_DELTA_LO_EN_INT_LO_EN_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_DELTA_LO_EN_INT_LO_EN_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_DELTA_CLEAR register description at address offset 0x44c
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_DELTA_CLEAR
  * Interrupt Clear Register
  */

typedef union {
  struct {
    uint32_t INT_CLR : 12;
    ///< interrupt clear
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_delta_clr_reg_t;

#define EVC_AGC_GPIO_DELTA_CLR_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_DELTA_CLR_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_DELTA_CLR_WR_MASK (0x00000fffU)


///< interrupt clear
#define EVC_AGC_GPIO_DELTA_CLR_INT_CLR_BF_OFF ( 0)
#define EVC_AGC_GPIO_DELTA_CLR_INT_CLR_BF_WID (12)
#define EVC_AGC_GPIO_DELTA_CLR_INT_CLR_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_DELTA_CLR_INT_CLR_BF_DEF (0x00000000)


/** @brief EVC_AGC_COMP_REG_GPIO_DELTA_FORCE register description at address offset 0x450
  *
  * Register default value:        0x00000000
  * Register full path in IP: evc_agc_comp/reg/GPIO_DELTA_FORCE
  * FB SYS Interrupt Force Register
  */

typedef union {
  struct {
    uint32_t INT_FORCE : 12;
    ///< interrupt force
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} evc_agc_gpio_delta_force_reg_t;

#define EVC_AGC_GPIO_DELTA_FORCE_DEFAULT (0x00000000U)
#define EVC_AGC_GPIO_DELTA_FORCE_RD_MASK (0x00000fffU)
#define EVC_AGC_GPIO_DELTA_FORCE_WR_MASK (0x00000fffU)


///< interrupt force
#define EVC_AGC_GPIO_DELTA_FORCE_INT_FORCE_BF_OFF ( 0)
#define EVC_AGC_GPIO_DELTA_FORCE_INT_FORCE_BF_WID (12)
#define EVC_AGC_GPIO_DELTA_FORCE_INT_FORCE_BF_MSK (0x00000FFF)
#define EVC_AGC_GPIO_DELTA_FORCE_INT_FORCE_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define EVC_AGC_EVC0_INTF_CFG_REG ((evc_agc_evc0_intf_cfg_reg_t*) EVC_AGC_EVC0_INTF_CFG_ADR)
#define EVC_AGC_EVC0_CAL_CFG_REG ((evc_agc_evc0_cal_cfg_reg_t*) EVC_AGC_EVC0_CAL_CFG_ADR)
#define EVC_AGC_EVC0_CAL_RSLT_REG ((evc_agc_evc0_cal_rslt_reg_t*) EVC_AGC_EVC0_CAL_RSLT_ADR)
#define EVC_AGC_EVC0_SAFE_VAL_L_REG ((evc_agc_evc0_safe_val_l_reg_t*) EVC_AGC_EVC0_SAFE_VAL_L_ADR)
#define EVC_AGC_EVC0_SAFE_VAL_H_REG ((evc_agc_evc0_safe_val_h_reg_t*) EVC_AGC_EVC0_SAFE_VAL_H_ADR)
#define EVC_AGC_EVC0_BM_LUT_L_REG ((evc_agc_evc0_bm_lut_l_reg_t*) EVC_AGC_EVC0_BM_LUT_L_ADR)
#define EVC_AGC_EVC0_BM_LUT_H_REG ((evc_agc_evc0_bm_lut_h_reg_t*) EVC_AGC_EVC0_BM_LUT_H_ADR)
#define EVC_AGC_EVC0_MODE_LUT0_REG ((evc_agc_evc0_mode_lut0_reg_t*) EVC_AGC_EVC0_MODE_LUT0_ADR)
#define EVC_AGC_EVC0_MODE_LUT1_REG ((evc_agc_evc0_mode_lut1_reg_t*) EVC_AGC_EVC0_MODE_LUT1_ADR)
#define EVC_AGC_EVC0_MODE_LUT2_REG ((evc_agc_evc0_mode_lut2_reg_t*) EVC_AGC_EVC0_MODE_LUT2_ADR)
#define EVC_AGC_EVC0_MODE_LUT3_REG ((evc_agc_evc0_mode_lut3_reg_t*) EVC_AGC_EVC0_MODE_LUT3_ADR)
#define EVC_AGC_EVC0_MODE_LUT4_REG ((evc_agc_evc0_mode_lut4_reg_t*) EVC_AGC_EVC0_MODE_LUT4_ADR)
#define EVC_AGC_EVC0_MODE_LUT5_REG ((evc_agc_evc0_mode_lut5_reg_t*) EVC_AGC_EVC0_MODE_LUT5_ADR)
#define EVC_AGC_EVC0_MODE_ACC_REG ((evc_agc_evc0_mode_acc_reg_t*) EVC_AGC_EVC0_MODE_ACC_ADR)
#define EVC_AGC_EVC0_STAT_REG ((evc_agc_evc0_stat_reg_t*) EVC_AGC_EVC0_STAT_ADR)
#define EVC_AGC_EVC0_PERR_CNT_REG ((evc_agc_evc0_perr_cnt_reg_t*) EVC_AGC_EVC0_PERR_CNT_ADR)
#define EVC_AGC_EVC0_SERR_CNT_REG ((evc_agc_evc0_serr_cnt_reg_t*) EVC_AGC_EVC0_SERR_CNT_ADR)
#define EVC_AGC_EVC0_ERR_STAT_REG ((evc_agc_evc0_err_stat_reg_t*) EVC_AGC_EVC0_ERR_STAT_ADR)
#define EVC_AGC_EVC0_ECC_CTRL_REG ((evc_agc_evc0_ecc_ctrl_reg_t*) EVC_AGC_EVC0_ECC_CTRL_ADR)
#define EVC_AGC_EVC0_ECC_STAT_REG ((evc_agc_evc0_ecc_stat_reg_t*) EVC_AGC_EVC0_ECC_STAT_ADR)
#define EVC_AGC_EVC1_INTF_CFG_REG ((evc_agc_evc1_intf_cfg_reg_t*) EVC_AGC_EVC1_INTF_CFG_ADR)
#define EVC_AGC_EVC1_CAL_CFG_REG ((evc_agc_evc1_cal_cfg_reg_t*) EVC_AGC_EVC1_CAL_CFG_ADR)
#define EVC_AGC_EVC1_CAL_RSLT_REG ((evc_agc_evc1_cal_rslt_reg_t*) EVC_AGC_EVC1_CAL_RSLT_ADR)
#define EVC_AGC_EVC1_SAFE_VAL_L_REG ((evc_agc_evc1_safe_val_l_reg_t*) EVC_AGC_EVC1_SAFE_VAL_L_ADR)
#define EVC_AGC_EVC1_SAFE_VAL_H_REG ((evc_agc_evc1_safe_val_h_reg_t*) EVC_AGC_EVC1_SAFE_VAL_H_ADR)
#define EVC_AGC_EVC1_BM_LUT_L_REG ((evc_agc_evc1_bm_lut_l_reg_t*) EVC_AGC_EVC1_BM_LUT_L_ADR)
#define EVC_AGC_EVC1_BM_LUT_H_REG ((evc_agc_evc1_bm_lut_h_reg_t*) EVC_AGC_EVC1_BM_LUT_H_ADR)
#define EVC_AGC_EVC1_MODE_LUT0_REG ((evc_agc_evc1_mode_lut0_reg_t*) EVC_AGC_EVC1_MODE_LUT0_ADR)
#define EVC_AGC_EVC1_MODE_LUT1_REG ((evc_agc_evc1_mode_lut1_reg_t*) EVC_AGC_EVC1_MODE_LUT1_ADR)
#define EVC_AGC_EVC1_MODE_LUT2_REG ((evc_agc_evc1_mode_lut2_reg_t*) EVC_AGC_EVC1_MODE_LUT2_ADR)
#define EVC_AGC_EVC1_MODE_LUT3_REG ((evc_agc_evc1_mode_lut3_reg_t*) EVC_AGC_EVC1_MODE_LUT3_ADR)
#define EVC_AGC_EVC1_MODE_LUT4_REG ((evc_agc_evc1_mode_lut4_reg_t*) EVC_AGC_EVC1_MODE_LUT4_ADR)
#define EVC_AGC_EVC1_MODE_LUT5_REG ((evc_agc_evc1_mode_lut5_reg_t*) EVC_AGC_EVC1_MODE_LUT5_ADR)
#define EVC_AGC_EVC1_MODE_ACC_REG ((evc_agc_evc1_mode_acc_reg_t*) EVC_AGC_EVC1_MODE_ACC_ADR)
#define EVC_AGC_EVC1_STAT_REG ((evc_agc_evc1_stat_reg_t*) EVC_AGC_EVC1_STAT_ADR)
#define EVC_AGC_EVC1_PERR_CNT_REG ((evc_agc_evc1_perr_cnt_reg_t*) EVC_AGC_EVC1_PERR_CNT_ADR)
#define EVC_AGC_EVC1_SERR_CNT_REG ((evc_agc_evc1_serr_cnt_reg_t*) EVC_AGC_EVC1_SERR_CNT_ADR)
#define EVC_AGC_EVC1_ERR_STAT_REG ((evc_agc_evc1_err_stat_reg_t*) EVC_AGC_EVC1_ERR_STAT_ADR)
#define EVC_AGC_EVC1_ECC_CTRL_REG ((evc_agc_evc1_ecc_ctrl_reg_t*) EVC_AGC_EVC1_ECC_CTRL_ADR)
#define EVC_AGC_EVC1_ECC_STAT_REG ((evc_agc_evc1_ecc_stat_reg_t*) EVC_AGC_EVC1_ECC_STAT_ADR)
#define EVC_AGC_CFG_REG ((evc_agc_cfg_reg_t*) EVC_AGC_CFG_ADR)
#define EVC_AGC_3B5_CFG_REG ((evc_agc_3b5_cfg_reg_t*) EVC_AGC_3B5_CFG_ADR)
#define EVC_AGC_3B5_REG ((evc_agc_3b5_reg_t*) EVC_AGC_3B5_ADR)
#define EVC_AGC_GRP_LUT_REG ((evc_agc_grp_lut_reg_t*) EVC_AGC_GRP_LUT_ADR)
#define EVC_AGC_LOG2PHY0_REG ((evc_agc_log2phy0_reg_t*) EVC_AGC_LOG2PHY0_ADR)
#define EVC_AGC_LOG2PHY1_REG ((evc_agc_log2phy1_reg_t*) EVC_AGC_LOG2PHY1_ADR)
#define EVC_AGC_STAT_REG ((evc_agc_stat_reg_t*) EVC_AGC_STAT_ADR)
#define EVC_AGC_PERR_CNT_REG ((evc_agc_perr_cnt_reg_t*) EVC_AGC_PERR_CNT_ADR)
#define EVC_AGC_EN_MUX_REG ((evc_agc_en_mux_reg_t*) EVC_AGC_EN_MUX_ADR)
#define EVC_AGC_OUT_MUX_REG ((evc_agc_out_mux_reg_t*) EVC_AGC_OUT_MUX_ADR)
#define EVC_AGC_OUT_MASK_REG ((evc_agc_out_mask_reg_t*) EVC_AGC_OUT_MASK_ADR)
#define EVC_AGC_FGC_SEL_REG ((evc_agc_fgc_sel_reg_t*) EVC_AGC_FGC_SEL_ADR)
#define EVC_AGC_RX_AC_GAIN_REG ((evc_agc_rx_ac_gain_reg_t*) EVC_AGC_RX_AC_GAIN_ADR)
#define EVC_AGC_RX_SLOW_GAIN_REG ((evc_agc_rx_slow_gain_reg_t*) EVC_AGC_RX_SLOW_GAIN_ADR)
#define EVC_AGC_OUT_STAT_L_REG ((evc_agc_out_stat_l_reg_t*) EVC_AGC_OUT_STAT_L_ADR)
#define EVC_AGC_OUT_STAT_H_REG ((evc_agc_out_stat_h_reg_t*) EVC_AGC_OUT_STAT_H_ADR)
#define EVC_AGC_MON_INT_STAT_REG ((evc_agc_mon_int_stat_reg_t*) EVC_AGC_MON_INT_STAT_ADR)
#define EVC_AGC_BRDG_STAT_REG ((evc_agc_brdg_stat_reg_t*) EVC_AGC_BRDG_STAT_ADR)
#define EVC_AGC_BUS_ERR_INT_STAT_REG ((evc_agc_bus_err_int_stat_reg_t*) EVC_AGC_BUS_ERR_INT_STAT_ADR)
#define EVC_AGC_BUS_ERR_HI_EN_REG ((evc_agc_bus_err_hi_en_reg_t*) EVC_AGC_BUS_ERR_HI_EN_ADR)
#define EVC_AGC_BUS_ERR_LO_EN_REG ((evc_agc_bus_err_lo_en_reg_t*) EVC_AGC_BUS_ERR_LO_EN_ADR)
#define EVC_AGC_BUS_ERR_CLR_REG ((evc_agc_bus_err_clr_reg_t*) EVC_AGC_BUS_ERR_CLR_ADR)
#define EVC_AGC_BUS_ERR_FORCE_REG ((evc_agc_bus_err_force_reg_t*) EVC_AGC_BUS_ERR_FORCE_ADR)
#define EVC_AGC_TX_RX_RISE_INT_STAT_REG ((evc_agc_tx_rx_rise_int_stat_reg_t*) EVC_AGC_TX_RX_RISE_INT_STAT_ADR)
#define EVC_AGC_TX_RX_RISE_HI_EN_REG ((evc_agc_tx_rx_rise_hi_en_reg_t*) EVC_AGC_TX_RX_RISE_HI_EN_ADR)
#define EVC_AGC_TX_RX_RISE_LO_EN_REG ((evc_agc_tx_rx_rise_lo_en_reg_t*) EVC_AGC_TX_RX_RISE_LO_EN_ADR)
#define EVC_AGC_TX_RX_RISE_CLR_REG ((evc_agc_tx_rx_rise_clr_reg_t*) EVC_AGC_TX_RX_RISE_CLR_ADR)
#define EVC_AGC_TX_RX_RISE_FORCE_REG ((evc_agc_tx_rx_rise_force_reg_t*) EVC_AGC_TX_RX_RISE_FORCE_ADR)
#define EVC_AGC_TX_RX_FALL_INT_STAT_REG ((evc_agc_tx_rx_fall_int_stat_reg_t*) EVC_AGC_TX_RX_FALL_INT_STAT_ADR)
#define EVC_AGC_TX_RX_FALL_HI_EN_REG ((evc_agc_tx_rx_fall_hi_en_reg_t*) EVC_AGC_TX_RX_FALL_HI_EN_ADR)
#define EVC_AGC_TX_RX_FALL_LO_EN_REG ((evc_agc_tx_rx_fall_lo_en_reg_t*) EVC_AGC_TX_RX_FALL_LO_EN_ADR)
#define EVC_AGC_TX_RX_FALL_CLR_REG ((evc_agc_tx_rx_fall_clr_reg_t*) EVC_AGC_TX_RX_FALL_CLR_ADR)
#define EVC_AGC_TX_RX_FALL_FORCE_REG ((evc_agc_tx_rx_fall_force_reg_t*) EVC_AGC_TX_RX_FALL_FORCE_ADR)
#define EVC_AGC_CTL_RISE_INT_STAT_REG ((evc_agc_ctl_rise_int_stat_reg_t*) EVC_AGC_CTL_RISE_INT_STAT_ADR)
#define EVC_AGC_CTL_RISE_HI_EN_REG ((evc_agc_ctl_rise_hi_en_reg_t*) EVC_AGC_CTL_RISE_HI_EN_ADR)
#define EVC_AGC_CTL_RISE_LO_EN_REG ((evc_agc_ctl_rise_lo_en_reg_t*) EVC_AGC_CTL_RISE_LO_EN_ADR)
#define EVC_AGC_CTL_RISE_CLR_REG ((evc_agc_ctl_rise_clr_reg_t*) EVC_AGC_CTL_RISE_CLR_ADR)
#define EVC_AGC_CTL_RISE_FORCE_REG ((evc_agc_ctl_rise_force_reg_t*) EVC_AGC_CTL_RISE_FORCE_ADR)
#define EVC_AGC_CTL_FALL_INT_STAT_REG ((evc_agc_ctl_fall_int_stat_reg_t*) EVC_AGC_CTL_FALL_INT_STAT_ADR)
#define EVC_AGC_CTL_FALL_HI_EN_REG ((evc_agc_ctl_fall_hi_en_reg_t*) EVC_AGC_CTL_FALL_HI_EN_ADR)
#define EVC_AGC_CTL_FALL_LO_EN_REG ((evc_agc_ctl_fall_lo_en_reg_t*) EVC_AGC_CTL_FALL_LO_EN_ADR)
#define EVC_AGC_CTL_FALL_CLR_REG ((evc_agc_ctl_fall_clr_reg_t*) EVC_AGC_CTL_FALL_CLR_ADR)
#define EVC_AGC_CTL_FALL_FORCE_REG ((evc_agc_ctl_fall_force_reg_t*) EVC_AGC_CTL_FALL_FORCE_ADR)
#define EVC_AGC_GPIO_CFG_REG ((evc_agc_gpio_cfg_reg_t*) EVC_AGC_GPIO_CFG_ADR)
#define EVC_AGC_GPIO_CURR_IN_REG ((evc_agc_gpio_curr_in_reg_t*) EVC_AGC_GPIO_CURR_IN_ADR)
#define EVC_AGC_GPIO_SET_VAL_REG ((evc_agc_gpio_set_val_reg_t*) EVC_AGC_GPIO_SET_VAL_ADR)
#define EVC_AGC_GPIO_DR_7_0_REG ((evc_agc_gpio_dr_7_0_reg_t*) EVC_AGC_GPIO_DR_7_0_ADR)
#define EVC_AGC_GPIO_DR_11_8_REG ((evc_agc_gpio_dr_11_8_reg_t*) EVC_AGC_GPIO_DR_11_8_ADR)
#define EVC_AGC_GPIO_LPR_REG ((evc_agc_gpio_lpr_reg_t*) EVC_AGC_GPIO_LPR_ADR)
#define EVC_AGC_GPIO_PDE_REG ((evc_agc_gpio_pde_reg_t*) EVC_AGC_GPIO_PDE_ADR)
#define EVC_AGC_GPIO_PUE_REG ((evc_agc_gpio_pue_reg_t*) EVC_AGC_GPIO_PUE_ADR)
#define EVC_AGC_GPIO_DELTA_STAT_REG ((evc_agc_gpio_delta_stat_reg_t*) EVC_AGC_GPIO_DELTA_STAT_ADR)
#define EVC_AGC_GPIO_DELTA_HI_EN_REG ((evc_agc_gpio_delta_hi_en_reg_t*) EVC_AGC_GPIO_DELTA_HI_EN_ADR)
#define EVC_AGC_GPIO_DELTA_LO_EN_REG ((evc_agc_gpio_delta_lo_en_reg_t*) EVC_AGC_GPIO_DELTA_LO_EN_ADR)
#define EVC_AGC_GPIO_DELTA_CLR_REG ((evc_agc_gpio_delta_clr_reg_t*) EVC_AGC_GPIO_DELTA_CLR_ADR)
#define EVC_AGC_GPIO_DELTA_FORCE_REG ((evc_agc_gpio_delta_force_reg_t*) EVC_AGC_GPIO_DELTA_FORCE_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    evc_agc_evc0_intf_cfg_reg_t EVC0_INTF_CFG;   /*< Address offset = 0x0 */
    evc_agc_evc0_cal_cfg_reg_t EVC0_CAL_CFG;    /*< Address offset = 0x4 */
    evc_agc_evc0_cal_rslt_reg_t EVC0_CAL_RSLT; /*< Address offset = 0x8 */
    evc_agc_evc0_safe_val_l_reg_t EVC0_SAFE_VAL_L; /*< Address offset = 0xc */
    evc_agc_evc0_safe_val_h_reg_t EVC0_SAFE_VAL_H; /*< Address offset = 0x10 */
    evc_agc_evc0_bm_lut_l_reg_t EVC0_BM_LUT_L;   /*< Address offset = 0x14 */
    evc_agc_evc0_bm_lut_h_reg_t EVC0_BM_LUT_H;   /*< Address offset = 0x18 */
    const uint8_t        reservedArea0 [4];   /*< Address offset = 0x1c */
    evc_agc_evc0_mode_lut0_reg_t EVC0_MODE_LUT0;  /*< Address offset = 0x20 */
    evc_agc_evc0_mode_lut1_reg_t EVC0_MODE_LUT1;  /*< Address offset = 0x24 */
    evc_agc_evc0_mode_lut2_reg_t EVC0_MODE_LUT2;  /*< Address offset = 0x28 */
    evc_agc_evc0_mode_lut3_reg_t EVC0_MODE_LUT3;  /*< Address offset = 0x2c */
    evc_agc_evc0_mode_lut4_reg_t EVC0_MODE_LUT4;  /*< Address offset = 0x30 */
    evc_agc_evc0_mode_lut5_reg_t EVC0_MODE_LUT5;  /*< Address offset = 0x34 */
    evc_agc_evc0_mode_acc_reg_t EVC0_MODE_ACC;   /*< Address offset = 0x38 */
    evc_agc_evc0_stat_reg_t EVC0_STAT;     /*< Address offset = 0x3c */
    evc_agc_evc0_perr_cnt_reg_t EVC0_PERR_CNT;   /*< Address offset = 0x40 */
    evc_agc_evc0_serr_cnt_reg_t EVC0_SERR_CNT;   /*< Address offset = 0x44 */
    evc_agc_evc0_err_stat_reg_t EVC0_ERR_STAT;   /*< Address offset = 0x48 */
    evc_agc_evc0_ecc_ctrl_reg_t EVC0_ECC_CTRL;   /*< Address offset = 0x4c */
    evc_agc_evc0_ecc_stat_reg_t EVC0_ECC_STAT;   /*< Address offset = 0x50 */
    const uint8_t        reservedArea1 [172]; /*< Address offset = 0x54 */
    evc_agc_evc1_intf_cfg_reg_t EVC1_INTF_CFG;   /*< Address offset = 0x100 */
    evc_agc_evc1_cal_cfg_reg_t EVC1_CAL_CFG;    /*< Address offset = 0x104 */
    evc_agc_evc1_cal_rslt_reg_t EVC1_CAL_RSLT; /*< Address offset = 0x108 */
    evc_agc_evc1_safe_val_l_reg_t EVC1_SAFE_VAL_L; /*< Address offset = 0x10c */
    evc_agc_evc1_safe_val_h_reg_t EVC1_SAFE_VAL_H; /*< Address offset = 0x110 */
    evc_agc_evc1_bm_lut_l_reg_t EVC1_BM_LUT_L;   /*< Address offset = 0x114 */
    evc_agc_evc1_bm_lut_h_reg_t EVC1_BM_LUT_H;   /*< Address offset = 0x118 */
    const uint8_t        reservedArea2 [4];   /*< Address offset = 0x11c */
    evc_agc_evc1_mode_lut0_reg_t EVC1_MODE_LUT0;  /*< Address offset = 0x120 */
    evc_agc_evc1_mode_lut1_reg_t EVC1_MODE_LUT1;  /*< Address offset = 0x124 */
    evc_agc_evc1_mode_lut2_reg_t EVC1_MODE_LUT2;  /*< Address offset = 0x128 */
    evc_agc_evc1_mode_lut3_reg_t EVC1_MODE_LUT3;  /*< Address offset = 0x12c */
    evc_agc_evc1_mode_lut4_reg_t EVC1_MODE_LUT4;  /*< Address offset = 0x130 */
    evc_agc_evc1_mode_lut5_reg_t EVC1_MODE_LUT5;  /*< Address offset = 0x134 */
    evc_agc_evc1_mode_acc_reg_t EVC1_MODE_ACC;   /*< Address offset = 0x138 */
    evc_agc_evc1_stat_reg_t EVC1_STAT;     /*< Address offset = 0x13c */
    evc_agc_evc1_perr_cnt_reg_t EVC1_PERR_CNT;   /*< Address offset = 0x140 */
    evc_agc_evc1_serr_cnt_reg_t EVC1_SERR_CNT;   /*< Address offset = 0x144 */
    evc_agc_evc1_err_stat_reg_t EVC1_ERR_STAT;   /*< Address offset = 0x148 */
    evc_agc_evc1_ecc_ctrl_reg_t EVC1_ECC_CTRL;   /*< Address offset = 0x14c */
    evc_agc_evc1_ecc_stat_reg_t EVC1_ECC_STAT;   /*< Address offset = 0x150 */
    const uint8_t        reservedArea3 [172]; /*< Address offset = 0x154 */
    evc_agc_cfg_reg_t AGC_CFG;         /*< Address offset = 0x200 */
    evc_agc_3b5_cfg_reg_t AGC_3B5_CFG;     /*< Address offset = 0x204 */
    evc_agc_3b5_reg_t AGC_3B5;         /*< Address offset = 0x208 */
    evc_agc_grp_lut_reg_t AGC_GRP_LUT;   /*< Address offset = 0x20c */
    evc_agc_log2phy0_reg_t AGC_LOG2PHY0;    /*< Address offset = 0x210 */
    evc_agc_log2phy1_reg_t AGC_LOG2PHY1;    /*< Address offset = 0x214 */
    evc_agc_stat_reg_t AGC_STAT;      /*< Address offset = 0x218 */
    evc_agc_perr_cnt_reg_t AGC_PERR_CNT;    /*< Address offset = 0x21c */
    const uint8_t        reservedArea4 [32];  /*< Address offset = 0x220 */
    evc_agc_en_mux_reg_t EN_MUX;          /*< Address offset = 0x240 */
    evc_agc_out_mux_reg_t OUT_MUX;         /*< Address offset = 0x244 */
    evc_agc_out_mask_reg_t OUT_MASK;        /*< Address offset = 0x248 */
    evc_agc_fgc_sel_reg_t FGC_SEL;         /*< Address offset = 0x24c */
    evc_agc_rx_ac_gain_reg_t RX_AC_GAIN;      /*< Address offset = 0x250 */
    evc_agc_rx_slow_gain_reg_t RX_SLOW_GAIN;    /*< Address offset = 0x254 */
    const uint8_t        reservedArea5 [8];   /*< Address offset = 0x258 */
    evc_agc_out_stat_l_reg_t OUT_STAT_L;    /*< Address offset = 0x260 */
    evc_agc_out_stat_h_reg_t OUT_STAT_H;    /*< Address offset = 0x264 */
    const uint8_t        reservedArea6 [8];   /*< Address offset = 0x268 */
    evc_agc_mon_int_stat_reg_t MON_INT_STAT;  /*< Address offset = 0x270 */
    evc_agc_brdg_stat_reg_t BRDG_STAT;   /*< Address offset = 0x274 */
    const uint8_t        reservedArea7 [8];   /*< Address offset = 0x278 */
    evc_agc_bus_err_int_stat_reg_t BUS_ERR_INT_STAT; /*< Address offset = 0x280 */
    evc_agc_bus_err_hi_en_reg_t BUS_ERR_HI_EN;   /*< Address offset = 0x284 */
    evc_agc_bus_err_lo_en_reg_t BUS_ERR_LO_EN;   /*< Address offset = 0x288 */
    evc_agc_bus_err_clr_reg_t BUS_ERR_CLR;   /*< Address offset = 0x28c */
    evc_agc_bus_err_force_reg_t BUS_ERR_FORCE;   /*< Address offset = 0x290 */
    const uint8_t        reservedArea8 [108]; /*< Address offset = 0x294 */
    evc_agc_tx_rx_rise_int_stat_reg_t TX_RX_RISE_INT_STAT; /*< Address offset = 0x300 */
    evc_agc_tx_rx_rise_hi_en_reg_t TX_RX_RISE_HI_EN; /*< Address offset = 0x304 */
    evc_agc_tx_rx_rise_lo_en_reg_t TX_RX_RISE_LO_EN; /*< Address offset = 0x308 */
    evc_agc_tx_rx_rise_clr_reg_t TX_RX_RISE_CLR; /*< Address offset = 0x30c */
    evc_agc_tx_rx_rise_force_reg_t TX_RX_RISE_FORCE; /*< Address offset = 0x310 */
    const uint8_t        reservedArea9 [12];  /*< Address offset = 0x314 */
    evc_agc_tx_rx_fall_int_stat_reg_t TX_RX_FALL_INT_STAT; /*< Address offset = 0x320 */
    evc_agc_tx_rx_fall_hi_en_reg_t TX_RX_FALL_HI_EN; /*< Address offset = 0x324 */
    evc_agc_tx_rx_fall_lo_en_reg_t TX_RX_FALL_LO_EN; /*< Address offset = 0x328 */
    evc_agc_tx_rx_fall_clr_reg_t TX_RX_FALL_CLR; /*< Address offset = 0x32c */
    evc_agc_tx_rx_fall_force_reg_t TX_RX_FALL_FORCE; /*< Address offset = 0x330 */
    const uint8_t        reservedArea10 [12]; /*< Address offset = 0x334 */
    evc_agc_ctl_rise_int_stat_reg_t CTL_RISE_INT_STAT; /*< Address offset = 0x340 */
    evc_agc_ctl_rise_hi_en_reg_t CTL_RISE_HI_EN;  /*< Address offset = 0x344 */
    evc_agc_ctl_rise_lo_en_reg_t CTL_RISE_LO_EN;  /*< Address offset = 0x348 */
    evc_agc_ctl_rise_clr_reg_t CTL_RISE_CLR;  /*< Address offset = 0x34c */
    evc_agc_ctl_rise_force_reg_t CTL_RISE_FORCE;  /*< Address offset = 0x350 */
    const uint8_t        reservedArea11 [12]; /*< Address offset = 0x354 */
    evc_agc_ctl_fall_int_stat_reg_t CTL_FALL_INT_STAT; /*< Address offset = 0x360 */
    evc_agc_ctl_fall_hi_en_reg_t CTL_FALL_HI_EN;  /*< Address offset = 0x364 */
    evc_agc_ctl_fall_lo_en_reg_t CTL_FALL_LO_EN;  /*< Address offset = 0x368 */
    evc_agc_ctl_fall_clr_reg_t CTL_FALL_CLR;  /*< Address offset = 0x36c */
    evc_agc_ctl_fall_force_reg_t CTL_FALL_FORCE;  /*< Address offset = 0x370 */
    const uint8_t        reservedArea12 [140]; /*< Address offset = 0x374 */
    evc_agc_gpio_cfg_reg_t GPIO_CFG;        /*< Address offset = 0x400 */
    evc_agc_gpio_curr_in_reg_t GPIO_CURR_IN;    /*< Address offset = 0x404 */
    evc_agc_gpio_set_val_reg_t GPIO_SET_VAL;    /*< Address offset = 0x408 */
    evc_agc_gpio_dr_7_0_reg_t GPIO_DR_7_0;     /*< Address offset = 0x40c */
    evc_agc_gpio_dr_11_8_reg_t GPIO_DR_11_8;    /*< Address offset = 0x410 */
    evc_agc_gpio_lpr_reg_t GPIO_LPR;        /*< Address offset = 0x414 */
    const uint8_t        reservedArea13 [4];  /*< Address offset = 0x418 */
    evc_agc_gpio_pde_reg_t GPIO_PDE;        /*< Address offset = 0x41c */
    evc_agc_gpio_pue_reg_t GPIO_PUE;        /*< Address offset = 0x420 */
    const uint8_t        reservedArea14 [28]; /*< Address offset = 0x424 */
    evc_agc_gpio_delta_stat_reg_t GPIO_DELTA_STAT; /*< Address offset = 0x440 */
    evc_agc_gpio_delta_hi_en_reg_t GPIO_DELTA_HI_EN; /*< Address offset = 0x444 */
    evc_agc_gpio_delta_lo_en_reg_t GPIO_DELTA_LO_EN; /*< Address offset = 0x448 */
    evc_agc_gpio_delta_clr_reg_t GPIO_DELTA_CLR; /*< Address offset = 0x44c */
    evc_agc_gpio_delta_force_reg_t GPIO_DELTA_FORCE; /*< Address offset = 0x450 */
} evc_agc_t;     // size: 0x0180

// AddressSpace struct pointer
//
#define SYSCON_EVC_AGC   ((evc_agc_t*) SYSCON_EVC_AGC_BASE)

// ******************************************* /Address Space

#endif      // _EVC_AGC_H_

