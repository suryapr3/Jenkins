#ifndef _RCS_TIMER_GPREG_H_
#define _RCS_TIMER_GPREG_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define RCS_TIMER_GPREG_BASE  ( 0x00268c00 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_OFFSET ( 0x00000000U )
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_OFFSET ( 0x00000004U )
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_OFFSET ( 0x00000008U )
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_OFFSET ( 0x0000000cU )
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_OFFSET ( 0x00000010U )
#define RCS_TIMER_GPREG_LCNT_INC_OFFSET ( 0x00000014U )
#define RCS_TIMER_GPREG_TEN_MS_CNT_OFFSET ( 0x00000018U )
#define RCS_TIMER_GPREG_INC_PRE_REG0_OFFSET ( 0x0000001cU )
#define RCS_TIMER_GPREG_INC_PRE_REG1_OFFSET ( 0x00000020U )
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_OFFSET ( 0x00000024U )
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_OFFSET ( 0x00000028U )
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_OFFSET ( 0x0000002cU )
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_OFFSET ( 0x00000030U )
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_OFFSET ( 0x00000034U )
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_OFFSET ( 0x00000038U )
#define RCS_TIMER_GPREG_ICTRL_OFFSET ( 0x0000003cU )
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_OFFSET ( 0x00000040U )
#define RCS_TIMER_GPREG_BFN_CNT_LO_OFFSET ( 0x00000044U )
#define RCS_TIMER_GPREG_BFN_CNT_HI_OFFSET ( 0x00000048U )
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_OFFSET ( 0x0000004cU )
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_OFFSET ( 0x00000050U )
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_OFFSET ( 0x00000054U )
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_OFFSET ( 0x00000058U )
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_OFFSET ( 0x0000005cU )
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_OFFSET ( 0x00000060U )
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL0_OFFSET ( 0x00000064U )
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL1_OFFSET ( 0x00000068U )
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL2_OFFSET ( 0x0000006cU )
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL3_OFFSET ( 0x00000070U )
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL0_OFFSET ( 0x00000074U )
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL1_OFFSET ( 0x00000078U )
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL2_OFFSET ( 0x0000007cU )
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL3_OFFSET ( 0x00000080U )
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL0_OFFSET ( 0x00000084U )
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL1_OFFSET ( 0x00000088U )
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL2_OFFSET ( 0x0000008cU )
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL3_OFFSET ( 0x00000090U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_SSP_CS_MUX_15_8_OFFSET ) ))
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_OFFSET ) ))
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_OFFSET ) ))
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_OFFSET ) ))
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_OFFSET ) ))
#define RCS_TIMER_GPREG_LCNT_INC_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_LCNT_INC_OFFSET ) ))
#define RCS_TIMER_GPREG_TEN_MS_CNT_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_TEN_MS_CNT_OFFSET ) ))
#define RCS_TIMER_GPREG_INC_PRE_REG0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_INC_PRE_REG0_OFFSET ) ))
#define RCS_TIMER_GPREG_INC_PRE_REG1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_INC_PRE_REG1_OFFSET ) ))
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_CNT_ADJ_REG0_OFFSET ) ))
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_CNT_ADJ_REG1_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CAPT_CFG1_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CAPT_CFG2_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_OFFSET ) ))
#define RCS_TIMER_GPREG_ICTRL_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_ICTRL_OFFSET ) ))
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CNT_LO_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CNT_LO_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CNT_HI_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CNT_HI_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_OFFSET ) ))
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_OFFSET ) ))
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL0_OFFSET ) ))
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL1_OFFSET ) ))
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL2_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL2_OFFSET ) ))
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL3_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL3_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL0_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL1_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL2_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL2_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL3_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL3_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL0_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL0_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL1_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL1_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL2_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL2_OFFSET ) ))
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL3_ADR (( ( RCS_TIMER_GPREG_BASE ) + ( RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL3_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief RCS_TIMER_GPREG_COM_REG_SSP_CS_MUX_15_8 register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/ssp_cs_mux_15_8
  * RCS SSP CS MUX
  */

typedef union {
  struct {
    uint32_t GPIO_SSP_MUX_SEL_8 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_9 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_10 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_11 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_12 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_13 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_14 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_15 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_ssp_cs_mux_15_8_reg_t;

#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_RD_MASK (0x0000ffffU)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_WR_MASK (0x0000ffffU)


///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_8_BF_OFF ( 0)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_8_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_8_BF_MSK (0x00000003)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_8_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_9_BF_OFF ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_9_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_9_BF_MSK (0x0000000C)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_9_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_10_BF_OFF ( 4)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_10_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_10_BF_MSK (0x00000030)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_10_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_11_BF_OFF ( 6)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_11_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_11_BF_MSK (0x000000C0)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_11_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_12_BF_OFF ( 8)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_12_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_12_BF_MSK (0x00000300)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_12_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_13_BF_OFF (10)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_13_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_13_BF_MSK (0x00000C00)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_13_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_14_BF_OFF (12)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_14_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_14_BF_MSK (0x00003000)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_14_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_15_BF_OFF (14)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_15_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_15_BF_MSK (0x0000C000)
#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_GPIO_SSP_MUX_SEL_15_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_SSP_CS_MUX_7_0_R register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/ssp_cs_mux_7_0_r
  * RCS SSP CS MUX
  */

typedef union {
  struct {
    uint32_t GPIO_SSP_MUX_SEL_0 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_1 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_2 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_3 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_4 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_5 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_6 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t GPIO_SSP_MUX_SEL_7 : 2;
    ///< SSP CS Select for coresponding GPIO
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_ssp_cs_mux_7_0_r_reg_t;

#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_RD_MASK (0x0000ffffU)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_WR_MASK (0x0000ffffU)


///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_0_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_0_BF_MSK (0x00000003)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_0_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_1_BF_OFF ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_1_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_1_BF_MSK (0x0000000C)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_1_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_2_BF_OFF ( 4)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_2_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_2_BF_MSK (0x00000030)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_2_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_3_BF_OFF ( 6)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_3_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_3_BF_MSK (0x000000C0)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_3_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_4_BF_OFF ( 8)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_4_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_4_BF_MSK (0x00000300)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_4_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_5_BF_OFF (10)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_5_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_5_BF_MSK (0x00000C00)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_5_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_6_BF_OFF (12)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_6_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_6_BF_MSK (0x00003000)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_6_BF_DEF (0x00000000)

///< SSP CS Select for coresponding GPIO
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_7_BF_OFF (14)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_7_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_7_BF_MSK (0x0000C000)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_GPIO_SSP_MUX_SEL_7_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_SSP_CS_GPIO_MUX register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/ssp_cs_gpio_mux
  * RCS SSP CS / GPIO MUX
  */

typedef union {
  struct {
    uint32_t SSP_GPIO_MUX_SEL0 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL1 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL2 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL3 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL4 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL5 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL6 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL7 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL8 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL9 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="18" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL10 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL11 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="22" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL12 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL13 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="26" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL14 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="28" ResetValue="0x0"
    uint32_t SSP_GPIO_MUX_SEL15 : 2;
    ///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
    ///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
    ///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
    ///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
    ///< AccessType="RW" BitOffset="30" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_ssp_cs_gpio_mux_reg_t;

#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_WR_MASK (0xffffffffU)


///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL0_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL0_BF_MSK (0x00000003)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL0_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL1_BF_OFF ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL1_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL1_BF_MSK (0x0000000C)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL1_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL2_BF_OFF ( 4)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL2_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL2_BF_MSK (0x00000030)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL2_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL3_BF_OFF ( 6)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL3_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL3_BF_MSK (0x000000C0)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL3_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL4_BF_OFF ( 8)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL4_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL4_BF_MSK (0x00000300)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL4_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL5_BF_OFF (10)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL5_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL5_BF_MSK (0x00000C00)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL5_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL6_BF_OFF (12)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL6_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL6_BF_MSK (0x00003000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL6_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL7_BF_OFF (14)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL7_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL7_BF_MSK (0x0000C000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL7_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL8_BF_OFF (16)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL8_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL8_BF_MSK (0x00030000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL8_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL9_BF_OFF (18)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL9_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL9_BF_MSK (0x000C0000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL9_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL10_BF_OFF (20)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL10_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL10_BF_MSK (0x00300000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL10_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL11_BF_OFF (22)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL11_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL11_BF_MSK (0x00C00000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL11_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL12_BF_OFF (24)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL12_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL12_BF_MSK (0x03000000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL12_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL13_BF_OFF (26)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL13_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL13_BF_MSK (0x0C000000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL13_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL14_BF_OFF (28)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL14_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL14_BF_MSK (0x30000000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL14_BF_DEF (0x00000000)

///< For rcs_gpio_grp2_pdo[n], this field selects which source will be
///< driven onto the gpio pin.  0=rcs_gpio_grp2_pdo[n], 1=ssp_cs indicated
///< by gpio_ssp_mux_sel_[n] field. 2=rcs_gpio_grp2_pdo[n] qualified by
///< ssp_cs indicated by gpio_ssp_mux_sel_n field 3=reserved
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL15_BF_OFF (30)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL15_BF_WID ( 2)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL15_BF_MSK (0xC0000000)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_SSP_GPIO_MUX_SEL15_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_SSP_DMA_TRIGGER_GPIO_SEL register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/ssp_dma_trigger_gpio_sel
  * SSP DMA trigger gpio assignment
  */

typedef union {
  struct {
    uint32_t SSP_DMA_GPIO_SEL0 : 5;
    ///< Indicates which gpio pdo signal will drive the ssp DMA start trigger.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t SSPDMA_TRIG_EN : 1;
    ///< Each bit enables the corresponding ssp dma trigger.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_ssp_dma_trig_gpio_sel_reg_t;

#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_RD_MASK (0x0000003fU)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_WR_MASK (0x0000003fU)


///< Indicates which gpio pdo signal will drive the ssp DMA start trigger.
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSP_DMA_GPIO_SEL0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSP_DMA_GPIO_SEL0_BF_WID ( 5)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSP_DMA_GPIO_SEL0_BF_MSK (0x0000001F)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSP_DMA_GPIO_SEL0_BF_DEF (0x00000000)

///< Each bit enables the corresponding ssp dma trigger.
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSPDMA_TRIG_EN_BF_OFF ( 5)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSPDMA_TRIG_EN_BF_WID ( 1)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSPDMA_TRIG_EN_BF_MSK (0x00000020)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_SSPDMA_TRIG_EN_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_CORE_DMA_TRIGGER_GPIO_SEL register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/core_dma_trigger_gpio_sel
  * Core DMA trigger gpio assignment
  */

typedef union {
  struct {
    uint32_t CORE_0_DMA_TRIG_GPIO_SEL : 5;
    ///< Indicates which gpio pdo signal will drive the DMA start trigger for
    ///< core n
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t CORE_1_DMA_TRIG_GPIO_SEL : 5;
    ///< Indicates which gpio pdo signal will drive the DMA start trigger for
    ///< core n
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t CORE_2_DMA_TRIG_GPIO_SEL : 5;
    ///< Indicates which gpio pdo signal will drive the DMA start trigger for
    ///< core n
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t CORE_3_DMA_TRIG_GPIO_SEL : 5;
    ///< Indicates which gpio pdo signal will drive the DMA start trigger for
    ///< core n
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t CORE_DMA_TRIG_EN : 4;
    ///< Each bit enables the corresponding core dma trigger.
    ///< AccessType="RW" BitOffset="20" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_core_dma_trig_gpio_sel_reg_t;

#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_RD_MASK (0x00ffffffU)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_WR_MASK (0x00ffffffU)


///< Indicates which gpio pdo signal will drive the DMA start trigger for
///< core n
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_0_DMA_TRIG_GPIO_SEL_BF_OFF ( 0)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_0_DMA_TRIG_GPIO_SEL_BF_WID ( 5)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_0_DMA_TRIG_GPIO_SEL_BF_MSK (0x0000001F)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_0_DMA_TRIG_GPIO_SEL_BF_DEF (0x00000000)

///< Indicates which gpio pdo signal will drive the DMA start trigger for
///< core n
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_1_DMA_TRIG_GPIO_SEL_BF_OFF ( 5)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_1_DMA_TRIG_GPIO_SEL_BF_WID ( 5)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_1_DMA_TRIG_GPIO_SEL_BF_MSK (0x000003E0)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_1_DMA_TRIG_GPIO_SEL_BF_DEF (0x00000000)

///< Indicates which gpio pdo signal will drive the DMA start trigger for
///< core n
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_2_DMA_TRIG_GPIO_SEL_BF_OFF (10)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_2_DMA_TRIG_GPIO_SEL_BF_WID ( 5)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_2_DMA_TRIG_GPIO_SEL_BF_MSK (0x00007C00)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_2_DMA_TRIG_GPIO_SEL_BF_DEF (0x00000000)

///< Indicates which gpio pdo signal will drive the DMA start trigger for
///< core n
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_3_DMA_TRIG_GPIO_SEL_BF_OFF (15)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_3_DMA_TRIG_GPIO_SEL_BF_WID ( 5)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_3_DMA_TRIG_GPIO_SEL_BF_MSK (0x000F8000)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_3_DMA_TRIG_GPIO_SEL_BF_DEF (0x00000000)

///< Each bit enables the corresponding core dma trigger.
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_DMA_TRIG_EN_BF_OFF (20)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_DMA_TRIG_EN_BF_WID ( 4)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_DMA_TRIG_EN_BF_MSK (0x00F00000)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_CORE_DMA_TRIG_EN_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_LCNT_INC register description at address offset 0x14
  *
  * Register default value:        0x00000001
  * Register full path in IP: rcs_timer_gpreg_com/reg/LCNT_INC
  * Timesync BFN Lower Count Increment Control Register.
  */

typedef union {
  struct {
    uint32_t BFN_LOWER_CNT_INC : 24;
    ///< BFN_LOWER_CNT_INC. The value programmed in this register is used to
    ///< increment the BFN lower counter every clock-cycle.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x1"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_lcnt_inc_reg_t;

#define RCS_TIMER_GPREG_LCNT_INC_DEFAULT (0x00000001U)
#define RCS_TIMER_GPREG_LCNT_INC_RD_MASK (0x00ffffffU)
#define RCS_TIMER_GPREG_LCNT_INC_WR_MASK (0x00ffffffU)


///< BFN_LOWER_CNT_INC. The value programmed in this register is used to
///< increment the BFN lower counter every clock-cycle.
#define RCS_TIMER_GPREG_LCNT_INC_BFN_LOWER_CNT_INC_BF_OFF ( 0)
#define RCS_TIMER_GPREG_LCNT_INC_BFN_LOWER_CNT_INC_BF_WID (24)
#define RCS_TIMER_GPREG_LCNT_INC_BFN_LOWER_CNT_INC_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_LCNT_INC_BFN_LOWER_CNT_INC_BF_DEF (0x00000001)


/** @brief RCS_TIMER_GPREG_COM_REG_TEN_MS_CNT register description at address offset 0x18
  *
  * Register default value:        0x0095FFFF
  * Register full path in IP: rcs_timer_gpreg_com/reg/TEN_MS_CNT
  * Timesync Ten Millisecond Count.
  */

typedef union {
  struct {
    uint32_t TEN_MS_CNT : 24;
    ///< TEN_MS_CNT. The lower BFN counter resets to zero when it reaches this
    ///< value. This register should be programmed with the desired 10ms lower
    ///< count - BFN_LOWER_CNT_INC.  Note, that this should be adjested based
    ///< on the clk_bfn frequency.  By default it is based on 983MHz frequence,
    ///< but it could be running at 1474MHz.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x95FFFF"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="24" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_ten_ms_cnt_reg_t;

#define RCS_TIMER_GPREG_TEN_MS_CNT_DEFAULT (0x0095ffffU)
#define RCS_TIMER_GPREG_TEN_MS_CNT_RD_MASK (0x00ffffffU)
#define RCS_TIMER_GPREG_TEN_MS_CNT_WR_MASK (0x00ffffffU)


///< TEN_MS_CNT. The lower BFN counter resets to zero when it reaches this
///< value. This register should be programmed with the desired 10ms lower
///< count - BFN_LOWER_CNT_INC.  Note, that this should be adjested based
///< on the clk_bfn frequency.  By default it is based on 983MHz frequence,
///< but it could be running at 1474MHz.
#define RCS_TIMER_GPREG_TEN_MS_CNT_TEN_MS_CNT_BF_OFF ( 0)
#define RCS_TIMER_GPREG_TEN_MS_CNT_TEN_MS_CNT_BF_WID (24)
#define RCS_TIMER_GPREG_TEN_MS_CNT_TEN_MS_CNT_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_TEN_MS_CNT_TEN_MS_CNT_BF_DEF (0x0095FFFF)


/** @brief RCS_TIMER_GPREG_COM_REG_INC_PRE_REG0 register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/INC_PRE_REG0
  * Part 0 of Timesync Timer Increment/Preset Value.
  */

typedef union {
  struct {
    uint32_t TIMER_INC_PRE_LBC : 24;
    ///< TIMER_INC_PRE for Lower BFN Counter. This value is used to preset/increment
    ///< the lower BFN counter or add to the upper BFN counter depending on
    ///< the value of i_timer_cmd.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TIMER_INC_PRE0_UBC : 8;
    ///< Part 0 of TIMER_INC_PRE for Upper BFN Counter. This value is used
    ///< to preset/increment the lower BFN counter or add to the upper BFN
    ///< counter depending on the value of i_timer_cmd. This is bits 7:0 of
    ///< the Upper BFN Counter.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_inc_pre_reg0_reg_t;

#define RCS_TIMER_GPREG_INC_PRE_REG0_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_INC_PRE_REG0_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_INC_PRE_REG0_WR_MASK (0xffffffffU)


///< TIMER_INC_PRE for Lower BFN Counter. This value is used to preset/increment
///< the lower BFN counter or add to the upper BFN counter depending on
///< the value of i_timer_cmd.
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE_LBC_BF_OFF ( 0)
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE_LBC_BF_WID (24)
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE_LBC_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE_LBC_BF_DEF (0x00000000)

///< Part 0 of TIMER_INC_PRE for Upper BFN Counter. This value is used
///< to preset/increment the lower BFN counter or add to the upper BFN
///< counter depending on the value of i_timer_cmd. This is bits 7:0 of
///< the Upper BFN Counter.
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE0_UBC_BF_OFF (24)
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE0_UBC_BF_WID ( 8)
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE0_UBC_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_INC_PRE_REG0_TIMER_INC_PRE0_UBC_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_INC_PRE_REG1 register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/INC_PRE_REG1
  * Part 1 of Timesync Timer Increment/Preset Value.
  */

typedef union {
  struct {
    uint32_t TIMER_INC_PRE1_UBC : 32;
    ///< Part 1 of TIMER_INC_PRE for Upper BFN Counter. This value is used
    ///< to preset/increment the lower BFN counter or add to the upper BFN
    ///< counter depending on the value of i_timer_cmd. This is bits 39:8 of
    ///< the Upper BFN Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_inc_pre_reg1_reg_t;

#define RCS_TIMER_GPREG_INC_PRE_REG1_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_INC_PRE_REG1_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_INC_PRE_REG1_WR_MASK (0xffffffffU)


///< Part 1 of TIMER_INC_PRE for Upper BFN Counter. This value is used
///< to preset/increment the lower BFN counter or add to the upper BFN
///< counter depending on the value of i_timer_cmd. This is bits 39:8 of
///< the Upper BFN Counter.
#define RCS_TIMER_GPREG_INC_PRE_REG1_TIMER_INC_PRE1_UBC_BF_OFF ( 0)
#define RCS_TIMER_GPREG_INC_PRE_REG1_TIMER_INC_PRE1_UBC_BF_WID (32)
#define RCS_TIMER_GPREG_INC_PRE_REG1_TIMER_INC_PRE1_UBC_BF_MSK (0xFFFFFFFF)
#define RCS_TIMER_GPREG_INC_PRE_REG1_TIMER_INC_PRE1_UBC_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_CNT_ADJ_REG0 register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/CNT_ADJ_REG0
  * Part 0 of Timesync Counter Adjustment Value.
  */

typedef union {
  struct {
    uint32_t TIMER_CNT_ADJ0 : 32;
    ///< Part 0 of TIMER_CNT_ADJ. When the value of the upper BFN counter equals
    ///< this value, the Upper BFN counter is incremented by the value in TIMER_INC_PRE
    ///< register. This is bits 31:0 of the Upper BFN Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_cnt_adj_reg0_reg_t;

#define RCS_TIMER_GPREG_CNT_ADJ_REG0_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_WR_MASK (0xffffffffU)


///< Part 0 of TIMER_CNT_ADJ. When the value of the upper BFN counter equals
///< this value, the Upper BFN counter is incremented by the value in TIMER_INC_PRE
///< register. This is bits 31:0 of the Upper BFN Counter.
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_TIMER_CNT_ADJ0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_TIMER_CNT_ADJ0_BF_WID (32)
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_TIMER_CNT_ADJ0_BF_MSK (0xFFFFFFFF)
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_TIMER_CNT_ADJ0_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_CNT_ADJ_REG1 register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/CNT_ADJ_REG1
  * Part 1 of Timesync Counter Adjustment Value.
  */

typedef union {
  struct {
    uint32_t TIMER_CNT_ADJ1 : 8;
    ///< Part 1 of TIMER_CNT_ADJ. When the value of the upper BFN counter equals
    ///< this value, the Upper BFN counter is incremented by the value in TIMER_INC_PRE
    ///< register. This is bits 39:32 of the Upper BFN Counter.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_cnt_adj_reg1_reg_t;

#define RCS_TIMER_GPREG_CNT_ADJ_REG1_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_RD_MASK (0x000000ffU)
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_WR_MASK (0x000000ffU)


///< Part 1 of TIMER_CNT_ADJ. When the value of the upper BFN counter equals
///< this value, the Upper BFN counter is incremented by the value in TIMER_INC_PRE
///< register. This is bits 39:32 of the Upper BFN Counter.
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_TIMER_CNT_ADJ1_BF_OFF ( 0)
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_TIMER_CNT_ADJ1_BF_WID ( 8)
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_TIMER_CNT_ADJ1_BF_MSK (0x000000FF)
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_TIMER_CNT_ADJ1_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CAPT_CFG1 register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/bfn_capt_cfg1
  * BFN Capture strobe edge select
  */

typedef union {
  struct {
    uint32_t RX_FB_CAPT_EDGE_SEL0 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_FB_CAPT_EDGE_SEL1 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_FB_CAPT_EDGE_SEL2 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_FB_CAPT_EDGE_SEL3 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_EN_CAPT_EDGE_SEL0 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t RX_EN_CAPT_EDGE_SEL1 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t RX_EN_CAPT_EDGE_SEL2 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t RX_EN_CAPT_EDGE_SEL3 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="14" ResetValue="0x0"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_capt_cfg1_reg_t;

#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RD_MASK (0x0000ffffU)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_WR_MASK (0xffffffffU)


///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL0_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL0_BF_MSK (0x00000003)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL0_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL1_BF_OFF ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL1_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL1_BF_MSK (0x0000000C)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL1_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL2_BF_OFF ( 4)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL2_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL2_BF_MSK (0x00000030)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL2_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL3_BF_OFF ( 6)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL3_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL3_BF_MSK (0x000000C0)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_FB_CAPT_EDGE_SEL3_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL0_BF_OFF ( 8)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL0_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL0_BF_MSK (0x00000300)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL0_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL1_BF_OFF (10)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL1_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL1_BF_MSK (0x00000C00)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL1_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL2_BF_OFF (12)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL2_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL2_BF_MSK (0x00003000)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL2_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL3_BF_OFF (14)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL3_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL3_BF_MSK (0x0000C000)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_RX_EN_CAPT_EDGE_SEL3_BF_DEF (0x00000000)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_MASK_BF_OFF (16)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_MASK_BF_WID (16)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_MASK_BF_MSK (0xFFFF0000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CAPT_CFG2 register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/bfn_capt_cfg2
  * BFN Capture strobe edge select
  */

typedef union {
  struct {
    uint32_t TX_EN_CAPT_EDGE_SEL0 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t TX_EN_CAPT_EDGE_SEL1 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t TX_EN_CAPT_EDGE_SEL2 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t TX_EN_CAPT_EDGE_SEL3 : 2;
    ///< Selects which edges of the strobe pin to capture the bfn count on.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t  : 8;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_capt_cfg2_reg_t;

#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_RD_MASK (0x000000ffU)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_WR_MASK (0xffff00ffU)


///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL0_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL0_BF_MSK (0x00000003)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL0_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL1_BF_OFF ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL1_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL1_BF_MSK (0x0000000C)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL1_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL2_BF_OFF ( 4)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL2_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL2_BF_MSK (0x00000030)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL2_BF_DEF (0x00000000)

///< Selects which edges of the strobe pin to capture the bfn count on.
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL3_BF_OFF ( 6)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL3_BF_WID ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL3_BF_MSK (0x000000C0)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_TX_EN_CAPT_EDGE_SEL3_BF_DEF (0x00000000)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_MASK_BF_OFF (16)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_MASK_BF_WID (16)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_MASK_BF_MSK (0xFFFF0000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CAPT_INT_MASK register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/bfn_capt_int_mask
  * BFN Capture strobe interrupt masks
  */

typedef union {
  struct {
    uint32_t RX_FB_BFN_CAPT_INT_MASK0 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t RX_FB_BFN_CAPT_INT_MASK1 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t RX_FB_BFN_CAPT_INT_MASK2 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t RX_FB_BFN_CAPT_INT_MASK3 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="3" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT_MASK0 : 1;
    ///< Masks the interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT_MASK1 : 1;
    ///< Masks the interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW" BitOffset="5" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT_MASK2 : 1;
    ///< Masks the interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT_MASK3 : 1;
    ///< Masks the interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT_MASK0 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT_MASK1 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT_MASK2 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="10" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT_MASK3 : 1;
    ///< Masks the interrupt for TX_FB strobe bfn time capture.
    ///< AccessType="RW" BitOffset="11" ResetValue="0x0"
    uint32_t  : 4;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
    uint32_t MASK : 16;
    ///< Maskable
    ///< AccessType="WO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_capt_int_mask_reg_t;

#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RD_MASK (0x00000fffU)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_WR_MASK (0xffff0fffU)


///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK0_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK0_BF_MSK (0x00000001)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK0_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK1_BF_OFF ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK1_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK1_BF_MSK (0x00000002)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK1_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK2_BF_OFF ( 2)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK2_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK2_BF_MSK (0x00000004)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK2_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK3_BF_OFF ( 3)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK3_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK3_BF_MSK (0x00000008)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_FB_BFN_CAPT_INT_MASK3_BF_DEF (0x00000000)

///< Masks the interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK0_BF_OFF ( 4)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK0_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK0_BF_MSK (0x00000010)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK0_BF_DEF (0x00000000)

///< Masks the interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK1_BF_OFF ( 5)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK1_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK1_BF_MSK (0x00000020)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK1_BF_DEF (0x00000000)

///< Masks the interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK2_BF_OFF ( 6)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK2_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK2_BF_MSK (0x00000040)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK2_BF_DEF (0x00000000)

///< Masks the interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK3_BF_OFF ( 7)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK3_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK3_BF_MSK (0x00000080)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_RX_EN_BFN_CAPT_INT_MASK3_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK0_BF_OFF ( 8)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK0_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK0_BF_MSK (0x00000100)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK0_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK1_BF_OFF ( 9)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK1_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK1_BF_MSK (0x00000200)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK1_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK2_BF_OFF (10)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK2_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK2_BF_MSK (0x00000400)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK2_BF_DEF (0x00000000)

///< Masks the interrupt for TX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK3_BF_OFF (11)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK3_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK3_BF_MSK (0x00000800)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_TX_EN_BFN_CAPT_INT_MASK3_BF_DEF (0x00000000)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_BF_OFF (16)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_BF_WID (16)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_BF_MSK (0xFFFF0000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_TIME_CAPT_STATUS register description at address offset 0x38
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_TIME_CAPT_STATUS
  * Status for bfn time capture strobes
  */

typedef union {
  struct {
    uint32_t RX_FB_BFN_CAPT_INT0 : 1;
    ///< Status of interrupt for RX_FB strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="0" ResetValue="0x0"
    uint32_t RX_FB_BFN_CAPT_INT1 : 1;
    ///< Status of interrupt for RX_FB strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="1" ResetValue="0x0"
    uint32_t RX_FB_BFN_CAPT_INT2 : 1;
    ///< Status of interrupt for RX_FB strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="2" ResetValue="0x0"
    uint32_t RX_FB_BFN_CAPT_INT3 : 1;
    ///< Status of interrupt for RX_FB strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="3" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT0 : 1;
    ///< Status of interrupt for RX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="4" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT1 : 1;
    ///< Status of interrupt for RX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="5" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT2 : 1;
    ///< Status of interrupt for RX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="6" ResetValue="0x0"
    uint32_t RX_EN_BFN_CAPT_INT3 : 1;
    ///< Status of interrupt for RX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="7" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT0 : 1;
    ///< Status of interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="8" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT1 : 1;
    ///< Status of interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="9" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT2 : 1;
    ///< Status of interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="10" ResetValue="0x0"
    uint32_t TX_EN_BFN_CAPT_INT3 : 1;
    ///< Status of interrupt for TX_EN strobe bfn time capture.
    ///< AccessType="RW/1C/V" BitOffset="11" ResetValue="0x0"
    uint32_t  : 20;
    ///< Reserved
    ///< AccessType="RO" BitOffset="12" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_time_capt_stat_reg_t;

#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RD_MASK (0x00000fffU)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_WR_MASK (0x00000fffU)


///< Status of interrupt for RX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT0_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT0_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT0_BF_MSK (0x00000001)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT0_BF_DEF (0x00000000)

///< Status of interrupt for RX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT1_BF_OFF ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT1_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT1_BF_MSK (0x00000002)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT1_BF_DEF (0x00000000)

///< Status of interrupt for RX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT2_BF_OFF ( 2)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT2_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT2_BF_MSK (0x00000004)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT2_BF_DEF (0x00000000)

///< Status of interrupt for RX_FB strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT3_BF_OFF ( 3)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT3_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT3_BF_MSK (0x00000008)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_FB_BFN_CAPT_INT3_BF_DEF (0x00000000)

///< Status of interrupt for RX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT0_BF_OFF ( 4)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT0_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT0_BF_MSK (0x00000010)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT0_BF_DEF (0x00000000)

///< Status of interrupt for RX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT1_BF_OFF ( 5)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT1_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT1_BF_MSK (0x00000020)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT1_BF_DEF (0x00000000)

///< Status of interrupt for RX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT2_BF_OFF ( 6)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT2_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT2_BF_MSK (0x00000040)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT2_BF_DEF (0x00000000)

///< Status of interrupt for RX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT3_BF_OFF ( 7)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT3_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT3_BF_MSK (0x00000080)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_RX_EN_BFN_CAPT_INT3_BF_DEF (0x00000000)

///< Status of interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT0_BF_OFF ( 8)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT0_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT0_BF_MSK (0x00000100)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT0_BF_DEF (0x00000000)

///< Status of interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT1_BF_OFF ( 9)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT1_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT1_BF_MSK (0x00000200)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT1_BF_DEF (0x00000000)

///< Status of interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT2_BF_OFF (10)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT2_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT2_BF_MSK (0x00000400)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT2_BF_DEF (0x00000000)

///< Status of interrupt for TX_EN strobe bfn time capture.
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT3_BF_OFF (11)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT3_BF_WID ( 1)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT3_BF_MSK (0x00000800)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_TX_EN_BFN_CAPT_INT3_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_ICTRL register description at address offset 0x3c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/ICTRL
  * BFN Timesync General Control Register.
  */

typedef union {
  struct {
    uint32_t TIMER_CMD : 3;
    ///< TIMER_CMD. When i_isync value is 11, the command programmed in this
    ///< register is executed.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="3" ResetValue="None"
    uint32_t ISYNC_VALUE : 2;
    ///< Value for signal o_isync to all BFNs. Controlled by ISYNC_TRIGGER.
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 1;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
    uint32_t ISYNC_TRIGGER : 1;
    ///< When set, trigger the generation of an o_isync pulse with value of
    ///< ISYNC_VALUE, this bit will be self clearing.
    ///< AccessType="RW/AC" BitOffset="7" ResetValue="0x0"
    uint32_t LOAD_READ : 1;
    ///< This register controls whether a new value needs to be read or loaded
    ///< into the BFN counter when the timesync pulse occurs. The value used
    ///< is from the i_timer_inc_pre register. 1 => load, 0 => read.  When
    ///< set to load, only the first timesync pulse will cause a load.  To
    ///< load again in the future, it must be cleared by FW then set again.
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t FORCE_CLEAR : 1;
    ///< This bit is DEPRICATED. (i.e. no longer connected to anything).
    ///< When set, force to clear the BFN load counter value.
    ///< AccessType="RW" BitOffset="9" ResetValue="0x0"
    uint32_t  : 5;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
    uint32_t SOFT_RESET : 1;
    ///< Soft Reset. Active high. Equivalent to the chip reset.
    ///< AccessType="RW" BitOffset="15" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_ictrl_reg_t;

#define RCS_TIMER_GPREG_ICTRL_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_ICTRL_RD_MASK (0x000083b7U)
#define RCS_TIMER_GPREG_ICTRL_WR_MASK (0x000083b7U)


///< TIMER_CMD. When i_isync value is 11, the command programmed in this
///< register is executed.
#define RCS_TIMER_GPREG_ICTRL_TIMER_CMD_BF_OFF ( 0)
#define RCS_TIMER_GPREG_ICTRL_TIMER_CMD_BF_WID ( 3)
#define RCS_TIMER_GPREG_ICTRL_TIMER_CMD_BF_MSK (0x00000007)
#define RCS_TIMER_GPREG_ICTRL_TIMER_CMD_BF_DEF (0x00000000)

///< Value for signal o_isync to all BFNs. Controlled by ISYNC_TRIGGER.
#define RCS_TIMER_GPREG_ICTRL_ISYNC_VAL_BF_OFF ( 4)
#define RCS_TIMER_GPREG_ICTRL_ISYNC_VAL_BF_WID ( 2)
#define RCS_TIMER_GPREG_ICTRL_ISYNC_VAL_BF_MSK (0x00000030)
#define RCS_TIMER_GPREG_ICTRL_ISYNC_VAL_BF_DEF (0x00000000)

///< When set, trigger the generation of an o_isync pulse with value of
///< ISYNC_VALUE, this bit will be self clearing.
#define RCS_TIMER_GPREG_ICTRL_ISYNC_TRIG_BF_OFF ( 7)
#define RCS_TIMER_GPREG_ICTRL_ISYNC_TRIG_BF_WID ( 1)
#define RCS_TIMER_GPREG_ICTRL_ISYNC_TRIG_BF_MSK (0x00000080)
#define RCS_TIMER_GPREG_ICTRL_ISYNC_TRIG_BF_DEF (0x00000000)

///< This register controls whether a new value needs to be read or loaded
///< into the BFN counter when the timesync pulse occurs. The value used
///< is from the i_timer_inc_pre register. 1 => load, 0 => read.  When
///< set to load, only the first timesync pulse will cause a load.  To
///< load again in the future, it must be cleared by FW then set again.
#define RCS_TIMER_GPREG_ICTRL_LOAD_READ_BF_OFF ( 8)
#define RCS_TIMER_GPREG_ICTRL_LOAD_READ_BF_WID ( 1)
#define RCS_TIMER_GPREG_ICTRL_LOAD_READ_BF_MSK (0x00000100)
#define RCS_TIMER_GPREG_ICTRL_LOAD_READ_BF_DEF (0x00000000)

///< This bit is DEPRICATED. (i.e. no longer connected to anything).
///< When set, force to clear the BFN load counter value.
#define RCS_TIMER_GPREG_ICTRL_FORCE_CLR_BF_OFF ( 9)
#define RCS_TIMER_GPREG_ICTRL_FORCE_CLR_BF_WID ( 1)
#define RCS_TIMER_GPREG_ICTRL_FORCE_CLR_BF_MSK (0x00000200)
#define RCS_TIMER_GPREG_ICTRL_FORCE_CLR_BF_DEF (0x00000000)

///< Soft Reset. Active high. Equivalent to the chip reset.
#define RCS_TIMER_GPREG_ICTRL_SOFT_RST_BF_OFF (15)
#define RCS_TIMER_GPREG_ICTRL_SOFT_RST_BF_WID ( 1)
#define RCS_TIMER_GPREG_ICTRL_SOFT_RST_BF_MSK (0x00008000)
#define RCS_TIMER_GPREG_ICTRL_SOFT_RST_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_OPPS_VAL_TIMESYNC_CTRL register description at address offset 0x40
  *
  * Register default value:        0x00000031
  * Register full path in IP: rcs_timer_gpreg_com/reg/opps_val_timesync_ctrl
  * timesync control
  */

typedef union {
  struct {
    uint32_t ONEPPS_VAL : 16;
    ///< This value controls the toggle of the one_pulse_per_sec signal. The
    ///< value indicates that the o_one_pulse_per_sec will toggle every (ONEPPS_VAL+1)*10ms
    ///< or 500ms by default.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x31"
    uint32_t SYSREFEN : 1;
    ///< Enable for the incoming sysref/timesync bit. Set to 1 to enable timesync
    ///< input BFN initiator.
    ///< AccessType="RW" BitOffset="16" ResetValue="0x0"
    uint32_t EXTSYNC_EN : 1;
    ///< Enable for the incoming external sync strobe.  Set to 1 to enable
    ///< triggering off of the external sync strobe.
    ///< AccessType="RW" BitOffset="17" ResetValue="0x0"
    uint32_t TS_CAPTURE : 1;
    ///< When this bit is set to 1, the TIMESYNC strobe will be sent to the
    ///< BFN initiator.  It will also be sent on a signal externally.  This
    ///< bit is self clearing after 32 bfn clocks.
    ///< AccessType="RW/AC" BitOffset="18" ResetValue="0x0"
    uint32_t EXTSYNC_GPIO_SEL : 5;
    ///< This value selects which gpio from group 1 will be used as an external
    ///< timesync when the extsync_en bit is set.  This timesync trigger is
    ///< also qualified by the SYS_REF input pin.
    ///< AccessType="RW" BitOffset="19" ResetValue="0x0"
    uint32_t SYSREF_SEL : 1;
    ///< This bit selects which sys_ref to use.  The RCS may be running at
    ///< 983Mhz or 1.474Ghz.  There will be two versions of sys_ref coming
    ///< to the RCS, one synchronized to 983Mhz and one to 14745Mhz.
    ///< AccessType="RW" BitOffset="24" ResetValue="0x0"
    uint32_t  : 7;
    ///< Reserved
    ///< AccessType="RO" BitOffset="25" ResetValue="None"
  } ;
  uint32_t value;
} rcs_timer_gpreg_opps_val_timesync_ctrl_reg_t;

#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_DEFAULT (0x00000031U)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_RD_MASK (0x01ffffffU)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_WR_MASK (0x01ffffffU)


///< This value controls the toggle of the one_pulse_per_sec signal. The
///< value indicates that the o_one_pulse_per_sec will toggle every (ONEPPS_VAL+1)*10ms
///< or 500ms by default.
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_ONEPPS_VAL_BF_OFF ( 0)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_ONEPPS_VAL_BF_WID (16)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_ONEPPS_VAL_BF_MSK (0x0000FFFF)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_ONEPPS_VAL_BF_DEF (0x00000031)

///< Enable for the incoming sysref/timesync bit. Set to 1 to enable timesync
///< input BFN initiator.
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREFEN_BF_OFF (16)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREFEN_BF_WID ( 1)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREFEN_BF_MSK (0x00010000)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREFEN_BF_DEF (0x00000000)

///< Enable for the incoming external sync strobe.  Set to 1 to enable
///< triggering off of the external sync strobe.
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_EN_BF_OFF (17)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_EN_BF_WID ( 1)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_EN_BF_MSK (0x00020000)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_EN_BF_DEF (0x00000000)

///< When this bit is set to 1, the TIMESYNC strobe will be sent to the
///< BFN initiator.  It will also be sent on a signal externally.  This
///< bit is self clearing after 32 bfn clocks.
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_TS_CAP_BF_OFF (18)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_TS_CAP_BF_WID ( 1)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_TS_CAP_BF_MSK (0x00040000)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_TS_CAP_BF_DEF (0x00000000)

///< This value selects which gpio from group 1 will be used as an external
///< timesync when the extsync_en bit is set.  This timesync trigger is
///< also qualified by the SYS_REF input pin.
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_GPIO_SEL_BF_OFF (19)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_GPIO_SEL_BF_WID ( 5)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_GPIO_SEL_BF_MSK (0x00F80000)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_EXTSYNC_GPIO_SEL_BF_DEF (0x00000000)

///< This bit selects which sys_ref to use.  The RCS may be running at
///< 983Mhz or 1.474Ghz.  There will be two versions of sys_ref coming
///< to the RCS, one synchronized to 983Mhz and one to 14745Mhz.
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREF_SEL_BF_OFF (24)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREF_SEL_BF_WID ( 1)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREF_SEL_BF_MSK (0x01000000)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_SYSREF_SEL_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CNT_LO register description at address offset 0x44
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_CNT_LO
  * Lower BFN Count Value captured during tsync pulse
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< The lower 24 bits of a BFN count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).  The
    ///< upper 32 bits are stored in bfn_count_hi register.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_cnt_lo_reg_t;

#define RCS_TIMER_GPREG_BFN_CNT_LO_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CNT_LO_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_CNT_LO_WR_MASK (0x00000000U)


///< The lower 24 bits of a BFN count value.
#define RCS_TIMER_GPREG_BFN_CNT_LO_OFFSET_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CNT_LO_OFFSET_BF_WID (24)
#define RCS_TIMER_GPREG_BFN_CNT_LO_OFFSET_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_BFN_CNT_LO_OFFSET_BF_DEF (0x00000000)

///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).  The
///< upper 32 bits are stored in bfn_count_hi register.
#define RCS_TIMER_GPREG_BFN_CNT_LO_FRAME_BF_OFF (24)
#define RCS_TIMER_GPREG_BFN_CNT_LO_FRAME_BF_WID ( 8)
#define RCS_TIMER_GPREG_BFN_CNT_LO_FRAME_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_BFN_CNT_LO_FRAME_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CNT_HI register description at address offset 0x48
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_CNT_HI
  * Upper BFN Count Value captured during tsync pulse
  */

typedef union {
  struct {
    uint32_t FRAME : 32;
    ///< The upper 32 bits of a BFN count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_cnt_hi_reg_t;

#define RCS_TIMER_GPREG_BFN_CNT_HI_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CNT_HI_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_CNT_HI_WR_MASK (0x00000000U)


///< The upper 32 bits of a BFN count value.
#define RCS_TIMER_GPREG_BFN_CNT_HI_FRAME_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CNT_HI_FRAME_BF_WID (32)
#define RCS_TIMER_GPREG_BFN_CNT_HI_FRAME_BF_MSK (0xFFFFFFFF)
#define RCS_TIMER_GPREG_BFN_CNT_HI_FRAME_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_LIVE_COUNT_LO register description at address offset 0x4c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/bfn_live_count_lo
  * Live lower BFN Count Value
  */

typedef union {
  struct {
    uint32_t BFN_COUNT_LIVE_OFFSET : 24;
    ///< The lower 24 bits of a BFN count value which represents the 24 frame
    ///< offset.  This is a live value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_COUNT_LIVE_FRAME_LO : 8;
    ///< Bits [31:24] of a BFN count value which represents the 8 LSF frame
    ///< value.  This is a live value.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_live_cnt_lo_reg_t;

#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_WR_MASK (0x00000000U)


///< The lower 24 bits of a BFN count value which represents the 24 frame
///< offset.  This is a live value.
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_OFFSET_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_OFFSET_BF_WID (24)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_OFFSET_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_OFFSET_BF_DEF (0x00000000)

///< Bits [31:24] of a BFN count value which represents the 8 LSF frame
///< value.  This is a live value.
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_FRAME_LO_BF_OFF (24)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_FRAME_LO_BF_WID ( 8)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_FRAME_LO_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_BFN_CNT_LIVE_FRAME_LO_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_LIVE_COUNT_HI register description at address offset 0x50
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/bfn_live_count_hi
  * Live Upper BFN Count Value
  */

typedef union {
  struct {
    uint32_t BFN_COUNT_HI : 32;
    ///< The upper 32 bits of a BFN count value. This register should only
    ///< be read after reading the corresponding LOWER register
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_live_cnt_hi_reg_t;

#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_WR_MASK (0x00000000U)


///< The upper 32 bits of a BFN count value. This register should only
///< be read after reading the corresponding LOWER register
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_BFN_CNT_HI_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_BFN_CNT_HI_BF_WID (32)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_BFN_CNT_HI_BF_MSK (0xFFFFFFFF)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_BFN_CNT_HI_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CNT_VAL1_REG0 register description at address offset 0x54
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_CNT_VAL1_REG0
  * Part 0 of BFN Read Value1.
  */

typedef union {
  struct {
    uint32_t BFN_VALUE1_LBC : 24;
    ///< BFN Value1 for Lower BFN Counter.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_VALUE1_UBC0 : 8;
    ///< Part 0 of BFN Value1 for Upper BFN Counter. This is bits 7:0 of the
    ///< Upper BFN Counter.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_cnt_val1_reg0_reg_t;

#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_WR_MASK (0x00000000U)


///< BFN Value1 for Lower BFN Counter.
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_LBC_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_LBC_BF_WID (24)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_LBC_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_LBC_BF_DEF (0x00000000)

///< Part 0 of BFN Value1 for Upper BFN Counter. This is bits 7:0 of the
///< Upper BFN Counter.
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_UBC0_BF_OFF (24)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_UBC0_BF_WID ( 8)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_UBC0_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_BFN_VAL1_UBC0_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CNT_VAL1_REG1 register description at address offset 0x58
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_CNT_VAL1_REG1
  * Part 1 of BFN Read Value1.
  */

typedef union {
  struct {
    uint32_t BFN_VALUE1_UBC1 : 32;
    ///< Part 1 of BFN Value1 for Upper BFN Counter. This is bits 39:8 of the
    ///< Upper BFN Counter.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_cnt_val1_reg1_reg_t;

#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_WR_MASK (0x00000000U)


///< Part 1 of BFN Value1 for Upper BFN Counter. This is bits 39:8 of the
///< Upper BFN Counter.
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_BFN_VAL1_UBC1_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_BFN_VAL1_UBC1_BF_WID (32)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_BFN_VAL1_UBC1_BF_MSK (0xFFFFFFFF)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_BFN_VAL1_UBC1_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CNT_VAL2_REG0 register description at address offset 0x5c
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_CNT_VAL2_REG0
  * Part 0 of BFN Read Value2.
  */

typedef union {
  struct {
    uint32_t BFN_VALUE2_LBC : 24;
    ///< BFN Value2 for Lower BFN Counter.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t BFN_VALUE2_UBC0 : 8;
    ///< Part 0 of BFN Value2 for Upper BFN Counter. This is bits 7:0 of the
    ///< Upper BFN Counter.
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_cnt_val2_reg0_reg_t;

#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_WR_MASK (0x00000000U)


///< BFN Value2 for Lower BFN Counter.
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_LBC_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_LBC_BF_WID (24)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_LBC_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_LBC_BF_DEF (0x00000000)

///< Part 0 of BFN Value2 for Upper BFN Counter. This is bits 7:0 of the
///< Upper BFN Counter.
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_UBC0_BF_OFF (24)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_UBC0_BF_WID ( 8)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_UBC0_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_BFN_VAL2_UBC0_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_BFN_CNT_VAL2_REG1 register description at address offset 0x60
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/BFN_CNT_VAL2_REG1
  * Part 1 of BFN Read Value2.
  */

typedef union {
  struct {
    uint32_t BFN_VALUE2_UBC1 : 32;
    ///< Part 1 of BFN Value2 for Upper BFN Counter. This is bits 39:8 of the
    ///< Upper BFN Counter.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_bfn_cnt_val2_reg1_reg_t;

#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_WR_MASK (0x00000000U)


///< Part 1 of BFN Value2 for Upper BFN Counter. This is bits 39:8 of the
///< Upper BFN Counter.
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_BFN_VAL2_UBC1_BF_OFF ( 0)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_BFN_VAL2_UBC1_BF_WID (32)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_BFN_VAL2_UBC1_BF_MSK (0xFFFFFFFF)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_BFN_VAL2_UBC1_BF_DEF (0x00000000)


/** @brief RCS_TIMER_GPREG_COM_REG_TX_EN_BFN_CAPTURE_VAL[4] register description at address offset 0x64
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/TX_EN_BFN_CAPTURE_VAL
  * Lower BFN Count Value captured by capture strobes
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< The lower 24 bits of the BFN count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_tx_en_bfn_cap_val_reg_t;

#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_WR_MASK (0x00000000U)


///< The lower 24 bits of the BFN count value.
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_OFFSET_BF_OFF ( 0)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_OFFSET_BF_WID (24)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_OFFSET_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_OFFSET_BF_DEF (0x00000000)

///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_FRAME_BF_OFF (24)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_FRAME_BF_WID ( 8)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_FRAME_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_FRAME_BF_DEF (0x00000000)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_ARR_SZ0 (4)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL_ARRAY_STRIDE0 (0x0004)


/** @brief RCS_TIMER_GPREG_COM_REG_RX_EN_BFN_CAPTURE_VAL[4] register description at address offset 0x74
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/RX_EN_BFN_CAPTURE_VAL
  * Lower BFN Count Value captured by capture strobes
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< The lower 24 bits of the BFN count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_rx_en_bfn_cap_val_reg_t;

#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_WR_MASK (0x00000000U)


///< The lower 24 bits of the BFN count value.
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_OFFSET_BF_OFF ( 0)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_OFFSET_BF_WID (24)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_OFFSET_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_OFFSET_BF_DEF (0x00000000)

///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_FRAME_BF_OFF (24)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_FRAME_BF_WID ( 8)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_FRAME_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_FRAME_BF_DEF (0x00000000)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_ARR_SZ0 (4)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL_ARRAY_STRIDE0 (0x0004)


/** @brief RCS_TIMER_GPREG_COM_REG_RX_FB_BFN_CAPTURE_VAL[4] register description at address offset 0x84
  *
  * Register default value:        0x00000000
  * Register full path in IP: rcs_timer_gpreg_com/reg/RX_FB_BFN_CAPTURE_VAL
  * Lower BFN Count Value captured by capture strobes
  */

typedef union {
  struct {
    uint32_t OFFSET : 24;
    ///< The lower 24 bits of the BFN count value.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t FRAME : 8;
    ///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).
    ///< AccessType="RO/V" BitOffset="24" ResetValue="0x0"
  } ;
  uint32_t value;
} rcs_timer_gpreg_rx_fb_bfn_cap_val_reg_t;

#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_DEFAULT (0x00000000U)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_RD_MASK (0xffffffffU)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_WR_MASK (0x00000000U)


///< The lower 24 bits of the BFN count value.
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_OFFSET_BF_OFF ( 0)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_OFFSET_BF_WID (24)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_OFFSET_BF_MSK (0x00FFFFFF)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_OFFSET_BF_DEF (0x00000000)

///< The lower 8 bits of a BFN frame count value ([31:24] of BFN).
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_FRAME_BF_OFF (24)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_FRAME_BF_WID ( 8)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_FRAME_BF_MSK (0xFF000000)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_FRAME_BF_DEF (0x00000000)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_ARR_SZ0 (4)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL_ARRAY_STRIDE0 (0x0004)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define RCS_TIMER_GPREG_SSP_CS_MUX_15_8_REG ((rcs_timer_gpreg_ssp_cs_mux_15_8_reg_t*) RCS_TIMER_GPREG_SSP_CS_MUX_15_8_ADR)
#define RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_REG ((rcs_timer_gpreg_ssp_cs_mux_7_0_r_reg_t*) RCS_TIMER_GPREG_SSP_CS_MUX_7_0_R_ADR)
#define RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_REG ((rcs_timer_gpreg_ssp_cs_gpio_mux_reg_t*) RCS_TIMER_GPREG_SSP_CS_GPIO_MUX_ADR)
#define RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_REG ((rcs_timer_gpreg_ssp_dma_trig_gpio_sel_reg_t*) RCS_TIMER_GPREG_SSP_DMA_TRIG_GPIO_SEL_ADR)
#define RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_REG ((rcs_timer_gpreg_core_dma_trig_gpio_sel_reg_t*) RCS_TIMER_GPREG_CORE_DMA_TRIG_GPIO_SEL_ADR)
#define RCS_TIMER_GPREG_LCNT_INC_REG ((rcs_timer_gpreg_lcnt_inc_reg_t*) RCS_TIMER_GPREG_LCNT_INC_ADR)
#define RCS_TIMER_GPREG_TEN_MS_CNT_REG ((rcs_timer_gpreg_ten_ms_cnt_reg_t*) RCS_TIMER_GPREG_TEN_MS_CNT_ADR)
#define RCS_TIMER_GPREG_INC_PRE_REG0_REG ((rcs_timer_gpreg_inc_pre_reg0_reg_t*) RCS_TIMER_GPREG_INC_PRE_REG0_ADR)
#define RCS_TIMER_GPREG_INC_PRE_REG1_REG ((rcs_timer_gpreg_inc_pre_reg1_reg_t*) RCS_TIMER_GPREG_INC_PRE_REG1_ADR)
#define RCS_TIMER_GPREG_CNT_ADJ_REG0_REG ((rcs_timer_gpreg_cnt_adj_reg0_reg_t*) RCS_TIMER_GPREG_CNT_ADJ_REG0_ADR)
#define RCS_TIMER_GPREG_CNT_ADJ_REG1_REG ((rcs_timer_gpreg_cnt_adj_reg1_reg_t*) RCS_TIMER_GPREG_CNT_ADJ_REG1_ADR)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG1_REG ((rcs_timer_gpreg_bfn_capt_cfg1_reg_t*) RCS_TIMER_GPREG_BFN_CAPT_CFG1_ADR)
#define RCS_TIMER_GPREG_BFN_CAPT_CFG2_REG ((rcs_timer_gpreg_bfn_capt_cfg2_reg_t*) RCS_TIMER_GPREG_BFN_CAPT_CFG2_ADR)
#define RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_REG ((rcs_timer_gpreg_bfn_capt_int_mask_reg_t*) RCS_TIMER_GPREG_BFN_CAPT_INT_MASK_ADR)
#define RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_REG ((rcs_timer_gpreg_bfn_time_capt_stat_reg_t*) RCS_TIMER_GPREG_BFN_TIME_CAPT_STAT_ADR)
#define RCS_TIMER_GPREG_ICTRL_REG ((rcs_timer_gpreg_ictrl_reg_t*) RCS_TIMER_GPREG_ICTRL_ADR)
#define RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_REG ((rcs_timer_gpreg_opps_val_timesync_ctrl_reg_t*) RCS_TIMER_GPREG_OPPS_VAL_TIMESYNC_CTRL_ADR)
#define RCS_TIMER_GPREG_BFN_CNT_LO_REG ((rcs_timer_gpreg_bfn_cnt_lo_reg_t*) RCS_TIMER_GPREG_BFN_CNT_LO_ADR)
#define RCS_TIMER_GPREG_BFN_CNT_HI_REG ((rcs_timer_gpreg_bfn_cnt_hi_reg_t*) RCS_TIMER_GPREG_BFN_CNT_HI_ADR)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_REG ((rcs_timer_gpreg_bfn_live_cnt_lo_reg_t*) RCS_TIMER_GPREG_BFN_LIVE_CNT_LO_ADR)
#define RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_REG ((rcs_timer_gpreg_bfn_live_cnt_hi_reg_t*) RCS_TIMER_GPREG_BFN_LIVE_CNT_HI_ADR)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_REG ((rcs_timer_gpreg_bfn_cnt_val1_reg0_reg_t*) RCS_TIMER_GPREG_BFN_CNT_VAL1_REG0_ADR)
#define RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_REG ((rcs_timer_gpreg_bfn_cnt_val1_reg1_reg_t*) RCS_TIMER_GPREG_BFN_CNT_VAL1_REG1_ADR)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_REG ((rcs_timer_gpreg_bfn_cnt_val2_reg0_reg_t*) RCS_TIMER_GPREG_BFN_CNT_VAL2_REG0_ADR)
#define RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_REG ((rcs_timer_gpreg_bfn_cnt_val2_reg1_reg_t*) RCS_TIMER_GPREG_BFN_CNT_VAL2_REG1_ADR)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL0_REG ((rcs_timer_gpreg_tx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL0_ADR)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL1_REG ((rcs_timer_gpreg_tx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL1_ADR)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL2_REG ((rcs_timer_gpreg_tx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL2_ADR)
#define RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL3_REG ((rcs_timer_gpreg_tx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_TX_EN_BFN_CAP_VAL3_ADR)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL0_REG ((rcs_timer_gpreg_rx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL0_ADR)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL1_REG ((rcs_timer_gpreg_rx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL1_ADR)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL2_REG ((rcs_timer_gpreg_rx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL2_ADR)
#define RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL3_REG ((rcs_timer_gpreg_rx_en_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_EN_BFN_CAP_VAL3_ADR)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL0_REG ((rcs_timer_gpreg_rx_fb_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL0_ADR)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL1_REG ((rcs_timer_gpreg_rx_fb_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL1_ADR)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL2_REG ((rcs_timer_gpreg_rx_fb_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL2_ADR)
#define RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL3_REG ((rcs_timer_gpreg_rx_fb_bfn_cap_val_reg_t*) RCS_TIMER_GPREG_RX_FB_BFN_CAP_VAL3_ADR)

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    rcs_timer_gpreg_ssp_cs_mux_15_8_reg_t SSP_CS_MUX_15_8; /*< Address offset = 0x0 */
    rcs_timer_gpreg_ssp_cs_mux_7_0_r_reg_t SSP_CS_MUX_7_0_R; /*< Address offset = 0x4 */
    rcs_timer_gpreg_ssp_cs_gpio_mux_reg_t SSP_CS_GPIO_MUX; /*< Address offset = 0x8 */
    rcs_timer_gpreg_ssp_dma_trig_gpio_sel_reg_t SSP_DMA_TRIG_GPIO_SEL; /*< Address offset = 0xc */
    rcs_timer_gpreg_core_dma_trig_gpio_sel_reg_t CORE_DMA_TRIG_GPIO_SEL; /*< Address offset = 0x10 */
    rcs_timer_gpreg_lcnt_inc_reg_t LCNT_INC;        /*< Address offset = 0x14 */
    rcs_timer_gpreg_ten_ms_cnt_reg_t TEN_MS_CNT;      /*< Address offset = 0x18 */
    rcs_timer_gpreg_inc_pre_reg0_reg_t INC_PRE_REG0;    /*< Address offset = 0x1c */
    rcs_timer_gpreg_inc_pre_reg1_reg_t INC_PRE_REG1;    /*< Address offset = 0x20 */
    rcs_timer_gpreg_cnt_adj_reg0_reg_t CNT_ADJ_REG0;    /*< Address offset = 0x24 */
    rcs_timer_gpreg_cnt_adj_reg1_reg_t CNT_ADJ_REG1;    /*< Address offset = 0x28 */
    rcs_timer_gpreg_bfn_capt_cfg1_reg_t BFN_CAPT_CFG1;   /*< Address offset = 0x2c */
    rcs_timer_gpreg_bfn_capt_cfg2_reg_t BFN_CAPT_CFG2;   /*< Address offset = 0x30 */
    rcs_timer_gpreg_bfn_capt_int_mask_reg_t BFN_CAPT_INT_MASK; /*< Address offset = 0x34 */
    rcs_timer_gpreg_bfn_time_capt_stat_reg_t BFN_TIME_CAPT_STAT; /*< Address offset = 0x38 */
    rcs_timer_gpreg_ictrl_reg_t ICTRL;           /*< Address offset = 0x3c */
    rcs_timer_gpreg_opps_val_timesync_ctrl_reg_t OPPS_VAL_TIMESYNC_CTRL; /*< Address offset = 0x40 */
    rcs_timer_gpreg_bfn_cnt_lo_reg_t BFN_CNT_LO;      /*< Address offset = 0x44 */
    rcs_timer_gpreg_bfn_cnt_hi_reg_t BFN_CNT_HI;      /*< Address offset = 0x48 */
    rcs_timer_gpreg_bfn_live_cnt_lo_reg_t BFN_LIVE_CNT_LO; /*< Address offset = 0x4c */
    rcs_timer_gpreg_bfn_live_cnt_hi_reg_t BFN_LIVE_CNT_HI; /*< Address offset = 0x50 */
    rcs_timer_gpreg_bfn_cnt_val1_reg0_reg_t BFN_CNT_VAL1_REG0; /*< Address offset = 0x54 */
    rcs_timer_gpreg_bfn_cnt_val1_reg1_reg_t BFN_CNT_VAL1_REG1; /*< Address offset = 0x58 */
    rcs_timer_gpreg_bfn_cnt_val2_reg0_reg_t BFN_CNT_VAL2_REG0; /*< Address offset = 0x5c */
    rcs_timer_gpreg_bfn_cnt_val2_reg1_reg_t BFN_CNT_VAL2_REG1; /*< Address offset = 0x60 */
    rcs_timer_gpreg_tx_en_bfn_cap_val_reg_t TX_EN_BFN_CAP_VAL[4]; /*< Address offset = 0x64 */
    rcs_timer_gpreg_rx_en_bfn_cap_val_reg_t RX_EN_BFN_CAP_VAL[4]; /*< Address offset = 0x74 */
    rcs_timer_gpreg_rx_fb_bfn_cap_val_reg_t RX_FB_BFN_CAP_VAL[4]; /*< Address offset = 0x84 */
} rcs_timer_gpreg_t;     // size: 0x0070

// AddressSpace struct pointer
//
#define RCS_TIMER_GPREG  ((rcs_timer_gpreg_t*) RCS_TIMER_GPREG_BASE)

// ******************************************* /Address Space

#endif      // _RCS_TIMER_GPREG_H_

