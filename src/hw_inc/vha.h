#ifndef _VHA_H_
#define _VHA_H_

// ******************************************************************************
// ------------------------------------------------------------------------------
//                               INTEL CONFIDENTIAL
// ------------------------------------------------------------------------------
//    Copyright (c) 2018 - 2024 Intel Corporation
//
//    This software and the related documents are Intel copyrighted materials,
//    and your use of them is governed by the express license under which they
//    were provided to you ("License").
//    Unless the License provides otherwise, you may not use, modify, copy, publish,
//    distribute, disclose or transmit this software or the related documents
//    without Intel's prior written permission.
//
//    This software and the related documents are provided as is, with no express or
//    implied warranties, other than those that are expressly stated in the License.
// ------------------------------------------------------------------------------
//
//    DO NOT EDIT THIS FILE !!!
//
//    This file has been automatically generated by OneSource
//
// ******************************************************************************

#ifndef __KERNEL__
#include <stdint.h>
#endif // __KERNEL__
// ******************************************* Base address macros

#define VHA0_BASE             ( 0x03c0c000 )
#define VHA1_BASE             ( 0x03c2c000 )
#define VHA2_BASE             ( 0x03c4c000 )
#define VHA3_BASE             ( 0x03c6c000 )
#define VHA4_BASE             ( 0x03c8c000 )
#define VHA5_BASE             ( 0x03cac000 )
#define VHA6_BASE             ( 0x03ccc000 )
#define VHA7_BASE             ( 0x03cec000 )

// ******************************************* /Base address macros


// ******************************************* Register offset macros

#define VHA_SCRATCH_OFFSET ( 0x00000000U )
#define VHA_DP_INIT_OFFSET ( 0x00000004U )
#define VHA_CFG_OFFSET ( 0x00000008U )
#define VHA_DL_CTL_OFFSET ( 0x0000000cU )
#define VHA_DL_IF_CFG_OFFSET ( 0x00000010U )
#define VHA_DL_SWG_CFG_OFFSET ( 0x00000014U )
#define VHA_DL_STAT_OFFSET ( 0x00000018U )
#define VHA_UL_CTL_OFFSET ( 0x0000001cU )
#define VHA_UL_IF_CFG_OFFSET ( 0x00000020U )
#define VHA_UL_SWG_CFG_OFFSET ( 0x00000024U )
#define VHA_UL_STAT_OFFSET ( 0x00000028U )
#define VHA_DP_INIT_DONE_OFFSET ( 0x0000002cU )
#define VHA_INT_HIGH_STAT_OFFSET ( 0x00000030U )
#define VHA_INT_LOW_STAT_OFFSET ( 0x00000034U )
#define VHA_APB_BRDG_STAT_OFFSET ( 0x00000038U )

// ******************************************* /Register offset macros


// ******************************************* AddressSpace macros
#define VHA_SCRATCH_ADR(_BASE)  (( ( _BASE ) + ( VHA_SCRATCH_OFFSET ) ))
#define VHA_DP_INIT_ADR(_BASE)  (( ( _BASE ) + ( VHA_DP_INIT_OFFSET ) ))
#define VHA_CFG_ADR(_BASE)   (( ( _BASE ) + ( VHA_CFG_OFFSET ) ))
#define VHA_DL_CTL_ADR(_BASE)   (( ( _BASE ) + ( VHA_DL_CTL_OFFSET ) ))
#define VHA_DL_IF_CFG_ADR(_BASE) (( ( _BASE ) + ( VHA_DL_IF_CFG_OFFSET ) ))
#define VHA_DL_SWG_CFG_ADR(_BASE) (( ( _BASE ) + ( VHA_DL_SWG_CFG_OFFSET ) ))
#define VHA_DL_STAT_ADR(_BASE)  (( ( _BASE ) + ( VHA_DL_STAT_OFFSET ) ))
#define VHA_UL_CTL_ADR(_BASE)   (( ( _BASE ) + ( VHA_UL_CTL_OFFSET ) ))
#define VHA_UL_IF_CFG_ADR(_BASE) (( ( _BASE ) + ( VHA_UL_IF_CFG_OFFSET ) ))
#define VHA_UL_SWG_CFG_ADR(_BASE) (( ( _BASE ) + ( VHA_UL_SWG_CFG_OFFSET ) ))
#define VHA_UL_STAT_ADR(_BASE)  (( ( _BASE ) + ( VHA_UL_STAT_OFFSET ) ))
#define VHA_DP_INIT_DONE_ADR(_BASE) (( ( _BASE ) + ( VHA_DP_INIT_DONE_OFFSET ) ))
#define VHA_INT_HIGH_STAT_ADR(_BASE) (( ( _BASE ) + ( VHA_INT_HIGH_STAT_OFFSET ) ))
#define VHA_INT_LOW_STAT_ADR(_BASE) (( ( _BASE ) + ( VHA_INT_LOW_STAT_OFFSET ) ))
#define VHA_APB_BRDG_STAT_ADR(_BASE) (( ( _BASE ) + ( VHA_APB_BRDG_STAT_OFFSET ) ))

// ******************************************* /Address Space

//************************************************ RegisterStructs


/** @brief VHA_REG_MAP_REG_VHA_SCRATCH register description at address offset 0x0
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_SCRATCH
  * VHA Scratchpad Register
  */

typedef union {
  struct {
    uint32_t SCRATCHPAD : 32;
    ///< Do anything with this field.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
  } ;
  uint32_t value;
} vha_scratch_reg_t;

#define VHA_SCRATCH_DEFAULT (0x00000000U)
#define VHA_SCRATCH_RD_MASK (0xffffffffU)
#define VHA_SCRATCH_WR_MASK (0xffffffffU)


///< Do anything with this field.
#define VHA_SCRATCH_SCRATCHPAD_BF_OFF ( 0)
#define VHA_SCRATCH_SCRATCHPAD_BF_WID (32)
#define VHA_SCRATCH_SCRATCHPAD_BF_MSK (0xFFFFFFFF)
#define VHA_SCRATCH_SCRATCHPAD_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_DP_INIT register description at address offset 0x4
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_DP_INIT
  * VHA Config Register
  */

typedef union {
  struct {
    uint32_t DP_INIT : 1;
    ///< Set to one to initiate datapath init for the entire VHA instance
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t NSIP_HALT : 1;
    ///< Set to one to initiate the HALT sequence on both instances of nsip_hbi.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t  : 30;
    ///< Reserved
    ///< AccessType="RO" BitOffset="2" ResetValue="None"
  } ;
  uint32_t value;
} vha_dp_init_reg_t;

#define VHA_DP_INIT_DEFAULT (0x00000000U)
#define VHA_DP_INIT_RD_MASK (0x00000003U)
#define VHA_DP_INIT_WR_MASK (0x00000003U)


///< Set to one to initiate datapath init for the entire VHA instance
#define VHA_DP_INIT_DP_INIT_BF_OFF ( 0)
#define VHA_DP_INIT_DP_INIT_BF_WID ( 1)
#define VHA_DP_INIT_DP_INIT_BF_MSK (0x00000001)
#define VHA_DP_INIT_DP_INIT_BF_DEF (0x00000000)

///< Set to one to initiate the HALT sequence on both instances of nsip_hbi.
#define VHA_DP_INIT_NSIP_HALT_BF_OFF ( 1)
#define VHA_DP_INIT_NSIP_HALT_BF_WID ( 1)
#define VHA_DP_INIT_NSIP_HALT_BF_MSK (0x00000002)
#define VHA_DP_INIT_NSIP_HALT_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_CONFIG register description at address offset 0x8
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_CONFIG
  * VHA Config Register
  */

typedef union {
  struct {
    uint32_t DL_CLOCK_SELECT : 1;
    ///< Selects clock source for downlink datapath - both antenna's must run
    ///< at the same frequency. Both DL clocks must be disabled when this is
    ///< switched.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t UL_CLOCK_SELECT : 1;
    ///< Selects clock source for uplink datapath - both antenna's must run
    ///< at the same frequency. Both UL clocks must be disabled when this is
    ///< switched.
    ///< AccessType="RW" BitOffset="1" ResetValue="0x0"
    uint32_t DL_CLOCK_ENABLE : 2;
    ///< Set to one to enable clock to the respective antenna's downlink datapath
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t UL_CLOCK_ENABLE : 2;
    ///< Set to one to enable clock to the respective antenna's uplink datapath
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DL_SWG_CLOCK_ENABLE : 1;
    ///< Set to one to enable clock to the downlink Sine Wave Generator
    ///< AccessType="RW" BitOffset="6" ResetValue="0x0"
    uint32_t UL_SWG_CLOCK_ENABLE : 1;
    ///< Set to one to enable clock to the uplink Sine Wave Generator
    ///< AccessType="RW" BitOffset="7" ResetValue="0x0"
    uint32_t CRUX_CLOCK_ENABLE : 2;
    ///< Set to one to enable clock to the respective antenna's crux datapath
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} vha_cfg_reg_t;

#define VHA_CFG_DEFAULT (0x00000000U)
#define VHA_CFG_RD_MASK (0x000003ffU)
#define VHA_CFG_WR_MASK (0x000003ffU)


///< Selects clock source for downlink datapath - both antenna's must run
///< at the same frequency. Both DL clocks must be disabled when this is
///< switched.
#define VHA_CFG_DL_CLK_SEL_BF_OFF ( 0)
#define VHA_CFG_DL_CLK_SEL_BF_WID ( 1)
#define VHA_CFG_DL_CLK_SEL_BF_MSK (0x00000001)
#define VHA_CFG_DL_CLK_SEL_BF_DEF (0x00000000)

///< Selects clock source for uplink datapath - both antenna's must run
///< at the same frequency. Both UL clocks must be disabled when this is
///< switched.
#define VHA_CFG_UL_CLK_SEL_BF_OFF ( 1)
#define VHA_CFG_UL_CLK_SEL_BF_WID ( 1)
#define VHA_CFG_UL_CLK_SEL_BF_MSK (0x00000002)
#define VHA_CFG_UL_CLK_SEL_BF_DEF (0x00000000)

///< Set to one to enable clock to the respective antenna's downlink datapath
#define VHA_CFG_DL_CLK_EN_BF_OFF ( 2)
#define VHA_CFG_DL_CLK_EN_BF_WID ( 2)
#define VHA_CFG_DL_CLK_EN_BF_MSK (0x0000000C)
#define VHA_CFG_DL_CLK_EN_BF_DEF (0x00000000)

///< Set to one to enable clock to the respective antenna's uplink datapath
#define VHA_CFG_UL_CLK_EN_BF_OFF ( 4)
#define VHA_CFG_UL_CLK_EN_BF_WID ( 2)
#define VHA_CFG_UL_CLK_EN_BF_MSK (0x00000030)
#define VHA_CFG_UL_CLK_EN_BF_DEF (0x00000000)

///< Set to one to enable clock to the downlink Sine Wave Generator
#define VHA_CFG_DL_SWG_CLK_EN_BF_OFF ( 6)
#define VHA_CFG_DL_SWG_CLK_EN_BF_WID ( 1)
#define VHA_CFG_DL_SWG_CLK_EN_BF_MSK (0x00000040)
#define VHA_CFG_DL_SWG_CLK_EN_BF_DEF (0x00000000)

///< Set to one to enable clock to the uplink Sine Wave Generator
#define VHA_CFG_UL_SWG_CLK_EN_BF_OFF ( 7)
#define VHA_CFG_UL_SWG_CLK_EN_BF_WID ( 1)
#define VHA_CFG_UL_SWG_CLK_EN_BF_MSK (0x00000080)
#define VHA_CFG_UL_SWG_CLK_EN_BF_DEF (0x00000000)

///< Set to one to enable clock to the respective antenna's crux datapath
#define VHA_CFG_CRUX_CLK_EN_BF_OFF ( 8)
#define VHA_CFG_CRUX_CLK_EN_BF_WID ( 2)
#define VHA_CFG_CRUX_CLK_EN_BF_MSK (0x00000300)
#define VHA_CFG_CRUX_CLK_EN_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_DL_CTL register description at address offset 0xc
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_DL_CTL
  * VHA Downlink Control
  */

typedef union {
  struct {
    uint32_t DL_IFIFO_ENABLE : 4;
    ///< Set to 1 to enable the Downlink Input FIFO on the repective Antenna/Band
    ///< (bit 0 = Antenna 0/Band 0, bit 1 = Antenna 0/Band 1, bit 2 = Antenna
    ///< 1/Band 0, bit 3 = Antenna 1/Band 1). The enable to the circuit may
    ///< be gated, at teh start, depending on the programmed startup configuration.
    ///< Note that this field is cleared by DP_INIT.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t DL_SWG_ENABLE : 2;
    ///< Set to 1 to enable the respective Sine Wave Generator. The actual
    ///< enable may be gated, at the start, depending on the programmed startup
    ///< configuration. Note that this field is cleared by DP_INIT.
    ///< AccessType="RW/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} vha_dl_ctl_reg_t;

#define VHA_DL_CTL_DEFAULT (0x00000000U)
#define VHA_DL_CTL_RD_MASK (0x0000003fU)
#define VHA_DL_CTL_WR_MASK (0x0000003fU)


///< Set to 1 to enable the Downlink Input FIFO on the repective Antenna/Band
///< (bit 0 = Antenna 0/Band 0, bit 1 = Antenna 0/Band 1, bit 2 = Antenna
///< 1/Band 0, bit 3 = Antenna 1/Band 1). The enable to the circuit may
///< be gated, at teh start, depending on the programmed startup configuration.
///< Note that this field is cleared by DP_INIT.
#define VHA_DL_CTL_DL_IFIFO_EN_BF_OFF ( 0)
#define VHA_DL_CTL_DL_IFIFO_EN_BF_WID ( 4)
#define VHA_DL_CTL_DL_IFIFO_EN_BF_MSK (0x0000000F)
#define VHA_DL_CTL_DL_IFIFO_EN_BF_DEF (0x00000000)

///< Set to 1 to enable the respective Sine Wave Generator. The actual
///< enable may be gated, at the start, depending on the programmed startup
///< configuration. Note that this field is cleared by DP_INIT.
#define VHA_DL_CTL_DL_SWG_EN_BF_OFF ( 4)
#define VHA_DL_CTL_DL_SWG_EN_BF_WID ( 2)
#define VHA_DL_CTL_DL_SWG_EN_BF_MSK (0x00000030)
#define VHA_DL_CTL_DL_SWG_EN_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_DL_IF_CFG register description at address offset 0x10
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_DL_IF_CFG
  * VHA Downlink Input FIFO Config
  */

typedef union {
  struct {
    uint32_t DL_ANT0_BAND0_AF_GATE : 4;
    ///< For each bit that is set to 1, the reading of the Downlink Antenna
    ///< 0 Band 0 Input FIFO will be held until the respective Downlink Input
    ///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
    ///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
    ///< 1/Band 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DL_ANT0_BAND1_AF_GATE : 4;
    ///< For each bit that is set to 1, the reading of the Downlink Antenna
    ///< 0 Band 1 Input FIFO will be held until the respective Downlink Input
    ///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
    ///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
    ///< 1/Band 1).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t DL_ANT1_BAND0_AF_GATE : 4;
    ///< For each bit that is set to 1, the reading of the Downlink Antenna
    ///< 1 Band 0 Input FIFO will be held until the respective Downlink Input
    ///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
    ///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
    ///< 1/Band 1).
    ///< AccessType="RW" BitOffset="8" ResetValue="0x0"
    uint32_t DL_ANT1_BAND1_AF_GATE : 4;
    ///< For each bit that is set to 1, the reading of the Downlink Antenna
    ///< 1 Band 1 Input FIFO will be held until the respective Downlink Input
    ///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
    ///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
    ///< 1/Band 1).
    ///< AccessType="RW" BitOffset="12" ResetValue="0x0"
    uint32_t  : 16;
    ///< Reserved
    ///< AccessType="RO" BitOffset="16" ResetValue="None"
  } ;
  uint32_t value;
} vha_dl_if_cfg_reg_t;

#define VHA_DL_IF_CFG_DEFAULT (0x00000000U)
#define VHA_DL_IF_CFG_RD_MASK (0x0000ffffU)
#define VHA_DL_IF_CFG_WR_MASK (0x0000ffffU)


///< For each bit that is set to 1, the reading of the Downlink Antenna
///< 0 Band 0 Input FIFO will be held until the respective Downlink Input
///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
///< 1/Band 1).
#define VHA_DL_IF_CFG_DL_ANT0_BAND0_AF_GATE_BF_OFF ( 0)
#define VHA_DL_IF_CFG_DL_ANT0_BAND0_AF_GATE_BF_WID ( 4)
#define VHA_DL_IF_CFG_DL_ANT0_BAND0_AF_GATE_BF_MSK (0x0000000F)
#define VHA_DL_IF_CFG_DL_ANT0_BAND0_AF_GATE_BF_DEF (0x00000000)

///< For each bit that is set to 1, the reading of the Downlink Antenna
///< 0 Band 1 Input FIFO will be held until the respective Downlink Input
///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
///< 1/Band 1).
#define VHA_DL_IF_CFG_DL_ANT0_BAND1_AF_GATE_BF_OFF ( 4)
#define VHA_DL_IF_CFG_DL_ANT0_BAND1_AF_GATE_BF_WID ( 4)
#define VHA_DL_IF_CFG_DL_ANT0_BAND1_AF_GATE_BF_MSK (0x000000F0)
#define VHA_DL_IF_CFG_DL_ANT0_BAND1_AF_GATE_BF_DEF (0x00000000)

///< For each bit that is set to 1, the reading of the Downlink Antenna
///< 1 Band 0 Input FIFO will be held until the respective Downlink Input
///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
///< 1/Band 1).
#define VHA_DL_IF_CFG_DL_ANT1_BAND0_AF_GATE_BF_OFF ( 8)
#define VHA_DL_IF_CFG_DL_ANT1_BAND0_AF_GATE_BF_WID ( 4)
#define VHA_DL_IF_CFG_DL_ANT1_BAND0_AF_GATE_BF_MSK (0x00000F00)
#define VHA_DL_IF_CFG_DL_ANT1_BAND0_AF_GATE_BF_DEF (0x00000000)

///< For each bit that is set to 1, the reading of the Downlink Antenna
///< 1 Band 1 Input FIFO will be held until the respective Downlink Input
///< FIFO has reached its almost full status. (bit 0 = Antenna 0/Band 0,
///< bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
///< 1/Band 1).
#define VHA_DL_IF_CFG_DL_ANT1_BAND1_AF_GATE_BF_OFF (12)
#define VHA_DL_IF_CFG_DL_ANT1_BAND1_AF_GATE_BF_WID ( 4)
#define VHA_DL_IF_CFG_DL_ANT1_BAND1_AF_GATE_BF_MSK (0x0000F000)
#define VHA_DL_IF_CFG_DL_ANT1_BAND1_AF_GATE_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_DL_SWG_CFG register description at address offset 0x14
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_DL_SWG_CFG
  * VHA Downlink Sine Wave Generator Config
  */

typedef union {
  struct {
    uint32_t DL_SWG0_AF_GATE : 4;
    ///< For each bit that is set to 1, the enable of the Sine Wave Generator
    ///< will be held until the respective Downlink Input FIFO has reached
    ///< its almost full status. (bit 0 = Antenna 0/Band 0, bit 1 = Antenna
    ///< 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna 1/Band 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t DL_SWG1_AF_GATE : 4;
    ///< For each bit that is set to 1, the enable of the Sine Wave Generator
    ///< will be held until the respective Downlink Input FIFO has reached
    ///< its almost full status. (bit 0 = Antenna 0/Band 0, bit 1 = Antenna
    ///< 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna 1/Band 1).
    ///< AccessType="RW" BitOffset="4" ResetValue="0x0"
    uint32_t  : 24;
    ///< Reserved
    ///< AccessType="RO" BitOffset="8" ResetValue="None"
  } ;
  uint32_t value;
} vha_dl_swg_cfg_reg_t;

#define VHA_DL_SWG_CFG_DEFAULT (0x00000000U)
#define VHA_DL_SWG_CFG_RD_MASK (0x000000ffU)
#define VHA_DL_SWG_CFG_WR_MASK (0x000000ffU)


///< For each bit that is set to 1, the enable of the Sine Wave Generator
///< will be held until the respective Downlink Input FIFO has reached
///< its almost full status. (bit 0 = Antenna 0/Band 0, bit 1 = Antenna
///< 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna 1/Band 1).
#define VHA_DL_SWG_CFG_DL_SWG0_AF_GATE_BF_OFF ( 0)
#define VHA_DL_SWG_CFG_DL_SWG0_AF_GATE_BF_WID ( 4)
#define VHA_DL_SWG_CFG_DL_SWG0_AF_GATE_BF_MSK (0x0000000F)
#define VHA_DL_SWG_CFG_DL_SWG0_AF_GATE_BF_DEF (0x00000000)

///< For each bit that is set to 1, the enable of the Sine Wave Generator
///< will be held until the respective Downlink Input FIFO has reached
///< its almost full status. (bit 0 = Antenna 0/Band 0, bit 1 = Antenna
///< 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna 1/Band 1).
#define VHA_DL_SWG_CFG_DL_SWG1_AF_GATE_BF_OFF ( 4)
#define VHA_DL_SWG_CFG_DL_SWG1_AF_GATE_BF_WID ( 4)
#define VHA_DL_SWG_CFG_DL_SWG1_AF_GATE_BF_MSK (0x000000F0)
#define VHA_DL_SWG_CFG_DL_SWG1_AF_GATE_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_DL_STAT register description at address offset 0x18
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_DL_STAT
  * VHA Downlink Status
  */

typedef union {
  struct {
    uint32_t DL_EN_STAT : 4;
    ///< Enable status of the Downlink input fifo read process in the respective
    ///< antenna. This bit will toggle high when the enable has been driven
    ///< to read side of the Downlink FIFO. (bit 0 = Antenna 0/Band 0, bit
    ///< 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna 1/Band
    ///< 1).
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t DL_SWG_EN_STAT : 2;
    ///< Run status of the respective cordic of the DL SWG. This bit will toggle
    ///< high when the enable has been driven to the DL SWG block.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DL_IF_AFULL : 4;
    ///< Almost full status of the Downlink input fifo. (bit 0 = Antenna 0/Band
    ///< 0, bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
    ///< 1/Band 1).
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t  : 22;
    ///< Reserved
    ///< AccessType="RO" BitOffset="10" ResetValue="None"
  } ;
  uint32_t value;
} vha_dl_stat_reg_t;

#define VHA_DL_STAT_DEFAULT (0x00000000U)
#define VHA_DL_STAT_RD_MASK (0x000003ffU)
#define VHA_DL_STAT_WR_MASK (0x00000000U)


///< Enable status of the Downlink input fifo read process in the respective
///< antenna. This bit will toggle high when the enable has been driven
///< to read side of the Downlink FIFO. (bit 0 = Antenna 0/Band 0, bit
///< 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna 1/Band
///< 1).
#define VHA_DL_STAT_DL_EN_STAT_BF_OFF ( 0)
#define VHA_DL_STAT_DL_EN_STAT_BF_WID ( 4)
#define VHA_DL_STAT_DL_EN_STAT_BF_MSK (0x0000000F)
#define VHA_DL_STAT_DL_EN_STAT_BF_DEF (0x00000000)

///< Run status of the respective cordic of the DL SWG. This bit will toggle
///< high when the enable has been driven to the DL SWG block.
#define VHA_DL_STAT_DL_SWG_EN_STAT_BF_OFF ( 4)
#define VHA_DL_STAT_DL_SWG_EN_STAT_BF_WID ( 2)
#define VHA_DL_STAT_DL_SWG_EN_STAT_BF_MSK (0x00000030)
#define VHA_DL_STAT_DL_SWG_EN_STAT_BF_DEF (0x00000000)

///< Almost full status of the Downlink input fifo. (bit 0 = Antenna 0/Band
///< 0, bit 1 = Antenna 0/ Band1, bit2 = Antenna 1/Band 0, bit 3 = Antenna
///< 1/Band 1).
#define VHA_DL_STAT_DL_IF_AFULL_BF_OFF ( 6)
#define VHA_DL_STAT_DL_IF_AFULL_BF_WID ( 4)
#define VHA_DL_STAT_DL_IF_AFULL_BF_MSK (0x000003C0)
#define VHA_DL_STAT_DL_IF_AFULL_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_UL_CTL register description at address offset 0x1c
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_UL_CTL
  * VHA Uplink Control
  */

typedef union {
  struct {
    uint32_t UL_IFIFO_ENABLE : 2;
    ///< Set to 1 to enable Uplink input FIFO on the respective antenna path.
    ///< The actual enable may be gated, at the start, depending on the programmed
    ///< startup configuration. Note that this field is cleared by DP_INIT.
    ///< AccessType="RW/V" BitOffset="0" ResetValue="0x0"
    uint32_t UL_SWG_ENABLE : 2;
    ///< Set to 1 to enable the respective Sine Wave Generator. The actual
    ///< enable may be gated, at the start, depending on the programmed startup
    ///< configuration. Note that this field is cleared by DP_INIT.
    ///< AccessType="RW/V" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} vha_ul_ctl_reg_t;

#define VHA_UL_CTL_DEFAULT (0x00000000U)
#define VHA_UL_CTL_RD_MASK (0x0000000fU)
#define VHA_UL_CTL_WR_MASK (0x0000000fU)


///< Set to 1 to enable Uplink input FIFO on the respective antenna path.
///< The actual enable may be gated, at the start, depending on the programmed
///< startup configuration. Note that this field is cleared by DP_INIT.
#define VHA_UL_CTL_UL_IFIFO_EN_BF_OFF ( 0)
#define VHA_UL_CTL_UL_IFIFO_EN_BF_WID ( 2)
#define VHA_UL_CTL_UL_IFIFO_EN_BF_MSK (0x00000003)
#define VHA_UL_CTL_UL_IFIFO_EN_BF_DEF (0x00000000)

///< Set to 1 to enable the respective Sine Wave Generator. The actual
///< enable may be gated, at the start, depending on the programmed startup
///< configuration. Note that this field is cleared by DP_INIT.
#define VHA_UL_CTL_UL_SWG_EN_BF_OFF ( 2)
#define VHA_UL_CTL_UL_SWG_EN_BF_WID ( 2)
#define VHA_UL_CTL_UL_SWG_EN_BF_MSK (0x0000000C)
#define VHA_UL_CTL_UL_SWG_EN_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_UL_IF_CFG register description at address offset 0x20
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_UL_IF_CFG
  * VHA Uplink Input FIFO Config
  */

typedef union {
  struct {
    uint32_t UL_ANT0_AF_GATE : 2;
    ///< For each bit that is set to 1, the readin of the Antenna 0  Uplink
    ///< Input FIFO will be held until the respective Uplink Input FIFO has
    ///< reached its almost full status.
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t UL_ANT1_AF_GATE : 2;
    ///< For each bit that is set to 1, the reading of the Antenna 1 Input
    ///< FIFO will be held until the respective Uplink Input FIFO has reached
    ///< its almost full status.
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} vha_ul_if_cfg_reg_t;

#define VHA_UL_IF_CFG_DEFAULT (0x00000000U)
#define VHA_UL_IF_CFG_RD_MASK (0x0000000fU)
#define VHA_UL_IF_CFG_WR_MASK (0x0000000fU)


///< For each bit that is set to 1, the readin of the Antenna 0  Uplink
///< Input FIFO will be held until the respective Uplink Input FIFO has
///< reached its almost full status.
#define VHA_UL_IF_CFG_UL_ANT0_AF_GATE_BF_OFF ( 0)
#define VHA_UL_IF_CFG_UL_ANT0_AF_GATE_BF_WID ( 2)
#define VHA_UL_IF_CFG_UL_ANT0_AF_GATE_BF_MSK (0x00000003)
#define VHA_UL_IF_CFG_UL_ANT0_AF_GATE_BF_DEF (0x00000000)

///< For each bit that is set to 1, the reading of the Antenna 1 Input
///< FIFO will be held until the respective Uplink Input FIFO has reached
///< its almost full status.
#define VHA_UL_IF_CFG_UL_ANT1_AF_GATE_BF_OFF ( 2)
#define VHA_UL_IF_CFG_UL_ANT1_AF_GATE_BF_WID ( 2)
#define VHA_UL_IF_CFG_UL_ANT1_AF_GATE_BF_MSK (0x0000000C)
#define VHA_UL_IF_CFG_UL_ANT1_AF_GATE_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_UL_SWG_CFG register description at address offset 0x24
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_UL_SWG_CFG
  * VHA Uplink Sine Wave Generator Config
  */

typedef union {
  struct {
    uint32_t UL_SWG0_AF_GATE : 2;
    ///< For each bit that is set to 1, the enable of the Sine Wave Generator
    ///< will be held until the respective Uplink Input FIFO has reached its
    ///< almost full status. (bit 0 = Antenna 0, bit 1 = Antenna 1).
    ///< AccessType="RW" BitOffset="0" ResetValue="0x0"
    uint32_t UL_SWG1_AF_GATE : 2;
    ///< For each bit that is set to 1, the enable of the Sine Wave Generator
    ///< will be held until the respective Upink Input FIFO has reached its
    ///< almost full status. (bit 0 = Antenna 0, bit 1 = Antenna1).
    ///< AccessType="RW" BitOffset="2" ResetValue="0x0"
    uint32_t  : 28;
    ///< Reserved
    ///< AccessType="RO" BitOffset="4" ResetValue="None"
  } ;
  uint32_t value;
} vha_ul_swg_cfg_reg_t;

#define VHA_UL_SWG_CFG_DEFAULT (0x00000000U)
#define VHA_UL_SWG_CFG_RD_MASK (0x0000000fU)
#define VHA_UL_SWG_CFG_WR_MASK (0x0000000fU)


///< For each bit that is set to 1, the enable of the Sine Wave Generator
///< will be held until the respective Uplink Input FIFO has reached its
///< almost full status. (bit 0 = Antenna 0, bit 1 = Antenna 1).
#define VHA_UL_SWG_CFG_UL_SWG0_AF_GATE_BF_OFF ( 0)
#define VHA_UL_SWG_CFG_UL_SWG0_AF_GATE_BF_WID ( 2)
#define VHA_UL_SWG_CFG_UL_SWG0_AF_GATE_BF_MSK (0x00000003)
#define VHA_UL_SWG_CFG_UL_SWG0_AF_GATE_BF_DEF (0x00000000)

///< For each bit that is set to 1, the enable of the Sine Wave Generator
///< will be held until the respective Upink Input FIFO has reached its
///< almost full status. (bit 0 = Antenna 0, bit 1 = Antenna1).
#define VHA_UL_SWG_CFG_UL_SWG1_AF_GATE_BF_OFF ( 2)
#define VHA_UL_SWG_CFG_UL_SWG1_AF_GATE_BF_WID ( 2)
#define VHA_UL_SWG_CFG_UL_SWG1_AF_GATE_BF_MSK (0x0000000C)
#define VHA_UL_SWG_CFG_UL_SWG1_AF_GATE_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_UL_STAT register description at address offset 0x28
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_UL_STAT
  * VHA Uplink Status
  */

typedef union {
  struct {
    uint32_t UL_EN_STAT : 2;
    ///< Enable status of the Uplink input fifo read process in the respective
    ///< antenna. This bit will toggle high when the enable has been driven
    ///< to read side of the Uplink FIFO.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t UL_SWG_EN_STAT : 2;
    ///< Run status of the respective cordic of the UL SWG. This bit will toggle
    ///< high when the enable has been driven to the UL SWG block.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t UL_IF_AFULL : 2;
    ///< Almost full status of the Uplink input fifo in the respective antenna.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} vha_ul_stat_reg_t;

#define VHA_UL_STAT_DEFAULT (0x00000000U)
#define VHA_UL_STAT_RD_MASK (0x0000003fU)
#define VHA_UL_STAT_WR_MASK (0x00000000U)


///< Enable status of the Uplink input fifo read process in the respective
///< antenna. This bit will toggle high when the enable has been driven
///< to read side of the Uplink FIFO.
#define VHA_UL_STAT_UL_EN_STAT_BF_OFF ( 0)
#define VHA_UL_STAT_UL_EN_STAT_BF_WID ( 2)
#define VHA_UL_STAT_UL_EN_STAT_BF_MSK (0x00000003)
#define VHA_UL_STAT_UL_EN_STAT_BF_DEF (0x00000000)

///< Run status of the respective cordic of the UL SWG. This bit will toggle
///< high when the enable has been driven to the UL SWG block.
#define VHA_UL_STAT_UL_SWG_EN_STAT_BF_OFF ( 2)
#define VHA_UL_STAT_UL_SWG_EN_STAT_BF_WID ( 2)
#define VHA_UL_STAT_UL_SWG_EN_STAT_BF_MSK (0x0000000C)
#define VHA_UL_STAT_UL_SWG_EN_STAT_BF_DEF (0x00000000)

///< Almost full status of the Uplink input fifo in the respective antenna.
#define VHA_UL_STAT_UL_IF_AFULL_BF_OFF ( 4)
#define VHA_UL_STAT_UL_IF_AFULL_BF_WID ( 2)
#define VHA_UL_STAT_UL_IF_AFULL_BF_MSK (0x00000030)
#define VHA_UL_STAT_UL_IF_AFULL_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_DP_INIT_DONE register description at address offset 0x2c
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_DP_INIT_DONE
  * VHA Datapath Init Done Status
  */

typedef union {
  struct {
    uint32_t DUC : 4;
    ///< DUC Datapath Init Done Status - 0:1 are antenna 0, 2:3 are antenna
    ///< 1. Note that if the respective clock is disabled, this bit will not
    ///< get set.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t MOD : 2;
    ///< MOD Datapath Init Done - One per antenna. Note that if the respective
    ///< clock is disabled, this bit will not get set.
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t DMOD : 2;
    ///< DMOD Datapath Init Done - One per antenna. Note that if the respective
    ///< clock is disabled, this bit will not get set.
    ///< AccessType="RO/V" BitOffset="6" ResetValue="0x0"
    uint32_t DDC : 4;
    ///< DUC Datapath Init Done Status - 0:1 are antenna 0, 2:3 are antenna
    ///< 1. Note that if the respective clock is disabled, this bit will not
    ///< get set.
    ///< AccessType="RO/V" BitOffset="8" ResetValue="0x0"
    uint32_t NSIP_HBI : 2;
    ///< NSIP Halt Done - One per antenna. Note that if the respective clock
    ///< is disabled, this bit will not get set.
    ///< AccessType="RO/V" BitOffset="12" ResetValue="0x0"
    uint32_t VHA : 1;
    ///< Set when all of the init done bits are set
    ///< AccessType="RO/V" BitOffset="14" ResetValue="0x0"
    uint32_t  : 17;
    ///< Reserved
    ///< AccessType="RO" BitOffset="15" ResetValue="None"
  } ;
  uint32_t value;
} vha_dp_init_done_reg_t;

#define VHA_DP_INIT_DONE_DEFAULT (0x00000000U)
#define VHA_DP_INIT_DONE_RD_MASK (0x00007fffU)
#define VHA_DP_INIT_DONE_WR_MASK (0x00000000U)


///< DUC Datapath Init Done Status - 0:1 are antenna 0, 2:3 are antenna
///< 1. Note that if the respective clock is disabled, this bit will not
///< get set.
#define VHA_DP_INIT_DONE_DUC_BF_OFF ( 0)
#define VHA_DP_INIT_DONE_DUC_BF_WID ( 4)
#define VHA_DP_INIT_DONE_DUC_BF_MSK (0x0000000F)
#define VHA_DP_INIT_DONE_DUC_BF_DEF (0x00000000)

///< MOD Datapath Init Done - One per antenna. Note that if the respective
///< clock is disabled, this bit will not get set.
#define VHA_DP_INIT_DONE_MOD_BF_OFF ( 4)
#define VHA_DP_INIT_DONE_MOD_BF_WID ( 2)
#define VHA_DP_INIT_DONE_MOD_BF_MSK (0x00000030)
#define VHA_DP_INIT_DONE_MOD_BF_DEF (0x00000000)

///< DMOD Datapath Init Done - One per antenna. Note that if the respective
///< clock is disabled, this bit will not get set.
#define VHA_DP_INIT_DONE_DMOD_BF_OFF ( 6)
#define VHA_DP_INIT_DONE_DMOD_BF_WID ( 2)
#define VHA_DP_INIT_DONE_DMOD_BF_MSK (0x000000C0)
#define VHA_DP_INIT_DONE_DMOD_BF_DEF (0x00000000)

///< DUC Datapath Init Done Status - 0:1 are antenna 0, 2:3 are antenna
///< 1. Note that if the respective clock is disabled, this bit will not
///< get set.
#define VHA_DP_INIT_DONE_DDC_BF_OFF ( 8)
#define VHA_DP_INIT_DONE_DDC_BF_WID ( 4)
#define VHA_DP_INIT_DONE_DDC_BF_MSK (0x00000F00)
#define VHA_DP_INIT_DONE_DDC_BF_DEF (0x00000000)

///< NSIP Halt Done - One per antenna. Note that if the respective clock
///< is disabled, this bit will not get set.
#define VHA_DP_INIT_DONE_NSIP_HBI_BF_OFF (12)
#define VHA_DP_INIT_DONE_NSIP_HBI_BF_WID ( 2)
#define VHA_DP_INIT_DONE_NSIP_HBI_BF_MSK (0x00003000)
#define VHA_DP_INIT_DONE_NSIP_HBI_BF_DEF (0x00000000)

///< Set when all of the init done bits are set
#define VHA_DP_INIT_DONE_VHA_BF_OFF (14)
#define VHA_DP_INIT_DONE_VHA_BF_WID ( 1)
#define VHA_DP_INIT_DONE_VHA_BF_MSK (0x00004000)
#define VHA_DP_INIT_DONE_VHA_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_INT_HIGH_STAT register description at address offset 0x30
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_INT_HIGH_STAT
  * VHA High Priority Interrupt Status
  */

typedef union {
  struct {
    uint32_t NSIP : 2;
    ///< Instantaneous Value of NSIP High Priority interrupt bits.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VHA_ANT : 2;
    ///< Instantaneous Value of VHA_ANT High Priority interrupt bits from each
    ///< Antenna.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DL_SWG : 1;
    ///< Instantaneous Value of DL SWG High priority interrupt bit
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t UL_SWG : 1;
    ///< Instantaneous Value of UL SWG High priority interrupt bit
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} vha_int_high_stat_reg_t;

#define VHA_INT_HIGH_STAT_DEFAULT (0x00000000U)
#define VHA_INT_HIGH_STAT_RD_MASK (0x0000003fU)
#define VHA_INT_HIGH_STAT_WR_MASK (0x00000000U)


///< Instantaneous Value of NSIP High Priority interrupt bits.
#define VHA_INT_HIGH_STAT_NSIP_BF_OFF ( 0)
#define VHA_INT_HIGH_STAT_NSIP_BF_WID ( 2)
#define VHA_INT_HIGH_STAT_NSIP_BF_MSK (0x00000003)
#define VHA_INT_HIGH_STAT_NSIP_BF_DEF (0x00000000)

///< Instantaneous Value of VHA_ANT High Priority interrupt bits from each
///< Antenna.
#define VHA_INT_HIGH_STAT_VHA_ANT_BF_OFF ( 2)
#define VHA_INT_HIGH_STAT_VHA_ANT_BF_WID ( 2)
#define VHA_INT_HIGH_STAT_VHA_ANT_BF_MSK (0x0000000C)
#define VHA_INT_HIGH_STAT_VHA_ANT_BF_DEF (0x00000000)

///< Instantaneous Value of DL SWG High priority interrupt bit
#define VHA_INT_HIGH_STAT_DL_SWG_BF_OFF ( 4)
#define VHA_INT_HIGH_STAT_DL_SWG_BF_WID ( 1)
#define VHA_INT_HIGH_STAT_DL_SWG_BF_MSK (0x00000010)
#define VHA_INT_HIGH_STAT_DL_SWG_BF_DEF (0x00000000)

///< Instantaneous Value of UL SWG High priority interrupt bit
#define VHA_INT_HIGH_STAT_UL_SWG_BF_OFF ( 5)
#define VHA_INT_HIGH_STAT_UL_SWG_BF_WID ( 1)
#define VHA_INT_HIGH_STAT_UL_SWG_BF_MSK (0x00000020)
#define VHA_INT_HIGH_STAT_UL_SWG_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_VHA_INT_LOW_STAT register description at address offset 0x34
  *
  * Register default value:        0x00000000
  * Register full path in IP: vha_reg_map/reg/VHA_INT_LOW_STAT
  * VHA Low Priority Interrupt Status
  */

typedef union {
  struct {
    uint32_t NSIP : 2;
    ///< Instantaneous Value of NSIP Low Priority interrupt bits.
    ///< AccessType="RO/V" BitOffset="0" ResetValue="0x0"
    uint32_t VHA_ANT : 2;
    ///< Instantaneous Value of VHA_ANT Low Priority interrupt bits from each
    ///< Antenna.
    ///< AccessType="RO/V" BitOffset="2" ResetValue="0x0"
    uint32_t DL_SWG : 1;
    ///< Instantaneous Value of DL SWG High priority interrupt bit
    ///< AccessType="RO/V" BitOffset="4" ResetValue="0x0"
    uint32_t UL_SWG : 1;
    ///< Instantaneous Value of UL SWG High priority interrupt bit
    ///< AccessType="RO/V" BitOffset="5" ResetValue="0x0"
    uint32_t  : 26;
    ///< Reserved
    ///< AccessType="RO" BitOffset="6" ResetValue="None"
  } ;
  uint32_t value;
} vha_int_low_stat_reg_t;

#define VHA_INT_LOW_STAT_DEFAULT (0x00000000U)
#define VHA_INT_LOW_STAT_RD_MASK (0x0000003fU)
#define VHA_INT_LOW_STAT_WR_MASK (0x00000000U)


///< Instantaneous Value of NSIP Low Priority interrupt bits.
#define VHA_INT_LOW_STAT_NSIP_BF_OFF ( 0)
#define VHA_INT_LOW_STAT_NSIP_BF_WID ( 2)
#define VHA_INT_LOW_STAT_NSIP_BF_MSK (0x00000003)
#define VHA_INT_LOW_STAT_NSIP_BF_DEF (0x00000000)

///< Instantaneous Value of VHA_ANT Low Priority interrupt bits from each
///< Antenna.
#define VHA_INT_LOW_STAT_VHA_ANT_BF_OFF ( 2)
#define VHA_INT_LOW_STAT_VHA_ANT_BF_WID ( 2)
#define VHA_INT_LOW_STAT_VHA_ANT_BF_MSK (0x0000000C)
#define VHA_INT_LOW_STAT_VHA_ANT_BF_DEF (0x00000000)

///< Instantaneous Value of DL SWG High priority interrupt bit
#define VHA_INT_LOW_STAT_DL_SWG_BF_OFF ( 4)
#define VHA_INT_LOW_STAT_DL_SWG_BF_WID ( 1)
#define VHA_INT_LOW_STAT_DL_SWG_BF_MSK (0x00000010)
#define VHA_INT_LOW_STAT_DL_SWG_BF_DEF (0x00000000)

///< Instantaneous Value of UL SWG High priority interrupt bit
#define VHA_INT_LOW_STAT_UL_SWG_BF_OFF ( 5)
#define VHA_INT_LOW_STAT_UL_SWG_BF_WID ( 1)
#define VHA_INT_LOW_STAT_UL_SWG_BF_MSK (0x00000020)
#define VHA_INT_LOW_STAT_UL_SWG_BF_DEF (0x00000000)


/** @brief VHA_REG_MAP_REG_APB_BRIDGE_STATUS register description at address offset 0x38
  *
  * Register default value:        0x00010000
  * Register full path in IP: vha_reg_map/reg/APB_BRIDGE_STATUS
  * VHA APB Bridge Status
  */

typedef union {
  struct {
    uint32_t TIMEOUT_VALUE : 20;
    ///< Number of core clocks to wait before timing out an APB request
    ///< AccessType="RW/L" BitOffset="0" ResetValue="0x10000"
    uint32_t REVISION : 8;
    ///< Module Revision Number
    ///< AccessType="RO" BitOffset="20" ResetValue="0x0"
    uint32_t SW_LOCK_CTRL : 1;
    ///< Block software writes to timeout_value if set
    ///< AccessType="RW/1S/V/L" BitOffset="28" ResetValue="0x0"
    uint32_t UNSOL_ACK : 1;
    ///< An unsolicited acknowledge was received
    ///< AccessType="RW/1C/V" BitOffset="29" ResetValue="0x0"
    uint32_t ACK_ERROR : 1;
    ///< Acknowledgement had error bit set
    ///< AccessType="RW/1C/V" BitOffset="30" ResetValue="0x0"
    uint32_t TIMEOUT : 1;
    ///< An APB request has timed out
    ///< AccessType="RW/1C/V" BitOffset="31" ResetValue="0x0"
  } ;
  uint32_t value;
} vha_apb_brdg_stat_reg_t;

#define VHA_APB_BRDG_STAT_DEFAULT (0x00010000U)
#define VHA_APB_BRDG_STAT_RD_MASK (0xffffffffU)
#define VHA_APB_BRDG_STAT_WR_MASK (0xf00fffffU)


///< Number of core clocks to wait before timing out an APB request
#define VHA_APB_BRDG_STAT_TIMEOUT_VAL_BF_OFF ( 0)
#define VHA_APB_BRDG_STAT_TIMEOUT_VAL_BF_WID (20)
#define VHA_APB_BRDG_STAT_TIMEOUT_VAL_BF_MSK (0x000FFFFF)
#define VHA_APB_BRDG_STAT_TIMEOUT_VAL_BF_DEF (0x00010000)

///< Module Revision Number
#define VHA_APB_BRDG_STAT_REVISION_BF_OFF (20)
#define VHA_APB_BRDG_STAT_REVISION_BF_WID ( 8)
#define VHA_APB_BRDG_STAT_REVISION_BF_MSK (0x0FF00000)
#define VHA_APB_BRDG_STAT_REVISION_BF_DEF (0x00000000)

///< Block software writes to timeout_value if set
#define VHA_APB_BRDG_STAT_SW_LOCK_CTRL_BF_OFF (28)
#define VHA_APB_BRDG_STAT_SW_LOCK_CTRL_BF_WID ( 1)
#define VHA_APB_BRDG_STAT_SW_LOCK_CTRL_BF_MSK (0x10000000)
#define VHA_APB_BRDG_STAT_SW_LOCK_CTRL_BF_DEF (0x00000000)

///< An unsolicited acknowledge was received
#define VHA_APB_BRDG_STAT_UNSOL_ACK_BF_OFF (29)
#define VHA_APB_BRDG_STAT_UNSOL_ACK_BF_WID ( 1)
#define VHA_APB_BRDG_STAT_UNSOL_ACK_BF_MSK (0x20000000)
#define VHA_APB_BRDG_STAT_UNSOL_ACK_BF_DEF (0x00000000)

///< Acknowledgement had error bit set
#define VHA_APB_BRDG_STAT_ACK_ERR_BF_OFF (30)
#define VHA_APB_BRDG_STAT_ACK_ERR_BF_WID ( 1)
#define VHA_APB_BRDG_STAT_ACK_ERR_BF_MSK (0x40000000)
#define VHA_APB_BRDG_STAT_ACK_ERR_BF_DEF (0x00000000)

///< An APB request has timed out
#define VHA_APB_BRDG_STAT_TIMEOUT_BF_OFF (31)
#define VHA_APB_BRDG_STAT_TIMEOUT_BF_WID ( 1)
#define VHA_APB_BRDG_STAT_TIMEOUT_BF_MSK (0x80000000)
#define VHA_APB_BRDG_STAT_TIMEOUT_BF_DEF (0x00000000)

//************************************************ /RegisterStructs


// ******************************************* Register pointer macros

#define VHA_SCRATCH_REG(_BASE) ((vha_scratch_reg_t*) VHA_SCRATCH_ADR(_BASE))
#define VHA_DP_INIT_REG(_BASE) ((vha_dp_init_reg_t*) VHA_DP_INIT_ADR(_BASE))
#define VHA_CFG_REG(_BASE) ((vha_cfg_reg_t*) VHA_CFG_ADR(_BASE))
#define VHA_DL_CTL_REG(_BASE) ((vha_dl_ctl_reg_t*) VHA_DL_CTL_ADR(_BASE))
#define VHA_DL_IF_CFG_REG(_BASE) ((vha_dl_if_cfg_reg_t*) VHA_DL_IF_CFG_ADR(_BASE))
#define VHA_DL_SWG_CFG_REG(_BASE) ((vha_dl_swg_cfg_reg_t*) VHA_DL_SWG_CFG_ADR(_BASE))
#define VHA_DL_STAT_REG(_BASE) ((vha_dl_stat_reg_t*) VHA_DL_STAT_ADR(_BASE))
#define VHA_UL_CTL_REG(_BASE) ((vha_ul_ctl_reg_t*) VHA_UL_CTL_ADR(_BASE))
#define VHA_UL_IF_CFG_REG(_BASE) ((vha_ul_if_cfg_reg_t*) VHA_UL_IF_CFG_ADR(_BASE))
#define VHA_UL_SWG_CFG_REG(_BASE) ((vha_ul_swg_cfg_reg_t*) VHA_UL_SWG_CFG_ADR(_BASE))
#define VHA_UL_STAT_REG(_BASE) ((vha_ul_stat_reg_t*) VHA_UL_STAT_ADR(_BASE))
#define VHA_DP_INIT_DONE_REG(_BASE) ((vha_dp_init_done_reg_t*) VHA_DP_INIT_DONE_ADR(_BASE))
#define VHA_INT_HIGH_STAT_REG(_BASE) ((vha_int_high_stat_reg_t*) VHA_INT_HIGH_STAT_ADR(_BASE))
#define VHA_INT_LOW_STAT_REG(_BASE) ((vha_int_low_stat_reg_t*) VHA_INT_LOW_STAT_ADR(_BASE))
#define VHA_APB_BRDG_STAT_REG(_BASE) ((vha_apb_brdg_stat_reg_t*) VHA_APB_BRDG_STAT_ADR(_BASE))

// ******************************************* /Register pointer macros


// ******************************************* AddressSpace struct
typedef struct
{
    vha_scratch_reg_t VHA_SCRATCH;     /*< Address offset = 0x0 */
    vha_dp_init_reg_t VHA_DP_INIT;     /*< Address offset = 0x4 */
    vha_cfg_reg_t VHA_CFG;      /*< Address offset = 0x8 */
    vha_dl_ctl_reg_t VHA_DL_CTL;      /*< Address offset = 0xc */
    vha_dl_if_cfg_reg_t VHA_DL_IF_CFG;   /*< Address offset = 0x10 */
    vha_dl_swg_cfg_reg_t VHA_DL_SWG_CFG;  /*< Address offset = 0x14 */
    vha_dl_stat_reg_t VHA_DL_STAT;     /*< Address offset = 0x18 */
    vha_ul_ctl_reg_t VHA_UL_CTL;      /*< Address offset = 0x1c */
    vha_ul_if_cfg_reg_t VHA_UL_IF_CFG;   /*< Address offset = 0x20 */
    vha_ul_swg_cfg_reg_t VHA_UL_SWG_CFG;  /*< Address offset = 0x24 */
    vha_ul_stat_reg_t VHA_UL_STAT;     /*< Address offset = 0x28 */
    vha_dp_init_done_reg_t VHA_DP_INIT_DONE; /*< Address offset = 0x2c */
    vha_int_high_stat_reg_t VHA_INT_HIGH_STAT; /*< Address offset = 0x30 */
    vha_int_low_stat_reg_t VHA_INT_LOW_STAT; /*< Address offset = 0x34 */
    vha_apb_brdg_stat_reg_t APB_BRDG_STAT; /*< Address offset = 0x38 */
} vha_t;     // size: 0x003c

// AddressSpace struct pointer
//
#define VHA0             ((vha_t*) VHA0_BASE)
#define VHA1             ((vha_t*) VHA1_BASE)
#define VHA2             ((vha_t*) VHA2_BASE)
#define VHA3             ((vha_t*) VHA3_BASE)
#define VHA4             ((vha_t*) VHA4_BASE)
#define VHA5             ((vha_t*) VHA5_BASE)
#define VHA6             ((vha_t*) VHA6_BASE)
#define VHA7             ((vha_t*) VHA7_BASE)

// ******************************************* /Address Space

#endif      // _VHA_H_

